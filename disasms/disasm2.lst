
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 03 eb 00 00       	call   c000eb23 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 45 02 c0       	mov    eax,0xc0024548
c0000025:	3d 48 45 02 c0       	cmp    eax,0xc0024548
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 45 02 c0       	push   0xc0024548
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 45 02 c0       	mov    eax,0xc0024548
c0000051:	2d 48 45 02 c0       	sub    eax,0xc0024548
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 45 02 c0       	push   0xc0024548
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb e0 07 02 c0       	mov    ebx,0xc00207e0
c0000097:	81 eb dc 07 02 c0    	sub    ebx,0xc00207dc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be dc 07 02 c0       	mov    esi,0xc00207dc
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 45 02 c0       	push   0xc0024548
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 48 45 02 c0       	push   0xc0024548
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 43 4a 01 00       	call   c0014cf0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 d6 2d 01 00       	call   c001309b <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 21 4a 01 00       	call   c0014cf0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 42 4f 01 00       	call   c0015230 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 d5 53 01 00       	call   c00156cc <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 aa e3 00 00       	jmp    c000e729 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 08 02 c0 02 	test   BYTE PTR [edx-0x3ffdf800],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 08 02 c0 01 	test   BYTE PTR [edx-0x3ffdf800],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 08 02 c0 08 	test   BYTE PTR [edx-0x3ffdf800],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 08 02 c0 08 	test   BYTE PTR [edx-0x3ffdf800],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 08 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf800],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 08 02 c0 01 	test   BYTE PTR [edx-0x3ffdf800],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e8e:	e8 d3 d9 00 00       	call   c000e866 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 e0 d8 00 00       	call   c000e808 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 bb d7 00 00       	call   c000e7d2 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 b6 d7 00 00       	call   c000e808 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 ac d6 00 00       	call   c000e7d2 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 c7 d5 00 00       	call   c000e7d2 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 b1 d5 00 00       	call   c000e7d2 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001313:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000136a:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c00013b3:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013ce:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001488:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000148e:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001495:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000155b:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001561:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001568:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 61 02 c0       	mov    edx,0xc0026100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c00016b6:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 04 09 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf6fc]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 99 82 01 00       	jmp    c001a254 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 c3 82 01 00       	jmp    c001a294 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 e4 82 01 00       	jmp    c001a2d4 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 60 0a 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf5a0]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 60 0a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf5a0]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba bc 31 02 c0       	mov    edx,0xc00231bc
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 1c 09 02 c0       	mov    edx,0xc002091c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 22 09 02 c0       	mov    eax,0xc0020922
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf e0 09 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf620]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 2b 09 02 c0       	mov    eax,0xc002092b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 60 0a 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf5a0]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 b0 09 02 c0       	mov    eax,0xc00209b0
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb a0 09 02 c0       	mov    ebx,0xc00209a0
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 80 09 02 c0       	mov    eax,0xc0020980
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 90 09 02 c0       	mov    eax,0xc0020990
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 32 09 02 c0       	mov    edx,0xc0020932
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 3e 09 02 c0       	mov    edx,0xc002093e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 52 09 02 c0       	mov    edx,0xc0020952
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 a3 8a 00 00       	call   c000e8e6 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 9b 8a 00 00       	call   c000e8f6 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 80 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020d80
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 80 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d80
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 80 0b 02 c0       	mov    eax,0xc0020b80
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 c0 0a 02 c0       	mov    eax,0xc0020ac0
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 80 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf580]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 80 0e 02 c0       	push   0xc0020e80
c0006327:	e8 cc 48 01 00       	call   c001abf8 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 8e 0e 02 c0       	push   0xc0020e8e
c000635f:	e8 94 48 01 00       	call   c001abf8 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 fd 47 01 00       	call   c001ab9c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 9d 0e 02 c0       	push   0xc0020e9d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000675b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006765:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000677d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067f6:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c000688d:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068ef:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000692c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069ec:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 a0 0e 02 c0       	push   0xc0020ea0
c0006a0f:	e8 e4 41 01 00       	call   c001abf8 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 f2 41 01 00       	call   c001ac14 <iso_kprintfd>
c0006a22:	c7 04 24 a5 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ea5
c0006a29:	e8 ca 41 01 00       	call   c001abf8 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a35:	e8 da 41 01 00       	call   c001ac14 <iso_kprintfd>
c0006a3a:	c7 04 24 ab 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eab
c0006a41:	e8 b2 41 01 00       	call   c001abf8 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a4d:	e8 c2 41 01 00       	call   c001ac14 <iso_kprintfd>
c0006a52:	c7 04 24 b1 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eb1
c0006a59:	e8 9a 41 01 00       	call   c001abf8 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a65:	e8 aa 41 01 00       	call   c001ac14 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006acb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 9d 0e 02 c0       	push   0xc0020e9d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006c0a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006c10:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 ba 0e 02 c0       	push   0xc0020eba
c0006c32:	e8 c1 3f 01 00       	call   c001abf8 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c67:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 c5 0e 02 c0       	push   0xc0020ec5
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 cc 0e 02 c0       	push   0xc0020ecc
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006d05:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d28:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 d3 0e 02 c0       	push   0xc0020ed3
c0006d49:	e8 aa 3e 01 00       	call   c001abf8 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 de 0e 02 c0       	push   0xc0020ede
c0006d64:	e8 8f 3e 01 00       	call   c001abf8 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 65 02 c0       	push   0xc0026540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 53 7b 00 00       	call   c000e8e6 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d9f:	e8 42 7b 00 00       	call   c000e8e6 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 2d 7b 00 00       	call   c000e8e6 <malloc>
c0006db9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 14 7b 00 00       	call   c000e8e6 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006dff:	e8 f2 7a 00 00       	call   c000e8f6 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 e4 7a 00 00       	call   c000e8f6 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 ca 7a 00 00       	call   c000e8f6 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 b5 7a 00 00       	call   c000e8f6 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 f0 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf110]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 40 10 02 c0       	push   0xc0021040
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 54 10 02 c0       	push   0xc0021054
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 5e 10 02 c0       	push   0xc002105e
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 68 10 02 c0       	push   0xc0021068
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 ac 11 02 c0       	push   0xc00211ac
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 72 10 02 c0       	push   0xc0021072
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 cc 11 02 c0       	push   0xc00211cc
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 87 10 02 c0       	push   0xc0021087
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 a1 10 02 c0       	push   0xc00210a1
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 00 3b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc500]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 f4 11 02 c0       	push   0xc00211f4
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 ac 11 02 c0       	push   0xc00211ac
c00071bc:	e8 79 7a 00 00       	call   c000ec3a <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 3c 12 02 c0       	push   0xc002123c
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 3c 12 02 c0       	push   0xc002123c
c00071eb:	e8 4a 7a 00 00       	call   c000ec3a <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 ac 10 02 c0       	push   0xc00210ac
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 ac 10 02 c0       	push   0xc00210ac
c0007217:	e8 1e 7a 00 00       	call   c000ec3a <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 c9 10 02 c0       	push   0xc00210c9
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 c9 10 02 c0       	push   0xc00210c9
c0007243:	e8 f2 79 00 00       	call   c000ec3a <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 5c 12 02 c0       	push   0xc002125c
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 5c 12 02 c0       	push   0xc002125c
c000726f:	e8 c6 79 00 00       	call   c000ec3a <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 80 12 02 c0       	push   0xc0021280
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 80 12 02 c0       	push   0xc0021280
c000729b:	e8 9a 79 00 00       	call   c000ec3a <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 e5 10 02 c0       	push   0xc00210e5
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 e5 10 02 c0       	push   0xc00210e5
c00072c7:	e8 6e 79 00 00       	call   c000ec3a <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 01 11 02 c0       	push   0xc0021101
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 01 11 02 c0       	push   0xc0021101
c00072f3:	e8 42 79 00 00       	call   c000ec3a <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 a0 12 02 c0       	push   0xc00212a0
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 a0 12 02 c0       	push   0xc00212a0
c000731f:	e8 16 79 00 00       	call   c000ec3a <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 c4 12 02 c0       	push   0xc00212c4
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 c4 12 02 c0       	push   0xc00212c4
c000734b:	e8 ea 78 00 00       	call   c000ec3a <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 34 75 00 00       	call   c000e8e6 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073bb:	68 e3 12 02 c0       	push   0xc00212e3
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 44 0d 00 00       	call   c000810c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 01 13 02 c0       	push   0xc0021301
c00073d7:	e8 5e 78 00 00       	call   c000ec3a <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 41 0d 00 00       	call   c000812a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 1b 13 02 c0       	push   0xc002131b
c00073f8:	e8 3d 78 00 00       	call   c000ec3a <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 35 13 02 c0       	push   0xc0021335
c000743f:	e8 f6 77 00 00       	call   c000ec3a <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 4f 13 02 c0       	push   0xc002134f
c000746f:	e8 c6 77 00 00       	call   c000ec3a <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 05 0d 00 00       	call   c0008188 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 30 62 00 00       	call   c000d6f1 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 24 81 00 00       	call   c000f5ff <KeRand()>
c00074db:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 69 13 02 c0       	push   0xc0021369
c0007510:	e8 25 77 00 00       	call   c000ec3a <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c000755b:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 73 02 c0       	push   0xc0027300
c00075d0:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075da:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 e6 4e 00 00       	call   c000c4dd <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 e3 72 00 00       	call   c000e8e6 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000760c:	68 e3 12 02 c0       	push   0xc00212e3
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 f3 0a 00 00       	call   c000810c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 72 13 02 c0       	push   0xc0021372
c0007628:	e8 0d 76 00 00       	call   c000ec3a <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 b5 0d 00 00       	call   c00083ee <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 e0 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 8f 13 02 c0       	push   0xc002138f
c0007659:	e8 dc 75 00 00       	call   c000ec3a <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 1e 0b 00 00       	call   c0008188 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 a6 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 ac 13 02 c0       	push   0xc00213ac
c0007693:	e8 a2 75 00 00       	call   c000ec3a <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 84 0a 00 00       	call   c0008188 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007776:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 54 71 00 00       	call   c000e8e6 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000779b:	68 e3 12 02 c0       	push   0xc00212e3
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 64 09 00 00       	call   c000810c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 c7 13 02 c0       	push   0xc00213c7
c00077b7:	e8 7e 74 00 00       	call   c000ec3a <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 24 0c 00 00       	call   c00083ee <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 4f 09 00 00       	call   c000812a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 e2 13 02 c0       	push   0xc00213e2
c00077ea:	e8 4b 74 00 00       	call   c000ec3a <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 39 09 00 00       	call   c0008188 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 1b 09 00 00       	call   c0008188 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 2d 70 00 00       	call   c000e8e6 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 41 08 00 00       	call   c000810c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 4a 08 00 00       	call   c000812a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 b1 0a 00 00       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 8b 07 00 00       	call   c0008188 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 72 07 00 00       	call   c0008188 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 a3 6e 00 00       	call   c000e8e6 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 b9 06 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be fd 13 02 c0       	mov    esi,0xc00213fd
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 4e 06 00 00       	call   c0008188 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 36 06 00 00       	call   c0008188 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba bc 14 02 c0       	mov    edx,0xc00214bc
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 a3 a0 00 00       	call   c0011d78 <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 62 49 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba d8 14 02 c0       	mov    edx,0xc00214d8
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 55 a0 00 00       	call   c0011d78 <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 14 49 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba 50 14 02 c0       	mov    edx,0xc0021450
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba 50 14 02 c0       	mov    edx,0xc0021450
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 be 48 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 06 6b 00 00       	call   c000e8e6 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 0c 26 01 00       	call   c001a3f4 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 f2 6a 00 00       	call   c000e8e6 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 26 35 01 00       	call   c001b322 <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 15 2b 02 c0       	push   0xc0022b15
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 06 14 02 c0       	push   0xc0021406
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 21 14 02 c0       	push   0xc0021421
c0008018:	e8 1d 6c 00 00       	call   c000ec3a <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 4a 9b 00 00       	call   c0011b92 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba bc 14 02 c0       	mov    edx,0xc00214bc
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000809a:	83 e8 41             	sub    eax,0x41
c000809d:	88 c2                	mov    dl,al
c000809f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080bb:	0f b6 c0             	movzx  eax,al
c00080be:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080c5:	85 c0                	test   eax,eax
c00080c7:	74 3e                	je     c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d3:	0f b6 c0             	movzx  eax,al
c00080d6:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e3:	85 c0                	test   eax,eax
c00080e5:	75 20                	jne    c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f1:	0f b6 c0             	movzx  eax,al
c00080f4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080fb:	83 ec 0c             	sub    esp,0xc
c00080fe:	50                   	push   eax
c00080ff:	e8 1a 1f 00 00       	call   c000a01e <LogicalDisk::mount()>
c0008104:	83 c4 10             	add    esp,0x10
c0008107:	90                   	nop
c0008108:	83 c4 1c             	add    esp,0x1c
c000810b:	c3                   	ret    

c000810c <File::File(char const*, Process*)>:
c000810c:	83 ec 0c             	sub    esp,0xc
c000810f:	6a 01                	push   0x1
c0008111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811d:	e8 0c ff ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008122:	83 c4 10             	add    esp,0x10
c0008125:	90                   	nop
c0008126:	83 c4 0c             	add    esp,0xc
c0008129:	c3                   	ret    

c000812a <File::open(FileOpenMode)>:
c000812a:	53                   	push   ebx
c000812b:	b8 0b 00 00 00       	mov    eax,0xb
c0008130:	83 ec 08             	sub    esp,0x8
c0008133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008137:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000813e:	83 fa 19             	cmp    edx,0x19
c0008141:	77 40                	ja     c0008183 <File::open(FileOpenMode)+0x59>
c0008143:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000814a:	85 d2                	test   edx,edx
c000814c:	74 35                	je     c0008183 <File::open(FileOpenMode)+0x59>
c000814e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008154:	85 d2                	test   edx,edx
c0008156:	74 2b                	je     c0008183 <File::open(FileOpenMode)+0x59>
c0008158:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000815c:	b8 06 00 00 00       	mov    eax,0x6
c0008161:	75 20                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c0008163:	8b 02                	mov    eax,DWORD PTR [edx]
c0008165:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000816b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000816f:	51                   	push   ecx
c0008170:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008173:	51                   	push   ecx
c0008174:	52                   	push   edx
c0008175:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008178:	83 c4 10             	add    esp,0x10
c000817b:	85 c0                	test   eax,eax
c000817d:	75 04                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c000817f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008183:	83 c4 08             	add    esp,0x8
c0008186:	5b                   	pop    ebx
c0008187:	c3                   	ret    

c0008188 <File::close()>:
c0008188:	53                   	push   ebx
c0008189:	b8 0b 00 00 00       	mov    eax,0xb
c000818e:	83 ec 08             	sub    esp,0x8
c0008191:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008195:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000819c:	83 f9 19             	cmp    ecx,0x19
c000819f:	77 41                	ja     c00081e2 <File::close()+0x5a>
c00081a1:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081a8:	85 db                	test   ebx,ebx
c00081aa:	74 36                	je     c00081e2 <File::close()+0x5a>
c00081ac:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b3:	74 2d                	je     c00081e2 <File::close()+0x5a>
c00081b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081b9:	b8 05 00 00 00       	mov    eax,0x5
c00081be:	74 22                	je     c00081e2 <File::close()+0x5a>
c00081c0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081c4:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d1:	53                   	push   ebx
c00081d2:	53                   	push   ebx
c00081d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081d5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081db:	50                   	push   eax
c00081dc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081df:	83 c4 10             	add    esp,0x10
c00081e2:	83 c4 08             	add    esp,0x8
c00081e5:	5b                   	pop    ebx
c00081e6:	c3                   	ret    
c00081e7:	90                   	nop

c00081e8 <File::seek(unsigned long long)>:
c00081e8:	56                   	push   esi
c00081e9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ee:	53                   	push   ebx
c00081ef:	51                   	push   ecx
c00081f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00081fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008203:	83 fa 19             	cmp    edx,0x19
c0008206:	77 31                	ja     c0008239 <File::seek(unsigned long long)+0x51>
c0008208:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000820f:	85 d2                	test   edx,edx
c0008211:	74 26                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008213:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008219:	85 d2                	test   edx,edx
c000821b:	74 1c                	je     c0008239 <File::seek(unsigned long long)+0x51>
c000821d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008221:	b8 05 00 00 00       	mov    eax,0x5
c0008226:	74 11                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008228:	8b 02                	mov    eax,DWORD PTR [edx]
c000822a:	53                   	push   ebx
c000822b:	51                   	push   ecx
c000822c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008232:	52                   	push   edx
c0008233:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008236:	83 c4 10             	add    esp,0x10
c0008239:	5a                   	pop    edx
c000823a:	5b                   	pop    ebx
c000823b:	5e                   	pop    esi
c000823c:	c3                   	ret    
c000823d:	90                   	nop

c000823e <File::truncate(unsigned long long)>:
c000823e:	56                   	push   esi
c000823f:	b8 0b 00 00 00       	mov    eax,0xb
c0008244:	53                   	push   ebx
c0008245:	51                   	push   ecx
c0008246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000824a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000824e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008252:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008259:	83 fa 19             	cmp    edx,0x19
c000825c:	77 31                	ja     c000828f <File::truncate(unsigned long long)+0x51>
c000825e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008265:	85 d2                	test   edx,edx
c0008267:	74 26                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008269:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000826f:	85 d2                	test   edx,edx
c0008271:	74 1c                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008273:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008277:	b8 05 00 00 00       	mov    eax,0x5
c000827c:	74 11                	je     c000828f <File::truncate(unsigned long long)+0x51>
c000827e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008280:	53                   	push   ebx
c0008281:	51                   	push   ecx
c0008282:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008288:	52                   	push   edx
c0008289:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	5a                   	pop    edx
c0008290:	5b                   	pop    ebx
c0008291:	5e                   	pop    esi
c0008292:	c3                   	ret    
c0008293:	90                   	nop

c0008294 <File::tell(unsigned long long*)>:
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	b8 0b 00 00 00       	mov    eax,0xb
c000829c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082a7:	83 fa 19             	cmp    edx,0x19
c00082aa:	77 34                	ja     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082ac:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b3:	85 d2                	test   edx,edx
c00082b5:	74 29                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082b7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082bd:	85 d2                	test   edx,edx
c00082bf:	74 1f                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082c1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082c5:	b8 05 00 00 00       	mov    eax,0x5
c00082ca:	74 14                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082cc:	50                   	push   eax
c00082cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00082cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082d9:	52                   	push   edx
c00082da:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082dd:	83 c4 10             	add    esp,0x10
c00082e0:	83 c4 0c             	add    esp,0xc
c00082e3:	c3                   	ret    

c00082e4 <File::rewind()>:
c00082e4:	83 ec 10             	sub    esp,0x10
c00082e7:	6a 00                	push   0x0
c00082e9:	6a 00                	push   0x0
c00082eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ef:	e8 f4 fe ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00082f4:	83 c4 1c             	add    esp,0x1c
c00082f7:	c3                   	ret    

c00082f8 <File::unlink()>:
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	b8 0b 00 00 00       	mov    eax,0xb
c0008300:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008304:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000830b:	83 f9 19             	cmp    ecx,0x19
c000830e:	77 2f                	ja     c000833f <File::unlink()+0x47>
c0008310:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008317:	85 c9                	test   ecx,ecx
c0008319:	74 24                	je     c000833f <File::unlink()+0x47>
c000831b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008321:	85 c9                	test   ecx,ecx
c0008323:	74 1a                	je     c000833f <File::unlink()+0x47>
c0008325:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008329:	b8 06 00 00 00       	mov    eax,0x6
c000832e:	75 0f                	jne    c000833f <File::unlink()+0x47>
c0008330:	50                   	push   eax
c0008331:	83 c2 0d             	add    edx,0xd
c0008334:	50                   	push   eax
c0008335:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008337:	52                   	push   edx
c0008338:	51                   	push   ecx
c0008339:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000833c:	83 c4 10             	add    esp,0x10
c000833f:	83 c4 0c             	add    esp,0xc
c0008342:	c3                   	ret    
c0008343:	90                   	nop

c0008344 <File::rename(char const*)>:
c0008344:	83 ec 0c             	sub    esp,0xc
c0008347:	b8 0b 00 00 00       	mov    eax,0xb
c000834c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008350:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008357:	83 f9 19             	cmp    ecx,0x19
c000835a:	77 32                	ja     c000838e <File::rename(char const*)+0x4a>
c000835c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008363:	85 c9                	test   ecx,ecx
c0008365:	74 27                	je     c000838e <File::rename(char const*)+0x4a>
c0008367:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000836d:	85 c9                	test   ecx,ecx
c000836f:	74 1d                	je     c000838e <File::rename(char const*)+0x4a>
c0008371:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008375:	b8 06 00 00 00       	mov    eax,0x6
c000837a:	75 12                	jne    c000838e <File::rename(char const*)+0x4a>
c000837c:	50                   	push   eax
c000837d:	83 c2 0d             	add    edx,0xd
c0008380:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008386:	52                   	push   edx
c0008387:	51                   	push   ecx
c0008388:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000838b:	83 c4 10             	add    esp,0x10
c000838e:	83 c4 0c             	add    esp,0xc
c0008391:	c3                   	ret    

c0008392 <File::chfatattr(unsigned char, unsigned char)>:
c0008392:	57                   	push   edi
c0008393:	b8 0b 00 00 00       	mov    eax,0xb
c0008398:	56                   	push   esi
c0008399:	53                   	push   ebx
c000839a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000839e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083ad:	83 f9 19             	cmp    ecx,0x19
c00083b0:	77 37                	ja     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083b9:	85 c9                	test   ecx,ecx
c00083bb:	74 2c                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c3:	85 c9                	test   ecx,ecx
c00083c5:	74 22                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083cb:	b8 06 00 00 00       	mov    eax,0x6
c00083d0:	75 17                	jne    c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	89 f0                	mov    eax,esi
c00083d4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083d6:	0f b6 db             	movzx  ebx,bl
c00083d9:	0f b6 f0             	movzx  esi,al
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	56                   	push   esi
c00083e0:	53                   	push   ebx
c00083e1:	52                   	push   edx
c00083e2:	51                   	push   ecx
c00083e3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083e6:	83 c4 10             	add    esp,0x10
c00083e9:	5b                   	pop    ebx
c00083ea:	5e                   	pop    esi
c00083eb:	5f                   	pop    edi
c00083ec:	c3                   	ret    
c00083ed:	90                   	nop

c00083ee <File::exists()>:
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	31 c0                	xor    eax,eax
c00083f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083f7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083fe:	83 f9 19             	cmp    ecx,0x19
c0008401:	77 24                	ja     c0008427 <File::exists()+0x39>
c0008403:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000840a:	85 c9                	test   ecx,ecx
c000840c:	74 19                	je     c0008427 <File::exists()+0x39>
c000840e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008414:	85 c9                	test   ecx,ecx
c0008416:	74 0f                	je     c0008427 <File::exists()+0x39>
c0008418:	50                   	push   eax
c0008419:	83 c2 0d             	add    edx,0xd
c000841c:	50                   	push   eax
c000841d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000841f:	52                   	push   edx
c0008420:	51                   	push   ecx
c0008421:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	83 c4 0c             	add    esp,0xc
c000842a:	c3                   	ret    
c000842b:	90                   	nop

c000842c <File::stat(unsigned long long*, bool*)>:
c000842c:	56                   	push   esi
c000842d:	53                   	push   ebx
c000842e:	50                   	push   eax
c000842f:	b8 0b 00 00 00       	mov    eax,0xb
c0008434:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008438:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000843c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008440:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008447:	83 f9 19             	cmp    ecx,0x19
c000844a:	77 3d                	ja     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c000844c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008453:	85 c9                	test   ecx,ecx
c0008455:	74 32                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008457:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000845d:	85 c9                	test   ecx,ecx
c000845f:	74 28                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008461:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008465:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008467:	74 13                	je     c000847c <File::stat(unsigned long long*, bool*)+0x50>
c0008469:	83 ec 04             	sub    esp,0x4
c000846c:	56                   	push   esi
c000846d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008473:	51                   	push   ecx
c0008474:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008477:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000847a:	eb 0a                	jmp    c0008486 <File::stat(unsigned long long*, bool*)+0x5a>
c000847c:	53                   	push   ebx
c000847d:	83 c2 0d             	add    edx,0xd
c0008480:	56                   	push   esi
c0008481:	52                   	push   edx
c0008482:	51                   	push   ecx
c0008483:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008486:	83 c4 10             	add    esp,0x10
c0008489:	5a                   	pop    edx
c000848a:	5b                   	pop    ebx
c000848b:	5e                   	pop    esi
c000848c:	c3                   	ret    

c000848d <Fs::setcwd(Process*, char*)>:
c000848d:	55                   	push   ebp
c000848e:	57                   	push   edi
c000848f:	56                   	push   esi
c0008490:	53                   	push   ebx
c0008491:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008497:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000849e:	6a 00                	push   0x0
c00084a0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084a6:	57                   	push   edi
c00084a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b2:	56                   	push   esi
c00084b3:	e8 48 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084bb:	e8 c0 80 ff ff       	call   c0000580 <strlen>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	83 f8 02             	cmp    eax,0x2
c00084c6:	77 15                	ja     c00084dd <Fs::setcwd(Process*, char*)+0x50>
c00084c8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084cd:	83 eb 41             	sub    ebx,0x41
c00084d0:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084d7:	85 c0                	test   eax,eax
c00084d9:	75 1c                	jne    c00084f7 <Fs::setcwd(Process*, char*)+0x6a>
c00084db:	eb 2f                	jmp    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c00084dd:	83 ec 0c             	sub    esp,0xc
c00084e0:	56                   	push   esi
c00084e1:	e8 9a 80 ff ff       	call   c0000580 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 03             	cmp    eax,0x3
c00084ec:	75 57                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084ee:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f3:	75 50                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084f5:	eb d1                	jmp    c00084c8 <Fs::setcwd(Process*, char*)+0x3b>
c00084f7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c00084fe:	75 0c                	jne    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c0008500:	83 ec 0c             	sub    esp,0xc
c0008503:	50                   	push   eax
c0008504:	e8 15 1b 00 00       	call   c000a01e <LogicalDisk::mount()>
c0008509:	83 c4 10             	add    esp,0x10
c000850c:	83 fb 19             	cmp    ebx,0x19
c000850f:	b8 03 00 00 00       	mov    eax,0x3
c0008514:	0f 87 c6 00 00 00    	ja     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000851a:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008521:	b8 05 00 00 00       	mov    eax,0x5
c0008526:	85 d2                	test   edx,edx
c0008528:	0f 84 b2 00 00 00    	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000852e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008535:	b8 06 00 00 00       	mov    eax,0x6
c000853a:	0f 85 92 00 00 00    	jne    c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c0008540:	e9 9b 00 00 00       	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c0008545:	83 ec 0c             	sub    esp,0xc
c0008548:	68 14 01 00 00       	push   0x114
c000854d:	e8 94 63 00 00       	call   c000e8e6 <malloc>
c0008552:	83 c4 0c             	add    esp,0xc
c0008555:	55                   	push   ebp
c0008556:	56                   	push   esi
c0008557:	50                   	push   eax
c0008558:	89 c3                	mov    ebx,eax
c000855a:	e8 ad fb ff ff       	call   c000810c <File::File(char const*, Process*)>
c000855f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008564:	83 c4 0c             	add    esp,0xc
c0008567:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000856b:	50                   	push   eax
c000856c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008570:	50                   	push   eax
c0008571:	53                   	push   ebx
c0008572:	e8 b5 fe ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0008577:	83 c4 10             	add    esp,0x10
c000857a:	83 f8 02             	cmp    eax,0x2
c000857d:	74 27                	je     c00085a6 <Fs::setcwd(Process*, char*)+0x119>
c000857f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008584:	75 1c                	jne    c00085a2 <Fs::setcwd(Process*, char*)+0x115>
c0008586:	85 db                	test   ebx,ebx
c0008588:	b8 02 00 00 00       	mov    eax,0x2
c000858d:	74 51                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000858f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008591:	83 ec 0c             	sub    esp,0xc
c0008594:	53                   	push   ebx
c0008595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	b8 02 00 00 00       	mov    eax,0x2
c00085a0:	eb 3e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085a2:	85 c0                	test   eax,eax
c00085a4:	74 1c                	je     c00085c2 <Fs::setcwd(Process*, char*)+0x135>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 01 00 00 00       	mov    eax,0x1
c00085ad:	74 31                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 01 00 00 00       	mov    eax,0x1
c00085c0:	eb 1e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 db                	test   ebx,ebx
c00085c4:	74 0c                	je     c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c00085c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085c8:	83 ec 0c             	sub    esp,0xc
c00085cb:	53                   	push   ebx
c00085cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085cf:	83 c4 10             	add    esp,0x10
c00085d2:	50                   	push   eax
c00085d3:	50                   	push   eax
c00085d4:	56                   	push   esi
c00085d5:	57                   	push   edi
c00085d6:	e8 75 80 ff ff       	call   c0000650 <strcpy>
c00085db:	83 c4 10             	add    esp,0x10
c00085de:	31 c0                	xor    eax,eax
c00085e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085e6:	5b                   	pop    ebx
c00085e7:	5e                   	pop    esi
c00085e8:	5f                   	pop    edi
c00085e9:	5d                   	pop    ebp
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <Directory::Directory(char const*, Process*)>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f3:	83 ec 08             	sub    esp,0x8
c00085f6:	6a 00                	push   0x0
c00085f8:	50                   	push   eax
c00085f9:	e8 94 95 00 00       	call   c0011b92 <UnixFile::UnixFile(int)>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	ba d8 14 02 c0       	mov    edx,0xc00214d8
c0008606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000860a:	89 10                	mov    DWORD PTR [eax],edx
c000860c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008611:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008615:	0f 95 c0             	setne  al
c0008618:	0f b6 c0             	movzx  eax,al
c000861b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000861f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008625:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008629:	83 c2 0d             	add    edx,0xd
c000862c:	50                   	push   eax
c000862d:	51                   	push   ecx
c000862e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008632:	52                   	push   edx
c0008633:	e8 c8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008638:	83 c4 10             	add    esp,0x10
c000863b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000863f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008642:	83 e8 41             	sub    eax,0x41
c0008645:	88 c2                	mov    dl,al
c0008647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000864b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008655:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008663:	0f b6 c0             	movzx  eax,al
c0008666:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000866d:	85 c0                	test   eax,eax
c000866f:	74 3e                	je     c00086af <Directory::Directory(char const*, Process*)+0xc3>
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000867b:	0f b6 c0             	movzx  eax,al
c000867e:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008685:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000868b:	85 c0                	test   eax,eax
c000868d:	75 20                	jne    c00086af <Directory::Directory(char const*, Process*)+0xc3>
c000868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008693:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008699:	0f b6 c0             	movzx  eax,al
c000869c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a3:	83 ec 0c             	sub    esp,0xc
c00086a6:	50                   	push   eax
c00086a7:	e8 72 19 00 00       	call   c000a01e <LogicalDisk::mount()>
c00086ac:	83 c4 10             	add    esp,0x10
c00086af:	90                   	nop
c00086b0:	83 c4 0c             	add    esp,0xc
c00086b3:	c3                   	ret    

c00086b4 <Directory::open()>:
c00086b4:	53                   	push   ebx
c00086b5:	b8 0b 00 00 00       	mov    eax,0xb
c00086ba:	83 ec 08             	sub    esp,0x8
c00086bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086c8:	83 fa 19             	cmp    edx,0x19
c00086cb:	77 3d                	ja     c000870a <Directory::open()+0x56>
c00086cd:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086d4:	85 d2                	test   edx,edx
c00086d6:	74 32                	je     c000870a <Directory::open()+0x56>
c00086d8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086de:	85 d2                	test   edx,edx
c00086e0:	74 28                	je     c000870a <Directory::open()+0x56>
c00086e2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086e6:	b8 06 00 00 00       	mov    eax,0x6
c00086eb:	75 1d                	jne    c000870a <Directory::open()+0x56>
c00086ed:	50                   	push   eax
c00086ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00086f0:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f6:	51                   	push   ecx
c00086f7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00086fa:	51                   	push   ecx
c00086fb:	52                   	push   edx
c00086fc:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00086ff:	83 c4 10             	add    esp,0x10
c0008702:	85 c0                	test   eax,eax
c0008704:	75 04                	jne    c000870a <Directory::open()+0x56>
c0008706:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000870a:	83 c4 08             	add    esp,0x8
c000870d:	5b                   	pop    ebx
c000870e:	c3                   	ret    
c000870f:	90                   	nop

c0008710 <Directory::close()>:
c0008710:	53                   	push   ebx
c0008711:	b8 0b 00 00 00       	mov    eax,0xb
c0008716:	83 ec 08             	sub    esp,0x8
c0008719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000871d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008724:	83 f9 19             	cmp    ecx,0x19
c0008727:	77 41                	ja     c000876a <Directory::close()+0x5a>
c0008729:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008730:	85 db                	test   ebx,ebx
c0008732:	74 36                	je     c000876a <Directory::close()+0x5a>
c0008734:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000873b:	74 2d                	je     c000876a <Directory::close()+0x5a>
c000873d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008741:	b8 05 00 00 00       	mov    eax,0x5
c0008746:	74 22                	je     c000876a <Directory::close()+0x5a>
c0008748:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000874c:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008753:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008759:	53                   	push   ebx
c000875a:	53                   	push   ebx
c000875b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000875d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008763:	50                   	push   eax
c0008764:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008767:	83 c4 10             	add    esp,0x10
c000876a:	83 c4 08             	add    esp,0x8
c000876d:	5b                   	pop    ebx
c000876e:	c3                   	ret    
c000876f:	90                   	nop

c0008770 <Directory::unlink()>:
c0008770:	83 ec 0c             	sub    esp,0xc
c0008773:	b8 0b 00 00 00       	mov    eax,0xb
c0008778:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000877c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008783:	83 f9 19             	cmp    ecx,0x19
c0008786:	77 2f                	ja     c00087b7 <Directory::unlink()+0x47>
c0008788:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000878f:	85 c9                	test   ecx,ecx
c0008791:	74 24                	je     c00087b7 <Directory::unlink()+0x47>
c0008793:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008799:	85 c9                	test   ecx,ecx
c000879b:	74 1a                	je     c00087b7 <Directory::unlink()+0x47>
c000879d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087a1:	b8 06 00 00 00       	mov    eax,0x6
c00087a6:	75 0f                	jne    c00087b7 <Directory::unlink()+0x47>
c00087a8:	50                   	push   eax
c00087a9:	83 c2 0d             	add    edx,0xd
c00087ac:	50                   	push   eax
c00087ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087af:	52                   	push   edx
c00087b0:	51                   	push   ecx
c00087b1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087b4:	83 c4 10             	add    esp,0x10
c00087b7:	83 c4 0c             	add    esp,0xc
c00087ba:	c3                   	ret    
c00087bb:	90                   	nop

c00087bc <Directory::rename(char const*)>:
c00087bc:	83 ec 0c             	sub    esp,0xc
c00087bf:	b8 0b 00 00 00       	mov    eax,0xb
c00087c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087cf:	83 f9 19             	cmp    ecx,0x19
c00087d2:	77 32                	ja     c0008806 <Directory::rename(char const*)+0x4a>
c00087d4:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087db:	85 c9                	test   ecx,ecx
c00087dd:	74 27                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087e5:	85 c9                	test   ecx,ecx
c00087e7:	74 1d                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ed:	b8 06 00 00 00       	mov    eax,0x6
c00087f2:	75 12                	jne    c0008806 <Directory::rename(char const*)+0x4a>
c00087f4:	50                   	push   eax
c00087f5:	83 c2 0d             	add    edx,0xd
c00087f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087fe:	52                   	push   edx
c00087ff:	51                   	push   ecx
c0008800:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008803:	83 c4 10             	add    esp,0x10
c0008806:	83 c4 0c             	add    esp,0xc
c0008809:	c3                   	ret    

c000880a <Directory::exists()>:
c000880a:	83 ec 0c             	sub    esp,0xc
c000880d:	31 c0                	xor    eax,eax
c000880f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008813:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000881a:	83 f9 19             	cmp    ecx,0x19
c000881d:	77 24                	ja     c0008843 <Directory::exists()+0x39>
c000881f:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008826:	85 c9                	test   ecx,ecx
c0008828:	74 19                	je     c0008843 <Directory::exists()+0x39>
c000882a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008830:	85 c9                	test   ecx,ecx
c0008832:	74 0f                	je     c0008843 <Directory::exists()+0x39>
c0008834:	50                   	push   eax
c0008835:	83 c2 0d             	add    edx,0xd
c0008838:	50                   	push   eax
c0008839:	8b 01                	mov    eax,DWORD PTR [ecx]
c000883b:	52                   	push   edx
c000883c:	51                   	push   ecx
c000883d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008840:	83 c4 10             	add    esp,0x10
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	c3                   	ret    
c0008847:	90                   	nop

c0008848 <Directory::read(dirent*)>:
c0008848:	83 ec 1c             	sub    esp,0x1c
c000884b:	b8 0b 00 00 00       	mov    eax,0xb
c0008850:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000885b:	83 f9 19             	cmp    ecx,0x19
c000885e:	77 30                	ja     c0008890 <Directory::read(dirent*)+0x48>
c0008860:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008867:	85 c9                	test   ecx,ecx
c0008869:	74 25                	je     c0008890 <Directory::read(dirent*)+0x48>
c000886b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008872:	74 1c                	je     c0008890 <Directory::read(dirent*)+0x48>
c0008874:	83 ec 0c             	sub    esp,0xc
c0008877:	8b 02                	mov    eax,DWORD PTR [edx]
c0008879:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000887d:	51                   	push   ecx
c000887e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008882:	6a 00                	push   0x0
c0008884:	68 10 01 00 00       	push   0x110
c0008889:	52                   	push   edx
c000888a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000888d:	83 c4 20             	add    esp,0x20
c0008890:	83 c4 1c             	add    esp,0x1c
c0008893:	c3                   	ret    

c0008894 <Directory::create()>:
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	b8 0b 00 00 00       	mov    eax,0xb
c000889c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088a7:	83 f9 19             	cmp    ecx,0x19
c00088aa:	77 2f                	ja     c00088db <Directory::create()+0x47>
c00088ac:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b3:	85 c9                	test   ecx,ecx
c00088b5:	74 24                	je     c00088db <Directory::create()+0x47>
c00088b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088bd:	85 c9                	test   ecx,ecx
c00088bf:	74 1a                	je     c00088db <Directory::create()+0x47>
c00088c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088c5:	b8 06 00 00 00       	mov    eax,0x6
c00088ca:	75 0f                	jne    c00088db <Directory::create()+0x47>
c00088cc:	50                   	push   eax
c00088cd:	83 c2 0d             	add    edx,0xd
c00088d0:	50                   	push   eax
c00088d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d3:	52                   	push   edx
c00088d4:	51                   	push   ecx
c00088d5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088d8:	83 c4 10             	add    esp,0x10
c00088db:	83 c4 0c             	add    esp,0xc
c00088de:	c3                   	ret    
c00088df:	90                   	nop

c00088e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e0:	b8 0a 00 00 00       	mov    eax,0xa
c00088e5:	c3                   	ret    
c00088e6:	66 90                	xchg   ax,ax

c00088e8 <Bus::Bus(char const*)>:
c00088e8:	83 ec 0c             	sub    esp,0xc
c00088eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ef:	83 ec 08             	sub    esp,0x8
c00088f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088f6:	50                   	push   eax
c00088f7:	e8 a8 08 00 00       	call   c00091a4 <Device::Device(char const*)>
c00088fc:	83 c4 10             	add    esp,0x10
c00088ff:	ba f4 14 02 c0       	mov    edx,0xc00214f4
c0008904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008908:	89 10                	mov    DWORD PTR [eax],edx
c000890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008918:	90                   	nop
c0008919:	83 c4 0c             	add    esp,0xc
c000891c:	c3                   	ret    
c000891d:	90                   	nop
c000891e:	66 90                	xchg   ax,ax

c0008920 <Bus::~Bus()>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	ba f4 14 02 c0       	mov    edx,0xc00214f4
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	83 ec 0c             	sub    esp,0xc
c0008935:	50                   	push   eax
c0008936:	e8 09 06 00 00       	call   c0008f44 <Device::~Device()>
c000893b:	83 c4 10             	add    esp,0x10
c000893e:	90                   	nop
c000893f:	83 c4 0c             	add    esp,0xc
c0008942:	c3                   	ret    
c0008943:	90                   	nop

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	83 ec 0c             	sub    esp,0xc
c000894a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000894e:	e8 cd ff ff ff       	call   c0008920 <Bus::~Bus()>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 08             	sub    esp,0x8
c0008959:	68 58 01 00 00       	push   0x158
c000895e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008962:	e8 fc 3c 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0008967:	83 c4 10             	add    esp,0x10
c000896a:	83 c4 0c             	add    esp,0xc
c000896d:	c3                   	ret    

c000896e <KeBeepThread(void*)>:
c000896e:	83 ec 0c             	sub    esp,0xc
c0008971:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0008976:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000897a:	48                   	dec    eax
c000897b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0008980:	75 01                	jne    c0008983 <KeBeepThread(void*)+0x15>
c0008982:	fb                   	sti    
c0008983:	6b c2 0a             	imul   eax,edx,0xa
c0008986:	83 ec 0c             	sub    esp,0xc
c0008989:	50                   	push   eax
c000898a:	e8 19 cd 00 00       	call   c00156a8 <milliTenthSleep(unsigned int)>
c000898f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008996:	e8 9b fc 00 00       	call   c0018636 <HalMakeBeep(int)>
c000899b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089a3:	83 c4 1c             	add    esp,0x1c
c00089a6:	e9 e1 cb 00 00       	jmp    c001558c <blockTask(TaskState)>

c00089ab <KeBeep(int, int, bool)>:
c00089ab:	56                   	push   esi
c00089ac:	53                   	push   ebx
c00089ad:	83 ec 10             	sub    esp,0x10
c00089b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 75 fc 00 00       	call   c0018636 <HalMakeBeep(int)>
c00089c1:	89 f0                	mov    eax,esi
c00089c3:	83 c4 10             	add    esp,0x10
c00089c6:	84 c0                	test   al,al
c00089c8:	74 1e                	je     c00089e8 <KeBeep(int, int, bool)+0x3d>
c00089ca:	6b db 0a             	imul   ebx,ebx,0xa
c00089cd:	83 ec 0c             	sub    esp,0xc
c00089d0:	53                   	push   ebx
c00089d1:	e8 d2 cc 00 00       	call   c00156a8 <milliTenthSleep(unsigned int)>
c00089d6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089de:	83 c4 14             	add    esp,0x14
c00089e1:	5b                   	pop    ebx
c00089e2:	5e                   	pop    esi
c00089e3:	e9 4e fc 00 00       	jmp    c0018636 <HalMakeBeep(int)>
c00089e8:	68 e6 00 00 00       	push   0xe6
c00089ed:	53                   	push   ebx
c00089ee:	68 6e 89 00 c0       	push   0xc000896e
c00089f3:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00089f9:	e8 86 c8 00 00       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c00089fe:	83 c4 14             	add    esp,0x14
c0008a01:	5b                   	pop    ebx
c0008a02:	5e                   	pop    esi
c0008a03:	c3                   	ret    

c0008a04 <User::loadClockSettings()>:
c0008a04:	57                   	push   edi
c0008a05:	56                   	push   esi
c0008a06:	53                   	push   ebx
c0008a07:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a0d:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a12:	68 18 15 02 c0       	push   0xc0021518
c0008a17:	e8 a0 3c 00 00       	call   c000c6bc <CmOpen(char const*)>
c0008a1c:	59                   	pop    ecx
c0008a1d:	5e                   	pop    esi
c0008a1e:	89 c3                	mov    ebx,eax
c0008a20:	68 3d 15 02 c0       	push   0xc002153d
c0008a25:	50                   	push   eax
c0008a26:	e8 8c 48 00 00       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a2b:	5f                   	pop    edi
c0008a2c:	5a                   	pop    edx
c0008a2d:	89 c6                	mov    esi,eax
c0008a2f:	50                   	push   eax
c0008a30:	68 52 15 02 c0       	push   0xc0021552
c0008a35:	e8 14 e5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a3a:	83 c4 10             	add    esp,0x10
c0008a3d:	85 f6                	test   esi,esi
c0008a3f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a43:	7e 0c                	jle    c0008a51 <User::loadClockSettings()+0x4d>
c0008a45:	52                   	push   edx
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	e8 de 3d 00 00       	call   c000c82c <CmGetString(Reghive_Tag*, int, char*)>
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	83 ec 0c             	sub    esp,0xc
c0008a54:	53                   	push   ebx
c0008a55:	e8 80 3d 00 00       	call   c000c7da <CmClose(Reghive_Tag*)>
c0008a5a:	83 c4 0c             	add    esp,0xc
c0008a5d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a62:	50                   	push   eax
c0008a63:	57                   	push   edi
c0008a64:	68 60 15 02 c0       	push   0xc0021560
c0008a69:	e8 e0 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a6e:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a72:	83 c4 10             	add    esp,0x10
c0008a75:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a7c:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a7f:	a8 fd                	test   al,0xfd
c0008a81:	75 51                	jne    c0008ad4 <User::loadClockSettings()+0xd0>
c0008a83:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a88:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a8d:	83 fb 2e             	cmp    ebx,0x2e
c0008a90:	75 07                	jne    c0008a99 <User::loadClockSettings()+0x95>
c0008a92:	83 fa 35             	cmp    edx,0x35
c0008a95:	b0 01                	mov    al,0x1
c0008a97:	74 0f                	je     c0008aa8 <User::loadClockSettings()+0xa4>
c0008a99:	31 c0                	xor    eax,eax
c0008a9b:	83 fa 2e             	cmp    edx,0x2e
c0008a9e:	75 08                	jne    c0008aa8 <User::loadClockSettings()+0xa4>
c0008aa0:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aa5:	0f 94 c0             	sete   al
c0008aa8:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008aad:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ab2:	83 e8 30             	sub    eax,0x30
c0008ab5:	6b f0 0a             	imul   esi,eax,0xa
c0008ab8:	83 fa 2e             	cmp    edx,0x2e
c0008abb:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008abf:	0f 44 c3             	cmove  eax,ebx
c0008ac2:	80 f9 2d             	cmp    cl,0x2d
c0008ac5:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008aca:	75 19                	jne    c0008ae5 <User::loadClockSettings()+0xe1>
c0008acc:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad2:	eb 11                	jmp    c0008ae5 <User::loadClockSettings()+0xe1>
c0008ad4:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008adb:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008ae5:	50                   	push   eax
c0008ae6:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008aed:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af0:	50                   	push   eax
c0008af1:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008af7:	68 77 15 02 c0       	push   0xc0021577
c0008afc:	e8 4d e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b01:	81 c4 70 02 00 00    	add    esp,0x270
c0008b07:	5b                   	pop    ebx
c0008b08:	5e                   	pop    esi
c0008b09:	5f                   	pop    edi
c0008b0a:	c3                   	ret    
c0008b0b:	90                   	nop

c0008b0c <Clock::Clock(char const*)>:
c0008b0c:	83 ec 0c             	sub    esp,0xc
c0008b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b13:	83 ec 08             	sub    esp,0x8
c0008b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1a:	50                   	push   eax
c0008b1b:	e8 84 06 00 00       	call   c00091a4 <Device::Device(char const*)>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 90 15 02 c0       	mov    edx,0xc0021590
c0008b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b2c:	89 10                	mov    DWORD PTR [eax],edx
c0008b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b32:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b3c:	90                   	nop
c0008b3d:	83 c4 0c             	add    esp,0xc
c0008b40:	c3                   	ret    
c0008b41:	90                   	nop

c0008b42 <Clock::~Clock()>:
c0008b42:	83 ec 0c             	sub    esp,0xc
c0008b45:	ba 90 15 02 c0       	mov    edx,0xc0021590
c0008b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b4e:	89 10                	mov    DWORD PTR [eax],edx
c0008b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b54:	83 ec 0c             	sub    esp,0xc
c0008b57:	50                   	push   eax
c0008b58:	e8 e7 03 00 00       	call   c0008f44 <Device::~Device()>
c0008b5d:	83 c4 10             	add    esp,0x10
c0008b60:	90                   	nop
c0008b61:	83 c4 0c             	add    esp,0xc
c0008b64:	c3                   	ret    
c0008b65:	90                   	nop

c0008b66 <Clock::~Clock()>:
c0008b66:	83 ec 0c             	sub    esp,0xc
c0008b69:	83 ec 0c             	sub    esp,0xc
c0008b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b70:	e8 cd ff ff ff       	call   c0008b42 <Clock::~Clock()>
c0008b75:	83 c4 10             	add    esp,0x10
c0008b78:	83 ec 08             	sub    esp,0x8
c0008b7b:	68 58 01 00 00       	push   0x158
c0008b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b84:	e8 da 3a 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0008b89:	83 c4 10             	add    esp,0x10
c0008b8c:	83 c4 0c             	add    esp,0xc
c0008b8f:	c3                   	ret    

c0008b90 <Clock::timeInSecondsLocal()>:
c0008b90:	53                   	push   ebx
c0008b91:	83 ec 14             	sub    esp,0x14
c0008b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b98:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b9a:	50                   	push   eax
c0008b9b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008b9e:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008ba5:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008bab:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb1:	89 cb                	mov    ebx,ecx
c0008bb3:	c1 fb 1f             	sar    ebx,0x1f
c0008bb6:	01 c8                	add    eax,ecx
c0008bb8:	11 da                	adc    edx,ebx
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	31 c9                	xor    ecx,ecx
c0008bbf:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bc6:	74 05                	je     c0008bcd <Clock::timeInSecondsLocal()+0x3d>
c0008bc8:	b9 08 07 00 00       	mov    ecx,0x708
c0008bcd:	31 db                	xor    ebx,ebx
c0008bcf:	01 c8                	add    eax,ecx
c0008bd1:	11 da                	adc    edx,ebx
c0008bd3:	83 c4 08             	add    esp,0x8
c0008bd6:	5b                   	pop    ebx
c0008bd7:	c3                   	ret    

c0008bd8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bd8:	57                   	push   edi
c0008bd9:	56                   	push   esi
c0008bda:	53                   	push   ebx
c0008bdb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008bdf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008be7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008be9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bec:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf3:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bf9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008bff:	99                   	cdq    
c0008c00:	29 c6                	sub    esi,eax
c0008c02:	19 d7                	sbb    edi,edx
c0008c04:	89 f0                	mov    eax,esi
c0008c06:	31 f6                	xor    esi,esi
c0008c08:	89 fa                	mov    edx,edi
c0008c0a:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c11:	74 05                	je     c0008c18 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c13:	be 08 07 00 00       	mov    esi,0x708
c0008c18:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c1c:	31 ff                	xor    edi,edi
c0008c1e:	29 f0                	sub    eax,esi
c0008c20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c24:	19 fa                	sbb    edx,edi
c0008c26:	89 d8                	mov    eax,ebx
c0008c28:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c2c:	5b                   	pop    ebx
c0008c2d:	5e                   	pop    esi
c0008c2e:	5f                   	pop    edi
c0008c2f:	ff e0                	jmp    eax

c0008c31 <datetimeToSeconds(datetime_t)>:
c0008c31:	55                   	push   ebp
c0008c32:	57                   	push   edi
c0008c33:	56                   	push   esi
c0008c34:	53                   	push   ebx
c0008c35:	83 ec 0c             	sub    esp,0xc
c0008c38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c40:	89 f7                	mov    edi,esi
c0008c42:	89 f0                	mov    eax,esi
c0008c44:	0f b6 cf             	movzx  ecx,bh
c0008c47:	0f b6 c4             	movzx  eax,ah
c0008c4a:	c1 ef 10             	shr    edi,0x10
c0008c4d:	89 da                	mov    edx,ebx
c0008c4f:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c52:	89 f9                	mov    ecx,edi
c0008c54:	0f b6 f9             	movzx  edi,cl
c0008c57:	89 f1                	mov    ecx,esi
c0008c59:	6b c0 3c             	imul   eax,eax,0x3c
c0008c5c:	0f b6 f1             	movzx  esi,cl
c0008c5f:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c65:	0f b6 db             	movzx  ebx,bl
c0008c68:	c1 ea 10             	shr    edx,0x10
c0008c6b:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c71:	01 f8                	add    eax,edi
c0008c73:	01 f0                	add    eax,esi
c0008c75:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c78:	c1 f8 1f             	sar    eax,0x1f
c0008c7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c7f:	89 e8                	mov    eax,ebp
c0008c81:	0f b6 c0             	movzx  eax,al
c0008c84:	8b 0c 85 e0 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea20]
c0008c8b:	83 f8 01             	cmp    eax,0x1
c0008c8e:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008c92:	0f b7 da             	movzx  ebx,dx
c0008c95:	76 27                	jbe    c0008cbe <datetimeToSeconds(datetime_t)+0x8d>
c0008c97:	80 e2 03             	and    dl,0x3
c0008c9a:	75 22                	jne    c0008cbe <datetimeToSeconds(datetime_t)+0x8d>
c0008c9c:	31 d2                	xor    edx,edx
c0008c9e:	be 64 00 00 00       	mov    esi,0x64
c0008ca3:	89 d8                	mov    eax,ebx
c0008ca5:	f7 f6                	div    esi
c0008ca7:	85 d2                	test   edx,edx
c0008ca9:	75 12                	jne    c0008cbd <datetimeToSeconds(datetime_t)+0x8c>
c0008cab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cb1:	be 90 01 00 00       	mov    esi,0x190
c0008cb6:	99                   	cdq    
c0008cb7:	f7 fe                	idiv   esi
c0008cb9:	85 d2                	test   edx,edx
c0008cbb:	75 01                	jne    c0008cbe <datetimeToSeconds(datetime_t)+0x8d>
c0008cbd:	41                   	inc    ecx
c0008cbe:	83 fb 46             	cmp    ebx,0x46
c0008cc1:	76 48                	jbe    c0008d0b <datetimeToSeconds(datetime_t)+0xda>
c0008cc3:	be 46 00 00 00       	mov    esi,0x46
c0008cc8:	bf 64 00 00 00       	mov    edi,0x64
c0008ccd:	bd 90 01 00 00       	mov    ebp,0x190
c0008cd2:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cd8:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cdd:	75 23                	jne    c0008d02 <datetimeToSeconds(datetime_t)+0xd1>
c0008cdf:	89 f0                	mov    eax,esi
c0008ce1:	99                   	cdq    
c0008ce2:	f7 ff                	idiv   edi
c0008ce4:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ce9:	85 d2                	test   edx,edx
c0008ceb:	75 15                	jne    c0008d02 <datetimeToSeconds(datetime_t)+0xd1>
c0008ced:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cf3:	99                   	cdq    
c0008cf4:	f7 fd                	idiv   ebp
c0008cf6:	83 fa 01             	cmp    edx,0x1
c0008cf9:	19 c0                	sbb    eax,eax
c0008cfb:	f7 d0                	not    eax
c0008cfd:	05 6e 01 00 00       	add    eax,0x16e
c0008d02:	46                   	inc    esi
c0008d03:	01 c1                	add    ecx,eax
c0008d05:	39 de                	cmp    esi,ebx
c0008d07:	7c c9                	jl     c0008cd2 <datetimeToSeconds(datetime_t)+0xa1>
c0008d09:	eb 34                	jmp    c0008d3f <datetimeToSeconds(datetime_t)+0x10e>
c0008d0b:	74 32                	je     c0008d3f <datetimeToSeconds(datetime_t)+0x10e>
c0008d0d:	b8 45 00 00 00       	mov    eax,0x45
c0008d12:	89 c2                	mov    edx,eax
c0008d14:	83 e2 03             	and    edx,0x3
c0008d17:	39 d8                	cmp    eax,ebx
c0008d19:	7e 0f                	jle    c0008d2a <datetimeToSeconds(datetime_t)+0xf9>
c0008d1b:	83 fa 01             	cmp    edx,0x1
c0008d1e:	19 d2                	sbb    edx,edx
c0008d20:	48                   	dec    eax
c0008d21:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d28:	eb e8                	jmp    c0008d12 <datetimeToSeconds(datetime_t)+0xe1>
c0008d2a:	85 d2                	test   edx,edx
c0008d2c:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d31:	75 0a                	jne    c0008d3d <datetimeToSeconds(datetime_t)+0x10c>
c0008d33:	83 fb 01             	cmp    ebx,0x1
c0008d36:	19 c0                	sbb    eax,eax
c0008d38:	05 6e 01 00 00       	add    eax,0x16e
c0008d3d:	29 c1                	sub    ecx,eax
c0008d3f:	b8 80 51 01 00       	mov    eax,0x15180
c0008d44:	f7 e9                	imul   ecx
c0008d46:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d49:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d4d:	83 c4 0c             	add    esp,0xc
c0008d50:	5b                   	pop    ebx
c0008d51:	5e                   	pop    esi
c0008d52:	5f                   	pop    edi
c0008d53:	5d                   	pop    ebp
c0008d54:	c3                   	ret    
c0008d55:	90                   	nop

c0008d56 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d56:	57                   	push   edi
c0008d57:	56                   	push   esi
c0008d58:	53                   	push   ebx
c0008d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d5f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6a:	e8 c2 fe ff ff       	call   c0008c31 <datetimeToSeconds(datetime_t)>
c0008d6f:	59                   	pop    ecx
c0008d70:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d77:	5b                   	pop    ebx
c0008d78:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d7e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d84:	89 cb                	mov    ebx,ecx
c0008d86:	c1 fb 1f             	sar    ebx,0x1f
c0008d89:	29 c8                	sub    eax,ecx
c0008d8b:	19 da                	sbb    edx,ebx
c0008d8d:	31 c9                	xor    ecx,ecx
c0008d8f:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d96:	74 05                	je     c0008d9d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d98:	b9 08 07 00 00       	mov    ecx,0x708
c0008d9d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008da1:	31 db                	xor    ebx,ebx
c0008da3:	29 c8                	sub    eax,ecx
c0008da5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008da9:	19 da                	sbb    edx,ebx
c0008dab:	89 f8                	mov    eax,edi
c0008dad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008db1:	5b                   	pop    ebx
c0008db2:	5e                   	pop    esi
c0008db3:	5f                   	pop    edi
c0008db4:	ff e0                	jmp    eax

c0008db6 <secondsToDatetime(unsigned long long)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 1c             	sub    esp,0x1c
c0008dbd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dc9:	6a 00                	push   0x0
c0008dcb:	68 80 51 01 00       	push   0x15180
c0008dd0:	55                   	push   ebp
c0008dd1:	57                   	push   edi
c0008dd2:	e8 3d 6d 01 00       	call   c001fb14 <__udivdi3>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dde:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008de4:	6a 00                	push   0x0
c0008de6:	68 80 51 01 00       	push   0x15180
c0008deb:	55                   	push   ebp
c0008dec:	57                   	push   edi
c0008ded:	bf 10 0e 00 00       	mov    edi,0xe10
c0008df2:	e8 1d 6e 01 00       	call   c001fc14 <__umoddi3>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	99                   	cdq    
c0008dfb:	f7 ff                	idiv   edi
c0008dfd:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e02:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e05:	89 d0                	mov    eax,edx
c0008e07:	99                   	cdq    
c0008e08:	f7 ff                	idiv   edi
c0008e0a:	85 db                	test   ebx,ebx
c0008e0c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e0f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e12:	79 11                	jns    c0008e25 <secondsToDatetime(unsigned long long)+0x6f>
c0008e14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e18:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e1e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e23:	eb 07                	jmp    c0008e2c <secondsToDatetime(unsigned long long)+0x76>
c0008e25:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e2a:	89 d8                	mov    eax,ebx
c0008e2c:	99                   	cdq    
c0008e2d:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e32:	f7 f9                	idiv   ecx
c0008e34:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e39:	31 d2                	xor    edx,edx
c0008e3b:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e44:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e4c:	01 c3                	add    ebx,eax
c0008e4e:	89 d8                	mov    eax,ebx
c0008e50:	f7 f1                	div    ecx
c0008e52:	31 d2                	xor    edx,edx
c0008e54:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e57:	89 d8                	mov    eax,ebx
c0008e59:	f7 f7                	div    edi
c0008e5b:	31 d2                	xor    edx,edx
c0008e5d:	29 c1                	sub    ecx,eax
c0008e5f:	89 d8                	mov    eax,ebx
c0008e61:	f7 f5                	div    ebp
c0008e63:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e68:	31 d2                	xor    edx,edx
c0008e6a:	29 c1                	sub    ecx,eax
c0008e6c:	89 c8                	mov    eax,ecx
c0008e6e:	f7 f5                	div    ebp
c0008e70:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e75:	31 d2                	xor    edx,edx
c0008e77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e7b:	89 c8                	mov    eax,ecx
c0008e7d:	f7 f5                	div    ebp
c0008e7f:	31 d2                	xor    edx,edx
c0008e81:	01 c3                	add    ebx,eax
c0008e83:	89 c8                	mov    eax,ecx
c0008e85:	f7 f7                	div    edi
c0008e87:	bf 99 00 00 00       	mov    edi,0x99
c0008e8c:	31 d2                	xor    edx,edx
c0008e8e:	29 c3                	sub    ebx,eax
c0008e90:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e98:	29 c3                	sub    ebx,eax
c0008e9a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008e9d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ea0:	83 c1 02             	add    ecx,0x2
c0008ea3:	89 c8                	mov    eax,ecx
c0008ea5:	bb 05 00 00 00       	mov    ebx,0x5
c0008eaa:	f7 f7                	div    edi
c0008eac:	31 d2                	xor    edx,edx
c0008eae:	89 c7                	mov    edi,eax
c0008eb0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eb6:	83 c0 02             	add    eax,0x2
c0008eb9:	f7 f3                	div    ebx
c0008ebb:	89 eb                	mov    ebx,ebp
c0008ebd:	29 c3                	sub    ebx,eax
c0008ebf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec5:	88 1e                	mov    BYTE PTR [esi],bl
c0008ec7:	19 c0                	sbb    eax,eax
c0008ec9:	31 d2                	xor    edx,edx
c0008ecb:	83 e0 0c             	and    eax,0xc
c0008ece:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ed2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008eda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008ede:	83 f9 01             	cmp    ecx,0x1
c0008ee1:	0f 96 c2             	setbe  dl
c0008ee4:	41                   	inc    ecx
c0008ee5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008ee8:	01 d0                	add    eax,edx
c0008eea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008eee:	83 c4 1c             	add    esp,0x1c
c0008ef1:	89 f0                	mov    eax,esi
c0008ef3:	5b                   	pop    ebx
c0008ef4:	5e                   	pop    esi
c0008ef5:	5f                   	pop    edi
c0008ef6:	5d                   	pop    ebp
c0008ef7:	c2 04 00             	ret    0x4

c0008efa <Clock::timeInDatetimeLocal()>:
c0008efa:	53                   	push   ebx
c0008efb:	83 ec 14             	sub    esp,0x14
c0008efe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f06:	e8 85 fc ff ff       	call   c0008b90 <Clock::timeInSecondsLocal()>
c0008f0b:	83 c4 0c             	add    esp,0xc
c0008f0e:	52                   	push   edx
c0008f0f:	50                   	push   eax
c0008f10:	53                   	push   ebx
c0008f11:	e8 a0 fe ff ff       	call   c0008db6 <secondsToDatetime(unsigned long long)>
c0008f16:	89 d8                	mov    eax,ebx
c0008f18:	83 c4 14             	add    esp,0x14
c0008f1b:	5b                   	pop    ebx
c0008f1c:	c2 04 00             	ret    0x4
c0008f1f:	90                   	nop

c0008f20 <Device::hibernate()>:
c0008f20:	c3                   	ret    
c0008f21:	90                   	nop

c0008f22 <Device::wake()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Device::detect()>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Device::disableLegacy()>:
c0008f26:	c3                   	ret    
c0008f27:	90                   	nop

c0008f28 <Device::powerSaving(PowerSavingLevel)>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <DriverlessDevice::close(int, int, void*)>:
c0008f2a:	31 c0                	xor    eax,eax
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop

c0008f2e <DriverlessDevice::detect()>:
c0008f2e:	c3                   	ret    
c0008f2f:	90                   	nop

c0008f30 <DriverlessDevice::open(int, int, void*)>:
c0008f30:	83 ec 18             	sub    esp,0x18
c0008f33:	68 10 16 02 c0       	push   0xc0021610
c0008f38:	e8 fd 5c 00 00       	call   c000ec3a <KePanic(char const*)>
c0008f3d:	83 c8 ff             	or     eax,0xffffffff
c0008f40:	83 c4 1c             	add    esp,0x1c
c0008f43:	c3                   	ret    

c0008f44 <Device::~Device()>:
c0008f44:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c0008f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f4d:	89 10                	mov    DWORD PTR [eax],edx
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop

c0008f52 <Device::~Device()>:
c0008f52:	83 ec 0c             	sub    esp,0xc
c0008f55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f59:	e8 e6 ff ff ff       	call   c0008f44 <Device::~Device()>
c0008f5e:	83 c4 04             	add    esp,0x4
c0008f61:	83 ec 08             	sub    esp,0x8
c0008f64:	68 58 01 00 00       	push   0x158
c0008f69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f6d:	e8 f1 36 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0008f72:	83 c4 10             	add    esp,0x10
c0008f75:	83 c4 0c             	add    esp,0xc
c0008f78:	c3                   	ret    
c0008f79:	90                   	nop

c0008f7a <Device::findAndLoadDriver()>:
c0008f7a:	c7 44 24 04 2e 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002162e
c0008f82:	e9 c7 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008f87:	90                   	nop

c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f88:	57                   	push   edi
c0008f89:	b9 09 00 00 00       	mov    ecx,0x9
c0008f8e:	56                   	push   esi
c0008f8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f93:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f97:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fa1:	81 c7 18 01 00 00    	add    edi,0x118
c0008fa7:	fc                   	cld    
c0008fa8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008faa:	5e                   	pop    esi
c0008fab:	5f                   	pop    edi
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Device::preOpenACPI(void*, char*, char*)>:
c0008fae:	57                   	push   edi
c0008faf:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb4:	56                   	push   esi
c0008fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fc1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fcb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fd1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fd9:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fdf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe3:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fe8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fea:	5e                   	pop    esi
c0008feb:	5f                   	pop    edi
c0008fec:	c3                   	ret    
c0008fed:	90                   	nop

c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008fee:	53                   	push   ebx
c0008fef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ff7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008fff:	0f b6 c0             	movzx  eax,al
c0009002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009006:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000900e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009012:	5b                   	pop    ebx
c0009013:	e9 e7 f9 00 00       	jmp    c00189ff <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009018 <Device::getParent()>:
c0009018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000901c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009022:	c3                   	ret    
c0009023:	90                   	nop

c0009024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009028:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000902c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009031:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009035:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009039:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000903d:	e9 2e fb 00 00       	jmp    c0018b70 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009042 <Device::addChild(Device*)>:
c0009042:	53                   	push   ebx
c0009043:	83 ec 08             	sub    esp,0x8
c0009046:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000904a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000904e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009054:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000905a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000905c:	85 d2                	test   edx,edx
c000905e:	74 04                	je     c0009064 <Device::addChild(Device*)+0x22>
c0009060:	89 d3                	mov    ebx,edx
c0009062:	eb f6                	jmp    c000905a <Device::addChild(Device*)+0x18>
c0009064:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009067:	83 ec 0c             	sub    esp,0xc
c000906a:	6a 08                	push   0x8
c000906c:	e8 75 58 00 00       	call   c000e8e6 <malloc>
c0009071:	89 03                	mov    DWORD PTR [ebx],eax
c0009073:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009079:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009080:	83 c4 18             	add    esp,0x18
c0009083:	5b                   	pop    ebx
c0009084:	c3                   	ret    
c0009085:	90                   	nop

c0009086 <Device::removeAllChildren()>:
c0009086:	56                   	push   esi
c0009087:	53                   	push   ebx
c0009088:	52                   	push   edx
c0009089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000908d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009093:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009096:	74 17                	je     c00090af <Device::removeAllChildren()+0x29>
c0009098:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000909b:	85 c0                	test   eax,eax
c000909d:	74 0c                	je     c00090ab <Device::removeAllChildren()+0x25>
c000909f:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	50                   	push   eax
c00090a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090ad:	eb e4                	jmp    c0009093 <Device::removeAllChildren()+0xd>
c00090af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090c8:	58                   	pop    eax
c00090c9:	5b                   	pop    ebx
c00090ca:	5e                   	pop    esi
c00090cb:	c3                   	ret    

c00090cc <Device::hibernateAll()>:
c00090cc:	53                   	push   ebx
c00090cd:	83 ec 14             	sub    esp,0x14
c00090d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090d6:	53                   	push   ebx
c00090d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090e0:	83 c4 10             	add    esp,0x10
c00090e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e6:	74 0f                	je     c00090f7 <Device::hibernateAll()+0x2b>
c00090e8:	83 ec 0c             	sub    esp,0xc
c00090eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090ee:	e8 d9 ff ff ff       	call   c00090cc <Device::hibernateAll()>
c00090f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f5:	eb e9                	jmp    c00090e0 <Device::hibernateAll()+0x14>
c00090f7:	83 c4 08             	add    esp,0x8
c00090fa:	5b                   	pop    ebx
c00090fb:	c3                   	ret    

c00090fc <Device::wakeAll()>:
c00090fc:	53                   	push   ebx
c00090fd:	83 ec 14             	sub    esp,0x14
c0009100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009106:	53                   	push   ebx
c0009107:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000910a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009116:	74 0f                	je     c0009127 <Device::wakeAll()+0x2b>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 d9 ff ff ff       	call   c00090fc <Device::wakeAll()>
c0009123:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009125:	eb e9                	jmp    c0009110 <Device::wakeAll()+0x14>
c0009127:	83 c4 08             	add    esp,0x8
c000912a:	5b                   	pop    ebx
c000912b:	c3                   	ret    

c000912c <Device::detectAll()>:
c000912c:	53                   	push   ebx
c000912d:	83 ec 14             	sub    esp,0x14
c0009130:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009134:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009136:	53                   	push   ebx
c0009137:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000913a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009140:	83 c4 10             	add    esp,0x10
c0009143:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009146:	74 0f                	je     c0009157 <Device::detectAll()+0x2b>
c0009148:	83 ec 0c             	sub    esp,0xc
c000914b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000914e:	e8 d9 ff ff ff       	call   c000912c <Device::detectAll()>
c0009153:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009155:	eb e9                	jmp    c0009140 <Device::detectAll()+0x14>
c0009157:	83 c4 08             	add    esp,0x8
c000915a:	5b                   	pop    ebx
c000915b:	c3                   	ret    

c000915c <Device::disableLegacyAll()>:
c000915c:	c3                   	ret    
c000915d:	90                   	nop

c000915e <Device::loadDriversForAll()>:
c000915e:	c3                   	ret    
c000915f:	90                   	nop

c0009160 <Device::powerSavingAll(PowerSavingLevel)>:
c0009160:	56                   	push   esi
c0009161:	53                   	push   ebx
c0009162:	83 ec 0c             	sub    esp,0xc
c0009165:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009169:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000916d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000916f:	56                   	push   esi
c0009170:	53                   	push   ebx
c0009171:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009174:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009180:	74 0f                	je     c0009191 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009182:	52                   	push   edx
c0009183:	52                   	push   edx
c0009184:	56                   	push   esi
c0009185:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009188:	e8 d3 ff ff ff       	call   c0009160 <Device::powerSavingAll(PowerSavingLevel)>
c000918d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000918f:	eb e9                	jmp    c000917a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009191:	58                   	pop    eax
c0009192:	5b                   	pop    ebx
c0009193:	5e                   	pop    esi
c0009194:	c3                   	ret    
c0009195:	90                   	nop

c0009196 <Device::setName(char const*)>:
c0009196:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000919e:	e9 ad 74 ff ff       	jmp    c0000650 <strcpy>
c00091a3:	90                   	nop

c00091a4 <Device::Device(char const*)>:
c00091a4:	83 ec 1c             	sub    esp,0x1c
c00091a7:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c00091ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b0:	89 10                	mov    DWORD PTR [eax],edx
c00091b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091ea:	83 ec 08             	sub    esp,0x8
c00091ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f5:	e8 9c ff ff ff       	call   c0009196 <Device::setName(char const*)>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009205:	83 ec 0c             	sub    esp,0xc
c0009208:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000920c:	e8 d5 56 00 00       	call   c000e8e6 <malloc>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000921a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009221:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009225:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000922b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009235:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000923f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009245:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000924c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009250:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009266:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009274:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000927e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009282:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000928c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009290:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000929a:	90                   	nop
c000929b:	83 c4 1c             	add    esp,0x1c
c000929e:	c3                   	ret    
c000929f:	90                   	nop

c00092a0 <Device::getName()>:
c00092a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a4:	05 d0 00 00 00       	add    eax,0xd0
c00092a9:	c3                   	ret    

c00092aa <Device::closeAll()>:
c00092aa:	53                   	push   ebx
c00092ab:	83 ec 08             	sub    esp,0x8
c00092ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092b2:	53                   	push   ebx
c00092b3:	e8 e8 ff ff ff       	call   c00092a0 <Device::getName()>
c00092b8:	52                   	push   edx
c00092b9:	50                   	push   eax
c00092ba:	68 68 16 02 c0       	push   0xc0021668
c00092bf:	e8 8a dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00092c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092c6:	6a 00                	push   0x0
c00092c8:	6a 00                	push   0x0
c00092ca:	6a 00                	push   0x0
c00092cc:	53                   	push   ebx
c00092cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092d6:	83 c4 20             	add    esp,0x20
c00092d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092dc:	74 12                	je     c00092f0 <Device::closeAll()+0x46>
c00092de:	83 ec 0c             	sub    esp,0xc
c00092e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e4:	e8 c1 ff ff ff       	call   c00092aa <Device::closeAll()>
c00092e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092eb:	83 c4 10             	add    esp,0x10
c00092ee:	eb e9                	jmp    c00092d9 <Device::closeAll()+0x2f>
c00092f0:	83 c4 08             	add    esp,0x8
c00092f3:	5b                   	pop    ebx
c00092f4:	c3                   	ret    
c00092f5:	90                   	nop

c00092f6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00092f6:	83 ec 0c             	sub    esp,0xc
c00092f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092fd:	83 ec 08             	sub    esp,0x8
c0009300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009304:	50                   	push   eax
c0009305:	e8 9a fe ff ff       	call   c00091a4 <Device::Device(char const*)>
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c0009312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009316:	89 10                	mov    DWORD PTR [eax],edx
c0009318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009326:	90                   	nop
c0009327:	83 c4 0c             	add    esp,0xc
c000932a:	c3                   	ret    
c000932b:	90                   	nop

c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000932c:	57                   	push   edi
c000932d:	56                   	push   esi
c000932e:	53                   	push   ebx
c000932f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009333:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009337:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000933b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009341:	75 0c                	jne    c000934f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009343:	52                   	push   edx
c0009344:	52                   	push   edx
c0009345:	53                   	push   ebx
c0009346:	56                   	push   esi
c0009347:	e8 40 6a 01 00       	call   c001fd8c <LinkedList<Device>::addElement(Device*)>
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009355:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009358:	74 12                	je     c000936c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000935a:	50                   	push   eax
c000935b:	57                   	push   edi
c000935c:	56                   	push   esi
c000935d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009360:	e8 c7 ff ff ff       	call   c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009365:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	eb e9                	jmp    c0009355 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000936c:	5b                   	pop    ebx
c000936d:	5e                   	pop    esi
c000936e:	5f                   	pop    edi
c000936f:	c3                   	ret    

c0009370 <getDevicesOfType(DeviceType)>:
c0009370:	53                   	push   ebx
c0009371:	83 ec 14             	sub    esp,0x14
c0009374:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009378:	53                   	push   ebx
c0009379:	e8 ea 6a 01 00       	call   c001fe68 <LinkedList<Device>::LinkedList()>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009385:	53                   	push   ebx
c0009386:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000938c:	e8 9b ff ff ff       	call   c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009391:	83 c4 18             	add    esp,0x18
c0009394:	89 d8                	mov    eax,ebx
c0009396:	5b                   	pop    ebx
c0009397:	c2 04 00             	ret    0x4
c000939a:	66 90                	xchg   ax,ax

c000939c <HardDiskController::HardDiskController(char const*)>:
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a3:	83 ec 08             	sub    esp,0x8
c00093a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093aa:	50                   	push   eax
c00093ab:	e8 f4 fd ff ff       	call   c00091a4 <Device::Device(char const*)>
c00093b0:	83 c4 10             	add    esp,0x10
c00093b3:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c00093b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093bc:	89 10                	mov    DWORD PTR [eax],edx
c00093be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093cc:	90                   	nop
c00093cd:	83 c4 0c             	add    esp,0xc
c00093d0:	c3                   	ret    
c00093d1:	90                   	nop
c00093d2:	66 90                	xchg   ax,ax

c00093d4 <HardDiskController::~HardDiskController()>:
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c00093dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e0:	89 10                	mov    DWORD PTR [eax],edx
c00093e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e6:	83 ec 0c             	sub    esp,0xc
c00093e9:	50                   	push   eax
c00093ea:	e8 55 fb ff ff       	call   c0008f44 <Device::~Device()>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	90                   	nop
c00093f3:	83 c4 0c             	add    esp,0xc
c00093f6:	c3                   	ret    
c00093f7:	90                   	nop

c00093f8 <HardDiskController::~HardDiskController()>:
c00093f8:	83 ec 0c             	sub    esp,0xc
c00093fb:	83 ec 0c             	sub    esp,0xc
c00093fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009402:	e8 cd ff ff ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	83 ec 08             	sub    esp,0x8
c000940d:	68 58 01 00 00       	push   0x158
c0009412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009416:	e8 48 32 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000941b:	83 c4 10             	add    esp,0x10
c000941e:	83 c4 0c             	add    esp,0xc
c0009421:	c3                   	ret    

c0009422 <PhysicalDisk::eject()>:
c0009422:	83 c8 ff             	or     eax,0xffffffff
c0009425:	c3                   	ret    

c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009426:	83 ec 0c             	sub    esp,0xc
c0009429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000942d:	83 ec 08             	sub    esp,0x8
c0009430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009434:	50                   	push   eax
c0009435:	e8 6a fd ff ff       	call   c00091a4 <Device::Device(char const*)>
c000943a:	83 c4 10             	add    esp,0x10
c000943d:	ba 38 17 02 c0       	mov    edx,0xc0021738
c0009442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009446:	89 10                	mov    DWORD PTR [eax],edx
c0009448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009457:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009470:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009474:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000947a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009488:	90                   	nop
c0009489:	83 c4 0c             	add    esp,0xc
c000948c:	c3                   	ret    
c000948d:	90                   	nop

c000948e <PhysicalDisk::startCache()>:
c000948e:	56                   	push   esi
c000948f:	53                   	push   ebx
c0009490:	83 ec 10             	sub    esp,0x10
c0009493:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009497:	6a 44                	push   0x44
c0009499:	e8 48 54 00 00       	call   c000e8e6 <malloc>
c000949e:	89 c6                	mov    esi,eax
c00094a0:	58                   	pop    eax
c00094a1:	5a                   	pop    edx
c00094a2:	53                   	push   ebx
c00094a3:	56                   	push   esi
c00094a4:	e8 1b 14 00 00       	call   c000a8c4 <VCache::VCache(PhysicalDisk*)>
c00094a9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094af:	83 c4 14             	add    esp,0x14
c00094b2:	5b                   	pop    ebx
c00094b3:	5e                   	pop    esi
c00094b4:	c3                   	ret    
c00094b5:	90                   	nop

c00094b6 <PhysicalDisk::~PhysicalDisk()>:
c00094b6:	83 ec 0c             	sub    esp,0xc
c00094b9:	ba 38 17 02 c0       	mov    edx,0xc0021738
c00094be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c2:	89 10                	mov    DWORD PTR [eax],edx
c00094c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	50                   	push   eax
c00094cc:	e8 73 fa ff ff       	call   c0008f44 <Device::~Device()>
c00094d1:	83 c4 10             	add    esp,0x10
c00094d4:	90                   	nop
c00094d5:	83 c4 0c             	add    esp,0xc
c00094d8:	c3                   	ret    
c00094d9:	90                   	nop

c00094da <PhysicalDisk::~PhysicalDisk()>:
c00094da:	83 ec 0c             	sub    esp,0xc
c00094dd:	83 ec 0c             	sub    esp,0xc
c00094e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e4:	e8 cd ff ff ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00094e9:	83 c4 10             	add    esp,0x10
c00094ec:	83 ec 08             	sub    esp,0x8
c00094ef:	68 6c 01 00 00       	push   0x16c
c00094f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094f8:	e8 66 31 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c00094fd:	83 c4 10             	add    esp,0x10
c0009500:	83 c4 0c             	add    esp,0xc
c0009503:	c3                   	ret    

c0009504 <startGUI(void*)>:
c0009504:	55                   	push   ebp
c0009505:	89 e5                	mov    ebp,esp
c0009507:	53                   	push   ebx
c0009508:	83 ec 04             	sub    esp,0x4
c000950b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009510:	83 e8 01             	sub    eax,0x1
c0009513:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009518:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000951d:	85 c0                	test   eax,eax
c000951f:	75 01                	jne    c0009522 <startGUI(void*)+0x1e>
c0009521:	fb                   	sti    
c0009522:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009528:	83 ec 08             	sub    esp,0x8
c000952b:	6a 01                	push   0x1
c000952d:	68 68 17 02 c0       	push   0xc0021768
c0009532:	e8 9c b4 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c0009537:	83 c4 10             	add    esp,0x10
c000953a:	83 ec 08             	sub    esp,0x8
c000953d:	53                   	push   ebx
c000953e:	50                   	push   eax
c000953f:	e8 f0 b6 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c0009544:	83 c4 10             	add    esp,0x10
c0009547:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000954d:	83 ec 08             	sub    esp,0x8
c0009550:	6a 01                	push   0x1
c0009552:	68 82 17 02 c0       	push   0xc0021782
c0009557:	e8 77 b4 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c000955c:	83 c4 10             	add    esp,0x10
c000955f:	83 ec 08             	sub    esp,0x8
c0009562:	53                   	push   ebx
c0009563:	50                   	push   eax
c0009564:	e8 cb b6 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c0009569:	83 c4 10             	add    esp,0x10
c000956c:	eb fe                	jmp    c000956c <startGUI(void*)+0x68>

c000956e <startGUIVESA(void*)>:
c000956e:	55                   	push   ebp
c000956f:	89 e5                	mov    ebp,esp
c0009571:	53                   	push   ebx
c0009572:	83 ec 04             	sub    esp,0x4
c0009575:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000957a:	83 e8 01             	sub    eax,0x1
c000957d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009582:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009587:	85 c0                	test   eax,eax
c0009589:	75 01                	jne    c000958c <startGUIVESA(void*)+0x1e>
c000958b:	fb                   	sti    
c000958c:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009592:	83 ec 08             	sub    esp,0x8
c0009595:	6a 01                	push   0x1
c0009597:	68 a0 17 02 c0       	push   0xc00217a0
c000959c:	e8 32 b4 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	83 ec 08             	sub    esp,0x8
c00095a7:	53                   	push   ebx
c00095a8:	50                   	push   eax
c00095a9:	e8 86 b6 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c00095ae:	83 c4 10             	add    esp,0x10
c00095b1:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095b7:	83 ec 08             	sub    esp,0x8
c00095ba:	6a 01                	push   0x1
c00095bc:	68 82 17 02 c0       	push   0xc0021782
c00095c1:	e8 0d b4 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c00095c6:	83 c4 10             	add    esp,0x10
c00095c9:	83 ec 08             	sub    esp,0x8
c00095cc:	53                   	push   ebx
c00095cd:	50                   	push   eax
c00095ce:	e8 61 b6 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c00095d3:	83 c4 10             	add    esp,0x10
c00095d6:	eb fe                	jmp    c00095d6 <startGUIVESA(void*)+0x68>

c00095d8 <sendKeyToTerminal(unsigned char)>:
c00095d8:	55                   	push   ebp
c00095d9:	89 e5                	mov    ebp,esp
c00095db:	83 ec 28             	sub    esp,0x28
c00095de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095e4:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095e9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095ed:	83 ec 08             	sub    esp,0x8
c00095f0:	52                   	push   edx
c00095f1:	50                   	push   eax
c00095f2:	e8 eb 80 00 00       	call   c00116e2 <VgaText::receiveKey(unsigned char)>
c00095f7:	83 c4 10             	add    esp,0x10
c00095fa:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095fe:	83 f8 0a             	cmp    eax,0xa
c0009601:	74 16                	je     c0009619 <sendKeyToTerminal(unsigned char)+0x41>
c0009603:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009607:	83 f8 03             	cmp    eax,0x3
c000960a:	74 0d                	je     c0009619 <sendKeyToTerminal(unsigned char)+0x41>
c000960c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009610:	83 f8 1c             	cmp    eax,0x1c
c0009613:	0f 85 97 00 00 00    	jne    c00096b0 <sendKeyToTerminal(unsigned char)+0xd8>
c0009619:	fa                   	cli    
c000961a:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000961f:	83 c0 01             	add    eax,0x1
c0009622:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009627:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000962c:	83 c0 01             	add    eax,0x1
c000962f:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009634:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0009639:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000963c:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0009646:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000964a:	74 1f                	je     c000966b <sendKeyToTerminal(unsigned char)+0x93>
c000964c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000964f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009652:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009655:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009658:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000965b:	83 ec 0c             	sub    esp,0xc
c000965e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009661:	e8 56 c1 00 00       	call   c00157bc <unblockTask(ThreadControlBlock*)>
c0009666:	83 c4 10             	add    esp,0x10
c0009669:	eb db                	jmp    c0009646 <sendKeyToTerminal(unsigned char)+0x6e>
c000966b:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009670:	83 e8 01             	sub    eax,0x1
c0009673:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009678:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000967d:	85 c0                	test   eax,eax
c000967f:	75 18                	jne    c0009699 <sendKeyToTerminal(unsigned char)+0xc1>
c0009681:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0009686:	85 c0                	test   eax,eax
c0009688:	74 0f                	je     c0009699 <sendKeyToTerminal(unsigned char)+0xc1>
c000968a:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0009694:	e8 37 be 00 00       	call   c00154d0 <schedule()>
c0009699:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000969e:	83 e8 01             	sub    eax,0x1
c00096a1:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00096a6:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00096ab:	85 c0                	test   eax,eax
c00096ad:	75 01                	jne    c00096b0 <sendKeyToTerminal(unsigned char)+0xd8>
c00096af:	fb                   	sti    
c00096b0:	90                   	nop
c00096b1:	c9                   	leave  
c00096b2:	c3                   	ret    

c00096b3 <sendKeyboardToken(KeyboardToken)>:
c00096b3:	55                   	push   ebp
c00096b4:	89 e5                	mov    ebp,esp
c00096b6:	83 ec 18             	sub    esp,0x18
c00096b9:	e8 7d 5e 00 00       	call   c000f53b <KeUserIOReceived()>
c00096be:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c4:	0f b7 c0             	movzx  eax,ax
c00096c7:	83 f2 01             	xor    edx,0x1
c00096ca:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096d0:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096d5:	85 c0                	test   eax,eax
c00096d7:	74 24                	je     c00096fd <sendKeyboardToken(KeyboardToken)+0x4a>
c00096d9:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c00096df:	83 ec 04             	sub    esp,0x4
c00096e2:	68 40 93 02 c0       	push   0xc0029340
c00096e7:	83 ec 08             	sub    esp,0x8
c00096ea:	89 e0                	mov    eax,esp
c00096ec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00096ef:	89 08                	mov    DWORD PTR [eax],ecx
c00096f1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00096f4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c00096f8:	ff d2                	call   edx
c00096fa:	83 c4 10             	add    esp,0x10
c00096fd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009701:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009704:	0f b6 c0             	movzx  eax,al
c0009707:	85 c0                	test   eax,eax
c0009709:	0f 84 da 00 00 00    	je     c00097e9 <sendKeyboardToken(KeyboardToken)+0x136>
c000970f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009712:	0f b7 c0             	movzx  eax,ax
c0009715:	3d 18 03 00 00       	cmp    eax,0x318
c000971a:	75 06                	jne    c0009722 <sendKeyboardToken(KeyboardToken)+0x6f>
c000971c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009725:	0f b7 c0             	movzx  eax,ax
c0009728:	3d 19 03 00 00       	cmp    eax,0x319
c000972d:	75 06                	jne    c0009735 <sendKeyboardToken(KeyboardToken)+0x82>
c000972f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009738:	0f b7 c0             	movzx  eax,ax
c000973b:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009740:	75 06                	jne    c0009748 <sendKeyboardToken(KeyboardToken)+0x95>
c0009742:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000974b:	0f b7 c0             	movzx  eax,ax
c000974e:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009753:	75 06                	jne    c000975b <sendKeyboardToken(KeyboardToken)+0xa8>
c0009755:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000975b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000975e:	0f b7 c0             	movzx  eax,ax
c0009761:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009766:	75 06                	jne    c000976e <sendKeyboardToken(KeyboardToken)+0xbb>
c0009768:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000976e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009771:	0f b7 c0             	movzx  eax,ax
c0009774:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009779:	75 06                	jne    c0009781 <sendKeyboardToken(KeyboardToken)+0xce>
c000977b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009784:	0f b7 c0             	movzx  eax,ax
c0009787:	3d 1e 03 00 00       	cmp    eax,0x31e
c000978c:	75 06                	jne    c0009794 <sendKeyboardToken(KeyboardToken)+0xe1>
c000978e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009797:	0f b7 c0             	movzx  eax,ax
c000979a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000979f:	75 06                	jne    c00097a7 <sendKeyboardToken(KeyboardToken)+0xf4>
c00097a1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097aa:	0f b7 c0             	movzx  eax,ax
c00097ad:	3d 20 03 00 00       	cmp    eax,0x320
c00097b2:	75 06                	jne    c00097ba <sendKeyboardToken(KeyboardToken)+0x107>
c00097b4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097bd:	0f b7 c0             	movzx  eax,ax
c00097c0:	3d 21 03 00 00       	cmp    eax,0x321
c00097c5:	75 06                	jne    c00097cd <sendKeyboardToken(KeyboardToken)+0x11a>
c00097c7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097d0:	0f b7 c0             	movzx  eax,ax
c00097d3:	3d 22 03 00 00       	cmp    eax,0x322
c00097d8:	0f 85 f1 00 00 00    	jne    c00098cf <sendKeyboardToken(KeyboardToken)+0x21c>
c00097de:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097e4:	e9 e6 00 00 00       	jmp    c00098cf <sendKeyboardToken(KeyboardToken)+0x21c>
c00097e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ec:	0f b7 c0             	movzx  eax,ax
c00097ef:	3d 18 03 00 00       	cmp    eax,0x318
c00097f4:	75 0a                	jne    c0009800 <sendKeyboardToken(KeyboardToken)+0x14d>
c00097f6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009803:	0f b7 c0             	movzx  eax,ax
c0009806:	3d 19 03 00 00       	cmp    eax,0x319
c000980b:	75 0a                	jne    c0009817 <sendKeyboardToken(KeyboardToken)+0x164>
c000980d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009813:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000981a:	0f b7 c0             	movzx  eax,ax
c000981d:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009822:	75 0a                	jne    c000982e <sendKeyboardToken(KeyboardToken)+0x17b>
c0009824:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000982a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000982e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009831:	0f b7 c0             	movzx  eax,ax
c0009834:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009839:	75 0a                	jne    c0009845 <sendKeyboardToken(KeyboardToken)+0x192>
c000983b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009841:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009848:	0f b7 c0             	movzx  eax,ax
c000984b:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009850:	75 0a                	jne    c000985c <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009852:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009858:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000985c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985f:	0f b7 c0             	movzx  eax,ax
c0009862:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009867:	75 0a                	jne    c0009873 <sendKeyboardToken(KeyboardToken)+0x1c0>
c0009869:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000986f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009876:	0f b7 c0             	movzx  eax,ax
c0009879:	3d 1e 03 00 00       	cmp    eax,0x31e
c000987e:	75 0a                	jne    c000988a <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009880:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009886:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000988a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000988d:	0f b7 c0             	movzx  eax,ax
c0009890:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009895:	75 0a                	jne    c00098a1 <sendKeyboardToken(KeyboardToken)+0x1ee>
c0009897:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000989d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	0f b7 c0             	movzx  eax,ax
c00098a7:	3d 20 03 00 00       	cmp    eax,0x320
c00098ac:	75 0a                	jne    c00098b8 <sendKeyboardToken(KeyboardToken)+0x205>
c00098ae:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098bb:	0f b7 c0             	movzx  eax,ax
c00098be:	3d 21 03 00 00       	cmp    eax,0x321
c00098c3:	75 0a                	jne    c00098cf <sendKeyboardToken(KeyboardToken)+0x21c>
c00098c5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d2:	0f b7 c0             	movzx  eax,ax
c00098d5:	3d 00 02 00 00       	cmp    eax,0x200
c00098da:	75 2f                	jne    c000990b <sendKeyboardToken(KeyboardToken)+0x258>
c00098dc:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098e1:	83 f0 01             	xor    eax,0x1
c00098e4:	0f b6 c0             	movzx  eax,al
c00098e7:	85 c0                	test   eax,eax
c00098e9:	74 20                	je     c000990b <sendKeyboardToken(KeyboardToken)+0x258>
c00098eb:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098f0:	6a 01                	push   0x1
c00098f2:	6a 00                	push   0x0
c00098f4:	68 04 95 00 c0       	push   0xc0009504
c00098f9:	50                   	push   eax
c00098fa:	e8 85 b9 00 00       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c00098ff:	83 c4 10             	add    esp,0x10
c0009902:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009909:	eb 3a                	jmp    c0009945 <sendKeyboardToken(KeyboardToken)+0x292>
c000990b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000990e:	0f b7 c0             	movzx  eax,ax
c0009911:	3d 01 02 00 00       	cmp    eax,0x201
c0009916:	75 2d                	jne    c0009945 <sendKeyboardToken(KeyboardToken)+0x292>
c0009918:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c000991d:	83 f0 01             	xor    eax,0x1
c0009920:	0f b6 c0             	movzx  eax,al
c0009923:	85 c0                	test   eax,eax
c0009925:	74 1e                	je     c0009945 <sendKeyboardToken(KeyboardToken)+0x292>
c0009927:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000992c:	6a 01                	push   0x1
c000992e:	6a 00                	push   0x0
c0009930:	68 6e 95 00 c0       	push   0xc000956e
c0009935:	50                   	push   eax
c0009936:	e8 49 b9 00 00       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009948:	0f b7 c0             	movzx  eax,ax
c000994b:	3d 25 03 00 00       	cmp    eax,0x325
c0009950:	75 06                	jne    c0009958 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009952:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000995b:	0f b7 c0             	movzx  eax,ax
c000995e:	3d 24 03 00 00       	cmp    eax,0x324
c0009963:	75 06                	jne    c000996b <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009965:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000996b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000996e:	0f b7 c0             	movzx  eax,ax
c0009971:	3d 23 03 00 00       	cmp    eax,0x323
c0009976:	75 06                	jne    c000997e <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009978:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000997e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009981:	0f b7 c0             	movzx  eax,ax
c0009984:	3d 26 03 00 00       	cmp    eax,0x326
c0009989:	75 06                	jne    c0009991 <sendKeyboardToken(KeyboardToken)+0x2de>
c000998b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009994:	0f b7 c0             	movzx  eax,ax
c0009997:	3d 27 03 00 00       	cmp    eax,0x327
c000999c:	75 06                	jne    c00099a4 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000999e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a7:	0f b7 c0             	movzx  eax,ax
c00099aa:	3d 22 03 00 00       	cmp    eax,0x322
c00099af:	75 06                	jne    c00099b7 <sendKeyboardToken(KeyboardToken)+0x304>
c00099b1:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099b7:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099bb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099be:	83 f0 01             	xor    eax,0x1
c00099c1:	0f b6 c0             	movzx  eax,al
c00099c4:	85 c0                	test   eax,eax
c00099c6:	74 7c                	je     c0009a44 <sendKeyboardToken(KeyboardToken)+0x391>
c00099c8:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099cd:	0f b6 c0             	movzx  eax,al
c00099d0:	85 c0                	test   eax,eax
c00099d2:	74 43                	je     c0009a17 <sendKeyboardToken(KeyboardToken)+0x364>
c00099d4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099d8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099dc:	85 c0                	test   eax,eax
c00099de:	74 2b                	je     c0009a0b <sendKeyboardToken(KeyboardToken)+0x358>
c00099e0:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099e6:	89 d0                	mov    eax,edx
c00099e8:	c1 e0 02             	shl    eax,0x2
c00099eb:	01 d0                	add    eax,edx
c00099ed:	d1 e0                	shl    eax,1
c00099ef:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099f7:	0f b7 c0             	movzx  eax,ax
c00099fa:	8d 50 d0             	lea    edx,[eax-0x30]
c00099fd:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a02:	01 d0                	add    eax,edx
c0009a04:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c0009a09:	eb 71                	jmp    c0009a7c <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a0b:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a15:	eb 65                	jmp    c0009a7c <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a17:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a1c:	85 c0                	test   eax,eax
c0009a1e:	74 18                	je     c0009a38 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a20:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a25:	0f b6 c0             	movzx  eax,al
c0009a28:	83 ec 0c             	sub    esp,0xc
c0009a2b:	50                   	push   eax
c0009a2c:	e8 a7 fb ff ff       	call   c00095d8 <sendKeyToTerminal(unsigned char)>
c0009a31:	83 c4 10             	add    esp,0x10
c0009a34:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a38:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a42:	eb 38                	jmp    c0009a7c <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a47:	0f b7 c0             	movzx  eax,ax
c0009a4a:	3d 01 01 00 00       	cmp    eax,0x101
c0009a4f:	75 2b                	jne    c0009a7c <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a51:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a56:	85 c0                	test   eax,eax
c0009a58:	74 18                	je     c0009a72 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a5a:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a5f:	0f b6 c0             	movzx  eax,al
c0009a62:	83 ec 0c             	sub    esp,0xc
c0009a65:	50                   	push   eax
c0009a66:	e8 6d fb ff ff       	call   c00095d8 <sendKeyToTerminal(unsigned char)>
c0009a6b:	83 c4 10             	add    esp,0x10
c0009a6e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a72:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a7c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a7f:	83 f0 01             	xor    eax,0x1
c0009a82:	0f b6 c0             	movzx  eax,al
c0009a85:	85 c0                	test   eax,eax
c0009a87:	74 5a                	je     c0009ae3 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a89:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a8c:	83 f0 01             	xor    eax,0x1
c0009a8f:	0f b6 c0             	movzx  eax,al
c0009a92:	85 c0                	test   eax,eax
c0009a94:	74 4d                	je     c0009ae3 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a96:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a9b:	83 f0 01             	xor    eax,0x1
c0009a9e:	0f b6 c0             	movzx  eax,al
c0009aa1:	85 c0                	test   eax,eax
c0009aa3:	74 3e                	je     c0009ae3 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa8:	0f b7 c0             	movzx  eax,ax
c0009aab:	83 f8 1f             	cmp    eax,0x1f
c0009aae:	76 0b                	jbe    c0009abb <sendKeyboardToken(KeyboardToken)+0x408>
c0009ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ab3:	0f b7 c0             	movzx  eax,ax
c0009ab6:	83 f8 7e             	cmp    eax,0x7e
c0009ab9:	76 16                	jbe    c0009ad1 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abe:	0f b7 c0             	movzx  eax,ax
c0009ac1:	83 f8 0a             	cmp    eax,0xa
c0009ac4:	74 0b                	je     c0009ad1 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac9:	0f b7 c0             	movzx  eax,ax
c0009acc:	83 f8 08             	cmp    eax,0x8
c0009acf:	75 12                	jne    c0009ae3 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ad4:	0f b6 c0             	movzx  eax,al
c0009ad7:	83 ec 0c             	sub    esp,0xc
c0009ada:	50                   	push   eax
c0009adb:	e8 f8 fa ff ff       	call   c00095d8 <sendKeyToTerminal(unsigned char)>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ae6:	83 f0 01             	xor    eax,0x1
c0009ae9:	0f b6 c0             	movzx  eax,al
c0009aec:	85 c0                	test   eax,eax
c0009aee:	74 5d                	je     c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009af0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009af3:	83 f0 01             	xor    eax,0x1
c0009af6:	0f b6 c0             	movzx  eax,al
c0009af9:	85 c0                	test   eax,eax
c0009afb:	74 50                	je     c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009afd:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009b02:	0f b6 c0             	movzx  eax,al
c0009b05:	85 c0                	test   eax,eax
c0009b07:	74 44                	je     c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0c:	0f b7 c0             	movzx  eax,ax
c0009b0f:	83 f8 3f             	cmp    eax,0x3f
c0009b12:	76 39                	jbe    c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b17:	0f b7 c0             	movzx  eax,ax
c0009b1a:	83 f8 7f             	cmp    eax,0x7f
c0009b1d:	77 2e                	ja     c0009b4d <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b22:	88 c2                	mov    dl,al
c0009b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b27:	0f b7 c0             	movzx  eax,ax
c0009b2a:	83 f8 5f             	cmp    eax,0x5f
c0009b2d:	76 04                	jbe    c0009b33 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b2f:	b0 20                	mov    al,0x20
c0009b31:	eb 02                	jmp    c0009b35 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b33:	b0 00                	mov    al,0x0
c0009b35:	89 d1                	mov    ecx,edx
c0009b37:	29 c1                	sub    ecx,eax
c0009b39:	89 c8                	mov    eax,ecx
c0009b3b:	83 e8 40             	sub    eax,0x40
c0009b3e:	0f b6 c0             	movzx  eax,al
c0009b41:	83 ec 0c             	sub    esp,0xc
c0009b44:	50                   	push   eax
c0009b45:	e8 8e fa ff ff       	call   c00095d8 <sendKeyToTerminal(unsigned char)>
c0009b4a:	83 c4 10             	add    esp,0x10
c0009b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b50:	0f b7 c0             	movzx  eax,ax
c0009b53:	3d 00 03 00 00       	cmp    eax,0x300
c0009b58:	75 12                	jne    c0009b6c <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b5a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b5d:	83 f0 01             	xor    eax,0x1
c0009b60:	0f b6 c0             	movzx  eax,al
c0009b63:	85 c0                	test   eax,eax
c0009b65:	74 05                	je     c0009b6c <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b67:	e8 d3 72 00 00       	call   c0010e3f <doTerminalCycle()>
c0009b6c:	90                   	nop
c0009b6d:	c9                   	leave  
c0009b6e:	c3                   	ret    

c0009b6f <clearInternalKeybuffer(VgaText*)>:
c0009b6f:	55                   	push   ebp
c0009b70:	89 e5                	mov    ebp,esp
c0009b72:	83 ec 08             	sub    esp,0x8
c0009b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b78:	05 02 01 00 00       	add    eax,0x102
c0009b7d:	83 ec 0c             	sub    esp,0xc
c0009b80:	50                   	push   eax
c0009b81:	e8 fa 69 ff ff       	call   c0000580 <strlen>
c0009b86:	83 c4 10             	add    esp,0x10
c0009b89:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b8c:	81 c2 02 01 00 00    	add    edx,0x102
c0009b92:	83 ec 04             	sub    esp,0x4
c0009b95:	50                   	push   eax
c0009b96:	6a 00                	push   0x0
c0009b98:	52                   	push   edx
c0009b99:	e8 52 69 ff ff       	call   c00004f0 <memset>
c0009b9e:	83 c4 10             	add    esp,0x10
c0009ba1:	90                   	nop
c0009ba2:	c9                   	leave  
c0009ba3:	c3                   	ret    

c0009ba4 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009ba4:	55                   	push   ebp
c0009ba5:	89 e5                	mov    ebp,esp
c0009ba7:	83 ec 18             	sub    esp,0x18
c0009baa:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009baf:	85 c0                	test   eax,eax
c0009bb1:	74 2a                	je     c0009bdd <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bb3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bb9:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c0009bbf:	83 ec 04             	sub    esp,0x4
c0009bc2:	68 40 93 02 c0       	push   0xc0029340
c0009bc7:	83 ec 08             	sub    esp,0x8
c0009bca:	89 e0                	mov    eax,esp
c0009bcc:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009bcf:	89 08                	mov    DWORD PTR [eax],ecx
c0009bd1:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009bd4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009bd8:	ff d2                	call   edx
c0009bda:	83 c4 10             	add    esp,0x10
c0009bdd:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009be2:	0f b6 c0             	movzx  eax,al
c0009be5:	85 c0                	test   eax,eax
c0009be7:	74 07                	je     c0009bf0 <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009be9:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009bf0:	fb                   	sti    
c0009bf1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bf8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bfc:	0f 84 2f 01 00 00    	je     c0009d31 <readKeyboard(VgaText*, char*, unsigned long)+0x18d>
c0009c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c05:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c0b:	0f be c0             	movsx  eax,al
c0009c0e:	85 c0                	test   eax,eax
c0009c10:	75 2c                	jne    c0009c3e <readKeyboard(VgaText*, char*, unsigned long)+0x9a>
c0009c12:	fa                   	cli    
c0009c13:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c18:	83 c0 01             	add    eax,0x1
c0009c1b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c20:	e8 ab b8 00 00       	call   c00154d0 <schedule()>
c0009c25:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c2a:	83 e8 01             	sub    eax,0x1
c0009c2d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c32:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c37:	85 c0                	test   eax,eax
c0009c39:	75 c7                	jne    c0009c02 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c3b:	fb                   	sti    
c0009c3c:	eb c4                	jmp    c0009c02 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c3e:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c43:	0f b6 c0             	movzx  eax,al
c0009c46:	85 c0                	test   eax,eax
c0009c48:	74 0a                	je     c0009c54 <readKeyboard(VgaText*, char*, unsigned long)+0xb0>
c0009c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c4d:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c57:	8d 50 01             	lea    edx,[eax+0x1]
c0009c5a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c5d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c60:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c66:	88 10                	mov    BYTE PTR [eax],dl
c0009c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c6b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c71:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c74:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c78:	83 f8 03             	cmp    eax,0x3
c0009c7b:	75 1e                	jne    c0009c9b <readKeyboard(VgaText*, char*, unsigned long)+0xf7>
c0009c7d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c87:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c8d:	83 ec 08             	sub    esp,0x8
c0009c90:	6a 02                	push   0x2
c0009c92:	50                   	push   eax
c0009c93:	e8 cc 60 00 00       	call   c000fd64 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c9f:	83 f8 1c             	cmp    eax,0x1c
c0009ca2:	75 1e                	jne    c0009cc2 <readKeyboard(VgaText*, char*, unsigned long)+0x11e>
c0009ca4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009cae:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009cb4:	83 ec 08             	sub    esp,0x8
c0009cb7:	6a 09                	push   0x9
c0009cb9:	50                   	push   eax
c0009cba:	e8 a5 60 00 00       	call   c000fd64 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cc5:	05 02 01 00 00       	add    eax,0x102
c0009cca:	83 ec 0c             	sub    esp,0xc
c0009ccd:	50                   	push   eax
c0009cce:	e8 ad 68 ff ff       	call   c0000580 <strlen>
c0009cd3:	83 c4 10             	add    esp,0x10
c0009cd6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd9:	81 c2 02 01 00 00    	add    edx,0x102
c0009cdf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009ce2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009ce5:	81 c2 02 01 00 00    	add    edx,0x102
c0009ceb:	83 ec 04             	sub    esp,0x4
c0009cee:	50                   	push   eax
c0009cef:	51                   	push   ecx
c0009cf0:	52                   	push   edx
c0009cf1:	e8 da 66 ff ff       	call   c00003d0 <memmove>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009cfd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009d01:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d05:	83 f8 0a             	cmp    eax,0xa
c0009d08:	74 22                	je     c0009d2c <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d0a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d0e:	83 f8 03             	cmp    eax,0x3
c0009d11:	74 19                	je     c0009d2c <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d13:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d17:	83 f8 1c             	cmp    eax,0x1c
c0009d1a:	74 10                	je     c0009d2c <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d1c:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d21:	0f b6 c0             	movzx  eax,al
c0009d24:	85 c0                	test   eax,eax
c0009d26:	0f 84 cc fe ff ff    	je     c0009bf8 <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d2f:	eb 03                	jmp    c0009d34 <readKeyboard(VgaText*, char*, unsigned long)+0x190>
c0009d31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d34:	c9                   	leave  
c0009d35:	c3                   	ret    

c0009d36 <Keyboard::Keyboard(char const*)>:
c0009d36:	83 ec 0c             	sub    esp,0xc
c0009d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d3d:	83 ec 08             	sub    esp,0x8
c0009d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d44:	50                   	push   eax
c0009d45:	e8 5a f4 ff ff       	call   c00091a4 <Device::Device(char const*)>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	ba c4 17 02 c0       	mov    edx,0xc00217c4
c0009d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d56:	89 10                	mov    DWORD PTR [eax],edx
c0009d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d66:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d6d:	90                   	nop
c0009d6e:	83 c4 0c             	add    esp,0xc
c0009d71:	c3                   	ret    

c0009d72 <Keyboard::~Keyboard()>:
c0009d72:	83 ec 0c             	sub    esp,0xc
c0009d75:	ba c4 17 02 c0       	mov    edx,0xc00217c4
c0009d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d7e:	89 10                	mov    DWORD PTR [eax],edx
c0009d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d84:	83 ec 0c             	sub    esp,0xc
c0009d87:	50                   	push   eax
c0009d88:	e8 b7 f1 ff ff       	call   c0008f44 <Device::~Device()>
c0009d8d:	83 c4 10             	add    esp,0x10
c0009d90:	90                   	nop
c0009d91:	83 c4 0c             	add    esp,0xc
c0009d94:	c3                   	ret    
c0009d95:	90                   	nop

c0009d96 <Keyboard::~Keyboard()>:
c0009d96:	83 ec 0c             	sub    esp,0xc
c0009d99:	83 ec 0c             	sub    esp,0xc
c0009d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da0:	e8 cd ff ff ff       	call   c0009d72 <Keyboard::~Keyboard()>
c0009da5:	83 c4 10             	add    esp,0x10
c0009da8:	83 ec 08             	sub    esp,0x8
c0009dab:	68 5c 01 00 00       	push   0x15c
c0009db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db4:	e8 aa 28 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	83 c4 0c             	add    esp,0xc
c0009dbf:	c3                   	ret    

c0009dc0 <LogicalDisk::close(int, int, void*)>:
c0009dc0:	83 c8 ff             	or     eax,0xffffffff
c0009dc3:	c3                   	ret    

c0009dc4 <LogicalDisk::~LogicalDisk()>:
c0009dc4:	83 ec 0c             	sub    esp,0xc
c0009dc7:	ba 3c 18 02 c0       	mov    edx,0xc002183c
c0009dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd0:	89 10                	mov    DWORD PTR [eax],edx
c0009dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd6:	83 ec 0c             	sub    esp,0xc
c0009dd9:	50                   	push   eax
c0009dda:	e8 65 f1 ff ff       	call   c0008f44 <Device::~Device()>
c0009ddf:	83 c4 10             	add    esp,0x10
c0009de2:	90                   	nop
c0009de3:	83 c4 0c             	add    esp,0xc
c0009de6:	c3                   	ret    
c0009de7:	90                   	nop

c0009de8 <LogicalDisk::~LogicalDisk()>:
c0009de8:	83 ec 0c             	sub    esp,0xc
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df2:	e8 cd ff ff ff       	call   c0009dc4 <LogicalDisk::~LogicalDisk()>
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	83 ec 08             	sub    esp,0x8
c0009dfd:	68 78 01 00 00       	push   0x178
c0009e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e06:	e8 58 28 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c0009e0b:	83 c4 10             	add    esp,0x10
c0009e0e:	83 c4 0c             	add    esp,0xc
c0009e11:	c3                   	ret    

c0009e12 <LogicalDisk::open(int, int, void*)>:
c0009e12:	83 ec 18             	sub    esp,0x18
c0009e15:	68 f0 17 02 c0       	push   0xc00217f0
c0009e1a:	e8 1b 4e 00 00       	call   c000ec3a <KePanic(char const*)>
c0009e1f:	83 c8 ff             	or     eax,0xffffffff
c0009e22:	83 c4 1c             	add    esp,0x1c
c0009e25:	c3                   	ret    

c0009e26 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e26:	53                   	push   ebx
c0009e27:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e33:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e39:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e3f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e45:	77 10                	ja     c0009e57 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e47:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e4d:	89 d3                	mov    ebx,edx
c0009e4f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e55:	72 05                	jb     c0009e5c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e57:	83 c8 ff             	or     eax,0xffffffff
c0009e5a:	89 c2                	mov    edx,eax
c0009e5c:	5b                   	pop    ebx
c0009e5d:	c3                   	ret    

c0009e5e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e5e:	56                   	push   esi
c0009e5f:	83 c8 ff             	or     eax,0xffffffff
c0009e62:	53                   	push   ebx
c0009e63:	89 c2                	mov    edx,eax
c0009e65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e69:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e71:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e77:	77 27                	ja     c0009ea0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e79:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e7f:	89 d8                	mov    eax,ebx
c0009e81:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e8c:	89 c2                	mov    edx,eax
c0009e8e:	73 10                	jae    c0009ea0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e90:	89 c8                	mov    eax,ecx
c0009e92:	89 da                	mov    edx,ebx
c0009e94:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e9a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009ea0:	5b                   	pop    ebx
c0009ea1:	5e                   	pop    esi
c0009ea2:	c3                   	ret    
c0009ea3:	90                   	nop

c0009ea4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009ea4:	83 ec 1c             	sub    esp,0x1c
c0009ea7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009eab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009eb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ebb:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ebe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ec2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eca:	83 ec 08             	sub    esp,0x8
c0009ecd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ed1:	50                   	push   eax
c0009ed2:	e8 cd f2 ff ff       	call   c00091a4 <Device::Device(char const*)>
c0009ed7:	83 c4 10             	add    esp,0x10
c0009eda:	ba 3c 18 02 c0       	mov    edx,0xc002183c
c0009edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee3:	89 10                	mov    DWORD PTR [eax],edx
c0009ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eff:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f0a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f20:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f26:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f2c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f30:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f37:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f3d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f4b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f55:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f5f:	90                   	nop
c0009f60:	83 c4 1c             	add    esp,0x1c
c0009f63:	c3                   	ret    

c0009f64 <LogicalDisk::assignDriveLetter()>:
c0009f64:	55                   	push   ebp
c0009f65:	57                   	push   edi
c0009f66:	56                   	push   esi
c0009f67:	53                   	push   ebx
c0009f68:	83 ec 14             	sub    esp,0x14
c0009f6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f75:	b0 41                	mov    al,0x41
c0009f77:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f7d:	84 d2                	test   dl,dl
c0009f7f:	75 02                	jne    c0009f83 <LogicalDisk::assignDriveLetter()+0x1f>
c0009f81:	b0 43                	mov    al,0x43
c0009f83:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f89:	0f b6 ca             	movzx  ecx,dl
c0009f8c:	0f be e8             	movsx  ebp,al
c0009f8f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f93:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f97:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009fa1:	3c 43                	cmp    al,0x43
c0009fa3:	75 10                	jne    c0009fb5 <LogicalDisk::assignDriveLetter()+0x51>
c0009fa5:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009fac:	75 5a                	jne    c000a008 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fb3:	75 53                	jne    c000a008 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb5:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fb8:	ba 01 00 00 00       	mov    edx,0x1
c0009fbd:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fc0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fc3:	d3 e2                	shl    edx,cl
c0009fc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fc9:	89 d7                	mov    edi,edx
c0009fcb:	89 d6                	mov    esi,edx
c0009fcd:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fd1:	c1 ff 1f             	sar    edi,0x1f
c0009fd4:	21 f9                	and    ecx,edi
c0009fd6:	09 d1                	or     ecx,edx
c0009fd8:	75 2e                	jne    c000a008 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fde:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fe2:	09 f2                	or     edx,esi
c0009fe4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fe7:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009ff7:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009ffe:	09 fa                	or     edx,edi
c000a000:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c000a006:	eb 0d                	jmp    c000a015 <LogicalDisk::assignDriveLetter()+0xb1>
c000a008:	8d 50 01             	lea    edx,[eax+0x1]
c000a00b:	45                   	inc    ebp
c000a00c:	80 fa 5b             	cmp    dl,0x5b
c000a00f:	88 d0                	mov    al,dl
c000a011:	75 8e                	jne    c0009fa1 <LogicalDisk::assignDriveLetter()+0x3d>
c000a013:	31 c0                	xor    eax,eax
c000a015:	83 c4 14             	add    esp,0x14
c000a018:	5b                   	pop    ebx
c000a019:	5e                   	pop    esi
c000a01a:	5f                   	pop    edi
c000a01b:	5d                   	pop    ebp
c000a01c:	c3                   	ret    
c000a01d:	90                   	nop

c000a01e <LogicalDisk::mount()>:
c000a01e:	56                   	push   esi
c000a01f:	53                   	push   ebx
c000a020:	53                   	push   ebx
c000a021:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a025:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a02b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a035:	85 db                	test   ebx,ebx
c000a037:	74 27                	je     c000a060 <LogicalDisk::mount()+0x42>
c000a039:	51                   	push   ecx
c000a03a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a041:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a043:	83 e8 41             	sub    eax,0x41
c000a046:	50                   	push   eax
c000a047:	56                   	push   esi
c000a048:	53                   	push   ebx
c000a049:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a04c:	83 c4 10             	add    esp,0x10
c000a04f:	84 c0                	test   al,al
c000a051:	74 08                	je     c000a05b <LogicalDisk::mount()+0x3d>
c000a053:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a059:	eb 07                	jmp    c000a062 <LogicalDisk::mount()+0x44>
c000a05b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a05e:	eb d5                	jmp    c000a035 <LogicalDisk::mount()+0x17>
c000a060:	31 c0                	xor    eax,eax
c000a062:	5a                   	pop    edx
c000a063:	5b                   	pop    ebx
c000a064:	5e                   	pop    esi
c000a065:	c3                   	ret    

c000a066 <LogicalDisk::unmount()>:
c000a066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a06a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a074:	c3                   	ret    
c000a075:	90                   	nop

c000a076 <LogicalDisk::eject()>:
c000a076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a07a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a080:	8b 10                	mov    edx,DWORD PTR [eax]
c000a082:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a086:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a089:	90                   	nop

c000a08a <LogicalDisk::unassignDriveLetter()>:
c000a08a:	57                   	push   edi
c000a08b:	56                   	push   esi
c000a08c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a090:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a097:	85 c9                	test   ecx,ecx
c000a099:	75 0f                	jne    c000a0aa <LogicalDisk::unassignDriveLetter()+0x20>
c000a09b:	c7 44 24 0c 14 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021814
c000a0a3:	5e                   	pop    esi
c000a0a4:	5f                   	pop    edi
c000a0a5:	e9 90 4b 00 00       	jmp    c000ec3a <KePanic(char const*)>
c000a0aa:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0b1:	83 e9 41             	sub    ecx,0x41
c000a0b4:	b8 01 00 00 00       	mov    eax,0x1
c000a0b9:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0c4:	d3 e0                	shl    eax,cl
c000a0c6:	89 c7                	mov    edi,eax
c000a0c8:	f7 d0                	not    eax
c000a0ca:	c1 ff 1f             	sar    edi,0x1f
c000a0cd:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0d3:	89 fe                	mov    esi,edi
c000a0d5:	f7 d6                	not    esi
c000a0d7:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0dd:	5e                   	pop    esi
c000a0de:	5f                   	pop    edi
c000a0df:	c3                   	ret    

c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0e0:	57                   	push   edi
c000a0e1:	56                   	push   esi
c000a0e2:	53                   	push   ebx
c000a0e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0f3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0f9:	77 41                	ja     c000a13c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0fb:	99                   	cdq    
c000a0fc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a102:	01 c8                	add    eax,ecx
c000a104:	11 da                	adc    edx,ebx
c000a106:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a10c:	19 d7                	sbb    edi,edx
c000a10e:	72 33                	jb     c000a143 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a110:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a116:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a11c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a120:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a124:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a12a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a130:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a134:	5b                   	pop    ebx
c000a135:	5e                   	pop    esi
c000a136:	5f                   	pop    edi
c000a137:	e9 c4 0a 00 00       	jmp    c000ac00 <VCache::read(unsigned long long, int, void*)>
c000a13c:	b8 05 00 00 00       	mov    eax,0x5
c000a141:	eb 05                	jmp    c000a148 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a143:	b8 07 00 00 00       	mov    eax,0x7
c000a148:	5b                   	pop    ebx
c000a149:	5e                   	pop    esi
c000a14a:	5f                   	pop    edi
c000a14b:	c3                   	ret    

c000a14c <LogicalDisk::write(unsigned long long, int, void*)>:
c000a14c:	57                   	push   edi
c000a14d:	56                   	push   esi
c000a14e:	53                   	push   ebx
c000a14f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a153:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a157:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a15b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a15f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a165:	77 41                	ja     c000a1a8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a167:	99                   	cdq    
c000a168:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a16e:	01 c8                	add    eax,ecx
c000a170:	11 da                	adc    edx,ebx
c000a172:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a178:	19 d7                	sbb    edi,edx
c000a17a:	72 33                	jb     c000a1af <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a17c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a182:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a188:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a18c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a190:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a196:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a19c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1a0:	5b                   	pop    ebx
c000a1a1:	5e                   	pop    esi
c000a1a2:	5f                   	pop    edi
c000a1a3:	e9 68 09 00 00       	jmp    c000ab10 <VCache::write(unsigned long long, int, void*)>
c000a1a8:	b8 05 00 00 00       	mov    eax,0x5
c000a1ad:	eb 05                	jmp    c000a1b4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a1af:	b8 07 00 00 00       	mov    eax,0x7
c000a1b4:	5b                   	pop    ebx
c000a1b5:	5e                   	pop    esi
c000a1b6:	5f                   	pop    edi
c000a1b7:	c3                   	ret    

c000a1b8 <Mouse::Mouse(char const*)>:
c000a1b8:	83 ec 0c             	sub    esp,0xc
c000a1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1bf:	83 ec 08             	sub    esp,0x8
c000a1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1c6:	50                   	push   eax
c000a1c7:	e8 d8 ef ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a1cc:	83 c4 10             	add    esp,0x10
c000a1cf:	ba 68 18 02 c0       	mov    edx,0xc0021868
c000a1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d8:	89 10                	mov    DWORD PTR [eax],edx
c000a1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1de:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1e8:	90                   	nop
c000a1e9:	83 c4 0c             	add    esp,0xc
c000a1ec:	c3                   	ret    
c000a1ed:	90                   	nop
c000a1ee:	66 90                	xchg   ax,ax

c000a1f0 <Mouse::~Mouse()>:
c000a1f0:	83 ec 0c             	sub    esp,0xc
c000a1f3:	ba 68 18 02 c0       	mov    edx,0xc0021868
c000a1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1fc:	89 10                	mov    DWORD PTR [eax],edx
c000a1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a202:	83 ec 0c             	sub    esp,0xc
c000a205:	50                   	push   eax
c000a206:	e8 39 ed ff ff       	call   c0008f44 <Device::~Device()>
c000a20b:	83 c4 10             	add    esp,0x10
c000a20e:	90                   	nop
c000a20f:	83 c4 0c             	add    esp,0xc
c000a212:	c3                   	ret    
c000a213:	90                   	nop

c000a214 <Mouse::~Mouse()>:
c000a214:	83 ec 0c             	sub    esp,0xc
c000a217:	83 ec 0c             	sub    esp,0xc
c000a21a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a21e:	e8 cd ff ff ff       	call   c000a1f0 <Mouse::~Mouse()>
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	83 ec 08             	sub    esp,0x8
c000a229:	68 58 01 00 00       	push   0x158
c000a22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a232:	e8 2c 24 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000a237:	83 c4 10             	add    esp,0x10
c000a23a:	83 c4 0c             	add    esp,0xc
c000a23d:	c3                   	ret    

c000a23e <NIC::getMAC()>:
c000a23e:	31 c0                	xor    eax,eax
c000a240:	31 d2                	xor    edx,edx
c000a242:	c3                   	ret    
c000a243:	90                   	nop

c000a244 <NIC::write(int, unsigned char*, int*)>:
c000a244:	b8 01 00 00 00       	mov    eax,0x1
c000a249:	c3                   	ret    

c000a24a <NIC::NIC(char const*)>:
c000a24a:	83 ec 0c             	sub    esp,0xc
c000a24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a251:	83 ec 08             	sub    esp,0x8
c000a254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a258:	50                   	push   eax
c000a259:	e8 46 ef ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	ba 94 18 02 c0       	mov    edx,0xc0021894
c000a266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26a:	89 10                	mov    DWORD PTR [eax],edx
c000a26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a270:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a27a:	90                   	nop
c000a27b:	83 c4 0c             	add    esp,0xc
c000a27e:	c3                   	ret    
c000a27f:	90                   	nop

c000a280 <NIC::~NIC()>:
c000a280:	83 ec 0c             	sub    esp,0xc
c000a283:	ba 94 18 02 c0       	mov    edx,0xc0021894
c000a288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28c:	89 10                	mov    DWORD PTR [eax],edx
c000a28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a292:	83 ec 0c             	sub    esp,0xc
c000a295:	50                   	push   eax
c000a296:	e8 a9 ec ff ff       	call   c0008f44 <Device::~Device()>
c000a29b:	83 c4 10             	add    esp,0x10
c000a29e:	90                   	nop
c000a29f:	83 c4 0c             	add    esp,0xc
c000a2a2:	c3                   	ret    
c000a2a3:	90                   	nop

c000a2a4 <NIC::~NIC()>:
c000a2a4:	83 ec 0c             	sub    esp,0xc
c000a2a7:	83 ec 0c             	sub    esp,0xc
c000a2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ae:	e8 cd ff ff ff       	call   c000a280 <NIC::~NIC()>
c000a2b3:	83 c4 10             	add    esp,0x10
c000a2b6:	83 ec 08             	sub    esp,0x8
c000a2b9:	68 58 01 00 00       	push   0x158
c000a2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c2:	e8 9c 23 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000a2c7:	83 c4 10             	add    esp,0x10
c000a2ca:	83 c4 0c             	add    esp,0xc
c000a2cd:	c3                   	ret    

c000a2ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2ce:	55                   	push   ebp
c000a2cf:	57                   	push   edi
c000a2d0:	56                   	push   esi
c000a2d1:	53                   	push   ebx
c000a2d2:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2d8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2df:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2e6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2ed:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2f8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2fc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a303:	e8 98 ef ff ff       	call   c00092a0 <Device::getName()>
c000a308:	5a                   	pop    edx
c000a309:	59                   	pop    ecx
c000a30a:	50                   	push   eax
c000a30b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a30f:	55                   	push   ebp
c000a310:	e8 3b 63 ff ff       	call   c0000650 <strcpy>
c000a315:	5b                   	pop    ebx
c000a316:	58                   	pop    eax
c000a317:	68 c0 18 02 c0       	push   0xc00218c0
c000a31c:	55                   	push   ebp
c000a31d:	e8 4e 65 ff ff       	call   c0000870 <strcat>
c000a322:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a329:	e8 b8 45 00 00       	call   c000e8e6 <malloc>
c000a32e:	83 c4 0c             	add    esp,0xc
c000a331:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a335:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a339:	89 c3                	mov    ebx,eax
c000a33b:	57                   	push   edi
c000a33c:	56                   	push   esi
c000a33d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a344:	55                   	push   ebp
c000a345:	50                   	push   eax
c000a346:	e8 59 fb ff ff       	call   c0009ea4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a34b:	83 c4 14             	add    esp,0x14
c000a34e:	53                   	push   ebx
c000a34f:	e8 10 fc ff ff       	call   c0009f64 <LogicalDisk::assignDriveLetter()>
c000a354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a357:	e8 c2 fc ff ff       	call   c000a01e <LogicalDisk::mount()>
c000a35c:	58                   	pop    eax
c000a35d:	5a                   	pop    edx
c000a35e:	53                   	push   ebx
c000a35f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a366:	e8 d7 ec ff ff       	call   c0009042 <Device::addChild(Device*)>
c000a36b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	c3                   	ret    

c000a376 <createPartitionsForDisk(PhysicalDisk*)>:
c000a376:	55                   	push   ebp
c000a377:	57                   	push   edi
c000a378:	56                   	push   esi
c000a379:	53                   	push   ebx
c000a37a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a380:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a387:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a38d:	3d 00 02 00 00       	cmp    eax,0x200
c000a392:	74 27                	je     c000a3bb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a394:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a39a:	83 ec 10             	sub    esp,0x10
c000a39d:	99                   	cdq    
c000a39e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a3a4:	52                   	push   edx
c000a3a5:	50                   	push   eax
c000a3a6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a3aa:	c1 e6 0a             	shl    esi,0xa
c000a3ad:	89 fd                	mov    ebp,edi
c000a3af:	55                   	push   ebp
c000a3b0:	56                   	push   esi
c000a3b1:	e8 5e 57 01 00       	call   c001fb14 <__udivdi3>
c000a3b6:	e9 b9 00 00 00       	jmp    c000a474 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3bb:	83 ec 0c             	sub    esp,0xc
c000a3be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3c0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3c4:	56                   	push   esi
c000a3c5:	6a 01                	push   0x1
c000a3c7:	6a 00                	push   0x0
c000a3c9:	6a 00                	push   0x0
c000a3cb:	53                   	push   ebx
c000a3cc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3cf:	83 c4 20             	add    esp,0x20
c000a3d2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3da:	75 0a                	jne    c000a3e6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3dc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3e4:	74 2c                	je     c000a412 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3ec:	83 ec 10             	sub    esp,0x10
c000a3ef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3f5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3fb:	89 f7                	mov    edi,esi
c000a3fd:	c1 ff 1f             	sar    edi,0x1f
c000a400:	57                   	push   edi
c000a401:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a405:	56                   	push   esi
c000a406:	c1 e0 0a             	shl    eax,0xa
c000a409:	52                   	push   edx
c000a40a:	50                   	push   eax
c000a40b:	e8 04 57 01 00       	call   c001fb14 <__udivdi3>
c000a410:	eb 62                	jmp    c000a474 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a412:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a419:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a420:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a427:	89 cf                	mov    edi,ecx
c000a429:	83 e2 7f             	and    edx,0x7f
c000a42c:	83 e7 7f             	and    edi,0x7f
c000a42f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a432:	83 e0 7f             	and    eax,0x7f
c000a435:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a438:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a43f:	83 e0 7f             	and    eax,0x7f
c000a442:	01 d0                	add    eax,edx
c000a444:	84 c0                	test   al,al
c000a446:	89 c5                	mov    ebp,eax
c000a448:	74 41                	je     c000a48b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a44a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a450:	83 ec 10             	sub    esp,0x10
c000a453:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a459:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a45f:	89 f7                	mov    edi,esi
c000a461:	c1 ff 1f             	sar    edi,0x1f
c000a464:	57                   	push   edi
c000a465:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a469:	56                   	push   esi
c000a46a:	c1 e0 0a             	shl    eax,0xa
c000a46d:	52                   	push   edx
c000a46e:	50                   	push   eax
c000a46f:	e8 a0 56 01 00       	call   c001fb14 <__udivdi3>
c000a474:	83 c4 14             	add    esp,0x14
c000a477:	52                   	push   edx
c000a478:	50                   	push   eax
c000a479:	6a 00                	push   0x0
c000a47b:	6a 00                	push   0x0
c000a47d:	53                   	push   ebx
c000a47e:	e8 4b fe ff ff       	call   c000a2ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a483:	83 c4 20             	add    esp,0x20
c000a486:	e9 73 01 00 00       	jmp    c000a5fe <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a48b:	89 f0                	mov    eax,esi
c000a48d:	31 c9                	xor    ecx,ecx
c000a48f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a496:	75 02                	jne    c000a49a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a498:	89 cd                	mov    ebp,ecx
c000a49a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4a2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a4a9:	83 c0 10             	add    eax,0x10
c000a4ac:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4b4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a4bb:	c1 e2 08             	shl    edx,0x8
c000a4be:	c1 e6 10             	shl    esi,0x10
c000a4c1:	09 f2                	or     edx,esi
c000a4c3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4ca:	09 f2                	or     edx,esi
c000a4cc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4d3:	c1 e6 18             	shl    esi,0x18
c000a4d6:	09 f2                	or     edx,esi
c000a4d8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4df:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4e3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4ea:	c1 e6 10             	shl    esi,0x10
c000a4ed:	c1 e2 08             	shl    edx,0x8
c000a4f0:	09 f2                	or     edx,esi
c000a4f2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4f9:	09 f2                	or     edx,esi
c000a4fb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a502:	c1 e6 18             	shl    esi,0x18
c000a505:	09 f2                	or     edx,esi
c000a507:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a50b:	41                   	inc    ecx
c000a50c:	83 f9 04             	cmp    ecx,0x4
c000a50f:	0f 85 7a ff ff ff    	jne    c000a48f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a519:	83 f0 01             	xor    eax,0x1
c000a51c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a520:	75 4f                	jne    c000a571 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a522:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a526:	83 f0 01             	xor    eax,0x1
c000a529:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a52d:	75 42                	jne    c000a571 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a52f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a535:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a53d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a543:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a54b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a551:	89 f7                	mov    edi,esi
c000a553:	c1 ff 1f             	sar    edi,0x1f
c000a556:	57                   	push   edi
c000a557:	56                   	push   esi
c000a558:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a55c:	52                   	push   edx
c000a55d:	c1 e0 0a             	shl    eax,0xa
c000a560:	50                   	push   eax
c000a561:	e8 ae 55 01 00       	call   c001fb14 <__udivdi3>
c000a566:	83 c4 10             	add    esp,0x10
c000a569:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a56d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a571:	89 e8                	mov    eax,ebp
c000a573:	0f b6 e8             	movzx  ebp,al
c000a576:	85 ed                	test   ebp,ebp
c000a578:	74 50                	je     c000a5ca <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a57a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a57e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a582:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a586:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a58a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a58e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a596:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a59a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a59e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a5a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5aa:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a5ae:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5b2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5b6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5ba:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5be:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5c2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5c6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5ca:	31 ed                	xor    ebp,ebp
c000a5cc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5d0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5d4:	89 f8                	mov    eax,edi
c000a5d6:	09 f0                	or     eax,esi
c000a5d8:	74 1e                	je     c000a5f8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5de:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5e2:	89 d1                	mov    ecx,edx
c000a5e4:	09 c1                	or     ecx,eax
c000a5e6:	74 10                	je     c000a5f8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5e8:	83 ec 0c             	sub    esp,0xc
c000a5eb:	57                   	push   edi
c000a5ec:	56                   	push   esi
c000a5ed:	52                   	push   edx
c000a5ee:	50                   	push   eax
c000a5ef:	53                   	push   ebx
c000a5f0:	e8 d9 fc ff ff       	call   c000a2ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5f5:	83 c4 20             	add    esp,0x20
c000a5f8:	45                   	inc    ebp
c000a5f9:	83 fd 04             	cmp    ebp,0x4
c000a5fc:	75 ce                	jne    c000a5cc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5fe:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a604:	5b                   	pop    ebx
c000a605:	5e                   	pop    esi
c000a606:	5f                   	pop    edi
c000a607:	5d                   	pop    ebp
c000a608:	c3                   	ret    
c000a609:	66 90                	xchg   ax,ax
c000a60b:	90                   	nop

c000a60c <Serial::Serial(char const*)>:
c000a60c:	83 ec 0c             	sub    esp,0xc
c000a60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a613:	83 ec 08             	sub    esp,0x8
c000a616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a61a:	50                   	push   eax
c000a61b:	e8 84 eb ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a620:	83 c4 10             	add    esp,0x10
c000a623:	ba d4 18 02 c0       	mov    edx,0xc00218d4
c000a628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62c:	89 10                	mov    DWORD PTR [eax],edx
c000a62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a632:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a63c:	90                   	nop
c000a63d:	83 c4 0c             	add    esp,0xc
c000a640:	c3                   	ret    
c000a641:	90                   	nop
c000a642:	66 90                	xchg   ax,ax

c000a644 <Serial::~Serial()>:
c000a644:	83 ec 0c             	sub    esp,0xc
c000a647:	ba d4 18 02 c0       	mov    edx,0xc00218d4
c000a64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a650:	89 10                	mov    DWORD PTR [eax],edx
c000a652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a656:	83 ec 0c             	sub    esp,0xc
c000a659:	50                   	push   eax
c000a65a:	e8 e5 e8 ff ff       	call   c0008f44 <Device::~Device()>
c000a65f:	83 c4 10             	add    esp,0x10
c000a662:	90                   	nop
c000a663:	83 c4 0c             	add    esp,0xc
c000a666:	c3                   	ret    
c000a667:	90                   	nop

c000a668 <Serial::~Serial()>:
c000a668:	83 ec 0c             	sub    esp,0xc
c000a66b:	83 ec 0c             	sub    esp,0xc
c000a66e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a672:	e8 cd ff ff ff       	call   c000a644 <Serial::~Serial()>
c000a677:	83 c4 10             	add    esp,0x10
c000a67a:	83 ec 08             	sub    esp,0x8
c000a67d:	68 58 01 00 00       	push   0x158
c000a682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a686:	e8 d8 1f 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000a68b:	83 c4 10             	add    esp,0x10
c000a68e:	83 c4 0c             	add    esp,0xc
c000a691:	c3                   	ret    
c000a692:	66 90                	xchg   ax,ax

c000a694 <Timer::Timer(char const*)>:
c000a694:	83 ec 0c             	sub    esp,0xc
c000a697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a69b:	83 ec 08             	sub    esp,0x8
c000a69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6a2:	50                   	push   eax
c000a6a3:	e8 fc ea ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000a6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b4:	89 10                	mov    DWORD PTR [eax],edx
c000a6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ba:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6c4:	90                   	nop
c000a6c5:	83 c4 0c             	add    esp,0xc
c000a6c8:	c3                   	ret    
c000a6c9:	90                   	nop
c000a6ca:	66 90                	xchg   ax,ax

c000a6cc <Timer::~Timer()>:
c000a6cc:	83 ec 0c             	sub    esp,0xc
c000a6cf:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000a6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6d8:	89 10                	mov    DWORD PTR [eax],edx
c000a6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6de:	83 ec 0c             	sub    esp,0xc
c000a6e1:	50                   	push   eax
c000a6e2:	e8 5d e8 ff ff       	call   c0008f44 <Device::~Device()>
c000a6e7:	83 c4 10             	add    esp,0x10
c000a6ea:	90                   	nop
c000a6eb:	83 c4 0c             	add    esp,0xc
c000a6ee:	c3                   	ret    
c000a6ef:	90                   	nop

c000a6f0 <Timer::~Timer()>:
c000a6f0:	83 ec 0c             	sub    esp,0xc
c000a6f3:	83 ec 0c             	sub    esp,0xc
c000a6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fa:	e8 cd ff ff ff       	call   c000a6cc <Timer::~Timer()>
c000a6ff:	83 c4 10             	add    esp,0x10
c000a702:	83 ec 08             	sub    esp,0x8
c000a705:	68 5c 01 00 00       	push   0x15c
c000a70a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70e:	e8 50 1f 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	83 c4 0c             	add    esp,0xc
c000a719:	c3                   	ret    

c000a71a <Timer::read()>:
c000a71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a71e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a724:	c3                   	ret    

c000a725 <setupTimer(int)>:
c000a725:	53                   	push   ebx
c000a726:	83 ec 14             	sub    esp,0x14
c000a729:	68 5c 01 00 00       	push   0x15c
c000a72e:	e8 b3 41 00 00       	call   c000e8e6 <malloc>
c000a733:	89 04 24             	mov    DWORD PTR [esp],eax
c000a736:	89 c3                	mov    ebx,eax
c000a738:	e8 57 4c 01 00       	call   c001f394 <PIT::PIT()>
c000a73d:	58                   	pop    eax
c000a73e:	5a                   	pop    edx
c000a73f:	53                   	push   ebx
c000a740:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a746:	e8 f7 e8 ff ff       	call   c0009042 <Device::addChild(Device*)>
c000a74b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a74d:	6a 00                	push   0x0
c000a74f:	6a 00                	push   0x0
c000a751:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a755:	53                   	push   ebx
c000a756:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a759:	83 c4 28             	add    esp,0x28
c000a75c:	89 d8                	mov    eax,ebx
c000a75e:	5b                   	pop    ebx
c000a75f:	c3                   	ret    

c000a760 <timerHandler(unsigned int)>:
c000a760:	57                   	push   edi
c000a761:	56                   	push   esi
c000a762:	53                   	push   ebx
c000a763:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a767:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a76d:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a774:	0f 84 46 01 00 00    	je     c000a8c0 <timerHandler(unsigned int)+0x160>
c000a77a:	fa                   	cli    
c000a77b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a781:	83 ec 0c             	sub    esp,0xc
c000a784:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a789:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a78f:	e8 18 57 01 00       	call   c001feac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a794:	83 c4 10             	add    esp,0x10
c000a797:	84 c0                	test   al,al
c000a799:	0f 85 a1 00 00 00    	jne    c000a840 <timerHandler(unsigned int)+0xe0>
c000a79f:	83 ec 0c             	sub    esp,0xc
c000a7a2:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7a7:	e8 1c 57 01 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ac:	83 c4 10             	add    esp,0x10
c000a7af:	89 c6                	mov    esi,eax
c000a7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7bc:	e8 07 57 01 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7c1:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7c8:	89 c3                	mov    ebx,eax
c000a7ca:	e8 01 57 01 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7db:	77 23                	ja     c000a800 <timerHandler(unsigned int)+0xa0>
c000a7dd:	83 ec 0c             	sub    esp,0xc
c000a7e0:	53                   	push   ebx
c000a7e1:	e8 d6 af 00 00       	call   c00157bc <unblockTask(ThreadControlBlock*)>
c000a7e6:	83 c4 10             	add    esp,0x10
c000a7e9:	39 de                	cmp    esi,ebx
c000a7eb:	75 27                	jne    c000a814 <timerHandler(unsigned int)+0xb4>
c000a7ed:	83 ec 0c             	sub    esp,0xc
c000a7f0:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f5:	e8 ce 56 01 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7fa:	89 c6                	mov    esi,eax
c000a7fc:	eb 12                	jmp    c000a810 <timerHandler(unsigned int)+0xb0>
c000a7fe:	66 90                	xchg   ax,ax
c000a800:	50                   	push   eax
c000a801:	50                   	push   eax
c000a802:	53                   	push   ebx
c000a803:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a808:	e8 7f 57 01 00       	call   c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a80d:	8d 76 00             	lea    esi,[esi+0x0]
c000a810:	83 c4 10             	add    esp,0x10
c000a813:	90                   	nop
c000a814:	83 ec 0c             	sub    esp,0xc
c000a817:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a81c:	e8 8b 56 01 00       	call   c001feac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	84 c0                	test   al,al
c000a826:	75 18                	jne    c000a840 <timerHandler(unsigned int)+0xe0>
c000a828:	83 ec 0c             	sub    esp,0xc
c000a82b:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a830:	e8 93 56 01 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a835:	83 c4 10             	add    esp,0x10
c000a838:	39 f0                	cmp    eax,esi
c000a83a:	0f 85 74 ff ff ff    	jne    c000a7b4 <timerHandler(unsigned int)+0x54>
c000a840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a845:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a849:	74 3d                	je     c000a888 <timerHandler(unsigned int)+0x128>
c000a84b:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a852:	74 34                	je     c000a888 <timerHandler(unsigned int)+0x128>
c000a854:	fa                   	cli    
c000a855:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a85b:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a866:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a86e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a871:	77 05                	ja     c000a878 <timerHandler(unsigned int)+0x118>
c000a873:	e8 58 ac 00 00       	call   c00154d0 <schedule()>
c000a878:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000a87d:	48                   	dec    eax
c000a87e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000a883:	75 03                	jne    c000a888 <timerHandler(unsigned int)+0x128>
c000a885:	fb                   	sti    
c000a886:	66 90                	xchg   ax,ax
c000a888:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a88d:	48                   	dec    eax
c000a88e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a893:	75 1b                	jne    c000a8b0 <timerHandler(unsigned int)+0x150>
c000a895:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a89c:	74 12                	je     c000a8b0 <timerHandler(unsigned int)+0x150>
c000a89e:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a8a8:	e8 23 ac 00 00       	call   c00154d0 <schedule()>
c000a8ad:	8d 76 00             	lea    esi,[esi+0x0]
c000a8b0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000a8b5:	48                   	dec    eax
c000a8b6:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000a8bb:	75 03                	jne    c000a8c0 <timerHandler(unsigned int)+0x160>
c000a8bd:	fb                   	sti    
c000a8be:	66 90                	xchg   ax,ax
c000a8c0:	5b                   	pop    ebx
c000a8c1:	5e                   	pop    esi
c000a8c2:	5f                   	pop    edi
c000a8c3:	c3                   	ret    

c000a8c4 <VCache::VCache(PhysicalDisk*)>:
c000a8c4:	53                   	push   ebx
c000a8c5:	83 ec 18             	sub    esp,0x18
c000a8c8:	ba 9c 19 02 c0       	mov    edx,0xc002199c
c000a8cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d1:	89 10                	mov    DWORD PTR [eax],edx
c000a8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ed:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8f4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a906:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a911:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a924:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a92b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a936:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a946:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a94a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a94e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a955:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a95d:	83 ec 0c             	sub    esp,0xc
c000a960:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a964:	e8 7d 3f 00 00       	call   c000e8e6 <malloc>
c000a969:	83 c4 10             	add    esp,0x10
c000a96c:	89 c3                	mov    ebx,eax
c000a96e:	83 ec 0c             	sub    esp,0xc
c000a971:	53                   	push   ebx
c000a972:	e8 a9 42 00 00       	call   c000ec20 <Mutex::Mutex()>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a97e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a985:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a989:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a98c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a990:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a997:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a99b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9ac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9b8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9bc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9bf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9c6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9d4:	05 00 02 00 00       	add    eax,0x200
c000a9d9:	c1 e0 03             	shl    eax,0x3
c000a9dc:	83 ec 0c             	sub    esp,0xc
c000a9df:	50                   	push   eax
c000a9e0:	e8 01 3f 00 00       	call   c000e8e6 <malloc>
c000a9e5:	83 c4 10             	add    esp,0x10
c000a9e8:	89 c2                	mov    edx,eax
c000a9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa00:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000aa04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa08:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa0e:	89 d0                	mov    eax,edx
c000aa10:	c1 e0 02             	shl    eax,0x2
c000aa13:	01 d0                	add    eax,edx
c000aa15:	c1 e0 04             	shl    eax,0x4
c000aa18:	83 ec 0c             	sub    esp,0xc
c000aa1b:	50                   	push   eax
c000aa1c:	e8 c5 3e 00 00       	call   c000e8e6 <malloc>
c000aa21:	83 c4 10             	add    esp,0x10
c000aa24:	89 c2                	mov    edx,eax
c000aa26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa2a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa2d:	90                   	nop
c000aa2e:	83 c4 18             	add    esp,0x18
c000aa31:	5b                   	pop    ebx
c000aa32:	c3                   	ret    
c000aa33:	90                   	nop

c000aa34 <VCache::invalidateReadBuffer()>:
c000aa34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa38:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa3e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa42:	c3                   	ret    
c000aa43:	90                   	nop

c000aa44 <VCache::writeWriteBuffer()>:
c000aa44:	53                   	push   ebx
c000aa45:	83 ec 08             	sub    esp,0x8
c000aa48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa4c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa50:	74 1e                	je     c000aa70 <VCache::writeWriteBuffer()+0x2c>
c000aa52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa55:	83 ec 0c             	sub    esp,0xc
c000aa58:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa5a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa60:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa63:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa66:	50                   	push   eax
c000aa67:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa6a:	83 c4 20             	add    esp,0x20
c000aa6d:	8d 76 00             	lea    esi,[esi+0x0]
c000aa70:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa77:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa7e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa82:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa89:	83 c4 08             	add    esp,0x8
c000aa8c:	5b                   	pop    ebx
c000aa8d:	c3                   	ret    
c000aa8e:	66 90                	xchg   ax,ax

c000aa90 <VCache::~VCache()>:
c000aa90:	83 ec 0c             	sub    esp,0xc
c000aa93:	ba 9c 19 02 c0       	mov    edx,0xc002199c
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	89 10                	mov    DWORD PTR [eax],edx
c000aa9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aaa5:	0f b6 c0             	movzx  eax,al
c000aaa8:	85 c0                	test   eax,eax
c000aaaa:	74 10                	je     c000aabc <VCache::~VCache()+0x2c>
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aab3:	e8 8c ff ff ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c000aab8:	83 c4 10             	add    esp,0x10
c000aabb:	90                   	nop
c000aabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aac3:	83 ec 0c             	sub    esp,0xc
c000aac6:	50                   	push   eax
c000aac7:	e8 2a 3e 00 00       	call   c000e8f6 <free>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aad6:	83 ec 0c             	sub    esp,0xc
c000aad9:	50                   	push   eax
c000aada:	e8 17 3e 00 00       	call   c000e8f6 <free>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 0c             	add    esp,0xc
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <VCache::~VCache()>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 0c             	sub    esp,0xc
c000aaee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf2:	e8 99 ff ff ff       	call   c000aa90 <VCache::~VCache()>
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	83 ec 08             	sub    esp,0x8
c000aafd:	6a 44                	push   0x44
c000aaff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab03:	e8 5b 1b 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	83 c4 0c             	add    esp,0xc
c000ab0e:	c3                   	ret    
c000ab0f:	90                   	nop

c000ab10 <VCache::write(unsigned long long, int, void*)>:
c000ab10:	55                   	push   ebp
c000ab11:	57                   	push   edi
c000ab12:	56                   	push   esi
c000ab13:	53                   	push   ebx
c000ab14:	83 ec 1c             	sub    esp,0x1c
c000ab17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab1b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab23:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ab27:	e8 10 a7 00 00       	call   c001523c <KeDisablePreemption()>
c000ab2c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab30:	74 0e                	je     c000ab40 <VCache::write(unsigned long long, int, void*)+0x30>
c000ab32:	83 ec 0c             	sub    esp,0xc
c000ab35:	53                   	push   ebx
c000ab36:	e8 f9 fe ff ff       	call   c000aa34 <VCache::invalidateReadBuffer()>
c000ab3b:	83 c4 10             	add    esp,0x10
c000ab3e:	66 90                	xchg   ax,ax
c000ab40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab44:	74 5e                	je     c000aba4 <VCache::write(unsigned long long, int, void*)+0x94>
c000ab46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab4d:	99                   	cdq    
c000ab4e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab51:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab54:	89 c1                	mov    ecx,eax
c000ab56:	31 f1                	xor    ecx,esi
c000ab58:	89 d0                	mov    eax,edx
c000ab5a:	31 f8                	xor    eax,edi
c000ab5c:	09 c1                	or     ecx,eax
c000ab5e:	75 38                	jne    c000ab98 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab60:	83 fd 01             	cmp    ebp,0x1
c000ab63:	75 33                	jne    c000ab98 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab65:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab68:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ab6c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab70:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab76:	0f af f9             	imul   edi,ecx
c000ab79:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab7e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab81:	40                   	inc    eax
c000ab82:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab85:	83 f8 50             	cmp    eax,0x50
c000ab88:	75 66                	jne    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab8a:	83 ec 0c             	sub    esp,0xc
c000ab8d:	53                   	push   ebx
c000ab8e:	e8 b1 fe ff ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c000ab93:	83 c4 10             	add    esp,0x10
c000ab96:	eb 58                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab98:	83 ec 0c             	sub    esp,0xc
c000ab9b:	53                   	push   ebx
c000ab9c:	e8 a3 fe ff ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c000aba1:	83 c4 10             	add    esp,0x10
c000aba4:	83 fd 4f             	cmp    ebp,0x4f
c000aba7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000abaa:	7f 20                	jg     c000abcc <VCache::write(unsigned long long, int, void*)+0xbc>
c000abac:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000abaf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abb3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abb6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abb9:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000abbc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abc0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc8:	eb 26                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000abca:	66 90                	xchg   ax,ax
c000abcc:	83 ec 0c             	sub    esp,0xc
c000abcf:	8b 10                	mov    edx,DWORD PTR [eax]
c000abd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abd5:	55                   	push   ebp
c000abd6:	57                   	push   edi
c000abd7:	56                   	push   esi
c000abd8:	50                   	push   eax
c000abd9:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abdc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abe0:	83 c4 20             	add    esp,0x20
c000abe3:	e8 7c a6 00 00       	call   c0015264 <KeRestorePreemption()>
c000abe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abec:	eb 0a                	jmp    c000abf8 <VCache::write(unsigned long long, int, void*)+0xe8>
c000abee:	66 90                	xchg   ax,ax
c000abf0:	e8 6f a6 00 00       	call   c0015264 <KeRestorePreemption()>
c000abf5:	31 c0                	xor    eax,eax
c000abf7:	90                   	nop
c000abf8:	83 c4 1c             	add    esp,0x1c
c000abfb:	5b                   	pop    ebx
c000abfc:	5e                   	pop    esi
c000abfd:	5f                   	pop    edi
c000abfe:	5d                   	pop    ebp
c000abff:	c3                   	ret    

c000ac00 <VCache::read(unsigned long long, int, void*)>:
c000ac00:	55                   	push   ebp
c000ac01:	57                   	push   edi
c000ac02:	56                   	push   esi
c000ac03:	53                   	push   ebx
c000ac04:	83 ec 1c             	sub    esp,0x1c
c000ac07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac0f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ac13:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ac17:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ac1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac22:	e8 15 a6 00 00       	call   c001523c <KeDisablePreemption()>
c000ac27:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac2b:	74 0f                	je     c000ac3c <VCache::read(unsigned long long, int, void*)+0x3c>
c000ac2d:	83 ec 0c             	sub    esp,0xc
c000ac30:	53                   	push   ebx
c000ac31:	e8 0e fe ff ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	8d 76 00             	lea    esi,[esi+0x0]
c000ac3c:	83 fe 01             	cmp    esi,0x1
c000ac3f:	0f 85 8b 00 00 00    	jne    c000acd0 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac48:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac4f:	75 7f                	jne    c000acd0 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac51:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ac54:	89 d1                	mov    ecx,edx
c000ac56:	f7 d9                	neg    ecx
c000ac58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac5c:	89 cf                	mov    edi,ecx
c000ac5e:	23 0c 24             	and    ecx,DWORD PTR [esp]
c000ac61:	c1 ff 1f             	sar    edi,0x1f
c000ac64:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ac68:	89 ce                	mov    esi,ecx
c000ac6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac6e:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c000ac72:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac76:	89 cf                	mov    edi,ecx
c000ac78:	74 32                	je     c000acac <VCache::read(unsigned long long, int, void*)+0xac>
c000ac7a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac7d:	75 2d                	jne    c000acac <VCache::read(unsigned long long, int, void*)+0xac>
c000ac7f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000ac82:	75 28                	jne    c000acac <VCache::read(unsigned long long, int, void*)+0xac>
c000ac84:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac87:	89 ef                	mov    edi,ebp
c000ac89:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac8f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac92:	8d 70 ff             	lea    esi,[eax-0x1]
c000ac95:	23 34 24             	and    esi,DWORD PTR [esp]
c000ac98:	0f af f1             	imul   esi,ecx
c000ac9b:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aca0:	e8 bf a5 00 00       	call   c0015264 <KeRestorePreemption()>
c000aca5:	31 c0                	xor    eax,eax
c000aca7:	eb 57                	jmp    c000ad00 <VCache::read(unsigned long long, int, void*)+0x100>
c000aca9:	8d 76 00             	lea    esi,[esi+0x0]
c000acac:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000acb0:	83 ec 0c             	sub    esp,0xc
c000acb3:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c000acb6:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c000acb9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acbb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acbe:	52                   	push   edx
c000acbf:	57                   	push   edi
c000acc0:	56                   	push   esi
c000acc1:	50                   	push   eax
c000acc2:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acc5:	83 c4 20             	add    esp,0x20
c000acc8:	85 c0                	test   eax,eax
c000acca:	75 34                	jne    c000ad00 <VCache::read(unsigned long long, int, void*)+0x100>
c000accc:	eb b6                	jmp    c000ac84 <VCache::read(unsigned long long, int, void*)+0x84>
c000acce:	66 90                	xchg   ax,ax
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	53                   	push   ebx
c000acd4:	e8 5b fd ff ff       	call   c000aa34 <VCache::invalidateReadBuffer()>
c000acd9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acdc:	8b 10                	mov    edx,DWORD PTR [eax]
c000acde:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ace1:	56                   	push   esi
c000ace2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acea:	50                   	push   eax
c000aceb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000acee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000acf2:	83 c4 20             	add    esp,0x20
c000acf5:	e8 6a a5 00 00       	call   c0015264 <KeRestorePreemption()>
c000acfa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ad00:	83 c4 1c             	add    esp,0x1c
c000ad03:	5b                   	pop    ebx
c000ad04:	5e                   	pop    esi
c000ad05:	5f                   	pop    edi
c000ad06:	5d                   	pop    ebp
c000ad07:	c3                   	ret    

c000ad08 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad08:	55                   	push   ebp
c000ad09:	57                   	push   edi
c000ad0a:	56                   	push   esi
c000ad0b:	53                   	push   ebx
c000ad0c:	83 ec 1c             	sub    esp,0x1c
c000ad0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad17:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad1b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad27:	01 df                	add    edi,ebx
c000ad29:	39 fb                	cmp    ebx,edi
c000ad2b:	7d 1f                	jge    c000ad4c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad2d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad31:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad35:	7d 12                	jge    c000ad49 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad37:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad3d:	53                   	push   ebx
c000ad3e:	55                   	push   ebp
c000ad3f:	45                   	inc    ebp
c000ad40:	56                   	push   esi
c000ad41:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad44:	83 c4 10             	add    esp,0x10
c000ad47:	eb e8                	jmp    c000ad31 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad49:	43                   	inc    ebx
c000ad4a:	eb dd                	jmp    c000ad29 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad4c:	83 c4 1c             	add    esp,0x1c
c000ad4f:	5b                   	pop    ebx
c000ad50:	5e                   	pop    esi
c000ad51:	5f                   	pop    edi
c000ad52:	5d                   	pop    ebp
c000ad53:	c3                   	ret    

c000ad54 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	31 ff                	xor    edi,edi
c000ad58:	56                   	push   esi
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 1c             	sub    esp,0x1c
c000ad5d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad65:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad6c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad79:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad7d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad80:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad84:	01 f9                	add    ecx,edi
c000ad86:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad8a:	7d 2f                	jge    c000adbb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad8c:	31 f6                	xor    esi,esi
c000ad8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad92:	01 f2                	add    edx,esi
c000ad94:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad98:	7d 1a                	jge    c000adb4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad9a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad9d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ada0:	46                   	inc    esi
c000ada1:	51                   	push   ecx
c000ada2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ada6:	52                   	push   edx
c000ada7:	55                   	push   ebp
c000ada8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000adab:	83 c4 10             	add    esp,0x10
c000adae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adb2:	eb da                	jmp    c000ad8e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adb4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adb8:	47                   	inc    edi
c000adb9:	eb c5                	jmp    c000ad80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adbb:	83 c4 1c             	add    esp,0x1c
c000adbe:	5b                   	pop    ebx
c000adbf:	5e                   	pop    esi
c000adc0:	5f                   	pop    edi
c000adc1:	5d                   	pop    ebp
c000adc2:	c3                   	ret    
c000adc3:	90                   	nop

c000adc4 <Video::blit(unsigned int*, int, int, int, int)>:
c000adc4:	55                   	push   ebp
c000adc5:	ba 00 00 00 00       	mov    edx,0x0
c000adca:	57                   	push   edi
c000adcb:	56                   	push   esi
c000adcc:	53                   	push   ebx
c000adcd:	83 ec 1c             	sub    esp,0x1c
c000add0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000add4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000add8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000addc:	85 c0                	test   eax,eax
c000adde:	0f 49 d0             	cmovns edx,eax
c000ade1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ade8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000adec:	89 eb                	mov    ebx,ebp
c000adee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000adf2:	01 ea                	add    edx,ebp
c000adf4:	39 da                	cmp    edx,ebx
c000adf6:	7e 54                	jle    c000ae4c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adf8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adfe:	7c 4c                	jl     c000ae4c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ae00:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ae04:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae08:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae0c:	01 c1                	add    ecx,eax
c000ae0e:	39 f9                	cmp    ecx,edi
c000ae10:	7e 2f                	jle    c000ae41 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ae12:	83 c2 04             	add    edx,0x4
c000ae15:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae1b:	7c 21                	jl     c000ae3e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ae1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ae21:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae23:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ae26:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ae2a:	55                   	push   ebp
c000ae2b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae2f:	56                   	push   esi
c000ae30:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ae3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae3e:	47                   	inc    edi
c000ae3f:	eb c7                	jmp    c000ae08 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000ae41:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ae45:	43                   	inc    ebx
c000ae46:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000ae4a:	eb a2                	jmp    c000adee <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000ae4c:	83 c4 1c             	add    esp,0x1c
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	5f                   	pop    edi
c000ae52:	5d                   	pop    ebp
c000ae53:	c3                   	ret    

c000ae54 <Video::clearScreen(unsigned int)>:
c000ae54:	57                   	push   edi
c000ae55:	56                   	push   esi
c000ae56:	53                   	push   ebx
c000ae57:	31 db                	xor    ebx,ebx
c000ae59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae5d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae63:	7e 1f                	jle    c000ae84 <Video::clearScreen(unsigned int)+0x30>
c000ae65:	31 ff                	xor    edi,edi
c000ae67:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae6d:	7e 12                	jle    c000ae81 <Video::clearScreen(unsigned int)+0x2d>
c000ae6f:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae75:	53                   	push   ebx
c000ae76:	57                   	push   edi
c000ae77:	47                   	inc    edi
c000ae78:	56                   	push   esi
c000ae79:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	eb e6                	jmp    c000ae67 <Video::clearScreen(unsigned int)+0x13>
c000ae81:	43                   	inc    ebx
c000ae82:	eb d9                	jmp    c000ae5d <Video::clearScreen(unsigned int)+0x9>
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	c3                   	ret    

c000ae88 <Video::putpixel(int, int, unsigned int)>:
c000ae88:	c7 44 24 04 a4 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc00219a4
c000ae90:	e9 a5 3d 00 00       	jmp    c000ec3a <KePanic(char const*)>
c000ae95:	90                   	nop

c000ae96 <Video::readPixelApprox(int, int)>:
c000ae96:	83 ec 18             	sub    esp,0x18
c000ae99:	68 c5 19 02 c0       	push   0xc00219c5
c000ae9e:	e8 97 3d 00 00       	call   c000ec3a <KePanic(char const*)>
c000aea3:	31 c0                	xor    eax,eax
c000aea5:	83 c4 1c             	add    esp,0x1c
c000aea8:	c3                   	ret    
c000aea9:	90                   	nop

c000aeaa <Video::Video(char const*)>:
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb1:	83 ec 08             	sub    esp,0x8
c000aeb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb8:	50                   	push   eax
c000aeb9:	e8 e6 e2 ff ff       	call   c00091a4 <Device::Device(char const*)>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c000aec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeca:	89 10                	mov    DWORD PTR [eax],edx
c000aecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aeda:	90                   	nop
c000aedb:	83 c4 0c             	add    esp,0xc
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <Video::~Video()>:
c000aee0:	83 ec 0c             	sub    esp,0xc
c000aee3:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c000aee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeec:	89 10                	mov    DWORD PTR [eax],edx
c000aeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef2:	83 ec 0c             	sub    esp,0xc
c000aef5:	50                   	push   eax
c000aef6:	e8 49 e0 ff ff       	call   c0008f44 <Device::~Device()>
c000aefb:	83 c4 10             	add    esp,0x10
c000aefe:	90                   	nop
c000aeff:	83 c4 0c             	add    esp,0xc
c000af02:	c3                   	ret    
c000af03:	90                   	nop

c000af04 <Video::~Video()>:
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	83 ec 0c             	sub    esp,0xc
c000af0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af0e:	e8 cd ff ff ff       	call   c000aee0 <Video::~Video()>
c000af13:	83 c4 10             	add    esp,0x10
c000af16:	83 ec 08             	sub    esp,0x8
c000af19:	68 64 01 00 00       	push   0x164
c000af1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af22:	e8 3c 17 00 00       	call   c000c663 <operator delete(void*, unsigned long)>
c000af27:	83 c4 10             	add    esp,0x10
c000af2a:	83 c4 0c             	add    esp,0xc
c000af2d:	c3                   	ret    

c000af2e <Video::isMonochrome()>:
c000af2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af32:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af38:	c3                   	ret    
c000af39:	90                   	nop

c000af3a <Video::getWidth()>:
c000af3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af44:	c3                   	ret    
c000af45:	90                   	nop

c000af46 <Video::getHeight()>:
c000af46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af4a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <Video::drawCursor(int, int, unsigned int*, int)>:
c000af52:	55                   	push   ebp
c000af53:	57                   	push   edi
c000af54:	56                   	push   esi
c000af55:	53                   	push   ebx
c000af56:	83 ec 2c             	sub    esp,0x2c
c000af59:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af5d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000af61:	83 f8 01             	cmp    eax,0x1
c000af64:	19 c9                	sbb    ecx,ecx
c000af66:	31 db                	xor    ebx,ebx
c000af68:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af6c:	89 ce                	mov    esi,ecx
c000af6e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af76:	f7 d6                	not    esi
c000af78:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000af7e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af82:	01 d8                	add    eax,ebx
c000af84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af88:	57                   	push   edi
c000af89:	e8 b8 ff ff ff       	call   c000af46 <Video::getHeight()>
c000af8e:	59                   	pop    ecx
c000af8f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af93:	7e 70                	jle    c000b005 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af99:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000af9d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000afa0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000afa4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000afa8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000afaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afb3:	89 e8                	mov    eax,ebp
c000afb5:	83 c0 20             	add    eax,0x20
c000afb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afbc:	57                   	push   edi
c000afbd:	e8 78 ff ff ff       	call   c000af3a <Video::getWidth()>
c000afc2:	5a                   	pop    edx
c000afc3:	39 c5                	cmp    ebp,eax
c000afc5:	7d 34                	jge    c000affb <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afc7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afcc:	74 05                	je     c000afd3 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afce:	8b 07                	mov    eax,DWORD PTR [edi]
c000afd0:	56                   	push   esi
c000afd1:	eb 0d                	jmp    c000afe0 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afd3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afd8:	74 12                	je     c000afec <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afda:	8b 07                	mov    eax,DWORD PTR [edi]
c000afdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afe0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afe4:	55                   	push   ebp
c000afe5:	57                   	push   edi
c000afe6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afe9:	83 c4 10             	add    esp,0x10
c000afec:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000aff0:	45                   	inc    ebp
c000aff1:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000aff5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000aff9:	75 c1                	jne    c000afbc <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000affb:	43                   	inc    ebx
c000affc:	83 fb 20             	cmp    ebx,0x20
c000afff:	0f 85 79 ff ff ff    	jne    c000af7e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b005:	83 c4 2c             	add    esp,0x2c
c000b008:	5b                   	pop    ebx
c000b009:	5e                   	pop    esi
c000b00a:	5f                   	pop    edi
c000b00b:	5d                   	pop    ebp
c000b00c:	c3                   	ret    
c000b00d:	90                   	nop

c000b00e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b00e:	55                   	push   ebp
c000b00f:	57                   	push   edi
c000b010:	56                   	push   esi
c000b011:	53                   	push   ebx
c000b012:	83 ec 48             	sub    esp,0x48
c000b015:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b019:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b01d:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b021:	c1 e0 08             	shl    eax,0x8
c000b024:	01 d0                	add    eax,edx
c000b026:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b02a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b02e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b032:	c1 e0 08             	shl    eax,0x8
c000b035:	01 d0                	add    eax,edx
c000b037:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03f:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b044:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b048:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b04c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b053:	50                   	push   eax
c000b054:	e8 8d 38 00 00       	call   c000e8e6 <malloc>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	85 c0                	test   eax,eax
c000b05e:	89 c5                	mov    ebp,eax
c000b060:	75 10                	jne    c000b072 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b062:	83 ec 0c             	sub    esp,0xc
c000b065:	68 f0 19 02 c0       	push   0xc00219f0
c000b06a:	e8 cb 3b 00 00       	call   c000ec3a <KePanic(char const*)>
c000b06f:	83 c4 10             	add    esp,0x10
c000b072:	52                   	push   edx
c000b073:	bf 12 00 00 00       	mov    edi,0x12
c000b078:	52                   	push   edx
c000b079:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b07d:	50                   	push   eax
c000b07e:	68 00 1a 02 c0       	push   0xc0021a00
c000b083:	e8 c6 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b088:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b08b:	83 e0 20             	and    eax,0x20
c000b08e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b092:	85 c0                	test   eax,eax
c000b094:	59                   	pop    ecx
c000b095:	0f 94 c0             	sete   al
c000b098:	0f b6 c0             	movzx  eax,al
c000b09b:	5e                   	pop    esi
c000b09c:	50                   	push   eax
c000b09d:	68 0a 1a 02 c0       	push   0xc0021a0a
c000b0a2:	e8 a7 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0a7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b0ab:	83 c4 10             	add    esp,0x10
c000b0ae:	85 c0                	test   eax,eax
c000b0b0:	89 c2                	mov    edx,eax
c000b0b2:	74 11                	je     c000b0c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b0b4:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b0b8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0bc:	c1 ff 03             	sar    edi,0x3
c000b0bf:	0f af f9             	imul   edi,ecx
c000b0c2:	83 c7 12             	add    edi,0x12
c000b0c5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b0ca:	74 07                	je     c000b0d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b0cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0d1:	75 12                	jne    c000b0e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	68 18 1a 02 c0       	push   0xc0021a18
c000b0db:	e8 6e be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0e0:	e9 aa 02 00 00       	jmp    c000b38f <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b0e5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0e9:	83 f9 02             	cmp    ecx,0x2
c000b0ec:	74 0e                	je     c000b0fc <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b0ee:	83 f9 0a             	cmp    ecx,0xa
c000b0f1:	0f 84 d1 00 00 00    	je     c000b1c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b0f7:	e9 7e 02 00 00       	jmp    c000b37a <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b0fc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b101:	75 0e                	jne    c000b111 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b103:	84 d2                	test   dl,dl
c000b105:	75 0a                	jne    c000b111 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b107:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b10a:	83 e8 18             	sub    eax,0x18
c000b10d:	a8 f7                	test   al,0xf7
c000b10f:	74 0d                	je     c000b11e <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	68 2d 1a 02 c0       	push   0xc0021a2d
c000b119:	e9 64 02 00 00       	jmp    c000b382 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b11e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b126:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b12b:	31 c0                	xor    eax,eax
c000b12d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b131:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b139:	89 c6                	mov    esi,eax
c000b13b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b140:	75 15                	jne    c000b157 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b142:	99                   	cdq    
c000b143:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b147:	85 d2                	test   edx,edx
c000b149:	75 0c                	jne    c000b157 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b14b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b14f:	29 c6                	sub    esi,eax
c000b151:	4e                   	dec    esi
c000b152:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b157:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b15b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b163:	75 0c                	jne    c000b171 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b165:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b16a:	c1 e2 18             	shl    edx,0x18
c000b16d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b171:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b176:	8d 46 01             	lea    eax,[esi+0x1]
c000b179:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b17d:	c1 e1 10             	shl    ecx,0x10
c000b180:	89 ca                	mov    edx,ecx
c000b182:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b187:	c1 e1 08             	shl    ecx,0x8
c000b18a:	09 d1                	or     ecx,edx
c000b18c:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b190:	09 d1                	or     ecx,edx
c000b192:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b196:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b19a:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b19e:	c1 fa 03             	sar    edx,0x3
c000b1a1:	01 d7                	add    edi,edx
c000b1a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a7:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b1ab:	7e 04                	jle    c000b1b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b1ad:	89 c6                	mov    esi,eax
c000b1af:	eb 8a                	jmp    c000b13b <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b1b1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b1b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b1b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b1bd:	0f 8f 6e ff ff ff    	jg     c000b131 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b1c3:	e9 ce 01 00 00       	jmp    c000b396 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1c8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1cd:	75 0e                	jne    c000b1dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1cf:	85 c0                	test   eax,eax
c000b1d1:	75 0a                	jne    c000b1dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1d3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1d6:	83 e8 18             	sub    eax,0x18
c000b1d9:	a8 f7                	test   al,0xf7
c000b1db:	74 0d                	je     c000b1ea <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b1dd:	83 ec 0c             	sub    esp,0xc
c000b1e0:	68 3b 1a 02 c0       	push   0xc0021a3b
c000b1e5:	e9 98 01 00 00       	jmp    c000b382 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b1ea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b1f2:	31 c9                	xor    ecx,ecx
c000b1f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b1fc:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b200:	0f 8d 90 01 00 00    	jge    c000b396 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b206:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b20a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b20e:	0f 8e 82 01 00 00    	jle    c000b396 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b214:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b218:	8d 77 01             	lea    esi,[edi+0x1]
c000b21b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b21f:	83 fa 7f             	cmp    edx,0x7f
c000b222:	89 d0                	mov    eax,edx
c000b224:	0f 8e a3 00 00 00    	jle    c000b2cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b22a:	83 e0 7f             	and    eax,0x7f
c000b22d:	31 d2                	xor    edx,edx
c000b22f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b233:	40                   	inc    eax
c000b234:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b23c:	75 08                	jne    c000b246 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b23e:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b243:	c1 e2 18             	shl    edx,0x18
c000b246:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b24b:	c1 e0 10             	shl    eax,0x10
c000b24e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b252:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b257:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b25b:	c1 e0 08             	shl    eax,0x8
c000b25e:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b262:	09 f8                	or     eax,edi
c000b264:	31 ff                	xor    edi,edi
c000b266:	09 d0                	or     eax,edx
c000b268:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b26c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b271:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b275:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b27a:	75 1d                	jne    c000b299 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b27c:	89 c8                	mov    eax,ecx
c000b27e:	99                   	cdq    
c000b27f:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b283:	85 d2                	test   edx,edx
c000b285:	75 12                	jne    c000b299 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b287:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b28b:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b28f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b293:	49                   	dec    ecx
c000b294:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b29d:	8d 51 01             	lea    edx,[ecx+0x1]
c000b2a0:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b2a4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b2a8:	8d 47 01             	lea    eax,[edi+0x1]
c000b2ab:	7e 06                	jle    c000b2b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b2ad:	89 c7                	mov    edi,eax
c000b2af:	89 d1                	mov    ecx,edx
c000b2b1:	eb c2                	jmp    c000b275 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b2b3:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b2b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b2bb:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b2bf:	c1 f8 03             	sar    eax,0x3
c000b2c2:	01 c6                	add    esi,eax
c000b2c4:	89 d1                	mov    ecx,edx
c000b2c6:	89 f7                	mov    edi,esi
c000b2c8:	e9 2f ff ff ff       	jmp    c000b1fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b2cd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b2d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2d9:	40                   	inc    eax
c000b2da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b2e3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2e7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2ec:	75 1d                	jne    c000b30b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2ee:	89 c8                	mov    eax,ecx
c000b2f0:	99                   	cdq    
c000b2f1:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2f5:	85 d2                	test   edx,edx
c000b2f7:	75 12                	jne    c000b30b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2fd:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b301:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b305:	49                   	dec    ecx
c000b306:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b30b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b30f:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b317:	75 0c                	jne    c000b325 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b319:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b31e:	c1 e7 18             	shl    edi,0x18
c000b321:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b325:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b32a:	8d 51 01             	lea    edx,[ecx+0x1]
c000b32d:	c1 e0 10             	shl    eax,0x10
c000b330:	89 c7                	mov    edi,eax
c000b332:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b337:	c1 e0 08             	shl    eax,0x8
c000b33a:	09 f8                	or     eax,edi
c000b33c:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b340:	09 f8                	or     eax,edi
c000b342:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b346:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b34a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b34e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b352:	c1 f8 03             	sar    eax,0x3
c000b355:	01 c6                	add    esi,eax
c000b357:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b35b:	40                   	inc    eax
c000b35c:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b360:	7e 0b                	jle    c000b36d <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b362:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b366:	89 d1                	mov    ecx,edx
c000b368:	e9 7a ff ff ff       	jmp    c000b2e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b36d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b371:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b375:	e9 4a ff ff ff       	jmp    c000b2c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b37a:	50                   	push   eax
c000b37b:	50                   	push   eax
c000b37c:	51                   	push   ecx
c000b37d:	68 4a 1a 02 c0       	push   0xc0021a4a
c000b382:	e8 c7 bb ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b387:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b38a:	e8 67 35 00 00       	call   c000e8f6 <free>
c000b38f:	83 c4 10             	add    esp,0x10
c000b392:	31 ed                	xor    ebp,ebp
c000b394:	eb 14                	jmp    c000b3aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b396:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b39a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b39e:	89 18                	mov    DWORD PTR [eax],ebx
c000b3a0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b3a4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b3a8:	89 18                	mov    DWORD PTR [eax],ebx
c000b3aa:	83 c4 3c             	add    esp,0x3c
c000b3ad:	89 e8                	mov    eax,ebp
c000b3af:	5b                   	pop    ebx
c000b3b0:	5e                   	pop    esi
c000b3b1:	5f                   	pop    edi
c000b3b2:	5d                   	pop    ebp
c000b3b3:	c3                   	ret    

c000b3b4 <Video::putTGA(int, int, unsigned char*, int)>:
c000b3b4:	55                   	push   ebp
c000b3b5:	57                   	push   edi
c000b3b6:	56                   	push   esi
c000b3b7:	53                   	push   ebx
c000b3b8:	83 ec 28             	sub    esp,0x28
c000b3bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3bf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b3c3:	50                   	push   eax
c000b3c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3c8:	50                   	push   eax
c000b3c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3cd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3d1:	55                   	push   ebp
c000b3d2:	e8 37 fc ff ff       	call   c000b00e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3d7:	83 c4 20             	add    esp,0x20
c000b3da:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3de:	85 c0                	test   eax,eax
c000b3e0:	74 3b                	je     c000b41d <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3e2:	89 c6                	mov    esi,eax
c000b3e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3e8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3ec:	39 d8                	cmp    eax,ebx
c000b3ee:	7e 2d                	jle    c000b41d <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b3f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3f8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3fc:	39 f8                	cmp    eax,edi
c000b3fe:	7e 1a                	jle    c000b41a <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b400:	83 c6 04             	add    esi,0x4
c000b403:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b406:	85 c0                	test   eax,eax
c000b408:	79 0d                	jns    c000b417 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b40a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b40d:	50                   	push   eax
c000b40e:	53                   	push   ebx
c000b40f:	57                   	push   edi
c000b410:	55                   	push   ebp
c000b411:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	47                   	inc    edi
c000b418:	eb da                	jmp    c000b3f4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b41a:	43                   	inc    ebx
c000b41b:	eb c7                	jmp    c000b3e4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b41d:	83 c4 1c             	add    esp,0x1c
c000b420:	5b                   	pop    ebx
c000b421:	5e                   	pop    esi
c000b422:	5f                   	pop    edi
c000b423:	5d                   	pop    ebp
c000b424:	c3                   	ret    
c000b425:	66 90                	xchg   ax,ax
c000b427:	90                   	nop

c000b428 <ACPI::close(int, int, void*)>:
c000b428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b42d:	c3                   	ret    
c000b42e:	66 90                	xchg   ax,ax

c000b430 <loadACPITables(unsigned char*)>:
c000b430:	57                   	push   edi
c000b431:	56                   	push   esi
c000b432:	53                   	push   ebx
c000b433:	83 ec 60             	sub    esp,0x60
c000b436:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b43b:	0f 84 43 02 00 00    	je     c000b684 <loadACPITables(unsigned char*)+0x254>
c000b441:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b446:	0f b6 c0             	movzx  eax,al
c000b449:	85 c0                	test   eax,eax
c000b44b:	74 7b                	je     c000b4c8 <loadACPITables(unsigned char*)+0x98>
c000b44d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b451:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b455:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b459:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b45c:	83 e8 24             	sub    eax,0x24
c000b45f:	c1 e8 03             	shr    eax,0x3
c000b462:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b466:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b46e:	66 90                	xchg   ax,ax
c000b470:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b474:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b478:	0f 8d ba 00 00 00    	jge    c000b538 <loadACPITables(unsigned char*)+0x108>
c000b47e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b482:	83 c0 24             	add    eax,0x24
c000b485:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b489:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b48d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b491:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b495:	c1 e0 03             	shl    eax,0x3
c000b498:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b49c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b4a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4a5:	89 c1                	mov    ecx,eax
c000b4a7:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b4ac:	8d 50 01             	lea    edx,[eax+0x1]
c000b4af:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b4b5:	89 ca                	mov    edx,ecx
c000b4b7:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4be:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4c3:	eb ab                	jmp    c000b470 <loadACPITables(unsigned char*)+0x40>
c000b4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4cc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4d7:	83 e8 24             	sub    eax,0x24
c000b4da:	c1 e8 02             	shr    eax,0x2
c000b4dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4e1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b4ec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4f0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4f4:	7d 42                	jge    c000b538 <loadACPITables(unsigned char*)+0x108>
c000b4f6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4fa:	83 c0 24             	add    eax,0x24
c000b4fd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b501:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b505:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b509:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b50d:	c1 e0 02             	shl    eax,0x2
c000b510:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b514:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b518:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b51a:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b51f:	8d 50 01             	lea    edx,[eax+0x1]
c000b522:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b528:	89 ca                	mov    edx,ecx
c000b52a:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b531:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b536:	eb b4                	jmp    c000b4ec <loadACPITables(unsigned char*)+0xbc>
c000b538:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b540:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b545:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b549:	0f 8d 39 01 00 00    	jge    c000b688 <loadACPITables(unsigned char*)+0x258>
c000b54f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b553:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b55a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b562:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b56a:	25 ff 0f 00 00       	and    eax,0xfff
c000b56f:	89 c6                	mov    esi,eax
c000b571:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b577:	83 ec 0c             	sub    esp,0xc
c000b57a:	6a 01                	push   0x1
c000b57c:	e8 60 6a 00 00       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c000b581:	83 c4 10             	add    esp,0x10
c000b584:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b588:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b58e:	83 ec 0c             	sub    esp,0xc
c000b591:	6a 01                	push   0x1
c000b593:	6a 01                	push   0x1
c000b595:	50                   	push   eax
c000b596:	52                   	push   edx
c000b597:	53                   	push   ebx
c000b598:	e8 37 73 00 00       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b59d:	83 c4 20             	add    esp,0x20
c000b5a0:	09 f0                	or     eax,esi
c000b5a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b5a6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b5aa:	c1 e0 03             	shl    eax,0x3
c000b5ad:	05 20 98 02 c0       	add    eax,0xc0029820
c000b5b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5be:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5da:	89 c6                	mov    esi,eax
c000b5dc:	89 d7                	mov    edi,edx
c000b5de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5e0:	89 c8                	mov    eax,ecx
c000b5e2:	89 fa                	mov    edx,edi
c000b5e4:	89 f3                	mov    ebx,esi
c000b5e6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b601:	05 00 10 00 00       	add    eax,0x1000
c000b606:	c1 e8 0c             	shr    eax,0xc
c000b609:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b611:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b615:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b619:	25 ff 0f 00 00       	and    eax,0xfff
c000b61e:	89 c6                	mov    esi,eax
c000b620:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b626:	83 ec 0c             	sub    esp,0xc
c000b629:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b62d:	e8 af 69 00 00       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b639:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b63f:	83 ec 0c             	sub    esp,0xc
c000b642:	6a 01                	push   0x1
c000b644:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b648:	50                   	push   eax
c000b649:	52                   	push   edx
c000b64a:	53                   	push   ebx
c000b64b:	e8 84 72 00 00       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b650:	83 c4 20             	add    esp,0x20
c000b653:	09 f0                	or     eax,esi
c000b655:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b65d:	83 ec 0c             	sub    esp,0xc
c000b660:	50                   	push   eax
c000b661:	e8 79 6c 00 00       	call   c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c000b666:	83 c4 10             	add    esp,0x10
c000b669:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b66d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b671:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b678:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b67d:	e9 be fe ff ff       	jmp    c000b540 <loadACPITables(unsigned char*)+0x110>
c000b682:	66 90                	xchg   ax,ax
c000b684:	90                   	nop
c000b685:	8d 76 00             	lea    esi,[esi+0x0]
c000b688:	83 c4 60             	add    esp,0x60
c000b68b:	5b                   	pop    ebx
c000b68c:	5e                   	pop    esi
c000b68d:	5f                   	pop    edi
c000b68e:	c3                   	ret    
c000b68f:	90                   	nop

c000b690 <findRSDT(unsigned char*)>:
c000b690:	57                   	push   edi
c000b691:	56                   	push   esi
c000b692:	53                   	push   ebx
c000b693:	83 ec 50             	sub    esp,0x50
c000b696:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b69b:	85 c0                	test   eax,eax
c000b69d:	75 0d                	jne    c000b6ac <findRSDT(unsigned char*)+0x1c>
c000b69f:	b8 00 00 00 00       	mov    eax,0x0
c000b6a4:	e9 2b 01 00 00       	jmp    c000b7d4 <findRSDT(unsigned char*)+0x144>
c000b6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b6ac:	89 e0                	mov    eax,esp
c000b6ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b6b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6ba:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6d2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6d6:	89 c6                	mov    esi,eax
c000b6d8:	89 d7                	mov    edi,edx
c000b6da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6dc:	89 c8                	mov    eax,ecx
c000b6de:	89 fa                	mov    edx,edi
c000b6e0:	89 f3                	mov    ebx,esi
c000b6e2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6e6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6f2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6f6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b706:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b712:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b716:	25 ff 0f 00 00       	and    eax,0xfff
c000b71b:	89 c6                	mov    esi,eax
c000b71d:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b723:	83 ec 0c             	sub    esp,0xc
c000b726:	6a 02                	push   0x2
c000b728:	e8 b4 68 00 00       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b734:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	6a 01                	push   0x1
c000b73f:	6a 02                	push   0x2
c000b741:	50                   	push   eax
c000b742:	52                   	push   edx
c000b743:	53                   	push   ebx
c000b744:	e8 8b 71 00 00       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b749:	83 c4 20             	add    esp,0x20
c000b74c:	09 f0                	or     eax,esi
c000b74e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b752:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b756:	25 ff 0f 00 00       	and    eax,0xfff
c000b75b:	89 c6                	mov    esi,eax
c000b75d:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b763:	83 ec 0c             	sub    esp,0xc
c000b766:	6a 02                	push   0x2
c000b768:	e8 74 68 00 00       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c000b76d:	83 c4 10             	add    esp,0x10
c000b770:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b774:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b77a:	83 ec 0c             	sub    esp,0xc
c000b77d:	6a 01                	push   0x1
c000b77f:	6a 02                	push   0x2
c000b781:	50                   	push   eax
c000b782:	52                   	push   edx
c000b783:	53                   	push   ebx
c000b784:	e8 4b 71 00 00       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b789:	83 c4 20             	add    esp,0x20
c000b78c:	09 f0                	or     eax,esi
c000b78e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b792:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b797:	85 c0                	test   eax,eax
c000b799:	75 11                	jne    c000b7ac <findRSDT(unsigned char*)+0x11c>
c000b79b:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b7a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b7a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7aa:	eb 24                	jmp    c000b7d0 <findRSDT(unsigned char*)+0x140>
c000b7ac:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7b1:	83 f8 02             	cmp    eax,0x2
c000b7b4:	75 12                	jne    c000b7c8 <findRSDT(unsigned char*)+0x138>
c000b7b6:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7bd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7c1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7c5:	eb 09                	jmp    c000b7d0 <findRSDT(unsigned char*)+0x140>
c000b7c7:	90                   	nop
c000b7c8:	b8 00 00 00 00       	mov    eax,0x0
c000b7cd:	eb 05                	jmp    c000b7d4 <findRSDT(unsigned char*)+0x144>
c000b7cf:	90                   	nop
c000b7d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7d4:	83 c4 50             	add    esp,0x50
c000b7d7:	5b                   	pop    ebx
c000b7d8:	5e                   	pop    esi
c000b7d9:	5f                   	pop    edi
c000b7da:	c3                   	ret    
c000b7db:	90                   	nop

c000b7dc <findDataTable(unsigned char*, char*)>:
c000b7dc:	83 ec 1c             	sub    esp,0x1c
c000b7df:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7e4:	75 0a                	jne    c000b7f0 <findDataTable(unsigned char*, char*)+0x14>
c000b7e6:	b8 00 00 00 00       	mov    eax,0x0
c000b7eb:	eb 5f                	jmp    c000b84c <findDataTable(unsigned char*, char*)+0x70>
c000b7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b7f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7f8:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7fd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b801:	7d 41                	jge    c000b844 <findDataTable(unsigned char*, char*)+0x68>
c000b803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b807:	c1 e0 03             	shl    eax,0x3
c000b80a:	05 20 98 02 c0       	add    eax,0xc0029820
c000b80f:	83 ec 04             	sub    esp,0x4
c000b812:	6a 04                	push   0x4
c000b814:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b818:	50                   	push   eax
c000b819:	e8 62 4b ff ff       	call   c0000380 <memcmp>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 94 c0             	sete   al
c000b826:	0f b6 c0             	movzx  eax,al
c000b829:	85 c0                	test   eax,eax
c000b82b:	74 0f                	je     c000b83c <findDataTable(unsigned char*, char*)+0x60>
c000b82d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b831:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b838:	eb 12                	jmp    c000b84c <findDataTable(unsigned char*, char*)+0x70>
c000b83a:	66 90                	xchg   ax,ax
c000b83c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b841:	eb b5                	jmp    c000b7f8 <findDataTable(unsigned char*, char*)+0x1c>
c000b843:	90                   	nop
c000b844:	b8 00 00 00 00       	mov    eax,0x0
c000b849:	8d 76 00             	lea    esi,[esi+0x0]
c000b84c:	83 c4 1c             	add    esp,0x1c
c000b84f:	c3                   	ret    

c000b850 <scanMADT()>:
c000b850:	53                   	push   ebx
c000b851:	83 ec 38             	sub    esp,0x38
c000b854:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b85e:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b868:	e8 18 c4 00 00       	call   c0017c85 <HalFindRSDP()>
c000b86d:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b872:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b877:	85 c0                	test   eax,eax
c000b879:	0f 84 11 04 00 00    	je     c000bc90 <scanMADT()+0x440>
c000b87f:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b884:	83 ec 0c             	sub    esp,0xc
c000b887:	50                   	push   eax
c000b888:	e8 03 fe ff ff       	call   c000b690 <findRSDT(unsigned char*)>
c000b88d:	83 c4 10             	add    esp,0x10
c000b890:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b895:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b89a:	85 c0                	test   eax,eax
c000b89c:	0f 84 f2 03 00 00    	je     c000bc94 <scanMADT()+0x444>
c000b8a2:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8a7:	83 ec 0c             	sub    esp,0xc
c000b8aa:	50                   	push   eax
c000b8ab:	e8 80 fb ff ff       	call   c000b430 <loadACPITables(unsigned char*)>
c000b8b0:	83 c4 10             	add    esp,0x10
c000b8b3:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8b8:	83 ec 08             	sub    esp,0x8
c000b8bb:	68 ac 1a 02 c0       	push   0xc0021aac
c000b8c0:	50                   	push   eax
c000b8c1:	e8 16 ff ff ff       	call   c000b7dc <findDataTable(unsigned char*, char*)>
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8cd:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8d2:	0f 84 c0 03 00 00    	je     c000bc98 <scanMADT()+0x448>
c000b8d8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8e7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8eb:	0f 87 af 03 00 00    	ja     c000bca0 <scanMADT()+0x450>
c000b8f1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8f9:	0f 87 a1 03 00 00    	ja     c000bca0 <scanMADT()+0x450>
c000b8ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b903:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b907:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b90b:	8d 50 01             	lea    edx,[eax+0x1]
c000b90e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b912:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b916:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b91a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b91e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b922:	8d 50 01             	lea    edx,[eax+0x1]
c000b925:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b929:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b92d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b931:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b935:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b93a:	83 f8 02             	cmp    eax,0x2
c000b93d:	0f 86 59 03 00 00    	jbe    c000bc9c <scanMADT()+0x44c>
c000b943:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b948:	85 c0                	test   eax,eax
c000b94a:	75 58                	jne    c000b9a4 <scanMADT()+0x154>
c000b94c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b950:	8d 50 01             	lea    edx,[eax+0x1]
c000b953:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b957:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b95d:	0f b6 d2             	movzx  edx,dl
c000b960:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b964:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b968:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b96e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b972:	8d 50 01             	lea    edx,[eax+0x1]
c000b975:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b979:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b97f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b982:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b988:	0f b6 d2             	movzx  edx,dl
c000b98b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b98f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b993:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b999:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b99e:	e9 d9 02 00 00       	jmp    c000bc7c <scanMADT()+0x42c>
c000b9a3:	90                   	nop
c000b9a4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b9a9:	83 f8 01             	cmp    eax,0x1
c000b9ac:	0f 85 1a 01 00 00    	jne    c000bacc <scanMADT()+0x27c>
c000b9b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9b6:	8d 50 01             	lea    edx,[eax+0x1]
c000b9b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9bd:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9c3:	0f b6 d2             	movzx  edx,dl
c000b9c6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9ca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9ce:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9d4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9e1:	01 d0                	add    eax,edx
c000b9e3:	83 c0 2c             	add    eax,0x2c
c000b9e6:	8a 00                	mov    al,BYTE PTR [eax]
c000b9e8:	0f b6 d0             	movzx  edx,al
c000b9eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ef:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9fa:	0f b6 c0             	movzx  eax,al
c000b9fd:	c1 e0 08             	shl    eax,0x8
c000ba00:	89 d1                	mov    ecx,edx
c000ba02:	09 c1                	or     ecx,eax
c000ba04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba08:	8d 50 02             	lea    edx,[eax+0x2]
c000ba0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba0f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba13:	0f b6 c0             	movzx  eax,al
c000ba16:	c1 e0 10             	shl    eax,0x10
c000ba19:	09 c1                	or     ecx,eax
c000ba1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba1f:	8d 50 03             	lea    edx,[eax+0x3]
c000ba22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba2a:	0f b6 c0             	movzx  eax,al
c000ba2d:	c1 e0 18             	shl    eax,0x18
c000ba30:	09 c1                	or     ecx,eax
c000ba32:	89 ca                	mov    edx,ecx
c000ba34:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba39:	0f b6 c0             	movzx  eax,al
c000ba3c:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba43:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba50:	01 d0                	add    eax,edx
c000ba52:	83 c0 2c             	add    eax,0x2c
c000ba55:	8a 00                	mov    al,BYTE PTR [eax]
c000ba57:	0f b6 d0             	movzx  edx,al
c000ba5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba5e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba65:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba69:	0f b6 c0             	movzx  eax,al
c000ba6c:	c1 e0 08             	shl    eax,0x8
c000ba6f:	89 d1                	mov    ecx,edx
c000ba71:	09 c1                	or     ecx,eax
c000ba73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba77:	8d 50 02             	lea    edx,[eax+0x2]
c000ba7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba7e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba82:	0f b6 c0             	movzx  eax,al
c000ba85:	c1 e0 10             	shl    eax,0x10
c000ba88:	09 c1                	or     ecx,eax
c000ba8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba8e:	8d 50 03             	lea    edx,[eax+0x3]
c000ba91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba95:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba99:	0f b6 c0             	movzx  eax,al
c000ba9c:	c1 e0 18             	shl    eax,0x18
c000ba9f:	09 c1                	or     ecx,eax
c000baa1:	89 ca                	mov    edx,ecx
c000baa3:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa8:	0f b6 c0             	movzx  eax,al
c000baab:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000bab2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bab7:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000babc:	83 c0 01             	add    eax,0x1
c000babf:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000bac4:	e9 b3 01 00 00       	jmp    c000bc7c <scanMADT()+0x42c>
c000bac9:	8d 76 00             	lea    esi,[esi+0x0]
c000bacc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bad1:	83 f8 02             	cmp    eax,0x2
c000bad4:	0f 85 ea 00 00 00    	jne    c000bbc4 <scanMADT()+0x374>
c000bada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bade:	8d 50 01             	lea    edx,[eax+0x1]
c000bae1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bae5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000baed:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000baf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf5:	8d 50 01             	lea    edx,[eax+0x1]
c000baf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bafc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb00:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bb04:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bb08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb10:	01 d0                	add    eax,edx
c000bb12:	83 c0 2c             	add    eax,0x2c
c000bb15:	8a 00                	mov    al,BYTE PTR [eax]
c000bb17:	0f b6 d0             	movzx  edx,al
c000bb1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb1e:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb25:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb29:	0f b6 c0             	movzx  eax,al
c000bb2c:	c1 e0 08             	shl    eax,0x8
c000bb2f:	89 d1                	mov    ecx,edx
c000bb31:	09 c1                	or     ecx,eax
c000bb33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb37:	8d 50 02             	lea    edx,[eax+0x2]
c000bb3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb42:	0f b6 c0             	movzx  eax,al
c000bb45:	c1 e0 10             	shl    eax,0x10
c000bb48:	09 c1                	or     ecx,eax
c000bb4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb4e:	8d 50 03             	lea    edx,[eax+0x3]
c000bb51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb59:	0f b6 c0             	movzx  eax,al
c000bb5c:	c1 e0 18             	shl    eax,0x18
c000bb5f:	09 c8                	or     eax,ecx
c000bb61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb65:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb72:	01 d0                	add    eax,edx
c000bb74:	83 c0 2c             	add    eax,0x2c
c000bb77:	8a 00                	mov    al,BYTE PTR [eax]
c000bb79:	0f b6 d0             	movzx  edx,al
c000bb7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb80:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb87:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb8b:	0f b6 c0             	movzx  eax,al
c000bb8e:	c1 e0 08             	shl    eax,0x8
c000bb91:	09 d0                	or     eax,edx
c000bb93:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb98:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb9d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bba2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bba6:	88 90 28 3b 02 c0    	mov    BYTE PTR [eax-0x3ffdc4d8],dl
c000bbac:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bbb1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bbb6:	66 89 94 00 c0 9a 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd6540],dx
c000bbbe:	e9 b9 00 00 00       	jmp    c000bc7c <scanMADT()+0x42c>
c000bbc3:	90                   	nop
c000bbc4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbc9:	83 f8 04             	cmp    eax,0x4
c000bbcc:	0f 85 9a 00 00 00    	jne    c000bc6c <scanMADT()+0x41c>
c000bbd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbd6:	8d 50 01             	lea    edx,[eax+0x1]
c000bbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbdd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbe1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbe5:	0f b6 c0             	movzx  eax,al
c000bbe8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbf4:	01 d0                	add    eax,edx
c000bbf6:	83 c0 2c             	add    eax,0x2c
c000bbf9:	8a 00                	mov    al,BYTE PTR [eax]
c000bbfb:	0f b6 d0             	movzx  edx,al
c000bbfe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc02:	8d 48 01             	lea    ecx,[eax+0x1]
c000bc05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc09:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc0d:	0f b6 c0             	movzx  eax,al
c000bc10:	c1 e0 08             	shl    eax,0x8
c000bc13:	09 d0                	or     eax,edx
c000bc15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc19:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc22:	8d 50 01             	lea    edx,[eax+0x1]
c000bc25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc2d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc31:	0f b6 c0             	movzx  eax,al
c000bc34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc3c:	c1 e0 08             	shl    eax,0x8
c000bc3f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc43:	89 c1                	mov    ecx,eax
c000bc45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc49:	c1 e0 18             	shl    eax,0x18
c000bc4c:	89 c3                	mov    ebx,eax
c000bc4e:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc53:	8d 50 01             	lea    edx,[eax+0x1]
c000bc56:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc5c:	09 d9                	or     ecx,ebx
c000bc5e:	89 ca                	mov    edx,ecx
c000bc60:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc67:	eb 13                	jmp    c000bc7c <scanMADT()+0x42c>
c000bc69:	8d 76 00             	lea    esi,[esi+0x0]
c000bc6c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc71:	83 f8 05             	cmp    eax,0x5
c000bc74:	75 06                	jne    c000bc7c <scanMADT()+0x42c>
c000bc76:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc7b:	90                   	nop
c000bc7c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc85:	01 d0                	add    eax,edx
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	e9 50 fc ff ff       	jmp    c000b8e0 <scanMADT()+0x90>
c000bc90:	90                   	nop
c000bc91:	eb 0d                	jmp    c000bca0 <scanMADT()+0x450>
c000bc93:	90                   	nop
c000bc94:	90                   	nop
c000bc95:	eb 09                	jmp    c000bca0 <scanMADT()+0x450>
c000bc97:	90                   	nop
c000bc98:	90                   	nop
c000bc99:	eb 05                	jmp    c000bca0 <scanMADT()+0x450>
c000bc9b:	90                   	nop
c000bc9c:	90                   	nop
c000bc9d:	8d 76 00             	lea    esi,[esi+0x0]
c000bca0:	83 c4 38             	add    esp,0x38
c000bca3:	5b                   	pop    ebx
c000bca4:	c3                   	ret    
c000bca5:	90                   	nop
c000bca6:	66 90                	xchg   ax,ax

c000bca8 <ACPI::ACPI()>:
c000bca8:	83 ec 0c             	sub    esp,0xc
c000bcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcaf:	83 ec 08             	sub    esp,0x8
c000bcb2:	68 b1 1a 02 c0       	push   0xc0021ab1
c000bcb7:	50                   	push   eax
c000bcb8:	e8 e7 d4 ff ff       	call   c00091a4 <Device::Device(char const*)>
c000bcbd:	83 c4 10             	add    esp,0x10
c000bcc0:	ba ac 1c 02 c0       	mov    edx,0xc0021cac
c000bcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc9:	89 10                	mov    DWORD PTR [eax],edx
c000bccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bccf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcda:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcf2:	e8 59 fb ff ff       	call   c000b850 <scanMADT()>
c000bcf7:	90                   	nop
c000bcf8:	83 c4 0c             	add    esp,0xc
c000bcfb:	c3                   	ret    

c000bcfc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bcfc:	83 ec 2c             	sub    esp,0x2c
c000bcff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bd03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd07:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000bd0b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000bd0f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd14:	88 c8                	mov    al,cl
c000bd16:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd1a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	90                   	nop
c000bd28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd2c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd32:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd36:	0f 8d b0 00 00 00    	jge    c000bdec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd44:	83 c2 2a             	add    edx,0x2a
c000bd47:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd50:	0f b7 c0             	movzx  eax,ax
c000bd53:	39 c2                	cmp    edx,eax
c000bd55:	0f 85 85 00 00 00    	jne    c000bde0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd63:	83 c2 2a             	add    edx,0x2a
c000bd66:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd6a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd6f:	0f b6 c0             	movzx  eax,al
c000bd72:	39 c2                	cmp    edx,eax
c000bd74:	75 6a                	jne    c000bde0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd76:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd7b:	85 c0                	test   eax,eax
c000bd7d:	74 3d                	je     c000bdbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd87:	83 c2 2a             	add    edx,0x2a
c000bd8a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd95:	39 c2                	cmp    edx,eax
c000bd97:	74 13                	je     c000bdac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd99:	83 ec 0c             	sub    esp,0xc
c000bd9c:	68 2c 1c 02 c0       	push   0xc0021c2c
c000bda1:	e8 94 2e 00 00       	call   c000ec3a <KePanic(char const*)>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	8d 76 00             	lea    esi,[esi+0x0]
c000bdac:	83 ec 0c             	sub    esp,0xc
c000bdaf:	68 b6 1a 02 c0       	push   0xc0021ab6
c000bdb4:	e8 81 2e 00 00       	call   c000ec3a <KePanic(char const*)>
c000bdb9:	83 c4 10             	add    esp,0x10
c000bdbc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bdc0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdc4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdc8:	83 c2 2a             	add    edx,0x2a
c000bdcb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdcf:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdd1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdd4:	89 01                	mov    DWORD PTR [ecx],eax
c000bdd6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdd9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdde:	66 90                	xchg   ax,ax
c000bde0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bde5:	e9 3e ff ff ff       	jmp    c000bd28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bdea:	66 90                	xchg   ax,ax
c000bdec:	90                   	nop
c000bded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdf1:	83 c4 2c             	add    esp,0x2c
c000bdf4:	c2 04 00             	ret    0x4
c000bdf7:	90                   	nop

c000bdf8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bdf8:	83 ec 1c             	sub    esp,0x1c
c000bdfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000be03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000be07:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000be0c:	88 c8                	mov    al,cl
c000be0e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000be12:	88 d0                	mov    al,dl
c000be14:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be26:	83 c2 2a             	add    edx,0x2a
c000be29:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000be2d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000be31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be35:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be3f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be46:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000be4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be4f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be55:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be59:	83 c0 01             	add    eax,0x1
c000be5c:	88 c1                	mov    cl,al
c000be5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be62:	83 c2 2a             	add    edx,0x2a
c000be65:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be77:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be7a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be7e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be86:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be8c:	8d 50 01             	lea    edx,[eax+0x1]
c000be8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be93:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be9d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bea3:	3d 00 02 00 00       	cmp    eax,0x200
c000bea8:	75 12                	jne    c000bebc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000beaa:	83 ec 0c             	sub    esp,0xc
c000bead:	68 c5 1a 02 c0       	push   0xc0021ac5
c000beb2:	e8 83 2d 00 00       	call   c000ec3a <KePanic(char const*)>
c000beb7:	83 c4 10             	add    esp,0x10
c000beba:	66 90                	xchg   ax,ax
c000bebc:	90                   	nop
c000bebd:	83 c4 1c             	add    esp,0x1c
c000bec0:	c3                   	ret    
c000bec1:	90                   	nop
c000bec2:	66 90                	xchg   ax,ax

c000bec4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000bec4:	b8 00 00 00 00       	mov    eax,0x0
c000bec9:	c3                   	ret    
c000beca:	66 90                	xchg   ax,ax

c000becc <ACPI::detectPCI()>:
c000becc:	53                   	push   ebx
c000becd:	83 ec 28             	sub    esp,0x28
c000bed0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bed5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000beda:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000bedf:	83 ec 08             	sub    esp,0x8
c000bee2:	68 e2 1a 02 c0       	push   0xc0021ae2
c000bee7:	50                   	push   eax
c000bee8:	e8 ef f8 ff ff       	call   c000b7dc <findDataTable(unsigned char*, char*)>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bef4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bef9:	74 0d                	je     c000bf08 <ACPI::detectPCI()+0x3c>
c000befb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf00:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf05:	8d 76 00             	lea    esi,[esi+0x0]
c000bf08:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bf10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf14:	8a 00                	mov    al,BYTE PTR [eax]
c000bf16:	0f b6 c0             	movzx  eax,al
c000bf19:	83 f8 01             	cmp    eax,0x1
c000bf1c:	75 0e                	jne    c000bf2c <ACPI::detectPCI()+0x60>
c000bf1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf23:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf28:	eb 2e                	jmp    c000bf58 <ACPI::detectPCI()+0x8c>
c000bf2a:	66 90                	xchg   ax,ax
c000bf2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf30:	8a 00                	mov    al,BYTE PTR [eax]
c000bf32:	0f b6 c0             	movzx  eax,al
c000bf35:	83 f8 02             	cmp    eax,0x2
c000bf38:	75 1e                	jne    c000bf58 <ACPI::detectPCI()+0x8c>
c000bf3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf3f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf44:	85 c0                	test   eax,eax
c000bf46:	74 10                	je     c000bf58 <ACPI::detectPCI()+0x8c>
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	68 5c 1c 02 c0       	push   0xc0021c5c
c000bf50:	e8 e5 2c 00 00       	call   c000ec3a <KePanic(char const*)>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf5c:	83 f0 01             	xor    eax,0x1
c000bf5f:	0f b6 c0             	movzx  eax,al
c000bf62:	85 c0                	test   eax,eax
c000bf64:	74 46                	je     c000bfac <ACPI::detectPCI()+0xe0>
c000bf66:	e8 c5 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf74:	75 0e                	jne    c000bf84 <ACPI::detectPCI()+0xb8>
c000bf76:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf7b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf80:	eb 2a                	jmp    c000bfac <ACPI::detectPCI()+0xe0>
c000bf82:	66 90                	xchg   ax,ax
c000bf84:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf89:	75 21                	jne    c000bfac <ACPI::detectPCI()+0xe0>
c000bf8b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf90:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf95:	85 c0                	test   eax,eax
c000bf97:	74 13                	je     c000bfac <ACPI::detectPCI()+0xe0>
c000bf99:	83 ec 0c             	sub    esp,0xc
c000bf9c:	68 5c 1c 02 c0       	push   0xc0021c5c
c000bfa1:	e8 94 2c 00 00       	call   c000ec3a <KePanic(char const*)>
c000bfa6:	83 c4 10             	add    esp,0x10
c000bfa9:	8d 76 00             	lea    esi,[esi+0x0]
c000bfac:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bfb1:	85 c0                	test   eax,eax
c000bfb3:	0f 84 87 00 00 00    	je     c000c040 <ACPI::detectPCI()+0x174>
c000bfb9:	83 ec 0c             	sub    esp,0xc
c000bfbc:	68 e7 1a 02 c0       	push   0xc0021ae7
c000bfc1:	e8 dd 05 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000bfc6:	83 c4 10             	add    esp,0x10
c000bfc9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfd1:	83 ec 0c             	sub    esp,0xc
c000bfd4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfd8:	e8 09 29 00 00       	call   c000e8e6 <malloc>
c000bfdd:	83 c4 10             	add    esp,0x10
c000bfe0:	89 c3                	mov    ebx,eax
c000bfe2:	83 ec 0c             	sub    esp,0xc
c000bfe5:	53                   	push   ebx
c000bfe6:	e8 83 f9 00 00       	call   c001b96e <PCI::PCI()>
c000bfeb:	83 c4 10             	add    esp,0x10
c000bfee:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bff2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bff6:	83 ec 08             	sub    esp,0x8
c000bff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffd:	50                   	push   eax
c000bffe:	e8 3f d0 ff ff       	call   c0009042 <Device::addChild(Device*)>
c000c003:	83 c4 10             	add    esp,0x10
c000c006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c00a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c00c:	83 c0 08             	add    eax,0x8
c000c00f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c011:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c016:	85 d2                	test   edx,edx
c000c018:	74 0a                	je     c000c024 <ACPI::detectPCI()+0x158>
c000c01a:	ba 01 00 00 00       	mov    edx,0x1
c000c01f:	eb 0b                	jmp    c000c02c <ACPI::detectPCI()+0x160>
c000c021:	8d 76 00             	lea    esi,[esi+0x0]
c000c024:	ba 02 00 00 00       	mov    edx,0x2
c000c029:	8d 76 00             	lea    esi,[esi+0x0]
c000c02c:	6a 00                	push   0x0
c000c02e:	6a 00                	push   0x0
c000c030:	52                   	push   edx
c000c031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c035:	ff d0                	call   eax
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	e9 91 00 00 00       	jmp    c000c0d0 <ACPI::detectPCI()+0x204>
c000c03f:	90                   	nop
c000c040:	83 ec 0c             	sub    esp,0xc
c000c043:	68 ff 1a 02 c0       	push   0xc0021aff
c000c048:	e8 56 05 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c04d:	83 c4 10             	add    esp,0x10
c000c050:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c057:	83 ec 0c             	sub    esp,0xc
c000c05a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c05e:	e8 83 28 00 00       	call   c000e8e6 <malloc>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 c3                	mov    ebx,eax
c000c068:	83 ec 0c             	sub    esp,0xc
c000c06b:	53                   	push   ebx
c000c06c:	e8 05 05 01 00       	call   c001c576 <IDE::IDE()>
c000c071:	83 c4 10             	add    esp,0x10
c000c074:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c07c:	83 ec 08             	sub    esp,0x8
c000c07f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c083:	50                   	push   eax
c000c084:	e8 b9 cf ff ff       	call   c0009042 <Device::addChild(Device*)>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c090:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c09a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c09e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c0a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0ab:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0ba:	83 c0 08             	add    eax,0x8
c000c0bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0bf:	6a 00                	push   0x0
c000c0c1:	6a 00                	push   0x0
c000c0c3:	6a 00                	push   0x0
c000c0c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c9:	ff d0                	call   eax
c000c0cb:	83 c4 10             	add    esp,0x10
c000c0ce:	66 90                	xchg   ax,ax
c000c0d0:	90                   	nop
c000c0d1:	83 c4 28             	add    esp,0x28
c000c0d4:	5b                   	pop    ebx
c000c0d5:	c3                   	ret    
c000c0d6:	66 90                	xchg   ax,ax

c000c0d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0d8:	83 ec 0c             	sub    esp,0xc
c000c0db:	83 ec 0c             	sub    esp,0xc
c000c0de:	68 14 1b 02 c0       	push   0xc0021b14
c000c0e3:	e8 52 2b 00 00       	call   c000ec3a <KePanic(char const*)>
c000c0e8:	83 c4 10             	add    esp,0x10
c000c0eb:	90                   	nop
c000c0ec:	83 c4 0c             	add    esp,0xc
c000c0ef:	c3                   	ret    

c000c0f0 <ACPI::open(int, int, void*)>:
c000c0f0:	55                   	push   ebp
c000c0f1:	89 e5                	mov    ebp,esp
c000c0f3:	53                   	push   ebx
c000c0f4:	81 ec 74 01 00 00    	sub    esp,0x174
c000c0fa:	83 ec 0c             	sub    esp,0xc
c000c0fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c100:	e8 c7 fd ff ff       	call   c000becc <ACPI::detectPCI()>
c000c105:	83 c4 10             	add    esp,0x10
c000c108:	83 ec 0c             	sub    esp,0xc
c000c10b:	68 84 1c 02 c0       	push   0xc0021c84
c000c110:	e8 8e 04 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c115:	83 c4 10             	add    esp,0x10
c000c118:	b8 4c 05 00 00       	mov    eax,0x54c
c000c11d:	8a 00                	mov    al,BYTE PTR [eax]
c000c11f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c122:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c126:	83 f8 01             	cmp    eax,0x1
c000c129:	75 15                	jne    c000c140 <ACPI::open(int, int, void*)+0x50>
c000c12b:	83 ec 0c             	sub    esp,0xc
c000c12e:	68 25 1b 02 c0       	push   0xc0021b25
c000c133:	e8 19 7e 00 00       	call   c0013f51 <Thr::loadKernelSymbolTable(char const*)>
c000c138:	83 c4 10             	add    esp,0x10
c000c13b:	eb 33                	jmp    c000c170 <ACPI::open(int, int, void*)+0x80>
c000c13d:	8d 76 00             	lea    esi,[esi+0x0]
c000c140:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c144:	3d bb 00 00 00       	cmp    eax,0xbb
c000c149:	75 15                	jne    c000c160 <ACPI::open(int, int, void*)+0x70>
c000c14b:	83 ec 0c             	sub    esp,0xc
c000c14e:	68 43 1b 02 c0       	push   0xc0021b43
c000c153:	e8 f9 7d 00 00       	call   c0013f51 <Thr::loadKernelSymbolTable(char const*)>
c000c158:	83 c4 10             	add    esp,0x10
c000c15b:	eb 13                	jmp    c000c170 <ACPI::open(int, int, void*)+0x80>
c000c15d:	8d 76 00             	lea    esi,[esi+0x0]
c000c160:	83 ec 0c             	sub    esp,0xc
c000c163:	68 61 1b 02 c0       	push   0xc0021b61
c000c168:	e8 cd 2a 00 00       	call   c000ec3a <KePanic(char const*)>
c000c16d:	83 c4 10             	add    esp,0x10
c000c170:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c174:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c17b:	83 ec 0c             	sub    esp,0xc
c000c17e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c181:	e8 60 27 00 00       	call   c000e8e6 <malloc>
c000c186:	83 c4 10             	add    esp,0x10
c000c189:	89 c3                	mov    ebx,eax
c000c18b:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c190:	83 ec 04             	sub    esp,0x4
c000c193:	50                   	push   eax
c000c194:	68 7b 1b 02 c0       	push   0xc0021b7b
c000c199:	53                   	push   ebx
c000c19a:	e8 6d bf ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c19f:	83 c4 10             	add    esp,0x10
c000c1a2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c1a5:	83 ec 08             	sub    esp,0x8
c000c1a8:	6a 01                	push   0x1
c000c1aa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1ad:	e8 78 bf ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c1b2:	83 c4 10             	add    esp,0x10
c000c1b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c1b8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c1bc:	75 12                	jne    c000c1d0 <ACPI::open(int, int, void*)+0xe0>
c000c1be:	83 ec 0c             	sub    esp,0xc
c000c1c1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1c4:	e8 bf bf ff ff       	call   c0008188 <File::close()>
c000c1c9:	83 c4 10             	add    esp,0x10
c000c1cc:	eb 06                	jmp    c000c1d4 <ACPI::open(int, int, void*)+0xe4>
c000c1ce:	66 90                	xchg   ax,ax
c000c1d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c1d4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c1d8:	74 16                	je     c000c1f0 <ACPI::open(int, int, void*)+0x100>
c000c1da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c1dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1df:	83 c0 08             	add    eax,0x8
c000c1e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1e4:	83 ec 0c             	sub    esp,0xc
c000c1e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1ea:	ff d0                	call   eax
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	90                   	nop
c000c1f0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c1f3:	83 f0 01             	xor    eax,0x1
c000c1f6:	0f b6 c0             	movzx  eax,al
c000c1f9:	85 c0                	test   eax,eax
c000c1fb:	74 27                	je     c000c224 <ACPI::open(int, int, void*)+0x134>
c000c1fd:	83 ec 0c             	sub    esp,0xc
c000c200:	68 99 1b 02 c0       	push   0xc0021b99
c000c205:	e8 99 03 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c20a:	83 c4 10             	add    esp,0x10
c000c20d:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c214:	83 ec 0c             	sub    esp,0xc
c000c217:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c21a:	e8 e7 5f 00 00       	call   c0012206 <Virt::setupPageSwapping(int)>
c000c21f:	83 c4 10             	add    esp,0x10
c000c222:	66 90                	xchg   ax,ax
c000c224:	83 ec 0c             	sub    esp,0xc
c000c227:	68 b4 1b 02 c0       	push   0xc0021bb4
c000c22c:	e8 72 03 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c237:	83 ec 08             	sub    esp,0x8
c000c23a:	6a 13                	push   0x13
c000c23c:	50                   	push   eax
c000c23d:	e8 2e d1 ff ff       	call   c0009370 <getDevicesOfType(DeviceType)>
c000c242:	83 c4 0c             	add    esp,0xc
c000c245:	8d 76 00             	lea    esi,[esi+0x0]
c000c248:	83 ec 0c             	sub    esp,0xc
c000c24b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c24e:	50                   	push   eax
c000c24f:	e8 68 3e 01 00       	call   c00200bc <LinkedList<Device>::isEmpty()>
c000c254:	83 c4 10             	add    esp,0x10
c000c257:	83 f0 01             	xor    eax,0x1
c000c25a:	0f b6 c0             	movzx  eax,al
c000c25d:	85 c0                	test   eax,eax
c000c25f:	0f 84 1f 01 00 00    	je     c000c384 <ACPI::open(int, int, void*)+0x294>
c000c265:	83 ec 0c             	sub    esp,0xc
c000c268:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c26b:	50                   	push   eax
c000c26c:	e8 67 3e 01 00       	call   c00200d8 <LinkedList<Device>::getFirstElement()>
c000c271:	83 c4 10             	add    esp,0x10
c000c274:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c277:	83 ec 0c             	sub    esp,0xc
c000c27a:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c27d:	50                   	push   eax
c000c27e:	e8 5d 3e 01 00       	call   c00200e0 <LinkedList<Device>::removeFirst()>
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c289:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c28c:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c28f:	b8 24 00 00 00       	mov    eax,0x24
c000c294:	83 e0 fc             	and    eax,0xfffffffc
c000c297:	89 c3                	mov    ebx,eax
c000c299:	b8 00 00 00 00       	mov    eax,0x0
c000c29e:	66 90                	xchg   ax,ax
c000c2a0:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c2a7:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c2ae:	83 c0 04             	add    eax,0x4
c000c2b1:	39 d8                	cmp    eax,ebx
c000c2b3:	72 eb                	jb     c000c2a0 <ACPI::open(int, int, void*)+0x1b0>
c000c2b5:	83 ec 08             	sub    esp,0x8
c000c2b8:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c2be:	50                   	push   eax
c000c2bf:	83 ec 24             	sub    esp,0x24
c000c2c2:	89 e1                	mov    ecx,esp
c000c2c4:	b8 24 00 00 00       	mov    eax,0x24
c000c2c9:	83 e0 fc             	and    eax,0xfffffffc
c000c2cc:	89 c3                	mov    ebx,eax
c000c2ce:	b8 00 00 00 00       	mov    eax,0x0
c000c2d3:	90                   	nop
c000c2d4:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c2db:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c2de:	83 c0 04             	add    eax,0x4
c000c2e1:	39 d8                	cmp    eax,ebx
c000c2e3:	72 ef                	jb     c000c2d4 <ACPI::open(int, int, void*)+0x1e4>
c000c2e5:	e8 6c fb 00 00       	call   c001be56 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c2ea:	83 c4 30             	add    esp,0x30
c000c2ed:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c2f0:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c2f4:	0f 84 4e ff ff ff    	je     c000c248 <ACPI::open(int, int, void*)+0x158>
c000c2fa:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c301:	83 ec 0c             	sub    esp,0xc
c000c304:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c307:	e8 da 25 00 00       	call   c000e8e6 <malloc>
c000c30c:	83 c4 10             	add    esp,0x10
c000c30f:	89 c3                	mov    ebx,eax
c000c311:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c316:	83 ec 04             	sub    esp,0x4
c000c319:	50                   	push   eax
c000c31a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c31d:	53                   	push   ebx
c000c31e:	e8 e9 bd ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c323:	83 c4 10             	add    esp,0x10
c000c326:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c329:	83 ec 0c             	sub    esp,0xc
c000c32c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c32f:	e8 ba c0 ff ff       	call   c00083ee <File::exists()>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	0f b6 c0             	movzx  eax,al
c000c33a:	85 c0                	test   eax,eax
c000c33c:	74 22                	je     c000c360 <ACPI::open(int, int, void*)+0x270>
c000c33e:	83 ec 08             	sub    esp,0x8
c000c341:	6a 01                	push   0x1
c000c343:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c346:	e8 88 86 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c000c34b:	83 c4 10             	add    esp,0x10
c000c34e:	83 ec 08             	sub    esp,0x8
c000c351:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c354:	50                   	push   eax
c000c355:	e8 da 88 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c000c35a:	83 c4 10             	add    esp,0x10
c000c35d:	8d 76 00             	lea    esi,[esi+0x0]
c000c360:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c364:	0f 84 de fe ff ff    	je     c000c248 <ACPI::open(int, int, void*)+0x158>
c000c36a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c36d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c36f:	83 c0 08             	add    eax,0x8
c000c372:	8b 00                	mov    eax,DWORD PTR [eax]
c000c374:	83 ec 0c             	sub    esp,0xc
c000c377:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c37a:	ff d0                	call   eax
c000c37c:	83 c4 10             	add    esp,0x10
c000c37f:	e9 c4 fe ff ff       	jmp    c000c248 <ACPI::open(int, int, void*)+0x158>
c000c384:	83 ec 0c             	sub    esp,0xc
c000c387:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c38a:	50                   	push   eax
c000c38b:	e8 28 3d 01 00       	call   c00200b8 <LinkedList<Device>::~LinkedList()>
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c399:	83 ec 08             	sub    esp,0x8
c000c39c:	6a 01                	push   0x1
c000c39e:	68 ce 1b 02 c0       	push   0xc0021bce
c000c3a3:	e8 2b 86 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c000c3a8:	83 c4 10             	add    esp,0x10
c000c3ab:	83 ec 08             	sub    esp,0x8
c000c3ae:	53                   	push   ebx
c000c3af:	50                   	push   eax
c000c3b0:	e8 7f 88 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c000c3b5:	83 c4 10             	add    esp,0x10
c000c3b8:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c3bd:	85 c0                	test   eax,eax
c000c3bf:	0f 84 ef 00 00 00    	je     c000c4b4 <ACPI::open(int, int, void*)+0x3c4>
c000c3c5:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c3ca:	85 c0                	test   eax,eax
c000c3cc:	0f 84 e2 00 00 00    	je     c000c4b4 <ACPI::open(int, int, void*)+0x3c4>
c000c3d2:	83 ec 0c             	sub    esp,0xc
c000c3d5:	68 eb 1b 02 c0       	push   0xc0021beb
c000c3da:	e8 c4 01 00 00       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000c3df:	83 c4 10             	add    esp,0x10
c000c3e2:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c3e9:	83 ec 0c             	sub    esp,0xc
c000c3ec:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c3ef:	e8 f2 24 00 00       	call   c000e8e6 <malloc>
c000c3f4:	83 c4 10             	add    esp,0x10
c000c3f7:	89 c3                	mov    ebx,eax
c000c3f9:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c3fe:	83 ec 04             	sub    esp,0x4
c000c401:	50                   	push   eax
c000c402:	68 08 1c 02 c0       	push   0xc0021c08
c000c407:	53                   	push   ebx
c000c408:	e8 ff bc ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c40d:	83 c4 10             	add    esp,0x10
c000c410:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c413:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c417:	74 1b                	je     c000c434 <ACPI::open(int, int, void*)+0x344>
c000c419:	83 ec 0c             	sub    esp,0xc
c000c41c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c41f:	e8 ca bf ff ff       	call   c00083ee <File::exists()>
c000c424:	83 c4 10             	add    esp,0x10
c000c427:	0f b6 c0             	movzx  eax,al
c000c42a:	85 c0                	test   eax,eax
c000c42c:	74 06                	je     c000c434 <ACPI::open(int, int, void*)+0x344>
c000c42e:	b0 01                	mov    al,0x1
c000c430:	eb 06                	jmp    c000c438 <ACPI::open(int, int, void*)+0x348>
c000c432:	66 90                	xchg   ax,ax
c000c434:	b0 00                	mov    al,0x0
c000c436:	66 90                	xchg   ax,ax
c000c438:	0f b6 c0             	movzx  eax,al
c000c43b:	85 c0                	test   eax,eax
c000c43d:	74 21                	je     c000c460 <ACPI::open(int, int, void*)+0x370>
c000c43f:	83 ec 08             	sub    esp,0x8
c000c442:	6a 01                	push   0x1
c000c444:	68 08 1c 02 c0       	push   0xc0021c08
c000c449:	e8 85 85 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c000c44e:	83 c4 10             	add    esp,0x10
c000c451:	83 ec 08             	sub    esp,0x8
c000c454:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c457:	50                   	push   eax
c000c458:	e8 d7 87 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c464:	74 1e                	je     c000c484 <ACPI::open(int, int, void*)+0x394>
c000c466:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c46a:	74 18                	je     c000c484 <ACPI::open(int, int, void*)+0x394>
c000c46c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c46f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c471:	83 c0 08             	add    eax,0x8
c000c474:	8b 00                	mov    eax,DWORD PTR [eax]
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c47c:	ff d0                	call   eax
c000c47e:	83 c4 10             	add    esp,0x10
c000c481:	8d 76 00             	lea    esi,[esi+0x0]
c000c484:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c489:	83 ec 08             	sub    esp,0x8
c000c48c:	68 25 1c 02 c0       	push   0xc0021c25
c000c491:	50                   	push   eax
c000c492:	e8 45 f3 ff ff       	call   c000b7dc <findDataTable(unsigned char*, char*)>
c000c497:	83 c4 10             	add    esp,0x10
c000c49a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c49d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c4a1:	74 11                	je     c000c4b4 <ACPI::open(int, int, void*)+0x3c4>
c000c4a3:	83 ec 08             	sub    esp,0x8
c000c4a6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c4a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c4ac:	e8 27 fc ff ff       	call   c000c0d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c4b1:	83 c4 10             	add    esp,0x10
c000c4b4:	b8 00 00 00 00       	mov    eax,0x0
c000c4b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c4bc:	c9                   	leave  
c000c4bd:	c3                   	ret    

c000c4be <KeInitialiseAtexit()>:
c000c4be:	83 ec 10             	sub    esp,0x10
c000c4c1:	6a 60                	push   0x60
c000c4c3:	6a 00                	push   0x0
c000c4c5:	68 00 9d 02 c0       	push   0xc0029d00
c000c4ca:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c4d4:	e8 17 40 ff ff       	call   c00004f0 <memset>
c000c4d9:	83 c4 1c             	add    esp,0x1c
c000c4dc:	c3                   	ret    

c000c4dd <KeRegisterAtexit(void (*)(void*), void*)>:
c000c4dd:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c4e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c4e6:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c4ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4f1:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c4f8:	40                   	inc    eax
c000c4f9:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c4fe:	83 f8 17             	cmp    eax,0x17
c000c501:	7e 0d                	jle    c000c510 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c503:	c7 44 24 04 d0 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021cd0
c000c50b:	e9 2a 27 00 00       	jmp    c000ec3a <KePanic(char const*)>
c000c510:	c3                   	ret    

c000c511 <KeExecuteAtexit()>:
c000c511:	53                   	push   ebx
c000c512:	31 db                	xor    ebx,ebx
c000c514:	83 ec 08             	sub    esp,0x8
c000c517:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c51d:	7e 50                	jle    c000c56f <KeExecuteAtexit()+0x5e>
c000c51f:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c526:	85 c0                	test   eax,eax
c000c528:	74 42                	je     c000c56c <KeExecuteAtexit()+0x5b>
c000c52a:	51                   	push   ecx
c000c52b:	50                   	push   eax
c000c52c:	53                   	push   ebx
c000c52d:	68 e9 1c 02 c0       	push   0xc0021ce9
c000c532:	e8 17 aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c537:	58                   	pop    eax
c000c538:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c53f:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c546:	c7 04 24 0b 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d0b
c000c54d:	e8 fc a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c552:	c7 04 24 9b 20 02 c0 	mov    DWORD PTR [esp],0xc002209b
c000c559:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c564:	e8 e5 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c569:	83 c4 10             	add    esp,0x10
c000c56c:	43                   	inc    ebx
c000c56d:	eb a8                	jmp    c000c517 <KeExecuteAtexit()+0x6>
c000c56f:	83 c4 08             	add    esp,0x8
c000c572:	5b                   	pop    ebx
c000c573:	c3                   	ret    

c000c574 <KeDisplaySplashScreen()>:
c000c574:	53                   	push   ebx
c000c575:	bb 01 00 00 00       	mov    ebx,0x1
c000c57a:	83 ec 08             	sub    esp,0x8
c000c57d:	43                   	inc    ebx
c000c57e:	0f be 83 0e 1d 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde2f2]
c000c585:	85 c0                	test   eax,eax
c000c587:	74 15                	je     c000c59e <KeDisplaySplashScreen()+0x2a>
c000c589:	83 ec 0c             	sub    esp,0xc
c000c58c:	6a 01                	push   0x1
c000c58e:	53                   	push   ebx
c000c58f:	6a 00                	push   0x0
c000c591:	6a 0f                	push   0xf
c000c593:	50                   	push   eax
c000c594:	e8 23 d0 00 00       	call   c00195bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c599:	83 c4 20             	add    esp,0x20
c000c59c:	eb df                	jmp    c000c57d <KeDisplaySplashScreen()+0x9>
c000c59e:	83 c4 08             	add    esp,0x8
c000c5a1:	5b                   	pop    ebx
c000c5a2:	c3                   	ret    

c000c5a3 <KeSetBootMessage(char const*)>:
c000c5a3:	57                   	push   edi
c000c5a4:	56                   	push   esi
c000c5a5:	53                   	push   ebx
c000c5a6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c5ac:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c5b3:	68 9e 00 00 00       	push   0x9e
c000c5b8:	6a 00                	push   0x0
c000c5ba:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c5be:	56                   	push   esi
c000c5bf:	e8 2c 3f ff ff       	call   c00004f0 <memset>
c000c5c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c5c7:	e8 b4 3f ff ff       	call   c0000580 <strlen>
c000c5cc:	ba 50 00 00 00       	mov    edx,0x50
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	31 c9                	xor    ecx,ecx
c000c5d6:	29 c2                	sub    edx,eax
c000c5d8:	83 e2 fe             	and    edx,0xfffffffe
c000c5db:	01 f2                	add    edx,esi
c000c5dd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c5e2:	84 c0                	test   al,al
c000c5e4:	74 0a                	je     c000c5f0 <KeSetBootMessage(char const*)+0x4d>
c000c5e6:	80 cc 07             	or     ah,0x7
c000c5e9:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c5ed:	41                   	inc    ecx
c000c5ee:	eb ed                	jmp    c000c5dd <KeSetBootMessage(char const*)+0x3a>
c000c5f0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c5f5:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c5fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5fc:	50                   	push   eax
c000c5fd:	50                   	push   eax
c000c5fe:	53                   	push   ebx
c000c5ff:	68 23 1d 02 c0       	push   0xc0021d23
c000c604:	e8 45 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c609:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c60f:	5b                   	pop    ebx
c000c610:	5e                   	pop    esi
c000c611:	5f                   	pop    edi
c000c612:	c3                   	ret    

c000c613 <__cxa_atexit>:
c000c613:	31 c0                	xor    eax,eax
c000c615:	c3                   	ret    

c000c616 <__cxa_finalize>:
c000c616:	c3                   	ret    

c000c617 <__stack_chk_fail>:
c000c617:	55                   	push   ebp
c000c618:	89 e5                	mov    ebp,esp
c000c61a:	83 ec 10             	sub    esp,0x10
c000c61d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c620:	68 31 1d 02 c0       	push   0xc0021d31
c000c625:	e8 24 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c62a:	58                   	pop    eax
c000c62b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c62e:	5a                   	pop    edx
c000c62f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c632:	68 31 1d 02 c0       	push   0xc0021d31
c000c637:	e8 12 a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c63c:	c7 04 24 39 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d39
c000c643:	e8 f2 25 00 00       	call   c000ec3a <KePanic(char const*)>
c000c648:	83 c4 10             	add    esp,0x10
c000c64b:	c9                   	leave  
c000c64c:	c3                   	ret    

c000c64d <__cxa_pure_virtual>:
c000c64d:	83 ec 18             	sub    esp,0x18
c000c650:	68 51 1d 02 c0       	push   0xc0021d51
c000c655:	e8 e0 25 00 00       	call   c000ec3a <KePanic(char const*)>
c000c65a:	83 c4 1c             	add    esp,0x1c
c000c65d:	c3                   	ret    

c000c65e <operator new[](unsigned long)>:
c000c65e:	e9 83 22 00 00       	jmp    c000e8e6 <malloc>

c000c663 <operator delete(void*, unsigned long)>:
c000c663:	e9 9e 22 00 00       	jmp    c000e906 <rfree>

c000c668 <operator delete[](void*)>:
c000c668:	e9 99 22 00 00       	jmp    c000e906 <rfree>

c000c66d <operator delete[](void*, unsigned long)>:
c000c66d:	e9 94 22 00 00       	jmp    c000e906 <rfree>
c000c672:	66 90                	xchg   ax,ax

c000c674 <CUnlockScheduler>:
c000c674:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c679:	83 e8 01             	sub    eax,0x1
c000c67c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c681:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c686:	85 c0                	test   eax,eax
c000c688:	75 02                	jne    c000c68c <CUnlockScheduler+0x18>
c000c68a:	fb                   	sti    
c000c68b:	90                   	nop
c000c68c:	90                   	nop
c000c68d:	c3                   	ret    
c000c68e:	66 90                	xchg   ax,ax

c000c690 <CLockScheduler>:
c000c690:	fa                   	cli    
c000c691:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c696:	83 c0 01             	add    eax,0x1
c000c699:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c69e:	90                   	nop
c000c69f:	c3                   	ret    

c000c6a0 <CPrintf>:
c000c6a0:	83 ec 0c             	sub    esp,0xc
c000c6a3:	83 ec 08             	sub    esp,0x8
c000c6a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6aa:	68 64 1d 02 c0       	push   0xc0021d64
c000c6af:	e8 9a a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c6b4:	83 c4 10             	add    esp,0x10
c000c6b7:	90                   	nop
c000c6b8:	83 c4 0c             	add    esp,0xc
c000c6bb:	c3                   	ret    

c000c6bc <CmOpen(char const*)>:
c000c6bc:	57                   	push   edi
c000c6bd:	56                   	push   esi
c000c6be:	53                   	push   ebx
c000c6bf:	83 ec 1c             	sub    esp,0x1c
c000c6c2:	6a 30                	push   0x30
c000c6c4:	e8 1d 22 00 00       	call   c000e8e6 <malloc>
c000c6c9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c6d0:	89 c3                	mov    ebx,eax
c000c6d2:	e8 0f 22 00 00       	call   c000e8e6 <malloc>
c000c6d7:	83 c4 0c             	add    esp,0xc
c000c6da:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c6e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c6e4:	89 c6                	mov    esi,eax
c000c6e6:	50                   	push   eax
c000c6e7:	e8 20 ba ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c6ec:	83 c4 0c             	add    esp,0xc
c000c6ef:	89 33                	mov    DWORD PTR [ebx],esi
c000c6f1:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c6f5:	50                   	push   eax
c000c6f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6fa:	50                   	push   eax
c000c6fb:	56                   	push   esi
c000c6fc:	e8 2b bd ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000c701:	5a                   	pop    edx
c000c702:	59                   	pop    ecx
c000c703:	6a 01                	push   0x1
c000c705:	ff 33                	push   DWORD PTR [ebx]
c000c707:	e8 1e ba ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c70c:	5e                   	pop    esi
c000c70d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c711:	e8 d0 21 00 00       	call   c000e8e6 <malloc>
c000c716:	5a                   	pop    edx
c000c717:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c71b:	89 c7                	mov    edi,eax
c000c71d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c71f:	8b 10                	mov    edx,DWORD PTR [eax]
c000c721:	56                   	push   esi
c000c722:	57                   	push   edi
c000c723:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c727:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c72b:	50                   	push   eax
c000c72c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c72f:	83 c4 14             	add    esp,0x14
c000c732:	ff 33                	push   DWORD PTR [ebx]
c000c734:	e8 4f ba ff ff       	call   c0008188 <File::close()>
c000c739:	59                   	pop    ecx
c000c73a:	58                   	pop    eax
c000c73b:	6a 13                	push   0x13
c000c73d:	ff 33                	push   DWORD PTR [ebx]
c000c73f:	e8 e6 b9 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c744:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c746:	8b 10                	mov    edx,DWORD PTR [eax]
c000c748:	89 34 24             	mov    DWORD PTR [esp],esi
c000c74b:	57                   	push   edi
c000c74c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c750:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c754:	50                   	push   eax
c000c755:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c758:	83 c4 14             	add    esp,0x14
c000c75b:	57                   	push   edi
c000c75c:	e8 95 21 00 00       	call   c000e8f6 <free>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c767:	75 10                	jne    c000c779 <CmOpen(char const*)+0xbd>
c000c769:	83 ec 0c             	sub    esp,0xc
c000c76c:	68 67 1d 02 c0       	push   0xc0021d67
c000c771:	e8 c4 24 00 00       	call   c000ec3a <KePanic(char const*)>
c000c776:	83 c4 10             	add    esp,0x10
c000c779:	50                   	push   eax
c000c77a:	6a 00                	push   0x0
c000c77c:	6a 00                	push   0x0
c000c77e:	ff 33                	push   DWORD PTR [ebx]
c000c780:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c783:	e8 60 ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c788:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c78a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c78c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c78f:	57                   	push   edi
c000c790:	6a 00                	push   0x0
c000c792:	6a 2b                	push   0x2b
c000c794:	50                   	push   eax
c000c795:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c798:	83 c4 1c             	add    esp,0x1c
c000c79b:	6a 00                	push   0x0
c000c79d:	6a 00                	push   0x0
c000c79f:	ff 33                	push   DWORD PTR [ebx]
c000c7a1:	e8 42 ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c7a6:	83 c4 0c             	add    esp,0xc
c000c7a9:	6a 08                	push   0x8
c000c7ab:	68 78 1d 02 c0       	push   0xc0021d78
c000c7b0:	57                   	push   edi
c000c7b1:	e8 ca 3b ff ff       	call   c0000380 <memcmp>
c000c7b6:	83 c4 10             	add    esp,0x10
c000c7b9:	85 c0                	test   eax,eax
c000c7bb:	74 10                	je     c000c7cd <CmOpen(char const*)+0x111>
c000c7bd:	83 ec 0c             	sub    esp,0xc
c000c7c0:	68 81 1d 02 c0       	push   0xc0021d81
c000c7c5:	e8 70 24 00 00       	call   c000ec3a <KePanic(char const*)>
c000c7ca:	83 c4 10             	add    esp,0x10
c000c7cd:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	89 d8                	mov    eax,ebx
c000c7d6:	5b                   	pop    ebx
c000c7d7:	5e                   	pop    esi
c000c7d8:	5f                   	pop    edi
c000c7d9:	c3                   	ret    

c000c7da <CmClose(Reghive_Tag*)>:
c000c7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7de:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c7e2:	74 0b                	je     c000c7ef <CmClose(Reghive_Tag*)+0x15>
c000c7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c7ea:	e9 99 b9 ff ff       	jmp    c0008188 <File::close()>
c000c7ef:	c3                   	ret    

c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c7f0:	53                   	push   ebx
c000c7f1:	83 ec 18             	sub    esp,0x18
c000c7f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c7f8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c7fc:	74 29                	je     c000c827 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c7fe:	50                   	push   eax
c000c7ff:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c804:	99                   	cdq    
c000c805:	52                   	push   edx
c000c806:	50                   	push   eax
c000c807:	ff 33                	push   DWORD PTR [ebx]
c000c809:	e8 da b9 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c80e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c810:	5a                   	pop    edx
c000c811:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c815:	8b 10                	mov    edx,DWORD PTR [eax]
c000c817:	51                   	push   ecx
c000c818:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c81c:	6a 00                	push   0x0
c000c81e:	6a 2b                	push   0x2b
c000c820:	50                   	push   eax
c000c821:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c824:	83 c4 20             	add    esp,0x20
c000c827:	83 c4 18             	add    esp,0x18
c000c82a:	5b                   	pop    ebx
c000c82b:	c3                   	ret    

c000c82c <CmGetString(Reghive_Tag*, int, char*)>:
c000c82c:	55                   	push   ebp
c000c82d:	57                   	push   edi
c000c82e:	56                   	push   esi
c000c82f:	53                   	push   ebx
c000c830:	31 db                	xor    ebx,ebx
c000c832:	83 ec 70             	sub    esp,0x70
c000c835:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c839:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c840:	50                   	push   eax
c000c841:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c848:	55                   	push   ebp
c000c849:	e8 a2 ff ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c856:	c1 e0 08             	shl    eax,0x8
c000c859:	89 c2                	mov    edx,eax
c000c85b:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c860:	09 d0                	or     eax,edx
c000c862:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c867:	c1 e0 08             	shl    eax,0x8
c000c86a:	09 d0                	or     eax,edx
c000c86c:	74 25                	je     c000c893 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c86e:	52                   	push   edx
c000c86f:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c873:	52                   	push   edx
c000c874:	6b fb 0d             	imul   edi,ebx,0xd
c000c877:	50                   	push   eax
c000c878:	55                   	push   ebp
c000c879:	e8 72 ff ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c87e:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c882:	b9 27 00 00 00       	mov    ecx,0x27
c000c887:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c88e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c890:	83 c4 10             	add    esp,0x10
c000c893:	83 c3 03             	add    ebx,0x3
c000c896:	83 fb 15             	cmp    ebx,0x15
c000c899:	75 b6                	jne    c000c851 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c89b:	83 c4 6c             	add    esp,0x6c
c000c89e:	5b                   	pop    ebx
c000c89f:	5e                   	pop    esi
c000c8a0:	5f                   	pop    edi
c000c8a1:	5d                   	pop    ebp
c000c8a2:	c3                   	ret    

c000c8a3 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c8a3:	83 ec 40             	sub    esp,0x40
c000c8a6:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c8aa:	50                   	push   eax
c000c8ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8b3:	e8 38 ff ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8b8:	83 c4 10             	add    esp,0x10
c000c8bb:	83 c8 ff             	or     eax,0xffffffff
c000c8be:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c8c3:	75 19                	jne    c000c8de <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c8c5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c8ca:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c8cf:	c1 e0 08             	shl    eax,0x8
c000c8d2:	09 c2                	or     edx,eax
c000c8d4:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c8d9:	c1 e0 10             	shl    eax,0x10
c000c8dc:	09 d0                	or     eax,edx
c000c8de:	83 c4 3c             	add    esp,0x3c
c000c8e1:	c3                   	ret    

c000c8e2 <CmGetNext(Reghive_Tag*, int)>:
c000c8e2:	83 ec 40             	sub    esp,0x40
c000c8e5:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c8e9:	50                   	push   eax
c000c8ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8f2:	e8 f9 fe ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8f7:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c8fc:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c901:	c1 e0 08             	shl    eax,0x8
c000c904:	09 c2                	or     edx,eax
c000c906:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c90b:	83 c4 4c             	add    esp,0x4c
c000c90e:	c1 e0 10             	shl    eax,0x10
c000c911:	09 d0                	or     eax,edx
c000c913:	c3                   	ret    

c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c914:	53                   	push   ebx
c000c915:	83 ec 18             	sub    esp,0x18
c000c918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c91c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c920:	74 29                	je     c000c94b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c922:	50                   	push   eax
c000c923:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c928:	99                   	cdq    
c000c929:	52                   	push   edx
c000c92a:	50                   	push   eax
c000c92b:	ff 33                	push   DWORD PTR [ebx]
c000c92d:	e8 b6 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c932:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c934:	5a                   	pop    edx
c000c935:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c939:	8b 10                	mov    edx,DWORD PTR [eax]
c000c93b:	51                   	push   ecx
c000c93c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c940:	6a 00                	push   0x0
c000c942:	6a 2b                	push   0x2b
c000c944:	50                   	push   eax
c000c945:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c948:	83 c4 20             	add    esp,0x20
c000c94b:	83 c4 18             	add    esp,0x18
c000c94e:	5b                   	pop    ebx
c000c94f:	c3                   	ret    

c000c950 <CmFreeExtent(Reghive_Tag*, int)>:
c000c950:	53                   	push   ebx
c000c951:	83 ec 3c             	sub    esp,0x3c
c000c954:	6a 2b                	push   0x2b
c000c956:	6a 00                	push   0x0
c000c958:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c95c:	53                   	push   ebx
c000c95d:	e8 8e 3b ff ff       	call   c00004f0 <memset>
c000c962:	83 c4 0c             	add    esp,0xc
c000c965:	53                   	push   ebx
c000c966:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c96a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c96e:	e8 a1 ff ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c973:	83 c4 48             	add    esp,0x48
c000c976:	5b                   	pop    ebx
c000c977:	c3                   	ret    

c000c978 <CmUpdateHeader(Reghive_Tag*)>:
c000c978:	83 ec 0c             	sub    esp,0xc
c000c97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c97f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c983:	74 10                	je     c000c995 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000c985:	52                   	push   edx
c000c986:	8d 50 05             	lea    edx,[eax+0x5]
c000c989:	52                   	push   edx
c000c98a:	6a 00                	push   0x0
c000c98c:	50                   	push   eax
c000c98d:	e8 82 ff ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c992:	83 c4 10             	add    esp,0x10
c000c995:	83 c4 0c             	add    esp,0xc
c000c998:	c3                   	ret    

c000c999 <CmExpand(Reghive_Tag*, int)>:
c000c999:	55                   	push   ebp
c000c99a:	57                   	push   edi
c000c99b:	83 cf ff             	or     edi,0xffffffff
c000c99e:	56                   	push   esi
c000c99f:	53                   	push   ebx
c000c9a0:	83 ec 3c             	sub    esp,0x3c
c000c9a3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000c9a7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000c9ab:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9af:	74 59                	je     c000ca0a <CmExpand(Reghive_Tag*, int)+0x71>
c000c9b1:	50                   	push   eax
c000c9b2:	31 d2                	xor    edx,edx
c000c9b4:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000c9b8:	31 ff                	xor    edi,edi
c000c9ba:	52                   	push   edx
c000c9bb:	50                   	push   eax
c000c9bc:	ff 33                	push   DWORD PTR [ebx]
c000c9be:	e8 25 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c9c3:	83 c4 0c             	add    esp,0xc
c000c9c6:	6a 2b                	push   0x2b
c000c9c8:	6a 00                	push   0x0
c000c9ca:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000c9ce:	55                   	push   ebp
c000c9cf:	e8 1c 3b ff ff       	call   c00004f0 <memset>
c000c9d4:	83 c4 10             	add    esp,0x10
c000c9d7:	39 f7                	cmp    edi,esi
c000c9d9:	7d 1b                	jge    c000c9f6 <CmExpand(Reghive_Tag*, int)+0x5d>
c000c9db:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9dd:	83 ec 0c             	sub    esp,0xc
c000c9e0:	47                   	inc    edi
c000c9e1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000c9e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9e7:	51                   	push   ecx
c000c9e8:	55                   	push   ebp
c000c9e9:	6a 00                	push   0x0
c000c9eb:	6a 2b                	push   0x2b
c000c9ed:	50                   	push   eax
c000c9ee:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9f1:	83 c4 20             	add    esp,0x20
c000c9f4:	eb e1                	jmp    c000c9d7 <CmExpand(Reghive_Tag*, int)+0x3e>
c000c9f6:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000c9f9:	83 ec 0c             	sub    esp,0xc
c000c9fc:	01 fe                	add    esi,edi
c000c9fe:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000ca01:	53                   	push   ebx
c000ca02:	e8 71 ff ff ff       	call   c000c978 <CmUpdateHeader(Reghive_Tag*)>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	83 c4 3c             	add    esp,0x3c
c000ca0d:	89 f8                	mov    eax,edi
c000ca0f:	5b                   	pop    ebx
c000ca10:	5e                   	pop    esi
c000ca11:	5f                   	pop    edi
c000ca12:	5d                   	pop    ebp
c000ca13:	c3                   	ret    

c000ca14 <CmFindUnusedExtent(Reghive_Tag*)>:
c000ca14:	55                   	push   ebp
c000ca15:	57                   	push   edi
c000ca16:	56                   	push   esi
c000ca17:	53                   	push   ebx
c000ca18:	83 cb ff             	or     ebx,0xffffffff
c000ca1b:	83 ec 1c             	sub    esp,0x1c
c000ca1e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca22:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000ca26:	74 68                	je     c000ca90 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca28:	51                   	push   ecx
c000ca29:	be 2b 00 00 00       	mov    esi,0x2b
c000ca2e:	6a 00                	push   0x0
c000ca30:	31 ff                	xor    edi,edi
c000ca32:	6a 00                	push   0x0
c000ca34:	31 db                	xor    ebx,ebx
c000ca36:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca39:	e8 aa b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000ca44:	76 3b                	jbe    c000ca81 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000ca46:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca49:	83 ec 0c             	sub    esp,0xc
c000ca4c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca50:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca52:	51                   	push   ecx
c000ca53:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000ca57:	51                   	push   ecx
c000ca58:	6a 00                	push   0x0
c000ca5a:	6a 01                	push   0x1
c000ca5c:	50                   	push   eax
c000ca5d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca60:	83 c4 20             	add    esp,0x20
c000ca63:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ca68:	74 26                	je     c000ca90 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca6a:	52                   	push   edx
c000ca6b:	43                   	inc    ebx
c000ca6c:	57                   	push   edi
c000ca6d:	56                   	push   esi
c000ca6e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca71:	e8 72 b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca76:	83 c6 2b             	add    esi,0x2b
c000ca79:	83 d7 00             	adc    edi,0x0
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	eb c0                	jmp    c000ca41 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000ca81:	50                   	push   eax
c000ca82:	50                   	push   eax
c000ca83:	6a 40                	push   0x40
c000ca85:	55                   	push   ebp
c000ca86:	e8 0e ff ff ff       	call   c000c999 <CmExpand(Reghive_Tag*, int)>
c000ca8b:	83 c4 10             	add    esp,0x10
c000ca8e:	89 c3                	mov    ebx,eax
c000ca90:	83 c4 1c             	add    esp,0x1c
c000ca93:	89 d8                	mov    eax,ebx
c000ca95:	5b                   	pop    ebx
c000ca96:	5e                   	pop    esi
c000ca97:	5f                   	pop    edi
c000ca98:	5d                   	pop    ebp
c000ca99:	c3                   	ret    

c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000ca9a:	55                   	push   ebp
c000ca9b:	57                   	push   edi
c000ca9c:	56                   	push   esi
c000ca9d:	53                   	push   ebx
c000ca9e:	81 ec 88 00 00 00    	sub    esp,0x88
c000caa4:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000caab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cab2:	e8 5d ff ff ff       	call   c000ca14 <CmFindUnusedExtent(Reghive_Tag*)>
c000cab7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cabb:	83 c4 0c             	add    esp,0xc
c000cabe:	6a 2b                	push   0x2b
c000cac0:	6a 00                	push   0x0
c000cac2:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cac6:	55                   	push   ebp
c000cac7:	e8 24 3a ff ff       	call   c00004f0 <memset>
c000cacc:	83 c4 10             	add    esp,0x10
c000cacf:	85 db                	test   ebx,ebx
c000cad1:	74 12                	je     c000cae5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cad3:	51                   	push   ecx
c000cad4:	55                   	push   ebp
c000cad5:	53                   	push   ebx
c000cad6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cadd:	e8 0e fd ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cae9:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000caf0:	b9 2b 00 00 00       	mov    ecx,0x2b
c000caf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000caf7:	85 db                	test   ebx,ebx
c000caf9:	74 49                	je     c000cb44 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cafb:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cb00:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cb05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb09:	c1 e0 08             	shl    eax,0x8
c000cb0c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cb12:	09 c8                	or     eax,ecx
c000cb14:	74 11                	je     c000cb27 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cb16:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cb1a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cb1e:	c1 e8 10             	shr    eax,0x10
c000cb21:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cb25:	eb 0f                	jmp    c000cb36 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cb27:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb2c:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb31:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb36:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cb3a:	c1 ea 08             	shr    edx,0x8
c000cb3d:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cb42:	eb 0f                	jmp    c000cb53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cb44:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb49:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb4e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb53:	52                   	push   edx
c000cb54:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cb58:	50                   	push   eax
c000cb59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb5d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb64:	e8 ab fd ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb69:	83 c4 10             	add    esp,0x10
c000cb6c:	85 db                	test   ebx,ebx
c000cb6e:	74 12                	je     c000cb82 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cb70:	50                   	push   eax
c000cb71:	55                   	push   ebp
c000cb72:	53                   	push   ebx
c000cb73:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb7a:	e8 95 fd ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb7f:	83 c4 10             	add    esp,0x10
c000cb82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb86:	83 c4 7c             	add    esp,0x7c
c000cb89:	5b                   	pop    ebx
c000cb8a:	5e                   	pop    esi
c000cb8b:	5f                   	pop    edi
c000cb8c:	5d                   	pop    ebp
c000cb8d:	c3                   	ret    

c000cb8e <CmSetString(Reghive_Tag*, int, char const*)>:
c000cb8e:	55                   	push   ebp
c000cb8f:	57                   	push   edi
c000cb90:	56                   	push   esi
c000cb91:	53                   	push   ebx
c000cb92:	bb 27 00 00 00       	mov    ebx,0x27
c000cb97:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb9d:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000cba4:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cbab:	e8 d0 39 ff ff       	call   c0000580 <strlen>
c000cbb0:	8d 48 26             	lea    ecx,[eax+0x26]
c000cbb3:	89 c8                	mov    eax,ecx
c000cbb5:	99                   	cdq    
c000cbb6:	f7 fb                	idiv   ebx
c000cbb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cbc5:	7e 10                	jle    c000cbd7 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cbc7:	83 ec 0c             	sub    esp,0xc
c000cbca:	68 92 1d 02 c0       	push   0xc0021d92
c000cbcf:	e8 66 20 00 00       	call   c000ec3a <KePanic(char const*)>
c000cbd4:	83 c4 10             	add    esp,0x10
c000cbd7:	53                   	push   ebx
c000cbd8:	31 ed                	xor    ebp,ebp
c000cbda:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cbde:	53                   	push   ebx
c000cbdf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbe6:	57                   	push   edi
c000cbe7:	e8 04 fc ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cbec:	83 c4 10             	add    esp,0x10
c000cbef:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000cbf3:	89 f0                	mov    eax,esi
c000cbf5:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000cbf9:	c1 e0 08             	shl    eax,0x8
c000cbfc:	09 c6                	or     esi,eax
c000cbfe:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cc02:	c1 e6 08             	shl    esi,0x8
c000cc05:	09 c6                	or     esi,eax
c000cc07:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000cc0b:	7e 72                	jle    c000cc7f <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000cc0d:	85 f6                	test   esi,esi
c000cc0f:	75 25                	jne    c000cc36 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cc11:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cc16:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cc1a:	50                   	push   eax
c000cc1b:	6a 00                	push   0x0
c000cc1d:	6a 00                	push   0x0
c000cc1f:	57                   	push   edi
c000cc20:	e8 75 fe ff ff       	call   c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cc25:	83 c4 10             	add    esp,0x10
c000cc28:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cc2b:	89 c6                	mov    esi,eax
c000cc2d:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cc30:	c1 f8 10             	sar    eax,0x10
c000cc33:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cc36:	51                   	push   ecx
c000cc37:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc3b:	52                   	push   edx
c000cc3c:	56                   	push   esi
c000cc3d:	57                   	push   edi
c000cc3e:	e8 ad fb ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc43:	83 c4 0c             	add    esp,0xc
c000cc46:	6a 27                	push   0x27
c000cc48:	6a 00                	push   0x0
c000cc4a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc4e:	51                   	push   ecx
c000cc4f:	e8 9c 38 ff ff       	call   c00004f0 <memset>
c000cc54:	6b c5 27             	imul   eax,ebp,0x27
c000cc57:	83 c4 0c             	add    esp,0xc
c000cc5a:	6a 27                	push   0x27
c000cc5c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cc63:	50                   	push   eax
c000cc64:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc68:	51                   	push   ecx
c000cc69:	e8 22 3a ff ff       	call   c0000690 <strncpy>
c000cc6e:	83 c4 0c             	add    esp,0xc
c000cc71:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc75:	52                   	push   edx
c000cc76:	56                   	push   esi
c000cc77:	57                   	push   edi
c000cc78:	e8 97 fc ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc7d:	eb 19                	jmp    c000cc98 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000cc7f:	85 f6                	test   esi,esi
c000cc81:	74 18                	je     c000cc9b <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000cc83:	52                   	push   edx
c000cc84:	52                   	push   edx
c000cc85:	56                   	push   esi
c000cc86:	57                   	push   edi
c000cc87:	e8 c4 fc ff ff       	call   c000c950 <CmFreeExtent(Reghive_Tag*, int)>
c000cc8c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cc90:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cc94:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	45                   	inc    ebp
c000cc9c:	83 c3 03             	add    ebx,0x3
c000cc9f:	83 fd 07             	cmp    ebp,0x7
c000cca2:	0f 85 47 ff ff ff    	jne    c000cbef <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cca8:	50                   	push   eax
c000cca9:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000ccad:	50                   	push   eax
c000ccae:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ccb5:	57                   	push   edi
c000ccb6:	e8 59 fc ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccbb:	81 c4 8c 00 00 00    	add    esp,0x8c
c000ccc1:	5b                   	pop    ebx
c000ccc2:	5e                   	pop    esi
c000ccc3:	5f                   	pop    edi
c000ccc4:	5d                   	pop    ebp
c000ccc5:	c3                   	ret    

c000ccc6 <CmGetMatch(char*, char*, bool, bool*)>:
c000ccc6:	56                   	push   esi
c000ccc7:	53                   	push   ebx
c000ccc8:	50                   	push   eax
c000ccc9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccce:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ccd2:	74 25                	je     c000ccf9 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000ccd4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ccd7:	31 db                	xor    ebx,ebx
c000ccd9:	50                   	push   eax
c000ccda:	50                   	push   eax
c000ccdb:	8d 04 9d 40 3b 02 c0 	lea    eax,[ebx*4-0x3ffdc4c0]
c000cce2:	50                   	push   eax
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 94 3a ff ff       	call   c0000780 <strcmp>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	74 2e                	je     c000cd21 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000ccf3:	43                   	inc    ebx
c000ccf4:	83 fb 3f             	cmp    ebx,0x3f
c000ccf7:	75 e0                	jne    c000ccd9 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000ccf9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ccfc:	31 db                	xor    ebx,ebx
c000ccfe:	51                   	push   ecx
c000ccff:	51                   	push   ecx
c000cd00:	8d 04 9d 40 3b 02 c0 	lea    eax,[ebx*4-0x3ffdc4c0]
c000cd07:	50                   	push   eax
c000cd08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cd0c:	e8 6f 3a ff ff       	call   c0000780 <strcmp>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	85 c0                	test   eax,eax
c000cd16:	74 09                	je     c000cd21 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd18:	43                   	inc    ebx
c000cd19:	83 fb 3f             	cmp    ebx,0x3f
c000cd1c:	75 e0                	jne    c000ccfe <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cd1e:	83 cb ff             	or     ebx,0xffffffff
c000cd21:	5a                   	pop    edx
c000cd22:	89 d8                	mov    eax,ebx
c000cd24:	5b                   	pop    ebx
c000cd25:	5e                   	pop    esi
c000cd26:	c3                   	ret    

c000cd27 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cd27:	55                   	push   ebp
c000cd28:	31 c0                	xor    eax,eax
c000cd2a:	57                   	push   edi
c000cd2b:	56                   	push   esi
c000cd2c:	53                   	push   ebx
c000cd2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd31:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cd39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd3d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cd3f:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cd42:	83 fd 1f             	cmp    ebp,0x1f
c000cd45:	7f 0b                	jg     c000cd52 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cd47:	0f b6 c2             	movzx  eax,dl
c000cd4a:	d3 e0                	shl    eax,cl
c000cd4c:	09 07                	or     DWORD PTR [edi],eax
c000cd4e:	b0 01                	mov    al,0x1
c000cd50:	01 33                	add    DWORD PTR [ebx],esi
c000cd52:	5b                   	pop    ebx
c000cd53:	5e                   	pop    esi
c000cd54:	5f                   	pop    edi
c000cd55:	5d                   	pop    ebp
c000cd56:	c3                   	ret    

c000cd57 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cd57:	57                   	push   edi
c000cd58:	56                   	push   esi
c000cd59:	53                   	push   ebx
c000cd5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd5e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cd62:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cd66:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd6a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cd6c:	7c 17                	jl     c000cd85 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cd6e:	8b 17                	mov    edx,DWORD PTR [edi]
c000cd70:	b8 01 00 00 00       	mov    eax,0x1
c000cd75:	d3 e0                	shl    eax,cl
c000cd77:	48                   	dec    eax
c000cd78:	21 d0                	and    eax,edx
c000cd7a:	d3 ea                	shr    edx,cl
c000cd7c:	89 17                	mov    DWORD PTR [edi],edx
c000cd7e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cd80:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd83:	eb 05                	jmp    c000cd8a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cd85:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd88:	31 c0                	xor    eax,eax
c000cd8a:	5b                   	pop    ebx
c000cd8b:	5e                   	pop    esi
c000cd8c:	5f                   	pop    edi
c000cd8d:	c3                   	ret    

c000cd8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cd8e:	83 ec 40             	sub    esp,0x40
c000cd91:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cd95:	50                   	push   eax
c000cd96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd9e:	e8 4d fa ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cda3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cda7:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cdab:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cdaf:	89 10                	mov    DWORD PTR [eax],edx
c000cdb1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cdb4:	83 c4 4c             	add    esp,0x4c
c000cdb7:	c3                   	ret    

c000cdb8 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cdb8:	55                   	push   ebp
c000cdb9:	57                   	push   edi
c000cdba:	56                   	push   esi
c000cdbb:	53                   	push   ebx
c000cdbc:	83 ec 40             	sub    esp,0x40
c000cdbf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000cdc3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000cdc7:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000cdcb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cdcf:	53                   	push   ebx
c000cdd0:	56                   	push   esi
c000cdd1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cdd5:	e8 16 fa ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cdda:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000cdde:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000cde2:	83 c4 0c             	add    esp,0xc
c000cde5:	53                   	push   ebx
c000cde6:	56                   	push   esi
c000cde7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cdeb:	e8 24 fb ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cdf0:	83 c4 4c             	add    esp,0x4c
c000cdf3:	5b                   	pop    ebx
c000cdf4:	5e                   	pop    esi
c000cdf5:	5f                   	pop    edi
c000cdf6:	5d                   	pop    ebp
c000cdf7:	c3                   	ret    

c000cdf8 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cdf8:	55                   	push   ebp
c000cdf9:	57                   	push   edi
c000cdfa:	56                   	push   esi
c000cdfb:	31 f6                	xor    esi,esi
c000cdfd:	53                   	push   ebx
c000cdfe:	31 db                	xor    ebx,ebx
c000ce00:	83 ec 40             	sub    esp,0x40
c000ce03:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ce0b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ce13:	6a 12                	push   0x12
c000ce15:	68 ee 00 00 00       	push   0xee
c000ce1a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce1e:	e8 cd 36 ff ff       	call   c00004f0 <memset>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ce2a:	6a 08                	push   0x8
c000ce2c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce30:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ce34:	50                   	push   eax
c000ce35:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce39:	55                   	push   ebp
c000ce3a:	57                   	push   edi
c000ce3b:	e8 e7 fe ff ff       	call   c000cd27 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ce40:	83 c4 10             	add    esp,0x10
c000ce43:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ce47:	50                   	push   eax
c000ce48:	6a 06                	push   0x6
c000ce4a:	55                   	push   ebp
c000ce4b:	57                   	push   edi
c000ce4c:	e8 06 ff ff ff       	call   c000cd57 <CmGetShift(unsigned int*, int*, int, bool*)>
c000ce51:	83 c4 10             	add    esp,0x10
c000ce54:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ce59:	74 07                	je     c000ce62 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000ce5b:	46                   	inc    esi
c000ce5c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000ce60:	eb e1                	jmp    c000ce43 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000ce62:	43                   	inc    ebx
c000ce63:	83 fb 12             	cmp    ebx,0x12
c000ce66:	75 c2                	jne    c000ce2a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000ce68:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce6c:	31 f6                	xor    esi,esi
c000ce6e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ce71:	50                   	push   eax
c000ce72:	50                   	push   eax
c000ce73:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000ce78:	46                   	inc    esi
c000ce79:	8d 04 85 40 3b 02 c0 	lea    eax,[eax*4-0x3ffdc4c0]
c000ce80:	50                   	push   eax
c000ce81:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce85:	e8 e6 39 ff ff       	call   c0000870 <strcat>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	83 fe 18             	cmp    esi,0x18
c000ce90:	75 df                	jne    c000ce71 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000ce92:	83 c4 3c             	add    esp,0x3c
c000ce95:	31 c0                	xor    eax,eax
c000ce97:	5b                   	pop    ebx
c000ce98:	5e                   	pop    esi
c000ce99:	5f                   	pop    edi
c000ce9a:	5d                   	pop    ebp
c000ce9b:	c3                   	ret    

c000ce9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000ce9c:	83 ec 40             	sub    esp,0x40
c000ce9f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cea3:	50                   	push   eax
c000cea4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cea8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ceac:	e8 3f f9 ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ceb1:	58                   	pop    eax
c000ceb2:	5a                   	pop    edx
c000ceb3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000ceb7:	8d 44 24 15          	lea    eax,[esp+0x15]
c000cebb:	50                   	push   eax
c000cebc:	e8 37 ff ff ff       	call   c000cdf8 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cec1:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cec6:	83 c4 4c             	add    esp,0x4c
c000cec9:	c3                   	ret    

c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000ceca:	55                   	push   ebp
c000cecb:	57                   	push   edi
c000cecc:	56                   	push   esi
c000cecd:	53                   	push   ebx
c000cece:	31 db                	xor    ebx,ebx
c000ced0:	83 ec 70             	sub    esp,0x70
c000ced3:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000ceda:	6a 30                	push   0x30
c000cedc:	6a 00                	push   0x0
c000cede:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cee2:	56                   	push   esi
c000cee3:	e8 08 36 ff ff       	call   c00004f0 <memset>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	83 ec 0c             	sub    esp,0xc
c000ceee:	57                   	push   edi
c000ceef:	e8 8c 36 ff ff       	call   c0000580 <strlen>
c000cef4:	83 c4 10             	add    esp,0x10
c000cef7:	39 d8                	cmp    eax,ebx
c000cef9:	76 16                	jbe    c000cf11 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cefb:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000ceff:	83 ec 0c             	sub    esp,0xc
c000cf02:	50                   	push   eax
c000cf03:	e8 58 3a ff ff       	call   c0000960 <toupper>
c000cf08:	83 c4 10             	add    esp,0x10
c000cf0b:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cf0e:	43                   	inc    ebx
c000cf0f:	eb da                	jmp    c000ceeb <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cf11:	52                   	push   edx
c000cf12:	31 db                	xor    ebx,ebx
c000cf14:	6a 18                	push   0x18
c000cf16:	31 ff                	xor    edi,edi
c000cf18:	6a 3f                	push   0x3f
c000cf1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cf1e:	50                   	push   eax
c000cf1f:	e8 cc 35 ff ff       	call   c00004f0 <memset>
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000cf2b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cf2f:	84 c0                	test   al,al
c000cf31:	0f 84 af 00 00 00    	je     c000cfe6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cf37:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cf3b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cf3e:	83 ec 0c             	sub    esp,0xc
c000cf41:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000cf46:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cf4a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000cf4e:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000cf53:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cf57:	56                   	push   esi
c000cf58:	e8 23 36 ff ff       	call   c0000580 <strlen>
c000cf5d:	83 c4 10             	add    esp,0x10
c000cf60:	85 c0                	test   eax,eax
c000cf62:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cf66:	74 0b                	je     c000cf73 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000cf68:	50                   	push   eax
c000cf69:	6a 01                	push   0x1
c000cf6b:	56                   	push   esi
c000cf6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000cf70:	50                   	push   eax
c000cf71:	eb 0a                	jmp    c000cf7d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000cf73:	50                   	push   eax
c000cf74:	6a 00                	push   0x0
c000cf76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000cf7a:	50                   	push   eax
c000cf7b:	6a 00                	push   0x0
c000cf7d:	e8 44 fd ff ff       	call   c000ccc6 <CmGetMatch(char*, char*, bool, bool*)>
c000cf82:	83 c4 10             	add    esp,0x10
c000cf85:	83 f8 ff             	cmp    eax,0xffffffff
c000cf88:	75 1a                	jne    c000cfa4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000cf8a:	83 ec 0c             	sub    esp,0xc
c000cf8d:	68 a7 1d 02 c0       	push   0xc0021da7
c000cf92:	e8 a3 1c 00 00       	call   c000ec3a <KePanic(char const*)>
c000cf97:	83 c4 10             	add    esp,0x10
c000cf9a:	b8 02 00 00 00       	mov    eax,0x2
c000cf9f:	e9 bb 00 00 00       	jmp    c000d05f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cfa4:	83 ff 18             	cmp    edi,0x18
c000cfa7:	75 1a                	jne    c000cfc3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000cfa9:	83 ec 0c             	sub    esp,0xc
c000cfac:	68 bc 1d 02 c0       	push   0xc0021dbc
c000cfb1:	e8 84 1c 00 00       	call   c000ec3a <KePanic(char const*)>
c000cfb6:	83 c4 10             	add    esp,0x10
c000cfb9:	b8 01 00 00 00       	mov    eax,0x1
c000cfbe:	e9 9c 00 00 00       	jmp    c000d05f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cfc3:	47                   	inc    edi
c000cfc4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cfc9:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000cfcd:	0f 45 dd             	cmovne ebx,ebp
c000cfd0:	83 ec 0c             	sub    esp,0xc
c000cfd3:	56                   	push   esi
c000cfd4:	e8 a7 35 ff ff       	call   c0000580 <strlen>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	74 06                	je     c000cfe6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cfe0:	43                   	inc    ebx
c000cfe1:	e9 41 ff ff ff       	jmp    c000cf27 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000cfe6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfee:	31 db                	xor    ebx,ebx
c000cff0:	31 ff                	xor    edi,edi
c000cff2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cffa:	50                   	push   eax
c000cffb:	6a 12                	push   0x12
c000cffd:	68 ee 00 00 00       	push   0xee
c000d002:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d009:	e8 e2 34 ff ff       	call   c00004f0 <memset>
c000d00e:	83 c4 10             	add    esp,0x10
c000d011:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d015:	83 fb 17             	cmp    ebx,0x17
c000d018:	7e 26                	jle    c000d040 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d01a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d01e:	50                   	push   eax
c000d01f:	6a 08                	push   0x8
c000d021:	55                   	push   ebp
c000d022:	56                   	push   esi
c000d023:	e8 2f fd ff ff       	call   c000cd57 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d028:	83 c4 10             	add    esp,0x10
c000d02b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d030:	74 26                	je     c000d058 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d032:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d039:	4b                   	dec    ebx
c000d03a:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d03d:	47                   	inc    edi
c000d03e:	eb 1c                	jmp    c000d05c <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d040:	6a 06                	push   0x6
c000d042:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d047:	50                   	push   eax
c000d048:	55                   	push   ebp
c000d049:	56                   	push   esi
c000d04a:	e8 d8 fc ff ff       	call   c000cd27 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d04f:	83 c4 10             	add    esp,0x10
c000d052:	84 c0                	test   al,al
c000d054:	75 06                	jne    c000d05c <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d056:	eb c2                	jmp    c000d01a <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d058:	31 c0                	xor    eax,eax
c000d05a:	eb 03                	jmp    c000d05f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d05c:	43                   	inc    ebx
c000d05d:	eb b2                	jmp    c000d011 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d05f:	83 c4 6c             	add    esp,0x6c
c000d062:	5b                   	pop    ebx
c000d063:	5e                   	pop    esi
c000d064:	5f                   	pop    edi
c000d065:	5d                   	pop    ebp
c000d066:	c3                   	ret    

c000d067 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d067:	53                   	push   ebx
c000d068:	83 ec 3c             	sub    esp,0x3c
c000d06b:	6a 2b                	push   0x2b
c000d06d:	6a 00                	push   0x0
c000d06f:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d073:	53                   	push   ebx
c000d074:	e8 77 34 ff ff       	call   c00004f0 <memset>
c000d079:	58                   	pop    eax
c000d07a:	5a                   	pop    edx
c000d07b:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d07f:	50                   	push   eax
c000d080:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d084:	e8 41 fe ff ff       	call   c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d089:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d08e:	83 c4 0c             	add    esp,0xc
c000d091:	6a 15                	push   0x15
c000d093:	6a 00                	push   0x0
c000d095:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d099:	50                   	push   eax
c000d09a:	e8 51 34 ff ff       	call   c00004f0 <memset>
c000d09f:	53                   	push   ebx
c000d0a0:	6a 00                	push   0x0
c000d0a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0aa:	e8 eb f9 ff ff       	call   c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d0af:	83 c4 58             	add    esp,0x58
c000d0b2:	5b                   	pop    ebx
c000d0b3:	c3                   	ret    

c000d0b4 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d0b4:	56                   	push   esi
c000d0b5:	53                   	push   ebx
c000d0b6:	83 ec 48             	sub    esp,0x48
c000d0b9:	6a 12                	push   0x12
c000d0bb:	68 ff 00 00 00       	push   0xff
c000d0c0:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d0c4:	56                   	push   esi
c000d0c5:	e8 26 34 ff ff       	call   c00004f0 <memset>
c000d0ca:	5a                   	pop    edx
c000d0cb:	59                   	pop    ecx
c000d0cc:	56                   	push   esi
c000d0cd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d0d1:	e8 f4 fd ff ff       	call   c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d0dd:	85 db                	test   ebx,ebx
c000d0df:	74 42                	je     c000d123 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d0e1:	50                   	push   eax
c000d0e2:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d0e6:	50                   	push   eax
c000d0e7:	53                   	push   ebx
c000d0e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0ec:	e8 ff f6 ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0f1:	83 c4 0c             	add    esp,0xc
c000d0f4:	6a 12                	push   0x12
c000d0f6:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d0fa:	50                   	push   eax
c000d0fb:	56                   	push   esi
c000d0fc:	e8 7f 32 ff ff       	call   c0000380 <memcmp>
c000d101:	83 c4 10             	add    esp,0x10
c000d104:	85 c0                	test   eax,eax
c000d106:	74 1e                	je     c000d126 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d108:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d10d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d112:	c1 e3 08             	shl    ebx,0x8
c000d115:	09 d8                	or     eax,ebx
c000d117:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d11c:	c1 e3 10             	shl    ebx,0x10
c000d11f:	09 c3                	or     ebx,eax
c000d121:	eb ba                	jmp    c000d0dd <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d123:	83 cb ff             	or     ebx,0xffffffff
c000d126:	83 c4 44             	add    esp,0x44
c000d129:	89 d8                	mov    eax,ebx
c000d12b:	5b                   	pop    ebx
c000d12c:	5e                   	pop    esi
c000d12d:	c3                   	ret    

c000d12e <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d12e:	57                   	push   edi
c000d12f:	56                   	push   esi
c000d130:	53                   	push   ebx
c000d131:	83 ec 34             	sub    esp,0x34
c000d134:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d138:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d13c:	6a 2b                	push   0x2b
c000d13e:	6a 00                	push   0x0
c000d140:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d144:	53                   	push   ebx
c000d145:	e8 a6 33 ff ff       	call   c00004f0 <memset>
c000d14a:	58                   	pop    eax
c000d14b:	5a                   	pop    edx
c000d14c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d150:	50                   	push   eax
c000d151:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d155:	e8 70 fd ff ff       	call   c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d15a:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d15e:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d162:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d166:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d16a:	53                   	push   ebx
c000d16b:	6a 00                	push   0x0
c000d16d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d171:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d175:	e8 20 f9 ff ff       	call   c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d17a:	83 c4 50             	add    esp,0x50
c000d17d:	5b                   	pop    ebx
c000d17e:	5e                   	pop    esi
c000d17f:	5f                   	pop    edi
c000d180:	c3                   	ret    

c000d181 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d181:	55                   	push   ebp
c000d182:	57                   	push   edi
c000d183:	56                   	push   esi
c000d184:	53                   	push   ebx
c000d185:	83 ec 40             	sub    esp,0x40
c000d188:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d18c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d190:	6a 2b                	push   0x2b
c000d192:	6a 00                	push   0x0
c000d194:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d198:	56                   	push   esi
c000d199:	e8 52 33 ff ff       	call   c00004f0 <memset>
c000d19e:	5f                   	pop    edi
c000d19f:	89 ef                	mov    edi,ebp
c000d1a1:	58                   	pop    eax
c000d1a2:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d1ab:	e8 1a fd ff ff       	call   c000ceca <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1b0:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d1b5:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d1ba:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d1bf:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	85 ed                	test   ebp,ebp
c000d1c9:	74 14                	je     c000d1df <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1cb:	51                   	push   ecx
c000d1cc:	51                   	push   ecx
c000d1cd:	57                   	push   edi
c000d1ce:	53                   	push   ebx
c000d1cf:	e8 0e f7 ff ff       	call   c000c8e2 <CmGetNext(Reghive_Tag*, int)>
c000d1d4:	83 c4 10             	add    esp,0x10
c000d1d7:	85 c0                	test   eax,eax
c000d1d9:	74 04                	je     c000d1df <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1db:	89 c7                	mov    edi,eax
c000d1dd:	eb e8                	jmp    c000d1c7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d1df:	56                   	push   esi
c000d1e0:	6a 00                	push   0x0
c000d1e2:	57                   	push   edi
c000d1e3:	53                   	push   ebx
c000d1e4:	e8 b1 f8 ff ff       	call   c000ca9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d1e9:	83 c4 0c             	add    esp,0xc
c000d1ec:	56                   	push   esi
c000d1ed:	50                   	push   eax
c000d1ee:	89 c7                	mov    edi,eax
c000d1f0:	53                   	push   ebx
c000d1f1:	e8 fa f5 ff ff       	call   c000c7f0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d1f6:	58                   	pop    eax
c000d1f7:	5a                   	pop    edx
c000d1f8:	6a 6c                	push   0x6c
c000d1fa:	6a 00                	push   0x0
c000d1fc:	6a 00                	push   0x0
c000d1fe:	68 cd 1d 02 c0       	push   0xc0021dcd
c000d203:	57                   	push   edi
c000d204:	53                   	push   ebx
c000d205:	e8 24 ff ff ff       	call   c000d12e <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d20a:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d20e:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d212:	c1 e8 10             	shr    eax,0x10
c000d215:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d219:	83 c4 1c             	add    esp,0x1c
c000d21c:	56                   	push   esi
c000d21d:	57                   	push   edi
c000d21e:	53                   	push   ebx
c000d21f:	e8 f0 f6 ff ff       	call   c000c914 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d224:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d229:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d22e:	c1 e0 08             	shl    eax,0x8
c000d231:	09 c2                	or     edx,eax
c000d233:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d238:	83 c4 4c             	add    esp,0x4c
c000d23b:	5b                   	pop    ebx
c000d23c:	5e                   	pop    esi
c000d23d:	c1 e0 10             	shl    eax,0x10
c000d240:	09 d0                	or     eax,edx
c000d242:	5f                   	pop    edi
c000d243:	5d                   	pop    ebp
c000d244:	c3                   	ret    

c000d245 <zStrtok(char*, char const*)>:
c000d245:	55                   	push   ebp
c000d246:	57                   	push   edi
c000d247:	56                   	push   esi
c000d248:	53                   	push   ebx
c000d249:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d24d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d251:	85 db                	test   ebx,ebx
c000d253:	74 2f                	je     c000d284 <zStrtok(char*, char const*)+0x3f>
c000d255:	85 c0                	test   eax,eax
c000d257:	75 09                	jne    c000d262 <zStrtok(char*, char const*)+0x1d>
c000d259:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d25e:	85 c0                	test   eax,eax
c000d260:	74 50                	je     c000d2b2 <zStrtok(char*, char const*)+0x6d>
c000d262:	31 c9                	xor    ecx,ecx
c000d264:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d268:	74 03                	je     c000d26d <zStrtok(char*, char const*)+0x28>
c000d26a:	41                   	inc    ecx
c000d26b:	eb f7                	jmp    c000d264 <zStrtok(char*, char const*)+0x1f>
c000d26d:	31 d2                	xor    edx,edx
c000d26f:	39 ca                	cmp    edx,ecx
c000d271:	74 15                	je     c000d288 <zStrtok(char*, char const*)+0x43>
c000d273:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d277:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d27a:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d27d:	39 ee                	cmp    esi,ebp
c000d27f:	74 13                	je     c000d294 <zStrtok(char*, char const*)+0x4f>
c000d281:	42                   	inc    edx
c000d282:	eb eb                	jmp    c000d26f <zStrtok(char*, char const*)+0x2a>
c000d284:	31 c0                	xor    eax,eax
c000d286:	eb 2a                	jmp    c000d2b2 <zStrtok(char*, char const*)+0x6d>
c000d288:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d292:	eb 1e                	jmp    c000d2b2 <zStrtok(char*, char const*)+0x6d>
c000d294:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d297:	39 ce                	cmp    esi,ecx
c000d299:	75 0a                	jne    c000d2a5 <zStrtok(char*, char const*)+0x60>
c000d29b:	40                   	inc    eax
c000d29c:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d2a1:	89 d8                	mov    eax,ebx
c000d2a3:	eb 0d                	jmp    c000d2b2 <zStrtok(char*, char const*)+0x6d>
c000d2a5:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d2a8:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d2ac:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d2b2:	5b                   	pop    ebx
c000d2b3:	5e                   	pop    esi
c000d2b4:	5f                   	pop    edi
c000d2b5:	5d                   	pop    ebp
c000d2b6:	c3                   	ret    

c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d2b7:	57                   	push   edi
c000d2b8:	56                   	push   esi
c000d2b9:	53                   	push   ebx
c000d2ba:	81 ec 08 01 00 00    	sub    esp,0x108
c000d2c0:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d2c7:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d2ce:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d2d2:	53                   	push   ebx
c000d2d3:	e8 78 33 ff ff       	call   c0000650 <strcpy>
c000d2d8:	59                   	pop    ecx
c000d2d9:	5e                   	pop    esi
c000d2da:	68 15 2b 02 c0       	push   0xc0022b15
c000d2df:	53                   	push   ebx
c000d2e0:	bb 01 00 00 00       	mov    ebx,0x1
c000d2e5:	e8 5b ff ff ff       	call   c000d245 <zStrtok(char*, char const*)>
c000d2ea:	83 c4 10             	add    esp,0x10
c000d2ed:	85 c0                	test   eax,eax
c000d2ef:	74 3b                	je     c000d32c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d2f1:	52                   	push   edx
c000d2f2:	50                   	push   eax
c000d2f3:	6a 01                	push   0x1
c000d2f5:	57                   	push   edi
c000d2f6:	e8 b9 fd ff ff       	call   c000d0b4 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d2fb:	59                   	pop    ecx
c000d2fc:	5e                   	pop    esi
c000d2fd:	89 c3                	mov    ebx,eax
c000d2ff:	68 15 2b 02 c0       	push   0xc0022b15
c000d304:	6a 00                	push   0x0
c000d306:	e8 3a ff ff ff       	call   c000d245 <zStrtok(char*, char const*)>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	85 c0                	test   eax,eax
c000d310:	89 c6                	mov    esi,eax
c000d312:	74 18                	je     c000d32c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d314:	52                   	push   edx
c000d315:	52                   	push   edx
c000d316:	53                   	push   ebx
c000d317:	57                   	push   edi
c000d318:	e8 86 f5 ff ff       	call   c000c8a3 <CmEnterDirectory(Reghive_Tag*, int)>
c000d31d:	83 c4 10             	add    esp,0x10
c000d320:	83 f8 ff             	cmp    eax,0xffffffff
c000d323:	89 c3                	mov    ebx,eax
c000d325:	74 05                	je     c000d32c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d327:	50                   	push   eax
c000d328:	56                   	push   esi
c000d329:	53                   	push   ebx
c000d32a:	eb c9                	jmp    c000d2f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d32c:	81 c4 00 01 00 00    	add    esp,0x100
c000d332:	89 d8                	mov    eax,ebx
c000d334:	5b                   	pop    ebx
c000d335:	5e                   	pop    esi
c000d336:	5f                   	pop    edi
c000d337:	c3                   	ret    

c000d338 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d338:	55                   	push   ebp
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 5c             	sub    esp,0x5c
c000d33f:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d343:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d347:	85 db                	test   ebx,ebx
c000d349:	0f 8e 84 00 00 00    	jle    c000d3d3 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d34f:	57                   	push   edi
c000d350:	31 ed                	xor    ebp,ebp
c000d352:	6a 32                	push   0x32
c000d354:	6a 00                	push   0x0
c000d356:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d35a:	57                   	push   edi
c000d35b:	e8 90 31 ff ff       	call   c00004f0 <memset>
c000d360:	83 c4 0c             	add    esp,0xc
c000d363:	57                   	push   edi
c000d364:	53                   	push   ebx
c000d365:	56                   	push   esi
c000d366:	e8 31 fb ff ff       	call   c000ce9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d36b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d376:	7d 13                	jge    c000d38b <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d378:	83 ec 0c             	sub    esp,0xc
c000d37b:	45                   	inc    ebp
c000d37c:	68 9e 2f 02 c0       	push   0xc0022f9e
c000d381:	e8 c8 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d386:	83 c4 10             	add    esp,0x10
c000d389:	eb e7                	jmp    c000d372 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d38b:	51                   	push   ecx
c000d38c:	57                   	push   edi
c000d38d:	53                   	push   ebx
c000d38e:	68 d3 1d 02 c0       	push   0xc0021dd3
c000d393:	e8 b6 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d398:	83 c4 10             	add    esp,0x10
c000d39b:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d3a0:	75 1e                	jne    c000d3c0 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d3a2:	52                   	push   edx
c000d3a3:	52                   	push   edx
c000d3a4:	53                   	push   ebx
c000d3a5:	56                   	push   esi
c000d3a6:	e8 f8 f4 ff ff       	call   c000c8a3 <CmEnterDirectory(Reghive_Tag*, int)>
c000d3ab:	83 c4 0c             	add    esp,0xc
c000d3ae:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d3b2:	8d 51 04             	lea    edx,[ecx+0x4]
c000d3b5:	52                   	push   edx
c000d3b6:	50                   	push   eax
c000d3b7:	56                   	push   esi
c000d3b8:	e8 7b ff ff ff       	call   c000d338 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d3bd:	83 c4 10             	add    esp,0x10
c000d3c0:	50                   	push   eax
c000d3c1:	50                   	push   eax
c000d3c2:	53                   	push   ebx
c000d3c3:	56                   	push   esi
c000d3c4:	e8 19 f5 ff ff       	call   c000c8e2 <CmGetNext(Reghive_Tag*, int)>
c000d3c9:	83 c4 10             	add    esp,0x10
c000d3cc:	89 c3                	mov    ebx,eax
c000d3ce:	e9 74 ff ff ff       	jmp    c000d347 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d3d3:	83 c4 5c             	add    esp,0x5c
c000d3d6:	5b                   	pop    ebx
c000d3d7:	5e                   	pop    esi
c000d3d8:	5f                   	pop    edi
c000d3d9:	5d                   	pop    ebp
c000d3da:	c3                   	ret    

c000d3db <CmSplitFinalSlashInPlace(char*)>:
c000d3db:	53                   	push   ebx
c000d3dc:	83 ec 14             	sub    esp,0x14
c000d3df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d3e3:	53                   	push   ebx
c000d3e4:	e8 97 31 ff ff       	call   c0000580 <strlen>
c000d3e9:	83 c4 10             	add    esp,0x10
c000d3ec:	48                   	dec    eax
c000d3ed:	85 c0                	test   eax,eax
c000d3ef:	74 15                	je     c000d406 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d3f1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d3f5:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d3f8:	75 09                	jne    c000d403 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d3fa:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d3fd:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d401:	eb 05                	jmp    c000d408 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d403:	48                   	dec    eax
c000d404:	eb e7                	jmp    c000d3ed <CmSplitFinalSlashInPlace(char*)+0x12>
c000d406:	31 c0                	xor    eax,eax
c000d408:	83 c4 08             	add    esp,0x8
c000d40b:	5b                   	pop    ebx
c000d40c:	c3                   	ret    
c000d40d:	66 90                	xchg   ax,ax
c000d40f:	90                   	nop

c000d410 <Krnl::handlePowerButton()>:
c000d410:	83 ec 0c             	sub    esp,0xc
c000d413:	e8 2e 21 00 00       	call   c000f546 <KeHandlePowerButton()>
c000d418:	90                   	nop
c000d419:	83 c4 0c             	add    esp,0xc
c000d41c:	c3                   	ret    
c000d41d:	8d 76 00             	lea    esi,[esi+0x0]

c000d420 <Krnl::handleSleepButton()>:
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	e8 36 21 00 00       	call   c000f55e <KeHandleSleepButton()>
c000d428:	90                   	nop
c000d429:	83 c4 0c             	add    esp,0xc
c000d42c:	c3                   	ret    
c000d42d:	90                   	nop

c000d42e <Computer::close(int, int, void*)>:
c000d42e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d433:	c3                   	ret    

c000d434 <Computer::open(int, int, void*)>:
c000d434:	56                   	push   esi
c000d435:	53                   	push   ebx
c000d436:	83 ec 04             	sub    esp,0x4
c000d439:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d440:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d444:	0f 94 05 20 42 02 c0 	sete   BYTE PTR ds:0xc0024220
c000d44b:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d451:	74 10                	je     c000d463 <Computer::open(int, int, void*)+0x2f>
c000d453:	83 ec 0c             	sub    esp,0xc
c000d456:	68 e0 1d 02 c0       	push   0xc0021de0
c000d45b:	e8 da 17 00 00       	call   c000ec3a <KePanic(char const*)>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	83 ec 0c             	sub    esp,0xc
c000d466:	68 98 1e 02 c0       	push   0xc0021e98
c000d46b:	e8 33 f1 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d470:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d477:	e8 6a 14 00 00       	call   c000e8e6 <malloc>
c000d47c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d47f:	89 c6                	mov    esi,eax
c000d481:	e8 22 e8 ff ff       	call   c000bca8 <ACPI::ACPI()>
c000d486:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d48c:	58                   	pop    eax
c000d48d:	5a                   	pop    edx
c000d48e:	56                   	push   esi
c000d48f:	53                   	push   ebx
c000d490:	e8 ad bb ff ff       	call   c0009042 <Device::addChild(Device*)>
c000d495:	c7 04 24 b0 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eb0
c000d49c:	e8 02 f1 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d4a1:	e8 1a a7 00 00       	call   c0017bc0 <HalEnableNMI()>
c000d4a6:	e8 67 99 00 00       	call   c0016e12 <HalDetectFeatures()>
c000d4ab:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d4b2:	e8 2f 14 00 00       	call   c000e8e6 <malloc>
c000d4b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4ba:	89 c6                	mov    esi,eax
c000d4bc:	e8 e1 b1 00 00       	call   c00186a2 <CPU::CPU()>
c000d4c1:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d4c7:	59                   	pop    ecx
c000d4c8:	58                   	pop    eax
c000d4c9:	56                   	push   esi
c000d4ca:	53                   	push   ebx
c000d4cb:	e8 72 bb ff ff       	call   c0009042 <Device::addChild(Device*)>
c000d4d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d4d4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4da:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4dc:	51                   	push   ecx
c000d4dd:	6a 00                	push   0x0
c000d4df:	6a 00                	push   0x0
c000d4e1:	50                   	push   eax
c000d4e2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d4e5:	83 c4 14             	add    esp,0x14
c000d4e8:	68 0c 1e 02 c0       	push   0xc0021e0c
c000d4ed:	e8 b1 f0 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d4f2:	e8 e1 ad 00 00       	call   c00182d8 <HalInitialiseCoprocessor()>
c000d4f7:	c7 04 24 ca 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eca
c000d4fe:	e8 a0 f0 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d503:	c7 04 24 1a d5 00 c0 	mov    DWORD PTR [esp],0xc000d51a
c000d50a:	e8 9d 7e 00 00       	call   c00153ac <setupMultitasking(void (*)())>
c000d50f:	83 c4 14             	add    esp,0x14
c000d512:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d517:	5b                   	pop    ebx
c000d518:	5e                   	pop    esi
c000d519:	c3                   	ret    

c000d51a <KeFirstTask()>:
c000d51a:	53                   	push   ebx
c000d51b:	83 ec 14             	sub    esp,0x14
c000d51e:	fb                   	sti    
c000d51f:	68 e5 1e 02 c0       	push   0xc0021ee5
c000d524:	e8 7a f0 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d529:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d530:	e8 b1 13 00 00       	call   c000e8e6 <malloc>
c000d535:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d53c:	89 c3                	mov    ebx,eax
c000d53e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d543:	50                   	push   eax
c000d544:	68 fe 1e 02 c0       	push   0xc0021efe
c000d549:	6a 01                	push   0x1
c000d54b:	53                   	push   ebx
c000d54c:	e8 0b 7b 00 00       	call   c001505c <Process::Process(bool, char const*, Process*, char**)>
c000d551:	83 c4 20             	add    esp,0x20
c000d554:	68 ff 00 00 00       	push   0xff
c000d559:	6a 00                	push   0x0
c000d55b:	68 09 e2 00 c0       	push   0xc000e209
c000d560:	53                   	push   ebx
c000d561:	e8 1e 7d 00 00       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c000d566:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d56c:	6a 7a                	push   0x7a
c000d56e:	6a 00                	push   0x0
c000d570:	68 3c 5b 01 c0       	push   0xc0015b3c
c000d575:	52                   	push   edx
c000d576:	e8 09 7d 00 00       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c000d57b:	83 c4 14             	add    esp,0x14
c000d57e:	68 30 1e 02 c0       	push   0xc0021e30
c000d583:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d588:	e8 16 f0 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d58d:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d594:	e8 cf 20 00 00       	call   c000f668 <KeInitRand()>
c000d599:	e8 35 89 00 00       	call   c0015ed3 <Vm::initialise8086()>
c000d59e:	e8 33 a8 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d5a3:	c7 04 24 b4 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bb4
c000d5aa:	e8 f4 ef ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d5af:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5b4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d5ba:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5bc:	6a 00                	push   0x0
c000d5be:	6a 00                	push   0x0
c000d5c0:	6a 00                	push   0x0
c000d5c2:	50                   	push   eax
c000d5c3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d5c6:	83 c4 14             	add    esp,0x14
c000d5c9:	68 30 1e 02 c0       	push   0xc0021e30
c000d5ce:	e8 d0 ef ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d5d3:	e8 e3 9f ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d5d8:	e8 f5 05 00 00       	call   c000dbd2 <KeLoadSystemEnv()>
c000d5dd:	e8 94 1f 00 00       	call   c000f576 <KeSetupPowerManager()>
c000d5e2:	c7 04 24 54 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e54
c000d5e9:	e8 b5 ef ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d5ee:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5f3:	59                   	pop    ecx
c000d5f4:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d5fa:	53                   	push   ebx
c000d5fb:	e8 5e bb ff ff       	call   c000915e <Device::loadDriversForAll()>
c000d600:	c7 04 24 0b 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f0b
c000d607:	e8 97 ef ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c000d60c:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d612:	58                   	pop    eax
c000d613:	5a                   	pop    edx
c000d614:	6a 01                	push   0x1
c000d616:	68 1c 1f 02 c0       	push   0xc0021f1c
c000d61b:	e8 b3 73 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c000d620:	59                   	pop    ecx
c000d621:	5a                   	pop    edx
c000d622:	53                   	push   ebx
c000d623:	50                   	push   eax
c000d624:	e8 0b 76 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	83 ec 0c             	sub    esp,0xc
c000d62f:	6a 02                	push   0x2
c000d631:	e8 56 7f 00 00       	call   c001558c <blockTask(TaskState)>
c000d636:	83 c4 10             	add    esp,0x10
c000d639:	eb f1                	jmp    c000d62c <KeFirstTask()+0x112>
c000d63b:	90                   	nop

c000d63c <Computer::Computer()>:
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d643:	83 ec 08             	sub    esp,0x8
c000d646:	68 38 1f 02 c0       	push   0xc0021f38
c000d64b:	50                   	push   eax
c000d64c:	e8 53 bb ff ff       	call   c00091a4 <Device::Device(char const*)>
c000d651:	83 c4 10             	add    esp,0x10
c000d654:	ba 4c 1f 02 c0       	mov    edx,0xc0021f4c
c000d659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65d:	89 10                	mov    DWORD PTR [eax],edx
c000d65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d663:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d671:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d67b:	90                   	nop
c000d67c:	83 c4 0c             	add    esp,0xc
c000d67f:	c3                   	ret    

c000d680 <KePrepareShutdown()>:
c000d680:	83 ec 0c             	sub    esp,0xc
c000d683:	e8 89 ee ff ff       	call   c000c511 <KeExecuteAtexit()>
c000d688:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d68d:	83 ec 0c             	sub    esp,0xc
c000d690:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d696:	50                   	push   eax
c000d697:	e8 0e bc ff ff       	call   c00092aa <Device::closeAll()>
c000d69c:	83 c4 1c             	add    esp,0x1c
c000d69f:	c3                   	ret    

c000d6a0 <KeShutdown()>:
c000d6a0:	83 ec 0c             	sub    esp,0xc
c000d6a3:	e8 d8 ff ff ff       	call   c000d680 <KePrepareShutdown()>
c000d6a8:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d6ad:	85 c0                	test   eax,eax
c000d6af:	74 02                	je     c000d6b3 <KeShutdown()+0x13>
c000d6b1:	ff d0                	call   eax
c000d6b3:	83 ec 0c             	sub    esp,0xc
c000d6b6:	68 74 1e 02 c0       	push   0xc0021e74
c000d6bb:	e8 7a 15 00 00       	call   c000ec3a <KePanic(char const*)>
c000d6c0:	83 c4 1c             	add    esp,0x1c
c000d6c3:	c3                   	ret    

c000d6c4 <KeSleep()>:
c000d6c4:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d6c9:	85 c0                	test   eax,eax
c000d6cb:	74 02                	je     c000d6cf <KeSleep()+0xb>
c000d6cd:	ff e0                	jmp    eax
c000d6cf:	c3                   	ret    

c000d6d0 <KeRestart()>:
c000d6d0:	83 ec 0c             	sub    esp,0xc
c000d6d3:	e8 a8 ff ff ff       	call   c000d680 <KePrepareShutdown()>
c000d6d8:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d6dd:	85 c0                	test   eax,eax
c000d6df:	74 02                	je     c000d6e3 <KeRestart()+0x13>
c000d6e1:	ff d0                	call   eax
c000d6e3:	e4 64                	in     al,0x64
c000d6e5:	a8 02                	test   al,0x2
c000d6e7:	75 fa                	jne    c000d6e3 <KeRestart()+0x13>
c000d6e9:	b0 fe                	mov    al,0xfe
c000d6eb:	e6 64                	out    0x64,al
c000d6ed:	83 c4 0c             	add    esp,0xc
c000d6f0:	c3                   	ret    

c000d6f1 <KeCalculateCRC32(unsigned char*, int)>:
c000d6f1:	53                   	push   ebx
c000d6f2:	83 c8 ff             	or     eax,0xffffffff
c000d6f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d6fd:	01 cb                	add    ebx,ecx
c000d6ff:	39 d9                	cmp    ecx,ebx
c000d701:	74 15                	je     c000d718 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d703:	41                   	inc    ecx
c000d704:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d707:	31 c2                	xor    edx,eax
c000d709:	c1 e8 08             	shr    eax,0x8
c000d70c:	0f b6 d2             	movzx  edx,dl
c000d70f:	33 04 95 40 3c 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc3c0]
c000d716:	eb e7                	jmp    c000d6ff <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d718:	5b                   	pop    ebx
c000d719:	f7 d0                	not    eax
c000d71b:	c3                   	ret    

c000d71c <EnvVarContainer::getEnv(char const*)>:
c000d71c:	57                   	push   edi
c000d71d:	56                   	push   esi
c000d71e:	53                   	push   ebx
c000d71f:	31 db                	xor    ebx,ebx
c000d721:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d725:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d727:	7e 2b                	jle    c000d754 <EnvVarContainer::getEnv(char const*)+0x38>
c000d729:	50                   	push   eax
c000d72a:	50                   	push   eax
c000d72b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d72e:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d735:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d738:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d73c:	e8 3f 30 ff ff       	call   c0000780 <strcmp>
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	85 c0                	test   eax,eax
c000d746:	75 09                	jne    c000d751 <EnvVarContainer::getEnv(char const*)+0x35>
c000d748:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d74b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d74f:	eb 05                	jmp    c000d756 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d751:	43                   	inc    ebx
c000d752:	eb d1                	jmp    c000d725 <EnvVarContainer::getEnv(char const*)+0x9>
c000d754:	31 c0                	xor    eax,eax
c000d756:	5b                   	pop    ebx
c000d757:	5e                   	pop    esi
c000d758:	5f                   	pop    edi
c000d759:	c3                   	ret    

c000d75a <EnvVarContainer::setEnv(char const*, char const*)>:
c000d75a:	55                   	push   ebp
c000d75b:	57                   	push   edi
c000d75c:	56                   	push   esi
c000d75d:	53                   	push   ebx
c000d75e:	83 ec 28             	sub    esp,0x28
c000d761:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d765:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d769:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d76d:	56                   	push   esi
c000d76e:	e8 0d 2e ff ff       	call   c0000580 <strlen>
c000d773:	40                   	inc    eax
c000d774:	89 04 24             	mov    DWORD PTR [esp],eax
c000d777:	e8 6a 11 00 00       	call   c000e8e6 <malloc>
c000d77c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d77f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d783:	e8 f8 2d ff ff       	call   c0000580 <strlen>
c000d788:	40                   	inc    eax
c000d789:	89 04 24             	mov    DWORD PTR [esp],eax
c000d78c:	e8 55 11 00 00       	call   c000e8e6 <malloc>
c000d791:	89 34 24             	mov    DWORD PTR [esp],esi
c000d794:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d798:	e8 e3 2d ff ff       	call   c0000580 <strlen>
c000d79d:	83 c4 0c             	add    esp,0xc
c000d7a0:	40                   	inc    eax
c000d7a1:	50                   	push   eax
c000d7a2:	6a 00                	push   0x0
c000d7a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a8:	e8 43 2d ff ff       	call   c00004f0 <memset>
c000d7ad:	89 34 24             	mov    DWORD PTR [esp],esi
c000d7b0:	e8 cb 2d ff ff       	call   c0000580 <strlen>
c000d7b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d7b9:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7c1:	89 de                	mov    esi,ebx
c000d7c3:	e8 b8 2d ff ff       	call   c0000580 <strlen>
c000d7c8:	83 c4 0c             	add    esp,0xc
c000d7cb:	40                   	inc    eax
c000d7cc:	50                   	push   eax
c000d7cd:	6a 00                	push   0x0
c000d7cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7d3:	e8 18 2d ff ff       	call   c00004f0 <memset>
c000d7d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7db:	e8 a0 2d ff ff       	call   c0000580 <strlen>
c000d7e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d7e4:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7ec:	40                   	inc    eax
c000d7ed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d7f0:	c1 e0 03             	shl    eax,0x3
c000d7f3:	5a                   	pop    edx
c000d7f4:	59                   	pop    ecx
c000d7f5:	50                   	push   eax
c000d7f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d7f9:	e8 d4 10 00 00       	call   c000e8d2 <realloc>
c000d7fe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d801:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d805:	b9 08 00 00 00       	mov    ecx,0x8
c000d80a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d80d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d811:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d813:	83 c4 2c             	add    esp,0x2c
c000d816:	5b                   	pop    ebx
c000d817:	5e                   	pop    esi
c000d818:	5f                   	pop    edi
c000d819:	5d                   	pop    ebp
c000d81a:	c3                   	ret    
c000d81b:	90                   	nop

c000d81c <EnvVarContainer::deleteEnv(char const*)>:
c000d81c:	c3                   	ret    
c000d81d:	90                   	nop

c000d81e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d81e:	55                   	push   ebp
c000d81f:	57                   	push   edi
c000d820:	56                   	push   esi
c000d821:	53                   	push   ebx
c000d822:	81 ec 38 01 00 00    	sub    esp,0x138
c000d828:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d82f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d836:	68 14 01 00 00       	push   0x114
c000d83b:	e8 a6 10 00 00       	call   c000e8e6 <malloc>
c000d840:	83 c4 0c             	add    esp,0xc
c000d843:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d846:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d84d:	89 c3                	mov    ebx,eax
c000d84f:	50                   	push   eax
c000d850:	e8 b7 a8 ff ff       	call   c000810c <File::File(char const*, Process*)>
c000d855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d858:	e8 91 ab ff ff       	call   c00083ee <File::exists()>
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	84 c0                	test   al,al
c000d862:	75 31                	jne    c000d895 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d864:	50                   	push   eax
c000d865:	50                   	push   eax
c000d866:	6a 12                	push   0x12
c000d868:	53                   	push   ebx
c000d869:	e8 bc a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d86e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d870:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d873:	89 34 24             	mov    DWORD PTR [esp],esi
c000d876:	e8 05 2d ff ff       	call   c0000580 <strlen>
c000d87b:	5a                   	pop    edx
c000d87c:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d880:	52                   	push   edx
c000d881:	31 d2                	xor    edx,edx
c000d883:	56                   	push   esi
c000d884:	52                   	push   edx
c000d885:	50                   	push   eax
c000d886:	53                   	push   ebx
c000d887:	ff d7                	call   edi
c000d889:	83 c4 14             	add    esp,0x14
c000d88c:	53                   	push   ebx
c000d88d:	e8 f6 a8 ff ff       	call   c0008188 <File::close()>
c000d892:	83 c4 10             	add    esp,0x10
c000d895:	56                   	push   esi
c000d896:	31 f6                	xor    esi,esi
c000d898:	68 00 01 00 00       	push   0x100
c000d89d:	6a 00                	push   0x0
c000d89f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d8a3:	50                   	push   eax
c000d8a4:	e8 47 2c ff ff       	call   c00004f0 <memset>
c000d8a9:	5f                   	pop    edi
c000d8aa:	58                   	pop    eax
c000d8ab:	6a 01                	push   0x1
c000d8ad:	53                   	push   ebx
c000d8ae:	e8 77 a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d8b3:	83 c4 10             	add    esp,0x10
c000d8b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d8be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8c6:	83 ec 0c             	sub    esp,0xc
c000d8c9:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d8cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8cf:	52                   	push   edx
c000d8d0:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000d8d4:	51                   	push   ecx
c000d8d5:	6a 00                	push   0x0
c000d8d7:	6a 01                	push   0x1
c000d8d9:	53                   	push   ebx
c000d8da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d8dd:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d8e2:	83 c4 20             	add    esp,0x20
c000d8e5:	85 c0                	test   eax,eax
c000d8e7:	89 c1                	mov    ecx,eax
c000d8e9:	0f 84 36 01 00 00    	je     c000da25 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d8ef:	83 f8 0d             	cmp    eax,0xd
c000d8f2:	0f 84 22 01 00 00    	je     c000da1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d8f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d8fd:	0f 84 f0 00 00 00    	je     c000d9f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d903:	83 f8 0a             	cmp    eax,0xa
c000d906:	74 13                	je     c000d91b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d908:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d90d:	74 0c                	je     c000d91b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d90f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d915:	0f 8e f6 00 00 00    	jle    c000da11 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d91b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d91f:	83 ec 0c             	sub    esp,0xc
c000d922:	8d 78 01             	lea    edi,[eax+0x1]
c000d925:	57                   	push   edi
c000d926:	e8 bb 0f 00 00       	call   c000e8e6 <malloc>
c000d92b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d92f:	8d 56 04             	lea    edx,[esi+0x4]
c000d932:	89 14 24             	mov    DWORD PTR [esp],edx
c000d935:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d939:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d93d:	e8 a4 0f 00 00       	call   c000e8e6 <malloc>
c000d942:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d946:	83 c4 0c             	add    esp,0xc
c000d949:	57                   	push   edi
c000d94a:	6a 00                	push   0x0
c000d94c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d950:	e8 9b 2b ff ff       	call   c00004f0 <memset>
c000d955:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d959:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d95d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d961:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d963:	83 c4 0c             	add    esp,0xc
c000d966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d96a:	52                   	push   edx
c000d96b:	6a 00                	push   0x0
c000d96d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d971:	e8 7a 2b ff ff       	call   c00004f0 <memset>
c000d976:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d97a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000d97e:	89 34 24             	mov    DWORD PTR [esp],esi
c000d981:	e8 fa 2b ff ff       	call   c0000580 <strlen>
c000d986:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000d98a:	89 c1                	mov    ecx,eax
c000d98c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d98e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d997:	40                   	inc    eax
c000d998:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d99b:	85 d2                	test   edx,edx
c000d99d:	75 0c                	jne    c000d9ab <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000d99f:	83 ec 0c             	sub    esp,0xc
c000d9a2:	6a 08                	push   0x8
c000d9a4:	e8 3d 0f 00 00       	call   c000e8e6 <malloc>
c000d9a9:	eb 0c                	jmp    c000d9b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000d9ab:	51                   	push   ecx
c000d9ac:	51                   	push   ecx
c000d9ad:	c1 e0 03             	shl    eax,0x3
c000d9b0:	50                   	push   eax
c000d9b1:	52                   	push   edx
c000d9b2:	e8 1b 0f 00 00       	call   c000e8d2 <realloc>
c000d9b7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d9ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d9bd:	83 c4 10             	add    esp,0x10
c000d9c0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000d9c3:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d9c7:	b9 08 00 00 00       	mov    ecx,0x8
c000d9cc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d9d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9d2:	50                   	push   eax
c000d9d3:	31 f6                	xor    esi,esi
c000d9d5:	68 00 01 00 00       	push   0x100
c000d9da:	6a 00                	push   0x0
c000d9dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9e0:	50                   	push   eax
c000d9e1:	e8 0a 2b ff ff       	call   c00004f0 <memset>
c000d9e6:	83 c4 10             	add    esp,0x10
c000d9e9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d9f1:	eb 27                	jmp    c000da1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9f3:	83 f8 3d             	cmp    eax,0x3d
c000d9f6:	74 1e                	je     c000da16 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000d9f8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9fe:	7f 07                	jg     c000da07 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000da00:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000da04:	46                   	inc    esi
c000da05:	eb 13                	jmp    c000da1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da07:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000da0f:	eb 09                	jmp    c000da1a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da11:	83 f8 3d             	cmp    eax,0x3d
c000da14:	75 ea                	jne    c000da00 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000da16:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000da1a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000da1f:	0f 85 99 fe ff ff    	jne    c000d8be <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000da25:	83 ec 0c             	sub    esp,0xc
c000da28:	53                   	push   ebx
c000da29:	e8 5a a7 ff ff       	call   c0008188 <File::close()>
c000da2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da36:	81 c4 3c 01 00 00    	add    esp,0x13c
c000da3c:	5b                   	pop    ebx
c000da3d:	5e                   	pop    esi
c000da3e:	5f                   	pop    edi
c000da3f:	5d                   	pop    ebp
c000da40:	c3                   	ret    
c000da41:	90                   	nop

c000da42 <EnvVarContainer::__loadSystem()>:
c000da42:	83 ec 10             	sub    esp,0x10
c000da45:	68 40 40 02 c0       	push   0xc0024040
c000da4a:	68 70 1f 02 c0       	push   0xc0021f70
c000da4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da53:	e8 c6 fd ff ff       	call   c000d81e <EnvVarContainer::loadFrom(char const*, char const*)>
c000da58:	83 c4 1c             	add    esp,0x1c
c000da5b:	c3                   	ret    

c000da5c <EnvVarContainer::__loadUser()>:
c000da5c:	c3                   	ret    
c000da5d:	90                   	nop

c000da5e <EnvVarContainer::EnvVarContainer(Process*)>:
c000da5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000da68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da70:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da7e:	90                   	nop
c000da7f:	c3                   	ret    

c000da80 <EnvVarContainer::~EnvVarContainer()>:
c000da80:	83 ec 0c             	sub    esp,0xc
c000da83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da8a:	85 c0                	test   eax,eax
c000da8c:	74 1d                	je     c000daab <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da92:	8b 00                	mov    eax,DWORD PTR [eax]
c000da94:	85 c0                	test   eax,eax
c000da96:	74 13                	je     c000daab <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da9f:	83 ec 0c             	sub    esp,0xc
c000daa2:	50                   	push   eax
c000daa3:	e8 4e 0e 00 00       	call   c000e8f6 <free>
c000daa8:	83 c4 10             	add    esp,0x10
c000daab:	90                   	nop
c000daac:	83 c4 0c             	add    esp,0xc
c000daaf:	c3                   	ret    

c000dab0 <KeGetEnv(Process*, char const*)>:
c000dab0:	53                   	push   ebx
c000dab1:	83 ec 08             	sub    esp,0x8
c000dab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab8:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000dabe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dac2:	74 04                	je     c000dac8 <KeGetEnv(Process*, char const*)+0x18>
c000dac4:	85 c0                	test   eax,eax
c000dac6:	75 0b                	jne    c000dad3 <KeGetEnv(Process*, char const*)+0x23>
c000dac8:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dacd:	85 c0                	test   eax,eax
c000dacf:	75 19                	jne    c000daea <KeGetEnv(Process*, char const*)+0x3a>
c000dad1:	eb 27                	jmp    c000dafa <KeGetEnv(Process*, char const*)+0x4a>
c000dad3:	52                   	push   edx
c000dad4:	52                   	push   edx
c000dad5:	53                   	push   ebx
c000dad6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dadc:	e8 3b fc ff ff       	call   c000d71c <EnvVarContainer::getEnv(char const*)>
c000dae1:	83 c4 10             	add    esp,0x10
c000dae4:	85 c0                	test   eax,eax
c000dae6:	75 28                	jne    c000db10 <KeGetEnv(Process*, char const*)+0x60>
c000dae8:	eb de                	jmp    c000dac8 <KeGetEnv(Process*, char const*)+0x18>
c000daea:	52                   	push   edx
c000daeb:	52                   	push   edx
c000daec:	53                   	push   ebx
c000daed:	50                   	push   eax
c000daee:	e8 29 fc ff ff       	call   c000d71c <EnvVarContainer::getEnv(char const*)>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	85 c0                	test   eax,eax
c000daf8:	75 16                	jne    c000db10 <KeGetEnv(Process*, char const*)+0x60>
c000dafa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dafe:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000db03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db07:	83 c4 08             	add    esp,0x8
c000db0a:	5b                   	pop    ebx
c000db0b:	e9 0c fc ff ff       	jmp    c000d71c <EnvVarContainer::getEnv(char const*)>
c000db10:	83 c4 08             	add    esp,0x8
c000db13:	5b                   	pop    ebx
c000db14:	c3                   	ret    

c000db15 <KeSetEnvSystem(char const*, char const*)>:
c000db15:	83 ec 10             	sub    esp,0x10
c000db18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db20:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000db26:	e8 2f fc ff ff       	call   c000d75a <EnvVarContainer::setEnv(char const*, char const*)>
c000db2b:	83 c4 1c             	add    esp,0x1c
c000db2e:	c3                   	ret    

c000db2f <KeSetEnvUser(char const*, char const*)>:
c000db2f:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db34:	85 c0                	test   eax,eax
c000db36:	74 15                	je     c000db4d <KeSetEnvUser(char const*, char const*)+0x1e>
c000db38:	83 ec 10             	sub    esp,0x10
c000db3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db43:	50                   	push   eax
c000db44:	e8 11 fc ff ff       	call   c000d75a <EnvVarContainer::setEnv(char const*, char const*)>
c000db49:	83 c4 1c             	add    esp,0x1c
c000db4c:	c3                   	ret    
c000db4d:	c3                   	ret    

c000db4e <KeSetEnvProcess(Process*, char const*, char const*)>:
c000db4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db52:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000db58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db5c:	e9 f9 fb ff ff       	jmp    c000d75a <EnvVarContainer::setEnv(char const*, char const*)>

c000db61 <KeDeleteEnvSystem(char const*)>:
c000db61:	c3                   	ret    

c000db62 <KeDeleteEnvUser(char const*)>:
c000db62:	c3                   	ret    

c000db63 <KeDeleteEnvProcess(Process*, char const*)>:
c000db63:	c3                   	ret    

c000db64 <KeNewProcessEnv(Process*)>:
c000db64:	83 ec 28             	sub    esp,0x28
c000db67:	6a 0c                	push   0xc
c000db69:	e8 78 0d 00 00       	call   c000e8e6 <malloc>
c000db6e:	5a                   	pop    edx
c000db6f:	59                   	pop    ecx
c000db70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db74:	50                   	push   eax
c000db75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db79:	e8 e0 fe ff ff       	call   c000da5e <EnvVarContainer::EnvVarContainer(Process*)>
c000db7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db82:	83 c4 2c             	add    esp,0x2c
c000db85:	c3                   	ret    

c000db86 <KeCopyProcessEnv(Process*, Process*)>:
c000db86:	57                   	push   edi
c000db87:	56                   	push   esi
c000db88:	53                   	push   ebx
c000db89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8d:	83 ec 0c             	sub    esp,0xc
c000db90:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000db96:	6a 0c                	push   0xc
c000db98:	e8 49 0d 00 00       	call   c000e8e6 <malloc>
c000db9d:	89 c3                	mov    ebx,eax
c000db9f:	58                   	pop    eax
c000dba0:	5a                   	pop    edx
c000dba1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba5:	53                   	push   ebx
c000dba6:	e8 b3 fe ff ff       	call   c000da5e <EnvVarContainer::EnvVarContainer(Process*)>
c000dbab:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbad:	89 03                	mov    DWORD PTR [ebx],eax
c000dbaf:	c1 e0 03             	shl    eax,0x3
c000dbb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbb5:	e8 2c 0d 00 00       	call   c000e8e6 <malloc>
c000dbba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dbbd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dbbf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dbc2:	89 c7                	mov    edi,eax
c000dbc4:	c1 e1 03             	shl    ecx,0x3
c000dbc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 d8                	mov    eax,ebx
c000dbce:	5b                   	pop    ebx
c000dbcf:	5e                   	pop    esi
c000dbd0:	5f                   	pop    edi
c000dbd1:	c3                   	ret    

c000dbd2 <KeLoadSystemEnv()>:
c000dbd2:	53                   	push   ebx
c000dbd3:	83 ec 14             	sub    esp,0x14
c000dbd6:	6a 0c                	push   0xc
c000dbd8:	e8 09 0d 00 00       	call   c000e8e6 <malloc>
c000dbdd:	89 c3                	mov    ebx,eax
c000dbdf:	58                   	pop    eax
c000dbe0:	5a                   	pop    edx
c000dbe1:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dbe7:	53                   	push   ebx
c000dbe8:	e8 71 fe ff ff       	call   c000da5e <EnvVarContainer::EnvVarContainer(Process*)>
c000dbed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbf0:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dbf6:	e8 47 fe ff ff       	call   c000da42 <EnvVarContainer::__loadSystem()>
c000dbfb:	83 c4 18             	add    esp,0x18
c000dbfe:	5b                   	pop    ebx
c000dbff:	c3                   	ret    

c000dc00 <KeLoadUserEnv()>:
c000dc00:	53                   	push   ebx
c000dc01:	83 ec 14             	sub    esp,0x14
c000dc04:	6a 0c                	push   0xc
c000dc06:	e8 db 0c 00 00       	call   c000e8e6 <malloc>
c000dc0b:	89 c3                	mov    ebx,eax
c000dc0d:	58                   	pop    eax
c000dc0e:	5a                   	pop    edx
c000dc0f:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc15:	53                   	push   ebx
c000dc16:	e8 43 fe ff ff       	call   c000da5e <EnvVarContainer::EnvVarContainer(Process*)>
c000dc1b:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dc21:	83 c4 18             	add    esp,0x18
c000dc24:	5b                   	pop    ebx
c000dc25:	c3                   	ret    

c000dc26 <KeFlushEnv()>:
c000dc26:	c3                   	ret    

c000dc27 <KeGetProcessTotalEnvCount(Process*)>:
c000dc27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc2b:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dc31:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc37:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dc3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc3e:	03 01                	add    eax,DWORD PTR [ecx]
c000dc40:	85 d2                	test   edx,edx
c000dc42:	74 02                	je     c000dc46 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dc44:	03 02                	add    eax,DWORD PTR [edx]
c000dc46:	c3                   	ret    

c000dc47 <KeGetProcessEnvPair(Process*, int)>:
c000dc47:	57                   	push   edi
c000dc48:	56                   	push   esi
c000dc49:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dc4f:	53                   	push   ebx
c000dc50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc58:	85 f6                	test   esi,esi
c000dc5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc5e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc64:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc66:	75 16                	jne    c000dc7e <KeGetProcessEnvPair(Process*, int)+0x37>
c000dc68:	39 c2                	cmp    edx,eax
c000dc6a:	7c 16                	jl     c000dc82 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc6c:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dc72:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dc74:	01 c6                	add    esi,eax
c000dc76:	39 d6                	cmp    esi,edx
c000dc78:	7e 3c                	jle    c000dcb6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc7a:	29 c2                	sub    edx,eax
c000dc7c:	eb 04                	jmp    c000dc82 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc7e:	39 c2                	cmp    edx,eax
c000dc80:	7d 05                	jge    c000dc87 <KeGetProcessEnvPair(Process*, int)+0x40>
c000dc82:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dc85:	eb 20                	jmp    c000dca7 <KeGetProcessEnvPair(Process*, int)+0x60>
c000dc87:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dc89:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dc8c:	39 d1                	cmp    ecx,edx
c000dc8e:	7e 04                	jle    c000dc94 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dc90:	29 c2                	sub    edx,eax
c000dc92:	eb 10                	jmp    c000dca4 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dc94:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dc9a:	03 0e                	add    ecx,DWORD PTR [esi]
c000dc9c:	39 d1                	cmp    ecx,edx
c000dc9e:	7e 16                	jle    c000dcb6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dca0:	29 c2                	sub    edx,eax
c000dca2:	29 fa                	sub    edx,edi
c000dca4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dca7:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dcaa:	8b 02                	mov    eax,DWORD PTR [edx]
c000dcac:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dcaf:	89 03                	mov    DWORD PTR [ebx],eax
c000dcb1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dcb4:	eb 1d                	jmp    c000dcd3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dcb6:	83 ec 0c             	sub    esp,0xc
c000dcb9:	68 92 1f 02 c0       	push   0xc0021f92
c000dcbe:	e8 77 0f 00 00       	call   c000ec3a <KePanic(char const*)>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dccc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dcd3:	89 d8                	mov    eax,ebx
c000dcd5:	5b                   	pop    ebx
c000dcd6:	5e                   	pop    esi
c000dcd7:	5f                   	pop    edi
c000dcd8:	c2 04 00             	ret    0x4
c000dcdb:	90                   	nop

c000dcdc <KeSetupInterrupts()>:
c000dcdc:	83 ec 10             	sub    esp,0x10
c000dcdf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dce7:	90                   	nop
c000dce8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dcf0:	7f 5a                	jg     c000dd4c <KeSetupInterrupts()+0x70>
c000dcf2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dcfa:	66 90                	xchg   ax,ax
c000dcfc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dd01:	7f 41                	jg     c000dd44 <KeSetupInterrupts()+0x68>
c000dd03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd07:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd12:	01 d0                	add    eax,edx
c000dd14:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dd1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd23:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd2e:	01 d0                	add    eax,edx
c000dd30:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000dd3b:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dd40:	eb ba                	jmp    c000dcfc <KeSetupInterrupts()+0x20>
c000dd42:	66 90                	xchg   ax,ax
c000dd44:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dd49:	eb 9d                	jmp    c000dce8 <KeSetupInterrupts()+0xc>
c000dd4b:	90                   	nop
c000dd4c:	90                   	nop
c000dd4d:	83 c4 10             	add    esp,0x10
c000dd50:	c3                   	ret    
c000dd51:	8d 76 00             	lea    esi,[esi+0x0]

c000dd54 <int_handler>:
c000dd54:	83 ec 2c             	sub    esp,0x2c
c000dd57:	90                   	nop
c000dd58:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000dd5d:	0f b6 c0             	movzx  eax,al
c000dd60:	85 c0                	test   eax,eax
c000dd62:	74 04                	je     c000dd68 <int_handler+0x14>
c000dd64:	fa                   	cli    
c000dd65:	f4                   	hlt    
c000dd66:	eb f0                	jmp    c000dd58 <int_handler+0x4>
c000dd68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd6c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dd6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd73:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000dd78:	7e 1a                	jle    c000dd94 <int_handler+0x40>
c000dd7a:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000dd7f:	7f 13                	jg     c000dd94 <int_handler+0x40>
c000dd81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd85:	83 e8 20             	sub    eax,0x20
c000dd88:	83 ec 0c             	sub    esp,0xc
c000dd8b:	50                   	push   eax
c000dd8c:	e8 e2 a8 00 00       	call   c0018673 <HalEndOfInterrupt(int)>
c000dd91:	83 c4 10             	add    esp,0x10
c000dd94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd98:	c1 e0 04             	shl    eax,0x4
c000dd9b:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000dda0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dda4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dda8:	c1 e0 04             	shl    eax,0x4
c000ddab:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000ddb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddb4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ddbc:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ddc1:	0f 8f ad 00 00 00    	jg     c000de74 <int_handler+0x120>
c000ddc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddcb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddd6:	01 d0                	add    eax,edx
c000ddd8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddda:	85 c0                	test   eax,eax
c000dddc:	0f 84 86 00 00 00    	je     c000de68 <int_handler+0x114>
c000dde2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dde6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dde9:	83 f8 60             	cmp    eax,0x60
c000ddec:	75 46                	jne    c000de34 <int_handler+0xe0>
c000ddee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddf2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddfd:	01 d0                	add    eax,edx
c000ddff:	8b 00                	mov    eax,DWORD PTR [eax]
c000de01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de10:	01 ca                	add    edx,ecx
c000de12:	8b 12                	mov    edx,DWORD PTR [edx]
c000de14:	83 ec 08             	sub    esp,0x8
c000de17:	52                   	push   edx
c000de18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de1c:	ff d0                	call   eax
c000de1e:	83 c4 10             	add    esp,0x10
c000de21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de31:	eb 4d                	jmp    c000de80 <int_handler+0x12c>
c000de33:	90                   	nop
c000de34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de38:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de43:	01 d0                	add    eax,edx
c000de45:	8b 00                	mov    eax,DWORD PTR [eax]
c000de47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de4b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de56:	01 ca                	add    edx,ecx
c000de58:	8b 12                	mov    edx,DWORD PTR [edx]
c000de5a:	83 ec 08             	sub    esp,0x8
c000de5d:	52                   	push   edx
c000de5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de62:	ff d0                	call   eax
c000de64:	83 c4 10             	add    esp,0x10
c000de67:	90                   	nop
c000de68:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000de6d:	e9 4a ff ff ff       	jmp    c000ddbc <int_handler+0x68>
c000de72:	66 90                	xchg   ax,ax
c000de74:	b8 00 00 00 00       	mov    eax,0x0
c000de79:	ba 00 00 00 00       	mov    edx,0x0
c000de7e:	66 90                	xchg   ax,ax
c000de80:	83 c4 2c             	add    esp,0x2c
c000de83:	c3                   	ret    

c000de84 <KeDisplayProgramFault(char const*)>:
c000de84:	83 ec 0c             	sub    esp,0xc
c000de87:	83 ec 0c             	sub    esp,0xc
c000de8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8e:	e8 bb 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000de93:	83 c4 10             	add    esp,0x10
c000de96:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000de9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000de9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dea0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000dea6:	85 c0                	test   eax,eax
c000dea8:	74 22                	je     c000decc <KeDisplayProgramFault(char const*)+0x48>
c000deaa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000deaf:	8b 00                	mov    eax,DWORD PTR [eax]
c000deb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000deb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000deba:	6a 04                	push   0x4
c000debc:	6a 0f                	push   0xf
c000debe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dec2:	50                   	push   eax
c000dec3:	e8 7c 35 00 00       	call   c0011444 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000dec8:	83 c4 10             	add    esp,0x10
c000decb:	90                   	nop
c000decc:	90                   	nop
c000decd:	83 c4 0c             	add    esp,0xc
c000ded0:	c3                   	ret    
c000ded1:	8d 76 00             	lea    esi,[esi+0x0]

c000ded4 <KeGeneralProtectionFault(void*, void*)>:
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	83 ec 08             	sub    esp,0x8
c000deda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee2:	e8 88 9d 00 00       	call   c0017c6f <HalHandleGeneralProtectionFault(void*, void*)>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	0f b6 c0             	movzx  eax,al
c000deed:	85 c0                	test   eax,eax
c000deef:	75 2f                	jne    c000df20 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000def1:	83 ec 0c             	sub    esp,0xc
c000def4:	68 ac 1f 02 c0       	push   0xc0021fac
c000def9:	e8 86 ff ff ff       	call   c000de84 <KeDisplayProgramFault(char const*)>
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	83 ec 0c             	sub    esp,0xc
c000df04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df08:	e8 7e 9e 00 00       	call   c0017d8b <HalDisplayDebugInfo(void*)>
c000df0d:	83 c4 10             	add    esp,0x10
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	6a 00                	push   0x0
c000df15:	e8 16 7e 00 00       	call   c0015d30 <Thr::terminateFromIRQ(int)>
c000df1a:	83 c4 10             	add    esp,0x10
c000df1d:	eb 05                	jmp    c000df24 <KeGeneralProtectionFault(void*, void*)+0x50>
c000df1f:	90                   	nop
c000df20:	90                   	nop
c000df21:	8d 76 00             	lea    esi,[esi+0x0]
c000df24:	83 c4 0c             	add    esp,0xc
c000df27:	c3                   	ret    

c000df28 <KePageFault(void*, void*)>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	83 ec 08             	sub    esp,0x8
c000df2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df36:	e8 df 9d 00 00       	call   c0017d1a <HalHandlePageFault(void*, void*)>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	0f b6 c0             	movzx  eax,al
c000df41:	85 c0                	test   eax,eax
c000df43:	75 2f                	jne    c000df74 <KePageFault(void*, void*)+0x4c>
c000df45:	83 ec 0c             	sub    esp,0xc
c000df48:	68 c5 1f 02 c0       	push   0xc0021fc5
c000df4d:	e8 32 ff ff ff       	call   c000de84 <KeDisplayProgramFault(char const*)>
c000df52:	83 c4 10             	add    esp,0x10
c000df55:	83 ec 0c             	sub    esp,0xc
c000df58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5c:	e8 2a 9e 00 00       	call   c0017d8b <HalDisplayDebugInfo(void*)>
c000df61:	83 c4 10             	add    esp,0x10
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	6a 00                	push   0x0
c000df69:	e8 c2 7d 00 00       	call   c0015d30 <Thr::terminateFromIRQ(int)>
c000df6e:	83 c4 10             	add    esp,0x10
c000df71:	eb 05                	jmp    c000df78 <KePageFault(void*, void*)+0x50>
c000df73:	90                   	nop
c000df74:	90                   	nop
c000df75:	8d 76 00             	lea    esi,[esi+0x0]
c000df78:	83 c4 0c             	add    esp,0xc
c000df7b:	c3                   	ret    

c000df7c <KeNonMaskableInterrupt(void*, void*)>:
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	e8 95 a1 00 00       	call   c0018119 <HalReceivedNMI()>
c000df84:	90                   	nop
c000df85:	83 c4 0c             	add    esp,0xc
c000df88:	c3                   	ret    
c000df89:	8d 76 00             	lea    esi,[esi+0x0]

c000df8c <KeOtherFault(void*, void*)>:
c000df8c:	83 ec 0c             	sub    esp,0xc
c000df8f:	83 ec 0c             	sub    esp,0xc
c000df92:	68 d0 1f 02 c0       	push   0xc0021fd0
c000df97:	e8 e8 fe ff ff       	call   c000de84 <KeDisplayProgramFault(char const*)>
c000df9c:	83 c4 10             	add    esp,0x10
c000df9f:	83 ec 0c             	sub    esp,0xc
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	e8 e0 9d 00 00       	call   c0017d8b <HalDisplayDebugInfo(void*)>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	83 ec 0c             	sub    esp,0xc
c000dfb1:	6a 00                	push   0x0
c000dfb3:	e8 78 7d 00 00       	call   c0015d30 <Thr::terminateFromIRQ(int)>
c000dfb8:	83 c4 10             	add    esp,0x10
c000dfbb:	90                   	nop
c000dfbc:	83 c4 0c             	add    esp,0xc
c000dfbf:	c3                   	ret    

c000dfc0 <KeOpcodeFault(void*, void*)>:
c000dfc0:	55                   	push   ebp
c000dfc1:	89 e5                	mov    ebp,esp
c000dfc3:	83 ec 08             	sub    esp,0x8
c000dfc6:	83 ec 08             	sub    esp,0x8
c000dfc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dfcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfcf:	e8 75 9d 00 00       	call   c0017d49 <HalHandleOpcodeFault(void*, void*)>
c000dfd4:	83 c4 10             	add    esp,0x10
c000dfd7:	0f b6 c0             	movzx  eax,al
c000dfda:	85 c0                	test   eax,eax
c000dfdc:	75 2e                	jne    c000e00c <KeOpcodeFault(void*, void*)+0x4c>
c000dfde:	83 ec 0c             	sub    esp,0xc
c000dfe1:	68 f8 1f 02 c0       	push   0xc0021ff8
c000dfe6:	e8 99 fe ff ff       	call   c000de84 <KeDisplayProgramFault(char const*)>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	83 ec 0c             	sub    esp,0xc
c000dff1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dff4:	e8 92 9d 00 00       	call   c0017d8b <HalDisplayDebugInfo(void*)>
c000dff9:	83 c4 10             	add    esp,0x10
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	6a 00                	push   0x0
c000e001:	e8 2a 7d 00 00       	call   c0015d30 <Thr::terminateFromIRQ(int)>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	eb 05                	jmp    c000e010 <KeOpcodeFault(void*, void*)+0x50>
c000e00b:	90                   	nop
c000e00c:	90                   	nop
c000e00d:	8d 76 00             	lea    esi,[esi+0x0]
c000e010:	c9                   	leave  
c000e011:	c3                   	ret    
c000e012:	66 90                	xchg   ax,ax

c000e014 <KeDoubleFault(void*, void*)>:
c000e014:	55                   	push   ebp
c000e015:	89 e5                	mov    ebp,esp
c000e017:	83 ec 08             	sub    esp,0x8
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	68 05 20 02 c0       	push   0xc0022005
c000e022:	e8 13 0c 00 00       	call   c000ec3a <KePanic(char const*)>
c000e027:	83 c4 10             	add    esp,0x10
c000e02a:	90                   	nop
c000e02b:	c9                   	leave  
c000e02c:	c3                   	ret    
c000e02d:	90                   	nop

c000e02e <GDTEntry::setBase(unsigned int)>:
c000e02e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e032:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e036:	89 c1                	mov    ecx,eax
c000e038:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e03c:	c1 e9 10             	shr    ecx,0x10
c000e03f:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e042:	c1 e8 18             	shr    eax,0x18
c000e045:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e048:	c3                   	ret    
c000e049:	90                   	nop

c000e04a <GDTEntry::setLimit(unsigned int)>:
c000e04a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e04e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e052:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e055:	66 89 01             	mov    WORD PTR [ecx],ax
c000e058:	c1 e8 10             	shr    eax,0x10
c000e05b:	83 e0 0f             	and    eax,0xf
c000e05e:	83 e2 f0             	and    edx,0xfffffff0
c000e061:	09 d0                	or     eax,edx
c000e063:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e066:	c3                   	ret    
c000e067:	90                   	nop

c000e068 <GDT::GDT()>:
c000e068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e076:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e07c:	90                   	nop
c000e07d:	c3                   	ret    

c000e07e <GDT::addEntry(GDTEntry)>:
c000e07e:	53                   	push   ebx
c000e07f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e083:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e08b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e08d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e091:	8d 48 01             	lea    ecx,[eax+0x1]
c000e094:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e098:	c1 e0 03             	shl    eax,0x3
c000e09b:	89 0a                	mov    DWORD PTR [edx],ecx
c000e09d:	5b                   	pop    ebx
c000e09e:	c3                   	ret    
c000e09f:	90                   	nop

c000e0a0 <GDT::getNumberOfEntries()>:
c000e0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0a6:	c3                   	ret    
c000e0a7:	90                   	nop

c000e0a8 <GDT::flush()>:
c000e0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0ae:	83 c0 04             	add    eax,0x4
c000e0b1:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e0b6:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e0bd:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e0c4:	e9 91 22 ff ff       	jmp    c000035a <loadGDT>
c000e0c9:	90                   	nop

c000e0ca <GDT::setup()>:
c000e0ca:	57                   	push   edi
c000e0cb:	56                   	push   esi
c000e0cc:	53                   	push   ebx
c000e0cd:	83 ec 30             	sub    esp,0x30
c000e0d0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0d4:	6a 00                	push   0x0
c000e0d6:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e0da:	56                   	push   esi
c000e0db:	e8 4e ff ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c000e0e0:	6a 00                	push   0x0
c000e0e2:	56                   	push   esi
c000e0e3:	e8 62 ff ff ff       	call   c000e04a <GDTEntry::setLimit(unsigned int)>
c000e0e8:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e0f0:	6a 00                	push   0x0
c000e0f2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e0f6:	56                   	push   esi
c000e0f7:	e8 32 ff ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c000e0fc:	68 ff ff ff 00       	push   0xffffff
c000e101:	56                   	push   esi
c000e102:	e8 43 ff ff ff       	call   c000e04a <GDTEntry::setLimit(unsigned int)>
c000e107:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e10b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e10f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e114:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e118:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e11d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e121:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e125:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e129:	89 f8                	mov    eax,edi
c000e12b:	89 fa                	mov    edx,edi
c000e12d:	80 e4 f7             	and    ah,0xf7
c000e130:	80 ce 60             	or     dh,0x60
c000e133:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e137:	89 c7                	mov    edi,eax
c000e139:	80 cc 60             	or     ah,0x60
c000e13c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e140:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e144:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e148:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e14c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e150:	83 c4 20             	add    esp,0x20
c000e153:	6a 00                	push   0x0
c000e155:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e159:	50                   	push   eax
c000e15a:	e8 cf fe ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c000e15f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e163:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e167:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e16b:	83 e0 3f             	and    eax,0x3f
c000e16e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e172:	6a 00                	push   0x0
c000e174:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e178:	50                   	push   eax
c000e179:	e8 b0 fe ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c000e17e:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e182:	83 e0 3f             	and    eax,0x3f
c000e185:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e189:	83 c4 0c             	add    esp,0xc
c000e18c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e194:	53                   	push   ebx
c000e195:	e8 e4 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e19a:	83 c4 0c             	add    esp,0xc
c000e19d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1a5:	53                   	push   ebx
c000e1a6:	e8 d3 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1ab:	83 c4 0c             	add    esp,0xc
c000e1ae:	57                   	push   edi
c000e1af:	56                   	push   esi
c000e1b0:	53                   	push   ebx
c000e1b1:	e8 c8 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1b6:	83 c4 0c             	add    esp,0xc
c000e1b9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1bd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1c1:	53                   	push   ebx
c000e1c2:	e8 b7 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1c7:	83 c4 0c             	add    esp,0xc
c000e1ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1d2:	53                   	push   ebx
c000e1d3:	e8 a6 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1d8:	83 c4 0c             	add    esp,0xc
c000e1db:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1e3:	53                   	push   ebx
c000e1e4:	e8 95 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1e9:	83 c4 0c             	add    esp,0xc
c000e1ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1f4:	53                   	push   ebx
c000e1f5:	e8 84 fe ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c000e1fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1fd:	e8 a6 fe ff ff       	call   c000e0a8 <GDT::flush()>
c000e202:	83 c4 40             	add    esp,0x40
c000e205:	5b                   	pop    ebx
c000e206:	5e                   	pop    esi
c000e207:	5f                   	pop    edi
c000e208:	c3                   	ret    

c000e209 <idleFunction(void*)>:
c000e209:	83 ec 0c             	sub    esp,0xc
c000e20c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e211:	48                   	dec    eax
c000e212:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e217:	75 01                	jne    c000e21a <idleFunction(void*)+0x11>
c000e219:	fb                   	sti    
c000e21a:	e8 95 9f 00 00       	call   c00181b4 <HalSystemIdle()>
c000e21f:	e8 c2 1f 01 00       	call   c00201e6 <idleCommon()>
c000e224:	eb f4                	jmp    c000e21a <idleFunction(void*)+0x11>
c000e226:	66 90                	xchg   ax,ax

c000e228 <IDTEntry::IDTEntry(bool)>:
c000e228:	53                   	push   ebx
c000e229:	83 ec 04             	sub    esp,0x4
c000e22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e230:	88 04 24             	mov    BYTE PTR [esp],al
c000e233:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e237:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e241:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e245:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e249:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e24c:	83 e2 f0             	and    edx,0xfffffff0
c000e24f:	83 ca 0e             	or     edx,0xe
c000e252:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e255:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e259:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e25c:	83 e2 ef             	and    edx,0xffffffef
c000e25f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e262:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e266:	85 c0                	test   eax,eax
c000e268:	74 06                	je     c000e270 <IDTEntry::IDTEntry(bool)+0x48>
c000e26a:	b2 03                	mov    dl,0x3
c000e26c:	eb 06                	jmp    c000e274 <IDTEntry::IDTEntry(bool)+0x4c>
c000e26e:	66 90                	xchg   ax,ax
c000e270:	b2 00                	mov    dl,0x0
c000e272:	66 90                	xchg   ax,ax
c000e274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e278:	83 e2 03             	and    edx,0x3
c000e27b:	89 d3                	mov    ebx,edx
c000e27d:	c1 e3 05             	shl    ebx,0x5
c000e280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e283:	83 e2 9f             	and    edx,0xffffff9f
c000e286:	88 d1                	mov    cl,dl
c000e288:	88 da                	mov    dl,bl
c000e28a:	09 ca                	or     edx,ecx
c000e28c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e28f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e293:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e296:	83 ca 80             	or     edx,0xffffff80
c000e299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e29c:	90                   	nop
c000e29d:	83 c4 04             	add    esp,0x4
c000e2a0:	5b                   	pop    ebx
c000e2a1:	c3                   	ret    

c000e2a2 <IDTEntry::setOffset(unsigned int)>:
c000e2a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2aa:	66 89 02             	mov    WORD PTR [edx],ax
c000e2ad:	c1 e8 10             	shr    eax,0x10
c000e2b0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e2b4:	c3                   	ret    
c000e2b5:	90                   	nop
c000e2b6:	66 90                	xchg   ax,ax

c000e2b8 <IDT::IDT()>:
c000e2b8:	90                   	nop
c000e2b9:	c3                   	ret    

c000e2ba <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e2ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2be:	83 c0 30             	add    eax,0x30
c000e2c1:	c3                   	ret    

c000e2c2 <IDT::addEntry(IDTEntry, int)>:
c000e2c2:	53                   	push   ebx
c000e2c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e2cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e2cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2d3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e2d6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e2da:	5b                   	pop    ebx
c000e2db:	c3                   	ret    

c000e2dc <IDT::addEntry(int, void (*)(), bool)>:
c000e2dc:	53                   	push   ebx
c000e2dd:	83 ec 10             	sub    esp,0x10
c000e2e0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e2e5:	50                   	push   eax
c000e2e6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e2ea:	53                   	push   ebx
c000e2eb:	e8 38 ff ff ff       	call   c000e228 <IDTEntry::IDTEntry(bool)>
c000e2f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2f4:	53                   	push   ebx
c000e2f5:	e8 a8 ff ff ff       	call   c000e2a2 <IDTEntry::setOffset(unsigned int)>
c000e2fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e302:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e306:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e30a:	e8 b3 ff ff ff       	call   c000e2c2 <IDT::addEntry(IDTEntry, int)>
c000e30f:	83 c4 30             	add    esp,0x30
c000e312:	5b                   	pop    ebx
c000e313:	c3                   	ret    

c000e314 <IDT::flush()>:
c000e314:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e31d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e321:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e326:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e32d:	c3                   	ret    

c000e32e <IDT::setup()>:
c000e32e:	57                   	push   edi
c000e32f:	56                   	push   esi
c000e330:	53                   	push   ebx
c000e331:	83 ec 10             	sub    esp,0x10
c000e334:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e338:	6a 00                	push   0x0
c000e33a:	68 90 f4 01 c0       	push   0xc001f490
c000e33f:	6a 00                	push   0x0
c000e341:	53                   	push   ebx
c000e342:	e8 95 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e347:	6a 00                	push   0x0
c000e349:	68 a0 f4 01 c0       	push   0xc001f4a0
c000e34e:	6a 01                	push   0x1
c000e350:	53                   	push   ebx
c000e351:	e8 86 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e356:	83 c4 20             	add    esp,0x20
c000e359:	6a 00                	push   0x0
c000e35b:	68 aa f4 01 c0       	push   0xc001f4aa
c000e360:	6a 02                	push   0x2
c000e362:	53                   	push   ebx
c000e363:	e8 74 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e368:	6a 00                	push   0x0
c000e36a:	68 b4 f4 01 c0       	push   0xc001f4b4
c000e36f:	6a 03                	push   0x3
c000e371:	53                   	push   ebx
c000e372:	e8 65 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e377:	83 c4 20             	add    esp,0x20
c000e37a:	6a 00                	push   0x0
c000e37c:	68 be f4 01 c0       	push   0xc001f4be
c000e381:	6a 04                	push   0x4
c000e383:	53                   	push   ebx
c000e384:	e8 53 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e389:	6a 00                	push   0x0
c000e38b:	68 c8 f4 01 c0       	push   0xc001f4c8
c000e390:	6a 05                	push   0x5
c000e392:	53                   	push   ebx
c000e393:	e8 44 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e398:	83 c4 20             	add    esp,0x20
c000e39b:	6a 00                	push   0x0
c000e39d:	68 d2 f4 01 c0       	push   0xc001f4d2
c000e3a2:	6a 06                	push   0x6
c000e3a4:	53                   	push   ebx
c000e3a5:	e8 32 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3aa:	6a 00                	push   0x0
c000e3ac:	68 dc f4 01 c0       	push   0xc001f4dc
c000e3b1:	6a 07                	push   0x7
c000e3b3:	53                   	push   ebx
c000e3b4:	e8 23 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3b9:	83 c4 20             	add    esp,0x20
c000e3bc:	6a 00                	push   0x0
c000e3be:	68 e6 f4 01 c0       	push   0xc001f4e6
c000e3c3:	6a 08                	push   0x8
c000e3c5:	53                   	push   ebx
c000e3c6:	e8 11 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3cb:	6a 00                	push   0x0
c000e3cd:	68 ee f4 01 c0       	push   0xc001f4ee
c000e3d2:	6a 09                	push   0x9
c000e3d4:	53                   	push   ebx
c000e3d5:	e8 02 ff ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3da:	83 c4 20             	add    esp,0x20
c000e3dd:	6a 00                	push   0x0
c000e3df:	68 f8 f4 01 c0       	push   0xc001f4f8
c000e3e4:	6a 0a                	push   0xa
c000e3e6:	53                   	push   ebx
c000e3e7:	e8 f0 fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3ec:	6a 00                	push   0x0
c000e3ee:	68 00 f5 01 c0       	push   0xc001f500
c000e3f3:	6a 0b                	push   0xb
c000e3f5:	53                   	push   ebx
c000e3f6:	e8 e1 fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e3fb:	83 c4 20             	add    esp,0x20
c000e3fe:	6a 00                	push   0x0
c000e400:	68 08 f5 01 c0       	push   0xc001f508
c000e405:	6a 0c                	push   0xc
c000e407:	53                   	push   ebx
c000e408:	e8 cf fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e40d:	6a 00                	push   0x0
c000e40f:	68 10 f5 01 c0       	push   0xc001f510
c000e414:	6a 0d                	push   0xd
c000e416:	53                   	push   ebx
c000e417:	e8 c0 fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e41c:	83 c4 20             	add    esp,0x20
c000e41f:	6a 00                	push   0x0
c000e421:	68 2a f5 01 c0       	push   0xc001f52a
c000e426:	6a 0e                	push   0xe
c000e428:	53                   	push   ebx
c000e429:	e8 ae fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e42e:	6a 00                	push   0x0
c000e430:	68 32 f5 01 c0       	push   0xc001f532
c000e435:	6a 0f                	push   0xf
c000e437:	53                   	push   ebx
c000e438:	e8 9f fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e43d:	83 c4 20             	add    esp,0x20
c000e440:	6a 00                	push   0x0
c000e442:	68 3c f5 01 c0       	push   0xc001f53c
c000e447:	6a 10                	push   0x10
c000e449:	53                   	push   ebx
c000e44a:	e8 8d fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e44f:	6a 00                	push   0x0
c000e451:	68 46 f5 01 c0       	push   0xc001f546
c000e456:	6a 11                	push   0x11
c000e458:	53                   	push   ebx
c000e459:	e8 7e fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e45e:	83 c4 20             	add    esp,0x20
c000e461:	6a 00                	push   0x0
c000e463:	68 50 f5 01 c0       	push   0xc001f550
c000e468:	6a 12                	push   0x12
c000e46a:	53                   	push   ebx
c000e46b:	e8 6c fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e470:	6a 01                	push   0x1
c000e472:	68 ea f5 01 c0       	push   0xc001f5ea
c000e477:	6a 60                	push   0x60
c000e479:	53                   	push   ebx
c000e47a:	e8 5d fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e47f:	83 c4 20             	add    esp,0x20
c000e482:	6a 00                	push   0x0
c000e484:	68 f1 f5 01 c0       	push   0xc001f5f1
c000e489:	6a 20                	push   0x20
c000e48b:	53                   	push   ebx
c000e48c:	e8 4b fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e491:	6a 00                	push   0x0
c000e493:	68 dc f5 01 c0       	push   0xc001f5dc
c000e498:	6a 21                	push   0x21
c000e49a:	53                   	push   ebx
c000e49b:	e8 3c fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4a0:	83 c4 20             	add    esp,0x20
c000e4a3:	6a 00                	push   0x0
c000e4a5:	68 e3 f5 01 c0       	push   0xc001f5e3
c000e4aa:	6a 22                	push   0x22
c000e4ac:	53                   	push   ebx
c000e4ad:	e8 2a fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4b2:	6a 00                	push   0x0
c000e4b4:	68 5a f5 01 c0       	push   0xc001f55a
c000e4b9:	6a 23                	push   0x23
c000e4bb:	53                   	push   ebx
c000e4bc:	e8 1b fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4c1:	83 c4 20             	add    esp,0x20
c000e4c4:	6a 00                	push   0x0
c000e4c6:	68 64 f5 01 c0       	push   0xc001f564
c000e4cb:	6a 24                	push   0x24
c000e4cd:	53                   	push   ebx
c000e4ce:	e8 09 fe ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4d3:	6a 00                	push   0x0
c000e4d5:	68 6e f5 01 c0       	push   0xc001f56e
c000e4da:	6a 25                	push   0x25
c000e4dc:	53                   	push   ebx
c000e4dd:	e8 fa fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4e2:	83 c4 20             	add    esp,0x20
c000e4e5:	6a 00                	push   0x0
c000e4e7:	68 78 f5 01 c0       	push   0xc001f578
c000e4ec:	6a 26                	push   0x26
c000e4ee:	53                   	push   ebx
c000e4ef:	e8 e8 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e4f4:	6a 00                	push   0x0
c000e4f6:	68 82 f5 01 c0       	push   0xc001f582
c000e4fb:	6a 27                	push   0x27
c000e4fd:	53                   	push   ebx
c000e4fe:	e8 d9 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e503:	83 c4 20             	add    esp,0x20
c000e506:	6a 00                	push   0x0
c000e508:	68 8c f5 01 c0       	push   0xc001f58c
c000e50d:	6a 28                	push   0x28
c000e50f:	53                   	push   ebx
c000e510:	e8 c7 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e515:	6a 00                	push   0x0
c000e517:	68 96 f5 01 c0       	push   0xc001f596
c000e51c:	6a 29                	push   0x29
c000e51e:	53                   	push   ebx
c000e51f:	e8 b8 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e524:	83 c4 20             	add    esp,0x20
c000e527:	6a 00                	push   0x0
c000e529:	68 a0 f5 01 c0       	push   0xc001f5a0
c000e52e:	6a 2a                	push   0x2a
c000e530:	53                   	push   ebx
c000e531:	e8 a6 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e536:	6a 00                	push   0x0
c000e538:	68 aa f5 01 c0       	push   0xc001f5aa
c000e53d:	6a 2b                	push   0x2b
c000e53f:	53                   	push   ebx
c000e540:	e8 97 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e545:	83 c4 20             	add    esp,0x20
c000e548:	6a 00                	push   0x0
c000e54a:	68 b4 f5 01 c0       	push   0xc001f5b4
c000e54f:	6a 2c                	push   0x2c
c000e551:	53                   	push   ebx
c000e552:	e8 85 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e557:	6a 00                	push   0x0
c000e559:	68 be f5 01 c0       	push   0xc001f5be
c000e55e:	6a 2d                	push   0x2d
c000e560:	53                   	push   ebx
c000e561:	e8 76 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e566:	83 c4 20             	add    esp,0x20
c000e569:	6a 00                	push   0x0
c000e56b:	68 c8 f5 01 c0       	push   0xc001f5c8
c000e570:	6a 2e                	push   0x2e
c000e572:	53                   	push   ebx
c000e573:	e8 64 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e578:	6a 00                	push   0x0
c000e57a:	68 d2 f5 01 c0       	push   0xc001f5d2
c000e57f:	6a 2f                	push   0x2f
c000e581:	53                   	push   ebx
c000e582:	e8 55 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e587:	83 c4 20             	add    esp,0x20
c000e58a:	6a 00                	push   0x0
c000e58c:	68 2c f7 01 c0       	push   0xc001f72c
c000e591:	6a 30                	push   0x30
c000e593:	53                   	push   ebx
c000e594:	e8 43 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e599:	6a 00                	push   0x0
c000e59b:	68 36 f7 01 c0       	push   0xc001f736
c000e5a0:	6a 31                	push   0x31
c000e5a2:	53                   	push   ebx
c000e5a3:	e8 34 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5a8:	83 c4 20             	add    esp,0x20
c000e5ab:	6a 00                	push   0x0
c000e5ad:	68 40 f7 01 c0       	push   0xc001f740
c000e5b2:	6a 32                	push   0x32
c000e5b4:	53                   	push   ebx
c000e5b5:	e8 22 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5ba:	6a 00                	push   0x0
c000e5bc:	68 4a f7 01 c0       	push   0xc001f74a
c000e5c1:	6a 33                	push   0x33
c000e5c3:	53                   	push   ebx
c000e5c4:	e8 13 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5c9:	83 c4 20             	add    esp,0x20
c000e5cc:	6a 00                	push   0x0
c000e5ce:	68 54 f7 01 c0       	push   0xc001f754
c000e5d3:	6a 34                	push   0x34
c000e5d5:	53                   	push   ebx
c000e5d6:	e8 01 fd ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5db:	6a 00                	push   0x0
c000e5dd:	68 5e f7 01 c0       	push   0xc001f75e
c000e5e2:	6a 35                	push   0x35
c000e5e4:	53                   	push   ebx
c000e5e5:	e8 f2 fc ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5ea:	83 c4 20             	add    esp,0x20
c000e5ed:	6a 00                	push   0x0
c000e5ef:	68 68 f7 01 c0       	push   0xc001f768
c000e5f4:	6a 36                	push   0x36
c000e5f6:	53                   	push   ebx
c000e5f7:	e8 e0 fc ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e5fc:	6a 00                	push   0x0
c000e5fe:	68 72 f7 01 c0       	push   0xc001f772
c000e603:	6a 37                	push   0x37
c000e605:	53                   	push   ebx
c000e606:	e8 d1 fc ff ff       	call   c000e2dc <IDT::addEntry(int, void (*)(), bool)>
c000e60b:	83 c4 1c             	add    esp,0x1c
c000e60e:	6a 03                	push   0x3
c000e610:	6a 02                	push   0x2
c000e612:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e618:	e8 c5 41 00 00       	call   c00127e2 <VAS::allocatePages(int, int)>
c000e61d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e624:	89 c6                	mov    esi,eax
c000e626:	e8 bb 02 00 00       	call   c000e8e6 <malloc>
c000e62b:	81 c6 00 20 00 00    	add    esi,0x2000
c000e631:	89 04 24             	mov    DWORD PTR [esp],eax
c000e634:	89 c7                	mov    edi,eax
c000e636:	e8 19 32 00 00       	call   c0011854 <TSS::TSS()>
c000e63b:	83 c4 0c             	add    esp,0xc
c000e63e:	68 e6 f4 01 c0       	push   0xc001f4e6
c000e643:	56                   	push   esi
c000e644:	57                   	push   edi
c000e645:	e8 4e 32 00 00       	call   c0011898 <TSS::setup(unsigned long, unsigned long)>
c000e64a:	89 c6                	mov    esi,eax
c000e64c:	58                   	pop    eax
c000e64d:	5a                   	pop    edx
c000e64e:	6a 00                	push   0x0
c000e650:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e654:	50                   	push   eax
c000e655:	e8 ce fb ff ff       	call   c000e228 <IDTEntry::IDTEntry(bool)>
c000e65a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e65e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e663:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e66a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e66e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e674:	80 ce 05             	or     dh,0x5
c000e677:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e67b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e67e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e682:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e688:	e8 87 fc ff ff       	call   c000e314 <IDT::flush()>
c000e68d:	83 c4 20             	add    esp,0x20
c000e690:	5b                   	pop    ebx
c000e691:	5e                   	pop    esi
c000e692:	5f                   	pop    edi
c000e693:	c3                   	ret    

c000e694 <CPU::current()>:
c000e694:	83 ec 14             	sub    esp,0x14
c000e697:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000e69d:	68 12 20 02 c0       	push   0xc0022012
c000e6a2:	e8 a7 88 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e6a7:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e6ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6b2:	83 c4 1c             	add    esp,0x1c
c000e6b5:	c3                   	ret    

c000e6b6 <operator new(unsigned long)>:
c000e6b6:	e9 2b 02 00 00       	jmp    c000e8e6 <malloc>

c000e6bb <operator delete(void*)>:
c000e6bb:	e9 46 02 00 00       	jmp    c000e906 <rfree>

c000e6c0 <disableIRQs()>:
c000e6c0:	fa                   	cli    
c000e6c1:	c3                   	ret    

c000e6c2 <enableIRQs()>:
c000e6c2:	fb                   	sti    
c000e6c3:	c3                   	ret    

c000e6c4 <lockScheduler()>:
c000e6c4:	fa                   	cli    
c000e6c5:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6cb:	c3                   	ret    

c000e6cc <unlockScheduler()>:
c000e6cc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e6d1:	48                   	dec    eax
c000e6d2:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e6d7:	75 01                	jne    c000e6da <unlockScheduler()+0xe>
c000e6d9:	fb                   	sti    
c000e6da:	c3                   	ret    

c000e6db <lockStuff()>:
c000e6db:	fa                   	cli    
c000e6dc:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6e2:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e6e8:	c3                   	ret    

c000e6e9 <unlockStuff()>:
c000e6e9:	83 ec 0c             	sub    esp,0xc
c000e6ec:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e6f7:	75 18                	jne    c000e711 <unlockStuff()+0x28>
c000e6f9:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e700:	74 0f                	je     c000e711 <unlockStuff()+0x28>
c000e702:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e70c:	e8 bf 6d 00 00       	call   c00154d0 <schedule()>
c000e711:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e716:	48                   	dec    eax
c000e717:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e71c:	75 01                	jne    c000e71f <unlockStuff()+0x36>
c000e71e:	fb                   	sti    
c000e71f:	83 c4 0c             	add    esp,0xc
c000e722:	c3                   	ret    

c000e723 <Virt::getAKernelVAS()>:
c000e723:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e728:	c3                   	ret    

c000e729 <__not_memcpy>:
c000e729:	57                   	push   edi
c000e72a:	56                   	push   esi
c000e72b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e733:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e737:	89 c7                	mov    edi,eax
c000e739:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e73b:	5e                   	pop    esi
c000e73c:	5f                   	pop    edi
c000e73d:	c3                   	ret    

c000e73e <sbrk>:
c000e73e:	55                   	push   ebp
c000e73f:	57                   	push   edi
c000e740:	56                   	push   esi
c000e741:	53                   	push   ebx
c000e742:	83 ec 1c             	sub    esp,0x1c
c000e745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e749:	85 c0                	test   eax,eax
c000e74b:	74 66                	je     c000e7b3 <sbrk+0x75>
c000e74d:	78 6b                	js     c000e7ba <sbrk+0x7c>
c000e74f:	8b 15 90 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024090
c000e755:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e759:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000e75f:	05 ff 0f 00 00       	add    eax,0xfff
c000e764:	0f 49 e8             	cmovns ebp,eax
c000e767:	c1 fd 0c             	sar    ebp,0xc
c000e76a:	bb 00 00 00 00       	mov    ebx,0x0
c000e76f:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e775:	8b 3d 90 40 02 c0    	mov    edi,DWORD PTR ds:0xc0024090
c000e77b:	e8 b4 06 00 00       	call   c000ee34 <Phys::allocatePage()>
c000e780:	68 01 04 00 00       	push   0x401
c000e785:	57                   	push   edi
c000e786:	50                   	push   eax
c000e787:	56                   	push   esi
c000e788:	e8 33 3f 00 00       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e78d:	81 05 90 40 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024090,0x1000
c000e797:	83 c3 01             	add    ebx,0x1
c000e79a:	83 c4 10             	add    esp,0x10
c000e79d:	39 dd                	cmp    ebp,ebx
c000e79f:	75 ce                	jne    c000e76f <sbrk+0x31>
c000e7a1:	0f 20 d8             	mov    eax,cr3
c000e7a4:	0f 22 d8             	mov    cr3,eax
c000e7a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ab:	83 c4 1c             	add    esp,0x1c
c000e7ae:	5b                   	pop    ebx
c000e7af:	5e                   	pop    esi
c000e7b0:	5f                   	pop    edi
c000e7b1:	5d                   	pop    ebp
c000e7b2:	c3                   	ret    
c000e7b3:	a1 90 40 02 c0       	mov    eax,ds:0xc0024090
c000e7b8:	eb f1                	jmp    c000e7ab <sbrk+0x6d>
c000e7ba:	83 ec 08             	sub    esp,0x8
c000e7bd:	50                   	push   eax
c000e7be:	68 24 20 02 c0       	push   0xc0022024
c000e7c3:	e8 86 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7c8:	83 c4 10             	add    esp,0x10
c000e7cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7d0:	eb d9                	jmp    c000e7ab <sbrk+0x6d>

c000e7d2 <sbrk_thunk>:
c000e7d2:	83 ec 0c             	sub    esp,0xc
c000e7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d9:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e7de:	7f 10                	jg     c000e7f0 <sbrk_thunk+0x1e>
c000e7e0:	83 ec 0c             	sub    esp,0xc
c000e7e3:	50                   	push   eax
c000e7e4:	e8 55 ff ff ff       	call   c000e73e <sbrk>
c000e7e9:	83 c4 10             	add    esp,0x10
c000e7ec:	83 c4 0c             	add    esp,0xc
c000e7ef:	c3                   	ret    
c000e7f0:	83 ec 08             	sub    esp,0x8
c000e7f3:	50                   	push   eax
c000e7f4:	68 54 20 02 c0       	push   0xc0022054
c000e7f9:	e8 50 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e806:	eb e4                	jmp    c000e7ec <sbrk_thunk+0x1a>

c000e808 <mmap>:
c000e808:	55                   	push   ebp
c000e809:	57                   	push   edi
c000e80a:	56                   	push   esi
c000e80b:	53                   	push   ebx
c000e80c:	83 ec 18             	sub    esp,0x18
c000e80f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e813:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e819:	89 fb                	mov    ebx,edi
c000e81b:	c1 eb 0c             	shr    ebx,0xc
c000e81e:	53                   	push   ebx
c000e81f:	e8 bd 37 00 00       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c000e824:	89 c5                	mov    ebp,eax
c000e826:	83 c4 10             	add    esp,0x10
c000e829:	85 db                	test   ebx,ebx
c000e82b:	7e 2f                	jle    c000e85c <mmap+0x54>
c000e82d:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e833:	01 c7                	add    edi,eax
c000e835:	89 c3                	mov    ebx,eax
c000e837:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e83d:	e8 f2 05 00 00       	call   c000ee34 <Phys::allocatePage()>
c000e842:	68 01 04 00 00       	push   0x401
c000e847:	53                   	push   ebx
c000e848:	50                   	push   eax
c000e849:	56                   	push   esi
c000e84a:	e8 71 3e 00 00       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e84f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e855:	83 c4 10             	add    esp,0x10
c000e858:	39 fb                	cmp    ebx,edi
c000e85a:	75 db                	jne    c000e837 <mmap+0x2f>
c000e85c:	89 e8                	mov    eax,ebp
c000e85e:	83 c4 0c             	add    esp,0xc
c000e861:	5b                   	pop    ebx
c000e862:	5e                   	pop    esi
c000e863:	5f                   	pop    edi
c000e864:	5d                   	pop    ebp
c000e865:	c3                   	ret    

c000e866 <munmap>:
c000e866:	83 ec 18             	sub    esp,0x18
c000e869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e86d:	e8 6d 3a 00 00       	call   c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c000e872:	b8 00 00 00 00       	mov    eax,0x0
c000e877:	83 c4 1c             	add    esp,0x1c
c000e87a:	c3                   	ret    

c000e87b <liballoc_lock()>:
c000e87b:	fa                   	cli    
c000e87c:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e883:	b8 00 00 00 00       	mov    eax,0x0
c000e888:	c3                   	ret    

c000e889 <liballoc_unlock()>:
c000e889:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e88e:	83 e8 01             	sub    eax,0x1
c000e891:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e896:	75 01                	jne    c000e899 <liballoc_unlock()+0x10>
c000e898:	fb                   	sti    
c000e899:	b8 00 00 00 00       	mov    eax,0x0
c000e89e:	c3                   	ret    

c000e89f <liballoc_alloc(int)>:
c000e89f:	83 ec 10             	sub    esp,0x10
c000e8a2:	6a 01                	push   0x1
c000e8a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8a8:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e8ae:	e8 2f 3f 00 00       	call   c00127e2 <VAS::allocatePages(int, int)>
c000e8b3:	83 c4 1c             	add    esp,0x1c
c000e8b6:	c3                   	ret    

c000e8b7 <liballoc_free(void*, int)>:
c000e8b7:	83 ec 14             	sub    esp,0x14
c000e8ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8be:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e8c4:	e8 53 3b 00 00       	call   c001241c <VAS::freeAllocatedPages(unsigned long)>
c000e8c9:	b8 00 00 00 00       	mov    eax,0x0
c000e8ce:	83 c4 1c             	add    esp,0x1c
c000e8d1:	c3                   	ret    

c000e8d2 <realloc>:
c000e8d2:	83 ec 14             	sub    esp,0x14
c000e8d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8dd:	e8 a3 2e ff ff       	call   c0001785 <dlrealloc>
c000e8e2:	83 c4 1c             	add    esp,0x1c
c000e8e5:	c3                   	ret    

c000e8e6 <malloc>:
c000e8e6:	83 ec 18             	sub    esp,0x18
c000e8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ed:	e8 56 29 ff ff       	call   c0001248 <dlmalloc>
c000e8f2:	83 c4 1c             	add    esp,0x1c
c000e8f5:	c3                   	ret    

c000e8f6 <free>:
c000e8f6:	83 ec 18             	sub    esp,0x18
c000e8f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8fd:	e8 84 24 ff ff       	call   c0000d86 <dlfree>
c000e902:	83 c4 1c             	add    esp,0x1c
c000e905:	c3                   	ret    

c000e906 <rfree>:
c000e906:	83 ec 18             	sub    esp,0x18
c000e909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e90d:	e8 74 24 ff ff       	call   c0000d86 <dlfree>
c000e912:	83 c4 1c             	add    esp,0x1c
c000e915:	c3                   	ret    

c000e916 <calloc>:
c000e916:	56                   	push   esi
c000e917:	53                   	push   ebx
c000e918:	83 ec 10             	sub    esp,0x10
c000e91b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e91f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e924:	53                   	push   ebx
c000e925:	e8 bc ff ff ff       	call   c000e8e6 <malloc>
c000e92a:	89 c6                	mov    esi,eax
c000e92c:	83 c4 0c             	add    esp,0xc
c000e92f:	53                   	push   ebx
c000e930:	6a 00                	push   0x0
c000e932:	50                   	push   eax
c000e933:	e8 b8 1b ff ff       	call   c00004f0 <memset>
c000e938:	89 f0                	mov    eax,esi
c000e93a:	83 c4 14             	add    esp,0x14
c000e93d:	5b                   	pop    ebx
c000e93e:	5e                   	pop    esi
c000e93f:	c3                   	ret    

c000e940 <KeMailboxTryPost(Mailbox*, void*)>:
c000e940:	83 ec 10             	sub    esp,0x10
c000e943:	fa                   	cli    
c000e944:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e949:	83 c0 01             	add    eax,0x1
c000e94c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e951:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e956:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e95d:	85 c0                	test   eax,eax
c000e95f:	75 23                	jne    c000e984 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e961:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e965:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e969:	89 10                	mov    DWORD PTR [eax],edx
c000e96b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e96f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e972:	8d 50 01             	lea    edx,[eax+0x1]
c000e975:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e979:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e97c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e981:	8d 76 00             	lea    esi,[esi+0x0]
c000e984:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e989:	83 e8 01             	sub    eax,0x1
c000e98c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e991:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e996:	85 c0                	test   eax,eax
c000e998:	75 02                	jne    c000e99c <KeMailboxTryPost(Mailbox*, void*)+0x5c>
c000e99a:	fb                   	sti    
c000e99b:	90                   	nop
c000e99c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9a0:	83 c4 10             	add    esp,0x10
c000e9a3:	c3                   	ret    

c000e9a4 <KeMailboxTryGet(Mailbox*, void**)>:
c000e9a4:	83 ec 10             	sub    esp,0x10
c000e9a7:	fa                   	cli    
c000e9a8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9ad:	83 c0 01             	add    eax,0x1
c000e9b0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e9b5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9c1:	83 f8 01             	cmp    eax,0x1
c000e9c4:	75 22                	jne    c000e9e8 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000e9c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9d0:	89 10                	mov    DWORD PTR [eax],edx
c000e9d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9d9:	8d 50 ff             	lea    edx,[eax-0x1]
c000e9dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9e3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e9e8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9ed:	83 e8 01             	sub    eax,0x1
c000e9f0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e9f5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9fa:	85 c0                	test   eax,eax
c000e9fc:	75 02                	jne    c000ea00 <KeMailboxTryGet(Mailbox*, void**)+0x5c>
c000e9fe:	fb                   	sti    
c000e9ff:	90                   	nop
c000ea00:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea04:	83 c4 10             	add    esp,0x10
c000ea07:	c3                   	ret    

c000ea08 <KeMailboxCreate()>:
c000ea08:	83 ec 1c             	sub    esp,0x1c
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	6a 08                	push   0x8
c000ea10:	e8 d1 fe ff ff       	call   c000e8e6 <malloc>
c000ea15:	83 c4 10             	add    esp,0x10
c000ea18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ea26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ea31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea35:	83 c4 1c             	add    esp,0x1c
c000ea38:	c3                   	ret    
c000ea39:	8d 76 00             	lea    esi,[esi+0x0]

c000ea3c <KeMailboxPost(Mailbox*, void*)>:
c000ea3c:	83 ec 1c             	sub    esp,0x1c
c000ea3f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea4c:	e8 ef fe ff ff       	call   c000e940 <KeMailboxTryPost(Mailbox*, void*)>
c000ea51:	83 c4 08             	add    esp,0x8
c000ea54:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea58:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea5c:	83 f0 01             	xor    eax,0x1
c000ea5f:	0f b6 c0             	movzx  eax,al
c000ea62:	85 c0                	test   eax,eax
c000ea64:	74 2a                	je     c000ea90 <KeMailboxPost(Mailbox*, void*)+0x54>
c000ea66:	fa                   	cli    
c000ea67:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea6c:	83 c0 01             	add    eax,0x1
c000ea6f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea74:	e8 57 6a 00 00       	call   c00154d0 <schedule()>
c000ea79:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea7e:	83 e8 01             	sub    eax,0x1
c000ea81:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea86:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea8b:	85 c0                	test   eax,eax
c000ea8d:	75 01                	jne    c000ea90 <KeMailboxPost(Mailbox*, void*)+0x54>
c000ea8f:	fb                   	sti    
c000ea90:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ea95:	85 c0                	test   eax,eax
c000ea97:	75 03                	jne    c000ea9c <KeMailboxPost(Mailbox*, void*)+0x60>
c000ea99:	eb a9                	jmp    c000ea44 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ea9b:	90                   	nop
c000ea9c:	90                   	nop
c000ea9d:	83 c4 1c             	add    esp,0x1c
c000eaa0:	c3                   	ret    
c000eaa1:	8d 76 00             	lea    esi,[esi+0x0]

c000eaa4 <KeMailboxGet(Mailbox*, void**)>:
c000eaa4:	83 ec 1c             	sub    esp,0x1c
c000eaa7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eaac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eab0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eab4:	e8 eb fe ff ff       	call   c000e9a4 <KeMailboxTryGet(Mailbox*, void**)>
c000eab9:	83 c4 08             	add    esp,0x8
c000eabc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eac0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eac4:	83 f0 01             	xor    eax,0x1
c000eac7:	0f b6 c0             	movzx  eax,al
c000eaca:	85 c0                	test   eax,eax
c000eacc:	74 2a                	je     c000eaf8 <KeMailboxGet(Mailbox*, void**)+0x54>
c000eace:	fa                   	cli    
c000eacf:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ead4:	83 c0 01             	add    eax,0x1
c000ead7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eadc:	e8 ef 69 00 00       	call   c00154d0 <schedule()>
c000eae1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eae6:	83 e8 01             	sub    eax,0x1
c000eae9:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eaee:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eaf3:	85 c0                	test   eax,eax
c000eaf5:	75 01                	jne    c000eaf8 <KeMailboxGet(Mailbox*, void**)+0x54>
c000eaf7:	fb                   	sti    
c000eaf8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eafd:	85 c0                	test   eax,eax
c000eaff:	75 03                	jne    c000eb04 <KeMailboxGet(Mailbox*, void**)+0x60>
c000eb01:	eb a9                	jmp    c000eaac <KeMailboxGet(Mailbox*, void**)+0x8>
c000eb03:	90                   	nop
c000eb04:	90                   	nop
c000eb05:	83 c4 1c             	add    esp,0x1c
c000eb08:	c3                   	ret    
c000eb09:	8d 76 00             	lea    esi,[esi+0x0]

c000eb0c <KeMailboxDestroy(Mailbox*)>:
c000eb0c:	83 ec 0c             	sub    esp,0xc
c000eb0f:	83 ec 0c             	sub    esp,0xc
c000eb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb16:	e8 db fd ff ff       	call   c000e8f6 <free>
c000eb1b:	83 c4 10             	add    esp,0x10
c000eb1e:	90                   	nop
c000eb1f:	83 c4 0c             	add    esp,0xc
c000eb22:	c3                   	ret    

c000eb23 <KeEntryPoint>:
c000eb23:	57                   	push   edi
c000eb24:	bf f9 03 00 00       	mov    edi,0x3f9
c000eb29:	56                   	push   esi
c000eb2a:	31 f6                	xor    esi,esi
c000eb2c:	53                   	push   ebx
c000eb2d:	89 fa                	mov    edx,edi
c000eb2f:	83 ec 2c             	sub    esp,0x2c
c000eb32:	a1 00 05 00 00       	mov    eax,ds:0x500
c000eb37:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000eb3c:	89 f0                	mov    eax,esi
c000eb3e:	ee                   	out    dx,al
c000eb3f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000eb44:	b0 80                	mov    al,0x80
c000eb46:	89 da                	mov    edx,ebx
c000eb48:	ee                   	out    dx,al
c000eb49:	b1 03                	mov    cl,0x3
c000eb4b:	ba f8 03 00 00       	mov    edx,0x3f8
c000eb50:	88 c8                	mov    al,cl
c000eb52:	ee                   	out    dx,al
c000eb53:	89 f0                	mov    eax,esi
c000eb55:	89 fa                	mov    edx,edi
c000eb57:	ee                   	out    dx,al
c000eb58:	88 c8                	mov    al,cl
c000eb5a:	89 da                	mov    edx,ebx
c000eb5c:	ee                   	out    dx,al
c000eb5d:	b0 c7                	mov    al,0xc7
c000eb5f:	ba fa 03 00 00       	mov    edx,0x3fa
c000eb64:	ee                   	out    dx,al
c000eb65:	b0 0b                	mov    al,0xb
c000eb67:	ba fc 03 00 00       	mov    edx,0x3fc
c000eb6c:	ee                   	out    dx,al
c000eb6d:	68 63 20 02 c0       	push   0xc0022063
c000eb72:	e8 d7 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb77:	e8 f8 d9 ff ff       	call   c000c574 <KeDisplaySplashScreen()>
c000eb7c:	a1 24 05 00 00       	mov    eax,ds:0x524
c000eb81:	05 ff 0f 00 00       	add    eax,0xfff
c000eb86:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb8e:	e8 0f 04 00 00       	call   c000efa2 <Phys::physicalMemorySetup(unsigned int)>
c000eb93:	e8 1d 36 00 00       	call   c00121b5 <Virt::virtualMemorySetup()>
c000eb98:	e8 21 d9 ff ff       	call   c000c4be <KeInitialiseAtexit()>
c000eb9d:	c7 04 24 7a 20 02 c0 	mov    DWORD PTR [esp],0xc002207a
c000eba4:	e8 a5 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eba9:	58                   	pop    eax
c000ebaa:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ebae:	53                   	push   ebx
c000ebaf:	e8 e8 38 00 00       	call   c001249c <VAS::VAS()>
c000ebb4:	c7 04 24 8a 20 02 c0 	mov    DWORD PTR [esp],0xc002208a
c000ebbb:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000ebc1:	e8 88 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebc6:	e8 63 11 01 00       	call   c001fd2e <_init>
c000ebcb:	c7 04 24 9e 20 02 c0 	mov    DWORD PTR [esp],0xc002209e
c000ebd2:	e8 77 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebd7:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ebde:	e8 03 fd ff ff       	call   c000e8e6 <malloc>
c000ebe3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebe6:	89 c6                	mov    esi,eax
c000ebe8:	e8 4f ea ff ff       	call   c000d63c <Computer::Computer()>
c000ebed:	5a                   	pop    edx
c000ebee:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000ebf4:	59                   	pop    ecx
c000ebf5:	56                   	push   esi
c000ebf6:	68 ad 20 02 c0       	push   0xc00220ad
c000ebfb:	e8 4e 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ec00:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ec05:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec07:	53                   	push   ebx
c000ec08:	6a 00                	push   0x0
c000ec0a:	6a 00                	push   0x0
c000ec0c:	50                   	push   eax
c000ec0d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec10:	83 c4 14             	add    esp,0x14
c000ec13:	53                   	push   ebx
c000ec14:	e8 39 39 00 00       	call   c0012552 <VAS::~VAS()>
c000ec19:	83 c4 30             	add    esp,0x30
c000ec1c:	5b                   	pop    ebx
c000ec1d:	5e                   	pop    esi
c000ec1e:	5f                   	pop    edi
c000ec1f:	c3                   	ret    

c000ec20 <Mutex::Mutex()>:
c000ec20:	83 ec 0c             	sub    esp,0xc
c000ec23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	6a 01                	push   0x1
c000ec2c:	50                   	push   eax
c000ec2d:	e8 26 0c 00 00       	call   c000f858 <Semaphore::Semaphore(int)>
c000ec32:	83 c4 10             	add    esp,0x10
c000ec35:	90                   	nop
c000ec36:	83 c4 0c             	add    esp,0xc
c000ec39:	c3                   	ret    

c000ec3a <KePanic(char const*)>:
c000ec3a:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000ec41:	e9 3a 97 00 00       	jmp    c0018380 <HalPanic(char const*)>

c000ec46 <Phys::allocateDMA(unsigned long)>:
c000ec46:	55                   	push   ebp
c000ec47:	31 ed                	xor    ebp,ebp
c000ec49:	57                   	push   edi
c000ec4a:	56                   	push   esi
c000ec4b:	31 f6                	xor    esi,esi
c000ec4d:	53                   	push   ebx
c000ec4e:	31 db                	xor    ebx,ebx
c000ec50:	83 ec 1c             	sub    esp,0x1c
c000ec53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec57:	05 ff 0f 00 00       	add    eax,0xfff
c000ec5c:	c1 e8 0c             	shr    eax,0xc
c000ec5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec63:	31 c0                	xor    eax,eax
c000ec65:	eb 1b                	jmp    c000ec82 <Phys::allocateDMA(unsigned long)+0x3c>
c000ec67:	8d 78 01             	lea    edi,[eax+0x1]
c000ec6a:	85 c0                	test   eax,eax
c000ec6c:	0f 44 eb             	cmove  ebp,ebx
c000ec6f:	0f 44 f3             	cmove  esi,ebx
c000ec72:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ec76:	74 37                	je     c000ecaf <Phys::allocateDMA(unsigned long)+0x69>
c000ec78:	89 f8                	mov    eax,edi
c000ec7a:	83 c3 01             	add    ebx,0x1
c000ec7d:	83 fb 0f             	cmp    ebx,0xf
c000ec80:	7f 13                	jg     c000ec95 <Phys::allocateDMA(unsigned long)+0x4f>
c000ec82:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ec89:	74 dc                	je     c000ec67 <Phys::allocateDMA(unsigned long)+0x21>
c000ec8b:	31 c0                	xor    eax,eax
c000ec8d:	83 c3 01             	add    ebx,0x1
c000ec90:	83 fb 0f             	cmp    ebx,0xf
c000ec93:	7e ed                	jle    c000ec82 <Phys::allocateDMA(unsigned long)+0x3c>
c000ec95:	83 ec 0c             	sub    esp,0xc
c000ec98:	68 c4 20 02 c0       	push   0xc00220c4
c000ec9d:	e8 98 ff ff ff       	call   c000ec3a <KePanic(char const*)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	31 c0                	xor    eax,eax
c000eca7:	83 c4 1c             	add    esp,0x1c
c000ecaa:	5b                   	pop    ebx
c000ecab:	5e                   	pop    esi
c000ecac:	5f                   	pop    edi
c000ecad:	5d                   	pop    ebp
c000ecae:	c3                   	ret    
c000ecaf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ecb3:	89 f2                	mov    edx,esi
c000ecb5:	c1 fa 04             	sar    edx,0x4
c000ecb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ecbc:	01 f1                	add    ecx,esi
c000ecbe:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ecc1:	83 e9 01             	sub    ecx,0x1
c000ecc4:	0f 48 ca             	cmovs  ecx,edx
c000ecc7:	c1 f9 04             	sar    ecx,0x4
c000ecca:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ecce:	74 06                	je     c000ecd6 <Phys::allocateDMA(unsigned long)+0x90>
c000ecd0:	89 eb                	mov    ebx,ebp
c000ecd2:	31 c0                	xor    eax,eax
c000ecd4:	eb b7                	jmp    c000ec8d <Phys::allocateDMA(unsigned long)+0x47>
c000ecd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecda:	85 d2                	test   edx,edx
c000ecdc:	74 17                	je     c000ecf5 <Phys::allocateDMA(unsigned long)+0xaf>
c000ecde:	8d 96 b0 bd 02 c0    	lea    edx,[esi-0x3ffd4250]
c000ece4:	8d 84 06 b1 bd 02 c0 	lea    eax,[esi+eax*1-0x3ffd424f]
c000eceb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ecee:	83 c2 01             	add    edx,0x1
c000ecf1:	39 d0                	cmp    eax,edx
c000ecf3:	75 f6                	jne    c000eceb <Phys::allocateDMA(unsigned long)+0xa5>
c000ecf5:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ecfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed03:	01 c2                	add    edx,eax
c000ed05:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ed0b:	85 c9                	test   ecx,ecx
c000ed0d:	74 17                	je     c000ed26 <Phys::allocateDMA(unsigned long)+0xe0>
c000ed0f:	83 ec 0c             	sub    esp,0xc
c000ed12:	68 c4 20 02 c0       	push   0xc00220c4
c000ed17:	e8 1e ff ff ff       	call   c000ec3a <KePanic(char const*)>
c000ed1c:	83 c4 10             	add    esp,0x10
c000ed1f:	89 f8                	mov    eax,edi
c000ed21:	e9 54 ff ff ff       	jmp    c000ec7a <Phys::allocateDMA(unsigned long)+0x34>
c000ed26:	c1 e6 0c             	shl    esi,0xc
c000ed29:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000ed2f:	e9 73 ff ff ff       	jmp    c000eca7 <Phys::allocateDMA(unsigned long)+0x61>

c000ed34 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ed34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed38:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ed3e:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ed43:	c1 ea 0c             	shr    edx,0xc
c000ed46:	29 d0                	sub    eax,edx
c000ed48:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ed4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed51:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ed56:	c1 e8 0c             	shr    eax,0xc
c000ed59:	85 d2                	test   edx,edx
c000ed5b:	74 11                	je     c000ed6e <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ed5d:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000ed62:	01 c2                	add    edx,eax
c000ed64:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ed67:	83 c0 01             	add    eax,0x1
c000ed6a:	39 d0                	cmp    eax,edx
c000ed6c:	75 f6                	jne    c000ed64 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ed6e:	c3                   	ret    

c000ed6f <Phys::setPageState(unsigned long, bool)>:
c000ed6f:	57                   	push   edi
c000ed70:	56                   	push   esi
c000ed71:	8b 35 94 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024094
c000ed77:	53                   	push   ebx
c000ed78:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ed7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ed85:	89 ca                	mov    edx,ecx
c000ed87:	83 e1 07             	and    ecx,0x7
c000ed8a:	c1 ea 03             	shr    edx,0x3
c000ed8d:	0f b6 c0             	movzx  eax,al
c000ed90:	d3 c3                	rol    ebx,cl
c000ed92:	01 d6                	add    esi,edx
c000ed94:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ed97:	d3 e0                	shl    eax,cl
c000ed99:	21 fb                	and    ebx,edi
c000ed9b:	88 1e                	mov    BYTE PTR [esi],bl
c000ed9d:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c000eda3:	01 da                	add    edx,ebx
c000eda5:	8a 0a                	mov    cl,BYTE PTR [edx]
c000eda7:	09 c8                	or     eax,ecx
c000eda9:	88 02                	mov    BYTE PTR [edx],al
c000edab:	5b                   	pop    ebx
c000edac:	5e                   	pop    esi
c000edad:	5f                   	pop    edi
c000edae:	c3                   	ret    

c000edaf <Phys::getPageState(unsigned long)>:
c000edaf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb3:	8b 15 94 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024094
c000edb9:	89 c8                	mov    eax,ecx
c000edbb:	83 e1 07             	and    ecx,0x7
c000edbe:	c1 e8 03             	shr    eax,0x3
c000edc1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000edc5:	d3 f8                	sar    eax,cl
c000edc7:	83 e0 01             	and    eax,0x1
c000edca:	c3                   	ret    

c000edcb <Phys::freePage(unsigned long)>:
c000edcb:	53                   	push   ebx
c000edcc:	83 ec 08             	sub    esp,0x8
c000edcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edd3:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000edd9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000eddf:	76 41                	jbe    c000ee22 <Phys::freePage(unsigned long)+0x57>
c000ede1:	c1 e8 0c             	shr    eax,0xc
c000ede4:	50                   	push   eax
c000ede5:	89 c3                	mov    ebx,eax
c000ede7:	e8 c3 ff ff ff       	call   c000edaf <Phys::getPageState(unsigned long)>
c000edec:	5a                   	pop    edx
c000eded:	84 c0                	test   al,al
c000edef:	74 20                	je     c000ee11 <Phys::freePage(unsigned long)+0x46>
c000edf1:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000edf6:	83 ec 08             	sub    esp,0x8
c000edf9:	6a 00                	push   0x0
c000edfb:	53                   	push   ebx
c000edfc:	83 e8 01             	sub    eax,0x1
c000edff:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ee04:	e8 66 ff ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000ee09:	83 c4 10             	add    esp,0x10
c000ee0c:	83 c4 08             	add    esp,0x8
c000ee0f:	5b                   	pop    ebx
c000ee10:	c3                   	ret    
c000ee11:	c7 44 24 10 69 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022169
c000ee19:	83 c4 08             	add    esp,0x8
c000ee1c:	5b                   	pop    ebx
c000ee1d:	e9 18 fe ff ff       	jmp    c000ec3a <KePanic(char const*)>
c000ee22:	68 00 10 00 00       	push   0x1000
c000ee27:	50                   	push   eax
c000ee28:	e8 07 ff ff ff       	call   c000ed34 <Phys::freeDMA(unsigned long, unsigned long)>
c000ee2d:	59                   	pop    ecx
c000ee2e:	5b                   	pop    ebx
c000ee2f:	83 c4 08             	add    esp,0x8
c000ee32:	5b                   	pop    ebx
c000ee33:	c3                   	ret    

c000ee34 <Phys::allocatePage()>:
c000ee34:	56                   	push   esi
c000ee35:	53                   	push   ebx
c000ee36:	83 ec 14             	sub    esp,0x14
c000ee39:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000ee3f:	89 f3                	mov    ebx,esi
c000ee41:	eb 0a                	jmp    c000ee4d <Phys::allocatePage()+0x19>
c000ee43:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000ee49:	39 de                	cmp    esi,ebx
c000ee4b:	74 26                	je     c000ee73 <Phys::allocatePage()+0x3f>
c000ee4d:	53                   	push   ebx
c000ee4e:	e8 5c ff ff ff       	call   c000edaf <Phys::getPageState(unsigned long)>
c000ee53:	5a                   	pop    edx
c000ee54:	84 c0                	test   al,al
c000ee56:	74 67                	je     c000eebf <Phys::allocatePage()+0x8b>
c000ee58:	83 c3 01             	add    ebx,0x1
c000ee5b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ee61:	75 e0                	jne    c000ee43 <Phys::allocatePage()+0xf>
c000ee63:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000ee6d:	31 db                	xor    ebx,ebx
c000ee6f:	39 de                	cmp    esi,ebx
c000ee71:	75 da                	jne    c000ee4d <Phys::allocatePage()+0x19>
c000ee73:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000ee78:	83 ec 0c             	sub    esp,0xc
c000ee7b:	83 f0 01             	xor    eax,0x1
c000ee7e:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ee83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee8b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ee91:	50                   	push   eax
c000ee92:	e8 01 41 00 00       	call   c0012f98 <VAS::scanForEviction()>
c000ee97:	83 c4 10             	add    esp,0x10
c000ee9a:	85 c0                	test   eax,eax
c000ee9c:	75 48                	jne    c000eee6 <Phys::allocatePage()+0xb2>
c000ee9e:	83 ec 0c             	sub    esp,0xc
c000eea1:	68 ec 20 02 c0       	push   0xc00220ec
c000eea6:	e8 8f fd ff ff       	call   c000ec3a <KePanic(char const*)>
c000eeab:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000eeb1:	83 c4 10             	add    esp,0x10
c000eeb4:	53                   	push   ebx
c000eeb5:	e8 f5 fe ff ff       	call   c000edaf <Phys::getPageState(unsigned long)>
c000eeba:	5a                   	pop    edx
c000eebb:	84 c0                	test   al,al
c000eebd:	75 99                	jne    c000ee58 <Phys::allocatePage()+0x24>
c000eebf:	6a 01                	push   0x1
c000eec1:	53                   	push   ebx
c000eec2:	e8 a8 fe ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000eec7:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000eecd:	59                   	pop    ecx
c000eece:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000eed3:	5b                   	pop    ebx
c000eed4:	83 c2 01             	add    edx,0x1
c000eed7:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000eedd:	c1 e0 0c             	shl    eax,0xc
c000eee0:	83 c4 14             	add    esp,0x14
c000eee3:	5b                   	pop    ebx
c000eee4:	5e                   	pop    esi
c000eee5:	c3                   	ret    
c000eee6:	83 ec 08             	sub    esp,0x8
c000eee9:	89 c2                	mov    edx,eax
c000eeeb:	6a 01                	push   0x1
c000eeed:	c1 ea 0c             	shr    edx,0xc
c000eef0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eef4:	52                   	push   edx
c000eef5:	e8 75 fe ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000eefa:	83 c4 10             	add    esp,0x10
c000eefd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef01:	eb dd                	jmp    c000eee0 <Phys::allocatePage()+0xac>

c000ef03 <Phys::allocateContiguousPages(int)>:
c000ef03:	57                   	push   edi
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef0a:	fa                   	cli    
c000ef0b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ef10:	31 db                	xor    ebx,ebx
c000ef12:	83 c0 01             	add    eax,0x1
c000ef15:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ef1a:	85 db                	test   ebx,ebx
c000ef1c:	75 11                	jne    c000ef2f <Phys::allocateContiguousPages(int)+0x2c>
c000ef1e:	e8 11 ff ff ff       	call   c000ee34 <Phys::allocatePage()>
c000ef23:	83 fe 01             	cmp    esi,0x1
c000ef26:	89 c7                	mov    edi,eax
c000ef28:	74 21                	je     c000ef4b <Phys::allocateContiguousPages(int)+0x48>
c000ef2a:	bb 01 00 00 00       	mov    ebx,0x1
c000ef2f:	e8 00 ff ff ff       	call   c000ee34 <Phys::allocatePage()>
c000ef34:	89 da                	mov    edx,ebx
c000ef36:	c1 e2 0c             	shl    edx,0xc
c000ef39:	01 fa                	add    edx,edi
c000ef3b:	39 c2                	cmp    edx,eax
c000ef3d:	74 22                	je     c000ef61 <Phys::allocateContiguousPages(int)+0x5e>
c000ef3f:	83 fe 01             	cmp    esi,0x1
c000ef42:	bb 01 00 00 00       	mov    ebx,0x1
c000ef47:	89 c7                	mov    edi,eax
c000ef49:	75 e4                	jne    c000ef2f <Phys::allocateContiguousPages(int)+0x2c>
c000ef4b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ef50:	83 e8 01             	sub    eax,0x1
c000ef53:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ef58:	75 01                	jne    c000ef5b <Phys::allocateContiguousPages(int)+0x58>
c000ef5a:	fb                   	sti    
c000ef5b:	5b                   	pop    ebx
c000ef5c:	89 f8                	mov    eax,edi
c000ef5e:	5e                   	pop    esi
c000ef5f:	5f                   	pop    edi
c000ef60:	c3                   	ret    
c000ef61:	83 c3 01             	add    ebx,0x1
c000ef64:	39 f3                	cmp    ebx,esi
c000ef66:	75 b2                	jne    c000ef1a <Phys::allocateContiguousPages(int)+0x17>
c000ef68:	eb e1                	jmp    c000ef4b <Phys::allocateContiguousPages(int)+0x48>

c000ef6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ef6a:	56                   	push   esi
c000ef6b:	53                   	push   ebx
c000ef6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef70:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000ef76:	73 06                	jae    c000ef7e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ef78:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000ef7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef82:	c1 eb 0c             	shr    ebx,0xc
c000ef85:	c1 e8 0c             	shr    eax,0xc
c000ef88:	39 d8                	cmp    eax,ebx
c000ef8a:	73 13                	jae    c000ef9f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ef8c:	6a 00                	push   0x0
c000ef8e:	50                   	push   eax
c000ef8f:	8d 70 01             	lea    esi,[eax+0x1]
c000ef92:	e8 d8 fd ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000ef97:	39 f3                	cmp    ebx,esi
c000ef99:	89 f0                	mov    eax,esi
c000ef9b:	5a                   	pop    edx
c000ef9c:	59                   	pop    ecx
c000ef9d:	75 ed                	jne    c000ef8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ef9f:	5b                   	pop    ebx
c000efa0:	5e                   	pop    esi
c000efa1:	c3                   	ret    

c000efa2 <Phys::physicalMemorySetup(unsigned int)>:
c000efa2:	55                   	push   ebp
c000efa3:	57                   	push   edi
c000efa4:	56                   	push   esi
c000efa5:	53                   	push   ebx
c000efa6:	31 db                	xor    ebx,ebx
c000efa8:	83 ec 40             	sub    esp,0x40
c000efab:	6a 10                	push   0x10
c000efad:	6a 00                	push   0x0
c000efaf:	68 b0 bd 02 c0       	push   0xc002bdb0
c000efb4:	e8 37 15 ff ff       	call   c00004f0 <memset>
c000efb9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000efc2:	05 00 10 00 00       	add    eax,0x1000
c000efc7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efcb:	5a                   	pop    edx
c000efcc:	59                   	pop    ecx
c000efcd:	50                   	push   eax
c000efce:	68 7f 21 02 c0       	push   0xc002217f
c000efd3:	e8 76 7f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000efd8:	83 c4 10             	add    esp,0x10
c000efdb:	83 ec 08             	sub    esp,0x8
c000efde:	6a 01                	push   0x1
c000efe0:	53                   	push   ebx
c000efe1:	83 c3 01             	add    ebx,0x1
c000efe4:	e8 86 fd ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000efe9:	83 c4 10             	add    esp,0x10
c000efec:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000eff2:	75 e7                	jne    c000efdb <Phys::physicalMemorySetup(unsigned int)+0x39>
c000eff4:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000effb:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f002:	c1 e0 08             	shl    eax,0x8
c000f005:	09 c2                	or     edx,eax
c000f007:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f00b:	0f 84 43 01 00 00    	je     c000f154 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000f011:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f019:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f01e:	e9 82 00 00 00       	jmp    c000f0a5 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f023:	ba 00 00 08 00       	mov    edx,0x80000
c000f028:	89 c1                	mov    ecx,eax
c000f02a:	39 f2                	cmp    edx,esi
c000f02c:	19 f9                	sbb    ecx,edi
c000f02e:	0f 82 c0 00 00 00    	jb     c000f0f4 <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f034:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f038:	89 c5                	mov    ebp,eax
c000f03a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f03e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f042:	19 cd                	sbb    ebp,ecx
c000f044:	0f 83 af 00 00 00    	jae    c000f0f9 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f04a:	89 d6                	mov    esi,edx
c000f04c:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f051:	39 f2                	cmp    edx,esi
c000f053:	89 cf                	mov    edi,ecx
c000f055:	19 c8                	sbb    eax,ecx
c000f057:	73 07                	jae    c000f060 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f059:	be 00 00 0a 00       	mov    esi,0xa0000
c000f05e:	31 ff                	xor    edi,edi
c000f060:	89 f2                	mov    edx,esi
c000f062:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f067:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f06d:	89 f9                	mov    ecx,edi
c000f06f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f073:	83 d1 ff             	adc    ecx,0xffffffff
c000f076:	39 d0                	cmp    eax,edx
c000f078:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f07c:	b8 00 00 00 00       	mov    eax,0x0
c000f081:	19 c8                	sbb    eax,ecx
c000f083:	0f 82 9d 01 00 00    	jb     c000f226 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f089:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f08d:	83 c3 18             	add    ebx,0x18
c000f090:	83 c6 01             	add    esi,0x1
c000f093:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f097:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f09b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f09f:	0f 84 bf 00 00 00    	je     c000f164 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f0a5:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f0a7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f0aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f0ad:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f0b0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f0b4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f0b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0bb:	01 f0                	add    eax,esi
c000f0bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f0c5:	55                   	push   ebp
c000f0c6:	11 fa                	adc    edx,edi
c000f0c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0cc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f0d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0d4:	50                   	push   eax
c000f0d5:	56                   	push   esi
c000f0d6:	68 1c 21 02 c0       	push   0xc002211c
c000f0db:	e8 6e 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f0e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f0e4:	83 c4 10             	add    esp,0x10
c000f0e7:	09 f8                	or     eax,edi
c000f0e9:	75 79                	jne    c000f164 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f0eb:	83 fd 01             	cmp    ebp,0x1
c000f0ee:	0f 84 2f ff ff ff    	je     c000f023 <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f0f4:	83 fd 01             	cmp    ebp,0x1
c000f0f7:	75 90                	jne    c000f089 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0fd:	31 d2                	xor    edx,edx
c000f0ff:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f103:	89 c8                	mov    eax,ecx
c000f105:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f109:	19 d1                	sbb    ecx,edx
c000f10b:	0f 82 78 ff ff ff    	jb     c000f089 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f111:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f116:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f11a:	b9 00 00 00 00       	mov    ecx,0x0
c000f11f:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f123:	0f 83 60 ff ff ff    	jae    c000f089 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f129:	39 c6                	cmp    esi,eax
c000f12b:	19 d7                	sbb    edi,edx
c000f12d:	0f 83 ff 00 00 00    	jae    c000f232 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f133:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f137:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f13b:	29 c7                	sub    edi,eax
c000f13d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f141:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f145:	19 d5                	sbb    ebp,edx
c000f147:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f14b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f14f:	e9 de 00 00 00       	jmp    c000f232 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f154:	83 ec 0c             	sub    esp,0xc
c000f157:	68 97 21 02 c0       	push   0xc0022197
c000f15c:	e8 d9 fa ff ff       	call   c000ec3a <KePanic(char const*)>
c000f161:	83 c4 10             	add    esp,0x10
c000f164:	83 ec 08             	sub    esp,0x8
c000f167:	bb 60 00 00 00       	mov    ebx,0x60
c000f16c:	6a 00                	push   0x0
c000f16e:	6a 06                	push   0x6
c000f170:	e8 fa fb ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000f175:	58                   	pop    eax
c000f176:	5a                   	pop    edx
c000f177:	6a 00                	push   0x0
c000f179:	6a 07                	push   0x7
c000f17b:	e8 ef fb ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000f180:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f186:	83 c4 10             	add    esp,0x10
c000f189:	83 c1 02             	add    ecx,0x2
c000f18c:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f192:	83 ec 08             	sub    esp,0x8
c000f195:	6a 00                	push   0x0
c000f197:	53                   	push   ebx
c000f198:	83 c3 01             	add    ebx,0x1
c000f19b:	e8 cf fb ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000f1a0:	83 c4 10             	add    esp,0x10
c000f1a3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f1a9:	75 e7                	jne    c000f192 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000f1ab:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1b0:	bb 40 01 00 00       	mov    ebx,0x140
c000f1b5:	83 c0 20             	add    eax,0x20
c000f1b8:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1bd:	eb 26                	jmp    c000f1e5 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000f1bf:	83 ec 08             	sub    esp,0x8
c000f1c2:	6a 00                	push   0x0
c000f1c4:	53                   	push   ebx
c000f1c5:	83 c3 01             	add    ebx,0x1
c000f1c8:	e8 a2 fb ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000f1cd:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1d2:	83 c4 10             	add    esp,0x10
c000f1d5:	83 c0 01             	add    eax,0x1
c000f1d8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f1de:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1e3:	74 07                	je     c000f1ec <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000f1e5:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f1ea:	7e d3                	jle    c000f1bf <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000f1ec:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f1f1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f1f6:	7f 26                	jg     c000f21e <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000f1f8:	83 ec 08             	sub    esp,0x8
c000f1fb:	6a 00                	push   0x0
c000f1fd:	53                   	push   ebx
c000f1fe:	83 c3 01             	add    ebx,0x1
c000f201:	e8 69 fb ff ff       	call   c000ed6f <Phys::setPageState(unsigned long, bool)>
c000f206:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f20b:	83 c4 10             	add    esp,0x10
c000f20e:	83 c0 01             	add    eax,0x1
c000f211:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f217:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f21c:	75 d3                	jne    c000f1f1 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000f21e:	83 c4 3c             	add    esp,0x3c
c000f221:	5b                   	pop    ebx
c000f222:	5e                   	pop    esi
c000f223:	5f                   	pop    edi
c000f224:	5d                   	pop    ebp
c000f225:	c3                   	ret    
c000f226:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000f22a:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000f232:	83 ec 04             	sub    esp,0x4
c000f235:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f239:	56                   	push   esi
c000f23a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f23e:	57                   	push   edi
c000f23f:	68 40 21 02 c0       	push   0xc0022140
c000f244:	e8 05 7d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f249:	5d                   	pop    ebp
c000f24a:	58                   	pop    eax
c000f24b:	56                   	push   esi
c000f24c:	57                   	push   edi
c000f24d:	e8 18 fd ff ff       	call   c000ef6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f252:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f256:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f25a:	83 c4 0c             	add    esp,0xc
c000f25d:	8b 35 ac bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bdac
c000f263:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f267:	01 f0                	add    eax,esi
c000f269:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f26e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f275:	52                   	push   edx
c000f276:	50                   	push   eax
c000f277:	68 a5 21 02 c0       	push   0xc00221a5
c000f27c:	e8 cd 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f281:	83 c4 10             	add    esp,0x10
c000f284:	e9 00 fe ff ff       	jmp    c000f089 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f289:	90                   	nop

c000f28a <Pipe::isAtty()>:
c000f28a:	31 c0                	xor    eax,eax
c000f28c:	c3                   	ret    
c000f28d:	90                   	nop

c000f28e <Pipe::~Pipe()>:
c000f28e:	83 ec 0c             	sub    esp,0xc
c000f291:	ba 04 22 02 c0       	mov    edx,0xc0022204
c000f296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f29a:	89 10                	mov    DWORD PTR [eax],edx
c000f29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a0:	83 ec 0c             	sub    esp,0xc
c000f2a3:	50                   	push   eax
c000f2a4:	e8 cf 2a 00 00       	call   c0011d78 <UnixFile::~UnixFile()>
c000f2a9:	83 c4 10             	add    esp,0x10
c000f2ac:	90                   	nop
c000f2ad:	83 c4 0c             	add    esp,0xc
c000f2b0:	c3                   	ret    
c000f2b1:	90                   	nop

c000f2b2 <Pipe::~Pipe()>:
c000f2b2:	83 ec 0c             	sub    esp,0xc
c000f2b5:	83 ec 0c             	sub    esp,0xc
c000f2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2bc:	e8 cd ff ff ff       	call   c000f28e <Pipe::~Pipe()>
c000f2c1:	83 c4 10             	add    esp,0x10
c000f2c4:	83 ec 08             	sub    esp,0x8
c000f2c7:	6a 20                	push   0x20
c000f2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2cd:	e8 91 d3 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c000f2d2:	83 c4 10             	add    esp,0x10
c000f2d5:	83 c4 0c             	add    esp,0xc
c000f2d8:	c3                   	ret    
c000f2d9:	90                   	nop

c000f2da <Pipe::write(unsigned long long, void*, int*)>:
c000f2da:	55                   	push   ebp
c000f2db:	57                   	push   edi
c000f2dc:	56                   	push   esi
c000f2dd:	53                   	push   ebx
c000f2de:	83 ec 1c             	sub    esp,0x1c
c000f2e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f2e5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f2e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f2ed:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f2f0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2f4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f2f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2fa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f2fe:	89 d8                	mov    eax,ebx
c000f300:	89 d6                	mov    esi,edx
c000f302:	89 d7                	mov    edi,edx
c000f304:	c1 ff 1f             	sar    edi,0x1f
c000f307:	03 34 24             	add    esi,DWORD PTR [esp]
c000f30a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f30e:	c1 f8 1f             	sar    eax,0x1f
c000f311:	39 f3                	cmp    ebx,esi
c000f313:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f31b:	19 f8                	sbb    eax,edi
c000f31d:	b8 01 00 00 00       	mov    eax,0x1
c000f322:	72 72                	jb     c000f396 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000f324:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f327:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f32b:	01 d0                	add    eax,edx
c000f32d:	99                   	cdq    
c000f32e:	f7 fb                	idiv   ebx
c000f330:	89 d8                	mov    eax,ebx
c000f332:	29 d0                	sub    eax,edx
c000f334:	89 d6                	mov    esi,edx
c000f336:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f339:	89 c3                	mov    ebx,eax
c000f33b:	c1 fb 1f             	sar    ebx,0x1f
c000f33e:	39 c2                	cmp    edx,eax
c000f340:	19 df                	sbb    edi,ebx
c000f342:	bb 00 00 00 00       	mov    ebx,0x0
c000f347:	72 04                	jb     c000f34d <Pipe::write(unsigned long long, void*, int*)+0x73>
c000f349:	89 d3                	mov    ebx,edx
c000f34b:	29 c3                	sub    ebx,eax
c000f34d:	89 d0                	mov    eax,edx
c000f34f:	29 d8                	sub    eax,ebx
c000f351:	74 0d                	je     c000f360 <Pipe::write(unsigned long long, void*, int*)+0x86>
c000f353:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f356:	89 c1                	mov    ecx,eax
c000f358:	01 f7                	add    edi,esi
c000f35a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f35e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f360:	85 db                	test   ebx,ebx
c000f362:	74 0d                	je     c000f371 <Pipe::write(unsigned long long, void*, int*)+0x97>
c000f364:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f368:	89 d9                	mov    ecx,ebx
c000f36a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f36d:	89 c6                	mov    esi,eax
c000f36f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f371:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f374:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f379:	75 10                	jne    c000f38b <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000f37b:	83 ec 0c             	sub    esp,0xc
c000f37e:	68 c1 21 02 c0       	push   0xc00221c1
c000f383:	e8 b2 f8 ff ff       	call   c000ec3a <KePanic(char const*)>
c000f388:	83 c4 10             	add    esp,0x10
c000f38b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f38f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f392:	89 08                	mov    DWORD PTR [eax],ecx
c000f394:	31 c0                	xor    eax,eax
c000f396:	83 c4 1c             	add    esp,0x1c
c000f399:	5b                   	pop    ebx
c000f39a:	5e                   	pop    esi
c000f39b:	5f                   	pop    edi
c000f39c:	5d                   	pop    ebp
c000f39d:	c3                   	ret    

c000f39e <Pipe::read(unsigned long long, void*, int*)>:
c000f39e:	55                   	push   ebp
c000f39f:	57                   	push   edi
c000f3a0:	56                   	push   esi
c000f3a1:	53                   	push   ebx
c000f3a2:	83 ec 1c             	sub    esp,0x1c
c000f3a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f3a9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f3ad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f3b1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f3b4:	89 c8                	mov    eax,ecx
c000f3b6:	99                   	cdq    
c000f3b7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f3bb:	74 24                	je     c000f3e1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000f3bd:	39 f9                	cmp    ecx,edi
c000f3bf:	89 d1                	mov    ecx,edx
c000f3c1:	19 f1                	sbb    ecx,esi
c000f3c3:	73 1c                	jae    c000f3e1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000f3c5:	fa                   	cli    
c000f3c6:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f3cc:	e8 ff 60 00 00       	call   c00154d0 <schedule()>
c000f3d1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f3d6:	48                   	dec    eax
c000f3d7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f3dc:	75 d3                	jne    c000f3b1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3de:	fb                   	sti    
c000f3df:	eb d0                	jmp    c000f3b1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3e1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f3e5:	39 f8                	cmp    eax,edi
c000f3e7:	89 d1                	mov    ecx,edx
c000f3e9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000f3ed:	19 f1                	sbb    ecx,esi
c000f3ef:	73 08                	jae    c000f3f9 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000f3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3f9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f3fc:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f3ff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000f403:	29 f7                	sub    edi,esi
c000f405:	89 f8                	mov    eax,edi
c000f407:	99                   	cdq    
c000f408:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f40c:	89 d0                	mov    eax,edx
c000f40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f412:	19 c2                	sbb    edx,eax
c000f414:	89 f8                	mov    eax,edi
c000f416:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000f41b:	89 ea                	mov    edx,ebp
c000f41d:	29 c2                	sub    edx,eax
c000f41f:	85 c0                	test   eax,eax
c000f421:	74 0b                	je     c000f42e <Pipe::read(unsigned long long, void*, int*)+0x90>
c000f423:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f426:	89 c1                	mov    ecx,eax
c000f428:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f42c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f42e:	85 d2                	test   edx,edx
c000f430:	74 0d                	je     c000f43f <Pipe::read(unsigned long long, void*, int*)+0xa1>
c000f432:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f436:	89 d1                	mov    ecx,edx
c000f438:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f43b:	89 c7                	mov    edi,eax
c000f43d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f43f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f442:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f445:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f448:	99                   	cdq    
c000f449:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000f44d:	89 f7                	mov    edi,esi
c000f44f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000f453:	c1 ff 1f             	sar    edi,0x1f
c000f456:	57                   	push   edi
c000f457:	56                   	push   esi
c000f458:	52                   	push   edx
c000f459:	50                   	push   eax
c000f45a:	e8 b5 07 01 00       	call   c001fc14 <__umoddi3>
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f467:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f46a:	75 10                	jne    c000f47c <Pipe::read(unsigned long long, void*, int*)+0xde>
c000f46c:	83 ec 0c             	sub    esp,0xc
c000f46f:	68 de 21 02 c0       	push   0xc00221de
c000f474:	e8 c1 f7 ff ff       	call   c000ec3a <KePanic(char const*)>
c000f479:	83 c4 10             	add    esp,0x10
c000f47c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f480:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f484:	89 10                	mov    DWORD PTR [eax],edx
c000f486:	83 c4 1c             	add    esp,0x1c
c000f489:	31 c0                	xor    eax,eax
c000f48b:	5b                   	pop    ebx
c000f48c:	5e                   	pop    esi
c000f48d:	5f                   	pop    edi
c000f48e:	5d                   	pop    ebp
c000f48f:	c3                   	ret    

c000f490 <Pipe::Pipe(int)>:
c000f490:	83 ec 0c             	sub    esp,0xc
c000f493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f497:	83 ec 08             	sub    esp,0x8
c000f49a:	6a 00                	push   0x0
c000f49c:	50                   	push   eax
c000f49d:	e8 f0 26 00 00       	call   c0011b92 <UnixFile::UnixFile(int)>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	ba 04 22 02 c0       	mov    edx,0xc0022204
c000f4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ae:	89 10                	mov    DWORD PTR [eax],edx
c000f4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f4b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4bf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ca:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f4d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4d5:	83 ec 0c             	sub    esp,0xc
c000f4d8:	50                   	push   eax
c000f4d9:	e8 08 f4 ff ff       	call   c000e8e6 <malloc>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	89 c2                	mov    edx,eax
c000f4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ee:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f4f2:	90                   	nop
c000f4f3:	83 c4 0c             	add    esp,0xc
c000f4f6:	c3                   	ret    

c000f4f7 <KePowerThread(void*)>:
c000f4f7:	83 ec 0c             	sub    esp,0xc
c000f4fa:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f4ff:	48                   	dec    eax
c000f500:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f505:	75 01                	jne    c000f508 <KePowerThread(void*)+0x11>
c000f507:	fb                   	sti    
c000f508:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f50f:	83 ec 0c             	sub    esp,0xc
c000f512:	6a 0a                	push   0xa
c000f514:	e8 a3 61 00 00       	call   c00156bc <sleep(unsigned int)>
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f523:	eb e3                	jmp    c000f508 <KePowerThread(void*)+0x11>

c000f525 <KeChangePowerSettings(PowerSettings)>:
c000f525:	57                   	push   edi
c000f526:	b9 09 00 00 00       	mov    ecx,0x9
c000f52b:	56                   	push   esi
c000f52c:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f531:	fc                   	cld    
c000f532:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f536:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f538:	5e                   	pop    esi
c000f539:	5f                   	pop    edi
c000f53a:	c3                   	ret    

c000f53b <KeUserIOReceived()>:
c000f53b:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f545:	c3                   	ret    

c000f546 <KeHandlePowerButton()>:
c000f546:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f54b:	83 f8 02             	cmp    eax,0x2
c000f54e:	75 05                	jne    c000f555 <KeHandlePowerButton()+0xf>
c000f550:	e9 4b e1 ff ff       	jmp    c000d6a0 <KeShutdown()>
c000f555:	48                   	dec    eax
c000f556:	75 05                	jne    c000f55d <KeHandlePowerButton()+0x17>
c000f558:	e9 67 e1 ff ff       	jmp    c000d6c4 <KeSleep()>
c000f55d:	c3                   	ret    

c000f55e <KeHandleSleepButton()>:
c000f55e:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f563:	83 f8 02             	cmp    eax,0x2
c000f566:	75 05                	jne    c000f56d <KeHandleSleepButton()+0xf>
c000f568:	e9 33 e1 ff ff       	jmp    c000d6a0 <KeShutdown()>
c000f56d:	48                   	dec    eax
c000f56e:	75 05                	jne    c000f575 <KeHandleSleepButton()+0x17>
c000f570:	e9 4f e1 ff ff       	jmp    c000d6c4 <KeSleep()>
c000f575:	c3                   	ret    

c000f576 <KeSetupPowerManager()>:
c000f576:	83 ec 0c             	sub    esp,0xc
c000f579:	68 f0 00 00 00       	push   0xf0
c000f57e:	6a 00                	push   0x0
c000f580:	68 f7 f4 00 c0       	push   0xc000f4f7
c000f585:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f58b:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f595:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f59c:	e8 e3 5c 00 00       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c000f5a1:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f5ab:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f5b5:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f5bf:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f5c9:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f5d3:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f5dd:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f5e7:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f5f1:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f5fb:	83 c4 1c             	add    esp,0x1c
c000f5fe:	c3                   	ret    

c000f5ff <KeRand()>:
c000f5ff:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f609:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f613:	53                   	push   ebx
c000f614:	01 c1                	add    ecx,eax
c000f616:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f61b:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f621:	01 ca                	add    edx,ecx
c000f623:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f628:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f62d:	83 d2 00             	adc    edx,0x0
c000f630:	0f b7 da             	movzx  ebx,dx
c000f633:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f639:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000f63d:	5b                   	pop    ebx
c000f63e:	c3                   	ret    

c000f63f <KeSeedRand(unsigned int)>:
c000f63f:	53                   	push   ebx
c000f640:	83 ec 08             	sub    esp,0x8
c000f643:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f647:	e8 24 90 00 00       	call   c0018670 <HalGetRand()>
c000f64c:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f656:	31 d8                	xor    eax,ebx
c000f658:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f65d:	e8 9d ff ff ff       	call   c000f5ff <KeRand()>
c000f662:	83 c4 08             	add    esp,0x8
c000f665:	5b                   	pop    ebx
c000f666:	eb 97                	jmp    c000f5ff <KeRand()>

c000f668 <KeInitRand()>:
c000f668:	83 ec 0c             	sub    esp,0xc
c000f66b:	e8 24 8e 00 00       	call   c0018494 <HalQueryPerformanceCounter()>
c000f670:	0f 20 da             	mov    edx,cr3
c000f673:	0f 22 da             	mov    cr3,edx
c000f676:	0f 20 da             	mov    edx,cr3
c000f679:	0f 22 da             	mov    cr3,edx
c000f67c:	0f 20 da             	mov    edx,cr3
c000f67f:	0f 22 da             	mov    cr3,edx
c000f682:	0f 20 da             	mov    edx,cr3
c000f685:	0f 22 da             	mov    cr3,edx
c000f688:	83 ec 0c             	sub    esp,0xc
c000f68b:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f690:	50                   	push   eax
c000f691:	e8 a9 ff ff ff       	call   c000f63f <KeSeedRand(unsigned int)>
c000f696:	83 c4 1c             	add    esp,0x1c
c000f699:	c3                   	ret    
c000f69a:	66 90                	xchg   ax,ax

c000f69c <KeResolveCompatibilitySymbol(char*)>:
c000f69c:	83 ec 0c             	sub    esp,0xc
c000f69f:	83 ec 08             	sub    esp,0x8
c000f6a2:	68 18 22 02 c0       	push   0xc0022218
c000f6a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6ab:	e8 d0 10 ff ff       	call   c0000780 <strcmp>
c000f6b0:	83 c4 10             	add    esp,0x10
c000f6b3:	85 c0                	test   eax,eax
c000f6b5:	0f 94 c0             	sete   al
c000f6b8:	0f b6 c0             	movzx  eax,al
c000f6bb:	85 c0                	test   eax,eax
c000f6bd:	74 0d                	je     c000f6cc <KeResolveCompatibilitySymbol(char*)+0x30>
c000f6bf:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f6c4:	e9 8b 01 00 00       	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6cc:	83 ec 08             	sub    esp,0x8
c000f6cf:	68 21 22 02 c0       	push   0xc0022221
c000f6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6d8:	e8 a3 10 ff ff       	call   c0000780 <strcmp>
c000f6dd:	83 c4 10             	add    esp,0x10
c000f6e0:	85 c0                	test   eax,eax
c000f6e2:	0f 94 c0             	sete   al
c000f6e5:	0f b6 c0             	movzx  eax,al
c000f6e8:	85 c0                	test   eax,eax
c000f6ea:	74 0c                	je     c000f6f8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f6ec:	b8 14 fb 01 c0       	mov    eax,0xc001fb14
c000f6f1:	e9 5e 01 00 00       	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6f6:	66 90                	xchg   ax,ax
c000f6f8:	83 ec 08             	sub    esp,0x8
c000f6fb:	68 2b 22 02 c0       	push   0xc002222b
c000f700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f704:	e8 77 10 ff ff       	call   c0000780 <strcmp>
c000f709:	83 c4 10             	add    esp,0x10
c000f70c:	85 c0                	test   eax,eax
c000f70e:	0f 94 c0             	sete   al
c000f711:	0f b6 c0             	movzx  eax,al
c000f714:	85 c0                	test   eax,eax
c000f716:	74 0c                	je     c000f724 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f718:	b8 48 f8 01 c0       	mov    eax,0xc001f848
c000f71d:	e9 32 01 00 00       	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f722:	66 90                	xchg   ax,ax
c000f724:	83 ec 08             	sub    esp,0x8
c000f727:	68 34 22 02 c0       	push   0xc0022234
c000f72c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f730:	e8 4b 10 ff ff       	call   c0000780 <strcmp>
c000f735:	83 c4 10             	add    esp,0x10
c000f738:	85 c0                	test   eax,eax
c000f73a:	0f 94 c0             	sete   al
c000f73d:	0f b6 c0             	movzx  eax,al
c000f740:	85 c0                	test   eax,eax
c000f742:	74 0c                	je     c000f750 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f744:	b8 3a ec 00 c0       	mov    eax,0xc000ec3a
c000f749:	e9 06 01 00 00       	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f74e:	66 90                	xchg   ax,ax
c000f750:	83 ec 08             	sub    esp,0x8
c000f753:	68 47 22 02 c0       	push   0xc0022247
c000f758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f75c:	e8 1f 10 ff ff       	call   c0000780 <strcmp>
c000f761:	83 c4 10             	add    esp,0x10
c000f764:	85 c0                	test   eax,eax
c000f766:	0f 94 c0             	sete   al
c000f769:	0f b6 c0             	movzx  eax,al
c000f76c:	85 c0                	test   eax,eax
c000f76e:	74 0c                	je     c000f77c <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f770:	b8 a3 c5 00 c0       	mov    eax,0xc000c5a3
c000f775:	e9 da 00 00 00       	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f77a:	66 90                	xchg   ax,ax
c000f77c:	83 ec 08             	sub    esp,0x8
c000f77f:	68 64 22 02 c0       	push   0xc0022264
c000f784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f788:	e8 f3 0f ff ff       	call   c0000780 <strcmp>
c000f78d:	83 c4 10             	add    esp,0x10
c000f790:	85 c0                	test   eax,eax
c000f792:	0f 94 c0             	sete   al
c000f795:	0f b6 c0             	movzx  eax,al
c000f798:	85 c0                	test   eax,eax
c000f79a:	74 0c                	je     c000f7a8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f79c:	b8 14 fc 01 c0       	mov    eax,0xc001fc14
c000f7a1:	e9 ae 00 00 00       	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7a6:	66 90                	xchg   ax,ax
c000f7a8:	83 ec 08             	sub    esp,0x8
c000f7ab:	68 6e 22 02 c0       	push   0xc002226e
c000f7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7b4:	e8 c7 0f ff ff       	call   c0000780 <strcmp>
c000f7b9:	83 c4 10             	add    esp,0x10
c000f7bc:	85 c0                	test   eax,eax
c000f7be:	0f 94 c0             	sete   al
c000f7c1:	0f b6 c0             	movzx  eax,al
c000f7c4:	85 c0                	test   eax,eax
c000f7c6:	74 0c                	je     c000f7d4 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f7c8:	b8 94 f9 01 c0       	mov    eax,0xc001f994
c000f7cd:	e9 82 00 00 00       	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7d2:	66 90                	xchg   ax,ax
c000f7d4:	83 ec 08             	sub    esp,0x8
c000f7d7:	68 77 22 02 c0       	push   0xc0022277
c000f7dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7e0:	e8 9b 0f ff ff       	call   c0000780 <strcmp>
c000f7e5:	83 c4 10             	add    esp,0x10
c000f7e8:	85 c0                	test   eax,eax
c000f7ea:	0f 94 c0             	sete   al
c000f7ed:	0f b6 c0             	movzx  eax,al
c000f7f0:	85 c0                	test   eax,eax
c000f7f2:	74 08                	je     c000f7fc <KeResolveCompatibilitySymbol(char*)+0x160>
c000f7f4:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f7f9:	eb 59                	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7fb:	90                   	nop
c000f7fc:	83 ec 08             	sub    esp,0x8
c000f7ff:	68 8f 22 02 c0       	push   0xc002228f
c000f804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f808:	e8 73 0f ff ff       	call   c0000780 <strcmp>
c000f80d:	83 c4 10             	add    esp,0x10
c000f810:	85 c0                	test   eax,eax
c000f812:	0f 94 c0             	sete   al
c000f815:	0f b6 c0             	movzx  eax,al
c000f818:	85 c0                	test   eax,eax
c000f81a:	74 08                	je     c000f824 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f81c:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f821:	eb 31                	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f823:	90                   	nop
c000f824:	83 ec 08             	sub    esp,0x8
c000f827:	68 9c 22 02 c0       	push   0xc002229c
c000f82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f830:	e8 4b 0f ff ff       	call   c0000780 <strcmp>
c000f835:	83 c4 10             	add    esp,0x10
c000f838:	85 c0                	test   eax,eax
c000f83a:	0f 94 c0             	sete   al
c000f83d:	0f b6 c0             	movzx  eax,al
c000f840:	85 c0                	test   eax,eax
c000f842:	74 08                	je     c000f84c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f844:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f849:	eb 09                	jmp    c000f854 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f84b:	90                   	nop
c000f84c:	b8 00 00 00 00       	mov    eax,0x0
c000f851:	8d 76 00             	lea    esi,[esi+0x0]
c000f854:	83 c4 0c             	add    esp,0xc
c000f857:	c3                   	ret    

c000f858 <Semaphore::Semaphore(int)>:
c000f858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f85c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f860:	89 10                	mov    DWORD PTR [eax],edx
c000f862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f866:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f86d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f871:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f87c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f883:	90                   	nop
c000f884:	c3                   	ret    
c000f885:	90                   	nop
c000f886:	66 90                	xchg   ax,ax

c000f888 <Semaphore::tryAcquire()>:
c000f888:	83 ec 0c             	sub    esp,0xc
c000f88b:	fa                   	cli    
c000f88c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f891:	83 c0 01             	add    eax,0x1
c000f894:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f899:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f89e:	83 c0 01             	add    eax,0x1
c000f8a1:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8aa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b3:	39 c2                	cmp    edx,eax
c000f8b5:	7d 5d                	jge    c000f914 <Semaphore::tryAcquire()+0x8c>
c000f8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8be:	8d 50 01             	lea    edx,[eax+0x1]
c000f8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f8c8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8cd:	83 e8 01             	sub    eax,0x1
c000f8d0:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f8d5:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8da:	85 c0                	test   eax,eax
c000f8dc:	75 1a                	jne    c000f8f8 <Semaphore::tryAcquire()+0x70>
c000f8de:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f8e3:	85 c0                	test   eax,eax
c000f8e5:	74 11                	je     c000f8f8 <Semaphore::tryAcquire()+0x70>
c000f8e7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f8f1:	e8 da 5b 00 00       	call   c00154d0 <schedule()>
c000f8f6:	66 90                	xchg   ax,ax
c000f8f8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f8fd:	83 e8 01             	sub    eax,0x1
c000f900:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f905:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f90a:	85 c0                	test   eax,eax
c000f90c:	75 02                	jne    c000f910 <Semaphore::tryAcquire()+0x88>
c000f90e:	fb                   	sti    
c000f90f:	90                   	nop
c000f910:	b0 01                	mov    al,0x1
c000f912:	eb 4c                	jmp    c000f960 <Semaphore::tryAcquire()+0xd8>
c000f914:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f919:	83 e8 01             	sub    eax,0x1
c000f91c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f921:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f926:	85 c0                	test   eax,eax
c000f928:	75 1a                	jne    c000f944 <Semaphore::tryAcquire()+0xbc>
c000f92a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f92f:	85 c0                	test   eax,eax
c000f931:	74 11                	je     c000f944 <Semaphore::tryAcquire()+0xbc>
c000f933:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f93d:	e8 8e 5b 00 00       	call   c00154d0 <schedule()>
c000f942:	66 90                	xchg   ax,ax
c000f944:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f949:	83 e8 01             	sub    eax,0x1
c000f94c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f951:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f956:	85 c0                	test   eax,eax
c000f958:	75 02                	jne    c000f95c <Semaphore::tryAcquire()+0xd4>
c000f95a:	fb                   	sti    
c000f95b:	90                   	nop
c000f95c:	b0 00                	mov    al,0x0
c000f95e:	66 90                	xchg   ax,ax
c000f960:	83 c4 0c             	add    esp,0xc
c000f963:	c3                   	ret    

c000f964 <Semaphore::assertLocked(char const*)>:
c000f964:	83 ec 0c             	sub    esp,0xc
c000f967:	fa                   	cli    
c000f968:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f96d:	83 c0 01             	add    eax,0x1
c000f970:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f975:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f97a:	83 c0 01             	add    eax,0x1
c000f97d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f986:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98f:	39 c2                	cmp    edx,eax
c000f991:	7d 11                	jge    c000f9a4 <Semaphore::assertLocked(char const*)+0x40>
c000f993:	83 ec 0c             	sub    esp,0xc
c000f996:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f99a:	e8 9b f2 ff ff       	call   c000ec3a <KePanic(char const*)>
c000f99f:	83 c4 10             	add    esp,0x10
c000f9a2:	66 90                	xchg   ax,ax
c000f9a4:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9a9:	83 e8 01             	sub    eax,0x1
c000f9ac:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f9b1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9b6:	85 c0                	test   eax,eax
c000f9b8:	75 1a                	jne    c000f9d4 <Semaphore::assertLocked(char const*)+0x70>
c000f9ba:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f9bf:	85 c0                	test   eax,eax
c000f9c1:	74 11                	je     c000f9d4 <Semaphore::assertLocked(char const*)+0x70>
c000f9c3:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9cd:	e8 fe 5a 00 00       	call   c00154d0 <schedule()>
c000f9d2:	66 90                	xchg   ax,ax
c000f9d4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9d9:	83 e8 01             	sub    eax,0x1
c000f9dc:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f9e1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9e6:	85 c0                	test   eax,eax
c000f9e8:	75 02                	jne    c000f9ec <Semaphore::assertLocked(char const*)+0x88>
c000f9ea:	fb                   	sti    
c000f9eb:	90                   	nop
c000f9ec:	90                   	nop
c000f9ed:	83 c4 0c             	add    esp,0xc
c000f9f0:	c3                   	ret    
c000f9f1:	90                   	nop
c000f9f2:	66 90                	xchg   ax,ax

c000f9f4 <Semaphore::acquire(int)>:
c000f9f4:	83 ec 1c             	sub    esp,0x1c
c000f9f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000f9fc:	0f 84 9a 00 00 00    	je     c000fa9c <Semaphore::acquire(int)+0xa8>
c000fa02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa0a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000fa0f:	90                   	nop
c000fa10:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fa15:	85 c0                	test   eax,eax
c000fa17:	74 77                	je     c000fa90 <Semaphore::acquire(int)+0x9c>
c000fa19:	83 ec 0c             	sub    esp,0xc
c000fa1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa20:	e8 63 fe ff ff       	call   c000f888 <Semaphore::tryAcquire()>
c000fa25:	83 c4 10             	add    esp,0x10
c000fa28:	83 f0 01             	xor    eax,0x1
c000fa2b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fa2f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fa33:	83 f0 01             	xor    eax,0x1
c000fa36:	0f b6 c0             	movzx  eax,al
c000fa39:	85 c0                	test   eax,eax
c000fa3b:	75 4f                	jne    c000fa8c <Semaphore::acquire(int)+0x98>
c000fa3d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fa42:	7f 2c                	jg     c000fa70 <Semaphore::acquire(int)+0x7c>
c000fa44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa48:	89 d0                	mov    eax,edx
c000fa4a:	c1 e0 02             	shl    eax,0x2
c000fa4d:	01 d0                	add    eax,edx
c000fa4f:	d1 e0                	shl    eax,1
c000fa51:	83 ec 0c             	sub    esp,0xc
c000fa54:	50                   	push   eax
c000fa55:	e8 4e 5c 00 00       	call   c00156a8 <milliTenthSleep(unsigned int)>
c000fa5a:	83 c4 10             	add    esp,0x10
c000fa5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa61:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fa65:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fa6d:	eb a1                	jmp    c000fa10 <Semaphore::acquire(int)+0x1c>
c000fa6f:	90                   	nop
c000fa70:	83 ec 0c             	sub    esp,0xc
c000fa73:	68 90 01 00 00       	push   0x190
c000fa78:	e8 2b 5c 00 00       	call   c00156a8 <milliTenthSleep(unsigned int)>
c000fa7d:	83 c4 10             	add    esp,0x10
c000fa80:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fa85:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fa8a:	eb 84                	jmp    c000fa10 <Semaphore::acquire(int)+0x1c>
c000fa8c:	90                   	nop
c000fa8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa94:	e9 ff 00 00 00       	jmp    c000fb98 <Semaphore::acquire(int)+0x1a4>
c000fa99:	8d 76 00             	lea    esi,[esi+0x0]
c000fa9c:	fa                   	cli    
c000fa9d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000faa2:	83 c0 01             	add    eax,0x1
c000faa5:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000faaa:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000faaf:	83 c0 01             	add    eax,0x1
c000fab2:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fabb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fabe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fac4:	39 c2                	cmp    edx,eax
c000fac6:	7d 14                	jge    c000fadc <Semaphore::acquire(int)+0xe8>
c000fac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000facc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000facf:	8d 50 01             	lea    edx,[eax+0x1]
c000fad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fad9:	eb 6d                	jmp    c000fb48 <Semaphore::acquire(int)+0x154>
c000fadb:	90                   	nop
c000fadc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fae1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fae3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000faea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000faf1:	85 c0                	test   eax,eax
c000faf3:	75 13                	jne    c000fb08 <Semaphore::acquire(int)+0x114>
c000faf5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fafa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fafc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fb03:	eb 17                	jmp    c000fb1c <Semaphore::acquire(int)+0x128>
c000fb05:	8d 76 00             	lea    esi,[esi+0x0]
c000fb08:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fb0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb14:	8b 12                	mov    edx,DWORD PTR [edx]
c000fb16:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fb19:	8d 76 00             	lea    esi,[esi+0x0]
c000fb1c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb21:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb27:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fb2a:	83 ec 0c             	sub    esp,0xc
c000fb2d:	68 ac 22 02 c0       	push   0xc00222ac
c000fb32:	e8 17 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fb37:	83 c4 10             	add    esp,0x10
c000fb3a:	83 ec 0c             	sub    esp,0xc
c000fb3d:	6a 05                	push   0x5
c000fb3f:	e8 48 5a 00 00       	call   c001558c <blockTask(TaskState)>
c000fb44:	83 c4 10             	add    esp,0x10
c000fb47:	90                   	nop
c000fb48:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb4d:	83 e8 01             	sub    eax,0x1
c000fb50:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb55:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb5a:	85 c0                	test   eax,eax
c000fb5c:	75 1a                	jne    c000fb78 <Semaphore::acquire(int)+0x184>
c000fb5e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fb63:	85 c0                	test   eax,eax
c000fb65:	74 11                	je     c000fb78 <Semaphore::acquire(int)+0x184>
c000fb67:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fb71:	e8 5a 59 00 00       	call   c00154d0 <schedule()>
c000fb76:	66 90                	xchg   ax,ax
c000fb78:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb7d:	83 e8 01             	sub    eax,0x1
c000fb80:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fb85:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb8a:	85 c0                	test   eax,eax
c000fb8c:	75 02                	jne    c000fb90 <Semaphore::acquire(int)+0x19c>
c000fb8e:	fb                   	sti    
c000fb8f:	90                   	nop
c000fb90:	b8 00 00 00 00       	mov    eax,0x0
c000fb95:	8d 76 00             	lea    esi,[esi+0x0]
c000fb98:	83 c4 1c             	add    esp,0x1c
c000fb9b:	c3                   	ret    

c000fb9c <Semaphore::acquire()>:
c000fb9c:	83 ec 0c             	sub    esp,0xc
c000fb9f:	83 ec 08             	sub    esp,0x8
c000fba2:	6a 00                	push   0x0
c000fba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fba8:	e8 47 fe ff ff       	call   c000f9f4 <Semaphore::acquire(int)>
c000fbad:	83 c4 10             	add    esp,0x10
c000fbb0:	90                   	nop
c000fbb1:	83 c4 0c             	add    esp,0xc
c000fbb4:	c3                   	ret    
c000fbb5:	90                   	nop
c000fbb6:	66 90                	xchg   ax,ax

c000fbb8 <Semaphore::release()>:
c000fbb8:	83 ec 1c             	sub    esp,0x1c
c000fbbb:	fa                   	cli    
c000fbbc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fbc1:	83 c0 01             	add    eax,0x1
c000fbc4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fbc9:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbce:	83 c0 01             	add    eax,0x1
c000fbd1:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fbd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbdd:	85 c0                	test   eax,eax
c000fbdf:	74 2b                	je     c000fc0c <Semaphore::release()+0x54>
c000fbe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbe5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbe8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbf0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbfa:	83 ec 0c             	sub    esp,0xc
c000fbfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc01:	e8 b6 5b 00 00       	call   c00157bc <unblockTask(ThreadControlBlock*)>
c000fc06:	83 c4 10             	add    esp,0x10
c000fc09:	eb 15                	jmp    c000fc20 <Semaphore::release()+0x68>
c000fc0b:	90                   	nop
c000fc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc13:	8d 50 ff             	lea    edx,[eax-0x1]
c000fc16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc1a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc20:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc25:	83 e8 01             	sub    eax,0x1
c000fc28:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc2d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc32:	85 c0                	test   eax,eax
c000fc34:	75 1a                	jne    c000fc50 <Semaphore::release()+0x98>
c000fc36:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fc3b:	85 c0                	test   eax,eax
c000fc3d:	74 11                	je     c000fc50 <Semaphore::release()+0x98>
c000fc3f:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fc49:	e8 82 58 00 00       	call   c00154d0 <schedule()>
c000fc4e:	66 90                	xchg   ax,ax
c000fc50:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc55:	83 e8 01             	sub    eax,0x1
c000fc58:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fc5d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc62:	85 c0                	test   eax,eax
c000fc64:	75 02                	jne    c000fc68 <Semaphore::release()+0xb0>
c000fc66:	fb                   	sti    
c000fc67:	90                   	nop
c000fc68:	90                   	nop
c000fc69:	83 c4 1c             	add    esp,0x1c
c000fc6c:	c3                   	ret    

c000fc6d <KiSigKill(int)>:
c000fc6d:	83 ec 0c             	sub    esp,0xc
c000fc70:	6a 00                	push   0x0
c000fc72:	6a 00                	push   0x0
c000fc74:	6a ff                	push   0xffffffff
c000fc76:	6a 01                	push   0x1
c000fc78:	e8 d5 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc7d:	83 c4 1c             	add    esp,0x1c
c000fc80:	c3                   	ret    

c000fc81 <KiDefaultSignalHandlerIgnore(int)>:
c000fc81:	c3                   	ret    

c000fc82 <KiDefaultSignalHandlerPause(int)>:
c000fc82:	57                   	push   edi
c000fc83:	b9 07 00 00 00       	mov    ecx,0x7
c000fc88:	56                   	push   esi
c000fc89:	be 07 23 02 c0       	mov    esi,0xc0022307
c000fc8e:	83 ec 24             	sub    esp,0x24
c000fc91:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fc95:	fc                   	cld    
c000fc96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc98:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fc9c:	50                   	push   eax
c000fc9d:	6a 00                	push   0x0
c000fc9f:	6a 00                	push   0x0
c000fca1:	6a 27                	push   0x27
c000fca3:	e8 aa 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fca8:	83 c4 34             	add    esp,0x34
c000fcab:	5e                   	pop    esi
c000fcac:	5f                   	pop    edi
c000fcad:	c3                   	ret    

c000fcae <KiDefaultSignalHandlerResume(int)>:
c000fcae:	57                   	push   edi
c000fcaf:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fcb4:	56                   	push   esi
c000fcb5:	be 23 23 02 c0       	mov    esi,0xc0022323
c000fcba:	83 ec 24             	sub    esp,0x24
c000fcbd:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fcc1:	fc                   	cld    
c000fcc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcc4:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fcc8:	50                   	push   eax
c000fcc9:	6a 00                	push   0x0
c000fccb:	6a 00                	push   0x0
c000fccd:	6a 27                	push   0x27
c000fccf:	e8 7e 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fcd4:	83 c4 34             	add    esp,0x34
c000fcd7:	5e                   	pop    esi
c000fcd8:	5f                   	pop    edi
c000fcd9:	c3                   	ret    

c000fcda <KeDeinitSignals(SigHandlerBlock*)>:
c000fcda:	e9 17 ec ff ff       	jmp    c000e8f6 <free>

c000fcdf <KeInitSignals()>:
c000fcdf:	53                   	push   ebx
c000fce0:	83 ec 14             	sub    esp,0x14
c000fce3:	68 c8 00 00 00       	push   0xc8
c000fce8:	e8 f9 eb ff ff       	call   c000e8e6 <malloc>
c000fced:	83 c4 0c             	add    esp,0xc
c000fcf0:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fcfa:	89 c3                	mov    ebx,eax
c000fcfc:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fd06:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fd0c:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c000fd10:	6a 20                	push   0x20
c000fd12:	6a 00                	push   0x0
c000fd14:	50                   	push   eax
c000fd15:	e8 d6 07 ff ff       	call   c00004f0 <memset>
c000fd1a:	83 c4 0c             	add    esp,0xc
c000fd1d:	6a 44                	push   0x44
c000fd1f:	6a 00                	push   0x0
c000fd21:	53                   	push   ebx
c000fd22:	e8 c9 07 ff ff       	call   c00004f0 <memset>
c000fd27:	83 c4 18             	add    esp,0x18
c000fd2a:	89 d8                	mov    eax,ebx
c000fd2c:	5b                   	pop    ebx
c000fd2d:	c3                   	ret    

c000fd2e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fd2e:	53                   	push   ebx
c000fd2f:	b8 01 00 00 00       	mov    eax,0x1
c000fd34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd3c:	83 f9 10             	cmp    ecx,0x10
c000fd3f:	7f 21                	jg     c000fd62 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fd41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd45:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fd48:	89 03                	mov    DWORD PTR [ebx],eax
c000fd4a:	b8 01 00 00 00       	mov    eax,0x1
c000fd4f:	d3 e0                	shl    eax,cl
c000fd51:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fd55:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fd58:	31 c0                	xor    eax,eax
c000fd5a:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fd62:	5b                   	pop    ebx
c000fd63:	c3                   	ret    

c000fd64 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fd64:	55                   	push   ebp
c000fd65:	57                   	push   edi
c000fd66:	bf 08 00 00 00       	mov    edi,0x8
c000fd6b:	56                   	push   esi
c000fd6c:	53                   	push   ebx
c000fd6d:	83 ec 18             	sub    esp,0x18
c000fd70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd74:	68 40 23 02 c0       	push   0xc0022340
c000fd79:	e8 d0 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd7e:	83 c4 10             	add    esp,0x10
c000fd81:	31 c9                	xor    ecx,ecx
c000fd83:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fd8a:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fd90:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fd94:	99                   	cdq    
c000fd95:	f7 ff                	idiv   edi
c000fd97:	8d 42 24             	lea    eax,[edx+0x24]
c000fd9a:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fd9e:	85 f6                	test   esi,esi
c000fda0:	75 1a                	jne    c000fdbc <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fda2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fda6:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fdaa:	50                   	push   eax
c000fdab:	50                   	push   eax
c000fdac:	52                   	push   edx
c000fdad:	68 51 23 02 c0       	push   0xc0022351
c000fdb2:	e8 97 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	eb 1b                	jmp    c000fdd7 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fdbc:	41                   	inc    ecx
c000fdbd:	83 f9 08             	cmp    ecx,0x8
c000fdc0:	75 ce                	jne    c000fd90 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fdc2:	83 ec 0c             	sub    esp,0xc
c000fdc5:	be 01 00 00 00       	mov    esi,0x1
c000fdca:	68 72 23 02 c0       	push   0xc0022372
c000fdcf:	e8 7a 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdd4:	83 c4 10             	add    esp,0x10
c000fdd7:	83 c4 0c             	add    esp,0xc
c000fdda:	89 f0                	mov    eax,esi
c000fddc:	5b                   	pop    ebx
c000fddd:	5e                   	pop    esi
c000fdde:	5f                   	pop    edi
c000fddf:	5d                   	pop    ebp
c000fde0:	c3                   	ret    

c000fde1 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fde1:	55                   	push   ebp
c000fde2:	57                   	push   edi
c000fde3:	56                   	push   esi
c000fde4:	53                   	push   ebx
c000fde5:	51                   	push   ecx
c000fde6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fdea:	85 db                	test   ebx,ebx
c000fdec:	0f 84 bc 00 00 00    	je     c000feae <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdf2:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fdf9:	0f 84 af 00 00 00    	je     c000feae <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdff:	31 c9                	xor    ecx,ecx
c000fe01:	bf 08 00 00 00       	mov    edi,0x8
c000fe06:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fe0c:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fe0f:	99                   	cdq    
c000fe10:	f7 ff                	idiv   edi
c000fe12:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fe19:	85 ed                	test   ebp,ebp
c000fe1b:	0f 84 9e 00 00 00    	je     c000febf <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fe21:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fe27:	89 e9                	mov    ecx,ebp
c000fe29:	bf 01 00 00 00       	mov    edi,0x1
c000fe2e:	d3 e7                	shl    edi,cl
c000fe30:	31 c9                	xor    ecx,ecx
c000fe32:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe35:	b8 01 00 00 00       	mov    eax,0x1
c000fe3a:	d3 e0                	shl    eax,cl
c000fe3c:	85 04 24             	test   DWORD PTR [esp],eax
c000fe3f:	74 06                	je     c000fe47 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fe41:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fe45:	75 67                	jne    c000feae <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe47:	41                   	inc    ecx
c000fe48:	83 f9 11             	cmp    ecx,0x11
c000fe4b:	75 e8                	jne    c000fe35 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fe4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe50:	46                   	inc    esi
c000fe51:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe57:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000fe62:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000fe69:	09 f8                	or     eax,edi
c000fe6b:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000fe71:	31 c0                	xor    eax,eax
c000fe73:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000fe7b:	74 09                	je     c000fe86 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000fe7d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe84:	eb 06                	jmp    c000fe8c <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000fe86:	40                   	inc    eax
c000fe87:	83 f8 08             	cmp    eax,0x8
c000fe8a:	75 e7                	jne    c000fe73 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000fe8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fe90:	83 fd 09             	cmp    ebp,0x9
c000fe93:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000fe96:	89 2a                	mov    DWORD PTR [edx],ebp
c000fe98:	75 07                	jne    c000fea1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000fe9a:	b8 6d fc 00 c0       	mov    eax,0xc000fc6d
c000fe9f:	eb 31                	jmp    c000fed2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fea1:	83 f8 01             	cmp    eax,0x1
c000fea4:	75 0c                	jne    c000feb2 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000fea6:	f7 d7                	not    edi
c000fea8:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000feae:	31 c0                	xor    eax,eax
c000feb0:	eb 20                	jmp    c000fed2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000feb2:	85 c0                	test   eax,eax
c000feb4:	75 1c                	jne    c000fed2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000feb6:	8b 04 ad a0 40 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdbf60]
c000febd:	eb 13                	jmp    c000fed2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000febf:	41                   	inc    ecx
c000fec0:	46                   	inc    esi
c000fec1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fec7:	83 f9 08             	cmp    ecx,0x8
c000feca:	0f 85 36 ff ff ff    	jne    c000fe06 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000fed0:	eb dc                	jmp    c000feae <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fed2:	5a                   	pop    edx
c000fed3:	5b                   	pop    ebx
c000fed4:	5e                   	pop    esi
c000fed5:	5f                   	pop    edi
c000fed6:	5d                   	pop    ebp
c000fed7:	c3                   	ret    

c000fed8 <KiCheckSignalZ>:
c000fed8:	83 ec 10             	sub    esp,0x10
c000fedb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fedf:	50                   	push   eax
c000fee0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fee5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fee8:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000feee:	e8 ee fe ff ff       	call   c000fde1 <KeCheckSignal(SigHandlerBlock*, int*)>
c000fef3:	5a                   	pop    edx
c000fef4:	31 d2                	xor    edx,edx
c000fef6:	59                   	pop    ecx
c000fef7:	85 c0                	test   eax,eax
c000fef9:	74 19                	je     c000ff14 <KiCheckSignalZ+0x3c>
c000fefb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ff01:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ff04:	89 02                	mov    DWORD PTR [edx],eax
c000ff06:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000ff0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff11:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000ff14:	89 d0                	mov    eax,edx
c000ff16:	83 c4 10             	add    esp,0x10
c000ff19:	c3                   	ret    

c000ff1a <KeCompleteSignal(SigHandlerBlock*, int)>:
c000ff1a:	56                   	push   esi
c000ff1b:	53                   	push   ebx
c000ff1c:	bb 01 00 00 00       	mov    ebx,0x1
c000ff21:	52                   	push   edx
c000ff22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ff26:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff2a:	d3 e3                	shl    ebx,cl
c000ff2c:	83 f9 10             	cmp    ecx,0x10
c000ff2f:	7f 08                	jg     c000ff39 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ff31:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ff37:	75 10                	jne    c000ff49 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ff39:	83 ec 0c             	sub    esp,0xc
c000ff3c:	68 83 23 02 c0       	push   0xc0022383
c000ff41:	e8 f4 ec ff ff       	call   c000ec3a <KePanic(char const*)>
c000ff46:	83 c4 10             	add    esp,0x10
c000ff49:	f7 d3                	not    ebx
c000ff4b:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ff51:	58                   	pop    eax
c000ff52:	5b                   	pop    ebx
c000ff53:	5e                   	pop    esi
c000ff54:	c3                   	ret    

c000ff55 <KiFinishSignalZ>:
c000ff55:	53                   	push   ebx
c000ff56:	83 ec 10             	sub    esp,0x10
c000ff59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff5d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000ff60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff68:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff6e:	e8 a7 ff ff ff       	call   c000ff1a <KeCompleteSignal(SigHandlerBlock*, int)>
c000ff73:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ff79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ff80:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ff87:	83 c4 18             	add    esp,0x18
c000ff8a:	5b                   	pop    ebx
c000ff8b:	c3                   	ret    

c000ff8c <SysSeekDir(regs*)>:
c000ff8c:	31 c0                	xor    eax,eax
c000ff8e:	31 d2                	xor    edx,edx
c000ff90:	c3                   	ret    

c000ff91 <SysTellDir(regs*)>:
c000ff91:	31 c0                	xor    eax,eax
c000ff93:	31 d2                	xor    edx,edx
c000ff95:	c3                   	ret    

c000ff96 <SysVerify(regs*)>:
c000ff96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff9a:	31 d2                	xor    edx,edx
c000ff9c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ff9f:	c3                   	ret    

c000ffa0 <SysGetArgc(regs*)>:
c000ffa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffa8:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c000ffae:	89 c2                	mov    edx,eax
c000ffb0:	c1 fa 1f             	sar    edx,0x1f
c000ffb3:	c3                   	ret    

c000ffb4 <SysTTYName(regs*)>:
c000ffb4:	b8 01 00 00 00       	mov    eax,0x1
c000ffb9:	31 d2                	xor    edx,edx
c000ffbb:	c3                   	ret    

c000ffbc <SysFormatDisk(regs*)>:
c000ffbc:	56                   	push   esi
c000ffbd:	53                   	push   ebx
c000ffbe:	83 ec 04             	sub    esp,0x4
c000ffc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffc5:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000ffcb:	eb 2a                	jmp    c000fff7 <SysFormatDisk(regs*)+0x3b>
c000ffcd:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c000ffd0:	83 ec 0c             	sub    esp,0xc
c000ffd3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ffd6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ffd8:	51                   	push   ecx
c000ffd9:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c000ffdc:	51                   	push   ecx
c000ffdd:	50                   	push   eax
c000ffde:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000ffe5:	50                   	push   eax
c000ffe6:	53                   	push   ebx
c000ffe7:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c000ffea:	83 c4 20             	add    esp,0x20
c000ffed:	83 f8 08             	cmp    eax,0x8
c000fff0:	89 c1                	mov    ecx,eax
c000fff2:	75 14                	jne    c0010008 <SysFormatDisk(regs*)+0x4c>
c000fff4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000fff7:	85 db                	test   ebx,ebx
c000fff9:	75 d2                	jne    c000ffcd <SysFormatDisk(regs*)+0x11>
c000fffb:	b8 03 00 00 00       	mov    eax,0x3
c0010000:	31 d2                	xor    edx,edx
c0010002:	83 c4 04             	add    esp,0x4
c0010005:	5b                   	pop    ebx
c0010006:	5e                   	pop    esi
c0010007:	c3                   	ret    
c0010008:	85 c0                	test   eax,eax
c001000a:	74 13                	je     c001001f <SysFormatDisk(regs*)+0x63>
c001000c:	31 d2                	xor    edx,edx
c001000e:	83 f9 09             	cmp    ecx,0x9
c0010011:	b8 01 00 00 00       	mov    eax,0x1
c0010016:	74 ea                	je     c0010002 <SysFormatDisk(regs*)+0x46>
c0010018:	b8 02 00 00 00       	mov    eax,0x2
c001001d:	eb e1                	jmp    c0010000 <SysFormatDisk(regs*)+0x44>
c001001f:	31 c0                	xor    eax,eax
c0010021:	eb dd                	jmp    c0010000 <SysFormatDisk(regs*)+0x44>

c0010023 <SysSetDiskVolumeLabel(regs*)>:
c0010023:	56                   	push   esi
c0010024:	53                   	push   ebx
c0010025:	83 ec 04             	sub    esp,0x4
c0010028:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001002c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001002f:	83 f8 19             	cmp    eax,0x19
c0010032:	77 33                	ja     c0010067 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010034:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001003b:	85 c9                	test   ecx,ecx
c001003d:	74 28                	je     c0010067 <SysSetDiskVolumeLabel(regs*)+0x44>
c001003f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010042:	85 db                	test   ebx,ebx
c0010044:	74 21                	je     c0010067 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010046:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001004c:	85 d2                	test   edx,edx
c001004e:	74 17                	je     c0010067 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010050:	8b 32                	mov    esi,DWORD PTR [edx]
c0010052:	53                   	push   ebx
c0010053:	50                   	push   eax
c0010054:	51                   	push   ecx
c0010055:	52                   	push   edx
c0010056:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010059:	83 c4 10             	add    esp,0x10
c001005c:	83 c4 04             	add    esp,0x4
c001005f:	5b                   	pop    ebx
c0010060:	5e                   	pop    esi
c0010061:	89 c2                	mov    edx,eax
c0010063:	c1 fa 1f             	sar    edx,0x1f
c0010066:	c3                   	ret    
c0010067:	83 c4 04             	add    esp,0x4
c001006a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001006f:	5b                   	pop    ebx
c0010070:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010075:	5e                   	pop    esi
c0010076:	c3                   	ret    

c0010077 <SysGetDiskVolumeLabel(regs*)>:
c0010077:	57                   	push   edi
c0010078:	56                   	push   esi
c0010079:	53                   	push   ebx
c001007a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001007e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010081:	83 fa 19             	cmp    edx,0x19
c0010084:	77 3c                	ja     c00100c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010086:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c001008d:	85 c9                	test   ecx,ecx
c001008f:	74 31                	je     c00100c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010091:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010094:	85 db                	test   ebx,ebx
c0010096:	74 2a                	je     c00100c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010098:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001009b:	85 f6                	test   esi,esi
c001009d:	74 23                	je     c00100c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001009f:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00100a5:	85 c0                	test   eax,eax
c00100a7:	74 19                	je     c00100c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00100a9:	83 ec 0c             	sub    esp,0xc
c00100ac:	8b 38                	mov    edi,DWORD PTR [eax]
c00100ae:	56                   	push   esi
c00100af:	53                   	push   ebx
c00100b0:	52                   	push   edx
c00100b1:	51                   	push   ecx
c00100b2:	50                   	push   eax
c00100b3:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00100b6:	83 c4 20             	add    esp,0x20
c00100b9:	5b                   	pop    ebx
c00100ba:	5e                   	pop    esi
c00100bb:	89 c2                	mov    edx,eax
c00100bd:	c1 fa 1f             	sar    edx,0x1f
c00100c0:	5f                   	pop    edi
c00100c1:	c3                   	ret    
c00100c2:	5b                   	pop    ebx
c00100c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00100c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00100cd:	5e                   	pop    esi
c00100ce:	5f                   	pop    edi
c00100cf:	c3                   	ret    

c00100d0 <SysShutdown(regs*)>:
c00100d0:	57                   	push   edi
c00100d1:	56                   	push   esi
c00100d2:	83 ec 04             	sub    esp,0x4
c00100d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00100dc:	85 c0                	test   eax,eax
c00100de:	74 1e                	je     c00100fe <SysShutdown(regs*)+0x2e>
c00100e0:	83 f8 01             	cmp    eax,0x1
c00100e3:	74 5f                	je     c0010144 <SysShutdown(regs*)+0x74>
c00100e5:	83 f8 02             	cmp    eax,0x2
c00100e8:	be ff ff ff ff       	mov    esi,0xffffffff
c00100ed:	bf ff ff ff ff       	mov    edi,0xffffffff
c00100f2:	74 32                	je     c0010126 <SysShutdown(regs*)+0x56>
c00100f4:	83 c4 04             	add    esp,0x4
c00100f7:	89 f0                	mov    eax,esi
c00100f9:	5e                   	pop    esi
c00100fa:	89 fa                	mov    edx,edi
c00100fc:	5f                   	pop    edi
c00100fd:	c3                   	ret    
c00100fe:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010103:	be ff ff ff ff       	mov    esi,0xffffffff
c0010108:	bf ff ff ff ff       	mov    edi,0xffffffff
c001010d:	8b 10                	mov    edx,DWORD PTR [eax]
c001010f:	6a 00                	push   0x0
c0010111:	6a 00                	push   0x0
c0010113:	6a 00                	push   0x0
c0010115:	50                   	push   eax
c0010116:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010119:	83 c4 10             	add    esp,0x10
c001011c:	89 f0                	mov    eax,esi
c001011e:	83 c4 04             	add    esp,0x4
c0010121:	89 fa                	mov    edx,edi
c0010123:	5e                   	pop    esi
c0010124:	5f                   	pop    edi
c0010125:	c3                   	ret    
c0010126:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001012b:	8b 10                	mov    edx,DWORD PTR [eax]
c001012d:	6a 00                	push   0x0
c001012f:	6a 00                	push   0x0
c0010131:	6a 01                	push   0x1
c0010133:	50                   	push   eax
c0010134:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010137:	83 c4 10             	add    esp,0x10
c001013a:	89 f0                	mov    eax,esi
c001013c:	83 c4 04             	add    esp,0x4
c001013f:	89 fa                	mov    edx,edi
c0010141:	5e                   	pop    esi
c0010142:	5f                   	pop    edi
c0010143:	c3                   	ret    
c0010144:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c0010149:	85 c0                	test   eax,eax
c001014b:	74 02                	je     c001014f <SysShutdown(regs*)+0x7f>
c001014d:	ff d0                	call   eax
c001014f:	31 f6                	xor    esi,esi
c0010151:	83 c4 04             	add    esp,0x4
c0010154:	89 f0                	mov    eax,esi
c0010156:	31 ff                	xor    edi,edi
c0010158:	5e                   	pop    esi
c0010159:	89 fa                	mov    edx,edi
c001015b:	5f                   	pop    edi
c001015c:	c3                   	ret    

c001015d <SysRealpath(regs*)>:
c001015d:	53                   	push   ebx
c001015e:	83 ec 08             	sub    esp,0x8
c0010161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010165:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0010168:	85 c9                	test   ecx,ecx
c001016a:	74 36                	je     c00101a2 <SysRealpath(regs*)+0x45>
c001016c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001016f:	31 d2                	xor    edx,edx
c0010171:	b8 01 00 00 00       	mov    eax,0x1
c0010176:	85 db                	test   ebx,ebx
c0010178:	75 05                	jne    c001017f <SysRealpath(regs*)+0x22>
c001017a:	83 c4 08             	add    esp,0x8
c001017d:	5b                   	pop    ebx
c001017e:	c3                   	ret    
c001017f:	6a 00                	push   0x0
c0010181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010186:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010189:	05 0c 01 00 00       	add    eax,0x10c
c001018e:	50                   	push   eax
c001018f:	51                   	push   ecx
c0010190:	53                   	push   ebx
c0010191:	e8 6a 7c ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010196:	83 c4 10             	add    esp,0x10
c0010199:	31 c0                	xor    eax,eax
c001019b:	31 d2                	xor    edx,edx
c001019d:	83 c4 08             	add    esp,0x8
c00101a0:	5b                   	pop    ebx
c00101a1:	c3                   	ret    
c00101a2:	b8 01 00 00 00       	mov    eax,0x1
c00101a7:	31 d2                	xor    edx,edx
c00101a9:	eb f2                	jmp    c001019d <SysRealpath(regs*)+0x40>

c00101ab <SysReadDir(regs*)>:
c00101ab:	53                   	push   ebx
c00101ac:	83 ec 18             	sub    esp,0x18
c00101af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101b3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00101b6:	83 f8 02             	cmp    eax,0x2
c00101b9:	76 4f                	jbe    c001020a <SysReadDir(regs*)+0x5f>
c00101bb:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00101c2:	77 52                	ja     c0010216 <SysReadDir(regs*)+0x6b>
c00101c4:	83 ec 0c             	sub    esp,0xc
c00101c7:	50                   	push   eax
c00101c8:	e8 ba 1c 00 00       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c00101cd:	83 c4 10             	add    esp,0x10
c00101d0:	85 c0                	test   eax,eax
c00101d2:	74 42                	je     c0010216 <SysReadDir(regs*)+0x6b>
c00101d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00101dc:	83 ec 0c             	sub    esp,0xc
c00101df:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00101e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00101e5:	51                   	push   ecx
c00101e6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00101e9:	51                   	push   ecx
c00101ea:	6a 00                	push   0x0
c00101ec:	68 10 01 00 00       	push   0x110
c00101f1:	50                   	push   eax
c00101f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00101f5:	83 c4 20             	add    esp,0x20
c00101f8:	85 c0                	test   eax,eax
c00101fa:	89 c1                	mov    ecx,eax
c00101fc:	74 27                	je     c0010225 <SysReadDir(regs*)+0x7a>
c00101fe:	31 d2                	xor    edx,edx
c0010200:	83 f9 07             	cmp    ecx,0x7
c0010203:	b8 02 00 00 00       	mov    eax,0x2
c0010208:	75 16                	jne    c0010220 <SysReadDir(regs*)+0x75>
c001020a:	b8 01 00 00 00       	mov    eax,0x1
c001020f:	31 d2                	xor    edx,edx
c0010211:	83 c4 18             	add    esp,0x18
c0010214:	5b                   	pop    ebx
c0010215:	c3                   	ret    
c0010216:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001021b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010220:	83 c4 18             	add    esp,0x18
c0010223:	5b                   	pop    ebx
c0010224:	c3                   	ret    
c0010225:	31 c0                	xor    eax,eax
c0010227:	31 d2                	xor    edx,edx
c0010229:	eb e6                	jmp    c0010211 <SysReadDir(regs*)+0x66>

c001022b <SysIsATTY(regs*)>:
c001022b:	83 ec 0c             	sub    esp,0xc
c001022e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010232:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010235:	83 f8 02             	cmp    eax,0x2
c0010238:	76 07                	jbe    c0010241 <SysIsATTY(regs*)+0x16>
c001023a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001023f:	75 26                	jne    c0010267 <SysIsATTY(regs*)+0x3c>
c0010241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010246:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010249:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001024f:	85 c0                	test   eax,eax
c0010251:	74 24                	je     c0010277 <SysIsATTY(regs*)+0x4c>
c0010253:	8b 10                	mov    edx,DWORD PTR [eax]
c0010255:	83 ec 0c             	sub    esp,0xc
c0010258:	50                   	push   eax
c0010259:	ff 12                	call   DWORD PTR [edx]
c001025b:	83 c4 10             	add    esp,0x10
c001025e:	31 d2                	xor    edx,edx
c0010260:	83 c4 0c             	add    esp,0xc
c0010263:	0f b6 c0             	movzx  eax,al
c0010266:	c3                   	ret    
c0010267:	83 ec 0c             	sub    esp,0xc
c001026a:	50                   	push   eax
c001026b:	e8 17 1c 00 00       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c0010270:	83 c4 10             	add    esp,0x10
c0010273:	85 c0                	test   eax,eax
c0010275:	75 dc                	jne    c0010253 <SysIsATTY(regs*)+0x28>
c0010277:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001027c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010281:	83 c4 0c             	add    esp,0xc
c0010284:	c3                   	ret    

c0010285 <SysSeek(regs*)>:
c0010285:	56                   	push   esi
c0010286:	53                   	push   ebx
c0010287:	83 ec 04             	sub    esp,0x4
c001028a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001028e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010291:	8d 71 fd             	lea    esi,[ecx-0x3]
c0010294:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c001029a:	77 33                	ja     c00102cf <SysSeek(regs*)+0x4a>
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	51                   	push   ecx
c00102a0:	e8 e2 1b 00 00       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c00102a5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00102a8:	83 c4 0c             	add    esp,0xc
c00102ab:	31 db                	xor    ebx,ebx
c00102ad:	53                   	push   ebx
c00102ae:	51                   	push   ecx
c00102af:	50                   	push   eax
c00102b0:	e8 33 7f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00102b5:	83 c4 10             	add    esp,0x10
c00102b8:	85 c0                	test   eax,eax
c00102ba:	0f 95 c0             	setne  al
c00102bd:	31 d2                	xor    edx,edx
c00102bf:	0f b6 c0             	movzx  eax,al
c00102c2:	f7 d8                	neg    eax
c00102c4:	83 d2 00             	adc    edx,0x0
c00102c7:	83 c4 04             	add    esp,0x4
c00102ca:	5b                   	pop    ebx
c00102cb:	f7 da                	neg    edx
c00102cd:	5e                   	pop    esi
c00102ce:	c3                   	ret    
c00102cf:	83 c4 04             	add    esp,0x4
c00102d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102d7:	5b                   	pop    ebx
c00102d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102dd:	5e                   	pop    esi
c00102de:	c3                   	ret    

c00102df <SysTell(regs*)>:
c00102df:	53                   	push   ebx
c00102e0:	83 ec 08             	sub    esp,0x8
c00102e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102ea:	83 f8 02             	cmp    eax,0x2
c00102ed:	76 4e                	jbe    c001033d <SysTell(regs*)+0x5e>
c00102ef:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102f4:	76 19                	jbe    c001030f <SysTell(regs*)+0x30>
c00102f6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102f9:	31 d2                	xor    edx,edx
c00102fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010301:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010308:	83 c4 08             	add    esp,0x8
c001030b:	31 c0                	xor    eax,eax
c001030d:	5b                   	pop    ebx
c001030e:	c3                   	ret    
c001030f:	83 ec 0c             	sub    esp,0xc
c0010312:	50                   	push   eax
c0010313:	e8 6f 1b 00 00       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c0010318:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001031b:	5a                   	pop    edx
c001031c:	59                   	pop    ecx
c001031d:	53                   	push   ebx
c001031e:	50                   	push   eax
c001031f:	e8 70 7f ff ff       	call   c0008294 <File::tell(unsigned long long*)>
c0010324:	83 c4 10             	add    esp,0x10
c0010327:	85 c0                	test   eax,eax
c0010329:	0f 95 c0             	setne  al
c001032c:	31 d2                	xor    edx,edx
c001032e:	0f b6 c0             	movzx  eax,al
c0010331:	f7 d8                	neg    eax
c0010333:	83 d2 00             	adc    edx,0x0
c0010336:	83 c4 08             	add    esp,0x8
c0010339:	5b                   	pop    ebx
c001033a:	f7 da                	neg    edx
c001033c:	c3                   	ret    
c001033d:	83 c4 08             	add    esp,0x8
c0010340:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010345:	5b                   	pop    ebx
c0010346:	ba ff ff ff ff       	mov    edx,0xffffffff
c001034b:	c3                   	ret    

c001034c <SysSize(regs*)>:
c001034c:	53                   	push   ebx
c001034d:	83 ec 18             	sub    esp,0x18
c0010350:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010354:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010357:	83 f8 02             	cmp    eax,0x2
c001035a:	76 54                	jbe    c00103b0 <SysSize(regs*)+0x64>
c001035c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010361:	76 19                	jbe    c001037c <SysSize(regs*)+0x30>
c0010363:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010366:	31 d2                	xor    edx,edx
c0010368:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001036e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010375:	83 c4 18             	add    esp,0x18
c0010378:	31 c0                	xor    eax,eax
c001037a:	5b                   	pop    ebx
c001037b:	c3                   	ret    
c001037c:	83 ec 0c             	sub    esp,0xc
c001037f:	50                   	push   eax
c0010380:	e8 02 1b 00 00       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c0010385:	83 c4 0c             	add    esp,0xc
c0010388:	8d 54 24 13          	lea    edx,[esp+0x13]
c001038c:	52                   	push   edx
c001038d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010390:	52                   	push   edx
c0010391:	50                   	push   eax
c0010392:	e8 95 80 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	85 c0                	test   eax,eax
c001039c:	0f 95 c0             	setne  al
c001039f:	31 d2                	xor    edx,edx
c00103a1:	0f b6 c0             	movzx  eax,al
c00103a4:	f7 d8                	neg    eax
c00103a6:	83 d2 00             	adc    edx,0x0
c00103a9:	83 c4 18             	add    esp,0x18
c00103ac:	5b                   	pop    ebx
c00103ad:	f7 da                	neg    edx
c00103af:	c3                   	ret    
c00103b0:	83 c4 18             	add    esp,0x18
c00103b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103b8:	5b                   	pop    ebx
c00103b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103be:	c3                   	ret    

c00103bf <SysSizeFromFilename(regs*)>:
c00103bf:	55                   	push   ebp
c00103c0:	57                   	push   edi
c00103c1:	56                   	push   esi
c00103c2:	53                   	push   ebx
c00103c3:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00103c9:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00103d0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00103d3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00103d6:	85 f6                	test   esi,esi
c00103d8:	89 f8                	mov    eax,edi
c00103da:	74 09                	je     c00103e5 <SysSizeFromFilename(regs*)+0x26>
c00103dc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00103e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103e5:	83 f8 02             	cmp    eax,0x2
c00103e8:	0f 86 ca 00 00 00    	jbe    c00104b8 <SysSizeFromFilename(regs*)+0xf9>
c00103ee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103f3:	76 1f                	jbe    c0010414 <SysSizeFromFilename(regs*)+0x55>
c00103f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103f8:	31 d2                	xor    edx,edx
c00103fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010400:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010407:	31 c0                	xor    eax,eax
c0010409:	81 c4 4c 02 00 00    	add    esp,0x24c
c001040f:	5b                   	pop    ebx
c0010410:	5e                   	pop    esi
c0010411:	5f                   	pop    edi
c0010412:	5d                   	pop    ebp
c0010413:	c3                   	ret    
c0010414:	83 ec 0c             	sub    esp,0xc
c0010417:	68 14 01 00 00       	push   0x114
c001041c:	e8 c5 e4 ff ff       	call   c000e8e6 <malloc>
c0010421:	6a 01                	push   0x1
c0010423:	89 c5                	mov    ebp,eax
c0010425:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001042a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001042d:	51                   	push   ecx
c001042e:	57                   	push   edi
c001042f:	55                   	push   ebp
c0010430:	e8 f9 7b ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010435:	83 c4 1c             	add    esp,0x1c
c0010438:	8d 44 24 13          	lea    eax,[esp+0x13]
c001043c:	50                   	push   eax
c001043d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010440:	53                   	push   ebx
c0010441:	55                   	push   ebp
c0010442:	e8 e5 7f ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0010447:	83 c4 10             	add    esp,0x10
c001044a:	85 ed                	test   ebp,ebp
c001044c:	89 c3                	mov    ebx,eax
c001044e:	74 0d                	je     c001045d <SysSizeFromFilename(regs*)+0x9e>
c0010450:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010453:	83 ec 0c             	sub    esp,0xc
c0010456:	55                   	push   ebp
c0010457:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001045a:	83 c4 10             	add    esp,0x10
c001045d:	85 db                	test   ebx,ebx
c001045f:	75 57                	jne    c00104b8 <SysSizeFromFilename(regs*)+0xf9>
c0010461:	6a 00                	push   0x0
c0010463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010468:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001046b:	05 0c 01 00 00       	add    eax,0x10c
c0010470:	50                   	push   eax
c0010471:	57                   	push   edi
c0010472:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010479:	53                   	push   ebx
c001047a:	e8 81 79 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001047f:	58                   	pop    eax
c0010480:	5a                   	pop    edx
c0010481:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010485:	50                   	push   eax
c0010486:	53                   	push   ebx
c0010487:	e8 fb 73 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c001048c:	83 c4 10             	add    esp,0x10
c001048f:	ba 00 00 00 00       	mov    edx,0x0
c0010494:	83 f8 01             	cmp    eax,0x1
c0010497:	b8 00 00 00 00       	mov    eax,0x0
c001049c:	74 2f                	je     c00104cd <SysSizeFromFilename(regs*)+0x10e>
c001049e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00104a3:	74 3b                	je     c00104e0 <SysSizeFromFilename(regs*)+0x121>
c00104a5:	85 f6                	test   esi,esi
c00104a7:	0f 84 5c ff ff ff    	je     c0010409 <SysSizeFromFilename(regs*)+0x4a>
c00104ad:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00104b3:	e9 51 ff ff ff       	jmp    c0010409 <SysSizeFromFilename(regs*)+0x4a>
c00104b8:	81 c4 4c 02 00 00    	add    esp,0x24c
c00104be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104c3:	5b                   	pop    ebx
c00104c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104c9:	5e                   	pop    esi
c00104ca:	5f                   	pop    edi
c00104cb:	5d                   	pop    ebp
c00104cc:	c3                   	ret    
c00104cd:	85 f6                	test   esi,esi
c00104cf:	0f 84 34 ff ff ff    	je     c0010409 <SysSizeFromFilename(regs*)+0x4a>
c00104d5:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00104db:	e9 29 ff ff ff       	jmp    c0010409 <SysSizeFromFilename(regs*)+0x4a>
c00104e0:	85 f6                	test   esi,esi
c00104e2:	0f 84 21 ff ff ff    	je     c0010409 <SysSizeFromFilename(regs*)+0x4a>
c00104e8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00104ee:	e9 16 ff ff ff       	jmp    c0010409 <SysSizeFromFilename(regs*)+0x4a>

c00104f3 <SysSizeFromFilenameNoSymlink(regs*)>:
c00104f3:	55                   	push   ebp
c00104f4:	57                   	push   edi
c00104f5:	56                   	push   esi
c00104f6:	53                   	push   ebx
c00104f7:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00104fd:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010504:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010507:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001050a:	85 f6                	test   esi,esi
c001050c:	89 f8                	mov    eax,edi
c001050e:	74 09                	je     c0010519 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0010510:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010516:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010519:	83 f8 02             	cmp    eax,0x2
c001051c:	0f 86 ca 00 00 00    	jbe    c00105ec <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0010522:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010527:	76 1f                	jbe    c0010548 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0010529:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001052c:	31 d2                	xor    edx,edx
c001052e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010534:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001053b:	31 c0                	xor    eax,eax
c001053d:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010543:	5b                   	pop    ebx
c0010544:	5e                   	pop    esi
c0010545:	5f                   	pop    edi
c0010546:	5d                   	pop    ebp
c0010547:	c3                   	ret    
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	68 14 01 00 00       	push   0x114
c0010550:	e8 91 e3 ff ff       	call   c000e8e6 <malloc>
c0010555:	6a 00                	push   0x0
c0010557:	89 c5                	mov    ebp,eax
c0010559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001055e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010561:	51                   	push   ecx
c0010562:	57                   	push   edi
c0010563:	55                   	push   ebp
c0010564:	e8 c5 7a ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010569:	83 c4 1c             	add    esp,0x1c
c001056c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010570:	50                   	push   eax
c0010571:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010574:	53                   	push   ebx
c0010575:	55                   	push   ebp
c0010576:	e8 b1 7e ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	85 ed                	test   ebp,ebp
c0010580:	89 c3                	mov    ebx,eax
c0010582:	74 0d                	je     c0010591 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0010584:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	55                   	push   ebp
c001058b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001058e:	83 c4 10             	add    esp,0x10
c0010591:	85 db                	test   ebx,ebx
c0010593:	75 57                	jne    c00105ec <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0010595:	6a 00                	push   0x0
c0010597:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001059c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001059f:	05 0c 01 00 00       	add    eax,0x10c
c00105a4:	50                   	push   eax
c00105a5:	57                   	push   edi
c00105a6:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00105ad:	53                   	push   ebx
c00105ae:	e8 4d 78 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00105b3:	58                   	pop    eax
c00105b4:	5a                   	pop    edx
c00105b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00105b9:	50                   	push   eax
c00105ba:	53                   	push   ebx
c00105bb:	e8 c7 72 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00105c0:	83 c4 10             	add    esp,0x10
c00105c3:	ba 00 00 00 00       	mov    edx,0x0
c00105c8:	83 f8 01             	cmp    eax,0x1
c00105cb:	b8 00 00 00 00       	mov    eax,0x0
c00105d0:	74 2f                	je     c0010601 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00105d2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00105d7:	74 3b                	je     c0010614 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00105d9:	85 f6                	test   esi,esi
c00105db:	0f 84 5c ff ff ff    	je     c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00105e1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00105e7:	e9 51 ff ff ff       	jmp    c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00105ec:	81 c4 4c 02 00 00    	add    esp,0x24c
c00105f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105f7:	5b                   	pop    ebx
c00105f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105fd:	5e                   	pop    esi
c00105fe:	5f                   	pop    edi
c00105ff:	5d                   	pop    ebp
c0010600:	c3                   	ret    
c0010601:	85 f6                	test   esi,esi
c0010603:	0f 84 34 ff ff ff    	je     c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010609:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001060f:	e9 29 ff ff ff       	jmp    c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010614:	85 f6                	test   esi,esi
c0010616:	0f 84 21 ff ff ff    	je     c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001061c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010622:	e9 16 ff ff ff       	jmp    c001053d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0010627 <SysClose(regs*)>:
c0010627:	53                   	push   ebx
c0010628:	83 ec 08             	sub    esp,0x8
c001062b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010632:	83 f8 02             	cmp    eax,0x2
c0010635:	76 41                	jbe    c0010678 <SysClose(regs*)+0x51>
c0010637:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001063d:	83 fa 01             	cmp    edx,0x1
c0010640:	76 2d                	jbe    c001066f <SysClose(regs*)+0x48>
c0010642:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010647:	77 2f                	ja     c0010678 <SysClose(regs*)+0x51>
c0010649:	83 ec 0c             	sub    esp,0xc
c001064c:	50                   	push   eax
c001064d:	e8 35 18 00 00       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c0010652:	89 04 24             	mov    DWORD PTR [esp],eax
c0010655:	89 c3                	mov    ebx,eax
c0010657:	e8 2c 7b ff ff       	call   c0008188 <File::close()>
c001065c:	83 c4 10             	add    esp,0x10
c001065f:	85 db                	test   ebx,ebx
c0010661:	74 0c                	je     c001066f <SysClose(regs*)+0x48>
c0010663:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010665:	83 ec 0c             	sub    esp,0xc
c0010668:	53                   	push   ebx
c0010669:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001066c:	83 c4 10             	add    esp,0x10
c001066f:	83 c4 08             	add    esp,0x8
c0010672:	31 c0                	xor    eax,eax
c0010674:	5b                   	pop    ebx
c0010675:	31 d2                	xor    edx,edx
c0010677:	c3                   	ret    
c0010678:	83 c4 08             	add    esp,0x8
c001067b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010680:	5b                   	pop    ebx
c0010681:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010686:	c3                   	ret    

c0010687 <SysOpenDir(regs*)>:
c0010687:	56                   	push   esi
c0010688:	53                   	push   ebx
c0010689:	83 ec 04             	sub    esp,0x4
c001068c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010690:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010693:	85 c9                	test   ecx,ecx
c0010695:	74 5d                	je     c00106f4 <SysOpenDir(regs*)+0x6d>
c0010697:	83 ec 0c             	sub    esp,0xc
c001069a:	68 14 01 00 00       	push   0x114
c001069f:	e8 42 e2 ff ff       	call   c000e8e6 <malloc>
c00106a4:	83 c4 0c             	add    esp,0xc
c00106a7:	89 c6                	mov    esi,eax
c00106a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106b1:	50                   	push   eax
c00106b2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00106b5:	52                   	push   edx
c00106b6:	56                   	push   esi
c00106b7:	e8 30 7f ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	85 f6                	test   esi,esi
c00106c1:	74 31                	je     c00106f4 <SysOpenDir(regs*)+0x6d>
c00106c3:	83 ec 0c             	sub    esp,0xc
c00106c6:	56                   	push   esi
c00106c7:	e8 e8 7f ff ff       	call   c00086b4 <Directory::open()>
c00106cc:	83 c4 10             	add    esp,0x10
c00106cf:	85 c0                	test   eax,eax
c00106d1:	75 21                	jne    c00106f4 <SysOpenDir(regs*)+0x6d>
c00106d3:	83 ec 0c             	sub    esp,0xc
c00106d6:	56                   	push   esi
c00106d7:	e8 ae 14 00 00       	call   c0011b8a <UnixFile::getFileDescriptor()>
c00106dc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00106df:	83 c4 10             	add    esp,0x10
c00106e2:	89 02                	mov    DWORD PTR [edx],eax
c00106e4:	c1 f8 1f             	sar    eax,0x1f
c00106e7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00106ea:	83 c4 04             	add    esp,0x4
c00106ed:	31 c0                	xor    eax,eax
c00106ef:	5b                   	pop    ebx
c00106f0:	31 d2                	xor    edx,edx
c00106f2:	5e                   	pop    esi
c00106f3:	c3                   	ret    
c00106f4:	83 c4 04             	add    esp,0x4
c00106f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106fc:	5b                   	pop    ebx
c00106fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010702:	5e                   	pop    esi
c0010703:	c3                   	ret    

c0010704 <SysMakeDir(regs*)>:
c0010704:	56                   	push   esi
c0010705:	53                   	push   ebx
c0010706:	83 ec 10             	sub    esp,0x10
c0010709:	68 14 01 00 00       	push   0x114
c001070e:	e8 d3 e1 ff ff       	call   c000e8e6 <malloc>
c0010713:	83 c4 0c             	add    esp,0xc
c0010716:	89 c3                	mov    ebx,eax
c0010718:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001071d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010720:	50                   	push   eax
c0010721:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010725:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0010728:	52                   	push   edx
c0010729:	53                   	push   ebx
c001072a:	e8 bd 7e ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	85 db                	test   ebx,ebx
c0010734:	74 2c                	je     c0010762 <SysMakeDir(regs*)+0x5e>
c0010736:	83 ec 0c             	sub    esp,0xc
c0010739:	53                   	push   ebx
c001073a:	e8 55 81 ff ff       	call   c0008894 <Directory::create()>
c001073f:	89 c6                	mov    esi,eax
c0010741:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010743:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010746:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010749:	83 c4 10             	add    esp,0x10
c001074c:	31 c0                	xor    eax,eax
c001074e:	85 f6                	test   esi,esi
c0010750:	0f 95 c0             	setne  al
c0010753:	31 d2                	xor    edx,edx
c0010755:	f7 d8                	neg    eax
c0010757:	83 d2 00             	adc    edx,0x0
c001075a:	83 c4 04             	add    esp,0x4
c001075d:	5b                   	pop    ebx
c001075e:	f7 da                	neg    edx
c0010760:	5e                   	pop    esi
c0010761:	c3                   	ret    
c0010762:	83 c4 04             	add    esp,0x4
c0010765:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001076a:	5b                   	pop    ebx
c001076b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010770:	5e                   	pop    esi
c0010771:	c3                   	ret    

c0010772 <SysCloseDir(regs*)>:
c0010772:	53                   	push   ebx
c0010773:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010778:	83 ec 08             	sub    esp,0x8
c001077b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010782:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010787:	8d 59 fd             	lea    ebx,[ecx-0x3]
c001078a:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0010790:	77 2a                	ja     c00107bc <SysCloseDir(regs*)+0x4a>
c0010792:	83 ec 0c             	sub    esp,0xc
c0010795:	51                   	push   ecx
c0010796:	e8 ec 16 00 00       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c001079b:	89 04 24             	mov    DWORD PTR [esp],eax
c001079e:	89 c3                	mov    ebx,eax
c00107a0:	e8 6b 7f ff ff       	call   c0008710 <Directory::close()>
c00107a5:	83 c4 10             	add    esp,0x10
c00107a8:	85 db                	test   ebx,ebx
c00107aa:	74 0c                	je     c00107b8 <SysCloseDir(regs*)+0x46>
c00107ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107ae:	83 ec 0c             	sub    esp,0xc
c00107b1:	53                   	push   ebx
c00107b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107b5:	83 c4 10             	add    esp,0x10
c00107b8:	31 c0                	xor    eax,eax
c00107ba:	31 d2                	xor    edx,edx
c00107bc:	83 c4 08             	add    esp,0x8
c00107bf:	5b                   	pop    ebx
c00107c0:	c3                   	ret    

c00107c1 <SysWait(regs*)>:
c00107c1:	83 ec 10             	sub    esp,0x10
c00107c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00107cb:	52                   	push   edx
c00107cc:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00107cf:	51                   	push   ecx
c00107d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107d3:	50                   	push   eax
c00107d4:	e8 eb 4d 00 00       	call   c00155c4 <waitTask(int, int*, int)>
c00107d9:	83 c4 1c             	add    esp,0x1c
c00107dc:	89 c2                	mov    edx,eax
c00107de:	c1 fa 1f             	sar    edx,0x1f
c00107e1:	c3                   	ret    

c00107e2 <SysNotImpl(regs*)>:
c00107e2:	83 ec 18             	sub    esp,0x18
c00107e5:	68 94 23 02 c0       	push   0xc0022394
c00107ea:	e8 4b e4 ff ff       	call   c000ec3a <KePanic(char const*)>
c00107ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107f9:	83 c4 1c             	add    esp,0x1c
c00107fc:	c3                   	ret    

c00107fd <SysPanic(regs*)>:
c00107fd:	83 ec 18             	sub    esp,0x18
c0010800:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010804:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010807:	50                   	push   eax
c0010808:	e8 2d e4 ff ff       	call   c000ec3a <KePanic(char const*)>
c001080d:	b8 01 00 00 00       	mov    eax,0x1
c0010812:	31 d2                	xor    edx,edx
c0010814:	83 c4 1c             	add    esp,0x1c
c0010817:	c3                   	ret    

c0010818 <SysRmdir(regs*)>:
c0010818:	56                   	push   esi
c0010819:	53                   	push   ebx
c001081a:	83 ec 10             	sub    esp,0x10
c001081d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010821:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010824:	68 14 01 00 00       	push   0x114
c0010829:	e8 b8 e0 ff ff       	call   c000e8e6 <malloc>
c001082e:	6a 00                	push   0x0
c0010830:	89 c3                	mov    ebx,eax
c0010832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010837:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001083a:	50                   	push   eax
c001083b:	56                   	push   esi
c001083c:	53                   	push   ebx
c001083d:	e8 ec 77 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010842:	83 c4 14             	add    esp,0x14
c0010845:	53                   	push   ebx
c0010846:	e8 ad 7a ff ff       	call   c00082f8 <File::unlink()>
c001084b:	83 c4 10             	add    esp,0x10
c001084e:	85 db                	test   ebx,ebx
c0010850:	89 c6                	mov    esi,eax
c0010852:	74 0c                	je     c0010860 <SysRmdir(regs*)+0x48>
c0010854:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010856:	83 ec 0c             	sub    esp,0xc
c0010859:	53                   	push   ebx
c001085a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001085d:	83 c4 10             	add    esp,0x10
c0010860:	31 c0                	xor    eax,eax
c0010862:	85 f6                	test   esi,esi
c0010864:	0f 95 c0             	setne  al
c0010867:	31 d2                	xor    edx,edx
c0010869:	f7 d8                	neg    eax
c001086b:	83 d2 00             	adc    edx,0x0
c001086e:	83 c4 04             	add    esp,0x4
c0010871:	5b                   	pop    ebx
c0010872:	f7 da                	neg    edx
c0010874:	5e                   	pop    esi
c0010875:	c3                   	ret    

c0010876 <SysUnlink(regs*)>:
c0010876:	56                   	push   esi
c0010877:	53                   	push   ebx
c0010878:	83 ec 10             	sub    esp,0x10
c001087b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001087f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010882:	68 14 01 00 00       	push   0x114
c0010887:	e8 5a e0 ff ff       	call   c000e8e6 <malloc>
c001088c:	6a 00                	push   0x0
c001088e:	89 c3                	mov    ebx,eax
c0010890:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010895:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010898:	50                   	push   eax
c0010899:	56                   	push   esi
c001089a:	53                   	push   ebx
c001089b:	e8 8e 77 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00108a0:	83 c4 14             	add    esp,0x14
c00108a3:	53                   	push   ebx
c00108a4:	e8 4f 7a ff ff       	call   c00082f8 <File::unlink()>
c00108a9:	83 c4 10             	add    esp,0x10
c00108ac:	85 db                	test   ebx,ebx
c00108ae:	89 c6                	mov    esi,eax
c00108b0:	74 0c                	je     c00108be <SysUnlink(regs*)+0x48>
c00108b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108b4:	83 ec 0c             	sub    esp,0xc
c00108b7:	53                   	push   ebx
c00108b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108bb:	83 c4 10             	add    esp,0x10
c00108be:	31 c0                	xor    eax,eax
c00108c0:	85 f6                	test   esi,esi
c00108c2:	0f 95 c0             	setne  al
c00108c5:	31 d2                	xor    edx,edx
c00108c7:	f7 d8                	neg    eax
c00108c9:	83 d2 00             	adc    edx,0x0
c00108cc:	83 c4 04             	add    esp,0x4
c00108cf:	5b                   	pop    ebx
c00108d0:	f7 da                	neg    edx
c00108d2:	5e                   	pop    esi
c00108d3:	c3                   	ret    

c00108d4 <SysGetArgv(regs*)>:
c00108d4:	83 ec 0c             	sub    esp,0xc
c00108d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108db:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108de:	85 c0                	test   eax,eax
c00108e0:	78 2c                	js     c001090e <SysGetArgv(regs*)+0x3a>
c00108e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00108e8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00108eb:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00108f1:	7d 1b                	jge    c001090e <SysGetArgv(regs*)+0x3a>
c00108f3:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00108fa:	85 c0                	test   eax,eax
c00108fc:	74 18                	je     c0010916 <SysGetArgv(regs*)+0x42>
c00108fe:	83 ec 08             	sub    esp,0x8
c0010901:	50                   	push   eax
c0010902:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010905:	50                   	push   eax
c0010906:	e8 45 fd fe ff       	call   c0000650 <strcpy>
c001090b:	83 c4 10             	add    esp,0x10
c001090e:	31 c0                	xor    eax,eax
c0010910:	31 d2                	xor    edx,edx
c0010912:	83 c4 0c             	add    esp,0xc
c0010915:	c3                   	ret    
c0010916:	b8 01 00 00 00       	mov    eax,0x1
c001091b:	31 d2                	xor    edx,edx
c001091d:	83 c4 0c             	add    esp,0xc
c0010920:	c3                   	ret    

c0010921 <SysUSleep(regs*)>:
c0010921:	83 ec 1c             	sub    esp,0x1c
c0010924:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010928:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001092b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001092e:	6a 00                	push   0x0
c0010930:	6a 64                	push   0x64
c0010932:	52                   	push   edx
c0010933:	50                   	push   eax
c0010934:	e8 db f1 00 00       	call   c001fb14 <__udivdi3>
c0010939:	83 c4 14             	add    esp,0x14
c001093c:	50                   	push   eax
c001093d:	e8 66 4d 00 00       	call   c00156a8 <milliTenthSleep(unsigned int)>
c0010942:	31 c0                	xor    eax,eax
c0010944:	31 d2                	xor    edx,edx
c0010946:	83 c4 1c             	add    esp,0x1c
c0010949:	c3                   	ret    

c001094a <SysSpawn(regs*)>:
c001094a:	56                   	push   esi
c001094b:	53                   	push   ebx
c001094c:	83 ec 04             	sub    esp,0x4
c001094f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010953:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010956:	85 f6                	test   esi,esi
c0010958:	75 0a                	jne    c0010964 <SysSpawn(regs*)+0x1a>
c001095a:	83 c4 04             	add    esp,0x4
c001095d:	31 c0                	xor    eax,eax
c001095f:	5b                   	pop    ebx
c0010960:	31 d2                	xor    edx,edx
c0010962:	5e                   	pop    esi
c0010963:	c3                   	ret    
c0010964:	83 ec 0c             	sub    esp,0xc
c0010967:	68 24 07 00 00       	push   0x724
c001096c:	e8 75 df ff ff       	call   c000e8e6 <malloc>
c0010971:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010974:	83 c4 10             	add    esp,0x10
c0010977:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001097a:	89 c6                	mov    esi,eax
c001097c:	31 c0                	xor    eax,eax
c001097e:	85 c9                	test   ecx,ecx
c0010980:	75 08                	jne    c001098a <SysSpawn(regs*)+0x40>
c0010982:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010987:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001098a:	52                   	push   edx
c001098b:	50                   	push   eax
c001098c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001098f:	50                   	push   eax
c0010990:	56                   	push   esi
c0010991:	e8 ba 44 00 00       	call   c0014e50 <Process::Process(char const*, Process*, char**)>
c0010996:	83 c4 10             	add    esp,0x10
c0010999:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00109a0:	75 b8                	jne    c001095a <SysSpawn(regs*)+0x10>
c00109a2:	83 ec 0c             	sub    esp,0xc
c00109a5:	56                   	push   esi
c00109a6:	e8 e1 49 00 00       	call   c001538c <Process::createUserThread()>
c00109ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 c4 04             	add    esp,0x4
c00109b3:	5b                   	pop    ebx
c00109b4:	89 c2                	mov    edx,eax
c00109b6:	c1 fa 1f             	sar    edx,0x1f
c00109b9:	5e                   	pop    esi
c00109ba:	c3                   	ret    

c00109bb <SysGetEnv(regs*)>:
c00109bb:	57                   	push   edi
c00109bc:	56                   	push   esi
c00109bd:	53                   	push   ebx
c00109be:	83 ec 1c             	sub    esp,0x1c
c00109c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109ca:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00109cd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00109d0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109d3:	51                   	push   ecx
c00109d4:	e8 4e d2 ff ff       	call   c000dc27 <KeGetProcessTotalEnvCount(Process*)>
c00109d9:	83 c4 10             	add    esp,0x10
c00109dc:	39 c7                	cmp    edi,eax
c00109de:	7c 12                	jl     c00109f2 <SysGetEnv(regs*)+0x37>
c00109e0:	31 c0                	xor    eax,eax
c00109e2:	31 d2                	xor    edx,edx
c00109e4:	85 f6                	test   esi,esi
c00109e6:	74 03                	je     c00109eb <SysGetEnv(regs*)+0x30>
c00109e8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109eb:	83 c4 10             	add    esp,0x10
c00109ee:	5b                   	pop    ebx
c00109ef:	5e                   	pop    esi
c00109f0:	5f                   	pop    edi
c00109f1:	c3                   	ret    
c00109f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00109f6:	83 ec 04             	sub    esp,0x4
c00109f9:	57                   	push   edi
c00109fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a00:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010a03:	57                   	push   edi
c0010a04:	50                   	push   eax
c0010a05:	e8 3d d2 ff ff       	call   c000dc47 <KeGetProcessEnvPair(Process*, int)>
c0010a0a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a11:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010a15:	83 c4 0c             	add    esp,0xc
c0010a18:	85 d2                	test   edx,edx
c0010a1a:	75 23                	jne    c0010a3f <SysGetEnv(regs*)+0x84>
c0010a1c:	83 ec 0c             	sub    esp,0xc
c0010a1f:	50                   	push   eax
c0010a20:	e8 5b fb fe ff       	call   c0000580 <strlen>
c0010a25:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a28:	89 c3                	mov    ebx,eax
c0010a2a:	e8 51 fb fe ff       	call   c0000580 <strlen>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	31 d2                	xor    edx,edx
c0010a34:	83 c4 10             	add    esp,0x10
c0010a37:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010a3b:	5b                   	pop    ebx
c0010a3c:	5e                   	pop    esi
c0010a3d:	5f                   	pop    edi
c0010a3e:	c3                   	ret    
c0010a3f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a42:	83 ec 08             	sub    esp,0x8
c0010a45:	50                   	push   eax
c0010a46:	56                   	push   esi
c0010a47:	e8 04 fc fe ff       	call   c0000650 <strcpy>
c0010a4c:	58                   	pop    eax
c0010a4d:	5a                   	pop    edx
c0010a4e:	68 ae 23 02 c0       	push   0xc00223ae
c0010a53:	56                   	push   esi
c0010a54:	e8 17 fe fe ff       	call   c0000870 <strcat>
c0010a59:	59                   	pop    ecx
c0010a5a:	5b                   	pop    ebx
c0010a5b:	57                   	push   edi
c0010a5c:	56                   	push   esi
c0010a5d:	e8 0e fe fe ff       	call   c0000870 <strcat>
c0010a62:	83 c4 10             	add    esp,0x10
c0010a65:	31 c0                	xor    eax,eax
c0010a67:	83 c4 10             	add    esp,0x10
c0010a6a:	31 d2                	xor    edx,edx
c0010a6c:	5b                   	pop    ebx
c0010a6d:	5e                   	pop    esi
c0010a6e:	5f                   	pop    edi
c0010a6f:	c3                   	ret    

c0010a70 <SysSetFatAttrib(regs*)>:
c0010a70:	57                   	push   edi
c0010a71:	56                   	push   esi
c0010a72:	53                   	push   ebx
c0010a73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a77:	83 ec 0c             	sub    esp,0xc
c0010a7a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010a7d:	68 14 01 00 00       	push   0x114
c0010a82:	e8 5f de ff ff       	call   c000e8e6 <malloc>
c0010a87:	83 c4 0c             	add    esp,0xc
c0010a8a:	89 c3                	mov    ebx,eax
c0010a8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a94:	50                   	push   eax
c0010a95:	57                   	push   edi
c0010a96:	53                   	push   ebx
c0010a97:	e8 70 76 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0010a9c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010a9f:	83 c4 0c             	add    esp,0xc
c0010aa2:	0f b6 d4             	movzx  edx,ah
c0010aa5:	0f b6 c0             	movzx  eax,al
c0010aa8:	52                   	push   edx
c0010aa9:	50                   	push   eax
c0010aaa:	53                   	push   ebx
c0010aab:	e8 e2 78 ff ff       	call   c0008392 <File::chfatattr(unsigned char, unsigned char)>
c0010ab0:	83 c4 10             	add    esp,0x10
c0010ab3:	85 db                	test   ebx,ebx
c0010ab5:	89 c6                	mov    esi,eax
c0010ab7:	74 0c                	je     c0010ac5 <SysSetFatAttrib(regs*)+0x55>
c0010ab9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010abb:	83 ec 0c             	sub    esp,0xc
c0010abe:	53                   	push   ebx
c0010abf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ac2:	83 c4 10             	add    esp,0x10
c0010ac5:	5b                   	pop    ebx
c0010ac6:	31 c0                	xor    eax,eax
c0010ac8:	85 f6                	test   esi,esi
c0010aca:	0f 95 c0             	setne  al
c0010acd:	31 d2                	xor    edx,edx
c0010acf:	5e                   	pop    esi
c0010ad0:	f7 d8                	neg    eax
c0010ad2:	83 d2 00             	adc    edx,0x0
c0010ad5:	f7 da                	neg    edx
c0010ad7:	5f                   	pop    edi
c0010ad8:	c3                   	ret    

c0010ad9 <SysPipe(regs*)>:
c0010ad9:	57                   	push   edi
c0010ada:	56                   	push   esi
c0010adb:	53                   	push   ebx
c0010adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae0:	83 ec 0c             	sub    esp,0xc
c0010ae3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010ae6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ae9:	6a 20                	push   0x20
c0010aeb:	e8 f6 dd ff ff       	call   c000e8e6 <malloc>
c0010af0:	89 c3                	mov    ebx,eax
c0010af2:	58                   	pop    eax
c0010af3:	5a                   	pop    edx
c0010af4:	68 00 50 00 00       	push   0x5000
c0010af9:	53                   	push   ebx
c0010afa:	e8 91 e9 ff ff       	call   c000f490 <Pipe::Pipe(int)>
c0010aff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b02:	e8 83 10 00 00       	call   c0011b8a <UnixFile::getFileDescriptor()>
c0010b07:	89 07                	mov    DWORD PTR [edi],eax
c0010b09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b0c:	e8 79 10 00 00       	call   c0011b8a <UnixFile::getFileDescriptor()>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	31 d2                	xor    edx,edx
c0010b16:	89 06                	mov    DWORD PTR [esi],eax
c0010b18:	31 c0                	xor    eax,eax
c0010b1a:	5b                   	pop    ebx
c0010b1b:	5e                   	pop    esi
c0010b1c:	5f                   	pop    edi
c0010b1d:	c3                   	ret    

c0010b1e <SysGetUnixTime(regs*)>:
c0010b1e:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010b23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b2d:	e9 5e 80 ff ff       	jmp    c0008b90 <Clock::timeInSecondsLocal()>

c0010b32 <string_ends_with(char const*, char const*)>:
c0010b32:	57                   	push   edi
c0010b33:	56                   	push   esi
c0010b34:	53                   	push   ebx
c0010b35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b39:	83 ec 0c             	sub    esp,0xc
c0010b3c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010b40:	53                   	push   ebx
c0010b41:	e8 3a fa fe ff       	call   c0000580 <strlen>
c0010b46:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b49:	89 c6                	mov    esi,eax
c0010b4b:	e8 30 fa fe ff       	call   c0000580 <strlen>
c0010b50:	83 c4 10             	add    esp,0x10
c0010b53:	31 d2                	xor    edx,edx
c0010b55:	39 c6                	cmp    esi,eax
c0010b57:	7d 06                	jge    c0010b5f <string_ends_with(char const*, char const*)+0x2d>
c0010b59:	5b                   	pop    ebx
c0010b5a:	89 d0                	mov    eax,edx
c0010b5c:	5e                   	pop    esi
c0010b5d:	5f                   	pop    edi
c0010b5e:	c3                   	ret    
c0010b5f:	83 ec 08             	sub    esp,0x8
c0010b62:	29 c6                	sub    esi,eax
c0010b64:	57                   	push   edi
c0010b65:	01 f3                	add    ebx,esi
c0010b67:	53                   	push   ebx
c0010b68:	e8 13 fc fe ff       	call   c0000780 <strcmp>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	31 d2                	xor    edx,edx
c0010b72:	5b                   	pop    ebx
c0010b73:	5e                   	pop    esi
c0010b74:	85 c0                	test   eax,eax
c0010b76:	5f                   	pop    edi
c0010b77:	0f 94 c2             	sete   dl
c0010b7a:	89 d0                	mov    eax,edx
c0010b7c:	c3                   	ret    

c0010b7d <SysOpen(regs*)>:
c0010b7d:	56                   	push   esi
c0010b7e:	53                   	push   ebx
c0010b7f:	81 ec 04 01 00 00    	sub    esp,0x104
c0010b85:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010b8c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b8f:	85 c0                	test   eax,eax
c0010b91:	0f 84 c4 01 00 00    	je     c0010d5b <SysOpen(regs*)+0x1de>
c0010b97:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b9a:	85 c0                	test   eax,eax
c0010b9c:	0f 84 b9 01 00 00    	je     c0010d5b <SysOpen(regs*)+0x1de>
c0010ba2:	6a 00                	push   0x0
c0010ba4:	68 b0 23 02 c0       	push   0xc00223b0
c0010ba9:	50                   	push   eax
c0010baa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010bae:	56                   	push   esi
c0010baf:	e8 4c 72 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010bb4:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bb7:	e8 c4 f9 fe ff       	call   c0000580 <strlen>
c0010bbc:	83 c4 10             	add    esp,0x10
c0010bbf:	83 e8 01             	sub    eax,0x1
c0010bc2:	74 29                	je     c0010bed <SysOpen(regs*)+0x70>
c0010bc4:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010bc8:	83 fa 2e             	cmp    edx,0x2e
c0010bcb:	74 1c                	je     c0010be9 <SysOpen(regs*)+0x6c>
c0010bcd:	83 fa 3a             	cmp    edx,0x3a
c0010bd0:	74 17                	je     c0010be9 <SysOpen(regs*)+0x6c>
c0010bd2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010bd6:	83 e8 01             	sub    eax,0x1
c0010bd9:	74 12                	je     c0010bed <SysOpen(regs*)+0x70>
c0010bdb:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010bdf:	83 fa 3a             	cmp    edx,0x3a
c0010be2:	74 05                	je     c0010be9 <SysOpen(regs*)+0x6c>
c0010be4:	83 fa 2e             	cmp    edx,0x2e
c0010be7:	75 e9                	jne    c0010bd2 <SysOpen(regs*)+0x55>
c0010be9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010bed:	83 ec 08             	sub    esp,0x8
c0010bf0:	68 b4 23 02 c0       	push   0xc00223b4
c0010bf5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bf8:	50                   	push   eax
c0010bf9:	e8 34 ff ff ff       	call   c0010b32 <string_ends_with(char const*, char const*)>
c0010bfe:	83 c4 10             	add    esp,0x10
c0010c01:	85 c0                	test   eax,eax
c0010c03:	74 1d                	je     c0010c22 <SysOpen(regs*)+0xa5>
c0010c05:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c08:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010c0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c15:	81 c4 04 01 00 00    	add    esp,0x104
c0010c1b:	31 c0                	xor    eax,eax
c0010c1d:	5b                   	pop    ebx
c0010c1e:	31 d2                	xor    edx,edx
c0010c20:	5e                   	pop    esi
c0010c21:	c3                   	ret    
c0010c22:	83 ec 08             	sub    esp,0x8
c0010c25:	68 b9 23 02 c0       	push   0xc00223b9
c0010c2a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c2d:	50                   	push   eax
c0010c2e:	e8 ff fe ff ff       	call   c0010b32 <string_ends_with(char const*, char const*)>
c0010c33:	83 c4 10             	add    esp,0x10
c0010c36:	85 c0                	test   eax,eax
c0010c38:	75 cb                	jne    c0010c05 <SysOpen(regs*)+0x88>
c0010c3a:	83 ec 08             	sub    esp,0x8
c0010c3d:	68 b5 23 02 c0       	push   0xc00223b5
c0010c42:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c45:	50                   	push   eax
c0010c46:	e8 35 fb fe ff       	call   c0000780 <strcmp>
c0010c4b:	83 c4 10             	add    esp,0x10
c0010c4e:	85 c0                	test   eax,eax
c0010c50:	74 b3                	je     c0010c05 <SysOpen(regs*)+0x88>
c0010c52:	83 ec 08             	sub    esp,0x8
c0010c55:	68 b4 23 02 c0       	push   0xc00223b4
c0010c5a:	56                   	push   esi
c0010c5b:	e8 d2 fe ff ff       	call   c0010b32 <string_ends_with(char const*, char const*)>
c0010c60:	83 c4 10             	add    esp,0x10
c0010c63:	85 c0                	test   eax,eax
c0010c65:	75 9e                	jne    c0010c05 <SysOpen(regs*)+0x88>
c0010c67:	83 ec 08             	sub    esp,0x8
c0010c6a:	68 be 23 02 c0       	push   0xc00223be
c0010c6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c72:	50                   	push   eax
c0010c73:	e8 ba fe ff ff       	call   c0010b32 <string_ends_with(char const*, char const*)>
c0010c78:	83 c4 10             	add    esp,0x10
c0010c7b:	85 c0                	test   eax,eax
c0010c7d:	0f 85 eb 00 00 00    	jne    c0010d6e <SysOpen(regs*)+0x1f1>
c0010c83:	83 ec 08             	sub    esp,0x8
c0010c86:	68 c3 23 02 c0       	push   0xc00223c3
c0010c8b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c8e:	50                   	push   eax
c0010c8f:	e8 9e fe ff ff       	call   c0010b32 <string_ends_with(char const*, char const*)>
c0010c94:	83 c4 10             	add    esp,0x10
c0010c97:	85 c0                	test   eax,eax
c0010c99:	0f 85 cf 00 00 00    	jne    c0010d6e <SysOpen(regs*)+0x1f1>
c0010c9f:	83 ec 08             	sub    esp,0x8
c0010ca2:	68 bf 23 02 c0       	push   0xc00223bf
c0010ca7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010caa:	51                   	push   ecx
c0010cab:	e8 d0 fa fe ff       	call   c0000780 <strcmp>
c0010cb0:	83 c4 10             	add    esp,0x10
c0010cb3:	85 c0                	test   eax,eax
c0010cb5:	0f 84 b3 00 00 00    	je     c0010d6e <SysOpen(regs*)+0x1f1>
c0010cbb:	83 ec 08             	sub    esp,0x8
c0010cbe:	68 be 23 02 c0       	push   0xc00223be
c0010cc3:	56                   	push   esi
c0010cc4:	e8 69 fe ff ff       	call   c0010b32 <string_ends_with(char const*, char const*)>
c0010cc9:	83 c4 10             	add    esp,0x10
c0010ccc:	85 c0                	test   eax,eax
c0010cce:	0f 85 9a 00 00 00    	jne    c0010d6e <SysOpen(regs*)+0x1f1>
c0010cd4:	83 ec 0c             	sub    esp,0xc
c0010cd7:	68 14 01 00 00       	push   0x114
c0010cdc:	e8 05 dc ff ff       	call   c000e8e6 <malloc>
c0010ce1:	83 c4 0c             	add    esp,0xc
c0010ce4:	89 c6                	mov    esi,eax
c0010ce6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ceb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cee:	50                   	push   eax
c0010cef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010cf2:	52                   	push   edx
c0010cf3:	56                   	push   esi
c0010cf4:	e8 13 74 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	85 f6                	test   esi,esi
c0010cfe:	74 5b                	je     c0010d5b <SysOpen(regs*)+0x1de>
c0010d00:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d03:	0f b6 c2             	movzx  eax,dl
c0010d06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010d09:	89 d0                	mov    eax,edx
c0010d0b:	83 e0 01             	and    eax,0x1
c0010d0e:	f6 c2 02             	test   dl,0x2
c0010d11:	74 03                	je     c0010d16 <SysOpen(regs*)+0x199>
c0010d13:	83 c8 02             	or     eax,0x2
c0010d16:	f6 c2 04             	test   dl,0x4
c0010d19:	74 03                	je     c0010d1e <SysOpen(regs*)+0x1a1>
c0010d1b:	83 c8 04             	or     eax,0x4
c0010d1e:	f6 c2 08             	test   dl,0x8
c0010d21:	74 03                	je     c0010d26 <SysOpen(regs*)+0x1a9>
c0010d23:	83 c8 0a             	or     eax,0xa
c0010d26:	80 e2 10             	and    dl,0x10
c0010d29:	74 03                	je     c0010d2e <SysOpen(regs*)+0x1b1>
c0010d2b:	83 c8 12             	or     eax,0x12
c0010d2e:	83 ec 08             	sub    esp,0x8
c0010d31:	50                   	push   eax
c0010d32:	56                   	push   esi
c0010d33:	e8 f2 73 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0010d38:	83 c4 10             	add    esp,0x10
c0010d3b:	85 c0                	test   eax,eax
c0010d3d:	75 1c                	jne    c0010d5b <SysOpen(regs*)+0x1de>
c0010d3f:	83 ec 0c             	sub    esp,0xc
c0010d42:	56                   	push   esi
c0010d43:	e8 42 0e 00 00       	call   c0011b8a <UnixFile::getFileDescriptor()>
c0010d48:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	89 02                	mov    DWORD PTR [edx],eax
c0010d50:	c1 f8 1f             	sar    eax,0x1f
c0010d53:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d56:	e9 ba fe ff ff       	jmp    c0010c15 <SysOpen(regs*)+0x98>
c0010d5b:	81 c4 04 01 00 00    	add    esp,0x104
c0010d61:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d66:	5b                   	pop    ebx
c0010d67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d6c:	5e                   	pop    esi
c0010d6d:	c3                   	ret    
c0010d6e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d71:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010d77:	e9 92 fe ff ff       	jmp    c0010c0e <SysOpen(regs*)+0x91>

c0010d7c <KeSystemCall(regs*, void*)>:
c0010d7c:	56                   	push   esi
c0010d7d:	53                   	push   ebx
c0010d7e:	50                   	push   eax
c0010d7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d83:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010d86:	83 fb 40             	cmp    ebx,0x40
c0010d89:	77 25                	ja     c0010db0 <KeSystemCall(regs*, void*)+0x34>
c0010d8b:	8b 04 9d 00 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf00]
c0010d92:	85 c0                	test   eax,eax
c0010d94:	74 1a                	je     c0010db0 <KeSystemCall(regs*, void*)+0x34>
c0010d96:	83 ec 0c             	sub    esp,0xc
c0010d99:	56                   	push   esi
c0010d9a:	ff d0                	call   eax
c0010d9c:	83 c4 10             	add    esp,0x10
c0010d9f:	83 fb 2f             	cmp    ebx,0x2f
c0010da2:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010da5:	75 19                	jne    c0010dc0 <KeSystemCall(regs*, void*)+0x44>
c0010da7:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010dae:	eb 10                	jmp    c0010dc0 <KeSystemCall(regs*, void*)+0x44>
c0010db0:	56                   	push   esi
c0010db1:	56                   	push   esi
c0010db2:	53                   	push   ebx
c0010db3:	68 c8 23 02 c0       	push   0xc00223c8
c0010db8:	e8 91 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010dbd:	83 c4 10             	add    esp,0x10
c0010dc0:	59                   	pop    ecx
c0010dc1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010dc6:	31 d2                	xor    edx,edx
c0010dc8:	5b                   	pop    ebx
c0010dc9:	5e                   	pop    esi
c0010dca:	c3                   	ret    
c0010dcb:	90                   	nop

c0010dcc <VgaText::isAtty()>:
c0010dcc:	b0 01                	mov    al,0x1
c0010dce:	c3                   	ret    
c0010dcf:	90                   	nop

c0010dd0 <VgaText::~VgaText()>:
c0010dd0:	83 ec 0c             	sub    esp,0xc
c0010dd3:	ba 10 24 02 c0       	mov    edx,0xc0022410
c0010dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ddc:	89 10                	mov    DWORD PTR [eax],edx
c0010dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de2:	83 ec 0c             	sub    esp,0xc
c0010de5:	50                   	push   eax
c0010de6:	e8 8d 0f 00 00       	call   c0011d78 <UnixFile::~UnixFile()>
c0010deb:	83 c4 10             	add    esp,0x10
c0010dee:	90                   	nop
c0010def:	83 c4 0c             	add    esp,0xc
c0010df2:	c3                   	ret    
c0010df3:	90                   	nop

c0010df4 <VgaText::~VgaText()>:
c0010df4:	83 ec 0c             	sub    esp,0xc
c0010df7:	83 ec 0c             	sub    esp,0xc
c0010dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfe:	e8 cd ff ff ff       	call   c0010dd0 <VgaText::~VgaText()>
c0010e03:	83 c4 10             	add    esp,0x10
c0010e06:	83 ec 08             	sub    esp,0x8
c0010e09:	68 84 01 00 00       	push   0x184
c0010e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e12:	e8 4c b8 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0010e17:	83 c4 10             	add    esp,0x10
c0010e1a:	83 c4 0c             	add    esp,0xc
c0010e1d:	c3                   	ret    

c0010e1e <VgaText::read(unsigned long long, void*, int*)>:
c0010e1e:	83 ec 10             	sub    esp,0x10
c0010e21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e2d:	e8 72 8d ff ff       	call   c0009ba4 <readKeyboard(VgaText*, char*, unsigned long)>
c0010e32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e36:	89 02                	mov    DWORD PTR [edx],eax
c0010e38:	31 c0                	xor    eax,eax
c0010e3a:	83 c4 1c             	add    esp,0x1c
c0010e3d:	c3                   	ret    

c0010e3e <setTerminalScrollLock(bool)>:
c0010e3e:	c3                   	ret    

c0010e3f <doTerminalCycle()>:
c0010e3f:	c3                   	ret    

c0010e40 <addToTerminalCycle(VgaText*)>:
c0010e40:	c3                   	ret    

c0010e41 <scrollTerminalScrollLock(int)>:
c0010e41:	c3                   	ret    

c0010e42 <VgaText::updateTitle()>:
c0010e42:	c3                   	ret    
c0010e43:	90                   	nop

c0010e44 <VgaText::load()>:
c0010e44:	c3                   	ret    
c0010e45:	90                   	nop

c0010e46 <VgaText::updateCursor()>:
c0010e46:	83 ec 14             	sub    esp,0x14
c0010e49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e4d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010e50:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010e53:	e8 c8 87 00 00       	call   c0019620 <HalConsoleCursorUpdate(int, int)>
c0010e58:	83 c4 1c             	add    esp,0x1c
c0010e5b:	c3                   	ret    

c0010e5c <VgaText::doANSI_SGR(int)>:
c0010e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e64:	85 d2                	test   edx,edx
c0010e66:	75 0b                	jne    c0010e73 <VgaText::doANSI_SGR(int)+0x17>
c0010e68:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010e6b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e6e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e71:	eb 59                	jmp    c0010ecc <VgaText::doANSI_SGR(int)+0x70>
c0010e73:	83 fa 07             	cmp    edx,0x7
c0010e76:	75 0b                	jne    c0010e83 <VgaText::doANSI_SGR(int)+0x27>
c0010e78:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010e7b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010e7e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010e81:	eb 49                	jmp    c0010ecc <VgaText::doANSI_SGR(int)+0x70>
c0010e83:	83 fa 1b             	cmp    edx,0x1b
c0010e86:	74 e0                	je     c0010e68 <VgaText::doANSI_SGR(int)+0xc>
c0010e88:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010e8b:	83 f9 07             	cmp    ecx,0x7
c0010e8e:	77 09                	ja     c0010e99 <VgaText::doANSI_SGR(int)+0x3d>
c0010e90:	8b 14 8d 40 42 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbdc0]
c0010e97:	eb 20                	jmp    c0010eb9 <VgaText::doANSI_SGR(int)+0x5d>
c0010e99:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010e9c:	83 f9 07             	cmp    ecx,0x7
c0010e9f:	77 09                	ja     c0010eaa <VgaText::doANSI_SGR(int)+0x4e>
c0010ea1:	8b 14 8d 40 42 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbdc0]
c0010ea8:	eb 22                	jmp    c0010ecc <VgaText::doANSI_SGR(int)+0x70>
c0010eaa:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010ead:	83 f9 07             	cmp    ecx,0x7
c0010eb0:	77 0b                	ja     c0010ebd <VgaText::doANSI_SGR(int)+0x61>
c0010eb2:	8b 14 95 f8 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf08]
c0010eb9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010ebc:	c3                   	ret    
c0010ebd:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010ec0:	83 f9 07             	cmp    ecx,0x7
c0010ec3:	77 0a                	ja     c0010ecf <VgaText::doANSI_SGR(int)+0x73>
c0010ec5:	8b 14 95 d0 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf30]
c0010ecc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010ecf:	c3                   	ret    

c0010ed0 <VgaText::setDefaultBgColour(VgaColour)>:
c0010ed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ed8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010edb:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010ede:	c3                   	ret    
c0010edf:	90                   	nop

c0010ee0 <VgaText::setDefaultFgColour(VgaColour)>:
c0010ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ee4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ee8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010eeb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010eee:	c3                   	ret    
c0010eef:	90                   	nop

c0010ef0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010ef0:	53                   	push   ebx
c0010ef1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010ef5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010ef9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010efd:	51                   	push   ecx
c0010efe:	e8 cd ff ff ff       	call   c0010ed0 <VgaText::setDefaultBgColour(VgaColour)>
c0010f03:	58                   	pop    eax
c0010f04:	5a                   	pop    edx
c0010f05:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010f0d:	5b                   	pop    ebx
c0010f0e:	eb d0                	jmp    c0010ee0 <VgaText::setDefaultFgColour(VgaColour)>

c0010f10 <VgaText::setTitleTextColour(VgaColour)>:
c0010f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f18:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010f1b:	c3                   	ret    

c0010f1c <VgaText::setTitleColour(VgaColour)>:
c0010f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f24:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f27:	c3                   	ret    

c0010f28 <VgaText::setTitle(char*)>:
c0010f28:	c3                   	ret    
c0010f29:	90                   	nop

c0010f2a <VgaText::combineColours(unsigned char, unsigned char)>:
c0010f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f2e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010f33:	83 e0 0f             	and    eax,0xf
c0010f36:	c1 e2 04             	shl    edx,0x4
c0010f39:	09 d0                	or     eax,edx
c0010f3b:	c3                   	ret    

c0010f3c <VgaText::scrollScreen()>:
c0010f3c:	55                   	push   ebp
c0010f3d:	57                   	push   edi
c0010f3e:	56                   	push   esi
c0010f3f:	be 01 00 00 00       	mov    esi,0x1
c0010f44:	53                   	push   ebx
c0010f45:	83 ec 0c             	sub    esp,0xc
c0010f48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f4c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010f4f:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010f55:	31 ff                	xor    edi,edi
c0010f57:	01 e9                	add    ecx,ebp
c0010f59:	8a 01                	mov    al,BYTE PTR [ecx]
c0010f5b:	83 fe 18             	cmp    esi,0x18
c0010f5e:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010f64:	75 20                	jne    c0010f86 <VgaText::scrollScreen()+0x4a>
c0010f66:	f7 c7 01 00 00 00    	test   edi,0x1
c0010f6c:	74 15                	je     c0010f83 <VgaText::scrollScreen()+0x47>
c0010f6e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f72:	50                   	push   eax
c0010f73:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f77:	50                   	push   eax
c0010f78:	e8 ad ff ff ff       	call   c0010f2a <VgaText::combineColours(unsigned char, unsigned char)>
c0010f7d:	5a                   	pop    edx
c0010f7e:	5a                   	pop    edx
c0010f7f:	88 01                	mov    BYTE PTR [ecx],al
c0010f81:	eb 03                	jmp    c0010f86 <VgaText::scrollScreen()+0x4a>
c0010f83:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0010f86:	47                   	inc    edi
c0010f87:	41                   	inc    ecx
c0010f88:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010f8e:	75 c9                	jne    c0010f59 <VgaText::scrollScreen()+0x1d>
c0010f90:	46                   	inc    esi
c0010f91:	83 fe 19             	cmp    esi,0x19
c0010f94:	75 b9                	jne    c0010f4f <VgaText::scrollScreen()+0x13>
c0010f96:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c0010f9c:	75 1f                	jne    c0010fbd <VgaText::scrollScreen()+0x81>
c0010f9e:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010fa2:	74 05                	je     c0010fa9 <VgaText::scrollScreen()+0x6d>
c0010fa4:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010fa7:	eb 14                	jmp    c0010fbd <VgaText::scrollScreen()+0x81>
c0010fa9:	50                   	push   eax
c0010faa:	50                   	push   eax
c0010fab:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010faf:	50                   	push   eax
c0010fb0:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010fb4:	50                   	push   eax
c0010fb5:	e8 fa 84 00 00       	call   c00194b4 <HalConsoleScroll(int, int)>
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010fc1:	83 c4 0c             	add    esp,0xc
c0010fc4:	5b                   	pop    ebx
c0010fc5:	5e                   	pop    esi
c0010fc6:	5f                   	pop    edi
c0010fc7:	5d                   	pop    ebp
c0010fc8:	e9 79 fe ff ff       	jmp    c0010e46 <VgaText::updateCursor()>
c0010fcd:	90                   	nop

c0010fce <VgaText::combineCharAndColour(char, unsigned char)>:
c0010fce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010fd3:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0010fd8:	c1 e0 08             	shl    eax,0x8
c0010fdb:	09 d0                	or     eax,edx
c0010fdd:	c3                   	ret    

c0010fde <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010fde:	55                   	push   ebp
c0010fdf:	57                   	push   edi
c0010fe0:	56                   	push   esi
c0010fe1:	53                   	push   ebx
c0010fe2:	83 ec 1c             	sub    esp,0x1c
c0010fe5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010fe9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010fed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ff1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010ff5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ff9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010ffd:	0f b6 c3             	movzx  eax,bl
c0011000:	50                   	push   eax
c0011001:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0011006:	50                   	push   eax
c0011007:	e8 1e ff ff ff       	call   c0010f2a <VgaText::combineColours(unsigned char, unsigned char)>
c001100c:	5a                   	pop    edx
c001100d:	59                   	pop    ecx
c001100e:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0011013:	0f b6 c0             	movzx  eax,al
c0011016:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001101a:	50                   	push   eax
c001101b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001101f:	e8 aa ff ff ff       	call   c0010fce <VgaText::combineCharAndColour(char, unsigned char)>
c0011024:	5a                   	pop    edx
c0011025:	6b d7 50             	imul   edx,edi,0x50
c0011028:	59                   	pop    ecx
c0011029:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001102c:	01 f2                	add    edx,esi
c001102e:	0f b7 d2             	movzx  edx,dx
c0011031:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0011035:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c001103b:	75 28                	jne    c0011065 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c001103d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0011041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011045:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0011049:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001104d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011051:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011055:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011059:	83 c4 1c             	add    esp,0x1c
c001105c:	5b                   	pop    ebx
c001105d:	5e                   	pop    esi
c001105e:	5f                   	pop    edi
c001105f:	5d                   	pop    ebp
c0011060:	e9 57 85 00 00       	jmp    c00195bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011065:	83 c4 1c             	add    esp,0x1c
c0011068:	5b                   	pop    ebx
c0011069:	5e                   	pop    esi
c001106a:	5f                   	pop    edi
c001106b:	5d                   	pop    ebp
c001106c:	c3                   	ret    
c001106d:	90                   	nop

c001106e <VgaText::getCursorX()>:
c001106e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011072:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011075:	c3                   	ret    

c0011076 <VgaText::getCursorY()>:
c0011076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001107a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001107d:	c3                   	ret    

c001107e <VgaText::setCursor(int, int)>:
c001107e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011086:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011089:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001108d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011090:	e9 b1 fd ff ff       	jmp    c0010e46 <VgaText::updateCursor()>

c0011095 <setActiveTerminal(VgaText*)>:
c0011095:	53                   	push   ebx
c0011096:	83 ec 08             	sub    esp,0x8
c0011099:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001109d:	85 db                	test   ebx,ebx
c001109f:	75 11                	jne    c00110b2 <setActiveTerminal(VgaText*)+0x1d>
c00110a1:	c7 44 24 10 dc 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223dc
c00110a9:	83 c4 08             	add    esp,0x8
c00110ac:	5b                   	pop    ebx
c00110ad:	e9 88 db ff ff       	jmp    c000ec3a <KePanic(char const*)>
c00110b2:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00110b7:	85 c0                	test   eax,eax
c00110b9:	74 0c                	je     c00110c7 <setActiveTerminal(VgaText*)+0x32>
c00110bb:	83 ec 0c             	sub    esp,0xc
c00110be:	50                   	push   eax
c00110bf:	e8 82 fd ff ff       	call   c0010e46 <VgaText::updateCursor()>
c00110c4:	83 c4 10             	add    esp,0x10
c00110c7:	50                   	push   eax
c00110c8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110cb:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c00110d1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110d4:	53                   	push   ebx
c00110d5:	e8 a4 ff ff ff       	call   c001107e <VgaText::setCursor(int, int)>
c00110da:	83 c4 18             	add    esp,0x18
c00110dd:	5b                   	pop    ebx
c00110de:	c3                   	ret    
c00110df:	90                   	nop

c00110e0 <VgaText::clearScreen()>:
c00110e0:	57                   	push   edi
c00110e1:	56                   	push   esi
c00110e2:	31 f6                	xor    esi,esi
c00110e4:	53                   	push   ebx
c00110e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110e9:	52                   	push   edx
c00110ea:	6a 00                	push   0x0
c00110ec:	6a 00                	push   0x0
c00110ee:	53                   	push   ebx
c00110ef:	e8 8a ff ff ff       	call   c001107e <VgaText::setCursor(int, int)>
c00110f4:	83 c4 10             	add    esp,0x10
c00110f7:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00110fe:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011101:	7e 20                	jle    c0011123 <VgaText::clearScreen()+0x43>
c0011103:	31 ff                	xor    edi,edi
c0011105:	50                   	push   eax
c0011106:	50                   	push   eax
c0011107:	56                   	push   esi
c0011108:	57                   	push   edi
c0011109:	47                   	inc    edi
c001110a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001110d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011110:	6a 20                	push   0x20
c0011112:	53                   	push   ebx
c0011113:	e8 c6 fe ff ff       	call   c0010fde <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011118:	83 c4 20             	add    esp,0x20
c001111b:	83 ff 50             	cmp    edi,0x50
c001111e:	75 e5                	jne    c0011105 <VgaText::clearScreen()+0x25>
c0011120:	46                   	inc    esi
c0011121:	eb db                	jmp    c00110fe <VgaText::clearScreen()+0x1e>
c0011123:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001112a:	5b                   	pop    ebx
c001112b:	5e                   	pop    esi
c001112c:	5f                   	pop    edi
c001112d:	c3                   	ret    

c001112e <VgaText::setCursorX(int)>:
c001112e:	83 ec 10             	sub    esp,0x10
c0011131:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011135:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001113c:	50                   	push   eax
c001113d:	e8 3c ff ff ff       	call   c001107e <VgaText::setCursor(int, int)>
c0011142:	83 c4 1c             	add    esp,0x1c
c0011145:	c3                   	ret    

c0011146 <VgaText::setCursorY(int)>:
c0011146:	83 ec 10             	sub    esp,0x10
c0011149:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001114d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011151:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011154:	50                   	push   eax
c0011155:	e8 24 ff ff ff       	call   c001107e <VgaText::setCursor(int, int)>
c001115a:	83 c4 1c             	add    esp,0x1c
c001115d:	c3                   	ret    

c001115e <VgaText::incrementCursor(bool)>:
c001115e:	56                   	push   esi
c001115f:	53                   	push   ebx
c0011160:	51                   	push   ecx
c0011161:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011165:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011169:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001116c:	40                   	inc    eax
c001116d:	83 f8 50             	cmp    eax,0x50
c0011170:	74 05                	je     c0011177 <VgaText::incrementCursor(bool)+0x19>
c0011172:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011175:	eb 24                	jmp    c001119b <VgaText::incrementCursor(bool)+0x3d>
c0011177:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001117e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011181:	8d 50 01             	lea    edx,[eax+0x1]
c0011184:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011187:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001118a:	75 0f                	jne    c001119b <VgaText::incrementCursor(bool)+0x3d>
c001118c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001118f:	83 ec 0c             	sub    esp,0xc
c0011192:	53                   	push   ebx
c0011193:	e8 a4 fd ff ff       	call   c0010f3c <VgaText::scrollScreen()>
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	89 f0                	mov    eax,esi
c001119d:	84 c0                	test   al,al
c001119f:	74 0c                	je     c00111ad <VgaText::incrementCursor(bool)+0x4f>
c00111a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00111a5:	5a                   	pop    edx
c00111a6:	5b                   	pop    ebx
c00111a7:	5e                   	pop    esi
c00111a8:	e9 99 fc ff ff       	jmp    c0010e46 <VgaText::updateCursor()>
c00111ad:	58                   	pop    eax
c00111ae:	5b                   	pop    ebx
c00111af:	5e                   	pop    esi
c00111b0:	c3                   	ret    
c00111b1:	90                   	nop

c00111b2 <VgaText::decrementCursor(bool)>:
c00111b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00111b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111ba:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00111bd:	85 c0                	test   eax,eax
c00111bf:	74 04                	je     c00111c5 <VgaText::decrementCursor(bool)+0x13>
c00111c1:	48                   	dec    eax
c00111c2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00111c5:	84 c9                	test   cl,cl
c00111c7:	74 09                	je     c00111d2 <VgaText::decrementCursor(bool)+0x20>
c00111c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00111cd:	e9 74 fc ff ff       	jmp    c0010e46 <VgaText::updateCursor()>
c00111d2:	c3                   	ret    
c00111d3:	90                   	nop

c00111d4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00111d4:	53                   	push   ebx
c00111d5:	83 ec 08             	sub    esp,0x8
c00111d8:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00111dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111e5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00111e9:	83 f8 07             	cmp    eax,0x7
c00111ec:	75 21                	jne    c001120f <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00111ee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00111f6:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00111fe:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0011206:	83 c4 08             	add    esp,0x8
c0011209:	5b                   	pop    ebx
c001120a:	e9 9c 77 ff ff       	jmp    c00089ab <KeBeep(int, int, bool)>
c001120f:	83 f8 0d             	cmp    eax,0xd
c0011212:	75 09                	jne    c001121d <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011214:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001121b:	eb 2d                	jmp    c001124a <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001121d:	83 f8 0a             	cmp    eax,0xa
c0011220:	75 31                	jne    c0011253 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0011222:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011229:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001122c:	8d 50 01             	lea    edx,[eax+0x1]
c001122f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011232:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011235:	75 0f                	jne    c0011246 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0011237:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001123a:	83 ec 0c             	sub    esp,0xc
c001123d:	53                   	push   ebx
c001123e:	e8 f9 fc ff ff       	call   c0010f3c <VgaText::scrollScreen()>
c0011243:	83 c4 10             	add    esp,0x10
c0011246:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001124a:	83 c4 08             	add    esp,0x8
c001124d:	5b                   	pop    ebx
c001124e:	e9 f3 fb ff ff       	jmp    c0010e46 <VgaText::updateCursor()>
c0011253:	83 f8 08             	cmp    eax,0x8
c0011256:	75 25                	jne    c001127d <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0011258:	50                   	push   eax
c0011259:	50                   	push   eax
c001125a:	6a 01                	push   0x1
c001125c:	53                   	push   ebx
c001125d:	e8 50 ff ff ff       	call   c00111b2 <VgaText::decrementCursor(bool)>
c0011262:	5a                   	pop    edx
c0011263:	59                   	pop    ecx
c0011264:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011267:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001126a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001126d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011270:	6a 20                	push   0x20
c0011272:	53                   	push   ebx
c0011273:	e8 66 fd ff ff       	call   c0010fde <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011278:	83 c4 28             	add    esp,0x28
c001127b:	5b                   	pop    ebx
c001127c:	c3                   	ret    
c001127d:	83 ec 08             	sub    esp,0x8
c0011280:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011283:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011286:	51                   	push   ecx
c0011287:	52                   	push   edx
c0011288:	50                   	push   eax
c0011289:	53                   	push   ebx
c001128a:	e8 4f fd ff ff       	call   c0010fde <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001128f:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011293:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001129b:	83 c4 28             	add    esp,0x28
c001129e:	5b                   	pop    ebx
c001129f:	e9 ba fe ff ff       	jmp    c001115e <VgaText::incrementCursor(bool)>

c00112a4 <VgaText::putchar(char)>:
c00112a4:	57                   	push   edi
c00112a5:	56                   	push   esi
c00112a6:	53                   	push   ebx
c00112a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112af:	0f be c2             	movsx  eax,dl
c00112b2:	83 f8 5b             	cmp    eax,0x5b
c00112b5:	75 18                	jne    c00112cf <VgaText::putchar(char)+0x2b>
c00112b7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00112bb:	74 20                	je     c00112dd <VgaText::putchar(char)+0x39>
c00112bd:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00112c3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00112ca:	e9 b8 00 00 00       	jmp    c0011387 <VgaText::putchar(char)+0xe3>
c00112cf:	83 f8 1b             	cmp    eax,0x1b
c00112d2:	75 09                	jne    c00112dd <VgaText::putchar(char)+0x39>
c00112d4:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00112d8:	e9 aa 00 00 00       	jmp    c0011387 <VgaText::putchar(char)+0xe3>
c00112dd:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00112e1:	89 f9                	mov    ecx,edi
c00112e3:	84 c9                	test   cl,cl
c00112e5:	0f 84 8c 00 00 00    	je     c0011377 <VgaText::putchar(char)+0xd3>
c00112eb:	8d 4a c0             	lea    ecx,[edx-0x40]
c00112ee:	80 f9 3e             	cmp    cl,0x3e
c00112f1:	77 70                	ja     c0011363 <VgaText::putchar(char)+0xbf>
c00112f3:	83 f8 6d             	cmp    eax,0x6d
c00112f6:	75 3f                	jne    c0011337 <VgaText::putchar(char)+0x93>
c00112f8:	31 f6                	xor    esi,esi
c00112fa:	31 d2                	xor    edx,edx
c00112fc:	31 c0                	xor    eax,eax
c00112fe:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011301:	7e 25                	jle    c0011328 <VgaText::putchar(char)+0x84>
c0011303:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011308:	83 fa 3b             	cmp    edx,0x3b
c001130b:	75 0f                	jne    c001131c <VgaText::putchar(char)+0x78>
c001130d:	50                   	push   eax
c001130e:	53                   	push   ebx
c001130f:	e8 48 fb ff ff       	call   c0010e5c <VgaText::doANSI_SGR(int)>
c0011314:	31 d2                	xor    edx,edx
c0011316:	59                   	pop    ecx
c0011317:	58                   	pop    eax
c0011318:	31 c0                	xor    eax,eax
c001131a:	eb 09                	jmp    c0011325 <VgaText::putchar(char)+0x81>
c001131c:	6b c0 0a             	imul   eax,eax,0xa
c001131f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011323:	89 fa                	mov    edx,edi
c0011325:	46                   	inc    esi
c0011326:	eb d6                	jmp    c00112fe <VgaText::putchar(char)+0x5a>
c0011328:	84 d2                	test   dl,dl
c001132a:	74 2f                	je     c001135b <VgaText::putchar(char)+0xb7>
c001132c:	50                   	push   eax
c001132d:	53                   	push   ebx
c001132e:	e8 29 fb ff ff       	call   c0010e5c <VgaText::doANSI_SGR(int)>
c0011333:	58                   	pop    eax
c0011334:	5a                   	pop    edx
c0011335:	eb 24                	jmp    c001135b <VgaText::putchar(char)+0xb7>
c0011337:	83 f8 4a             	cmp    eax,0x4a
c001133a:	75 1f                	jne    c001135b <VgaText::putchar(char)+0xb7>
c001133c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011340:	75 19                	jne    c001135b <VgaText::putchar(char)+0xb7>
c0011342:	83 ec 0c             	sub    esp,0xc
c0011345:	53                   	push   ebx
c0011346:	e8 95 fd ff ff       	call   c00110e0 <VgaText::clearScreen()>
c001134b:	83 c4 0c             	add    esp,0xc
c001134e:	6a 00                	push   0x0
c0011350:	6a 00                	push   0x0
c0011352:	53                   	push   ebx
c0011353:	e8 26 fd ff ff       	call   c001107e <VgaText::setCursor(int, int)>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011361:	eb 24                	jmp    c0011387 <VgaText::putchar(char)+0xe3>
c0011363:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011366:	83 f8 0e             	cmp    eax,0xe
c0011369:	7f 1c                	jg     c0011387 <VgaText::putchar(char)+0xe3>
c001136b:	8d 48 01             	lea    ecx,[eax+0x1]
c001136e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011371:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011375:	eb 10                	jmp    c0011387 <VgaText::putchar(char)+0xe3>
c0011377:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001137a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001137d:	50                   	push   eax
c001137e:	53                   	push   ebx
c001137f:	e8 50 fe ff ff       	call   c00111d4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011384:	83 c4 10             	add    esp,0x10
c0011387:	5b                   	pop    ebx
c0011388:	5e                   	pop    esi
c0011389:	5f                   	pop    edi
c001138a:	c3                   	ret    
c001138b:	90                   	nop

c001138c <VgaText::putx(unsigned int)>:
c001138c:	57                   	push   edi
c001138d:	b9 11 00 00 00       	mov    ecx,0x11
c0011392:	56                   	push   esi
c0011393:	be ea 23 02 c0       	mov    esi,0xc00223ea
c0011398:	53                   	push   ebx
c0011399:	83 ec 20             	sub    esp,0x20
c001139c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00113a0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00113a4:	fc                   	cld    
c00113a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113a7:	be 08 00 00 00       	mov    esi,0x8
c00113ac:	50                   	push   eax
c00113ad:	50                   	push   eax
c00113ae:	89 d8                	mov    eax,ebx
c00113b0:	c1 e8 1c             	shr    eax,0x1c
c00113b3:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00113b8:	c1 e3 04             	shl    ebx,0x4
c00113bb:	50                   	push   eax
c00113bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113c0:	e8 df fe ff ff       	call   c00112a4 <VgaText::putchar(char)>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	4e                   	dec    esi
c00113c9:	75 e1                	jne    c00113ac <VgaText::putx(unsigned int)+0x20>
c00113cb:	83 c4 20             	add    esp,0x20
c00113ce:	5b                   	pop    ebx
c00113cf:	5e                   	pop    esi
c00113d0:	5f                   	pop    edi
c00113d1:	c3                   	ret    

c00113d2 <VgaText::puts(char const*)>:
c00113d2:	53                   	push   ebx
c00113d3:	83 ec 08             	sub    esp,0x8
c00113d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00113da:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00113dd:	85 c0                	test   eax,eax
c00113df:	74 12                	je     c00113f3 <VgaText::puts(char const*)+0x21>
c00113e1:	51                   	push   ecx
c00113e2:	43                   	inc    ebx
c00113e3:	51                   	push   ecx
c00113e4:	50                   	push   eax
c00113e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113e9:	e8 b6 fe ff ff       	call   c00112a4 <VgaText::putchar(char)>
c00113ee:	83 c4 10             	add    esp,0x10
c00113f1:	eb e7                	jmp    c00113da <VgaText::puts(char const*)+0x8>
c00113f3:	83 c4 08             	add    esp,0x8
c00113f6:	5b                   	pop    ebx
c00113f7:	c3                   	ret    

c00113f8 <VgaText::write(unsigned long long, void*, int*)>:
c00113f8:	55                   	push   ebp
c00113f9:	57                   	push   edi
c00113fa:	56                   	push   esi
c00113fb:	53                   	push   ebx
c00113fc:	83 ec 0c             	sub    esp,0xc
c00113ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011403:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011407:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001140b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011412:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011415:	39 eb                	cmp    ebx,ebp
c0011417:	74 13                	je     c001142c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011419:	50                   	push   eax
c001141a:	43                   	inc    ebx
c001141b:	50                   	push   eax
c001141c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011420:	50                   	push   eax
c0011421:	56                   	push   esi
c0011422:	e8 7d fe ff ff       	call   c00112a4 <VgaText::putchar(char)>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	eb e9                	jmp    c0011415 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001142c:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011437:	89 38                	mov    DWORD PTR [eax],edi
c0011439:	83 c4 0c             	add    esp,0xc
c001143c:	31 c0                	xor    eax,eax
c001143e:	5b                   	pop    ebx
c001143f:	5e                   	pop    esi
c0011440:	5f                   	pop    edi
c0011441:	5d                   	pop    ebp
c0011442:	c3                   	ret    
c0011443:	90                   	nop

c0011444 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011444:	55                   	push   ebp
c0011445:	57                   	push   edi
c0011446:	56                   	push   esi
c0011447:	53                   	push   ebx
c0011448:	83 ec 0c             	sub    esp,0xc
c001144b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001144f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011454:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c001145b:	50                   	push   eax
c001145c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011461:	50                   	push   eax
c0011462:	e8 c3 fa ff ff       	call   c0010f2a <VgaText::combineColours(unsigned char, unsigned char)>
c0011467:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001146b:	5a                   	pop    edx
c001146c:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001146f:	59                   	pop    ecx
c0011470:	0f b6 f8             	movzx  edi,al
c0011473:	0f b7 db             	movzx  ebx,bx
c0011476:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001147a:	01 db                	add    ebx,ebx
c001147c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001147f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011482:	85 c0                	test   eax,eax
c0011484:	0f 84 ef 00 00 00    	je     c0011579 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001148a:	83 f8 0d             	cmp    eax,0xd
c001148d:	75 0c                	jne    c001149b <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001148f:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0011496:	e9 d8 00 00 00       	jmp    c0011573 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001149b:	83 f8 0a             	cmp    eax,0xa
c001149e:	75 44                	jne    c00114e4 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c00114a0:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c00114a7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00114aa:	8d 48 01             	lea    ecx,[eax+0x1]
c00114ad:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c00114b0:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00114b3:	75 0f                	jne    c00114c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00114b5:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00114b8:	83 ec 0c             	sub    esp,0xc
c00114bb:	55                   	push   ebp
c00114bc:	e8 7b fa ff ff       	call   c0010f3c <VgaText::scrollScreen()>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	83 ec 0c             	sub    esp,0xc
c00114c7:	55                   	push   ebp
c00114c8:	e8 79 f9 ff ff       	call   c0010e46 <VgaText::updateCursor()>
c00114cd:	83 c4 10             	add    esp,0x10
c00114d0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00114d4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00114d7:	0f b7 db             	movzx  ebx,bx
c00114da:	01 db                	add    ebx,ebx
c00114dc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00114df:	e9 8f 00 00 00       	jmp    c0011573 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00114e4:	83 f8 08             	cmp    eax,0x8
c00114e7:	75 34                	jne    c001151d <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00114e9:	51                   	push   ecx
c00114ea:	51                   	push   ecx
c00114eb:	6a 01                	push   0x1
c00114ed:	55                   	push   ebp
c00114ee:	e8 bf fc ff ff       	call   c00111b2 <VgaText::decrementCursor(bool)>
c00114f3:	5b                   	pop    ebx
c00114f4:	58                   	pop    eax
c00114f5:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00114f8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00114fb:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00114fe:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0011501:	6a 20                	push   0x20
c0011503:	55                   	push   ebp
c0011504:	e8 d5 fa ff ff       	call   c0010fde <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011509:	83 c4 20             	add    esp,0x20
c001150c:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011510:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0011513:	0f b7 db             	movzx  ebx,bx
c0011516:	01 db                	add    ebx,ebx
c0011518:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001151b:	eb 56                	jmp    c0011573 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001151d:	52                   	push   edx
c001151e:	52                   	push   edx
c001151f:	57                   	push   edi
c0011520:	50                   	push   eax
c0011521:	e8 a8 fa ff ff       	call   c0010fce <VgaText::combineCharAndColour(char, unsigned char)>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	66 89 03             	mov    WORD PTR [ebx],ax
c001152c:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c0011532:	75 1d                	jne    c0011551 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0011534:	83 ec 0c             	sub    esp,0xc
c0011537:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c001153a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c001153d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011541:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011545:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011548:	50                   	push   eax
c0011549:	e8 6e 80 00 00       	call   c00195bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c001154e:	83 c4 20             	add    esp,0x20
c0011551:	50                   	push   eax
c0011552:	83 c3 02             	add    ebx,0x2
c0011555:	50                   	push   eax
c0011556:	6a 00                	push   0x0
c0011558:	55                   	push   ebp
c0011559:	e8 00 fc ff ff       	call   c001115e <VgaText::incrementCursor(bool)>
c001155e:	83 c4 10             	add    esp,0x10
c0011561:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0011565:	75 0c                	jne    c0011573 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011567:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001156b:	0f b7 db             	movzx  ebx,bx
c001156e:	01 db                	add    ebx,ebx
c0011570:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011573:	46                   	inc    esi
c0011574:	e9 06 ff ff ff       	jmp    c001147f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0011579:	83 ec 0c             	sub    esp,0xc
c001157c:	55                   	push   ebp
c001157d:	e8 c4 f8 ff ff       	call   c0010e46 <VgaText::updateCursor()>
c0011582:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0011589:	83 c4 1c             	add    esp,0x1c
c001158c:	5b                   	pop    ebx
c001158d:	5e                   	pop    esi
c001158e:	5f                   	pop    edi
c001158f:	5d                   	pop    ebp
c0011590:	c3                   	ret    
c0011591:	90                   	nop

c0011592 <VgaText::VgaText(char const*)>:
c0011592:	56                   	push   esi
c0011593:	53                   	push   ebx
c0011594:	83 ec 04             	sub    esp,0x4
c0011597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001159b:	83 ec 08             	sub    esp,0x8
c001159e:	6a 00                	push   0x0
c00115a0:	50                   	push   eax
c00115a1:	e8 ec 05 00 00       	call   c0011b92 <UnixFile::UnixFile(int)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	ba 10 24 02 c0       	mov    edx,0xc0022410
c00115ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b2:	89 10                	mov    DWORD PTR [eax],edx
c00115b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b8:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00115bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c3:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00115ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ce:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00115d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d6:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00115da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115de:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00115e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115e9:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00115f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f4:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00115fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ff:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001160a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0011611:	83 ec 0c             	sub    esp,0xc
c0011614:	6a 01                	push   0x1
c0011616:	e8 c6 09 00 00       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c001161b:	83 c4 10             	add    esp,0x10
c001161e:	89 c2                	mov    edx,eax
c0011620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011624:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011627:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c001162d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011631:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011634:	89 c6                	mov    esi,eax
c0011636:	e8 f9 d7 ff ff       	call   c000ee34 <Phys::allocatePage()>
c001163b:	68 05 0c 00 00       	push   0xc05
c0011640:	56                   	push   esi
c0011641:	50                   	push   eax
c0011642:	53                   	push   ebx
c0011643:	e8 78 10 00 00       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011648:	83 c4 10             	add    esp,0x10
c001164b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001164f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011652:	83 ec 04             	sub    esp,0x4
c0011655:	68 a0 0f 00 00       	push   0xfa0
c001165a:	6a 00                	push   0x0
c001165c:	50                   	push   eax
c001165d:	e8 8e ee fe ff       	call   c00004f0 <memset>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	83 ec 04             	sub    esp,0x4
c0011668:	6a 00                	push   0x0
c001166a:	6a 07                	push   0x7
c001166c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011670:	e8 7b f8 ff ff       	call   c0010ef0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011675:	83 c4 10             	add    esp,0x10
c0011678:	83 ec 04             	sub    esp,0x4
c001167b:	6a 00                	push   0x0
c001167d:	6a 00                	push   0x0
c001167f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011683:	e8 f6 f9 ff ff       	call   c001107e <VgaText::setCursor(int, int)>
c0011688:	83 c4 10             	add    esp,0x10
c001168b:	83 ec 0c             	sub    esp,0xc
c001168e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011692:	e8 49 fa ff ff       	call   c00110e0 <VgaText::clearScreen()>
c0011697:	83 c4 10             	add    esp,0x10
c001169a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001169e:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00116a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a6:	05 82 00 00 00       	add    eax,0x82
c00116ab:	83 ec 04             	sub    esp,0x4
c00116ae:	68 80 00 00 00       	push   0x80
c00116b3:	6a 00                	push   0x0
c00116b5:	50                   	push   eax
c00116b6:	e8 35 ee fe ff       	call   c00004f0 <memset>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116c2:	05 02 01 00 00       	add    eax,0x102
c00116c7:	83 ec 04             	sub    esp,0x4
c00116ca:	68 80 00 00 00       	push   0x80
c00116cf:	6a 00                	push   0x0
c00116d1:	50                   	push   eax
c00116d2:	e8 19 ee fe ff       	call   c00004f0 <memset>
c00116d7:	83 c4 10             	add    esp,0x10
c00116da:	90                   	nop
c00116db:	83 c4 04             	add    esp,0x4
c00116de:	5b                   	pop    ebx
c00116df:	5e                   	pop    esi
c00116e0:	c3                   	ret    
c00116e1:	90                   	nop

c00116e2 <VgaText::receiveKey(unsigned char)>:
c00116e2:	55                   	push   ebp
c00116e3:	57                   	push   edi
c00116e4:	56                   	push   esi
c00116e5:	53                   	push   ebx
c00116e6:	83 ec 2c             	sub    esp,0x2c
c00116e9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00116ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00116f1:	89 fd                	mov    ebp,edi
c00116f3:	81 e5 ff 00 00 00    	and    ebp,0xff
c00116f9:	0f 84 48 01 00 00    	je     c0011847 <VgaText::receiveKey(unsigned char)+0x165>
c00116ff:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0011705:	83 fd 08             	cmp    ebp,0x8
c0011708:	75 6a                	jne    c0011774 <VgaText::receiveKey(unsigned char)+0x92>
c001170a:	83 ec 0c             	sub    esp,0xc
c001170d:	56                   	push   esi
c001170e:	e8 6d ee fe ff       	call   c0000580 <strlen>
c0011713:	83 c4 10             	add    esp,0x10
c0011716:	85 c0                	test   eax,eax
c0011718:	0f 84 ef 00 00 00    	je     c001180d <VgaText::receiveKey(unsigned char)+0x12b>
c001171e:	50                   	push   eax
c001171f:	50                   	push   eax
c0011720:	6a 08                	push   0x8
c0011722:	53                   	push   ebx
c0011723:	e8 7c fb ff ff       	call   c00112a4 <VgaText::putchar(char)>
c0011728:	89 34 24             	mov    DWORD PTR [esp],esi
c001172b:	e8 50 ee fe ff       	call   c0000580 <strlen>
c0011730:	83 c4 10             	add    esp,0x10
c0011733:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001173b:	83 fa 1f             	cmp    edx,0x1f
c001173e:	89 d0                	mov    eax,edx
c0011740:	7f 1c                	jg     c001175e <VgaText::receiveKey(unsigned char)+0x7c>
c0011742:	83 e8 08             	sub    eax,0x8
c0011745:	3c 02                	cmp    al,0x2
c0011747:	76 15                	jbe    c001175e <VgaText::receiveKey(unsigned char)+0x7c>
c0011749:	83 fa 0d             	cmp    edx,0xd
c001174c:	74 10                	je     c001175e <VgaText::receiveKey(unsigned char)+0x7c>
c001174e:	57                   	push   edi
c001174f:	57                   	push   edi
c0011750:	68 fb 23 02 c0       	push   0xc00223fb
c0011755:	53                   	push   ebx
c0011756:	e8 77 fc ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	83 ec 0c             	sub    esp,0xc
c0011761:	56                   	push   esi
c0011762:	e8 19 ee fe ff       	call   c0000580 <strlen>
c0011767:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001176f:	e9 96 00 00 00       	jmp    c001180a <VgaText::receiveKey(unsigned char)+0x128>
c0011774:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001177a:	83 ec 0c             	sub    esp,0xc
c001177d:	50                   	push   eax
c001177e:	e8 fd ed fe ff       	call   c0000580 <strlen>
c0011783:	89 34 24             	mov    DWORD PTR [esp],esi
c0011786:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001178a:	e8 f1 ed fe ff       	call   c0000580 <strlen>
c001178f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001179a:	3d 80 00 00 00       	cmp    eax,0x80
c001179f:	0f 87 a2 00 00 00    	ja     c0011847 <VgaText::receiveKey(unsigned char)+0x165>
c00117a5:	8d 47 ff             	lea    eax,[edi-0x1]
c00117a8:	3c 1e                	cmp    al,0x1e
c00117aa:	77 35                	ja     c00117e1 <VgaText::receiveKey(unsigned char)+0xff>
c00117ac:	8d 47 f7             	lea    eax,[edi-0x9]
c00117af:	3c 01                	cmp    al,0x1
c00117b1:	76 2e                	jbe    c00117e1 <VgaText::receiveKey(unsigned char)+0xff>
c00117b3:	83 fd 0d             	cmp    ebp,0xd
c00117b6:	74 29                	je     c00117e1 <VgaText::receiveKey(unsigned char)+0xff>
c00117b8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00117bb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00117be:	68 01 24 02 c0       	push   0xc0022401
c00117c3:	53                   	push   ebx
c00117c4:	e8 7b fc ff ff       	call   c0011444 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00117c9:	8d 47 40             	lea    eax,[edi+0x40]
c00117cc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00117cf:	0f b6 c0             	movzx  eax,al
c00117d2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00117d5:	50                   	push   eax
c00117d6:	53                   	push   ebx
c00117d7:	e8 f8 f9 ff ff       	call   c00111d4 <VgaText::putchar(char, VgaColour, VgaColour)>
c00117dc:	83 c4 20             	add    esp,0x20
c00117df:	eb 11                	jmp    c00117f2 <VgaText::receiveKey(unsigned char)+0x110>
c00117e1:	51                   	push   ecx
c00117e2:	89 f8                	mov    eax,edi
c00117e4:	51                   	push   ecx
c00117e5:	0f be c0             	movsx  eax,al
c00117e8:	50                   	push   eax
c00117e9:	53                   	push   ebx
c00117ea:	e8 b5 fa ff ff       	call   c00112a4 <VgaText::putchar(char)>
c00117ef:	83 c4 10             	add    esp,0x10
c00117f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00117f7:	89 f8                	mov    eax,edi
c00117f9:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00117fd:	52                   	push   edx
c00117fe:	52                   	push   edx
c00117ff:	8d 44 24 26          	lea    eax,[esp+0x26]
c0011803:	50                   	push   eax
c0011804:	56                   	push   esi
c0011805:	e8 66 f0 fe ff       	call   c0000870 <strcat>
c001180a:	83 c4 10             	add    esp,0x10
c001180d:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0011814:	75 0f                	jne    c0011825 <VgaText::receiveKey(unsigned char)+0x143>
c0011816:	83 fd 1c             	cmp    ebp,0x1c
c0011819:	77 2c                	ja     c0011847 <VgaText::receiveKey(unsigned char)+0x165>
c001181b:	b8 08 04 00 10       	mov    eax,0x10000408
c0011820:	0f a3 e8             	bt     eax,ebp
c0011823:	73 22                	jae    c0011847 <VgaText::receiveKey(unsigned char)+0x165>
c0011825:	50                   	push   eax
c0011826:	81 c3 02 01 00 00    	add    ebx,0x102
c001182c:	50                   	push   eax
c001182d:	56                   	push   esi
c001182e:	53                   	push   ebx
c001182f:	e8 3c f0 fe ff       	call   c0000870 <strcat>
c0011834:	83 c4 0c             	add    esp,0xc
c0011837:	68 80 00 00 00       	push   0x80
c001183c:	6a 00                	push   0x0
c001183e:	56                   	push   esi
c001183f:	e8 ac ec fe ff       	call   c00004f0 <memset>
c0011844:	83 c4 10             	add    esp,0x10
c0011847:	83 c4 2c             	add    esp,0x2c
c001184a:	5b                   	pop    ebx
c001184b:	5e                   	pop    esi
c001184c:	5f                   	pop    edi
c001184d:	5d                   	pop    ebp
c001184e:	c3                   	ret    
c001184f:	90                   	nop

c0011850 <VgaText::doUpdate()>:
c0011850:	c3                   	ret    
c0011851:	66 90                	xchg   ax,ax
c0011853:	90                   	nop

c0011854 <TSS::TSS()>:
c0011854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011858:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001185f:	90                   	nop
c0011860:	c3                   	ret    
c0011861:	90                   	nop
c0011862:	66 90                	xchg   ax,ax

c0011864 <TSS::setESP(unsigned long)>:
c0011864:	55                   	push   ebp
c0011865:	89 e5                	mov    ebp,esp
c0011867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001186d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011870:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011873:	90                   	nop
c0011874:	5d                   	pop    ebp
c0011875:	c3                   	ret    
c0011876:	66 90                	xchg   ax,ax

c0011878 <TSS::flush()>:
c0011878:	55                   	push   ebp
c0011879:	89 e5                	mov    ebp,esp
c001187b:	83 ec 10             	sub    esp,0x10
c001187e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011881:	8b 00                	mov    eax,DWORD PTR [eax]
c0011883:	83 c8 03             	or     eax,0x3
c0011886:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001188a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001188e:	66 89 d0             	mov    ax,dx
c0011891:	0f 00 d8             	ltr    ax
c0011894:	90                   	nop
c0011895:	c9                   	leave  
c0011896:	c3                   	ret    
c0011897:	90                   	nop

c0011898 <TSS::setup(unsigned long, unsigned long)>:
c0011898:	55                   	push   ebp
c0011899:	89 e5                	mov    ebp,esp
c001189b:	83 ec 18             	sub    esp,0x18
c001189e:	83 ec 0c             	sub    esp,0xc
c00118a1:	6a 68                	push   0x68
c00118a3:	e8 3e d0 ff ff       	call   c000e8e6 <malloc>
c00118a8:	83 c4 10             	add    esp,0x10
c00118ab:	89 c2                	mov    edx,eax
c00118ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118b9:	83 ec 08             	sub    esp,0x8
c00118bc:	50                   	push   eax
c00118bd:	68 24 24 02 c0       	push   0xc0022424
c00118c2:	e8 87 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00118c7:	83 c4 10             	add    esp,0x10
c00118ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d0:	83 ec 04             	sub    esp,0x4
c00118d3:	6a 68                	push   0x68
c00118d5:	6a 00                	push   0x0
c00118d7:	50                   	push   eax
c00118d8:	e8 13 ec fe ff       	call   c00004f0 <memset>
c00118dd:	83 c4 10             	add    esp,0x10
c00118e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118e6:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00118ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f2:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00118f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118fe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011901:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011907:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001190a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011913:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011916:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001191c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011922:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011937:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001193a:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011943:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011946:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001194c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011952:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011955:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001195e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011961:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011967:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001196a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011971:	83 ec 0c             	sub    esp,0xc
c0011974:	68 3b 24 02 c0       	push   0xc002243b
c0011979:	e8 d0 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011984:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011987:	0f 20 da             	mov    edx,cr3
c001198a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001198d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011990:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011993:	83 ec 0c             	sub    esp,0xc
c0011996:	68 3e 24 02 c0       	push   0xc002243e
c001199b:	e8 ae 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119a0:	83 c4 10             	add    esp,0x10
c00119a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119a9:	83 ec 08             	sub    esp,0x8
c00119ac:	50                   	push   eax
c00119ad:	8d 45 ec             	lea    eax,[ebp-0x14]
c00119b0:	50                   	push   eax
c00119b1:	e8 78 c6 ff ff       	call   c000e02e <GDTEntry::setBase(unsigned int)>
c00119b6:	83 c4 10             	add    esp,0x10
c00119b9:	83 ec 08             	sub    esp,0x8
c00119bc:	6a 68                	push   0x68
c00119be:	8d 45 ec             	lea    eax,[ebp-0x14]
c00119c1:	50                   	push   eax
c00119c2:	e8 83 c6 ff ff       	call   c000e04a <GDTEntry::setLimit(unsigned int)>
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00119ce:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00119d1:	83 e0 0f             	and    eax,0xf
c00119d4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00119d7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00119da:	83 c8 40             	or     eax,0x40
c00119dd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00119e0:	83 ec 0c             	sub    esp,0xc
c00119e3:	68 41 24 02 c0       	push   0xc0022441
c00119e8:	e8 61 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119ed:	83 c4 10             	add    esp,0x10
c00119f0:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119f5:	83 ec 08             	sub    esp,0x8
c00119f8:	50                   	push   eax
c00119f9:	68 44 24 02 c0       	push   0xc0022444
c00119fe:	e8 4b 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a03:	83 c4 10             	add    esp,0x10
c0011a06:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011a0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a11:	83 ec 08             	sub    esp,0x8
c0011a14:	50                   	push   eax
c0011a15:	68 55 24 02 c0       	push   0xc0022455
c0011a1a:	e8 2f 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011a27:	83 ec 08             	sub    esp,0x8
c0011a2a:	50                   	push   eax
c0011a2b:	68 44 24 02 c0       	push   0xc0022444
c0011a30:	e8 19 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011a3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a43:	05 64 01 00 00       	add    eax,0x164
c0011a48:	83 ec 04             	sub    esp,0x4
c0011a4b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011a4e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011a51:	50                   	push   eax
c0011a52:	e8 27 c6 ff ff       	call   c000e07e <GDT::addEntry(GDTEntry)>
c0011a57:	83 c4 10             	add    esp,0x10
c0011a5a:	89 c2                	mov    edx,eax
c0011a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a5f:	89 10                	mov    DWORD PTR [eax],edx
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	68 6a 24 02 c0       	push   0xc002246a
c0011a69:	e8 e0 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a6e:	83 c4 10             	add    esp,0x10
c0011a71:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011a76:	83 ec 08             	sub    esp,0x8
c0011a79:	50                   	push   eax
c0011a7a:	68 44 24 02 c0       	push   0xc0022444
c0011a7f:	e8 ca 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a84:	83 c4 10             	add    esp,0x10
c0011a87:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011a8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a92:	05 64 01 00 00       	add    eax,0x164
c0011a97:	83 ec 0c             	sub    esp,0xc
c0011a9a:	50                   	push   eax
c0011a9b:	e8 08 c6 ff ff       	call   c000e0a8 <GDT::flush()>
c0011aa0:	83 c4 10             	add    esp,0x10
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	68 6d 24 02 c0       	push   0xc002246d
c0011aab:	e8 9e 54 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ab8:	c9                   	leave  
c0011ab9:	c3                   	ret    

c0011aba <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011abe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011ac2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ac5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011aca:	75 08                	jne    c0011ad4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011acc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011ad2:	eb 38                	jmp    c0011b0c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011ad4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ad9:	75 17                	jne    c0011af2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011adb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ae3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ae9:	8b 10                	mov    edx,DWORD PTR [eax]
c0011aeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011aef:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011af2:	89 c1                	mov    ecx,eax
c0011af4:	83 e1 fd             	and    ecx,0xfffffffd
c0011af7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011afd:	74 cd                	je     c0011acc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011aff:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011b04:	83 e0 ef             	and    eax,0xffffffef
c0011b07:	83 f8 08             	cmp    eax,0x8
c0011b0a:	76 c0                	jbe    c0011acc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011b0c:	31 c0                	xor    eax,eax
c0011b0e:	c3                   	ret    
c0011b0f:	90                   	nop

c0011b10 <ReservedFilename::isAtty()>:
c0011b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011b17:	31 c0                	xor    eax,eax
c0011b19:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011b1f:	74 09                	je     c0011b2a <ReservedFilename::isAtty()+0x1a>
c0011b21:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011b27:	0f 94 c0             	sete   al
c0011b2a:	c3                   	ret    
c0011b2b:	90                   	nop

c0011b2c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b3b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b40:	75 08                	jne    c0011b4a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011b42:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b48:	eb 3d                	jmp    c0011b87 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011b4a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b4f:	75 17                	jne    c0011b68 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011b51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b5f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b65:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011b68:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011b6d:	75 04                	jne    c0011b73 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011b6f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011b71:	eb 14                	jmp    c0011b87 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011b73:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011b78:	74 c8                	je     c0011b42 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011b7a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011b7f:	83 e0 ef             	and    eax,0xffffffef
c0011b82:	83 f8 08             	cmp    eax,0x8
c0011b85:	76 bb                	jbe    c0011b42 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011b87:	31 c0                	xor    eax,eax
c0011b89:	c3                   	ret    

c0011b8a <UnixFile::getFileDescriptor()>:
c0011b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b91:	c3                   	ret    

c0011b92 <UnixFile::UnixFile(int)>:
c0011b92:	53                   	push   ebx
c0011b93:	83 ec 28             	sub    esp,0x28
c0011b96:	ba 98 24 02 c0       	mov    edx,0xc0022498
c0011b9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b9f:	89 10                	mov    DWORD PTR [eax],edx
c0011ba1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011ba9:	0f 8f 90 01 00 00    	jg     c0011d3f <UnixFile::UnixFile(int)+0x1ad>
c0011baf:	a1 80 42 02 c0       	mov    eax,ds:0xc0024280
c0011bb4:	8d 50 01             	lea    edx,[eax+0x1]
c0011bb7:	89 15 80 42 02 c0    	mov    DWORD PTR ds:0xc0024280,edx
c0011bbd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011bc1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011bc4:	83 ec 08             	sub    esp,0x8
c0011bc7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011bcb:	68 b8 be 02 c0       	push   0xc002beb8
c0011bd0:	e8 77 e6 00 00       	call   c002024c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011bd5:	83 c4 10             	add    esp,0x10
c0011bd8:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011bdd:	83 f0 01             	xor    eax,0x1
c0011be0:	0f b6 c0             	movzx  eax,al
c0011be3:	85 c0                	test   eax,eax
c0011be5:	0f 84 55 01 00 00    	je     c0011d40 <UnixFile::UnixFile(int)+0x1ae>
c0011beb:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011bf2:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011bfa:	83 ec 0c             	sub    esp,0xc
c0011bfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c01:	e8 e0 cc ff ff       	call   c000e8e6 <malloc>
c0011c06:	83 c4 10             	add    esp,0x10
c0011c09:	89 c3                	mov    ebx,eax
c0011c0b:	83 ec 08             	sub    esp,0x8
c0011c0e:	68 03 ff ff 0f       	push   0xfffff03
c0011c13:	53                   	push   ebx
c0011c14:	e8 2d 01 00 00       	call   c0011d46 <ReservedFilename::ReservedFilename(int)>
c0011c19:	83 c4 10             	add    esp,0x10
c0011c1c:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011c22:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011c2a:	83 ec 0c             	sub    esp,0xc
c0011c2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c31:	e8 b0 cc ff ff       	call   c000e8e6 <malloc>
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	89 c3                	mov    ebx,eax
c0011c3b:	83 ec 08             	sub    esp,0x8
c0011c3e:	68 01 ff ff 0f       	push   0xfffff01
c0011c43:	53                   	push   ebx
c0011c44:	e8 fd 00 00 00       	call   c0011d46 <ReservedFilename::ReservedFilename(int)>
c0011c49:	83 c4 10             	add    esp,0x10
c0011c4c:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011c52:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011c5a:	83 ec 0c             	sub    esp,0xc
c0011c5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011c61:	e8 80 cc ff ff       	call   c000e8e6 <malloc>
c0011c66:	83 c4 10             	add    esp,0x10
c0011c69:	89 c3                	mov    ebx,eax
c0011c6b:	83 ec 08             	sub    esp,0x8
c0011c6e:	68 00 ff ff 0f       	push   0xfffff00
c0011c73:	53                   	push   ebx
c0011c74:	e8 cd 00 00 00       	call   c0011d46 <ReservedFilename::ReservedFilename(int)>
c0011c79:	83 c4 10             	add    esp,0x10
c0011c7c:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011c82:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011c91:	e8 50 cc ff ff       	call   c000e8e6 <malloc>
c0011c96:	83 c4 10             	add    esp,0x10
c0011c99:	89 c3                	mov    ebx,eax
c0011c9b:	83 ec 08             	sub    esp,0x8
c0011c9e:	68 02 ff ff 0f       	push   0xfffff02
c0011ca3:	53                   	push   ebx
c0011ca4:	e8 9d 00 00 00       	call   c0011d46 <ReservedFilename::ReservedFilename(int)>
c0011ca9:	83 c4 10             	add    esp,0x10
c0011cac:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011cb2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011cba:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011cbf:	7f 7f                	jg     c0011d40 <UnixFile::UnixFile(int)+0x1ae>
c0011cc1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011cc9:	83 ec 0c             	sub    esp,0xc
c0011ccc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011cd0:	e8 11 cc ff ff       	call   c000e8e6 <malloc>
c0011cd5:	83 c4 10             	add    esp,0x10
c0011cd8:	89 c3                	mov    ebx,eax
c0011cda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cde:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011ce3:	83 ec 08             	sub    esp,0x8
c0011ce6:	50                   	push   eax
c0011ce7:	53                   	push   ebx
c0011ce8:	e8 59 00 00 00       	call   c0011d46 <ReservedFilename::ReservedFilename(int)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cf4:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011cfb:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d0a:	e8 d7 cb ff ff       	call   c000e8e6 <malloc>
c0011d0f:	83 c4 10             	add    esp,0x10
c0011d12:	89 c3                	mov    ebx,eax
c0011d14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d18:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011d1d:	83 ec 08             	sub    esp,0x8
c0011d20:	50                   	push   eax
c0011d21:	53                   	push   ebx
c0011d22:	e8 1f 00 00 00       	call   c0011d46 <ReservedFilename::ReservedFilename(int)>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d2e:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011d35:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011d3a:	e9 7b ff ff ff       	jmp    c0011cba <UnixFile::UnixFile(int)+0x128>
c0011d3f:	90                   	nop
c0011d40:	83 c4 28             	add    esp,0x28
c0011d43:	5b                   	pop    ebx
c0011d44:	c3                   	ret    
c0011d45:	90                   	nop

c0011d46 <ReservedFilename::ReservedFilename(int)>:
c0011d46:	83 ec 0c             	sub    esp,0xc
c0011d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d4d:	83 ec 08             	sub    esp,0x8
c0011d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d54:	50                   	push   eax
c0011d55:	e8 38 fe ff ff       	call   c0011b92 <UnixFile::UnixFile(int)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	ba b4 24 02 c0       	mov    edx,0xc00224b4
c0011d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d66:	89 10                	mov    DWORD PTR [eax],edx
c0011d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011d73:	90                   	nop
c0011d74:	83 c4 0c             	add    esp,0xc
c0011d77:	c3                   	ret    

c0011d78 <UnixFile::~UnixFile()>:
c0011d78:	83 ec 1c             	sub    esp,0x1c
c0011d7b:	ba 98 24 02 c0       	mov    edx,0xc0022498
c0011d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d84:	89 10                	mov    DWORD PTR [eax],edx
c0011d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d8d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011d92:	7f 76                	jg     c0011e0a <UnixFile::~UnixFile()+0x92>
c0011d94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d9c:	83 ec 0c             	sub    esp,0xc
c0011d9f:	68 b8 be 02 c0       	push   0xc002beb8
c0011da4:	e8 77 e5 00 00       	call   c0020320 <LinkedList<UnixFile>::getFirstElement()>
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011db0:	83 ec 0c             	sub    esp,0xc
c0011db3:	68 b8 be 02 c0       	push   0xc002beb8
c0011db8:	e8 6b e5 00 00       	call   c0020328 <LinkedList<UnixFile>::removeFirst()>
c0011dbd:	83 c4 10             	add    esp,0x10
c0011dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dc4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011dc8:	74 43                	je     c0011e0d <UnixFile::~UnixFile()+0x95>
c0011dca:	83 ec 08             	sub    esp,0x8
c0011dcd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011dd1:	68 b8 be 02 c0       	push   0xc002beb8
c0011dd6:	e8 71 e4 00 00       	call   c002024c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011ddb:	83 c4 10             	add    esp,0x10
c0011dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011de2:	8d 50 01             	lea    edx,[eax+0x1]
c0011de5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011de9:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011dee:	0f 94 c0             	sete   al
c0011df1:	0f b6 c0             	movzx  eax,al
c0011df4:	85 c0                	test   eax,eax
c0011df6:	74 a4                	je     c0011d9c <UnixFile::~UnixFile()+0x24>
c0011df8:	83 ec 0c             	sub    esp,0xc
c0011dfb:	68 70 24 02 c0       	push   0xc0022470
c0011e00:	e8 35 ce ff ff       	call   c000ec3a <KePanic(char const*)>
c0011e05:	83 c4 10             	add    esp,0x10
c0011e08:	eb 92                	jmp    c0011d9c <UnixFile::~UnixFile()+0x24>
c0011e0a:	90                   	nop
c0011e0b:	eb 01                	jmp    c0011e0e <UnixFile::~UnixFile()+0x96>
c0011e0d:	90                   	nop
c0011e0e:	90                   	nop
c0011e0f:	83 c4 1c             	add    esp,0x1c
c0011e12:	c3                   	ret    
c0011e13:	90                   	nop

c0011e14 <UnixFile::~UnixFile()>:
c0011e14:	83 ec 0c             	sub    esp,0xc
c0011e17:	83 ec 0c             	sub    esp,0xc
c0011e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e1e:	e8 55 ff ff ff       	call   c0011d78 <UnixFile::~UnixFile()>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	83 ec 08             	sub    esp,0x8
c0011e29:	6a 0c                	push   0xc
c0011e2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e2f:	e8 2f a8 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	83 c4 0c             	add    esp,0xc
c0011e3a:	c3                   	ret    
c0011e3b:	90                   	nop

c0011e3c <ReservedFilename::~ReservedFilename()>:
c0011e3c:	83 ec 0c             	sub    esp,0xc
c0011e3f:	ba b4 24 02 c0       	mov    edx,0xc00224b4
c0011e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e48:	89 10                	mov    DWORD PTR [eax],edx
c0011e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e4e:	83 ec 0c             	sub    esp,0xc
c0011e51:	50                   	push   eax
c0011e52:	e8 21 ff ff ff       	call   c0011d78 <UnixFile::~UnixFile()>
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	90                   	nop
c0011e5b:	83 c4 0c             	add    esp,0xc
c0011e5e:	c3                   	ret    
c0011e5f:	90                   	nop

c0011e60 <ReservedFilename::~ReservedFilename()>:
c0011e60:	83 ec 0c             	sub    esp,0xc
c0011e63:	83 ec 0c             	sub    esp,0xc
c0011e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e6a:	e8 cd ff ff ff       	call   c0011e3c <ReservedFilename::~ReservedFilename()>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	83 ec 08             	sub    esp,0x8
c0011e75:	6a 0c                	push   0xc
c0011e77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e7b:	e8 e3 a7 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0011e80:	83 c4 10             	add    esp,0x10
c0011e83:	83 c4 0c             	add    esp,0xc
c0011e86:	c3                   	ret    

c0011e87 <KeGetFileFromDescriptor(int)>:
c0011e87:	53                   	push   ebx
c0011e88:	83 ec 08             	sub    esp,0x8
c0011e8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e8f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011e95:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011e9b:	7f 2c                	jg     c0011ec9 <KeGetFileFromDescriptor(int)+0x42>
c0011e9d:	83 ec 0c             	sub    esp,0xc
c0011ea0:	68 b8 be 02 c0       	push   0xc002beb8
c0011ea5:	e8 76 e4 00 00       	call   c0020320 <LinkedList<UnixFile>::getFirstElement()>
c0011eaa:	83 c4 10             	add    esp,0x10
c0011ead:	85 c0                	test   eax,eax
c0011eaf:	75 04                	jne    c0011eb5 <KeGetFileFromDescriptor(int)+0x2e>
c0011eb1:	31 c0                	xor    eax,eax
c0011eb3:	eb 6e                	jmp    c0011f23 <KeGetFileFromDescriptor(int)+0x9c>
c0011eb5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011eb8:	74 69                	je     c0011f23 <KeGetFileFromDescriptor(int)+0x9c>
c0011eba:	52                   	push   edx
c0011ebb:	52                   	push   edx
c0011ebc:	50                   	push   eax
c0011ebd:	68 b8 be 02 c0       	push   0xc002beb8
c0011ec2:	e8 03 e5 00 00       	call   c00203ca <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011ec7:	eb e1                	jmp    c0011eaa <KeGetFileFromDescriptor(int)+0x23>
c0011ec9:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011ecf:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011ed4:	74 4d                	je     c0011f23 <KeGetFileFromDescriptor(int)+0x9c>
c0011ed6:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011edc:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011ee1:	74 40                	je     c0011f23 <KeGetFileFromDescriptor(int)+0x9c>
c0011ee3:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ee9:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011eee:	74 33                	je     c0011f23 <KeGetFileFromDescriptor(int)+0x9c>
c0011ef0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ef6:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011efb:	74 26                	je     c0011f23 <KeGetFileFromDescriptor(int)+0x9c>
c0011efd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011f03:	83 f8 08             	cmp    eax,0x8
c0011f06:	77 09                	ja     c0011f11 <KeGetFileFromDescriptor(int)+0x8a>
c0011f08:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011f0f:	eb 12                	jmp    c0011f23 <KeGetFileFromDescriptor(int)+0x9c>
c0011f11:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011f17:	83 fb 08             	cmp    ebx,0x8
c0011f1a:	77 95                	ja     c0011eb1 <KeGetFileFromDescriptor(int)+0x2a>
c0011f1c:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011f23:	83 c4 08             	add    esp,0x8
c0011f26:	5b                   	pop    ebx
c0011f27:	c3                   	ret    

c0011f28 <__static_initialization_and_destruction_0(int, int)>:
c0011f28:	83 ec 0c             	sub    esp,0xc
c0011f2b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011f30:	75 34                	jne    c0011f66 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f32:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011f3a:	75 2a                	jne    c0011f66 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f3c:	83 ec 0c             	sub    esp,0xc
c0011f3f:	68 b8 be 02 c0       	push   0xc002beb8
c0011f44:	e8 c1 e2 00 00       	call   c002020a <LinkedList<UnixFile>::LinkedList()>
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	83 ec 04             	sub    esp,0x4
c0011f4f:	68 ec 3a 02 c0       	push   0xc0023aec
c0011f54:	68 b8 be 02 c0       	push   0xc002beb8
c0011f59:	68 08 02 02 c0       	push   0xc0020208
c0011f5e:	e8 b0 a6 ff ff       	call   c000c613 <__cxa_atexit>
c0011f63:	83 c4 10             	add    esp,0x10
c0011f66:	90                   	nop
c0011f67:	83 c4 0c             	add    esp,0xc
c0011f6a:	c3                   	ret    

c0011f6b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011f6b:	83 ec 0c             	sub    esp,0xc
c0011f6e:	83 ec 08             	sub    esp,0x8
c0011f71:	68 ff ff 00 00       	push   0xffff
c0011f76:	6a 01                	push   0x1
c0011f78:	e8 ab ff ff ff       	call   c0011f28 <__static_initialization_and_destruction_0(int, int)>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	83 c4 0c             	add    esp,0xc
c0011f83:	c3                   	ret    

c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011f84:	53                   	push   ebx
c0011f85:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c0011f8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011f93:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0011f99:	89 d8                	mov    eax,ebx
c0011f9b:	d1 e8                	shr    eax,1
c0011f9d:	01 d0                	add    eax,edx
c0011f9f:	80 e3 01             	and    bl,0x1
c0011fa2:	8a 10                	mov    dl,BYTE PTR [eax]
c0011fa4:	75 09                	jne    c0011faf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0011fa6:	83 e2 f0             	and    edx,0xfffffff0
c0011fa9:	09 ca                	or     edx,ecx
c0011fab:	88 10                	mov    BYTE PTR [eax],dl
c0011fad:	5b                   	pop    ebx
c0011fae:	c3                   	ret    
c0011faf:	0f b6 c9             	movzx  ecx,cl
c0011fb2:	83 e2 0f             	and    edx,0xf
c0011fb5:	c1 e1 04             	shl    ecx,0x4
c0011fb8:	09 ca                	or     edx,ecx
c0011fba:	88 10                	mov    BYTE PTR [eax],dl
c0011fbc:	5b                   	pop    ebx
c0011fbd:	c3                   	ret    

c0011fbe <Virt::getPageState(unsigned long)>:
c0011fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc2:	8b 0d 88 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024288
c0011fc8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011fce:	89 d0                	mov    eax,edx
c0011fd0:	d1 e8                	shr    eax,1
c0011fd2:	80 e2 01             	and    dl,0x1
c0011fd5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011fd8:	74 03                	je     c0011fdd <Virt::getPageState(unsigned long)+0x1f>
c0011fda:	c1 e8 04             	shr    eax,0x4
c0011fdd:	83 e0 0f             	and    eax,0xf
c0011fe0:	c3                   	ret    

c0011fe1 <Virt::allocateKernelVirtualPages(int)>:
c0011fe1:	55                   	push   ebp
c0011fe2:	57                   	push   edi
c0011fe3:	56                   	push   esi
c0011fe4:	31 f6                	xor    esi,esi
c0011fe6:	53                   	push   ebx
c0011fe7:	31 db                	xor    ebx,ebx
c0011fe9:	83 ec 1c             	sub    esp,0x1c
c0011fec:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ff1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ff5:	8b 2d 84 42 02 c0    	mov    ebp,DWORD PTR ds:0xc0024284
c0011ffb:	55                   	push   ebp
c0011ffc:	e8 bd ff ff ff       	call   c0011fbe <Virt::getPageState(unsigned long)>
c0012001:	5a                   	pop    edx
c0012002:	84 c0                	test   al,al
c0012004:	75 3d                	jne    c0012043 <Virt::allocateKernelVirtualPages(int)+0x62>
c0012006:	85 db                	test   ebx,ebx
c0012008:	0f 44 f5             	cmove  esi,ebp
c001200b:	83 c3 01             	add    ebx,0x1
c001200e:	39 fb                	cmp    ebx,edi
c0012010:	74 5e                	je     c0012070 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0012012:	83 c5 01             	add    ebp,0x1
c0012015:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001201b:	76 33                	jbe    c0012050 <Virt::allocateKernelVirtualPages(int)+0x6f>
c001201d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0012022:	c7 05 84 42 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024284,0xc8000
c001202c:	75 2a                	jne    c0012058 <Virt::allocateKernelVirtualPages(int)+0x77>
c001202e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0012033:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0012038:	55                   	push   ebp
c0012039:	e8 80 ff ff ff       	call   c0011fbe <Virt::getPageState(unsigned long)>
c001203e:	5a                   	pop    edx
c001203f:	84 c0                	test   al,al
c0012041:	74 c3                	je     c0012006 <Virt::allocateKernelVirtualPages(int)+0x25>
c0012043:	83 c5 01             	add    ebp,0x1
c0012046:	31 db                	xor    ebx,ebx
c0012048:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001204e:	77 cd                	ja     c001201d <Virt::allocateKernelVirtualPages(int)+0x3c>
c0012050:	89 2d 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,ebp
c0012056:	eb a3                	jmp    c0011ffb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012058:	83 ec 0c             	sub    esp,0xc
c001205b:	68 c8 24 02 c0       	push   0xc00224c8
c0012060:	e8 d5 cb ff ff       	call   c000ec3a <KePanic(char const*)>
c0012065:	8b 2d 84 42 02 c0    	mov    ebp,DWORD PTR ds:0xc0024284
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	eb 8b                	jmp    c0011ffb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012070:	89 35 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,esi
c0012076:	83 fb 01             	cmp    ebx,0x1
c0012079:	74 63                	je     c00120de <Virt::allocateKernelVirtualPages(int)+0xfd>
c001207b:	85 ff                	test   edi,edi
c001207d:	74 41                	je     c00120c0 <Virt::allocateKernelVirtualPages(int)+0xdf>
c001207f:	89 f0                	mov    eax,esi
c0012081:	31 db                	xor    ebx,ebx
c0012083:	8d 6f ff             	lea    ebp,[edi-0x1]
c0012086:	eb 16                	jmp    c001209e <Virt::allocateKernelVirtualPages(int)+0xbd>
c0012088:	6a 01                	push   0x1
c001208a:	83 c3 01             	add    ebx,0x1
c001208d:	50                   	push   eax
c001208e:	e8 f1 fe ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012093:	39 fb                	cmp    ebx,edi
c0012095:	58                   	pop    eax
c0012096:	5a                   	pop    edx
c0012097:	74 27                	je     c00120c0 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012099:	a1 84 42 02 c0       	mov    eax,ds:0xc0024284
c001209e:	8d 50 01             	lea    edx,[eax+0x1]
c00120a1:	85 db                	test   ebx,ebx
c00120a3:	89 15 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,edx
c00120a9:	74 22                	je     c00120cd <Virt::allocateKernelVirtualPages(int)+0xec>
c00120ab:	39 dd                	cmp    ebp,ebx
c00120ad:	75 d9                	jne    c0012088 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00120af:	6a 03                	push   0x3
c00120b1:	83 c3 01             	add    ebx,0x1
c00120b4:	50                   	push   eax
c00120b5:	e8 ca fe ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120ba:	39 fb                	cmp    ebx,edi
c00120bc:	59                   	pop    ecx
c00120bd:	58                   	pop    eax
c00120be:	75 d9                	jne    c0012099 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00120c0:	83 c4 1c             	add    esp,0x1c
c00120c3:	89 f0                	mov    eax,esi
c00120c5:	5b                   	pop    ebx
c00120c6:	c1 e0 0c             	shl    eax,0xc
c00120c9:	5e                   	pop    esi
c00120ca:	5f                   	pop    edi
c00120cb:	5d                   	pop    ebp
c00120cc:	c3                   	ret    
c00120cd:	6a 02                	push   0x2
c00120cf:	bb 01 00 00 00       	mov    ebx,0x1
c00120d4:	50                   	push   eax
c00120d5:	e8 aa fe ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120da:	58                   	pop    eax
c00120db:	5a                   	pop    edx
c00120dc:	eb bb                	jmp    c0012099 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00120de:	6a 04                	push   0x4
c00120e0:	56                   	push   esi
c00120e1:	8d 46 01             	lea    eax,[esi+0x1]
c00120e4:	a3 84 42 02 c0       	mov    ds:0xc0024284,eax
c00120e9:	e8 96 fe ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120ee:	89 f0                	mov    eax,esi
c00120f0:	59                   	pop    ecx
c00120f1:	c1 e0 0c             	shl    eax,0xc
c00120f4:	5b                   	pop    ebx
c00120f5:	83 c4 1c             	add    esp,0x1c
c00120f8:	5b                   	pop    ebx
c00120f9:	5e                   	pop    esi
c00120fa:	5f                   	pop    edi
c00120fb:	5d                   	pop    ebp
c00120fc:	c3                   	ret    

c00120fd <Virt::freeSwapfilePage(unsigned long)>:
c00120fd:	53                   	push   ebx
c00120fe:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c0012104:	b8 01 00 00 00       	mov    eax,0x1
c0012109:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001210d:	d3 e0                	shl    eax,cl
c001210f:	89 cb                	mov    ebx,ecx
c0012111:	c1 eb 05             	shr    ebx,0x5
c0012114:	f7 d0                	not    eax
c0012116:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0012119:	21 c1                	and    ecx,eax
c001211b:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001211e:	5b                   	pop    ebx
c001211f:	c3                   	ret    

c0012120 <Virt::swapIDToSector(unsigned long)>:
c0012120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012124:	8b 15 8c 42 02 c0    	mov    edx,DWORD PTR ds:0xc002428c
c001212a:	8b 0d 94 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024294
c0012130:	0f af c2             	imul   eax,edx
c0012133:	01 c8                	add    eax,ecx
c0012135:	c3                   	ret    

c0012136 <Virt::allocateSwapfilePage()>:
c0012136:	55                   	push   ebp
c0012137:	31 d2                	xor    edx,edx
c0012139:	57                   	push   edi
c001213a:	56                   	push   esi
c001213b:	53                   	push   ebx
c001213c:	83 ec 0c             	sub    esp,0xc
c001213f:	8b 1d 90 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024290
c0012145:	8b 0d 8c 42 02 c0    	mov    ecx,DWORD PTR ds:0xc002428c
c001214b:	89 d8                	mov    eax,ebx
c001214d:	f7 f1                	div    ecx
c001214f:	39 cb                	cmp    ebx,ecx
c0012151:	72 2f                	jb     c0012182 <Virt::allocateSwapfilePage()+0x4c>
c0012153:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c0012159:	8b 16                	mov    edx,DWORD PTR [esi]
c001215b:	f6 c2 01             	test   dl,0x1
c001215e:	74 3e                	je     c001219e <Virt::allocateSwapfilePage()+0x68>
c0012160:	31 c9                	xor    ecx,ecx
c0012162:	bf 01 00 00 00       	mov    edi,0x1
c0012167:	eb 12                	jmp    c001217b <Virt::allocateSwapfilePage()+0x45>
c0012169:	89 ca                	mov    edx,ecx
c001216b:	89 fd                	mov    ebp,edi
c001216d:	c1 ea 05             	shr    edx,0x5
c0012170:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012173:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012175:	d3 e5                	shl    ebp,cl
c0012177:	85 ea                	test   edx,ebp
c0012179:	74 2c                	je     c00121a7 <Virt::allocateSwapfilePage()+0x71>
c001217b:	83 c1 01             	add    ecx,0x1
c001217e:	39 c8                	cmp    eax,ecx
c0012180:	77 e7                	ja     c0012169 <Virt::allocateSwapfilePage()+0x33>
c0012182:	83 ec 0c             	sub    esp,0xc
c0012185:	68 38 27 02 c0       	push   0xc0022738
c001218a:	e8 ab ca ff ff       	call   c000ec3a <KePanic(char const*)>
c001218f:	83 c4 10             	add    esp,0x10
c0012192:	31 c9                	xor    ecx,ecx
c0012194:	83 c4 0c             	add    esp,0xc
c0012197:	89 c8                	mov    eax,ecx
c0012199:	5b                   	pop    ebx
c001219a:	5e                   	pop    esi
c001219b:	5f                   	pop    edi
c001219c:	5d                   	pop    ebp
c001219d:	c3                   	ret    
c001219e:	89 f3                	mov    ebx,esi
c00121a0:	bd 01 00 00 00       	mov    ebp,0x1
c00121a5:	31 c9                	xor    ecx,ecx
c00121a7:	09 ea                	or     edx,ebp
c00121a9:	89 c8                	mov    eax,ecx
c00121ab:	89 13                	mov    DWORD PTR [ebx],edx
c00121ad:	83 c4 0c             	add    esp,0xc
c00121b0:	5b                   	pop    ebx
c00121b1:	5e                   	pop    esi
c00121b2:	5f                   	pop    edi
c00121b3:	5d                   	pop    ebp
c00121b4:	c3                   	ret    

c00121b5 <Virt::virtualMemorySetup()>:
c00121b5:	53                   	push   ebx
c00121b6:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00121bb:	6a 0f                	push   0xf
c00121bd:	53                   	push   ebx
c00121be:	83 c3 01             	add    ebx,0x1
c00121c1:	e8 be fd ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121c6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00121cc:	58                   	pop    eax
c00121cd:	5a                   	pop    edx
c00121ce:	75 eb                	jne    c00121bb <Virt::virtualMemorySetup()+0x6>
c00121d0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00121d5:	6a 00                	push   0x0
c00121d7:	53                   	push   ebx
c00121d8:	83 c3 01             	add    ebx,0x1
c00121db:	e8 a4 fd ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121e0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00121e6:	59                   	pop    ecx
c00121e7:	58                   	pop    eax
c00121e8:	75 eb                	jne    c00121d5 <Virt::virtualMemorySetup()+0x20>
c00121ea:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00121ef:	6a 0f                	push   0xf
c00121f1:	53                   	push   ebx
c00121f2:	83 c3 01             	add    ebx,0x1
c00121f5:	e8 8a fd ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121fa:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012200:	58                   	pop    eax
c0012201:	5a                   	pop    edx
c0012202:	75 eb                	jne    c00121ef <Virt::virtualMemorySetup()+0x3a>
c0012204:	5b                   	pop    ebx
c0012205:	c3                   	ret    

c0012206 <Virt::setupPageSwapping(int)>:
c0012206:	53                   	push   ebx
c0012207:	83 ec 0c             	sub    esp,0xc
c001220a:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c001220f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012213:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012219:	8b 10                	mov    edx,DWORD PTR [eax]
c001221b:	53                   	push   ebx
c001221c:	68 4f 27 02 c0       	push   0xc002274f
c0012221:	50                   	push   eax
c0012222:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012225:	c1 e3 0b             	shl    ebx,0xb
c0012228:	89 1d 90 42 02 c0    	mov    DWORD PTR ds:0xc0024290,ebx
c001222e:	c1 eb 08             	shr    ebx,0x8
c0012231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012234:	c6 05 98 42 02 c0 43 	mov    BYTE PTR ds:0xc0024298,0x43
c001223b:	c7 05 8c 42 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002428c,0x8
c0012245:	a3 94 42 02 c0       	mov    ds:0xc0024294,eax
c001224a:	e8 97 c6 ff ff       	call   c000e8e6 <malloc>
c001224f:	31 d2                	xor    edx,edx
c0012251:	83 c4 0c             	add    esp,0xc
c0012254:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c0012259:	89 c1                	mov    ecx,eax
c001225b:	a1 90 42 02 c0       	mov    eax,ds:0xc0024290
c0012260:	f7 35 8c 42 02 c0    	div    DWORD PTR ds:0xc002428c
c0012266:	c1 e8 05             	shr    eax,0x5
c0012269:	50                   	push   eax
c001226a:	6a 00                	push   0x0
c001226c:	51                   	push   ecx
c001226d:	e8 7e e2 fe ff       	call   c00004f0 <memset>
c0012272:	83 c4 18             	add    esp,0x18
c0012275:	5b                   	pop    ebx
c0012276:	c3                   	ret    
c0012277:	90                   	nop

c0012278 <VAS::setCPUSpecific(unsigned long)>:
c0012278:	c3                   	ret    
c0012279:	90                   	nop

c001227a <VAS::VAS(VAS*)>:
c001227a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001227e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012285:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012289:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012290:	90                   	nop
c0012291:	c3                   	ret    

c0012292 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012292:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012296:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001229b:	89 c2                	mov    edx,eax
c001229d:	c1 ea 16             	shr    edx,0x16
c00122a0:	c1 e8 0a             	shr    eax,0xa
c00122a3:	83 f9 01             	cmp    ecx,0x1
c00122a6:	19 c9                	sbb    ecx,ecx
c00122a8:	25 fc 0f 00 00       	and    eax,0xffc
c00122ad:	c1 e2 0c             	shl    edx,0xc
c00122b0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00122b6:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00122bd:	01 d0                	add    eax,edx
c00122bf:	c3                   	ret    

c00122c0 <VAS::getPageTableEntry(unsigned long)>:
c00122c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00122c4:	89 ca                	mov    edx,ecx
c00122c6:	c1 ea 16             	shr    edx,0x16
c00122c9:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00122cf:	c1 e9 0a             	shr    ecx,0xa
c00122d2:	c1 e0 0c             	shl    eax,0xc
c00122d5:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00122db:	8d 04 08             	lea    eax,[eax+ecx*1]
c00122de:	c3                   	ret    

c00122df <Virt::freeKernelVirtualPages(unsigned long)>:
c00122df:	55                   	push   ebp
c00122e0:	57                   	push   edi
c00122e1:	bf 01 00 00 00       	mov    edi,0x1
c00122e6:	56                   	push   esi
c00122e7:	53                   	push   ebx
c00122e8:	83 ec 1c             	sub    esp,0x1c
c00122eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00122ef:	c1 ee 0c             	shr    esi,0xc
c00122f2:	eb 48                	jmp    c001233c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00122f4:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c00122f9:	83 ec 08             	sub    esp,0x8
c00122fc:	55                   	push   ebp
c00122fd:	50                   	push   eax
c00122fe:	e8 bd ff ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	8b 10                	mov    edx,DWORD PTR [eax]
c0012308:	f6 c6 04             	test   dh,0x4
c001230b:	75 70                	jne    c001237d <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001230d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012313:	83 fb 04             	cmp    ebx,0x4
c0012316:	0f 84 8a 00 00 00    	je     c00123a6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001231c:	83 fb 02             	cmp    ebx,0x2
c001231f:	0f 84 9a 00 00 00    	je     c00123bf <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012325:	83 fb 03             	cmp    ebx,0x3
c0012328:	0f 84 be 00 00 00    	je     c00123ec <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001232e:	83 fb 01             	cmp    ebx,0x1
c0012331:	0f 84 a2 00 00 00    	je     c00123d9 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012337:	83 c6 01             	add    esi,0x1
c001233a:	31 ff                	xor    edi,edi
c001233c:	56                   	push   esi
c001233d:	89 f5                	mov    ebp,esi
c001233f:	e8 7a fc ff ff       	call   c0011fbe <Virt::getPageState(unsigned long)>
c0012344:	c1 e5 0c             	shl    ebp,0xc
c0012347:	5a                   	pop    edx
c0012348:	0f b6 d8             	movzx  ebx,al
c001234b:	85 db                	test   ebx,ebx
c001234d:	75 a5                	jne    c00122f4 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001234f:	83 ec 0c             	sub    esp,0xc
c0012352:	68 66 27 02 c0       	push   0xc0022766
c0012357:	e8 de c8 ff ff       	call   c000ec3a <KePanic(char const*)>
c001235c:	5a                   	pop    edx
c001235d:	59                   	pop    ecx
c001235e:	55                   	push   ebp
c001235f:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c0012365:	55                   	push   ebp
c0012366:	e8 55 ff ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012370:	f6 c6 04             	test   dh,0x4
c0012373:	75 08                	jne    c001237d <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012375:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001237b:	eb ba                	jmp    c0012337 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001237d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012381:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012387:	83 ec 0c             	sub    esp,0xc
c001238a:	52                   	push   edx
c001238b:	e8 3b ca ff ff       	call   c000edcb <Phys::freePage(unsigned long)>
c0012390:	83 c4 10             	add    esp,0x10
c0012393:	83 fb 04             	cmp    ebx,0x4
c0012396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001239a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00123a0:	0f 85 76 ff ff ff    	jne    c001231c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00123a6:	83 e7 01             	and    edi,0x1
c00123a9:	75 46                	jne    c00123f1 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00123ab:	c7 44 24 30 e8 24 02 c0 	mov    DWORD PTR [esp+0x30],0xc00224e8
c00123b3:	83 c4 1c             	add    esp,0x1c
c00123b6:	5b                   	pop    ebx
c00123b7:	5e                   	pop    esi
c00123b8:	5f                   	pop    edi
c00123b9:	5d                   	pop    ebp
c00123ba:	e9 7b c8 ff ff       	jmp    c000ec3a <KePanic(char const*)>
c00123bf:	83 e7 01             	and    edi,0x1
c00123c2:	75 15                	jne    c00123d9 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00123c4:	83 ec 0c             	sub    esp,0xc
c00123c7:	68 82 27 02 c0       	push   0xc0022782
c00123cc:	e8 69 c8 ff ff       	call   c000ec3a <KePanic(char const*)>
c00123d1:	83 c4 10             	add    esp,0x10
c00123d4:	e9 5e ff ff ff       	jmp    c0012337 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00123d9:	83 ec 08             	sub    esp,0x8
c00123dc:	6a 00                	push   0x0
c00123de:	56                   	push   esi
c00123df:	e8 a0 fb ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00123e4:	83 c4 10             	add    esp,0x10
c00123e7:	e9 4b ff ff ff       	jmp    c0012337 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00123ec:	83 e7 01             	and    edi,0x1
c00123ef:	75 16                	jne    c0012407 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00123f1:	83 ec 08             	sub    esp,0x8
c00123f4:	6a 00                	push   0x0
c00123f6:	56                   	push   esi
c00123f7:	e8 88 fb ff ff       	call   c0011f84 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00123fc:	83 c4 10             	add    esp,0x10
c00123ff:	83 c4 1c             	add    esp,0x1c
c0012402:	5b                   	pop    ebx
c0012403:	5e                   	pop    esi
c0012404:	5f                   	pop    edi
c0012405:	5d                   	pop    ebp
c0012406:	c3                   	ret    
c0012407:	c7 44 24 30 9e 27 02 c0 	mov    DWORD PTR [esp+0x30],0xc002279e
c001240f:	83 c4 1c             	add    esp,0x1c
c0012412:	5b                   	pop    ebx
c0012413:	5e                   	pop    esi
c0012414:	5f                   	pop    edi
c0012415:	5d                   	pop    ebp
c0012416:	e9 1f c8 ff ff       	jmp    c000ec3a <KePanic(char const*)>
c001241b:	90                   	nop

c001241c <VAS::freeAllocatedPages(unsigned long)>:
c001241c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012424:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012428:	74 09                	je     c0012433 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001242a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001242e:	e9 ac fe ff ff       	jmp    c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c0012433:	c7 44 24 04 0c 25 02 c0 	mov    DWORD PTR [esp+0x4],0xc002250c
c001243b:	e9 0e 4b ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012440 <VAS::virtualToPhysical(unsigned long)>:
c0012440:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012444:	50                   	push   eax
c0012445:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012449:	52                   	push   edx
c001244a:	e8 71 fe ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c001244f:	59                   	pop    ecx
c0012450:	5a                   	pop    edx
c0012451:	8b 00                	mov    eax,DWORD PTR [eax]
c0012453:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012458:	c3                   	ret    
c0012459:	90                   	nop

c001245a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001245a:	55                   	push   ebp
c001245b:	57                   	push   edi
c001245c:	56                   	push   esi
c001245d:	53                   	push   ebx
c001245e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012462:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012466:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001246a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001246e:	85 db                	test   ebx,ebx
c0012470:	7e 24                	jle    c0012496 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0012472:	c1 e3 0c             	shl    ebx,0xc
c0012475:	01 f3                	add    ebx,esi
c0012477:	56                   	push   esi
c0012478:	81 c6 00 10 00 00    	add    esi,0x1000
c001247e:	55                   	push   ebp
c001247f:	e8 3c fe ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c0012484:	5a                   	pop    edx
c0012485:	59                   	pop    ecx
c0012486:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012488:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001248c:	21 f9                	and    ecx,edi
c001248e:	09 d1                	or     ecx,edx
c0012490:	39 f3                	cmp    ebx,esi
c0012492:	89 08                	mov    DWORD PTR [eax],ecx
c0012494:	75 e1                	jne    c0012477 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012496:	5b                   	pop    ebx
c0012497:	5e                   	pop    esi
c0012498:	5f                   	pop    edi
c0012499:	5d                   	pop    ebp
c001249a:	c3                   	ret    
c001249b:	90                   	nop

c001249c <VAS::VAS()>:
c001249c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00124a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124ab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00124b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124b6:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c00124bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124bf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00124c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124c7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00124ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124ce:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00124d5:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c00124da:	b8 00 50 02 c0       	mov    eax,0xc0025000
c00124df:	29 c2                	sub    edx,eax
c00124e1:	89 d0                	mov    eax,edx
c00124e3:	05 ff 0f 00 00       	add    eax,0xfff
c00124e8:	c1 e8 0c             	shr    eax,0xc
c00124eb:	89 c2                	mov    edx,eax
c00124ed:	b8 00 50 02 c0       	mov    eax,0xc0025000
c00124f2:	6a 04                	push   0x4
c00124f4:	6a ff                	push   0xffffffff
c00124f6:	52                   	push   edx
c00124f7:	50                   	push   eax
c00124f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124fc:	e8 59 ff ff ff       	call   c001245a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012501:	83 c4 14             	add    esp,0x14
c0012504:	90                   	nop
c0012505:	c3                   	ret    

c0012506 <VAS::setToWriteCombining(unsigned long, int)>:
c0012506:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001250b:	50                   	push   eax
c001250c:	6a ff                	push   0xffffffff
c001250e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012512:	52                   	push   edx
c0012513:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012517:	51                   	push   ecx
c0012518:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001251c:	50                   	push   eax
c001251d:	e8 38 ff ff ff       	call   c001245a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012522:	83 c4 14             	add    esp,0x14
c0012525:	c3                   	ret    

c0012526 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001252a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001252d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012531:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012534:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012539:	83 f8 01             	cmp    eax,0x1
c001253c:	19 c0                	sbb    eax,eax
c001253e:	83 ca 03             	or     edx,0x3
c0012541:	83 e0 fc             	and    eax,0xfffffffc
c0012544:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001254b:	0f 20 d8             	mov    eax,cr3
c001254e:	0f 22 d8             	mov    cr3,eax
c0012551:	c3                   	ret    

c0012552 <VAS::~VAS()>:
c0012552:	83 ec 2c             	sub    esp,0x2c
c0012555:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001255d:	fa                   	cli    
c001255e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012563:	83 c0 01             	add    eax,0x1
c0012566:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001256b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012570:	8b 00                	mov    eax,DWORD PTR [eax]
c0012572:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012575:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001257b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001257f:	6a 01                	push   0x1
c0012581:	50                   	push   eax
c0012582:	e8 9f ff ff ff       	call   c0012526 <VAS::mapOtherVASIn(bool, VAS*)>
c0012587:	83 c4 0c             	add    esp,0xc
c001258a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012592:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001259a:	0f 8f d8 00 00 00    	jg     c0012678 <VAS::~VAS()+0x126>
c00125a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125ab:	c1 e2 02             	shl    edx,0x2
c00125ae:	01 d0                	add    eax,edx
c00125b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00125b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00125b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ba:	83 e0 01             	and    eax,0x1
c00125bd:	0f 84 ab 00 00 00    	je     c001266e <VAS::~VAS()+0x11c>
c00125c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125cb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00125d3:	7f 74                	jg     c0012649 <VAS::~VAS()+0xf7>
c00125d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125d9:	c1 e0 0a             	shl    eax,0xa
c00125dc:	89 c2                	mov    edx,eax
c00125de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125e2:	01 d0                	add    eax,edx
c00125e4:	c1 e0 0c             	shl    eax,0xc
c00125e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125eb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00125f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00125f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125f5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00125fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00125ff:	6a 01                	push   0x1
c0012601:	50                   	push   eax
c0012602:	e8 8b fc ff ff       	call   c0012292 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012607:	83 c4 0c             	add    esp,0xc
c001260a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001260e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012612:	8b 00                	mov    eax,DWORD PTR [eax]
c0012614:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001261c:	25 01 04 00 00       	and    eax,0x401
c0012621:	3d 01 04 00 00       	cmp    eax,0x401
c0012626:	75 1a                	jne    c0012642 <VAS::~VAS()+0xf0>
c0012628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001262c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012631:	83 ec 0c             	sub    esp,0xc
c0012634:	50                   	push   eax
c0012635:	e8 91 c7 ff ff       	call   c000edcb <Phys::freePage(unsigned long)>
c001263a:	83 c4 10             	add    esp,0x10
c001263d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012642:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0012647:	eb 82                	jmp    c00125cb <VAS::~VAS()+0x79>
c0012649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001264d:	25 00 04 00 00       	and    eax,0x400
c0012652:	74 1a                	je     c001266e <VAS::~VAS()+0x11c>
c0012654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012658:	25 00 f0 ff ff       	and    eax,0xfffff000
c001265d:	83 ec 0c             	sub    esp,0xc
c0012660:	50                   	push   eax
c0012661:	e8 65 c7 ff ff       	call   c000edcb <Phys::freePage(unsigned long)>
c0012666:	83 c4 10             	add    esp,0x10
c0012669:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001266e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012673:	e9 1a ff ff ff       	jmp    c0012592 <VAS::~VAS()+0x40>
c0012678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001267c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001267f:	83 ec 0c             	sub    esp,0xc
c0012682:	50                   	push   eax
c0012683:	e8 57 fc ff ff       	call   c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c0012688:	83 c4 10             	add    esp,0x10
c001268b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001268f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012692:	83 ec 0c             	sub    esp,0xc
c0012695:	50                   	push   eax
c0012696:	e8 30 c7 ff ff       	call   c000edcb <Phys::freePage(unsigned long)>
c001269b:	83 c4 10             	add    esp,0x10
c001269e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00126a3:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00126a8:	83 e8 01             	sub    eax,0x1
c00126ab:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00126b0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00126b5:	85 c0                	test   eax,eax
c00126b7:	75 01                	jne    c00126ba <VAS::~VAS()+0x168>
c00126b9:	fb                   	sti    
c00126ba:	90                   	nop
c00126bb:	83 c4 2c             	add    esp,0x2c
c00126be:	c3                   	ret    
c00126bf:	90                   	nop

c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00126c0:	55                   	push   ebp
c00126c1:	57                   	push   edi
c00126c2:	56                   	push   esi
c00126c3:	53                   	push   ebx
c00126c4:	83 ec 1c             	sub    esp,0x1c
c00126c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00126cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00126cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00126d3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00126d9:	76 43                	jbe    c001271e <VAS::mapPage(unsigned long, unsigned long, int)+0x5e>
c00126db:	89 d8                	mov    eax,ebx
c00126dd:	09 f8                	or     eax,edi
c00126df:	a9 ff 0f 00 00       	test   eax,0xfff
c00126e4:	75 72                	jne    c0012758 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c00126e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00126e9:	89 de                	mov    esi,ebx
c00126eb:	c1 ee 16             	shr    esi,0x16
c00126ee:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00126f5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00126f9:	74 72                	je     c001276d <VAS::mapPage(unsigned long, unsigned long, int)+0xad>
c00126fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126ff:	c1 eb 0a             	shr    ebx,0xa
c0012702:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012708:	c1 e6 0c             	shl    esi,0xc
c001270b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012711:	09 c7                	or     edi,eax
c0012713:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0012716:	83 c4 1c             	add    esp,0x1c
c0012719:	5b                   	pop    ebx
c001271a:	5e                   	pop    esi
c001271b:	5f                   	pop    edi
c001271c:	5d                   	pop    ebp
c001271d:	c3                   	ret    
c001271e:	8b 0d 70 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d70
c0012724:	83 ec 08             	sub    esp,0x8
c0012727:	51                   	push   ecx
c0012728:	68 12 20 02 c0       	push   0xc0022012
c001272d:	e8 1c 48 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012732:	0f 20 d8             	mov    eax,cr3
c0012735:	83 c4 10             	add    esp,0x10
c0012738:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001273b:	74 9e                	je     c00126db <VAS::mapPage(unsigned long, unsigned long, int)+0x1b>
c001273d:	83 ec 0c             	sub    esp,0xc
c0012740:	68 30 25 02 c0       	push   0xc0022530
c0012745:	e8 04 48 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001274a:	89 d8                	mov    eax,ebx
c001274c:	83 c4 10             	add    esp,0x10
c001274f:	09 f8                	or     eax,edi
c0012751:	a9 ff 0f 00 00       	test   eax,0xfff
c0012756:	74 8e                	je     c00126e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0012758:	83 ec 0c             	sub    esp,0xc
c001275b:	68 98 25 02 c0       	push   0xc0022598
c0012760:	e8 d5 c4 ff ff       	call   c000ec3a <KePanic(char const*)>
c0012765:	83 c4 10             	add    esp,0x10
c0012768:	e9 79 ff ff ff       	jmp    c00126e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c001276d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012771:	e8 be c6 ff ff       	call   c000ee34 <Phys::allocatePage()>
c0012776:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c001277c:	83 ec 0c             	sub    esp,0xc
c001277f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012783:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012787:	6a 01                	push   0x1
c0012789:	e8 53 f8 ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c001278e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012795:	6a 01                	push   0x1
c0012797:	50                   	push   eax
c0012798:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001279c:	52                   	push   edx
c001279d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127a1:	51                   	push   ecx
c00127a2:	e8 2d 01 00 00       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127a7:	83 c4 1c             	add    esp,0x1c
c00127aa:	68 00 10 00 00       	push   0x1000
c00127af:	6a 00                	push   0x0
c00127b1:	50                   	push   eax
c00127b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127b6:	e8 35 dd fe ff       	call   c00004f0 <memset>
c00127bb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127c2:	e8 18 fb ff ff       	call   c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c00127c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00127d5:	0d 07 04 00 00       	or     eax,0x407
c00127da:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00127dd:	e9 19 ff ff ff       	jmp    c00126fb <VAS::mapPage(unsigned long, unsigned long, int)+0x3b>

c00127e2 <VAS::allocatePages(int, int)>:
c00127e2:	55                   	push   ebp
c00127e3:	57                   	push   edi
c00127e4:	56                   	push   esi
c00127e5:	53                   	push   ebx
c00127e6:	83 ec 1c             	sub    esp,0x1c
c00127e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00127ed:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127f1:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00127f5:	75 75                	jne    c001286c <VAS::allocatePages(int, int)+0x8a>
c00127f7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00127fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127fe:	85 c0                	test   eax,eax
c0012800:	74 49                	je     c001284b <VAS::allocatePages(int, int)+0x69>
c0012802:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012806:	89 d5                	mov    ebp,edx
c0012808:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001280c:	c1 e5 0c             	shl    ebp,0xc
c001280f:	01 dd                	add    ebp,ebx
c0012811:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012814:	81 cf 00 04 00 00    	or     edi,0x400
c001281a:	85 d2                	test   edx,edx
c001281c:	7e 1b                	jle    c0012839 <VAS::allocatePages(int, int)+0x57>
c001281e:	e8 11 c6 ff ff       	call   c000ee34 <Phys::allocatePage()>
c0012823:	57                   	push   edi
c0012824:	53                   	push   ebx
c0012825:	81 c3 00 10 00 00    	add    ebx,0x1000
c001282b:	50                   	push   eax
c001282c:	56                   	push   esi
c001282d:	e8 8e fe ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012832:	83 c4 10             	add    esp,0x10
c0012835:	39 dd                	cmp    ebp,ebx
c0012837:	75 e5                	jne    c001281e <VAS::allocatePages(int, int)+0x3c>
c0012839:	0f 20 d8             	mov    eax,cr3
c001283c:	0f 22 d8             	mov    cr3,eax
c001283f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012843:	83 c4 1c             	add    esp,0x1c
c0012846:	5b                   	pop    ebx
c0012847:	5e                   	pop    esi
c0012848:	5f                   	pop    edi
c0012849:	5d                   	pop    ebp
c001284a:	c3                   	ret    
c001284b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001284f:	83 ec 0c             	sub    esp,0xc
c0012852:	68 bc 25 02 c0       	push   0xc00225bc
c0012857:	e8 de c3 ff ff       	call   c000ec3a <KePanic(char const*)>
c001285c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001285f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012863:	83 c4 10             	add    esp,0x10
c0012866:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001286a:	eb 96                	jmp    c0012802 <VAS::allocatePages(int, int)+0x20>
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	52                   	push   edx
c0012870:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0012874:	e8 68 f7 ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c0012879:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001287d:	83 c4 10             	add    esp,0x10
c0012880:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012885:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012889:	77 38                	ja     c00128c3 <VAS::allocatePages(int, int)+0xe1>
c001288b:	85 d2                	test   edx,edx
c001288d:	7e aa                	jle    c0012839 <VAS::allocatePages(int, int)+0x57>
c001288f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012893:	c1 e2 0c             	shl    edx,0xc
c0012896:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001289a:	81 cf 00 04 00 00    	or     edi,0x400
c00128a0:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c00128a3:	e8 8c c5 ff ff       	call   c000ee34 <Phys::allocatePage()>
c00128a8:	57                   	push   edi
c00128a9:	53                   	push   ebx
c00128aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c00128b0:	50                   	push   eax
c00128b1:	56                   	push   esi
c00128b2:	e8 09 fe ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	39 dd                	cmp    ebp,ebx
c00128bc:	75 e5                	jne    c00128a3 <VAS::allocatePages(int, int)+0xc1>
c00128be:	e9 76 ff ff ff       	jmp    c0012839 <VAS::allocatePages(int, int)+0x57>
c00128c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00128c7:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c00128cc:	09 c1                	or     ecx,eax
c00128ce:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00128d2:	eb b7                	jmp    c001288b <VAS::allocatePages(int, int)+0xa9>

c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00128d4:	55                   	push   ebp
c00128d5:	57                   	push   edi
c00128d6:	56                   	push   esi
c00128d7:	53                   	push   ebx
c00128d8:	83 ec 1c             	sub    esp,0x1c
c00128db:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00128df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00128e3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00128e7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00128eb:	85 db                	test   ebx,ebx
c00128ed:	7e 2c                	jle    c001291b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00128ef:	c1 e3 0c             	shl    ebx,0xc
c00128f2:	8d 04 33             	lea    eax,[ebx+esi*1]
c00128f5:	89 f3                	mov    ebx,esi
c00128f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128fb:	55                   	push   ebp
c00128fc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012900:	29 f2                	sub    edx,esi
c0012902:	01 da                	add    edx,ebx
c0012904:	52                   	push   edx
c0012905:	53                   	push   ebx
c0012906:	81 c3 00 10 00 00    	add    ebx,0x1000
c001290c:	57                   	push   edi
c001290d:	e8 ae fd ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012912:	83 c4 10             	add    esp,0x10
c0012915:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0012919:	75 e0                	jne    c00128fb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c001291b:	0f 20 d8             	mov    eax,cr3
c001291e:	0f 22 d8             	mov    cr3,eax
c0012921:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012925:	83 c4 1c             	add    esp,0x1c
c0012928:	5b                   	pop    ebx
c0012929:	5e                   	pop    esi
c001292a:	5f                   	pop    edi
c001292b:	5d                   	pop    ebp
c001292c:	c3                   	ret    
c001292d:	90                   	nop

c001292e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001292e:	55                   	push   ebp
c001292f:	57                   	push   edi
c0012930:	56                   	push   esi
c0012931:	53                   	push   ebx
c0012932:	83 ec 1c             	sub    esp,0x1c
c0012935:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012939:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001293d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012945:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012949:	09 d8                	or     eax,ebx
c001294b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012950:	75 4b                	jne    c001299d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012952:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012955:	89 de                	mov    esi,ebx
c0012957:	c1 ee 16             	shr    esi,0x16
c001295a:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0012961:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012965:	74 48                	je     c00129af <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0012967:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c001296c:	c1 eb 0a             	shr    ebx,0xa
c001296f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012973:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0012977:	83 ff 01             	cmp    edi,0x1
c001297a:	19 c0                	sbb    eax,eax
c001297c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012982:	c1 e6 0c             	shl    esi,0xc
c0012985:	25 00 00 c0 ff       	and    eax,0xffc00000
c001298a:	01 f3                	add    ebx,esi
c001298c:	09 ca                	or     edx,ecx
c001298e:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0012995:	83 c4 1c             	add    esp,0x1c
c0012998:	5b                   	pop    ebx
c0012999:	5e                   	pop    esi
c001299a:	5f                   	pop    edi
c001299b:	5d                   	pop    ebp
c001299c:	c3                   	ret    
c001299d:	83 ec 0c             	sub    esp,0xc
c00129a0:	68 e8 25 02 c0       	push   0xc00225e8
c00129a5:	e8 90 c2 ff ff       	call   c000ec3a <KePanic(char const*)>
c00129aa:	83 c4 10             	add    esp,0x10
c00129ad:	eb a3                	jmp    c0012952 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00129af:	e8 80 c4 ff ff       	call   c000ee34 <Phys::allocatePage()>
c00129b4:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00129ba:	83 ec 0c             	sub    esp,0xc
c00129bd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00129c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129c5:	6a 01                	push   0x1
c00129c7:	e8 15 f6 ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c00129cc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00129d3:	6a 01                	push   0x1
c00129d5:	50                   	push   eax
c00129d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129da:	50                   	push   eax
c00129db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00129df:	51                   	push   ecx
c00129e0:	e8 ef fe ff ff       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00129e5:	83 c4 1c             	add    esp,0x1c
c00129e8:	68 00 10 00 00       	push   0x1000
c00129ed:	6a 00                	push   0x0
c00129ef:	50                   	push   eax
c00129f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129f4:	e8 f7 da fe ff       	call   c00004f0 <memset>
c00129f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00129fd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012a00:	e8 da f8 ff ff       	call   c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c0012a05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a09:	83 c4 10             	add    esp,0x10
c0012a0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012a0f:	81 ca 07 04 00 00    	or     edx,0x407
c0012a15:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0012a18:	e9 4a ff ff ff       	jmp    c0012967 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0012a1d:	90                   	nop

c0012a1e <VAS::VAS(bool)>:
c0012a1e:	53                   	push   ebx
c0012a1f:	83 ec 28             	sub    esp,0x28
c0012a22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a26:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012a40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a44:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012a48:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012a4b:	e8 e4 c3 ff ff       	call   c000ee34 <Phys::allocatePage()>
c0012a50:	89 c2                	mov    edx,eax
c0012a52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012a59:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c0012a5f:	83 ec 0c             	sub    esp,0xc
c0012a62:	6a 01                	push   0x1
c0012a64:	e8 78 f5 ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c0012a69:	83 c4 10             	add    esp,0x10
c0012a6c:	89 c2                	mov    edx,eax
c0012a6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012a75:	83 ec 0c             	sub    esp,0xc
c0012a78:	6a 03                	push   0x3
c0012a7a:	6a 01                	push   0x1
c0012a7c:	52                   	push   edx
c0012a7d:	50                   	push   eax
c0012a7e:	53                   	push   ebx
c0012a7f:	e8 50 fe ff ff       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a84:	83 c4 20             	add    esp,0x20
c0012a87:	89 c2                	mov    edx,eax
c0012a89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012a90:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012a98:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012aa0:	7f 1d                	jg     c0012abf <VAS::VAS(bool)+0xa1>
c0012aa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aa6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012aa9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012aad:	c1 e2 02             	shl    edx,0x2
c0012ab0:	01 d0                	add    eax,edx
c0012ab2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012ab8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012abd:	eb d9                	jmp    c0012a98 <VAS::VAS(bool)+0x7a>
c0012abf:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012ac7:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012acf:	7f 59                	jg     c0012b2a <VAS::VAS(bool)+0x10c>
c0012ad1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ad5:	2d 00 02 00 00       	sub    eax,0x200
c0012ada:	c1 e0 0c             	shl    eax,0xc
c0012add:	89 c2                	mov    edx,eax
c0012adf:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012ae4:	89 d1                	mov    ecx,edx
c0012ae6:	09 c1                	or     ecx,eax
c0012ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012aef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012af3:	c1 e2 02             	shl    edx,0x2
c0012af6:	01 d0                	add    eax,edx
c0012af8:	83 c9 05             	or     ecx,0x5
c0012afb:	89 ca                	mov    edx,ecx
c0012afd:	89 10                	mov    DWORD PTR [eax],edx
c0012aff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b03:	2d 40 03 00 00       	sub    eax,0x340
c0012b08:	83 f8 7f             	cmp    eax,0x7f
c0012b0b:	77 16                	ja     c0012b23 <VAS::VAS(bool)+0x105>
c0012b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b18:	c1 e2 02             	shl    edx,0x2
c0012b1b:	01 d0                	add    eax,edx
c0012b1d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b23:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012b28:	eb 9d                	jmp    c0012ac7 <VAS::VAS(bool)+0xa9>
c0012b2a:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b37:	05 20 0c 00 00       	add    eax,0xc20
c0012b3c:	81 ca 03 40 00 00    	or     edx,0x4003
c0012b42:	89 10                	mov    DWORD PTR [eax],edx
c0012b44:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b49:	83 ec 08             	sub    esp,0x8
c0012b4c:	50                   	push   eax
c0012b4d:	68 12 20 02 c0       	push   0xc0022012
c0012b52:	e8 f7 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012b57:	83 c4 10             	add    esp,0x10
c0012b5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b5e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012b61:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012b66:	09 c2                	or     edx,eax
c0012b68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b6f:	05 fc 0f 00 00       	add    eax,0xffc
c0012b74:	83 ca 03             	or     edx,0x3
c0012b77:	89 10                	mov    DWORD PTR [eax],edx
c0012b79:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b7e:	83 ec 08             	sub    esp,0x8
c0012b81:	50                   	push   eax
c0012b82:	68 12 20 02 c0       	push   0xc0022012
c0012b87:	e8 c2 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	50                   	push   eax
c0012b9e:	e8 fd 66 ff ff       	call   c00092a0 <Device::getName()>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	83 ec 08             	sub    esp,0x8
c0012ba9:	68 b8 27 02 c0       	push   0xc00227b8
c0012bae:	50                   	push   eax
c0012baf:	e8 cc db fe ff       	call   c0000780 <strcmp>
c0012bb4:	83 c4 10             	add    esp,0x10
c0012bb7:	85 c0                	test   eax,eax
c0012bb9:	0f 94 c0             	sete   al
c0012bbc:	0f b6 c0             	movzx  eax,al
c0012bbf:	85 c0                	test   eax,eax
c0012bc1:	0f 84 94 00 00 00    	je     c0012c5b <VAS::VAS(bool)+0x23d>
c0012bc7:	fa                   	cli    
c0012bc8:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012bcd:	83 ec 08             	sub    esp,0x8
c0012bd0:	50                   	push   eax
c0012bd1:	68 12 20 02 c0       	push   0xc0022012
c0012bd6:	e8 73 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012bdb:	83 c4 10             	add    esp,0x10
c0012bde:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012be3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012be9:	05 68 09 00 00       	add    eax,0x968
c0012bee:	83 ec 0c             	sub    esp,0xc
c0012bf1:	50                   	push   eax
c0012bf2:	e8 c3 b6 ff ff       	call   c000e2ba <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012bf7:	83 c4 10             	add    esp,0x10
c0012bfa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012bff:	89 c3                	mov    ebx,eax
c0012c01:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012c06:	83 ec 08             	sub    esp,0x8
c0012c09:	50                   	push   eax
c0012c0a:	68 12 20 02 c0       	push   0xc0022012
c0012c0f:	e8 3a 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c14:	83 c4 10             	add    esp,0x10
c0012c17:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012c1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c22:	05 68 09 00 00       	add    eax,0x968
c0012c27:	83 ec 0c             	sub    esp,0xc
c0012c2a:	50                   	push   eax
c0012c2b:	e8 8a b6 ff ff       	call   c000e2ba <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012c30:	83 c4 10             	add    esp,0x10
c0012c33:	83 ec 08             	sub    esp,0x8
c0012c36:	50                   	push   eax
c0012c37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c3b:	e8 80 f6 ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c4a:	6a 11                	push   0x11
c0012c4c:	53                   	push   ebx
c0012c4d:	50                   	push   eax
c0012c4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c52:	e8 69 fa ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	fb                   	sti    
c0012c5b:	90                   	nop
c0012c5c:	83 c4 28             	add    esp,0x28
c0012c5f:	5b                   	pop    ebx
c0012c60:	c3                   	ret    
c0012c61:	90                   	nop

c0012c62 <VAS::evict(unsigned long)>:
c0012c62:	55                   	push   ebp
c0012c63:	57                   	push   edi
c0012c64:	56                   	push   esi
c0012c65:	53                   	push   ebx
c0012c66:	83 ec 1c             	sub    esp,0x1c
c0012c69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c6d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012c71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c75:	e8 bc f4 ff ff       	call   c0012136 <Virt::allocateSwapfilePage()>
c0012c7a:	89 c7                	mov    edi,eax
c0012c7c:	a1 8c 42 02 c0       	mov    eax,ds:0xc002428c
c0012c81:	85 c0                	test   eax,eax
c0012c83:	7e 40                	jle    c0012cc5 <VAS::evict(unsigned long)+0x63>
c0012c85:	89 ee                	mov    esi,ebp
c0012c87:	31 db                	xor    ebx,ebx
c0012c89:	83 ec 0c             	sub    esp,0xc
c0012c8c:	57                   	push   edi
c0012c8d:	e8 8e f4 ff ff       	call   c0012120 <Virt::swapIDToSector(unsigned long)>
c0012c92:	31 d2                	xor    edx,edx
c0012c94:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c97:	81 c6 00 02 00 00    	add    esi,0x200
c0012c9d:	6a 01                	push   0x1
c0012c9f:	52                   	push   edx
c0012ca0:	01 d8                	add    eax,ebx
c0012ca2:	83 c3 01             	add    ebx,0x1
c0012ca5:	50                   	push   eax
c0012ca6:	0f be 05 98 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024298
c0012cad:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012cb4:	50                   	push   eax
c0012cb5:	e8 92 74 ff ff       	call   c000a14c <LogicalDisk::write(unsigned long long, int, void*)>
c0012cba:	83 c4 20             	add    esp,0x20
c0012cbd:	39 1d 8c 42 02 c0    	cmp    DWORD PTR ds:0xc002428c,ebx
c0012cc3:	7f c4                	jg     c0012c89 <VAS::evict(unsigned long)+0x27>
c0012cc5:	c1 e7 0c             	shl    edi,0xc
c0012cc8:	83 ec 08             	sub    esp,0x8
c0012ccb:	55                   	push   ebp
c0012ccc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cd0:	50                   	push   eax
c0012cd1:	e8 ea f5 ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c0012cd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cd8:	89 d3                	mov    ebx,edx
c0012cda:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ce0:	09 d7                	or     edi,edx
c0012ce2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012ce8:	89 38                	mov    DWORD PTR [eax],edi
c0012cea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ced:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012cf3:	83 c2 01             	add    edx,0x1
c0012cf6:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012cfc:	e8 ca c0 ff ff       	call   c000edcb <Phys::freePage(unsigned long)>
c0012d01:	0f 20 d8             	mov    eax,cr3
c0012d04:	0f 22 d8             	mov    cr3,eax
c0012d07:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012d0d:	51                   	push   ecx
c0012d0e:	55                   	push   ebp
c0012d0f:	53                   	push   ebx
c0012d10:	68 0c 26 02 c0       	push   0xc002260c
c0012d15:	e8 34 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d1a:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012d1f:	c7 44 24 50 c6 27 02 c0 	mov    DWORD PTR [esp+0x50],0xc00227c6
c0012d27:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012d2b:	8d 50 01             	lea    edx,[eax+0x1]
c0012d2e:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012d34:	83 c4 3c             	add    esp,0x3c
c0012d37:	5b                   	pop    ebx
c0012d38:	5e                   	pop    esi
c0012d39:	5f                   	pop    edi
c0012d3a:	5d                   	pop    ebp
c0012d3b:	e9 0e 42 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012d40 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012d40:	55                   	push   ebp
c0012d41:	57                   	push   edi
c0012d42:	56                   	push   esi
c0012d43:	53                   	push   ebx
c0012d44:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012d4a:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0012d51:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012d57:	77 7c                	ja     c0012dd5 <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012d59:	83 ec 08             	sub    esp,0x8
c0012d5c:	53                   	push   ebx
c0012d5d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012d63:	68 e9 27 02 c0       	push   0xc00227e9
c0012d68:	e8 e1 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d6d:	59                   	pop    ecx
c0012d6e:	5e                   	pop    esi
c0012d6f:	53                   	push   ebx
c0012d70:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0012d77:	57                   	push   edi
c0012d78:	e8 43 f5 ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	85 c0                	test   eax,eax
c0012d82:	89 c5                	mov    ebp,eax
c0012d84:	0f 95 c0             	setne  al
c0012d87:	85 db                	test   ebx,ebx
c0012d89:	0f 95 c2             	setne  dl
c0012d8c:	21 d0                	and    eax,edx
c0012d8e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012d92:	a8 01                	test   al,0x1
c0012d94:	75 0f                	jne    c0012da5 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0012d96:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012d9a:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012da0:	5b                   	pop    ebx
c0012da1:	5e                   	pop    esi
c0012da2:	5f                   	pop    edi
c0012da3:	5d                   	pop    ebp
c0012da4:	c3                   	ret    
c0012da5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012da8:	f6 c4 02             	test   ah,0x2
c0012dab:	75 3d                	jne    c0012dea <VAS::tryLoadBackOffDisk(unsigned long)+0xaa>
c0012dad:	89 c2                	mov    edx,eax
c0012daf:	81 e2 01 04 00 00    	and    edx,0x401
c0012db5:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012dbb:	0f 84 82 00 00 00    	je     c0012e43 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c0012dc1:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012dc6:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012dca:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012dd0:	5b                   	pop    ebx
c0012dd1:	5e                   	pop    esi
c0012dd2:	5f                   	pop    edi
c0012dd3:	5d                   	pop    ebp
c0012dd4:	c3                   	ret    
c0012dd5:	83 ec 0c             	sub    esp,0xc
c0012dd8:	68 d7 27 02 c0       	push   0xc00227d7
c0012ddd:	e8 58 be ff ff       	call   c000ec3a <KePanic(char const*)>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	e9 6f ff ff ff       	jmp    c0012d59 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0012dea:	83 ec 0c             	sub    esp,0xc
c0012ded:	68 3c 26 02 c0       	push   0xc002263c
c0012df2:	e8 57 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012df7:	e8 38 c0 ff ff       	call   c000ee34 <Phys::allocatePage()>
c0012dfc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012dff:	83 ca 01             	or     edx,0x1
c0012e02:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012e05:	0f 20 da             	mov    edx,cr3
c0012e08:	0f 22 da             	mov    cr3,edx
c0012e0b:	ba 00 10 00 00       	mov    edx,0x1000
c0012e10:	89 de                	mov    esi,ebx
c0012e12:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012e16:	89 d1                	mov    ecx,edx
c0012e18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e1a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012e1d:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012e23:	09 c8                	or     eax,ecx
c0012e25:	83 c8 02             	or     eax,0x2
c0012e28:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012e2b:	0f 20 d8             	mov    eax,cr3
c0012e2e:	0f 22 d8             	mov    cr3,eax
c0012e31:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012e35:	89 df                	mov    edi,ebx
c0012e37:	89 d1                	mov    ecx,edx
c0012e39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e3b:	83 c4 10             	add    esp,0x10
c0012e3e:	e9 53 ff ff ff       	jmp    c0012d96 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012e43:	c1 e8 0c             	shr    eax,0xc
c0012e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e4a:	e8 e5 bf ff ff       	call   c000ee34 <Phys::allocatePage()>
c0012e4f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012e52:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012e58:	09 c2                	or     edx,eax
c0012e5a:	81 ca 01 08 00 00    	or     edx,0x801
c0012e60:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012e63:	a1 8c 42 02 c0       	mov    eax,ds:0xc002428c
c0012e68:	85 c0                	test   eax,eax
c0012e6a:	7e 44                	jle    c0012eb0 <VAS::tryLoadBackOffDisk(unsigned long)+0x170>
c0012e6c:	89 df                	mov    edi,ebx
c0012e6e:	31 f6                	xor    esi,esi
c0012e70:	83 ec 0c             	sub    esp,0xc
c0012e73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012e77:	51                   	push   ecx
c0012e78:	e8 a3 f2 ff ff       	call   c0012120 <Virt::swapIDToSector(unsigned long)>
c0012e7d:	31 d2                	xor    edx,edx
c0012e7f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012e82:	81 c7 00 02 00 00    	add    edi,0x200
c0012e88:	6a 01                	push   0x1
c0012e8a:	52                   	push   edx
c0012e8b:	01 f0                	add    eax,esi
c0012e8d:	83 c6 01             	add    esi,0x1
c0012e90:	50                   	push   eax
c0012e91:	0f be 05 98 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024298
c0012e98:	8b 2c 85 7c 96 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd6984]
c0012e9f:	55                   	push   ebp
c0012ea0:	e8 3b 72 ff ff       	call   c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>
c0012ea5:	83 c4 20             	add    esp,0x20
c0012ea8:	39 35 8c 42 02 c0    	cmp    DWORD PTR ds:0xc002428c,esi
c0012eae:	7f c0                	jg     c0012e70 <VAS::tryLoadBackOffDisk(unsigned long)+0x130>
c0012eb0:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012eb5:	83 ec 04             	sub    esp,0x4
c0012eb8:	83 e8 01             	sub    eax,0x1
c0012ebb:	50                   	push   eax
c0012ebc:	53                   	push   ebx
c0012ebd:	68 fc 27 02 c0       	push   0xc00227fc
c0012ec2:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012ec7:	e8 82 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012ecc:	58                   	pop    eax
c0012ecd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012ed1:	52                   	push   edx
c0012ed2:	e8 26 f2 ff ff       	call   c00120fd <Virt::freeSwapfilePage(unsigned long)>
c0012ed7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012edc:	83 c4 10             	add    esp,0x10
c0012edf:	83 e8 01             	sub    eax,0x1
c0012ee2:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0012ee7:	85 c0                	test   eax,eax
c0012ee9:	75 01                	jne    c0012eec <VAS::tryLoadBackOffDisk(unsigned long)+0x1ac>
c0012eeb:	fb                   	sti    
c0012eec:	0f 20 d8             	mov    eax,cr3
c0012eef:	0f 22 d8             	mov    cr3,eax
c0012ef2:	e9 9f fe ff ff       	jmp    c0012d96 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012ef7:	90                   	nop

c0012ef8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012ef8:	55                   	push   ebp
c0012ef9:	57                   	push   edi
c0012efa:	56                   	push   esi
c0012efb:	53                   	push   ebx
c0012efc:	83 ec 28             	sub    esp,0x28
c0012eff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012f03:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012f07:	50                   	push   eax
c0012f08:	e8 d4 f0 ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c0012f0d:	83 c4 0c             	add    esp,0xc
c0012f10:	6a 07                	push   0x7
c0012f12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012f16:	52                   	push   edx
c0012f17:	89 c5                	mov    ebp,eax
c0012f19:	53                   	push   ebx
c0012f1a:	e8 c3 f8 ff ff       	call   c00127e2 <VAS::allocatePages(int, int)>
c0012f1f:	83 c4 10             	add    esp,0x10
c0012f22:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012f26:	89 c7                	mov    edi,eax
c0012f28:	85 c9                	test   ecx,ecx
c0012f2a:	74 2f                	je     c0012f5b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012f2c:	31 f6                	xor    esi,esi
c0012f2e:	e8 01 bf ff ff       	call   c000ee34 <Phys::allocatePage()>
c0012f33:	83 c6 01             	add    esi,0x1
c0012f36:	6a 03                	push   0x3
c0012f38:	55                   	push   ebp
c0012f39:	50                   	push   eax
c0012f3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f3e:	53                   	push   ebx
c0012f3f:	e8 7c f7 ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f44:	6a 07                	push   0x7
c0012f46:	57                   	push   edi
c0012f47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012f4b:	50                   	push   eax
c0012f4c:	53                   	push   ebx
c0012f4d:	e8 6e f7 ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f52:	83 c4 20             	add    esp,0x20
c0012f55:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0012f59:	75 d3                	jne    c0012f2e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0012f5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f5f:	89 28                	mov    DWORD PTR [eax],ebp
c0012f61:	83 c4 1c             	add    esp,0x1c
c0012f64:	89 f8                	mov    eax,edi
c0012f66:	5b                   	pop    ebx
c0012f67:	5e                   	pop    esi
c0012f68:	5f                   	pop    edi
c0012f69:	5d                   	pop    ebp
c0012f6a:	c3                   	ret    
c0012f6b:	90                   	nop

c0012f6c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0012f6c:	53                   	push   ebx
c0012f6d:	83 ec 14             	sub    esp,0x14
c0012f70:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012f74:	68 5c 26 02 c0       	push   0xc002265c
c0012f79:	e8 d0 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f7e:	c7 04 24 bc 26 02 c0 	mov    DWORD PTR [esp],0xc00226bc
c0012f85:	e8 c4 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f8a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012f8e:	83 c4 18             	add    esp,0x18
c0012f91:	5b                   	pop    ebx
c0012f92:	e9 48 f3 ff ff       	jmp    c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c0012f97:	90                   	nop

c0012f98 <VAS::scanForEviction()>:
c0012f98:	57                   	push   edi
c0012f99:	56                   	push   esi
c0012f9a:	31 f6                	xor    esi,esi
c0012f9c:	53                   	push   ebx
c0012f9d:	83 ec 10             	sub    esp,0x10
c0012fa0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012fa4:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012fa7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012fad:	75 0e                	jne    c0012fbd <VAS::scanForEviction()+0x25>
c0012faf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012fb2:	89 da                	mov    edx,ebx
c0012fb4:	c1 ea 16             	shr    edx,0x16
c0012fb7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012fbb:	74 57                	je     c0013014 <VAS::scanForEviction()+0x7c>
c0012fbd:	53                   	push   ebx
c0012fbe:	57                   	push   edi
c0012fbf:	e8 fc f2 ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c0012fc4:	5a                   	pop    edx
c0012fc5:	59                   	pop    ecx
c0012fc6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fc8:	89 d1                	mov    ecx,edx
c0012fca:	c1 e9 0c             	shr    ecx,0xc
c0012fcd:	74 10                	je     c0012fdf <VAS::scanForEviction()+0x47>
c0012fcf:	89 d1                	mov    ecx,edx
c0012fd1:	81 e1 01 08 00 00    	and    ecx,0x801
c0012fd7:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012fdd:	74 40                	je     c001301f <VAS::scanForEviction()+0x87>
c0012fdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012fe5:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012feb:	76 2d                	jbe    c001301a <VAS::scanForEviction()+0x82>
c0012fed:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0012ff4:	83 c6 01             	add    esi,0x1
c0012ff7:	83 fe 03             	cmp    esi,0x3
c0012ffa:	74 32                	je     c001302e <VAS::scanForEviction()+0x96>
c0012ffc:	31 db                	xor    ebx,ebx
c0012ffe:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013004:	75 b7                	jne    c0012fbd <VAS::scanForEviction()+0x25>
c0013006:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013009:	89 da                	mov    edx,ebx
c001300b:	c1 ea 16             	shr    edx,0x16
c001300e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013012:	75 a9                	jne    c0012fbd <VAS::scanForEviction()+0x25>
c0013014:	81 c3 00 00 40 00    	add    ebx,0x400000
c001301a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001301d:	eb 88                	jmp    c0012fa7 <VAS::scanForEviction()+0xf>
c001301f:	f6 c2 20             	test   dl,0x20
c0013022:	74 13                	je     c0013037 <VAS::scanForEviction()+0x9f>
c0013024:	83 e2 df             	and    edx,0xffffffdf
c0013027:	89 10                	mov    DWORD PTR [eax],edx
c0013029:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001302c:	eb b1                	jmp    c0012fdf <VAS::scanForEviction()+0x47>
c001302e:	83 c4 10             	add    esp,0x10
c0013031:	31 c0                	xor    eax,eax
c0013033:	5b                   	pop    ebx
c0013034:	5e                   	pop    esi
c0013035:	5f                   	pop    edi
c0013036:	c3                   	ret    
c0013037:	89 d0                	mov    eax,edx
c0013039:	83 ec 08             	sub    esp,0x8
c001303c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013041:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013045:	53                   	push   ebx
c0013046:	68 11 28 02 c0       	push   0xc0022811
c001304b:	e8 fe 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013050:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013053:	58                   	pop    eax
c0013054:	5a                   	pop    edx
c0013055:	51                   	push   ecx
c0013056:	57                   	push   edi
c0013057:	e8 06 fc ff ff       	call   c0012c62 <VAS::evict(unsigned long)>
c001305c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001305f:	5b                   	pop    ebx
c0013060:	5e                   	pop    esi
c0013061:	50                   	push   eax
c0013062:	68 25 28 02 c0       	push   0xc0022825
c0013067:	e8 e2 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001306c:	58                   	pop    eax
c001306d:	5a                   	pop    edx
c001306e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013072:	50                   	push   eax
c0013073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013077:	68 38 28 02 c0       	push   0xc0022838
c001307c:	e8 cd 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013081:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013084:	83 c4 10             	add    esp,0x10
c0013087:	81 c1 00 10 00 00    	add    ecx,0x1000
c001308d:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013094:	83 c4 10             	add    esp,0x10
c0013097:	5b                   	pop    ebx
c0013098:	5e                   	pop    esi
c0013099:	5f                   	pop    edi
c001309a:	c3                   	ret    

c001309b <mapVASFirstTime>:
c001309b:	55                   	push   ebp
c001309c:	57                   	push   edi
c001309d:	56                   	push   esi
c001309e:	53                   	push   ebx
c001309f:	83 ec 0c             	sub    esp,0xc
c00130a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130a7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00130aa:	83 fa 01             	cmp    edx,0x1
c00130ad:	0f 84 cb 00 00 00    	je     c001317e <mapVASFirstTime+0xe3>
c00130b3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130b6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00130bb:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00130c0:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00130c3:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00130c9:	c1 e5 15             	shl    ebp,0x15
c00130cc:	29 eb                	sub    ebx,ebp
c00130ce:	29 ef                	sub    edi,ebp
c00130d0:	e8 5f bd ff ff       	call   c000ee34 <Phys::allocatePage()>
c00130d5:	83 ec 0c             	sub    esp,0xc
c00130d8:	68 03 04 00 00       	push   0x403
c00130dd:	6a 01                	push   0x1
c00130df:	53                   	push   ebx
c00130e0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00130e6:	50                   	push   eax
c00130e7:	56                   	push   esi
c00130e8:	e8 e7 f7 ff ff       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130ed:	83 c4 20             	add    esp,0x20
c00130f0:	39 fb                	cmp    ebx,edi
c00130f2:	75 dc                	jne    c00130d0 <mapVASFirstTime+0x35>
c00130f4:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00130f9:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00130fe:	29 eb                	sub    ebx,ebp
c0013100:	29 ef                	sub    edi,ebp
c0013102:	e8 2d bd ff ff       	call   c000ee34 <Phys::allocatePage()>
c0013107:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001310b:	83 fa 01             	cmp    edx,0x1
c001310e:	19 d2                	sbb    edx,edx
c0013110:	83 ec 0c             	sub    esp,0xc
c0013113:	83 e2 04             	and    edx,0x4
c0013116:	81 c2 03 04 00 00    	add    edx,0x403
c001311c:	52                   	push   edx
c001311d:	6a 01                	push   0x1
c001311f:	53                   	push   ebx
c0013120:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013126:	50                   	push   eax
c0013127:	56                   	push   esi
c0013128:	e8 a7 f7 ff ff       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001312d:	83 c4 20             	add    esp,0x20
c0013130:	39 df                	cmp    edi,ebx
c0013132:	75 ce                	jne    c0013102 <mapVASFirstTime+0x67>
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c001313c:	6a 04                	push   0x4
c001313e:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c0013144:	6a ff                	push   0xffffffff
c0013146:	c1 eb 0c             	shr    ebx,0xc
c0013149:	53                   	push   ebx
c001314a:	68 00 50 02 c0       	push   0xc0025000
c001314f:	56                   	push   esi
c0013150:	e8 05 f3 ff ff       	call   c001245a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013155:	83 c4 14             	add    esp,0x14
c0013158:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001315d:	6a 04                	push   0x4
c001315f:	6a ff                	push   0xffffffff
c0013161:	53                   	push   ebx
c0013162:	68 00 50 02 c0       	push   0xc0025000
c0013167:	50                   	push   eax
c0013168:	e8 ed f2 ff ff       	call   c001245a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001316d:	0f 20 d8             	mov    eax,cr3
c0013170:	0f 22 d8             	mov    cr3,eax
c0013173:	83 c4 20             	add    esp,0x20
c0013176:	83 c4 0c             	add    esp,0xc
c0013179:	5b                   	pop    ebx
c001317a:	5e                   	pop    esi
c001317b:	5f                   	pop    edi
c001317c:	5d                   	pop    ebp
c001317d:	c3                   	ret    
c001317e:	83 ec 0c             	sub    esp,0xc
c0013181:	68 45 28 02 c0       	push   0xc0022845
c0013186:	e8 c3 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001318b:	83 c4 10             	add    esp,0x10
c001318e:	83 c4 0c             	add    esp,0xc
c0013191:	5b                   	pop    ebx
c0013192:	5e                   	pop    esi
c0013193:	5f                   	pop    edi
c0013194:	5d                   	pop    ebp
c0013195:	c3                   	ret    

c0013196 <SysEject(regs*)>:
c0013196:	83 ec 0c             	sub    esp,0xc
c0013199:	83 ca ff             	or     edx,0xffffffff
c001319c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00131a3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00131a8:	83 e9 41             	sub    ecx,0x41
c00131ab:	83 f9 19             	cmp    ecx,0x19
c00131ae:	77 18                	ja     c00131c8 <SysEject(regs*)+0x32>
c00131b0:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00131b7:	85 c9                	test   ecx,ecx
c00131b9:	74 0d                	je     c00131c8 <SysEject(regs*)+0x32>
c00131bb:	83 ec 0c             	sub    esp,0xc
c00131be:	51                   	push   ecx
c00131bf:	e8 b2 6e ff ff       	call   c000a076 <LogicalDisk::eject()>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	99                   	cdq    
c00131c8:	83 c4 0c             	add    esp,0xc
c00131cb:	c3                   	ret    

c00131cc <SysExit(regs*)>:
c00131cc:	83 ec 18             	sub    esp,0x18
c00131cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131d3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131d6:	e8 69 2a 00 00       	call   c0015c44 <terminateTask(int)>
c00131db:	83 c8 ff             	or     eax,0xffffffff
c00131de:	83 c4 1c             	add    esp,0x1c
c00131e1:	89 c2                	mov    edx,eax
c00131e3:	c3                   	ret    

c00131e4 <SysGetCwd(regs*)>:
c00131e4:	83 ec 10             	sub    esp,0x10
c00131e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131eb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00131ee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131f6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00131f9:	e8 ae 4b ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c00131fe:	83 c4 1c             	add    esp,0x1c
c0013201:	99                   	cdq    
c0013202:	c3                   	ret    

c0013203 <SysGetPID(regs*)>:
c0013203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013208:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001320b:	8b 00                	mov    eax,DWORD PTR [eax]
c001320d:	99                   	cdq    
c001320e:	c3                   	ret    

c001320f <SysGetRAMData(regs*)>:
c001320f:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c0013219:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c001321f:	99                   	cdq    
c0013220:	f7 f9                	idiv   ecx
c0013222:	c1 e0 18             	shl    eax,0x18
c0013225:	09 c8                	or     eax,ecx
c0013227:	99                   	cdq    
c0013228:	c3                   	ret    

c0013229 <SysGetVGAPtr(regs*)>:
c0013229:	55                   	push   ebp
c001322a:	57                   	push   edi
c001322b:	56                   	push   esi
c001322c:	53                   	push   ebx
c001322d:	83 ec 18             	sub    esp,0x18
c0013230:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013234:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013237:	e8 d4 24 00 00       	call   c0015710 <Thr::processFromPID(int)>
c001323c:	83 c4 10             	add    esp,0x10
c001323f:	89 c1                	mov    ecx,eax
c0013241:	b8 01 00 00 00       	mov    eax,0x1
c0013246:	85 c9                	test   ecx,ecx
c0013248:	74 57                	je     c00132a1 <SysGetVGAPtr(regs*)+0x78>
c001324a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001324e:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013254:	74 0c                	je     c0013262 <SysGetVGAPtr(regs*)+0x39>
c0013256:	83 ec 0c             	sub    esp,0xc
c0013259:	55                   	push   ebp
c001325a:	e8 36 de ff ff       	call   c0011095 <setActiveTerminal(VgaText*)>
c001325f:	83 c4 10             	add    esp,0x10
c0013262:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013265:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001326a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001326d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001326f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013272:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013275:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001327b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001327e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013281:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013287:	50                   	push   eax
c0013288:	50                   	push   eax
c0013289:	68 5e 28 02 c0       	push   0xc002285e
c001328e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013291:	05 a8 0f 00 00       	add    eax,0xfa8
c0013296:	50                   	push   eax
c0013297:	e8 b4 d3 fe ff       	call   c0000650 <strcpy>
c001329c:	83 c4 10             	add    esp,0x10
c001329f:	31 c0                	xor    eax,eax
c00132a1:	83 c4 0c             	add    esp,0xc
c00132a4:	31 d2                	xor    edx,edx
c00132a6:	5b                   	pop    ebx
c00132a7:	5e                   	pop    esi
c00132a8:	5f                   	pop    edi
c00132a9:	5d                   	pop    ebp
c00132aa:	c3                   	ret    
c00132ab:	90                   	nop

c00132ac <SysKill(regs*)>:
c00132ac:	53                   	push   ebx
c00132ad:	83 ec 08             	sub    esp,0x8
c00132b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132b4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00132b8:	75 16                	jne    c00132d0 <SysKill(regs*)+0x24>
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	68 68 28 02 c0       	push   0xc0022868
c00132c2:	e8 73 b9 ff ff       	call   c000ec3a <KePanic(char const*)>
c00132c7:	83 c4 10             	add    esp,0x10
c00132ca:	e9 89 00 00 00       	jmp    c0013358 <SysKill(regs*)+0xac>
c00132cf:	90                   	nop
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	68 cc c6 02 c0       	push   0xc002c6cc
c00132d8:	e8 eb cb 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00132dd:	8d 76 00             	lea    esi,[esi+0x0]
c00132e0:	83 c4 10             	add    esp,0x10
c00132e3:	85 c0                	test   eax,eax
c00132e5:	74 19                	je     c0013300 <SysKill(regs*)+0x54>
c00132e7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00132ea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00132ed:	39 0a                	cmp    DWORD PTR [edx],ecx
c00132ef:	74 33                	je     c0013324 <SysKill(regs*)+0x78>
c00132f1:	52                   	push   edx
c00132f2:	52                   	push   edx
c00132f3:	50                   	push   eax
c00132f4:	68 cc c6 02 c0       	push   0xc002c6cc
c00132f9:	e8 d6 d0 00 00       	call   c00203d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00132fe:	eb e0                	jmp    c00132e0 <SysKill(regs*)+0x34>
c0013300:	83 ec 0c             	sub    esp,0xc
c0013303:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013308:	e8 bb cb 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001330d:	8d 76 00             	lea    esi,[esi+0x0]
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	85 c0                	test   eax,eax
c0013315:	74 41                	je     c0013358 <SysKill(regs*)+0xac>
c0013317:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001331a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001331d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001331f:	75 27                	jne    c0013348 <SysKill(regs*)+0x9c>
c0013321:	8d 76 00             	lea    esi,[esi+0x0]
c0013324:	51                   	push   ecx
c0013325:	51                   	push   ecx
c0013326:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001332e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013331:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013337:	e8 28 ca ff ff       	call   c000fd64 <KeRaiseSignal(SigHandlerBlock*, int)>
c001333c:	83 c4 10             	add    esp,0x10
c001333f:	31 c0                	xor    eax,eax
c0013341:	31 d2                	xor    edx,edx
c0013343:	eb 1b                	jmp    c0013360 <SysKill(regs*)+0xb4>
c0013345:	8d 76 00             	lea    esi,[esi+0x0]
c0013348:	52                   	push   edx
c0013349:	52                   	push   edx
c001334a:	50                   	push   eax
c001334b:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013350:	e8 7f d0 00 00       	call   c00203d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013355:	eb b9                	jmp    c0013310 <SysKill(regs*)+0x64>
c0013357:	90                   	nop
c0013358:	83 c8 ff             	or     eax,0xffffffff
c001335b:	89 c2                	mov    edx,eax
c001335d:	8d 76 00             	lea    esi,[esi+0x0]
c0013360:	83 c4 08             	add    esp,0x8
c0013363:	5b                   	pop    ebx
c0013364:	c3                   	ret    

c0013365 <SysLoadDLL(regs*)>:
c0013365:	56                   	push   esi
c0013366:	31 d2                	xor    edx,edx
c0013368:	53                   	push   ebx
c0013369:	b8 01 00 00 00       	mov    eax,0x1
c001336e:	51                   	push   ecx
c001336f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013373:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013377:	0f 84 8c 00 00 00    	je     c0013409 <SysLoadDLL(regs*)+0xa4>
c001337d:	83 ec 0c             	sub    esp,0xc
c0013380:	68 14 01 00 00       	push   0x114
c0013385:	e8 5c b5 ff ff       	call   c000e8e6 <malloc>
c001338a:	83 c4 0c             	add    esp,0xc
c001338d:	89 c3                	mov    ebx,eax
c001338f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013394:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013397:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001339a:	53                   	push   ebx
c001339b:	e8 6c 4d ff ff       	call   c000810c <File::File(char const*, Process*)>
c00133a0:	83 c4 10             	add    esp,0x10
c00133a3:	31 d2                	xor    edx,edx
c00133a5:	85 db                	test   ebx,ebx
c00133a7:	b8 02 00 00 00       	mov    eax,0x2
c00133ac:	74 5b                	je     c0013409 <SysLoadDLL(regs*)+0xa4>
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	53                   	push   ebx
c00133b2:	e8 37 50 ff ff       	call   c00083ee <File::exists()>
c00133b7:	83 c4 10             	add    esp,0x10
c00133ba:	84 c0                	test   al,al
c00133bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133be:	75 11                	jne    c00133d1 <SysLoadDLL(regs*)+0x6c>
c00133c0:	83 ec 0c             	sub    esp,0xc
c00133c3:	53                   	push   ebx
c00133c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133c7:	83 c4 10             	add    esp,0x10
c00133ca:	b8 03 00 00 00       	mov    eax,0x3
c00133cf:	eb 36                	jmp    c0013407 <SysLoadDLL(regs*)+0xa2>
c00133d1:	83 ec 0c             	sub    esp,0xc
c00133d4:	53                   	push   ebx
c00133d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133d8:	58                   	pop    eax
c00133d9:	5a                   	pop    edx
c00133da:	6a 00                	push   0x0
c00133dc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133df:	e8 ef 15 00 00       	call   c00149d3 <Thr::loadDLL(char const*, bool)>
c00133e4:	83 c4 10             	add    esp,0x10
c00133e7:	31 d2                	xor    edx,edx
c00133e9:	89 c1                	mov    ecx,eax
c00133eb:	b8 04 00 00 00       	mov    eax,0x4
c00133f0:	85 c9                	test   ecx,ecx
c00133f2:	74 15                	je     c0013409 <SysLoadDLL(regs*)+0xa4>
c00133f4:	53                   	push   ebx
c00133f5:	53                   	push   ebx
c00133f6:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00133fc:	51                   	push   ecx
c00133fd:	e8 32 18 00 00       	call   c0014c34 <Thr::executeDLL(unsigned long, void*)>
c0013402:	83 c4 10             	add    esp,0x10
c0013405:	31 c0                	xor    eax,eax
c0013407:	31 d2                	xor    edx,edx
c0013409:	59                   	pop    ecx
c001340a:	5b                   	pop    ebx
c001340b:	5e                   	pop    esi
c001340c:	c3                   	ret    

c001340d <SysRead(regs*)>:
c001340d:	57                   	push   edi
c001340e:	56                   	push   esi
c001340f:	53                   	push   ebx
c0013410:	83 ec 10             	sub    esp,0x10
c0013413:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013417:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001341a:	83 f8 02             	cmp    eax,0x2
c001341d:	77 10                	ja     c001342f <SysRead(regs*)+0x22>
c001341f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013424:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013427:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001342d:	eb 0e                	jmp    c001343d <SysRead(regs*)+0x30>
c001342f:	83 ec 0c             	sub    esp,0xc
c0013432:	50                   	push   eax
c0013433:	e8 4f ea ff ff       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	89 c1                	mov    ecx,eax
c001343d:	83 c8 ff             	or     eax,0xffffffff
c0013440:	85 c9                	test   ecx,ecx
c0013442:	89 c2                	mov    edx,eax
c0013444:	74 28                	je     c001346e <SysRead(regs*)+0x61>
c0013446:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001344e:	83 ec 0c             	sub    esp,0xc
c0013451:	31 ff                	xor    edi,edi
c0013453:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013457:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013459:	52                   	push   edx
c001345a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001345d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013460:	57                   	push   edi
c0013461:	56                   	push   esi
c0013462:	51                   	push   ecx
c0013463:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013466:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001346a:	83 c4 20             	add    esp,0x20
c001346d:	99                   	cdq    
c001346e:	83 c4 10             	add    esp,0x10
c0013471:	5b                   	pop    ebx
c0013472:	5e                   	pop    esi
c0013473:	5f                   	pop    edi
c0013474:	c3                   	ret    

c0013475 <SysRegisterSignal(regs*)>:
c0013475:	83 ec 18             	sub    esp,0x18
c0013478:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001347c:	6a 00                	push   0x0
c001347e:	6a 00                	push   0x0
c0013480:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013483:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013486:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001348b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001348e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013494:	e8 95 c8 ff ff       	call   c000fd2e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013499:	83 c4 2c             	add    esp,0x2c
c001349c:	99                   	cdq    
c001349d:	c3                   	ret    

c001349e <SysRegistryGetTypeFromPath(regs*)>:
c001349e:	53                   	push   ebx
c001349f:	81 ec 40 01 00 00    	sub    esp,0x140
c00134a5:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00134ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00134af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134b2:	e8 00 9e ff ff       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00134b7:	83 c4 10             	add    esp,0x10
c00134ba:	85 c0                	test   eax,eax
c00134bc:	89 c1                	mov    ecx,eax
c00134be:	74 15                	je     c00134d5 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00134c0:	50                   	push   eax
c00134c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00134c5:	50                   	push   eax
c00134c6:	51                   	push   ecx
c00134c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134ca:	e8 cd 99 ff ff       	call   c000ce9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134cf:	83 c4 10             	add    esp,0x10
c00134d2:	99                   	cdq    
c00134d3:	eb 05                	jmp    c00134da <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00134d5:	83 c8 ff             	or     eax,0xffffffff
c00134d8:	89 c2                	mov    edx,eax
c00134da:	81 c4 38 01 00 00    	add    esp,0x138
c00134e0:	5b                   	pop    ebx
c00134e1:	c3                   	ret    

c00134e2 <SysRegistryReadExtent(regs*)>:
c00134e2:	83 ec 1c             	sub    esp,0x1c
c00134e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134e9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134ec:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00134ef:	85 c0                	test   eax,eax
c00134f1:	79 1f                	jns    c0013512 <SysRegistryReadExtent(regs*)+0x30>
c00134f3:	52                   	push   edx
c00134f4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00134f9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00134fd:	52                   	push   edx
c00134fe:	50                   	push   eax
c00134ff:	51                   	push   ecx
c0013500:	e8 89 98 ff ff       	call   c000cd8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013505:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013509:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	eb 14                	jmp    c0013526 <SysRegistryReadExtent(regs*)+0x44>
c0013512:	83 ec 04             	sub    esp,0x4
c0013515:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013518:	50                   	push   eax
c0013519:	51                   	push   ecx
c001351a:	e8 0d 93 ff ff       	call   c000c82c <CmGetString(Reghive_Tag*, int, char*)>
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	31 c0                	xor    eax,eax
c0013524:	31 d2                	xor    edx,edx
c0013526:	83 c4 1c             	add    esp,0x1c
c0013529:	c3                   	ret    

c001352a <SysRegistryPathToExtentLookup(regs*)>:
c001352a:	83 ec 14             	sub    esp,0x14
c001352d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013531:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013534:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013537:	e8 7b 9d ff ff       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001353c:	83 c4 1c             	add    esp,0x1c
c001353f:	99                   	cdq    
c0013540:	c3                   	ret    

c0013541 <SysRegistryEnterDirectory(regs*)>:
c0013541:	83 ec 14             	sub    esp,0x14
c0013544:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013548:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001354b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001354e:	e8 50 93 ff ff       	call   c000c8a3 <CmEnterDirectory(Reghive_Tag*, int)>
c0013553:	83 c4 1c             	add    esp,0x1c
c0013556:	99                   	cdq    
c0013557:	c3                   	ret    

c0013558 <SysRegistryGetNext(regs*)>:
c0013558:	83 ec 14             	sub    esp,0x14
c001355b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001355f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013562:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013565:	e8 78 93 ff ff       	call   c000c8e2 <CmGetNext(Reghive_Tag*, int)>
c001356a:	83 c4 1c             	add    esp,0x1c
c001356d:	99                   	cdq    
c001356e:	c3                   	ret    

c001356f <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001356f:	57                   	push   edi
c0013570:	56                   	push   esi
c0013571:	53                   	push   ebx
c0013572:	81 ec 34 01 00 00    	sub    esp,0x134
c0013578:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001357f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013583:	57                   	push   edi
c0013584:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013587:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001358a:	e8 0d 99 ff ff       	call   c000ce9c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001358f:	89 c3                	mov    ebx,eax
c0013591:	58                   	pop    eax
c0013592:	5a                   	pop    edx
c0013593:	57                   	push   edi
c0013594:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013597:	e8 b4 d0 fe ff       	call   c0000650 <strcpy>
c001359c:	81 c4 40 01 00 00    	add    esp,0x140
c00135a2:	89 d8                	mov    eax,ebx
c00135a4:	5b                   	pop    ebx
c00135a5:	99                   	cdq    
c00135a6:	5e                   	pop    esi
c00135a7:	5f                   	pop    edi
c00135a8:	c3                   	ret    

c00135a9 <SysRegistryOpen(regs*)>:
c00135a9:	83 ec 18             	sub    esp,0x18
c00135ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135b0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135b3:	e8 04 91 ff ff       	call   c000c6bc <CmOpen(char const*)>
c00135b8:	83 c4 1c             	add    esp,0x1c
c00135bb:	99                   	cdq    
c00135bc:	c3                   	ret    

c00135bd <SysRegistryClose(regs*)>:
c00135bd:	83 ec 18             	sub    esp,0x18
c00135c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135c4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135c7:	e8 0e 92 ff ff       	call   c000c7da <CmClose(Reghive_Tag*)>
c00135cc:	31 c0                	xor    eax,eax
c00135ce:	31 d2                	xor    edx,edx
c00135d0:	83 c4 1c             	add    esp,0x1c
c00135d3:	c3                   	ret    

c00135d4 <SysRegistryEasyReadString(regs*)>:
c00135d4:	57                   	push   edi
c00135d5:	56                   	push   esi
c00135d6:	53                   	push   ebx
c00135d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135db:	83 ec 0c             	sub    esp,0xc
c00135de:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00135e1:	e8 d6 90 ff ff       	call   c000c6bc <CmOpen(char const*)>
c00135e6:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00135e9:	5a                   	pop    edx
c00135ea:	59                   	pop    ecx
c00135eb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00135ee:	89 c3                	mov    ebx,eax
c00135f0:	50                   	push   eax
c00135f1:	e8 c1 9c ff ff       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00135f6:	83 c4 10             	add    esp,0x10
c00135f9:	89 c1                	mov    ecx,eax
c00135fb:	b8 01 00 00 00       	mov    eax,0x1
c0013600:	85 c9                	test   ecx,ecx
c0013602:	7e 16                	jle    c001361a <SysRegistryEasyReadString(regs*)+0x46>
c0013604:	50                   	push   eax
c0013605:	57                   	push   edi
c0013606:	51                   	push   ecx
c0013607:	53                   	push   ebx
c0013608:	e8 1f 92 ff ff       	call   c000c82c <CmGetString(Reghive_Tag*, int, char*)>
c001360d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013610:	e8 c5 91 ff ff       	call   c000c7da <CmClose(Reghive_Tag*)>
c0013615:	83 c4 10             	add    esp,0x10
c0013618:	31 c0                	xor    eax,eax
c001361a:	5b                   	pop    ebx
c001361b:	31 d2                	xor    edx,edx
c001361d:	5e                   	pop    esi
c001361e:	5f                   	pop    edi
c001361f:	c3                   	ret    

c0013620 <SysRegistryEasyReadInteger(regs*)>:
c0013620:	56                   	push   esi
c0013621:	53                   	push   ebx
c0013622:	83 ec 10             	sub    esp,0x10
c0013625:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013629:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001362c:	e8 8b 90 ff ff       	call   c000c6bc <CmOpen(char const*)>
c0013631:	5a                   	pop    edx
c0013632:	59                   	pop    ecx
c0013633:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013636:	89 c3                	mov    ebx,eax
c0013638:	50                   	push   eax
c0013639:	e8 79 9c ff ff       	call   c000d2b7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001363e:	83 c4 10             	add    esp,0x10
c0013641:	89 c1                	mov    ecx,eax
c0013643:	b8 01 00 00 00       	mov    eax,0x1
c0013648:	85 c9                	test   ecx,ecx
c001364a:	7e 18                	jle    c0013664 <SysRegistryEasyReadInteger(regs*)+0x44>
c001364c:	50                   	push   eax
c001364d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013650:	51                   	push   ecx
c0013651:	53                   	push   ebx
c0013652:	e8 37 97 ff ff       	call   c000cd8e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013657:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001365a:	e8 7b 91 ff ff       	call   c000c7da <CmClose(Reghive_Tag*)>
c001365f:	83 c4 10             	add    esp,0x10
c0013662:	31 c0                	xor    eax,eax
c0013664:	59                   	pop    ecx
c0013665:	31 d2                	xor    edx,edx
c0013667:	5b                   	pop    ebx
c0013668:	5e                   	pop    esi
c0013669:	c3                   	ret    

c001366a <SysSbrk(regs*)>:
c001366a:	56                   	push   esi
c001366b:	53                   	push   ebx
c001366c:	50                   	push   eax
c001366d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013676:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013679:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001367c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013682:	85 db                	test   ebx,ebx
c0013684:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013687:	74 02                	je     c001368b <SysSbrk(regs*)+0x21>
c0013689:	79 06                	jns    c0013691 <SysSbrk(regs*)+0x27>
c001368b:	89 f0                	mov    eax,esi
c001368d:	31 d2                	xor    edx,edx
c001368f:	eb 2a                	jmp    c00136bb <SysSbrk(regs*)+0x51>
c0013691:	83 c8 ff             	or     eax,0xffffffff
c0013694:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001369a:	89 c2                	mov    edx,eax
c001369c:	77 1d                	ja     c00136bb <SysSbrk(regs*)+0x51>
c001369e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00136a4:	50                   	push   eax
c00136a5:	68 07 0c 00 00       	push   0xc07
c00136aa:	c1 ea 0c             	shr    edx,0xc
c00136ad:	52                   	push   edx
c00136ae:	51                   	push   ecx
c00136af:	e8 2e f1 ff ff       	call   c00127e2 <VAS::allocatePages(int, int)>
c00136b4:	89 f0                	mov    eax,esi
c00136b6:	31 d2                	xor    edx,edx
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	59                   	pop    ecx
c00136bc:	5b                   	pop    ebx
c00136bd:	5e                   	pop    esi
c00136be:	c3                   	ret    

c00136bf <SysSetCwd(regs*)>:
c00136bf:	83 ec 14             	sub    esp,0x14
c00136c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136ce:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00136d1:	e8 b7 4d ff ff       	call   c000848d <Fs::setcwd(Process*, char*)>
c00136d6:	83 c4 1c             	add    esp,0x1c
c00136d9:	99                   	cdq    
c00136da:	c3                   	ret    

c00136db <SysSetTime(regs*)>:
c00136db:	55                   	push   ebp
c00136dc:	31 c9                	xor    ecx,ecx
c00136de:	57                   	push   edi
c00136df:	bd 0c 00 00 00       	mov    ebp,0xc
c00136e4:	56                   	push   esi
c00136e5:	53                   	push   ebx
c00136e6:	31 db                	xor    ebx,ebx
c00136e8:	83 ec 10             	sub    esp,0x10
c00136eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136ef:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00136f2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00136f5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00136f8:	89 c2                	mov    edx,eax
c00136fa:	c1 e8 05             	shr    eax,0x5
c00136fd:	83 e2 1f             	and    edx,0x1f
c0013700:	42                   	inc    edx
c0013701:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013707:	c1 e7 10             	shl    edi,0x10
c001370a:	88 d1                	mov    cl,dl
c001370c:	31 d2                	xor    edx,edx
c001370e:	f7 f5                	div    ebp
c0013710:	89 dd                	mov    ebp,ebx
c0013712:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013718:	88 d5                	mov    ch,dl
c001371a:	31 d2                	xor    edx,edx
c001371c:	0f b7 c1             	movzx  eax,cx
c001371f:	09 f8                	or     eax,edi
c0013721:	bf 3c 00 00 00       	mov    edi,0x3c
c0013726:	89 c1                	mov    ecx,eax
c0013728:	89 f0                	mov    eax,esi
c001372a:	f7 f7                	div    edi
c001372c:	c1 e2 10             	shl    edx,0x10
c001372f:	09 d5                	or     ebp,edx
c0013731:	31 d2                	xor    edx,edx
c0013733:	f7 f7                	div    edi
c0013735:	89 eb                	mov    ebx,ebp
c0013737:	bf 10 0e 00 00       	mov    edi,0xe10
c001373c:	89 f0                	mov    eax,esi
c001373e:	88 d7                	mov    bh,dl
c0013740:	31 d2                	xor    edx,edx
c0013742:	f7 f7                	div    edi
c0013744:	bf 18 00 00 00       	mov    edi,0x18
c0013749:	31 d2                	xor    edx,edx
c001374b:	f7 f7                	div    edi
c001374d:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0013752:	88 d3                	mov    bl,dl
c0013754:	53                   	push   ebx
c0013755:	51                   	push   ecx
c0013756:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001375c:	e8 f5 55 ff ff       	call   c0008d56 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013761:	83 c4 1c             	add    esp,0x1c
c0013764:	31 d2                	xor    edx,edx
c0013766:	5b                   	pop    ebx
c0013767:	5e                   	pop    esi
c0013768:	83 f0 01             	xor    eax,0x1
c001376b:	5f                   	pop    edi
c001376c:	0f b6 c0             	movzx  eax,al
c001376f:	5d                   	pop    ebp
c0013770:	c3                   	ret    

c0013771 <SysSymlink(regs*)>:
c0013771:	56                   	push   esi
c0013772:	83 c8 ff             	or     eax,0xffffffff
c0013775:	53                   	push   ebx
c0013776:	89 c2                	mov    edx,eax
c0013778:	81 ec 34 02 00 00    	sub    esp,0x234
c001377e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013785:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013789:	74 50                	je     c00137db <SysSymlink(regs*)+0x6a>
c001378b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001378e:	85 c9                	test   ecx,ecx
c0013790:	74 49                	je     c00137db <SysSymlink(regs*)+0x6a>
c0013792:	6a 01                	push   0x1
c0013794:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013799:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001379c:	05 0c 01 00 00       	add    eax,0x10c
c00137a1:	50                   	push   eax
c00137a2:	51                   	push   ecx
c00137a3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00137a7:	56                   	push   esi
c00137a8:	e8 53 46 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00137ad:	6a 01                	push   0x1
c00137af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137b7:	05 0c 01 00 00       	add    eax,0x10c
c00137bc:	50                   	push   eax
c00137bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00137c0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00137c7:	53                   	push   ebx
c00137c8:	e8 33 46 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00137cd:	83 c4 18             	add    esp,0x18
c00137d0:	56                   	push   esi
c00137d1:	53                   	push   ebx
c00137d2:	e8 57 42 ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c00137d7:	83 c4 10             	add    esp,0x10
c00137da:	99                   	cdq    
c00137db:	81 c4 34 02 00 00    	add    esp,0x234
c00137e1:	5b                   	pop    ebx
c00137e2:	5e                   	pop    esi
c00137e3:	c3                   	ret    

c00137e4 <SysTimezone(regs*)>:
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137eb:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00137ef:	75 17                	jne    c0013808 <SysTimezone(regs*)+0x24>
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	68 89 28 02 c0       	push   0xc0022889
c00137f9:	e8 50 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00137fe:	83 c8 ff             	or     eax,0xffffffff
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	89 c2                	mov    edx,eax
c0013806:	eb 17                	jmp    c001381f <SysTimezone(regs*)+0x3b>
c0013808:	83 ec 0c             	sub    esp,0xc
c001380b:	68 9e 28 02 c0       	push   0xc002289e
c0013810:	e8 39 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	b8 01 00 00 00       	mov    eax,0x1
c001381d:	31 d2                	xor    edx,edx
c001381f:	83 c4 0c             	add    esp,0xc
c0013822:	c3                   	ret    

c0013823 <SysTruncate(regs*)>:
c0013823:	55                   	push   ebp
c0013824:	57                   	push   edi
c0013825:	31 ff                	xor    edi,edi
c0013827:	56                   	push   esi
c0013828:	53                   	push   ebx
c0013829:	83 ec 0c             	sub    esp,0xc
c001382c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013830:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013833:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013837:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001383a:	89 ce                	mov    esi,ecx
c001383c:	0f 84 9a 00 00 00    	je     c00138dc <SysTruncate(regs*)+0xb9>
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	68 14 01 00 00       	push   0x114
c001384a:	e8 97 b0 ff ff       	call   c000e8e6 <malloc>
c001384f:	83 c4 0c             	add    esp,0xc
c0013852:	89 c3                	mov    ebx,eax
c0013854:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013859:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001385c:	55                   	push   ebp
c001385d:	53                   	push   ebx
c001385e:	e8 a9 48 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013863:	83 c4 10             	add    esp,0x10
c0013866:	31 d2                	xor    edx,edx
c0013868:	85 db                	test   ebx,ebx
c001386a:	b8 03 00 00 00       	mov    eax,0x3
c001386f:	0f 84 a2 00 00 00    	je     c0013917 <SysTruncate(regs*)+0xf4>
c0013875:	51                   	push   ecx
c0013876:	51                   	push   ecx
c0013877:	6a 02                	push   0x2
c0013879:	53                   	push   ebx
c001387a:	e8 ab 48 ff ff       	call   c000812a <File::open(FileOpenMode)>
c001387f:	83 c4 10             	add    esp,0x10
c0013882:	85 c0                	test   eax,eax
c0013884:	74 13                	je     c0013899 <SysTruncate(regs*)+0x76>
c0013886:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013888:	83 ec 0c             	sub    esp,0xc
c001388b:	53                   	push   ebx
c001388c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001388f:	83 c4 10             	add    esp,0x10
c0013892:	b8 04 00 00 00       	mov    eax,0x4
c0013897:	eb 7c                	jmp    c0013915 <SysTruncate(regs*)+0xf2>
c0013899:	52                   	push   edx
c001389a:	57                   	push   edi
c001389b:	56                   	push   esi
c001389c:	53                   	push   ebx
c001389d:	e8 9c 49 ff ff       	call   c000823e <File::truncate(unsigned long long)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	85 c0                	test   eax,eax
c00138a7:	74 1b                	je     c00138c4 <SysTruncate(regs*)+0xa1>
c00138a9:	83 ec 0c             	sub    esp,0xc
c00138ac:	53                   	push   ebx
c00138ad:	e8 d6 48 ff ff       	call   c0008188 <File::close()>
c00138b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	b8 05 00 00 00       	mov    eax,0x5
c00138c2:	eb 51                	jmp    c0013915 <SysTruncate(regs*)+0xf2>
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	53                   	push   ebx
c00138c8:	e8 bb 48 ff ff       	call   c0008188 <File::close()>
c00138cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	31 c0                	xor    eax,eax
c00138da:	eb 39                	jmp    c0013915 <SysTruncate(regs*)+0xf2>
c00138dc:	31 d2                	xor    edx,edx
c00138de:	83 fd 02             	cmp    ebp,0x2
c00138e1:	b8 01 00 00 00       	mov    eax,0x1
c00138e6:	7e 2f                	jle    c0013917 <SysTruncate(regs*)+0xf4>
c00138e8:	83 ec 0c             	sub    esp,0xc
c00138eb:	51                   	push   ecx
c00138ec:	e8 96 e5 ff ff       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c00138f1:	83 c4 10             	add    esp,0x10
c00138f4:	31 d2                	xor    edx,edx
c00138f6:	89 c1                	mov    ecx,eax
c00138f8:	b8 02 00 00 00       	mov    eax,0x2
c00138fd:	85 c9                	test   ecx,ecx
c00138ff:	74 16                	je     c0013917 <SysTruncate(regs*)+0xf4>
c0013901:	50                   	push   eax
c0013902:	57                   	push   edi
c0013903:	56                   	push   esi
c0013904:	51                   	push   ecx
c0013905:	e8 34 49 ff ff       	call   c000823e <File::truncate(unsigned long long)>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	85 c0                	test   eax,eax
c001390f:	0f 95 c0             	setne  al
c0013912:	0f b6 c0             	movzx  eax,al
c0013915:	31 d2                	xor    edx,edx
c0013917:	83 c4 0c             	add    esp,0xc
c001391a:	5b                   	pop    ebx
c001391b:	5e                   	pop    esi
c001391c:	5f                   	pop    edi
c001391d:	5d                   	pop    ebp
c001391e:	c3                   	ret    

c001391f <SysWrite(regs*)>:
c001391f:	57                   	push   edi
c0013920:	56                   	push   esi
c0013921:	53                   	push   ebx
c0013922:	83 ec 10             	sub    esp,0x10
c0013925:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013929:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001392c:	83 f8 02             	cmp    eax,0x2
c001392f:	77 10                	ja     c0013941 <SysWrite(regs*)+0x22>
c0013931:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013936:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013939:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001393f:	eb 0e                	jmp    c001394f <SysWrite(regs*)+0x30>
c0013941:	83 ec 0c             	sub    esp,0xc
c0013944:	50                   	push   eax
c0013945:	e8 3d e5 ff ff       	call   c0011e87 <KeGetFileFromDescriptor(int)>
c001394a:	83 c4 10             	add    esp,0x10
c001394d:	89 c1                	mov    ecx,eax
c001394f:	83 c8 ff             	or     eax,0xffffffff
c0013952:	85 c9                	test   ecx,ecx
c0013954:	89 c2                	mov    edx,eax
c0013956:	74 28                	je     c0013980 <SysWrite(regs*)+0x61>
c0013958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013960:	83 ec 0c             	sub    esp,0xc
c0013963:	31 ff                	xor    edi,edi
c0013965:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013969:	8b 01                	mov    eax,DWORD PTR [ecx]
c001396b:	52                   	push   edx
c001396c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001396f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013972:	57                   	push   edi
c0013973:	56                   	push   esi
c0013974:	51                   	push   ecx
c0013975:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013978:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001397c:	83 c4 20             	add    esp,0x20
c001397f:	99                   	cdq    
c0013980:	83 c4 10             	add    esp,0x10
c0013983:	5b                   	pop    ebx
c0013984:	5e                   	pop    esi
c0013985:	5f                   	pop    edi
c0013986:	c3                   	ret    

c0013987 <SysWsbe(regs*)>:
c0013987:	55                   	push   ebp
c0013988:	57                   	push   edi
c0013989:	56                   	push   esi
c001398a:	53                   	push   ebx
c001398b:	83 ec 3c             	sub    esp,0x3c
c001398e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013992:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013999:	75 2d                	jne    c00139c8 <SysWsbe(regs*)+0x41>
c001399b:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00139a2:	75 24                	jne    c00139c8 <SysWsbe(regs*)+0x41>
c00139a4:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00139ab:	75 1b                	jne    c00139c8 <SysWsbe(regs*)+0x41>
c00139ad:	6a 01                	push   0x1
c00139af:	6a 00                	push   0x0
c00139b1:	68 6e 95 00 c0       	push   0xc000956e
c00139b6:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00139bc:	e8 c3 18 00 00       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	31 c0                	xor    eax,eax
c00139c6:	eb 52                	jmp    c0013a1a <SysWsbe(regs*)+0x93>
c00139c8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00139cc:	be dd 28 02 c0       	mov    esi,0xc00228dd
c00139d1:	b9 0b 00 00 00       	mov    ecx,0xb
c00139d6:	fc                   	cld    
c00139d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139d9:	83 ec 0c             	sub    esp,0xc
c00139dc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00139e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139e8:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00139ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00139f0:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00139f3:	57                   	push   edi
c00139f4:	e8 87 cb fe ff       	call   c0000580 <strlen>
c00139f9:	5a                   	pop    edx
c00139fa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00139fe:	52                   	push   edx
c00139ff:	31 d2                	xor    edx,edx
c0013a01:	57                   	push   edi
c0013a02:	52                   	push   edx
c0013a03:	50                   	push   eax
c0013a04:	56                   	push   esi
c0013a05:	ff d5                	call   ebp
c0013a07:	83 c4 14             	add    esp,0x14
c0013a0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a0d:	e8 32 22 00 00       	call   c0015c44 <terminateTask(int)>
c0013a12:	83 c4 10             	add    esp,0x10
c0013a15:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013a1a:	83 c4 3c             	add    esp,0x3c
c0013a1d:	31 d2                	xor    edx,edx
c0013a1f:	5b                   	pop    ebx
c0013a20:	5e                   	pop    esi
c0013a21:	5f                   	pop    edi
c0013a22:	5d                   	pop    ebp
c0013a23:	c3                   	ret    

c0013a24 <SysYield(regs*)>:
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	fa                   	cli    
c0013a28:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013a2e:	e8 9d 1a 00 00       	call   c00154d0 <schedule()>
c0013a33:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013a38:	48                   	dec    eax
c0013a39:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013a3e:	75 01                	jne    c0013a41 <SysYield(regs*)+0x1d>
c0013a40:	fb                   	sti    
c0013a41:	31 c0                	xor    eax,eax
c0013a43:	31 d2                	xor    edx,edx
c0013a45:	83 c4 0c             	add    esp,0xc
c0013a48:	c3                   	ret    

c0013a49 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013a49:	55                   	push   ebp
c0013a4a:	57                   	push   edi
c0013a4b:	56                   	push   esi
c0013a4c:	53                   	push   ebx
c0013a4d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013a53:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013a5e:	74 3b                	je     c0013a9b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013a60:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013a68:	74 31                	je     c0013a9b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013a6a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013a72:	75 27                	jne    c0013a9b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013a74:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013a7b:	05 00 10 00 00       	add    eax,0x1000
c0013a80:	89 c2                	mov    edx,eax
c0013a82:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a87:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013a8e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013a94:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013a9b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013aa2:	83 ec 0c             	sub    esp,0xc
c0013aa5:	6a 01                	push   0x1
c0013aa7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013aad:	e8 2f e5 ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c0013ab2:	83 c4 10             	add    esp,0x10
c0013ab5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013abb:	89 c3                	mov    ebx,eax
c0013abd:	0f 86 26 01 00 00    	jbe    c0013be9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0013ac3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013acb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013ad2:	c1 ee 0c             	shr    esi,0xc
c0013ad5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013ad9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013ae0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013ae7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013aeb:	29 ef                	sub    edi,ebp
c0013aed:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013af1:	0f 83 f9 00 00 00    	jae    c0013bf0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013af7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013afd:	b8 00 10 00 00       	mov    eax,0x1000
c0013b02:	0f 47 f8             	cmova  edi,eax
c0013b05:	83 ec 0c             	sub    esp,0xc
c0013b08:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b0f:	31 d2                	xor    edx,edx
c0013b11:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b13:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b17:	50                   	push   eax
c0013b18:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013b1c:	56                   	push   esi
c0013b1d:	52                   	push   edx
c0013b1e:	57                   	push   edi
c0013b1f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013b26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013b29:	83 c4 20             	add    esp,0x20
c0013b2c:	85 c0                	test   eax,eax
c0013b2e:	75 06                	jne    c0013b36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013b30:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013b34:	74 13                	je     c0013b49 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	53                   	push   ebx
c0013b3a:	e8 a0 e7 ff ff       	call   c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c0013b3f:	83 c4 10             	add    esp,0x10
c0013b42:	31 c0                	xor    eax,eax
c0013b44:	e9 7c 01 00 00       	jmp    c0013cc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013b49:	fa                   	cli    
c0013b4a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013b50:	e8 df b2 ff ff       	call   c000ee34 <Phys::allocatePage()>
c0013b55:	6a 07                	push   0x7
c0013b57:	53                   	push   ebx
c0013b58:	50                   	push   eax
c0013b59:	89 c7                	mov    edi,eax
c0013b5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b63:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b69:	e8 52 eb ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b6e:	83 c4 0c             	add    esp,0xc
c0013b71:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b78:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b7e:	6a 00                	push   0x0
c0013b80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b88:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b8e:	e8 93 e9 ff ff       	call   c0012526 <VAS::mapOtherVASIn(bool, VAS*)>
c0013b93:	58                   	pop    eax
c0013b94:	5a                   	pop    edx
c0013b95:	68 07 0c 00 00       	push   0xc07
c0013b9a:	55                   	push   ebp
c0013b9b:	57                   	push   edi
c0013b9c:	89 df                	mov    edi,ebx
c0013b9e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013ba5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bab:	6a 00                	push   0x0
c0013bad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bb2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bb5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bbb:	e8 6e ed ff ff       	call   c001292e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bc0:	b9 00 10 00 00       	mov    ecx,0x1000
c0013bc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bc7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013bcc:	83 c4 20             	add    esp,0x20
c0013bcf:	48                   	dec    eax
c0013bd0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013bd5:	85 c0                	test   eax,eax
c0013bd7:	75 01                	jne    c0013bda <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0013bd9:	fb                   	sti    
c0013bda:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013bde:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013be4:	e9 f0 fe ff ff       	jmp    c0013ad9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013be9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013bf0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013bf7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013bfd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013c03:	0f 86 ae 00 00 00    	jbe    c0013cb7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013c09:	fa                   	cli    
c0013c0a:	51                   	push   ecx
c0013c0b:	31 ff                	xor    edi,edi
c0013c0d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013c14:	c1 ee 0c             	shr    esi,0xc
c0013c17:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013c1d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c23:	6a 00                	push   0x0
c0013c25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c2d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c33:	e8 ee e8 ff ff       	call   c0012526 <VAS::mapOtherVASIn(bool, VAS*)>
c0013c38:	83 c4 10             	add    esp,0x10
c0013c3b:	e8 f4 b1 ff ff       	call   c000ee34 <Phys::allocatePage()>
c0013c40:	47                   	inc    edi
c0013c41:	6a 07                	push   0x7
c0013c43:	53                   	push   ebx
c0013c44:	50                   	push   eax
c0013c45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c49:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013c4f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013c52:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013c58:	e8 63 ea ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c5d:	58                   	pop    eax
c0013c5e:	5a                   	pop    edx
c0013c5f:	68 07 0c 00 00       	push   0xc07
c0013c64:	55                   	push   ebp
c0013c65:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013c6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c6f:	50                   	push   eax
c0013c70:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013c77:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c7d:	6a 00                	push   0x0
c0013c7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c87:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c8d:	e8 9c ec ff ff       	call   c001292e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013c92:	83 c4 1c             	add    esp,0x1c
c0013c95:	68 00 10 00 00       	push   0x1000
c0013c9a:	6a 00                	push   0x0
c0013c9c:	53                   	push   ebx
c0013c9d:	e8 4e c8 fe ff       	call   c00004f0 <memset>
c0013ca2:	83 c4 10             	add    esp,0x10
c0013ca5:	39 fe                	cmp    esi,edi
c0013ca7:	77 92                	ja     c0013c3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013ca9:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013cae:	48                   	dec    eax
c0013caf:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013cb4:	75 01                	jne    c0013cb7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013cb6:	fb                   	sti    
c0013cb7:	83 ec 0c             	sub    esp,0xc
c0013cba:	53                   	push   ebx
c0013cbb:	e8 1f e6 ff ff       	call   c00122df <Virt::freeKernelVirtualPages(unsigned long)>
c0013cc0:	83 c4 10             	add    esp,0x10
c0013cc3:	b0 01                	mov    al,0x1
c0013cc5:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013ccb:	5b                   	pop    ebx
c0013ccc:	5e                   	pop    esi
c0013ccd:	5f                   	pop    edi
c0013cce:	5d                   	pop    ebp
c0013ccf:	c3                   	ret    

c0013cd0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013cd0:	55                   	push   ebp
c0013cd1:	57                   	push   edi
c0013cd2:	56                   	push   esi
c0013cd3:	53                   	push   ebx
c0013cd4:	83 ec 48             	sub    esp,0x48
c0013cd7:	68 14 01 00 00       	push   0x114
c0013cdc:	e8 05 ac ff ff       	call   c000e8e6 <malloc>
c0013ce1:	83 c4 0c             	add    esp,0xc
c0013ce4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013ce8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013cec:	89 c7                	mov    edi,eax
c0013cee:	50                   	push   eax
c0013cef:	e8 18 44 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013cf4:	58                   	pop    eax
c0013cf5:	5a                   	pop    edx
c0013cf6:	6a 01                	push   0x1
c0013cf8:	57                   	push   edi
c0013cf9:	e8 2c 44 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013cfe:	83 c4 10             	add    esp,0x10
c0013d01:	85 c0                	test   eax,eax
c0013d03:	0f 85 4c 01 00 00    	jne    c0013e55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d09:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	6a 34                	push   0x34
c0013d16:	e8 cb ab ff ff       	call   c000e8e6 <malloc>
c0013d1b:	89 c3                	mov    ebx,eax
c0013d1d:	58                   	pop    eax
c0013d1e:	8b 07                	mov    eax,DWORD PTR [edi]
c0013d20:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013d24:	56                   	push   esi
c0013d25:	53                   	push   ebx
c0013d26:	6a 00                	push   0x0
c0013d28:	6a 34                	push   0x34
c0013d2a:	57                   	push   edi
c0013d2b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d2e:	83 c4 20             	add    esp,0x20
c0013d31:	85 c0                	test   eax,eax
c0013d33:	0f 85 1c 01 00 00    	jne    c0013e55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d39:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013d3f:	0f 85 10 01 00 00    	jne    c0013e55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d45:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d48:	85 c0                	test   eax,eax
c0013d4a:	0f 84 05 01 00 00    	je     c0013e55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d50:	31 d2                	xor    edx,edx
c0013d52:	55                   	push   ebp
c0013d53:	52                   	push   edx
c0013d54:	50                   	push   eax
c0013d55:	57                   	push   edi
c0013d56:	e8 8d 44 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013d5b:	83 c4 10             	add    esp,0x10
c0013d5e:	85 c0                	test   eax,eax
c0013d60:	0f 85 ef 00 00 00    	jne    c0013e55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013d66:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d69:	83 ec 0c             	sub    esp,0xc
c0013d6c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013d70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013d74:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013d78:	0f af c2             	imul   eax,edx
c0013d7b:	50                   	push   eax
c0013d7c:	e8 65 ab ff ff       	call   c000e8e6 <malloc>
c0013d81:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013d83:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013d8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d8e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013d92:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013d96:	0f af c2             	imul   eax,edx
c0013d99:	99                   	cdq    
c0013d9a:	52                   	push   edx
c0013d9b:	50                   	push   eax
c0013d9c:	57                   	push   edi
c0013d9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013da0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013da3:	83 c4 20             	add    esp,0x20
c0013da6:	85 c0                	test   eax,eax
c0013da8:	0f 84 a7 00 00 00    	je     c0013e55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013dae:	31 d2                	xor    edx,edx
c0013db0:	51                   	push   ecx
c0013db1:	52                   	push   edx
c0013db2:	50                   	push   eax
c0013db3:	57                   	push   edi
c0013db4:	e8 2f 44 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013db9:	83 c4 10             	add    esp,0x10
c0013dbc:	85 c0                	test   eax,eax
c0013dbe:	0f 85 91 00 00 00    	jne    c0013e55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013dc4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013dcf:	0f af c2             	imul   eax,edx
c0013dd2:	50                   	push   eax
c0013dd3:	e8 0e ab ff ff       	call   c000e8e6 <malloc>
c0013dd8:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013dda:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ddd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013de9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013ded:	0f af c2             	imul   eax,edx
c0013df0:	99                   	cdq    
c0013df1:	52                   	push   edx
c0013df2:	50                   	push   eax
c0013df3:	57                   	push   edi
c0013df4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013df7:	83 c4 20             	add    esp,0x20
c0013dfa:	31 c9                	xor    ecx,ecx
c0013dfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013e04:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013e08:	0f b7 e9             	movzx  ebp,cx
c0013e0b:	0f 83 86 00 00 00    	jae    c0013e97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013e11:	c1 e5 05             	shl    ebp,0x5
c0013e14:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013e18:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013e1c:	75 73                	jne    c0013e91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013e1e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013e25:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013e28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e2c:	52                   	push   edx
c0013e2d:	31 d2                	xor    edx,edx
c0013e2f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013e32:	52                   	push   edx
c0013e33:	50                   	push   eax
c0013e34:	57                   	push   edi
c0013e35:	e8 ae 43 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e41:	85 c0                	test   eax,eax
c0013e43:	74 17                	je     c0013e5c <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013e45:	83 ec 0c             	sub    esp,0xc
c0013e48:	68 09 29 02 c0       	push   0xc0022909
c0013e4d:	e8 fc 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013e52:	83 c4 10             	add    esp,0x10
c0013e55:	31 c0                	xor    eax,eax
c0013e57:	e9 8b 00 00 00       	jmp    c0013ee7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013e5c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013e60:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013e63:	83 ec 0c             	sub    esp,0xc
c0013e66:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013e69:	50                   	push   eax
c0013e6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013e6e:	56                   	push   esi
c0013e6f:	57                   	push   edi
c0013e70:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013e74:	e8 d0 fb ff ff       	call   c0013a49 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013e79:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013e7d:	83 c4 20             	add    esp,0x20
c0013e80:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e88:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013e8d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013e91:	41                   	inc    ecx
c0013e92:	e9 6d ff ff ff       	jmp    c0013e04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013e97:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013e9b:	83 ec 0c             	sub    esp,0xc
c0013e9e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ea2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea6:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013eac:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013eb2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013eb7:	05 00 10 00 00       	add    eax,0x1000
c0013ebc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ec3:	e8 2e aa ff ff       	call   c000e8f6 <free>
c0013ec8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ecb:	e8 26 aa ff ff       	call   c000e8f6 <free>
c0013ed0:	58                   	pop    eax
c0013ed1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ed5:	e8 1c aa ff ff       	call   c000e8f6 <free>
c0013eda:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013edd:	e8 a6 42 ff ff       	call   c0008188 <File::close()>
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	b0 01                	mov    al,0x1
c0013ee7:	83 c4 3c             	add    esp,0x3c
c0013eea:	5b                   	pop    ebx
c0013eeb:	5e                   	pop    esi
c0013eec:	5f                   	pop    edi
c0013eed:	5d                   	pop    ebp
c0013eee:	c3                   	ret    

c0013eef <Thr::runtimeReferenceHelper()>:
c0013eef:	83 ec 18             	sub    esp,0x18
c0013ef2:	68 11 29 02 c0       	push   0xc0022911
c0013ef7:	e8 52 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013efc:	fa                   	cli    
c0013efd:	83 c4 10             	add    esp,0x10
c0013f00:	eb fe                	jmp    c0013f00 <Thr::runtimeReferenceHelper()+0x11>

c0013f02 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013f02:	57                   	push   edi
c0013f03:	56                   	push   esi
c0013f04:	53                   	push   ebx
c0013f05:	31 db                	xor    ebx,ebx
c0013f07:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013f0d:	7e 3c                	jle    c0013f4b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013f0f:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013f16:	31 ff                	xor    edi,edi
c0013f18:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013f1f:	7e 27                	jle    c0013f48 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013f21:	50                   	push   eax
c0013f22:	50                   	push   eax
c0013f23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f27:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f29:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013f30:	50                   	push   eax
c0013f31:	e8 4a c8 fe ff       	call   c0000780 <strcmp>
c0013f36:	83 c4 10             	add    esp,0x10
c0013f39:	85 c0                	test   eax,eax
c0013f3b:	75 05                	jne    c0013f42 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013f3d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f40:	eb 0b                	jmp    c0013f4d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013f42:	83 c6 10             	add    esi,0x10
c0013f45:	47                   	inc    edi
c0013f46:	eb d0                	jmp    c0013f18 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013f48:	43                   	inc    ebx
c0013f49:	eb bc                	jmp    c0013f07 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013f4b:	31 c0                	xor    eax,eax
c0013f4d:	5b                   	pop    ebx
c0013f4e:	5e                   	pop    esi
c0013f4f:	5f                   	pop    edi
c0013f50:	c3                   	ret    

c0013f51 <Thr::loadKernelSymbolTable(char const*)>:
c0013f51:	55                   	push   ebp
c0013f52:	57                   	push   edi
c0013f53:	56                   	push   esi
c0013f54:	53                   	push   ebx
c0013f55:	83 ec 68             	sub    esp,0x68
c0013f58:	68 14 01 00 00       	push   0x114
c0013f5d:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0013f63:	e8 7e a9 ff ff       	call   c000e8e6 <malloc>
c0013f68:	83 c4 0c             	add    esp,0xc
c0013f6b:	56                   	push   esi
c0013f6c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013f70:	89 c3                	mov    ebx,eax
c0013f72:	50                   	push   eax
c0013f73:	e8 94 41 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013f78:	5e                   	pop    esi
c0013f79:	5f                   	pop    edi
c0013f7a:	6a 01                	push   0x1
c0013f7c:	53                   	push   ebx
c0013f7d:	e8 a8 41 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013f82:	83 c4 10             	add    esp,0x10
c0013f85:	85 c0                	test   eax,eax
c0013f87:	74 0a                	je     c0013f93 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013f89:	83 ec 0c             	sub    esp,0xc
c0013f8c:	68 33 29 02 c0       	push   0xc0022933
c0013f91:	eb 34                	jmp    c0013fc7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013f93:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013f9b:	83 ec 0c             	sub    esp,0xc
c0013f9e:	6a 34                	push   0x34
c0013fa0:	e8 41 a9 ff ff       	call   c000e8e6 <malloc>
c0013fa5:	59                   	pop    ecx
c0013fa6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013faa:	89 c7                	mov    edi,eax
c0013fac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fae:	56                   	push   esi
c0013faf:	57                   	push   edi
c0013fb0:	6a 00                	push   0x0
c0013fb2:	6a 34                	push   0x34
c0013fb4:	53                   	push   ebx
c0013fb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fb8:	83 c4 20             	add    esp,0x20
c0013fbb:	85 c0                	test   eax,eax
c0013fbd:	74 17                	je     c0013fd6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013fbf:	83 ec 0c             	sub    esp,0xc
c0013fc2:	68 4a 29 02 c0       	push   0xc002294a
c0013fc7:	e8 6e ac ff ff       	call   c000ec3a <KePanic(char const*)>
c0013fcc:	83 c4 10             	add    esp,0x10
c0013fcf:	31 c0                	xor    eax,eax
c0013fd1:	e9 31 02 00 00       	jmp    c0014207 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013fd6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013fdc:	75 e1                	jne    c0013fbf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fde:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013fe1:	85 c0                	test   eax,eax
c0013fe3:	74 da                	je     c0013fbf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fe5:	52                   	push   edx
c0013fe6:	31 d2                	xor    edx,edx
c0013fe8:	52                   	push   edx
c0013fe9:	50                   	push   eax
c0013fea:	53                   	push   ebx
c0013feb:	e8 f8 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013ff0:	83 c4 10             	add    esp,0x10
c0013ff3:	85 c0                	test   eax,eax
c0013ff5:	75 c8                	jne    c0013fbf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ff7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ffb:	83 ec 0c             	sub    esp,0xc
c0013ffe:	31 ed                	xor    ebp,ebp
c0014000:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014004:	0f af c2             	imul   eax,edx
c0014007:	50                   	push   eax
c0014008:	e8 d9 a8 ff ff       	call   c000e8e6 <malloc>
c001400d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001400f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014012:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014016:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001401a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001401e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014022:	0f af c2             	imul   eax,edx
c0014025:	99                   	cdq    
c0014026:	52                   	push   edx
c0014027:	50                   	push   eax
c0014028:	53                   	push   ebx
c0014029:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001402c:	83 c4 20             	add    esp,0x20
c001402f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014037:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001403f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014047:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001404f:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014053:	0f b7 f5             	movzx  esi,bp
c0014056:	0f 83 a7 00 00 00    	jae    c0014103 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001405c:	6b f6 28             	imul   esi,esi,0x28
c001405f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014063:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001406a:	50                   	push   eax
c001406b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001406f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014073:	8b 16                	mov    edx,DWORD PTR [esi]
c0014075:	6b c0 28             	imul   eax,eax,0x28
c0014078:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001407c:	89 d0                	mov    eax,edx
c001407e:	31 d2                	xor    edx,edx
c0014080:	52                   	push   edx
c0014081:	50                   	push   eax
c0014082:	53                   	push   ebx
c0014083:	e8 60 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014088:	83 c4 0c             	add    esp,0xc
c001408b:	6a 20                	push   0x20
c001408d:	6a 00                	push   0x0
c001408f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014093:	52                   	push   edx
c0014094:	e8 57 c4 fe ff       	call   c00004f0 <memset>
c0014099:	58                   	pop    eax
c001409a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001409c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00140a0:	51                   	push   ecx
c00140a1:	8d 54 24 40          	lea    edx,[esp+0x40]
c00140a5:	52                   	push   edx
c00140a6:	6a 00                	push   0x0
c00140a8:	6a 1f                	push   0x1f
c00140aa:	53                   	push   ebx
c00140ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140ae:	83 c4 18             	add    esp,0x18
c00140b1:	68 61 29 02 c0       	push   0xc0022961
c00140b6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00140ba:	52                   	push   edx
c00140bb:	e8 c0 c6 fe ff       	call   c0000780 <strcmp>
c00140c0:	83 c4 10             	add    esp,0x10
c00140c3:	85 c0                	test   eax,eax
c00140c5:	75 0f                	jne    c00140d6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00140c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140d6:	50                   	push   eax
c00140d7:	50                   	push   eax
c00140d8:	68 69 29 02 c0       	push   0xc0022969
c00140dd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00140e1:	50                   	push   eax
c00140e2:	e8 99 c6 fe ff       	call   c0000780 <strcmp>
c00140e7:	83 c4 10             	add    esp,0x10
c00140ea:	85 c0                	test   eax,eax
c00140ec:	75 0f                	jne    c00140fd <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00140ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00140fd:	45                   	inc    ebp
c00140fe:	e9 4c ff ff ff       	jmp    c001404f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014103:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014108:	75 10                	jne    c001411a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	68 71 29 02 c0       	push   0xc0022971
c0014112:	e8 23 ab ff ff       	call   c000ec3a <KePanic(char const*)>
c0014117:	83 c4 10             	add    esp,0x10
c001411a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001411f:	75 10                	jne    c0014131 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014121:	83 ec 0c             	sub    esp,0xc
c0014124:	68 71 29 02 c0       	push   0xc0022971
c0014129:	e8 0c ab ff ff       	call   c000ec3a <KePanic(char const*)>
c001412e:	83 c4 10             	add    esp,0x10
c0014131:	50                   	push   eax
c0014132:	31 d2                	xor    edx,edx
c0014134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014138:	52                   	push   edx
c0014139:	50                   	push   eax
c001413a:	53                   	push   ebx
c001413b:	e8 a8 40 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014140:	5a                   	pop    edx
c0014141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014145:	e8 9c a7 ff ff       	call   c000e8e6 <malloc>
c001414a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001414e:	31 c9                	xor    ecx,ecx
c0014150:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014156:	5e                   	pop    esi
c0014157:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001415b:	55                   	push   ebp
c001415c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014160:	51                   	push   ecx
c0014161:	52                   	push   edx
c0014162:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014166:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001416a:	53                   	push   ebx
c001416b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001416e:	83 c4 14             	add    esp,0x14
c0014171:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014175:	e8 6c a7 ff ff       	call   c000e8e6 <malloc>
c001417a:	89 c6                	mov    esi,eax
c001417c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001417e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014181:	56                   	push   esi
c0014182:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014186:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001418a:	51                   	push   ecx
c001418b:	52                   	push   edx
c001418c:	53                   	push   ebx
c001418d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014190:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014194:	83 c4 1c             	add    esp,0x1c
c0014197:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c001419d:	c1 e8 04             	shr    eax,0x4
c00141a0:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c00141a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141ab:	31 d2                	xor    edx,edx
c00141ad:	52                   	push   edx
c00141ae:	50                   	push   eax
c00141af:	53                   	push   ebx
c00141b0:	e8 33 40 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00141b5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141b7:	31 d2                	xor    edx,edx
c00141b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00141bc:	56                   	push   esi
c00141bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141c1:	52                   	push   edx
c00141c2:	50                   	push   eax
c00141c3:	53                   	push   ebx
c00141c4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141c7:	83 c4 14             	add    esp,0x14
c00141ca:	53                   	push   ebx
c00141cb:	e8 b8 3f ff ff       	call   c0008188 <File::close()>
c00141d0:	5d                   	pop    ebp
c00141d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141d5:	e8 1c a7 ff ff       	call   c000e8f6 <free>
c00141da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141dd:	e8 14 a7 ff ff       	call   c000e8f6 <free>
c00141e2:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c00141e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141eb:	83 c4 10             	add    esp,0x10
c00141ee:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c00141f5:	8d 50 01             	lea    edx,[eax+0x1]
c00141f8:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c00141ff:	b0 01                	mov    al,0x1
c0014201:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c0014207:	83 c4 5c             	add    esp,0x5c
c001420a:	5b                   	pop    ebx
c001420b:	5e                   	pop    esi
c001420c:	5f                   	pop    edi
c001420d:	5d                   	pop    ebp
c001420e:	c3                   	ret    

c001420f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001420f:	55                   	push   ebp
c0014210:	57                   	push   edi
c0014211:	56                   	push   esi
c0014212:	53                   	push   ebx
c0014213:	81 ec 68 03 00 00    	sub    esp,0x368
c0014219:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014220:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0014226:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001422a:	68 14 01 00 00       	push   0x114
c001422f:	e8 b2 a6 ff ff       	call   c000e8e6 <malloc>
c0014234:	83 c4 0c             	add    esp,0xc
c0014237:	56                   	push   esi
c0014238:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001423f:	50                   	push   eax
c0014240:	89 c3                	mov    ebx,eax
c0014242:	e8 c5 3e ff ff       	call   c000810c <File::File(char const*, Process*)>
c0014247:	5f                   	pop    edi
c0014248:	5d                   	pop    ebp
c0014249:	6a 01                	push   0x1
c001424b:	53                   	push   ebx
c001424c:	e8 d9 3e ff ff       	call   c000812a <File::open(FileOpenMode)>
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	85 c0                	test   eax,eax
c0014256:	0f 85 b3 06 00 00    	jne    c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001425c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	6a 34                	push   0x34
c0014269:	e8 78 a6 ff ff       	call   c000e8e6 <malloc>
c001426e:	5e                   	pop    esi
c001426f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014273:	89 c5                	mov    ebp,eax
c0014275:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014277:	56                   	push   esi
c0014278:	55                   	push   ebp
c0014279:	6a 00                	push   0x0
c001427b:	6a 34                	push   0x34
c001427d:	53                   	push   ebx
c001427e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014281:	83 c4 20             	add    esp,0x20
c0014284:	85 c0                	test   eax,eax
c0014286:	0f 85 83 06 00 00    	jne    c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001428c:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014293:	0f 85 76 06 00 00    	jne    c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014299:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001429c:	85 c0                	test   eax,eax
c001429e:	0f 84 6b 06 00 00    	je     c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142a4:	31 d2                	xor    edx,edx
c00142a6:	51                   	push   ecx
c00142a7:	52                   	push   edx
c00142a8:	50                   	push   eax
c00142a9:	53                   	push   ebx
c00142aa:	e8 39 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	85 c0                	test   eax,eax
c00142b4:	0f 85 55 06 00 00    	jne    c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142ba:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00142bd:	83 ec 0c             	sub    esp,0xc
c00142c0:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00142c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00142c8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00142cc:	0f af c2             	imul   eax,edx
c00142cf:	50                   	push   eax
c00142d0:	e8 11 a6 ff ff       	call   c000e8e6 <malloc>
c00142d5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00142d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00142da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00142e2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00142e6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00142ea:	0f af c2             	imul   eax,edx
c00142ed:	99                   	cdq    
c00142ee:	52                   	push   edx
c00142ef:	50                   	push   eax
c00142f0:	53                   	push   ebx
c00142f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142f4:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00142f7:	83 c4 20             	add    esp,0x20
c00142fa:	85 c0                	test   eax,eax
c00142fc:	0f 84 0d 06 00 00    	je     c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014302:	52                   	push   edx
c0014303:	31 d2                	xor    edx,edx
c0014305:	52                   	push   edx
c0014306:	50                   	push   eax
c0014307:	53                   	push   ebx
c0014308:	e8 db 3e ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001430d:	83 c4 10             	add    esp,0x10
c0014310:	85 c0                	test   eax,eax
c0014312:	0f 85 f7 05 00 00    	jne    c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014318:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014323:	0f af c2             	imul   eax,edx
c0014326:	50                   	push   eax
c0014327:	e8 ba a5 ff ff       	call   c000e8e6 <malloc>
c001432c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001432e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014331:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014335:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014339:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001433d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014341:	0f af c2             	imul   eax,edx
c0014344:	99                   	cdq    
c0014345:	52                   	push   edx
c0014346:	50                   	push   eax
c0014347:	53                   	push   ebx
c0014348:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001434b:	83 c4 20             	add    esp,0x20
c001434e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014354:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014357:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001435b:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c001435f:	73 78                	jae    c00143d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014361:	c1 e7 05             	shl    edi,0x5
c0014364:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014368:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001436b:	75 63                	jne    c00143d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001436d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014370:	31 d2                	xor    edx,edx
c0014372:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014379:	50                   	push   eax
c001437a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001437d:	52                   	push   edx
c001437e:	50                   	push   eax
c001437f:	53                   	push   ebx
c0014380:	e8 63 3e ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014385:	83 c4 10             	add    esp,0x10
c0014388:	85 c0                	test   eax,eax
c001438a:	0f 85 7f 05 00 00    	jne    c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014390:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014397:	83 ec 0c             	sub    esp,0xc
c001439a:	31 d2                	xor    edx,edx
c001439c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00143a0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00143a2:	01 c6                	add    esi,eax
c00143a4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143ab:	50                   	push   eax
c00143ac:	56                   	push   esi
c00143ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143b1:	52                   	push   edx
c00143b2:	50                   	push   eax
c00143b3:	53                   	push   ebx
c00143b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143b7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143ba:	83 c4 1c             	add    esp,0x1c
c00143bd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00143c0:	50                   	push   eax
c00143c1:	6a 00                	push   0x0
c00143c3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00143c7:	56                   	push   esi
c00143c8:	e8 23 c1 fe ff       	call   c00004f0 <memset>
c00143cd:	83 c4 10             	add    esp,0x10
c00143d0:	66 ff 04 24          	inc    WORD PTR [esp]
c00143d4:	e9 7b ff ff ff       	jmp    c0014354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00143d9:	50                   	push   eax
c00143da:	68 00 01 00 00       	push   0x100
c00143df:	6a 00                	push   0x0
c00143e1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00143e5:	50                   	push   eax
c00143e6:	e8 05 c1 fe ff       	call   c00004f0 <memset>
c00143eb:	83 c4 0c             	add    esp,0xc
c00143ee:	68 00 01 00 00       	push   0x100
c00143f3:	6a 00                	push   0x0
c00143f5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00143fc:	50                   	push   eax
c00143fd:	e8 ee c0 fe ff       	call   c00004f0 <memset>
c0014402:	83 c4 10             	add    esp,0x10
c0014405:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c001440c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014413:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001441b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014423:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001442b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014433:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014437:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001443b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014440:	0f 83 16 01 00 00    	jae    c001455c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014446:	6b ff 28             	imul   edi,edi,0x28
c0014449:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001444d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014450:	51                   	push   ecx
c0014451:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014455:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014459:	8b 07                	mov    eax,DWORD PTR [edi]
c001445b:	6b d2 28             	imul   edx,edx,0x28
c001445e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014462:	31 d2                	xor    edx,edx
c0014464:	52                   	push   edx
c0014465:	50                   	push   eax
c0014466:	53                   	push   ebx
c0014467:	e8 7c 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001446c:	83 c4 0c             	add    esp,0xc
c001446f:	6a 20                	push   0x20
c0014471:	6a 00                	push   0x0
c0014473:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001447a:	51                   	push   ecx
c001447b:	e8 70 c0 fe ff       	call   c00004f0 <memset>
c0014480:	58                   	pop    eax
c0014481:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014483:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014487:	52                   	push   edx
c0014488:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001448f:	51                   	push   ecx
c0014490:	6a 00                	push   0x0
c0014492:	6a 1f                	push   0x1f
c0014494:	53                   	push   ebx
c0014495:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014498:	83 c4 1c             	add    esp,0x1c
c001449b:	6a 09                	push   0x9
c001449d:	68 8b 29 02 c0       	push   0xc002298b
c00144a2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00144a9:	51                   	push   ecx
c00144aa:	e8 d1 be fe ff       	call   c0000380 <memcmp>
c00144af:	83 c4 10             	add    esp,0x10
c00144b2:	85 c0                	test   eax,eax
c00144b4:	75 1a                	jne    c00144d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00144b6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00144b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00144bc:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00144c0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00144c3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00144ca:	89 d0                	mov    eax,edx
c00144cc:	40                   	inc    eax
c00144cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00144d0:	52                   	push   edx
c00144d1:	6a 09                	push   0x9
c00144d3:	68 95 29 02 c0       	push   0xc0022995
c00144d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00144df:	50                   	push   eax
c00144e0:	e8 9b be fe ff       	call   c0000380 <memcmp>
c00144e5:	83 c4 10             	add    esp,0x10
c00144e8:	85 c0                	test   eax,eax
c00144ea:	75 1a                	jne    c0014506 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00144ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00144ef:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00144f2:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00144f6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00144f9:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014500:	89 c8                	mov    eax,ecx
c0014502:	40                   	inc    eax
c0014503:	89 04 24             	mov    DWORD PTR [esp],eax
c0014506:	50                   	push   eax
c0014507:	50                   	push   eax
c0014508:	68 61 29 02 c0       	push   0xc0022961
c001450d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014514:	50                   	push   eax
c0014515:	e8 66 c2 fe ff       	call   c0000780 <strcmp>
c001451a:	83 c4 10             	add    esp,0x10
c001451d:	85 c0                	test   eax,eax
c001451f:	75 0b                	jne    c001452c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014521:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014525:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014528:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001452c:	50                   	push   eax
c001452d:	50                   	push   eax
c001452e:	68 69 29 02 c0       	push   0xc0022969
c0014533:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001453a:	50                   	push   eax
c001453b:	e8 40 c2 fe ff       	call   c0000780 <strcmp>
c0014540:	83 c4 10             	add    esp,0x10
c0014543:	85 c0                	test   eax,eax
c0014545:	75 0b                	jne    c0014552 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014547:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001454b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001454e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014552:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014557:	e9 d7 fe ff ff       	jmp    c0014433 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001455c:	50                   	push   eax
c001455d:	31 d2                	xor    edx,edx
c001455f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014563:	52                   	push   edx
c0014564:	50                   	push   eax
c0014565:	53                   	push   ebx
c0014566:	e8 7d 3c ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001456b:	58                   	pop    eax
c001456c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014570:	e8 71 a3 ff ff       	call   c000e8e6 <malloc>
c0014575:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014577:	31 d2                	xor    edx,edx
c0014579:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001457d:	58                   	pop    eax
c001457e:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014582:	56                   	push   esi
c0014583:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458b:	52                   	push   edx
c001458c:	50                   	push   eax
c001458d:	53                   	push   ebx
c001458e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014591:	83 c4 14             	add    esp,0x14
c0014594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014598:	e8 49 a3 ff ff       	call   c000e8e6 <malloc>
c001459d:	31 d2                	xor    edx,edx
c001459f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00145a3:	83 c4 0c             	add    esp,0xc
c00145a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145aa:	52                   	push   edx
c00145ab:	50                   	push   eax
c00145ac:	53                   	push   ebx
c00145ad:	e8 36 3c ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00145b2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00145b4:	31 d2                	xor    edx,edx
c00145b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00145b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00145c1:	52                   	push   edx
c00145c2:	50                   	push   eax
c00145c3:	53                   	push   ebx
c00145c4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145c7:	83 c4 20             	add    esp,0x20
c00145ca:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00145cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00145d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00145db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00145df:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00145e2:	0f 84 2b 03 00 00    	je     c0014913 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00145e8:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00145ef:	31 d2                	xor    edx,edx
c00145f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00145f5:	c1 e8 03             	shr    eax,0x3
c00145f8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00145fc:	51                   	push   ecx
c00145fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014601:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014605:	52                   	push   edx
c0014606:	50                   	push   eax
c0014607:	53                   	push   ebx
c0014608:	e8 db 3b ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001460d:	5e                   	pop    esi
c001460e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014612:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014619:	e8 c8 a2 ff ff       	call   c000e8e6 <malloc>
c001461e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014620:	31 d2                	xor    edx,edx
c0014622:	89 c7                	mov    edi,eax
c0014624:	58                   	pop    eax
c0014625:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014629:	50                   	push   eax
c001462a:	57                   	push   edi
c001462b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014636:	52                   	push   edx
c0014637:	50                   	push   eax
c0014638:	53                   	push   ebx
c0014639:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001463c:	83 c4 20             	add    esp,0x20
c001463f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014647:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001464b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001464f:	0f 8d a5 02 00 00    	jge    c00148fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014655:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001465a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001465e:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014661:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014665:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014669:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001466d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014671:	c1 e8 08             	shr    eax,0x8
c0014674:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014678:	89 c2                	mov    edx,eax
c001467a:	c1 e2 04             	shl    edx,0x4
c001467d:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014681:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014684:	85 f6                	test   esi,esi
c0014686:	0f 85 cf 00 00 00    	jne    c001475b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001468c:	83 ec 0c             	sub    esp,0xc
c001468f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014697:	03 02                	add    eax,DWORD PTR [edx]
c0014699:	50                   	push   eax
c001469a:	e8 63 f8 ff ff       	call   c0013f02 <Thr::getAddressOfKernelSymbol(char const*)>
c001469f:	83 c4 10             	add    esp,0x10
c00146a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00146a6:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00146ab:	85 c0                	test   eax,eax
c00146ad:	89 c6                	mov    esi,eax
c00146af:	0f 85 a6 00 00 00    	jne    c001475b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00146b5:	83 ec 0c             	sub    esp,0xc
c00146b8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00146bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c0:	03 02                	add    eax,DWORD PTR [edx]
c00146c2:	50                   	push   eax
c00146c3:	e8 d4 af ff ff       	call   c000f69c <KeResolveCompatibilitySymbol(char*)>
c00146c8:	83 c4 10             	add    esp,0x10
c00146cb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00146cf:	85 c0                	test   eax,eax
c00146d1:	89 c6                	mov    esi,eax
c00146d3:	0f 85 82 00 00 00    	jne    c001475b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00146d9:	50                   	push   eax
c00146da:	50                   	push   eax
c00146db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146df:	03 02                	add    eax,DWORD PTR [edx]
c00146e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00146e5:	50                   	push   eax
c00146e6:	68 9f 29 02 c0       	push   0xc002299f
c00146eb:	e8 5e 28 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00146f0:	58                   	pop    eax
c00146f1:	5a                   	pop    edx
c00146f2:	68 b9 29 02 c0       	push   0xc00229b9
c00146f7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00146fe:	51                   	push   ecx
c00146ff:	e8 4c bf fe ff       	call   c0000650 <strcpy>
c0014704:	59                   	pop    ecx
c0014705:	58                   	pop    eax
c0014706:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001470a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001470e:	03 02                	add    eax,DWORD PTR [edx]
c0014710:	50                   	push   eax
c0014711:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014718:	51                   	push   ecx
c0014719:	e8 52 c1 fe ff       	call   c0000870 <strcat>
c001471e:	58                   	pop    eax
c001471f:	5a                   	pop    edx
c0014720:	68 53 2a 02 c0       	push   0xc0022a53
c0014725:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001472c:	51                   	push   ecx
c001472d:	e8 3e c1 fe ff       	call   c0000870 <strcat>
c0014732:	83 c4 10             	add    esp,0x10
c0014735:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001473a:	0f 84 77 01 00 00    	je     c00148b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001474a:	51                   	push   ecx
c001474b:	e8 ea a4 ff ff       	call   c000ec3a <KePanic(char const*)>
c0014750:	83 c4 10             	add    esp,0x10
c0014753:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014757:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001475b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014760:	83 f8 01             	cmp    eax,0x1
c0014763:	0f 85 9b 00 00 00    	jne    c0014804 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014769:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001476d:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014774:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014778:	01 d0                	add    eax,edx
c001477a:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014782:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014786:	0f 94 c0             	sete   al
c0014789:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014791:	0f 94 c1             	sete   cl
c0014794:	09 c1                	or     ecx,eax
c0014796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001479a:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001479f:	0f b6 c9             	movzx  ecx,cl
c00147a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00147a4:	74 41                	je     c00147e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00147a6:	8d 14 06             	lea    edx,[esi+eax*1]
c00147a9:	85 c9                	test   ecx,ecx
c00147ab:	75 15                	jne    c00147c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00147ad:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00147b1:	66 83 f8 0c          	cmp    ax,0xc
c00147b5:	76 05                	jbe    c00147bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00147b7:	b8 0c 00 00 00       	mov    eax,0xc
c00147bc:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00147c0:	76 37                	jbe    c00147f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00147c2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00147c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00147cb:	0f 84 e6 00 00 00    	je     c00148b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00147d1:	83 ec 0c             	sub    esp,0xc
c00147d4:	68 d0 29 02 c0       	push   0xc00229d0
c00147d9:	e8 5c a4 ff ff       	call   c000ec3a <KePanic(char const*)>
c00147de:	83 c4 10             	add    esp,0x10
c00147e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00147e5:	eb 12                	jmp    c00147f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00147e7:	01 c2                	add    edx,eax
c00147e9:	85 c9                	test   ecx,ecx
c00147eb:	75 0c                	jne    c00147f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00147ed:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00147f1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00147f5:	77 02                	ja     c00147f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00147f7:	01 f2                	add    edx,esi
c00147f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147fd:	89 10                	mov    DWORD PTR [eax],edx
c00147ff:	e9 ed 00 00 00       	jmp    c00148f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014804:	83 f8 02             	cmp    eax,0x2
c0014807:	0f 85 81 00 00 00    	jne    c001488e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001480d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014814:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014818:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001481c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014824:	74 21                	je     c0014847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014826:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001482e:	74 17                	je     c0014847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014830:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014834:	ba 0a 00 00 00       	mov    edx,0xa
c0014839:	83 f9 0e             	cmp    ecx,0xe
c001483c:	77 03                	ja     c0014841 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001483e:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014841:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014845:	76 1f                	jbe    c0014866 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014847:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001484c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014850:	74 65                	je     c00148b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014852:	83 ec 0c             	sub    esp,0xc
c0014855:	68 ec 29 02 c0       	push   0xc00229ec
c001485a:	e8 db a3 ff ff       	call   c000ec3a <KePanic(char const*)>
c001485f:	83 c4 10             	add    esp,0x10
c0014862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014866:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001486b:	8b 10                	mov    edx,DWORD PTR [eax]
c001486d:	74 15                	je     c0014884 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001486f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014873:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001487a:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001487e:	01 d1                	add    ecx,edx
c0014880:	01 ce                	add    esi,ecx
c0014882:	eb 06                	jmp    c001488a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014884:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014888:	01 d6                	add    esi,edx
c001488a:	89 30                	mov    DWORD PTR [eax],esi
c001488c:	eb 63                	jmp    c00148f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001488e:	56                   	push   esi
c001488f:	56                   	push   esi
c0014890:	50                   	push   eax
c0014891:	68 08 2a 02 c0       	push   0xc0022a08
c0014896:	e8 b3 26 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001489b:	83 c4 10             	add    esp,0x10
c001489e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00148a3:	74 12                	je     c00148b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00148a5:	83 ec 0c             	sub    esp,0xc
c00148a8:	68 13 2a 02 c0       	push   0xc0022a13
c00148ad:	e8 88 a3 ff ff       	call   c000ec3a <KePanic(char const*)>
c00148b2:	83 c4 10             	add    esp,0x10
c00148b5:	eb 3a                	jmp    c00148f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00148b7:	83 ec 0c             	sub    esp,0xc
c00148ba:	53                   	push   ebx
c00148bb:	e8 c8 38 ff ff       	call   c0008188 <File::close()>
c00148c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148cb:	e8 26 a0 ff ff       	call   c000e8f6 <free>
c00148d0:	59                   	pop    ecx
c00148d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148d5:	e8 1c a0 ff ff       	call   c000e8f6 <free>
c00148da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148dd:	e8 14 a0 ff ff       	call   c000e8f6 <free>
c00148e2:	5b                   	pop    ebx
c00148e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148e7:	e8 0a a0 ff ff       	call   c000e8f6 <free>
c00148ec:	83 c4 10             	add    esp,0x10
c00148ef:	eb 1e                	jmp    c001490f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148f1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00148f5:	e9 4d fd ff ff       	jmp    c0014647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	57                   	push   edi
c00148fe:	e8 f3 9f ff ff       	call   c000e8f6 <free>
c0014903:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014907:	83 c4 10             	add    esp,0x10
c001490a:	e9 cc fc ff ff       	jmp    c00145db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001490f:	31 c0                	xor    eax,eax
c0014911:	eb 32                	jmp    c0014945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014913:	83 ec 0c             	sub    esp,0xc
c0014916:	53                   	push   ebx
c0014917:	e8 6c 38 ff ff       	call   c0008188 <File::close()>
c001491c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001491e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014921:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014924:	58                   	pop    eax
c0014925:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014929:	e8 c8 9f ff ff       	call   c000e8f6 <free>
c001492e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014931:	e8 c0 9f ff ff       	call   c000e8f6 <free>
c0014936:	5a                   	pop    edx
c0014937:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001493b:	e8 b6 9f ff ff       	call   c000e8f6 <free>
c0014940:	83 c4 10             	add    esp,0x10
c0014943:	b0 01                	mov    al,0x1
c0014945:	81 c4 5c 03 00 00    	add    esp,0x35c
c001494b:	5b                   	pop    ebx
c001494c:	5e                   	pop    esi
c001494d:	5f                   	pop    edi
c001494e:	5d                   	pop    ebp
c001494f:	c3                   	ret    

c0014950 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014950:	56                   	push   esi
c0014951:	31 d2                	xor    edx,edx
c0014953:	53                   	push   ebx
c0014954:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c001495a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001495e:	39 d3                	cmp    ebx,edx
c0014960:	7e 1b                	jle    c001497d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014962:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c0014969:	39 c8                	cmp    eax,ecx
c001496b:	77 0d                	ja     c001497a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001496d:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c0014974:	01 c6                	add    esi,eax
c0014976:	39 ce                	cmp    esi,ecx
c0014978:	77 05                	ja     c001497f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001497a:	42                   	inc    edx
c001497b:	eb e1                	jmp    c001495e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001497d:	31 c0                	xor    eax,eax
c001497f:	5b                   	pop    ebx
c0014980:	5e                   	pop    esi
c0014981:	c3                   	ret    

c0014982 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014982:	53                   	push   ebx
c0014983:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014989:	31 c0                	xor    eax,eax
c001498b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001498f:	39 c3                	cmp    ebx,eax
c0014991:	7e 22                	jle    c00149b5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014993:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c001499a:	39 ca                	cmp    edx,ecx
c001499c:	77 14                	ja     c00149b2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001499e:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c00149a5:	39 ca                	cmp    edx,ecx
c00149a7:	76 09                	jbe    c00149b2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00149a9:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c00149b0:	eb 05                	jmp    c00149b7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00149b2:	40                   	inc    eax
c00149b3:	eb da                	jmp    c001498f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00149b5:	31 c0                	xor    eax,eax
c00149b7:	5b                   	pop    ebx
c00149b8:	c3                   	ret    

c00149b9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00149b9:	53                   	push   ebx
c00149ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00149be:	53                   	push   ebx
c00149bf:	e8 8c ff ff ff       	call   c0014950 <Thr::getDriverBaseFromAddress(unsigned long)>
c00149c4:	5a                   	pop    edx
c00149c5:	31 d2                	xor    edx,edx
c00149c7:	85 c0                	test   eax,eax
c00149c9:	74 04                	je     c00149cf <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00149cb:	89 da                	mov    edx,ebx
c00149cd:	29 c2                	sub    edx,eax
c00149cf:	5b                   	pop    ebx
c00149d0:	89 d0                	mov    eax,edx
c00149d2:	c3                   	ret    

c00149d3 <Thr::loadDLL(char const*, bool)>:
c00149d3:	55                   	push   ebp
c00149d4:	57                   	push   edi
c00149d5:	56                   	push   esi
c00149d6:	53                   	push   ebx
c00149d7:	81 ec 34 01 00 00    	sub    esp,0x134
c00149dd:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00149e4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00149eb:	56                   	push   esi
c00149ec:	68 2b 2a 02 c0       	push   0xc0022a2b
c00149f1:	e8 58 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00149f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00149fd:	e8 e4 9e ff ff       	call   c000e8e6 <malloc>
c0014a02:	83 c4 0c             	add    esp,0xc
c0014a05:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0014a0b:	56                   	push   esi
c0014a0c:	50                   	push   eax
c0014a0d:	89 c3                	mov    ebx,eax
c0014a0f:	e8 f8 36 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0014a14:	83 c4 10             	add    esp,0x10
c0014a17:	85 db                	test   ebx,ebx
c0014a19:	75 3c                	jne    c0014a57 <Thr::loadDLL(char const*, bool)+0x84>
c0014a1b:	89 e8                	mov    eax,ebp
c0014a1d:	84 c0                	test   al,al
c0014a1f:	0f 84 02 02 00 00    	je     c0014c27 <Thr::loadDLL(char const*, bool)+0x254>
c0014a25:	50                   	push   eax
c0014a26:	50                   	push   eax
c0014a27:	68 3c 2a 02 c0       	push   0xc0022a3c
c0014a2c:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014a30:	57                   	push   edi
c0014a31:	e8 1a bc fe ff       	call   c0000650 <strcpy>
c0014a36:	58                   	pop    eax
c0014a37:	5a                   	pop    edx
c0014a38:	56                   	push   esi
c0014a39:	57                   	push   edi
c0014a3a:	e8 31 be fe ff       	call   c0000870 <strcat>
c0014a3f:	59                   	pop    ecx
c0014a40:	58                   	pop    eax
c0014a41:	68 53 2a 02 c0       	push   0xc0022a53
c0014a46:	57                   	push   edi
c0014a47:	e8 24 be fe ff       	call   c0000870 <strcat>
c0014a4c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a4f:	e8 e6 a1 ff ff       	call   c000ec3a <KePanic(char const*)>
c0014a54:	83 c4 10             	add    esp,0x10
c0014a57:	50                   	push   eax
c0014a58:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014a5c:	50                   	push   eax
c0014a5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014a61:	50                   	push   eax
c0014a62:	53                   	push   ebx
c0014a63:	e8 c4 39 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0014a68:	83 c4 10             	add    esp,0x10
c0014a6b:	85 db                	test   ebx,ebx
c0014a6d:	89 c7                	mov    edi,eax
c0014a6f:	74 0c                	je     c0014a7d <Thr::loadDLL(char const*, bool)+0xaa>
c0014a71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a73:	83 ec 0c             	sub    esp,0xc
c0014a76:	53                   	push   ebx
c0014a77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a7a:	83 c4 10             	add    esp,0x10
c0014a7d:	83 ec 0c             	sub    esp,0xc
c0014a80:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014a85:	50                   	push   eax
c0014a86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a8e:	57                   	push   edi
c0014a8f:	68 55 2a 02 c0       	push   0xc0022a55
c0014a94:	e8 b5 24 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014a99:	83 c4 20             	add    esp,0x20
c0014a9c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014aa1:	75 0a                	jne    c0014aad <Thr::loadDLL(char const*, bool)+0xda>
c0014aa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aa7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014aab:	75 3e                	jne    c0014aeb <Thr::loadDLL(char const*, bool)+0x118>
c0014aad:	89 e8                	mov    eax,ebp
c0014aaf:	31 db                	xor    ebx,ebx
c0014ab1:	84 c0                	test   al,al
c0014ab3:	0f 84 6e 01 00 00    	je     c0014c27 <Thr::loadDLL(char const*, bool)+0x254>
c0014ab9:	50                   	push   eax
c0014aba:	50                   	push   eax
c0014abb:	68 76 2a 02 c0       	push   0xc0022a76
c0014ac0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014ac4:	53                   	push   ebx
c0014ac5:	e8 86 bb fe ff       	call   c0000650 <strcpy>
c0014aca:	58                   	pop    eax
c0014acb:	5a                   	pop    edx
c0014acc:	56                   	push   esi
c0014acd:	53                   	push   ebx
c0014ace:	e8 9d bd fe ff       	call   c0000870 <strcat>
c0014ad3:	59                   	pop    ecx
c0014ad4:	5f                   	pop    edi
c0014ad5:	68 53 2a 02 c0       	push   0xc0022a53
c0014ada:	53                   	push   ebx
c0014adb:	e8 90 bd fe ff       	call   c0000870 <strcat>
c0014ae0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ae3:	e8 52 a1 ff ff       	call   c000ec3a <KePanic(char const*)>
c0014ae8:	83 c4 10             	add    esp,0x10
c0014aeb:	53                   	push   ebx
c0014aec:	6a 03                	push   0x3
c0014aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014af6:	05 ff 0f 00 00       	add    eax,0xfff
c0014afb:	83 d2 00             	adc    edx,0x0
c0014afe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014b02:	50                   	push   eax
c0014b03:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014b09:	e8 d4 dc ff ff       	call   c00127e2 <VAS::allocatePages(int, int)>
c0014b0e:	89 c3                	mov    ebx,eax
c0014b10:	58                   	pop    eax
c0014b11:	5a                   	pop    edx
c0014b12:	53                   	push   ebx
c0014b13:	68 8a 21 02 c0       	push   0xc002218a
c0014b18:	e8 31 24 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014b1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b20:	e8 5b ba fe ff       	call   c0000580 <strlen>
c0014b25:	8b 3d e0 be 02 c0    	mov    edi,DWORD PTR ds:0xc002bee0
c0014b2b:	40                   	inc    eax
c0014b2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b2f:	e8 b2 9d ff ff       	call   c000e8e6 <malloc>
c0014b34:	59                   	pop    ecx
c0014b35:	89 04 bd 00 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3d00],eax
c0014b3c:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014b41:	5f                   	pop    edi
c0014b42:	56                   	push   esi
c0014b43:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014b4a:	e8 01 bb fe ff       	call   c0000650 <strcpy>
c0014b4f:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014b54:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0014b5e:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014b64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b68:	83 c4 0c             	add    esp,0xc
c0014b6b:	6a 01                	push   0x1
c0014b6d:	53                   	push   ebx
c0014b6e:	56                   	push   esi
c0014b6f:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014b76:	e8 94 f6 ff ff       	call   c001420f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014b7b:	83 c4 10             	add    esp,0x10
c0014b7e:	89 c7                	mov    edi,eax
c0014b80:	89 f8                	mov    eax,edi
c0014b82:	83 f0 01             	xor    eax,0x1
c0014b85:	84 c0                	test   al,al
c0014b87:	74 18                	je     c0014ba1 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014b89:	89 e8                	mov    eax,ebp
c0014b8b:	84 c0                	test   al,al
c0014b8d:	74 12                	je     c0014ba1 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014b8f:	83 ec 0c             	sub    esp,0xc
c0014b92:	68 8f 2a 02 c0       	push   0xc0022a8f
c0014b97:	e8 9e a0 ff ff       	call   c000ec3a <KePanic(char const*)>
c0014b9c:	83 c4 10             	add    esp,0x10
c0014b9f:	eb 06                	jmp    c0014ba7 <Thr::loadDLL(char const*, bool)+0x1d4>
c0014ba1:	89 f8                	mov    eax,edi
c0014ba3:	84 c0                	test   al,al
c0014ba5:	75 10                	jne    c0014bb7 <Thr::loadDLL(char const*, bool)+0x1e4>
c0014ba7:	83 ec 0c             	sub    esp,0xc
c0014baa:	68 ae 2a 02 c0       	push   0xc0022aae
c0014baf:	e8 86 a0 ff ff       	call   c000ec3a <KePanic(char const*)>
c0014bb4:	83 c4 10             	add    esp,0x10
c0014bb7:	31 f6                	xor    esi,esi
c0014bb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bbd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014bc1:	05 ff 0f 00 00       	add    eax,0xfff
c0014bc6:	83 d2 00             	adc    edx,0x0
c0014bc9:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014bcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014bd1:	c1 ea 0c             	shr    edx,0xc
c0014bd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014bd8:	ba 00 00 00 00       	mov    edx,0x0
c0014bdd:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014be1:	89 d0                	mov    eax,edx
c0014be3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014be7:	73 32                	jae    c0014c1b <Thr::loadDLL(char const*, bool)+0x248>
c0014be9:	50                   	push   eax
c0014bea:	50                   	push   eax
c0014beb:	89 f0                	mov    eax,esi
c0014bed:	c1 e0 0c             	shl    eax,0xc
c0014bf0:	01 d8                	add    eax,ebx
c0014bf2:	50                   	push   eax
c0014bf3:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014bf9:	e8 c2 d6 ff ff       	call   c00122c0 <VAS::getPageTableEntry(unsigned long)>
c0014bfe:	83 c4 10             	add    esp,0x10
c0014c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c03:	a8 60                	test   al,0x60
c0014c05:	75 11                	jne    c0014c18 <Thr::loadDLL(char const*, bool)+0x245>
c0014c07:	83 ec 0c             	sub    esp,0xc
c0014c0a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c0f:	50                   	push   eax
c0014c10:	e8 b6 a1 ff ff       	call   c000edcb <Phys::freePage(unsigned long)>
c0014c15:	83 c4 10             	add    esp,0x10
c0014c18:	46                   	inc    esi
c0014c19:	eb 9e                	jmp    c0014bb9 <Thr::loadDLL(char const*, bool)+0x1e6>
c0014c1b:	89 f8                	mov    eax,edi
c0014c1d:	84 c0                	test   al,al
c0014c1f:	b8 00 00 00 00       	mov    eax,0x0
c0014c24:	0f 44 d8             	cmove  ebx,eax
c0014c27:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014c2d:	89 d8                	mov    eax,ebx
c0014c2f:	5b                   	pop    ebx
c0014c30:	5e                   	pop    esi
c0014c31:	5f                   	pop    edi
c0014c32:	5d                   	pop    ebp
c0014c33:	c3                   	ret    

c0014c34 <Thr::executeDLL(unsigned long, void*)>:
c0014c34:	56                   	push   esi
c0014c35:	53                   	push   ebx
c0014c36:	52                   	push   edx
c0014c37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c3b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014c3f:	85 db                	test   ebx,ebx
c0014c41:	75 10                	jne    c0014c53 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014c43:	83 ec 0c             	sub    esp,0xc
c0014c46:	68 ca 2a 02 c0       	push   0xc0022aca
c0014c4b:	e8 ea 9f ff ff       	call   c000ec3a <KePanic(char const*)>
c0014c50:	83 c4 10             	add    esp,0x10
c0014c53:	50                   	push   eax
c0014c54:	50                   	push   eax
c0014c55:	53                   	push   ebx
c0014c56:	68 f4 2a 02 c0       	push   0xc0022af4
c0014c5b:	e8 ee 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014c60:	89 d8                	mov    eax,ebx
c0014c62:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014c66:	83 c4 14             	add    esp,0x14
c0014c69:	5b                   	pop    ebx
c0014c6a:	5e                   	pop    esi
c0014c6b:	ff e0                	jmp    eax

c0014c6d <KeProcessExec(Process*, char const*)>:
c0014c6d:	56                   	push   esi
c0014c6e:	53                   	push   ebx
c0014c6f:	83 ec 04             	sub    esp,0x4
c0014c72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c76:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014c7c:	85 f6                	test   esi,esi
c0014c7e:	74 16                	je     c0014c96 <KeProcessExec(Process*, char const*)+0x29>
c0014c80:	83 ec 0c             	sub    esp,0xc
c0014c83:	56                   	push   esi
c0014c84:	e8 c9 d8 ff ff       	call   c0012552 <VAS::~VAS()>
c0014c89:	58                   	pop    eax
c0014c8a:	5a                   	pop    edx
c0014c8b:	6a 14                	push   0x14
c0014c8d:	56                   	push   esi
c0014c8e:	e8 d0 79 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0014c93:	83 c4 10             	add    esp,0x10
c0014c96:	83 ec 0c             	sub    esp,0xc
c0014c99:	6a 14                	push   0x14
c0014c9b:	e8 46 9c ff ff       	call   c000e8e6 <malloc>
c0014ca0:	89 c6                	mov    esi,eax
c0014ca2:	58                   	pop    eax
c0014ca3:	5a                   	pop    edx
c0014ca4:	6a 00                	push   0x0
c0014ca6:	56                   	push   esi
c0014ca7:	e8 72 dd ff ff       	call   c0012a1e <VAS::VAS(bool)>
c0014cac:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014cb2:	59                   	pop    ecx
c0014cb3:	5e                   	pop    esi
c0014cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cb8:	50                   	push   eax
c0014cb9:	53                   	push   ebx
c0014cba:	e8 11 f0 ff ff       	call   c0013cd0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014cbf:	83 c4 14             	add    esp,0x14
c0014cc2:	31 c0                	xor    eax,eax
c0014cc4:	5b                   	pop    ebx
c0014cc5:	5e                   	pop    esi
c0014cc6:	c3                   	ret    
c0014cc7:	90                   	nop

c0014cc8 <userModeEntryPoint(void*)>:
c0014cc8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014ccd:	83 e8 01             	sub    eax,0x1
c0014cd0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0014cd5:	75 01                	jne    c0014cd8 <userModeEntryPoint(void*)+0x10>
c0014cd7:	fb                   	sti    
c0014cd8:	fb                   	sti    
c0014cd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ce1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ceb:	e9 4f b5 fe ff       	jmp    c000023f <goToUsermode>

c0014cf0 <changeTSS>:
c0014cf0:	83 ec 14             	sub    esp,0x14
c0014cf3:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014cf8:	50                   	push   eax
c0014cf9:	68 12 20 02 c0       	push   0xc0022012
c0014cfe:	e8 4b 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014d03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d08:	5a                   	pop    edx
c0014d09:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014d0c:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014d11:	59                   	pop    ecx
c0014d12:	c1 e2 15             	shl    edx,0x15
c0014d15:	29 d0                	sub    eax,edx
c0014d17:	50                   	push   eax
c0014d18:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014d1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d23:	05 68 11 00 00       	add    eax,0x1168
c0014d28:	50                   	push   eax
c0014d29:	e8 36 cb ff ff       	call   c0011864 <TSS::setESP(unsigned long)>
c0014d2e:	83 c4 1c             	add    esp,0x1c
c0014d31:	c3                   	ret    
c0014d32:	66 90                	xchg   ax,ax

c0014d34 <switchToThread(ThreadControlBlock*)>:
c0014d34:	57                   	push   edi
c0014d35:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014d3b:	56                   	push   esi
c0014d3c:	53                   	push   ebx
c0014d3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d41:	85 c9                	test   ecx,ecx
c0014d43:	0f 85 8b 00 00 00    	jne    c0014dd4 <switchToThread(ThreadControlBlock*)+0xa0>
c0014d49:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014d4d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014d53:	74 7b                	je     c0014dd0 <switchToThread(ThreadControlBlock*)+0x9c>
c0014d55:	b8 00 04 00 00       	mov    eax,0x400
c0014d5a:	29 d0                	sub    eax,edx
c0014d5c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014d5f:	d1 f8                	sar    eax,1
c0014d61:	01 d0                	add    eax,edx
c0014d63:	90                   	nop
c0014d64:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014d67:	e8 28 37 00 00       	call   c0018494 <HalQueryPerformanceCounter()>
c0014d6c:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014d71:	89 c6                	mov    esi,eax
c0014d73:	89 d7                	mov    edi,edx
c0014d75:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014d7b:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014d80:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014d86:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014d8c:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014d92:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d98:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014d9e:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014da4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014da7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014daa:	01 c6                	add    esi,eax
c0014dac:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014daf:	11 d7                	adc    edi,edx
c0014db1:	83 ec 0c             	sub    esp,0xc
c0014db4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014db7:	53                   	push   ebx
c0014db8:	e8 ba b4 fe ff       	call   c0000277 <switchToThreadASM>
c0014dbd:	0f 20 c0             	mov    eax,cr0
c0014dc0:	83 c8 08             	or     eax,0x8
c0014dc3:	0f 22 c0             	mov    cr0,eax
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	5b                   	pop    ebx
c0014dca:	5e                   	pop    esi
c0014dcb:	5f                   	pop    edi
c0014dcc:	c3                   	ret    
c0014dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd0:	31 c0                	xor    eax,eax
c0014dd2:	eb 90                	jmp    c0014d64 <switchToThread(ThreadControlBlock*)+0x30>
c0014dd4:	5b                   	pop    ebx
c0014dd5:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014ddf:	5e                   	pop    esi
c0014de0:	5f                   	pop    edi
c0014de1:	c3                   	ret    
c0014de2:	66 90                	xchg   ax,ax

c0014de4 <Process::addArgs(char**)>:
c0014de4:	57                   	push   edi
c0014de5:	56                   	push   esi
c0014de6:	53                   	push   ebx
c0014de7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014deb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014def:	85 f6                	test   esi,esi
c0014df1:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014dfb:	74 4f                	je     c0014e4c <Process::addArgs(char**)+0x68>
c0014dfd:	8b 06                	mov    eax,DWORD PTR [esi]
c0014dff:	85 c0                	test   eax,eax
c0014e01:	74 49                	je     c0014e4c <Process::addArgs(char**)+0x68>
c0014e03:	31 db                	xor    ebx,ebx
c0014e05:	8d 76 00             	lea    esi,[esi+0x0]
c0014e08:	83 ec 0c             	sub    esp,0xc
c0014e0b:	50                   	push   eax
c0014e0c:	e8 6f b7 fe ff       	call   c0000580 <strlen>
c0014e11:	83 c0 01             	add    eax,0x1
c0014e14:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e17:	e8 ca 9a ff ff       	call   c000e8e6 <malloc>
c0014e1c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014e23:	5a                   	pop    edx
c0014e24:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014e27:	83 c3 01             	add    ebx,0x1
c0014e2a:	59                   	pop    ecx
c0014e2b:	52                   	push   edx
c0014e2c:	50                   	push   eax
c0014e2d:	e8 1e b8 fe ff       	call   c0000650 <strcpy>
c0014e32:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	83 c1 01             	add    ecx,0x1
c0014e3e:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014e44:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014e47:	85 c0                	test   eax,eax
c0014e49:	75 bd                	jne    c0014e08 <Process::addArgs(char**)+0x24>
c0014e4b:	90                   	nop
c0014e4c:	5b                   	pop    ebx
c0014e4d:	5e                   	pop    esi
c0014e4e:	5f                   	pop    edi
c0014e4f:	c3                   	ret    

c0014e50 <Process::Process(char const*, Process*, char**)>:
c0014e50:	56                   	push   esi
c0014e51:	53                   	push   ebx
c0014e52:	83 ec 14             	sub    esp,0x14
c0014e55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e59:	05 0c 02 00 00       	add    eax,0x20c
c0014e5e:	bb 07 00 00 00       	mov    ebx,0x7
c0014e63:	89 c6                	mov    esi,eax
c0014e65:	8d 76 00             	lea    esi,[esi+0x0]
c0014e68:	85 db                	test   ebx,ebx
c0014e6a:	78 14                	js     c0014e80 <Process::Process(char const*, Process*, char**)+0x30>
c0014e6c:	83 ec 0c             	sub    esp,0xc
c0014e6f:	56                   	push   esi
c0014e70:	e8 6b b5 00 00       	call   c00203e0 <ThreadControlBlock::ThreadControlBlock()>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	83 c6 5f             	add    esi,0x5f
c0014e7b:	83 eb 01             	sub    ebx,0x1
c0014e7e:	eb e8                	jmp    c0014e68 <Process::Process(char const*, Process*, char**)+0x18>
c0014e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e84:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014e96:	83 ec 0c             	sub    esp,0xc
c0014e99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e9d:	e8 c2 8c ff ff       	call   c000db64 <KeNewProcessEnv(Process*)>
c0014ea2:	83 c4 10             	add    esp,0x10
c0014ea5:	89 c2                	mov    edx,eax
c0014ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eb5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014ebe:	a1 9c 42 02 c0       	mov    eax,ds:0xc002429c
c0014ec3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ec6:	89 15 9c 42 02 c0    	mov    DWORD PTR ds:0xc002429c,edx
c0014ecc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ed0:	89 02                	mov    DWORD PTR [edx],eax
c0014ed2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014eda:	83 ec 0c             	sub    esp,0xc
c0014edd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ee1:	e8 00 9a ff ff       	call   c000e8e6 <malloc>
c0014ee6:	83 c4 10             	add    esp,0x10
c0014ee9:	89 c3                	mov    ebx,eax
c0014eeb:	83 ec 08             	sub    esp,0x8
c0014eee:	6a 00                	push   0x0
c0014ef0:	53                   	push   ebx
c0014ef1:	e8 28 db ff ff       	call   c0012a1e <VAS::VAS(bool)>
c0014ef6:	83 c4 10             	add    esp,0x10
c0014ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014efd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f07:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f19:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014f1f:	e8 bb ad ff ff       	call   c000fcdf <KeInitSignals()>
c0014f24:	89 c2                	mov    edx,eax
c0014f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f2a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f3a:	85 c0                	test   eax,eax
c0014f3c:	74 42                	je     c0014f80 <Process::Process(char const*, Process*, char**)+0x130>
c0014f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f42:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f48:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f52:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f6c:	05 0c 01 00 00       	add    eax,0x10c
c0014f71:	83 ec 08             	sub    esp,0x8
c0014f74:	52                   	push   edx
c0014f75:	50                   	push   eax
c0014f76:	e8 d5 b6 fe ff       	call   c0000650 <strcpy>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	eb 64                	jmp    c0014fe4 <Process::Process(char const*, Process*, char**)+0x194>
c0014f80:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f8f:	e8 52 99 ff ff       	call   c000e8e6 <malloc>
c0014f94:	83 c4 10             	add    esp,0x10
c0014f97:	89 c3                	mov    ebx,eax
c0014f99:	83 ec 08             	sub    esp,0x8
c0014f9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fa0:	53                   	push   ebx
c0014fa1:	e8 ec c5 ff ff       	call   c0011592 <VgaText::VgaText(char const*)>
c0014fa6:	83 c4 10             	add    esp,0x10
c0014fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fad:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014fb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fbd:	83 ec 0c             	sub    esp,0xc
c0014fc0:	50                   	push   eax
c0014fc1:	e8 7a be ff ff       	call   c0010e40 <addToTerminalCycle(VgaText*)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fcd:	05 0c 01 00 00       	add    eax,0x10c
c0014fd2:	83 ec 08             	sub    esp,0x8
c0014fd5:	68 13 2b 02 c0       	push   0xc0022b13
c0014fda:	50                   	push   eax
c0014fdb:	e8 70 b6 fe ff       	call   c0000650 <strcpy>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	90                   	nop
c0014fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe8:	83 c0 0c             	add    eax,0xc
c0014feb:	83 ec 08             	sub    esp,0x8
c0014fee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ff2:	50                   	push   eax
c0014ff3:	e8 58 b6 fe ff       	call   c0000650 <strcpy>
c0014ff8:	83 c4 10             	add    esp,0x10
c0014ffb:	83 ec 08             	sub    esp,0x8
c0014ffe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015002:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015006:	e8 d9 fd ff ff       	call   c0014de4 <Process::addArgs(char**)>
c001500b:	83 c4 10             	add    esp,0x10
c001500e:	83 ec 08             	sub    esp,0x8
c0015011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015019:	e8 b2 ec ff ff       	call   c0013cd0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001501e:	83 c4 10             	add    esp,0x10
c0015021:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015025:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015029:	83 f0 01             	xor    eax,0x1
c001502c:	88 c2                	mov    dl,al
c001502e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015032:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015038:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001503d:	83 ec 04             	sub    esp,0x4
c0015040:	50                   	push   eax
c0015041:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015045:	68 6c 2b 02 c0       	push   0xc0022b6c
c001504a:	e8 ff 1e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001504f:	83 c4 10             	add    esp,0x10
c0015052:	90                   	nop
c0015053:	83 c4 14             	add    esp,0x14
c0015056:	5b                   	pop    ebx
c0015057:	5e                   	pop    esi
c0015058:	c3                   	ret    
c0015059:	90                   	nop
c001505a:	66 90                	xchg   ax,ax

c001505c <Process::Process(bool, char const*, Process*, char**)>:
c001505c:	56                   	push   esi
c001505d:	53                   	push   ebx
c001505e:	83 ec 24             	sub    esp,0x24
c0015061:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015065:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001506d:	05 0c 02 00 00       	add    eax,0x20c
c0015072:	bb 07 00 00 00       	mov    ebx,0x7
c0015077:	89 c6                	mov    esi,eax
c0015079:	8d 76 00             	lea    esi,[esi+0x0]
c001507c:	85 db                	test   ebx,ebx
c001507e:	78 14                	js     c0015094 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015080:	83 ec 0c             	sub    esp,0xc
c0015083:	56                   	push   esi
c0015084:	e8 57 b3 00 00       	call   c00203e0 <ThreadControlBlock::ThreadControlBlock()>
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	83 c6 5f             	add    esi,0x5f
c001508f:	83 eb 01             	sub    ebx,0x1
c0015092:	eb e8                	jmp    c001507c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015098:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001509f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00150aa:	83 ec 0c             	sub    esp,0xc
c00150ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150b1:	e8 ae 8a ff ff       	call   c000db64 <KeNewProcessEnv(Process*)>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	89 c2                	mov    edx,eax
c00150bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150bf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00150c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150c9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00150d2:	a1 9c 42 02 c0       	mov    eax,ds:0xc002429c
c00150d7:	8d 50 01             	lea    edx,[eax+0x1]
c00150da:	89 15 9c 42 02 c0    	mov    DWORD PTR ds:0xc002429c,edx
c00150e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00150e4:	89 02                	mov    DWORD PTR [edx],eax
c00150e6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00150ee:	83 ec 0c             	sub    esp,0xc
c00150f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00150f5:	e8 ec 97 ff ff       	call   c000e8e6 <malloc>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	89 c3                	mov    ebx,eax
c00150ff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015104:	83 ec 08             	sub    esp,0x8
c0015107:	50                   	push   eax
c0015108:	53                   	push   ebx
c0015109:	e8 10 d9 ff ff       	call   c0012a1e <VAS::VAS(bool)>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015115:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001511b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001511f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015129:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001512d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015131:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015137:	e8 a3 ab ff ff       	call   c000fcdf <KeInitSignals()>
c001513c:	89 c2                	mov    edx,eax
c001513e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015142:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001514c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015152:	85 c0                	test   eax,eax
c0015154:	74 42                	je     c0015198 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001515a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015160:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001516a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015174:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001517a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015180:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015184:	05 0c 01 00 00       	add    eax,0x10c
c0015189:	83 ec 08             	sub    esp,0x8
c001518c:	52                   	push   edx
c001518d:	50                   	push   eax
c001518e:	e8 bd b4 fe ff       	call   c0000650 <strcpy>
c0015193:	83 c4 10             	add    esp,0x10
c0015196:	eb 64                	jmp    c00151fc <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015198:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00151a0:	83 ec 0c             	sub    esp,0xc
c00151a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151a7:	e8 3a 97 ff ff       	call   c000e8e6 <malloc>
c00151ac:	83 c4 10             	add    esp,0x10
c00151af:	89 c3                	mov    ebx,eax
c00151b1:	83 ec 08             	sub    esp,0x8
c00151b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00151b8:	53                   	push   ebx
c00151b9:	e8 d4 c3 ff ff       	call   c0011592 <VgaText::VgaText(char const*)>
c00151be:	83 c4 10             	add    esp,0x10
c00151c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151c5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00151cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d5:	83 ec 0c             	sub    esp,0xc
c00151d8:	50                   	push   eax
c00151d9:	e8 62 bc ff ff       	call   c0010e40 <addToTerminalCycle(VgaText*)>
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151e5:	05 0c 01 00 00       	add    eax,0x10c
c00151ea:	83 ec 08             	sub    esp,0x8
c00151ed:	68 13 2b 02 c0       	push   0xc0022b13
c00151f2:	50                   	push   eax
c00151f3:	e8 58 b4 fe ff       	call   c0000650 <strcpy>
c00151f8:	83 c4 10             	add    esp,0x10
c00151fb:	90                   	nop
c00151fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015200:	83 c0 0c             	add    eax,0xc
c0015203:	83 ec 08             	sub    esp,0x8
c0015206:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001520a:	50                   	push   eax
c001520b:	e8 40 b4 fe ff       	call   c0000650 <strcpy>
c0015210:	83 c4 10             	add    esp,0x10
c0015213:	83 ec 08             	sub    esp,0x8
c0015216:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001521a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001521e:	e8 c1 fb ff ff       	call   c0014de4 <Process::addArgs(char**)>
c0015223:	83 c4 10             	add    esp,0x10
c0015226:	90                   	nop
c0015227:	83 c4 24             	add    esp,0x24
c001522a:	5b                   	pop    ebx
c001522b:	5e                   	pop    esi
c001522c:	c3                   	ret    
c001522d:	8d 76 00             	lea    esi,[esi+0x0]

c0015230 <taskStartupFunction>:
c0015230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015235:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015238:	c3                   	ret    
c0015239:	8d 76 00             	lea    esi,[esi+0x0]

c001523c <KeDisablePreemption()>:
c001523c:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015241:	85 c0                	test   eax,eax
c0015243:	75 13                	jne    c0015258 <KeDisablePreemption()+0x1c>
c0015245:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c001524b:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c0015252:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c0015258:	83 c0 01             	add    eax,0x1
c001525b:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015260:	c3                   	ret    
c0015261:	8d 76 00             	lea    esi,[esi+0x0]

c0015264 <KeRestorePreemption()>:
c0015264:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015269:	83 e8 01             	sub    eax,0x1
c001526c:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015271:	75 0d                	jne    c0015280 <KeRestorePreemption()+0x1c>
c0015273:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c0015278:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c001527d:	8d 76 00             	lea    esi,[esi+0x0]
c0015280:	c3                   	ret    
c0015281:	90                   	nop
c0015282:	66 90                	xchg   ax,ax

c0015284 <Process::createThread(void (*)(void*), void*, int)>:
c0015284:	57                   	push   edi
c0015285:	31 c9                	xor    ecx,ecx
c0015287:	56                   	push   esi
c0015288:	53                   	push   ebx
c0015289:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001528d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015294:	89 f2                	mov    edx,esi
c0015296:	66 90                	xchg   ax,ax
c0015298:	0f b7 c2             	movzx  eax,dx
c001529b:	80 e2 01             	and    dl,0x1
c001529e:	74 14                	je     c00152b4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00152a0:	d1 f8                	sar    eax,1
c00152a2:	83 c1 01             	add    ecx,0x1
c00152a5:	83 f9 10             	cmp    ecx,0x10
c00152a8:	89 c2                	mov    edx,eax
c00152aa:	75 ec                	jne    c0015298 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00152ac:	31 db                	xor    ebx,ebx
c00152ae:	89 d8                	mov    eax,ebx
c00152b0:	5b                   	pop    ebx
c00152b1:	5e                   	pop    esi
c00152b2:	5f                   	pop    edi
c00152b3:	c3                   	ret    
c00152b4:	b8 01 00 00 00       	mov    eax,0x1
c00152b9:	d3 e0                	shl    eax,cl
c00152bb:	09 c6                	or     esi,eax
c00152bd:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00152c4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00152c7:	c1 e0 05             	shl    eax,0x5
c00152ca:	29 c8                	sub    eax,ecx
c00152cc:	01 d8                	add    eax,ebx
c00152ce:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00152d5:	75 0d                	jne    c00152e4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00152d7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00152e1:	8d 76 00             	lea    esi,[esi+0x0]
c00152e4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00152ea:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00152ed:	83 ec 0c             	sub    esp,0xc
c00152f0:	c1 e6 05             	shl    esi,0x5
c00152f3:	29 ce                	sub    esi,ecx
c00152f5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00152f8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00152fb:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015301:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015307:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001530d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015314:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001531a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001531e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015324:	89 ca                	mov    edx,ecx
c0015326:	f7 da                	neg    edx
c0015328:	c1 e2 15             	shl    edx,0x15
c001532b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015331:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015337:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001533b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015345:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001534b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001534f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015355:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001535f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015369:	68 00 01 00 00       	push   0x100
c001536e:	e8 73 95 ff ff       	call   c000e8e6 <malloc>
c0015373:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015376:	58                   	pop    eax
c0015377:	5a                   	pop    edx
c0015378:	53                   	push   ebx
c0015379:	68 cc c6 02 c0       	push   0xc002c6cc
c001537e:	e8 09 ac 00 00       	call   c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	89 d8                	mov    eax,ebx
c0015388:	5b                   	pop    ebx
c0015389:	5e                   	pop    esi
c001538a:	5f                   	pop    edi
c001538b:	c3                   	ret    

c001538c <Process::createUserThread()>:
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	68 80 00 00 00       	push   0x80
c0015394:	6a 00                	push   0x0
c0015396:	68 c8 4c 01 c0       	push   0xc0014cc8
c001539b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001539f:	50                   	push   eax
c00153a0:	e8 df fe ff ff       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c00153a5:	83 c4 1c             	add    esp,0x1c
c00153a8:	c3                   	ret    
c00153a9:	8d 76 00             	lea    esi,[esi+0x0]

c00153ac <setupMultitasking(void (*)())>:
c00153ac:	56                   	push   esi
c00153ad:	53                   	push   ebx
c00153ae:	83 ec 04             	sub    esp,0x4
c00153b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00153b5:	eb 11                	jmp    c00153c8 <setupMultitasking(void (*)())+0x1c>
c00153b7:	90                   	nop
c00153b8:	83 ec 0c             	sub    esp,0xc
c00153bb:	68 cc c6 02 c0       	push   0xc002c6cc
c00153c0:	e8 0b ab 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	83 ec 0c             	sub    esp,0xc
c00153cb:	68 cc c6 02 c0       	push   0xc002c6cc
c00153d0:	e8 d7 aa 00 00       	call   c001feac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	84 c0                	test   al,al
c00153da:	74 dc                	je     c00153b8 <setupMultitasking(void (*)())+0xc>
c00153dc:	83 ec 0c             	sub    esp,0xc
c00153df:	68 24 07 00 00       	push   0x724
c00153e4:	e8 fd 94 ff ff       	call   c000e8e6 <malloc>
c00153e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00153f0:	6a 00                	push   0x0
c00153f2:	68 17 2b 02 c0       	push   0xc0022b17
c00153f7:	6a 01                	push   0x1
c00153f9:	50                   	push   eax
c00153fa:	89 c3                	mov    ebx,eax
c00153fc:	e8 5b fc ff ff       	call   c001505c <Process::Process(bool, char const*, Process*, char**)>
c0015401:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015407:	83 c4 14             	add    esp,0x14
c001540a:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c0015410:	50                   	push   eax
c0015411:	e8 7f bc ff ff       	call   c0011095 <setActiveTerminal(VgaText*)>
c0015416:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c001541d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015427:	83 c8 01             	or     eax,0x1
c001542a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015431:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015437:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001543a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015444:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001544a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015454:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001545a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015464:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001546e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015474:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001547a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015484:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001548e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015495:	e8 4c 94 ff ff       	call   c000e8e6 <malloc>
c001549a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00154a0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00154a6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00154ac:	5a                   	pop    edx
c00154ad:	59                   	pop    ecx
c00154ae:	68 13 2b 02 c0       	push   0xc0022b13
c00154b3:	50                   	push   eax
c00154b4:	e8 97 b1 fe ff       	call   c0000650 <strcpy>
c00154b9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00154c0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00154c4:	83 c4 14             	add    esp,0x14
c00154c7:	5b                   	pop    ebx
c00154c8:	5e                   	pop    esi
c00154c9:	e9 9b ad fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00154ce:	66 90                	xchg   ax,ax

c00154d0 <schedule()>:
c00154d0:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c00154d6:	85 d2                	test   edx,edx
c00154d8:	74 0e                	je     c00154e8 <schedule()+0x18>
c00154da:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c00154e4:	c3                   	ret    
c00154e5:	8d 76 00             	lea    esi,[esi+0x0]
c00154e8:	53                   	push   ebx
c00154e9:	83 ec 14             	sub    esp,0x14
c00154ec:	68 cc c6 02 c0       	push   0xc002c6cc
c00154f1:	e8 b6 a9 00 00       	call   c001feac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00154f6:	83 c4 10             	add    esp,0x10
c00154f9:	84 c0                	test   al,al
c00154fb:	75 3f                	jne    c001553c <schedule()+0x6c>
c00154fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015502:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015505:	83 fa 01             	cmp    edx,0x1
c0015508:	74 3a                	je     c0015544 <schedule()+0x74>
c001550a:	66 90                	xchg   ax,ax
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015514:	e8 af a9 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015519:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015520:	89 c3                	mov    ebx,eax
c0015522:	e8 a9 a9 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015527:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001552e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015531:	e8 fe f7 ff ff       	call   c0014d34 <switchToThread(ThreadControlBlock*)>
c0015536:	83 c4 10             	add    esp,0x10
c0015539:	8d 76 00             	lea    esi,[esi+0x0]
c001553c:	83 c4 08             	add    esp,0x8
c001553f:	5b                   	pop    ebx
c0015540:	c3                   	ret    
c0015541:	8d 76 00             	lea    esi,[esi+0x0]
c0015544:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001554b:	83 ec 08             	sub    esp,0x8
c001554e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015553:	50                   	push   eax
c0015554:	68 cc c6 02 c0       	push   0xc002c6cc
c0015559:	e8 2e aa 00 00       	call   c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001555e:	83 c4 10             	add    esp,0x10
c0015561:	eb a9                	jmp    c001550c <schedule()+0x3c>
c0015563:	90                   	nop

c0015564 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015564:	83 ec 0c             	sub    esp,0xc
c0015567:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001556c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015570:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015573:	e8 58 ff ff ff       	call   c00154d0 <schedule()>
c0015578:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001557d:	83 e8 01             	sub    eax,0x1
c0015580:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015585:	75 01                	jne    c0015588 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015587:	fb                   	sti    
c0015588:	83 c4 0c             	add    esp,0xc
c001558b:	c3                   	ret    

c001558c <blockTask(TaskState)>:
c001558c:	83 ec 0c             	sub    esp,0xc
c001558f:	fa                   	cli    
c0015590:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015595:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015599:	83 c0 01             	add    eax,0x1
c001559c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00155a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155a9:	e8 22 ff ff ff       	call   c00154d0 <schedule()>
c00155ae:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00155b3:	83 e8 01             	sub    eax,0x1
c00155b6:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00155bb:	75 03                	jne    c00155c0 <blockTask(TaskState)+0x34>
c00155bd:	fb                   	sti    
c00155be:	66 90                	xchg   ax,ax
c00155c0:	83 c4 0c             	add    esp,0xc
c00155c3:	c3                   	ret    

c00155c4 <waitTask(int, int*, int)>:
c00155c4:	83 ec 18             	sub    esp,0x18
c00155c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00155d0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00155d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155dc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00155df:	6a 07                	push   0x7
c00155e1:	e8 a6 ff ff ff       	call   c001558c <blockTask(TaskState)>
c00155e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155eb:	83 c4 10             	add    esp,0x10
c00155ee:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00155f1:	85 d2                	test   edx,edx
c00155f3:	74 0b                	je     c0015600 <waitTask(int, int*, int)+0x3c>
c00155f5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00155f8:	89 02                	mov    DWORD PTR [edx],eax
c00155fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155ff:	90                   	nop
c0015600:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015603:	83 c4 0c             	add    esp,0xc
c0015606:	c3                   	ret    
c0015607:	90                   	nop

c0015608 <milliTenthSleepUntil(unsigned int)>:
c0015608:	83 ec 0c             	sub    esp,0xc
c001560b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001560f:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c0015615:	76 05                	jbe    c001561c <milliTenthSleepUntil(unsigned int)+0x14>
c0015617:	90                   	nop
c0015618:	83 c4 0c             	add    esp,0xc
c001561b:	c3                   	ret    
c001561c:	fa                   	cli    
c001561d:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015623:	83 ec 08             	sub    esp,0x8
c0015626:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c001562c:	83 c2 01             	add    edx,0x1
c001562f:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015635:	83 c1 01             	add    ecx,0x1
c0015638:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c001563e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015644:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001564c:	50                   	push   eax
c001564d:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015652:	e8 35 a9 00 00       	call   c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015657:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001565e:	e8 29 ff ff ff       	call   c001558c <blockTask(TaskState)>
c0015663:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015668:	83 c4 10             	add    esp,0x10
c001566b:	83 e8 01             	sub    eax,0x1
c001566e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015673:	85 c0                	test   eax,eax
c0015675:	75 09                	jne    c0015680 <milliTenthSleepUntil(unsigned int)+0x78>
c0015677:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c001567c:	85 c0                	test   eax,eax
c001567e:	75 14                	jne    c0015694 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015680:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015685:	83 e8 01             	sub    eax,0x1
c0015688:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001568d:	75 89                	jne    c0015618 <milliTenthSleepUntil(unsigned int)+0x10>
c001568f:	fb                   	sti    
c0015690:	83 c4 0c             	add    esp,0xc
c0015693:	c3                   	ret    
c0015694:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c001569e:	e8 2d fe ff ff       	call   c00154d0 <schedule()>
c00156a3:	eb db                	jmp    c0015680 <milliTenthSleepUntil(unsigned int)+0x78>
c00156a5:	8d 76 00             	lea    esi,[esi+0x0]

c00156a8 <milliTenthSleep(unsigned int)>:
c00156a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156ac:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c00156b1:	01 c2                	add    edx,eax
c00156b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00156b7:	e9 4c ff ff ff       	jmp    c0015608 <milliTenthSleepUntil(unsigned int)>

c00156bc <sleep(unsigned int)>:
c00156bc:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00156c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156c8:	eb de                	jmp    c00156a8 <milliTenthSleep(unsigned int)>
c00156ca:	66 90                	xchg   ax,ax

c00156cc <taskReturned>:
c00156cc:	83 ec 18             	sub    esp,0x18
c00156cf:	68 98 2b 02 c0       	push   0xc0022b98
c00156d4:	e8 61 95 ff ff       	call   c000ec3a <KePanic(char const*)>
c00156d9:	83 c4 10             	add    esp,0x10
c00156dc:	83 ec 0c             	sub    esp,0xc
c00156df:	6a 02                	push   0x2
c00156e1:	e8 a6 fe ff ff       	call   c001558c <blockTask(TaskState)>
c00156e6:	fa                   	cli    
c00156e7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156ec:	83 c0 01             	add    eax,0x1
c00156ef:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00156f4:	e8 d7 fd ff ff       	call   c00154d0 <schedule()>
c00156f9:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156fe:	83 c4 10             	add    esp,0x10
c0015701:	83 e8 01             	sub    eax,0x1
c0015704:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015709:	85 c0                	test   eax,eax
c001570b:	75 cf                	jne    c00156dc <taskReturned+0x10>
c001570d:	fb                   	sti    
c001570e:	eb cc                	jmp    c00156dc <taskReturned+0x10>

c0015710 <Thr::processFromPID(int)>:
c0015710:	57                   	push   edi
c0015711:	56                   	push   esi
c0015712:	53                   	push   ebx
c0015713:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015717:	fa                   	cli    
c0015718:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c001571e:	83 ec 0c             	sub    esp,0xc
c0015721:	68 cc c6 02 c0       	push   0xc002c6cc
c0015726:	83 c1 01             	add    ecx,0x1
c0015729:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c001572f:	e8 94 a7 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015734:	83 c4 10             	add    esp,0x10
c0015737:	89 c7                	mov    edi,eax
c0015739:	eb 15                	jmp    c0015750 <Thr::processFromPID(int)+0x40>
c001573b:	90                   	nop
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015744:	e8 7f a7 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	39 f8                	cmp    eax,edi
c001574e:	74 50                	je     c00157a0 <Thr::processFromPID(int)+0x90>
c0015750:	83 ec 0c             	sub    esp,0xc
c0015753:	68 cc c6 02 c0       	push   0xc002c6cc
c0015758:	e8 6b a7 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001575d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015764:	89 c3                	mov    ebx,eax
c0015766:	e8 65 a7 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001576b:	58                   	pop    eax
c001576c:	5a                   	pop    edx
c001576d:	53                   	push   ebx
c001576e:	68 cc c6 02 c0       	push   0xc002c6cc
c0015773:	e8 14 a8 00 00       	call   c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015778:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001577b:	83 c4 10             	add    esp,0x10
c001577e:	39 30                	cmp    DWORD PTR [eax],esi
c0015780:	75 ba                	jne    c001573c <Thr::processFromPID(int)+0x2c>
c0015782:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015787:	83 e8 01             	sub    eax,0x1
c001578a:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001578f:	74 0b                	je     c001579c <Thr::processFromPID(int)+0x8c>
c0015791:	8d 76 00             	lea    esi,[esi+0x0]
c0015794:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015797:	90                   	nop
c0015798:	5b                   	pop    ebx
c0015799:	5e                   	pop    esi
c001579a:	5f                   	pop    edi
c001579b:	c3                   	ret    
c001579c:	fb                   	sti    
c001579d:	eb f5                	jmp    c0015794 <Thr::processFromPID(int)+0x84>
c001579f:	90                   	nop
c00157a0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00157a5:	8d 50 ff             	lea    edx,[eax-0x1]
c00157a8:	31 c0                	xor    eax,eax
c00157aa:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00157b0:	85 d2                	test   edx,edx
c00157b2:	75 e4                	jne    c0015798 <Thr::processFromPID(int)+0x88>
c00157b4:	fb                   	sti    
c00157b5:	5b                   	pop    ebx
c00157b6:	5e                   	pop    esi
c00157b7:	5f                   	pop    edi
c00157b8:	c3                   	ret    
c00157b9:	8d 76 00             	lea    esi,[esi+0x0]

c00157bc <unblockTask(ThreadControlBlock*)>:
c00157bc:	53                   	push   ebx
c00157bd:	83 ec 08             	sub    esp,0x8
c00157c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157c4:	fa                   	cli    
c00157c5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00157ca:	83 c0 01             	add    eax,0x1
c00157cd:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00157d2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00157d5:	85 c0                	test   eax,eax
c00157d7:	74 67                	je     c0015840 <unblockTask(ThreadControlBlock*)+0x84>
c00157d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00157dc:	83 f8 01             	cmp    eax,0x1
c00157df:	74 37                	je     c0015818 <unblockTask(ThreadControlBlock*)+0x5c>
c00157e1:	83 ec 0c             	sub    esp,0xc
c00157e4:	68 cc c6 02 c0       	push   0xc002c6cc
c00157e9:	e8 da a6 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	85 c0                	test   eax,eax
c00157f3:	75 1b                	jne    c0015810 <unblockTask(ThreadControlBlock*)+0x54>
c00157f5:	eb 5d                	jmp    c0015854 <unblockTask(ThreadControlBlock*)+0x98>
c00157f7:	90                   	nop
c00157f8:	83 ec 08             	sub    esp,0x8
c00157fb:	50                   	push   eax
c00157fc:	68 cc c6 02 c0       	push   0xc002c6cc
c0015801:	e8 ce ab 00 00       	call   c00203d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015806:	83 c4 10             	add    esp,0x10
c0015809:	85 c0                	test   eax,eax
c001580b:	74 47                	je     c0015854 <unblockTask(ThreadControlBlock*)+0x98>
c001580d:	8d 76 00             	lea    esi,[esi+0x0]
c0015810:	39 c3                	cmp    ebx,eax
c0015812:	75 e4                	jne    c00157f8 <unblockTask(ThreadControlBlock*)+0x3c>
c0015814:	eb 12                	jmp    c0015828 <unblockTask(ThreadControlBlock*)+0x6c>
c0015816:	66 90                	xchg   ax,ax
c0015818:	83 ec 0c             	sub    esp,0xc
c001581b:	68 35 2b 02 c0       	push   0xc0022b35
c0015820:	e8 29 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015825:	83 c4 10             	add    esp,0x10
c0015828:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001582d:	83 e8 01             	sub    eax,0x1
c0015830:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015835:	75 01                	jne    c0015838 <unblockTask(ThreadControlBlock*)+0x7c>
c0015837:	fb                   	sti    
c0015838:	83 c4 08             	add    esp,0x8
c001583b:	5b                   	pop    ebx
c001583c:	c3                   	ret    
c001583d:	8d 76 00             	lea    esi,[esi+0x0]
c0015840:	83 ec 0c             	sub    esp,0xc
c0015843:	68 1e 2b 02 c0       	push   0xc0022b1e
c0015848:	e8 01 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001584d:	83 c4 10             	add    esp,0x10
c0015850:	eb d6                	jmp    c0015828 <unblockTask(ThreadControlBlock*)+0x6c>
c0015852:	66 90                	xchg   ax,ax
c0015854:	83 ec 08             	sub    esp,0x8
c0015857:	53                   	push   ebx
c0015858:	68 cc c6 02 c0       	push   0xc002c6cc
c001585d:	e8 2a a7 00 00       	call   c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015862:	83 c4 10             	add    esp,0x10
c0015865:	eb c1                	jmp    c0015828 <unblockTask(ThreadControlBlock*)+0x6c>
c0015867:	90                   	nop

c0015868 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015868:	55                   	push   ebp
c0015869:	57                   	push   edi
c001586a:	56                   	push   esi
c001586b:	53                   	push   ebx
c001586c:	83 ec 1c             	sub    esp,0x1c
c001586f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015873:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015876:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001587c:	85 ed                	test   ebp,ebp
c001587e:	7e 28                	jle    c00158a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015880:	31 f6                	xor    esi,esi
c0015882:	66 90                	xchg   ax,ax
c0015884:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001588b:	83 ec 0c             	sub    esp,0xc
c001588e:	83 c6 01             	add    esi,0x1
c0015891:	57                   	push   edi
c0015892:	e8 5f 90 ff ff       	call   c000e8f6 <free>
c0015897:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001589a:	83 c4 10             	add    esp,0x10
c001589d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00158a3:	7f df                	jg     c0015884 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00158a5:	8d 76 00             	lea    esi,[esi+0x0]
c00158a8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00158b2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00158b7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00158ba:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00158bd:	d3 c0                	rol    eax,cl
c00158bf:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00158c6:	21 c8                	and    eax,ecx
c00158c8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00158cf:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158d2:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00158da:	89 f7                	mov    edi,esi
c00158dc:	0f 85 72 01 00 00    	jne    c0015a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00158e2:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00158e8:	85 ed                	test   ebp,ebp
c00158ea:	74 1c                	je     c0015908 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00158ec:	83 ec 0c             	sub    esp,0xc
c00158ef:	55                   	push   ebp
c00158f0:	e8 8b 81 ff ff       	call   c000da80 <EnvVarContainer::~EnvVarContainer()>
c00158f5:	59                   	pop    ecx
c00158f6:	5e                   	pop    esi
c00158f7:	6a 0c                	push   0xc
c00158f9:	55                   	push   ebp
c00158fa:	e8 64 6d ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00158ff:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	89 f7                	mov    edi,esi
c0015907:	90                   	nop
c0015908:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001590e:	85 c0                	test   eax,eax
c0015910:	0f 84 b2 00 00 00    	je     c00159c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015916:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015919:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001591d:	31 c9                	xor    ecx,ecx
c001591f:	eb 17                	jmp    c0015938 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015921:	8d 76 00             	lea    esi,[esi+0x0]
c0015924:	83 c1 01             	add    ecx,0x1
c0015927:	83 f9 10             	cmp    ecx,0x10
c001592a:	0f 84 98 00 00 00    	je     c00159c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015930:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015936:	66 90                	xchg   ax,ax
c0015938:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001593f:	d3 fa                	sar    edx,cl
c0015941:	80 e2 01             	and    dl,0x1
c0015944:	74 de                	je     c0015924 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015946:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015949:	c1 e2 05             	shl    edx,0x5
c001594c:	29 ca                	sub    edx,ecx
c001594e:	01 d0                	add    eax,edx
c0015950:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015956:	83 fd 07             	cmp    ebp,0x7
c0015959:	75 c9                	jne    c0015924 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001595b:	05 40 02 00 00       	add    eax,0x240
c0015960:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015963:	83 fd ff             	cmp    ebp,0xffffffff
c0015966:	0f 8c f0 00 00 00    	jl     c0015a5c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001596c:	0f 84 ae 01 00 00    	je     c0015b20 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015972:	85 ed                	test   ebp,ebp
c0015974:	0f 84 92 01 00 00    	je     c0015b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001597a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001597c:	75 a6                	jne    c0015924 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001597e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015982:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015988:	01 d0                	add    eax,edx
c001598a:	66 90                	xchg   ax,ax
c001598c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015990:	83 ec 0c             	sub    esp,0xc
c0015993:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015999:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001599c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00159a2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00159a9:	50                   	push   eax
c00159aa:	e8 0d fe ff ff       	call   c00157bc <unblockTask(ThreadControlBlock*)>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159b5:	89 f7                	mov    edi,esi
c00159b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159bb:	83 c1 01             	add    ecx,0x1
c00159be:	83 f9 10             	cmp    ecx,0x10
c00159c1:	0f 85 69 ff ff ff    	jne    c0015930 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00159c7:	90                   	nop
c00159c8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00159ce:	85 c0                	test   eax,eax
c00159d0:	74 62                	je     c0015a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00159d2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00159d8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00159de:	74 54                	je     c0015a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00159e0:	83 ec 0c             	sub    esp,0xc
c00159e3:	68 cc c6 02 c0       	push   0xc002c6cc
c00159e8:	e8 db a4 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159ed:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00159f4:	89 c7                	mov    edi,eax
c00159f6:	e8 b1 a4 00 00       	call   c001feac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	84 c0                	test   al,al
c0015a00:	0f 84 ce 00 00 00    	je     c0015ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015a06:	66 90                	xchg   ax,ax
c0015a08:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a0b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a11:	85 d2                	test   edx,edx
c0015a13:	74 0f                	je     c0015a24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015a15:	8b 02                	mov    eax,DWORD PTR [edx]
c0015a17:	83 ec 0c             	sub    esp,0xc
c0015a1a:	52                   	push   edx
c0015a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a1e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a21:	83 c4 10             	add    esp,0x10
c0015a24:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015a2e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015a31:	8d 76 00             	lea    esi,[esi+0x0]
c0015a34:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015a3a:	85 db                	test   ebx,ebx
c0015a3c:	74 16                	je     c0015a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a3e:	83 ec 0c             	sub    esp,0xc
c0015a41:	53                   	push   ebx
c0015a42:	e8 0b cb ff ff       	call   c0012552 <VAS::~VAS()>
c0015a47:	58                   	pop    eax
c0015a48:	5a                   	pop    edx
c0015a49:	6a 14                	push   0x14
c0015a4b:	53                   	push   ebx
c0015a4c:	e8 12 6c ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0015a51:	83 c4 10             	add    esp,0x10
c0015a54:	83 c4 1c             	add    esp,0x1c
c0015a57:	5b                   	pop    ebx
c0015a58:	5e                   	pop    esi
c0015a59:	5f                   	pop    edi
c0015a5a:	5d                   	pop    ebp
c0015a5b:	c3                   	ret    
c0015a5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a60:	83 ec 0c             	sub    esp,0xc
c0015a63:	68 cc 2b 02 c0       	push   0xc0022bcc
c0015a68:	e8 cd 91 ff ff       	call   c000ec3a <KePanic(char const*)>
c0015a6d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a70:	83 c4 10             	add    esp,0x10
c0015a73:	89 f7                	mov    edi,esi
c0015a75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a79:	e9 a6 fe ff ff       	jmp    c0015924 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a7e:	66 90                	xchg   ax,ax
c0015a80:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015a86:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015a8c:	75 1e                	jne    c0015aac <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a8e:	83 ec 0c             	sub    esp,0xc
c0015a91:	68 34 2c 02 c0       	push   0xc0022c34
c0015a96:	e8 b3 14 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015a9b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015aa2:	e8 e5 fa ff ff       	call   c001558c <blockTask(TaskState)>
c0015aa7:	83 c4 10             	add    esp,0x10
c0015aaa:	66 90                	xchg   ax,ax
c0015aac:	83 ec 08             	sub    esp,0x8
c0015aaf:	56                   	push   esi
c0015ab0:	68 cc c6 02 c0       	push   0xc002c6cc
c0015ab5:	e8 d2 a4 00 00       	call   c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015aba:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015ac1:	e8 02 a4 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	39 f8                	cmp    eax,edi
c0015acb:	0f 84 37 ff ff ff    	je     c0015a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad4:	83 ec 0c             	sub    esp,0xc
c0015ad7:	68 cc c6 02 c0       	push   0xc002c6cc
c0015adc:	e8 e7 a3 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ae1:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015ae8:	89 c6                	mov    esi,eax
c0015aea:	e8 e1 a3 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015aef:	83 c4 10             	add    esp,0x10
c0015af2:	39 f3                	cmp    ebx,esi
c0015af4:	74 b6                	je     c0015aac <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015af6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015af9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015afc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015b02:	75 a8                	jne    c0015aac <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b04:	e9 77 ff ff ff       	jmp    c0015a80 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015b09:	8d 76 00             	lea    esi,[esi+0x0]
c0015b0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b10:	83 ec 0c             	sub    esp,0xc
c0015b13:	68 00 2c 02 c0       	push   0xc0022c00
c0015b18:	e9 4b ff ff ff       	jmp    c0015a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b20:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b24:	8b 36                	mov    esi,DWORD PTR [esi]
c0015b26:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015b29:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b2c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015b32:	01 d7                	add    edi,edx
c0015b34:	89 f8                	mov    eax,edi
c0015b36:	e9 51 fe ff ff       	jmp    c001598c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015b3b:	90                   	nop

c0015b3c <cleanerTaskFunction(void*)>:
c0015b3c:	53                   	push   ebx
c0015b3d:	83 ec 08             	sub    esp,0x8
c0015b40:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b45:	83 e8 01             	sub    eax,0x1
c0015b48:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b4d:	75 01                	jne    c0015b50 <cleanerTaskFunction(void*)+0x14>
c0015b4f:	fb                   	sti    
c0015b50:	fa                   	cli    
c0015b51:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b56:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015b5d:	8d 50 01             	lea    edx,[eax+0x1]
c0015b60:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015b66:	0f 84 c4 00 00 00    	je     c0015c30 <cleanerTaskFunction(void*)+0xf4>
c0015b6c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b71:	85 c0                	test   eax,eax
c0015b73:	75 03                	jne    c0015b78 <cleanerTaskFunction(void*)+0x3c>
c0015b75:	fb                   	sti    
c0015b76:	66 90                	xchg   ax,ax
c0015b78:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015b7f:	fa                   	cli    
c0015b80:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015b86:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0015b8c:	83 c2 01             	add    edx,0x1
c0015b8f:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015b95:	83 c1 01             	add    ecx,0x1
c0015b98:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c0015b9e:	fa                   	cli    
c0015b9f:	8b 1d b0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6b0
c0015ba5:	83 c3 01             	add    ebx,0x1
c0015ba8:	89 1d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ebx
c0015bae:	eb 28                	jmp    c0015bd8 <cleanerTaskFunction(void*)+0x9c>
c0015bb0:	83 ec 0c             	sub    esp,0xc
c0015bb3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015bb8:	e8 0b a3 00 00       	call   c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015bbd:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015bc4:	89 c3                	mov    ebx,eax
c0015bc6:	e8 05 a3 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015bcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bce:	e8 95 fc ff ff       	call   c0015868 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	66 90                	xchg   ax,ax
c0015bd8:	83 ec 0c             	sub    esp,0xc
c0015bdb:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015be0:	e8 c7 a2 00 00       	call   c001feac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	84 c0                	test   al,al
c0015bea:	74 c4                	je     c0015bb0 <cleanerTaskFunction(void*)+0x74>
c0015bec:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015bf1:	83 e8 01             	sub    eax,0x1
c0015bf4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015bf9:	75 01                	jne    c0015bfc <cleanerTaskFunction(void*)+0xc0>
c0015bfb:	fb                   	sti    
c0015bfc:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015c01:	83 e8 01             	sub    eax,0x1
c0015c04:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015c09:	0f 85 31 ff ff ff    	jne    c0015b40 <cleanerTaskFunction(void*)+0x4>
c0015c0f:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015c14:	85 c0                	test   eax,eax
c0015c16:	0f 84 24 ff ff ff    	je     c0015b40 <cleanerTaskFunction(void*)+0x4>
c0015c1c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015c26:	e8 a5 f8 ff ff       	call   c00154d0 <schedule()>
c0015c2b:	e9 10 ff ff ff       	jmp    c0015b40 <cleanerTaskFunction(void*)+0x4>
c0015c30:	83 ec 0c             	sub    esp,0xc
c0015c33:	6a 02                	push   0x2
c0015c35:	e8 2a f9 ff ff       	call   c0015564 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c3a:	83 c4 10             	add    esp,0x10
c0015c3d:	e9 36 ff ff ff       	jmp    c0015b78 <cleanerTaskFunction(void*)+0x3c>
c0015c42:	66 90                	xchg   ax,ax

c0015c44 <terminateTask(int)>:
c0015c44:	83 ec 14             	sub    esp,0x14
c0015c47:	fa                   	cli    
c0015c48:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015c4e:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0015c54:	83 c2 01             	add    edx,0x1
c0015c57:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015c5d:	83 c1 01             	add    ecx,0x1
c0015c60:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c0015c66:	fa                   	cli    
c0015c67:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c70:	83 c0 01             	add    eax,0x1
c0015c73:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c7d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015c80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c85:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015c88:	50                   	push   eax
c0015c89:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015c8e:	e8 f9 a2 00 00       	call   c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c98:	83 c4 10             	add    esp,0x10
c0015c9b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015ca2:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015ca7:	85 c0                	test   eax,eax
c0015ca9:	74 65                	je     c0015d10 <terminateTask(int)+0xcc>
c0015cab:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015cb2:	83 ec 0c             	sub    esp,0xc
c0015cb5:	50                   	push   eax
c0015cb6:	e8 01 fb ff ff       	call   c00157bc <unblockTask(ThreadControlBlock*)>
c0015cbb:	83 c4 10             	add    esp,0x10
c0015cbe:	66 90                	xchg   ax,ax
c0015cc0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015cc5:	83 e8 01             	sub    eax,0x1
c0015cc8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015ccd:	75 01                	jne    c0015cd0 <terminateTask(int)+0x8c>
c0015ccf:	fb                   	sti    
c0015cd0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015cd5:	83 e8 01             	sub    eax,0x1
c0015cd8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015cdd:	75 09                	jne    c0015ce8 <terminateTask(int)+0xa4>
c0015cdf:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015ce6:	75 3c                	jne    c0015d24 <terminateTask(int)+0xe0>
c0015ce8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ced:	83 e8 01             	sub    eax,0x1
c0015cf0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015cf5:	75 01                	jne    c0015cf8 <terminateTask(int)+0xb4>
c0015cf7:	fb                   	sti    
c0015cf8:	fa                   	cli    
c0015cf9:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015cfe:	83 c0 01             	add    eax,0x1
c0015d01:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015d06:	66 90                	xchg   ax,ax
c0015d08:	e8 c3 f7 ff ff       	call   c00154d0 <schedule()>
c0015d0d:	eb d9                	jmp    c0015ce8 <terminateTask(int)+0xa4>
c0015d0f:	90                   	nop
c0015d10:	83 ec 0c             	sub    esp,0xc
c0015d13:	68 4c 2b 02 c0       	push   0xc0022b4c
c0015d18:	e8 31 12 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015d1d:	83 c4 10             	add    esp,0x10
c0015d20:	eb 9e                	jmp    c0015cc0 <terminateTask(int)+0x7c>
c0015d22:	66 90                	xchg   ax,ax
c0015d24:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015d2e:	eb d8                	jmp    c0015d08 <terminateTask(int)+0xc4>

c0015d30 <Thr::terminateFromIRQ(int)>:
c0015d30:	83 ec 18             	sub    esp,0x18
c0015d33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d37:	50                   	push   eax
c0015d38:	e8 07 ff ff ff       	call   c0015c44 <terminateTask(int)>
c0015d3d:	8d 76 00             	lea    esi,[esi+0x0]

c0015d40 <__static_initialization_and_destruction_0(int, int)>:
c0015d40:	83 ec 0c             	sub    esp,0xc
c0015d43:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015d48:	0f 85 8e 00 00 00    	jne    c0015ddc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015d4e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015d56:	0f 85 80 00 00 00    	jne    c0015ddc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015d64:	e8 c3 a6 00 00       	call   c002042c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	83 ec 04             	sub    esp,0x4
c0015d6f:	68 ec 3a 02 c0       	push   0xc0023aec
c0015d74:	68 cc c6 02 c0       	push   0xc002c6cc
c0015d79:	68 dc 03 02 c0       	push   0xc00203dc
c0015d7e:	e8 90 68 ff ff       	call   c000c613 <__cxa_atexit>
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	83 ec 0c             	sub    esp,0xc
c0015d89:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015d8e:	e8 99 a6 00 00       	call   c002042c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	83 ec 04             	sub    esp,0x4
c0015d99:	68 ec 3a 02 c0       	push   0xc0023aec
c0015d9e:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015da3:	68 dc 03 02 c0       	push   0xc00203dc
c0015da8:	e8 66 68 ff ff       	call   c000c613 <__cxa_atexit>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	83 ec 0c             	sub    esp,0xc
c0015db3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015db8:	e8 6f a6 00 00       	call   c002042c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	83 ec 04             	sub    esp,0x4
c0015dc3:	68 ec 3a 02 c0       	push   0xc0023aec
c0015dc8:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015dcd:	68 dc 03 02 c0       	push   0xc00203dc
c0015dd2:	e8 3c 68 ff ff       	call   c000c613 <__cxa_atexit>
c0015dd7:	83 c4 10             	add    esp,0x10
c0015dda:	66 90                	xchg   ax,ax
c0015ddc:	90                   	nop
c0015ddd:	83 c4 0c             	add    esp,0xc
c0015de0:	c3                   	ret    
c0015de1:	8d 76 00             	lea    esi,[esi+0x0]

c0015de4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015de4:	83 ec 0c             	sub    esp,0xc
c0015de7:	83 ec 08             	sub    esp,0x8
c0015dea:	68 ff ff 00 00       	push   0xffff
c0015def:	6a 01                	push   0x1
c0015df1:	e8 4a ff ff ff       	call   c0015d40 <__static_initialization_and_destruction_0(int, int)>
c0015df6:	83 c4 10             	add    esp,0x10
c0015df9:	83 c4 0c             	add    esp,0xc
c0015dfc:	c3                   	ret    

c0015dfd <Vm::inbv(unsigned short)>:
c0015dfd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e01:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015e06:	75 06                	jne    c0015e0e <Vm::inbv(unsigned short)+0x11>
c0015e08:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015e0d:	c3                   	ret    
c0015e0e:	ec                   	in     al,dx
c0015e0f:	c3                   	ret    

c0015e10 <Vm::outbv(unsigned short, unsigned char)>:
c0015e10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e18:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015e1d:	75 25                	jne    c0015e44 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015e1f:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015e25:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015e2b:	8d 51 01             	lea    edx,[ecx+0x1]
c0015e2e:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015e34:	83 fa 20             	cmp    edx,0x20
c0015e37:	75 0c                	jne    c0015e45 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015e39:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015e43:	c3                   	ret    
c0015e44:	ee                   	out    dx,al
c0015e45:	c3                   	ret    

c0015e46 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015e46:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015e4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015e50:	c1 e0 04             	shl    eax,0x4
c0015e53:	01 d0                	add    eax,edx
c0015e55:	c3                   	ret    

c0015e56 <Vm::getSegment(unsigned int)>:
c0015e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e5a:	c1 e8 10             	shr    eax,0x10
c0015e5d:	c3                   	ret    

c0015e5e <Vm::getOffset(unsigned int)>:
c0015e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e62:	c3                   	ret    

c0015e63 <Vm::mainloop2()>:
c0015e63:	83 ec 18             	sub    esp,0x18
c0015e66:	fa                   	cli    
c0015e67:	6a 02                	push   0x2
c0015e69:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e6f:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015e76:	e8 e9 f6 ff ff       	call   c0015564 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015e7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e80:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015e84:	52                   	push   edx
c0015e85:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015e89:	52                   	push   edx
c0015e8a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015e8e:	52                   	push   edx
c0015e8f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015e93:	50                   	push   eax
c0015e94:	e8 76 a3 fe ff       	call   c000020f <goToVM86>
c0015e99:	83 c4 2c             	add    esp,0x2c
c0015e9c:	c3                   	ret    

c0015e9d <Vm::mainVm8086Loop(void*)>:
c0015e9d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ea2:	48                   	dec    eax
c0015ea3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015ea8:	75 01                	jne    c0015eab <Vm::mainVm8086Loop(void*)+0xe>
c0015eaa:	fb                   	sti    
c0015eab:	eb b6                	jmp    c0015e63 <Vm::mainloop2()>

c0015ead <Vm::mainloop3(unsigned long)>:
c0015ead:	83 ec 18             	sub    esp,0x18
c0015eb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015eb4:	fa                   	cli    
c0015eb5:	6a 02                	push   0x2
c0015eb7:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015ebd:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015ec4:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015ec9:	e8 96 f6 ff ff       	call   c0015564 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ece:	83 c4 1c             	add    esp,0x1c
c0015ed1:	eb 90                	jmp    c0015e63 <Vm::mainloop2()>

c0015ed3 <Vm::initialise8086()>:
c0015ed3:	83 ec 0c             	sub    esp,0xc
c0015ed6:	68 80 00 00 00       	push   0x80
c0015edb:	6a 00                	push   0x0
c0015edd:	68 9d 5e 01 c0       	push   0xc0015e9d
c0015ee2:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015ee8:	e8 97 f3 ff ff       	call   c0015284 <Process::createThread(void (*)(void*), void*, int)>
c0015eed:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015ef4:	68 10 01 00 00       	push   0x110
c0015ef9:	6a 00                	push   0x0
c0015efb:	6a 00                	push   0x0
c0015efd:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015f02:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015f07:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015f0d:	e8 c2 c9 ff ff       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015f12:	83 c4 2c             	add    esp,0x2c
c0015f15:	c3                   	ret    

c0015f16 <Vm::resetConventionalMemory8086()>:
c0015f16:	c3                   	ret    

c0015f17 <Vm::finish8086()>:
c0015f17:	53                   	push   ebx
c0015f18:	83 ec 08             	sub    esp,0x8
c0015f1b:	fa                   	cli    
c0015f1c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f22:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015f29:	75 15                	jne    c0015f40 <Vm::finish8086()+0x29>
c0015f2b:	e8 a0 f5 ff ff       	call   c00154d0 <schedule()>
c0015f30:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015f35:	48                   	dec    eax
c0015f36:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015f3b:	75 de                	jne    c0015f1b <Vm::finish8086()+0x4>
c0015f3d:	fb                   	sti    
c0015f3e:	eb db                	jmp    c0015f1b <Vm::finish8086()+0x4>
c0015f40:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015f47:	83 ec 0c             	sub    esp,0xc
c0015f4a:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015f50:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015f56:	e8 61 f8 ff ff       	call   c00157bc <unblockTask(ThreadControlBlock*)>
c0015f5b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015f60:	83 c4 10             	add    esp,0x10
c0015f63:	8d 50 ff             	lea    edx,[eax-0x1]
c0015f66:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015f6c:	85 d2                	test   edx,edx
c0015f6e:	75 01                	jne    c0015f71 <Vm::finish8086()+0x5a>
c0015f70:	fb                   	sti    
c0015f71:	83 c4 08             	add    esp,0x8
c0015f74:	89 d8                	mov    eax,ebx
c0015f76:	5b                   	pop    ebx
c0015f77:	c3                   	ret    

c0015f78 <Vm::getOutput8086(unsigned char*)>:
c0015f78:	57                   	push   edi
c0015f79:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015f7f:	56                   	push   esi
c0015f80:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0015f85:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015f89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f8b:	5e                   	pop    esi
c0015f8c:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0015f91:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015f9b:	5f                   	pop    edi
c0015f9c:	c3                   	ret    

c0015f9d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015f9d:	55                   	push   ebp
c0015f9e:	57                   	push   edi
c0015f9f:	56                   	push   esi
c0015fa0:	53                   	push   ebx
c0015fa1:	83 ec 2c             	sub    esp,0x2c
c0015fa4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015fa8:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0015faf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015fb3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0015fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fbb:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015fbf:	75 5d                	jne    c001601e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015fc1:	83 ec 0c             	sub    esp,0xc
c0015fc4:	68 14 01 00 00       	push   0x114
c0015fc9:	e8 18 89 ff ff       	call   c000e8e6 <malloc>
c0015fce:	83 c4 0c             	add    esp,0xc
c0015fd1:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015fd7:	68 5c 2c 02 c0       	push   0xc0022c5c
c0015fdc:	50                   	push   eax
c0015fdd:	89 c7                	mov    edi,eax
c0015fdf:	e8 28 21 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0015fe4:	58                   	pop    eax
c0015fe5:	5a                   	pop    edx
c0015fe6:	6a 12                	push   0x12
c0015fe8:	57                   	push   edi
c0015fe9:	e8 3c 21 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0015fee:	8b 07                	mov    eax,DWORD PTR [edi]
c0015ff0:	59                   	pop    ecx
c0015ff1:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0015ff5:	51                   	push   ecx
c0015ff6:	6a 00                	push   0x0
c0015ff8:	6a 00                	push   0x0
c0015ffa:	68 00 00 11 00       	push   0x110000
c0015fff:	57                   	push   edi
c0016000:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016003:	83 c4 14             	add    esp,0x14
c0016006:	57                   	push   edi
c0016007:	e8 7c 21 ff ff       	call   c0008188 <File::close()>
c001600c:	8b 07                	mov    eax,DWORD PTR [edi]
c001600e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016011:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016014:	83 c4 10             	add    esp,0x10
c0016017:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c001601e:	fa                   	cli    
c001601f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0016025:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c001602c:	75 15                	jne    c0016043 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa6>
c001602e:	e8 9d f4 ff ff       	call   c00154d0 <schedule()>
c0016033:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016038:	48                   	dec    eax
c0016039:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001603e:	75 de                	jne    c001601e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016040:	fb                   	sti    
c0016041:	eb db                	jmp    c001601e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016043:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c001604d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016051:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0016056:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c001605a:	0f b7 f6             	movzx  esi,si
c001605d:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016061:	0f b7 db             	movzx  ebx,bx
c0016064:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016068:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001606c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016070:	50                   	push   eax
c0016071:	6a 20                	push   0x20
c0016073:	6a 00                	push   0x0
c0016075:	68 20 c7 02 c0       	push   0xc002c720
c001607a:	e8 71 a4 fe ff       	call   c00004f0 <memset>
c001607f:	5a                   	pop    edx
c0016080:	59                   	pop    ecx
c0016081:	56                   	push   esi
c0016082:	53                   	push   ebx
c0016083:	e8 be fd ff ff       	call   c0015e46 <Vm::realToLinear(unsigned short, unsigned short)>
c0016088:	83 c4 10             	add    esp,0x10
c001608b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001608f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016093:	89 c7                	mov    edi,eax
c0016095:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016097:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c001609e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00160a3:	48                   	dec    eax
c00160a4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00160a9:	75 01                	jne    c00160ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x10f>
c00160ab:	fb                   	sti    
c00160ac:	83 ec 0c             	sub    esp,0xc
c00160af:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c00160b5:	e8 02 f7 ff ff       	call   c00157bc <unblockTask(ThreadControlBlock*)>
c00160ba:	83 c4 3c             	add    esp,0x3c
c00160bd:	b0 01                	mov    al,0x1
c00160bf:	5b                   	pop    ebx
c00160c0:	5e                   	pop    esi
c00160c1:	5f                   	pop    edi
c00160c2:	5d                   	pop    ebp
c00160c3:	c3                   	ret    

c00160c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00160c4:	55                   	push   ebp
c00160c5:	57                   	push   edi
c00160c6:	56                   	push   esi
c00160c7:	53                   	push   ebx
c00160c8:	83 ec 2c             	sub    esp,0x2c
c00160cb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160cf:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c00160d6:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00160da:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160e2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00160e6:	75 5d                	jne    c0016145 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00160e8:	83 ec 0c             	sub    esp,0xc
c00160eb:	68 14 01 00 00       	push   0x114
c00160f0:	e8 f1 87 ff ff       	call   c000e8e6 <malloc>
c00160f5:	83 c4 0c             	add    esp,0xc
c00160f8:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00160fe:	68 5c 2c 02 c0       	push   0xc0022c5c
c0016103:	50                   	push   eax
c0016104:	89 c3                	mov    ebx,eax
c0016106:	e8 01 20 ff ff       	call   c000810c <File::File(char const*, Process*)>
c001610b:	58                   	pop    eax
c001610c:	5a                   	pop    edx
c001610d:	6a 12                	push   0x12
c001610f:	53                   	push   ebx
c0016110:	e8 15 20 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0016115:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016117:	59                   	pop    ecx
c0016118:	8d 54 24 24          	lea    edx,[esp+0x24]
c001611c:	52                   	push   edx
c001611d:	6a 00                	push   0x0
c001611f:	6a 00                	push   0x0
c0016121:	68 00 00 11 00       	push   0x110000
c0016126:	53                   	push   ebx
c0016127:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001612a:	83 c4 14             	add    esp,0x14
c001612d:	53                   	push   ebx
c001612e:	e8 55 20 ff ff       	call   c0008188 <File::close()>
c0016133:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016135:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016138:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c0016145:	50                   	push   eax
c0016146:	50                   	push   eax
c0016147:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001614b:	68 77 2c 02 c0       	push   0xc0022c77
c0016150:	e8 f9 0d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016155:	83 c4 10             	add    esp,0x10
c0016158:	fa                   	cli    
c0016159:	8a 1d 09 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c709
c001615f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0016165:	84 db                	test   bl,bl
c0016167:	75 15                	jne    c001617e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016169:	e8 62 f3 ff ff       	call   c00154d0 <schedule()>
c001616e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016173:	48                   	dec    eax
c0016174:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016179:	75 dd                	jne    c0016158 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001617b:	fb                   	sti    
c001617c:	eb da                	jmp    c0016158 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001617e:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0016188:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001618c:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0016191:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016195:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016199:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001619d:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00161a1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00161a5:	50                   	push   eax
c00161a6:	6a 20                	push   0x20
c00161a8:	6a 00                	push   0x0
c00161aa:	68 20 c7 02 c0       	push   0xc002c720
c00161af:	e8 3c a3 fe ff       	call   c00004f0 <memset>
c00161b4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00161bb:	e8 26 87 ff ff       	call   c000e8e6 <malloc>
c00161c0:	83 c4 0c             	add    esp,0xc
c00161c3:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00161c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161cd:	89 c5                	mov    ebp,eax
c00161cf:	50                   	push   eax
c00161d0:	e8 37 1f ff ff       	call   c000810c <File::File(char const*, Process*)>
c00161d5:	83 c4 10             	add    esp,0x10
c00161d8:	85 ed                	test   ebp,ebp
c00161da:	75 0a                	jne    c00161e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x122>
c00161dc:	83 ec 0c             	sub    esp,0xc
c00161df:	68 99 2c 02 c0       	push   0xc0022c99
c00161e4:	eb 2b                	jmp    c0016211 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00161e6:	50                   	push   eax
c00161e7:	8d 44 24 17          	lea    eax,[esp+0x17]
c00161eb:	50                   	push   eax
c00161ec:	8d 44 24 20          	lea    eax,[esp+0x20]
c00161f0:	50                   	push   eax
c00161f1:	55                   	push   ebp
c00161f2:	e8 35 22 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c00161f7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00161fb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00161ff:	83 c4 10             	add    esp,0x10
c0016202:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016207:	74 27                	je     c0016230 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0016209:	83 ec 0c             	sub    esp,0xc
c001620c:	68 ad 2c 02 c0       	push   0xc0022cad
c0016211:	e8 24 8a ff ff       	call   c000ec3a <KePanic(char const*)>
c0016216:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001621b:	83 c4 10             	add    esp,0x10
c001621e:	48                   	dec    eax
c001621f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016224:	85 c0                	test   eax,eax
c0016226:	75 01                	jne    c0016229 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x165>
c0016228:	fb                   	sti    
c0016229:	31 db                	xor    ebx,ebx
c001622b:	e9 90 00 00 00       	jmp    c00162c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fc>
c0016230:	51                   	push   ecx
c0016231:	51                   	push   ecx
c0016232:	6a 01                	push   0x1
c0016234:	55                   	push   ebp
c0016235:	e8 f0 1e ff ff       	call   c000812a <File::open(FileOpenMode)>
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	85 c0                	test   eax,eax
c001623f:	74 26                	je     c0016267 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a3>
c0016241:	83 ec 0c             	sub    esp,0xc
c0016244:	68 c6 2c 02 c0       	push   0xc0022cc6
c0016249:	e8 ec 89 ff ff       	call   c000ec3a <KePanic(char const*)>
c001624e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016253:	83 c4 10             	add    esp,0x10
c0016256:	48                   	dec    eax
c0016257:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001625c:	85 c0                	test   eax,eax
c001625e:	75 c9                	jne    c0016229 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x165>
c0016260:	fb                   	sti    
c0016261:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016265:	eb 59                	jmp    c00162c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fc>
c0016267:	50                   	push   eax
c0016268:	0f b7 ff             	movzx  edi,di
c001626b:	50                   	push   eax
c001626c:	0f b7 f6             	movzx  esi,si
c001626f:	57                   	push   edi
c0016270:	56                   	push   esi
c0016271:	e8 d0 fb ff ff       	call   c0015e46 <Vm::realToLinear(unsigned short, unsigned short)>
c0016276:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016279:	5a                   	pop    edx
c001627a:	8d 74 24 20          	lea    esi,[esp+0x20]
c001627e:	56                   	push   esi
c001627f:	50                   	push   eax
c0016280:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016284:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016288:	55                   	push   ebp
c0016289:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001628c:	83 c4 14             	add    esp,0x14
c001628f:	55                   	push   ebp
c0016290:	e8 f3 1e ff ff       	call   c0008188 <File::close()>
c0016295:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001629a:	83 c4 10             	add    esp,0x10
c001629d:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c00162a4:	48                   	dec    eax
c00162a5:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00162aa:	85 c0                	test   eax,eax
c00162ac:	75 01                	jne    c00162af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>
c00162ae:	fb                   	sti    
c00162af:	83 ec 0c             	sub    esp,0xc
c00162b2:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c00162b8:	e8 ff f4 ff ff       	call   c00157bc <unblockTask(ThreadControlBlock*)>
c00162bd:	83 c4 10             	add    esp,0x10
c00162c0:	83 c4 2c             	add    esp,0x2c
c00162c3:	88 d8                	mov    al,bl
c00162c5:	5b                   	pop    ebx
c00162c6:	5e                   	pop    esi
c00162c7:	5f                   	pop    edi
c00162c8:	5d                   	pop    ebp
c00162c9:	c3                   	ret    

c00162ca <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00162ca:	57                   	push   edi
c00162cb:	56                   	push   esi
c00162cc:	53                   	push   ebx
c00162cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162d5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00162d9:	83 e8 06             	sub    eax,0x6
c00162dc:	0f b7 c0             	movzx  eax,ax
c00162df:	50                   	push   eax
c00162e0:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00162e5:	50                   	push   eax
c00162e6:	e8 5b fb ff ff       	call   c0015e46 <Vm::realToLinear(unsigned short, unsigned short)>
c00162eb:	5a                   	pop    edx
c00162ec:	59                   	pop    ecx
c00162ed:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00162f0:	8d 51 fa             	lea    edx,[ecx-0x6]
c00162f3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00162f6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00162fc:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00162ff:	8d 51 02             	lea    edx,[ecx+0x2]
c0016302:	66 89 10             	mov    WORD PTR [eax],dx
c0016305:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016309:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001630d:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016311:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016314:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016318:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001631e:	89 f1                	mov    ecx,esi
c0016320:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016324:	89 f2                	mov    edx,esi
c0016326:	0f b6 d6             	movzx  edx,dh
c0016329:	0f b6 f1             	movzx  esi,cl
c001632c:	74 0a                	je     c0016338 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001632e:	c1 e2 08             	shl    edx,0x8
c0016331:	09 f2                	or     edx,esi
c0016333:	80 ce 02             	or     dh,0x2
c0016336:	eb 08                	jmp    c0016340 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016338:	c1 e2 08             	shl    edx,0x8
c001633b:	09 f2                	or     edx,esi
c001633d:	80 e6 fd             	and    dh,0xfd
c0016340:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016344:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016349:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001634d:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016355:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016358:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016360:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016363:	5b                   	pop    ebx
c0016364:	5e                   	pop    esi
c0016365:	5f                   	pop    edi
c0016366:	c3                   	ret    

c0016367 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016367:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001636c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016371:	c1 e0 04             	shl    eax,0x4
c0016374:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016377:	c3                   	ret    

c0016378 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016378:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001637d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016382:	c1 e0 04             	shl    eax,0x4
c0016385:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016389:	c3                   	ret    

c001638a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001638a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001638f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016394:	c1 e0 04             	shl    eax,0x4
c0016397:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001639a:	c3                   	ret    

c001639b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001639b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163a5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00163a9:	c1 e0 04             	shl    eax,0x4
c00163ac:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00163af:	c3                   	ret    

c00163b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00163b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163be:	c1 e0 04             	shl    eax,0x4
c00163c1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00163c5:	c3                   	ret    

c00163c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00163c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163d4:	c1 e0 04             	shl    eax,0x4
c00163d7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00163da:	c3                   	ret    

c00163db <Vm::faultHandler(regs*)>:
c00163db:	55                   	push   ebp
c00163dc:	57                   	push   edi
c00163dd:	56                   	push   esi
c00163de:	53                   	push   ebx
c00163df:	83 ec 2c             	sub    esp,0x2c
c00163e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00163e6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163e9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00163ed:	0f b7 f8             	movzx  edi,ax
c00163f0:	0f b7 c0             	movzx  eax,ax
c00163f3:	52                   	push   edx
c00163f4:	50                   	push   eax
c00163f5:	e8 4c fa ff ff       	call   c0015e46 <Vm::realToLinear(unsigned short, unsigned short)>
c00163fa:	5a                   	pop    edx
c00163fb:	59                   	pop    ecx
c00163fc:	89 c1                	mov    ecx,eax
c00163fe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016401:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016405:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001640a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001640e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016411:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016415:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001641a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001641e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016422:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016426:	e8 1b fa ff ff       	call   c0015e46 <Vm::realToLinear(unsigned short, unsigned short)>
c001642b:	5e                   	pop    esi
c001642c:	be 06 00 00 00       	mov    esi,0x6
c0016431:	5d                   	pop    ebp
c0016432:	31 ed                	xor    ebp,ebp
c0016434:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016439:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001643c:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016442:	0f 84 74 02 00 00    	je     c00166bc <Vm::faultHandler(regs*)+0x2e1>
c0016448:	0f 87 94 00 00 00    	ja     c00164e2 <Vm::faultHandler(regs*)+0x107>
c001644e:	83 fa 66             	cmp    edx,0x66
c0016451:	0f 84 e2 01 00 00    	je     c0016639 <Vm::faultHandler(regs*)+0x25e>
c0016457:	77 47                	ja     c00164a0 <Vm::faultHandler(regs*)+0xc5>
c0016459:	83 fa 36             	cmp    edx,0x36
c001645c:	0f 84 ca 01 00 00    	je     c001662c <Vm::faultHandler(regs*)+0x251>
c0016462:	77 1a                	ja     c001647e <Vm::faultHandler(regs*)+0xa3>
c0016464:	83 fa 26             	cmp    edx,0x26
c0016467:	0f 84 98 01 00 00    	je     c0016605 <Vm::faultHandler(regs*)+0x22a>
c001646d:	83 fa 2e             	cmp    edx,0x2e
c0016470:	0f 85 27 06 00 00    	jne    c0016a9d <Vm::faultHandler(regs*)+0x6c2>
c0016476:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016479:	31 f6                	xor    esi,esi
c001647b:	41                   	inc    ecx
c001647c:	eb bb                	jmp    c0016439 <Vm::faultHandler(regs*)+0x5e>
c001647e:	83 fa 64             	cmp    edx,0x64
c0016481:	0f 84 8b 01 00 00    	je     c0016612 <Vm::faultHandler(regs*)+0x237>
c0016487:	0f 87 92 01 00 00    	ja     c001661f <Vm::faultHandler(regs*)+0x244>
c001648d:	83 fa 3e             	cmp    edx,0x3e
c0016490:	0f 85 07 06 00 00    	jne    c0016a9d <Vm::faultHandler(regs*)+0x6c2>
c0016496:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016499:	be 01 00 00 00       	mov    esi,0x1
c001649e:	eb db                	jmp    c001647b <Vm::faultHandler(regs*)+0xa0>
c00164a0:	83 fa 6d             	cmp    edx,0x6d
c00164a3:	0f 84 34 03 00 00    	je     c00167dd <Vm::faultHandler(regs*)+0x402>
c00164a9:	77 17                	ja     c00164c2 <Vm::faultHandler(regs*)+0xe7>
c00164ab:	83 fa 67             	cmp    edx,0x67
c00164ae:	0f 84 92 01 00 00    	je     c0016646 <Vm::faultHandler(regs*)+0x26b>
c00164b4:	83 fa 6c             	cmp    edx,0x6c
c00164b7:	0f 84 b1 02 00 00    	je     c001676e <Vm::faultHandler(regs*)+0x393>
c00164bd:	e9 db 05 00 00       	jmp    c0016a9d <Vm::faultHandler(regs*)+0x6c2>
c00164c2:	83 fa 6f             	cmp    edx,0x6f
c00164c5:	0f 84 40 04 00 00    	je     c001690b <Vm::faultHandler(regs*)+0x530>
c00164cb:	0f 82 a2 03 00 00    	jb     c0016873 <Vm::faultHandler(regs*)+0x498>
c00164d1:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00164d7:	0f 84 76 01 00 00    	je     c0016653 <Vm::faultHandler(regs*)+0x278>
c00164dd:	e9 bb 05 00 00       	jmp    c0016a9d <Vm::faultHandler(regs*)+0x6c2>
c00164e2:	81 fa ec 00 00 00    	cmp    edx,0xec
c00164e8:	0f 84 57 05 00 00    	je     c0016a45 <Vm::faultHandler(regs*)+0x66a>
c00164ee:	0f 87 a9 00 00 00    	ja     c001659d <Vm::faultHandler(regs*)+0x1c2>
c00164f4:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00164fa:	0f 84 d6 04 00 00    	je     c00169d6 <Vm::faultHandler(regs*)+0x5fb>
c0016500:	77 78                	ja     c001657a <Vm::faultHandler(regs*)+0x19f>
c0016502:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016508:	0f 84 0e 02 00 00    	je     c001671c <Vm::faultHandler(regs*)+0x341>
c001650e:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016514:	0f 85 83 05 00 00    	jne    c0016a9d <Vm::faultHandler(regs*)+0x6c2>
c001651a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001651e:	89 d1                	mov    ecx,edx
c0016520:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016523:	c1 e1 08             	shl    ecx,0x8
c0016526:	09 ca                	or     edx,ecx
c0016528:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001652b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001652f:	89 d1                	mov    ecx,edx
c0016531:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016535:	c1 e1 08             	shl    ecx,0x8
c0016538:	09 ca                	or     edx,ecx
c001653a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001653d:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016541:	89 d1                	mov    ecx,edx
c0016543:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016547:	c1 e1 08             	shl    ecx,0x8
c001654a:	09 ca                	or     edx,ecx
c001654c:	81 ca 00 02 02 00    	or     edx,0x20200
c0016552:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016555:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016559:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001655f:	d1 e8                	shr    eax,1
c0016561:	83 e0 01             	and    eax,0x1
c0016564:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016567:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001656a:	83 c0 06             	add    eax,0x6
c001656d:	25 ff ff 00 00       	and    eax,0xffff
c0016572:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016575:	e9 1f 05 00 00       	jmp    c0016a99 <Vm::faultHandler(regs*)+0x6be>
c001657a:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016580:	0f 84 95 04 00 00    	je     c0016a1b <Vm::faultHandler(regs*)+0x640>
c0016586:	0f 82 66 04 00 00    	jb     c00169f2 <Vm::faultHandler(regs*)+0x617>
c001658c:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016592:	0f 84 9a 04 00 00    	je     c0016a32 <Vm::faultHandler(regs*)+0x657>
c0016598:	e9 00 05 00 00       	jmp    c0016a9d <Vm::faultHandler(regs*)+0x6c2>
c001659d:	81 fa ef 00 00 00    	cmp    edx,0xef
c00165a3:	0f 84 dd 04 00 00    	je     c0016a86 <Vm::faultHandler(regs*)+0x6ab>
c00165a9:	77 2e                	ja     c00165d9 <Vm::faultHandler(regs*)+0x1fe>
c00165ab:	81 fa ed 00 00 00    	cmp    edx,0xed
c00165b1:	0f 84 aa 04 00 00    	je     c0016a61 <Vm::faultHandler(regs*)+0x686>
c00165b7:	81 fa ee 00 00 00    	cmp    edx,0xee
c00165bd:	0f 85 da 04 00 00    	jne    c0016a9d <Vm::faultHandler(regs*)+0x6c2>
c00165c3:	50                   	push   eax
c00165c4:	50                   	push   eax
c00165c5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00165c9:	50                   	push   eax
c00165ca:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165ce:	50                   	push   eax
c00165cf:	e8 3c f8 ff ff       	call   c0015e10 <Vm::outbv(unsigned short, unsigned char)>
c00165d4:	e9 a5 04 00 00       	jmp    c0016a7e <Vm::faultHandler(regs*)+0x6a3>
c00165d9:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00165df:	0f 84 6d 01 00 00    	je     c0016752 <Vm::faultHandler(regs*)+0x377>
c00165e5:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00165eb:	0f 84 6f 01 00 00    	je     c0016760 <Vm::faultHandler(regs*)+0x385>
c00165f1:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00165f7:	0f 85 a0 04 00 00    	jne    c0016a9d <Vm::faultHandler(regs*)+0x6c2>
c00165fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016600:	e9 76 fe ff ff       	jmp    c001647b <Vm::faultHandler(regs*)+0xa0>
c0016605:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016608:	be 02 00 00 00       	mov    esi,0x2
c001660d:	e9 69 fe ff ff       	jmp    c001647b <Vm::faultHandler(regs*)+0xa0>
c0016612:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016615:	be 03 00 00 00       	mov    esi,0x3
c001661a:	e9 5c fe ff ff       	jmp    c001647b <Vm::faultHandler(regs*)+0xa0>
c001661f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016622:	be 04 00 00 00       	mov    esi,0x4
c0016627:	e9 4f fe ff ff       	jmp    c001647b <Vm::faultHandler(regs*)+0xa0>
c001662c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001662f:	be 05 00 00 00       	mov    esi,0x5
c0016634:	e9 42 fe ff ff       	jmp    c001647b <Vm::faultHandler(regs*)+0xa0>
c0016639:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001663c:	bd 01 00 00 00       	mov    ebp,0x1
c0016641:	e9 35 fe ff ff       	jmp    c001647b <Vm::faultHandler(regs*)+0xa0>
c0016646:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016649:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001664e:	e9 28 fe ff ff       	jmp    c001647b <Vm::faultHandler(regs*)+0xa0>
c0016653:	83 e5 01             	and    ebp,0x1
c0016656:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001665d:	74 30                	je     c001668f <Vm::faultHandler(regs*)+0x2b4>
c001665f:	83 e9 04             	sub    ecx,0x4
c0016662:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016668:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001666e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016671:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016674:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001667a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001667e:	0f 84 12 04 00 00    	je     c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c0016684:	80 ce 02             	or     dh,0x2
c0016687:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001668a:	e9 07 04 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c001668f:	83 e9 02             	sub    ecx,0x2
c0016692:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016698:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001669b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001669f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00166a5:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00166a9:	74 05                	je     c00166b0 <Vm::faultHandler(regs*)+0x2d5>
c00166ab:	80 ce 02             	or     dh,0x2
c00166ae:	eb 03                	jmp    c00166b3 <Vm::faultHandler(regs*)+0x2d8>
c00166b0:	80 e6 fd             	and    dh,0xfd
c00166b3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00166b7:	e9 da 03 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c00166bc:	83 e5 01             	and    ebp,0x1
c00166bf:	74 2a                	je     c00166eb <Vm::faultHandler(regs*)+0x310>
c00166c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00166c3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00166c9:	81 ca 00 02 02 00    	or     edx,0x20200
c00166cf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00166d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00166d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166da:	c1 e8 09             	shr    eax,0x9
c00166dd:	83 e0 01             	and    eax,0x1
c00166e0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00166e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00166e6:	83 c0 04             	add    eax,0x4
c00166e9:	eb 24                	jmp    c001670f <Vm::faultHandler(regs*)+0x334>
c00166eb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00166ee:	81 ca 00 02 02 00    	or     edx,0x20200
c00166f4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00166f7:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00166fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016700:	c1 e8 09             	shr    eax,0x9
c0016703:	83 e0 01             	and    eax,0x1
c0016706:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016709:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001670c:	83 c0 02             	add    eax,0x2
c001670f:	25 ff ff 00 00       	and    eax,0xffff
c0016714:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016717:	e9 7a 03 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c001671c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016720:	3d ee 00 00 00       	cmp    eax,0xee
c0016725:	75 10                	jne    c0016737 <Vm::faultHandler(regs*)+0x35c>
c0016727:	83 ec 0c             	sub    esp,0xc
c001672a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001672d:	e8 7b f7 ff ff       	call   c0015ead <Vm::mainloop3(unsigned long)>
c0016732:	e9 4a 03 00 00       	jmp    c0016a81 <Vm::faultHandler(regs*)+0x6a6>
c0016737:	83 ec 0c             	sub    esp,0xc
c001673a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001673e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016742:	51                   	push   ecx
c0016743:	50                   	push   eax
c0016744:	53                   	push   ebx
c0016745:	e8 80 fb ff ff       	call   c00162ca <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001674a:	83 c4 20             	add    esp,0x20
c001674d:	e9 47 03 00 00       	jmp    c0016a99 <Vm::faultHandler(regs*)+0x6be>
c0016752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016757:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001675b:	e9 36 03 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c0016760:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016765:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016769:	e9 28 03 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c001676e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016773:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016776:	74 2b                	je     c00167a3 <Vm::faultHandler(regs*)+0x3c8>
c0016778:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001677f:	76 22                	jbe    c00167a3 <Vm::faultHandler(regs*)+0x3c8>
c0016781:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016785:	50                   	push   eax
c0016786:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001678a:	50                   	push   eax
c001678b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001678f:	50                   	push   eax
c0016790:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016794:	50                   	push   eax
c0016795:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016799:	50                   	push   eax
c001679a:	6a 6c                	push   0x6c
c001679c:	6a 6c                	push   0x6c
c001679e:	e9 c0 01 00 00       	jmp    c0016963 <Vm::faultHandler(regs*)+0x588>
c00167a3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167a7:	83 ec 0c             	sub    esp,0xc
c00167aa:	0f b7 f6             	movzx  esi,si
c00167ad:	50                   	push   eax
c00167ae:	e8 4a f6 ff ff       	call   c0015dfd <Vm::inbv(unsigned short)>
c00167b3:	83 c4 0c             	add    esp,0xc
c00167b6:	0f b6 c0             	movzx  eax,al
c00167b9:	50                   	push   eax
c00167ba:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00167be:	50                   	push   eax
c00167bf:	56                   	push   esi
c00167c0:	e8 d6 fb ff ff       	call   c001639b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00167c5:	83 c4 10             	add    esp,0x10
c00167c8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167cb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00167cf:	74 03                	je     c00167d4 <Vm::faultHandler(regs*)+0x3f9>
c00167d1:	48                   	dec    eax
c00167d2:	eb 01                	jmp    c00167d5 <Vm::faultHandler(regs*)+0x3fa>
c00167d4:	40                   	inc    eax
c00167d5:	0f b7 c0             	movzx  eax,ax
c00167d8:	e9 8e 00 00 00       	jmp    c001686b <Vm::faultHandler(regs*)+0x490>
c00167dd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167e2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00167e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167e8:	74 29                	je     c0016813 <Vm::faultHandler(regs*)+0x438>
c00167ea:	3d ff ff 00 00       	cmp    eax,0xffff
c00167ef:	76 22                	jbe    c0016813 <Vm::faultHandler(regs*)+0x438>
c00167f1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167f5:	50                   	push   eax
c00167f6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167fa:	50                   	push   eax
c00167fb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167ff:	50                   	push   eax
c0016800:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016804:	50                   	push   eax
c0016805:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016809:	50                   	push   eax
c001680a:	6a 6d                	push   0x6d
c001680c:	6a 6d                	push   0x6d
c001680e:	e9 50 01 00 00       	jmp    c0016963 <Vm::faultHandler(regs*)+0x588>
c0016813:	83 e5 01             	and    ebp,0x1
c0016816:	0f b7 c8             	movzx  ecx,ax
c0016819:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001681c:	0f b7 f6             	movzx  esi,si
c001681f:	74 1e                	je     c001683f <Vm::faultHandler(regs*)+0x464>
c0016821:	ed                   	in     eax,dx
c0016822:	55                   	push   ebp
c0016823:	50                   	push   eax
c0016824:	51                   	push   ecx
c0016825:	56                   	push   esi
c0016826:	e8 9b fb ff ff       	call   c00163c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001682b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001682e:	83 c4 10             	add    esp,0x10
c0016831:	8d 50 04             	lea    edx,[eax+0x4]
c0016834:	83 e8 04             	sub    eax,0x4
c0016837:	81 e2 ff ff 00 00    	and    edx,0xffff
c001683d:	eb 20                	jmp    c001685f <Vm::faultHandler(regs*)+0x484>
c001683f:	66 ed                	in     ax,dx
c0016841:	57                   	push   edi
c0016842:	0f b7 c0             	movzx  eax,ax
c0016845:	50                   	push   eax
c0016846:	51                   	push   ecx
c0016847:	56                   	push   esi
c0016848:	e8 63 fb ff ff       	call   c00163b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001684d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016850:	83 c4 10             	add    esp,0x10
c0016853:	8d 50 02             	lea    edx,[eax+0x2]
c0016856:	83 e8 02             	sub    eax,0x2
c0016859:	81 e2 ff ff 00 00    	and    edx,0xffff
c001685f:	25 ff ff 00 00       	and    eax,0xffff
c0016864:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016868:	0f 44 c2             	cmove  eax,edx
c001686b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001686e:	e9 23 02 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c0016873:	8d 46 ff             	lea    eax,[esi-0x1]
c0016876:	0f b6 f0             	movzx  esi,al
c0016879:	83 fe 05             	cmp    esi,0x5
c001687c:	77 23                	ja     c00168a1 <Vm::faultHandler(regs*)+0x4c6>
c001687e:	ff 24 b5 3c 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd2c4]
c0016885:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001688a:	eb 15                	jmp    c00168a1 <Vm::faultHandler(regs*)+0x4c6>
c001688c:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016890:	eb 0f                	jmp    c00168a1 <Vm::faultHandler(regs*)+0x4c6>
c0016892:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016896:	eb 09                	jmp    c00168a1 <Vm::faultHandler(regs*)+0x4c6>
c0016898:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001689c:	eb 03                	jmp    c00168a1 <Vm::faultHandler(regs*)+0x4c6>
c001689e:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00168a1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00168a9:	74 29                	je     c00168d4 <Vm::faultHandler(regs*)+0x4f9>
c00168ab:	3d ff ff 00 00       	cmp    eax,0xffff
c00168b0:	76 22                	jbe    c00168d4 <Vm::faultHandler(regs*)+0x4f9>
c00168b2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00168b6:	50                   	push   eax
c00168b7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00168bb:	50                   	push   eax
c00168bc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168c0:	50                   	push   eax
c00168c1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00168c5:	50                   	push   eax
c00168c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168ca:	50                   	push   eax
c00168cb:	6a 6e                	push   0x6e
c00168cd:	6a 6e                	push   0x6e
c00168cf:	e9 8f 00 00 00       	jmp    c0016963 <Vm::faultHandler(regs*)+0x588>
c00168d4:	52                   	push   edx
c00168d5:	0f b7 c0             	movzx  eax,ax
c00168d8:	52                   	push   edx
c00168d9:	50                   	push   eax
c00168da:	57                   	push   edi
c00168db:	e8 87 fa ff ff       	call   c0016367 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00168e0:	59                   	pop    ecx
c00168e1:	5e                   	pop    esi
c00168e2:	0f b6 c0             	movzx  eax,al
c00168e5:	50                   	push   eax
c00168e6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00168ea:	50                   	push   eax
c00168eb:	e8 20 f5 ff ff       	call   c0015e10 <Vm::outbv(unsigned short, unsigned char)>
c00168f0:	83 c4 10             	add    esp,0x10
c00168f3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00168f6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168fa:	74 03                	je     c00168ff <Vm::faultHandler(regs*)+0x524>
c00168fc:	48                   	dec    eax
c00168fd:	eb 01                	jmp    c0016900 <Vm::faultHandler(regs*)+0x525>
c00168ff:	40                   	inc    eax
c0016900:	0f b7 c0             	movzx  eax,ax
c0016903:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016906:	e9 8b 01 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c001690b:	8d 46 ff             	lea    eax,[esi-0x1]
c001690e:	0f b6 f0             	movzx  esi,al
c0016911:	83 fe 05             	cmp    esi,0x5
c0016914:	77 1e                	ja     c0016934 <Vm::faultHandler(regs*)+0x559>
c0016916:	ff 24 b5 54 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd2ac]
c001691d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016921:	eb 11                	jmp    c0016934 <Vm::faultHandler(regs*)+0x559>
c0016923:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016926:	eb 0c                	jmp    c0016934 <Vm::faultHandler(regs*)+0x559>
c0016928:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001692b:	eb 07                	jmp    c0016934 <Vm::faultHandler(regs*)+0x559>
c001692d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016930:	eb 02                	jmp    c0016934 <Vm::faultHandler(regs*)+0x559>
c0016932:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016934:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016939:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001693c:	74 37                	je     c0016975 <Vm::faultHandler(regs*)+0x59a>
c001693e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016944:	76 2f                	jbe    c0016975 <Vm::faultHandler(regs*)+0x59a>
c0016946:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001694a:	50                   	push   eax
c001694b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001694f:	50                   	push   eax
c0016950:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016954:	50                   	push   eax
c0016955:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016959:	50                   	push   eax
c001695a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001695e:	50                   	push   eax
c001695f:	6a 6f                	push   0x6f
c0016961:	6a 6f                	push   0x6f
c0016963:	68 df 2c 02 c0       	push   0xc0022cdf
c0016968:	e8 e1 05 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001696d:	83 c4 20             	add    esp,0x20
c0016970:	e9 86 01 00 00       	jmp    c0016afb <Vm::faultHandler(regs*)+0x720>
c0016975:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016978:	0f b7 d7             	movzx  edx,di
c001697b:	0f b7 c6             	movzx  eax,si
c001697e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016981:	81 e1 00 04 00 00    	and    ecx,0x400
c0016987:	83 e5 01             	and    ebp,0x1
c001698a:	74 1c                	je     c00169a8 <Vm::faultHandler(regs*)+0x5cd>
c001698c:	55                   	push   ebp
c001698d:	55                   	push   ebp
c001698e:	50                   	push   eax
c001698f:	52                   	push   edx
c0016990:	e8 f5 f9 ff ff       	call   c001638a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016995:	83 c4 10             	add    esp,0x10
c0016998:	89 fa                	mov    edx,edi
c001699a:	ef                   	out    dx,eax
c001699b:	8d 46 04             	lea    eax,[esi+0x4]
c001699e:	83 ee 04             	sub    esi,0x4
c00169a1:	25 ff ff 00 00       	and    eax,0xffff
c00169a6:	eb 1b                	jmp    c00169c3 <Vm::faultHandler(regs*)+0x5e8>
c00169a8:	55                   	push   ebp
c00169a9:	55                   	push   ebp
c00169aa:	50                   	push   eax
c00169ab:	52                   	push   edx
c00169ac:	e8 c7 f9 ff ff       	call   c0016378 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	89 fa                	mov    edx,edi
c00169b6:	66 ef                	out    dx,ax
c00169b8:	8d 46 02             	lea    eax,[esi+0x2]
c00169bb:	83 ee 02             	sub    esi,0x2
c00169be:	25 ff ff 00 00       	and    eax,0xffff
c00169c3:	81 e6 ff ff 00 00    	and    esi,0xffff
c00169c9:	85 c9                	test   ecx,ecx
c00169cb:	0f 44 f0             	cmove  esi,eax
c00169ce:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00169d1:	e9 c0 00 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c00169d6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00169dd:	83 ec 0c             	sub    esp,0xc
c00169e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169e4:	50                   	push   eax
c00169e5:	e8 13 f4 ff ff       	call   c0015dfd <Vm::inbv(unsigned short)>
c00169ea:	0f b6 c0             	movzx  eax,al
c00169ed:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00169f0:	eb 3a                	jmp    c0016a2c <Vm::faultHandler(regs*)+0x651>
c00169f2:	83 e5 01             	and    ebp,0x1
c00169f5:	74 07                	je     c00169fe <Vm::faultHandler(regs*)+0x623>
c00169f7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00169fb:	ed                   	in     eax,dx
c00169fc:	eb 14                	jmp    c0016a12 <Vm::faultHandler(regs*)+0x637>
c00169fe:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016a01:	66 31 f6             	xor    si,si
c0016a04:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016a07:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a0b:	66 ed                	in     ax,dx
c0016a0d:	0f b7 c0             	movzx  eax,ax
c0016a10:	09 f0                	or     eax,esi
c0016a12:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a15:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a19:	eb 7e                	jmp    c0016a99 <Vm::faultHandler(regs*)+0x6be>
c0016a1b:	52                   	push   edx
c0016a1c:	52                   	push   edx
c0016a1d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016a21:	50                   	push   eax
c0016a22:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a26:	50                   	push   eax
c0016a27:	e8 e4 f3 ff ff       	call   c0015e10 <Vm::outbv(unsigned short, unsigned char)>
c0016a2c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a30:	eb 4f                	jmp    c0016a81 <Vm::faultHandler(regs*)+0x6a6>
c0016a32:	83 e5 01             	and    ebp,0x1
c0016a35:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a38:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a3c:	74 03                	je     c0016a41 <Vm::faultHandler(regs*)+0x666>
c0016a3e:	ef                   	out    dx,eax
c0016a3f:	eb d4                	jmp    c0016a15 <Vm::faultHandler(regs*)+0x63a>
c0016a41:	66 ef                	out    dx,ax
c0016a43:	eb d0                	jmp    c0016a15 <Vm::faultHandler(regs*)+0x63a>
c0016a45:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a49:	83 ec 0c             	sub    esp,0xc
c0016a4c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a53:	50                   	push   eax
c0016a54:	e8 a4 f3 ff ff       	call   c0015dfd <Vm::inbv(unsigned short)>
c0016a59:	0f b6 c0             	movzx  eax,al
c0016a5c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a5f:	eb 1d                	jmp    c0016a7e <Vm::faultHandler(regs*)+0x6a3>
c0016a61:	83 e5 01             	and    ebp,0x1
c0016a64:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a67:	74 03                	je     c0016a6c <Vm::faultHandler(regs*)+0x691>
c0016a69:	ed                   	in     eax,dx
c0016a6a:	eb 0d                	jmp    c0016a79 <Vm::faultHandler(regs*)+0x69e>
c0016a6c:	66 ed                	in     ax,dx
c0016a6e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016a71:	0f b7 c0             	movzx  eax,ax
c0016a74:	66 31 d2             	xor    dx,dx
c0016a77:	09 d0                	or     eax,edx
c0016a79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a7c:	eb 18                	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c0016a7e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a81:	83 c4 10             	add    esp,0x10
c0016a84:	eb 13                	jmp    c0016a99 <Vm::faultHandler(regs*)+0x6be>
c0016a86:	83 e5 01             	and    ebp,0x1
c0016a89:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a8c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a8f:	74 03                	je     c0016a94 <Vm::faultHandler(regs*)+0x6b9>
c0016a91:	ef                   	out    dx,eax
c0016a92:	eb 02                	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6bb>
c0016a94:	66 ef                	out    dx,ax
c0016a96:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a99:	b0 01                	mov    al,0x1
c0016a9b:	eb 60                	jmp    c0016afd <Vm::faultHandler(regs*)+0x722>
c0016a9d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016aa1:	50                   	push   eax
c0016aa2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016aa6:	50                   	push   eax
c0016aa7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016aab:	50                   	push   eax
c0016aac:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ab0:	50                   	push   eax
c0016ab1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ab5:	50                   	push   eax
c0016ab6:	52                   	push   edx
c0016ab7:	52                   	push   edx
c0016ab8:	68 0c 2d 02 c0       	push   0xc0022d0c
c0016abd:	e8 8c 04 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016ac2:	83 c4 20             	add    esp,0x20
c0016ac5:	83 ec 0c             	sub    esp,0xc
c0016ac8:	6a 60                	push   0x60
c0016aca:	e8 2e f3 ff ff       	call   c0015dfd <Vm::inbv(unsigned short)>
c0016acf:	83 c4 10             	add    esp,0x10
c0016ad2:	0f b6 d0             	movzx  edx,al
c0016ad5:	83 fa 1c             	cmp    edx,0x1c
c0016ad8:	74 05                	je     c0016adf <Vm::faultHandler(regs*)+0x704>
c0016ada:	83 fa 5a             	cmp    edx,0x5a
c0016add:	75 e6                	jne    c0016ac5 <Vm::faultHandler(regs*)+0x6ea>
c0016adf:	0f b6 c0             	movzx  eax,al
c0016ae2:	83 f8 1c             	cmp    eax,0x1c
c0016ae5:	74 05                	je     c0016aec <Vm::faultHandler(regs*)+0x711>
c0016ae7:	83 f8 5a             	cmp    eax,0x5a
c0016aea:	75 0f                	jne    c0016afb <Vm::faultHandler(regs*)+0x720>
c0016aec:	83 ec 0c             	sub    esp,0xc
c0016aef:	6a 60                	push   0x60
c0016af1:	e8 07 f3 ff ff       	call   c0015dfd <Vm::inbv(unsigned short)>
c0016af6:	83 c4 10             	add    esp,0x10
c0016af9:	eb e4                	jmp    c0016adf <Vm::faultHandler(regs*)+0x704>
c0016afb:	31 c0                	xor    eax,eax
c0016afd:	83 c4 2c             	add    esp,0x2c
c0016b00:	5b                   	pop    ebx
c0016b01:	5e                   	pop    esi
c0016b02:	5f                   	pop    edi
c0016b03:	5d                   	pop    ebp
c0016b04:	c3                   	ret    
c0016b05:	90                   	nop

c0016b06 <noCopro(unsigned long)>:
c0016b06:	c3                   	ret    
c0016b07:	90                   	nop

c0016b08 <CPU::close(int, int, void*)>:
c0016b08:	31 c0                	xor    eax,eax
c0016b0a:	c3                   	ret    

c0016b0b <x86ReadCMOS(unsigned char)>:
c0016b0b:	83 ec 14             	sub    esp,0x14
c0016b0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b12:	88 04 24             	mov    BYTE PTR [esp],al
c0016b15:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016b1a:	0f b6 c0             	movzx  eax,al
c0016b1d:	85 c0                	test   eax,eax
c0016b1f:	74 04                	je     c0016b25 <x86ReadCMOS(unsigned char)+0x1a>
c0016b21:	b2 00                	mov    dl,0x0
c0016b23:	eb 02                	jmp    c0016b27 <x86ReadCMOS(unsigned char)+0x1c>
c0016b25:	b2 80                	mov    dl,0x80
c0016b27:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016b2a:	09 d0                	or     eax,edx
c0016b2c:	0f b6 c0             	movzx  eax,al
c0016b2f:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016b36:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016b3a:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016b3e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016b43:	ee                   	out    dx,al
c0016b44:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016b4b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016b50:	89 c2                	mov    edx,eax
c0016b52:	ec                   	in     al,dx
c0016b53:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016b57:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016b5b:	83 c4 14             	add    esp,0x14
c0016b5e:	c3                   	ret    

c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>:
c0016b5f:	83 ec 18             	sub    esp,0x18
c0016b62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016b6e:	88 d0                	mov    al,dl
c0016b70:	88 04 24             	mov    BYTE PTR [esp],al
c0016b73:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016b78:	0f b6 c0             	movzx  eax,al
c0016b7b:	85 c0                	test   eax,eax
c0016b7d:	74 04                	je     c0016b83 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016b7f:	b2 00                	mov    dl,0x0
c0016b81:	eb 02                	jmp    c0016b85 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0016b83:	b2 80                	mov    dl,0x80
c0016b85:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016b89:	09 d0                	or     eax,edx
c0016b8b:	0f b6 c0             	movzx  eax,al
c0016b8e:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016b95:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016b99:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016b9d:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016ba2:	ee                   	out    dx,al
c0016ba3:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016ba7:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016bae:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016bb2:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016bb6:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016bbb:	ee                   	out    dx,al
c0016bbc:	90                   	nop
c0016bbd:	83 c4 18             	add    esp,0x18
c0016bc0:	c3                   	ret    

c0016bc1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016bc1:	60                   	pusha  
c0016bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016bce:	9c                   	pushf  
c0016bcf:	fa                   	cli    
c0016bd0:	0f 09                	wbinvd 
c0016bd2:	0f 30                	wrmsr  
c0016bd4:	9d                   	popf   
c0016bd5:	89 c2                	mov    edx,eax
c0016bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bdb:	89 10                	mov    DWORD PTR [eax],edx
c0016bdd:	61                   	popa   
c0016bde:	90                   	nop
c0016bdf:	c3                   	ret    

c0016be0 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016be0:	60                   	pusha  
c0016be1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016be5:	89 c1                	mov    ecx,eax
c0016be7:	9c                   	pushf  
c0016be8:	fa                   	cli    
c0016be9:	0f 09                	wbinvd 
c0016beb:	31 c0                	xor    eax,eax
c0016bed:	31 d2                	xor    edx,edx
c0016bef:	0f 32                	rdmsr  
c0016bf1:	9d                   	popf   
c0016bf2:	89 c2                	mov    edx,eax
c0016bf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bf8:	89 10                	mov    DWORD PTR [eax],edx
c0016bfa:	61                   	popa   
c0016bfb:	90                   	nop
c0016bfc:	c3                   	ret    

c0016bfd <AMD_K6_writeback(int, int, int)>:
c0016bfd:	83 ec 20             	sub    esp,0x20
c0016c00:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016c05:	c1 e8 14             	shr    eax,0x14
c0016c08:	c1 e8 02             	shr    eax,0x2
c0016c0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c0f:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016c14:	0f 85 9e 00 00 00    	jne    c0016cb8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016c1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c22:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016c27:	75 19                	jne    c0016c42 <AMD_K6_writeback(int, int, int)+0x45>
c0016c29:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016c2e:	7f 0a                	jg     c0016c3a <AMD_K6_writeback(int, int, int)+0x3d>
c0016c30:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016c38:	eb 08                	jmp    c0016c42 <AMD_K6_writeback(int, int, int)+0x45>
c0016c3a:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016c42:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016c47:	7c 6e                	jl     c0016cb7 <AMD_K6_writeback(int, int, int)+0xba>
c0016c49:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016c4e:	7e 09                	jle    c0016c59 <AMD_K6_writeback(int, int, int)+0x5c>
c0016c50:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016c55:	74 36                	je     c0016c8d <AMD_K6_writeback(int, int, int)+0x90>
c0016c57:	eb 5e                	jmp    c0016cb7 <AMD_K6_writeback(int, int, int)+0xba>
c0016c59:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c5d:	50                   	push   eax
c0016c5e:	68 82 00 00 c0       	push   0xc0000082
c0016c63:	e8 78 ff ff ff       	call   c0016be0 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c68:	83 c4 08             	add    esp,0x8
c0016c6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c6f:	d1 e0                	shl    eax,1
c0016c71:	83 e0 7f             	and    eax,0x7f
c0016c74:	89 c2                	mov    edx,eax
c0016c76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c7a:	50                   	push   eax
c0016c7b:	6a 00                	push   0x0
c0016c7d:	52                   	push   edx
c0016c7e:	68 82 00 00 c0       	push   0xc0000082
c0016c83:	e8 39 ff ff ff       	call   c0016bc1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016c88:	83 c4 10             	add    esp,0x10
c0016c8b:	eb 2b                	jmp    c0016cb8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016c8d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c91:	50                   	push   eax
c0016c92:	68 82 00 00 c0       	push   0xc0000082
c0016c97:	e8 44 ff ff ff       	call   c0016be0 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c9c:	83 c4 08             	add    esp,0x8
c0016c9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ca3:	50                   	push   eax
c0016ca4:	6a 00                	push   0x0
c0016ca6:	6a 00                	push   0x0
c0016ca8:	68 82 00 00 c0       	push   0xc0000082
c0016cad:	e8 0f ff ff ff       	call   c0016bc1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016cb2:	83 c4 10             	add    esp,0x10
c0016cb5:	eb 01                	jmp    c0016cb8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016cb7:	90                   	nop
c0016cb8:	90                   	nop
c0016cb9:	83 c4 20             	add    esp,0x20
c0016cbc:	c3                   	ret    

c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016cbd:	56                   	push   esi
c0016cbe:	53                   	push   ebx
c0016cbf:	a1 40 45 02 c0       	mov    eax,ds:0xc0024540
c0016cc4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016cc8:	75 32                	jne    c0016cfc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016cca:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd4:	89 10                	mov    DWORD PTR [eax],edx
c0016cd6:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016cdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ce0:	89 10                	mov    DWORD PTR [eax],edx
c0016ce2:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016ce8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cec:	89 10                	mov    DWORD PTR [eax],edx
c0016cee:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016cf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cf8:	89 10                	mov    DWORD PTR [eax],edx
c0016cfa:	eb 5c                	jmp    c0016d58 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016cfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d00:	ba 00 00 00 00       	mov    edx,0x0
c0016d05:	89 d1                	mov    ecx,edx
c0016d07:	0f a2                	cpuid  
c0016d09:	89 c6                	mov    esi,eax
c0016d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0f:	89 30                	mov    DWORD PTR [eax],esi
c0016d11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d15:	89 18                	mov    DWORD PTR [eax],ebx
c0016d17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d1b:	89 08                	mov    DWORD PTR [eax],ecx
c0016d1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d21:	89 10                	mov    DWORD PTR [eax],edx
c0016d23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d27:	a3 40 45 02 c0       	mov    ds:0xc0024540,eax
c0016d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d32:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016d37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d3d:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016d42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d46:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d48:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d53:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016d58:	5b                   	pop    ebx
c0016d59:	5e                   	pop    esi
c0016d5a:	c3                   	ret    

c0016d5b <cpuidCheckEDX(unsigned int)>:
c0016d5b:	83 ec 10             	sub    esp,0x10
c0016d5e:	89 e0                	mov    eax,esp
c0016d60:	50                   	push   eax
c0016d61:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d65:	50                   	push   eax
c0016d66:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d6a:	50                   	push   eax
c0016d6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d6f:	50                   	push   eax
c0016d70:	6a 01                	push   0x1
c0016d72:	e8 46 ff ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d77:	83 c4 14             	add    esp,0x14
c0016d7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016d7d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d81:	0f 95 c0             	setne  al
c0016d84:	83 c4 10             	add    esp,0x10
c0016d87:	c3                   	ret    

c0016d88 <cpuidCheckECX(unsigned int)>:
c0016d88:	83 ec 10             	sub    esp,0x10
c0016d8b:	89 e0                	mov    eax,esp
c0016d8d:	50                   	push   eax
c0016d8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d92:	50                   	push   eax
c0016d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d97:	50                   	push   eax
c0016d98:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d9c:	50                   	push   eax
c0016d9d:	6a 01                	push   0x1
c0016d9f:	e8 19 ff ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016da4:	83 c4 14             	add    esp,0x14
c0016da7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dab:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016daf:	0f 95 c0             	setne  al
c0016db2:	83 c4 10             	add    esp,0x10
c0016db5:	c3                   	ret    

c0016db6 <cpuidCheckExtendedEBX(unsigned int)>:
c0016db6:	83 ec 10             	sub    esp,0x10
c0016db9:	89 e0                	mov    eax,esp
c0016dbb:	50                   	push   eax
c0016dbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dc0:	50                   	push   eax
c0016dc1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016dc5:	50                   	push   eax
c0016dc6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016dca:	50                   	push   eax
c0016dcb:	6a 07                	push   0x7
c0016dcd:	e8 eb fe ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016dd2:	83 c4 14             	add    esp,0x14
c0016dd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dd9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016ddd:	0f 95 c0             	setne  al
c0016de0:	83 c4 10             	add    esp,0x10
c0016de3:	c3                   	ret    

c0016de4 <cpuidCheckExtendedECX(unsigned int)>:
c0016de4:	83 ec 10             	sub    esp,0x10
c0016de7:	89 e0                	mov    eax,esp
c0016de9:	50                   	push   eax
c0016dea:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dee:	50                   	push   eax
c0016def:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016df3:	50                   	push   eax
c0016df4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016df8:	50                   	push   eax
c0016df9:	6a 07                	push   0x7
c0016dfb:	e8 bd fe ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e00:	83 c4 14             	add    esp,0x14
c0016e03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e07:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016e0b:	0f 95 c0             	setne  al
c0016e0e:	83 c4 10             	add    esp,0x10
c0016e11:	c3                   	ret    

c0016e12 <HalDetectFeatures()>:
c0016e12:	57                   	push   edi
c0016e13:	56                   	push   esi
c0016e14:	53                   	push   ebx
c0016e15:	81 ec 90 00 00 00    	sub    esp,0x90
c0016e1b:	83 ec 04             	sub    esp,0x4
c0016e1e:	6a 08                	push   0x8
c0016e20:	6a 00                	push   0x0
c0016e22:	68 8c c7 02 c0       	push   0xc002c78c
c0016e27:	e8 c4 96 fe ff       	call   c00004f0 <memset>
c0016e2c:	83 c4 10             	add    esp,0x10
c0016e2f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e34:	83 c8 04             	or     eax,0x4
c0016e37:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e3c:	e8 b8 93 fe ff       	call   c00001f9 <detectCPUID>
c0016e41:	85 c0                	test   eax,eax
c0016e43:	0f 95 c0             	setne  al
c0016e46:	83 e0 01             	and    eax,0x1
c0016e49:	83 e0 01             	and    eax,0x1
c0016e4c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016e4f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e54:	83 e0 fd             	and    eax,0xfffffffd
c0016e57:	88 c2                	mov    dl,al
c0016e59:	88 c8                	mov    al,cl
c0016e5b:	09 d0                	or     eax,edx
c0016e5d:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e62:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e67:	83 e0 02             	and    eax,0x2
c0016e6a:	0f b6 c0             	movzx  eax,al
c0016e6d:	85 c0                	test   eax,eax
c0016e6f:	0f 84 62 02 00 00    	je     c00170d7 <HalDetectFeatures()+0x2c5>
c0016e75:	83 ec 0c             	sub    esp,0xc
c0016e78:	6a 20                	push   0x20
c0016e7a:	e8 dc fe ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c0016e7f:	83 c4 10             	add    esp,0x10
c0016e82:	83 e0 01             	and    eax,0x1
c0016e85:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016e8c:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e91:	83 e0 f7             	and    eax,0xfffffff7
c0016e94:	88 c2                	mov    dl,al
c0016e96:	88 c8                	mov    al,cl
c0016e98:	09 d0                	or     eax,edx
c0016e9a:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e9f:	83 ec 0c             	sub    esp,0xc
c0016ea2:	68 00 00 00 04       	push   0x4000000
c0016ea7:	e8 af fe ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c0016eac:	83 c4 10             	add    esp,0x10
c0016eaf:	89 c1                	mov    ecx,eax
c0016eb1:	83 e1 01             	and    ecx,0x1
c0016eb4:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016eb9:	83 e0 fe             	and    eax,0xfffffffe
c0016ebc:	88 c2                	mov    dl,al
c0016ebe:	88 c8                	mov    al,cl
c0016ec0:	09 d0                	or     eax,edx
c0016ec2:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016ec7:	83 ec 0c             	sub    esp,0xc
c0016eca:	68 80 00 00 00       	push   0x80
c0016ecf:	e8 87 fe ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c0016ed4:	83 c4 10             	add    esp,0x10
c0016ed7:	89 c1                	mov    ecx,eax
c0016ed9:	c1 e1 07             	shl    ecx,0x7
c0016edc:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016ee1:	83 e0 7f             	and    eax,0x7f
c0016ee4:	88 c2                	mov    dl,al
c0016ee6:	88 c8                	mov    al,cl
c0016ee8:	09 d0                	or     eax,edx
c0016eea:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016eef:	83 ec 0c             	sub    esp,0xc
c0016ef2:	68 00 00 80 00       	push   0x800000
c0016ef7:	e8 5f fe ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c0016efc:	83 c4 10             	add    esp,0x10
c0016eff:	83 e0 01             	and    eax,0x1
c0016f02:	89 c1                	mov    ecx,eax
c0016f04:	c1 e1 05             	shl    ecx,0x5
c0016f07:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f0c:	83 e0 df             	and    eax,0xffffffdf
c0016f0f:	88 c2                	mov    dl,al
c0016f11:	88 c8                	mov    al,cl
c0016f13:	09 d0                	or     eax,edx
c0016f15:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f1a:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016f1f:	83 e0 01             	and    eax,0x1
c0016f22:	75 0c                	jne    c0016f30 <HalDetectFeatures()+0x11e>
c0016f24:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016f29:	25 00 04 00 00       	and    eax,0x400
c0016f2e:	74 0f                	je     c0016f3f <HalDetectFeatures()+0x12d>
c0016f30:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f35:	83 e0 fe             	and    eax,0xfffffffe
c0016f38:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f3d:	eb 28                	jmp    c0016f67 <HalDetectFeatures()+0x155>
c0016f3f:	83 ec 0c             	sub    esp,0xc
c0016f42:	68 00 02 00 00       	push   0x200
c0016f47:	e8 0f fe ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c0016f4c:	83 c4 10             	add    esp,0x10
c0016f4f:	89 c1                	mov    ecx,eax
c0016f51:	83 e1 01             	and    ecx,0x1
c0016f54:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f59:	83 e0 fe             	and    eax,0xfffffffe
c0016f5c:	88 c2                	mov    dl,al
c0016f5e:	88 c8                	mov    al,cl
c0016f60:	09 d0                	or     eax,edx
c0016f62:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f67:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f6c:	83 e0 01             	and    eax,0x1
c0016f6f:	0f b6 c0             	movzx  eax,al
c0016f72:	85 c0                	test   eax,eax
c0016f74:	74 1c                	je     c0016f92 <HalDetectFeatures()+0x180>
c0016f76:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f7b:	83 e0 08             	and    eax,0x8
c0016f7e:	0f b6 c0             	movzx  eax,al
c0016f81:	85 c0                	test   eax,eax
c0016f83:	75 0d                	jne    c0016f92 <HalDetectFeatures()+0x180>
c0016f85:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f8a:	83 e0 fe             	and    eax,0xfffffffe
c0016f8d:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f92:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0016f9a:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0016fa2:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0016faa:	85 c0                	test   eax,eax
c0016fac:	0f 84 ab 00 00 00    	je     c001705d <HalDetectFeatures()+0x24b>
c0016fb2:	83 ec 0c             	sub    esp,0xc
c0016fb5:	6a 01                	push   0x1
c0016fb7:	e8 cc fd ff ff       	call   c0016d88 <cpuidCheckECX(unsigned int)>
c0016fbc:	83 c4 10             	add    esp,0x10
c0016fbf:	83 e0 01             	and    eax,0x1
c0016fc2:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016fc5:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016fca:	83 e0 fd             	and    eax,0xfffffffd
c0016fcd:	88 c2                	mov    dl,al
c0016fcf:	88 c8                	mov    al,cl
c0016fd1:	09 d0                	or     eax,edx
c0016fd3:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016fd8:	83 ec 0c             	sub    esp,0xc
c0016fdb:	68 00 02 00 00       	push   0x200
c0016fe0:	e8 a3 fd ff ff       	call   c0016d88 <cpuidCheckECX(unsigned int)>
c0016fe5:	83 c4 10             	add    esp,0x10
c0016fe8:	83 e0 01             	and    eax,0x1
c0016feb:	89 c1                	mov    ecx,eax
c0016fed:	c1 e1 04             	shl    ecx,0x4
c0016ff0:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016ff5:	83 e0 ef             	and    eax,0xffffffef
c0016ff8:	88 c2                	mov    dl,al
c0016ffa:	88 c8                	mov    al,cl
c0016ffc:	09 d0                	or     eax,edx
c0016ffe:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017003:	83 ec 0c             	sub    esp,0xc
c0017006:	68 00 00 08 00       	push   0x80000
c001700b:	e8 78 fd ff ff       	call   c0016d88 <cpuidCheckECX(unsigned int)>
c0017010:	83 c4 10             	add    esp,0x10
c0017013:	83 e0 01             	and    eax,0x1
c0017016:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001701d:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017022:	83 e0 fb             	and    eax,0xfffffffb
c0017025:	88 c2                	mov    dl,al
c0017027:	88 c8                	mov    al,cl
c0017029:	09 d0                	or     eax,edx
c001702b:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017030:	83 ec 0c             	sub    esp,0xc
c0017033:	68 00 00 10 00       	push   0x100000
c0017038:	e8 4b fd ff ff       	call   c0016d88 <cpuidCheckECX(unsigned int)>
c001703d:	83 c4 10             	add    esp,0x10
c0017040:	83 e0 01             	and    eax,0x1
c0017043:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001704a:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c001704f:	83 e0 f7             	and    eax,0xfffffff7
c0017052:	88 c2                	mov    dl,al
c0017054:	88 c8                	mov    al,cl
c0017056:	09 d0                	or     eax,edx
c0017058:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c001705d:	83 ec 0c             	sub    esp,0xc
c0017060:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017064:	50                   	push   eax
c0017065:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017069:	50                   	push   eax
c001706a:	8d 44 24 34          	lea    eax,[esp+0x34]
c001706e:	50                   	push   eax
c001706f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017073:	50                   	push   eax
c0017074:	68 00 00 00 80       	push   0x80000000
c0017079:	e8 3f fc ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001707e:	83 c4 20             	add    esp,0x20
c0017081:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017085:	3d 00 00 00 80       	cmp    eax,0x80000000
c001708a:	76 4b                	jbe    c00170d7 <HalDetectFeatures()+0x2c5>
c001708c:	83 ec 0c             	sub    esp,0xc
c001708f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017093:	50                   	push   eax
c0017094:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017098:	50                   	push   eax
c0017099:	8d 44 24 34          	lea    eax,[esp+0x34]
c001709d:	50                   	push   eax
c001709e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00170a2:	50                   	push   eax
c00170a3:	68 01 00 00 80       	push   0x80000001
c00170a8:	e8 10 fc ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170ad:	83 c4 20             	add    esp,0x20
c00170b0:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00170b5:	83 e0 bf             	and    eax,0xffffffbf
c00170b8:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c00170bd:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170c2:	83 e0 fd             	and    eax,0xfffffffd
c00170c5:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170ca:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170cf:	83 e0 fe             	and    eax,0xfffffffe
c00170d2:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170d7:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c00170dc:	25 00 04 00 00       	and    eax,0x400
c00170e1:	74 0d                	je     c00170f0 <HalDetectFeatures()+0x2de>
c00170e3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00170e8:	83 e0 fb             	and    eax,0xfffffffb
c00170eb:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c00170f0:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c00170f7:	83 ec 04             	sub    esp,0x4
c00170fa:	6a 0d                	push   0xd
c00170fc:	6a 00                	push   0x0
c00170fe:	68 70 c7 02 c0       	push   0xc002c770
c0017103:	e8 e8 93 fe ff       	call   c00004f0 <memset>
c0017108:	83 c4 10             	add    esp,0x10
c001710b:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017110:	83 e0 02             	and    eax,0x2
c0017113:	0f b6 c0             	movzx  eax,al
c0017116:	85 c0                	test   eax,eax
c0017118:	0f 84 16 08 00 00    	je     c0017934 <HalDetectFeatures()+0xb22>
c001711e:	83 ec 0c             	sub    esp,0xc
c0017121:	6a 10                	push   0x10
c0017123:	e8 33 fc ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c0017128:	83 c4 10             	add    esp,0x10
c001712b:	83 e0 01             	and    eax,0x1
c001712e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017135:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001713a:	83 e0 f7             	and    eax,0xfffffff7
c001713d:	88 c2                	mov    dl,al
c001713f:	88 c8                	mov    al,cl
c0017141:	09 d0                	or     eax,edx
c0017143:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017148:	83 ec 0c             	sub    esp,0xc
c001714b:	6a 40                	push   0x40
c001714d:	e8 09 fc ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c0017152:	83 c4 10             	add    esp,0x10
c0017155:	83 e0 01             	and    eax,0x1
c0017158:	89 c1                	mov    ecx,eax
c001715a:	c1 e1 04             	shl    ecx,0x4
c001715d:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017162:	83 e0 ef             	and    eax,0xffffffef
c0017165:	88 c2                	mov    dl,al
c0017167:	88 c8                	mov    al,cl
c0017169:	09 d0                	or     eax,edx
c001716b:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017170:	83 ec 0c             	sub    esp,0xc
c0017173:	6a 08                	push   0x8
c0017175:	e8 e1 fb ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c001717a:	83 c4 10             	add    esp,0x10
c001717d:	83 e0 01             	and    eax,0x1
c0017180:	89 c1                	mov    ecx,eax
c0017182:	c1 e1 05             	shl    ecx,0x5
c0017185:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001718a:	83 e0 df             	and    eax,0xffffffdf
c001718d:	88 c2                	mov    dl,al
c001718f:	88 c8                	mov    al,cl
c0017191:	09 d0                	or     eax,edx
c0017193:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017198:	83 ec 0c             	sub    esp,0xc
c001719b:	68 00 20 00 00       	push   0x2000
c00171a0:	e8 b6 fb ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c00171a5:	83 c4 10             	add    esp,0x10
c00171a8:	83 e0 01             	and    eax,0x1
c00171ab:	89 c1                	mov    ecx,eax
c00171ad:	c1 e1 06             	shl    ecx,0x6
c00171b0:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171b5:	83 e0 bf             	and    eax,0xffffffbf
c00171b8:	88 c2                	mov    dl,al
c00171ba:	88 c8                	mov    al,cl
c00171bc:	09 d0                	or     eax,edx
c00171be:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171c3:	83 ec 0c             	sub    esp,0xc
c00171c6:	68 00 00 01 00       	push   0x10000
c00171cb:	e8 8b fb ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c00171d0:	83 c4 10             	add    esp,0x10
c00171d3:	89 c1                	mov    ecx,eax
c00171d5:	c1 e1 07             	shl    ecx,0x7
c00171d8:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171dd:	83 e0 7f             	and    eax,0x7f
c00171e0:	88 c2                	mov    dl,al
c00171e2:	88 c8                	mov    al,cl
c00171e4:	09 d0                	or     eax,edx
c00171e6:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171eb:	83 ec 0c             	sub    esp,0xc
c00171ee:	6a 01                	push   0x1
c00171f0:	e8 66 fb ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c00171f5:	83 c4 10             	add    esp,0x10
c00171f8:	83 e0 01             	and    eax,0x1
c00171fb:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017202:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017207:	83 e0 f7             	and    eax,0xfffffff7
c001720a:	88 c2                	mov    dl,al
c001720c:	88 c8                	mov    al,cl
c001720e:	09 d0                	or     eax,edx
c0017210:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017215:	83 ec 0c             	sub    esp,0xc
c0017218:	68 00 08 00 00       	push   0x800
c001721d:	e8 39 fb ff ff       	call   c0016d5b <cpuidCheckEDX(unsigned int)>
c0017222:	83 c4 10             	add    esp,0x10
c0017225:	89 c1                	mov    ecx,eax
c0017227:	83 e1 01             	and    ecx,0x1
c001722a:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001722f:	83 e0 fe             	and    eax,0xfffffffe
c0017232:	88 c2                	mov    dl,al
c0017234:	88 c8                	mov    al,cl
c0017236:	09 d0                	or     eax,edx
c0017238:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001723d:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017242:	83 e0 40             	and    eax,0x40
c0017245:	0f b6 c0             	movzx  eax,al
c0017248:	85 c0                	test   eax,eax
c001724a:	74 0a                	je     c0017256 <HalDetectFeatures()+0x444>
c001724c:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c0017256:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001725b:	83 e0 80             	and    eax,0xffffff80
c001725e:	0f b6 c0             	movzx  eax,al
c0017261:	85 c0                	test   eax,eax
c0017263:	74 0a                	je     c001726f <HalDetectFeatures()+0x45d>
c0017265:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c001726f:	83 ec 0c             	sub    esp,0xc
c0017272:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017276:	50                   	push   eax
c0017277:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001727b:	50                   	push   eax
c001727c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017280:	50                   	push   eax
c0017281:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017285:	50                   	push   eax
c0017286:	6a 00                	push   0x0
c0017288:	e8 30 fa ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001728d:	83 c4 20             	add    esp,0x20
c0017290:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c0017298:	8d 44 24 10          	lea    eax,[esp+0x10]
c001729c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00172a0:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00172a8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00172ac:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00172b4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00172b8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00172bc:	89 c6                	mov    esi,eax
c00172be:	89 d7                	mov    edi,edx
c00172c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172c2:	89 c8                	mov    eax,ecx
c00172c4:	89 fa                	mov    edx,edi
c00172c6:	89 f3                	mov    ebx,esi
c00172c8:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00172cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00172d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172d4:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c00172d9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00172dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00172e1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00172e5:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00172ed:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00172f1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00172f5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00172f9:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00172fd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0017301:	89 c6                	mov    esi,eax
c0017303:	89 d7                	mov    edi,edx
c0017305:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017307:	89 c8                	mov    eax,ecx
c0017309:	89 fa                	mov    edx,edi
c001730b:	89 f3                	mov    ebx,esi
c001730d:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0017311:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0017315:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017319:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c001731e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0017325:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017329:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001732d:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0017335:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001733c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0017340:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017344:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001734b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001734f:	89 c6                	mov    esi,eax
c0017351:	89 d7                	mov    edi,edx
c0017353:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017355:	89 c8                	mov    eax,ecx
c0017357:	89 fa                	mov    edx,edi
c0017359:	89 f3                	mov    ebx,esi
c001735b:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001735f:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0017363:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0017367:	83 ec 08             	sub    esp,0x8
c001736a:	68 6c 2d 02 c0       	push   0xc0022d6c
c001736f:	68 70 c7 02 c0       	push   0xc002c770
c0017374:	e8 07 94 fe ff       	call   c0000780 <strcmp>
c0017379:	83 c4 10             	add    esp,0x10
c001737c:	85 c0                	test   eax,eax
c001737e:	74 19                	je     c0017399 <HalDetectFeatures()+0x587>
c0017380:	83 ec 08             	sub    esp,0x8
c0017383:	68 79 2d 02 c0       	push   0xc0022d79
c0017388:	68 70 c7 02 c0       	push   0xc002c770
c001738d:	e8 ee 93 fe ff       	call   c0000780 <strcmp>
c0017392:	83 c4 10             	add    esp,0x10
c0017395:	85 c0                	test   eax,eax
c0017397:	75 04                	jne    c001739d <HalDetectFeatures()+0x58b>
c0017399:	b0 01                	mov    al,0x1
c001739b:	eb 02                	jmp    c001739f <HalDetectFeatures()+0x58d>
c001739d:	b0 00                	mov    al,0x0
c001739f:	0f b6 c0             	movzx  eax,al
c00173a2:	85 c0                	test   eax,eax
c00173a4:	74 0f                	je     c00173b5 <HalDetectFeatures()+0x5a3>
c00173a6:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c00173b0:	e9 0d 03 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c00173b5:	83 ec 08             	sub    esp,0x8
c00173b8:	68 86 2d 02 c0       	push   0xc0022d86
c00173bd:	68 70 c7 02 c0       	push   0xc002c770
c00173c2:	e8 b9 93 fe ff       	call   c0000780 <strcmp>
c00173c7:	83 c4 10             	add    esp,0x10
c00173ca:	85 c0                	test   eax,eax
c00173cc:	74 19                	je     c00173e7 <HalDetectFeatures()+0x5d5>
c00173ce:	83 ec 08             	sub    esp,0x8
c00173d1:	68 93 2d 02 c0       	push   0xc0022d93
c00173d6:	68 70 c7 02 c0       	push   0xc002c770
c00173db:	e8 a0 93 fe ff       	call   c0000780 <strcmp>
c00173e0:	83 c4 10             	add    esp,0x10
c00173e3:	85 c0                	test   eax,eax
c00173e5:	75 04                	jne    c00173eb <HalDetectFeatures()+0x5d9>
c00173e7:	b0 01                	mov    al,0x1
c00173e9:	eb 02                	jmp    c00173ed <HalDetectFeatures()+0x5db>
c00173eb:	b0 00                	mov    al,0x0
c00173ed:	0f b6 c0             	movzx  eax,al
c00173f0:	85 c0                	test   eax,eax
c00173f2:	74 0f                	je     c0017403 <HalDetectFeatures()+0x5f1>
c00173f4:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c00173fe:	e9 bf 02 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c0017403:	83 ec 08             	sub    esp,0x8
c0017406:	68 a0 2d 02 c0       	push   0xc0022da0
c001740b:	68 70 c7 02 c0       	push   0xc002c770
c0017410:	e8 6b 93 fe ff       	call   c0000780 <strcmp>
c0017415:	83 c4 10             	add    esp,0x10
c0017418:	85 c0                	test   eax,eax
c001741a:	74 19                	je     c0017435 <HalDetectFeatures()+0x623>
c001741c:	83 ec 08             	sub    esp,0x8
c001741f:	68 ad 2d 02 c0       	push   0xc0022dad
c0017424:	68 70 c7 02 c0       	push   0xc002c770
c0017429:	e8 52 93 fe ff       	call   c0000780 <strcmp>
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	85 c0                	test   eax,eax
c0017433:	75 04                	jne    c0017439 <HalDetectFeatures()+0x627>
c0017435:	b0 01                	mov    al,0x1
c0017437:	eb 02                	jmp    c001743b <HalDetectFeatures()+0x629>
c0017439:	b0 00                	mov    al,0x0
c001743b:	0f b6 c0             	movzx  eax,al
c001743e:	85 c0                	test   eax,eax
c0017440:	74 0f                	je     c0017451 <HalDetectFeatures()+0x63f>
c0017442:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c001744c:	e9 71 02 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c0017451:	83 ec 08             	sub    esp,0x8
c0017454:	68 ba 2d 02 c0       	push   0xc0022dba
c0017459:	68 70 c7 02 c0       	push   0xc002c770
c001745e:	e8 1d 93 fe ff       	call   c0000780 <strcmp>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	85 c0                	test   eax,eax
c0017468:	0f 94 c0             	sete   al
c001746b:	0f b6 c0             	movzx  eax,al
c001746e:	85 c0                	test   eax,eax
c0017470:	74 0f                	je     c0017481 <HalDetectFeatures()+0x66f>
c0017472:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c001747c:	e9 41 02 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c0017481:	83 ec 08             	sub    esp,0x8
c0017484:	68 c7 2d 02 c0       	push   0xc0022dc7
c0017489:	68 70 c7 02 c0       	push   0xc002c770
c001748e:	e8 ed 92 fe ff       	call   c0000780 <strcmp>
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	85 c0                	test   eax,eax
c0017498:	0f 94 c0             	sete   al
c001749b:	0f b6 c0             	movzx  eax,al
c001749e:	85 c0                	test   eax,eax
c00174a0:	74 0f                	je     c00174b1 <HalDetectFeatures()+0x69f>
c00174a2:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c00174ac:	e9 11 02 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c00174b1:	83 ec 08             	sub    esp,0x8
c00174b4:	68 86 2d 02 c0       	push   0xc0022d86
c00174b9:	68 70 c7 02 c0       	push   0xc002c770
c00174be:	e8 bd 92 fe ff       	call   c0000780 <strcmp>
c00174c3:	83 c4 10             	add    esp,0x10
c00174c6:	85 c0                	test   eax,eax
c00174c8:	0f 94 c0             	sete   al
c00174cb:	0f b6 c0             	movzx  eax,al
c00174ce:	85 c0                	test   eax,eax
c00174d0:	74 0f                	je     c00174e1 <HalDetectFeatures()+0x6cf>
c00174d2:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c00174dc:	e9 e1 01 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c00174e1:	83 ec 08             	sub    esp,0x8
c00174e4:	68 d4 2d 02 c0       	push   0xc0022dd4
c00174e9:	68 70 c7 02 c0       	push   0xc002c770
c00174ee:	e8 8d 92 fe ff       	call   c0000780 <strcmp>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	85 c0                	test   eax,eax
c00174f8:	0f 94 c0             	sete   al
c00174fb:	0f b6 c0             	movzx  eax,al
c00174fe:	85 c0                	test   eax,eax
c0017500:	74 0f                	je     c0017511 <HalDetectFeatures()+0x6ff>
c0017502:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c001750c:	e9 b1 01 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c0017511:	83 ec 08             	sub    esp,0x8
c0017514:	68 e1 2d 02 c0       	push   0xc0022de1
c0017519:	68 70 c7 02 c0       	push   0xc002c770
c001751e:	e8 5d 92 fe ff       	call   c0000780 <strcmp>
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	85 c0                	test   eax,eax
c0017528:	0f 94 c0             	sete   al
c001752b:	0f b6 c0             	movzx  eax,al
c001752e:	85 c0                	test   eax,eax
c0017530:	74 0f                	je     c0017541 <HalDetectFeatures()+0x72f>
c0017532:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c001753c:	e9 81 01 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c0017541:	83 ec 08             	sub    esp,0x8
c0017544:	68 ee 2d 02 c0       	push   0xc0022dee
c0017549:	68 70 c7 02 c0       	push   0xc002c770
c001754e:	e8 2d 92 fe ff       	call   c0000780 <strcmp>
c0017553:	83 c4 10             	add    esp,0x10
c0017556:	85 c0                	test   eax,eax
c0017558:	0f 94 c0             	sete   al
c001755b:	0f b6 c0             	movzx  eax,al
c001755e:	85 c0                	test   eax,eax
c0017560:	74 0f                	je     c0017571 <HalDetectFeatures()+0x75f>
c0017562:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c001756c:	e9 51 01 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c0017571:	83 ec 08             	sub    esp,0x8
c0017574:	68 fb 2d 02 c0       	push   0xc0022dfb
c0017579:	68 70 c7 02 c0       	push   0xc002c770
c001757e:	e8 fd 91 fe ff       	call   c0000780 <strcmp>
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	85 c0                	test   eax,eax
c0017588:	0f 94 c0             	sete   al
c001758b:	0f b6 c0             	movzx  eax,al
c001758e:	85 c0                	test   eax,eax
c0017590:	74 0f                	je     c00175a1 <HalDetectFeatures()+0x78f>
c0017592:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c001759c:	e9 21 01 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c00175a1:	83 ec 08             	sub    esp,0x8
c00175a4:	68 08 2e 02 c0       	push   0xc0022e08
c00175a9:	68 70 c7 02 c0       	push   0xc002c770
c00175ae:	e8 cd 91 fe ff       	call   c0000780 <strcmp>
c00175b3:	83 c4 10             	add    esp,0x10
c00175b6:	85 c0                	test   eax,eax
c00175b8:	0f 94 c0             	sete   al
c00175bb:	0f b6 c0             	movzx  eax,al
c00175be:	85 c0                	test   eax,eax
c00175c0:	74 0f                	je     c00175d1 <HalDetectFeatures()+0x7bf>
c00175c2:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c00175cc:	e9 f1 00 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c00175d1:	83 ec 08             	sub    esp,0x8
c00175d4:	68 15 2e 02 c0       	push   0xc0022e15
c00175d9:	68 70 c7 02 c0       	push   0xc002c770
c00175de:	e8 9d 91 fe ff       	call   c0000780 <strcmp>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	85 c0                	test   eax,eax
c00175e8:	0f 94 c0             	sete   al
c00175eb:	0f b6 c0             	movzx  eax,al
c00175ee:	85 c0                	test   eax,eax
c00175f0:	74 0f                	je     c0017601 <HalDetectFeatures()+0x7ef>
c00175f2:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c00175fc:	e9 c1 00 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c0017601:	83 ec 08             	sub    esp,0x8
c0017604:	68 22 2e 02 c0       	push   0xc0022e22
c0017609:	68 70 c7 02 c0       	push   0xc002c770
c001760e:	e8 6d 91 fe ff       	call   c0000780 <strcmp>
c0017613:	83 c4 10             	add    esp,0x10
c0017616:	85 c0                	test   eax,eax
c0017618:	0f 94 c0             	sete   al
c001761b:	0f b6 c0             	movzx  eax,al
c001761e:	85 c0                	test   eax,eax
c0017620:	74 0f                	je     c0017631 <HalDetectFeatures()+0x81f>
c0017622:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c001762c:	e9 91 00 00 00       	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c0017631:	83 ec 08             	sub    esp,0x8
c0017634:	68 2f 2e 02 c0       	push   0xc0022e2f
c0017639:	68 70 c7 02 c0       	push   0xc002c770
c001763e:	e8 3d 91 fe ff       	call   c0000780 <strcmp>
c0017643:	83 c4 10             	add    esp,0x10
c0017646:	85 c0                	test   eax,eax
c0017648:	0f 94 c0             	sete   al
c001764b:	0f b6 c0             	movzx  eax,al
c001764e:	85 c0                	test   eax,eax
c0017650:	74 0c                	je     c001765e <HalDetectFeatures()+0x84c>
c0017652:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c001765c:	eb 64                	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c001765e:	83 ec 08             	sub    esp,0x8
c0017661:	68 3c 2e 02 c0       	push   0xc0022e3c
c0017666:	68 70 c7 02 c0       	push   0xc002c770
c001766b:	e8 10 91 fe ff       	call   c0000780 <strcmp>
c0017670:	83 c4 10             	add    esp,0x10
c0017673:	85 c0                	test   eax,eax
c0017675:	0f 94 c0             	sete   al
c0017678:	0f b6 c0             	movzx  eax,al
c001767b:	85 c0                	test   eax,eax
c001767d:	74 0c                	je     c001768b <HalDetectFeatures()+0x879>
c001767f:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017689:	eb 37                	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c001768b:	83 ec 08             	sub    esp,0x8
c001768e:	68 49 2e 02 c0       	push   0xc0022e49
c0017693:	68 70 c7 02 c0       	push   0xc002c770
c0017698:	e8 e3 90 fe ff       	call   c0000780 <strcmp>
c001769d:	83 c4 10             	add    esp,0x10
c00176a0:	85 c0                	test   eax,eax
c00176a2:	0f 94 c0             	sete   al
c00176a5:	0f b6 c0             	movzx  eax,al
c00176a8:	85 c0                	test   eax,eax
c00176aa:	74 0c                	je     c00176b8 <HalDetectFeatures()+0x8a6>
c00176ac:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00176b6:	eb 0a                	jmp    c00176c2 <HalDetectFeatures()+0x8b0>
c00176b8:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c00176c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176c6:	83 f8 06             	cmp    eax,0x6
c00176c9:	0f 86 cc 00 00 00    	jbe    c001779b <HalDetectFeatures()+0x989>
c00176cf:	83 ec 0c             	sub    esp,0xc
c00176d2:	68 80 00 00 00       	push   0x80
c00176d7:	e8 da f6 ff ff       	call   c0016db6 <cpuidCheckExtendedEBX(unsigned int)>
c00176dc:	83 c4 10             	add    esp,0x10
c00176df:	89 c1                	mov    ecx,eax
c00176e1:	83 e1 01             	and    ecx,0x1
c00176e4:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176e9:	83 e0 fe             	and    eax,0xfffffffe
c00176ec:	88 c2                	mov    dl,al
c00176ee:	88 c8                	mov    al,cl
c00176f0:	09 d0                	or     eax,edx
c00176f2:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176f7:	83 ec 0c             	sub    esp,0xc
c00176fa:	68 00 00 10 00       	push   0x100000
c00176ff:	e8 b2 f6 ff ff       	call   c0016db6 <cpuidCheckExtendedEBX(unsigned int)>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	83 e0 01             	and    eax,0x1
c001770a:	89 c1                	mov    ecx,eax
c001770c:	c1 e1 06             	shl    ecx,0x6
c001770f:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017714:	83 e0 bf             	and    eax,0xffffffbf
c0017717:	88 c2                	mov    dl,al
c0017719:	88 c8                	mov    al,cl
c001771b:	09 d0                	or     eax,edx
c001771d:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017722:	83 ec 0c             	sub    esp,0xc
c0017725:	68 00 00 04 00       	push   0x40000
c001772a:	e8 87 f6 ff ff       	call   c0016db6 <cpuidCheckExtendedEBX(unsigned int)>
c001772f:	83 c4 10             	add    esp,0x10
c0017732:	83 e0 01             	and    eax,0x1
c0017735:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017738:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001773d:	83 e0 fd             	and    eax,0xfffffffd
c0017740:	88 c2                	mov    dl,al
c0017742:	88 c8                	mov    al,cl
c0017744:	09 d0                	or     eax,edx
c0017746:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001774b:	83 ec 0c             	sub    esp,0xc
c001774e:	6a 04                	push   0x4
c0017750:	e8 8f f6 ff ff       	call   c0016de4 <cpuidCheckExtendedECX(unsigned int)>
c0017755:	83 c4 10             	add    esp,0x10
c0017758:	83 e0 01             	and    eax,0x1
c001775b:	89 c1                	mov    ecx,eax
c001775d:	c1 e1 05             	shl    ecx,0x5
c0017760:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017765:	83 e0 df             	and    eax,0xffffffdf
c0017768:	88 c2                	mov    dl,al
c001776a:	88 c8                	mov    al,cl
c001776c:	09 d0                	or     eax,edx
c001776e:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017773:	83 ec 0c             	sub    esp,0xc
c0017776:	6a 20                	push   0x20
c0017778:	e8 67 f6 ff ff       	call   c0016de4 <cpuidCheckExtendedECX(unsigned int)>
c001777d:	83 c4 10             	add    esp,0x10
c0017780:	83 e0 01             	and    eax,0x1
c0017783:	89 c1                	mov    ecx,eax
c0017785:	c1 e1 04             	shl    ecx,0x4
c0017788:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001778d:	83 e0 ef             	and    eax,0xffffffef
c0017790:	88 c2                	mov    dl,al
c0017792:	88 c8                	mov    al,cl
c0017794:	09 d0                	or     eax,edx
c0017796:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001779b:	83 ec 0c             	sub    esp,0xc
c001779e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177a2:	50                   	push   eax
c00177a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00177a7:	50                   	push   eax
c00177a8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00177ac:	50                   	push   eax
c00177ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00177b1:	50                   	push   eax
c00177b2:	6a 01                	push   0x1
c00177b4:	e8 04 f5 ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177b9:	83 c4 20             	add    esp,0x20
c00177bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177c0:	83 e0 0f             	and    eax,0xf
c00177c3:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c00177c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177cc:	c1 e8 04             	shr    eax,0x4
c00177cf:	83 e0 0f             	and    eax,0xf
c00177d2:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c00177d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177db:	c1 e8 08             	shr    eax,0x8
c00177de:	83 e0 0f             	and    eax,0xf
c00177e1:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00177e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177ea:	c1 e8 0c             	shr    eax,0xc
c00177ed:	83 e0 03             	and    eax,0x3
c00177f0:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c00177f5:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177fa:	0f b6 c0             	movzx  eax,al
c00177fd:	83 f8 06             	cmp    eax,0x6
c0017800:	74 0d                	je     c001780f <HalDetectFeatures()+0x9fd>
c0017802:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017807:	0f b6 c0             	movzx  eax,al
c001780a:	83 f8 0f             	cmp    eax,0xf
c001780d:	75 18                	jne    c0017827 <HalDetectFeatures()+0xa15>
c001780f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017813:	c1 e8 10             	shr    eax,0x10
c0017816:	c1 e0 04             	shl    eax,0x4
c0017819:	88 c2                	mov    dl,al
c001781b:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c0017820:	09 d0                	or     eax,edx
c0017822:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c0017827:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c001782c:	0f b6 c0             	movzx  eax,al
c001782f:	83 f8 0f             	cmp    eax,0xf
c0017832:	75 15                	jne    c0017849 <HalDetectFeatures()+0xa37>
c0017834:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017838:	c1 e8 14             	shr    eax,0x14
c001783b:	88 c2                	mov    dl,al
c001783d:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017842:	01 d0                	add    eax,edx
c0017844:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c0017849:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0017851:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0017859:	85 c0                	test   eax,eax
c001785b:	74 2d                	je     c001788a <HalDetectFeatures()+0xa78>
c001785d:	83 ec 0c             	sub    esp,0xc
c0017860:	68 00 00 00 40       	push   0x40000000
c0017865:	e8 1e f5 ff ff       	call   c0016d88 <cpuidCheckECX(unsigned int)>
c001786a:	83 c4 10             	add    esp,0x10
c001786d:	83 e0 01             	and    eax,0x1
c0017870:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017877:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001787c:	83 e0 fb             	and    eax,0xfffffffb
c001787f:	88 c2                	mov    dl,al
c0017881:	88 c8                	mov    al,cl
c0017883:	09 d0                	or     eax,edx
c0017885:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001788a:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001788f:	83 c8 04             	or     eax,0x4
c0017892:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017897:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001789c:	83 c8 08             	or     eax,0x8
c001789f:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178a4:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178a9:	83 c8 10             	or     eax,0x10
c00178ac:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178b1:	83 ec 0c             	sub    esp,0xc
c00178b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178b8:	50                   	push   eax
c00178b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178bd:	50                   	push   eax
c00178be:	8d 44 24 24          	lea    eax,[esp+0x24]
c00178c2:	50                   	push   eax
c00178c3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00178c7:	50                   	push   eax
c00178c8:	68 00 00 00 80       	push   0x80000000
c00178cd:	e8 eb f3 ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178d2:	83 c4 20             	add    esp,0x20
c00178d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178d9:	3d 00 00 00 80       	cmp    eax,0x80000000
c00178de:	0f 86 96 01 00 00    	jbe    c0017a7a <HalDetectFeatures()+0xc68>
c00178e4:	83 ec 0c             	sub    esp,0xc
c00178e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178eb:	50                   	push   eax
c00178ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178f0:	50                   	push   eax
c00178f1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00178f5:	50                   	push   eax
c00178f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00178fa:	50                   	push   eax
c00178fb:	68 01 00 00 80       	push   0x80000001
c0017900:	e8 b8 f3 ff ff       	call   c0016cbd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017905:	83 c4 20             	add    esp,0x20
c0017908:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001790d:	83 e0 7f             	and    eax,0x7f
c0017910:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017915:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001791a:	83 e0 fb             	and    eax,0xfffffffb
c001791d:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017922:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017927:	83 e0 fd             	and    eax,0xfffffffd
c001792a:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001792f:	e9 46 01 00 00       	jmp    c0017a7a <HalDetectFeatures()+0xc68>
c0017934:	83 ec 08             	sub    esp,0x8
c0017937:	68 ba 2d 02 c0       	push   0xc0022dba
c001793c:	68 70 c7 02 c0       	push   0xc002c770
c0017941:	e8 0a 8d fe ff       	call   c0000650 <strcpy>
c0017946:	83 c4 10             	add    esp,0x10
c0017949:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c0017953:	e8 6b 88 fe ff       	call   c00001c3 <is486>
c0017958:	85 c0                	test   eax,eax
c001795a:	0f 95 c0             	setne  al
c001795d:	0f b6 c0             	movzx  eax,al
c0017960:	85 c0                	test   eax,eax
c0017962:	0f 84 8d 00 00 00    	je     c00179f5 <HalDetectFeatures()+0xbe3>
c0017968:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001796d:	83 c8 04             	or     eax,0x4
c0017970:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017975:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001797a:	83 c8 08             	or     eax,0x8
c001797d:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017982:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017987:	83 c8 10             	or     eax,0x10
c001798a:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001798f:	0f 20 c0             	mov    eax,cr0
c0017992:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017996:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001799a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00179a1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00179a8:	83 e0 04             	and    eax,0x4
c00179ab:	74 1e                	je     c00179cb <HalDetectFeatures()+0xbb9>
c00179ad:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00179b4:	83 e0 10             	and    eax,0x10
c00179b7:	75 12                	jne    c00179cb <HalDetectFeatures()+0xbb9>
c00179b9:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179be:	83 e0 f7             	and    eax,0xfffffff7
c00179c1:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179c6:	e9 af 00 00 00       	jmp    c0017a7a <HalDetectFeatures()+0xc68>
c00179cb:	e8 ce 87 fe ff       	call   c000019e <hasLegacyFPU>
c00179d0:	83 e0 01             	and    eax,0x1
c00179d3:	83 e0 01             	and    eax,0x1
c00179d6:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00179dd:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179e2:	83 e0 f7             	and    eax,0xfffffff7
c00179e5:	88 c2                	mov    dl,al
c00179e7:	88 c8                	mov    al,cl
c00179e9:	09 d0                	or     eax,edx
c00179eb:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179f0:	e9 85 00 00 00       	jmp    c0017a7a <HalDetectFeatures()+0xc68>
c00179f5:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179fa:	83 e0 fb             	and    eax,0xfffffffb
c00179fd:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a02:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a07:	83 e0 f7             	and    eax,0xfffffff7
c0017a0a:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a0f:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a14:	83 e0 ef             	and    eax,0xffffffef
c0017a17:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a1c:	0f 20 c0             	mov    eax,cr0
c0017a1f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a27:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017a2e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017a35:	83 e0 04             	and    eax,0x4
c0017a38:	74 1b                	je     c0017a55 <HalDetectFeatures()+0xc43>
c0017a3a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017a41:	83 e0 10             	and    eax,0x10
c0017a44:	75 0f                	jne    c0017a55 <HalDetectFeatures()+0xc43>
c0017a46:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a4b:	83 e0 f7             	and    eax,0xfffffff7
c0017a4e:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a53:	eb 25                	jmp    c0017a7a <HalDetectFeatures()+0xc68>
c0017a55:	e8 44 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a5a:	83 e0 01             	and    eax,0x1
c0017a5d:	83 e0 01             	and    eax,0x1
c0017a60:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a67:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a6c:	83 e0 f7             	and    eax,0xfffffff7
c0017a6f:	88 c2                	mov    dl,al
c0017a71:	88 c8                	mov    al,cl
c0017a73:	09 d0                	or     eax,edx
c0017a75:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a7a:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a7f:	83 e0 08             	and    eax,0x8
c0017a82:	0f b6 c0             	movzx  eax,al
c0017a85:	85 c0                	test   eax,eax
c0017a87:	75 25                	jne    c0017aae <HalDetectFeatures()+0xc9c>
c0017a89:	e8 10 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a8e:	83 e0 01             	and    eax,0x1
c0017a91:	83 e0 01             	and    eax,0x1
c0017a94:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a9b:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017aa0:	83 e0 f7             	and    eax,0xfffffff7
c0017aa3:	88 c2                	mov    dl,al
c0017aa5:	88 c8                	mov    al,cl
c0017aa7:	09 d0                	or     eax,edx
c0017aa9:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017aae:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017ab3:	83 e0 08             	and    eax,0x8
c0017ab6:	0f b6 c0             	movzx  eax,al
c0017ab9:	85 c0                	test   eax,eax
c0017abb:	74 0d                	je     c0017aca <HalDetectFeatures()+0xcb8>
c0017abd:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ac2:	83 c8 10             	or     eax,0x10
c0017ac5:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017aca:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017acf:	83 e0 10             	and    eax,0x10
c0017ad2:	0f b6 c0             	movzx  eax,al
c0017ad5:	85 c0                	test   eax,eax
c0017ad7:	75 23                	jne    c0017afc <HalDetectFeatures()+0xcea>
c0017ad9:	e8 f8 7c 00 00       	call   c001f7d6 <x87Detect>
c0017ade:	83 e0 01             	and    eax,0x1
c0017ae1:	83 e0 01             	and    eax,0x1
c0017ae4:	89 c1                	mov    ecx,eax
c0017ae6:	c1 e1 04             	shl    ecx,0x4
c0017ae9:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017aee:	83 e0 ef             	and    eax,0xffffffef
c0017af1:	88 c2                	mov    dl,al
c0017af3:	88 c8                	mov    al,cl
c0017af5:	09 d0                	or     eax,edx
c0017af7:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017afc:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b01:	83 e0 01             	and    eax,0x1
c0017b04:	0f b6 c0             	movzx  eax,al
c0017b07:	85 c0                	test   eax,eax
c0017b09:	75 2d                	jne    c0017b38 <HalDetectFeatures()+0xd26>
c0017b0b:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b10:	83 e0 02             	and    eax,0x2
c0017b13:	0f b6 c0             	movzx  eax,al
c0017b16:	85 c0                	test   eax,eax
c0017b18:	75 1e                	jne    c0017b38 <HalDetectFeatures()+0xd26>
c0017b1a:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b1f:	83 e0 04             	and    eax,0x4
c0017b22:	0f b6 c0             	movzx  eax,al
c0017b25:	85 c0                	test   eax,eax
c0017b27:	75 0f                	jne    c0017b38 <HalDetectFeatures()+0xd26>
c0017b29:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b2e:	83 e0 08             	and    eax,0x8
c0017b31:	0f b6 c0             	movzx  eax,al
c0017b34:	85 c0                	test   eax,eax
c0017b36:	74 0d                	je     c0017b45 <HalDetectFeatures()+0xd33>
c0017b38:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b3d:	83 c8 80             	or     eax,0xffffff80
c0017b40:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b45:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b4a:	83 e0 10             	and    eax,0x10
c0017b4d:	0f b6 c0             	movzx  eax,al
c0017b50:	85 c0                	test   eax,eax
c0017b52:	74 2f                	je     c0017b83 <HalDetectFeatures()+0xd71>
c0017b54:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b59:	83 e0 80             	and    eax,0xffffff80
c0017b5c:	0f b6 c0             	movzx  eax,al
c0017b5f:	85 c0                	test   eax,eax
c0017b61:	75 20                	jne    c0017b83 <HalDetectFeatures()+0xd71>
c0017b63:	e8 28 7c 00 00       	call   c001f790 <sseDetect>
c0017b68:	83 e0 01             	and    eax,0x1
c0017b6b:	89 c1                	mov    ecx,eax
c0017b6d:	c1 e1 07             	shl    ecx,0x7
c0017b70:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b75:	83 e0 7f             	and    eax,0x7f
c0017b78:	88 c2                	mov    dl,al
c0017b7a:	88 c8                	mov    al,cl
c0017b7c:	09 d0                	or     eax,edx
c0017b7e:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b83:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b88:	83 e0 80             	and    eax,0xffffff80
c0017b8b:	0f b6 c0             	movzx  eax,al
c0017b8e:	85 c0                	test   eax,eax
c0017b90:	74 1c                	je     c0017bae <HalDetectFeatures()+0xd9c>
c0017b92:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b97:	83 e0 20             	and    eax,0x20
c0017b9a:	0f b6 c0             	movzx  eax,al
c0017b9d:	85 c0                	test   eax,eax
c0017b9f:	75 0d                	jne    c0017bae <HalDetectFeatures()+0xd9c>
c0017ba1:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017ba6:	83 e0 df             	and    eax,0xffffffdf
c0017ba9:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017bae:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017bb5:	90                   	nop
c0017bb6:	81 c4 90 00 00 00    	add    esp,0x90
c0017bbc:	5b                   	pop    ebx
c0017bbd:	5e                   	pop    esi
c0017bbe:	5f                   	pop    edi
c0017bbf:	c3                   	ret    

c0017bc0 <HalEnableNMI()>:
c0017bc0:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017bc7:	6a 10                	push   0x10
c0017bc9:	e8 3d ef ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0017bce:	83 c4 04             	add    esp,0x4
c0017bd1:	90                   	nop
c0017bd2:	c3                   	ret    

c0017bd3 <HalDisableNMI()>:
c0017bd3:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017bda:	6a 10                	push   0x10
c0017bdc:	e8 2a ef ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0017be1:	83 c4 04             	add    esp,0x4
c0017be4:	90                   	nop
c0017be5:	c3                   	ret    

c0017be6 <HalGetNMIState()>:
c0017be6:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017beb:	c3                   	ret    

c0017bec <x86rdmsr(unsigned int)>:
c0017bec:	83 ec 1c             	sub    esp,0x1c
c0017bef:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bf4:	83 e0 08             	and    eax,0x8
c0017bf7:	0f b6 c0             	movzx  eax,al
c0017bfa:	85 c0                	test   eax,eax
c0017bfc:	75 10                	jne    c0017c0e <x86rdmsr(unsigned int)+0x22>
c0017bfe:	83 ec 0c             	sub    esp,0xc
c0017c01:	68 55 2e 02 c0       	push   0xc0022e55
c0017c06:	e8 2f 70 ff ff       	call   c000ec3a <KePanic(char const*)>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c12:	89 c1                	mov    ecx,eax
c0017c14:	0f 32                	rdmsr  
c0017c16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c26:	83 c4 1c             	add    esp,0x1c
c0017c29:	c3                   	ret    

c0017c2a <x86wrmsr(unsigned int, unsigned long long)>:
c0017c2a:	83 ec 1c             	sub    esp,0x1c
c0017c2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c3d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c42:	83 e0 08             	and    eax,0x8
c0017c45:	0f b6 c0             	movzx  eax,al
c0017c48:	85 c0                	test   eax,eax
c0017c4a:	75 10                	jne    c0017c5c <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017c4c:	83 ec 0c             	sub    esp,0xc
c0017c4f:	68 5b 2e 02 c0       	push   0xc0022e5b
c0017c54:	e8 e1 6f ff ff       	call   c000ec3a <KePanic(char const*)>
c0017c59:	83 c4 10             	add    esp,0x10
c0017c5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c68:	0f 30                	wrmsr  
c0017c6a:	90                   	nop
c0017c6b:	83 c4 1c             	add    esp,0x1c
c0017c6e:	c3                   	ret    

c0017c6f <HalHandleGeneralProtectionFault(void*, void*)>:
c0017c6f:	83 ec 0c             	sub    esp,0xc
c0017c72:	83 ec 0c             	sub    esp,0xc
c0017c75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c79:	e8 5d e7 ff ff       	call   c00163db <Vm::faultHandler(regs*)>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	83 c4 0c             	add    esp,0xc
c0017c84:	c3                   	ret    

c0017c85 <HalFindRSDP()>:
c0017c85:	83 ec 1c             	sub    esp,0x1c
c0017c88:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017c8d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017c92:	7e 0c                	jle    c0017ca0 <HalFindRSDP()+0x1b>
c0017c94:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017c99:	25 00 04 00 00       	and    eax,0x400
c0017c9e:	74 0d                	je     c0017cad <HalFindRSDP()+0x28>
c0017ca0:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ca5:	83 e0 fb             	and    eax,0xfffffffb
c0017ca8:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017cad:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017cb2:	83 e0 04             	and    eax,0x4
c0017cb5:	0f b6 c0             	movzx  eax,al
c0017cb8:	85 c0                	test   eax,eax
c0017cba:	75 07                	jne    c0017cc3 <HalFindRSDP()+0x3e>
c0017cbc:	b8 00 00 00 00       	mov    eax,0x0
c0017cc1:	eb 53                	jmp    c0017d16 <HalFindRSDP()+0x91>
c0017cc3:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017ccb:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017cd3:	77 2f                	ja     c0017d04 <HalFindRSDP()+0x7f>
c0017cd5:	83 ec 04             	sub    esp,0x4
c0017cd8:	6a 08                	push   0x8
c0017cda:	68 61 2e 02 c0       	push   0xc0022e61
c0017cdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ce3:	e8 98 86 fe ff       	call   c0000380 <memcmp>
c0017ce8:	83 c4 10             	add    esp,0x10
c0017ceb:	85 c0                	test   eax,eax
c0017ced:	0f 94 c0             	sete   al
c0017cf0:	0f b6 c0             	movzx  eax,al
c0017cf3:	85 c0                	test   eax,eax
c0017cf5:	74 06                	je     c0017cfd <HalFindRSDP()+0x78>
c0017cf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cfb:	eb 19                	jmp    c0017d16 <HalFindRSDP()+0x91>
c0017cfd:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017d02:	eb c7                	jmp    c0017ccb <HalFindRSDP()+0x46>
c0017d04:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d09:	83 e0 fb             	and    eax,0xfffffffb
c0017d0c:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017d11:	b8 00 00 00 00       	mov    eax,0x0
c0017d16:	83 c4 1c             	add    esp,0x1c
c0017d19:	c3                   	ret    

c0017d1a <HalHandlePageFault(void*, void*)>:
c0017d1a:	83 ec 1c             	sub    esp,0x1c
c0017d1d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d22:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d27:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d2d:	0f 20 d2             	mov    edx,cr2
c0017d30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d38:	83 ec 08             	sub    esp,0x8
c0017d3b:	52                   	push   edx
c0017d3c:	50                   	push   eax
c0017d3d:	e8 fe af ff ff       	call   c0012d40 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017d42:	83 c4 10             	add    esp,0x10
c0017d45:	83 c4 1c             	add    esp,0x1c
c0017d48:	c3                   	ret    

c0017d49 <HalHandleOpcodeFault(void*, void*)>:
c0017d49:	83 ec 1c             	sub    esp,0x1c
c0017d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d54:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017d59:	0f b6 c0             	movzx  eax,al
c0017d5c:	85 c0                	test   eax,eax
c0017d5e:	74 25                	je     c0017d85 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017d60:	83 ec 0c             	sub    esp,0xc
c0017d63:	68 58 30 02 c0       	push   0xc0023058
c0017d68:	e8 e1 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d6d:	83 c4 10             	add    esp,0x10
c0017d70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d77:	8d 50 19             	lea    edx,[eax+0x19]
c0017d7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d7e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d81:	b0 01                	mov    al,0x1
c0017d83:	eb 02                	jmp    c0017d87 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017d85:	b0 00                	mov    al,0x0
c0017d87:	83 c4 1c             	add    esp,0x1c
c0017d8a:	c3                   	ret    

c0017d8b <HalDisplayDebugInfo(void*)>:
c0017d8b:	83 ec 2c             	sub    esp,0x2c
c0017d8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d96:	0f 20 c0             	mov    eax,cr0
c0017d99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d9d:	0f 20 d0             	mov    eax,cr2
c0017da0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017da4:	0f 20 d8             	mov    eax,cr3
c0017da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017dab:	0f 20 e0             	mov    eax,cr4
c0017dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017db2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017db6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017db9:	83 ec 08             	sub    esp,0x8
c0017dbc:	50                   	push   eax
c0017dbd:	68 79 2e 02 c0       	push   0xc0022e79
c0017dc2:	e8 87 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dce:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017dd1:	83 ec 08             	sub    esp,0x8
c0017dd4:	50                   	push   eax
c0017dd5:	68 6a 2e 02 c0       	push   0xc0022e6a
c0017dda:	e8 6f f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017ddf:	83 c4 10             	add    esp,0x10
c0017de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017de6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017de9:	83 ec 08             	sub    esp,0x8
c0017dec:	50                   	push   eax
c0017ded:	68 75 2e 02 c0       	push   0xc0022e75
c0017df2:	e8 57 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017df7:	83 c4 10             	add    esp,0x10
c0017dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dfe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e01:	83 ec 08             	sub    esp,0x8
c0017e04:	50                   	push   eax
c0017e05:	68 84 2e 02 c0       	push   0xc0022e84
c0017e0a:	e8 3f f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e16:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017e19:	83 ec 08             	sub    esp,0x8
c0017e1c:	50                   	push   eax
c0017e1d:	68 8f 2e 02 c0       	push   0xc0022e8f
c0017e22:	e8 27 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	83 ec 08             	sub    esp,0x8
c0017e2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e31:	68 9a 2e 02 c0       	push   0xc0022e9a
c0017e36:	e8 13 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017e3b:	83 c4 10             	add    esp,0x10
c0017e3e:	83 ec 08             	sub    esp,0x8
c0017e41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e45:	68 a5 2e 02 c0       	push   0xc0022ea5
c0017e4a:	e8 ff f0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017e4f:	83 c4 10             	add    esp,0x10
c0017e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e56:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017e59:	c1 e0 05             	shl    eax,0x5
c0017e5c:	8d 90 a0 42 02 c0    	lea    edx,[eax-0x3ffdbd60]
c0017e62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e66:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017e69:	83 ec 04             	sub    esp,0x4
c0017e6c:	52                   	push   edx
c0017e6d:	50                   	push   eax
c0017e6e:	68 b0 2e 02 c0       	push   0xc0022eb0
c0017e73:	e8 d6 f0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e80:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e86:	83 ec 0c             	sub    esp,0xc
c0017e89:	50                   	push   eax
c0017e8a:	e8 06 92 ff ff       	call   c0011095 <setActiveTerminal(VgaText*)>
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e9d:	83 ec 08             	sub    esp,0x8
c0017ea0:	68 bf 2e 02 c0       	push   0xc0022ebf
c0017ea5:	50                   	push   eax
c0017ea6:	e8 27 95 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0017eab:	83 c4 10             	add    esp,0x10
c0017eae:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017eb3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eb9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ebd:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017ec0:	83 ec 08             	sub    esp,0x8
c0017ec3:	52                   	push   edx
c0017ec4:	50                   	push   eax
c0017ec5:	e8 c2 94 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c0017eca:	83 c4 10             	add    esp,0x10
c0017ecd:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ed2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ed8:	83 ec 08             	sub    esp,0x8
c0017edb:	68 cd 2e 02 c0       	push   0xc0022ecd
c0017ee0:	50                   	push   eax
c0017ee1:	e8 ec 94 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0017ee6:	83 c4 10             	add    esp,0x10
c0017ee9:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017eee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ef4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017ef9:	8b 12                	mov    edx,DWORD PTR [edx]
c0017efb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017efe:	83 c2 0c             	add    edx,0xc
c0017f01:	83 ec 08             	sub    esp,0x8
c0017f04:	52                   	push   edx
c0017f05:	50                   	push   eax
c0017f06:	e8 c7 94 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0017f0b:	83 c4 10             	add    esp,0x10
c0017f0e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f13:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f19:	83 ec 08             	sub    esp,0x8
c0017f1c:	68 d6 2e 02 c0       	push   0xc0022ed6
c0017f21:	50                   	push   eax
c0017f22:	e8 ab 94 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f39:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017f3c:	83 ec 08             	sub    esp,0x8
c0017f3f:	52                   	push   edx
c0017f40:	50                   	push   eax
c0017f41:	e8 46 94 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f54:	83 ec 08             	sub    esp,0x8
c0017f57:	68 de 2e 02 c0       	push   0xc0022ede
c0017f5c:	50                   	push   eax
c0017f5d:	e8 70 94 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0017f62:	83 c4 10             	add    esp,0x10
c0017f65:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f74:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017f77:	83 ec 08             	sub    esp,0x8
c0017f7a:	52                   	push   edx
c0017f7b:	50                   	push   eax
c0017f7c:	e8 0b 94 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f8f:	83 ec 08             	sub    esp,0x8
c0017f92:	68 e6 2e 02 c0       	push   0xc0022ee6
c0017f97:	50                   	push   eax
c0017f98:	e8 35 94 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fa5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017faf:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017fb2:	83 ec 08             	sub    esp,0x8
c0017fb5:	52                   	push   edx
c0017fb6:	50                   	push   eax
c0017fb7:	e8 d0 93 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c0017fbc:	83 c4 10             	add    esp,0x10
c0017fbf:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fc4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fca:	83 ec 08             	sub    esp,0x8
c0017fcd:	68 ee 2e 02 c0       	push   0xc0022eee
c0017fd2:	50                   	push   eax
c0017fd3:	e8 fa 93 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0017fd8:	83 c4 10             	add    esp,0x10
c0017fdb:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fe0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fe6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fea:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017fed:	83 ec 08             	sub    esp,0x8
c0017ff0:	52                   	push   edx
c0017ff1:	50                   	push   eax
c0017ff2:	e8 95 93 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c0017ff7:	83 c4 10             	add    esp,0x10
c0017ffa:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018005:	83 ec 08             	sub    esp,0x8
c0018008:	68 f6 2e 02 c0       	push   0xc0022ef6
c001800d:	50                   	push   eax
c001800e:	e8 bf 93 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0018013:	83 c4 10             	add    esp,0x10
c0018016:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001801b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018021:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018025:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018028:	83 ec 08             	sub    esp,0x8
c001802b:	52                   	push   edx
c001802c:	50                   	push   eax
c001802d:	e8 5a 93 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c0018032:	83 c4 10             	add    esp,0x10
c0018035:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001803a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018040:	83 ec 08             	sub    esp,0x8
c0018043:	68 fe 2e 02 c0       	push   0xc0022efe
c0018048:	50                   	push   eax
c0018049:	e8 84 93 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001804e:	83 c4 10             	add    esp,0x10
c0018051:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018056:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001805c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018060:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018063:	83 ec 08             	sub    esp,0x8
c0018066:	52                   	push   edx
c0018067:	50                   	push   eax
c0018068:	e8 1f 93 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c001806d:	83 c4 10             	add    esp,0x10
c0018070:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018075:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001807b:	83 ec 08             	sub    esp,0x8
c001807e:	68 06 2f 02 c0       	push   0xc0022f06
c0018083:	50                   	push   eax
c0018084:	e8 49 93 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0018089:	83 c4 10             	add    esp,0x10
c001808c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018091:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018097:	83 ec 08             	sub    esp,0x8
c001809a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001809e:	50                   	push   eax
c001809f:	e8 e8 92 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c00180a4:	83 c4 10             	add    esp,0x10
c00180a7:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180b2:	83 ec 08             	sub    esp,0x8
c00180b5:	68 0f 2f 02 c0       	push   0xc0022f0f
c00180ba:	50                   	push   eax
c00180bb:	e8 12 93 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c00180c0:	83 c4 10             	add    esp,0x10
c00180c3:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180ce:	83 ec 08             	sub    esp,0x8
c00180d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180d5:	50                   	push   eax
c00180d6:	e8 b1 92 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c00180db:	83 c4 10             	add    esp,0x10
c00180de:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180e9:	83 ec 08             	sub    esp,0x8
c00180ec:	68 17 2f 02 c0       	push   0xc0022f17
c00180f1:	50                   	push   eax
c00180f2:	e8 db 92 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c00180f7:	83 c4 10             	add    esp,0x10
c00180fa:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180ff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018105:	83 ec 08             	sub    esp,0x8
c0018108:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001810c:	50                   	push   eax
c001810d:	e8 7a 92 ff ff       	call   c001138c <VgaText::putx(unsigned int)>
c0018112:	83 c4 10             	add    esp,0x10
c0018115:	fa                   	cli    
c0018116:	f4                   	hlt    
c0018117:	eb fe                	jmp    c0018117 <HalDisplayDebugInfo(void*)+0x38c>

c0018119 <HalReceivedNMI()>:
c0018119:	83 ec 1c             	sub    esp,0x1c
c001811c:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0018123:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018127:	89 c2                	mov    edx,eax
c0018129:	ec                   	in     al,dx
c001812a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001812e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0018132:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018136:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001813d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018141:	89 c2                	mov    edx,eax
c0018143:	ec                   	in     al,dx
c0018144:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018148:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001814c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018150:	83 ec 0c             	sub    esp,0xc
c0018153:	68 1f 2f 02 c0       	push   0xc0022f1f
c0018158:	e8 f1 ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001815d:	83 c4 10             	add    esp,0x10
c0018160:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018165:	83 e0 10             	and    eax,0x10
c0018168:	74 10                	je     c001817a <HalReceivedNMI()+0x61>
c001816a:	83 ec 0c             	sub    esp,0xc
c001816d:	68 30 2f 02 c0       	push   0xc0022f30
c0018172:	e8 c3 6a ff ff       	call   c000ec3a <KePanic(char const*)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001817f:	83 e0 40             	and    eax,0x40
c0018182:	74 10                	je     c0018194 <HalReceivedNMI()+0x7b>
c0018184:	83 ec 0c             	sub    esp,0xc
c0018187:	68 3d 2f 02 c0       	push   0xc0022f3d
c001818c:	e8 a9 6a ff ff       	call   c000ec3a <KePanic(char const*)>
c0018191:	83 c4 10             	add    esp,0x10
c0018194:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0018198:	0f be c0             	movsx  eax,al
c001819b:	85 c0                	test   eax,eax
c001819d:	79 10                	jns    c00181af <HalReceivedNMI()+0x96>
c001819f:	83 ec 0c             	sub    esp,0xc
c00181a2:	68 47 2f 02 c0       	push   0xc0022f47
c00181a7:	e8 8e 6a ff ff       	call   c000ec3a <KePanic(char const*)>
c00181ac:	83 c4 10             	add    esp,0x10
c00181af:	90                   	nop
c00181b0:	83 c4 1c             	add    esp,0x1c
c00181b3:	c3                   	ret    

c00181b4 <HalSystemIdle()>:
c00181b4:	56                   	push   esi
c00181b5:	53                   	push   ebx
c00181b6:	83 ec 14             	sub    esp,0x14
c00181b9:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00181be:	83 e0 10             	and    eax,0x10
c00181c1:	0f b6 c0             	movzx  eax,al
c00181c4:	85 c0                	test   eax,eax
c00181c6:	74 43                	je     c001820b <HalSystemIdle()+0x57>
c00181c8:	83 ec 0c             	sub    esp,0xc
c00181cb:	68 e1 00 00 00       	push   0xe1
c00181d0:	e8 17 fa ff ff       	call   c0017bec <x86rdmsr(unsigned int)>
c00181d5:	83 c4 10             	add    esp,0x10
c00181d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00181dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00181e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181e4:	83 e0 02             	and    eax,0x2
c00181e7:	89 c3                	mov    ebx,eax
c00181e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181ed:	83 e0 00             	and    eax,0x0
c00181f0:	89 c6                	mov    esi,eax
c00181f2:	83 ec 04             	sub    esp,0x4
c00181f5:	56                   	push   esi
c00181f6:	53                   	push   ebx
c00181f7:	68 e1 00 00 00       	push   0xe1
c00181fc:	e8 29 fa ff ff       	call   c0017c2a <x86wrmsr(unsigned int, unsigned long long)>
c0018201:	83 c4 10             	add    esp,0x10
c0018204:	e8 8b 7f fe ff       	call   c0000194 <doTPAUSE>
c0018209:	eb 01                	jmp    c001820c <HalSystemIdle()+0x58>
c001820b:	f4                   	hlt    
c001820c:	90                   	nop
c001820d:	83 c4 14             	add    esp,0x14
c0018210:	5b                   	pop    ebx
c0018211:	5e                   	pop    esi
c0018212:	c3                   	ret    

c0018213 <i386SaveCoprocessor(void*)>:
c0018213:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018217:	83 c0 3f             	add    eax,0x3f
c001821a:	83 e0 c0             	and    eax,0xffffffc0
c001821d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018221:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c0018227 <i386LoadCoprocessor(void*)>:
c0018227:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001822b:	83 c0 3f             	add    eax,0x3f
c001822e:	83 e0 c0             	and    eax,0xffffffc0
c0018231:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018235:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c001823b <x87EmulHandler(regs*, void*)>:
c001823b:	53                   	push   ebx
c001823c:	83 ec 08             	sub    esp,0x8
c001823f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018244:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018248:	74 10                	je     c001825a <x87EmulHandler(regs*, void*)+0x1f>
c001824a:	83 ec 0c             	sub    esp,0xc
c001824d:	68 54 2f 02 c0       	push   0xc0022f54
c0018252:	e8 e3 69 ff ff       	call   c000ec3a <KePanic(char const*)>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	0f 20 c0             	mov    eax,cr0
c001825d:	a8 08                	test   al,0x8
c001825f:	74 59                	je     c00182ba <x87EmulHandler(regs*, void*)+0x7f>
c0018261:	0f 06                	clts   
c0018263:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018268:	85 c0                	test   eax,eax
c001826a:	74 0e                	je     c001827a <x87EmulHandler(regs*, void*)+0x3f>
c001826c:	83 ec 0c             	sub    esp,0xc
c001826f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018272:	e8 9c ff ff ff       	call   c0018213 <i386SaveCoprocessor(void*)>
c0018277:	83 c4 10             	add    esp,0x10
c001827a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018280:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018284:	75 12                	jne    c0018298 <x87EmulHandler(regs*, void*)+0x5d>
c0018286:	83 ec 0c             	sub    esp,0xc
c0018289:	68 40 02 00 00       	push   0x240
c001828e:	e8 53 66 ff ff       	call   c000e8e6 <malloc>
c0018293:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018296:	eb 10                	jmp    c00182a8 <x87EmulHandler(regs*, void*)+0x6d>
c0018298:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c001829d:	83 ec 0c             	sub    esp,0xc
c00182a0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00182a3:	e8 7f ff ff ff       	call   c0018227 <i386LoadCoprocessor(void*)>
c00182a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182ad:	83 c4 10             	add    esp,0x10
c00182b0:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c00182b5:	83 c4 08             	add    esp,0x8
c00182b8:	5b                   	pop    ebx
c00182b9:	c3                   	ret    
c00182ba:	83 ec 0c             	sub    esp,0xc
c00182bd:	68 68 2f 02 c0       	push   0xc0022f68
c00182c2:	e8 87 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00182c7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00182cf:	83 c4 18             	add    esp,0x18
c00182d2:	5b                   	pop    ebx
c00182d3:	e9 58 da ff ff       	jmp    c0015d30 <Thr::terminateFromIRQ(int)>

c00182d8 <HalInitialiseCoprocessor()>:
c00182d8:	83 ec 10             	sub    esp,0x10
c00182db:	6a 00                	push   0x0
c00182dd:	68 3b 82 01 c0       	push   0xc001823b
c00182e2:	6a 07                	push   0x7
c00182e4:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c00182ee:	e8 c2 06 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00182f3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	a8 80                	test   al,0x80
c00182fd:	74 1c                	je     c001831b <HalInitialiseCoprocessor()+0x43>
c00182ff:	c7 05 50 c7 02 c0 a8 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f7a8
c0018309:	c7 05 4c c7 02 c0 b0 f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f7b0
c0018313:	83 c4 0c             	add    esp,0xc
c0018316:	e9 9d 74 00 00       	jmp    c001f7b8 <sseInit>
c001831b:	a8 10                	test   al,0x10
c001831d:	74 1c                	je     c001833b <HalInitialiseCoprocessor()+0x63>
c001831f:	c7 05 50 c7 02 c0 f7 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f7f7
c0018329:	c7 05 4c c7 02 c0 fe f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f7fe
c0018333:	83 c4 0c             	add    esp,0xc
c0018336:	e9 ca 74 00 00       	jmp    c001f805 <x87Init>
c001833b:	50                   	push   eax
c001833c:	50                   	push   eax
c001833d:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0018343:	c7 05 50 c7 02 c0 06 6b 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016b06
c001834d:	c7 05 4c c7 02 c0 06 6b 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016b06
c0018357:	68 12 20 02 c0       	push   0xc0022012
c001835c:	e8 ed eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018361:	5a                   	pop    edx
c0018362:	59                   	pop    ecx
c0018363:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0018369:	68 12 20 02 c0       	push   0xc0022012
c001836e:	e8 db eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018373:	0f 20 c0             	mov    eax,cr0
c0018376:	83 c8 04             	or     eax,0x4
c0018379:	0f 22 c0             	mov    cr0,eax
c001837c:	83 c4 1c             	add    esp,0x1c
c001837f:	c3                   	ret    

c0018380 <HalPanic(char const*)>:
c0018380:	53                   	push   ebx
c0018381:	83 ec 10             	sub    esp,0x10
c0018384:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018388:	fa                   	cli    
c0018389:	53                   	push   ebx
c001838a:	68 7e 2f 02 c0       	push   0xc0022f7e
c001838f:	e8 ba eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018394:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c0018399:	83 c4 10             	add    esp,0x10
c001839c:	85 c0                	test   eax,eax
c001839e:	74 09                	je     c00183a9 <HalPanic(char const*)+0x29>
c00183a0:	83 ec 0c             	sub    esp,0xc
c00183a3:	53                   	push   ebx
c00183a4:	ff d0                	call   eax
c00183a6:	83 c4 10             	add    esp,0x10
c00183a9:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00183ae:	85 c0                	test   eax,eax
c00183b0:	0f 84 dc 00 00 00    	je     c0018492 <HalPanic(char const*)+0x112>
c00183b6:	52                   	push   edx
c00183b7:	6a 01                	push   0x1
c00183b9:	6a 0f                	push   0xf
c00183bb:	50                   	push   eax
c00183bc:	e8 2f 8b ff ff       	call   c0010ef0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00183c1:	59                   	pop    ecx
c00183c2:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183c8:	e8 13 8d ff ff       	call   c00110e0 <VgaText::clearScreen()>
c00183cd:	58                   	pop    eax
c00183ce:	5a                   	pop    edx
c00183cf:	68 00 24 02 c0       	push   0xc0022400
c00183d4:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183da:	e8 49 8b ff ff       	call   c0010f28 <VgaText::setTitle(char*)>
c00183df:	83 c4 0c             	add    esp,0xc
c00183e2:	6a 01                	push   0x1
c00183e4:	6a 0f                	push   0xf
c00183e6:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183ec:	e8 ff 8a ff ff       	call   c0010ef0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00183f1:	59                   	pop    ecx
c00183f2:	58                   	pop    eax
c00183f3:	68 97 2f 02 c0       	push   0xc0022f97
c00183f8:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183fe:	e8 cf 8f ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0018403:	83 c4 0c             	add    esp,0xc
c0018406:	6a 0f                	push   0xf
c0018408:	6a 01                	push   0x1
c001840a:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018410:	e8 db 8a ff ff       	call   c0010ef0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018415:	58                   	pop    eax
c0018416:	5a                   	pop    edx
c0018417:	68 a0 2f 02 c0       	push   0xc0022fa0
c001841c:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018422:	e8 ab 8f ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c0018427:	83 c4 0c             	add    esp,0xc
c001842a:	6a 01                	push   0x1
c001842c:	6a 0f                	push   0xf
c001842e:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018434:	e8 b7 8a ff ff       	call   c0010ef0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018439:	59                   	pop    ecx
c001843a:	58                   	pop    eax
c001843b:	68 e4 2f 02 c0       	push   0xc0022fe4
c0018440:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018446:	e8 87 8f ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001844b:	58                   	pop    eax
c001844c:	5a                   	pop    edx
c001844d:	68 ad 2f 02 c0       	push   0xc0022fad
c0018452:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018458:	e8 75 8f ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001845d:	59                   	pop    ecx
c001845e:	58                   	pop    eax
c001845f:	68 e7 2f 02 c0       	push   0xc0022fe7
c0018464:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001846a:	e8 63 8f ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001846f:	58                   	pop    eax
c0018470:	5a                   	pop    edx
c0018471:	53                   	push   ebx
c0018472:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018478:	e8 55 8f ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001847d:	59                   	pop    ecx
c001847e:	5b                   	pop    ebx
c001847f:	68 e4 2f 02 c0       	push   0xc0022fe4
c0018484:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001848a:	e8 43 8f ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	eb fe                	jmp    c0018492 <HalPanic(char const*)+0x112>

c0018494 <HalQueryPerformanceCounter()>:
c0018494:	31 c0                	xor    eax,eax
c0018496:	31 d2                	xor    edx,edx
c0018498:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c001849f:	75 02                	jne    c00184a3 <HalQueryPerformanceCounter()+0xf>
c00184a1:	0f 31                	rdtsc  
c00184a3:	c3                   	ret    

c00184a4 <HalInitialise()>:
c00184a4:	53                   	push   ebx
c00184a5:	83 ec 08             	sub    esp,0x8
c00184a8:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c00184af:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00184b4:	83 e0 fe             	and    eax,0xfffffffe
c00184b7:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c00184bc:	e8 db 07 00 00       	call   c0018c9c <picOpen()>
c00184c1:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c00184c8:	74 0a                	je     c00184d4 <HalInitialise()+0x30>
c00184ca:	e8 1d 07 00 00       	call   c0018bec <picDisable()>
c00184cf:	e8 bc 68 00 00       	call   c001ed90 <apicOpen()>
c00184d4:	50                   	push   eax
c00184d5:	bb 0f 00 00 00       	mov    ebx,0xf
c00184da:	6a 00                	push   0x0
c00184dc:	68 8c df 00 c0       	push   0xc000df8c
c00184e1:	6a 00                	push   0x0
c00184e3:	e8 cd 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184e8:	83 c4 0c             	add    esp,0xc
c00184eb:	6a 00                	push   0x0
c00184ed:	68 8c df 00 c0       	push   0xc000df8c
c00184f2:	6a 01                	push   0x1
c00184f4:	e8 bc 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184f9:	83 c4 0c             	add    esp,0xc
c00184fc:	6a 00                	push   0x0
c00184fe:	68 7c df 00 c0       	push   0xc000df7c
c0018503:	6a 02                	push   0x2
c0018505:	e8 ab 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001850a:	83 c4 0c             	add    esp,0xc
c001850d:	6a 00                	push   0x0
c001850f:	68 8c df 00 c0       	push   0xc000df8c
c0018514:	6a 03                	push   0x3
c0018516:	e8 9a 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001851b:	83 c4 0c             	add    esp,0xc
c001851e:	6a 00                	push   0x0
c0018520:	68 8c df 00 c0       	push   0xc000df8c
c0018525:	6a 04                	push   0x4
c0018527:	e8 89 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001852c:	83 c4 0c             	add    esp,0xc
c001852f:	6a 00                	push   0x0
c0018531:	68 8c df 00 c0       	push   0xc000df8c
c0018536:	6a 05                	push   0x5
c0018538:	e8 78 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001853d:	83 c4 0c             	add    esp,0xc
c0018540:	6a 00                	push   0x0
c0018542:	68 c0 df 00 c0       	push   0xc000dfc0
c0018547:	6a 06                	push   0x6
c0018549:	e8 67 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001854e:	83 c4 0c             	add    esp,0xc
c0018551:	6a 00                	push   0x0
c0018553:	68 14 e0 00 c0       	push   0xc000e014
c0018558:	6a 08                	push   0x8
c001855a:	e8 56 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001855f:	83 c4 0c             	add    esp,0xc
c0018562:	6a 00                	push   0x0
c0018564:	68 8c df 00 c0       	push   0xc000df8c
c0018569:	6a 09                	push   0x9
c001856b:	e8 45 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018570:	83 c4 0c             	add    esp,0xc
c0018573:	6a 00                	push   0x0
c0018575:	68 8c df 00 c0       	push   0xc000df8c
c001857a:	6a 0a                	push   0xa
c001857c:	e8 34 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018581:	83 c4 0c             	add    esp,0xc
c0018584:	6a 00                	push   0x0
c0018586:	68 8c df 00 c0       	push   0xc000df8c
c001858b:	6a 0b                	push   0xb
c001858d:	e8 23 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018592:	83 c4 0c             	add    esp,0xc
c0018595:	6a 00                	push   0x0
c0018597:	68 d4 de 00 c0       	push   0xc000ded4
c001859c:	6a 0d                	push   0xd
c001859e:	e8 12 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185a3:	83 c4 0c             	add    esp,0xc
c00185a6:	6a 00                	push   0x0
c00185a8:	68 28 df 00 c0       	push   0xc000df28
c00185ad:	6a 0e                	push   0xe
c00185af:	e8 01 04 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185b4:	83 c4 10             	add    esp,0x10
c00185b7:	50                   	push   eax
c00185b8:	6a 00                	push   0x0
c00185ba:	68 8c df 00 c0       	push   0xc000df8c
c00185bf:	53                   	push   ebx
c00185c0:	43                   	inc    ebx
c00185c1:	e8 ef 03 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185c6:	83 c4 10             	add    esp,0x10
c00185c9:	83 fb 1e             	cmp    ebx,0x1e
c00185cc:	75 e9                	jne    c00185b7 <HalInitialise()+0x113>
c00185ce:	50                   	push   eax
c00185cf:	6a 00                	push   0x0
c00185d1:	68 7c 0d 01 c0       	push   0xc0010d7c
c00185d6:	6a 60                	push   0x60
c00185d8:	e8 d8 03 00 00       	call   c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185dd:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00185e2:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00185ec:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00185f3:	e8 ee 62 ff ff       	call   c000e8e6 <malloc>
c00185f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00185fb:	89 c3                	mov    ebx,eax
c00185fd:	e8 02 0e 00 00       	call   c0019404 <RTC::RTC()>
c0018602:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001860c:	5a                   	pop    edx
c001860d:	59                   	pop    ecx
c001860e:	53                   	push   ebx
c001860f:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0018615:	e8 28 0a ff ff       	call   c0009042 <Device::addChild(Device*)>
c001861a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001861c:	6a 00                	push   0x0
c001861e:	6a 00                	push   0x0
c0018620:	6a 00                	push   0x0
c0018622:	53                   	push   ebx
c0018623:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018626:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001862b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018631:	83 c4 28             	add    esp,0x28
c0018634:	5b                   	pop    ebx
c0018635:	c3                   	ret    

c0018636 <HalMakeBeep(int)>:
c0018636:	53                   	push   ebx
c0018637:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001863b:	85 db                	test   ebx,ebx
c001863d:	75 07                	jne    c0018646 <HalMakeBeep(int)+0x10>
c001863f:	e4 61                	in     al,0x61
c0018641:	83 e0 fc             	and    eax,0xfffffffc
c0018644:	eb 26                	jmp    c001866c <HalMakeBeep(int)+0x36>
c0018646:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001864b:	99                   	cdq    
c001864c:	f7 fb                	idiv   ebx
c001864e:	89 c1                	mov    ecx,eax
c0018650:	b0 b6                	mov    al,0xb6
c0018652:	e6 43                	out    0x43,al
c0018654:	88 c8                	mov    al,cl
c0018656:	e6 42                	out    0x42,al
c0018658:	89 c8                	mov    eax,ecx
c001865a:	c1 e8 08             	shr    eax,0x8
c001865d:	e6 42                	out    0x42,al
c001865f:	e4 61                	in     al,0x61
c0018661:	89 c2                	mov    edx,eax
c0018663:	83 ca 03             	or     edx,0x3
c0018666:	38 d0                	cmp    al,dl
c0018668:	74 04                	je     c001866e <HalMakeBeep(int)+0x38>
c001866a:	88 d0                	mov    al,dl
c001866c:	e6 61                	out    0x61,al
c001866e:	5b                   	pop    ebx
c001866f:	c3                   	ret    

c0018670 <HalGetRand()>:
c0018670:	31 c0                	xor    eax,eax
c0018672:	c3                   	ret    

c0018673 <HalEndOfInterrupt(int)>:
c0018673:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c001867a:	74 1d                	je     c0018699 <HalEndOfInterrupt(int)+0x26>
c001867c:	83 ec 18             	sub    esp,0x18
c001867f:	6a 1b                	push   0x1b
c0018681:	e8 66 f5 ff ff       	call   c0017bec <x86rdmsr(unsigned int)>
c0018686:	25 00 f0 ff ff       	and    eax,0xfffff000
c001868b:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018695:	83 c4 1c             	add    esp,0x1c
c0018698:	c3                   	ret    
c0018699:	e9 82 07 00 00       	jmp    c0018e20 <picEOI(int)>

c001869e <HalRestart()>:
c001869e:	c3                   	ret    

c001869f <HalShutdown()>:
c001869f:	c3                   	ret    

c00186a0 <HalSleep()>:
c00186a0:	c3                   	ret    
c00186a1:	90                   	nop

c00186a2 <CPU::CPU()>:
c00186a2:	83 ec 0c             	sub    esp,0xc
c00186a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186a9:	83 ec 08             	sub    esp,0x8
c00186ac:	68 a9 2d 02 c0       	push   0xc0022da9
c00186b1:	50                   	push   eax
c00186b2:	e8 ed 0a ff ff       	call   c00091a4 <Device::Device(char const*)>
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	ba 84 30 02 c0       	mov    edx,0xc0023084
c00186bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186c3:	89 10                	mov    DWORD PTR [eax],edx
c00186c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186c9:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00186d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186d7:	05 64 01 00 00       	add    eax,0x164
c00186dc:	83 ec 0c             	sub    esp,0xc
c00186df:	50                   	push   eax
c00186e0:	e8 83 59 ff ff       	call   c000e068 <GDT::GDT()>
c00186e5:	83 c4 10             	add    esp,0x10
c00186e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186ec:	05 68 09 00 00       	add    eax,0x968
c00186f1:	83 ec 0c             	sub    esp,0xc
c00186f4:	50                   	push   eax
c00186f5:	e8 be 5b ff ff       	call   c000e2b8 <IDT::IDT()>
c00186fa:	83 c4 10             	add    esp,0x10
c00186fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018701:	05 68 11 00 00       	add    eax,0x1168
c0018706:	83 ec 0c             	sub    esp,0xc
c0018709:	50                   	push   eax
c001870a:	e8 45 91 ff ff       	call   c0011854 <TSS::TSS()>
c001870f:	83 c4 10             	add    esp,0x10
c0018712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018716:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018720:	90                   	nop
c0018721:	83 c4 0c             	add    esp,0xc
c0018724:	c3                   	ret    
c0018725:	90                   	nop

c0018726 <CPU::setupSMEP()>:
c0018726:	0f 20 e0             	mov    eax,cr4
c0018729:	0d 00 00 10 00       	or     eax,0x100000
c001872e:	0f 22 e0             	mov    cr4,eax
c0018731:	c3                   	ret    

c0018732 <CPU::setupUMIP()>:
c0018732:	0f 20 e0             	mov    eax,cr4
c0018735:	80 cc 08             	or     ah,0x8
c0018738:	0f 22 e0             	mov    cr4,eax
c001873b:	c3                   	ret    

c001873c <CPU::setupTSC()>:
c001873c:	0f 20 e0             	mov    eax,cr4
c001873f:	83 c8 04             	or     eax,0x4
c0018742:	0f 22 e0             	mov    cr4,eax
c0018745:	c3                   	ret    

c0018746 <CPU::setupLargePages()>:
c0018746:	0f 20 e0             	mov    eax,cr4
c0018749:	83 c8 10             	or     eax,0x10
c001874c:	0f 22 e0             	mov    cr4,eax
c001874f:	c3                   	ret    

c0018750 <CPU::setupPAT()>:
c0018750:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c0018757:	74 28                	je     c0018781 <CPU::setupPAT()+0x31>
c0018759:	53                   	push   ebx
c001875a:	83 ec 14             	sub    esp,0x14
c001875d:	68 77 02 00 00       	push   0x277
c0018762:	e8 85 f4 ff ff       	call   c0017bec <x86rdmsr(unsigned int)>
c0018767:	83 c4 0c             	add    esp,0xc
c001876a:	83 e2 f8             	and    edx,0xfffffff8
c001876d:	83 ca 01             	or     edx,0x1
c0018770:	52                   	push   edx
c0018771:	50                   	push   eax
c0018772:	68 77 02 00 00       	push   0x277
c0018777:	e8 ae f4 ff ff       	call   c0017c2a <x86wrmsr(unsigned int, unsigned long long)>
c001877c:	83 c4 18             	add    esp,0x18
c001877f:	5b                   	pop    ebx
c0018780:	c3                   	ret    
c0018781:	c3                   	ret    

c0018782 <CPU::setupMTRR()>:
c0018782:	c3                   	ret    
c0018783:	90                   	nop

c0018784 <CPU::setupGlobalPages()>:
c0018784:	0f 20 e0             	mov    eax,cr4
c0018787:	0c 80                	or     al,0x80
c0018789:	0f 22 e0             	mov    cr4,eax
c001878c:	c3                   	ret    
c001878d:	90                   	nop

c001878e <CPU::allowUsermodeDataAccess()>:
c001878e:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c0018795:	74 03                	je     c001879a <CPU::allowUsermodeDataAccess()+0xc>
c0018797:	0f 01 cb             	stac   
c001879a:	c3                   	ret    
c001879b:	90                   	nop

c001879c <CPU::prohibitUsermodeDataAccess()>:
c001879c:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00187a3:	74 03                	je     c00187a8 <CPU::prohibitUsermodeDataAccess()+0xc>
c00187a5:	0f 01 ca             	clac   
c00187a8:	c3                   	ret    
c00187a9:	90                   	nop

c00187aa <CPU::setupSMAP()>:
c00187aa:	0f 20 e0             	mov    eax,cr4
c00187ad:	0d 00 00 20 00       	or     eax,0x200000
c00187b2:	0f 22 e0             	mov    cr4,eax
c00187b5:	eb e5                	jmp    c001879c <CPU::prohibitUsermodeDataAccess()>
c00187b7:	90                   	nop

c00187b8 <CPU::setupFeatures()>:
c00187b8:	53                   	push   ebx
c00187b9:	83 ec 08             	sub    esp,0x8
c00187bc:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c00187c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187c7:	74 18                	je     c00187e1 <CPU::setupFeatures()+0x29>
c00187c9:	83 ec 0c             	sub    esp,0xc
c00187cc:	68 f2 2f 02 c0       	push   0xc0022ff2
c00187d1:	e8 78 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00187d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187d9:	e8 54 ff ff ff       	call   c0018732 <CPU::setupUMIP()>
c00187de:	83 c4 10             	add    esp,0x10
c00187e1:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c00187e8:	74 18                	je     c0018802 <CPU::setupFeatures()+0x4a>
c00187ea:	83 ec 0c             	sub    esp,0xc
c00187ed:	68 fc 2f 02 c0       	push   0xc0022ffc
c00187f2:	e8 57 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00187f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187fa:	e8 3d ff ff ff       	call   c001873c <CPU::setupTSC()>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c0018809:	74 18                	je     c0018823 <CPU::setupFeatures()+0x6b>
c001880b:	83 ec 0c             	sub    esp,0xc
c001880e:	68 05 30 02 c0       	push   0xc0023005
c0018813:	e8 36 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001881b:	e8 26 ff ff ff       	call   c0018746 <CPU::setupLargePages()>
c0018820:	83 c4 10             	add    esp,0x10
c0018823:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c001882a:	74 18                	je     c0018844 <CPU::setupFeatures()+0x8c>
c001882c:	83 ec 0c             	sub    esp,0xc
c001882f:	68 0e 30 02 c0       	push   0xc002300e
c0018834:	e8 15 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001883c:	e8 43 ff ff ff       	call   c0018784 <CPU::setupGlobalPages()>
c0018841:	83 c4 10             	add    esp,0x10
c0018844:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c001884b:	74 18                	je     c0018865 <CPU::setupFeatures()+0xad>
c001884d:	83 ec 0c             	sub    esp,0xc
c0018850:	68 20 30 02 c0       	push   0xc0023020
c0018855:	e8 f4 e6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001885a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001885d:	e8 ee fe ff ff       	call   c0018750 <CPU::setupPAT()>
c0018862:	83 c4 10             	add    esp,0x10
c0018865:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c001886c:	74 11                	je     c001887f <CPU::setupFeatures()+0xc7>
c001886e:	c7 44 24 10 29 30 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023029
c0018876:	83 c4 08             	add    esp,0x8
c0018879:	5b                   	pop    ebx
c001887a:	e9 cf e6 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c001887f:	83 c4 08             	add    esp,0x8
c0018882:	5b                   	pop    ebx
c0018883:	c3                   	ret    

c0018884 <CPU::open(int, int, void*)>:
c0018884:	55                   	push   ebp
c0018885:	57                   	push   edi
c0018886:	56                   	push   esi
c0018887:	53                   	push   ebx
c0018888:	83 ec 18             	sub    esp,0x18
c001888b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001888f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018893:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018897:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001889d:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c00188a3:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c00188a9:	50                   	push   eax
c00188aa:	e8 1b 58 ff ff       	call   c000e0ca <GDT::setup()>
c00188af:	83 c4 0c             	add    esp,0xc
c00188b2:	6a 00                	push   0x0
c00188b4:	68 ef be ad de       	push   0xdeadbeef
c00188b9:	55                   	push   ebp
c00188ba:	e8 d9 8f ff ff       	call   c0011898 <TSS::setup(unsigned long, unsigned long)>
c00188bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00188c2:	e8 b1 8f ff ff       	call   c0011878 <TSS::flush()>
c00188c7:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c00188cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00188d0:	e8 59 5a ff ff       	call   c000e32e <IDT::setup()>
c00188d5:	b8 00 04 00 00       	mov    eax,0x400
c00188da:	0f 23 f8             	mov    dr7,eax
c00188dd:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c00188e7:	e8 48 65 ff ff       	call   c000ee34 <Phys::allocatePage()>
c00188ec:	83 c4 10             	add    esp,0x10
c00188ef:	85 f6                	test   esi,esi
c00188f1:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c00188f7:	89 38                	mov    DWORD PTR [eax],edi
c00188f9:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00188ff:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018902:	74 10                	je     c0018914 <CPU::open(int, int, void*)+0x90>
c0018904:	50                   	push   eax
c0018905:	50                   	push   eax
c0018906:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001890c:	56                   	push   esi
c001890d:	e8 66 99 ff ff       	call   c0012278 <VAS::setCPUSpecific(unsigned long)>
c0018912:	eb 0d                	jmp    c0018921 <CPU::open(int, int, void*)+0x9d>
c0018914:	83 ec 0c             	sub    esp,0xc
c0018917:	68 33 30 02 c0       	push   0xc0023033
c001891c:	e8 19 63 ff ff       	call   c000ec3a <KePanic(char const*)>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	83 ec 0c             	sub    esp,0xc
c0018927:	68 41 30 02 c0       	push   0xc0023041
c001892c:	e8 72 3c ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c0018931:	e8 6e fb ff ff       	call   c00184a4 <HalInitialise()>
c0018936:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c001893b:	83 e0 10             	and    eax,0x10
c001893e:	83 f8 01             	cmp    eax,0x1
c0018941:	19 c0                	sbb    eax,eax
c0018943:	83 e0 46             	and    eax,0x46
c0018946:	83 c0 1e             	add    eax,0x1e
c0018949:	89 04 24             	mov    DWORD PTR [esp],eax
c001894c:	e8 d4 1d ff ff       	call   c000a725 <setupTimer(int)>
c0018951:	83 c4 10             	add    esp,0x10
c0018954:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c001895b:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018961:	74 0c                	je     c001896f <CPU::open(int, int, void*)+0xeb>
c0018963:	83 ec 0c             	sub    esp,0xc
c0018966:	53                   	push   ebx
c0018967:	e8 4c fe ff ff       	call   c00187b8 <CPU::setupFeatures()>
c001896c:	83 c4 10             	add    esp,0x10
c001896f:	83 c4 0c             	add    esp,0xc
c0018972:	31 c0                	xor    eax,eax
c0018974:	5b                   	pop    ebx
c0018975:	5e                   	pop    esi
c0018976:	5f                   	pop    edi
c0018977:	5d                   	pop    ebp
c0018978:	c3                   	ret    

c0018979 <convertLegacyIRQNumber(int)>:
c0018979:	83 ec 0c             	sub    esp,0xc
c001897c:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018987:	74 0c                	je     c0018995 <convertLegacyIRQNumber(int)+0x1c>
c0018989:	83 f8 0f             	cmp    eax,0xf
c001898c:	7f 0b                	jg     c0018999 <convertLegacyIRQNumber(int)+0x20>
c001898e:	0f b6 80 28 3b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc4d8]
c0018995:	83 c4 0c             	add    esp,0xc
c0018998:	c3                   	ret    
c0018999:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001899d:	83 ec 0c             	sub    esp,0xc
c00189a0:	68 a8 30 02 c0       	push   0xc00230a8
c00189a5:	e8 90 62 ff ff       	call   c000ec3a <KePanic(char const*)>
c00189aa:	83 c4 10             	add    esp,0x10
c00189ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189b1:	83 c4 0c             	add    esp,0xc
c00189b4:	c3                   	ret    

c00189b5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c00189b5:	56                   	push   esi
c00189b6:	31 c0                	xor    eax,eax
c00189b8:	53                   	push   ebx
c00189b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00189c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00189c5:	89 ca                	mov    edx,ecx
c00189c7:	c1 e2 04             	shl    edx,0x4
c00189ca:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c00189d2:	74 17                	je     c00189eb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c00189d4:	83 c0 01             	add    eax,0x1
c00189d7:	83 f8 04             	cmp    eax,0x4
c00189da:	75 ee                	jne    c00189ca <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c00189dc:	c7 44 24 0c 09 31 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023109
c00189e4:	5b                   	pop    ebx
c00189e5:	5e                   	pop    esi
c00189e6:	e9 4f 62 ff ff       	jmp    c000ec3a <KePanic(char const*)>
c00189eb:	8d 04 88             	lea    eax,[eax+ecx*4]
c00189ee:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c00189f5:	5b                   	pop    ebx
c00189f6:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c00189fd:	5e                   	pop    esi
c00189fe:	c3                   	ret    

c00189ff <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00189ff:	55                   	push   ebp
c0018a00:	57                   	push   edi
c0018a01:	56                   	push   esi
c0018a02:	53                   	push   ebx
c0018a03:	83 ec 0c             	sub    esp,0xc
c0018a06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0018a0a:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018a11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a15:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018a18:	74 57                	je     c0018a71 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018a1a:	84 c0                	test   al,al
c0018a1c:	89 c7                	mov    edi,eax
c0018a1e:	74 1d                	je     c0018a3d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018a20:	83 fe 0f             	cmp    esi,0xf
c0018a23:	0f 8f d9 00 00 00    	jg     c0018b02 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c0018a29:	0f b6 b6 28 3b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc4d8]
c0018a30:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c0018a38:	d1 ef                	shr    edi,1
c0018a3a:	83 e7 01             	and    edi,0x1
c0018a3d:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018a42:	83 ec 08             	sub    esp,0x8
c0018a45:	31 db                	xor    ebx,ebx
c0018a47:	50                   	push   eax
c0018a48:	68 16 31 02 c0       	push   0xc0023116
c0018a4d:	e8 fc e4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018a52:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018a57:	83 c4 10             	add    esp,0x10
c0018a5a:	85 c0                	test   eax,eax
c0018a5c:	7f 59                	jg     c0018ab7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c0018a5e:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018a61:	83 ec 0c             	sub    esp,0xc
c0018a64:	68 2d 31 02 c0       	push   0xc002312d
c0018a69:	e8 cc 61 ff ff       	call   c000ec3a <KePanic(char const*)>
c0018a6e:	83 c4 10             	add    esp,0x10
c0018a71:	89 e8                	mov    eax,ebp
c0018a73:	31 d2                	xor    edx,edx
c0018a75:	c1 e0 04             	shl    eax,0x4
c0018a78:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c0018a7f:	85 c9                	test   ecx,ecx
c0018a81:	0f 84 92 00 00 00    	je     c0018b19 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c0018a87:	83 c2 01             	add    edx,0x1
c0018a8a:	83 fa 04             	cmp    edx,0x4
c0018a8d:	75 e9                	jne    c0018a78 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c0018a8f:	83 ec 0c             	sub    esp,0xc
c0018a92:	68 e4 30 02 c0       	push   0xc00230e4
c0018a97:	e8 9e 61 ff ff       	call   c000ec3a <KePanic(char const*)>
c0018a9c:	83 c4 10             	add    esp,0x10
c0018a9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018aa4:	83 c4 0c             	add    esp,0xc
c0018aa7:	5b                   	pop    ebx
c0018aa8:	5e                   	pop    esi
c0018aa9:	5f                   	pop    edi
c0018aaa:	5d                   	pop    ebp
c0018aab:	c3                   	ret    
c0018aac:	83 c3 01             	add    ebx,0x1
c0018aaf:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c0018ab5:	7e a7                	jle    c0018a5e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c0018ab7:	8b 2c 9d 00 d1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f00]
c0018abe:	83 ec 08             	sub    esp,0x8
c0018ac1:	56                   	push   esi
c0018ac2:	55                   	push   ebp
c0018ac3:	e8 44 64 00 00       	call   c001ef0c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018ac8:	83 c4 10             	add    esp,0x10
c0018acb:	84 c0                	test   al,al
c0018acd:	74 dd                	je     c0018aac <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018acf:	89 f8                	mov    eax,edi
c0018ad1:	83 ec 04             	sub    esp,0x4
c0018ad4:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018adb:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018ade:	0f b6 f8             	movzx  edi,al
c0018ae1:	57                   	push   edi
c0018ae2:	89 e8                	mov    eax,ebp
c0018ae4:	6a 00                	push   0x0
c0018ae6:	0f b6 c0             	movzx  eax,al
c0018ae9:	50                   	push   eax
c0018aea:	89 f0                	mov    eax,esi
c0018aec:	6a 00                	push   0x0
c0018aee:	0f b6 c0             	movzx  eax,al
c0018af1:	6a 00                	push   0x0
c0018af3:	50                   	push   eax
c0018af4:	53                   	push   ebx
c0018af5:	e8 7e 65 00 00       	call   c001f078 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018afa:	83 c4 20             	add    esp,0x20
c0018afd:	e9 6f ff ff ff       	jmp    c0018a71 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018b02:	83 ec 0c             	sub    esp,0xc
c0018b05:	31 ff                	xor    edi,edi
c0018b07:	68 a8 30 02 c0       	push   0xc00230a8
c0018b0c:	e8 29 61 ff ff       	call   c000ec3a <KePanic(char const*)>
c0018b11:	83 c4 10             	add    esp,0x10
c0018b14:	e9 24 ff ff ff       	jmp    c0018a3d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018b19:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0018b1c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b20:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018b27:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018b2b:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018b32:	83 c4 0c             	add    esp,0xc
c0018b35:	89 f0                	mov    eax,esi
c0018b37:	5b                   	pop    ebx
c0018b38:	5e                   	pop    esi
c0018b39:	5f                   	pop    edi
c0018b3a:	5d                   	pop    ebp
c0018b3b:	c3                   	ret    

c0018b3c <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018b44:	c1 e0 04             	shl    eax,0x4
c0018b47:	8d 50 10             	lea    edx,[eax+0x10]
c0018b4a:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018b50:	74 08                	je     c0018b5a <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018b52:	83 c0 04             	add    eax,0x4
c0018b55:	39 d0                	cmp    eax,edx
c0018b57:	75 f1                	jne    c0018b4a <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018b59:	c3                   	ret    
c0018b5a:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018b64:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018b6e:	eb e2                	jmp    c0018b52 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018b70 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018b70:	56                   	push   esi
c0018b71:	53                   	push   ebx
c0018b72:	83 ec 04             	sub    esp,0x4
c0018b75:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018b7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018b82:	74 09                	je     c0018b8d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b84:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018b8b:	75 34                	jne    c0018bc1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0018b8d:	8d 43 20             	lea    eax,[ebx+0x20]
c0018b90:	c1 e0 04             	shl    eax,0x4
c0018b93:	8d 50 10             	lea    edx,[eax+0x10]
c0018b96:	39 b0 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],esi
c0018b9c:	74 0d                	je     c0018bab <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0018b9e:	83 c0 04             	add    eax,0x4
c0018ba1:	39 d0                	cmp    eax,edx
c0018ba3:	75 f1                	jne    c0018b96 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c0018ba5:	83 c4 04             	add    esp,0x4
c0018ba8:	5b                   	pop    ebx
c0018ba9:	5e                   	pop    esi
c0018baa:	c3                   	ret    
c0018bab:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018bb5:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018bbf:	eb dd                	jmp    c0018b9e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c0018bc1:	83 fb 0f             	cmp    ebx,0xf
c0018bc4:	7f 09                	jg     c0018bcf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c0018bc6:	0f b6 9b 28 3b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc4d8]
c0018bcd:	eb be                	jmp    c0018b8d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018bcf:	83 ec 0c             	sub    esp,0xc
c0018bd2:	68 3a 31 02 c0       	push   0xc002313a
c0018bd7:	e8 5e 60 ff ff       	call   c000ec3a <KePanic(char const*)>
c0018bdc:	83 c4 10             	add    esp,0x10
c0018bdf:	eb ac                	jmp    c0018b8d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018be1:	66 90                	xchg   ax,ax
c0018be3:	90                   	nop

c0018be4 <picIoWait()>:
c0018be4:	eb 00                	jmp    c0018be6 <picIoWait()+0x2>
c0018be6:	eb 00                	jmp    c0018be8 <picIoWait()+0x4>
c0018be8:	90                   	nop
c0018be9:	c3                   	ret    
c0018bea:	66 90                	xchg   ax,ax

c0018bec <picDisable()>:
c0018bec:	83 ec 10             	sub    esp,0x10
c0018bef:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018bf6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018bfb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018c04:	ee                   	out    dx,al
c0018c05:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018c0c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018c11:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c15:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018c1a:	ee                   	out    dx,al
c0018c1b:	90                   	nop
c0018c1c:	83 c4 10             	add    esp,0x10
c0018c1f:	c3                   	ret    

c0018c20 <picGetIRQReg(int)>:
c0018c20:	83 ec 10             	sub    esp,0x10
c0018c23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c27:	0f b6 c0             	movzx  eax,al
c0018c2a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018c31:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018c35:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018c39:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018c3e:	ee                   	out    dx,al
c0018c3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c43:	0f b6 c0             	movzx  eax,al
c0018c46:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018c4d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018c51:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018c55:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018c5a:	ee                   	out    dx,al
c0018c5b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018c62:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018c67:	89 c2                	mov    edx,eax
c0018c69:	ec                   	in     al,dx
c0018c6a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018c6e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c72:	0f b6 c0             	movzx  eax,al
c0018c75:	c1 e0 08             	shl    eax,0x8
c0018c78:	89 c1                	mov    ecx,eax
c0018c7a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018c81:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018c86:	89 c2                	mov    edx,eax
c0018c88:	ec                   	in     al,dx
c0018c89:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018c8d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c91:	0f b6 c0             	movzx  eax,al
c0018c94:	09 c8                	or     eax,ecx
c0018c96:	83 c4 10             	add    esp,0x10
c0018c99:	c3                   	ret    
c0018c9a:	66 90                	xchg   ax,ax

c0018c9c <picOpen()>:
c0018c9c:	83 ec 50             	sub    esp,0x50
c0018c9f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018ca6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018cab:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018caf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cb3:	ee                   	out    dx,al
c0018cb4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018cbb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018cc0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018cc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018cc8:	ee                   	out    dx,al
c0018cc9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018cd1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018cd9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018ce0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ce4:	89 c2                	mov    edx,eax
c0018ce6:	ec                   	in     al,dx
c0018ce7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018ceb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018cef:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018cf3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018cfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cfe:	89 c2                	mov    edx,eax
c0018d00:	ec                   	in     al,dx
c0018d01:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018d05:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018d09:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018d0d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018d14:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018d19:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018d1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d21:	ee                   	out    dx,al
c0018d22:	e8 bd fe ff ff       	call   c0018be4 <picIoWait()>
c0018d27:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018d2e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018d33:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018d37:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d3b:	ee                   	out    dx,al
c0018d3c:	e8 a3 fe ff ff       	call   c0018be4 <picIoWait()>
c0018d41:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018d45:	0f b6 c0             	movzx  eax,al
c0018d48:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018d4f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018d53:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018d57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d5b:	ee                   	out    dx,al
c0018d5c:	e8 83 fe ff ff       	call   c0018be4 <picIoWait()>
c0018d61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018d65:	0f b6 c0             	movzx  eax,al
c0018d68:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018d6f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018d73:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018d77:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018d7b:	ee                   	out    dx,al
c0018d7c:	e8 63 fe ff ff       	call   c0018be4 <picIoWait()>
c0018d81:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018d88:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018d8d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018d91:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d95:	ee                   	out    dx,al
c0018d96:	e8 49 fe ff ff       	call   c0018be4 <picIoWait()>
c0018d9b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018da2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018da7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018dab:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018daf:	ee                   	out    dx,al
c0018db0:	e8 2f fe ff ff       	call   c0018be4 <picIoWait()>
c0018db5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018dbc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018dc1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018dc5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018dc9:	ee                   	out    dx,al
c0018dca:	e8 15 fe ff ff       	call   c0018be4 <picIoWait()>
c0018dcf:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018dd6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018ddb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018ddf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018de3:	ee                   	out    dx,al
c0018de4:	e8 fb fd ff ff       	call   c0018be4 <picIoWait()>
c0018de9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018dee:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018df5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018df9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018dfd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018e01:	ee                   	out    dx,al
c0018e02:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018e07:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018e0e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e12:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018e16:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018e1a:	ee                   	out    dx,al
c0018e1b:	90                   	nop
c0018e1c:	83 c4 50             	add    esp,0x50
c0018e1f:	c3                   	ret    

c0018e20 <picEOI(int)>:
c0018e20:	83 ec 10             	sub    esp,0x10
c0018e23:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018e28:	75 1e                	jne    c0018e48 <picEOI(int)+0x28>
c0018e2a:	6a 0b                	push   0xb
c0018e2c:	e8 ef fd ff ff       	call   c0018c20 <picGetIRQReg(int)>
c0018e31:	83 c4 04             	add    esp,0x4
c0018e34:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018e39:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018e3e:	25 80 00 00 00       	and    eax,0x80
c0018e43:	74 73                	je     c0018eb8 <picEOI(int)+0x98>
c0018e45:	8d 76 00             	lea    esi,[esi+0x0]
c0018e48:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018e4d:	75 31                	jne    c0018e80 <picEOI(int)+0x60>
c0018e4f:	6a 0b                	push   0xb
c0018e51:	e8 ca fd ff ff       	call   c0018c20 <picGetIRQReg(int)>
c0018e56:	83 c4 04             	add    esp,0x4
c0018e59:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018e5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e62:	98                   	cwde   
c0018e63:	85 c0                	test   eax,eax
c0018e65:	78 19                	js     c0018e80 <picEOI(int)+0x60>
c0018e67:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018e6e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018e73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018e7c:	ee                   	out    dx,al
c0018e7d:	eb 3d                	jmp    c0018ebc <picEOI(int)+0x9c>
c0018e7f:	90                   	nop
c0018e80:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018e85:	7e 19                	jle    c0018ea0 <picEOI(int)+0x80>
c0018e87:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018e8e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018e93:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018e97:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018e9c:	ee                   	out    dx,al
c0018e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018ea7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018eac:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018eb0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018eb5:	ee                   	out    dx,al
c0018eb6:	eb 04                	jmp    c0018ebc <picEOI(int)+0x9c>
c0018eb8:	90                   	nop
c0018eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ebc:	83 c4 10             	add    esp,0x10
c0018ebf:	c3                   	ret    

c0018ec0 <RTC::open(int, int, void*)>:
c0018ec0:	31 c0                	xor    eax,eax
c0018ec2:	c3                   	ret    
c0018ec3:	90                   	nop

c0018ec4 <RTC::close(int, int, void*)>:
c0018ec4:	31 c0                	xor    eax,eax
c0018ec6:	c3                   	ret    
c0018ec7:	90                   	nop

c0018ec8 <RTC::timeInSecondsUTC()>:
c0018ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ecc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018ed2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018ed8:	c3                   	ret    
c0018ed9:	90                   	nop

c0018eda <RTC::timeInDatetimeUTC()>:
c0018eda:	53                   	push   ebx
c0018edb:	83 ec 14             	sub    esp,0x14
c0018ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ee2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018ee6:	8b 10                	mov    edx,DWORD PTR [eax]
c0018ee8:	50                   	push   eax
c0018ee9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018eec:	83 c4 0c             	add    esp,0xc
c0018eef:	52                   	push   edx
c0018ef0:	50                   	push   eax
c0018ef1:	53                   	push   ebx
c0018ef2:	e8 bf fe fe ff       	call   c0008db6 <secondsToDatetime(unsigned long long)>
c0018ef7:	89 d8                	mov    eax,ebx
c0018ef9:	83 c4 14             	add    esp,0x14
c0018efc:	5b                   	pop    ebx
c0018efd:	c2 04 00             	ret    0x4

c0018f00 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018f00:	56                   	push   esi
c0018f01:	53                   	push   ebx
c0018f02:	83 ec 14             	sub    esp,0x14
c0018f05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018f09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f0b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018f0e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f12:	52                   	push   edx
c0018f13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f1b:	50                   	push   eax
c0018f1c:	e8 95 fe fe ff       	call   c0008db6 <secondsToDatetime(unsigned long long)>
c0018f21:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018f25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f2d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018f31:	89 f0                	mov    eax,esi
c0018f33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018f37:	83 c4 20             	add    esp,0x20
c0018f3a:	5b                   	pop    ebx
c0018f3b:	5e                   	pop    esi
c0018f3c:	ff e0                	jmp    eax

c0018f3e <RTC::~RTC()>:
c0018f3e:	83 ec 0c             	sub    esp,0xc
c0018f41:	ba 64 31 02 c0       	mov    edx,0xc0023164
c0018f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f4a:	89 10                	mov    DWORD PTR [eax],edx
c0018f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f50:	83 ec 0c             	sub    esp,0xc
c0018f53:	50                   	push   eax
c0018f54:	e8 e9 fb fe ff       	call   c0008b42 <Clock::~Clock()>
c0018f59:	83 c4 10             	add    esp,0x10
c0018f5c:	90                   	nop
c0018f5d:	83 c4 0c             	add    esp,0xc
c0018f60:	c3                   	ret    
c0018f61:	90                   	nop

c0018f62 <RTC::~RTC()>:
c0018f62:	83 ec 0c             	sub    esp,0xc
c0018f65:	83 ec 0c             	sub    esp,0xc
c0018f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f6c:	e8 cd ff ff ff       	call   c0018f3e <RTC::~RTC()>
c0018f71:	83 c4 10             	add    esp,0x10
c0018f74:	83 ec 08             	sub    esp,0x8
c0018f77:	68 60 01 00 00       	push   0x160
c0018f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f80:	e8 de 36 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0018f85:	83 c4 10             	add    esp,0x10
c0018f88:	83 c4 0c             	add    esp,0xc
c0018f8b:	c3                   	ret    

c0018f8c <RTC::get_update_in_progress_flag()>:
c0018f8c:	83 ec 18             	sub    esp,0x18
c0018f8f:	6a 0a                	push   0xa
c0018f91:	e8 75 db ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0018f96:	83 c4 1c             	add    esp,0x1c
c0018f99:	0f b6 c0             	movzx  eax,al
c0018f9c:	c1 e8 07             	shr    eax,0x7
c0018f9f:	c3                   	ret    

c0018fa0 <RTC::completeRTCRefresh()>:
c0018fa0:	55                   	push   ebp
c0018fa1:	57                   	push   edi
c0018fa2:	56                   	push   esi
c0018fa3:	53                   	push   ebx
c0018fa4:	83 ec 3c             	sub    esp,0x3c
c0018fa7:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018fad:	83 ec 0c             	sub    esp,0xc
c0018fb0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018fb4:	e8 d3 ff ff ff       	call   c0018f8c <RTC::get_update_in_progress_flag()>
c0018fb9:	83 c4 10             	add    esp,0x10
c0018fbc:	84 c0                	test   al,al
c0018fbe:	74 0e                	je     c0018fce <RTC::completeRTCRefresh()+0x2e>
c0018fc0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018fc6:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018fcc:	73 df                	jae    c0018fad <RTC::completeRTCRefresh()+0xd>
c0018fce:	83 ec 0c             	sub    esp,0xc
c0018fd1:	6a 00                	push   0x0
c0018fd3:	e8 33 db ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0018fd8:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018fdf:	89 c7                	mov    edi,eax
c0018fe1:	e8 25 db ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0018fe6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018fed:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018ff1:	e8 15 db ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0018ff6:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018ffd:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019001:	e8 05 db ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0019006:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001900d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019011:	e8 f5 da ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0019016:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001901d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019021:	e8 e5 da ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0019026:	0f b6 c0             	movzx  eax,al
c0019029:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0019036:	83 ec 0c             	sub    esp,0xc
c0019039:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001903d:	e8 4a ff ff ff       	call   c0018f8c <RTC::get_update_in_progress_flag()>
c0019042:	83 c4 10             	add    esp,0x10
c0019045:	84 c0                	test   al,al
c0019047:	74 0e                	je     c0019057 <RTC::completeRTCRefresh()+0xb7>
c0019049:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001904f:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0019055:	73 df                	jae    c0019036 <RTC::completeRTCRefresh()+0x96>
c0019057:	83 ec 0c             	sub    esp,0xc
c001905a:	6a 00                	push   0x0
c001905c:	e8 aa da ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0019061:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019068:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001906c:	e8 9a da ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0019071:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019078:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001907c:	e8 8a da ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0019081:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019088:	88 c3                	mov    bl,al
c001908a:	e8 7c da ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c001908f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019096:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001909a:	e8 6c da ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c001909f:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00190a6:	89 c6                	mov    esi,eax
c00190a8:	e8 5e da ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c00190ad:	89 f9                	mov    ecx,edi
c00190af:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00190b3:	83 c4 10             	add    esp,0x10
c00190b6:	0f b6 e8             	movzx  ebp,al
c00190b9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190be:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00190c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00190c6:	74 27                	je     c00190ef <RTC::completeRTCRefresh()+0x14f>
c00190c8:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00190cc:	89 f0                	mov    eax,esi
c00190ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00190d2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00190d6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00190da:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00190de:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00190e2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190e6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00190ea:	e9 41 ff ff ff       	jmp    c0019030 <RTC::completeRTCRefresh()+0x90>
c00190ef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190f4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00190f8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190fc:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0019100:	75 c6                	jne    c00190c8 <RTC::completeRTCRefresh()+0x128>
c0019102:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019107:	89 f1                	mov    ecx,esi
c0019109:	0f b6 fb             	movzx  edi,bl
c001910c:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019110:	0f b6 c9             	movzx  ecx,cl
c0019113:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019117:	89 f1                	mov    ecx,esi
c0019119:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001911d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019121:	0f 94 c2             	sete   dl
c0019124:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0019128:	0f 94 c0             	sete   al
c001912b:	21 d0                	and    eax,edx
c001912d:	31 d2                	xor    edx,edx
c001912f:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019133:	0f 94 c2             	sete   dl
c0019136:	85 c2                	test   edx,eax
c0019138:	74 8e                	je     c00190c8 <RTC::completeRTCRefresh()+0x128>
c001913a:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001913e:	75 88                	jne    c00190c8 <RTC::completeRTCRefresh()+0x128>
c0019140:	83 ec 0c             	sub    esp,0xc
c0019143:	6a 0b                	push   0xb
c0019145:	e8 c1 d9 ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c001914a:	83 c4 10             	add    esp,0x10
c001914d:	a8 04                	test   al,0x4
c001914f:	75 7a                	jne    c00191cb <RTC::completeRTCRefresh()+0x22b>
c0019151:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019155:	c1 ef 04             	shr    edi,0x4
c0019158:	83 e6 0f             	and    esi,0xf
c001915b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001915f:	c1 ed 04             	shr    ebp,0x4
c0019162:	6b ed 0a             	imul   ebp,ebp,0xa
c0019165:	c1 ea 04             	shr    edx,0x4
c0019168:	6b d2 0a             	imul   edx,edx,0xa
c001916b:	83 e1 0f             	and    ecx,0xf
c001916e:	01 d1                	add    ecx,edx
c0019170:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019174:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0019178:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001917c:	c1 ea 04             	shr    edx,0x4
c001917f:	6b d2 0a             	imul   edx,edx,0xa
c0019182:	83 e1 0f             	and    ecx,0xf
c0019185:	01 d1                	add    ecx,edx
c0019187:	89 fa                	mov    edx,edi
c0019189:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001918d:	83 e2 07             	and    edx,0x7
c0019190:	89 d9                	mov    ecx,ebx
c0019192:	6b d2 0a             	imul   edx,edx,0xa
c0019195:	83 e1 0f             	and    ecx,0xf
c0019198:	83 e3 80             	and    ebx,0xffffff80
c001919b:	01 d1                	add    ecx,edx
c001919d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00191a1:	09 cb                	or     ebx,ecx
c00191a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00191a7:	c1 ea 04             	shr    edx,0x4
c00191aa:	6b d2 0a             	imul   edx,edx,0xa
c00191ad:	83 e1 0f             	and    ecx,0xf
c00191b0:	01 d1                	add    ecx,edx
c00191b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191b6:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00191ba:	c1 ea 04             	shr    edx,0x4
c00191bd:	6b d2 0a             	imul   edx,edx,0xa
c00191c0:	01 d6                	add    esi,edx
c00191c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00191c6:	83 e2 0f             	and    edx,0xf
c00191c9:	01 d5                	add    ebp,edx
c00191cb:	a8 02                	test   al,0x2
c00191cd:	75 15                	jne    c00191e4 <RTC::completeRTCRefresh()+0x244>
c00191cf:	f6 c3 80             	test   bl,0x80
c00191d2:	74 10                	je     c00191e4 <RTC::completeRTCRefresh()+0x244>
c00191d4:	83 e3 7f             	and    ebx,0x7f
c00191d7:	b9 18 00 00 00       	mov    ecx,0x18
c00191dc:	8d 43 0c             	lea    eax,[ebx+0xc]
c00191df:	99                   	cdq    
c00191e0:	f7 f9                	idiv   ecx
c00191e2:	88 d3                	mov    bl,dl
c00191e4:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00191ea:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00191f0:	77 06                	ja     c00191f8 <RTC::completeRTCRefresh()+0x258>
c00191f2:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00191f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00191fd:	31 c9                	xor    ecx,ecx
c00191ff:	31 d2                	xor    edx,edx
c0019201:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019205:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019209:	89 cd                	mov    ebp,ecx
c001920b:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001920f:	c1 e7 10             	shl    edi,0x10
c0019212:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0019218:	c1 e0 10             	shl    eax,0x10
c001921b:	09 c5                	or     ebp,eax
c001921d:	89 e9                	mov    ecx,ebp
c001921f:	0f b7 c2             	movzx  eax,dx
c0019222:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0019226:	09 f8                	or     eax,edi
c0019228:	89 c2                	mov    edx,eax
c001922a:	50                   	push   eax
c001922b:	50                   	push   eax
c001922c:	88 d9                	mov    cl,bl
c001922e:	51                   	push   ecx
c001922f:	52                   	push   edx
c0019230:	e8 fc f9 fe ff       	call   c0008c31 <datetimeToSeconds(datetime_t)>
c0019235:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0019239:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001923f:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019245:	83 c4 4c             	add    esp,0x4c
c0019248:	5b                   	pop    ebx
c0019249:	5e                   	pop    esi
c001924a:	5f                   	pop    edi
c001924b:	5d                   	pop    ebp
c001924c:	c3                   	ret    
c001924d:	90                   	nop

c001924e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001924e:	55                   	push   ebp
c001924f:	57                   	push   edi
c0019250:	56                   	push   esi
c0019251:	53                   	push   ebx
c0019252:	83 ec 34             	sub    esp,0x34
c0019255:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019259:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001925d:	6a 00                	push   0x0
c001925f:	6a 00                	push   0x0
c0019261:	e8 f9 d8 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c0019266:	5d                   	pop    ebp
c0019267:	89 fb                	mov    ebx,edi
c0019269:	58                   	pop    eax
c001926a:	6a 00                	push   0x0
c001926c:	6a 02                	push   0x2
c001926e:	e8 ec d8 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c0019273:	89 f8                	mov    eax,edi
c0019275:	89 f9                	mov    ecx,edi
c0019277:	0f b6 c4             	movzx  eax,ah
c001927a:	31 d2                	xor    edx,edx
c001927c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019280:	c1 e9 10             	shr    ecx,0x10
c0019283:	89 f0                	mov    eax,esi
c0019285:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019289:	89 f0                	mov    eax,esi
c001928b:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001928f:	0f b6 c4             	movzx  eax,ah
c0019292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019296:	89 f0                	mov    eax,esi
c0019298:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001929c:	c1 e8 10             	shr    eax,0x10
c001929f:	b9 64 00 00 00       	mov    ecx,0x64
c00192a4:	f7 f1                	div    ecx
c00192a6:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c00192ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00192b1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00192b5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00192b9:	e8 4d d8 ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c00192be:	83 c4 10             	add    esp,0x10
c00192c1:	a8 04                	test   al,0x4
c00192c3:	89 c5                	mov    ebp,eax
c00192c5:	75 6e                	jne    c0019335 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c00192c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00192cb:	31 d2                	xor    edx,edx
c00192cd:	0f b6 c1             	movzx  eax,cl
c00192d0:	b9 0a 00 00 00       	mov    ecx,0xa
c00192d5:	f7 f1                	div    ecx
c00192d7:	c1 e0 04             	shl    eax,0x4
c00192da:	09 d0                	or     eax,edx
c00192dc:	31 d2                	xor    edx,edx
c00192de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192e2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00192e7:	f7 f1                	div    ecx
c00192e9:	c1 e0 04             	shl    eax,0x4
c00192ec:	09 d0                	or     eax,edx
c00192ee:	31 d2                	xor    edx,edx
c00192f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192f4:	0f b6 c3             	movzx  eax,bl
c00192f7:	f7 f1                	div    ecx
c00192f9:	c1 e0 04             	shl    eax,0x4
c00192fc:	09 d0                	or     eax,edx
c00192fe:	31 d2                	xor    edx,edx
c0019300:	89 c3                	mov    ebx,eax
c0019302:	89 f0                	mov    eax,esi
c0019304:	0f b6 c0             	movzx  eax,al
c0019307:	f7 f1                	div    ecx
c0019309:	c1 e0 04             	shl    eax,0x4
c001930c:	09 d0                	or     eax,edx
c001930e:	31 d2                	xor    edx,edx
c0019310:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019314:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019319:	f7 f1                	div    ecx
c001931b:	c1 e0 04             	shl    eax,0x4
c001931e:	09 d0                	or     eax,edx
c0019320:	31 d2                	xor    edx,edx
c0019322:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001932a:	f7 f1                	div    ecx
c001932c:	c1 e0 04             	shl    eax,0x4
c001932f:	09 d0                	or     eax,edx
c0019331:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019335:	83 e5 02             	and    ebp,0x2
c0019338:	75 1e                	jne    c0019358 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001933a:	0f b6 c3             	movzx  eax,bl
c001933d:	83 f8 0b             	cmp    eax,0xb
c0019340:	76 10                	jbe    c0019352 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c0019342:	8d 53 f4             	lea    edx,[ebx-0xc]
c0019345:	84 d2                	test   dl,dl
c0019347:	88 d3                	mov    bl,dl
c0019349:	75 02                	jne    c001934d <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001934b:	b3 0c                	mov    bl,0xc
c001934d:	83 cb 80             	or     ebx,0xffffff80
c0019350:	eb 06                	jmp    c0019358 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019352:	85 c0                	test   eax,eax
c0019354:	75 02                	jne    c0019358 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019356:	b3 0c                	mov    bl,0xc
c0019358:	50                   	push   eax
c0019359:	0f b6 db             	movzx  ebx,bl
c001935c:	50                   	push   eax
c001935d:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0019362:	52                   	push   edx
c0019363:	6a 00                	push   0x0
c0019365:	e8 f5 d7 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c001936a:	5a                   	pop    edx
c001936b:	59                   	pop    ecx
c001936c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019371:	50                   	push   eax
c0019372:	6a 02                	push   0x2
c0019374:	e8 e6 d7 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c0019379:	5e                   	pop    esi
c001937a:	5f                   	pop    edi
c001937b:	53                   	push   ebx
c001937c:	6a 04                	push   0x4
c001937e:	e8 dc d7 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c0019383:	5d                   	pop    ebp
c0019384:	58                   	pop    eax
c0019385:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001938a:	52                   	push   edx
c001938b:	6a 07                	push   0x7
c001938d:	e8 cd d7 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c0019392:	58                   	pop    eax
c0019393:	5a                   	pop    edx
c0019394:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019399:	50                   	push   eax
c001939a:	6a 08                	push   0x8
c001939c:	e8 be d7 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c00193a1:	59                   	pop    ecx
c00193a2:	5b                   	pop    ebx
c00193a3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00193a8:	55                   	push   ebp
c00193a9:	6a 09                	push   0x9
c00193ab:	e8 af d7 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c00193b0:	5e                   	pop    esi
c00193b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00193b5:	e8 e6 fb ff ff       	call   c0018fa0 <RTC::completeRTCRefresh()>
c00193ba:	83 c4 3c             	add    esp,0x3c
c00193bd:	b0 01                	mov    al,0x1
c00193bf:	5b                   	pop    ebx
c00193c0:	5e                   	pop    esi
c00193c1:	5f                   	pop    edi
c00193c2:	5d                   	pop    ebp
c00193c3:	c3                   	ret    

c00193c4 <rtcIRQHandler(regs*, void*)>:
c00193c4:	53                   	push   ebx
c00193c5:	83 ec 14             	sub    esp,0x14
c00193c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00193cc:	6a 0c                	push   0xc
c00193ce:	e8 38 d7 ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	a8 80                	test   al,0x80
c00193d8:	74 24                	je     c00193fe <rtcIRQHandler(regs*, void*)+0x3a>
c00193da:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00193e1:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00193e8:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c00193ef:	75 0d                	jne    c00193fe <rtcIRQHandler(regs*, void*)+0x3a>
c00193f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00193f5:	83 c4 08             	add    esp,0x8
c00193f8:	5b                   	pop    ebx
c00193f9:	e9 a2 fb ff ff       	jmp    c0018fa0 <RTC::completeRTCRefresh()>
c00193fe:	83 c4 08             	add    esp,0x8
c0019401:	5b                   	pop    ebx
c0019402:	c3                   	ret    
c0019403:	90                   	nop

c0019404 <RTC::RTC()>:
c0019404:	83 ec 1c             	sub    esp,0x1c
c0019407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001940b:	83 ec 08             	sub    esp,0x8
c001940e:	68 47 31 02 c0       	push   0xc0023147
c0019413:	50                   	push   eax
c0019414:	e8 f3 f6 fe ff       	call   c0008b0c <Clock::Clock(char const*)>
c0019419:	83 c4 10             	add    esp,0x10
c001941c:	ba 64 31 02 c0       	mov    edx,0xc0023164
c0019421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019425:	89 10                	mov    DWORD PTR [eax],edx
c0019427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001942b:	83 ec 0c             	sub    esp,0xc
c001942e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019432:	6a 01                	push   0x1
c0019434:	68 c4 93 01 c0       	push   0xc00193c4
c0019439:	6a 08                	push   0x8
c001943b:	50                   	push   eax
c001943c:	e8 ad fb fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019441:	83 c4 20             	add    esp,0x20
c0019444:	89 c2                	mov    edx,eax
c0019446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001944a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0019450:	fa                   	cli    
c0019451:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0019456:	83 c0 01             	add    eax,0x1
c0019459:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001945e:	83 ec 0c             	sub    esp,0xc
c0019461:	6a 0b                	push   0xb
c0019463:	e8 a3 d6 ff ff       	call   c0016b0b <x86ReadCMOS(unsigned char)>
c0019468:	83 c4 10             	add    esp,0x10
c001946b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001946f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019473:	83 c8 10             	or     eax,0x10
c0019476:	0f b6 c0             	movzx  eax,al
c0019479:	83 ec 08             	sub    esp,0x8
c001947c:	50                   	push   eax
c001947d:	6a 0b                	push   0xb
c001947f:	e8 db d6 ff ff       	call   c0016b5f <x86WriteCMOS(unsigned char, unsigned char)>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	83 ec 0c             	sub    esp,0xc
c001948a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001948e:	e8 0d fb ff ff       	call   c0018fa0 <RTC::completeRTCRefresh()>
c0019493:	83 c4 10             	add    esp,0x10
c0019496:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001949b:	83 e8 01             	sub    eax,0x1
c001949e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00194a3:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00194a8:	85 c0                	test   eax,eax
c00194aa:	75 01                	jne    c00194ad <RTC::RTC()+0xa9>
c00194ac:	fb                   	sti    
c00194ad:	90                   	nop
c00194ae:	83 c4 1c             	add    esp,0x1c
c00194b1:	c3                   	ret    
c00194b2:	66 90                	xchg   ax,ax

c00194b4 <HalConsoleScroll(int, int)>:
c00194b4:	83 ec 10             	sub    esp,0x10
c00194b7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00194bf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00194c7:	90                   	nop
c00194c8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00194cd:	0f 8f e1 00 00 00    	jg     c00195b4 <HalConsoleScroll(int, int)+0x100>
c00194d3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00194db:	90                   	nop
c00194dc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00194e4:	0f 8f be 00 00 00    	jg     c00195a8 <HalConsoleScroll(int, int)+0xf4>
c00194ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194ee:	89 d0                	mov    eax,edx
c00194f0:	c1 e0 02             	shl    eax,0x2
c00194f3:	01 d0                	add    eax,edx
c00194f5:	c1 e0 05             	shl    eax,0x5
c00194f8:	89 c2                	mov    edx,eax
c00194fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194fe:	01 d0                	add    eax,edx
c0019500:	89 c2                	mov    edx,eax
c0019502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019506:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019509:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001950d:	89 d0                	mov    eax,edx
c001950f:	c1 e0 02             	shl    eax,0x2
c0019512:	01 d0                	add    eax,edx
c0019514:	c1 e0 05             	shl    eax,0x5
c0019517:	89 c2                	mov    edx,eax
c0019519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001951d:	01 d0                	add    eax,edx
c001951f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019525:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019529:	01 d0                	add    eax,edx
c001952b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001952d:	88 10                	mov    BYTE PTR [eax],dl
c001952f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019534:	75 66                	jne    c001959c <HalConsoleScroll(int, int)+0xe8>
c0019536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001953a:	83 e0 01             	and    eax,0x1
c001953d:	74 39                	je     c0019578 <HalConsoleScroll(int, int)+0xc4>
c001953f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019543:	83 e0 0f             	and    eax,0xf
c0019546:	88 c2                	mov    dl,al
c0019548:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001954c:	c1 e0 04             	shl    eax,0x4
c001954f:	09 d0                	or     eax,edx
c0019551:	88 c1                	mov    cl,al
c0019553:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019557:	89 d0                	mov    eax,edx
c0019559:	c1 e0 02             	shl    eax,0x2
c001955c:	01 d0                	add    eax,edx
c001955e:	c1 e0 05             	shl    eax,0x5
c0019561:	89 c2                	mov    edx,eax
c0019563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019567:	01 d0                	add    eax,edx
c0019569:	89 c2                	mov    edx,eax
c001956b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001956f:	01 d0                	add    eax,edx
c0019571:	88 ca                	mov    dl,cl
c0019573:	88 10                	mov    BYTE PTR [eax],dl
c0019575:	eb 25                	jmp    c001959c <HalConsoleScroll(int, int)+0xe8>
c0019577:	90                   	nop
c0019578:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001957c:	89 d0                	mov    eax,edx
c001957e:	c1 e0 02             	shl    eax,0x2
c0019581:	01 d0                	add    eax,edx
c0019583:	c1 e0 05             	shl    eax,0x5
c0019586:	89 c2                	mov    edx,eax
c0019588:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001958c:	01 d0                	add    eax,edx
c001958e:	89 c2                	mov    edx,eax
c0019590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019594:	01 d0                	add    eax,edx
c0019596:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0019599:	8d 76 00             	lea    esi,[esi+0x0]
c001959c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00195a1:	e9 36 ff ff ff       	jmp    c00194dc <HalConsoleScroll(int, int)+0x28>
c00195a6:	66 90                	xchg   ax,ax
c00195a8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00195ad:	e9 16 ff ff ff       	jmp    c00194c8 <HalConsoleScroll(int, int)+0x14>
c00195b2:	66 90                	xchg   ax,ax
c00195b4:	90                   	nop
c00195b5:	83 c4 10             	add    esp,0x10
c00195b8:	c3                   	ret    
c00195b9:	8d 76 00             	lea    esi,[esi+0x0]

c00195bc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00195bc:	83 ec 14             	sub    esp,0x14
c00195bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195c3:	88 04 24             	mov    BYTE PTR [esp],al
c00195c6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00195c9:	0f b6 c0             	movzx  eax,al
c00195cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195d0:	89 d1                	mov    ecx,edx
c00195d2:	83 e1 0f             	and    ecx,0xf
c00195d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00195d9:	c1 e2 04             	shl    edx,0x4
c00195dc:	0f b6 d2             	movzx  edx,dl
c00195df:	09 ca                	or     edx,ecx
c00195e1:	c1 e2 08             	shl    edx,0x8
c00195e4:	09 d0                	or     eax,edx
c00195e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00195eb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00195f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00195f7:	89 d0                	mov    eax,edx
c00195f9:	c1 e0 02             	shl    eax,0x2
c00195fc:	01 d0                	add    eax,edx
c00195fe:	c1 e0 04             	shl    eax,0x4
c0019601:	89 c2                	mov    edx,eax
c0019603:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019607:	01 d0                	add    eax,edx
c0019609:	d1 e0                	shl    eax,1
c001960b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001960f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019613:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019618:	66 89 10             	mov    WORD PTR [eax],dx
c001961b:	90                   	nop
c001961c:	83 c4 14             	add    esp,0x14
c001961f:	c3                   	ret    

c0019620 <HalConsoleCursorUpdate(int, int)>:
c0019620:	83 ec 20             	sub    esp,0x20
c0019623:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019627:	89 c2                	mov    edx,eax
c0019629:	c1 e2 02             	shl    edx,0x2
c001962c:	01 d0                	add    eax,edx
c001962e:	c1 e0 04             	shl    eax,0x4
c0019631:	89 c2                	mov    edx,eax
c0019633:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019637:	01 d0                	add    eax,edx
c0019639:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001963e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019645:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001964a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001964e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019652:	ee                   	out    dx,al
c0019653:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019658:	0f b6 c0             	movzx  eax,al
c001965b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0019662:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0019666:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001966a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001966e:	ee                   	out    dx,al
c001966f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0019676:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001967b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001967f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019683:	ee                   	out    dx,al
c0019684:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0019689:	c1 e8 08             	shr    eax,0x8
c001968c:	0f b6 c0             	movzx  eax,al
c001968f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0019696:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001969a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001969e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196a2:	ee                   	out    dx,al
c00196a3:	90                   	nop
c00196a4:	83 c4 20             	add    esp,0x20
c00196a7:	c3                   	ret    

c00196a8 <FAT::getName()>:
c00196a8:	b8 98 31 02 c0       	mov    eax,0xc0023198
c00196ad:	c3                   	ret    
c00196ae:	66 90                	xchg   ax,ax

c00196b0 <FAT::tell(void*, unsigned long long*)>:
c00196b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00196b5:	75 09                	jne    c00196c0 <FAT::tell(void*, unsigned long long*)+0x10>
c00196b7:	b8 04 00 00 00       	mov    eax,0x4
c00196bc:	c3                   	ret    
c00196bd:	8d 76 00             	lea    esi,[esi+0x0]
c00196c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00196c5:	75 09                	jne    c00196d0 <FAT::tell(void*, unsigned long long*)+0x20>
c00196c7:	b8 04 00 00 00       	mov    eax,0x4
c00196cc:	c3                   	ret    
c00196cd:	8d 76 00             	lea    esi,[esi+0x0]
c00196d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00196d7:	ba 00 00 00 00       	mov    edx,0x0
c00196dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196e0:	89 01                	mov    DWORD PTR [ecx],eax
c00196e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00196e5:	b8 00 00 00 00       	mov    eax,0x0
c00196ea:	c3                   	ret    
c00196eb:	90                   	nop

c00196ec <FAT::stat(void*, unsigned long long*)>:
c00196ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00196f1:	75 09                	jne    c00196fc <FAT::stat(void*, unsigned long long*)+0x10>
c00196f3:	b8 04 00 00 00       	mov    eax,0x4
c00196f8:	c3                   	ret    
c00196f9:	8d 76 00             	lea    esi,[esi+0x0]
c00196fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019701:	75 09                	jne    c001970c <FAT::stat(void*, unsigned long long*)+0x20>
c0019703:	b8 04 00 00 00       	mov    eax,0x4
c0019708:	c3                   	ret    
c0019709:	8d 76 00             	lea    esi,[esi+0x0]
c001970c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019710:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019713:	ba 00 00 00 00       	mov    edx,0x0
c0019718:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001971c:	89 01                	mov    DWORD PTR [ecx],eax
c001971e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019721:	b8 00 00 00 00       	mov    eax,0x0
c0019726:	c3                   	ret    
c0019727:	90                   	nop

c0019728 <FAT::~FAT()>:
c0019728:	83 ec 0c             	sub    esp,0xc
c001972b:	ba e4 31 02 c0       	mov    edx,0xc00231e4
c0019730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019734:	89 10                	mov    DWORD PTR [eax],edx
c0019736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001973a:	83 ec 0c             	sub    esp,0xc
c001973d:	50                   	push   eax
c001973e:	e8 37 e6 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0019743:	83 c4 10             	add    esp,0x10
c0019746:	90                   	nop
c0019747:	83 c4 0c             	add    esp,0xc
c001974a:	c3                   	ret    
c001974b:	90                   	nop

c001974c <FAT::~FAT()>:
c001974c:	83 ec 0c             	sub    esp,0xc
c001974f:	83 ec 0c             	sub    esp,0xc
c0019752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019756:	e8 cd ff ff ff       	call   c0019728 <FAT::~FAT()>
c001975b:	83 c4 10             	add    esp,0x10
c001975e:	83 ec 08             	sub    esp,0x8
c0019761:	6a 08                	push   0x8
c0019763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019767:	e8 f7 2e ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001976c:	83 c4 10             	add    esp,0x10
c001976f:	83 c4 0c             	add    esp,0xc
c0019772:	c3                   	ret    
c0019773:	90                   	nop

c0019774 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019774:	83 ec 1c             	sub    esp,0x1c
c0019777:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001977e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019783:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019787:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001978e:	83 f8 ff             	cmp    eax,0xffffffff
c0019791:	75 35                	jne    c00197c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019793:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019797:	88 c2                	mov    dl,al
c0019799:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001979e:	01 d0                	add    eax,edx
c00197a0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00197a4:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00197aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197ae:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00197b5:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00197be:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00197c5:	eb 19                	jmp    c00197e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00197c7:	90                   	nop
c00197c8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00197cc:	88 c2                	mov    dl,al
c00197ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197d2:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197d9:	01 d0                	add    eax,edx
c00197db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00197df:	90                   	nop
c00197e0:	83 ec 04             	sub    esp,0x4
c00197e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197eb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00197ef:	50                   	push   eax
c00197f0:	e8 df b9 fe ff       	call   c00051d4 <f_getlabel>
c00197f5:	83 c4 10             	add    esp,0x10
c00197f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019801:	75 09                	jne    c001980c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019803:	b8 00 00 00 00       	mov    eax,0x0
c0019808:	eb 0a                	jmp    c0019814 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001980a:	66 90                	xchg   ax,ax
c001980c:	b8 01 00 00 00       	mov    eax,0x1
c0019811:	8d 76 00             	lea    esi,[esi+0x0]
c0019814:	83 c4 1c             	add    esp,0x1c
c0019817:	c3                   	ret    

c0019818 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019818:	53                   	push   ebx
c0019819:	83 ec 58             	sub    esp,0x58
c001981c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019824:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019828:	b9 00 00 00 00       	mov    ecx,0x0
c001982d:	b8 3c 00 00 00       	mov    eax,0x3c
c0019832:	83 e0 f8             	and    eax,0xfffffff8
c0019835:	89 c3                	mov    ebx,eax
c0019837:	b8 00 00 00 00       	mov    eax,0x0
c001983c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019840:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019844:	83 c0 08             	add    eax,0x8
c0019847:	39 d8                	cmp    eax,ebx
c0019849:	72 f1                	jb     c001983c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001984b:	01 c2                	add    edx,eax
c001984d:	89 0a                	mov    DWORD PTR [edx],ecx
c001984f:	83 c2 04             	add    edx,0x4
c0019852:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019856:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001985d:	83 f8 ff             	cmp    eax,0xffffffff
c0019860:	75 36                	jne    c0019898 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019862:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019866:	88 c2                	mov    dl,al
c0019868:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001986d:	01 d0                	add    eax,edx
c001986f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019873:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019879:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001987d:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019884:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019889:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001988d:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019894:	eb 1a                	jmp    c00198b0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019896:	66 90                	xchg   ax,ax
c0019898:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001989c:	88 c2                	mov    dl,al
c001989e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00198a2:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00198a9:	01 d0                	add    eax,edx
c00198ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00198af:	90                   	nop
c00198b0:	83 ec 08             	sub    esp,0x8
c00198b3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00198b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198bb:	50                   	push   eax
c00198bc:	e8 af 6f fe ff       	call   c0000870 <strcat>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	83 ec 0c             	sub    esp,0xc
c00198c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198cb:	50                   	push   eax
c00198cc:	e8 57 ba fe ff       	call   c0005328 <f_setlabel>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00198d8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00198dd:	75 09                	jne    c00198e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00198df:	b8 00 00 00 00       	mov    eax,0x0
c00198e4:	eb 0a                	jmp    c00198f0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00198e6:	66 90                	xchg   ax,ax
c00198e8:	b8 01 00 00 00       	mov    eax,0x1
c00198ed:	8d 76 00             	lea    esi,[esi+0x0]
c00198f0:	83 c4 58             	add    esp,0x58
c00198f3:	5b                   	pop    ebx
c00198f4:	c3                   	ret    
c00198f5:	90                   	nop
c00198f6:	66 90                	xchg   ax,ax

c00198f8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00198f8:	83 ec 2c             	sub    esp,0x2c
c00198fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019903:	83 ec 08             	sub    esp,0x8
c0019906:	68 bc 31 02 c0       	push   0xc00231bc
c001990b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001990f:	e8 6c 6e fe ff       	call   c0000780 <strcmp>
c0019914:	83 c4 10             	add    esp,0x10
c0019917:	85 c0                	test   eax,eax
c0019919:	0f 94 c0             	sete   al
c001991c:	0f b6 c0             	movzx  eax,al
c001991f:	85 c0                	test   eax,eax
c0019921:	74 0d                	je     c0019930 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019923:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001992b:	e9 c0 00 00 00       	jmp    c00199f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019930:	83 ec 08             	sub    esp,0x8
c0019933:	68 ae 31 02 c0       	push   0xc00231ae
c0019938:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001993c:	e8 3f 6e fe ff       	call   c0000780 <strcmp>
c0019941:	83 c4 10             	add    esp,0x10
c0019944:	85 c0                	test   eax,eax
c0019946:	0f 94 c0             	sete   al
c0019949:	0f b6 c0             	movzx  eax,al
c001994c:	85 c0                	test   eax,eax
c001994e:	74 10                	je     c0019960 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019950:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019958:	e9 93 00 00 00       	jmp    c00199f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001995d:	8d 76 00             	lea    esi,[esi+0x0]
c0019960:	83 ec 08             	sub    esp,0x8
c0019963:	68 b4 31 02 c0       	push   0xc00231b4
c0019968:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001996c:	e8 0f 6e fe ff       	call   c0000780 <strcmp>
c0019971:	83 c4 10             	add    esp,0x10
c0019974:	85 c0                	test   eax,eax
c0019976:	0f 94 c0             	sete   al
c0019979:	0f b6 c0             	movzx  eax,al
c001997c:	85 c0                	test   eax,eax
c001997e:	74 0c                	je     c001998c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019980:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019988:	eb 66                	jmp    c00199f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001998a:	66 90                	xchg   ax,ax
c001998c:	83 ec 08             	sub    esp,0x8
c001998f:	68 1c 09 02 c0       	push   0xc002091c
c0019994:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019998:	e8 e3 6d fe ff       	call   c0000780 <strcmp>
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	85 c0                	test   eax,eax
c00199a2:	0f 94 c0             	sete   al
c00199a5:	0f b6 c0             	movzx  eax,al
c00199a8:	85 c0                	test   eax,eax
c00199aa:	74 0c                	je     c00199b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00199ac:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00199b4:	eb 3a                	jmp    c00199f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199b6:	66 90                	xchg   ax,ax
c00199b8:	83 ec 08             	sub    esp,0x8
c00199bb:	68 ba 31 02 c0       	push   0xc00231ba
c00199c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199c4:	e8 b7 6d fe ff       	call   c0000780 <strcmp>
c00199c9:	83 c4 10             	add    esp,0x10
c00199cc:	85 c0                	test   eax,eax
c00199ce:	0f 94 c0             	sete   al
c00199d1:	0f b6 c0             	movzx  eax,al
c00199d4:	85 c0                	test   eax,eax
c00199d6:	74 0c                	je     c00199e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00199d8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00199e0:	eb 0e                	jmp    c00199f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199e2:	66 90                	xchg   ax,ax
c00199e4:	b8 08 00 00 00       	mov    eax,0x8
c00199e9:	e9 ea 00 00 00       	jmp    c0019ad8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00199ee:	66 90                	xchg   ax,ax
c00199f0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00199f7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00199fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a00:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a07:	83 f8 ff             	cmp    eax,0xffffffff
c0019a0a:	75 34                	jne    c0019a40 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019a0c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a10:	88 c2                	mov    dl,al
c0019a12:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a17:	01 d0                	add    eax,edx
c0019a19:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a1d:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019a23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a27:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019a2e:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019a37:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019a3e:	eb 18                	jmp    c0019a58 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019a40:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a44:	88 c2                	mov    dl,al
c0019a46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a4a:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a51:	01 d0                	add    eax,edx
c0019a53:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a57:	90                   	nop
c0019a58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a5c:	88 04 24             	mov    BYTE PTR [esp],al
c0019a5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a67:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019a6f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019a74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a7c:	83 ec 0c             	sub    esp,0xc
c0019a7f:	68 00 20 00 00       	push   0x2000
c0019a84:	e8 5d 4e ff ff       	call   c000e8e6 <malloc>
c0019a89:	83 c4 10             	add    esp,0x10
c0019a8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a90:	68 00 20 00 00       	push   0x2000
c0019a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a99:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a9d:	50                   	push   eax
c0019a9e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019aa2:	50                   	push   eax
c0019aa3:	e8 7d bb fe ff       	call   c0005625 <f_mkfs>
c0019aa8:	83 c4 10             	add    esp,0x10
c0019aab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019aaf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019ab4:	75 0a                	jne    c0019ac0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019ab6:	b8 00 00 00 00       	mov    eax,0x0
c0019abb:	eb 1b                	jmp    c0019ad8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019abd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ac0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019ac5:	75 09                	jne    c0019ad0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019ac7:	b8 09 00 00 00       	mov    eax,0x9
c0019acc:	eb 0a                	jmp    c0019ad8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019ace:	66 90                	xchg   ax,ax
c0019ad0:	b8 01 00 00 00       	mov    eax,0x1
c0019ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad8:	83 c4 2c             	add    esp,0x2c
c0019adb:	c3                   	ret    

c0019adc <FAT::tryMount(LogicalDisk*, int)>:
c0019adc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019ae2:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019ae7:	83 f8 14             	cmp    eax,0x14
c0019aea:	75 18                	jne    c0019b04 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019aec:	83 ec 0c             	sub    esp,0xc
c0019aef:	68 c0 31 02 c0       	push   0xc00231c0
c0019af4:	e8 41 51 ff ff       	call   c000ec3a <KePanic(char const*)>
c0019af9:	83 c4 10             	add    esp,0x10
c0019afc:	b0 00                	mov    al,0x0
c0019afe:	e9 ed 01 00 00       	jmp    c0019cf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b03:	90                   	nop
c0019b04:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019b0b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b11:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b17:	3d 00 02 00 00       	cmp    eax,0x200
c0019b1c:	74 0a                	je     c0019b28 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019b1e:	b0 00                	mov    al,0x0
c0019b20:	e9 cb 01 00 00       	jmp    c0019cf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b25:	8d 76 00             	lea    esi,[esi+0x0]
c0019b28:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019b30:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019b37:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019b3e:	83 f8 ff             	cmp    eax,0xffffffff
c0019b41:	74 09                	je     c0019b4c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019b43:	b0 01                	mov    al,0x1
c0019b45:	e9 a6 01 00 00       	jmp    c0019cf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b4a:	66 90                	xchg   ax,ax
c0019b4c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019b56:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019b5e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019b65:	88 c2                	mov    dl,al
c0019b67:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b6c:	01 d0                	add    eax,edx
c0019b6e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019b75:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019b7b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019b82:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019b89:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b8e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019b95:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019b9c:	83 ec 0c             	sub    esp,0xc
c0019b9f:	68 34 02 00 00       	push   0x234
c0019ba4:	e8 3d 4d ff ff       	call   c000e8e6 <malloc>
c0019ba9:	83 c4 10             	add    esp,0x10
c0019bac:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019bb3:	83 ec 04             	sub    esp,0x4
c0019bb6:	6a 00                	push   0x0
c0019bb8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019bbf:	50                   	push   eax
c0019bc0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019bc7:	e8 53 a2 fe ff       	call   c0003e1f <f_mount>
c0019bcc:	83 c4 10             	add    esp,0x10
c0019bcf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019bd6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019bde:	74 1c                	je     c0019bfc <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019be0:	83 ec 0c             	sub    esp,0xc
c0019be3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019bea:	e8 17 4d ff ff       	call   c000e906 <rfree>
c0019bef:	83 c4 10             	add    esp,0x10
c0019bf2:	b0 00                	mov    al,0x0
c0019bf4:	e9 f7 00 00 00       	jmp    c0019cf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bfc:	83 ec 04             	sub    esp,0x4
c0019bff:	68 00 01 00 00       	push   0x100
c0019c04:	6a 00                	push   0x0
c0019c06:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c0d:	50                   	push   eax
c0019c0e:	e8 dd 68 fe ff       	call   c00004f0 <memset>
c0019c13:	83 c4 10             	add    esp,0x10
c0019c16:	83 ec 08             	sub    esp,0x8
c0019c19:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c20:	50                   	push   eax
c0019c21:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c28:	50                   	push   eax
c0019c29:	e8 42 6c fe ff       	call   c0000870 <strcat>
c0019c2e:	83 c4 10             	add    esp,0x10
c0019c31:	83 ec 08             	sub    esp,0x8
c0019c34:	68 ce 31 02 c0       	push   0xc00231ce
c0019c39:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c40:	50                   	push   eax
c0019c41:	e8 2a 6c fe ff       	call   c0000870 <strcat>
c0019c46:	83 c4 10             	add    esp,0x10
c0019c49:	83 ec 04             	sub    esp,0x4
c0019c4c:	6a 01                	push   0x1
c0019c4e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019c55:	50                   	push   eax
c0019c56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c5a:	50                   	push   eax
c0019c5b:	e8 21 a2 fe ff       	call   c0003e81 <f_open>
c0019c60:	83 c4 10             	add    esp,0x10
c0019c63:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019c6a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019c71:	85 c0                	test   eax,eax
c0019c73:	74 0b                	je     c0019c80 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019c75:	78 31                	js     c0019ca8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c77:	83 e8 04             	sub    eax,0x4
c0019c7a:	83 f8 01             	cmp    eax,0x1
c0019c7d:	77 29                	ja     c0019ca8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c7f:	90                   	nop
c0019c80:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019c88:	83 ec 0c             	sub    esp,0xc
c0019c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c8f:	50                   	push   eax
c0019c90:	e8 9c a9 fe ff       	call   c0004631 <f_close>
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	90                   	nop
c0019c99:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019ca1:	85 c0                	test   eax,eax
c0019ca3:	74 43                	je     c0019ce8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019ca5:	eb 31                	jmp    c0019cd8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019ca7:	90                   	nop
c0019ca8:	83 ec 0c             	sub    esp,0xc
c0019cab:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019cb2:	e8 4f 4c ff ff       	call   c000e906 <rfree>
c0019cb7:	83 c4 10             	add    esp,0x10
c0019cba:	83 ec 04             	sub    esp,0x4
c0019cbd:	6a 00                	push   0x0
c0019cbf:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019cc6:	50                   	push   eax
c0019cc7:	6a 00                	push   0x0
c0019cc9:	e8 51 a1 fe ff       	call   c0003e1f <f_mount>
c0019cce:	83 c4 10             	add    esp,0x10
c0019cd1:	b0 00                	mov    al,0x0
c0019cd3:	eb 1b                	jmp    c0019cf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd8:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019cdd:	83 c0 01             	add    eax,0x1
c0019ce0:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019cef:	90                   	nop
c0019cf0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019cf6:	c3                   	ret    
c0019cf7:	90                   	nop

c0019cf8 <FAT::allocateSwapfile(char const*, int)>:
c0019cf8:	55                   	push   ebp
c0019cf9:	57                   	push   edi
c0019cfa:	56                   	push   esi
c0019cfb:	53                   	push   ebx
c0019cfc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019d02:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019d0d:	83 ec 0c             	sub    esp,0xc
c0019d10:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019d17:	e8 ca 4b ff ff       	call   c000e8e6 <malloc>
c0019d1c:	83 c4 10             	add    esp,0x10
c0019d1f:	89 c7                	mov    edi,eax
c0019d21:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019d26:	83 ec 04             	sub    esp,0x4
c0019d29:	50                   	push   eax
c0019d2a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019d31:	57                   	push   edi
c0019d32:	e8 d5 e3 fe ff       	call   c000810c <File::File(char const*, Process*)>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019d41:	83 ec 04             	sub    esp,0x4
c0019d44:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019d48:	50                   	push   eax
c0019d49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d4d:	50                   	push   eax
c0019d4e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d55:	e8 d2 e6 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0019d5a:	83 c4 10             	add    esp,0x10
c0019d5d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d64:	c1 e0 14             	shl    eax,0x14
c0019d67:	89 c7                	mov    edi,eax
c0019d69:	89 c5                	mov    ebp,eax
c0019d6b:	c1 fd 1f             	sar    ebp,0x1f
c0019d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d76:	89 f9                	mov    ecx,edi
c0019d78:	31 c1                	xor    ecx,eax
c0019d7a:	89 cb                	mov    ebx,ecx
c0019d7c:	89 e9                	mov    ecx,ebp
c0019d7e:	31 d1                	xor    ecx,edx
c0019d80:	89 ce                	mov    esi,ecx
c0019d82:	89 f0                	mov    eax,esi
c0019d84:	09 d8                	or     eax,ebx
c0019d86:	0f 84 9c 00 00 00    	je     c0019e28 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019d8c:	83 ec 0c             	sub    esp,0xc
c0019d8f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d96:	e8 5d e5 fe ff       	call   c00082f8 <File::unlink()>
c0019d9b:	83 c4 10             	add    esp,0x10
c0019d9e:	83 ec 08             	sub    esp,0x8
c0019da1:	6a 12                	push   0x12
c0019da3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019daa:	e8 7b e3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019daf:	83 c4 10             	add    esp,0x10
c0019db2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019db9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019dbf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019dc6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019dcd:	c1 e0 14             	shl    eax,0x14
c0019dd0:	83 ec 04             	sub    esp,0x4
c0019dd3:	6a 01                	push   0x1
c0019dd5:	50                   	push   eax
c0019dd6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019ddd:	e8 d6 b6 fe ff       	call   c00054b8 <f_expand>
c0019de2:	83 c4 10             	add    esp,0x10
c0019de5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019dec:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dee:	83 c0 10             	add    eax,0x10
c0019df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019df3:	83 ec 0c             	sub    esp,0xc
c0019df6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019dfa:	52                   	push   edx
c0019dfb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019dff:	52                   	push   edx
c0019e00:	6a 00                	push   0x0
c0019e02:	68 00 04 00 00       	push   0x400
c0019e07:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e0e:	ff d0                	call   eax
c0019e10:	83 c4 20             	add    esp,0x20
c0019e13:	83 ec 0c             	sub    esp,0xc
c0019e16:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e1d:	e8 66 e3 fe ff       	call   c0008188 <File::close()>
c0019e22:	83 c4 10             	add    esp,0x10
c0019e25:	8d 76 00             	lea    esi,[esi+0x0]
c0019e28:	83 ec 08             	sub    esp,0x8
c0019e2b:	6a 01                	push   0x1
c0019e2d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e34:	e8 f1 e2 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019e39:	83 c4 10             	add    esp,0x10
c0019e3c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e43:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e45:	83 c0 0c             	add    eax,0xc
c0019e48:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e4a:	83 ec 0c             	sub    esp,0xc
c0019e4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e51:	52                   	push   edx
c0019e52:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019e56:	52                   	push   edx
c0019e57:	6a 00                	push   0x0
c0019e59:	6a 04                	push   0x4
c0019e5b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e62:	ff d0                	call   eax
c0019e64:	83 c4 20             	add    esp,0x20
c0019e67:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e6e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019e74:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019e7b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019e82:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019e85:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019e8c:	83 ec 0c             	sub    esp,0xc
c0019e8f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e96:	e8 ed e2 fe ff       	call   c0008188 <File::close()>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019ea5:	ba 00 00 00 00       	mov    edx,0x0
c0019eaa:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019eb0:	5b                   	pop    ebx
c0019eb1:	5e                   	pop    esi
c0019eb2:	5f                   	pop    edi
c0019eb3:	5d                   	pop    ebp
c0019eb4:	c3                   	ret    
c0019eb5:	90                   	nop
c0019eb6:	66 90                	xchg   ax,ax

c0019eb8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019eb8:	57                   	push   edi
c0019eb9:	56                   	push   esi
c0019eba:	53                   	push   ebx
c0019ebb:	81 ec 50 02 00 00    	sub    esp,0x250
c0019ec1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019ec9:	74 0d                	je     c0019ed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019ecb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019ed3:	75 0f                	jne    c0019ee4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed8:	b8 04 00 00 00       	mov    eax,0x4
c0019edd:	e9 3a 01 00 00       	jmp    c001a01c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019ee2:	66 90                	xchg   ax,ax
c0019ee4:	83 ec 08             	sub    esp,0x8
c0019ee7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019eee:	50                   	push   eax
c0019eef:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019ef6:	e8 02 aa fe ff       	call   c00048fd <f_readdir>
c0019efb:	83 c4 10             	add    esp,0x10
c0019efe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019f05:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019f0c:	83 ec 0c             	sub    esp,0xc
c0019f0f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f16:	83 c0 16             	add    eax,0x16
c0019f19:	50                   	push   eax
c0019f1a:	e8 61 66 fe ff       	call   c0000580 <strlen>
c0019f1f:	83 c4 10             	add    esp,0x10
c0019f22:	ba 00 00 00 00       	mov    edx,0x0
c0019f27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f2b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019f2f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019f36:	0f b6 c0             	movzx  eax,al
c0019f39:	83 e0 10             	and    eax,0x10
c0019f3c:	74 0a                	je     c0019f48 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019f3e:	b8 02 00 00 00       	mov    eax,0x2
c0019f43:	eb 0b                	jmp    c0019f50 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019f45:	8d 76 00             	lea    esi,[esi+0x0]
c0019f48:	b8 01 00 00 00       	mov    eax,0x1
c0019f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f54:	83 ec 08             	sub    esp,0x8
c0019f57:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019f5e:	83 c0 16             	add    eax,0x16
c0019f61:	50                   	push   eax
c0019f62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f66:	83 c0 10             	add    eax,0x10
c0019f69:	50                   	push   eax
c0019f6a:	e8 e1 66 fe ff       	call   c0000650 <strcpy>
c0019f6f:	83 c4 10             	add    esp,0x10
c0019f72:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019f79:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019f80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f84:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019f8b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019f92:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019f99:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019fa0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019fa7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019fae:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019fb5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019fbc:	89 c6                	mov    esi,eax
c0019fbe:	89 d7                	mov    edi,edx
c0019fc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fc2:	89 c8                	mov    eax,ecx
c0019fc4:	89 fa                	mov    edx,edi
c0019fc6:	89 f3                	mov    ebx,esi
c0019fc8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019fcf:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019fd6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019fdd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019fe4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019fea:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019ff1:	0f be c0             	movsx  eax,al
c0019ff4:	85 c0                	test   eax,eax
c0019ff6:	75 08                	jne    c001a000 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019ff8:	b8 07 00 00 00       	mov    eax,0x7
c0019ffd:	eb 1d                	jmp    c001a01c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019fff:	90                   	nop
c001a000:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a007:	85 c0                	test   eax,eax
c001a009:	75 09                	jne    c001a014 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a00b:	b8 00 00 00 00       	mov    eax,0x0
c001a010:	eb 0a                	jmp    c001a01c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a012:	66 90                	xchg   ax,ax
c001a014:	b8 01 00 00 00       	mov    eax,0x1
c001a019:	8d 76 00             	lea    esi,[esi+0x0]
c001a01c:	81 c4 50 02 00 00    	add    esp,0x250
c001a022:	5b                   	pop    ebx
c001a023:	5e                   	pop    esi
c001a024:	5f                   	pop    edi
c001a025:	c3                   	ret    
c001a026:	66 90                	xchg   ax,ax

c001a028 <FAT::read(void*, unsigned long, void*, int*)>:
c001a028:	83 ec 1c             	sub    esp,0x1c
c001a02b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a030:	74 0a                	je     c001a03c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a032:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a037:	75 0b                	jne    c001a044 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a039:	8d 76 00             	lea    esi,[esi+0x0]
c001a03c:	b8 04 00 00 00       	mov    eax,0x4
c001a041:	eb 41                	jmp    c001a084 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a043:	90                   	nop
c001a044:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a048:	50                   	push   eax
c001a049:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a04d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a051:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a055:	e8 ea a0 fe ff       	call   c0004144 <f_read>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a065:	89 c2                	mov    edx,eax
c001a067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a06b:	89 10                	mov    DWORD PTR [eax],edx
c001a06d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a071:	85 c0                	test   eax,eax
c001a073:	75 07                	jne    c001a07c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a075:	b8 00 00 00 00       	mov    eax,0x0
c001a07a:	eb 08                	jmp    c001a084 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a07c:	b8 01 00 00 00       	mov    eax,0x1
c001a081:	8d 76 00             	lea    esi,[esi+0x0]
c001a084:	83 c4 1c             	add    esp,0x1c
c001a087:	c3                   	ret    

c001a088 <FAT::write(void*, unsigned long, void*, int*)>:
c001a088:	83 ec 1c             	sub    esp,0x1c
c001a08b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a090:	74 0a                	je     c001a09c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a092:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a097:	75 0b                	jne    c001a0a4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a099:	8d 76 00             	lea    esi,[esi+0x0]
c001a09c:	b8 04 00 00 00       	mov    eax,0x4
c001a0a1:	eb 41                	jmp    c001a0e4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a0a3:	90                   	nop
c001a0a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0a8:	50                   	push   eax
c001a0a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a0b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0b5:	e8 6b a2 fe ff       	call   c0004325 <f_write>
c001a0ba:	83 c4 10             	add    esp,0x10
c001a0bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0c5:	89 c2                	mov    edx,eax
c001a0c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0cb:	89 10                	mov    DWORD PTR [eax],edx
c001a0cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0d1:	85 c0                	test   eax,eax
c001a0d3:	75 07                	jne    c001a0dc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a0d5:	b8 00 00 00 00       	mov    eax,0x0
c001a0da:	eb 08                	jmp    c001a0e4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a0dc:	b8 01 00 00 00       	mov    eax,0x1
c001a0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e4:	83 c4 1c             	add    esp,0x1c
c001a0e7:	c3                   	ret    

c001a0e8 <FAT::close(void*)>:
c001a0e8:	83 ec 1c             	sub    esp,0x1c
c001a0eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0f0:	75 0a                	jne    c001a0fc <FAT::close(void*)+0x14>
c001a0f2:	b8 04 00 00 00       	mov    eax,0x4
c001a0f7:	eb 3f                	jmp    c001a138 <FAT::close(void*)+0x50>
c001a0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0fc:	83 ec 0c             	sub    esp,0xc
c001a0ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a103:	e8 29 a5 fe ff       	call   c0004631 <f_close>
c001a108:	83 c4 10             	add    esp,0x10
c001a10b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a10f:	83 ec 0c             	sub    esp,0xc
c001a112:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a116:	e8 db 47 ff ff       	call   c000e8f6 <free>
c001a11b:	83 c4 10             	add    esp,0x10
c001a11e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a122:	85 c0                	test   eax,eax
c001a124:	75 0a                	jne    c001a130 <FAT::close(void*)+0x48>
c001a126:	b8 00 00 00 00       	mov    eax,0x0
c001a12b:	eb 0b                	jmp    c001a138 <FAT::close(void*)+0x50>
c001a12d:	8d 76 00             	lea    esi,[esi+0x0]
c001a130:	b8 01 00 00 00       	mov    eax,0x1
c001a135:	8d 76 00             	lea    esi,[esi+0x0]
c001a138:	83 c4 1c             	add    esp,0x1c
c001a13b:	c3                   	ret    

c001a13c <FAT::closeDir(void*)>:
c001a13c:	83 ec 1c             	sub    esp,0x1c
c001a13f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a144:	75 0a                	jne    c001a150 <FAT::closeDir(void*)+0x14>
c001a146:	b8 04 00 00 00       	mov    eax,0x4
c001a14b:	eb 3f                	jmp    c001a18c <FAT::closeDir(void*)+0x50>
c001a14d:	8d 76 00             	lea    esi,[esi+0x0]
c001a150:	83 ec 0c             	sub    esp,0xc
c001a153:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a157:	e8 7f a7 fe ff       	call   c00048db <f_closedir>
c001a15c:	83 c4 10             	add    esp,0x10
c001a15f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a163:	83 ec 0c             	sub    esp,0xc
c001a166:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a16a:	e8 87 47 ff ff       	call   c000e8f6 <free>
c001a16f:	83 c4 10             	add    esp,0x10
c001a172:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a176:	85 c0                	test   eax,eax
c001a178:	75 0a                	jne    c001a184 <FAT::closeDir(void*)+0x48>
c001a17a:	b8 00 00 00 00       	mov    eax,0x0
c001a17f:	eb 0b                	jmp    c001a18c <FAT::closeDir(void*)+0x50>
c001a181:	8d 76 00             	lea    esi,[esi+0x0]
c001a184:	b8 01 00 00 00       	mov    eax,0x1
c001a189:	8d 76 00             	lea    esi,[esi+0x0]
c001a18c:	83 c4 1c             	add    esp,0x1c
c001a18f:	c3                   	ret    

c001a190 <FAT::truncate(void*, unsigned long long)>:
c001a190:	83 ec 2c             	sub    esp,0x2c
c001a193:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a197:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a19b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a19f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a1a8:	75 0a                	jne    c001a1b4 <FAT::truncate(void*, unsigned long long)+0x24>
c001a1aa:	b8 04 00 00 00       	mov    eax,0x4
c001a1af:	eb 47                	jmp    c001a1f8 <FAT::truncate(void*, unsigned long long)+0x68>
c001a1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a1bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a1c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1cb:	83 ec 08             	sub    esp,0x8
c001a1ce:	50                   	push   eax
c001a1cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a1d3:	e8 88 a4 fe ff       	call   c0004660 <f_lseek>
c001a1d8:	83 c4 10             	add    esp,0x10
c001a1db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1e3:	85 c0                	test   eax,eax
c001a1e5:	75 09                	jne    c001a1f0 <FAT::truncate(void*, unsigned long long)+0x60>
c001a1e7:	b8 00 00 00 00       	mov    eax,0x0
c001a1ec:	eb 0a                	jmp    c001a1f8 <FAT::truncate(void*, unsigned long long)+0x68>
c001a1ee:	66 90                	xchg   ax,ax
c001a1f0:	b8 01 00 00 00       	mov    eax,0x1
c001a1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f8:	83 c4 2c             	add    esp,0x2c
c001a1fb:	c3                   	ret    

c001a1fc <FAT::seek(void*, unsigned long long)>:
c001a1fc:	83 ec 2c             	sub    esp,0x2c
c001a1ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a203:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a207:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a20b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a20f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a214:	75 0a                	jne    c001a220 <FAT::seek(void*, unsigned long long)+0x24>
c001a216:	b8 04 00 00 00       	mov    eax,0x4
c001a21b:	eb 33                	jmp    c001a250 <FAT::seek(void*, unsigned long long)+0x54>
c001a21d:	8d 76 00             	lea    esi,[esi+0x0]
c001a220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a224:	83 ec 08             	sub    esp,0x8
c001a227:	50                   	push   eax
c001a228:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a22c:	e8 2f a4 fe ff       	call   c0004660 <f_lseek>
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a23c:	85 c0                	test   eax,eax
c001a23e:	75 08                	jne    c001a248 <FAT::seek(void*, unsigned long long)+0x4c>
c001a240:	b8 00 00 00 00       	mov    eax,0x0
c001a245:	eb 09                	jmp    c001a250 <FAT::seek(void*, unsigned long long)+0x54>
c001a247:	90                   	nop
c001a248:	b8 01 00 00 00       	mov    eax,0x1
c001a24d:	8d 76 00             	lea    esi,[esi+0x0]
c001a250:	83 c4 2c             	add    esp,0x2c
c001a253:	c3                   	ret    

c001a254 <fatWrapperReadDisk>:
c001a254:	53                   	push   ebx
c001a255:	83 ec 18             	sub    esp,0x18
c001a258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a25c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a260:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a265:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a26c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a270:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a274:	ba 00 00 00 00       	mov    edx,0x0
c001a279:	83 ec 0c             	sub    esp,0xc
c001a27c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a280:	53                   	push   ebx
c001a281:	52                   	push   edx
c001a282:	50                   	push   eax
c001a283:	51                   	push   ecx
c001a284:	e8 57 fe fe ff       	call   c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>
c001a289:	83 c4 20             	add    esp,0x20
c001a28c:	83 c4 18             	add    esp,0x18
c001a28f:	5b                   	pop    ebx
c001a290:	c3                   	ret    
c001a291:	8d 76 00             	lea    esi,[esi+0x0]

c001a294 <fatWrapperWriteDisk>:
c001a294:	53                   	push   ebx
c001a295:	83 ec 18             	sub    esp,0x18
c001a298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a29c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2a5:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a2ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a2b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a2b4:	ba 00 00 00 00       	mov    edx,0x0
c001a2b9:	83 ec 0c             	sub    esp,0xc
c001a2bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2c0:	53                   	push   ebx
c001a2c1:	52                   	push   edx
c001a2c2:	50                   	push   eax
c001a2c3:	51                   	push   ecx
c001a2c4:	e8 83 fe fe ff       	call   c000a14c <LogicalDisk::write(unsigned long long, int, void*)>
c001a2c9:	83 c4 20             	add    esp,0x20
c001a2cc:	83 c4 18             	add    esp,0x18
c001a2cf:	5b                   	pop    ebx
c001a2d0:	c3                   	ret    
c001a2d1:	8d 76 00             	lea    esi,[esi+0x0]

c001a2d4 <fatWrapperIoctl>:
c001a2d4:	53                   	push   ebx
c001a2d5:	83 ec 28             	sub    esp,0x28
c001a2d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a2dc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a2e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2e4:	88 d0                	mov    al,dl
c001a2e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a2ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a2ef:	83 f8 02             	cmp    eax,0x2
c001a2f2:	75 34                	jne    c001a328 <fatWrapperIoctl+0x54>
c001a2f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a301:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a308:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a30e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a314:	89 c2                	mov    edx,eax
c001a316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a31a:	66 89 10             	mov    WORD PTR [eax],dx
c001a31d:	b8 00 00 00 00       	mov    eax,0x0
c001a322:	e9 c5 00 00 00       	jmp    c001a3ec <fatWrapperIoctl+0x118>
c001a327:	90                   	nop
c001a328:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a32d:	83 f8 01             	cmp    eax,0x1
c001a330:	75 6a                	jne    c001a39c <fatWrapperIoctl+0xc8>
c001a332:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a336:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a33a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a33f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a346:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a34c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a352:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a358:	89 c8                	mov    eax,ecx
c001a35a:	89 da                	mov    edx,ebx
c001a35c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a360:	c1 e0 0a             	shl    eax,0xa
c001a363:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a368:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a36f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a375:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a37b:	89 cb                	mov    ebx,ecx
c001a37d:	c1 fb 1f             	sar    ebx,0x1f
c001a380:	53                   	push   ebx
c001a381:	51                   	push   ecx
c001a382:	52                   	push   edx
c001a383:	50                   	push   eax
c001a384:	e8 8b 57 00 00       	call   c001fb14 <__udivdi3>
c001a389:	83 c4 10             	add    esp,0x10
c001a38c:	89 c2                	mov    edx,eax
c001a38e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a392:	89 10                	mov    DWORD PTR [eax],edx
c001a394:	b8 00 00 00 00       	mov    eax,0x0
c001a399:	eb 51                	jmp    c001a3ec <fatWrapperIoctl+0x118>
c001a39b:	90                   	nop
c001a39c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3a1:	85 c0                	test   eax,eax
c001a3a3:	75 07                	jne    c001a3ac <fatWrapperIoctl+0xd8>
c001a3a5:	b8 00 00 00 00       	mov    eax,0x0
c001a3aa:	eb 40                	jmp    c001a3ec <fatWrapperIoctl+0x118>
c001a3ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3b1:	83 f8 03             	cmp    eax,0x3
c001a3b4:	75 1a                	jne    c001a3d0 <fatWrapperIoctl+0xfc>
c001a3b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3c2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a3c8:	b8 00 00 00 00       	mov    eax,0x0
c001a3cd:	eb 1d                	jmp    c001a3ec <fatWrapperIoctl+0x118>
c001a3cf:	90                   	nop
c001a3d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3d5:	83 f8 04             	cmp    eax,0x4
c001a3d8:	75 0a                	jne    c001a3e4 <fatWrapperIoctl+0x110>
c001a3da:	b8 00 00 00 00       	mov    eax,0x0
c001a3df:	eb 0b                	jmp    c001a3ec <fatWrapperIoctl+0x118>
c001a3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e4:	b8 04 00 00 00       	mov    eax,0x4
c001a3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3ec:	83 c4 28             	add    esp,0x28
c001a3ef:	5b                   	pop    ebx
c001a3f0:	c3                   	ret    
c001a3f1:	90                   	nop
c001a3f2:	66 90                	xchg   ax,ax

c001a3f4 <FAT::FAT()>:
c001a3f4:	83 ec 1c             	sub    esp,0x1c
c001a3f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3fb:	83 ec 0c             	sub    esp,0xc
c001a3fe:	50                   	push   eax
c001a3ff:	e8 52 d9 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	ba e4 31 02 c0       	mov    edx,0xc00231e4
c001a40c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a410:	89 10                	mov    DWORD PTR [eax],edx
c001a412:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a41c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a424:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a429:	7f 19                	jg     c001a444 <FAT::FAT()+0x50>
c001a42b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a42f:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a43a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a43f:	eb e3                	jmp    c001a424 <FAT::FAT()+0x30>
c001a441:	8d 76 00             	lea    esi,[esi+0x0]
c001a444:	90                   	nop
c001a445:	83 c4 1c             	add    esp,0x1c
c001a448:	c3                   	ret    
c001a449:	90                   	nop
c001a44a:	66 90                	xchg   ax,ax

c001a44c <FAT::fixFilepath(char*)>:
c001a44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a450:	8a 00                	mov    al,BYTE PTR [eax]
c001a452:	0f be c0             	movsx  eax,al
c001a455:	83 f8 40             	cmp    eax,0x40
c001a458:	7e 2e                	jle    c001a488 <FAT::fixFilepath(char*)+0x3c>
c001a45a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a45e:	8a 00                	mov    al,BYTE PTR [eax]
c001a460:	83 e8 41             	sub    eax,0x41
c001a463:	88 c2                	mov    dl,al
c001a465:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a469:	88 10                	mov    BYTE PTR [eax],dl
c001a46b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a46f:	8a 00                	mov    al,BYTE PTR [eax]
c001a471:	0f be c0             	movsx  eax,al
c001a474:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a47b:	83 c0 30             	add    eax,0x30
c001a47e:	88 c2                	mov    dl,al
c001a480:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a484:	88 10                	mov    BYTE PTR [eax],dl
c001a486:	66 90                	xchg   ax,ax
c001a488:	90                   	nop
c001a489:	c3                   	ret    
c001a48a:	66 90                	xchg   ax,ax

c001a48c <FAT::open(char const*, void**, FileOpenMode)>:
c001a48c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a492:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a49a:	74 0c                	je     c001a4a8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a49c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a4a4:	75 0e                	jne    c001a4b4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a4a6:	66 90                	xchg   ax,ax
c001a4a8:	b8 04 00 00 00       	mov    eax,0x4
c001a4ad:	e9 46 01 00 00       	jmp    c001a5f8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a4b2:	66 90                	xchg   ax,ax
c001a4b4:	83 ec 08             	sub    esp,0x8
c001a4b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a4be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a4c2:	50                   	push   eax
c001a4c3:	e8 88 61 fe ff       	call   c0000650 <strcpy>
c001a4c8:	83 c4 10             	add    esp,0x10
c001a4cb:	83 ec 08             	sub    esp,0x8
c001a4ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a4d2:	50                   	push   eax
c001a4d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a4da:	e8 6d ff ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001a4df:	83 c4 10             	add    esp,0x10
c001a4e2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a4ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4f1:	83 e0 01             	and    eax,0x1
c001a4f4:	74 12                	je     c001a508 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a4f6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4fd:	83 c8 01             	or     eax,0x1
c001a500:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a507:	90                   	nop
c001a508:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a50f:	83 e0 04             	and    eax,0x4
c001a512:	74 24                	je     c001a538 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a514:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a51b:	83 c8 30             	or     eax,0x30
c001a51e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a525:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a52c:	83 c8 02             	or     eax,0x2
c001a52f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a536:	66 90                	xchg   ax,ax
c001a538:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a53f:	83 e0 02             	and    eax,0x2
c001a542:	74 14                	je     c001a558 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a544:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a54b:	83 c8 02             	or     eax,0x2
c001a54e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a555:	8d 76 00             	lea    esi,[esi+0x0]
c001a558:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a55f:	83 e0 08             	and    eax,0x8
c001a562:	74 14                	je     c001a578 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a564:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a56b:	83 c8 04             	or     eax,0x4
c001a56e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a575:	8d 76 00             	lea    esi,[esi+0x0]
c001a578:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a57f:	83 e0 10             	and    eax,0x10
c001a582:	74 14                	je     c001a598 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a584:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a58b:	83 c8 08             	or     eax,0x8
c001a58e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a595:	8d 76 00             	lea    esi,[esi+0x0]
c001a598:	83 ec 0c             	sub    esp,0xc
c001a59b:	68 28 02 00 00       	push   0x228
c001a5a0:	e8 41 43 ff ff       	call   c000e8e6 <malloc>
c001a5a5:	83 c4 10             	add    esp,0x10
c001a5a8:	89 c2                	mov    edx,eax
c001a5aa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5b1:	89 10                	mov    DWORD PTR [eax],edx
c001a5b3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a5bb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5c4:	83 ec 04             	sub    esp,0x4
c001a5c7:	52                   	push   edx
c001a5c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a5cc:	52                   	push   edx
c001a5cd:	50                   	push   eax
c001a5ce:	e8 ae 98 fe ff       	call   c0003e81 <f_open>
c001a5d3:	83 c4 10             	add    esp,0x10
c001a5d6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a5dd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a5e5:	74 09                	je     c001a5f0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a5e7:	b8 01 00 00 00       	mov    eax,0x1
c001a5ec:	eb 0a                	jmp    c001a5f8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a5ee:	66 90                	xchg   ax,ax
c001a5f0:	b8 00 00 00 00       	mov    eax,0x0
c001a5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a5f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5fe:	c3                   	ret    
c001a5ff:	90                   	nop

c001a600 <FAT::openDir(char const*, void**)>:
c001a600:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a606:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a60e:	74 0c                	je     c001a61c <FAT::openDir(char const*, void**)+0x1c>
c001a610:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a618:	75 0e                	jne    c001a628 <FAT::openDir(char const*, void**)+0x28>
c001a61a:	66 90                	xchg   ax,ax
c001a61c:	b8 04 00 00 00       	mov    eax,0x4
c001a621:	e9 82 00 00 00       	jmp    c001a6a8 <FAT::openDir(char const*, void**)+0xa8>
c001a626:	66 90                	xchg   ax,ax
c001a628:	83 ec 08             	sub    esp,0x8
c001a62b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a632:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a636:	50                   	push   eax
c001a637:	e8 14 60 fe ff       	call   c0000650 <strcpy>
c001a63c:	83 c4 10             	add    esp,0x10
c001a63f:	83 ec 08             	sub    esp,0x8
c001a642:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a646:	50                   	push   eax
c001a647:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a64e:	e8 f9 fd ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001a653:	83 c4 10             	add    esp,0x10
c001a656:	83 ec 0c             	sub    esp,0xc
c001a659:	6a 30                	push   0x30
c001a65b:	e8 86 42 ff ff       	call   c000e8e6 <malloc>
c001a660:	83 c4 10             	add    esp,0x10
c001a663:	89 c2                	mov    edx,eax
c001a665:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a66c:	89 10                	mov    DWORD PTR [eax],edx
c001a66e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a675:	8b 00                	mov    eax,DWORD PTR [eax]
c001a677:	83 ec 08             	sub    esp,0x8
c001a67a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a67e:	52                   	push   edx
c001a67f:	50                   	push   eax
c001a680:	e8 8b a1 fe ff       	call   c0004810 <f_opendir>
c001a685:	83 c4 10             	add    esp,0x10
c001a688:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a68f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a697:	74 07                	je     c001a6a0 <FAT::openDir(char const*, void**)+0xa0>
c001a699:	b8 01 00 00 00       	mov    eax,0x1
c001a69e:	eb 08                	jmp    c001a6a8 <FAT::openDir(char const*, void**)+0xa8>
c001a6a0:	b8 00 00 00 00       	mov    eax,0x0
c001a6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6ae:	c3                   	ret    
c001a6af:	90                   	nop

c001a6b0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a6b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a6b6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a6be:	75 0c                	jne    c001a6cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a6c0:	b8 04 00 00 00       	mov    eax,0x4
c001a6c5:	e9 d6 00 00 00       	jmp    c001a7a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6ca:	66 90                	xchg   ax,ax
c001a6cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a6d4:	75 0a                	jne    c001a6e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a6d6:	b8 04 00 00 00       	mov    eax,0x4
c001a6db:	e9 c0 00 00 00       	jmp    c001a7a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a6e8:	75 0a                	jne    c001a6f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a6ea:	b8 04 00 00 00       	mov    eax,0x4
c001a6ef:	e9 ac 00 00 00       	jmp    c001a7a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6f4:	83 ec 08             	sub    esp,0x8
c001a6f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a6fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a705:	50                   	push   eax
c001a706:	e8 45 5f fe ff       	call   c0000650 <strcpy>
c001a70b:	83 c4 10             	add    esp,0x10
c001a70e:	83 ec 08             	sub    esp,0x8
c001a711:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a718:	50                   	push   eax
c001a719:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a720:	e8 27 fd ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001a725:	83 c4 10             	add    esp,0x10
c001a728:	83 ec 08             	sub    esp,0x8
c001a72b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a72f:	50                   	push   eax
c001a730:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a737:	50                   	push   eax
c001a738:	e8 52 a2 fe ff       	call   c000498f <f_stat>
c001a73d:	83 c4 10             	add    esp,0x10
c001a740:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a747:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a74e:	85 c0                	test   eax,eax
c001a750:	74 0a                	je     c001a75c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a752:	83 f8 04             	cmp    eax,0x4
c001a755:	74 39                	je     c001a790 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a757:	eb 3f                	jmp    c001a798 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a759:	8d 76 00             	lea    esi,[esi+0x0]
c001a75c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a760:	0f b6 c0             	movzx  eax,al
c001a763:	83 e0 10             	and    eax,0x10
c001a766:	0f 95 c2             	setne  dl
c001a769:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a770:	88 10                	mov    BYTE PTR [eax],dl
c001a772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a776:	ba 00 00 00 00       	mov    edx,0x0
c001a77b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a782:	89 01                	mov    DWORD PTR [ecx],eax
c001a784:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a787:	b8 00 00 00 00       	mov    eax,0x0
c001a78c:	eb 12                	jmp    c001a7a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a78e:	66 90                	xchg   ax,ax
c001a790:	b8 02 00 00 00       	mov    eax,0x2
c001a795:	eb 09                	jmp    c001a7a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a797:	90                   	nop
c001a798:	b8 01 00 00 00       	mov    eax,0x1
c001a79d:	8d 76 00             	lea    esi,[esi+0x0]
c001a7a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a7a6:	c3                   	ret    
c001a7a7:	90                   	nop

c001a7a8 <FAT::unlink(char const*)>:
c001a7a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a7ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7b6:	75 08                	jne    c001a7c0 <FAT::unlink(char const*)+0x18>
c001a7b8:	b8 04 00 00 00       	mov    eax,0x4
c001a7bd:	eb 61                	jmp    c001a820 <FAT::unlink(char const*)+0x78>
c001a7bf:	90                   	nop
c001a7c0:	83 ec 08             	sub    esp,0x8
c001a7c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7ce:	50                   	push   eax
c001a7cf:	e8 7c 5e fe ff       	call   c0000650 <strcpy>
c001a7d4:	83 c4 10             	add    esp,0x10
c001a7d7:	83 ec 08             	sub    esp,0x8
c001a7da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7de:	50                   	push   eax
c001a7df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7e6:	e8 61 fc ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001a7eb:	83 c4 10             	add    esp,0x10
c001a7ee:	83 ec 0c             	sub    esp,0xc
c001a7f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7f5:	50                   	push   eax
c001a7f6:	e8 06 a4 fe ff       	call   c0004c01 <f_unlink>
c001a7fb:	83 c4 10             	add    esp,0x10
c001a7fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a805:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a80c:	85 c0                	test   eax,eax
c001a80e:	75 08                	jne    c001a818 <FAT::unlink(char const*)+0x70>
c001a810:	b8 00 00 00 00       	mov    eax,0x0
c001a815:	eb 09                	jmp    c001a820 <FAT::unlink(char const*)+0x78>
c001a817:	90                   	nop
c001a818:	b8 01 00 00 00       	mov    eax,0x1
c001a81d:	8d 76 00             	lea    esi,[esi+0x0]
c001a820:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a826:	c3                   	ret    
c001a827:	90                   	nop

c001a828 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a828:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a82e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a835:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a83c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a840:	88 d0                	mov    al,dl
c001a842:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a846:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a84e:	75 0c                	jne    c001a85c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a850:	b8 04 00 00 00       	mov    eax,0x4
c001a855:	e9 7e 01 00 00       	jmp    c001a9d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a85a:	66 90                	xchg   ax,ax
c001a85c:	83 ec 08             	sub    esp,0x8
c001a85f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a866:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a86a:	50                   	push   eax
c001a86b:	e8 e0 5d fe ff       	call   c0000650 <strcpy>
c001a870:	83 c4 10             	add    esp,0x10
c001a873:	83 ec 08             	sub    esp,0x8
c001a876:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a87a:	50                   	push   eax
c001a87b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a882:	e8 c5 fb ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001a887:	83 c4 10             	add    esp,0x10
c001a88a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a892:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a89a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a89f:	83 e0 01             	and    eax,0x1
c001a8a2:	74 14                	je     c001a8b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a8a4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8ab:	83 c8 01             	or     eax,0x1
c001a8ae:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8bd:	83 e0 02             	and    eax,0x2
c001a8c0:	74 12                	je     c001a8d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a8c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8c9:	83 c8 20             	or     eax,0x20
c001a8cc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8d3:	90                   	nop
c001a8d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8d9:	83 e0 04             	and    eax,0x4
c001a8dc:	74 12                	je     c001a8f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a8de:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8e5:	83 c8 04             	or     eax,0x4
c001a8e8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8ef:	90                   	nop
c001a8f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8f5:	83 e0 08             	and    eax,0x8
c001a8f8:	74 12                	je     c001a90c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a8fa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a901:	83 c8 02             	or     eax,0x2
c001a904:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a90b:	90                   	nop
c001a90c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a911:	83 e0 01             	and    eax,0x1
c001a914:	74 12                	je     c001a928 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a916:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a91d:	83 c8 01             	or     eax,0x1
c001a920:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a927:	90                   	nop
c001a928:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a92d:	83 e0 02             	and    eax,0x2
c001a930:	74 12                	je     c001a944 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a932:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a939:	83 c8 20             	or     eax,0x20
c001a93c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a943:	90                   	nop
c001a944:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a949:	83 e0 04             	and    eax,0x4
c001a94c:	74 12                	je     c001a960 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a94e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a955:	83 c8 04             	or     eax,0x4
c001a958:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a95f:	90                   	nop
c001a960:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a965:	83 e0 08             	and    eax,0x8
c001a968:	74 12                	je     c001a97c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a96a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a971:	83 c8 02             	or     eax,0x2
c001a974:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a97b:	90                   	nop
c001a97c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a983:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a98a:	09 d0                	or     eax,edx
c001a98c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a993:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a99b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a9a3:	83 ec 04             	sub    esp,0x4
c001a9a6:	52                   	push   edx
c001a9a7:	50                   	push   eax
c001a9a8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9ac:	50                   	push   eax
c001a9ad:	e8 c2 a6 fe ff       	call   c0005074 <f_chmod>
c001a9b2:	83 c4 10             	add    esp,0x10
c001a9b5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a9bc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a9c3:	85 c0                	test   eax,eax
c001a9c5:	75 09                	jne    c001a9d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a9c7:	b8 00 00 00 00       	mov    eax,0x0
c001a9cc:	eb 0a                	jmp    c001a9d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a9ce:	66 90                	xchg   ax,ax
c001a9d0:	b8 01 00 00 00       	mov    eax,0x1
c001a9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9d8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a9de:	c3                   	ret    
c001a9df:	90                   	nop

c001a9e0 <FAT::rename(char const*, char const*)>:
c001a9e0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a9e6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a9ee:	74 0c                	je     c001a9fc <FAT::rename(char const*, char const*)+0x1c>
c001a9f0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a9f8:	75 0e                	jne    c001aa08 <FAT::rename(char const*, char const*)+0x28>
c001a9fa:	66 90                	xchg   ax,ax
c001a9fc:	b8 04 00 00 00       	mov    eax,0x4
c001aa01:	e9 9e 00 00 00       	jmp    c001aaa4 <FAT::rename(char const*, char const*)+0xc4>
c001aa06:	66 90                	xchg   ax,ax
c001aa08:	83 ec 08             	sub    esp,0x8
c001aa0b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa12:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa19:	50                   	push   eax
c001aa1a:	e8 31 5c fe ff       	call   c0000650 <strcpy>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	83 ec 08             	sub    esp,0x8
c001aa25:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aa2c:	50                   	push   eax
c001aa2d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa34:	e8 13 fa ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	83 ec 08             	sub    esp,0x8
c001aa3f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aa46:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa4a:	50                   	push   eax
c001aa4b:	e8 00 5c fe ff       	call   c0000650 <strcpy>
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	83 ec 08             	sub    esp,0x8
c001aa56:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa5a:	50                   	push   eax
c001aa5b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa62:	e8 e5 f9 ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001aa67:	83 c4 10             	add    esp,0x10
c001aa6a:	83 ec 08             	sub    esp,0x8
c001aa6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa71:	50                   	push   eax
c001aa72:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa79:	50                   	push   eax
c001aa7a:	e8 3d a4 fe ff       	call   c0004ebc <f_rename>
c001aa7f:	83 c4 10             	add    esp,0x10
c001aa82:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001aa89:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001aa90:	85 c0                	test   eax,eax
c001aa92:	75 08                	jne    c001aa9c <FAT::rename(char const*, char const*)+0xbc>
c001aa94:	b8 00 00 00 00       	mov    eax,0x0
c001aa99:	eb 09                	jmp    c001aaa4 <FAT::rename(char const*, char const*)+0xc4>
c001aa9b:	90                   	nop
c001aa9c:	b8 01 00 00 00       	mov    eax,0x1
c001aaa1:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aaaa:	c3                   	ret    
c001aaab:	90                   	nop

c001aaac <FAT::mkdir(char const*)>:
c001aaac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aab2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aaba:	75 08                	jne    c001aac4 <FAT::mkdir(char const*)+0x18>
c001aabc:	b8 04 00 00 00       	mov    eax,0x4
c001aac1:	eb 61                	jmp    c001ab24 <FAT::mkdir(char const*)+0x78>
c001aac3:	90                   	nop
c001aac4:	83 ec 08             	sub    esp,0x8
c001aac7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aace:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aad2:	50                   	push   eax
c001aad3:	e8 78 5b fe ff       	call   c0000650 <strcpy>
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	83 ec 08             	sub    esp,0x8
c001aade:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aae2:	50                   	push   eax
c001aae3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aaea:	e8 5d f9 ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001aaef:	83 c4 10             	add    esp,0x10
c001aaf2:	83 ec 0c             	sub    esp,0xc
c001aaf5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aaf9:	50                   	push   eax
c001aafa:	e8 22 a2 fe ff       	call   c0004d21 <f_mkdir>
c001aaff:	83 c4 10             	add    esp,0x10
c001ab02:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab09:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ab10:	85 c0                	test   eax,eax
c001ab12:	75 08                	jne    c001ab1c <FAT::mkdir(char const*)+0x70>
c001ab14:	b8 00 00 00 00       	mov    eax,0x0
c001ab19:	eb 09                	jmp    c001ab24 <FAT::mkdir(char const*)+0x78>
c001ab1b:	90                   	nop
c001ab1c:	b8 01 00 00 00       	mov    eax,0x1
c001ab21:	8d 76 00             	lea    esi,[esi+0x0]
c001ab24:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab2a:	c3                   	ret    
c001ab2b:	90                   	nop

c001ab2c <FAT::exists(char const*)>:
c001ab2c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ab32:	83 ec 08             	sub    esp,0x8
c001ab35:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab3c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab40:	50                   	push   eax
c001ab41:	e8 0a 5b fe ff       	call   c0000650 <strcpy>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	83 ec 08             	sub    esp,0x8
c001ab4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ab50:	50                   	push   eax
c001ab51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab58:	e8 ef f8 ff ff       	call   c001a44c <FAT::fixFilepath(char*)>
c001ab5d:	83 c4 10             	add    esp,0x10
c001ab60:	83 ec 08             	sub    esp,0x8
c001ab63:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001ab6a:	50                   	push   eax
c001ab6b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab6f:	50                   	push   eax
c001ab70:	e8 1a 9e fe ff       	call   c000498f <f_stat>
c001ab75:	83 c4 10             	add    esp,0x10
c001ab78:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab7f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab86:	85 c0                	test   eax,eax
c001ab88:	75 06                	jne    c001ab90 <FAT::exists(char const*)+0x64>
c001ab8a:	b0 01                	mov    al,0x1
c001ab8c:	eb 06                	jmp    c001ab94 <FAT::exists(char const*)+0x68>
c001ab8e:	66 90                	xchg   ax,ax
c001ab90:	b0 00                	mov    al,0x0
c001ab92:	66 90                	xchg   ax,ax
c001ab94:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ab9a:	c3                   	ret    
c001ab9b:	90                   	nop

c001ab9c <isoReadDiscSectorHelper>:
c001ab9c:	83 ec 2c             	sub    esp,0x2c
c001ab9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aba3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aba7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001abac:	83 e8 41             	sub    eax,0x41
c001abaf:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001abb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abba:	ba 00 00 00 00       	mov    edx,0x0
c001abbf:	83 ec 0c             	sub    esp,0xc
c001abc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abc6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001abca:	52                   	push   edx
c001abcb:	50                   	push   eax
c001abcc:	51                   	push   ecx
c001abcd:	e8 0e f5 fe ff       	call   c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>
c001abd2:	83 c4 20             	add    esp,0x20
c001abd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abd9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abde:	74 0c                	je     c001abec <isoReadDiscSectorHelper+0x50>
c001abe0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abe4:	c1 e0 0b             	shl    eax,0xb
c001abe7:	eb 0b                	jmp    c001abf4 <isoReadDiscSectorHelper+0x58>
c001abe9:	8d 76 00             	lea    esi,[esi+0x0]
c001abec:	b8 00 00 00 00       	mov    eax,0x0
c001abf1:	8d 76 00             	lea    esi,[esi+0x0]
c001abf4:	83 c4 2c             	add    esp,0x2c
c001abf7:	c3                   	ret    

c001abf8 <iso_kprintf>:
c001abf8:	83 ec 0c             	sub    esp,0xc
c001abfb:	83 ec 08             	sub    esp,0x8
c001abfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac02:	68 bb 2e 02 c0       	push   0xc0022ebb
c001ac07:	e8 42 c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ac0c:	83 c4 10             	add    esp,0x10
c001ac0f:	90                   	nop
c001ac10:	83 c4 0c             	add    esp,0xc
c001ac13:	c3                   	ret    

c001ac14 <iso_kprintfd>:
c001ac14:	83 ec 0c             	sub    esp,0xc
c001ac17:	83 ec 08             	sub    esp,0x8
c001ac1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac1e:	68 71 15 02 c0       	push   0xc0021571
c001ac23:	e8 26 c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ac28:	83 c4 10             	add    esp,0x10
c001ac2b:	90                   	nop
c001ac2c:	83 c4 0c             	add    esp,0xc
c001ac2f:	c3                   	ret    

c001ac30 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ac30:	b8 08 00 00 00       	mov    eax,0x8
c001ac35:	c3                   	ret    

c001ac36 <ISO9660::truncate(void*, unsigned long long)>:
c001ac36:	b8 01 00 00 00       	mov    eax,0x1
c001ac3b:	c3                   	ret    

c001ac3c <ISO9660::getName()>:
c001ac3c:	b8 48 32 02 c0       	mov    eax,0xc0023248
c001ac41:	c3                   	ret    

c001ac42 <ISO9660::closeDir(void*)>:
c001ac42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac46:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac48:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001ac4b:	90                   	nop

c001ac4c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac4c:	b8 01 00 00 00       	mov    eax,0x1
c001ac51:	c3                   	ret    

c001ac52 <ISO9660::unlink(char const*)>:
c001ac52:	b8 01 00 00 00       	mov    eax,0x1
c001ac57:	c3                   	ret    

c001ac58 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ac58:	b8 03 00 00 00       	mov    eax,0x3
c001ac5d:	c3                   	ret    

c001ac5e <ISO9660::rename(char const*, char const*)>:
c001ac5e:	b8 01 00 00 00       	mov    eax,0x1
c001ac63:	c3                   	ret    

c001ac64 <ISO9660::mkdir(char const*)>:
c001ac64:	b8 01 00 00 00       	mov    eax,0x1
c001ac69:	c3                   	ret    

c001ac6a <ISO9660::~ISO9660()>:
c001ac6a:	83 ec 0c             	sub    esp,0xc
c001ac6d:	ba 88 33 02 c0       	mov    edx,0xc0023388
c001ac72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac76:	89 10                	mov    DWORD PTR [eax],edx
c001ac78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7c:	83 ec 0c             	sub    esp,0xc
c001ac7f:	50                   	push   eax
c001ac80:	e8 f5 d0 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001ac85:	83 c4 10             	add    esp,0x10
c001ac88:	90                   	nop
c001ac89:	83 c4 0c             	add    esp,0xc
c001ac8c:	c3                   	ret    
c001ac8d:	90                   	nop

c001ac8e <ISO9660::~ISO9660()>:
c001ac8e:	83 ec 0c             	sub    esp,0xc
c001ac91:	83 ec 0c             	sub    esp,0xc
c001ac94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac98:	e8 cd ff ff ff       	call   c001ac6a <ISO9660::~ISO9660()>
c001ac9d:	83 c4 10             	add    esp,0x10
c001aca0:	83 ec 08             	sub    esp,0x8
c001aca3:	6a 08                	push   0x8
c001aca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aca9:	e8 b5 19 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001acae:	83 c4 10             	add    esp,0x10
c001acb1:	83 c4 0c             	add    esp,0xc
c001acb4:	c3                   	ret    
c001acb5:	90                   	nop

c001acb6 <ISO9660::exists(char const*)>:
c001acb6:	83 ec 18             	sub    esp,0x18
c001acb9:	68 63 32 02 c0       	push   0xc0023263
c001acbe:	e8 77 3f ff ff       	call   c000ec3a <KePanic(char const*)>
c001acc3:	31 c0                	xor    eax,eax
c001acc5:	83 c4 1c             	add    esp,0x1c
c001acc8:	c3                   	ret    
c001acc9:	90                   	nop

c001acca <ISO9660::open(char const*, void**, FileOpenMode)>:
c001acca:	56                   	push   esi
c001accb:	53                   	push   ebx
c001accc:	53                   	push   ebx
c001accd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001acd1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001acd5:	85 db                	test   ebx,ebx
c001acd7:	0f 84 ca 00 00 00    	je     c001ada7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001acdd:	85 f6                	test   esi,esi
c001acdf:	0f 84 c2 00 00 00    	je     c001ada7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ace5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001acea:	b8 03 00 00 00       	mov    eax,0x3
c001acef:	0f 85 b7 00 00 00    	jne    c001adac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001acf5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001acf7:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001acfd:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ad04:	74 1b                	je     c001ad21 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad06:	85 c0                	test   eax,eax
c001ad08:	74 10                	je     c001ad1a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ad0a:	83 ec 0c             	sub    esp,0xc
c001ad0d:	68 81 32 02 c0       	push   0xc0023281
c001ad12:	e8 23 3f ff ff       	call   c000ec3a <KePanic(char const*)>
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	8a 03                	mov    al,BYTE PTR [ebx]
c001ad1c:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ad21:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ad24:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ad2b:	85 c0                	test   eax,eax
c001ad2d:	74 09                	je     c001ad38 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ad2f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ad36:	74 48                	je     c001ad80 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ad38:	83 ec 0c             	sub    esp,0xc
c001ad3b:	68 91 32 02 c0       	push   0xc0023291
c001ad40:	e8 09 c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ad45:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ad48:	83 c4 10             	add    esp,0x10
c001ad4b:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ad52:	85 c0                	test   eax,eax
c001ad54:	74 17                	je     c001ad6d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ad56:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ad5d:	83 ec 0c             	sub    esp,0xc
c001ad60:	68 b1 32 02 c0       	push   0xc00232b1
c001ad65:	e8 e4 c1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ad6a:	83 c4 10             	add    esp,0x10
c001ad6d:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ad74:	83 ec 0c             	sub    esp,0xc
c001ad77:	50                   	push   eax
c001ad78:	e8 ca be fe ff       	call   c0006c47 <init_percd>
c001ad7d:	83 c4 10             	add    esp,0x10
c001ad80:	51                   	push   ecx
c001ad81:	83 c3 03             	add    ebx,0x3
c001ad84:	51                   	push   ecx
c001ad85:	6a 00                	push   0x0
c001ad87:	53                   	push   ebx
c001ad88:	e8 7d b9 fe ff       	call   c000670a <iso_open>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	89 c2                	mov    edx,eax
c001ad92:	b8 01 00 00 00       	mov    eax,0x1
c001ad97:	83 fa ff             	cmp    edx,0xffffffff
c001ad9a:	74 10                	je     c001adac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad9c:	83 c2 32             	add    edx,0x32
c001ad9f:	31 c0                	xor    eax,eax
c001ada1:	01 d2                	add    edx,edx
c001ada3:	89 16                	mov    DWORD PTR [esi],edx
c001ada5:	eb 05                	jmp    c001adac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ada7:	b8 04 00 00 00       	mov    eax,0x4
c001adac:	5a                   	pop    edx
c001adad:	5b                   	pop    ebx
c001adae:	5e                   	pop    esi
c001adaf:	c3                   	ret    

c001adb0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001adb0:	53                   	push   ebx
c001adb1:	83 ec 08             	sub    esp,0x8
c001adb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adbc:	85 c0                	test   eax,eax
c001adbe:	74 2d                	je     c001aded <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001adc0:	85 db                	test   ebx,ebx
c001adc2:	74 29                	je     c001aded <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001adc4:	52                   	push   edx
c001adc5:	b9 02 00 00 00       	mov    ecx,0x2
c001adca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adce:	99                   	cdq    
c001adcf:	f7 f9                	idiv   ecx
c001add1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001add5:	83 e8 32             	sub    eax,0x32
c001add8:	50                   	push   eax
c001add9:	e8 d4 b9 fe ff       	call   c00067b2 <iso_read>
c001adde:	83 c4 10             	add    esp,0x10
c001ade1:	89 03                	mov    DWORD PTR [ebx],eax
c001ade3:	09 d0                	or     eax,edx
c001ade5:	0f 94 c0             	sete   al
c001ade8:	0f b6 c0             	movzx  eax,al
c001adeb:	eb 05                	jmp    c001adf2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001aded:	b8 04 00 00 00       	mov    eax,0x4
c001adf2:	83 c4 08             	add    esp,0x8
c001adf5:	5b                   	pop    ebx
c001adf6:	c3                   	ret    
c001adf7:	90                   	nop

c001adf8 <ISO9660::seek(void*, unsigned long long)>:
c001adf8:	57                   	push   edi
c001adf9:	b8 04 00 00 00       	mov    eax,0x4
c001adfe:	56                   	push   esi
c001adff:	51                   	push   ecx
c001ae00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ae08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ae0c:	85 d2                	test   edx,edx
c001ae0e:	74 26                	je     c001ae36 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ae10:	89 d0                	mov    eax,edx
c001ae12:	b9 02 00 00 00       	mov    ecx,0x2
c001ae17:	6a 00                	push   0x0
c001ae19:	99                   	cdq    
c001ae1a:	f7 f9                	idiv   ecx
c001ae1c:	57                   	push   edi
c001ae1d:	56                   	push   esi
c001ae1e:	83 e8 32             	sub    eax,0x32
c001ae21:	50                   	push   eax
c001ae22:	e8 a1 ba fe ff       	call   c00068c8 <iso_seek>
c001ae27:	83 c4 10             	add    esp,0x10
c001ae2a:	31 f0                	xor    eax,esi
c001ae2c:	31 fa                	xor    edx,edi
c001ae2e:	09 d0                	or     eax,edx
c001ae30:	0f 95 c0             	setne  al
c001ae33:	0f b6 c0             	movzx  eax,al
c001ae36:	5a                   	pop    edx
c001ae37:	5e                   	pop    esi
c001ae38:	5f                   	pop    edi
c001ae39:	c3                   	ret    

c001ae3a <ISO9660::tell(void*, unsigned long long*)>:
c001ae3a:	53                   	push   ebx
c001ae3b:	83 ec 08             	sub    esp,0x8
c001ae3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae46:	85 c0                	test   eax,eax
c001ae48:	74 24                	je     c001ae6e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ae4a:	85 db                	test   ebx,ebx
c001ae4c:	74 20                	je     c001ae6e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ae4e:	b9 02 00 00 00       	mov    ecx,0x2
c001ae53:	99                   	cdq    
c001ae54:	f7 f9                	idiv   ecx
c001ae56:	83 ec 0c             	sub    esp,0xc
c001ae59:	83 e8 32             	sub    eax,0x32
c001ae5c:	50                   	push   eax
c001ae5d:	e8 ea ba fe ff       	call   c000694c <iso_tell>
c001ae62:	83 c4 10             	add    esp,0x10
c001ae65:	89 03                	mov    DWORD PTR [ebx],eax
c001ae67:	31 c0                	xor    eax,eax
c001ae69:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ae6c:	eb 05                	jmp    c001ae73 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001ae6e:	b8 04 00 00 00       	mov    eax,0x4
c001ae73:	83 c4 08             	add    esp,0x8
c001ae76:	5b                   	pop    ebx
c001ae77:	c3                   	ret    

c001ae78 <ISO9660::stat(void*, unsigned long long*)>:
c001ae78:	56                   	push   esi
c001ae79:	53                   	push   ebx
c001ae7a:	83 ec 10             	sub    esp,0x10
c001ae7d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae81:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ae85:	68 d5 32 02 c0       	push   0xc00232d5
c001ae8a:	e8 bf c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	85 db                	test   ebx,ebx
c001ae94:	74 2a                	je     c001aec0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ae96:	85 f6                	test   esi,esi
c001ae98:	74 26                	je     c001aec0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ae9a:	89 d8                	mov    eax,ebx
c001ae9c:	b9 02 00 00 00       	mov    ecx,0x2
c001aea1:	99                   	cdq    
c001aea2:	83 ec 0c             	sub    esp,0xc
c001aea5:	f7 f9                	idiv   ecx
c001aea7:	83 e8 32             	sub    eax,0x32
c001aeaa:	50                   	push   eax
c001aeab:	e8 cd ba fe ff       	call   c000697d <iso_total>
c001aeb0:	83 c4 10             	add    esp,0x10
c001aeb3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001aeba:	89 06                	mov    DWORD PTR [esi],eax
c001aebc:	31 c0                	xor    eax,eax
c001aebe:	eb 05                	jmp    c001aec5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001aec0:	b8 04 00 00 00       	mov    eax,0x4
c001aec5:	5a                   	pop    edx
c001aec6:	5b                   	pop    ebx
c001aec7:	5e                   	pop    esi
c001aec8:	c3                   	ret    
c001aec9:	90                   	nop

c001aeca <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001aeca:	55                   	push   ebp
c001aecb:	57                   	push   edi
c001aecc:	56                   	push   esi
c001aecd:	53                   	push   ebx
c001aece:	83 ec 18             	sub    esp,0x18
c001aed1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001aed5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001aed9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aedd:	68 dd 32 02 c0       	push   0xc00232dd
c001aee2:	e8 67 c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aee7:	83 c4 10             	add    esp,0x10
c001aeea:	85 ff                	test   edi,edi
c001aeec:	0f 94 c0             	sete   al
c001aeef:	85 f6                	test   esi,esi
c001aef1:	0f 94 c2             	sete   dl
c001aef4:	09 d0                	or     eax,edx
c001aef6:	a8 01                	test   al,0x1
c001aef8:	0f 85 dd 00 00 00    	jne    c001afdb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001aefe:	85 db                	test   ebx,ebx
c001af00:	0f 84 d5 00 00 00    	je     c001afdb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001af06:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af09:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001af0f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af16:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af1d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001af1f:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001af25:	74 1b                	je     c001af42 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001af27:	85 c0                	test   eax,eax
c001af29:	74 10                	je     c001af3b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001af2b:	83 ec 0c             	sub    esp,0xc
c001af2e:	68 81 32 02 c0       	push   0xc0023281
c001af33:	e8 02 3d ff ff       	call   c000ec3a <KePanic(char const*)>
c001af38:	83 c4 10             	add    esp,0x10
c001af3b:	8a 03                	mov    al,BYTE PTR [ebx]
c001af3d:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001af42:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af45:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001af4c:	85 c0                	test   eax,eax
c001af4e:	74 09                	je     c001af59 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001af50:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001af57:	74 51                	je     c001afaa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001af59:	83 ec 0c             	sub    esp,0xc
c001af5c:	68 e5 32 02 c0       	push   0xc00232e5
c001af61:	e8 e8 bf fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001af66:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af69:	83 c4 10             	add    esp,0x10
c001af6c:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001af74:	74 21                	je     c001af97 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001af76:	83 ec 0c             	sub    esp,0xc
c001af79:	68 05 33 02 c0       	push   0xc0023305
c001af7e:	e8 cb bf fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001af83:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af86:	83 c4 10             	add    esp,0x10
c001af89:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001af90:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001af97:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af9e:	83 ec 0c             	sub    esp,0xc
c001afa1:	50                   	push   eax
c001afa2:	e8 a0 bc fe ff       	call   c0006c47 <init_percd>
c001afa7:	83 c4 10             	add    esp,0x10
c001afaa:	52                   	push   edx
c001afab:	83 c3 03             	add    ebx,0x3
c001afae:	52                   	push   edx
c001afaf:	6a 00                	push   0x0
c001afb1:	53                   	push   ebx
c001afb2:	e8 53 b7 fe ff       	call   c000670a <iso_open>
c001afb7:	83 c4 10             	add    esp,0x10
c001afba:	83 f8 ff             	cmp    eax,0xffffffff
c001afbd:	89 c5                	mov    ebp,eax
c001afbf:	75 21                	jne    c001afe2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001afc1:	50                   	push   eax
c001afc2:	50                   	push   eax
c001afc3:	6a 01                	push   0x1
c001afc5:	53                   	push   ebx
c001afc6:	e8 3f b7 fe ff       	call   c000670a <iso_open>
c001afcb:	83 c4 10             	add    esp,0x10
c001afce:	ba 02 00 00 00       	mov    edx,0x2
c001afd3:	40                   	inc    eax
c001afd4:	74 2b                	je     c001b001 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001afd6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001afd9:	eb 24                	jmp    c001afff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001afdb:	ba 04 00 00 00       	mov    edx,0x4
c001afe0:	eb 1f                	jmp    c001b001 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001afe2:	83 ec 0c             	sub    esp,0xc
c001afe5:	50                   	push   eax
c001afe6:	e8 92 b9 fe ff       	call   c000697d <iso_total>
c001afeb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001aff2:	89 07                	mov    DWORD PTR [edi],eax
c001aff4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aff7:	e8 98 b7 fe ff       	call   c0006794 <iso_close>
c001affc:	83 c4 10             	add    esp,0x10
c001afff:	31 d2                	xor    edx,edx
c001b001:	83 c4 0c             	add    esp,0xc
c001b004:	89 d0                	mov    eax,edx
c001b006:	5b                   	pop    ebx
c001b007:	5e                   	pop    esi
c001b008:	5f                   	pop    edi
c001b009:	5d                   	pop    ebp
c001b00a:	c3                   	ret    
c001b00b:	90                   	nop

c001b00c <ISO9660::close(void*)>:
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	b8 04 00 00 00       	mov    eax,0x4
c001b014:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b018:	85 d2                	test   edx,edx
c001b01a:	74 1b                	je     c001b037 <ISO9660::close(void*)+0x2b>
c001b01c:	89 d0                	mov    eax,edx
c001b01e:	b9 02 00 00 00       	mov    ecx,0x2
c001b023:	99                   	cdq    
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	f7 f9                	idiv   ecx
c001b029:	83 e8 32             	sub    eax,0x32
c001b02c:	50                   	push   eax
c001b02d:	e8 62 b7 fe ff       	call   c0006794 <iso_close>
c001b032:	83 c4 10             	add    esp,0x10
c001b035:	31 c0                	xor    eax,eax
c001b037:	83 c4 0c             	add    esp,0xc
c001b03a:	c3                   	ret    
c001b03b:	90                   	nop

c001b03c <ISO9660::openDir(char const*, void**)>:
c001b03c:	56                   	push   esi
c001b03d:	53                   	push   ebx
c001b03e:	50                   	push   eax
c001b03f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b043:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b047:	85 db                	test   ebx,ebx
c001b049:	0f 84 bd 00 00 00    	je     c001b10c <ISO9660::openDir(char const*, void**)+0xd0>
c001b04f:	85 f6                	test   esi,esi
c001b051:	0f 84 b5 00 00 00    	je     c001b10c <ISO9660::openDir(char const*, void**)+0xd0>
c001b057:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b059:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001b05f:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b066:	74 1b                	je     c001b083 <ISO9660::openDir(char const*, void**)+0x47>
c001b068:	85 c0                	test   eax,eax
c001b06a:	74 10                	je     c001b07c <ISO9660::openDir(char const*, void**)+0x40>
c001b06c:	83 ec 0c             	sub    esp,0xc
c001b06f:	68 81 32 02 c0       	push   0xc0023281
c001b074:	e8 c1 3b ff ff       	call   c000ec3a <KePanic(char const*)>
c001b079:	83 c4 10             	add    esp,0x10
c001b07c:	8a 03                	mov    al,BYTE PTR [ebx]
c001b07e:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001b083:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b086:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001b08d:	85 c0                	test   eax,eax
c001b08f:	74 10                	je     c001b0a1 <ISO9660::openDir(char const*, void**)+0x65>
c001b091:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b098:	74 1a                	je     c001b0b4 <ISO9660::openDir(char const*, void**)+0x78>
c001b09a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b0a1:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b0a8:	83 ec 0c             	sub    esp,0xc
c001b0ab:	50                   	push   eax
c001b0ac:	e8 96 bb fe ff       	call   c0006c47 <init_percd>
c001b0b1:	83 c4 10             	add    esp,0x10
c001b0b4:	50                   	push   eax
c001b0b5:	83 c3 03             	add    ebx,0x3
c001b0b8:	50                   	push   eax
c001b0b9:	6a 01                	push   0x1
c001b0bb:	53                   	push   ebx
c001b0bc:	e8 49 b6 fe ff       	call   c000670a <iso_open>
c001b0c1:	83 c4 10             	add    esp,0x10
c001b0c4:	83 f8 ff             	cmp    eax,0xffffffff
c001b0c7:	89 c3                	mov    ebx,eax
c001b0c9:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b0ce:	75 1c                	jne    c001b0ec <ISO9660::openDir(char const*, void**)+0xb0>
c001b0d0:	53                   	push   ebx
c001b0d1:	53                   	push   ebx
c001b0d2:	68 29 33 02 c0       	push   0xc0023329
c001b0d7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0dd:	e8 f0 62 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001b0e2:	83 c4 10             	add    esp,0x10
c001b0e5:	b8 01 00 00 00       	mov    eax,0x1
c001b0ea:	eb 25                	jmp    c001b111 <ISO9660::openDir(char const*, void**)+0xd5>
c001b0ec:	51                   	push   ecx
c001b0ed:	01 db                	add    ebx,ebx
c001b0ef:	51                   	push   ecx
c001b0f0:	83 c3 65             	add    ebx,0x65
c001b0f3:	68 3c 33 02 c0       	push   0xc002333c
c001b0f8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0fe:	e8 cf 62 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001b103:	83 c4 10             	add    esp,0x10
c001b106:	31 c0                	xor    eax,eax
c001b108:	89 1e                	mov    DWORD PTR [esi],ebx
c001b10a:	eb 05                	jmp    c001b111 <ISO9660::openDir(char const*, void**)+0xd5>
c001b10c:	b8 04 00 00 00       	mov    eax,0x4
c001b111:	5a                   	pop    edx
c001b112:	5b                   	pop    ebx
c001b113:	5e                   	pop    esi
c001b114:	c3                   	ret    
c001b115:	90                   	nop

c001b116 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b116:	55                   	push   ebp
c001b117:	57                   	push   edi
c001b118:	56                   	push   esi
c001b119:	53                   	push   ebx
c001b11a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b120:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001b127:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b12e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001b135:	85 db                	test   ebx,ebx
c001b137:	0f 84 e4 00 00 00    	je     c001b221 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b13d:	85 ed                	test   ebp,ebp
c001b13f:	0f 84 dc 00 00 00    	je     c001b221 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b145:	83 ec 0c             	sub    esp,0xc
c001b148:	68 4f 33 02 c0       	push   0xc002334f
c001b14d:	e8 fc bd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b152:	89 d8                	mov    eax,ebx
c001b154:	b9 02 00 00 00       	mov    ecx,0x2
c001b159:	99                   	cdq    
c001b15a:	f7 f9                	idiv   ecx
c001b15c:	83 e8 32             	sub    eax,0x32
c001b15f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b162:	e8 68 b8 fe ff       	call   c00069cf <iso_readdir>
c001b167:	83 c4 10             	add    esp,0x10
c001b16a:	85 c0                	test   eax,eax
c001b16c:	89 c3                	mov    ebx,eax
c001b16e:	75 38                	jne    c001b1a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001b170:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b175:	53                   	push   ebx
c001b176:	53                   	push   ebx
c001b177:	68 5a 33 02 c0       	push   0xc002335a
c001b17c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b182:	e8 4b 62 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001b187:	83 c4 0c             	add    esp,0xc
c001b18a:	68 10 01 00 00       	push   0x110
c001b18f:	6a 00                	push   0x0
c001b191:	57                   	push   edi
c001b192:	e8 59 53 fe ff       	call   c00004f0 <memset>
c001b197:	83 c4 10             	add    esp,0x10
c001b19a:	b8 01 00 00 00       	mov    eax,0x1
c001b19f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001b1a6:	eb 7e                	jmp    c001b226 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b1a8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b1ae:	8d 70 08             	lea    esi,[eax+0x8]
c001b1b1:	83 ec 0c             	sub    esp,0xc
c001b1b4:	56                   	push   esi
c001b1b5:	e8 c6 53 fe ff       	call   c0000580 <strlen>
c001b1ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b1c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1c6:	83 c4 10             	add    esp,0x10
c001b1c9:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001b1cd:	75 0a                	jne    c001b1d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001b1cf:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001b1d2:	b8 02 00 00 00       	mov    eax,0x2
c001b1d7:	74 05                	je     c001b1de <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001b1d9:	b8 01 00 00 00       	mov    eax,0x1
c001b1de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1e2:	50                   	push   eax
c001b1e3:	50                   	push   eax
c001b1e4:	56                   	push   esi
c001b1e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b1ed:	50                   	push   eax
c001b1ee:	e8 5d 54 fe ff       	call   c0000650 <strcpy>
c001b1f3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b1fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1fc:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001b203:	5a                   	pop    edx
c001b204:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b209:	59                   	pop    ecx
c001b20a:	68 6d 33 02 c0       	push   0xc002336d
c001b20f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b215:	e8 b8 61 ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001b21a:	83 c4 10             	add    esp,0x10
c001b21d:	31 c0                	xor    eax,eax
c001b21f:	eb 05                	jmp    c001b226 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b221:	b8 04 00 00 00       	mov    eax,0x4
c001b226:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b22c:	5b                   	pop    ebx
c001b22d:	5e                   	pop    esi
c001b22e:	5f                   	pop    edi
c001b22f:	5d                   	pop    ebp
c001b230:	c3                   	ret    

c001b231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b231:	57                   	push   edi
c001b232:	56                   	push   esi
c001b233:	53                   	push   ebx
c001b234:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b238:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b23c:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b242:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b246:	0f be cb             	movsx  ecx,bl
c001b249:	75 0b                	jne    c001b256 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b24b:	0f be 05 44 45 02 c0 	movsx  eax,BYTE PTR ds:0xc0024544
c001b252:	39 c8                	cmp    eax,ecx
c001b254:	74 47                	je     c001b29d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b256:	83 ec 0c             	sub    esp,0xc
c001b259:	31 d2                	xor    edx,edx
c001b25b:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b260:	6a 01                	push   0x1
c001b262:	52                   	push   edx
c001b263:	56                   	push   esi
c001b264:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b26b:	e8 70 ee fe ff       	call   c000a0e0 <LogicalDisk::read(unsigned long long, int, void*)>
c001b270:	83 c4 20             	add    esp,0x20
c001b273:	85 c0                	test   eax,eax
c001b275:	75 0e                	jne    c001b285 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b277:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b27d:	88 1d 44 45 02 c0    	mov    BYTE PTR ds:0xc0024544,bl
c001b283:	eb 18                	jmp    c001b29d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b285:	50                   	push   eax
c001b286:	68 00 08 00 00       	push   0x800
c001b28b:	6a 00                	push   0x0
c001b28d:	57                   	push   edi
c001b28e:	e8 5d 52 fe ff       	call   c00004f0 <memset>
c001b293:	83 c4 10             	add    esp,0x10
c001b296:	b8 01 00 00 00       	mov    eax,0x1
c001b29b:	eb 0e                	jmp    c001b2ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b29d:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b2a2:	b9 00 08 00 00       	mov    ecx,0x800
c001b2a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2a9:	31 c0                	xor    eax,eax
c001b2ab:	5b                   	pop    ebx
c001b2ac:	5e                   	pop    esi
c001b2ad:	5f                   	pop    edi
c001b2ae:	c3                   	ret    
c001b2af:	90                   	nop

c001b2b0 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b2b0:	53                   	push   ebx
c001b2b1:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b2b7:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b2c1:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b2c8:	8d 58 41             	lea    ebx,[eax+0x41]
c001b2cb:	0f be db             	movsx  ebx,bl
c001b2ce:	53                   	push   ebx
c001b2cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b2d3:	50                   	push   eax
c001b2d4:	6a 10                	push   0x10
c001b2d6:	e8 56 ff ff ff       	call   c001b231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	31 d2                	xor    edx,edx
c001b2e0:	85 c0                	test   eax,eax
c001b2e2:	75 33                	jne    c001b317 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2e4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b2e9:	75 2c                	jne    c001b317 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2eb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b2f0:	75 25                	jne    c001b317 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2f2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b2f7:	75 1e                	jne    c001b317 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2f9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b2fe:	75 17                	jne    c001b317 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b300:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b305:	75 10                	jne    c001b317 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b307:	83 ec 0c             	sub    esp,0xc
c001b30a:	53                   	push   ebx
c001b30b:	e8 37 b9 fe ff       	call   c0006c47 <init_percd>
c001b310:	83 c4 10             	add    esp,0x10
c001b313:	40                   	inc    eax
c001b314:	0f 95 c2             	setne  dl
c001b317:	81 c4 08 08 00 00    	add    esp,0x808
c001b31d:	88 d0                	mov    al,dl
c001b31f:	5b                   	pop    ebx
c001b320:	c3                   	ret    
c001b321:	90                   	nop

c001b322 <ISO9660::ISO9660()>:
c001b322:	83 ec 0c             	sub    esp,0xc
c001b325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b329:	83 ec 0c             	sub    esp,0xc
c001b32c:	50                   	push   eax
c001b32d:	e8 24 ca fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b332:	83 c4 10             	add    esp,0x10
c001b335:	ba 88 33 02 c0       	mov    edx,0xc0023388
c001b33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b33e:	89 10                	mov    DWORD PTR [eax],edx
c001b340:	e8 14 ba fe ff       	call   c0006d59 <fs_iso9660_init>
c001b345:	90                   	nop
c001b346:	83 c4 0c             	add    esp,0xc
c001b349:	c3                   	ret    

c001b34a <SoundCard::beginPlayback()>:
c001b34a:	c7 44 24 04 ec 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233ec
c001b352:	e9 e3 38 ff ff       	jmp    c000ec3a <KePanic(char const*)>
c001b357:	90                   	nop

c001b358 <SoundCard::stopPlayback()>:
c001b358:	c7 44 24 04 ec 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233ec
c001b360:	e9 d5 38 ff ff       	jmp    c000ec3a <KePanic(char const*)>
c001b365:	90                   	nop

c001b366 <SoundCard::SoundCard(char const*)>:
c001b366:	83 ec 1c             	sub    esp,0x1c
c001b369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b36d:	83 ec 08             	sub    esp,0x8
c001b370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b374:	50                   	push   eax
c001b375:	e8 2a de fe ff       	call   c00091a4 <Device::Device(char const*)>
c001b37a:	83 c4 10             	add    esp,0x10
c001b37d:	ba 38 34 02 c0       	mov    edx,0xc0023438
c001b382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b386:	89 10                	mov    DWORD PTR [eax],edx
c001b388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b38c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b397:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b3a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3a5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b3af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3b3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b3bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3c1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b3cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3d3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b3d8:	7f 1a                	jg     c001b3f4 <SoundCard::SoundCard(char const*)+0x8e>
c001b3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b3e2:	83 c2 54             	add    edx,0x54
c001b3e5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b3ed:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b3f2:	eb df                	jmp    c001b3d3 <SoundCard::SoundCard(char const*)+0x6d>
c001b3f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3f8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b3ff:	90                   	nop
c001b400:	83 c4 1c             	add    esp,0x1c
c001b403:	c3                   	ret    

c001b404 <SoundCard::~SoundCard()>:
c001b404:	83 ec 0c             	sub    esp,0xc
c001b407:	ba 38 34 02 c0       	mov    edx,0xc0023438
c001b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b410:	89 10                	mov    DWORD PTR [eax],edx
c001b412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b416:	83 ec 0c             	sub    esp,0xc
c001b419:	50                   	push   eax
c001b41a:	e8 25 db fe ff       	call   c0008f44 <Device::~Device()>
c001b41f:	83 c4 10             	add    esp,0x10
c001b422:	90                   	nop
c001b423:	83 c4 0c             	add    esp,0xc
c001b426:	c3                   	ret    
c001b427:	90                   	nop

c001b428 <SoundCard::~SoundCard()>:
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	83 ec 0c             	sub    esp,0xc
c001b42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b432:	e8 cd ff ff ff       	call   c001b404 <SoundCard::~SoundCard()>
c001b437:	83 c4 10             	add    esp,0x10
c001b43a:	83 ec 08             	sub    esp,0x8
c001b43d:	68 e8 01 00 00       	push   0x1e8
c001b442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b446:	e8 18 12 ff ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001b44b:	83 c4 10             	add    esp,0x10
c001b44e:	83 c4 0c             	add    esp,0xc
c001b451:	c3                   	ret    

c001b452 <SoundCard::configureRates(int, int, int)>:
c001b452:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b456:	31 c0                	xor    eax,eax
c001b458:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b45f:	75 20                	jne    c001b481 <SoundCard::configureRates(int, int, int)+0x2f>
c001b461:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b465:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b46b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b46f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b479:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b47f:	b0 01                	mov    al,0x1
c001b481:	c3                   	ret    

c001b482 <SoundCard::getSamples16(int, short*)>:
c001b482:	55                   	push   ebp
c001b483:	57                   	push   edi
c001b484:	31 ff                	xor    edi,edi
c001b486:	56                   	push   esi
c001b487:	53                   	push   ebx
c001b488:	31 db                	xor    ebx,ebx
c001b48a:	83 ec 10             	sub    esp,0x10
c001b48d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b491:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b495:	8d 04 36             	lea    eax,[esi+esi*1]
c001b498:	50                   	push   eax
c001b499:	6a 00                	push   0x0
c001b49b:	55                   	push   ebp
c001b49c:	e8 4f 50 fe ff       	call   c00004f0 <memset>
c001b4a1:	83 c4 10             	add    esp,0x10
c001b4a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4a8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001b4af:	85 c0                	test   eax,eax
c001b4b1:	74 1a                	je     c001b4cd <SoundCard::getSamples16(int, short*)+0x4b>
c001b4b3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b4b7:	75 14                	jne    c001b4cd <SoundCard::getSamples16(int, short*)+0x4b>
c001b4b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4bd:	55                   	push   ebp
c001b4be:	56                   	push   esi
c001b4bf:	50                   	push   eax
c001b4c0:	e8 f3 02 00 00       	call   c001b7b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b4c5:	83 c4 10             	add    esp,0x10
c001b4c8:	39 c3                	cmp    ebx,eax
c001b4ca:	0f 4c d8             	cmovl  ebx,eax
c001b4cd:	47                   	inc    edi
c001b4ce:	83 ff 20             	cmp    edi,0x20
c001b4d1:	75 d1                	jne    c001b4a4 <SoundCard::getSamples16(int, short*)+0x22>
c001b4d3:	83 c4 0c             	add    esp,0xc
c001b4d6:	89 d8                	mov    eax,ebx
c001b4d8:	5b                   	pop    ebx
c001b4d9:	5e                   	pop    esi
c001b4da:	5f                   	pop    edi
c001b4db:	5d                   	pop    ebp
c001b4dc:	c3                   	ret    
c001b4dd:	90                   	nop

c001b4de <SoundCard::getSamples32(int, int*)>:
c001b4de:	55                   	push   ebp
c001b4df:	57                   	push   edi
c001b4e0:	31 ff                	xor    edi,edi
c001b4e2:	56                   	push   esi
c001b4e3:	31 f6                	xor    esi,esi
c001b4e5:	53                   	push   ebx
c001b4e6:	83 ec 10             	sub    esp,0x10
c001b4e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4ed:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b4f1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b4f5:	c1 e0 02             	shl    eax,0x2
c001b4f8:	50                   	push   eax
c001b4f9:	6a 00                	push   0x0
c001b4fb:	55                   	push   ebp
c001b4fc:	e8 ef 4f fe ff       	call   c00004f0 <memset>
c001b501:	83 c4 10             	add    esp,0x10
c001b504:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b50b:	85 c0                	test   eax,eax
c001b50d:	74 1a                	je     c001b529 <SoundCard::getSamples32(int, int*)+0x4b>
c001b50f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b513:	75 14                	jne    c001b529 <SoundCard::getSamples32(int, int*)+0x4b>
c001b515:	53                   	push   ebx
c001b516:	55                   	push   ebp
c001b517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b51b:	50                   	push   eax
c001b51c:	e8 67 03 00 00       	call   c001b888 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	39 c6                	cmp    esi,eax
c001b526:	0f 4c f0             	cmovl  esi,eax
c001b529:	47                   	inc    edi
c001b52a:	83 ff 20             	cmp    edi,0x20
c001b52d:	75 d5                	jne    c001b504 <SoundCard::getSamples32(int, int*)+0x26>
c001b52f:	85 f6                	test   esi,esi
c001b531:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b538:	75 0f                	jne    c001b549 <SoundCard::getSamples32(int, int*)+0x6b>
c001b53a:	85 c0                	test   eax,eax
c001b53c:	74 1b                	je     c001b559 <SoundCard::getSamples32(int, int*)+0x7b>
c001b53e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b540:	83 ec 0c             	sub    esp,0xc
c001b543:	53                   	push   ebx
c001b544:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b547:	eb 0d                	jmp    c001b556 <SoundCard::getSamples32(int, int*)+0x78>
c001b549:	85 c0                	test   eax,eax
c001b54b:	75 0c                	jne    c001b559 <SoundCard::getSamples32(int, int*)+0x7b>
c001b54d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b54f:	83 ec 0c             	sub    esp,0xc
c001b552:	53                   	push   ebx
c001b553:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b556:	83 c4 10             	add    esp,0x10
c001b559:	83 c4 0c             	add    esp,0xc
c001b55c:	89 f0                	mov    eax,esi
c001b55e:	5b                   	pop    ebx
c001b55f:	5e                   	pop    esi
c001b560:	5f                   	pop    edi
c001b561:	5d                   	pop    ebp
c001b562:	c3                   	ret    
c001b563:	90                   	nop

c001b564 <SoundCard::addChannel(SoundPort*)>:
c001b564:	83 ec 0c             	sub    esp,0xc
c001b567:	31 c0                	xor    eax,eax
c001b569:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b56d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b575:	74 1b                	je     c001b592 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b577:	40                   	inc    eax
c001b578:	83 f8 20             	cmp    eax,0x20
c001b57b:	75 f0                	jne    c001b56d <SoundCard::addChannel(SoundPort*)+0x9>
c001b57d:	83 ec 0c             	sub    esp,0xc
c001b580:	68 11 34 02 c0       	push   0xc0023411
c001b585:	e8 b0 36 ff ff       	call   c000ec3a <KePanic(char const*)>
c001b58a:	83 c4 10             	add    esp,0x10
c001b58d:	83 c8 ff             	or     eax,0xffffffff
c001b590:	eb 0b                	jmp    c001b59d <SoundCard::addChannel(SoundPort*)+0x39>
c001b592:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b596:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b59d:	83 c4 0c             	add    esp,0xc
c001b5a0:	c3                   	ret    
c001b5a1:	90                   	nop

c001b5a2 <SoundCard::removeChannel(int)>:
c001b5a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b5aa:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b5b5:	c3                   	ret    
c001b5b6:	66 90                	xchg   ax,ax

c001b5b8 <SoundPort::SoundPort(int, int, int, int)>:
c001b5b8:	83 ec 0c             	sub    esp,0xc
c001b5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5bf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ca:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b5ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5d6:	89 10                	mov    DWORD PTR [eax],edx
c001b5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b5e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b5eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b5ee:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b5f3:	75 13                	jne    c001b608 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5fb:	05 a0 0f 00 00       	add    eax,0xfa0
c001b600:	d1 e0                	shl    eax,1
c001b602:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b606:	66 90                	xchg   ax,ax
c001b608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b60c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b610:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b617:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b622:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b625:	c1 e0 02             	shl    eax,0x2
c001b628:	83 ec 0c             	sub    esp,0xc
c001b62b:	50                   	push   eax
c001b62c:	e8 b5 32 ff ff       	call   c000e8e6 <malloc>
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	89 c2                	mov    edx,eax
c001b636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b63d:	90                   	nop
c001b63e:	83 c4 0c             	add    esp,0xc
c001b641:	c3                   	ret    
c001b642:	66 90                	xchg   ax,ax

c001b644 <SoundPort::~SoundPort()>:
c001b644:	83 ec 0c             	sub    esp,0xc
c001b647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b64e:	85 c0                	test   eax,eax
c001b650:	74 1e                	je     c001b670 <SoundPort::~SoundPort()+0x2c>
c001b652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b656:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b659:	83 ec 0c             	sub    esp,0xc
c001b65c:	50                   	push   eax
c001b65d:	e8 94 32 ff ff       	call   c000e8f6 <free>
c001b662:	83 c4 10             	add    esp,0x10
c001b665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b669:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b670:	90                   	nop
c001b671:	83 c4 0c             	add    esp,0xc
c001b674:	c3                   	ret    
c001b675:	90                   	nop
c001b676:	66 90                	xchg   ax,ax

c001b678 <SoundPort::unpause()>:
c001b678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b67c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b680:	c3                   	ret    
c001b681:	90                   	nop
c001b682:	66 90                	xchg   ax,ax

c001b684 <SoundPort::pause()>:
c001b684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b688:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b68c:	c3                   	ret    
c001b68d:	90                   	nop
c001b68e:	66 90                	xchg   ax,ax

c001b690 <SoundPort::getBufferUsed()>:
c001b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b694:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b697:	c3                   	ret    

c001b698 <SoundPort::getBufferSize()>:
c001b698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b69c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b69f:	c3                   	ret    

c001b6a0 <SoundPort::buffer16(short*, int)>:
c001b6a0:	55                   	push   ebp
c001b6a1:	57                   	push   edi
c001b6a2:	56                   	push   esi
c001b6a3:	53                   	push   ebx
c001b6a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6a8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b6ac:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b6af:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b6b2:	74 68                	je     c001b71c <SoundPort::buffer16(short*, int)+0x7c>
c001b6b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b6b8:	85 c9                	test   ecx,ecx
c001b6ba:	7e 60                	jle    c001b71c <SoundPort::buffer16(short*, int)+0x7c>
c001b6bc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b6c0:	8d 70 01             	lea    esi,[eax+0x1]
c001b6c3:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b6c6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b6c9:	c1 e1 0f             	shl    ecx,0xf
c001b6cc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b6cf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6d2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6d5:	74 4d                	je     c001b724 <SoundPort::buffer16(short*, int)+0x84>
c001b6d7:	31 f6                	xor    esi,esi
c001b6d9:	eb 21                	jmp    c001b6fc <SoundPort::buffer16(short*, int)+0x5c>
c001b6db:	90                   	nop
c001b6dc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b6e1:	8d 79 01             	lea    edi,[ecx+0x1]
c001b6e4:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b6e7:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b6ea:	c1 e3 0f             	shl    ebx,0xf
c001b6ed:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b6f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6f6:	74 1c                	je     c001b714 <SoundPort::buffer16(short*, int)+0x74>
c001b6f8:	89 c6                	mov    esi,eax
c001b6fa:	66 90                	xchg   ax,ax
c001b6fc:	8d 46 01             	lea    eax,[esi+0x1]
c001b6ff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b703:	75 d7                	jne    c001b6dc <SoundPort::buffer16(short*, int)+0x3c>
c001b705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b709:	8d 76 00             	lea    esi,[esi+0x0]
c001b70c:	5b                   	pop    ebx
c001b70d:	5e                   	pop    esi
c001b70e:	5f                   	pop    edi
c001b70f:	5d                   	pop    ebp
c001b710:	c3                   	ret    
c001b711:	8d 76 00             	lea    esi,[esi+0x0]
c001b714:	5b                   	pop    ebx
c001b715:	8d 46 02             	lea    eax,[esi+0x2]
c001b718:	5e                   	pop    esi
c001b719:	5f                   	pop    edi
c001b71a:	5d                   	pop    ebp
c001b71b:	c3                   	ret    
c001b71c:	5b                   	pop    ebx
c001b71d:	31 c0                	xor    eax,eax
c001b71f:	5e                   	pop    esi
c001b720:	5f                   	pop    edi
c001b721:	5d                   	pop    ebp
c001b722:	c3                   	ret    
c001b723:	90                   	nop
c001b724:	b8 01 00 00 00       	mov    eax,0x1
c001b729:	eb e1                	jmp    c001b70c <SoundPort::buffer16(short*, int)+0x6c>
c001b72b:	90                   	nop

c001b72c <SoundPort::buffer32(int*, int)>:
c001b72c:	55                   	push   ebp
c001b72d:	57                   	push   edi
c001b72e:	56                   	push   esi
c001b72f:	53                   	push   ebx
c001b730:	83 ec 04             	sub    esp,0x4
c001b733:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b73b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b73f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b742:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b745:	89 04 24             	mov    DWORD PTR [esp],eax
c001b748:	74 5a                	je     c001b7a4 <SoundPort::buffer32(int*, int)+0x78>
c001b74a:	85 c0                	test   eax,eax
c001b74c:	7e 56                	jle    c001b7a4 <SoundPort::buffer32(int*, int)+0x78>
c001b74e:	8d 71 01             	lea    esi,[ecx+0x1]
c001b751:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b754:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b757:	8b 37                	mov    esi,DWORD PTR [edi]
c001b759:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b75c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b75f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b762:	74 4c                	je     c001b7b0 <SoundPort::buffer32(int*, int)+0x84>
c001b764:	31 f6                	xor    esi,esi
c001b766:	eb 1c                	jmp    c001b784 <SoundPort::buffer32(int*, int)+0x58>
c001b768:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b76b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b76e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b771:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b774:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b778:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b77b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b77e:	74 18                	je     c001b798 <SoundPort::buffer32(int*, int)+0x6c>
c001b780:	89 de                	mov    esi,ebx
c001b782:	66 90                	xchg   ax,ax
c001b784:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b787:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b78a:	75 dc                	jne    c001b768 <SoundPort::buffer32(int*, int)+0x3c>
c001b78c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b78f:	90                   	nop
c001b790:	83 c4 04             	add    esp,0x4
c001b793:	5b                   	pop    ebx
c001b794:	5e                   	pop    esi
c001b795:	5f                   	pop    edi
c001b796:	5d                   	pop    ebp
c001b797:	c3                   	ret    
c001b798:	8d 46 02             	lea    eax,[esi+0x2]
c001b79b:	83 c4 04             	add    esp,0x4
c001b79e:	5b                   	pop    ebx
c001b79f:	5e                   	pop    esi
c001b7a0:	5f                   	pop    edi
c001b7a1:	5d                   	pop    ebp
c001b7a2:	c3                   	ret    
c001b7a3:	90                   	nop
c001b7a4:	83 c4 04             	add    esp,0x4
c001b7a7:	31 c0                	xor    eax,eax
c001b7a9:	5b                   	pop    ebx
c001b7aa:	5e                   	pop    esi
c001b7ab:	5f                   	pop    edi
c001b7ac:	5d                   	pop    ebp
c001b7ad:	c3                   	ret    
c001b7ae:	66 90                	xchg   ax,ax
c001b7b0:	b8 01 00 00 00       	mov    eax,0x1
c001b7b5:	eb d9                	jmp    c001b790 <SoundPort::buffer32(int*, int)+0x64>
c001b7b7:	90                   	nop

c001b7b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b7b8:	55                   	push   ebp
c001b7b9:	57                   	push   edi
c001b7ba:	56                   	push   esi
c001b7bb:	53                   	push   ebx
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7c7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b7cb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b7cf:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b7d5:	39 03                	cmp    DWORD PTR [ebx],eax
c001b7d7:	74 13                	je     c001b7ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b7d9:	83 ec 0c             	sub    esp,0xc
c001b7dc:	68 64 34 02 c0       	push   0xc0023464
c001b7e1:	e8 54 34 ff ff       	call   c000ec3a <KePanic(char const*)>
c001b7e6:	83 c4 10             	add    esp,0x10
c001b7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7ec:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b7f2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b7f5:	74 11                	je     c001b808 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b7f7:	83 ec 0c             	sub    esp,0xc
c001b7fa:	68 a3 34 02 c0       	push   0xc00234a3
c001b7ff:	e8 36 34 ff ff       	call   c000ec3a <KePanic(char const*)>
c001b804:	83 c4 10             	add    esp,0x10
c001b807:	90                   	nop
c001b808:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b80e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b811:	74 11                	je     c001b824 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b813:	83 ec 0c             	sub    esp,0xc
c001b816:	68 a3 34 02 c0       	push   0xc00234a3
c001b81b:	e8 1a 34 ff ff       	call   c000ec3a <KePanic(char const*)>
c001b820:	83 c4 10             	add    esp,0x10
c001b823:	90                   	nop
c001b824:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b827:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b82b:	85 f6                	test   esi,esi
c001b82d:	7e 2d                	jle    c001b85c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b82f:	31 c0                	xor    eax,eax
c001b831:	8d 76 00             	lea    esi,[esi+0x0]
c001b834:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b837:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b83a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b840:	85 c9                	test   ecx,ecx
c001b842:	0f 49 d1             	cmovns edx,ecx
c001b845:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b849:	c1 fa 0f             	sar    edx,0xf
c001b84c:	01 d1                	add    ecx,edx
c001b84e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b852:	83 c0 01             	add    eax,0x1
c001b855:	39 f0                	cmp    eax,esi
c001b857:	75 db                	jne    c001b834 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b859:	8d 76 00             	lea    esi,[esi+0x0]
c001b85c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b85f:	83 ec 04             	sub    esp,0x4
c001b862:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b865:	29 f0                	sub    eax,esi
c001b867:	c1 e0 02             	shl    eax,0x2
c001b86a:	50                   	push   eax
c001b86b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b86e:	50                   	push   eax
c001b86f:	52                   	push   edx
c001b870:	e8 5b 4b fe ff       	call   c00003d0 <memmove>
c001b875:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b878:	29 f0                	sub    eax,esi
c001b87a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b87d:	83 c4 1c             	add    esp,0x1c
c001b880:	89 f0                	mov    eax,esi
c001b882:	5b                   	pop    ebx
c001b883:	5e                   	pop    esi
c001b884:	5f                   	pop    edi
c001b885:	5d                   	pop    ebp
c001b886:	c3                   	ret    
c001b887:	90                   	nop

c001b888 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b888:	55                   	push   ebp
c001b889:	57                   	push   edi
c001b88a:	56                   	push   esi
c001b88b:	53                   	push   ebx
c001b88c:	83 ec 0c             	sub    esp,0xc
c001b88f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b893:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b897:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b89b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b89f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b8a5:	39 03                	cmp    DWORD PTR [ebx],eax
c001b8a7:	74 13                	je     c001b8bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b8a9:	83 ec 0c             	sub    esp,0xc
c001b8ac:	68 84 34 02 c0       	push   0xc0023484
c001b8b1:	e8 84 33 ff ff       	call   c000ec3a <KePanic(char const*)>
c001b8b6:	83 c4 10             	add    esp,0x10
c001b8b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b8bc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b8c2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b8c5:	74 11                	je     c001b8d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b8c7:	83 ec 0c             	sub    esp,0xc
c001b8ca:	68 bf 34 02 c0       	push   0xc00234bf
c001b8cf:	e8 66 33 ff ff       	call   c000ec3a <KePanic(char const*)>
c001b8d4:	83 c4 10             	add    esp,0x10
c001b8d7:	90                   	nop
c001b8d8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b8de:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b8e1:	74 11                	je     c001b8f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b8e3:	83 ec 0c             	sub    esp,0xc
c001b8e6:	68 bf 34 02 c0       	push   0xc00234bf
c001b8eb:	e8 4a 33 ff ff       	call   c000ec3a <KePanic(char const*)>
c001b8f0:	83 c4 10             	add    esp,0x10
c001b8f3:	90                   	nop
c001b8f4:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b8f7:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b8fb:	85 ff                	test   edi,edi
c001b8fd:	7e 21                	jle    c001b920 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b8ff:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b906:	31 c0                	xor    eax,eax
c001b908:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b90b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b90e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b911:	01 d5                	add    ebp,edx
c001b913:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b916:	83 c0 04             	add    eax,0x4
c001b919:	39 c1                	cmp    ecx,eax
c001b91b:	75 eb                	jne    c001b908 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b91d:	8d 76 00             	lea    esi,[esi+0x0]
c001b920:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b923:	83 ec 04             	sub    esp,0x4
c001b926:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b929:	29 f8                	sub    eax,edi
c001b92b:	c1 e0 02             	shl    eax,0x2
c001b92e:	50                   	push   eax
c001b92f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b932:	50                   	push   eax
c001b933:	52                   	push   edx
c001b934:	e8 97 4a fe ff       	call   c00003d0 <memmove>
c001b939:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b93c:	29 f8                	sub    eax,edi
c001b93e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b941:	83 c4 1c             	add    esp,0x1c
c001b944:	89 f8                	mov    eax,edi
c001b946:	5b                   	pop    ebx
c001b947:	5e                   	pop    esi
c001b948:	5f                   	pop    edi
c001b949:	5d                   	pop    ebp
c001b94a:	c3                   	ret    
c001b94b:	90                   	nop

c001b94c <PCI::open(int, int, void*)>:
c001b94c:	83 ec 18             	sub    esp,0x18
c001b94f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b953:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b957:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b95d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b95f:	50                   	push   eax
c001b960:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b963:	31 c0                	xor    eax,eax
c001b965:	83 c4 1c             	add    esp,0x1c
c001b968:	c3                   	ret    
c001b969:	90                   	nop

c001b96a <PCI::close(int, int, void*)>:
c001b96a:	31 c0                	xor    eax,eax
c001b96c:	c3                   	ret    
c001b96d:	90                   	nop

c001b96e <PCI::PCI()>:
c001b96e:	83 ec 0c             	sub    esp,0xc
c001b971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b975:	83 ec 08             	sub    esp,0x8
c001b978:	68 db 34 02 c0       	push   0xc00234db
c001b97d:	50                   	push   eax
c001b97e:	e8 65 cf fe ff       	call   c00088e8 <Bus::Bus(char const*)>
c001b983:	83 c4 10             	add    esp,0x10
c001b986:	ba e8 35 02 c0       	mov    edx,0xc00235e8
c001b98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98f:	89 10                	mov    DWORD PTR [eax],edx
c001b991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b995:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a3:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001b9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9b2:	0f b6 d0             	movzx  edx,al
c001b9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9ca:	0f b6 d0             	movzx  edx,al
c001b9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9e0:	8d 50 01             	lea    edx,[eax+0x1]
c001b9e3:	88 d1                	mov    cl,dl
c001b9e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9e9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b9ef:	0f b6 d0             	movzx  edx,al
c001b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b9fa:	83 c9 c0             	or     ecx,0xffffffc0
c001b9fd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba01:	90                   	nop
c001ba02:	83 c4 0c             	add    esp,0xc
c001ba05:	c3                   	ret    

c001ba06 <PCI::readBAR8(unsigned int, int)>:
c001ba06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba0e:	f6 c2 01             	test   dl,0x1
c001ba11:	74 07                	je     c001ba1a <PCI::readBAR8(unsigned int, int)+0x14>
c001ba13:	83 e2 fc             	and    edx,0xfffffffc
c001ba16:	01 c2                	add    edx,eax
c001ba18:	ec                   	in     al,dx
c001ba19:	c3                   	ret    
c001ba1a:	83 e2 f0             	and    edx,0xfffffff0
c001ba1d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ba20:	c3                   	ret    
c001ba21:	90                   	nop

c001ba22 <PCI::readBAR16(unsigned int, int)>:
c001ba22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba2a:	f6 c2 01             	test   dl,0x1
c001ba2d:	74 08                	je     c001ba37 <PCI::readBAR16(unsigned int, int)+0x15>
c001ba2f:	83 e2 fc             	and    edx,0xfffffffc
c001ba32:	01 c2                	add    edx,eax
c001ba34:	66 ed                	in     ax,dx
c001ba36:	c3                   	ret    
c001ba37:	83 e2 f0             	and    edx,0xfffffff0
c001ba3a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ba3e:	c3                   	ret    
c001ba3f:	90                   	nop

c001ba40 <PCI::readBAR32(unsigned int, int)>:
c001ba40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba48:	f6 c2 01             	test   dl,0x1
c001ba4b:	74 07                	je     c001ba54 <PCI::readBAR32(unsigned int, int)+0x14>
c001ba4d:	83 e2 fc             	and    edx,0xfffffffc
c001ba50:	01 c2                	add    edx,eax
c001ba52:	ed                   	in     eax,dx
c001ba53:	c3                   	ret    
c001ba54:	83 e2 f0             	and    edx,0xfffffff0
c001ba57:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ba5a:	c3                   	ret    
c001ba5b:	90                   	nop

c001ba5c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ba5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba68:	f6 c2 01             	test   dl,0x1
c001ba6b:	74 07                	je     c001ba74 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ba6d:	83 e2 fc             	and    edx,0xfffffffc
c001ba70:	01 ca                	add    edx,ecx
c001ba72:	ee                   	out    dx,al
c001ba73:	c3                   	ret    
c001ba74:	83 e2 f0             	and    edx,0xfffffff0
c001ba77:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ba7a:	c3                   	ret    
c001ba7b:	90                   	nop

c001ba7c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ba7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba88:	f6 c2 01             	test   dl,0x1
c001ba8b:	74 08                	je     c001ba95 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ba8d:	83 e2 fc             	and    edx,0xfffffffc
c001ba90:	01 ca                	add    edx,ecx
c001ba92:	66 ef                	out    dx,ax
c001ba94:	c3                   	ret    
c001ba95:	83 e2 f0             	and    edx,0xfffffff0
c001ba98:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ba9c:	c3                   	ret    
c001ba9d:	90                   	nop

c001ba9e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ba9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001baa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baa6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001baaa:	f6 c2 01             	test   dl,0x1
c001baad:	74 07                	je     c001bab6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001baaf:	83 e2 fc             	and    edx,0xfffffffc
c001bab2:	01 ca                	add    edx,ecx
c001bab4:	ef                   	out    dx,eax
c001bab5:	c3                   	ret    
c001bab6:	83 e2 f0             	and    edx,0xfffffff0
c001bab9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001babc:	c3                   	ret    
c001babd:	90                   	nop

c001babe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001babe:	55                   	push   ebp
c001babf:	57                   	push   edi
c001bac0:	56                   	push   esi
c001bac1:	53                   	push   ebx
c001bac2:	83 ec 0c             	sub    esp,0xc
c001bac5:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001baca:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001bace:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bad2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bad6:	83 fe 07             	cmp    esi,0x7
c001bad9:	76 10                	jbe    c001baeb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001badb:	83 ec 0c             	sub    esp,0xc
c001bade:	68 e3 34 02 c0       	push   0xc00234e3
c001bae3:	e8 52 31 ff ff       	call   c000ec3a <KePanic(char const*)>
c001bae8:	83 c4 10             	add    esp,0x10
c001baeb:	0f b6 db             	movzx  ebx,bl
c001baee:	83 fb 0f             	cmp    ebx,0xf
c001baf1:	76 10                	jbe    c001bb03 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001baf3:	83 ec 0c             	sub    esp,0xc
c001baf6:	68 13 35 02 c0       	push   0xc0023513
c001bafb:	e8 3a 31 ff ff       	call   c000ec3a <KePanic(char const*)>
c001bb00:	83 c4 10             	add    esp,0x10
c001bb03:	8d 04 36             	lea    eax,[esi+esi*1]
c001bb06:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb0b:	83 c8 f0             	or     eax,0xfffffff0
c001bb0e:	ee                   	out    dx,al
c001bb0f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001bb14:	89 e8                	mov    eax,ebp
c001bb16:	ee                   	out    dx,al
c001bb17:	89 f9                	mov    ecx,edi
c001bb19:	89 d8                	mov    eax,ebx
c001bb1b:	0f b6 d9             	movzx  ebx,cl
c001bb1e:	83 c4 0c             	add    esp,0xc
c001bb21:	c1 e0 08             	shl    eax,0x8
c001bb24:	83 e3 fc             	and    ebx,0xfffffffc
c001bb27:	09 d8                	or     eax,ebx
c001bb29:	5b                   	pop    ebx
c001bb2a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bb2f:	5e                   	pop    esi
c001bb30:	5f                   	pop    edi
c001bb31:	5d                   	pop    ebp
c001bb32:	c3                   	ret    
c001bb33:	90                   	nop

c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bb34:	57                   	push   edi
c001bb35:	56                   	push   esi
c001bb36:	53                   	push   ebx
c001bb37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bb43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb47:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bb4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb51:	83 ff 01             	cmp    edi,0x1
c001bb54:	75 3f                	jne    c001bb95 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bb56:	89 de                	mov    esi,ebx
c001bb58:	0f b6 c0             	movzx  eax,al
c001bb5b:	c1 e0 10             	shl    eax,0x10
c001bb5e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bb64:	0f b6 c9             	movzx  ecx,cl
c001bb67:	09 f0                	or     eax,esi
c001bb69:	c1 e1 08             	shl    ecx,0x8
c001bb6c:	0f b6 d2             	movzx  edx,dl
c001bb6f:	c1 e2 0b             	shl    edx,0xb
c001bb72:	09 c8                	or     eax,ecx
c001bb74:	09 d0                	or     eax,edx
c001bb76:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb7b:	0d 00 00 00 80       	or     eax,0x80000000
c001bb80:	ef                   	out    dx,eax
c001bb81:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb86:	ed                   	in     eax,dx
c001bb87:	83 e3 02             	and    ebx,0x2
c001bb8a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bb91:	d3 e8                	shr    eax,cl
c001bb93:	eb 44                	jmp    c001bbd9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bb95:	83 ff 02             	cmp    edi,0x2
c001bb98:	75 2d                	jne    c001bbc7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bb9a:	83 ec 0c             	sub    esp,0xc
c001bb9d:	0f b6 fb             	movzx  edi,bl
c001bba0:	57                   	push   edi
c001bba1:	0f b6 c9             	movzx  ecx,cl
c001bba4:	51                   	push   ecx
c001bba5:	0f b6 d2             	movzx  edx,dl
c001bba8:	52                   	push   edx
c001bba9:	0f b6 c0             	movzx  eax,al
c001bbac:	50                   	push   eax
c001bbad:	56                   	push   esi
c001bbae:	e8 0b ff ff ff       	call   c001babe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbb3:	89 c2                	mov    edx,eax
c001bbb5:	ed                   	in     eax,dx
c001bbb6:	83 e3 02             	and    ebx,0x2
c001bbb9:	83 c4 20             	add    esp,0x20
c001bbbc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bbc3:	d3 e8                	shr    eax,cl
c001bbc5:	eb 12                	jmp    c001bbd9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	68 43 35 02 c0       	push   0xc0023543
c001bbcf:	e8 66 30 ff ff       	call   c000ec3a <KePanic(char const*)>
c001bbd4:	83 c4 10             	add    esp,0x10
c001bbd7:	31 c0                	xor    eax,eax
c001bbd9:	5b                   	pop    ebx
c001bbda:	5e                   	pop    esi
c001bbdb:	5f                   	pop    edi
c001bbdc:	c3                   	ret    
c001bbdd:	90                   	nop

c001bbde <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bbde:	83 ec 18             	sub    esp,0x18
c001bbe1:	6a 00                	push   0x0
c001bbe3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbe8:	50                   	push   eax
c001bbe9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbee:	50                   	push   eax
c001bbef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbf4:	50                   	push   eax
c001bbf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbf9:	e8 36 ff ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbfe:	83 c4 2c             	add    esp,0x2c
c001bc01:	c3                   	ret    

c001bc02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bc02:	83 ec 18             	sub    esp,0x18
c001bc05:	6a 0e                	push   0xe
c001bc07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc0c:	50                   	push   eax
c001bc0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc12:	50                   	push   eax
c001bc13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc18:	50                   	push   eax
c001bc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc1d:	e8 12 ff ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc22:	83 c4 2c             	add    esp,0x2c
c001bc25:	0f b6 c0             	movzx  eax,al
c001bc28:	c3                   	ret    
c001bc29:	90                   	nop

c001bc2a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bc2a:	55                   	push   ebp
c001bc2b:	57                   	push   edi
c001bc2c:	56                   	push   esi
c001bc2d:	53                   	push   ebx
c001bc2e:	83 ec 18             	sub    esp,0x18
c001bc31:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bc36:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bc3b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bc40:	6a 0a                	push   0xa
c001bc42:	56                   	push   esi
c001bc43:	55                   	push   ebp
c001bc44:	57                   	push   edi
c001bc45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc49:	e8 e6 fe ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc4e:	83 c4 14             	add    esp,0x14
c001bc51:	6a 0a                	push   0xa
c001bc53:	56                   	push   esi
c001bc54:	55                   	push   ebp
c001bc55:	57                   	push   edi
c001bc56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc5a:	89 c3                	mov    ebx,eax
c001bc5c:	0f b6 db             	movzx  ebx,bl
c001bc5f:	e8 d0 fe ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc64:	83 c4 2c             	add    esp,0x2c
c001bc67:	25 00 ff 00 00       	and    eax,0xff00
c001bc6c:	09 d8                	or     eax,ebx
c001bc6e:	5b                   	pop    ebx
c001bc6f:	5e                   	pop    esi
c001bc70:	5f                   	pop    edi
c001bc71:	5d                   	pop    ebp
c001bc72:	c3                   	ret    
c001bc73:	90                   	nop

c001bc74 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bc74:	83 ec 18             	sub    esp,0x18
c001bc77:	6a 08                	push   0x8
c001bc79:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc7e:	50                   	push   eax
c001bc7f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc84:	50                   	push   eax
c001bc85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc8a:	50                   	push   eax
c001bc8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc8f:	e8 a0 fe ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc94:	83 c4 2c             	add    esp,0x2c
c001bc97:	0f b6 c4             	movzx  eax,ah
c001bc9a:	c3                   	ret    
c001bc9b:	90                   	nop

c001bc9c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bc9c:	83 ec 18             	sub    esp,0x18
c001bc9f:	6a 08                	push   0x8
c001bca1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bca6:	50                   	push   eax
c001bca7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcac:	50                   	push   eax
c001bcad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcb2:	50                   	push   eax
c001bcb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bcb7:	e8 78 fe ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcbc:	83 c4 2c             	add    esp,0x2c
c001bcbf:	c3                   	ret    

c001bcc0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bcc0:	83 ec 18             	sub    esp,0x18
c001bcc3:	6a 3c                	push   0x3c
c001bcc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcca:	50                   	push   eax
c001bccb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcd0:	50                   	push   eax
c001bcd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcd6:	50                   	push   eax
c001bcd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bcdb:	e8 54 fe ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bce0:	83 c4 2c             	add    esp,0x2c
c001bce3:	c3                   	ret    

c001bce4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bce4:	83 ec 18             	sub    esp,0x18
c001bce7:	6a 18                	push   0x18
c001bce9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcee:	50                   	push   eax
c001bcef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcf4:	50                   	push   eax
c001bcf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcfa:	50                   	push   eax
c001bcfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bcff:	e8 30 fe ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd04:	83 c4 2c             	add    esp,0x2c
c001bd07:	0f b6 c4             	movzx  eax,ah
c001bd0a:	c3                   	ret    
c001bd0b:	90                   	nop

c001bd0c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bd0c:	55                   	push   ebp
c001bd0d:	57                   	push   edi
c001bd0e:	56                   	push   esi
c001bd0f:	53                   	push   ebx
c001bd10:	83 ec 28             	sub    esp,0x28
c001bd13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bd17:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bd1c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bd21:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bd26:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bd2d:	8d 43 12             	lea    eax,[ebx+0x12]
c001bd30:	83 c3 10             	add    ebx,0x10
c001bd33:	0f b6 c0             	movzx  eax,al
c001bd36:	0f b6 db             	movzx  ebx,bl
c001bd39:	50                   	push   eax
c001bd3a:	51                   	push   ecx
c001bd3b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bd3f:	57                   	push   edi
c001bd40:	55                   	push   ebp
c001bd41:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bd45:	e8 ea fd ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd4a:	83 c4 14             	add    esp,0x14
c001bd4d:	53                   	push   ebx
c001bd4e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd52:	51                   	push   ecx
c001bd53:	89 c6                	mov    esi,eax
c001bd55:	57                   	push   edi
c001bd56:	55                   	push   ebp
c001bd57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bd5b:	c1 e6 10             	shl    esi,0x10
c001bd5e:	e8 d1 fd ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd63:	83 c4 3c             	add    esp,0x3c
c001bd66:	5b                   	pop    ebx
c001bd67:	0f b7 c0             	movzx  eax,ax
c001bd6a:	09 f0                	or     eax,esi
c001bd6c:	5e                   	pop    esi
c001bd6d:	5f                   	pop    edi
c001bd6e:	5d                   	pop    ebp
c001bd6f:	c3                   	ret    

c001bd70 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bd70:	55                   	push   ebp
c001bd71:	57                   	push   edi
c001bd72:	56                   	push   esi
c001bd73:	53                   	push   ebx
c001bd74:	83 ec 0c             	sub    esp,0xc
c001bd77:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd83:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001bd87:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001bd8d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd91:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd95:	83 f9 01             	cmp    ecx,0x1
c001bd98:	75 5d                	jne    c001bdf7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001bd9a:	0f b6 c8             	movzx  ecx,al
c001bd9d:	89 f0                	mov    eax,esi
c001bd9f:	25 fc 00 00 00       	and    eax,0xfc
c001bda4:	0f b6 d2             	movzx  edx,dl
c001bda7:	c1 e1 10             	shl    ecx,0x10
c001bdaa:	c1 e2 0b             	shl    edx,0xb
c001bdad:	09 c1                	or     ecx,eax
c001bdaf:	89 f8                	mov    eax,edi
c001bdb1:	0f b6 f8             	movzx  edi,al
c001bdb4:	c1 e7 08             	shl    edi,0x8
c001bdb7:	09 f9                	or     ecx,edi
c001bdb9:	09 d1                	or     ecx,edx
c001bdbb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bdc0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bdc6:	89 c8                	mov    eax,ecx
c001bdc8:	ef                   	out    dx,eax
c001bdc9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bdce:	ed                   	in     eax,dx
c001bdcf:	83 e6 02             	and    esi,0x2
c001bdd2:	0f b7 db             	movzx  ebx,bx
c001bdd5:	74 0a                	je     c001bde1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001bdd7:	c1 e3 10             	shl    ebx,0x10
c001bdda:	0f b7 d0             	movzx  edx,ax
c001bddd:	09 d3                	or     ebx,edx
c001bddf:	eb 05                	jmp    c001bde6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001bde1:	66 31 c0             	xor    ax,ax
c001bde4:	09 c3                	or     ebx,eax
c001bde6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bdeb:	89 c8                	mov    eax,ecx
c001bded:	ef                   	out    dx,eax
c001bdee:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bdf3:	89 d8                	mov    eax,ebx
c001bdf5:	eb 41                	jmp    c001be38 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001bdf7:	83 f9 02             	cmp    ecx,0x2
c001bdfa:	75 45                	jne    c001be41 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001bdfc:	89 f1                	mov    ecx,esi
c001bdfe:	83 ec 0c             	sub    esp,0xc
c001be01:	0f b6 f1             	movzx  esi,cl
c001be04:	89 f9                	mov    ecx,edi
c001be06:	56                   	push   esi
c001be07:	0f b6 f9             	movzx  edi,cl
c001be0a:	57                   	push   edi
c001be0b:	0f b6 d2             	movzx  edx,dl
c001be0e:	52                   	push   edx
c001be0f:	0f b6 c0             	movzx  eax,al
c001be12:	50                   	push   eax
c001be13:	55                   	push   ebp
c001be14:	e8 a5 fc ff ff       	call   c001babe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be19:	89 c2                	mov    edx,eax
c001be1b:	ed                   	in     eax,dx
c001be1c:	83 c4 20             	add    esp,0x20
c001be1f:	f6 c2 02             	test   dl,0x2
c001be22:	0f b7 db             	movzx  ebx,bx
c001be25:	74 0c                	je     c001be33 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001be27:	0f b7 c8             	movzx  ecx,ax
c001be2a:	89 d8                	mov    eax,ebx
c001be2c:	c1 e0 10             	shl    eax,0x10
c001be2f:	09 c8                	or     eax,ecx
c001be31:	eb 05                	jmp    c001be38 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001be33:	66 31 c0             	xor    ax,ax
c001be36:	09 d8                	or     eax,ebx
c001be38:	ef                   	out    dx,eax
c001be39:	83 c4 0c             	add    esp,0xc
c001be3c:	5b                   	pop    ebx
c001be3d:	5e                   	pop    esi
c001be3e:	5f                   	pop    edi
c001be3f:	5d                   	pop    ebp
c001be40:	c3                   	ret    
c001be41:	c7 44 24 20 43 35 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023543
c001be49:	83 c4 0c             	add    esp,0xc
c001be4c:	5b                   	pop    ebx
c001be4d:	5e                   	pop    esi
c001be4e:	5f                   	pop    edi
c001be4f:	5d                   	pop    ebp
c001be50:	e9 e5 2d ff ff       	jmp    c000ec3a <KePanic(char const*)>
c001be55:	90                   	nop

c001be56 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001be56:	55                   	push   ebp
c001be57:	57                   	push   edi
c001be58:	56                   	push   esi
c001be59:	53                   	push   ebx
c001be5a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001be60:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001be67:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001be6e:	0f 85 bd 00 00 00    	jne    c001bf31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001be74:	83 ec 0c             	sub    esp,0xc
c001be77:	68 14 01 00 00       	push   0x114
c001be7c:	e8 65 2a ff ff       	call   c000e8e6 <malloc>
c001be81:	83 c4 0c             	add    esp,0xc
c001be84:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001be8a:	68 49 35 02 c0       	push   0xc0023549
c001be8f:	50                   	push   eax
c001be90:	89 c3                	mov    ebx,eax
c001be92:	e8 75 c2 fe ff       	call   c000810c <File::File(char const*, Process*)>
c001be97:	83 c4 10             	add    esp,0x10
c001be9a:	85 db                	test   ebx,ebx
c001be9c:	0f 84 6b 02 00 00    	je     c001c10d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bea2:	57                   	push   edi
c001bea3:	57                   	push   edi
c001bea4:	6a 01                	push   0x1
c001bea6:	53                   	push   ebx
c001bea7:	e8 7e c2 fe ff       	call   c000812a <File::open(FileOpenMode)>
c001beac:	83 c4 10             	add    esp,0x10
c001beaf:	85 c0                	test   eax,eax
c001beb1:	0f 85 56 02 00 00    	jne    c001c10d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001beb7:	52                   	push   edx
c001beb8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001bebc:	50                   	push   eax
c001bebd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001bec1:	50                   	push   eax
c001bec2:	53                   	push   ebx
c001bec3:	e8 64 c5 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001bec8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001becc:	40                   	inc    eax
c001becd:	89 04 24             	mov    DWORD PTR [esp],eax
c001bed0:	e8 11 2a ff ff       	call   c000e8e6 <malloc>
c001bed5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001bed9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001bedd:	59                   	pop    ecx
c001bede:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001bee3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bee5:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001bee9:	51                   	push   ecx
c001beea:	50                   	push   eax
c001beeb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001beef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bef3:	53                   	push   ebx
c001bef4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bef7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001befb:	83 c4 20             	add    esp,0x20
c001befe:	89 c8                	mov    eax,ecx
c001bf00:	99                   	cdq    
c001bf01:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001bf05:	0f 85 02 02 00 00    	jne    c001c10d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bf0b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001bf0f:	0f 85 f8 01 00 00    	jne    c001c10d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bf15:	83 ec 0c             	sub    esp,0xc
c001bf18:	53                   	push   ebx
c001bf19:	e8 6a c2 fe ff       	call   c0008188 <File::close()>
c001bf1e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf22:	83 c4 10             	add    esp,0x10
c001bf25:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001bf2c:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001bf31:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001bf39:	31 c9                	xor    ecx,ecx
c001bf3b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001bf42:	8b 2d c4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0c4
c001bf48:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001bf4f:	8b 15 c8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c8
c001bf55:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001bf5a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001bf62:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001bf67:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001bf6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bf73:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001bf7b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bf7f:	39 cd                	cmp    ebp,ecx
c001bf81:	0f 8e 86 01 00 00    	jle    c001c10d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bf87:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001bf8a:	d4 40                	aam    0x40
c001bf8c:	d5 39                	aad    0x39
c001bf8e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bf92:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001bf96:	d4 40                	aam    0x40
c001bf98:	d5 39                	aad    0x39
c001bf9a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf9e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001bfa2:	d4 40                	aam    0x40
c001bfa4:	d5 39                	aad    0x39
c001bfa6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bfaa:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001bfae:	d4 40                	aam    0x40
c001bfb0:	d5 39                	aad    0x39
c001bfb2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bfb6:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001bfba:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001bfbe:	3c 56                	cmp    al,0x56
c001bfc0:	74 47                	je     c001c009 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001bfc2:	d4 40                	aam    0x40
c001bfc4:	d5 39                	aad    0x39
c001bfc6:	8d 58 d0             	lea    ebx,[eax-0x30]
c001bfc9:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001bfcd:	0f b6 db             	movzx  ebx,bl
c001bfd0:	c1 e3 04             	shl    ebx,0x4
c001bfd3:	d4 40                	aam    0x40
c001bfd5:	d5 39                	aad    0x39
c001bfd7:	83 e8 30             	sub    eax,0x30
c001bfda:	0f b6 c0             	movzx  eax,al
c001bfdd:	09 c3                	or     ebx,eax
c001bfdf:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001bfe3:	c1 e3 04             	shl    ebx,0x4
c001bfe6:	d4 40                	aam    0x40
c001bfe8:	d5 39                	aad    0x39
c001bfea:	83 e8 30             	sub    eax,0x30
c001bfed:	0f b6 c0             	movzx  eax,al
c001bff0:	09 c3                	or     ebx,eax
c001bff2:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001bff6:	c1 e3 04             	shl    ebx,0x4
c001bff9:	d4 40                	aam    0x40
c001bffb:	d5 39                	aad    0x39
c001bffd:	83 e8 30             	sub    eax,0x30
c001c000:	0f b6 c0             	movzx  eax,al
c001c003:	09 c3                	or     ebx,eax
c001c005:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001c009:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001c00d:	80 fb 58             	cmp    bl,0x58
c001c010:	74 49                	je     c001c05b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001c012:	88 d8                	mov    al,bl
c001c014:	d4 40                	aam    0x40
c001c016:	d5 39                	aad    0x39
c001c018:	83 e8 30             	sub    eax,0x30
c001c01b:	0f b6 f8             	movzx  edi,al
c001c01e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001c022:	c1 e7 04             	shl    edi,0x4
c001c025:	d4 40                	aam    0x40
c001c027:	d5 39                	aad    0x39
c001c029:	83 e8 30             	sub    eax,0x30
c001c02c:	0f b6 c0             	movzx  eax,al
c001c02f:	09 c7                	or     edi,eax
c001c031:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001c035:	c1 e7 04             	shl    edi,0x4
c001c038:	d4 40                	aam    0x40
c001c03a:	d5 39                	aad    0x39
c001c03c:	83 e8 30             	sub    eax,0x30
c001c03f:	0f b6 c0             	movzx  eax,al
c001c042:	09 c7                	or     edi,eax
c001c044:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001c048:	c1 e7 04             	shl    edi,0x4
c001c04b:	d4 40                	aam    0x40
c001c04d:	d5 39                	aad    0x39
c001c04f:	83 e8 30             	sub    eax,0x30
c001c052:	0f b6 c0             	movzx  eax,al
c001c055:	09 c7                	or     edi,eax
c001c057:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001c05b:	8d 41 10             	lea    eax,[ecx+0x10]
c001c05e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c062:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001c066:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c06a:	83 f9 0a             	cmp    ecx,0xa
c001c06d:	74 07                	je     c001c076 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001c06f:	47                   	inc    edi
c001c070:	39 c5                	cmp    ebp,eax
c001c072:	75 16                	jne    c001c08a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001c074:	89 e8                	mov    eax,ebp
c001c076:	83 f9 0a             	cmp    ecx,0xa
c001c079:	0f 94 c1             	sete   cl
c001c07c:	0f b6 c9             	movzx  ecx,cl
c001c07f:	01 c1                	add    ecx,eax
c001c081:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c086:	75 0f                	jne    c001c097 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001c088:	eb 1c                	jmp    c001c0a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001c08a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c08d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c091:	40                   	inc    eax
c001c092:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001c095:	eb cb                	jmp    c001c062 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001c097:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c09b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c0a0:	0f 85 d9 fe ff ff    	jne    c001bf7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c0a6:	80 fb 58             	cmp    bl,0x58
c001c0a9:	74 10                	je     c001c0bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001c0ab:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c0b0:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001c0b5:	0f 85 c4 fe ff ff    	jne    c001bf7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c0bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0bf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c0c3:	83 e8 30             	sub    eax,0x30
c001c0c6:	c1 e0 04             	shl    eax,0x4
c001c0c9:	83 eb 30             	sub    ebx,0x30
c001c0cc:	09 d8                	or     eax,ebx
c001c0ce:	0f b6 c0             	movzx  eax,al
c001c0d1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c0d5:	0f 85 a4 fe ff ff    	jne    c001bf7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c0db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0df:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c0e3:	83 e8 30             	sub    eax,0x30
c001c0e6:	c1 e0 04             	shl    eax,0x4
c001c0e9:	83 eb 30             	sub    ebx,0x30
c001c0ec:	09 d8                	or     eax,ebx
c001c0ee:	0f b6 c0             	movzx  eax,al
c001c0f1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c0f5:	0f 85 84 fe ff ff    	jne    c001bf7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c0fb:	50                   	push   eax
c001c0fc:	50                   	push   eax
c001c0fd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c101:	50                   	push   eax
c001c102:	56                   	push   esi
c001c103:	e8 48 45 fe ff       	call   c0000650 <strcpy>
c001c108:	83 c4 10             	add    esp,0x10
c001c10b:	eb 05                	jmp    c001c112 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001c10d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c110:	31 f6                	xor    esi,esi
c001c112:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c118:	89 f0                	mov    eax,esi
c001c11a:	5b                   	pop    ebx
c001c11b:	5e                   	pop    esi
c001c11c:	5f                   	pop    edi
c001c11d:	5d                   	pop    ebp
c001c11e:	c3                   	ret    
c001c11f:	90                   	nop

c001c120 <PCI::checkBus(unsigned char)>:
c001c120:	56                   	push   esi
c001c121:	53                   	push   ebx
c001c122:	31 db                	xor    ebx,ebx
c001c124:	51                   	push   ecx
c001c125:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c12a:	52                   	push   edx
c001c12b:	53                   	push   ebx
c001c12c:	43                   	inc    ebx
c001c12d:	56                   	push   esi
c001c12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c132:	e8 6f 03 00 00       	call   c001c4a6 <PCI::checkDevice(unsigned char, unsigned char)>
c001c137:	83 c4 10             	add    esp,0x10
c001c13a:	83 fb 20             	cmp    ebx,0x20
c001c13d:	75 eb                	jne    c001c12a <PCI::checkBus(unsigned char)+0xa>
c001c13f:	58                   	pop    eax
c001c140:	5b                   	pop    ebx
c001c141:	5e                   	pop    esi
c001c142:	c3                   	ret    
c001c143:	90                   	nop

c001c144 <PCI::foundDevice(PCIDeviceInfo)>:
c001c144:	55                   	push   ebp
c001c145:	57                   	push   edi
c001c146:	56                   	push   esi
c001c147:	53                   	push   ebx
c001c148:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c14e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c156:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001c15d:	3d ff ff 00 00       	cmp    eax,0xffff
c001c162:	0f 84 b6 01 00 00    	je     c001c31e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c168:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001c170:	66 81 fd 06 04       	cmp    bp,0x406
c001c175:	75 32                	jne    c001c1a9 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c177:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c17f:	50                   	push   eax
c001c180:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c188:	50                   	push   eax
c001c189:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c191:	50                   	push   eax
c001c192:	53                   	push   ebx
c001c193:	e8 4c fb ff ff       	call   c001bce4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c198:	59                   	pop    ecx
c001c199:	5e                   	pop    esi
c001c19a:	0f b6 c0             	movzx  eax,al
c001c19d:	50                   	push   eax
c001c19e:	53                   	push   ebx
c001c19f:	e8 7c ff ff ff       	call   c001c120 <PCI::checkBus(unsigned char)>
c001c1a4:	e9 15 01 00 00       	jmp    c001c2be <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001c1a9:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001c1b1:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001c1b7:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001c1be:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c1c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c1c9:	85 c0                	test   eax,eax
c001c1cb:	74 34                	je     c001c201 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001c1cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c1d0:	85 d2                	test   edx,edx
c001c1d2:	74 29                	je     c001c1fd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c1d4:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c1da:	31 cf                	xor    edi,ecx
c001c1dc:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c1e2:	75 19                	jne    c001c1fd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c1e4:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001c1ea:	75 11                	jne    c001c1fd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c1ec:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c1f3:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c1f7:	0f 84 21 01 00 00    	je     c001c31e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c1fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1ff:	eb c8                	jmp    c001c1c9 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c201:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c205:	be 7c 35 02 c0       	mov    esi,0xc002357c
c001c20a:	b9 07 00 00 00       	mov    ecx,0x7
c001c20f:	fc                   	cld    
c001c210:	31 d2                	xor    edx,edx
c001c212:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c214:	b9 12 00 00 00       	mov    ecx,0x12
c001c219:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c220:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c224:	83 ec 0c             	sub    esp,0xc
c001c227:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c229:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c231:	b9 0a 00 00 00       	mov    ecx,0xa
c001c236:	f7 f1                	div    ecx
c001c238:	83 c0 30             	add    eax,0x30
c001c23b:	83 c2 30             	add    edx,0x30
c001c23e:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c242:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c24a:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c24e:	31 d2                	xor    edx,edx
c001c250:	f7 f1                	div    ecx
c001c252:	83 c0 30             	add    eax,0x30
c001c255:	83 c2 30             	add    edx,0x30
c001c258:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c25c:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c260:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c264:	50                   	push   eax
c001c265:	e8 39 03 ff ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c26a:	83 c4 10             	add    esp,0x10
c001c26d:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001c273:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c27a:	75 47                	jne    c001c2c3 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001c27c:	83 ec 0c             	sub    esp,0xc
c001c27f:	68 64 01 00 00       	push   0x164
c001c284:	e8 5d 26 ff ff       	call   c000e8e6 <malloc>
c001c289:	89 04 24             	mov    DWORD PTR [esp],eax
c001c28c:	89 c5                	mov    ebp,eax
c001c28e:	e8 9d 10 00 00       	call   c001d330 <SATABus::SATABus()>
c001c293:	58                   	pop    eax
c001c294:	5a                   	pop    edx
c001c295:	55                   	push   ebp
c001c296:	53                   	push   ebx
c001c297:	e8 a6 cd fe ff       	call   c0009042 <Device::addChild(Device*)>
c001c29c:	83 ec 1c             	sub    esp,0x1c
c001c29f:	b9 09 00 00 00       	mov    ecx,0x9
c001c2a4:	89 e7                	mov    edi,esp
c001c2a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c2a8:	55                   	push   ebp
c001c2a9:	e8 da cc fe ff       	call   c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>
c001c2ae:	83 c4 30             	add    esp,0x30
c001c2b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c2b4:	6a 00                	push   0x0
c001c2b6:	6a 00                	push   0x0
c001c2b8:	6a 00                	push   0x0
c001c2ba:	55                   	push   ebp
c001c2bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2be:	83 c4 10             	add    esp,0x10
c001c2c1:	eb 5b                	jmp    c001c31e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c2c3:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001c2c9:	75 19                	jne    c001c2e4 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001c2cb:	83 ec 0c             	sub    esp,0xc
c001c2ce:	68 70 02 00 00       	push   0x270
c001c2d3:	e8 0e 26 ff ff       	call   c000e8e6 <malloc>
c001c2d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2db:	89 c5                	mov    ebp,eax
c001c2dd:	e8 94 02 00 00       	call   c001c576 <IDE::IDE()>
c001c2e2:	eb af                	jmp    c001c293 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001c2e4:	83 ec 0c             	sub    esp,0xc
c001c2e7:	68 58 01 00 00       	push   0x158
c001c2ec:	e8 f5 25 ff ff       	call   c000e8e6 <malloc>
c001c2f1:	89 c5                	mov    ebp,eax
c001c2f3:	58                   	pop    eax
c001c2f4:	5a                   	pop    edx
c001c2f5:	68 62 35 02 c0       	push   0xc0023562
c001c2fa:	55                   	push   ebp
c001c2fb:	e8 f6 cf fe ff       	call   c00092f6 <DriverlessDevice::DriverlessDevice(char const*)>
c001c300:	59                   	pop    ecx
c001c301:	5f                   	pop    edi
c001c302:	55                   	push   ebp
c001c303:	53                   	push   ebx
c001c304:	e8 39 cd fe ff       	call   c0009042 <Device::addChild(Device*)>
c001c309:	83 ec 1c             	sub    esp,0x1c
c001c30c:	b9 09 00 00 00       	mov    ecx,0x9
c001c311:	89 e7                	mov    edi,esp
c001c313:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c315:	55                   	push   ebp
c001c316:	e8 6d cc fe ff       	call   c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>
c001c31b:	83 c4 30             	add    esp,0x30
c001c31e:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c324:	5b                   	pop    ebx
c001c325:	5e                   	pop    esi
c001c326:	5f                   	pop    edi
c001c327:	5d                   	pop    ebp
c001c328:	c3                   	ret    
c001c329:	90                   	nop

c001c32a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c32a:	55                   	push   ebp
c001c32b:	57                   	push   edi
c001c32c:	56                   	push   esi
c001c32d:	53                   	push   ebx
c001c32e:	83 ec 68             	sub    esp,0x68
c001c331:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c338:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c33c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c340:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c347:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c34c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c350:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c357:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c35c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c360:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c365:	6a 0c                	push   0xc
c001c367:	57                   	push   edi
c001c368:	53                   	push   ebx
c001c369:	56                   	push   esi
c001c36a:	55                   	push   ebp
c001c36b:	e8 c4 f7 ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c370:	83 c4 20             	add    esp,0x20
c001c373:	57                   	push   edi
c001c374:	53                   	push   ebx
c001c375:	56                   	push   esi
c001c376:	55                   	push   ebp
c001c377:	e8 ae f8 ff ff       	call   c001bc2a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c37c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c381:	57                   	push   edi
c001c382:	53                   	push   ebx
c001c383:	56                   	push   esi
c001c384:	55                   	push   ebp
c001c385:	e8 36 f9 ff ff       	call   c001bcc0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c38a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c38e:	83 c4 14             	add    esp,0x14
c001c391:	6a 3c                	push   0x3c
c001c393:	57                   	push   edi
c001c394:	53                   	push   ebx
c001c395:	56                   	push   esi
c001c396:	55                   	push   ebp
c001c397:	e8 98 f7 ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c39c:	0f b6 c4             	movzx  eax,ah
c001c39f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c3a3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c3a7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c3ab:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c3b0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c3b6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c3bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c3c0:	83 c4 20             	add    esp,0x20
c001c3c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c3c8:	74 30                	je     c001c3fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c3ca:	31 c0                	xor    eax,eax
c001c3cc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c3d0:	7e 28                	jle    c001c3fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c3d2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c3da:	39 cb                	cmp    ebx,ecx
c001c3dc:	75 19                	jne    c001c3f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c3de:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c3e6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c3ea:	75 0b                	jne    c001c3f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c3ec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c3f3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c3f7:	40                   	inc    eax
c001c3f8:	eb d2                	jmp    c001c3cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c3fa:	31 d2                	xor    edx,edx
c001c3fc:	83 ec 0c             	sub    esp,0xc
c001c3ff:	57                   	push   edi
c001c400:	53                   	push   ebx
c001c401:	56                   	push   esi
c001c402:	52                   	push   edx
c001c403:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c407:	55                   	push   ebp
c001c408:	e8 ff f8 ff ff       	call   c001bd0c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c40d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c411:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c415:	42                   	inc    edx
c001c416:	83 c4 20             	add    esp,0x20
c001c419:	83 fa 06             	cmp    edx,0x6
c001c41c:	75 de                	jne    c001c3fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c41e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c422:	83 ec 0c             	sub    esp,0xc
c001c425:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c429:	c1 e2 08             	shl    edx,0x8
c001c42c:	0f b6 c4             	movzx  eax,ah
c001c42f:	09 d0                	or     eax,edx
c001c431:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c436:	6a 02                	push   0x2
c001c438:	57                   	push   edi
c001c439:	53                   	push   ebx
c001c43a:	56                   	push   esi
c001c43b:	55                   	push   ebp
c001c43c:	e8 f3 f6 ff ff       	call   c001bb34 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c441:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c446:	83 c4 20             	add    esp,0x20
c001c449:	57                   	push   edi
c001c44a:	53                   	push   ebx
c001c44b:	56                   	push   esi
c001c44c:	55                   	push   ebp
c001c44d:	e8 22 f8 ff ff       	call   c001bc74 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c452:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c456:	57                   	push   edi
c001c457:	53                   	push   ebx
c001c458:	56                   	push   esi
c001c459:	55                   	push   ebp
c001c45a:	e8 7f f7 ff ff       	call   c001bbde <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c45f:	b9 09 00 00 00       	mov    ecx,0x9
c001c464:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c469:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c46d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c471:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c475:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c479:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c47d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c481:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c485:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c489:	83 ec 0c             	sub    esp,0xc
c001c48c:	fc                   	cld    
c001c48d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c491:	89 e7                	mov    edi,esp
c001c493:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c495:	55                   	push   ebp
c001c496:	e8 a9 fc ff ff       	call   c001c144 <PCI::foundDevice(PCIDeviceInfo)>
c001c49b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c4a1:	5b                   	pop    ebx
c001c4a2:	5e                   	pop    esi
c001c4a3:	5f                   	pop    edi
c001c4a4:	5d                   	pop    ebp
c001c4a5:	c3                   	ret    

c001c4a6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c4a6:	55                   	push   ebp
c001c4a7:	57                   	push   edi
c001c4a8:	56                   	push   esi
c001c4a9:	53                   	push   ebx
c001c4aa:	83 ec 0c             	sub    esp,0xc
c001c4ad:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c4b2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c4b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c4bb:	6a 00                	push   0x0
c001c4bd:	56                   	push   esi
c001c4be:	57                   	push   edi
c001c4bf:	55                   	push   ebp
c001c4c0:	e8 19 f7 ff ff       	call   c001bbde <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4c5:	6a 00                	push   0x0
c001c4c7:	56                   	push   esi
c001c4c8:	57                   	push   edi
c001c4c9:	55                   	push   ebp
c001c4ca:	e8 5b fe ff ff       	call   c001c32a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c4cf:	83 c4 20             	add    esp,0x20
c001c4d2:	6a 00                	push   0x0
c001c4d4:	56                   	push   esi
c001c4d5:	57                   	push   edi
c001c4d6:	55                   	push   ebp
c001c4d7:	e8 26 f7 ff ff       	call   c001bc02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c4dc:	83 c4 10             	add    esp,0x10
c001c4df:	a8 80                	test   al,0x80
c001c4e1:	74 2d                	je     c001c510 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c4e3:	bb 01 00 00 00       	mov    ebx,0x1
c001c4e8:	53                   	push   ebx
c001c4e9:	56                   	push   esi
c001c4ea:	57                   	push   edi
c001c4eb:	55                   	push   ebp
c001c4ec:	e8 ed f6 ff ff       	call   c001bbde <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4f1:	83 c4 10             	add    esp,0x10
c001c4f4:	0f b7 c0             	movzx  eax,ax
c001c4f7:	3d ff ff 00 00       	cmp    eax,0xffff
c001c4fc:	74 0c                	je     c001c50a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c4fe:	53                   	push   ebx
c001c4ff:	56                   	push   esi
c001c500:	57                   	push   edi
c001c501:	55                   	push   ebp
c001c502:	e8 23 fe ff ff       	call   c001c32a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c507:	83 c4 10             	add    esp,0x10
c001c50a:	43                   	inc    ebx
c001c50b:	83 fb 08             	cmp    ebx,0x8
c001c50e:	75 d8                	jne    c001c4e8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c510:	83 c4 0c             	add    esp,0xc
c001c513:	5b                   	pop    ebx
c001c514:	5e                   	pop    esi
c001c515:	5f                   	pop    edi
c001c516:	5d                   	pop    ebp
c001c517:	c3                   	ret    

c001c518 <PCI::detect()>:
c001c518:	56                   	push   esi
c001c519:	53                   	push   ebx
c001c51a:	53                   	push   ebx
c001c51b:	31 db                	xor    ebx,ebx
c001c51d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c521:	6a 00                	push   0x0
c001c523:	6a 00                	push   0x0
c001c525:	6a 00                	push   0x0
c001c527:	56                   	push   esi
c001c528:	e8 d5 f6 ff ff       	call   c001bc02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c52d:	83 c4 10             	add    esp,0x10
c001c530:	a8 80                	test   al,0x80
c001c532:	75 21                	jne    c001c555 <PCI::detect()+0x3d>
c001c534:	51                   	push   ecx
c001c535:	51                   	push   ecx
c001c536:	6a 00                	push   0x0
c001c538:	56                   	push   esi
c001c539:	e8 e2 fb ff ff       	call   c001c120 <PCI::checkBus(unsigned char)>
c001c53e:	83 c4 10             	add    esp,0x10
c001c541:	eb 2a                	jmp    c001c56d <PCI::detect()+0x55>
c001c543:	52                   	push   edx
c001c544:	52                   	push   edx
c001c545:	53                   	push   ebx
c001c546:	43                   	inc    ebx
c001c547:	56                   	push   esi
c001c548:	e8 d3 fb ff ff       	call   c001c120 <PCI::checkBus(unsigned char)>
c001c54d:	83 c4 10             	add    esp,0x10
c001c550:	83 fb 08             	cmp    ebx,0x8
c001c553:	74 18                	je     c001c56d <PCI::detect()+0x55>
c001c555:	53                   	push   ebx
c001c556:	6a 00                	push   0x0
c001c558:	6a 00                	push   0x0
c001c55a:	56                   	push   esi
c001c55b:	e8 7e f6 ff ff       	call   c001bbde <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c560:	83 c4 10             	add    esp,0x10
c001c563:	0f b7 c0             	movzx  eax,ax
c001c566:	3d ff ff 00 00       	cmp    eax,0xffff
c001c56b:	74 d6                	je     c001c543 <PCI::detect()+0x2b>
c001c56d:	58                   	pop    eax
c001c56e:	5b                   	pop    ebx
c001c56f:	5e                   	pop    esi
c001c570:	c3                   	ret    
c001c571:	90                   	nop

c001c572 <IDE::close(int, int, void*)>:
c001c572:	83 c8 ff             	or     eax,0xffffffff
c001c575:	c3                   	ret    

c001c576 <IDE::IDE()>:
c001c576:	83 ec 0c             	sub    esp,0xc
c001c579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57d:	83 ec 08             	sub    esp,0x8
c001c580:	68 0c 36 02 c0       	push   0xc002360c
c001c585:	50                   	push   eax
c001c586:	e8 11 ce fe ff       	call   c000939c <HardDiskController::HardDiskController(char const*)>
c001c58b:	83 c4 10             	add    esp,0x10
c001c58e:	ba 20 37 02 c0       	mov    edx,0xc0023720
c001c593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c597:	89 10                	mov    DWORD PTR [eax],edx
c001c599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c5a4:	90                   	nop
c001c5a5:	83 c4 0c             	add    esp,0xc
c001c5a8:	c3                   	ret    
c001c5a9:	90                   	nop

c001c5aa <IDE::prepareInterrupt(unsigned char)>:
c001c5aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c5af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c5bb:	c3                   	ret    

c001c5bc <selectDrive(unsigned char, unsigned char)>:
c001c5bc:	c3                   	ret    
c001c5bd:	90                   	nop

c001c5be <IDE::getBase(unsigned char)>:
c001c5be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c5c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c5cf:	c3                   	ret    

c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c5d0:	55                   	push   ebp
c001c5d1:	57                   	push   edi
c001c5d2:	56                   	push   esi
c001c5d3:	53                   	push   ebx
c001c5d4:	83 ec 1c             	sub    esp,0x1c
c001c5d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c5db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c5df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c5e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5e7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c5ea:	80 f9 03             	cmp    cl,0x3
c001c5ed:	77 4f                	ja     c001c63e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c5ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5f3:	0f b6 f2             	movzx  esi,dl
c001c5f6:	0f b6 db             	movzx  ebx,bl
c001c5f9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c5fc:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c601:	80 ca 80             	or     dl,0x80
c001c604:	52                   	push   edx
c001c605:	6a 0c                	push   0xc
c001c607:	56                   	push   esi
c001c608:	57                   	push   edi
c001c609:	e8 c2 ff ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c60e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c613:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c617:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c61b:	ee                   	out    dx,al
c001c61c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c621:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c625:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c629:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c631:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c635:	83 c4 2c             	add    esp,0x2c
c001c638:	5b                   	pop    ebx
c001c639:	5e                   	pop    esi
c001c63a:	5f                   	pop    edi
c001c63b:	5d                   	pop    ebp
c001c63c:	eb 92                	jmp    c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c63e:	0f b6 cb             	movzx  ecx,bl
c001c641:	83 f9 07             	cmp    ecx,0x7
c001c644:	77 12                	ja     c001c658 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c646:	0f b6 d2             	movzx  edx,dl
c001c649:	0f b6 db             	movzx  ebx,bl
c001c64c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001c654:	01 da                	add    edx,ebx
c001c656:	eb 2f                	jmp    c001c687 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c658:	83 f9 0d             	cmp    ecx,0xd
c001c65b:	77 13                	ja     c001c670 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c65d:	0f b6 d2             	movzx  edx,dl
c001c660:	0f b6 db             	movzx  ebx,bl
c001c663:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c66a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c66e:	eb 17                	jmp    c001c687 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c670:	83 f9 15             	cmp    ecx,0x15
c001c673:	77 13                	ja     c001c688 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c675:	0f b6 d2             	movzx  edx,dl
c001c678:	0f b6 db             	movzx  ebx,bl
c001c67b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c683:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c687:	ee                   	out    dx,al
c001c688:	83 c4 1c             	add    esp,0x1c
c001c68b:	5b                   	pop    ebx
c001c68c:	5e                   	pop    esi
c001c68d:	5f                   	pop    edi
c001c68e:	5d                   	pop    ebp
c001c68f:	c3                   	ret    

c001c690 <IDE::read(unsigned char, unsigned char)>:
c001c690:	57                   	push   edi
c001c691:	56                   	push   esi
c001c692:	53                   	push   ebx
c001c693:	83 ec 10             	sub    esp,0x10
c001c696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c69a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c69e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c6a2:	8d 42 f8             	lea    eax,[edx-0x8]
c001c6a5:	3c 03                	cmp    al,0x3
c001c6a7:	77 48                	ja     c001c6f1 <IDE::read(unsigned char, unsigned char)+0x61>
c001c6a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c6ad:	0f b6 f1             	movzx  esi,cl
c001c6b0:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001c6b3:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001c6b8:	0c 80                	or     al,0x80
c001c6ba:	50                   	push   eax
c001c6bb:	6a 0c                	push   0xc
c001c6bd:	56                   	push   esi
c001c6be:	53                   	push   ebx
c001c6bf:	e8 0c ff ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6c8:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001c6cd:	0f b6 d2             	movzx  edx,dl
c001c6d0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c6d4:	ec                   	in     al,dx
c001c6d5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c6d9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001c6de:	52                   	push   edx
c001c6df:	6a 0c                	push   0xc
c001c6e1:	56                   	push   esi
c001c6e2:	53                   	push   ebx
c001c6e3:	e8 e8 fe ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6e8:	83 c4 20             	add    esp,0x20
c001c6eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c6ef:	eb 4c                	jmp    c001c73d <IDE::read(unsigned char, unsigned char)+0xad>
c001c6f1:	0f b6 f2             	movzx  esi,dl
c001c6f4:	83 fe 07             	cmp    esi,0x7
c001c6f7:	77 12                	ja     c001c70b <IDE::read(unsigned char, unsigned char)+0x7b>
c001c6f9:	0f b6 c9             	movzx  ecx,cl
c001c6fc:	0f b6 d2             	movzx  edx,dl
c001c6ff:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001c707:	01 c2                	add    edx,eax
c001c709:	eb 31                	jmp    c001c73c <IDE::read(unsigned char, unsigned char)+0xac>
c001c70b:	83 fe 0d             	cmp    esi,0xd
c001c70e:	77 13                	ja     c001c723 <IDE::read(unsigned char, unsigned char)+0x93>
c001c710:	0f b6 c9             	movzx  ecx,cl
c001c713:	0f b6 d2             	movzx  edx,dl
c001c716:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001c71d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c721:	eb 19                	jmp    c001c73c <IDE::read(unsigned char, unsigned char)+0xac>
c001c723:	31 c0                	xor    eax,eax
c001c725:	83 fe 15             	cmp    esi,0x15
c001c728:	77 13                	ja     c001c73d <IDE::read(unsigned char, unsigned char)+0xad>
c001c72a:	0f b6 c9             	movzx  ecx,cl
c001c72d:	0f b6 d2             	movzx  edx,dl
c001c730:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001c738:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c73c:	ec                   	in     al,dx
c001c73d:	83 c4 10             	add    esp,0x10
c001c740:	5b                   	pop    ebx
c001c741:	5e                   	pop    esi
c001c742:	5f                   	pop    edi
c001c743:	c3                   	ret    

c001c744 <IDE::waitInterrupt(unsigned char)>:
c001c744:	55                   	push   ebp
c001c745:	57                   	push   edi
c001c746:	56                   	push   esi
c001c747:	53                   	push   ebx
c001c748:	31 db                	xor    ebx,ebx
c001c74a:	83 ec 0c             	sub    esp,0xc
c001c74d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c751:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c756:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c75e:	89 e8                	mov    eax,ebp
c001c760:	84 c0                	test   al,al
c001c762:	75 30                	jne    c001c794 <IDE::waitInterrupt(unsigned char)+0x50>
c001c764:	50                   	push   eax
c001c765:	6a 0c                	push   0xc
c001c767:	56                   	push   esi
c001c768:	57                   	push   edi
c001c769:	e8 22 ff ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001c76e:	83 c4 10             	add    esp,0x10
c001c771:	a8 01                	test   al,0x1
c001c773:	75 27                	jne    c001c79c <IDE::waitInterrupt(unsigned char)+0x58>
c001c775:	f6 c3 04             	test   bl,0x4
c001c778:	75 12                	jne    c001c78c <IDE::waitInterrupt(unsigned char)+0x48>
c001c77a:	83 fb 32             	cmp    ebx,0x32
c001c77d:	7e 0d                	jle    c001c78c <IDE::waitInterrupt(unsigned char)+0x48>
c001c77f:	83 ec 0c             	sub    esp,0xc
c001c782:	6a 64                	push   0x64
c001c784:	e8 1f 8f ff ff       	call   c00156a8 <milliTenthSleep(unsigned int)>
c001c789:	83 c4 10             	add    esp,0x10
c001c78c:	83 fb 3c             	cmp    ebx,0x3c
c001c78f:	74 0b                	je     c001c79c <IDE::waitInterrupt(unsigned char)+0x58>
c001c791:	43                   	inc    ebx
c001c792:	eb c2                	jmp    c001c756 <IDE::waitInterrupt(unsigned char)+0x12>
c001c794:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c79c:	83 c4 0c             	add    esp,0xc
c001c79f:	89 e8                	mov    eax,ebp
c001c7a1:	5b                   	pop    ebx
c001c7a2:	5e                   	pop    esi
c001c7a3:	5f                   	pop    edi
c001c7a4:	5d                   	pop    ebp
c001c7a5:	c3                   	ret    

c001c7a6 <ideChannel0IRQHandler(regs*, void*)>:
c001c7a6:	83 ec 10             	sub    esp,0x10
c001c7a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7ad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c7b4:	6a 07                	push   0x7
c001c7b6:	6a 00                	push   0x0
c001c7b8:	50                   	push   eax
c001c7b9:	e8 d2 fe ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001c7be:	83 c4 1c             	add    esp,0x1c
c001c7c1:	c3                   	ret    

c001c7c2 <ideChannel1IRQHandler(regs*, void*)>:
c001c7c2:	83 ec 10             	sub    esp,0x10
c001c7c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7c9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c7d0:	6a 07                	push   0x7
c001c7d2:	6a 01                	push   0x1
c001c7d4:	50                   	push   eax
c001c7d5:	e8 b6 fe ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001c7da:	83 c4 1c             	add    esp,0x1c
c001c7dd:	c3                   	ret    

c001c7de <IDE::enableIRQs(unsigned char, bool)>:
c001c7de:	57                   	push   edi
c001c7df:	b8 02 00 00 00       	mov    eax,0x2
c001c7e4:	56                   	push   esi
c001c7e5:	53                   	push   ebx
c001c7e6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c7eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c7f3:	74 02                	je     c001c7f7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c7f5:	31 c0                	xor    eax,eax
c001c7f7:	0f b6 db             	movzx  ebx,bl
c001c7fa:	bf 04 00 00 00       	mov    edi,0x4
c001c7ff:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c806:	50                   	push   eax
c001c807:	6a 0c                	push   0xc
c001c809:	53                   	push   ebx
c001c80a:	56                   	push   esi
c001c80b:	e8 c0 fd ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c810:	83 c4 10             	add    esp,0x10
c001c813:	50                   	push   eax
c001c814:	6a 0c                	push   0xc
c001c816:	53                   	push   ebx
c001c817:	56                   	push   esi
c001c818:	e8 73 fe ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001c81d:	83 c4 10             	add    esp,0x10
c001c820:	4f                   	dec    edi
c001c821:	75 f0                	jne    c001c813 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c823:	5b                   	pop    ebx
c001c824:	5e                   	pop    esi
c001c825:	5f                   	pop    edi
c001c826:	c3                   	ret    
c001c827:	90                   	nop

c001c828 <IDE::open(int, int, void*)>:
c001c828:	55                   	push   ebp
c001c829:	57                   	push   edi
c001c82a:	56                   	push   esi
c001c82b:	53                   	push   ebx
c001c82c:	83 ec 1c             	sub    esp,0x1c
c001c82f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c833:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c83a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c843:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c84c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c853:	0f 85 13 02 00 00    	jne    c001ca6c <IDE::open(int, int, void*)+0x244>
c001c859:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c85f:	a8 70                	test   al,0x70
c001c861:	75 44                	jne    c001c8a7 <IDE::open(int, int, void*)+0x7f>
c001c863:	ba 20 84 00 00       	mov    edx,0x8420
c001c868:	0f a3 c2             	bt     edx,eax
c001c86b:	73 3a                	jae    c001c8a7 <IDE::open(int, int, void*)+0x7f>
c001c86d:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c873:	83 ec 0c             	sub    esp,0xc
c001c876:	83 e0 fc             	and    eax,0xfffffffc
c001c879:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c880:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c886:	83 e0 fc             	and    eax,0xfffffffc
c001c889:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c890:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c896:	83 e0 fc             	and    eax,0xfffffffc
c001c899:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c8a0:	68 c5 13 02 c0       	push   0xc00213c5
c001c8a5:	eb 60                	jmp    c001c907 <IDE::open(int, int, void*)+0xdf>
c001c8a7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c8b1:	be 64 00 00 00       	mov    esi,0x64
c001c8b6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c8c0:	57                   	push   edi
c001c8c1:	57                   	push   edi
c001c8c2:	68 24 36 02 c0       	push   0xc0023624
c001c8c7:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c8cb:	57                   	push   edi
c001c8cc:	e8 7f 3d fe ff       	call   c0000650 <strcpy>
c001c8d1:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c8d8:	31 d2                	xor    edx,edx
c001c8da:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8dd:	89 c8                	mov    eax,ecx
c001c8df:	f7 f6                	div    esi
c001c8e1:	be 0a 00 00 00       	mov    esi,0xa
c001c8e6:	31 d2                	xor    edx,edx
c001c8e8:	83 c0 30             	add    eax,0x30
c001c8eb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c8ef:	89 c8                	mov    eax,ecx
c001c8f1:	f7 f6                	div    esi
c001c8f3:	89 d1                	mov    ecx,edx
c001c8f5:	31 d2                	xor    edx,edx
c001c8f7:	f7 f6                	div    esi
c001c8f9:	83 c1 30             	add    ecx,0x30
c001c8fc:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c900:	83 c2 30             	add    edx,0x30
c001c903:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c907:	e8 97 fc fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c90c:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c913:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c918:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	89 fa                	mov    edx,edi
c001c924:	c1 e1 10             	shl    ecx,0x10
c001c927:	c1 e0 0b             	shl    eax,0xb
c001c92a:	09 c1                	or     ecx,eax
c001c92c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c933:	c1 e0 08             	shl    eax,0x8
c001c936:	09 c1                	or     ecx,eax
c001c938:	89 c8                	mov    eax,ecx
c001c93a:	0d 08 00 00 80       	or     eax,0x80000008
c001c93f:	ef                   	out    dx,eax
c001c940:	be fc 0c 00 00       	mov    esi,0xcfc
c001c945:	89 f2                	mov    edx,esi
c001c947:	ed                   	in     eax,dx
c001c948:	c1 e8 10             	shr    eax,0x10
c001c94b:	3d ff ff 00 00       	cmp    eax,0xffff
c001c950:	0f 84 e1 00 00 00    	je     c001ca37 <IDE::open(int, int, void*)+0x20f>
c001c956:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c95c:	89 fa                	mov    edx,edi
c001c95e:	89 c8                	mov    eax,ecx
c001c960:	ef                   	out    dx,eax
c001c961:	b0 fe                	mov    al,0xfe
c001c963:	89 f2                	mov    edx,esi
c001c965:	ee                   	out    dx,al
c001c966:	89 c8                	mov    eax,ecx
c001c968:	89 fa                	mov    edx,edi
c001c96a:	ef                   	out    dx,eax
c001c96b:	89 f2                	mov    edx,esi
c001c96d:	ed                   	in     eax,dx
c001c96e:	3c fe                	cmp    al,0xfe
c001c970:	0f 85 83 00 00 00    	jne    c001c9f9 <IDE::open(int, int, void*)+0x1d1>
c001c976:	83 ec 0c             	sub    esp,0xc
c001c979:	68 fb 13 02 c0       	push   0xc00213fb
c001c97e:	e8 20 fc fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c983:	c7 04 24 2a 36 02 c0 	mov    DWORD PTR [esp],0xc002362a
c001c98a:	e8 ab 22 ff ff       	call   c000ec3a <KePanic(char const*)>
c001c98f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c999:	c7 04 24 2c 16 02 c0 	mov    DWORD PTR [esp],0xc002162c
c001c9a0:	e8 fe fb fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001c9a5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c9ac:	89 fa                	mov    edx,edi
c001c9ae:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c9b5:	c1 e1 10             	shl    ecx,0x10
c001c9b8:	c1 e0 08             	shl    eax,0x8
c001c9bb:	09 c1                	or     ecx,eax
c001c9bd:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c9c4:	c1 e0 0b             	shl    eax,0xb
c001c9c7:	09 c1                	or     ecx,eax
c001c9c9:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c9cf:	89 c8                	mov    eax,ecx
c001c9d1:	ef                   	out    dx,eax
c001c9d2:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001c9d8:	89 f2                	mov    edx,esi
c001c9da:	89 e8                	mov    eax,ebp
c001c9dc:	ee                   	out    dx,al
c001c9dd:	89 c8                	mov    eax,ecx
c001c9df:	89 fa                	mov    edx,edi
c001c9e1:	ef                   	out    dx,eax
c001c9e2:	89 f2                	mov    edx,esi
c001c9e4:	ed                   	in     eax,dx
c001c9e5:	0f b6 c0             	movzx  eax,al
c001c9e8:	83 c4 10             	add    esp,0x10
c001c9eb:	39 e8                	cmp    eax,ebp
c001c9ed:	74 58                	je     c001ca47 <IDE::open(int, int, void*)+0x21f>
c001c9ef:	83 ec 0c             	sub    esp,0xc
c001c9f2:	68 3f 36 02 c0       	push   0xc002363f
c001c9f7:	eb 46                	jmp    c001ca3f <IDE::open(int, int, void*)+0x217>
c001c9f9:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ca02:	75 29                	jne    c001ca2d <IDE::open(int, int, void*)+0x205>
c001ca04:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ca0b:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ca10:	74 05                	je     c001ca17 <IDE::open(int, int, void*)+0x1ef>
c001ca12:	83 c0 80             	add    eax,0xffffff80
c001ca15:	75 16                	jne    c001ca2d <IDE::open(int, int, void*)+0x205>
c001ca17:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca1e:	83 ec 0c             	sub    esp,0xc
c001ca21:	68 f9 23 02 c0       	push   0xc00223f9
c001ca26:	e8 78 fb fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ca2b:	eb 17                	jmp    c001ca44 <IDE::open(int, int, void*)+0x21c>
c001ca2d:	83 ec 0c             	sub    esp,0xc
c001ca30:	68 47 36 02 c0       	push   0xc0023647
c001ca35:	eb 08                	jmp    c001ca3f <IDE::open(int, int, void*)+0x217>
c001ca37:	83 ec 0c             	sub    esp,0xc
c001ca3a:	68 78 36 02 c0       	push   0xc0023678
c001ca3f:	e8 f6 21 ff ff       	call   c000ec3a <KePanic(char const*)>
c001ca44:	83 c4 10             	add    esp,0x10
c001ca47:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ca4e:	74 56                	je     c001caa6 <IDE::open(int, int, void*)+0x27e>
c001ca50:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ca56:	83 e0 fc             	and    eax,0xfffffffc
c001ca59:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ca60:	83 c0 08             	add    eax,0x8
c001ca63:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ca6a:	eb 3a                	jmp    c001caa6 <IDE::open(int, int, void*)+0x27e>
c001ca6c:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca73:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ca79:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ca80:	05 06 02 00 00       	add    eax,0x206
c001ca85:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca8c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ca93:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ca9a:	05 06 02 00 00       	add    eax,0x206
c001ca9f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001caa6:	83 ec 0c             	sub    esp,0xc
c001caa9:	68 23 1b 02 c0       	push   0xc0021b23
c001caae:	e8 f0 fa fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cab3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cab9:	83 c4 10             	add    esp,0x10
c001cabc:	89 c2                	mov    edx,eax
c001cabe:	83 e2 0f             	and    edx,0xf
c001cac1:	83 fa 08             	cmp    edx,0x8
c001cac4:	75 0a                	jne    c001cad0 <IDE::open(int, int, void*)+0x2a8>
c001cac6:	83 e8 02             	sub    eax,0x2
c001cac9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cad0:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cad6:	89 c2                	mov    edx,eax
c001cad8:	83 e2 0f             	and    edx,0xf
c001cadb:	83 fa 08             	cmp    edx,0x8
c001cade:	75 0a                	jne    c001caea <IDE::open(int, int, void*)+0x2c2>
c001cae0:	83 e8 02             	sub    eax,0x2
c001cae3:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001caea:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001caf1:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001caf8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cafb:	89 d0                	mov    eax,edx
c001cafd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb01:	8d 7a 01             	lea    edi,[edx+0x1]
c001cb04:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cb08:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cb0c:	83 e1 3f             	and    ecx,0x3f
c001cb0f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cb13:	89 f9                	mov    ecx,edi
c001cb15:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cb1c:	8d 78 02             	lea    edi,[eax+0x2]
c001cb1f:	0f b6 c9             	movzx  ecx,cl
c001cb22:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb25:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cb29:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb2d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cb31:	83 e2 3f             	and    edx,0x3f
c001cb34:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cb38:	89 f9                	mov    ecx,edi
c001cb3a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cb40:	8d 78 03             	lea    edi,[eax+0x3]
c001cb43:	0f b6 d1             	movzx  edx,cl
c001cb46:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb49:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cb4d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb51:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cb55:	83 e1 3f             	and    ecx,0x3f
c001cb58:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cb5c:	89 fa                	mov    edx,edi
c001cb5e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cb64:	8d 78 04             	lea    edi,[eax+0x4]
c001cb67:	0f b6 ca             	movzx  ecx,dl
c001cb6a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb6d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cb71:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb75:	89 fa                	mov    edx,edi
c001cb77:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cb7d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cb81:	83 e2 3f             	and    edx,0x3f
c001cb84:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cb88:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cb8f:	66 85 f6             	test   si,si
c001cb92:	74 24                	je     c001cbb8 <IDE::open(int, int, void*)+0x390>
c001cb94:	89 f9                	mov    ecx,edi
c001cb96:	83 c0 05             	add    eax,0x5
c001cb99:	0f b6 d1             	movzx  edx,cl
c001cb9c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb9f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cba3:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cba7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cbad:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cbb1:	83 e0 3f             	and    eax,0x3f
c001cbb4:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cbb8:	83 ec 0c             	sub    esp,0xc
c001cbbb:	68 a2 36 02 c0       	push   0xc00236a2
c001cbc0:	e8 de f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cbc5:	58                   	pop    eax
c001cbc6:	5a                   	pop    edx
c001cbc7:	6a 00                	push   0x0
c001cbc9:	53                   	push   ebx
c001cbca:	e8 db f9 ff ff       	call   c001c5aa <IDE::prepareInterrupt(unsigned char)>
c001cbcf:	59                   	pop    ecx
c001cbd0:	5e                   	pop    esi
c001cbd1:	6a 01                	push   0x1
c001cbd3:	53                   	push   ebx
c001cbd4:	e8 d1 f9 ff ff       	call   c001c5aa <IDE::prepareInterrupt(unsigned char)>
c001cbd9:	c7 04 24 3b 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f3b
c001cbe0:	e8 be f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cbe5:	83 c4 0c             	add    esp,0xc
c001cbe8:	6a 00                	push   0x0
c001cbea:	6a 00                	push   0x0
c001cbec:	53                   	push   ebx
c001cbed:	e8 ec fb ff ff       	call   c001c7de <IDE::enableIRQs(unsigned char, bool)>
c001cbf2:	83 c4 0c             	add    esp,0xc
c001cbf5:	6a 00                	push   0x0
c001cbf7:	6a 01                	push   0x1
c001cbf9:	53                   	push   ebx
c001cbfa:	e8 df fb ff ff       	call   c001c7de <IDE::enableIRQs(unsigned char, bool)>
c001cbff:	c7 04 24 a4 36 02 c0 	mov    DWORD PTR [esp],0xc00236a4
c001cc06:	e8 98 f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cc15:	74 3c                	je     c001cc53 <IDE::open(int, int, void*)+0x42b>
c001cc17:	83 ec 0c             	sub    esp,0xc
c001cc1a:	53                   	push   ebx
c001cc1b:	6a 01                	push   0x1
c001cc1d:	68 a6 c7 01 c0       	push   0xc001c7a6
c001cc22:	6a 0e                	push   0xe
c001cc24:	53                   	push   ebx
c001cc25:	e8 c4 c3 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc2a:	83 c4 14             	add    esp,0x14
c001cc2d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc33:	53                   	push   ebx
c001cc34:	6a 01                	push   0x1
c001cc36:	68 c2 c7 01 c0       	push   0xc001c7c2
c001cc3b:	6a 0f                	push   0xf
c001cc3d:	53                   	push   ebx
c001cc3e:	e8 ab c3 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc43:	83 c4 14             	add    esp,0x14
c001cc46:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cc4c:	68 32 18 02 c0       	push   0xc0021832
c001cc51:	eb 40                	jmp    c001cc93 <IDE::open(int, int, void*)+0x46b>
c001cc53:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cc5d:	83 ec 0c             	sub    esp,0xc
c001cc60:	53                   	push   ebx
c001cc61:	6a 00                	push   0x0
c001cc63:	68 a6 c7 01 c0       	push   0xc001c7a6
c001cc68:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc6e:	53                   	push   ebx
c001cc6f:	e8 7a c3 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc74:	83 c4 14             	add    esp,0x14
c001cc77:	53                   	push   ebx
c001cc78:	6a 00                	push   0x0
c001cc7a:	68 c2 c7 01 c0       	push   0xc001c7c2
c001cc7f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cc85:	53                   	push   ebx
c001cc86:	e8 63 c3 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc8b:	83 c4 14             	add    esp,0x14
c001cc8e:	68 e8 23 02 c0       	push   0xc00223e8
c001cc93:	e8 0b f9 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cc98:	83 c4 10             	add    esp,0x10
c001cc9b:	83 ec 0c             	sub    esp,0xc
c001cc9e:	68 a6 36 02 c0       	push   0xc00236a6
c001cca3:	e8 fb f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cca8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccad:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ccb0:	c7 04 24 b6 27 02 c0 	mov    DWORD PTR [esp],0xc00227b6
c001ccb7:	e8 e7 f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ccbc:	83 c4 0c             	add    esp,0xc
c001ccbf:	6a 07                	push   0x7
c001ccc1:	6a 00                	push   0x0
c001ccc3:	53                   	push   ebx
c001ccc4:	e8 c7 f9 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001ccc9:	83 c4 0c             	add    esp,0xc
c001cccc:	6a 07                	push   0x7
c001ccce:	6a 01                	push   0x1
c001ccd0:	53                   	push   ebx
c001ccd1:	e8 ba f9 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001ccd6:	c7 04 24 f8 21 02 c0 	mov    DWORD PTR [esp],0xc00221f8
c001ccdd:	e8 c1 f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cce2:	83 c4 0c             	add    esp,0xc
c001cce5:	6a 01                	push   0x1
c001cce7:	6a 00                	push   0x0
c001cce9:	53                   	push   ebx
c001ccea:	e8 ef fa ff ff       	call   c001c7de <IDE::enableIRQs(unsigned char, bool)>
c001ccef:	83 c4 0c             	add    esp,0xc
c001ccf2:	6a 01                	push   0x1
c001ccf4:	6a 01                	push   0x1
c001ccf6:	53                   	push   ebx
c001ccf7:	e8 e2 fa ff ff       	call   c001c7de <IDE::enableIRQs(unsigned char, bool)>
c001ccfc:	c7 04 24 a9 36 02 c0 	mov    DWORD PTR [esp],0xc00236a9
c001cd03:	e8 9b f8 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cd08:	83 c4 2c             	add    esp,0x2c
c001cd0b:	31 c0                	xor    eax,eax
c001cd0d:	5b                   	pop    ebx
c001cd0e:	5e                   	pop    esi
c001cd0f:	5f                   	pop    edi
c001cd10:	5d                   	pop    ebp
c001cd11:	c3                   	ret    

c001cd12 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cd12:	55                   	push   ebp
c001cd13:	57                   	push   edi
c001cd14:	56                   	push   esi
c001cd15:	53                   	push   ebx
c001cd16:	83 ec 1c             	sub    esp,0x1c
c001cd19:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cd1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd25:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cd29:	8d 42 f8             	lea    eax,[edx-0x8]
c001cd2c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cd30:	3c 03                	cmp    al,0x3
c001cd32:	77 5a                	ja     c001cd8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001cd34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cd38:	0f b6 db             	movzx  ebx,bl
c001cd3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cd3f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cd42:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cd47:	0c 80                	or     al,0x80
c001cd49:	50                   	push   eax
c001cd4a:	6a 0c                	push   0xc
c001cd4c:	53                   	push   ebx
c001cd4d:	56                   	push   esi
c001cd4e:	e8 7d f8 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd57:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001cd5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd60:	0f b6 d2             	movzx  edx,dl
c001cd63:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cd67:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd69:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cd6e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cd72:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cd76:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cd7e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cd82:	83 c4 2c             	add    esp,0x2c
c001cd85:	5b                   	pop    ebx
c001cd86:	5e                   	pop    esi
c001cd87:	5f                   	pop    edi
c001cd88:	5d                   	pop    ebp
c001cd89:	e9 42 f8 ff ff       	jmp    c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd8e:	0f b6 c2             	movzx  eax,dl
c001cd91:	83 f8 07             	cmp    eax,0x7
c001cd94:	77 12                	ja     c001cda8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001cd96:	0f b6 db             	movzx  ebx,bl
c001cd99:	0f b6 c2             	movzx  eax,dl
c001cd9c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001cda4:	01 c2                	add    edx,eax
c001cda6:	eb 2f                	jmp    c001cdd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cda8:	83 f8 0d             	cmp    eax,0xd
c001cdab:	77 13                	ja     c001cdc0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001cdad:	0f b6 db             	movzx  ebx,bl
c001cdb0:	0f b6 d2             	movzx  edx,dl
c001cdb3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001cdba:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cdbe:	eb 17                	jmp    c001cdd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cdc0:	83 f8 15             	cmp    eax,0x15
c001cdc3:	77 14                	ja     c001cdd9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001cdc5:	0f b6 db             	movzx  ebx,bl
c001cdc8:	0f b6 d2             	movzx  edx,dl
c001cdcb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001cdd3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cdd7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cdd9:	83 c4 1c             	add    esp,0x1c
c001cddc:	5b                   	pop    ebx
c001cddd:	5e                   	pop    esi
c001cdde:	5f                   	pop    edi
c001cddf:	5d                   	pop    ebp
c001cde0:	c3                   	ret    
c001cde1:	90                   	nop

c001cde2 <IDE::detect()>:
c001cde2:	55                   	push   ebp
c001cde3:	57                   	push   edi
c001cde4:	56                   	push   esi
c001cde5:	53                   	push   ebx
c001cde6:	81 ec 28 02 00 00    	sub    esp,0x228
c001cdec:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001cdf3:	68 ab 36 02 c0       	push   0xc00236ab
c001cdf8:	e8 a6 f7 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cdfd:	83 c4 10             	add    esp,0x10
c001ce00:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ce07:	0f 85 03 04 00 00    	jne    c001d210 <IDE::detect()+0x42e>
c001ce0d:	83 ec 0c             	sub    esp,0xc
c001ce10:	31 f6                	xor    esi,esi
c001ce12:	68 ae 36 02 c0       	push   0xc00236ae
c001ce17:	31 ff                	xor    edi,edi
c001ce19:	e8 85 f7 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ce1e:	83 c4 10             	add    esp,0x10
c001ce21:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ce28:	83 ec 0c             	sub    esp,0xc
c001ce2b:	68 b1 36 02 c0       	push   0xc00236b1
c001ce30:	e8 6e f7 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce40:	83 ec 0c             	sub    esp,0xc
c001ce43:	31 ed                	xor    ebp,ebp
c001ce45:	68 b4 36 02 c0       	push   0xc00236b4
c001ce4a:	e8 54 f7 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ce4f:	89 f8                	mov    eax,edi
c001ce51:	c1 e0 06             	shl    eax,0x6
c001ce54:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ce5c:	c7 04 24 b7 36 02 c0 	mov    DWORD PTR [esp],0xc00236b7
c001ce63:	e8 3b f7 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001ce68:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001ce6c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ce70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce74:	c1 e0 04             	shl    eax,0x4
c001ce77:	83 c8 a0             	or     eax,0xffffffa0
c001ce7a:	0f b6 c0             	movzx  eax,al
c001ce7d:	50                   	push   eax
c001ce7e:	6a 06                	push   0x6
c001ce80:	56                   	push   esi
c001ce81:	53                   	push   ebx
c001ce82:	e8 49 f7 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce87:	83 c4 1c             	add    esp,0x1c
c001ce8a:	6a 0c                	push   0xc
c001ce8c:	56                   	push   esi
c001ce8d:	53                   	push   ebx
c001ce8e:	e8 fd f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001ce93:	83 c4 0c             	add    esp,0xc
c001ce96:	6a 0c                	push   0xc
c001ce98:	56                   	push   esi
c001ce99:	53                   	push   ebx
c001ce9a:	e8 f1 f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001ce9f:	83 c4 0c             	add    esp,0xc
c001cea2:	6a 0c                	push   0xc
c001cea4:	56                   	push   esi
c001cea5:	53                   	push   ebx
c001cea6:	e8 e5 f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001ceab:	83 c4 0c             	add    esp,0xc
c001ceae:	6a 0c                	push   0xc
c001ceb0:	56                   	push   esi
c001ceb1:	53                   	push   ebx
c001ceb2:	e8 d9 f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001ceb7:	c7 04 24 ba 36 02 c0 	mov    DWORD PTR [esp],0xc00236ba
c001cebe:	e8 e0 f6 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cec3:	68 ec 00 00 00       	push   0xec
c001cec8:	6a 07                	push   0x7
c001ceca:	56                   	push   esi
c001cecb:	53                   	push   ebx
c001cecc:	e8 ff f6 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ced1:	83 c4 1c             	add    esp,0x1c
c001ced4:	6a 0c                	push   0xc
c001ced6:	56                   	push   esi
c001ced7:	53                   	push   ebx
c001ced8:	e8 b3 f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001cedd:	83 c4 0c             	add    esp,0xc
c001cee0:	6a 0c                	push   0xc
c001cee2:	56                   	push   esi
c001cee3:	53                   	push   ebx
c001cee4:	e8 a7 f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001cee9:	83 c4 0c             	add    esp,0xc
c001ceec:	6a 0c                	push   0xc
c001ceee:	56                   	push   esi
c001ceef:	53                   	push   ebx
c001cef0:	e8 9b f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001cef5:	83 c4 0c             	add    esp,0xc
c001cef8:	6a 0c                	push   0xc
c001cefa:	56                   	push   esi
c001cefb:	53                   	push   ebx
c001cefc:	e8 8f f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001cf01:	c7 04 24 bd 36 02 c0 	mov    DWORD PTR [esp],0xc00236bd
c001cf08:	e8 96 f6 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cf0d:	83 c4 0c             	add    esp,0xc
c001cf10:	6a 0c                	push   0xc
c001cf12:	56                   	push   esi
c001cf13:	53                   	push   ebx
c001cf14:	e8 77 f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001cf19:	83 c4 10             	add    esp,0x10
c001cf1c:	84 c0                	test   al,al
c001cf1e:	75 1f                	jne    c001cf3f <IDE::detect()+0x15d>
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	68 c0 36 02 c0       	push   0xc00236c0
c001cf28:	e8 76 f6 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cf2d:	e9 ba 02 00 00       	jmp    c001d1ec <IDE::detect()+0x40a>
c001cf32:	a8 80                	test   al,0x80
c001cf34:	74 21                	je     c001cf57 <IDE::detect()+0x175>
c001cf36:	45                   	inc    ebp
c001cf37:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001cf3d:	7f 1e                	jg     c001cf5d <IDE::detect()+0x17b>
c001cf3f:	50                   	push   eax
c001cf40:	6a 0c                	push   0xc
c001cf42:	56                   	push   esi
c001cf43:	53                   	push   ebx
c001cf44:	e8 47 f7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	a8 01                	test   al,0x1
c001cf4e:	74 e2                	je     c001cf32 <IDE::detect()+0x150>
c001cf50:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001cf55:	eb 22                	jmp    c001cf79 <IDE::detect()+0x197>
c001cf57:	a8 08                	test   al,0x8
c001cf59:	74 db                	je     c001cf36 <IDE::detect()+0x154>
c001cf5b:	eb 17                	jmp    c001cf74 <IDE::detect()+0x192>
c001cf5d:	83 ec 0c             	sub    esp,0xc
c001cf60:	6a 32                	push   0x32
c001cf62:	e8 41 87 ff ff       	call   c00156a8 <milliTenthSleep(unsigned int)>
c001cf67:	83 c4 10             	add    esp,0x10
c001cf6a:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001cf70:	75 cd                	jne    c001cf3f <IDE::detect()+0x15d>
c001cf72:	eb dc                	jmp    c001cf50 <IDE::detect()+0x16e>
c001cf74:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cf79:	83 ec 0c             	sub    esp,0xc
c001cf7c:	68 c3 36 02 c0       	push   0xc00236c3
c001cf81:	e8 1d f6 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cf86:	83 c4 10             	add    esp,0x10
c001cf89:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001cf8e:	74 57                	je     c001cfe7 <IDE::detect()+0x205>
c001cf90:	50                   	push   eax
c001cf91:	6a 04                	push   0x4
c001cf93:	56                   	push   esi
c001cf94:	53                   	push   ebx
c001cf95:	e8 f6 f6 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001cf9a:	83 c4 0c             	add    esp,0xc
c001cf9d:	6a 05                	push   0x5
c001cf9f:	56                   	push   esi
c001cfa0:	53                   	push   ebx
c001cfa1:	89 c5                	mov    ebp,eax
c001cfa3:	e8 e8 f6 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001cfa8:	89 e9                	mov    ecx,ebp
c001cfaa:	83 c4 10             	add    esp,0x10
c001cfad:	0f b6 e9             	movzx  ebp,cl
c001cfb0:	83 fd 14             	cmp    ebp,0x14
c001cfb3:	75 04                	jne    c001cfb9 <IDE::detect()+0x1d7>
c001cfb5:	3c eb                	cmp    al,0xeb
c001cfb7:	74 11                	je     c001cfca <IDE::detect()+0x1e8>
c001cfb9:	83 fd 69             	cmp    ebp,0x69
c001cfbc:	0f 85 2d 02 00 00    	jne    c001d1ef <IDE::detect()+0x40d>
c001cfc2:	3c 96                	cmp    al,0x96
c001cfc4:	0f 85 25 02 00 00    	jne    c001d1ef <IDE::detect()+0x40d>
c001cfca:	68 a1 00 00 00       	push   0xa1
c001cfcf:	6a 07                	push   0x7
c001cfd1:	56                   	push   esi
c001cfd2:	53                   	push   ebx
c001cfd3:	e8 f8 f5 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfd8:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001cfdf:	e8 c4 86 ff ff       	call   c00156a8 <milliTenthSleep(unsigned int)>
c001cfe4:	83 c4 10             	add    esp,0x10
c001cfe7:	83 ec 0c             	sub    esp,0xc
c001cfea:	89 fd                	mov    ebp,edi
c001cfec:	68 c6 36 02 c0       	push   0xc00236c6
c001cff1:	e8 ad f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001cff6:	8d 54 24 20          	lea    edx,[esp+0x20]
c001cffa:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d001:	c1 e5 06             	shl    ebp,0x6
c001d004:	52                   	push   edx
c001d005:	01 dd                	add    ebp,ebx
c001d007:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d00b:	6a 00                	push   0x0
c001d00d:	56                   	push   esi
c001d00e:	53                   	push   ebx
c001d00f:	e8 fe fc ff ff       	call   c001cd12 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d014:	83 c4 14             	add    esp,0x14
c001d017:	68 ca 36 02 c0       	push   0xc00236ca
c001d01c:	e8 82 f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d021:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001d026:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d02d:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d034:	89 f0                	mov    eax,esi
c001d036:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d03c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d040:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d04a:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d051:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d059:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d060:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d068:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d06e:	c7 04 24 ce 36 02 c0 	mov    DWORD PTR [esp],0xc00236ce
c001d075:	e8 29 f5 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d07a:	83 c4 10             	add    esp,0x10
c001d07d:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d084:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d088:	74 09                	je     c001d093 <IDE::detect()+0x2b1>
c001d08a:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d091:	eb 07                	jmp    c001d09a <IDE::detect()+0x2b8>
c001d093:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d09a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d09e:	89 f8                	mov    eax,edi
c001d0a0:	83 ec 0c             	sub    esp,0xc
c001d0a3:	c1 e0 06             	shl    eax,0x6
c001d0a6:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d0a9:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d0af:	68 d2 36 02 c0       	push   0xc00236d2
c001d0b4:	e8 ea f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d0b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d0bd:	89 e8                	mov    eax,ebp
c001d0bf:	83 c4 10             	add    esp,0x10
c001d0c2:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d0c5:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d0c8:	83 c2 02             	add    edx,0x2
c001d0cb:	83 c0 02             	add    eax,0x2
c001d0ce:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d0d4:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d0d7:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d0dd:	39 d5                	cmp    ebp,edx
c001d0df:	75 e4                	jne    c001d0c5 <IDE::detect()+0x2e3>
c001d0e1:	89 fd                	mov    ebp,edi
c001d0e3:	83 ec 0c             	sub    esp,0xc
c001d0e6:	c1 e5 06             	shl    ebp,0x6
c001d0e9:	01 dd                	add    ebp,ebx
c001d0eb:	c6 85 a8 01 00 00 00 	mov    BYTE PTR [ebp+0x1a8],0x0
c001d0f2:	0f b7 85 74 01 00 00 	movzx  eax,WORD PTR [ebp+0x174]
c001d0f9:	c1 e8 09             	shr    eax,0x9
c001d0fc:	83 e0 01             	and    eax,0x1
c001d0ff:	88 85 a9 01 00 00    	mov    BYTE PTR [ebp+0x1a9],al
c001d105:	68 d6 36 02 c0       	push   0xc00236d6
c001d10a:	e8 94 f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d10f:	83 c4 10             	add    esp,0x10
c001d112:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001d117:	75 66                	jne    c001d17f <IDE::detect()+0x39d>
c001d119:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d120:	0f 84 b8 00 00 00    	je     c001d1de <IDE::detect()+0x3fc>
c001d126:	83 ec 0c             	sub    esp,0xc
c001d129:	68 da 36 02 c0       	push   0xc00236da
c001d12e:	e8 70 f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d133:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d13a:	e8 a7 17 ff ff       	call   c000e8e6 <malloc>
c001d13f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d142:	89 c5                	mov    ebp,eax
c001d144:	e8 47 05 00 00       	call   c001d690 <ATA::ATA()>
c001d149:	c7 04 24 de 36 02 c0 	mov    DWORD PTR [esp],0xc00236de
c001d150:	e8 4e f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d155:	59                   	pop    ecx
c001d156:	58                   	pop    eax
c001d157:	55                   	push   ebp
c001d158:	53                   	push   ebx
c001d159:	e8 e4 be fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d15e:	c7 04 24 e3 36 02 c0 	mov    DWORD PTR [esp],0xc00236e3
c001d165:	e8 39 f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d16a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d16d:	53                   	push   ebx
c001d16e:	57                   	push   edi
c001d16f:	6a 00                	push   0x0
c001d171:	55                   	push   ebp
c001d172:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d175:	83 c4 14             	add    esp,0x14
c001d178:	68 e8 36 02 c0       	push   0xc00236e8
c001d17d:	eb 57                	jmp    c001d1d6 <IDE::detect()+0x3f4>
c001d17f:	83 ec 0c             	sub    esp,0xc
c001d182:	68 ed 36 02 c0       	push   0xc00236ed
c001d187:	e8 17 f4 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d18c:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d193:	e8 4e 17 ff ff       	call   c000e8e6 <malloc>
c001d198:	89 04 24             	mov    DWORD PTR [esp],eax
c001d19b:	89 c5                	mov    ebp,eax
c001d19d:	e8 98 0b 00 00       	call   c001dd3a <ATAPI::ATAPI()>
c001d1a2:	c7 04 24 f3 36 02 c0 	mov    DWORD PTR [esp],0xc00236f3
c001d1a9:	e8 f5 f3 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d1ae:	58                   	pop    eax
c001d1af:	5a                   	pop    edx
c001d1b0:	55                   	push   ebp
c001d1b1:	53                   	push   ebx
c001d1b2:	e8 8b be fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d1b7:	c7 04 24 fa 36 02 c0 	mov    DWORD PTR [esp],0xc00236fa
c001d1be:	e8 e0 f3 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d1c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1c6:	53                   	push   ebx
c001d1c7:	57                   	push   edi
c001d1c8:	6a 00                	push   0x0
c001d1ca:	55                   	push   ebp
c001d1cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d1ce:	83 c4 14             	add    esp,0x14
c001d1d1:	68 01 37 02 c0       	push   0xc0023701
c001d1d6:	e8 c8 f3 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	83 ec 0c             	sub    esp,0xc
c001d1e1:	47                   	inc    edi
c001d1e2:	68 08 37 02 c0       	push   0xc0023708
c001d1e7:	e8 b7 f3 fe ff       	call   c000c5a3 <KeSetBootMessage(char const*)>
c001d1ec:	83 c4 10             	add    esp,0x10
c001d1ef:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001d1f4:	74 0d                	je     c001d203 <IDE::detect()+0x421>
c001d1f6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d1fe:	e9 3d fc ff ff       	jmp    c001ce40 <IDE::detect()+0x5e>
c001d203:	4e                   	dec    esi
c001d204:	74 0a                	je     c001d210 <IDE::detect()+0x42e>
c001d206:	be 01 00 00 00       	mov    esi,0x1
c001d20b:	e9 18 fc ff ff       	jmp    c001ce28 <IDE::detect()+0x46>
c001d210:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d216:	5b                   	pop    ebx
c001d217:	5e                   	pop    esi
c001d218:	5f                   	pop    edi
c001d219:	5d                   	pop    ebp
c001d21a:	c3                   	ret    
c001d21b:	90                   	nop

c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d21c:	55                   	push   ebp
c001d21d:	57                   	push   edi
c001d21e:	56                   	push   esi
c001d21f:	53                   	push   ebx
c001d220:	83 ec 1c             	sub    esp,0x1c
c001d223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d227:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d22b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d22f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d233:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d237:	88 c3                	mov    bl,al
c001d239:	25 ff 00 00 00       	and    eax,0xff
c001d23e:	0f 84 88 00 00 00    	je     c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d244:	83 ec 0c             	sub    esp,0xc
c001d247:	89 c7                	mov    edi,eax
c001d249:	68 0c 37 02 c0       	push   0xc002370c
c001d24e:	e8 fb 9c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d253:	83 c4 10             	add    esp,0x10
c001d256:	83 ff 01             	cmp    edi,0x1
c001d259:	74 6b                	je     c001d2c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d25b:	83 ff 02             	cmp    edi,0x2
c001d25e:	75 58                	jne    c001d2b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d260:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d265:	50                   	push   eax
c001d266:	6a 01                	push   0x1
c001d268:	01 ff                	add    edi,edi
c001d26a:	09 fe                	or     esi,edi
c001d26c:	89 f0                	mov    eax,esi
c001d26e:	0f b6 f0             	movzx  esi,al
c001d271:	c1 e6 06             	shl    esi,0x6
c001d274:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d27c:	50                   	push   eax
c001d27d:	55                   	push   ebp
c001d27e:	e8 0d f4 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001d283:	83 c4 10             	add    esp,0x10
c001d286:	a8 01                	test   al,0x1
c001d288:	74 02                	je     c001d28c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d28a:	b3 07                	mov    bl,0x7
c001d28c:	a8 02                	test   al,0x2
c001d28e:	74 02                	je     c001d292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d290:	b3 03                	mov    bl,0x3
c001d292:	a8 04                	test   al,0x4
c001d294:	74 02                	je     c001d298 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d296:	b3 14                	mov    bl,0x14
c001d298:	a8 08                	test   al,0x8
c001d29a:	74 02                	je     c001d29e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d29c:	b3 03                	mov    bl,0x3
c001d29e:	a8 10                	test   al,0x10
c001d2a0:	74 02                	je     c001d2a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d2a2:	b3 15                	mov    bl,0x15
c001d2a4:	a8 20                	test   al,0x20
c001d2a6:	74 02                	je     c001d2aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d2a8:	b3 03                	mov    bl,0x3
c001d2aa:	a8 40                	test   al,0x40
c001d2ac:	74 02                	je     c001d2b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d2ae:	b3 16                	mov    bl,0x16
c001d2b0:	a8 80                	test   al,0x80
c001d2b2:	74 18                	je     c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2b4:	b3 0d                	mov    bl,0xd
c001d2b6:	eb 14                	jmp    c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2b8:	83 ff 03             	cmp    edi,0x3
c001d2bb:	74 0d                	je     c001d2ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d2bd:	83 ff 04             	cmp    edi,0x4
c001d2c0:	75 0a                	jne    c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2c2:	b3 08                	mov    bl,0x8
c001d2c4:	eb 06                	jmp    c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2c6:	b3 13                	mov    bl,0x13
c001d2c8:	eb 02                	jmp    c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2ca:	b3 17                	mov    bl,0x17
c001d2cc:	83 c4 1c             	add    esp,0x1c
c001d2cf:	88 d8                	mov    al,bl
c001d2d1:	5b                   	pop    ebx
c001d2d2:	5e                   	pop    esi
c001d2d3:	5f                   	pop    edi
c001d2d4:	5d                   	pop    ebp
c001d2d5:	c3                   	ret    

c001d2d6 <IDE::polling(unsigned char, unsigned int)>:
c001d2d6:	57                   	push   edi
c001d2d7:	56                   	push   esi
c001d2d8:	53                   	push   ebx
c001d2d9:	bb 04 00 00 00       	mov    ebx,0x4
c001d2de:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d2e2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d2e7:	52                   	push   edx
c001d2e8:	6a 0c                	push   0xc
c001d2ea:	56                   	push   esi
c001d2eb:	57                   	push   edi
c001d2ec:	e8 9f f3 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001d2f1:	83 c4 10             	add    esp,0x10
c001d2f4:	4b                   	dec    ebx
c001d2f5:	75 f0                	jne    c001d2e7 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d2f7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d2fc:	50                   	push   eax
c001d2fd:	6a 0c                	push   0xc
c001d2ff:	56                   	push   esi
c001d300:	57                   	push   edi
c001d301:	e8 8a f3 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001d306:	83 c4 10             	add    esp,0x10
c001d309:	a8 01                	test   al,0x1
c001d30b:	75 17                	jne    c001d324 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d30d:	a8 20                	test   al,0x20
c001d30f:	75 0f                	jne    c001d320 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d311:	4b                   	dec    ebx
c001d312:	74 10                	je     c001d324 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d314:	a8 80                	test   al,0x80
c001d316:	75 e4                	jne    c001d2fc <IDE::polling(unsigned char, unsigned int)+0x26>
c001d318:	a8 08                	test   al,0x8
c001d31a:	74 e0                	je     c001d2fc <IDE::polling(unsigned char, unsigned int)+0x26>
c001d31c:	31 c0                	xor    eax,eax
c001d31e:	eb 06                	jmp    c001d326 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d320:	b0 01                	mov    al,0x1
c001d322:	eb 02                	jmp    c001d326 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d324:	b0 02                	mov    al,0x2
c001d326:	5b                   	pop    ebx
c001d327:	5e                   	pop    esi
c001d328:	5f                   	pop    edi
c001d329:	c3                   	ret    

c001d32a <SATABus::close(int, int, void*)>:
c001d32a:	31 c0                	xor    eax,eax
c001d32c:	c3                   	ret    
c001d32d:	90                   	nop

c001d32e <SATABus::detect()>:
c001d32e:	c3                   	ret    
c001d32f:	90                   	nop

c001d330 <SATABus::SATABus()>:
c001d330:	83 ec 0c             	sub    esp,0xc
c001d333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d337:	83 ec 08             	sub    esp,0x8
c001d33a:	68 44 37 02 c0       	push   0xc0023744
c001d33f:	50                   	push   eax
c001d340:	e8 57 c0 fe ff       	call   c000939c <HardDiskController::HardDiskController(char const*)>
c001d345:	83 c4 10             	add    esp,0x10
c001d348:	ba 70 37 02 c0       	mov    edx,0xc0023770
c001d34d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d351:	89 10                	mov    DWORD PTR [eax],edx
c001d353:	83 ec 0c             	sub    esp,0xc
c001d356:	6a 50                	push   0x50
c001d358:	e8 a6 1b ff ff       	call   c000ef03 <Phys::allocateContiguousPages(int)>
c001d35d:	83 c4 10             	add    esp,0x10
c001d360:	89 c2                	mov    edx,eax
c001d362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d366:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	6a 50                	push   0x50
c001d371:	e8 6b 4c ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c001d376:	83 c4 10             	add    esp,0x10
c001d379:	89 c2                	mov    edx,eax
c001d37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d37f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d385:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d38a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d38e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d394:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d398:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d39e:	83 ec 0c             	sub    esp,0xc
c001d3a1:	6a 03                	push   0x3
c001d3a3:	6a 50                	push   0x50
c001d3a5:	51                   	push   ecx
c001d3a6:	52                   	push   edx
c001d3a7:	50                   	push   eax
c001d3a8:	e8 27 55 ff ff       	call   c00128d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d3ad:	83 c4 20             	add    esp,0x20
c001d3b0:	90                   	nop
c001d3b1:	83 c4 0c             	add    esp,0xc
c001d3b4:	c3                   	ret    
c001d3b5:	90                   	nop

c001d3b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3ba:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d3bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d3c0:	09 c2                	or     edx,eax
c001d3c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d3cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d3ce:	31 c0                	xor    eax,eax
c001d3d0:	c1 e9 08             	shr    ecx,0x8
c001d3d3:	83 e1 0f             	and    ecx,0xf
c001d3d6:	39 c8                	cmp    eax,ecx
c001d3d8:	74 0a                	je     c001d3e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d3da:	f6 c2 01             	test   dl,0x1
c001d3dd:	74 08                	je     c001d3e7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d3df:	d1 ea                	shr    edx,1
c001d3e1:	40                   	inc    eax
c001d3e2:	eb f2                	jmp    c001d3d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d3e4:	83 c8 ff             	or     eax,0xffffffff
c001d3e7:	c3                   	ret    

c001d3e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d3e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d3ec:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d3ef:	89 c2                	mov    edx,eax
c001d3f1:	c1 ea 08             	shr    edx,0x8
c001d3f4:	83 e2 0f             	and    edx,0xf
c001d3f7:	4a                   	dec    edx
c001d3f8:	75 32                	jne    c001d42c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d3fa:	83 e0 0f             	and    eax,0xf
c001d3fd:	83 f8 03             	cmp    eax,0x3
c001d400:	75 2a                	jne    c001d42c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d402:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d405:	b8 02 00 00 00       	mov    eax,0x2
c001d40a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d410:	74 1c                	je     c001d42e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d412:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d418:	b8 04 00 00 00       	mov    eax,0x4
c001d41d:	74 0f                	je     c001d42e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d41f:	31 c0                	xor    eax,eax
c001d421:	83 fa 03             	cmp    edx,0x3
c001d424:	0f 94 c0             	sete   al
c001d427:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d42b:	c3                   	ret    
c001d42c:	31 c0                	xor    eax,eax
c001d42e:	c3                   	ret    
c001d42f:	90                   	nop

c001d430 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d430:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d434:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d437:	0f ba e2 0f          	bt     edx,0xf
c001d43b:	72 f7                	jb     c001d434 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d43d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d440:	83 ca 10             	or     edx,0x10
c001d443:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d446:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d449:	83 ca 01             	or     edx,0x1
c001d44c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d44f:	c3                   	ret    

c001d450 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d454:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d457:	83 e2 fe             	and    edx,0xfffffffe
c001d45a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d45d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d460:	83 e2 ef             	and    edx,0xffffffef
c001d463:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d466:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d469:	0f ba e2 0e          	bt     edx,0xe
c001d46d:	72 f7                	jb     c001d466 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d46f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d472:	0f ba e2 0f          	bt     edx,0xf
c001d476:	72 ee                	jb     c001d466 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d478:	c3                   	ret    
c001d479:	90                   	nop

c001d47a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d47a:	55                   	push   ebp
c001d47b:	57                   	push   edi
c001d47c:	56                   	push   esi
c001d47d:	53                   	push   ebx
c001d47e:	83 ec 1c             	sub    esp,0x1c
c001d481:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d485:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d489:	53                   	push   ebx
c001d48a:	57                   	push   edi
c001d48b:	e8 c0 ff ff ff       	call   c001d450 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d490:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d494:	83 ec 0c             	sub    esp,0xc
c001d497:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d49d:	c1 e5 0a             	shl    ebp,0xa
c001d4a0:	01 e8                	add    eax,ebp
c001d4a2:	89 03                	mov    DWORD PTR [ebx],eax
c001d4a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4a6:	68 00 04 00 00       	push   0x400
c001d4ab:	6a 00                	push   0x0
c001d4ad:	50                   	push   eax
c001d4ae:	e8 3d 30 fe ff       	call   c00004f0 <memset>
c001d4b3:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d4b9:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001d4bd:	83 c4 1c             	add    esp,0x1c
c001d4c0:	01 e8                	add    eax,ebp
c001d4c2:	89 03                	mov    DWORD PTR [ebx],eax
c001d4c4:	c1 e6 08             	shl    esi,0x8
c001d4c7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d4ce:	81 c6 00 80 00 00    	add    esi,0x8000
c001d4d4:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d4da:	01 f0                	add    eax,esi
c001d4dc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d4df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4e2:	68 00 01 00 00       	push   0x100
c001d4e7:	6a 00                	push   0x0
c001d4e9:	50                   	push   eax
c001d4ea:	e8 01 30 fe ff       	call   c00004f0 <memset>
c001d4ef:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d4f5:	31 d2                	xor    edx,edx
c001d4f7:	01 f0                	add    eax,esi
c001d4f9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d4fc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d503:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001d509:	01 ee                	add    esi,ebp
c001d50b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	c1 e5 0d             	shl    ebp,0xd
c001d515:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001d51b:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001d521:	83 c6 20             	add    esi,0x20
c001d524:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d528:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d52e:	01 e8                	add    eax,ebp
c001d530:	01 d0                	add    eax,edx
c001d532:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d535:	52                   	push   edx
c001d536:	68 00 01 00 00       	push   0x100
c001d53b:	6a 00                	push   0x0
c001d53d:	50                   	push   eax
c001d53e:	e8 ad 2f fe ff       	call   c00004f0 <memset>
c001d543:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d549:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001d550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d554:	83 c4 10             	add    esp,0x10
c001d557:	01 e8                	add    eax,ebp
c001d559:	01 d0                	add    eax,edx
c001d55b:	81 c2 00 01 00 00    	add    edx,0x100
c001d561:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d564:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001d56a:	75 af                	jne    c001d51b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001d56c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d573:	50                   	push   eax
c001d574:	50                   	push   eax
c001d575:	53                   	push   ebx
c001d576:	57                   	push   edi
c001d577:	e8 b4 fe ff ff       	call   c001d430 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d57c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d583:	83 c4 2c             	add    esp,0x2c
c001d586:	5b                   	pop    ebx
c001d587:	5e                   	pop    esi
c001d588:	5f                   	pop    edi
c001d589:	5d                   	pop    ebp
c001d58a:	c3                   	ret    
c001d58b:	90                   	nop

c001d58c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d58c:	55                   	push   ebp
c001d58d:	57                   	push   edi
c001d58e:	56                   	push   esi
c001d58f:	53                   	push   ebx
c001d590:	31 db                	xor    ebx,ebx
c001d592:	83 ec 0c             	sub    esp,0xc
c001d595:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d599:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d59d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d5a0:	f7 c7 01 00 00 00    	test   edi,0x1
c001d5a6:	74 7a                	je     c001d622 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d5a8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5ac:	89 d8                	mov    eax,ebx
c001d5ae:	c1 e0 07             	shl    eax,0x7
c001d5b1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d5b8:	55                   	push   ebp
c001d5b9:	56                   	push   esi
c001d5ba:	e8 29 fe ff ff       	call   c001d3e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d5bf:	5a                   	pop    edx
c001d5c0:	59                   	pop    ecx
c001d5c1:	83 f8 01             	cmp    eax,0x1
c001d5c4:	75 21                	jne    c001d5e7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d5c6:	50                   	push   eax
c001d5c7:	53                   	push   ebx
c001d5c8:	55                   	push   ebp
c001d5c9:	56                   	push   esi
c001d5ca:	e8 ab fe ff ff       	call   c001d47a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d5cf:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d5d6:	e8 0b 13 ff ff       	call   c000e8e6 <malloc>
c001d5db:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5de:	89 c5                	mov    ebp,eax
c001d5e0:	e8 1b 0e 00 00       	call   c001e400 <SATA::SATA()>
c001d5e5:	eb 24                	jmp    c001d60b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d5e7:	83 f8 04             	cmp    eax,0x4
c001d5ea:	75 36                	jne    c001d622 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d5ec:	51                   	push   ecx
c001d5ed:	53                   	push   ebx
c001d5ee:	55                   	push   ebp
c001d5ef:	56                   	push   esi
c001d5f0:	e8 85 fe ff ff       	call   c001d47a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d5f5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d5fc:	e8 e5 12 ff ff       	call   c000e8e6 <malloc>
c001d601:	89 04 24             	mov    DWORD PTR [esp],eax
c001d604:	89 c5                	mov    ebp,eax
c001d606:	e8 8b 11 00 00       	call   c001e796 <SATAPI::SATAPI()>
c001d60b:	58                   	pop    eax
c001d60c:	5a                   	pop    edx
c001d60d:	55                   	push   ebp
c001d60e:	56                   	push   esi
c001d60f:	e8 2e ba fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d614:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d617:	56                   	push   esi
c001d618:	6a 00                	push   0x0
c001d61a:	53                   	push   ebx
c001d61b:	55                   	push   ebp
c001d61c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d61f:	83 c4 20             	add    esp,0x20
c001d622:	d1 ef                	shr    edi,1
c001d624:	43                   	inc    ebx
c001d625:	83 fb 20             	cmp    ebx,0x20
c001d628:	0f 85 72 ff ff ff    	jne    c001d5a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d62e:	83 c4 0c             	add    esp,0xc
c001d631:	5b                   	pop    ebx
c001d632:	5e                   	pop    esi
c001d633:	5f                   	pop    edi
c001d634:	5d                   	pop    ebp
c001d635:	c3                   	ret    

c001d636 <SATABus::open(int, int, void*)>:
c001d636:	53                   	push   ebx
c001d637:	83 ec 08             	sub    esp,0x8
c001d63a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d63e:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d644:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d64a:	e8 ed 7b ff ff       	call   c001523c <KeDisablePreemption()>
c001d64f:	52                   	push   edx
c001d650:	52                   	push   edx
c001d651:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d657:	53                   	push   ebx
c001d658:	e8 2f ff ff ff       	call   c001d58c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d65d:	e8 02 7c ff ff       	call   c0015264 <KeRestorePreemption()>
c001d662:	83 c4 18             	add    esp,0x18
c001d665:	31 c0                	xor    eax,eax
c001d667:	5b                   	pop    ebx
c001d668:	c3                   	ret    
c001d669:	90                   	nop

c001d66a <ATA::close(int, int, void*)>:
c001d66a:	83 ec 0c             	sub    esp,0xc
c001d66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d671:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d677:	85 c0                	test   eax,eax
c001d679:	74 0c                	je     c001d687 <ATA::close(int, int, void*)+0x1d>
c001d67b:	8b 10                	mov    edx,DWORD PTR [eax]
c001d67d:	83 ec 0c             	sub    esp,0xc
c001d680:	50                   	push   eax
c001d681:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d684:	83 c4 10             	add    esp,0x10
c001d687:	31 c0                	xor    eax,eax
c001d689:	83 c4 0c             	add    esp,0xc
c001d68c:	c3                   	ret    
c001d68d:	90                   	nop

c001d68e <ATA::powerSaving(PowerSavingLevel)>:
c001d68e:	c3                   	ret    
c001d68f:	90                   	nop

c001d690 <ATA::ATA()>:
c001d690:	83 ec 0c             	sub    esp,0xc
c001d693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d697:	83 ec 04             	sub    esp,0x4
c001d69a:	68 00 02 00 00       	push   0x200
c001d69f:	68 49 38 02 c0       	push   0xc0023849
c001d6a4:	50                   	push   eax
c001d6a5:	e8 7c bd fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d6aa:	83 c4 10             	add    esp,0x10
c001d6ad:	ba b0 37 02 c0       	mov    edx,0xc00237b0
c001d6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6b6:	89 10                	mov    DWORD PTR [eax],edx
c001d6b8:	90                   	nop
c001d6b9:	83 c4 0c             	add    esp,0xc
c001d6bc:	c3                   	ret    
c001d6bd:	90                   	nop

c001d6be <ATA::flush(bool)>:
c001d6be:	53                   	push   ebx
c001d6bf:	83 ec 08             	sub    esp,0x8
c001d6c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d6c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6cb:	83 f8 01             	cmp    eax,0x1
c001d6ce:	19 c0                	sbb    eax,eax
c001d6d0:	83 e0 fd             	and    eax,0xfffffffd
c001d6d3:	05 ea 00 00 00       	add    eax,0xea
c001d6d8:	50                   	push   eax
c001d6d9:	6a 07                	push   0x7
c001d6db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6e2:	50                   	push   eax
c001d6e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6e9:	e8 e2 ee ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ee:	83 c4 0c             	add    esp,0xc
c001d6f1:	6a 00                	push   0x0
c001d6f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6fa:	50                   	push   eax
c001d6fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d701:	e8 d0 fb ff ff       	call   c001d2d6 <IDE::polling(unsigned char, unsigned int)>
c001d706:	83 c4 18             	add    esp,0x18
c001d709:	5b                   	pop    ebx
c001d70a:	c3                   	ret    
c001d70b:	90                   	nop

c001d70c <ATA::readyForCommand()>:
c001d70c:	56                   	push   esi
c001d70d:	53                   	push   ebx
c001d70e:	53                   	push   ebx
c001d70f:	31 db                	xor    ebx,ebx
c001d711:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d715:	51                   	push   ecx
c001d716:	6a 0c                	push   0xc
c001d718:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d71f:	50                   	push   eax
c001d720:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d726:	e8 65 ef ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001d72b:	83 c4 10             	add    esp,0x10
c001d72e:	a8 88                	test   al,0x88
c001d730:	74 1f                	je     c001d751 <ATA::readyForCommand()+0x45>
c001d732:	43                   	inc    ebx
c001d733:	83 fb 63             	cmp    ebx,0x63
c001d736:	7e dd                	jle    c001d715 <ATA::readyForCommand()+0x9>
c001d738:	83 ec 0c             	sub    esp,0xc
c001d73b:	6a 0a                	push   0xa
c001d73d:	e8 66 7f ff ff       	call   c00156a8 <milliTenthSleep(unsigned int)>
c001d742:	83 c4 10             	add    esp,0x10
c001d745:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d74b:	75 c8                	jne    c001d715 <ATA::readyForCommand()+0x9>
c001d74d:	31 c0                	xor    eax,eax
c001d74f:	eb 02                	jmp    c001d753 <ATA::readyForCommand()+0x47>
c001d751:	b0 01                	mov    al,0x1
c001d753:	5a                   	pop    edx
c001d754:	5b                   	pop    ebx
c001d755:	5e                   	pop    esi
c001d756:	c3                   	ret    
c001d757:	90                   	nop

c001d758 <ATA::access(unsigned long long, int, void*, bool)>:
c001d758:	55                   	push   ebp
c001d759:	57                   	push   edi
c001d75a:	56                   	push   esi
c001d75b:	53                   	push   ebx
c001d75c:	83 ec 2c             	sub    esp,0x2c
c001d75f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d763:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d767:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d76b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d76f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d773:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d777:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d77b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d785:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d78b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d78f:	c1 e0 06             	shl    eax,0x6
c001d792:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d79a:	74 5b                	je     c001d7f7 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d79c:	89 fa                	mov    edx,edi
c001d79e:	89 f0                	mov    eax,esi
c001d7a0:	c1 ea 1c             	shr    edx,0x1c
c001d7a3:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001d7a7:	89 d1                	mov    ecx,edx
c001d7a9:	09 c1                	or     ecx,eax
c001d7ab:	74 25                	je     c001d7d2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d7ad:	31 ed                	xor    ebp,ebp
c001d7af:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d7b6:	89 fa                	mov    edx,edi
c001d7b8:	89 f0                	mov    eax,esi
c001d7ba:	0f ad d0             	shrd   eax,edx,cl
c001d7bd:	d3 ea                	shr    edx,cl
c001d7bf:	f6 c1 20             	test   cl,0x20
c001d7c2:	74 02                	je     c001d7c6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d7c4:	89 d0                	mov    eax,edx
c001d7c6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d7ca:	45                   	inc    ebp
c001d7cb:	83 fd 06             	cmp    ebp,0x6
c001d7ce:	75 df                	jne    c001d7af <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d7d0:	eb 71                	jmp    c001d843 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d7d2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d7d7:	89 f0                	mov    eax,esi
c001d7d9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d7e0:	0f ac f8 10          	shrd   eax,edi,0x10
c001d7e4:	bf 01 00 00 00       	mov    edi,0x1
c001d7e9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d7ed:	c1 ee 18             	shr    esi,0x18
c001d7f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d7f5:	eb 53                	jmp    c001d84a <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d7f7:	6a 00                	push   0x0
c001d7f9:	6a 3f                	push   0x3f
c001d7fb:	57                   	push   edi
c001d7fc:	56                   	push   esi
c001d7fd:	e8 12 24 00 00       	call   c001fc14 <__umoddi3>
c001d802:	83 c4 10             	add    esp,0x10
c001d805:	40                   	inc    eax
c001d806:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d80a:	6a 00                	push   0x0
c001d80c:	68 f0 03 00 00       	push   0x3f0
c001d811:	57                   	push   edi
c001d812:	56                   	push   esi
c001d813:	e8 fc 22 00 00       	call   c001fb14 <__udivdi3>
c001d818:	83 c4 10             	add    esp,0x10
c001d81b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d820:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d827:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d82c:	6a 00                	push   0x0
c001d82e:	6a 3f                	push   0x3f
c001d830:	57                   	push   edi
c001d831:	31 ff                	xor    edi,edi
c001d833:	56                   	push   esi
c001d834:	e8 db 22 00 00       	call   c001fb14 <__udivdi3>
c001d839:	83 c4 10             	add    esp,0x10
c001d83c:	83 e0 0f             	and    eax,0xf
c001d83f:	89 c6                	mov    esi,eax
c001d841:	eb 07                	jmp    c001d84a <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d843:	31 f6                	xor    esi,esi
c001d845:	bf 02 00 00 00       	mov    edi,0x2
c001d84a:	55                   	push   ebp
c001d84b:	6a 00                	push   0x0
c001d84d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d854:	50                   	push   eax
c001d855:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d859:	e8 80 ef ff ff       	call   c001c7de <IDE::enableIRQs(unsigned char, bool)>
c001d85e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d861:	e8 a6 fe ff ff       	call   c001d70c <ATA::readyForCommand()>
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	84 c0                	test   al,al
c001d86b:	75 0a                	jne    c001d877 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d86d:	be 01 00 00 00       	mov    esi,0x1
c001d872:	e9 e3 02 00 00       	jmp    c001db5a <ATA::access(unsigned long long, int, void*, bool)+0x402>
c001d877:	fa                   	cli    
c001d878:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d87e:	f7 c7 03 00 00 00    	test   edi,0x3
c001d884:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d88a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d890:	75 0a                	jne    c001d89c <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001d892:	c1 e0 04             	shl    eax,0x4
c001d895:	09 c6                	or     esi,eax
c001d897:	83 ce a0             	or     esi,0xffffffa0
c001d89a:	eb 08                	jmp    c001d8a4 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001d89c:	c1 e0 04             	shl    eax,0x4
c001d89f:	09 c6                	or     esi,eax
c001d8a1:	83 ce e0             	or     esi,0xffffffe0
c001d8a4:	89 f0                	mov    eax,esi
c001d8a6:	0f b6 d2             	movzx  edx,dl
c001d8a9:	0f b6 f0             	movzx  esi,al
c001d8ac:	56                   	push   esi
c001d8ad:	6a 06                	push   0x6
c001d8af:	52                   	push   edx
c001d8b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8b6:	e8 15 ed ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8bb:	83 c4 10             	add    esp,0x10
c001d8be:	6a 00                	push   0x0
c001d8c0:	6a 01                	push   0x1
c001d8c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8c9:	50                   	push   eax
c001d8ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8d0:	e8 fb ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8d5:	89 f8                	mov    eax,edi
c001d8d7:	83 c4 10             	add    esp,0x10
c001d8da:	0f b6 f0             	movzx  esi,al
c001d8dd:	83 fe 02             	cmp    esi,0x2
c001d8e0:	75 6e                	jne    c001d950 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001d8e2:	6a 00                	push   0x0
c001d8e4:	6a 08                	push   0x8
c001d8e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8ed:	50                   	push   eax
c001d8ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8f4:	e8 d7 ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8f9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d8fe:	50                   	push   eax
c001d8ff:	6a 09                	push   0x9
c001d901:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d908:	50                   	push   eax
c001d909:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d90f:	e8 bc ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d914:	83 c4 20             	add    esp,0x20
c001d917:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d91c:	50                   	push   eax
c001d91d:	6a 0a                	push   0xa
c001d91f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d926:	50                   	push   eax
c001d927:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d92d:	e8 9e ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d932:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d937:	50                   	push   eax
c001d938:	6a 0b                	push   0xb
c001d93a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d941:	50                   	push   eax
c001d942:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d948:	e8 83 ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d94d:	83 c4 20             	add    esp,0x20
c001d950:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d955:	50                   	push   eax
c001d956:	6a 02                	push   0x2
c001d958:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d95f:	50                   	push   eax
c001d960:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d966:	e8 65 ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d96b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d970:	50                   	push   eax
c001d971:	6a 03                	push   0x3
c001d973:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d97a:	50                   	push   eax
c001d97b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d981:	e8 4a ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d986:	83 c4 20             	add    esp,0x20
c001d989:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d98e:	50                   	push   eax
c001d98f:	6a 04                	push   0x4
c001d991:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d998:	50                   	push   eax
c001d999:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d99f:	e8 2c ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9a4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d9a9:	50                   	push   eax
c001d9aa:	6a 05                	push   0x5
c001d9ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9b3:	50                   	push   eax
c001d9b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9ba:	e8 11 ec ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9bf:	83 c4 20             	add    esp,0x20
c001d9c2:	83 fe 02             	cmp    esi,0x2
c001d9c5:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001d9ca:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001d9cf:	85 c9                	test   ecx,ecx
c001d9d1:	74 07                	je     c001d9da <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001d9d3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d9d8:	75 47                	jne    c001da21 <ATA::access(unsigned long long, int, void*, bool)+0x2c9>
c001d9da:	89 f8                	mov    eax,edi
c001d9dc:	0f b6 f8             	movzx  edi,al
c001d9df:	31 c0                	xor    eax,eax
c001d9e1:	83 ff 02             	cmp    edi,0x2
c001d9e4:	0f 95 c0             	setne  al
c001d9e7:	89 c6                	mov    esi,eax
c001d9e9:	74 0c                	je     c001d9f7 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001d9eb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d9f0:	b8 30 00 00 00       	mov    eax,0x30
c001d9f5:	75 2f                	jne    c001da26 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d9f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d9fb:	83 f2 01             	xor    edx,0x1
c001d9fe:	85 c9                	test   ecx,ecx
c001da00:	74 09                	je     c001da0b <ATA::access(unsigned long long, int, void*, bool)+0x2b3>
c001da02:	84 d2                	test   dl,dl
c001da04:	b8 24 00 00 00       	mov    eax,0x24
c001da09:	75 1b                	jne    c001da26 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001da0b:	85 f6                	test   esi,esi
c001da0d:	0f 84 5a fe ff ff    	je     c001d86d <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001da13:	84 d2                	test   dl,dl
c001da15:	b8 20 00 00 00       	mov    eax,0x20
c001da1a:	75 0a                	jne    c001da26 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001da1c:	e9 4c fe ff ff       	jmp    c001d86d <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001da21:	b8 34 00 00 00       	mov    eax,0x34
c001da26:	50                   	push   eax
c001da27:	6a 07                	push   0x7
c001da29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da30:	50                   	push   eax
c001da31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da37:	e8 94 eb ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da3c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001da41:	83 c4 10             	add    esp,0x10
c001da44:	48                   	dec    eax
c001da45:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001da4a:	85 c0                	test   eax,eax
c001da4c:	75 01                	jne    c001da4f <ATA::access(unsigned long long, int, void*, bool)+0x2f7>
c001da4e:	fb                   	sti    
c001da4f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001da53:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001da58:	85 f6                	test   esi,esi
c001da5a:	0f 84 e0 00 00 00    	je     c001db40 <ATA::access(unsigned long long, int, void*, bool)+0x3e8>
c001da60:	57                   	push   edi
c001da61:	6a 01                	push   0x1
c001da63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da6a:	50                   	push   eax
c001da6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da71:	e8 60 f8 ff ff       	call   c001d2d6 <IDE::polling(unsigned char, unsigned int)>
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	0f b6 c0             	movzx  eax,al
c001da7c:	85 c0                	test   eax,eax
c001da7e:	74 23                	je     c001daa3 <ATA::access(unsigned long long, int, void*, bool)+0x34b>
c001da80:	50                   	push   eax
c001da81:	89 c6                	mov    esi,eax
c001da83:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001da8a:	50                   	push   eax
c001da8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da92:	50                   	push   eax
c001da93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da99:	e8 7e f7 ff ff       	call   c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001da9e:	e9 b4 00 00 00       	jmp    c001db57 <ATA::access(unsigned long long, int, void*, bool)+0x3ff>
c001daa3:	85 ed                	test   ebp,ebp
c001daa5:	74 4d                	je     c001daf4 <ATA::access(unsigned long long, int, void*, bool)+0x39c>
c001daa7:	fa                   	cli    
c001daa8:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001daae:	31 ff                	xor    edi,edi
c001dab0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dab4:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001dab8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001dabd:	51                   	push   ecx
c001dabe:	51                   	push   ecx
c001dabf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dac6:	50                   	push   eax
c001dac7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dacd:	e8 ec ea ff ff       	call   c001c5be <IDE::getBase(unsigned char)>
c001dad2:	89 c2                	mov    edx,eax
c001dad4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001dad9:	66 ef                	out    dx,ax
c001dadb:	47                   	inc    edi
c001dadc:	83 c4 10             	add    esp,0x10
c001dadf:	81 ff 00 01 00 00    	cmp    edi,0x100
c001dae5:	75 c9                	jne    c001dab0 <ATA::access(unsigned long long, int, void*, bool)+0x358>
c001dae7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001daec:	48                   	dec    eax
c001daed:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001daf2:	eb 3b                	jmp    c001db2f <ATA::access(unsigned long long, int, void*, bool)+0x3d7>
c001daf4:	fa                   	cli    
c001daf5:	52                   	push   edx
c001daf6:	52                   	push   edx
c001daf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dafe:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001db04:	50                   	push   eax
c001db05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db0b:	e8 ae ea ff ff       	call   c001c5be <IDE::getBase(unsigned char)>
c001db10:	b9 00 01 00 00       	mov    ecx,0x100
c001db15:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001db19:	89 c2                	mov    edx,eax
c001db1b:	fc                   	cld    
c001db1c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001db1f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001db24:	83 c4 10             	add    esp,0x10
c001db27:	48                   	dec    eax
c001db28:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001db2d:	85 c0                	test   eax,eax
c001db2f:	75 01                	jne    c001db32 <ATA::access(unsigned long long, int, void*, bool)+0x3da>
c001db31:	fb                   	sti    
c001db32:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001db3a:	4e                   	dec    esi
c001db3b:	e9 18 ff ff ff       	jmp    c001da58 <ATA::access(unsigned long long, int, void*, bool)+0x300>
c001db40:	31 f6                	xor    esi,esi
c001db42:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001db47:	74 11                	je     c001db5a <ATA::access(unsigned long long, int, void*, bool)+0x402>
c001db49:	50                   	push   eax
c001db4a:	50                   	push   eax
c001db4b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001db50:	50                   	push   eax
c001db51:	53                   	push   ebx
c001db52:	e8 67 fb ff ff       	call   c001d6be <ATA::flush(bool)>
c001db57:	83 c4 10             	add    esp,0x10
c001db5a:	83 c4 2c             	add    esp,0x2c
c001db5d:	89 f0                	mov    eax,esi
c001db5f:	5b                   	pop    ebx
c001db60:	5e                   	pop    esi
c001db61:	5f                   	pop    edi
c001db62:	5d                   	pop    ebp
c001db63:	c3                   	ret    

c001db64 <ATA::read(unsigned long long, int, void*)>:
c001db64:	57                   	push   edi
c001db65:	b8 04 00 00 00       	mov    eax,0x4
c001db6a:	56                   	push   esi
c001db6b:	53                   	push   ebx
c001db6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001db74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db78:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001db7c:	8d 7a ff             	lea    edi,[edx-0x1]
c001db7f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db85:	77 25                	ja     c001dbac <ATA::read(unsigned long long, int, void*)+0x48>
c001db87:	85 f6                	test   esi,esi
c001db89:	b8 06 00 00 00       	mov    eax,0x6
c001db8e:	74 1c                	je     c001dbac <ATA::read(unsigned long long, int, void*)+0x48>
c001db90:	50                   	push   eax
c001db91:	50                   	push   eax
c001db92:	6a 00                	push   0x0
c001db94:	56                   	push   esi
c001db95:	52                   	push   edx
c001db96:	53                   	push   ebx
c001db97:	51                   	push   ecx
c001db98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db9c:	e8 b7 fb ff ff       	call   c001d758 <ATA::access(unsigned long long, int, void*, bool)>
c001dba1:	83 c4 20             	add    esp,0x20
c001dba4:	85 c0                	test   eax,eax
c001dba6:	0f 95 c0             	setne  al
c001dba9:	0f b6 c0             	movzx  eax,al
c001dbac:	5b                   	pop    ebx
c001dbad:	5e                   	pop    esi
c001dbae:	5f                   	pop    edi
c001dbaf:	c3                   	ret    

c001dbb0 <ATA::write(unsigned long long, int, void*)>:
c001dbb0:	57                   	push   edi
c001dbb1:	b8 04 00 00 00       	mov    eax,0x4
c001dbb6:	56                   	push   esi
c001dbb7:	53                   	push   ebx
c001dbb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbbc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dbc0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dbc4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dbc8:	8d 7a ff             	lea    edi,[edx-0x1]
c001dbcb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dbd1:	77 25                	ja     c001dbf8 <ATA::write(unsigned long long, int, void*)+0x48>
c001dbd3:	85 f6                	test   esi,esi
c001dbd5:	b8 06 00 00 00       	mov    eax,0x6
c001dbda:	74 1c                	je     c001dbf8 <ATA::write(unsigned long long, int, void*)+0x48>
c001dbdc:	50                   	push   eax
c001dbdd:	50                   	push   eax
c001dbde:	6a 01                	push   0x1
c001dbe0:	56                   	push   esi
c001dbe1:	52                   	push   edx
c001dbe2:	53                   	push   ebx
c001dbe3:	51                   	push   ecx
c001dbe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbe8:	e8 6b fb ff ff       	call   c001d758 <ATA::access(unsigned long long, int, void*, bool)>
c001dbed:	83 c4 20             	add    esp,0x20
c001dbf0:	85 c0                	test   eax,eax
c001dbf2:	0f 95 c0             	setne  al
c001dbf5:	0f b6 c0             	movzx  eax,al
c001dbf8:	5b                   	pop    ebx
c001dbf9:	5e                   	pop    esi
c001dbfa:	5f                   	pop    edi
c001dbfb:	c3                   	ret    

c001dbfc <ATA::detectCHS()>:
c001dbfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dc00:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001dc06:	c1 e0 06             	shl    eax,0x6
c001dc09:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001dc0f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001dc19:	c7 44 24 04 94 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023794
c001dc21:	e9 14 10 ff ff       	jmp    c000ec3a <KePanic(char const*)>

c001dc26 <ATA::open(int, int, void*)>:
c001dc26:	53                   	push   ebx
c001dc27:	83 ec 08             	sub    esp,0x8
c001dc2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc36:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc3c:	c1 e0 06             	shl    eax,0x6
c001dc3f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dc45:	01 d0                	add    eax,edx
c001dc47:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dc4e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dc54:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dc5b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc65:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc6c:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dc72:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dc79:	75 0c                	jne    c001dc87 <ATA::open(int, int, void*)+0x61>
c001dc7b:	83 ec 0c             	sub    esp,0xc
c001dc7e:	53                   	push   ebx
c001dc7f:	e8 78 ff ff ff       	call   c001dbfc <ATA::detectCHS()>
c001dc84:	83 c4 10             	add    esp,0x10
c001dc87:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dc8d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc93:	c1 e0 06             	shl    eax,0x6
c001dc96:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dc9d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dca7:	d1 e8                	shr    eax,1
c001dca9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dcaf:	6a 04                	push   0x4
c001dcb1:	6a 0c                	push   0xc
c001dcb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dcba:	50                   	push   eax
c001dcbb:	52                   	push   edx
c001dcbc:	e8 0f e9 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcc1:	90                   	nop
c001dcc2:	90                   	nop
c001dcc3:	6a 00                	push   0x0
c001dcc5:	6a 0c                	push   0xc
c001dcc7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dcce:	50                   	push   eax
c001dccf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dcd5:	e8 f6 e8 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcda:	83 c4 14             	add    esp,0x14
c001dcdd:	53                   	push   ebx
c001dcde:	e8 ab b7 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001dce3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dce6:	e8 8b c6 fe ff       	call   c000a376 <createPartitionsForDisk(PhysicalDisk*)>
c001dceb:	83 c4 18             	add    esp,0x18
c001dcee:	31 c0                	xor    eax,eax
c001dcf0:	5b                   	pop    ebx
c001dcf1:	c3                   	ret    

c001dcf2 <combineCharAndColour(char, unsigned char)>:
c001dcf2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dcf7:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001dcfd:	c1 e0 08             	shl    eax,0x8
c001dd00:	09 d0                	or     eax,edx
c001dd02:	c3                   	ret    

c001dd03 <combineColours(unsigned char, unsigned char)>:
c001dd03:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dd08:	c1 e0 04             	shl    eax,0x4
c001dd0b:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001dd0f:	c3                   	ret    

c001dd10 <ATAPI::write(unsigned long long, int, void*)>:
c001dd10:	b8 03 00 00 00       	mov    eax,0x3
c001dd15:	c3                   	ret    

c001dd16 <ATAPI::close(int, int, void*)>:
c001dd16:	83 ec 0c             	sub    esp,0xc
c001dd19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd1d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd23:	85 c0                	test   eax,eax
c001dd25:	74 0c                	je     c001dd33 <ATAPI::close(int, int, void*)+0x1d>
c001dd27:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd29:	83 ec 0c             	sub    esp,0xc
c001dd2c:	50                   	push   eax
c001dd2d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	31 c0                	xor    eax,eax
c001dd35:	83 c4 0c             	add    esp,0xc
c001dd38:	c3                   	ret    
c001dd39:	90                   	nop

c001dd3a <ATAPI::ATAPI()>:
c001dd3a:	83 ec 0c             	sub    esp,0xc
c001dd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd41:	83 ec 04             	sub    esp,0x4
c001dd44:	68 00 08 00 00       	push   0x800
c001dd49:	68 e9 38 02 c0       	push   0xc00238e9
c001dd4e:	50                   	push   eax
c001dd4f:	e8 d2 b6 fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd54:	83 c4 10             	add    esp,0x10
c001dd57:	ba f8 37 02 c0       	mov    edx,0xc00237f8
c001dd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd60:	89 10                	mov    DWORD PTR [eax],edx
c001dd62:	90                   	nop
c001dd63:	83 c4 0c             	add    esp,0xc
c001dd66:	c3                   	ret    
c001dd67:	90                   	nop

c001dd68 <ATAPI::readyForCommand()>:
c001dd68:	56                   	push   esi
c001dd69:	53                   	push   ebx
c001dd6a:	53                   	push   ebx
c001dd6b:	31 db                	xor    ebx,ebx
c001dd6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd71:	51                   	push   ecx
c001dd72:	6a 0c                	push   0xc
c001dd74:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dd7b:	50                   	push   eax
c001dd7c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dd82:	e8 09 e9 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	a8 88                	test   al,0x88
c001dd8c:	74 25                	je     c001ddb3 <ATAPI::readyForCommand()+0x4b>
c001dd8e:	43                   	inc    ebx
c001dd8f:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001dd95:	7e da                	jle    c001dd71 <ATAPI::readyForCommand()+0x9>
c001dd97:	83 ec 0c             	sub    esp,0xc
c001dd9a:	68 5e 01 00 00       	push   0x15e
c001dd9f:	e8 04 79 ff ff       	call   c00156a8 <milliTenthSleep(unsigned int)>
c001dda4:	83 c4 10             	add    esp,0x10
c001dda7:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001ddad:	75 c2                	jne    c001dd71 <ATAPI::readyForCommand()+0x9>
c001ddaf:	31 c0                	xor    eax,eax
c001ddb1:	eb 02                	jmp    c001ddb5 <ATAPI::readyForCommand()+0x4d>
c001ddb3:	b0 01                	mov    al,0x1
c001ddb5:	5a                   	pop    edx
c001ddb6:	5b                   	pop    ebx
c001ddb7:	5e                   	pop    esi
c001ddb8:	c3                   	ret    
c001ddb9:	90                   	nop

c001ddba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ddba:	55                   	push   ebp
c001ddbb:	57                   	push   edi
c001ddbc:	56                   	push   esi
c001ddbd:	53                   	push   ebx
c001ddbe:	83 ec 20             	sub    esp,0x20
c001ddc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ddc5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ddc9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ddcd:	6a 01                	push   0x1
c001ddcf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddd6:	50                   	push   eax
c001ddd7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dddd:	e8 fc e9 ff ff       	call   c001c7de <IDE::enableIRQs(unsigned char, bool)>
c001dde2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dde9:	59                   	pop    ecx
c001ddea:	5e                   	pop    esi
c001ddeb:	50                   	push   eax
c001ddec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddf2:	e8 b3 e7 ff ff       	call   c001c5aa <IDE::prepareInterrupt(unsigned char)>
c001ddf7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ddfa:	e8 69 ff ff ff       	call   c001dd68 <ATAPI::readyForCommand()>
c001ddff:	83 c4 10             	add    esp,0x10
c001de02:	84 c0                	test   al,al
c001de04:	75 0a                	jne    c001de10 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001de06:	bb 01 00 00 00       	mov    ebx,0x1
c001de0b:	e9 5f 02 00 00       	jmp    c001e06f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de10:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001de16:	c1 e0 04             	shl    eax,0x4
c001de19:	0f b6 c0             	movzx  eax,al
c001de1c:	50                   	push   eax
c001de1d:	6a 06                	push   0x6
c001de1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de26:	50                   	push   eax
c001de27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de2d:	e8 9e e7 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de32:	6a 00                	push   0x0
c001de34:	6a 01                	push   0x1
c001de36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de3d:	50                   	push   eax
c001de3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de44:	e8 87 e7 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de49:	83 c4 20             	add    esp,0x20
c001de4c:	0f b6 c3             	movzx  eax,bl
c001de4f:	50                   	push   eax
c001de50:	0f b6 df             	movzx  ebx,bh
c001de53:	6a 04                	push   0x4
c001de55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de5c:	50                   	push   eax
c001de5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de63:	e8 68 e7 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de68:	53                   	push   ebx
c001de69:	6a 05                	push   0x5
c001de6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de72:	50                   	push   eax
c001de73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de79:	e8 52 e7 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de7e:	83 c4 20             	add    esp,0x20
c001de81:	68 a0 00 00 00       	push   0xa0
c001de86:	6a 07                	push   0x7
c001de88:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de8f:	50                   	push   eax
c001de90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de96:	e8 35 e7 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de9b:	83 c4 0c             	add    esp,0xc
c001de9e:	6a 01                	push   0x1
c001dea0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dea7:	50                   	push   eax
c001dea8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001deae:	e8 23 f4 ff ff       	call   c001d2d6 <IDE::polling(unsigned char, unsigned int)>
c001deb3:	83 c4 10             	add    esp,0x10
c001deb6:	0f b6 d8             	movzx  ebx,al
c001deb9:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001debf:	85 db                	test   ebx,ebx
c001dec1:	74 20                	je     c001dee3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001dec3:	53                   	push   ebx
c001dec4:	0f b6 c0             	movzx  eax,al
c001dec7:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001dece:	52                   	push   edx
c001decf:	50                   	push   eax
c001ded0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ded6:	e8 41 f3 ff ff       	call   c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dedb:	83 c4 10             	add    esp,0x10
c001dede:	e9 8c 01 00 00       	jmp    c001e06f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dee3:	52                   	push   edx
c001dee4:	0f b6 c0             	movzx  eax,al
c001dee7:	52                   	push   edx
c001dee8:	50                   	push   eax
c001dee9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001deef:	e8 ca e6 ff ff       	call   c001c5be <IDE::getBase(unsigned char)>
c001def4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001def8:	b9 06 00 00 00       	mov    ecx,0x6
c001defd:	89 c2                	mov    edx,eax
c001deff:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001df02:	89 e8                	mov    eax,ebp
c001df04:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001df08:	83 c4 10             	add    esp,0x10
c001df0b:	0f b6 c0             	movzx  eax,al
c001df0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df12:	85 db                	test   ebx,ebx
c001df14:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df1a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df21:	0f 84 eb 00 00 00    	je     c001e012 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001df27:	55                   	push   ebp
c001df28:	55                   	push   ebp
c001df29:	52                   	push   edx
c001df2a:	50                   	push   eax
c001df2b:	e8 14 e8 ff ff       	call   c001c744 <IDE::waitInterrupt(unsigned char)>
c001df30:	83 c4 10             	add    esp,0x10
c001df33:	84 c0                	test   al,al
c001df35:	0f 84 cb fe ff ff    	je     c001de06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001df3b:	56                   	push   esi
c001df3c:	56                   	push   esi
c001df3d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df44:	50                   	push   eax
c001df45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df4b:	e8 5a e6 ff ff       	call   c001c5aa <IDE::prepareInterrupt(unsigned char)>
c001df50:	83 c4 0c             	add    esp,0xc
c001df53:	6a 04                	push   0x4
c001df55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df5c:	50                   	push   eax
c001df5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df63:	e8 28 e7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001df68:	83 c4 0c             	add    esp,0xc
c001df6b:	6a 05                	push   0x5
c001df6d:	89 c6                	mov    esi,eax
c001df6f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df76:	50                   	push   eax
c001df77:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df7d:	e8 0e e7 ff ff       	call   c001c690 <IDE::read(unsigned char, unsigned char)>
c001df82:	83 c4 10             	add    esp,0x10
c001df85:	0f b6 e8             	movzx  ebp,al
c001df88:	89 f0                	mov    eax,esi
c001df8a:	c1 e5 08             	shl    ebp,0x8
c001df8d:	0f b6 f0             	movzx  esi,al
c001df90:	09 f5                	or     ebp,esi
c001df92:	31 f6                	xor    esi,esi
c001df94:	d1 fd                	sar    ebp,1
c001df96:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001df9b:	74 5c                	je     c001dff9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001df9d:	39 ee                	cmp    esi,ebp
c001df9f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dfa5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dfac:	75 0d                	jne    c001dfbb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001dfae:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001dfb1:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001dfb5:	4b                   	dec    ebx
c001dfb6:	e9 57 ff ff ff       	jmp    c001df12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001dfbb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dfbf:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001dfc3:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001dfc8:	51                   	push   ecx
c001dfc9:	51                   	push   ecx
c001dfca:	52                   	push   edx
c001dfcb:	50                   	push   eax
c001dfcc:	e8 ed e5 ff ff       	call   c001c5be <IDE::getBase(unsigned char)>
c001dfd1:	89 c2                	mov    edx,eax
c001dfd3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001dfd8:	66 ef                	out    dx,ax
c001dfda:	46                   	inc    esi
c001dfdb:	83 c4 10             	add    esp,0x10
c001dfde:	eb bd                	jmp    c001df9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001dfe0:	51                   	push   ecx
c001dfe1:	51                   	push   ecx
c001dfe2:	52                   	push   edx
c001dfe3:	50                   	push   eax
c001dfe4:	e8 d5 e5 ff ff       	call   c001c5be <IDE::getBase(unsigned char)>
c001dfe9:	89 c2                	mov    edx,eax
c001dfeb:	66 ed                	in     ax,dx
c001dfed:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001dff1:	83 c4 10             	add    esp,0x10
c001dff4:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001dff8:	46                   	inc    esi
c001dff9:	39 ee                	cmp    esi,ebp
c001dffb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e001:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e008:	75 d6                	jne    c001dfe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001e00a:	01 f6                	add    esi,esi
c001e00c:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001e010:	eb a3                	jmp    c001dfb5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001e012:	51                   	push   ecx
c001e013:	51                   	push   ecx
c001e014:	52                   	push   edx
c001e015:	50                   	push   eax
c001e016:	e8 29 e7 ff ff       	call   c001c744 <IDE::waitInterrupt(unsigned char)>
c001e01b:	83 c4 10             	add    esp,0x10
c001e01e:	84 c0                	test   al,al
c001e020:	0f 84 e0 fd ff ff    	je     c001de06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001e026:	52                   	push   edx
c001e027:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e02c:	52                   	push   edx
c001e02d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e034:	50                   	push   eax
c001e035:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e03b:	e8 6a e5 ff ff       	call   c001c5aa <IDE::prepareInterrupt(unsigned char)>
c001e040:	83 c4 10             	add    esp,0x10
c001e043:	50                   	push   eax
c001e044:	50                   	push   eax
c001e045:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e04c:	50                   	push   eax
c001e04d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e053:	e8 66 e5 ff ff       	call   c001c5be <IDE::getBase(unsigned char)>
c001e058:	8d 50 07             	lea    edx,[eax+0x7]
c001e05b:	ec                   	in     al,dx
c001e05c:	83 c4 10             	add    esp,0x10
c001e05f:	a8 88                	test   al,0x88
c001e061:	74 0a                	je     c001e06d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001e063:	4b                   	dec    ebx
c001e064:	75 dd                	jne    c001e043 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001e066:	bb 02 00 00 00       	mov    ebx,0x2
c001e06b:	eb 02                	jmp    c001e06f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e06d:	31 db                	xor    ebx,ebx
c001e06f:	83 c4 1c             	add    esp,0x1c
c001e072:	89 d8                	mov    eax,ebx
c001e074:	5b                   	pop    ebx
c001e075:	5e                   	pop    esi
c001e076:	5f                   	pop    edi
c001e077:	5d                   	pop    ebp
c001e078:	c3                   	ret    
c001e079:	90                   	nop

c001e07a <ATAPI::diskRemoved()>:
c001e07a:	53                   	push   ebx
c001e07b:	83 ec 14             	sub    esp,0x14
c001e07e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e082:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e089:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e08f:	e8 d2 bf fe ff       	call   c000a066 <LogicalDisk::unmount()>
c001e094:	58                   	pop    eax
c001e095:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e09b:	e8 a4 c9 fe ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c001e0a0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e0a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0aa:	83 c4 18             	add    esp,0x18
c001e0ad:	5b                   	pop    ebx
c001e0ae:	e9 81 c9 fe ff       	jmp    c000aa34 <VCache::invalidateReadBuffer()>
c001e0b3:	90                   	nop

c001e0b4 <ATAPI::eject()>:
c001e0b4:	57                   	push   edi
c001e0b5:	b9 03 00 00 00       	mov    ecx,0x3
c001e0ba:	53                   	push   ebx
c001e0bb:	83 ec 14             	sub    esp,0x14
c001e0be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e0c2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e0c6:	fc                   	cld    
c001e0c7:	31 c0                	xor    eax,eax
c001e0c9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0cb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e0d0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e0d5:	50                   	push   eax
c001e0d6:	50                   	push   eax
c001e0d7:	6a 00                	push   0x0
c001e0d9:	6a 00                	push   0x0
c001e0db:	6a 00                	push   0x0
c001e0dd:	6a 02                	push   0x2
c001e0df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0e3:	50                   	push   eax
c001e0e4:	53                   	push   ebx
c001e0e5:	e8 d0 fc ff ff       	call   c001ddba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0ea:	83 c4 14             	add    esp,0x14
c001e0ed:	53                   	push   ebx
c001e0ee:	e8 87 ff ff ff       	call   c001e07a <ATAPI::diskRemoved()>
c001e0f3:	83 c4 24             	add    esp,0x24
c001e0f6:	31 c0                	xor    eax,eax
c001e0f8:	5b                   	pop    ebx
c001e0f9:	5f                   	pop    edi
c001e0fa:	c3                   	ret    
c001e0fb:	90                   	nop

c001e0fc <ATAPI::diskInserted()>:
c001e0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e100:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e107:	c3                   	ret    

c001e108 <ATAPI::detectMedia()>:
c001e108:	56                   	push   esi
c001e109:	53                   	push   ebx
c001e10a:	83 ec 28             	sub    esp,0x28
c001e10d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e111:	6a 0c                	push   0xc
c001e113:	6a 00                	push   0x0
c001e115:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e119:	56                   	push   esi
c001e11a:	e8 d1 23 fe ff       	call   c00004f0 <memset>
c001e11f:	58                   	pop    eax
c001e120:	5a                   	pop    edx
c001e121:	6a 00                	push   0x0
c001e123:	6a 00                	push   0x0
c001e125:	6a 00                	push   0x0
c001e127:	6a 00                	push   0x0
c001e129:	56                   	push   esi
c001e12a:	53                   	push   ebx
c001e12b:	e8 8a fc ff ff       	call   c001ddba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e130:	83 c4 1c             	add    esp,0x1c
c001e133:	6a 0c                	push   0xc
c001e135:	6a 00                	push   0x0
c001e137:	56                   	push   esi
c001e138:	e8 b3 23 fe ff       	call   c00004f0 <memset>
c001e13d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e142:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e147:	59                   	pop    ecx
c001e148:	58                   	pop    eax
c001e149:	6a 01                	push   0x1
c001e14b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e14f:	50                   	push   eax
c001e150:	6a 00                	push   0x0
c001e152:	6a 12                	push   0x12
c001e154:	56                   	push   esi
c001e155:	53                   	push   ebx
c001e156:	e8 5f fc ff ff       	call   c001ddba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e15b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e15f:	83 c4 20             	add    esp,0x20
c001e162:	83 e0 7f             	and    eax,0x7f
c001e165:	83 f8 70             	cmp    eax,0x70
c001e168:	74 15                	je     c001e17f <ATAPI::detectMedia()+0x77>
c001e16a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e171:	75 0c                	jne    c001e17f <ATAPI::detectMedia()+0x77>
c001e173:	83 ec 0c             	sub    esp,0xc
c001e176:	53                   	push   ebx
c001e177:	e8 80 ff ff ff       	call   c001e0fc <ATAPI::diskInserted()>
c001e17c:	83 c4 10             	add    esp,0x10
c001e17f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e183:	83 e0 0f             	and    eax,0xf
c001e186:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e18b:	0f b6 c0             	movzx  eax,al
c001e18e:	75 19                	jne    c001e1a9 <ATAPI::detectMedia()+0xa1>
c001e190:	83 f8 02             	cmp    eax,0x2
c001e193:	75 14                	jne    c001e1a9 <ATAPI::detectMedia()+0xa1>
c001e195:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e19c:	74 24                	je     c001e1c2 <ATAPI::detectMedia()+0xba>
c001e19e:	83 ec 0c             	sub    esp,0xc
c001e1a1:	53                   	push   ebx
c001e1a2:	e8 d3 fe ff ff       	call   c001e07a <ATAPI::diskRemoved()>
c001e1a7:	eb 16                	jmp    c001e1bf <ATAPI::detectMedia()+0xb7>
c001e1a9:	85 c0                	test   eax,eax
c001e1ab:	75 15                	jne    c001e1c2 <ATAPI::detectMedia()+0xba>
c001e1ad:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e1b4:	75 0c                	jne    c001e1c2 <ATAPI::detectMedia()+0xba>
c001e1b6:	83 ec 0c             	sub    esp,0xc
c001e1b9:	53                   	push   ebx
c001e1ba:	e8 3d ff ff ff       	call   c001e0fc <ATAPI::diskInserted()>
c001e1bf:	83 c4 10             	add    esp,0x10
c001e1c2:	83 c4 24             	add    esp,0x24
c001e1c5:	5b                   	pop    ebx
c001e1c6:	5e                   	pop    esi
c001e1c7:	c3                   	ret    

c001e1c8 <ATAPI::open(int, int, void*)>:
c001e1c8:	56                   	push   esi
c001e1c9:	53                   	push   ebx
c001e1ca:	50                   	push   eax
c001e1cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1d7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e1dd:	c1 e0 06             	shl    eax,0x6
c001e1e0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e1e6:	01 d0                	add    eax,edx
c001e1e8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e1ef:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e1f5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e1fc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e206:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e20d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e213:	6a 04                	push   0x4
c001e215:	6a 0c                	push   0xc
c001e217:	51                   	push   ecx
c001e218:	52                   	push   edx
c001e219:	e8 b2 e3 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e21e:	90                   	nop
c001e21f:	90                   	nop
c001e220:	6a 00                	push   0x0
c001e222:	6a 0c                	push   0xc
c001e224:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e22b:	50                   	push   eax
c001e22c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e232:	e8 99 e3 ff ff       	call   c001c5d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e237:	83 c4 14             	add    esp,0x14
c001e23a:	68 78 01 00 00       	push   0x178
c001e23f:	e8 a2 06 ff ff       	call   c000e8e6 <malloc>
c001e244:	83 c4 0c             	add    esp,0xc
c001e247:	6a 00                	push   0x0
c001e249:	68 ff ff ff 7f       	push   0x7fffffff
c001e24e:	6a 00                	push   0x0
c001e250:	6a 00                	push   0x0
c001e252:	53                   	push   ebx
c001e253:	68 9b 39 02 c0       	push   0xc002399b
c001e258:	89 c6                	mov    esi,eax
c001e25a:	50                   	push   eax
c001e25b:	e8 44 bc fe ff       	call   c0009ea4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e260:	83 c4 14             	add    esp,0x14
c001e263:	56                   	push   esi
c001e264:	e8 fb bc fe ff       	call   c0009f64 <LogicalDisk::assignDriveLetter()>
c001e269:	5a                   	pop    edx
c001e26a:	59                   	pop    ecx
c001e26b:	0f be c0             	movsx  eax,al
c001e26e:	50                   	push   eax
c001e26f:	68 e0 37 02 c0       	push   0xc00237e0
c001e274:	e8 d5 8c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e279:	58                   	pop    eax
c001e27a:	5a                   	pop    edx
c001e27b:	56                   	push   esi
c001e27c:	53                   	push   ebx
c001e27d:	e8 c0 ad fe ff       	call   c0009042 <Device::addChild(Device*)>
c001e282:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e288:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e28b:	e8 fe b1 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001e290:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e297:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e29a:	e8 69 fe ff ff       	call   c001e108 <ATAPI::detectMedia()>
c001e29f:	83 c4 14             	add    esp,0x14
c001e2a2:	31 c0                	xor    eax,eax
c001e2a4:	5b                   	pop    ebx
c001e2a5:	5e                   	pop    esi
c001e2a6:	c3                   	ret    
c001e2a7:	90                   	nop

c001e2a8 <ATAPI::read(unsigned long long, int, void*)>:
c001e2a8:	55                   	push   ebp
c001e2a9:	57                   	push   edi
c001e2aa:	56                   	push   esi
c001e2ab:	53                   	push   ebx
c001e2ac:	83 ec 1c             	sub    esp,0x1c
c001e2af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2b3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e2b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e2bb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e2c2:	74 3c                	je     c001e300 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e2c4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e2c8:	b9 03 00 00 00       	mov    ecx,0x3
c001e2cd:	fc                   	cld    
c001e2ce:	31 c0                	xor    eax,eax
c001e2d0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2d2:	89 e8                	mov    eax,ebp
c001e2d4:	0f ce                	bswap  esi
c001e2d6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e2da:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e2df:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e2e3:	50                   	push   eax
c001e2e4:	50                   	push   eax
c001e2e5:	55                   	push   ebp
c001e2e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e2ea:	c1 e5 0b             	shl    ebp,0xb
c001e2ed:	6a 00                	push   0x0
c001e2ef:	55                   	push   ebp
c001e2f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e2f4:	50                   	push   eax
c001e2f5:	53                   	push   ebx
c001e2f6:	e8 bf fa ff ff       	call   c001ddba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e2fb:	83 c4 20             	add    esp,0x20
c001e2fe:	eb 1a                	jmp    c001e31a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e300:	83 ec 0c             	sub    esp,0xc
c001e303:	53                   	push   ebx
c001e304:	e8 ff fd ff ff       	call   c001e108 <ATAPI::detectMedia()>
c001e309:	83 c4 10             	add    esp,0x10
c001e30c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e313:	75 af                	jne    c001e2c4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e315:	b8 02 00 00 00       	mov    eax,0x2
c001e31a:	83 c4 1c             	add    esp,0x1c
c001e31d:	5b                   	pop    ebx
c001e31e:	5e                   	pop    esi
c001e31f:	5f                   	pop    edi
c001e320:	5d                   	pop    ebp
c001e321:	c3                   	ret    

c001e322 <SATA::close(int, int, void*)>:
c001e322:	83 ec 0c             	sub    esp,0xc
c001e325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e329:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e32f:	85 c0                	test   eax,eax
c001e331:	74 0c                	je     c001e33f <SATA::close(int, int, void*)+0x1d>
c001e333:	8b 10                	mov    edx,DWORD PTR [eax]
c001e335:	83 ec 0c             	sub    esp,0xc
c001e338:	50                   	push   eax
c001e339:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e33c:	83 c4 10             	add    esp,0x10
c001e33f:	31 c0                	xor    eax,eax
c001e341:	83 c4 0c             	add    esp,0xc
c001e344:	c3                   	ret    
c001e345:	90                   	nop

c001e346 <SATA::powerSaving(PowerSavingLevel)>:
c001e346:	c3                   	ret    
c001e347:	90                   	nop

c001e348 <SATA::open(int, int, void*)>:
c001e348:	56                   	push   esi
c001e349:	53                   	push   ebx
c001e34a:	83 ec 10             	sub    esp,0x10
c001e34d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e351:	68 28 38 02 c0       	push   0xc0023828
c001e356:	e8 f3 8b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e35b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e35f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e369:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e373:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e379:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e37d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e387:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e38e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e394:	e8 9b 0a ff ff       	call   c000ee34 <Phys::allocatePage()>
c001e399:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e39f:	89 c6                	mov    esi,eax
c001e3a1:	e8 8e 0a ff ff       	call   c000ee34 <Phys::allocatePage()>
c001e3a6:	81 c6 00 10 00 00    	add    esi,0x1000
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	39 c6                	cmp    esi,eax
c001e3b1:	74 10                	je     c001e3c3 <SATA::open(int, int, void*)+0x7b>
c001e3b3:	83 ec 0c             	sub    esp,0xc
c001e3b6:	68 34 38 02 c0       	push   0xc0023834
c001e3bb:	e8 7a 08 ff ff       	call   c000ec3a <KePanic(char const*)>
c001e3c0:	83 c4 10             	add    esp,0x10
c001e3c3:	83 ec 0c             	sub    esp,0xc
c001e3c6:	6a 02                	push   0x2
c001e3c8:	e8 14 3c ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c001e3cd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e3d3:	6a 03                	push   0x3
c001e3d5:	50                   	push   eax
c001e3d6:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e3dc:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e3e2:	e8 d9 42 ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e3e7:	83 c4 14             	add    esp,0x14
c001e3ea:	53                   	push   ebx
c001e3eb:	e8 9e b0 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001e3f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3f3:	e8 7e bf fe ff       	call   c000a376 <createPartitionsForDisk(PhysicalDisk*)>
c001e3f8:	83 c4 14             	add    esp,0x14
c001e3fb:	31 c0                	xor    eax,eax
c001e3fd:	5b                   	pop    ebx
c001e3fe:	5e                   	pop    esi
c001e3ff:	c3                   	ret    

c001e400 <SATA::SATA()>:
c001e400:	83 ec 0c             	sub    esp,0xc
c001e403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e407:	83 ec 04             	sub    esp,0x4
c001e40a:	68 00 02 00 00       	push   0x200
c001e40f:	68 48 38 02 c0       	push   0xc0023848
c001e414:	50                   	push   eax
c001e415:	e8 0c b0 fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e41a:	83 c4 10             	add    esp,0x10
c001e41d:	ba b8 38 02 c0       	mov    edx,0xc00238b8
c001e422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e426:	89 10                	mov    DWORD PTR [eax],edx
c001e428:	90                   	nop
c001e429:	83 c4 0c             	add    esp,0xc
c001e42c:	c3                   	ret    
c001e42d:	90                   	nop

c001e42e <SATA::access(unsigned long long, int, void*, bool)>:
c001e42e:	55                   	push   ebp
c001e42f:	57                   	push   edi
c001e430:	56                   	push   esi
c001e431:	53                   	push   ebx
c001e432:	83 ec 2c             	sub    esp,0x2c
c001e435:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e439:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e43d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e441:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e449:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e44d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e451:	fa                   	cli    
c001e452:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e458:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e45d:	7e 10                	jle    c001e46f <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001e45f:	83 ec 0c             	sub    esp,0xc
c001e462:	68 58 38 02 c0       	push   0xc0023858
c001e467:	e8 ce 07 ff ff       	call   c000ec3a <KePanic(char const*)>
c001e46c:	83 c4 10             	add    esp,0x10
c001e46f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e475:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001e47b:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e481:	89 e8                	mov    eax,ebp
c001e483:	c1 e0 07             	shl    eax,0x7
c001e486:	01 d0                	add    eax,edx
c001e488:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e492:	8d 45 02             	lea    eax,[ebp+0x2]
c001e495:	51                   	push   ecx
c001e496:	c1 e0 07             	shl    eax,0x7
c001e499:	51                   	push   ecx
c001e49a:	01 d0                	add    eax,edx
c001e49c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001e4a0:	50                   	push   eax
c001e4a1:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e4a7:	e8 0a ef ff ff       	call   c001d3b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e4b0:	83 c4 10             	add    esp,0x10
c001e4b3:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001e4b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e4bc:	0f 84 ac 01 00 00    	je     c001e66e <SATA::access(unsigned long long, int, void*, bool)+0x240>
c001e4c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e4c6:	c1 e0 09             	shl    eax,0x9
c001e4c9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e4ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4d2:	74 0e                	je     c001e4e2 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001e4d4:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e4da:	89 c1                	mov    ecx,eax
c001e4dc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e4e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4e6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e4ec:	8d 45 02             	lea    eax,[ebp+0x2]
c001e4ef:	c1 e0 07             	shl    eax,0x7
c001e4f2:	01 d0                	add    eax,edx
c001e4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4f6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4fc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e506:	c1 e1 05             	shl    ecx,0x5
c001e509:	01 c8                	add    eax,ecx
c001e50b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e50f:	83 e1 01             	and    ecx,0x1
c001e512:	89 ce                	mov    esi,ecx
c001e514:	8a 08                	mov    cl,BYTE PTR [eax]
c001e516:	c1 e6 06             	shl    esi,0x6
c001e519:	83 e1 bf             	and    ecx,0xffffffbf
c001e51c:	09 f1                	or     ecx,esi
c001e51e:	88 08                	mov    BYTE PTR [eax],cl
c001e520:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e522:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e528:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e52e:	89 08                	mov    DWORD PTR [eax],ecx
c001e530:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e536:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e53c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e542:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e545:	50                   	push   eax
c001e546:	68 90 00 00 00       	push   0x90
c001e54b:	6a 00                	push   0x0
c001e54d:	56                   	push   esi
c001e54e:	e8 9d 1f fe ff       	call   c00004f0 <memset>
c001e553:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e559:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e55f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e563:	83 c4 10             	add    esp,0x10
c001e566:	48                   	dec    eax
c001e567:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e56c:	89 c1                	mov    ecx,eax
c001e56e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e574:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e579:	09 c8                	or     eax,ecx
c001e57b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e581:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e587:	83 c8 80             	or     eax,0xffffff80
c001e58a:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e590:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e597:	25 00 7f 00 00       	and    eax,0x7f00
c001e59c:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5a1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e5a6:	66 89 06             	mov    WORD PTR [esi],ax
c001e5a9:	b0 35                	mov    al,0x35
c001e5ab:	75 02                	jne    c001e5af <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001e5ad:	b0 25                	mov    al,0x25
c001e5af:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e5b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5b6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e5ba:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001e5be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5c2:	c1 e8 10             	shr    eax,0x10
c001e5c5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5cc:	c1 e8 18             	shr    eax,0x18
c001e5cf:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e5d2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e5d6:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e5d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e5dd:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e5e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e5e4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e5e8:	89 ee                	mov    esi,ebp
c001e5ea:	31 c0                	xor    eax,eax
c001e5ec:	c1 e6 07             	shl    esi,0x7
c001e5ef:	01 d6                	add    esi,edx
c001e5f1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e5f7:	80 e1 88             	and    cl,0x88
c001e5fa:	74 0a                	je     c001e606 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e5fc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e601:	74 0a                	je     c001e60d <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e603:	40                   	inc    eax
c001e604:	eb eb                	jmp    c001e5f1 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e606:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e60b:	75 0a                	jne    c001e617 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e60d:	83 ec 0c             	sub    esp,0xc
c001e610:	68 91 38 02 c0       	push   0xc0023891
c001e615:	eb 34                	jmp    c001e64b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001e617:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001e61b:	c1 e5 07             	shl    ebp,0x7
c001e61e:	b8 01 00 00 00       	mov    eax,0x1
c001e623:	01 ea                	add    edx,ebp
c001e625:	d3 e0                	shl    eax,cl
c001e627:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e62d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e633:	85 c8                	test   eax,ecx
c001e635:	74 2b                	je     c001e662 <SATA::access(unsigned long long, int, void*, bool)+0x234>
c001e637:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e63d:	0f ba e1 1e          	bt     ecx,0x1e
c001e641:	73 ea                	jae    c001e62d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001e643:	83 ec 0c             	sub    esp,0xc
c001e646:	68 9f 38 02 c0       	push   0xc002389f
c001e64b:	e8 fe 88 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e650:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e655:	83 c4 10             	add    esp,0x10
c001e658:	48                   	dec    eax
c001e659:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e65e:	85 c0                	test   eax,eax
c001e660:	eb 17                	jmp    c001e679 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001e662:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e668:	0f ba e0 1e          	bt     eax,0x1e
c001e66c:	73 15                	jae    c001e683 <SATA::access(unsigned long long, int, void*, bool)+0x255>
c001e66e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e673:	48                   	dec    eax
c001e674:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e679:	75 01                	jne    c001e67c <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c001e67b:	fb                   	sti    
c001e67c:	b8 01 00 00 00       	mov    eax,0x1
c001e681:	eb 29                	jmp    c001e6ac <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e683:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e688:	75 10                	jne    c001e69a <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c001e68a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e690:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e698:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e69a:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e69f:	48                   	dec    eax
c001e6a0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e6a5:	75 03                	jne    c001e6aa <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001e6a7:	fb                   	sti    
c001e6a8:	eb 02                	jmp    c001e6ac <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e6aa:	31 c0                	xor    eax,eax
c001e6ac:	83 c4 2c             	add    esp,0x2c
c001e6af:	5b                   	pop    ebx
c001e6b0:	5e                   	pop    esi
c001e6b1:	5f                   	pop    edi
c001e6b2:	5d                   	pop    ebp
c001e6b3:	c3                   	ret    

c001e6b4 <SATA::read(unsigned long long, int, void*)>:
c001e6b4:	57                   	push   edi
c001e6b5:	b8 04 00 00 00       	mov    eax,0x4
c001e6ba:	56                   	push   esi
c001e6bb:	53                   	push   ebx
c001e6bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e6c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e6c8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e6cc:	8d 7a ff             	lea    edi,[edx-0x1]
c001e6cf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e6d5:	77 25                	ja     c001e6fc <SATA::read(unsigned long long, int, void*)+0x48>
c001e6d7:	85 f6                	test   esi,esi
c001e6d9:	b8 06 00 00 00       	mov    eax,0x6
c001e6de:	74 1c                	je     c001e6fc <SATA::read(unsigned long long, int, void*)+0x48>
c001e6e0:	50                   	push   eax
c001e6e1:	50                   	push   eax
c001e6e2:	6a 00                	push   0x0
c001e6e4:	56                   	push   esi
c001e6e5:	52                   	push   edx
c001e6e6:	53                   	push   ebx
c001e6e7:	51                   	push   ecx
c001e6e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e6ec:	e8 3d fd ff ff       	call   c001e42e <SATA::access(unsigned long long, int, void*, bool)>
c001e6f1:	83 c4 20             	add    esp,0x20
c001e6f4:	85 c0                	test   eax,eax
c001e6f6:	0f 95 c0             	setne  al
c001e6f9:	0f b6 c0             	movzx  eax,al
c001e6fc:	5b                   	pop    ebx
c001e6fd:	5e                   	pop    esi
c001e6fe:	5f                   	pop    edi
c001e6ff:	c3                   	ret    

c001e700 <SATA::write(unsigned long long, int, void*)>:
c001e700:	55                   	push   ebp
c001e701:	b8 04 00 00 00       	mov    eax,0x4
c001e706:	57                   	push   edi
c001e707:	56                   	push   esi
c001e708:	53                   	push   ebx
c001e709:	83 ec 0c             	sub    esp,0xc
c001e70c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e710:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e714:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e718:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e71c:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e71f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e725:	77 3d                	ja     c001e764 <SATA::write(unsigned long long, int, void*)+0x64>
c001e727:	85 ed                	test   ebp,ebp
c001e729:	b8 06 00 00 00       	mov    eax,0x6
c001e72e:	74 34                	je     c001e764 <SATA::write(unsigned long long, int, void*)+0x64>
c001e730:	c1 e3 09             	shl    ebx,0x9
c001e733:	01 eb                	add    ebx,ebp
c001e735:	50                   	push   eax
c001e736:	89 d6                	mov    esi,edx
c001e738:	50                   	push   eax
c001e739:	83 c6 01             	add    esi,0x1
c001e73c:	6a 01                	push   0x1
c001e73e:	89 cf                	mov    edi,ecx
c001e740:	55                   	push   ebp
c001e741:	83 d7 00             	adc    edi,0x0
c001e744:	6a 01                	push   0x1
c001e746:	81 c5 00 02 00 00    	add    ebp,0x200
c001e74c:	51                   	push   ecx
c001e74d:	52                   	push   edx
c001e74e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e752:	e8 d7 fc ff ff       	call   c001e42e <SATA::access(unsigned long long, int, void*, bool)>
c001e757:	83 c4 20             	add    esp,0x20
c001e75a:	39 dd                	cmp    ebp,ebx
c001e75c:	89 f2                	mov    edx,esi
c001e75e:	89 f9                	mov    ecx,edi
c001e760:	75 d3                	jne    c001e735 <SATA::write(unsigned long long, int, void*)+0x35>
c001e762:	31 c0                	xor    eax,eax
c001e764:	83 c4 0c             	add    esp,0xc
c001e767:	5b                   	pop    ebx
c001e768:	5e                   	pop    esi
c001e769:	5f                   	pop    edi
c001e76a:	5d                   	pop    ebp
c001e76b:	c3                   	ret    

c001e76c <SATAPI::write(unsigned long long, int, void*)>:
c001e76c:	b8 03 00 00 00       	mov    eax,0x3
c001e771:	c3                   	ret    

c001e772 <SATAPI::close(int, int, void*)>:
c001e772:	83 ec 0c             	sub    esp,0xc
c001e775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e779:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e77f:	85 c0                	test   eax,eax
c001e781:	74 0c                	je     c001e78f <SATAPI::close(int, int, void*)+0x1d>
c001e783:	8b 10                	mov    edx,DWORD PTR [eax]
c001e785:	83 ec 0c             	sub    esp,0xc
c001e788:	50                   	push   eax
c001e789:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e78c:	83 c4 10             	add    esp,0x10
c001e78f:	31 c0                	xor    eax,eax
c001e791:	83 c4 0c             	add    esp,0xc
c001e794:	c3                   	ret    
c001e795:	90                   	nop

c001e796 <SATAPI::SATAPI()>:
c001e796:	83 ec 0c             	sub    esp,0xc
c001e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79d:	83 ec 04             	sub    esp,0x4
c001e7a0:	68 00 08 00 00       	push   0x800
c001e7a5:	68 e8 38 02 c0       	push   0xc00238e8
c001e7aa:	50                   	push   eax
c001e7ab:	e8 76 ac fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e7b0:	83 c4 10             	add    esp,0x10
c001e7b3:	ba dc 39 02 c0       	mov    edx,0xc00239dc
c001e7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7bc:	89 10                	mov    DWORD PTR [eax],edx
c001e7be:	90                   	nop
c001e7bf:	83 c4 0c             	add    esp,0xc
c001e7c2:	c3                   	ret    
c001e7c3:	90                   	nop

c001e7c4 <SATAPI::diskRemoved()>:
c001e7c4:	c3                   	ret    
c001e7c5:	90                   	nop

c001e7c6 <SATAPI::diskInserted()>:
c001e7c6:	83 ec 18             	sub    esp,0x18
c001e7c9:	68 f4 38 02 c0       	push   0xc00238f4
c001e7ce:	e8 7b 87 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7d7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e7de:	83 c4 1c             	add    esp,0x1c
c001e7e1:	c3                   	ret    

c001e7e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e7e2:	55                   	push   ebp
c001e7e3:	57                   	push   edi
c001e7e4:	56                   	push   esi
c001e7e5:	53                   	push   ebx
c001e7e6:	83 ec 34             	sub    esp,0x34
c001e7e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e7ed:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e7f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e7f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e7f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e7fd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e803:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e80d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e813:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e817:	83 c0 02             	add    eax,0x2
c001e81a:	c1 e0 07             	shl    eax,0x7
c001e81d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e821:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e825:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e829:	c1 e0 07             	shl    eax,0x7
c001e82c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e830:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e834:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e83e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e842:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e848:	e8 69 eb ff ff       	call   c001d3b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e84d:	83 c4 10             	add    esp,0x10
c001e850:	89 c2                	mov    edx,eax
c001e852:	b8 01 00 00 00       	mov    eax,0x1
c001e857:	83 fa ff             	cmp    edx,0xffffffff
c001e85a:	0f 84 5f 02 00 00    	je     c001eabf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e860:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e868:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e86e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e870:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e876:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e87c:	89 d1                	mov    ecx,edx
c001e87e:	c1 e1 05             	shl    ecx,0x5
c001e881:	01 c8                	add    eax,ecx
c001e883:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e885:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e88b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e891:	89 08                	mov    DWORD PTR [eax],ecx
c001e893:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e899:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e89f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e8a5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e8a8:	50                   	push   eax
c001e8a9:	68 90 00 00 00       	push   0x90
c001e8ae:	6a 00                	push   0x0
c001e8b0:	53                   	push   ebx
c001e8b1:	e8 3a 1c fe ff       	call   c00004f0 <memset>
c001e8b6:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e8b9:	b9 0c 00 00 00       	mov    ecx,0xc
c001e8be:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e8c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e8c4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e8ca:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e8ce:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e8d2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e8d8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e8dc:	48                   	dec    eax
c001e8dd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e8e2:	89 c1                	mov    ecx,eax
c001e8e4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e8ea:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e8ef:	09 c8                	or     eax,ecx
c001e8f1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e8f7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e8fd:	83 c8 80             	or     eax,0xffffff80
c001e900:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e906:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e909:	25 00 7f 00 00       	and    eax,0x7f00
c001e90e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e913:	66 89 03             	mov    WORD PTR [ebx],ax
c001e916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e91a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e922:	c1 e8 10             	shr    eax,0x10
c001e925:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e92c:	c1 e8 18             	shr    eax,0x18
c001e92f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e932:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e936:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e939:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e93d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e940:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e944:	83 c4 10             	add    esp,0x10
c001e947:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e94b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e94f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e953:	31 c0                	xor    eax,eax
c001e955:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e95b:	80 e1 88             	and    cl,0x88
c001e95e:	74 0a                	je     c001e96a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e960:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e965:	74 0a                	je     c001e971 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e967:	40                   	inc    eax
c001e968:	eb eb                	jmp    c001e955 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e96a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e96f:	75 43                	jne    c001e9b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e971:	83 ec 0c             	sub    esp,0xc
c001e974:	68 0c 39 02 c0       	push   0xc002390c
c001e979:	e8 d0 85 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e97e:	58                   	pop    eax
c001e97f:	5a                   	pop    edx
c001e980:	68 21 39 02 c0       	push   0xc0023921
c001e985:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001e98b:	e8 42 2a ff ff       	call   c00113d2 <VgaText::puts(char const*)>
c001e990:	59                   	pop    ecx
c001e991:	5b                   	pop    ebx
c001e992:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e996:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e99c:	e8 af ea ff ff       	call   c001d450 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e9a1:	5e                   	pop    esi
c001e9a2:	5f                   	pop    edi
c001e9a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e9a7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e9ad:	e8 7e ea ff ff       	call   c001d430 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e9b2:	eb 48                	jmp    c001e9fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e9b4:	b8 01 00 00 00       	mov    eax,0x1
c001e9b9:	88 d1                	mov    cl,dl
c001e9bb:	d3 e0                	shl    eax,cl
c001e9bd:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e9c2:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e9c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e9cc:	89 c7                	mov    edi,eax
c001e9ce:	c1 e3 07             	shl    ebx,0x7
c001e9d1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e9d5:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e9db:	85 c7                	test   edi,eax
c001e9dd:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e9e3:	0f 84 a3 00 00 00    	je     c001ea8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e9e9:	0f ba e0 1e          	bt     eax,0x1e
c001e9ed:	73 1a                	jae    c001ea09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e9ef:	83 ec 0c             	sub    esp,0xc
c001e9f2:	68 33 39 02 c0       	push   0xc0023933
c001e9f7:	e8 52 85 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e9fc:	83 c4 10             	add    esp,0x10
c001e9ff:	b8 01 00 00 00       	mov    eax,0x1
c001ea04:	e9 b6 00 00 00       	jmp    c001eabf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001ea09:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001ea0f:	83 f8 0d             	cmp    eax,0xd
c001ea12:	77 0a                	ja     c001ea1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	68 c8 00 00 00       	push   0xc8
c001ea1c:	eb 28                	jmp    c001ea46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ea1e:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001ea24:	83 f8 0d             	cmp    eax,0xd
c001ea27:	77 0a                	ja     c001ea33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001ea29:	83 ec 0c             	sub    esp,0xc
c001ea2c:	68 58 02 00 00       	push   0x258
c001ea31:	eb 13                	jmp    c001ea46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ea33:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001ea39:	83 f8 06             	cmp    eax,0x6
c001ea3c:	77 10                	ja     c001ea4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001ea3e:	83 ec 0c             	sub    esp,0xc
c001ea41:	68 dc 05 00 00       	push   0x5dc
c001ea46:	e8 5d 6c ff ff       	call   c00156a8 <milliTenthSleep(unsigned int)>
c001ea4b:	83 c4 10             	add    esp,0x10
c001ea4e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ea52:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ea55:	75 06                	jne    c001ea5d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001ea57:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ea5b:	74 15                	je     c001ea72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001ea5d:	83 fe 06             	cmp    esi,0x6
c001ea60:	77 10                	ja     c001ea72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001ea62:	83 ec 0c             	sub    esp,0xc
c001ea65:	68 c4 09 00 00       	push   0x9c4
c001ea6a:	e8 39 6c ff ff       	call   c00156a8 <milliTenthSleep(unsigned int)>
c001ea6f:	83 c4 10             	add    esp,0x10
c001ea72:	46                   	inc    esi
c001ea73:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001ea79:	0f 85 56 ff ff ff    	jne    c001e9d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001ea7f:	83 ec 0c             	sub    esp,0xc
c001ea82:	68 46 39 02 c0       	push   0xc0023946
c001ea87:	e9 6b ff ff ff       	jmp    c001e9f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001ea8c:	0f ba e0 1e          	bt     eax,0x1e
c001ea90:	73 0d                	jae    c001ea9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001ea92:	83 ec 0c             	sub    esp,0xc
c001ea95:	68 5a 39 02 c0       	push   0xc002395a
c001ea9a:	e9 58 ff ff ff       	jmp    c001e9f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001ea9f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001eaa4:	74 17                	je     c001eabd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001eaa6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001eaab:	74 10                	je     c001eabd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001eaad:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001eab3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001eab7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001eabb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eabd:	31 c0                	xor    eax,eax
c001eabf:	83 c4 2c             	add    esp,0x2c
c001eac2:	5b                   	pop    ebx
c001eac3:	5e                   	pop    esi
c001eac4:	5f                   	pop    edi
c001eac5:	5d                   	pop    ebp
c001eac6:	c3                   	ret    
c001eac7:	90                   	nop

c001eac8 <SATAPI::eject()>:
c001eac8:	57                   	push   edi
c001eac9:	b9 03 00 00 00       	mov    ecx,0x3
c001eace:	83 ec 18             	sub    esp,0x18
c001ead1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ead5:	fc                   	cld    
c001ead6:	31 c0                	xor    eax,eax
c001ead8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eada:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001eadf:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001eae4:	50                   	push   eax
c001eae5:	6a 00                	push   0x0
c001eae7:	6a 00                	push   0x0
c001eae9:	6a 00                	push   0x0
c001eaeb:	6a 00                	push   0x0
c001eaed:	6a 02                	push   0x2
c001eaef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001eaf3:	50                   	push   eax
c001eaf4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001eaf8:	e8 e5 fc ff ff       	call   c001e7e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001eafd:	83 c4 38             	add    esp,0x38
c001eb00:	31 c0                	xor    eax,eax
c001eb02:	5f                   	pop    edi
c001eb03:	c3                   	ret    

c001eb04 <SATAPI::detectMedia()>:
c001eb04:	53                   	push   ebx
c001eb05:	83 ec 14             	sub    esp,0x14
c001eb08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001eb0c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001eb12:	e8 2d bf fe ff       	call   c000aa44 <VCache::writeWriteBuffer()>
c001eb17:	59                   	pop    ecx
c001eb18:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001eb1e:	e8 11 bf fe ff       	call   c000aa34 <VCache::invalidateReadBuffer()>
c001eb23:	c7 04 24 6f 39 02 c0 	mov    DWORD PTR [esp],0xc002396f
c001eb2a:	e8 1f 84 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eb2f:	83 c4 10             	add    esp,0x10
c001eb32:	31 c0                	xor    eax,eax
c001eb34:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001eb3b:	85 d2                	test   edx,edx
c001eb3d:	74 0f                	je     c001eb4e <SATAPI::detectMedia()+0x4a>
c001eb3f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001eb45:	75 07                	jne    c001eb4e <SATAPI::detectMedia()+0x4a>
c001eb47:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001eb4e:	40                   	inc    eax
c001eb4f:	83 f8 1a             	cmp    eax,0x1a
c001eb52:	75 e0                	jne    c001eb34 <SATAPI::detectMedia()+0x30>
c001eb54:	83 c4 08             	add    esp,0x8
c001eb57:	5b                   	pop    ebx
c001eb58:	c3                   	ret    
c001eb59:	90                   	nop

c001eb5a <SATAPI::open(int, int, void*)>:
c001eb5a:	56                   	push   esi
c001eb5b:	53                   	push   ebx
c001eb5c:	51                   	push   ecx
c001eb5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb65:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001eb6f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001eb75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb79:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb83:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001eb8d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001eb94:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001eb9a:	e8 95 02 ff ff       	call   c000ee34 <Phys::allocatePage()>
c001eb9f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001eba5:	89 c6                	mov    esi,eax
c001eba7:	e8 88 02 ff ff       	call   c000ee34 <Phys::allocatePage()>
c001ebac:	81 c6 00 10 00 00    	add    esi,0x1000
c001ebb2:	39 c6                	cmp    esi,eax
c001ebb4:	74 10                	je     c001ebc6 <SATAPI::open(int, int, void*)+0x6c>
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	68 84 39 02 c0       	push   0xc0023984
c001ebbe:	e8 77 00 ff ff       	call   c000ec3a <KePanic(char const*)>
c001ebc3:	83 c4 10             	add    esp,0x10
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	6a 02                	push   0x2
c001ebcb:	e8 11 34 ff ff       	call   c0011fe1 <Virt::allocateKernelVirtualPages(int)>
c001ebd0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ebd6:	6a 03                	push   0x3
c001ebd8:	50                   	push   eax
c001ebd9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ebdf:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001ebe5:	e8 d6 3a ff ff       	call   c00126c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ebea:	83 c4 14             	add    esp,0x14
c001ebed:	68 78 01 00 00       	push   0x178
c001ebf2:	e8 ef fc fe ff       	call   c000e8e6 <malloc>
c001ebf7:	83 c4 0c             	add    esp,0xc
c001ebfa:	6a 00                	push   0x0
c001ebfc:	68 ff ff ff 7f       	push   0x7fffffff
c001ec01:	6a 00                	push   0x0
c001ec03:	6a 00                	push   0x0
c001ec05:	53                   	push   ebx
c001ec06:	68 9a 39 02 c0       	push   0xc002399a
c001ec0b:	89 c6                	mov    esi,eax
c001ec0d:	50                   	push   eax
c001ec0e:	e8 91 b2 fe ff       	call   c0009ea4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ec13:	83 c4 14             	add    esp,0x14
c001ec16:	56                   	push   esi
c001ec17:	e8 48 b3 fe ff       	call   c0009f64 <LogicalDisk::assignDriveLetter()>
c001ec1c:	5a                   	pop    edx
c001ec1d:	59                   	pop    ecx
c001ec1e:	0f be c0             	movsx  eax,al
c001ec21:	50                   	push   eax
c001ec22:	68 e0 37 02 c0       	push   0xc00237e0
c001ec27:	e8 22 83 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ec2c:	58                   	pop    eax
c001ec2d:	5a                   	pop    edx
c001ec2e:	56                   	push   esi
c001ec2f:	53                   	push   ebx
c001ec30:	e8 0d a4 fe ff       	call   c0009042 <Device::addChild(Device*)>
c001ec35:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ec3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec3e:	e8 4b a8 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001ec43:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ec4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec4d:	e8 b2 fe ff ff       	call   c001eb04 <SATAPI::detectMedia()>
c001ec52:	83 c4 14             	add    esp,0x14
c001ec55:	31 c0                	xor    eax,eax
c001ec57:	5b                   	pop    ebx
c001ec58:	5e                   	pop    esi
c001ec59:	c3                   	ret    

c001ec5a <SATAPI::read(unsigned long long, int, void*)>:
c001ec5a:	55                   	push   ebp
c001ec5b:	57                   	push   edi
c001ec5c:	56                   	push   esi
c001ec5d:	53                   	push   ebx
c001ec5e:	83 ec 3c             	sub    esp,0x3c
c001ec61:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001ec65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ec69:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ec6d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ec71:	83 fd 04             	cmp    ebp,0x4
c001ec74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ec7c:	7e 10                	jle    c001ec8e <SATAPI::read(unsigned long long, int, void*)+0x34>
c001ec7e:	83 ec 0c             	sub    esp,0xc
c001ec81:	68 a8 39 02 c0       	push   0xc00239a8
c001ec86:	e8 af ff fe ff       	call   c000ec3a <KePanic(char const*)>
c001ec8b:	83 c4 10             	add    esp,0x10
c001ec8e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ec94:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ec9a:	51                   	push   ecx
c001ec9b:	50                   	push   eax
c001ec9c:	83 c0 02             	add    eax,0x2
c001ec9f:	c1 e0 07             	shl    eax,0x7
c001eca2:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001eca8:	50                   	push   eax
c001eca9:	52                   	push   edx
c001ecaa:	e8 cb e7 ff ff       	call   c001d47a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ecaf:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ecb3:	b9 03 00 00 00       	mov    ecx,0x3
c001ecb8:	fc                   	cld    
c001ecb9:	31 c0                	xor    eax,eax
c001ecbb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ecbd:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ecc2:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ecc7:	83 c4 0c             	add    esp,0xc
c001ecca:	6a 00                	push   0x0
c001eccc:	6a 00                	push   0x0
c001ecce:	6a 00                	push   0x0
c001ecd0:	6a 00                	push   0x0
c001ecd2:	6a 02                	push   0x2
c001ecd4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ecd8:	50                   	push   eax
c001ecd9:	53                   	push   ebx
c001ecda:	e8 03 fb ff ff       	call   c001e7e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ecdf:	83 c4 20             	add    esp,0x20
c001ece2:	85 c0                	test   eax,eax
c001ece4:	89 c6                	mov    esi,eax
c001ece6:	75 46                	jne    c001ed2e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001ece8:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ecec:	b9 03 00 00 00       	mov    ecx,0x3
c001ecf1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ecf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecf7:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ecfc:	0f c8                	bswap  eax
c001ecfe:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ed02:	89 e8                	mov    eax,ebp
c001ed04:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ed08:	50                   	push   eax
c001ed09:	55                   	push   ebp
c001ed0a:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001ed0e:	c1 e5 0b             	shl    ebp,0xb
c001ed11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ed15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ed19:	55                   	push   ebp
c001ed1a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ed1e:	50                   	push   eax
c001ed1f:	53                   	push   ebx
c001ed20:	e8 bd fa ff ff       	call   c001e7e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ed25:	83 c4 20             	add    esp,0x20
c001ed28:	85 c0                	test   eax,eax
c001ed2a:	89 c6                	mov    esi,eax
c001ed2c:	74 0c                	je     c001ed3a <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001ed2e:	83 ec 0c             	sub    esp,0xc
c001ed31:	53                   	push   ebx
c001ed32:	e8 cd fd ff ff       	call   c001eb04 <SATAPI::detectMedia()>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	83 c4 3c             	add    esp,0x3c
c001ed3d:	89 f0                	mov    eax,esi
c001ed3f:	5b                   	pop    ebx
c001ed40:	5e                   	pop    esi
c001ed41:	5f                   	pop    edi
c001ed42:	5d                   	pop    ebp
c001ed43:	c3                   	ret    

c001ed44 <IOAPIC::close(int, int, void*)>:
c001ed44:	b8 00 00 00 00       	mov    eax,0x0
c001ed49:	c3                   	ret    

c001ed4a <apicGetBase()>:
c001ed4a:	55                   	push   ebp
c001ed4b:	89 e5                	mov    ebp,esp
c001ed4d:	83 ec 08             	sub    esp,0x8
c001ed50:	83 ec 0c             	sub    esp,0xc
c001ed53:	68 0c 3a 02 c0       	push   0xc0023a0c
c001ed58:	e8 dd fe fe ff       	call   c000ec3a <KePanic(char const*)>
c001ed5d:	83 c4 10             	add    esp,0x10
c001ed60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ed65:	c9                   	leave  
c001ed66:	c3                   	ret    
c001ed67:	90                   	nop

c001ed68 <IOAPIC::IOAPIC()>:
c001ed68:	83 ec 0c             	sub    esp,0xc
c001ed6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6f:	83 ec 08             	sub    esp,0x8
c001ed72:	68 1b 3a 02 c0       	push   0xc0023a1b
c001ed77:	50                   	push   eax
c001ed78:	e8 27 a4 fe ff       	call   c00091a4 <Device::Device(char const*)>
c001ed7d:	83 c4 10             	add    esp,0x10
c001ed80:	ba 2c 3a 02 c0       	mov    edx,0xc0023a2c
c001ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed89:	89 10                	mov    DWORD PTR [eax],edx
c001ed8b:	90                   	nop
c001ed8c:	83 c4 0c             	add    esp,0xc
c001ed8f:	c3                   	ret    

c001ed90 <apicOpen()>:
c001ed90:	55                   	push   ebp
c001ed91:	89 e5                	mov    ebp,esp
c001ed93:	53                   	push   ebx
c001ed94:	83 ec 34             	sub    esp,0x34
c001ed97:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001ed9c:	83 f0 01             	xor    eax,0x1
c001ed9f:	0f b6 c0             	movzx  eax,al
c001eda2:	85 c0                	test   eax,eax
c001eda4:	0f 84 a3 00 00 00    	je     c001ee4d <apicOpen()+0xbd>
c001edaa:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001edae:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001edb3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001edb7:	0f b6 c0             	movzx  eax,al
c001edba:	39 c2                	cmp    edx,eax
c001edbc:	0f 83 84 00 00 00    	jae    c001ee46 <apicOpen()+0xb6>
c001edc2:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001edc9:	83 ec 0c             	sub    esp,0xc
c001edcc:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001edcf:	e8 12 fb fe ff       	call   c000e8e6 <malloc>
c001edd4:	83 c4 10             	add    esp,0x10
c001edd7:	89 c3                	mov    ebx,eax
c001edd9:	83 ec 0c             	sub    esp,0xc
c001eddc:	53                   	push   ebx
c001eddd:	e8 86 ff ff ff       	call   c001ed68 <IOAPIC::IOAPIC()>
c001ede2:	83 c4 10             	add    esp,0x10
c001ede5:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ede8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001edec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001edef:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001edf6:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001edfb:	83 c0 01             	add    eax,0x1
c001edfe:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001ee03:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001ee08:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ee0e:	83 ec 08             	sub    esp,0x8
c001ee11:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ee14:	50                   	push   eax
c001ee15:	e8 28 a2 fe ff       	call   c0009042 <Device::addChild(Device*)>
c001ee1a:	83 c4 10             	add    esp,0x10
c001ee1d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ee20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee22:	83 c0 08             	add    eax,0x8
c001ee25:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee27:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ee2b:	6a 00                	push   0x0
c001ee2d:	6a 00                	push   0x0
c001ee2f:	52                   	push   edx
c001ee30:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ee33:	ff d0                	call   eax
c001ee35:	83 c4 10             	add    esp,0x10
c001ee38:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ee3b:	83 c0 01             	add    eax,0x1
c001ee3e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ee41:	e9 68 ff ff ff       	jmp    c001edae <apicOpen()+0x1e>
c001ee46:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001ee4d:	e8 f8 fe ff ff       	call   c001ed4a <apicGetBase()>
c001ee52:	05 f0 00 00 00       	add    eax,0xf0
c001ee57:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ee5a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ee5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee5f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ee62:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ee69:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ee70:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ee73:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ee76:	89 10                	mov    DWORD PTR [eax],edx
c001ee78:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ee7f:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001ee84:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ee87:	7d 7c                	jge    c001ef05 <apicOpen()+0x175>
c001ee89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee8c:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee93:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ee96:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee99:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001eea0:	c1 e8 08             	shr    eax,0x8
c001eea3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eea7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eeaa:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001eeb1:	c1 e8 18             	shr    eax,0x18
c001eeb4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eeb7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eebb:	3d ff 00 00 00       	cmp    eax,0xff
c001eec0:	75 3a                	jne    c001eefc <apicOpen()+0x16c>
c001eec2:	e8 83 fe ff ff       	call   c001ed4a <apicGetBase()>
c001eec7:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eecb:	83 fa 01             	cmp    edx,0x1
c001eece:	75 07                	jne    c001eed7 <apicOpen()+0x147>
c001eed0:	ba 60 03 00 00       	mov    edx,0x360
c001eed5:	eb 05                	jmp    c001eedc <apicOpen()+0x14c>
c001eed7:	ba 50 03 00 00       	mov    edx,0x350
c001eedc:	01 d0                	add    eax,edx
c001eede:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eee1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eee4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eee6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eee9:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eef0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eef4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eef7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eefa:	89 10                	mov    DWORD PTR [eax],edx
c001eefc:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ef00:	e9 7a ff ff ff       	jmp    c001ee7f <apicOpen()+0xef>
c001ef05:	90                   	nop
c001ef06:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ef09:	c9                   	leave  
c001ef0a:	c3                   	ret    
c001ef0b:	90                   	nop

c001ef0c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ef0c:	55                   	push   ebp
c001ef0d:	89 e5                	mov    ebp,esp
c001ef0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ef18:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ef1b:	72 1d                	jb     c001ef3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ef1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef20:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ef26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef29:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ef2f:	01 d0                	add    eax,edx
c001ef31:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ef34:	73 04                	jae    c001ef3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ef36:	b0 01                	mov    al,0x1
c001ef38:	eb 02                	jmp    c001ef3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ef3a:	b0 00                	mov    al,0x0
c001ef3c:	5d                   	pop    ebp
c001ef3d:	c3                   	ret    

c001ef3e <IOAPIC::read(int)>:
c001ef3e:	55                   	push   ebp
c001ef3f:	89 e5                	mov    ebp,esp
c001ef41:	83 ec 10             	sub    esp,0x10
c001ef44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef47:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ef4d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ef50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ef53:	0f b6 d0             	movzx  edx,al
c001ef56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ef59:	89 10                	mov    DWORD PTR [eax],edx
c001ef5b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ef5e:	83 c0 10             	add    eax,0x10
c001ef61:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef63:	c9                   	leave  
c001ef64:	c3                   	ret    
c001ef65:	90                   	nop

c001ef66 <IOAPIC::open(int, int, void*)>:
c001ef66:	55                   	push   ebp
c001ef67:	89 e5                	mov    ebp,esp
c001ef69:	57                   	push   edi
c001ef6a:	56                   	push   esi
c001ef6b:	53                   	push   ebx
c001ef6c:	83 ec 04             	sub    esp,0x4
c001ef6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef72:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ef75:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef7e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef84:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001ef8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef8e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef97:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef9d:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001efa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efa7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001efad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efb0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001efb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efb9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001efbf:	0f b6 f0             	movzx  esi,al
c001efc2:	89 d0                	mov    eax,edx
c001efc4:	ba 00 00 00 00       	mov    edx,0x0
c001efc9:	89 c7                	mov    edi,eax
c001efcb:	83 e7 ff             	and    edi,0xffffffff
c001efce:	89 f9                	mov    ecx,edi
c001efd0:	0f b6 da             	movzx  ebx,dl
c001efd3:	89 c8                	mov    eax,ecx
c001efd5:	89 da                	mov    edx,ebx
c001efd7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001efda:	8d 5e 08             	lea    ebx,[esi+0x8]
c001efdd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001efe1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001efe5:	83 e0 00             	and    eax,0x0
c001efe8:	09 d0                	or     eax,edx
c001efea:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001efee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eff1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eff7:	8d 50 01             	lea    edx,[eax+0x1]
c001effa:	88 d1                	mov    cl,dl
c001effc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001efff:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f005:	0f b6 d0             	movzx  edx,al
c001f008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f00b:	83 c2 08             	add    edx,0x8
c001f00e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f012:	0f b6 c9             	movzx  ecx,cl
c001f015:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f01b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f01f:	6a 01                	push   0x1
c001f021:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f024:	e8 15 ff ff ff       	call   c001ef3e <IOAPIC::read(int)>
c001f029:	83 c4 08             	add    esp,0x8
c001f02c:	c1 f8 10             	sar    eax,0x10
c001f02f:	0f b6 c0             	movzx  eax,al
c001f032:	8d 50 01             	lea    edx,[eax+0x1]
c001f035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f038:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f03e:	b8 00 00 00 00       	mov    eax,0x0
c001f043:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f046:	5b                   	pop    ebx
c001f047:	5e                   	pop    esi
c001f048:	5f                   	pop    edi
c001f049:	5d                   	pop    ebp
c001f04a:	c3                   	ret    
c001f04b:	90                   	nop

c001f04c <IOAPIC::write(int, int)>:
c001f04c:	55                   	push   ebp
c001f04d:	89 e5                	mov    ebp,esp
c001f04f:	83 ec 10             	sub    esp,0x10
c001f052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f055:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f05b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f05e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f061:	0f b6 d0             	movzx  edx,al
c001f064:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f067:	89 10                	mov    DWORD PTR [eax],edx
c001f069:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f06c:	8d 50 10             	lea    edx,[eax+0x10]
c001f06f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f072:	89 02                	mov    DWORD PTR [edx],eax
c001f074:	90                   	nop
c001f075:	c9                   	leave  
c001f076:	c3                   	ret    
c001f077:	90                   	nop

c001f078 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f078:	55                   	push   ebp
c001f079:	89 e5                	mov    ebp,esp
c001f07b:	53                   	push   ebx
c001f07c:	83 ec 2c             	sub    esp,0x2c
c001f07f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f082:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f085:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f088:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f08b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f08e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f091:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f094:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f097:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f09a:	88 d8                	mov    al,bl
c001f09c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f09f:	88 c8                	mov    al,cl
c001f0a1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f0a4:	88 d0                	mov    al,dl
c001f0a6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f0a9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f0ad:	83 c0 08             	add    eax,0x8
c001f0b0:	d1 e0                	shl    eax,1
c001f0b2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f0b5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f0b9:	83 c0 08             	add    eax,0x8
c001f0bc:	d1 e0                	shl    eax,1
c001f0be:	83 c0 01             	add    eax,0x1
c001f0c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f0c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f0c7:	50                   	push   eax
c001f0c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0cb:	e8 6e fe ff ff       	call   c001ef3e <IOAPIC::read(int)>
c001f0d0:	83 c4 08             	add    esp,0x8
c001f0d3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f0d6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f0dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f0e0:	c1 e0 18             	shl    eax,0x18
c001f0e3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f0e6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f0e9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f0ec:	52                   	push   edx
c001f0ed:	50                   	push   eax
c001f0ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0f1:	e8 56 ff ff ff       	call   c001f04c <IOAPIC::write(int, int)>
c001f0f6:	83 c4 0c             	add    esp,0xc
c001f0f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0fc:	50                   	push   eax
c001f0fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f100:	e8 39 fe ff ff       	call   c001ef3e <IOAPIC::read(int)>
c001f105:	83 c4 08             	add    esp,0x8
c001f108:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f10b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f112:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f119:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f120:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f124:	85 c0                	test   eax,eax
c001f126:	74 09                	je     c001f131 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f128:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f12f:	eb 07                	jmp    c001f138 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f131:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f138:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f13c:	85 c0                	test   eax,eax
c001f13e:	74 09                	je     c001f149 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f140:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f147:	eb 07                	jmp    c001f150 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f149:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f150:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f157:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f15b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f15e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f161:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f164:	52                   	push   edx
c001f165:	50                   	push   eax
c001f166:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f169:	e8 de fe ff ff       	call   c001f04c <IOAPIC::write(int, int)>
c001f16e:	83 c4 0c             	add    esp,0xc
c001f171:	90                   	nop
c001f172:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f175:	c9                   	leave  
c001f176:	c3                   	ret    
c001f177:	90                   	nop

c001f178 <APICTimer::close(int, int, void*)>:
c001f178:	b8 00 00 00 00       	mov    eax,0x0
c001f17d:	c3                   	ret    
c001f17e:	66 90                	xchg   ax,ax

c001f180 <apicTimerHandler(regs*, void*)>:
c001f180:	83 ec 0c             	sub    esp,0xc
c001f183:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f187:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f189:	b8 10 27 00 00       	mov    eax,0x2710
c001f18e:	ba 00 00 00 00       	mov    edx,0x0
c001f193:	f7 f1                	div    ecx
c001f195:	83 ec 0c             	sub    esp,0xc
c001f198:	50                   	push   eax
c001f199:	e8 c2 b5 fe ff       	call   c000a760 <timerHandler(unsigned int)>
c001f19e:	83 c4 10             	add    esp,0x10
c001f1a1:	90                   	nop
c001f1a2:	83 c4 0c             	add    esp,0xc
c001f1a5:	c3                   	ret    
c001f1a6:	66 90                	xchg   ax,ax

c001f1a8 <APICTimer::open(int, int, void*)>:
c001f1a8:	83 ec 0c             	sub    esp,0xc
c001f1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1af:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1b1:	83 c0 24             	add    eax,0x24
c001f1b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1b6:	83 ec 08             	sub    esp,0x8
c001f1b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c1:	ff d0                	call   eax
c001f1c3:	83 c4 10             	add    esp,0x10
c001f1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f1ce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1dc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f1e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1e6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	51                   	push   ecx
c001f1f0:	6a 01                	push   0x1
c001f1f2:	68 80 f1 01 c0       	push   0xc001f180
c001f1f7:	52                   	push   edx
c001f1f8:	50                   	push   eax
c001f1f9:	e8 f0 9d fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1fe:	83 c4 20             	add    esp,0x20
c001f201:	89 c2                	mov    edx,eax
c001f203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f207:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f20d:	b8 00 00 00 00       	mov    eax,0x0
c001f212:	83 c4 0c             	add    esp,0xc
c001f215:	c3                   	ret    
c001f216:	66 90                	xchg   ax,ax

c001f218 <APICTimer::write(int)>:
c001f218:	83 ec 0c             	sub    esp,0xc
c001f21b:	83 ec 0c             	sub    esp,0xc
c001f21e:	68 50 3a 02 c0       	push   0xc0023a50
c001f223:	e8 12 fa fe ff       	call   c000ec3a <KePanic(char const*)>
c001f228:	83 c4 10             	add    esp,0x10
c001f22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f233:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f239:	90                   	nop
c001f23a:	83 c4 0c             	add    esp,0xc
c001f23d:	c3                   	ret    
c001f23e:	66 90                	xchg   ax,ax

c001f240 <APICTimer::APICTimer()>:
c001f240:	83 ec 0c             	sub    esp,0xc
c001f243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f247:	83 ec 08             	sub    esp,0x8
c001f24a:	68 60 3a 02 c0       	push   0xc0023a60
c001f24f:	50                   	push   eax
c001f250:	e8 3f b4 fe ff       	call   c000a694 <Timer::Timer(char const*)>
c001f255:	83 c4 10             	add    esp,0x10
c001f258:	ba 74 3a 02 c0       	mov    edx,0xc0023a74
c001f25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f261:	89 10                	mov    DWORD PTR [eax],edx
c001f263:	90                   	nop
c001f264:	83 c4 0c             	add    esp,0xc
c001f267:	c3                   	ret    

c001f268 <PIT::write(int)>:
c001f268:	83 ec 10             	sub    esp,0x10
c001f26b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f26f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f273:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f27d:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f282:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f287:	89 c2                	mov    edx,eax
c001f289:	c1 fa 1f             	sar    edx,0x1f
c001f28c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f290:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f294:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f29b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f2a0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f2a4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f2a9:	ee                   	out    dx,al
c001f2aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2ae:	0f b6 c0             	movzx  eax,al
c001f2b1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f2b8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f2bc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f2c0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f2c5:	ee                   	out    dx,al
c001f2c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2ca:	c1 f8 08             	sar    eax,0x8
c001f2cd:	0f b6 c0             	movzx  eax,al
c001f2d0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f2d7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f2db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f2df:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f2e4:	ee                   	out    dx,al
c001f2e5:	90                   	nop
c001f2e6:	83 c4 10             	add    esp,0x10
c001f2e9:	c3                   	ret    
c001f2ea:	66 90                	xchg   ax,ax

c001f2ec <pitHandler(regs*, void*)>:
c001f2ec:	83 ec 0c             	sub    esp,0xc
c001f2ef:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f2f5:	b8 10 27 00 00       	mov    eax,0x2710
c001f2fa:	89 c2                	mov    edx,eax
c001f2fc:	c1 fa 1f             	sar    edx,0x1f
c001f2ff:	f7 f9                	idiv   ecx
c001f301:	83 ec 0c             	sub    esp,0xc
c001f304:	50                   	push   eax
c001f305:	e8 56 b4 fe ff       	call   c000a760 <timerHandler(unsigned int)>
c001f30a:	83 c4 10             	add    esp,0x10
c001f30d:	90                   	nop
c001f30e:	83 c4 0c             	add    esp,0xc
c001f311:	c3                   	ret    
c001f312:	66 90                	xchg   ax,ax

c001f314 <PIT::open(int, int, void*)>:
c001f314:	83 ec 0c             	sub    esp,0xc
c001f317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f31b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f31d:	83 c0 24             	add    eax,0x24
c001f320:	8b 00                	mov    eax,DWORD PTR [eax]
c001f322:	83 ec 08             	sub    esp,0x8
c001f325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f32d:	ff d0                	call   eax
c001f32f:	83 c4 10             	add    esp,0x10
c001f332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f336:	83 ec 0c             	sub    esp,0xc
c001f339:	6a 00                	push   0x0
c001f33b:	6a 01                	push   0x1
c001f33d:	68 ec f2 01 c0       	push   0xc001f2ec
c001f342:	6a 00                	push   0x0
c001f344:	50                   	push   eax
c001f345:	e8 a4 9c fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f34a:	83 c4 20             	add    esp,0x20
c001f34d:	89 c2                	mov    edx,eax
c001f34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f353:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f359:	b8 00 00 00 00       	mov    eax,0x0
c001f35e:	83 c4 0c             	add    esp,0xc
c001f361:	c3                   	ret    
c001f362:	66 90                	xchg   ax,ax

c001f364 <PIT::close(int, int, void*)>:
c001f364:	83 ec 0c             	sub    esp,0xc
c001f367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f36b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f379:	6a 01                	push   0x1
c001f37b:	68 ec f2 01 c0       	push   0xc001f2ec
c001f380:	6a 00                	push   0x0
c001f382:	50                   	push   eax
c001f383:	e8 9c 9c fe ff       	call   c0009024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f388:	83 c4 10             	add    esp,0x10
c001f38b:	b8 00 00 00 00       	mov    eax,0x0
c001f390:	83 c4 0c             	add    esp,0xc
c001f393:	c3                   	ret    

c001f394 <PIT::PIT()>:
c001f394:	83 ec 0c             	sub    esp,0xc
c001f397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f39b:	83 ec 08             	sub    esp,0x8
c001f39e:	68 9c 3a 02 c0       	push   0xc0023a9c
c001f3a3:	50                   	push   eax
c001f3a4:	e8 eb b2 fe ff       	call   c000a694 <Timer::Timer(char const*)>
c001f3a9:	83 c4 10             	add    esp,0x10
c001f3ac:	ba c4 3a 02 c0       	mov    edx,0xc0023ac4
c001f3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b5:	89 10                	mov    DWORD PTR [eax],edx
c001f3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f3c1:	0f b6 d0             	movzx  edx,al
c001f3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f3d9:	0f b6 d0             	movzx  edx,al
c001f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f3ef:	8d 50 01             	lea    edx,[eax+0x1]
c001f3f2:	88 d1                	mov    cl,dl
c001f3f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f3f8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f3fe:	0f b6 d0             	movzx  edx,al
c001f401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f405:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f409:	83 e1 3f             	and    ecx,0x3f
c001f40c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f410:	90                   	nop
c001f411:	83 c4 0c             	add    esp,0xc
c001f414:	c3                   	ret    
c001f415:	66 90                	xchg   ax,ax
c001f417:	66 90                	xchg   ax,ax
c001f419:	66 90                	xchg   ax,ax
c001f41b:	66 90                	xchg   ax,ax
c001f41d:	66 90                	xchg   ax,ax
c001f41f:	90                   	nop

c001f420 <avxDetect>:
c001f420:	b8 01 00 00 00       	mov    eax,0x1
c001f425:	0f a2                	cpuid  
c001f427:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f42d:	74 15                	je     c001f444 <avxDetect.noAVX>
c001f42f:	b8 01 00 00 00       	mov    eax,0x1
c001f434:	0f a2                	cpuid  
c001f436:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f43c:	74 06                	je     c001f444 <avxDetect.noAVX>
c001f43e:	b8 01 00 00 00       	mov    eax,0x1
c001f443:	c3                   	ret    

c001f444 <avxDetect.noAVX>:
c001f444:	b8 00 00 00 00       	mov    eax,0x0
c001f449:	c3                   	ret    

c001f44a <avxSave>:
c001f44a:	53                   	push   ebx
c001f44b:	52                   	push   edx
c001f44c:	31 c0                	xor    eax,eax
c001f44e:	48                   	dec    eax
c001f44f:	89 c2                	mov    edx,eax
c001f451:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f455:	0f ae 23             	xsave  [ebx]
c001f458:	5a                   	pop    edx
c001f459:	5b                   	pop    ebx
c001f45a:	c3                   	ret    

c001f45b <avxLoad>:
c001f45b:	53                   	push   ebx
c001f45c:	52                   	push   edx
c001f45d:	31 c0                	xor    eax,eax
c001f45f:	48                   	dec    eax
c001f460:	89 c2                	mov    edx,eax
c001f462:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f466:	0f ae 2b             	xrstor [ebx]
c001f469:	5a                   	pop    edx
c001f46a:	5b                   	pop    ebx
c001f46b:	c3                   	ret    

c001f46c <avxInit>:
c001f46c:	e8 47 03 00 00       	call   c001f7b8 <sseInit>
c001f471:	50                   	push   eax
c001f472:	51                   	push   ecx
c001f473:	0f 20 e0             	mov    eax,cr4
c001f476:	0d 00 00 04 00       	or     eax,0x40000
c001f47b:	0f 22 e0             	mov    cr4,eax
c001f47e:	31 c9                	xor    ecx,ecx
c001f480:	0f 01 d0             	xgetbv 
c001f483:	0d 07 00 00 00       	or     eax,0x7
c001f488:	0f 01 d1             	xsetbv 
c001f48b:	59                   	pop    ecx
c001f48c:	58                   	pop    eax
c001f48d:	c3                   	ret    

c001f48e <avxClose>:
c001f48e:	c3                   	ret    
c001f48f:	90                   	nop

c001f490 <isr0>:
c001f490:	fa                   	cli    
c001f491:	68 00 00 00 00       	push   0x0
c001f496:	68 00 00 00 00       	push   0x0
c001f49b:	e9 56 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4a0 <isr1>:
c001f4a0:	fa                   	cli    
c001f4a1:	6a 00                	push   0x0
c001f4a3:	6a 01                	push   0x1
c001f4a5:	e9 4c 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4aa <isr2>:
c001f4aa:	fa                   	cli    
c001f4ab:	6a 00                	push   0x0
c001f4ad:	6a 02                	push   0x2
c001f4af:	e9 42 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4b4 <isr3>:
c001f4b4:	fa                   	cli    
c001f4b5:	6a 00                	push   0x0
c001f4b7:	6a 03                	push   0x3
c001f4b9:	e9 38 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4be <isr4>:
c001f4be:	fa                   	cli    
c001f4bf:	6a 00                	push   0x0
c001f4c1:	6a 04                	push   0x4
c001f4c3:	e9 2e 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4c8 <isr5>:
c001f4c8:	fa                   	cli    
c001f4c9:	6a 00                	push   0x0
c001f4cb:	6a 05                	push   0x5
c001f4cd:	e9 24 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4d2 <isr6>:
c001f4d2:	fa                   	cli    
c001f4d3:	6a 00                	push   0x0
c001f4d5:	6a 06                	push   0x6
c001f4d7:	e9 1a 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4dc <isr7>:
c001f4dc:	fa                   	cli    
c001f4dd:	6a 00                	push   0x0
c001f4df:	6a 07                	push   0x7
c001f4e1:	e9 10 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4e6 <isr8>:
c001f4e6:	fa                   	cli    
c001f4e7:	6a 08                	push   0x8
c001f4e9:	e9 08 01 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4ee <isr9>:
c001f4ee:	fa                   	cli    
c001f4ef:	6a 00                	push   0x0
c001f4f1:	6a 09                	push   0x9
c001f4f3:	e9 fe 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f4f8 <isr10>:
c001f4f8:	fa                   	cli    
c001f4f9:	6a 0a                	push   0xa
c001f4fb:	e9 f6 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f500 <isr11>:
c001f500:	fa                   	cli    
c001f501:	6a 0b                	push   0xb
c001f503:	e9 ee 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f508 <isr12>:
c001f508:	fa                   	cli    
c001f509:	6a 0c                	push   0xc
c001f50b:	e9 e6 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f510 <isr13>:
c001f510:	fa                   	cli    
c001f511:	6a 0d                	push   0xd
c001f513:	53                   	push   ebx
c001f514:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f518:	81 fb e6 f6 01 c0    	cmp    ebx,0xc001f6e6
c001f51e:	5b                   	pop    ebx
c001f51f:	0f 84 c3 01 00 00    	je     c001f6e8 <finishSignal2>
c001f525:	e9 cc 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f52a <isr14>:
c001f52a:	fa                   	cli    
c001f52b:	6a 0e                	push   0xe
c001f52d:	e9 c4 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f532 <isr15>:
c001f532:	fa                   	cli    
c001f533:	6a 00                	push   0x0
c001f535:	6a 0f                	push   0xf
c001f537:	e9 ba 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f53c <isr16>:
c001f53c:	fa                   	cli    
c001f53d:	6a 00                	push   0x0
c001f53f:	6a 10                	push   0x10
c001f541:	e9 b0 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f546 <isr17>:
c001f546:	fa                   	cli    
c001f547:	6a 00                	push   0x0
c001f549:	6a 11                	push   0x11
c001f54b:	e9 a6 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f550 <isr18>:
c001f550:	fa                   	cli    
c001f551:	6a 00                	push   0x0
c001f553:	6a 12                	push   0x12
c001f555:	e9 9c 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f55a <irq3>:
c001f55a:	fa                   	cli    
c001f55b:	6a 00                	push   0x0
c001f55d:	6a 23                	push   0x23
c001f55f:	e9 92 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f564 <irq4>:
c001f564:	fa                   	cli    
c001f565:	6a 00                	push   0x0
c001f567:	6a 24                	push   0x24
c001f569:	e9 88 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f56e <irq5>:
c001f56e:	fa                   	cli    
c001f56f:	6a 00                	push   0x0
c001f571:	6a 25                	push   0x25
c001f573:	e9 7e 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f578 <irq6>:
c001f578:	fa                   	cli    
c001f579:	6a 00                	push   0x0
c001f57b:	6a 26                	push   0x26
c001f57d:	e9 74 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f582 <irq7>:
c001f582:	fa                   	cli    
c001f583:	6a 00                	push   0x0
c001f585:	6a 27                	push   0x27
c001f587:	e9 6a 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f58c <irq8>:
c001f58c:	fa                   	cli    
c001f58d:	6a 00                	push   0x0
c001f58f:	6a 28                	push   0x28
c001f591:	e9 60 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f596 <irq9>:
c001f596:	fa                   	cli    
c001f597:	6a 00                	push   0x0
c001f599:	6a 29                	push   0x29
c001f59b:	e9 56 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f5a0 <irq10>:
c001f5a0:	fa                   	cli    
c001f5a1:	6a 00                	push   0x0
c001f5a3:	6a 2a                	push   0x2a
c001f5a5:	e9 4c 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f5aa <irq11>:
c001f5aa:	fa                   	cli    
c001f5ab:	6a 00                	push   0x0
c001f5ad:	6a 2b                	push   0x2b
c001f5af:	e9 42 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f5b4 <irq12>:
c001f5b4:	fa                   	cli    
c001f5b5:	6a 00                	push   0x0
c001f5b7:	6a 2c                	push   0x2c
c001f5b9:	e9 38 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f5be <irq13>:
c001f5be:	fa                   	cli    
c001f5bf:	6a 00                	push   0x0
c001f5c1:	6a 2d                	push   0x2d
c001f5c3:	e9 2e 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f5c8 <irq14>:
c001f5c8:	fa                   	cli    
c001f5c9:	6a 00                	push   0x0
c001f5cb:	6a 2e                	push   0x2e
c001f5cd:	e9 24 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f5d2 <irq15>:
c001f5d2:	fa                   	cli    
c001f5d3:	6a 00                	push   0x0
c001f5d5:	6a 2f                	push   0x2f
c001f5d7:	e9 1a 00 00 00       	jmp    c001f5f6 <int_common_stub>

c001f5dc <irq1>:
c001f5dc:	fa                   	cli    
c001f5dd:	6a 00                	push   0x0
c001f5df:	6a 21                	push   0x21
c001f5e1:	eb 13                	jmp    c001f5f6 <int_common_stub>

c001f5e3 <irq2>:
c001f5e3:	fa                   	cli    
c001f5e4:	6a 00                	push   0x0
c001f5e6:	6a 22                	push   0x22
c001f5e8:	eb 0c                	jmp    c001f5f6 <int_common_stub>

c001f5ea <isr96>:
c001f5ea:	6a 00                	push   0x0
c001f5ec:	6a 60                	push   0x60
c001f5ee:	fb                   	sti    
c001f5ef:	eb 37                	jmp    c001f628 <syscall_common_stub>

c001f5f1 <irq0>:
c001f5f1:	fa                   	cli    
c001f5f2:	6a 00                	push   0x0
c001f5f4:	6a 20                	push   0x20

c001f5f6 <int_common_stub>:
c001f5f6:	60                   	pusha  
c001f5f7:	1e                   	push   ds
c001f5f8:	06                   	push   es
c001f5f9:	0f a0                	push   fs
c001f5fb:	0f a8                	push   gs
c001f5fd:	66 b8 10 00          	mov    ax,0x10
c001f601:	66 8e d8             	mov    ds,ax
c001f604:	66 8e c0             	mov    es,ax
c001f607:	66 8e e0             	mov    fs,ax
c001f60a:	66 8e e8             	mov    gs,ax
c001f60d:	54                   	push   esp
c001f60e:	fc                   	cld    
c001f60f:	e8 40 e7 fe ff       	call   c000dd54 <int_handler>
c001f614:	81 c4 04 00 00 00    	add    esp,0x4
c001f61a:	0f a9                	pop    gs
c001f61c:	0f a1                	pop    fs
c001f61e:	07                   	pop    es
c001f61f:	1f                   	pop    ds
c001f620:	61                   	popa   
c001f621:	81 c4 08 00 00 00    	add    esp,0x8
c001f627:	cf                   	iret   

c001f628 <syscall_common_stub>:
c001f628:	60                   	pusha  
c001f629:	1e                   	push   ds
c001f62a:	06                   	push   es
c001f62b:	0f a0                	push   fs
c001f62d:	0f a8                	push   gs
c001f62f:	66 b8 10 00          	mov    ax,0x10
c001f633:	66 8e d8             	mov    ds,ax
c001f636:	66 8e c0             	mov    es,ax
c001f639:	66 8e e0             	mov    fs,ax
c001f63c:	66 8e e8             	mov    gs,ax
c001f63f:	54                   	push   esp
c001f640:	fc                   	cld    
c001f641:	e8 0e e7 fe ff       	call   c000dd54 <int_handler>
c001f646:	81 c4 04 00 00 00    	add    esp,0x4
c001f64c:	0f a9                	pop    gs
c001f64e:	0f a1                	pop    fs
c001f650:	07                   	pop    es
c001f651:	1f                   	pop    ds
c001f652:	e8 81 08 ff ff       	call   c000fed8 <KiCheckSignalZ>
c001f657:	3d 00 00 00 00       	cmp    eax,0x0
c001f65c:	0f 84 c0 00 00 00    	je     c001f722 <skipSignals>
c001f662:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f667:	61                   	popa   
c001f668:	53                   	push   ebx
c001f669:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f66f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f672:	5b                   	pop    ebx
c001f673:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f678:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f67b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f67e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f681:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f684:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f687:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f68a:	81 c4 08 00 00 00    	add    esp,0x8
c001f690:	5e                   	pop    esi
c001f691:	5b                   	pop    ebx
c001f692:	59                   	pop    ecx
c001f693:	5a                   	pop    edx
c001f694:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f697:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f69a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f69d:	52                   	push   edx
c001f69e:	51                   	push   ecx
c001f69f:	53                   	push   ebx
c001f6a0:	56                   	push   esi
c001f6a1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f6a7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f6aa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f6ad:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f6b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f6b6:	60                   	pusha  
c001f6b7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f6bd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f6c0:	89 e3                	mov    ebx,esp
c001f6c2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f6c5:	52                   	push   edx
c001f6c6:	68 e6 f6 01 c0       	push   0xc001f6e6
c001f6cb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f6ce:	89 dc                	mov    esp,ebx
c001f6d0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f6d3:	68 23 00 00 00       	push   0x23
c001f6d8:	51                   	push   ecx
c001f6d9:	68 02 02 00 00       	push   0x202
c001f6de:	68 1b 00 00 00       	push   0x1b
c001f6e3:	ff 36                	push   DWORD PTR [esi]
c001f6e5:	cf                   	iret   

c001f6e6 <finishSignal>:
c001f6e6:	cd 0f                	int    0xf

c001f6e8 <finishSignal2>:
c001f6e8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f6ee:	e8 62 08 ff ff       	call   c000ff55 <KiFinishSignalZ>
c001f6f3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f6f9:	68 23 00 00 00       	push   0x23
c001f6fe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f701:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f704:	68 1b 00 00 00       	push   0x1b
c001f709:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f70c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f70f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f712:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f715:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f718:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f71b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f71e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f721:	cf                   	iret   

c001f722 <skipSignals>:
c001f722:	61                   	popa   
c001f723:	81 c4 08 00 00 00    	add    esp,0x8
c001f729:	cf                   	iret   
c001f72a:	90                   	nop
c001f72b:	90                   	nop

c001f72c <irq16>:
c001f72c:	fa                   	cli    
c001f72d:	6a 00                	push   0x0
c001f72f:	6a 30                	push   0x30
c001f731:	e9 c0 fe ff ff       	jmp    c001f5f6 <int_common_stub>

c001f736 <irq17>:
c001f736:	fa                   	cli    
c001f737:	6a 00                	push   0x0
c001f739:	6a 31                	push   0x31
c001f73b:	e9 b6 fe ff ff       	jmp    c001f5f6 <int_common_stub>

c001f740 <irq18>:
c001f740:	fa                   	cli    
c001f741:	6a 00                	push   0x0
c001f743:	6a 32                	push   0x32
c001f745:	e9 ac fe ff ff       	jmp    c001f5f6 <int_common_stub>

c001f74a <irq19>:
c001f74a:	fa                   	cli    
c001f74b:	6a 00                	push   0x0
c001f74d:	6a 33                	push   0x33
c001f74f:	e9 a2 fe ff ff       	jmp    c001f5f6 <int_common_stub>

c001f754 <irq20>:
c001f754:	fa                   	cli    
c001f755:	6a 00                	push   0x0
c001f757:	6a 34                	push   0x34
c001f759:	e9 98 fe ff ff       	jmp    c001f5f6 <int_common_stub>

c001f75e <irq21>:
c001f75e:	fa                   	cli    
c001f75f:	6a 00                	push   0x0
c001f761:	6a 35                	push   0x35
c001f763:	e9 8e fe ff ff       	jmp    c001f5f6 <int_common_stub>

c001f768 <irq22>:
c001f768:	fa                   	cli    
c001f769:	6a 00                	push   0x0
c001f76b:	6a 36                	push   0x36
c001f76d:	e9 84 fe ff ff       	jmp    c001f5f6 <int_common_stub>

c001f772 <irq23>:
c001f772:	fa                   	cli    
c001f773:	6a 00                	push   0x0
c001f775:	6a 37                	push   0x37
c001f777:	e9 7a fe ff ff       	jmp    c001f5f6 <int_common_stub>
c001f77c:	66 90                	xchg   ax,ax
c001f77e:	66 90                	xchg   ax,ax

c001f780 <i386GetRDRAND>:
c001f780:	b9 64 00 00 00       	mov    ecx,0x64

c001f785 <retry>:
c001f785:	0f c7 f0             	rdrand eax
c001f788:	72 05                	jb     c001f78f <retry.done>
c001f78a:	e2 f9                	loop   c001f785 <retry>

c001f78c <retry.fail>:
c001f78c:	31 c0                	xor    eax,eax
c001f78e:	c3                   	ret    

c001f78f <retry.done>:
c001f78f:	c3                   	ret    

c001f790 <sseDetect>:
c001f790:	b8 01 00 00 00       	mov    eax,0x1
c001f795:	0f a2                	cpuid  
c001f797:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f79d:	74 06                	je     c001f7a5 <sseDetect.noSSE>
c001f79f:	b8 01 00 00 00       	mov    eax,0x1
c001f7a4:	c3                   	ret    

c001f7a5 <sseDetect.noSSE>:
c001f7a5:	31 c0                	xor    eax,eax
c001f7a7:	c3                   	ret    

c001f7a8 <sseSave>:
c001f7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ac:	0f ae 00             	fxsave [eax]
c001f7af:	c3                   	ret    

c001f7b0 <sseLoad>:
c001f7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7b4:	0f ae 08             	fxrstor [eax]
c001f7b7:	c3                   	ret    

c001f7b8 <sseInit>:
c001f7b8:	e8 48 00 00 00       	call   c001f805 <x87Init>
c001f7bd:	0f 20 e0             	mov    eax,cr4
c001f7c0:	66 0d 00 06          	or     ax,0x600
c001f7c4:	0f 22 e0             	mov    cr4,eax
c001f7c7:	c3                   	ret    

c001f7c8 <sseClose>:
c001f7c8:	c3                   	ret    
c001f7c9:	66 90                	xchg   ax,ax
c001f7cb:	66 90                	xchg   ax,ax
c001f7cd:	66 90                	xchg   ax,ax
c001f7cf:	90                   	nop

c001f7d0 <value_37F>:
c001f7d0:	7f 03                	jg     c001f7d5 <value_37A+0x1>

c001f7d2 <value_37E>:
c001f7d2:	7e 03                	jle    c001f7d7 <x87Detect+0x1>

c001f7d4 <value_37A>:
c001f7d4:	7a 03                	jp     c001f7d9 <x87Detect+0x3>

c001f7d6 <x87Detect>:
c001f7d6:	53                   	push   ebx
c001f7d7:	51                   	push   ecx
c001f7d8:	52                   	push   edx
c001f7d9:	b8 01 00 00 00       	mov    eax,0x1
c001f7de:	0f a2                	cpuid  
c001f7e0:	f7 c2 01 00 00 00    	test   edx,0x1
c001f7e6:	74 06                	je     c001f7ee <x87Detect.nox87>
c001f7e8:	b8 01 00 00 00       	mov    eax,0x1
c001f7ed:	c3                   	ret    

c001f7ee <x87Detect.nox87>:
c001f7ee:	b8 00 00 00 00       	mov    eax,0x0
c001f7f3:	5a                   	pop    edx
c001f7f4:	59                   	pop    ecx
c001f7f5:	5b                   	pop    ebx
c001f7f6:	c3                   	ret    

c001f7f7 <x87Save>:
c001f7f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fb:	dd 30                	fnsave [eax]
c001f7fd:	c3                   	ret    

c001f7fe <x87Load>:
c001f7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f802:	dd 20                	frstor [eax]
c001f804:	c3                   	ret    

c001f805 <x87Init>:
c001f805:	0f 20 c0             	mov    eax,cr0
c001f808:	66 25 fb ff          	and    ax,0xfffb
c001f80c:	66 0d 22 00          	or     ax,0x22
c001f810:	0f 22 c0             	mov    cr0,eax
c001f813:	db e3                	fninit 
c001f815:	0f 06                	clts   
c001f817:	d9 2d d4 f7 01 c0    	fldcw  WORD PTR ds:0xc001f7d4
c001f81d:	c3                   	ret    

c001f81e <x87Close>:
c001f81e:	c3                   	ret    
c001f81f:	90                   	nop

c001f820 <__do_global_ctors_aux>:
c001f820:	a1 d4 07 02 c0       	mov    eax,ds:0xc00207d4
c001f825:	83 f8 ff             	cmp    eax,0xffffffff
c001f828:	74 1a                	je     c001f844 <__do_global_ctors_aux+0x24>
c001f82a:	55                   	push   ebp
c001f82b:	89 e5                	mov    ebp,esp
c001f82d:	53                   	push   ebx
c001f82e:	52                   	push   edx
c001f82f:	bb d4 07 02 c0       	mov    ebx,0xc00207d4
c001f834:	ff d0                	call   eax
c001f836:	83 eb 04             	sub    ebx,0x4
c001f839:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f83b:	83 f8 ff             	cmp    eax,0xffffffff
c001f83e:	75 f4                	jne    c001f834 <__do_global_ctors_aux+0x14>
c001f840:	58                   	pop    eax
c001f841:	5b                   	pop    ebx
c001f842:	5d                   	pop    ebp
c001f843:	c3                   	ret    
c001f844:	c3                   	ret    
c001f845:	66 90                	xchg   ax,ax
c001f847:	90                   	nop

c001f848 <__divdi3>:
c001f848:	55                   	push   ebp
c001f849:	57                   	push   edi
c001f84a:	56                   	push   esi
c001f84b:	53                   	push   ebx
c001f84c:	83 ec 1c             	sub    esp,0x1c
c001f84f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f853:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f857:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f85a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f85e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f862:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f866:	85 db                	test   ebx,ebx
c001f868:	0f 88 8e 00 00 00    	js     c001f8fc <__divdi3+0xb4>
c001f86e:	89 dd                	mov    ebp,ebx
c001f870:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f878:	89 d3                	mov    ebx,edx
c001f87a:	85 d2                	test   edx,edx
c001f87c:	79 0d                	jns    c001f88b <__divdi3+0x43>
c001f87e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f882:	f7 d8                	neg    eax
c001f884:	83 d2 00             	adc    edx,0x0
c001f887:	f7 da                	neg    edx
c001f889:	89 d3                	mov    ebx,edx
c001f88b:	89 c7                	mov    edi,eax
c001f88d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f890:	85 db                	test   ebx,ebx
c001f892:	75 48                	jne    c001f8dc <__divdi3+0x94>
c001f894:	39 ef                	cmp    edi,ebp
c001f896:	76 24                	jbe    c001f8bc <__divdi3+0x74>
c001f898:	89 ea                	mov    edx,ebp
c001f89a:	f7 f7                	div    edi
c001f89c:	89 c1                	mov    ecx,eax
c001f89e:	31 f6                	xor    esi,esi
c001f8a0:	89 c8                	mov    eax,ecx
c001f8a2:	89 f2                	mov    edx,esi
c001f8a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8a8:	85 c9                	test   ecx,ecx
c001f8aa:	74 07                	je     c001f8b3 <__divdi3+0x6b>
c001f8ac:	f7 d8                	neg    eax
c001f8ae:	83 d2 00             	adc    edx,0x0
c001f8b1:	f7 da                	neg    edx
c001f8b3:	83 c4 1c             	add    esp,0x1c
c001f8b6:	5b                   	pop    ebx
c001f8b7:	5e                   	pop    esi
c001f8b8:	5f                   	pop    edi
c001f8b9:	5d                   	pop    ebp
c001f8ba:	c3                   	ret    
c001f8bb:	90                   	nop
c001f8bc:	85 ff                	test   edi,edi
c001f8be:	75 0b                	jne    c001f8cb <__divdi3+0x83>
c001f8c0:	b8 01 00 00 00       	mov    eax,0x1
c001f8c5:	31 d2                	xor    edx,edx
c001f8c7:	f7 f3                	div    ebx
c001f8c9:	89 c7                	mov    edi,eax
c001f8cb:	31 d2                	xor    edx,edx
c001f8cd:	89 e8                	mov    eax,ebp
c001f8cf:	f7 f7                	div    edi
c001f8d1:	89 c6                	mov    esi,eax
c001f8d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f8d6:	f7 f7                	div    edi
c001f8d8:	89 c1                	mov    ecx,eax
c001f8da:	eb c4                	jmp    c001f8a0 <__divdi3+0x58>
c001f8dc:	39 eb                	cmp    ebx,ebp
c001f8de:	77 3c                	ja     c001f91c <__divdi3+0xd4>
c001f8e0:	0f bd f3             	bsr    esi,ebx
c001f8e3:	83 f6 1f             	xor    esi,0x1f
c001f8e6:	75 40                	jne    c001f928 <__divdi3+0xe0>
c001f8e8:	39 eb                	cmp    ebx,ebp
c001f8ea:	72 09                	jb     c001f8f5 <__divdi3+0xad>
c001f8ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f8ef:	0f 87 97 00 00 00    	ja     c001f98c <__divdi3+0x144>
c001f8f5:	b9 01 00 00 00       	mov    ecx,0x1
c001f8fa:	eb a4                	jmp    c001f8a0 <__divdi3+0x58>
c001f8fc:	f7 d9                	neg    ecx
c001f8fe:	83 d3 00             	adc    ebx,0x0
c001f901:	f7 db                	neg    ebx
c001f903:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f906:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f90a:	89 dd                	mov    ebp,ebx
c001f90c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f914:	e9 5f ff ff ff       	jmp    c001f878 <__divdi3+0x30>
c001f919:	8d 76 00             	lea    esi,[esi+0x0]
c001f91c:	31 f6                	xor    esi,esi
c001f91e:	31 c9                	xor    ecx,ecx
c001f920:	e9 7b ff ff ff       	jmp    c001f8a0 <__divdi3+0x58>
c001f925:	8d 76 00             	lea    esi,[esi+0x0]
c001f928:	b8 20 00 00 00       	mov    eax,0x20
c001f92d:	29 f0                	sub    eax,esi
c001f92f:	89 f1                	mov    ecx,esi
c001f931:	d3 e3                	shl    ebx,cl
c001f933:	89 fa                	mov    edx,edi
c001f935:	88 c1                	mov    cl,al
c001f937:	d3 ea                	shr    edx,cl
c001f939:	09 da                	or     edx,ebx
c001f93b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f93f:	89 f1                	mov    ecx,esi
c001f941:	d3 e7                	shl    edi,cl
c001f943:	89 eb                	mov    ebx,ebp
c001f945:	88 c1                	mov    cl,al
c001f947:	d3 eb                	shr    ebx,cl
c001f949:	89 f1                	mov    ecx,esi
c001f94b:	d3 e5                	shl    ebp,cl
c001f94d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f950:	88 c1                	mov    cl,al
c001f952:	d3 ea                	shr    edx,cl
c001f954:	09 d5                	or     ebp,edx
c001f956:	89 e8                	mov    eax,ebp
c001f958:	89 da                	mov    edx,ebx
c001f95a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f95e:	89 d3                	mov    ebx,edx
c001f960:	89 c5                	mov    ebp,eax
c001f962:	f7 e7                	mul    edi
c001f964:	39 d3                	cmp    ebx,edx
c001f966:	72 18                	jb     c001f980 <__divdi3+0x138>
c001f968:	74 0a                	je     c001f974 <__divdi3+0x12c>
c001f96a:	89 e9                	mov    ecx,ebp
c001f96c:	31 f6                	xor    esi,esi
c001f96e:	e9 2d ff ff ff       	jmp    c001f8a0 <__divdi3+0x58>
c001f973:	90                   	nop
c001f974:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f977:	89 f1                	mov    ecx,esi
c001f979:	d3 e7                	shl    edi,cl
c001f97b:	39 c7                	cmp    edi,eax
c001f97d:	73 eb                	jae    c001f96a <__divdi3+0x122>
c001f97f:	90                   	nop
c001f980:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f983:	31 f6                	xor    esi,esi
c001f985:	e9 16 ff ff ff       	jmp    c001f8a0 <__divdi3+0x58>
c001f98a:	66 90                	xchg   ax,ax
c001f98c:	31 c9                	xor    ecx,ecx
c001f98e:	e9 0d ff ff ff       	jmp    c001f8a0 <__divdi3+0x58>
c001f993:	90                   	nop

c001f994 <__moddi3>:
c001f994:	55                   	push   ebp
c001f995:	57                   	push   edi
c001f996:	56                   	push   esi
c001f997:	53                   	push   ebx
c001f998:	83 ec 2c             	sub    esp,0x2c
c001f99b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f99f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f9a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f9a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f9ab:	85 db                	test   ebx,ebx
c001f9ad:	0f 88 85 00 00 00    	js     c001fa38 <__moddi3+0xa4>
c001f9b3:	89 de                	mov    esi,ebx
c001f9b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f9bd:	89 d7                	mov    edi,edx
c001f9bf:	85 d2                	test   edx,edx
c001f9c1:	79 09                	jns    c001f9cc <__moddi3+0x38>
c001f9c3:	f7 d8                	neg    eax
c001f9c5:	83 d2 00             	adc    edx,0x0
c001f9c8:	f7 da                	neg    edx
c001f9ca:	89 d7                	mov    edi,edx
c001f9cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9d0:	89 cd                	mov    ebp,ecx
c001f9d2:	85 ff                	test   edi,edi
c001f9d4:	75 52                	jne    c001fa28 <__moddi3+0x94>
c001f9d6:	89 c3                	mov    ebx,eax
c001f9d8:	39 f0                	cmp    eax,esi
c001f9da:	76 24                	jbe    c001fa00 <__moddi3+0x6c>
c001f9dc:	89 c8                	mov    eax,ecx
c001f9de:	89 f2                	mov    edx,esi
c001f9e0:	f7 f3                	div    ebx
c001f9e2:	89 d6                	mov    esi,edx
c001f9e4:	89 f0                	mov    eax,esi
c001f9e6:	31 d2                	xor    edx,edx
c001f9e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f9ec:	85 c9                	test   ecx,ecx
c001f9ee:	74 07                	je     c001f9f7 <__moddi3+0x63>
c001f9f0:	f7 d8                	neg    eax
c001f9f2:	83 d2 00             	adc    edx,0x0
c001f9f5:	f7 da                	neg    edx
c001f9f7:	83 c4 2c             	add    esp,0x2c
c001f9fa:	5b                   	pop    ebx
c001f9fb:	5e                   	pop    esi
c001f9fc:	5f                   	pop    edi
c001f9fd:	5d                   	pop    ebp
c001f9fe:	c3                   	ret    
c001f9ff:	90                   	nop
c001fa00:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fa04:	85 db                	test   ebx,ebx
c001fa06:	75 0d                	jne    c001fa15 <__moddi3+0x81>
c001fa08:	b8 01 00 00 00       	mov    eax,0x1
c001fa0d:	31 d2                	xor    edx,edx
c001fa0f:	f7 f7                	div    edi
c001fa11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa15:	89 f0                	mov    eax,esi
c001fa17:	31 d2                	xor    edx,edx
c001fa19:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa1d:	f7 f7                	div    edi
c001fa1f:	89 e8                	mov    eax,ebp
c001fa21:	f7 f7                	div    edi
c001fa23:	89 d6                	mov    esi,edx
c001fa25:	eb bd                	jmp    c001f9e4 <__moddi3+0x50>
c001fa27:	90                   	nop
c001fa28:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fa2c:	39 f7                	cmp    edi,esi
c001fa2e:	76 20                	jbe    c001fa50 <__moddi3+0xbc>
c001fa30:	89 c8                	mov    eax,ecx
c001fa32:	89 f2                	mov    edx,esi
c001fa34:	eb b2                	jmp    c001f9e8 <__moddi3+0x54>
c001fa36:	66 90                	xchg   ax,ax
c001fa38:	f7 d9                	neg    ecx
c001fa3a:	83 d3 00             	adc    ebx,0x0
c001fa3d:	f7 db                	neg    ebx
c001fa3f:	89 de                	mov    esi,ebx
c001fa41:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001fa49:	e9 6f ff ff ff       	jmp    c001f9bd <__moddi3+0x29>
c001fa4e:	66 90                	xchg   ax,ax
c001fa50:	0f bd c7             	bsr    eax,edi
c001fa53:	83 f0 1f             	xor    eax,0x1f
c001fa56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fa5a:	75 24                	jne    c001fa80 <__moddi3+0xec>
c001fa5c:	39 f7                	cmp    edi,esi
c001fa5e:	72 06                	jb     c001fa66 <__moddi3+0xd2>
c001fa60:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001fa64:	77 0c                	ja     c001fa72 <__moddi3+0xde>
c001fa66:	89 e9                	mov    ecx,ebp
c001fa68:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001fa6c:	19 fe                	sbb    esi,edi
c001fa6e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fa72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa76:	89 f2                	mov    edx,esi
c001fa78:	e9 6b ff ff ff       	jmp    c001f9e8 <__moddi3+0x54>
c001fa7d:	8d 76 00             	lea    esi,[esi+0x0]
c001fa80:	b8 20 00 00 00       	mov    eax,0x20
c001fa85:	89 c2                	mov    edx,eax
c001fa87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa8b:	29 da                	sub    edx,ebx
c001fa8d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fa91:	88 d9                	mov    cl,bl
c001fa93:	d3 e7                	shl    edi,cl
c001fa95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa99:	88 d1                	mov    cl,dl
c001fa9b:	d3 e8                	shr    eax,cl
c001fa9d:	09 c7                	or     edi,eax
c001fa9f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001faa3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001faa7:	89 d8                	mov    eax,ebx
c001faa9:	88 d9                	mov    cl,bl
c001faab:	d3 e7                	shl    edi,cl
c001faad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fab1:	89 f3                	mov    ebx,esi
c001fab3:	88 d1                	mov    cl,dl
c001fab5:	d3 eb                	shr    ebx,cl
c001fab7:	89 c7                	mov    edi,eax
c001fab9:	88 c1                	mov    cl,al
c001fabb:	d3 e6                	shl    esi,cl
c001fabd:	89 e8                	mov    eax,ebp
c001fabf:	88 d1                	mov    cl,dl
c001fac1:	d3 e8                	shr    eax,cl
c001fac3:	09 f0                	or     eax,esi
c001fac5:	89 f9                	mov    ecx,edi
c001fac7:	d3 e5                	shl    ebp,cl
c001fac9:	89 da                	mov    edx,ebx
c001facb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001facf:	89 d3                	mov    ebx,edx
c001fad1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fad5:	89 c6                	mov    esi,eax
c001fad7:	89 d1                	mov    ecx,edx
c001fad9:	39 d3                	cmp    ebx,edx
c001fadb:	72 27                	jb     c001fb04 <__moddi3+0x170>
c001fadd:	74 21                	je     c001fb00 <__moddi3+0x16c>
c001fadf:	29 f5                	sub    ebp,esi
c001fae1:	19 cb                	sbb    ebx,ecx
c001fae3:	89 de                	mov    esi,ebx
c001fae5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fae9:	d3 e6                	shl    esi,cl
c001faeb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001faef:	89 f9                	mov    ecx,edi
c001faf1:	d3 ed                	shr    ebp,cl
c001faf3:	09 ee                	or     esi,ebp
c001faf5:	89 f0                	mov    eax,esi
c001faf7:	d3 eb                	shr    ebx,cl
c001faf9:	89 da                	mov    edx,ebx
c001fafb:	e9 e8 fe ff ff       	jmp    c001f9e8 <__moddi3+0x54>
c001fb00:	39 c5                	cmp    ebp,eax
c001fb02:	73 db                	jae    c001fadf <__moddi3+0x14b>
c001fb04:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fb08:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fb0c:	89 d1                	mov    ecx,edx
c001fb0e:	89 c6                	mov    esi,eax
c001fb10:	eb cd                	jmp    c001fadf <__moddi3+0x14b>
c001fb12:	66 90                	xchg   ax,ax

c001fb14 <__udivdi3>:
c001fb14:	55                   	push   ebp
c001fb15:	57                   	push   edi
c001fb16:	56                   	push   esi
c001fb17:	53                   	push   ebx
c001fb18:	83 ec 1c             	sub    esp,0x1c
c001fb1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fb1f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fb23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fb27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fb2b:	85 d2                	test   edx,edx
c001fb2d:	75 41                	jne    c001fb70 <__udivdi3+0x5c>
c001fb2f:	39 f7                	cmp    edi,esi
c001fb31:	76 15                	jbe    c001fb48 <__udivdi3+0x34>
c001fb33:	89 e8                	mov    eax,ebp
c001fb35:	89 f2                	mov    edx,esi
c001fb37:	f7 f7                	div    edi
c001fb39:	31 db                	xor    ebx,ebx
c001fb3b:	89 da                	mov    edx,ebx
c001fb3d:	83 c4 1c             	add    esp,0x1c
c001fb40:	5b                   	pop    ebx
c001fb41:	5e                   	pop    esi
c001fb42:	5f                   	pop    edi
c001fb43:	5d                   	pop    ebp
c001fb44:	c3                   	ret    
c001fb45:	8d 76 00             	lea    esi,[esi+0x0]
c001fb48:	89 f9                	mov    ecx,edi
c001fb4a:	85 ff                	test   edi,edi
c001fb4c:	75 0b                	jne    c001fb59 <__udivdi3+0x45>
c001fb4e:	b8 01 00 00 00       	mov    eax,0x1
c001fb53:	31 d2                	xor    edx,edx
c001fb55:	f7 f7                	div    edi
c001fb57:	89 c1                	mov    ecx,eax
c001fb59:	31 d2                	xor    edx,edx
c001fb5b:	89 f0                	mov    eax,esi
c001fb5d:	f7 f1                	div    ecx
c001fb5f:	89 c3                	mov    ebx,eax
c001fb61:	89 e8                	mov    eax,ebp
c001fb63:	f7 f1                	div    ecx
c001fb65:	89 da                	mov    edx,ebx
c001fb67:	83 c4 1c             	add    esp,0x1c
c001fb6a:	5b                   	pop    ebx
c001fb6b:	5e                   	pop    esi
c001fb6c:	5f                   	pop    edi
c001fb6d:	5d                   	pop    ebp
c001fb6e:	c3                   	ret    
c001fb6f:	90                   	nop
c001fb70:	39 f2                	cmp    edx,esi
c001fb72:	77 1c                	ja     c001fb90 <__udivdi3+0x7c>
c001fb74:	0f bd da             	bsr    ebx,edx
c001fb77:	83 f3 1f             	xor    ebx,0x1f
c001fb7a:	75 24                	jne    c001fba0 <__udivdi3+0x8c>
c001fb7c:	39 f2                	cmp    edx,esi
c001fb7e:	72 08                	jb     c001fb88 <__udivdi3+0x74>
c001fb80:	39 ef                	cmp    edi,ebp
c001fb82:	0f 87 84 00 00 00    	ja     c001fc0c <__udivdi3+0xf8>
c001fb88:	b8 01 00 00 00       	mov    eax,0x1
c001fb8d:	eb ac                	jmp    c001fb3b <__udivdi3+0x27>
c001fb8f:	90                   	nop
c001fb90:	31 db                	xor    ebx,ebx
c001fb92:	31 c0                	xor    eax,eax
c001fb94:	89 da                	mov    edx,ebx
c001fb96:	83 c4 1c             	add    esp,0x1c
c001fb99:	5b                   	pop    ebx
c001fb9a:	5e                   	pop    esi
c001fb9b:	5f                   	pop    edi
c001fb9c:	5d                   	pop    ebp
c001fb9d:	c3                   	ret    
c001fb9e:	66 90                	xchg   ax,ax
c001fba0:	b8 20 00 00 00       	mov    eax,0x20
c001fba5:	29 d8                	sub    eax,ebx
c001fba7:	88 d9                	mov    cl,bl
c001fba9:	d3 e2                	shl    edx,cl
c001fbab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fbaf:	89 fa                	mov    edx,edi
c001fbb1:	88 c1                	mov    cl,al
c001fbb3:	d3 ea                	shr    edx,cl
c001fbb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbb9:	09 d1                	or     ecx,edx
c001fbbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fbbf:	88 d9                	mov    cl,bl
c001fbc1:	d3 e7                	shl    edi,cl
c001fbc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fbc7:	89 f7                	mov    edi,esi
c001fbc9:	88 c1                	mov    cl,al
c001fbcb:	d3 ef                	shr    edi,cl
c001fbcd:	88 d9                	mov    cl,bl
c001fbcf:	d3 e6                	shl    esi,cl
c001fbd1:	89 ea                	mov    edx,ebp
c001fbd3:	88 c1                	mov    cl,al
c001fbd5:	d3 ea                	shr    edx,cl
c001fbd7:	09 d6                	or     esi,edx
c001fbd9:	89 f0                	mov    eax,esi
c001fbdb:	89 fa                	mov    edx,edi
c001fbdd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fbe1:	89 d7                	mov    edi,edx
c001fbe3:	89 c6                	mov    esi,eax
c001fbe5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fbe9:	39 d7                	cmp    edi,edx
c001fbeb:	72 13                	jb     c001fc00 <__udivdi3+0xec>
c001fbed:	74 09                	je     c001fbf8 <__udivdi3+0xe4>
c001fbef:	89 f0                	mov    eax,esi
c001fbf1:	31 db                	xor    ebx,ebx
c001fbf3:	e9 43 ff ff ff       	jmp    c001fb3b <__udivdi3+0x27>
c001fbf8:	88 d9                	mov    cl,bl
c001fbfa:	d3 e5                	shl    ebp,cl
c001fbfc:	39 c5                	cmp    ebp,eax
c001fbfe:	73 ef                	jae    c001fbef <__udivdi3+0xdb>
c001fc00:	8d 46 ff             	lea    eax,[esi-0x1]
c001fc03:	31 db                	xor    ebx,ebx
c001fc05:	e9 31 ff ff ff       	jmp    c001fb3b <__udivdi3+0x27>
c001fc0a:	66 90                	xchg   ax,ax
c001fc0c:	31 c0                	xor    eax,eax
c001fc0e:	e9 28 ff ff ff       	jmp    c001fb3b <__udivdi3+0x27>
c001fc13:	90                   	nop

c001fc14 <__umoddi3>:
c001fc14:	55                   	push   ebp
c001fc15:	57                   	push   edi
c001fc16:	56                   	push   esi
c001fc17:	53                   	push   ebx
c001fc18:	83 ec 1c             	sub    esp,0x1c
c001fc1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fc1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fc23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fc27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fc2b:	89 da                	mov    edx,ebx
c001fc2d:	85 c0                	test   eax,eax
c001fc2f:	75 37                	jne    c001fc68 <__umoddi3+0x54>
c001fc31:	39 df                	cmp    edi,ebx
c001fc33:	76 13                	jbe    c001fc48 <__umoddi3+0x34>
c001fc35:	89 f0                	mov    eax,esi
c001fc37:	f7 f7                	div    edi
c001fc39:	89 d0                	mov    eax,edx
c001fc3b:	31 d2                	xor    edx,edx
c001fc3d:	83 c4 1c             	add    esp,0x1c
c001fc40:	5b                   	pop    ebx
c001fc41:	5e                   	pop    esi
c001fc42:	5f                   	pop    edi
c001fc43:	5d                   	pop    ebp
c001fc44:	c3                   	ret    
c001fc45:	8d 76 00             	lea    esi,[esi+0x0]
c001fc48:	89 fd                	mov    ebp,edi
c001fc4a:	85 ff                	test   edi,edi
c001fc4c:	75 0b                	jne    c001fc59 <__umoddi3+0x45>
c001fc4e:	b8 01 00 00 00       	mov    eax,0x1
c001fc53:	31 d2                	xor    edx,edx
c001fc55:	f7 f7                	div    edi
c001fc57:	89 c5                	mov    ebp,eax
c001fc59:	89 d8                	mov    eax,ebx
c001fc5b:	31 d2                	xor    edx,edx
c001fc5d:	f7 f5                	div    ebp
c001fc5f:	89 f0                	mov    eax,esi
c001fc61:	f7 f5                	div    ebp
c001fc63:	89 d0                	mov    eax,edx
c001fc65:	eb d4                	jmp    c001fc3b <__umoddi3+0x27>
c001fc67:	90                   	nop
c001fc68:	89 f1                	mov    ecx,esi
c001fc6a:	39 d8                	cmp    eax,ebx
c001fc6c:	76 0a                	jbe    c001fc78 <__umoddi3+0x64>
c001fc6e:	89 f0                	mov    eax,esi
c001fc70:	83 c4 1c             	add    esp,0x1c
c001fc73:	5b                   	pop    ebx
c001fc74:	5e                   	pop    esi
c001fc75:	5f                   	pop    edi
c001fc76:	5d                   	pop    ebp
c001fc77:	c3                   	ret    
c001fc78:	0f bd e8             	bsr    ebp,eax
c001fc7b:	83 f5 1f             	xor    ebp,0x1f
c001fc7e:	75 1c                	jne    c001fc9c <__umoddi3+0x88>
c001fc80:	39 d8                	cmp    eax,ebx
c001fc82:	72 04                	jb     c001fc88 <__umoddi3+0x74>
c001fc84:	39 f7                	cmp    edi,esi
c001fc86:	77 08                	ja     c001fc90 <__umoddi3+0x7c>
c001fc88:	89 da                	mov    edx,ebx
c001fc8a:	29 fe                	sub    esi,edi
c001fc8c:	19 c2                	sbb    edx,eax
c001fc8e:	89 f1                	mov    ecx,esi
c001fc90:	89 c8                	mov    eax,ecx
c001fc92:	83 c4 1c             	add    esp,0x1c
c001fc95:	5b                   	pop    ebx
c001fc96:	5e                   	pop    esi
c001fc97:	5f                   	pop    edi
c001fc98:	5d                   	pop    ebp
c001fc99:	c3                   	ret    
c001fc9a:	66 90                	xchg   ax,ax
c001fc9c:	ba 20 00 00 00       	mov    edx,0x20
c001fca1:	29 ea                	sub    edx,ebp
c001fca3:	89 e9                	mov    ecx,ebp
c001fca5:	d3 e0                	shl    eax,cl
c001fca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcab:	89 f8                	mov    eax,edi
c001fcad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fcb1:	88 d1                	mov    cl,dl
c001fcb3:	d3 e8                	shr    eax,cl
c001fcb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fcb9:	09 c1                	or     ecx,eax
c001fcbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fcbf:	89 e9                	mov    ecx,ebp
c001fcc1:	d3 e7                	shl    edi,cl
c001fcc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fcc7:	89 d8                	mov    eax,ebx
c001fcc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fccd:	88 d1                	mov    cl,dl
c001fccf:	d3 e8                	shr    eax,cl
c001fcd1:	89 c7                	mov    edi,eax
c001fcd3:	89 e9                	mov    ecx,ebp
c001fcd5:	d3 e3                	shl    ebx,cl
c001fcd7:	89 f0                	mov    eax,esi
c001fcd9:	88 d1                	mov    cl,dl
c001fcdb:	d3 e8                	shr    eax,cl
c001fcdd:	09 d8                	or     eax,ebx
c001fcdf:	89 e9                	mov    ecx,ebp
c001fce1:	d3 e6                	shl    esi,cl
c001fce3:	89 f3                	mov    ebx,esi
c001fce5:	89 fa                	mov    edx,edi
c001fce7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fceb:	89 d1                	mov    ecx,edx
c001fced:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fcf1:	89 c6                	mov    esi,eax
c001fcf3:	89 d7                	mov    edi,edx
c001fcf5:	39 d1                	cmp    ecx,edx
c001fcf7:	72 27                	jb     c001fd20 <__umoddi3+0x10c>
c001fcf9:	74 21                	je     c001fd1c <__umoddi3+0x108>
c001fcfb:	89 ca                	mov    edx,ecx
c001fcfd:	29 f3                	sub    ebx,esi
c001fcff:	19 fa                	sbb    edx,edi
c001fd01:	89 d0                	mov    eax,edx
c001fd03:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fd07:	d3 e0                	shl    eax,cl
c001fd09:	89 e9                	mov    ecx,ebp
c001fd0b:	d3 eb                	shr    ebx,cl
c001fd0d:	09 d8                	or     eax,ebx
c001fd0f:	d3 ea                	shr    edx,cl
c001fd11:	83 c4 1c             	add    esp,0x1c
c001fd14:	5b                   	pop    ebx
c001fd15:	5e                   	pop    esi
c001fd16:	5f                   	pop    edi
c001fd17:	5d                   	pop    ebp
c001fd18:	c3                   	ret    
c001fd19:	8d 76 00             	lea    esi,[esi+0x0]
c001fd1c:	39 c3                	cmp    ebx,eax
c001fd1e:	73 db                	jae    c001fcfb <__umoddi3+0xe7>
c001fd20:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fd24:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fd28:	89 d7                	mov    edi,edx
c001fd2a:	89 c6                	mov    esi,eax
c001fd2c:	eb cd                	jmp    c001fcfb <__umoddi3+0xe7>

Disassembly of section .init:

c001fd2e <_init>:
c001fd2e:	55                   	push   ebp
c001fd2f:	89 e5                	mov    ebp,esp
c001fd31:	e8 be 03 fe ff       	call   c00000f4 <frame_dummy>
c001fd36:	e8 e5 fa ff ff       	call   c001f820 <__do_global_ctors_aux>
c001fd3b:	5d                   	pop    ebp
c001fd3c:	c3                   	ret    

Disassembly of section .fini:

c001fd3d <_fini>:
c001fd3d:	55                   	push   ebp
c001fd3e:	89 e5                	mov    ebp,esp
c001fd40:	e8 3f 03 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fd45:	5d                   	pop    ebp
c001fd46:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fd48 <DriverlessDevice::~DriverlessDevice()>:
c001fd48:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c001fd4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd51:	89 10                	mov    DWORD PTR [eax],edx
c001fd53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd57:	50                   	push   eax
c001fd58:	e8 e7 91 fe ff       	call   c0008f44 <Device::~Device()>
c001fd5d:	83 c4 04             	add    esp,0x4
c001fd60:	90                   	nop
c001fd61:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fd62 <DriverlessDevice::~DriverlessDevice()>:
c001fd62:	83 ec 0c             	sub    esp,0xc
c001fd65:	83 ec 0c             	sub    esp,0xc
c001fd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd6c:	e8 d7 ff ff ff       	call   c001fd48 <DriverlessDevice::~DriverlessDevice()>
c001fd71:	83 c4 10             	add    esp,0x10
c001fd74:	83 ec 08             	sub    esp,0x8
c001fd77:	68 58 01 00 00       	push   0x158
c001fd7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd80:	e8 de c8 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c001fd85:	83 c4 10             	add    esp,0x10
c001fd88:	83 c4 0c             	add    esp,0xc
c001fd8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fd8c <LinkedList<Device>::addElement(Device*)>:
c001fd8c:	83 ec 0c             	sub    esp,0xc
c001fd8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd94:	75 10                	jne    c001fda6 <LinkedList<Device>::addElement(Device*)+0x1a>
c001fd96:	83 ec 0c             	sub    esp,0xc
c001fd99:	68 74 16 02 c0       	push   0xc0021674
c001fd9e:	e8 97 ee fe ff       	call   c000ec3a <KePanic(char const*)>
c001fda3:	83 c4 10             	add    esp,0x10
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdac:	85 c0                	test   eax,eax
c001fdae:	74 3a                	je     c001fdea <LinkedList<Device>::addElement(Device*)+0x5e>
c001fdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdb7:	85 c0                	test   eax,eax
c001fdb9:	74 2f                	je     c001fdea <LinkedList<Device>::addElement(Device*)+0x5e>
c001fdbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdc6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdd4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fddb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdde:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fde8:	eb 68                	jmp    c001fe52 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdee:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdf0:	85 c0                	test   eax,eax
c001fdf2:	75 4e                	jne    c001fe42 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdfb:	85 c0                	test   eax,eax
c001fdfd:	75 43                	jne    c001fe42 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fdff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe07:	89 10                	mov    DWORD PTR [eax],edx
c001fe09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe1b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fe25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe2c:	85 c0                	test   eax,eax
c001fe2e:	74 22                	je     c001fe52 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fe30:	83 ec 0c             	sub    esp,0xc
c001fe33:	68 96 16 02 c0       	push   0xc0021696
c001fe38:	e8 fd ed fe ff       	call   c000ec3a <KePanic(char const*)>
c001fe3d:	83 c4 10             	add    esp,0x10
c001fe40:	eb 10                	jmp    c001fe52 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fe42:	83 ec 0c             	sub    esp,0xc
c001fe45:	68 a0 16 02 c0       	push   0xc00216a0
c001fe4a:	e8 eb ed fe ff       	call   c000ec3a <KePanic(char const*)>
c001fe4f:	83 c4 10             	add    esp,0x10
c001fe52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe59:	8d 50 01             	lea    edx,[eax+0x1]
c001fe5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe63:	90                   	nop
c001fe64:	83 c4 0c             	add    esp,0xc
c001fe67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fe68 <LinkedList<Device>::LinkedList()>:
c001fe68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fea1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fea8:	90                   	nop
c001fea9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001feac <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001feac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb2:	85 c0                	test   eax,eax
c001feb4:	75 0e                	jne    c001fec4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001feb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001febd:	85 c0                	test   eax,eax
c001febf:	75 03                	jne    c001fec4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fec1:	b0 01                	mov    al,0x1
c001fec3:	c3                   	ret    
c001fec4:	b0 00                	mov    al,0x0
c001fec6:	90                   	nop
c001fec7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fec8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fecc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fece:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fed0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fed0:	83 ec 0c             	sub    esp,0xc
c001fed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed7:	8b 00                	mov    eax,DWORD PTR [eax]
c001fed9:	85 c0                	test   eax,eax
c001fedb:	75 17                	jne    c001fef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fedd:	83 ec 0c             	sub    esp,0xc
c001fee0:	68 10 19 02 c0       	push   0xc0021910
c001fee5:	e8 50 ed fe ff       	call   c000ec3a <KePanic(char const*)>
c001feea:	83 c4 10             	add    esp,0x10
c001feed:	e9 96 00 00 00       	jmp    c001ff88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fef2:	66 90                	xchg   ax,ax
c001fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fefb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fefe:	85 c0                	test   eax,eax
c001ff00:	0f 95 c0             	setne  al
c001ff03:	0f b6 c0             	movzx  eax,al
c001ff06:	85 c0                	test   eax,eax
c001ff08:	74 12                	je     c001ff1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	68 5b 19 02 c0       	push   0xc002195b
c001ff12:	e8 23 ed fe ff       	call   c000ec3a <KePanic(char const*)>
c001ff17:	83 c4 10             	add    esp,0x10
c001ff1a:	66 90                	xchg   ax,ax
c001ff1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ff25:	85 c0                	test   eax,eax
c001ff27:	0f 94 c0             	sete   al
c001ff2a:	0f b6 c0             	movzx  eax,al
c001ff2d:	85 c0                	test   eax,eax
c001ff2f:	74 33                	je     c001ff64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ff31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff4d:	83 f8 01             	cmp    eax,0x1
c001ff50:	74 22                	je     c001ff74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ff52:	83 ec 0c             	sub    esp,0xc
c001ff55:	68 34 19 02 c0       	push   0xc0021934
c001ff5a:	e8 db ec fe ff       	call   c000ec3a <KePanic(char const*)>
c001ff5f:	83 c4 10             	add    esp,0x10
c001ff62:	eb 10                	jmp    c001ff74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff71:	89 10                	mov    DWORD PTR [eax],edx
c001ff73:	90                   	nop
c001ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff7b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff85:	8d 76 00             	lea    esi,[esi+0x0]
c001ff88:	83 c4 0c             	add    esp,0xc
c001ff8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ff8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ff8c:	83 ec 0c             	sub    esp,0xc
c001ff8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff94:	75 12                	jne    c001ffa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ff96:	83 ec 0c             	sub    esp,0xc
c001ff99:	68 74 16 02 c0       	push   0xc0021674
c001ff9e:	e8 97 ec fe ff       	call   c000ec3a <KePanic(char const*)>
c001ffa3:	83 c4 10             	add    esp,0x10
c001ffa6:	66 90                	xchg   ax,ax
c001ffa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffac:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffae:	85 c0                	test   eax,eax
c001ffb0:	74 36                	je     c001ffe8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ffb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffb9:	85 c0                	test   eax,eax
c001ffbb:	74 2b                	je     c001ffe8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffc8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ffcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffcf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffd3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ffd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffdd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ffe4:	eb 6a                	jmp    c0020050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffe6:	66 90                	xchg   ax,ax
c001ffe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffec:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffee:	85 c0                	test   eax,eax
c001fff0:	75 4e                	jne    c0020040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fff9:	85 c0                	test   eax,eax
c001fffb:	75 43                	jne    c0020040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020001:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020005:	89 10                	mov    DWORD PTR [eax],edx
c0020007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002000f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020016:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020019:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020024:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020027:	85 c0                	test   eax,eax
c0020029:	74 25                	je     c0020050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002002b:	83 ec 0c             	sub    esp,0xc
c002002e:	68 96 16 02 c0       	push   0xc0021696
c0020033:	e8 02 ec fe ff       	call   c000ec3a <KePanic(char const*)>
c0020038:	83 c4 10             	add    esp,0x10
c002003b:	eb 13                	jmp    c0020050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002003d:	8d 76 00             	lea    esi,[esi+0x0]
c0020040:	83 ec 0c             	sub    esp,0xc
c0020043:	68 a0 16 02 c0       	push   0xc00216a0
c0020048:	e8 ed eb fe ff       	call   c000ec3a <KePanic(char const*)>
c002004d:	83 c4 10             	add    esp,0x10
c0020050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020054:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020057:	8d 50 01             	lea    edx,[eax+0x1]
c002005a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020061:	90                   	nop
c0020062:	83 c4 0c             	add    esp,0xc
c0020065:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020068 <ACPI::~ACPI()>:
c0020068:	83 ec 0c             	sub    esp,0xc
c002006b:	ba ac 1c 02 c0       	mov    edx,0xc0021cac
c0020070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020074:	89 10                	mov    DWORD PTR [eax],edx
c0020076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007a:	83 ec 0c             	sub    esp,0xc
c002007d:	50                   	push   eax
c002007e:	e8 c1 8e fe ff       	call   c0008f44 <Device::~Device()>
c0020083:	83 c4 10             	add    esp,0x10
c0020086:	90                   	nop
c0020087:	83 c4 0c             	add    esp,0xc
c002008a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002008c <ACPI::~ACPI()>:
c002008c:	83 ec 0c             	sub    esp,0xc
c002008f:	83 ec 0c             	sub    esp,0xc
c0020092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020096:	e8 cd ff ff ff       	call   c0020068 <ACPI::~ACPI()>
c002009b:	83 c4 10             	add    esp,0x10
c002009e:	83 ec 08             	sub    esp,0x8
c00200a1:	68 64 12 00 00       	push   0x1264
c00200a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200aa:	e8 b4 c5 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00200af:	83 c4 10             	add    esp,0x10
c00200b2:	83 c4 0c             	add    esp,0xc
c00200b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00200b8 <LinkedList<Device>::~LinkedList()>:
c00200b8:	90                   	nop
c00200b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00200bc <LinkedList<Device>::isEmpty()>:
c00200bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c2:	85 c0                	test   eax,eax
c00200c4:	75 0e                	jne    c00200d4 <LinkedList<Device>::isEmpty()+0x18>
c00200c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00200cd:	85 c0                	test   eax,eax
c00200cf:	75 03                	jne    c00200d4 <LinkedList<Device>::isEmpty()+0x18>
c00200d1:	b0 01                	mov    al,0x1
c00200d3:	c3                   	ret    
c00200d4:	b0 00                	mov    al,0x0
c00200d6:	90                   	nop
c00200d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00200d8 <LinkedList<Device>::getFirstElement()>:
c00200d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00200de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00200e0 <LinkedList<Device>::removeFirst()>:
c00200e0:	83 ec 0c             	sub    esp,0xc
c00200e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00200e9:	85 c0                	test   eax,eax
c00200eb:	75 17                	jne    c0020104 <LinkedList<Device>::removeFirst()+0x24>
c00200ed:	83 ec 0c             	sub    esp,0xc
c00200f0:	68 10 19 02 c0       	push   0xc0021910
c00200f5:	e8 40 eb fe ff       	call   c000ec3a <KePanic(char const*)>
c00200fa:	83 c4 10             	add    esp,0x10
c00200fd:	e9 92 00 00 00       	jmp    c0020194 <LinkedList<Device>::removeFirst()+0xb4>
c0020102:	66 90                	xchg   ax,ax
c0020104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002010b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020111:	85 c0                	test   eax,eax
c0020113:	74 13                	je     c0020128 <LinkedList<Device>::removeFirst()+0x48>
c0020115:	83 ec 0c             	sub    esp,0xc
c0020118:	68 5b 19 02 c0       	push   0xc002195b
c002011d:	e8 18 eb fe ff       	call   c000ec3a <KePanic(char const*)>
c0020122:	83 c4 10             	add    esp,0x10
c0020125:	8d 76 00             	lea    esi,[esi+0x0]
c0020128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012c:	8b 00                	mov    eax,DWORD PTR [eax]
c002012e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020134:	85 c0                	test   eax,eax
c0020136:	75 34                	jne    c002016c <LinkedList<Device>::removeFirst()+0x8c>
c0020138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020146:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002014d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020151:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020154:	83 f8 01             	cmp    eax,0x1
c0020157:	74 27                	je     c0020180 <LinkedList<Device>::removeFirst()+0xa0>
c0020159:	83 ec 0c             	sub    esp,0xc
c002015c:	68 34 19 02 c0       	push   0xc0021934
c0020161:	e8 d4 ea fe ff       	call   c000ec3a <KePanic(char const*)>
c0020166:	83 c4 10             	add    esp,0x10
c0020169:	eb 15                	jmp    c0020180 <LinkedList<Device>::removeFirst()+0xa0>
c002016b:	90                   	nop
c002016c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020170:	8b 00                	mov    eax,DWORD PTR [eax]
c0020172:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0020178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017c:	89 10                	mov    DWORD PTR [eax],edx
c002017e:	66 90                	xchg   ax,ax
c0020180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020184:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020187:	8d 50 ff             	lea    edx,[eax-0x1]
c002018a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020191:	8d 76 00             	lea    esi,[esi+0x0]
c0020194:	83 c4 0c             	add    esp,0xc
c0020197:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020198 <Computer::~Computer()>:
c0020198:	83 ec 0c             	sub    esp,0xc
c002019b:	ba 4c 1f 02 c0       	mov    edx,0xc0021f4c
c00201a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a4:	89 10                	mov    DWORD PTR [eax],edx
c00201a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201aa:	83 ec 0c             	sub    esp,0xc
c00201ad:	50                   	push   eax
c00201ae:	e8 91 8d fe ff       	call   c0008f44 <Device::~Device()>
c00201b3:	83 c4 10             	add    esp,0x10
c00201b6:	90                   	nop
c00201b7:	83 c4 0c             	add    esp,0xc
c00201ba:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00201bc <Computer::~Computer()>:
c00201bc:	83 ec 0c             	sub    esp,0xc
c00201bf:	83 ec 0c             	sub    esp,0xc
c00201c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c6:	e8 cd ff ff ff       	call   c0020198 <Computer::~Computer()>
c00201cb:	83 c4 10             	add    esp,0x10
c00201ce:	83 ec 08             	sub    esp,0x8
c00201d1:	68 6c 01 00 00       	push   0x16c
c00201d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201da:	e8 84 c4 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00201df:	83 c4 10             	add    esp,0x10
c00201e2:	83 c4 0c             	add    esp,0xc
c00201e5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00201e6 <idleCommon()>:
c00201e6:	83 ec 0c             	sub    esp,0xc
c00201e9:	fa                   	cli    
c00201ea:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c00201f0:	e8 db 52 ff ff       	call   c00154d0 <schedule()>
c00201f5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00201fa:	48                   	dec    eax
c00201fb:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0020200:	75 01                	jne    c0020203 <idleCommon()+0x1d>
c0020202:	fb                   	sti    
c0020203:	83 c4 0c             	add    esp,0xc
c0020206:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0020208 <LinkedList<UnixFile>::~LinkedList()>:
c0020208:	90                   	nop
c0020209:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002020a <LinkedList<UnixFile>::LinkedList()>:
c002020a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002020e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020218:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002021f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020223:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002022a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002022e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020238:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002023f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020243:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002024a:	90                   	nop
c002024b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002024c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002024c:	83 ec 0c             	sub    esp,0xc
c002024f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020254:	75 10                	jne    c0020266 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020256:	83 ec 0c             	sub    esp,0xc
c0020259:	68 74 16 02 c0       	push   0xc0021674
c002025e:	e8 d7 e9 fe ff       	call   c000ec3a <KePanic(char const*)>
c0020263:	83 c4 10             	add    esp,0x10
c0020266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026a:	8b 00                	mov    eax,DWORD PTR [eax]
c002026c:	85 c0                	test   eax,eax
c002026e:	74 34                	je     c00202a4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020277:	85 c0                	test   eax,eax
c0020279:	74 29                	je     c00202a4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002027b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020282:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020286:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020291:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002029b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00202a2:	eb 65                	jmp    c0020309 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00202a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00202aa:	85 c0                	test   eax,eax
c00202ac:	75 4b                	jne    c00202f9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00202ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202b5:	85 c0                	test   eax,eax
c00202b7:	75 40                	jne    c00202f9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00202b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202c1:	89 10                	mov    DWORD PTR [eax],edx
c00202c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00202ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00202dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202e3:	85 c0                	test   eax,eax
c00202e5:	74 22                	je     c0020309 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00202e7:	83 ec 0c             	sub    esp,0xc
c00202ea:	68 96 16 02 c0       	push   0xc0021696
c00202ef:	e8 46 e9 fe ff       	call   c000ec3a <KePanic(char const*)>
c00202f4:	83 c4 10             	add    esp,0x10
c00202f7:	eb 10                	jmp    c0020309 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00202f9:	83 ec 0c             	sub    esp,0xc
c00202fc:	68 a0 16 02 c0       	push   0xc00216a0
c0020301:	e8 34 e9 fe ff       	call   c000ec3a <KePanic(char const*)>
c0020306:	83 c4 10             	add    esp,0x10
c0020309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020310:	8d 50 01             	lea    edx,[eax+0x1]
c0020313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020317:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002031a:	90                   	nop
c002031b:	83 c4 0c             	add    esp,0xc
c002031e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020320 <LinkedList<UnixFile>::getFirstElement()>:
c0020320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020324:	8b 00                	mov    eax,DWORD PTR [eax]
c0020326:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0020328 <LinkedList<UnixFile>::removeFirst()>:
c0020328:	83 ec 0c             	sub    esp,0xc
c002032b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020331:	85 c0                	test   eax,eax
c0020333:	75 12                	jne    c0020347 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020335:	83 ec 0c             	sub    esp,0xc
c0020338:	68 10 19 02 c0       	push   0xc0021910
c002033d:	e8 f8 e8 fe ff       	call   c000ec3a <KePanic(char const*)>
c0020342:	83 c4 10             	add    esp,0x10
c0020345:	eb 7e                	jmp    c00203c5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002034b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002034e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020351:	85 c0                	test   eax,eax
c0020353:	74 10                	je     c0020365 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020355:	83 ec 0c             	sub    esp,0xc
c0020358:	68 5b 19 02 c0       	push   0xc002195b
c002035d:	e8 d8 e8 fe ff       	call   c000ec3a <KePanic(char const*)>
c0020362:	83 c4 10             	add    esp,0x10
c0020365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020369:	8b 00                	mov    eax,DWORD PTR [eax]
c002036b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002036e:	85 c0                	test   eax,eax
c0020370:	75 33                	jne    c00203a5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0020372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020376:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002037c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020380:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002038e:	83 f8 01             	cmp    eax,0x1
c0020391:	74 21                	je     c00203b4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020393:	83 ec 0c             	sub    esp,0xc
c0020396:	68 34 19 02 c0       	push   0xc0021934
c002039b:	e8 9a e8 fe ff       	call   c000ec3a <KePanic(char const*)>
c00203a0:	83 c4 10             	add    esp,0x10
c00203a3:	eb 0f                	jmp    c00203b4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00203a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00203ab:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00203ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b2:	89 10                	mov    DWORD PTR [eax],edx
c00203b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203bb:	8d 50 ff             	lea    edx,[eax-0x1]
c00203be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00203c5:	83 c4 0c             	add    esp,0xc
c00203c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00203ca <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00203ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00203d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00203d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00203db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00203dc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00203dc:	90                   	nop
c00203dd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00203e0 <ThreadControlBlock::ThreadControlBlock()>:
c00203e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203e4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00203eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ef:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00203f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203fa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020405:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002040c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020410:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002041b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002041f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020423:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020427:	90                   	nop
c0020428:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002042c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002042c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020430:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002043a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020445:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002044c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020450:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002045a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020465:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002046c:	90                   	nop
c002046d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002046e <CPU::~CPU()>:
c002046e:	83 ec 0c             	sub    esp,0xc
c0020471:	ba 84 30 02 c0       	mov    edx,0xc0023084
c0020476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047a:	89 10                	mov    DWORD PTR [eax],edx
c002047c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020480:	83 ec 0c             	sub    esp,0xc
c0020483:	50                   	push   eax
c0020484:	e8 bb 8a fe ff       	call   c0008f44 <Device::~Device()>
c0020489:	83 c4 10             	add    esp,0x10
c002048c:	90                   	nop
c002048d:	83 c4 0c             	add    esp,0xc
c0020490:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020492 <CPU::~CPU()>:
c0020492:	83 ec 0c             	sub    esp,0xc
c0020495:	83 ec 0c             	sub    esp,0xc
c0020498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002049c:	e8 cd ff ff ff       	call   c002046e <CPU::~CPU()>
c00204a1:	83 c4 10             	add    esp,0x10
c00204a4:	83 ec 08             	sub    esp,0x8
c00204a7:	68 78 11 00 00       	push   0x1178
c00204ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204b0:	e8 ae c1 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00204b5:	83 c4 10             	add    esp,0x10
c00204b8:	83 c4 0c             	add    esp,0xc
c00204bb:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00204bc <PCI::~PCI()>:
c00204bc:	83 ec 0c             	sub    esp,0xc
c00204bf:	ba e8 35 02 c0       	mov    edx,0xc00235e8
c00204c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c8:	89 10                	mov    DWORD PTR [eax],edx
c00204ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ce:	83 ec 0c             	sub    esp,0xc
c00204d1:	50                   	push   eax
c00204d2:	e8 49 84 fe ff       	call   c0008920 <Bus::~Bus()>
c00204d7:	83 c4 10             	add    esp,0x10
c00204da:	90                   	nop
c00204db:	83 c4 0c             	add    esp,0xc
c00204de:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00204e0 <PCI::~PCI()>:
c00204e0:	83 ec 0c             	sub    esp,0xc
c00204e3:	83 ec 0c             	sub    esp,0xc
c00204e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ea:	e8 cd ff ff ff       	call   c00204bc <PCI::~PCI()>
c00204ef:	83 c4 10             	add    esp,0x10
c00204f2:	83 ec 08             	sub    esp,0x8
c00204f5:	68 5c 01 00 00       	push   0x15c
c00204fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204fe:	e8 60 c1 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020503:	83 c4 10             	add    esp,0x10
c0020506:	83 c4 0c             	add    esp,0xc
c0020509:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002050a <IDE::~IDE()>:
c002050a:	83 ec 0c             	sub    esp,0xc
c002050d:	ba 20 37 02 c0       	mov    edx,0xc0023720
c0020512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020516:	89 10                	mov    DWORD PTR [eax],edx
c0020518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002051c:	83 ec 0c             	sub    esp,0xc
c002051f:	50                   	push   eax
c0020520:	e8 af 8e fe ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0020525:	83 c4 10             	add    esp,0x10
c0020528:	90                   	nop
c0020529:	83 c4 0c             	add    esp,0xc
c002052c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002052e <IDE::~IDE()>:
c002052e:	83 ec 0c             	sub    esp,0xc
c0020531:	83 ec 0c             	sub    esp,0xc
c0020534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020538:	e8 cd ff ff ff       	call   c002050a <IDE::~IDE()>
c002053d:	83 c4 10             	add    esp,0x10
c0020540:	83 ec 08             	sub    esp,0x8
c0020543:	68 70 02 00 00       	push   0x270
c0020548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002054c:	e8 12 c1 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020551:	83 c4 10             	add    esp,0x10
c0020554:	83 c4 0c             	add    esp,0xc
c0020557:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020558 <SATABus::~SATABus()>:
c0020558:	83 ec 0c             	sub    esp,0xc
c002055b:	ba 70 37 02 c0       	mov    edx,0xc0023770
c0020560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020564:	89 10                	mov    DWORD PTR [eax],edx
c0020566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002056a:	83 ec 0c             	sub    esp,0xc
c002056d:	50                   	push   eax
c002056e:	e8 61 8e fe ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0020573:	83 c4 10             	add    esp,0x10
c0020576:	90                   	nop
c0020577:	83 c4 0c             	add    esp,0xc
c002057a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002057c <SATABus::~SATABus()>:
c002057c:	83 ec 0c             	sub    esp,0xc
c002057f:	83 ec 0c             	sub    esp,0xc
c0020582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020586:	e8 cd ff ff ff       	call   c0020558 <SATABus::~SATABus()>
c002058b:	83 c4 10             	add    esp,0x10
c002058e:	83 ec 08             	sub    esp,0x8
c0020591:	68 64 01 00 00       	push   0x164
c0020596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002059a:	e8 c4 c0 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c002059f:	83 c4 10             	add    esp,0x10
c00205a2:	83 c4 0c             	add    esp,0xc
c00205a5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00205a6 <ATA::~ATA()>:
c00205a6:	83 ec 0c             	sub    esp,0xc
c00205a9:	ba b0 37 02 c0       	mov    edx,0xc00237b0
c00205ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b2:	89 10                	mov    DWORD PTR [eax],edx
c00205b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b8:	83 ec 0c             	sub    esp,0xc
c00205bb:	50                   	push   eax
c00205bc:	e8 f5 8e fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00205c1:	83 c4 10             	add    esp,0x10
c00205c4:	90                   	nop
c00205c5:	83 c4 0c             	add    esp,0xc
c00205c8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00205ca <ATA::~ATA()>:
c00205ca:	83 ec 0c             	sub    esp,0xc
c00205cd:	83 ec 0c             	sub    esp,0xc
c00205d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d4:	e8 cd ff ff ff       	call   c00205a6 <ATA::~ATA()>
c00205d9:	83 c4 10             	add    esp,0x10
c00205dc:	83 ec 08             	sub    esp,0x8
c00205df:	68 7c 01 00 00       	push   0x17c
c00205e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e8:	e8 76 c0 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00205ed:	83 c4 10             	add    esp,0x10
c00205f0:	83 c4 0c             	add    esp,0xc
c00205f3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00205f4 <ATAPI::~ATAPI()>:
c00205f4:	83 ec 0c             	sub    esp,0xc
c00205f7:	ba f8 37 02 c0       	mov    edx,0xc00237f8
c00205fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020600:	89 10                	mov    DWORD PTR [eax],edx
c0020602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020606:	83 ec 0c             	sub    esp,0xc
c0020609:	50                   	push   eax
c002060a:	e8 a7 8e fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c002060f:	83 c4 10             	add    esp,0x10
c0020612:	90                   	nop
c0020613:	83 c4 0c             	add    esp,0xc
c0020616:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020618 <ATAPI::~ATAPI()>:
c0020618:	83 ec 0c             	sub    esp,0xc
c002061b:	83 ec 0c             	sub    esp,0xc
c002061e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020622:	e8 cd ff ff ff       	call   c00205f4 <ATAPI::~ATAPI()>
c0020627:	83 c4 10             	add    esp,0x10
c002062a:	83 ec 08             	sub    esp,0x8
c002062d:	68 84 01 00 00       	push   0x184
c0020632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020636:	e8 28 c0 fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c002063b:	83 c4 10             	add    esp,0x10
c002063e:	83 c4 0c             	add    esp,0xc
c0020641:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020642 <SATA::~SATA()>:
c0020642:	83 ec 0c             	sub    esp,0xc
c0020645:	ba b8 38 02 c0       	mov    edx,0xc00238b8
c002064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064e:	89 10                	mov    DWORD PTR [eax],edx
c0020650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020654:	83 ec 0c             	sub    esp,0xc
c0020657:	50                   	push   eax
c0020658:	e8 59 8e fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c002065d:	83 c4 10             	add    esp,0x10
c0020660:	90                   	nop
c0020661:	83 c4 0c             	add    esp,0xc
c0020664:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020666 <SATA::~SATA()>:
c0020666:	83 ec 0c             	sub    esp,0xc
c0020669:	83 ec 0c             	sub    esp,0xc
c002066c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020670:	e8 cd ff ff ff       	call   c0020642 <SATA::~SATA()>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	83 ec 08             	sub    esp,0x8
c002067b:	68 7c 01 00 00       	push   0x17c
c0020680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020684:	e8 da bf fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020689:	83 c4 10             	add    esp,0x10
c002068c:	83 c4 0c             	add    esp,0xc
c002068f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020690 <SATAPI::~SATAPI()>:
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	ba dc 39 02 c0       	mov    edx,0xc00239dc
c0020698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069c:	89 10                	mov    DWORD PTR [eax],edx
c002069e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a2:	83 ec 0c             	sub    esp,0xc
c00206a5:	50                   	push   eax
c00206a6:	e8 0b 8e fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00206ab:	83 c4 10             	add    esp,0x10
c00206ae:	90                   	nop
c00206af:	83 c4 0c             	add    esp,0xc
c00206b2:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00206b4 <SATAPI::~SATAPI()>:
c00206b4:	83 ec 0c             	sub    esp,0xc
c00206b7:	83 ec 0c             	sub    esp,0xc
c00206ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206be:	e8 cd ff ff ff       	call   c0020690 <SATAPI::~SATAPI()>
c00206c3:	83 c4 10             	add    esp,0x10
c00206c6:	83 ec 08             	sub    esp,0x8
c00206c9:	68 84 01 00 00       	push   0x184
c00206ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206d2:	e8 8c bf fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00206d7:	83 c4 10             	add    esp,0x10
c00206da:	83 c4 0c             	add    esp,0xc
c00206dd:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00206de <IOAPIC::~IOAPIC()>:
c00206de:	83 ec 0c             	sub    esp,0xc
c00206e1:	ba 2c 3a 02 c0       	mov    edx,0xc0023a2c
c00206e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ea:	89 10                	mov    DWORD PTR [eax],edx
c00206ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206f0:	83 ec 0c             	sub    esp,0xc
c00206f3:	50                   	push   eax
c00206f4:	e8 4b 88 fe ff       	call   c0008f44 <Device::~Device()>
c00206f9:	83 c4 10             	add    esp,0x10
c00206fc:	90                   	nop
c00206fd:	83 c4 0c             	add    esp,0xc
c0020700:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020702 <IOAPIC::~IOAPIC()>:
c0020702:	83 ec 0c             	sub    esp,0xc
c0020705:	83 ec 0c             	sub    esp,0xc
c0020708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002070c:	e8 cd ff ff ff       	call   c00206de <IOAPIC::~IOAPIC()>
c0020711:	83 c4 10             	add    esp,0x10
c0020714:	83 ec 08             	sub    esp,0x8
c0020717:	68 68 01 00 00       	push   0x168
c002071c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020720:	e8 3e bf fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020725:	83 c4 10             	add    esp,0x10
c0020728:	83 c4 0c             	add    esp,0xc
c002072b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002072c <APICTimer::~APICTimer()>:
c002072c:	83 ec 0c             	sub    esp,0xc
c002072f:	ba 74 3a 02 c0       	mov    edx,0xc0023a74
c0020734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020738:	89 10                	mov    DWORD PTR [eax],edx
c002073a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002073e:	83 ec 0c             	sub    esp,0xc
c0020741:	50                   	push   eax
c0020742:	e8 85 9f fe ff       	call   c000a6cc <Timer::~Timer()>
c0020747:	83 c4 10             	add    esp,0x10
c002074a:	90                   	nop
c002074b:	83 c4 0c             	add    esp,0xc
c002074e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020750 <APICTimer::~APICTimer()>:
c0020750:	83 ec 0c             	sub    esp,0xc
c0020753:	83 ec 0c             	sub    esp,0xc
c0020756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002075a:	e8 cd ff ff ff       	call   c002072c <APICTimer::~APICTimer()>
c002075f:	83 c4 10             	add    esp,0x10
c0020762:	83 ec 08             	sub    esp,0x8
c0020765:	68 60 01 00 00       	push   0x160
c002076a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002076e:	e8 f0 be fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c0020773:	83 c4 10             	add    esp,0x10
c0020776:	83 c4 0c             	add    esp,0xc
c0020779:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002077c <PIT::~PIT()>:
c002077c:	83 ec 0c             	sub    esp,0xc
c002077f:	ba c4 3a 02 c0       	mov    edx,0xc0023ac4
c0020784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020788:	89 10                	mov    DWORD PTR [eax],edx
c002078a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002078e:	83 ec 0c             	sub    esp,0xc
c0020791:	50                   	push   eax
c0020792:	e8 35 9f fe ff       	call   c000a6cc <Timer::~Timer()>
c0020797:	83 c4 10             	add    esp,0x10
c002079a:	90                   	nop
c002079b:	83 c4 0c             	add    esp,0xc
c002079e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00207a0 <PIT::~PIT()>:
c00207a0:	83 ec 0c             	sub    esp,0xc
c00207a3:	83 ec 0c             	sub    esp,0xc
c00207a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207aa:	e8 cd ff ff ff       	call   c002077c <PIT::~PIT()>
c00207af:	83 c4 10             	add    esp,0x10
c00207b2:	83 ec 08             	sub    esp,0x8
c00207b5:	68 5c 01 00 00       	push   0x15c
c00207ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207be:	e8 a0 be fe ff       	call   c000c663 <operator delete(void*, unsigned long)>
c00207c3:	83 c4 10             	add    esp,0x10
c00207c6:	83 c4 0c             	add    esp,0xc
c00207c9:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be cb 22 02 c0       	mov    esi,0xc00222cb
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be e7 22 02 c0       	mov    esi,0xc00222e7
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
