
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 df ea 00 00       	call   c000eaff <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 44 02 c0       	mov    eax,0xc00244e8
c0000025:	3d e8 44 02 c0       	cmp    eax,0xc00244e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 44 02 c0       	push   0xc00244e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 44 02 c0       	mov    eax,0xc00244e8
c0000051:	2d e8 44 02 c0       	sub    eax,0xc00244e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 44 02 c0       	push   0xc00244e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 70 07 02 c0       	mov    ebx,0xc0020770
c0000097:	81 eb 6c 07 02 c0    	sub    ebx,0xc002076c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 6c 07 02 c0       	mov    esi,0xc002076c
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 44 02 c0       	push   0xc00244e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 e8 44 02 c0       	push   0xc00244e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 63 49 01 00       	call   c0014c10 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 bc 2c 01 00       	call   c0012f81 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 41 49 01 00       	call   c0014c10 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 4e 4e 01 00       	call   c001513c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f1 52 01 00       	call   c00155e8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 92 e3 00 00       	jmp    c000e711 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 07 02 c0 02 	test   BYTE PTR [edx-0x3ffdf880],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf880],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf880],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf880],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 07 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf880],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf880],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e8e:	e8 bb d9 00 00       	call   c000e84e <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 c8 d8 00 00       	call   c000e7f0 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 a3 d7 00 00       	call   c000e7ba <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 9e d7 00 00       	call   c000e7f0 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 94 d6 00 00       	call   c000e7ba <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 af d5 00 00       	call   c000e7ba <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 99 d5 00 00       	call   c000e7ba <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001313:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000136a:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c00013b3:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013ce:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001488:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000148e:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001495:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000155b:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001561:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001568:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 61 02 c0       	mov    edx,0xc0026100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c00016b6:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 84 08 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf77c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 15 82 01 00       	jmp    c001a1d0 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 3f 82 01 00       	jmp    c001a210 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 60 82 01 00       	jmp    c001a250 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 e0 09 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf620]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 e0 09 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf620]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 50 31 02 c0       	mov    edx,0xc0023150
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 9c 08 02 c0       	mov    edx,0xc002089c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 a2 08 02 c0       	mov    eax,0xc00208a2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 60 09 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf6a0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 ab 08 02 c0       	mov    eax,0xc00208ab
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 e0 09 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf620]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 30 09 02 c0       	mov    eax,0xc0020930
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 20 09 02 c0       	mov    ebx,0xc0020920
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 00 09 02 c0       	mov    eax,0xc0020900
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 10 09 02 c0       	mov    eax,0xc0020910
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba b2 08 02 c0       	mov    edx,0xc00208b2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba be 08 02 c0       	mov    edx,0xc00208be
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba d2 08 02 c0       	mov    edx,0xc00208d2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 8d 8a 00 00       	call   c000e8d0 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 85 8a 00 00       	call   c000e8e0 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 00 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020d00
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 00 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d00
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 00 0b 02 c0       	mov    eax,0xc0020b00
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 40 0a 02 c0       	mov    eax,0xc0020a40
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 00 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf600]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 00 0e 02 c0       	push   0xc0020e00
c0006327:	e8 48 48 01 00       	call   c001ab74 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 0e 0e 02 c0       	push   0xc0020e0e
c000635f:	e8 10 48 01 00       	call   c001ab74 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 79 47 01 00       	call   c001ab18 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 1d 0e 02 c0       	push   0xc0020e1d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000675b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006765:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000677d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067f6:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c000688d:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068ef:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000692c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069ec:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 20 0e 02 c0       	push   0xc0020e20
c0006a0f:	e8 60 41 01 00       	call   c001ab74 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 6e 41 01 00       	call   c001ab90 <iso_kprintfd>
c0006a22:	c7 04 24 25 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e25
c0006a29:	e8 46 41 01 00       	call   c001ab74 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a35:	e8 56 41 01 00       	call   c001ab90 <iso_kprintfd>
c0006a3a:	c7 04 24 2b 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e2b
c0006a41:	e8 2e 41 01 00       	call   c001ab74 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a4d:	e8 3e 41 01 00       	call   c001ab90 <iso_kprintfd>
c0006a52:	c7 04 24 31 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e31
c0006a59:	e8 16 41 01 00       	call   c001ab74 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a65:	e8 26 41 01 00       	call   c001ab90 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006acb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 1d 0e 02 c0       	push   0xc0020e1d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006c0a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006c10:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 3a 0e 02 c0       	push   0xc0020e3a
c0006c32:	e8 3d 3f 01 00       	call   c001ab74 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c67:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 45 0e 02 c0       	push   0xc0020e45
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 4c 0e 02 c0       	push   0xc0020e4c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006d05:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d28:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 53 0e 02 c0       	push   0xc0020e53
c0006d49:	e8 26 3e 01 00       	call   c001ab74 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 5e 0e 02 c0       	push   0xc0020e5e
c0006d64:	e8 0b 3e 01 00       	call   c001ab74 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 65 02 c0       	push   0xc0026540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 3d 7b 00 00       	call   c000e8d0 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d9f:	e8 2c 7b 00 00       	call   c000e8d0 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 17 7b 00 00       	call   c000e8d0 <malloc>
c0006db9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 fe 7a 00 00       	call   c000e8d0 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006dff:	e8 dc 7a 00 00       	call   c000e8e0 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 ce 7a 00 00       	call   c000e8e0 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 b4 7a 00 00       	call   c000e8e0 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 9f 7a 00 00       	call   c000e8e0 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 70 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf190]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 c0 0f 02 c0       	push   0xc0020fc0
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 d4 0f 02 c0       	push   0xc0020fd4
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 de 0f 02 c0       	push   0xc0020fde
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 e8 0f 02 c0       	push   0xc0020fe8
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 2c 11 02 c0       	push   0xc002112c
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 f2 0f 02 c0       	push   0xc0020ff2
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 4c 11 02 c0       	push   0xc002114c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 07 10 02 c0       	push   0xc0021007
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 21 10 02 c0       	push   0xc0021021
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 a0 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc560]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 74 11 02 c0       	push   0xc0021174
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 2c 11 02 c0       	push   0xc002112c
c00071bc:	e8 55 7a 00 00       	call   c000ec16 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 bc 11 02 c0       	push   0xc00211bc
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 bc 11 02 c0       	push   0xc00211bc
c00071eb:	e8 26 7a 00 00       	call   c000ec16 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 2c 10 02 c0       	push   0xc002102c
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 2c 10 02 c0       	push   0xc002102c
c0007217:	e8 fa 79 00 00       	call   c000ec16 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 49 10 02 c0       	push   0xc0021049
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 49 10 02 c0       	push   0xc0021049
c0007243:	e8 ce 79 00 00       	call   c000ec16 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 dc 11 02 c0       	push   0xc00211dc
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 dc 11 02 c0       	push   0xc00211dc
c000726f:	e8 a2 79 00 00       	call   c000ec16 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 00 12 02 c0       	push   0xc0021200
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 00 12 02 c0       	push   0xc0021200
c000729b:	e8 76 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 65 10 02 c0       	push   0xc0021065
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 65 10 02 c0       	push   0xc0021065
c00072c7:	e8 4a 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 81 10 02 c0       	push   0xc0021081
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 81 10 02 c0       	push   0xc0021081
c00072f3:	e8 1e 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 20 12 02 c0       	push   0xc0021220
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 20 12 02 c0       	push   0xc0021220
c000731f:	e8 f2 78 00 00       	call   c000ec16 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 44 12 02 c0       	push   0xc0021244
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 44 12 02 c0       	push   0xc0021244
c000734b:	e8 c6 78 00 00       	call   c000ec16 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 1e 75 00 00       	call   c000e8d0 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073bb:	68 63 12 02 c0       	push   0xc0021263
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 44 0d 00 00       	call   c000810c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 81 12 02 c0       	push   0xc0021281
c00073d7:	e8 3a 78 00 00       	call   c000ec16 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 41 0d 00 00       	call   c000812a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 9b 12 02 c0       	push   0xc002129b
c00073f8:	e8 19 78 00 00       	call   c000ec16 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 b5 12 02 c0       	push   0xc00212b5
c000743f:	e8 d2 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 cf 12 02 c0       	push   0xc00212cf
c000746f:	e8 a2 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 05 0d 00 00       	call   c0008188 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 24 62 00 00       	call   c000d6e5 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 0b 81 00 00       	call   c000f5e6 <KeRand()>
c00074db:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 e9 12 02 c0       	push   0xc00212e9
c0007510:	e8 01 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c000755b:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 73 02 c0       	push   0xc0027300
c00075d0:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075da:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 de 4e 00 00       	call   c000c4d5 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 cd 72 00 00       	call   c000e8d0 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000760c:	68 63 12 02 c0       	push   0xc0021263
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 f3 0a 00 00       	call   c000810c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 f2 12 02 c0       	push   0xc00212f2
c0007628:	e8 e9 75 00 00       	call   c000ec16 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 b5 0d 00 00       	call   c00083ee <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 e0 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 0f 13 02 c0       	push   0xc002130f
c0007659:	e8 b8 75 00 00       	call   c000ec16 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 1e 0b 00 00       	call   c0008188 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 a6 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 2c 13 02 c0       	push   0xc002132c
c0007693:	e8 7e 75 00 00       	call   c000ec16 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 84 0a 00 00       	call   c0008188 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007776:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 3e 71 00 00       	call   c000e8d0 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000779b:	68 63 12 02 c0       	push   0xc0021263
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 64 09 00 00       	call   c000810c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 47 13 02 c0       	push   0xc0021347
c00077b7:	e8 5a 74 00 00       	call   c000ec16 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 24 0c 00 00       	call   c00083ee <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 4f 09 00 00       	call   c000812a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 62 13 02 c0       	push   0xc0021362
c00077ea:	e8 27 74 00 00       	call   c000ec16 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 39 09 00 00       	call   c0008188 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 1b 09 00 00       	call   c0008188 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 17 70 00 00       	call   c000e8d0 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 41 08 00 00       	call   c000810c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 4a 08 00 00       	call   c000812a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 b1 0a 00 00       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 8b 07 00 00       	call   c0008188 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 72 07 00 00       	call   c0008188 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 8d 6e 00 00       	call   c000e8d0 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 b9 06 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 7d 13 02 c0       	mov    esi,0xc002137d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 4e 06 00 00       	call   c0008188 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 36 06 00 00       	call   c0008188 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 3c 14 02 c0       	mov    edx,0xc002143c
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 05 a0 00 00       	call   c0011cda <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 5a 49 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 58 14 02 c0       	mov    edx,0xc0021458
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 b7 9f 00 00       	call   c0011cda <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 0c 49 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 b6 48 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 f0 6a 00 00       	call   c000e8d0 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 88 25 01 00       	call   c001a370 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 dc 6a 00 00       	call   c000e8d0 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 a2 34 01 00       	call   c001b29e <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 84 2a 02 c0       	push   0xc0022a84
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 86 13 02 c0       	push   0xc0021386
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 a1 13 02 c0       	push   0xc00213a1
c0008018:	e8 f9 6b 00 00       	call   c000ec16 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 ac 9a 00 00       	call   c0011af4 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 3c 14 02 c0       	mov    edx,0xc002143c
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000809a:	83 e8 41             	sub    eax,0x41
c000809d:	88 c2                	mov    dl,al
c000809f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080bb:	0f b6 c0             	movzx  eax,al
c00080be:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080c5:	85 c0                	test   eax,eax
c00080c7:	74 3e                	je     c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d3:	0f b6 c0             	movzx  eax,al
c00080d6:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e3:	85 c0                	test   eax,eax
c00080e5:	75 20                	jne    c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f1:	0f b6 c0             	movzx  eax,al
c00080f4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080fb:	83 ec 0c             	sub    esp,0xc
c00080fe:	50                   	push   eax
c00080ff:	e8 0a 1f 00 00       	call   c000a00e <LogicalDisk::mount()>
c0008104:	83 c4 10             	add    esp,0x10
c0008107:	90                   	nop
c0008108:	83 c4 1c             	add    esp,0x1c
c000810b:	c3                   	ret    

c000810c <File::File(char const*, Process*)>:
c000810c:	83 ec 0c             	sub    esp,0xc
c000810f:	6a 01                	push   0x1
c0008111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811d:	e8 0c ff ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008122:	83 c4 10             	add    esp,0x10
c0008125:	90                   	nop
c0008126:	83 c4 0c             	add    esp,0xc
c0008129:	c3                   	ret    

c000812a <File::open(FileOpenMode)>:
c000812a:	53                   	push   ebx
c000812b:	b8 0b 00 00 00       	mov    eax,0xb
c0008130:	83 ec 08             	sub    esp,0x8
c0008133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008137:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000813e:	83 fa 19             	cmp    edx,0x19
c0008141:	77 40                	ja     c0008183 <File::open(FileOpenMode)+0x59>
c0008143:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000814a:	85 d2                	test   edx,edx
c000814c:	74 35                	je     c0008183 <File::open(FileOpenMode)+0x59>
c000814e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008154:	85 d2                	test   edx,edx
c0008156:	74 2b                	je     c0008183 <File::open(FileOpenMode)+0x59>
c0008158:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000815c:	b8 06 00 00 00       	mov    eax,0x6
c0008161:	75 20                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c0008163:	8b 02                	mov    eax,DWORD PTR [edx]
c0008165:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000816b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000816f:	51                   	push   ecx
c0008170:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008173:	51                   	push   ecx
c0008174:	52                   	push   edx
c0008175:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008178:	83 c4 10             	add    esp,0x10
c000817b:	85 c0                	test   eax,eax
c000817d:	75 04                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c000817f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008183:	83 c4 08             	add    esp,0x8
c0008186:	5b                   	pop    ebx
c0008187:	c3                   	ret    

c0008188 <File::close()>:
c0008188:	53                   	push   ebx
c0008189:	b8 0b 00 00 00       	mov    eax,0xb
c000818e:	83 ec 08             	sub    esp,0x8
c0008191:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008195:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000819c:	83 f9 19             	cmp    ecx,0x19
c000819f:	77 41                	ja     c00081e2 <File::close()+0x5a>
c00081a1:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081a8:	85 db                	test   ebx,ebx
c00081aa:	74 36                	je     c00081e2 <File::close()+0x5a>
c00081ac:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b3:	74 2d                	je     c00081e2 <File::close()+0x5a>
c00081b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081b9:	b8 05 00 00 00       	mov    eax,0x5
c00081be:	74 22                	je     c00081e2 <File::close()+0x5a>
c00081c0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081c4:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d1:	53                   	push   ebx
c00081d2:	53                   	push   ebx
c00081d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081d5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081db:	50                   	push   eax
c00081dc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081df:	83 c4 10             	add    esp,0x10
c00081e2:	83 c4 08             	add    esp,0x8
c00081e5:	5b                   	pop    ebx
c00081e6:	c3                   	ret    
c00081e7:	90                   	nop

c00081e8 <File::seek(unsigned long long)>:
c00081e8:	56                   	push   esi
c00081e9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ee:	53                   	push   ebx
c00081ef:	51                   	push   ecx
c00081f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00081fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008203:	83 fa 19             	cmp    edx,0x19
c0008206:	77 31                	ja     c0008239 <File::seek(unsigned long long)+0x51>
c0008208:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000820f:	85 d2                	test   edx,edx
c0008211:	74 26                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008213:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008219:	85 d2                	test   edx,edx
c000821b:	74 1c                	je     c0008239 <File::seek(unsigned long long)+0x51>
c000821d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008221:	b8 05 00 00 00       	mov    eax,0x5
c0008226:	74 11                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008228:	8b 02                	mov    eax,DWORD PTR [edx]
c000822a:	53                   	push   ebx
c000822b:	51                   	push   ecx
c000822c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008232:	52                   	push   edx
c0008233:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008236:	83 c4 10             	add    esp,0x10
c0008239:	5a                   	pop    edx
c000823a:	5b                   	pop    ebx
c000823b:	5e                   	pop    esi
c000823c:	c3                   	ret    
c000823d:	90                   	nop

c000823e <File::truncate(unsigned long long)>:
c000823e:	56                   	push   esi
c000823f:	b8 0b 00 00 00       	mov    eax,0xb
c0008244:	53                   	push   ebx
c0008245:	51                   	push   ecx
c0008246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000824a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000824e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008252:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008259:	83 fa 19             	cmp    edx,0x19
c000825c:	77 31                	ja     c000828f <File::truncate(unsigned long long)+0x51>
c000825e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008265:	85 d2                	test   edx,edx
c0008267:	74 26                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008269:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000826f:	85 d2                	test   edx,edx
c0008271:	74 1c                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008273:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008277:	b8 05 00 00 00       	mov    eax,0x5
c000827c:	74 11                	je     c000828f <File::truncate(unsigned long long)+0x51>
c000827e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008280:	53                   	push   ebx
c0008281:	51                   	push   ecx
c0008282:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008288:	52                   	push   edx
c0008289:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	5a                   	pop    edx
c0008290:	5b                   	pop    ebx
c0008291:	5e                   	pop    esi
c0008292:	c3                   	ret    
c0008293:	90                   	nop

c0008294 <File::tell(unsigned long long*)>:
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	b8 0b 00 00 00       	mov    eax,0xb
c000829c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082a7:	83 fa 19             	cmp    edx,0x19
c00082aa:	77 34                	ja     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082ac:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b3:	85 d2                	test   edx,edx
c00082b5:	74 29                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082b7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082bd:	85 d2                	test   edx,edx
c00082bf:	74 1f                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082c1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082c5:	b8 05 00 00 00       	mov    eax,0x5
c00082ca:	74 14                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082cc:	50                   	push   eax
c00082cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00082cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082d9:	52                   	push   edx
c00082da:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082dd:	83 c4 10             	add    esp,0x10
c00082e0:	83 c4 0c             	add    esp,0xc
c00082e3:	c3                   	ret    

c00082e4 <File::rewind()>:
c00082e4:	83 ec 10             	sub    esp,0x10
c00082e7:	6a 00                	push   0x0
c00082e9:	6a 00                	push   0x0
c00082eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ef:	e8 f4 fe ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00082f4:	83 c4 1c             	add    esp,0x1c
c00082f7:	c3                   	ret    

c00082f8 <File::unlink()>:
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	b8 0b 00 00 00       	mov    eax,0xb
c0008300:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008304:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000830b:	83 f9 19             	cmp    ecx,0x19
c000830e:	77 2f                	ja     c000833f <File::unlink()+0x47>
c0008310:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008317:	85 c9                	test   ecx,ecx
c0008319:	74 24                	je     c000833f <File::unlink()+0x47>
c000831b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008321:	85 c9                	test   ecx,ecx
c0008323:	74 1a                	je     c000833f <File::unlink()+0x47>
c0008325:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008329:	b8 06 00 00 00       	mov    eax,0x6
c000832e:	75 0f                	jne    c000833f <File::unlink()+0x47>
c0008330:	50                   	push   eax
c0008331:	83 c2 0d             	add    edx,0xd
c0008334:	50                   	push   eax
c0008335:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008337:	52                   	push   edx
c0008338:	51                   	push   ecx
c0008339:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000833c:	83 c4 10             	add    esp,0x10
c000833f:	83 c4 0c             	add    esp,0xc
c0008342:	c3                   	ret    
c0008343:	90                   	nop

c0008344 <File::rename(char const*)>:
c0008344:	83 ec 0c             	sub    esp,0xc
c0008347:	b8 0b 00 00 00       	mov    eax,0xb
c000834c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008350:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008357:	83 f9 19             	cmp    ecx,0x19
c000835a:	77 32                	ja     c000838e <File::rename(char const*)+0x4a>
c000835c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008363:	85 c9                	test   ecx,ecx
c0008365:	74 27                	je     c000838e <File::rename(char const*)+0x4a>
c0008367:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000836d:	85 c9                	test   ecx,ecx
c000836f:	74 1d                	je     c000838e <File::rename(char const*)+0x4a>
c0008371:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008375:	b8 06 00 00 00       	mov    eax,0x6
c000837a:	75 12                	jne    c000838e <File::rename(char const*)+0x4a>
c000837c:	50                   	push   eax
c000837d:	83 c2 0d             	add    edx,0xd
c0008380:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008386:	52                   	push   edx
c0008387:	51                   	push   ecx
c0008388:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000838b:	83 c4 10             	add    esp,0x10
c000838e:	83 c4 0c             	add    esp,0xc
c0008391:	c3                   	ret    

c0008392 <File::chfatattr(unsigned char, unsigned char)>:
c0008392:	57                   	push   edi
c0008393:	b8 0b 00 00 00       	mov    eax,0xb
c0008398:	56                   	push   esi
c0008399:	53                   	push   ebx
c000839a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000839e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083ad:	83 f9 19             	cmp    ecx,0x19
c00083b0:	77 37                	ja     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083b9:	85 c9                	test   ecx,ecx
c00083bb:	74 2c                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c3:	85 c9                	test   ecx,ecx
c00083c5:	74 22                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083cb:	b8 06 00 00 00       	mov    eax,0x6
c00083d0:	75 17                	jne    c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	89 f0                	mov    eax,esi
c00083d4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083d6:	0f b6 db             	movzx  ebx,bl
c00083d9:	0f b6 f0             	movzx  esi,al
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	56                   	push   esi
c00083e0:	53                   	push   ebx
c00083e1:	52                   	push   edx
c00083e2:	51                   	push   ecx
c00083e3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083e6:	83 c4 10             	add    esp,0x10
c00083e9:	5b                   	pop    ebx
c00083ea:	5e                   	pop    esi
c00083eb:	5f                   	pop    edi
c00083ec:	c3                   	ret    
c00083ed:	90                   	nop

c00083ee <File::exists()>:
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	31 c0                	xor    eax,eax
c00083f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083f7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083fe:	83 f9 19             	cmp    ecx,0x19
c0008401:	77 24                	ja     c0008427 <File::exists()+0x39>
c0008403:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000840a:	85 c9                	test   ecx,ecx
c000840c:	74 19                	je     c0008427 <File::exists()+0x39>
c000840e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008414:	85 c9                	test   ecx,ecx
c0008416:	74 0f                	je     c0008427 <File::exists()+0x39>
c0008418:	50                   	push   eax
c0008419:	83 c2 0d             	add    edx,0xd
c000841c:	50                   	push   eax
c000841d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000841f:	52                   	push   edx
c0008420:	51                   	push   ecx
c0008421:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	83 c4 0c             	add    esp,0xc
c000842a:	c3                   	ret    
c000842b:	90                   	nop

c000842c <File::stat(unsigned long long*, bool*)>:
c000842c:	56                   	push   esi
c000842d:	53                   	push   ebx
c000842e:	50                   	push   eax
c000842f:	b8 0b 00 00 00       	mov    eax,0xb
c0008434:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008438:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000843c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008440:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008447:	83 f9 19             	cmp    ecx,0x19
c000844a:	77 3d                	ja     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c000844c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008453:	85 c9                	test   ecx,ecx
c0008455:	74 32                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008457:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000845d:	85 c9                	test   ecx,ecx
c000845f:	74 28                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008461:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008465:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008467:	74 13                	je     c000847c <File::stat(unsigned long long*, bool*)+0x50>
c0008469:	83 ec 04             	sub    esp,0x4
c000846c:	56                   	push   esi
c000846d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008473:	51                   	push   ecx
c0008474:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008477:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000847a:	eb 0a                	jmp    c0008486 <File::stat(unsigned long long*, bool*)+0x5a>
c000847c:	53                   	push   ebx
c000847d:	83 c2 0d             	add    edx,0xd
c0008480:	56                   	push   esi
c0008481:	52                   	push   edx
c0008482:	51                   	push   ecx
c0008483:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008486:	83 c4 10             	add    esp,0x10
c0008489:	5a                   	pop    edx
c000848a:	5b                   	pop    ebx
c000848b:	5e                   	pop    esi
c000848c:	c3                   	ret    

c000848d <Fs::setcwd(Process*, char*)>:
c000848d:	55                   	push   ebp
c000848e:	57                   	push   edi
c000848f:	56                   	push   esi
c0008490:	53                   	push   ebx
c0008491:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008497:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000849e:	6a 00                	push   0x0
c00084a0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084a6:	57                   	push   edi
c00084a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b2:	56                   	push   esi
c00084b3:	e8 48 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084bb:	e8 c0 80 ff ff       	call   c0000580 <strlen>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	83 f8 02             	cmp    eax,0x2
c00084c6:	77 15                	ja     c00084dd <Fs::setcwd(Process*, char*)+0x50>
c00084c8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084cd:	83 eb 41             	sub    ebx,0x41
c00084d0:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084d7:	85 c0                	test   eax,eax
c00084d9:	75 1c                	jne    c00084f7 <Fs::setcwd(Process*, char*)+0x6a>
c00084db:	eb 2f                	jmp    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c00084dd:	83 ec 0c             	sub    esp,0xc
c00084e0:	56                   	push   esi
c00084e1:	e8 9a 80 ff ff       	call   c0000580 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 03             	cmp    eax,0x3
c00084ec:	75 57                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084ee:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f3:	75 50                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084f5:	eb d1                	jmp    c00084c8 <Fs::setcwd(Process*, char*)+0x3b>
c00084f7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c00084fe:	75 0c                	jne    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c0008500:	83 ec 0c             	sub    esp,0xc
c0008503:	50                   	push   eax
c0008504:	e8 05 1b 00 00       	call   c000a00e <LogicalDisk::mount()>
c0008509:	83 c4 10             	add    esp,0x10
c000850c:	83 fb 19             	cmp    ebx,0x19
c000850f:	b8 03 00 00 00       	mov    eax,0x3
c0008514:	0f 87 c6 00 00 00    	ja     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000851a:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008521:	b8 05 00 00 00       	mov    eax,0x5
c0008526:	85 d2                	test   edx,edx
c0008528:	0f 84 b2 00 00 00    	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000852e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008535:	b8 06 00 00 00       	mov    eax,0x6
c000853a:	0f 85 92 00 00 00    	jne    c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c0008540:	e9 9b 00 00 00       	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c0008545:	83 ec 0c             	sub    esp,0xc
c0008548:	68 14 01 00 00       	push   0x114
c000854d:	e8 7e 63 00 00       	call   c000e8d0 <malloc>
c0008552:	83 c4 0c             	add    esp,0xc
c0008555:	55                   	push   ebp
c0008556:	56                   	push   esi
c0008557:	50                   	push   eax
c0008558:	89 c3                	mov    ebx,eax
c000855a:	e8 ad fb ff ff       	call   c000810c <File::File(char const*, Process*)>
c000855f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008564:	83 c4 0c             	add    esp,0xc
c0008567:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000856b:	50                   	push   eax
c000856c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008570:	50                   	push   eax
c0008571:	53                   	push   ebx
c0008572:	e8 b5 fe ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0008577:	83 c4 10             	add    esp,0x10
c000857a:	83 f8 02             	cmp    eax,0x2
c000857d:	74 27                	je     c00085a6 <Fs::setcwd(Process*, char*)+0x119>
c000857f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008584:	75 1c                	jne    c00085a2 <Fs::setcwd(Process*, char*)+0x115>
c0008586:	85 db                	test   ebx,ebx
c0008588:	b8 02 00 00 00       	mov    eax,0x2
c000858d:	74 51                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000858f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008591:	83 ec 0c             	sub    esp,0xc
c0008594:	53                   	push   ebx
c0008595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	b8 02 00 00 00       	mov    eax,0x2
c00085a0:	eb 3e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085a2:	85 c0                	test   eax,eax
c00085a4:	74 1c                	je     c00085c2 <Fs::setcwd(Process*, char*)+0x135>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 01 00 00 00       	mov    eax,0x1
c00085ad:	74 31                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 01 00 00 00       	mov    eax,0x1
c00085c0:	eb 1e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 db                	test   ebx,ebx
c00085c4:	74 0c                	je     c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c00085c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085c8:	83 ec 0c             	sub    esp,0xc
c00085cb:	53                   	push   ebx
c00085cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085cf:	83 c4 10             	add    esp,0x10
c00085d2:	50                   	push   eax
c00085d3:	50                   	push   eax
c00085d4:	56                   	push   esi
c00085d5:	57                   	push   edi
c00085d6:	e8 75 80 ff ff       	call   c0000650 <strcpy>
c00085db:	83 c4 10             	add    esp,0x10
c00085de:	31 c0                	xor    eax,eax
c00085e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085e6:	5b                   	pop    ebx
c00085e7:	5e                   	pop    esi
c00085e8:	5f                   	pop    edi
c00085e9:	5d                   	pop    ebp
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <Directory::Directory(char const*, Process*)>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f3:	83 ec 08             	sub    esp,0x8
c00085f6:	6a 00                	push   0x0
c00085f8:	50                   	push   eax
c00085f9:	e8 f6 94 00 00       	call   c0011af4 <UnixFile::UnixFile(int)>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	ba 58 14 02 c0       	mov    edx,0xc0021458
c0008606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000860a:	89 10                	mov    DWORD PTR [eax],edx
c000860c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008611:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008615:	0f 95 c0             	setne  al
c0008618:	0f b6 c0             	movzx  eax,al
c000861b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000861f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008625:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008629:	83 c2 0d             	add    edx,0xd
c000862c:	50                   	push   eax
c000862d:	51                   	push   ecx
c000862e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008632:	52                   	push   edx
c0008633:	e8 c8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008638:	83 c4 10             	add    esp,0x10
c000863b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000863f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008642:	83 e8 41             	sub    eax,0x41
c0008645:	88 c2                	mov    dl,al
c0008647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000864b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008655:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008663:	0f b6 c0             	movzx  eax,al
c0008666:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000866d:	85 c0                	test   eax,eax
c000866f:	74 3e                	je     c00086af <Directory::Directory(char const*, Process*)+0xc3>
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000867b:	0f b6 c0             	movzx  eax,al
c000867e:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008685:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000868b:	85 c0                	test   eax,eax
c000868d:	75 20                	jne    c00086af <Directory::Directory(char const*, Process*)+0xc3>
c000868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008693:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008699:	0f b6 c0             	movzx  eax,al
c000869c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a3:	83 ec 0c             	sub    esp,0xc
c00086a6:	50                   	push   eax
c00086a7:	e8 62 19 00 00       	call   c000a00e <LogicalDisk::mount()>
c00086ac:	83 c4 10             	add    esp,0x10
c00086af:	90                   	nop
c00086b0:	83 c4 0c             	add    esp,0xc
c00086b3:	c3                   	ret    

c00086b4 <Directory::open()>:
c00086b4:	53                   	push   ebx
c00086b5:	b8 0b 00 00 00       	mov    eax,0xb
c00086ba:	83 ec 08             	sub    esp,0x8
c00086bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086c8:	83 fa 19             	cmp    edx,0x19
c00086cb:	77 3d                	ja     c000870a <Directory::open()+0x56>
c00086cd:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086d4:	85 d2                	test   edx,edx
c00086d6:	74 32                	je     c000870a <Directory::open()+0x56>
c00086d8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086de:	85 d2                	test   edx,edx
c00086e0:	74 28                	je     c000870a <Directory::open()+0x56>
c00086e2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086e6:	b8 06 00 00 00       	mov    eax,0x6
c00086eb:	75 1d                	jne    c000870a <Directory::open()+0x56>
c00086ed:	50                   	push   eax
c00086ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00086f0:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f6:	51                   	push   ecx
c00086f7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00086fa:	51                   	push   ecx
c00086fb:	52                   	push   edx
c00086fc:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00086ff:	83 c4 10             	add    esp,0x10
c0008702:	85 c0                	test   eax,eax
c0008704:	75 04                	jne    c000870a <Directory::open()+0x56>
c0008706:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000870a:	83 c4 08             	add    esp,0x8
c000870d:	5b                   	pop    ebx
c000870e:	c3                   	ret    
c000870f:	90                   	nop

c0008710 <Directory::close()>:
c0008710:	53                   	push   ebx
c0008711:	b8 0b 00 00 00       	mov    eax,0xb
c0008716:	83 ec 08             	sub    esp,0x8
c0008719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000871d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008724:	83 f9 19             	cmp    ecx,0x19
c0008727:	77 41                	ja     c000876a <Directory::close()+0x5a>
c0008729:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008730:	85 db                	test   ebx,ebx
c0008732:	74 36                	je     c000876a <Directory::close()+0x5a>
c0008734:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000873b:	74 2d                	je     c000876a <Directory::close()+0x5a>
c000873d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008741:	b8 05 00 00 00       	mov    eax,0x5
c0008746:	74 22                	je     c000876a <Directory::close()+0x5a>
c0008748:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000874c:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008753:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008759:	53                   	push   ebx
c000875a:	53                   	push   ebx
c000875b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000875d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008763:	50                   	push   eax
c0008764:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008767:	83 c4 10             	add    esp,0x10
c000876a:	83 c4 08             	add    esp,0x8
c000876d:	5b                   	pop    ebx
c000876e:	c3                   	ret    
c000876f:	90                   	nop

c0008770 <Directory::unlink()>:
c0008770:	83 ec 0c             	sub    esp,0xc
c0008773:	b8 0b 00 00 00       	mov    eax,0xb
c0008778:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000877c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008783:	83 f9 19             	cmp    ecx,0x19
c0008786:	77 2f                	ja     c00087b7 <Directory::unlink()+0x47>
c0008788:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000878f:	85 c9                	test   ecx,ecx
c0008791:	74 24                	je     c00087b7 <Directory::unlink()+0x47>
c0008793:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008799:	85 c9                	test   ecx,ecx
c000879b:	74 1a                	je     c00087b7 <Directory::unlink()+0x47>
c000879d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087a1:	b8 06 00 00 00       	mov    eax,0x6
c00087a6:	75 0f                	jne    c00087b7 <Directory::unlink()+0x47>
c00087a8:	50                   	push   eax
c00087a9:	83 c2 0d             	add    edx,0xd
c00087ac:	50                   	push   eax
c00087ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087af:	52                   	push   edx
c00087b0:	51                   	push   ecx
c00087b1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087b4:	83 c4 10             	add    esp,0x10
c00087b7:	83 c4 0c             	add    esp,0xc
c00087ba:	c3                   	ret    
c00087bb:	90                   	nop

c00087bc <Directory::rename(char const*)>:
c00087bc:	83 ec 0c             	sub    esp,0xc
c00087bf:	b8 0b 00 00 00       	mov    eax,0xb
c00087c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087cf:	83 f9 19             	cmp    ecx,0x19
c00087d2:	77 32                	ja     c0008806 <Directory::rename(char const*)+0x4a>
c00087d4:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087db:	85 c9                	test   ecx,ecx
c00087dd:	74 27                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087e5:	85 c9                	test   ecx,ecx
c00087e7:	74 1d                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ed:	b8 06 00 00 00       	mov    eax,0x6
c00087f2:	75 12                	jne    c0008806 <Directory::rename(char const*)+0x4a>
c00087f4:	50                   	push   eax
c00087f5:	83 c2 0d             	add    edx,0xd
c00087f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087fe:	52                   	push   edx
c00087ff:	51                   	push   ecx
c0008800:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008803:	83 c4 10             	add    esp,0x10
c0008806:	83 c4 0c             	add    esp,0xc
c0008809:	c3                   	ret    

c000880a <Directory::exists()>:
c000880a:	83 ec 0c             	sub    esp,0xc
c000880d:	31 c0                	xor    eax,eax
c000880f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008813:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000881a:	83 f9 19             	cmp    ecx,0x19
c000881d:	77 24                	ja     c0008843 <Directory::exists()+0x39>
c000881f:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008826:	85 c9                	test   ecx,ecx
c0008828:	74 19                	je     c0008843 <Directory::exists()+0x39>
c000882a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008830:	85 c9                	test   ecx,ecx
c0008832:	74 0f                	je     c0008843 <Directory::exists()+0x39>
c0008834:	50                   	push   eax
c0008835:	83 c2 0d             	add    edx,0xd
c0008838:	50                   	push   eax
c0008839:	8b 01                	mov    eax,DWORD PTR [ecx]
c000883b:	52                   	push   edx
c000883c:	51                   	push   ecx
c000883d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008840:	83 c4 10             	add    esp,0x10
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	c3                   	ret    
c0008847:	90                   	nop

c0008848 <Directory::read(dirent*)>:
c0008848:	83 ec 1c             	sub    esp,0x1c
c000884b:	b8 0b 00 00 00       	mov    eax,0xb
c0008850:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000885b:	83 f9 19             	cmp    ecx,0x19
c000885e:	77 30                	ja     c0008890 <Directory::read(dirent*)+0x48>
c0008860:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008867:	85 c9                	test   ecx,ecx
c0008869:	74 25                	je     c0008890 <Directory::read(dirent*)+0x48>
c000886b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008872:	74 1c                	je     c0008890 <Directory::read(dirent*)+0x48>
c0008874:	83 ec 0c             	sub    esp,0xc
c0008877:	8b 02                	mov    eax,DWORD PTR [edx]
c0008879:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000887d:	51                   	push   ecx
c000887e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008882:	6a 00                	push   0x0
c0008884:	68 10 01 00 00       	push   0x110
c0008889:	52                   	push   edx
c000888a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000888d:	83 c4 20             	add    esp,0x20
c0008890:	83 c4 1c             	add    esp,0x1c
c0008893:	c3                   	ret    

c0008894 <Directory::create()>:
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	b8 0b 00 00 00       	mov    eax,0xb
c000889c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088a7:	83 f9 19             	cmp    ecx,0x19
c00088aa:	77 2f                	ja     c00088db <Directory::create()+0x47>
c00088ac:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b3:	85 c9                	test   ecx,ecx
c00088b5:	74 24                	je     c00088db <Directory::create()+0x47>
c00088b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088bd:	85 c9                	test   ecx,ecx
c00088bf:	74 1a                	je     c00088db <Directory::create()+0x47>
c00088c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088c5:	b8 06 00 00 00       	mov    eax,0x6
c00088ca:	75 0f                	jne    c00088db <Directory::create()+0x47>
c00088cc:	50                   	push   eax
c00088cd:	83 c2 0d             	add    edx,0xd
c00088d0:	50                   	push   eax
c00088d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d3:	52                   	push   edx
c00088d4:	51                   	push   ecx
c00088d5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088d8:	83 c4 10             	add    esp,0x10
c00088db:	83 c4 0c             	add    esp,0xc
c00088de:	c3                   	ret    
c00088df:	90                   	nop

c00088e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e0:	b8 0a 00 00 00       	mov    eax,0xa
c00088e5:	c3                   	ret    
c00088e6:	66 90                	xchg   ax,ax

c00088e8 <Bus::Bus(char const*)>:
c00088e8:	83 ec 0c             	sub    esp,0xc
c00088eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ef:	83 ec 08             	sub    esp,0x8
c00088f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088f6:	50                   	push   eax
c00088f7:	e8 ac 08 00 00       	call   c00091a8 <Device::Device(char const*)>
c00088fc:	83 c4 10             	add    esp,0x10
c00088ff:	ba 74 14 02 c0       	mov    edx,0xc0021474
c0008904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008908:	89 10                	mov    DWORD PTR [eax],edx
c000890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008918:	90                   	nop
c0008919:	83 c4 0c             	add    esp,0xc
c000891c:	c3                   	ret    
c000891d:	90                   	nop
c000891e:	66 90                	xchg   ax,ax

c0008920 <Bus::~Bus()>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	ba 74 14 02 c0       	mov    edx,0xc0021474
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	83 ec 0c             	sub    esp,0xc
c0008935:	50                   	push   eax
c0008936:	e8 0d 06 00 00       	call   c0008f48 <Device::~Device()>
c000893b:	83 c4 10             	add    esp,0x10
c000893e:	90                   	nop
c000893f:	83 c4 0c             	add    esp,0xc
c0008942:	c3                   	ret    
c0008943:	90                   	nop

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	83 ec 0c             	sub    esp,0xc
c000894a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000894e:	e8 cd ff ff ff       	call   c0008920 <Bus::~Bus()>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 08             	sub    esp,0x8
c0008959:	68 58 01 00 00       	push   0x158
c000895e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008962:	e8 f4 3c 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008967:	83 c4 10             	add    esp,0x10
c000896a:	83 c4 0c             	add    esp,0xc
c000896d:	c3                   	ret    

c000896e <KeBeepThread(void*)>:
c000896e:	83 ec 0c             	sub    esp,0xc
c0008971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008975:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000897c:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0008983:	75 01                	jne    c0008986 <KeBeepThread(void*)+0x18>
c0008985:	fb                   	sti    
c0008986:	6b c0 0a             	imul   eax,eax,0xa
c0008989:	83 ec 0c             	sub    esp,0xc
c000898c:	50                   	push   eax
c000898d:	e8 32 cc 00 00       	call   c00155c4 <milliTenthSleep(unsigned int)>
c0008992:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008999:	e8 1a fc 00 00       	call   c00185b8 <HalMakeBeep(int)>
c000899e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089a6:	83 c4 1c             	add    esp,0x1c
c00089a9:	e9 ee ca 00 00       	jmp    c001549c <blockTask(TaskState)>

c00089ae <KeBeep(int, int, bool)>:
c00089ae:	56                   	push   esi
c00089af:	53                   	push   ebx
c00089b0:	83 ec 10             	sub    esp,0x10
c00089b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bf:	e8 f4 fb 00 00       	call   c00185b8 <HalMakeBeep(int)>
c00089c4:	89 f0                	mov    eax,esi
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	84 c0                	test   al,al
c00089cb:	74 1e                	je     c00089eb <KeBeep(int, int, bool)+0x3d>
c00089cd:	6b db 0a             	imul   ebx,ebx,0xa
c00089d0:	83 ec 0c             	sub    esp,0xc
c00089d3:	53                   	push   ebx
c00089d4:	e8 eb cb 00 00       	call   c00155c4 <milliTenthSleep(unsigned int)>
c00089d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089e1:	83 c4 14             	add    esp,0x14
c00089e4:	5b                   	pop    ebx
c00089e5:	5e                   	pop    esi
c00089e6:	e9 cd fb 00 00       	jmp    c00185b8 <HalMakeBeep(int)>
c00089eb:	68 e6 00 00 00       	push   0xe6
c00089f0:	53                   	push   ebx
c00089f1:	68 6e 89 00 c0       	push   0xc000896e
c00089f6:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00089fc:	e8 8f c7 00 00       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	c3                   	ret    
c0008a07:	90                   	nop

c0008a08 <KeLoadClockSettings()>:
c0008a08:	57                   	push   edi
c0008a09:	56                   	push   esi
c0008a0a:	53                   	push   ebx
c0008a0b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a11:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a16:	68 98 14 02 c0       	push   0xc0021498
c0008a1b:	e8 90 3c 00 00       	call   c000c6b0 <CmOpen(char const*)>
c0008a20:	59                   	pop    ecx
c0008a21:	5e                   	pop    esi
c0008a22:	89 c3                	mov    ebx,eax
c0008a24:	68 bd 14 02 c0       	push   0xc00214bd
c0008a29:	50                   	push   eax
c0008a2a:	e8 7c 48 00 00       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a2f:	5f                   	pop    edi
c0008a30:	5a                   	pop    edx
c0008a31:	89 c6                	mov    esi,eax
c0008a33:	50                   	push   eax
c0008a34:	68 d2 14 02 c0       	push   0xc00214d2
c0008a39:	e8 10 e5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a3e:	83 c4 10             	add    esp,0x10
c0008a41:	85 f6                	test   esi,esi
c0008a43:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a47:	7e 0c                	jle    c0008a55 <KeLoadClockSettings()+0x4d>
c0008a49:	52                   	push   edx
c0008a4a:	57                   	push   edi
c0008a4b:	56                   	push   esi
c0008a4c:	53                   	push   ebx
c0008a4d:	e8 ce 3d 00 00       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	53                   	push   ebx
c0008a59:	e8 70 3d 00 00       	call   c000c7ce <CmClose(Reghive_Tag*)>
c0008a5e:	83 c4 0c             	add    esp,0xc
c0008a61:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a66:	50                   	push   eax
c0008a67:	57                   	push   edi
c0008a68:	68 e0 14 02 c0       	push   0xc00214e0
c0008a6d:	e8 dc e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a72:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a80:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a83:	a8 fd                	test   al,0xfd
c0008a85:	75 51                	jne    c0008ad8 <KeLoadClockSettings()+0xd0>
c0008a87:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a8c:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a91:	83 fb 2e             	cmp    ebx,0x2e
c0008a94:	75 07                	jne    c0008a9d <KeLoadClockSettings()+0x95>
c0008a96:	83 fa 35             	cmp    edx,0x35
c0008a99:	b0 01                	mov    al,0x1
c0008a9b:	74 0f                	je     c0008aac <KeLoadClockSettings()+0xa4>
c0008a9d:	31 c0                	xor    eax,eax
c0008a9f:	83 fa 2e             	cmp    edx,0x2e
c0008aa2:	75 08                	jne    c0008aac <KeLoadClockSettings()+0xa4>
c0008aa4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aa9:	0f 94 c0             	sete   al
c0008aac:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008ab1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ab6:	83 e8 30             	sub    eax,0x30
c0008ab9:	6b f0 0a             	imul   esi,eax,0xa
c0008abc:	83 fa 2e             	cmp    edx,0x2e
c0008abf:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008ac3:	0f 44 c3             	cmove  eax,ebx
c0008ac6:	80 f9 2d             	cmp    cl,0x2d
c0008ac9:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008ace:	75 19                	jne    c0008ae9 <KeLoadClockSettings()+0xe1>
c0008ad0:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad6:	eb 11                	jmp    c0008ae9 <KeLoadClockSettings()+0xe1>
c0008ad8:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008adf:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008ae9:	50                   	push   eax
c0008aea:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008af1:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af4:	50                   	push   eax
c0008af5:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008afb:	68 f7 14 02 c0       	push   0xc00214f7
c0008b00:	e8 49 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b05:	81 c4 70 02 00 00    	add    esp,0x270
c0008b0b:	5b                   	pop    ebx
c0008b0c:	5e                   	pop    esi
c0008b0d:	5f                   	pop    edi
c0008b0e:	c3                   	ret    
c0008b0f:	90                   	nop

c0008b10 <Clock::Clock(char const*)>:
c0008b10:	83 ec 0c             	sub    esp,0xc
c0008b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b17:	83 ec 08             	sub    esp,0x8
c0008b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1e:	50                   	push   eax
c0008b1f:	e8 84 06 00 00       	call   c00091a8 <Device::Device(char const*)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	ba 10 15 02 c0       	mov    edx,0xc0021510
c0008b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b30:	89 10                	mov    DWORD PTR [eax],edx
c0008b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b36:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b40:	90                   	nop
c0008b41:	83 c4 0c             	add    esp,0xc
c0008b44:	c3                   	ret    
c0008b45:	90                   	nop

c0008b46 <Clock::~Clock()>:
c0008b46:	83 ec 0c             	sub    esp,0xc
c0008b49:	ba 10 15 02 c0       	mov    edx,0xc0021510
c0008b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b52:	89 10                	mov    DWORD PTR [eax],edx
c0008b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b58:	83 ec 0c             	sub    esp,0xc
c0008b5b:	50                   	push   eax
c0008b5c:	e8 e7 03 00 00       	call   c0008f48 <Device::~Device()>
c0008b61:	83 c4 10             	add    esp,0x10
c0008b64:	90                   	nop
c0008b65:	83 c4 0c             	add    esp,0xc
c0008b68:	c3                   	ret    
c0008b69:	90                   	nop

c0008b6a <Clock::~Clock()>:
c0008b6a:	83 ec 0c             	sub    esp,0xc
c0008b6d:	83 ec 0c             	sub    esp,0xc
c0008b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b74:	e8 cd ff ff ff       	call   c0008b46 <Clock::~Clock()>
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	83 ec 08             	sub    esp,0x8
c0008b7f:	68 58 01 00 00       	push   0x158
c0008b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b88:	e8 ce 3a 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008b8d:	83 c4 10             	add    esp,0x10
c0008b90:	83 c4 0c             	add    esp,0xc
c0008b93:	c3                   	ret    

c0008b94 <Clock::timeInSecondsLocal()>:
c0008b94:	53                   	push   ebx
c0008b95:	83 ec 14             	sub    esp,0x14
c0008b98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b9e:	50                   	push   eax
c0008b9f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008ba2:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008ba9:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008baf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb5:	89 cb                	mov    ebx,ecx
c0008bb7:	c1 fb 1f             	sar    ebx,0x1f
c0008bba:	01 c8                	add    eax,ecx
c0008bbc:	11 da                	adc    edx,ebx
c0008bbe:	83 c4 10             	add    esp,0x10
c0008bc1:	31 c9                	xor    ecx,ecx
c0008bc3:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bca:	74 05                	je     c0008bd1 <Clock::timeInSecondsLocal()+0x3d>
c0008bcc:	b9 08 07 00 00       	mov    ecx,0x708
c0008bd1:	31 db                	xor    ebx,ebx
c0008bd3:	01 c8                	add    eax,ecx
c0008bd5:	11 da                	adc    edx,ebx
c0008bd7:	83 c4 08             	add    esp,0x8
c0008bda:	5b                   	pop    ebx
c0008bdb:	c3                   	ret    

c0008bdc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bdc:	57                   	push   edi
c0008bdd:	56                   	push   esi
c0008bde:	53                   	push   ebx
c0008bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008be3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008beb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008bed:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bf0:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf7:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bfd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c03:	99                   	cdq    
c0008c04:	29 c6                	sub    esi,eax
c0008c06:	19 d7                	sbb    edi,edx
c0008c08:	89 f0                	mov    eax,esi
c0008c0a:	31 f6                	xor    esi,esi
c0008c0c:	89 fa                	mov    edx,edi
c0008c0e:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c15:	74 05                	je     c0008c1c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c17:	be 08 07 00 00       	mov    esi,0x708
c0008c1c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c20:	31 ff                	xor    edi,edi
c0008c22:	29 f0                	sub    eax,esi
c0008c24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c28:	19 fa                	sbb    edx,edi
c0008c2a:	89 d8                	mov    eax,ebx
c0008c2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c30:	5b                   	pop    ebx
c0008c31:	5e                   	pop    esi
c0008c32:	5f                   	pop    edi
c0008c33:	ff e0                	jmp    eax

c0008c35 <KeDatetimeToSeconds(datetime_t)>:
c0008c35:	55                   	push   ebp
c0008c36:	57                   	push   edi
c0008c37:	56                   	push   esi
c0008c38:	53                   	push   ebx
c0008c39:	83 ec 0c             	sub    esp,0xc
c0008c3c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c44:	89 f7                	mov    edi,esi
c0008c46:	89 f0                	mov    eax,esi
c0008c48:	0f b6 cf             	movzx  ecx,bh
c0008c4b:	0f b6 c4             	movzx  eax,ah
c0008c4e:	c1 ef 10             	shr    edi,0x10
c0008c51:	89 da                	mov    edx,ebx
c0008c53:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c56:	89 f9                	mov    ecx,edi
c0008c58:	0f b6 f9             	movzx  edi,cl
c0008c5b:	89 f1                	mov    ecx,esi
c0008c5d:	6b c0 3c             	imul   eax,eax,0x3c
c0008c60:	0f b6 f1             	movzx  esi,cl
c0008c63:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c69:	0f b6 db             	movzx  ebx,bl
c0008c6c:	c1 ea 10             	shr    edx,0x10
c0008c6f:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c75:	01 f8                	add    eax,edi
c0008c77:	01 f0                	add    eax,esi
c0008c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c7c:	c1 f8 1f             	sar    eax,0x1f
c0008c7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c83:	89 e8                	mov    eax,ebp
c0008c85:	0f b6 c0             	movzx  eax,al
c0008c88:	8b 0c 85 60 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeaa0]
c0008c8f:	83 f8 01             	cmp    eax,0x1
c0008c92:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008c96:	0f b7 da             	movzx  ebx,dx
c0008c99:	76 27                	jbe    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008c9b:	80 e2 03             	and    dl,0x3
c0008c9e:	75 22                	jne    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008ca0:	31 d2                	xor    edx,edx
c0008ca2:	be 64 00 00 00       	mov    esi,0x64
c0008ca7:	89 d8                	mov    eax,ebx
c0008ca9:	f7 f6                	div    esi
c0008cab:	85 d2                	test   edx,edx
c0008cad:	75 12                	jne    c0008cc1 <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008caf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cb5:	be 90 01 00 00       	mov    esi,0x190
c0008cba:	99                   	cdq    
c0008cbb:	f7 fe                	idiv   esi
c0008cbd:	85 d2                	test   edx,edx
c0008cbf:	75 01                	jne    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cc1:	41                   	inc    ecx
c0008cc2:	83 fb 46             	cmp    ebx,0x46
c0008cc5:	76 48                	jbe    c0008d0f <KeDatetimeToSeconds(datetime_t)+0xda>
c0008cc7:	be 46 00 00 00       	mov    esi,0x46
c0008ccc:	bf 64 00 00 00       	mov    edi,0x64
c0008cd1:	bd 90 01 00 00       	mov    ebp,0x190
c0008cd6:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cdc:	b8 6d 01 00 00       	mov    eax,0x16d
c0008ce1:	75 23                	jne    c0008d06 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008ce3:	89 f0                	mov    eax,esi
c0008ce5:	99                   	cdq    
c0008ce6:	f7 ff                	idiv   edi
c0008ce8:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ced:	85 d2                	test   edx,edx
c0008cef:	75 15                	jne    c0008d06 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008cf1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cf7:	99                   	cdq    
c0008cf8:	f7 fd                	idiv   ebp
c0008cfa:	83 fa 01             	cmp    edx,0x1
c0008cfd:	19 c0                	sbb    eax,eax
c0008cff:	f7 d0                	not    eax
c0008d01:	05 6e 01 00 00       	add    eax,0x16e
c0008d06:	46                   	inc    esi
c0008d07:	01 c1                	add    ecx,eax
c0008d09:	39 de                	cmp    esi,ebx
c0008d0b:	7c c9                	jl     c0008cd6 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008d0d:	eb 34                	jmp    c0008d43 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d0f:	74 32                	je     c0008d43 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d11:	b8 45 00 00 00       	mov    eax,0x45
c0008d16:	89 c2                	mov    edx,eax
c0008d18:	83 e2 03             	and    edx,0x3
c0008d1b:	39 d8                	cmp    eax,ebx
c0008d1d:	7e 0f                	jle    c0008d2e <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008d1f:	83 fa 01             	cmp    edx,0x1
c0008d22:	19 d2                	sbb    edx,edx
c0008d24:	48                   	dec    eax
c0008d25:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d2c:	eb e8                	jmp    c0008d16 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008d2e:	85 d2                	test   edx,edx
c0008d30:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d35:	75 0a                	jne    c0008d41 <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008d37:	83 fb 01             	cmp    ebx,0x1
c0008d3a:	19 c0                	sbb    eax,eax
c0008d3c:	05 6e 01 00 00       	add    eax,0x16e
c0008d41:	29 c1                	sub    ecx,eax
c0008d43:	b8 80 51 01 00       	mov    eax,0x15180
c0008d48:	f7 e9                	imul   ecx
c0008d4a:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d4d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d51:	83 c4 0c             	add    esp,0xc
c0008d54:	5b                   	pop    ebx
c0008d55:	5e                   	pop    esi
c0008d56:	5f                   	pop    edi
c0008d57:	5d                   	pop    ebp
c0008d58:	c3                   	ret    
c0008d59:	90                   	nop

c0008d5a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d5a:	57                   	push   edi
c0008d5b:	56                   	push   esi
c0008d5c:	53                   	push   ebx
c0008d5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d61:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d63:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6e:	e8 c2 fe ff ff       	call   c0008c35 <KeDatetimeToSeconds(datetime_t)>
c0008d73:	59                   	pop    ecx
c0008d74:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d7b:	5b                   	pop    ebx
c0008d7c:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d82:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d88:	89 cb                	mov    ebx,ecx
c0008d8a:	c1 fb 1f             	sar    ebx,0x1f
c0008d8d:	29 c8                	sub    eax,ecx
c0008d8f:	19 da                	sbb    edx,ebx
c0008d91:	31 c9                	xor    ecx,ecx
c0008d93:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d9a:	74 05                	je     c0008da1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d9c:	b9 08 07 00 00       	mov    ecx,0x708
c0008da1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008da5:	31 db                	xor    ebx,ebx
c0008da7:	29 c8                	sub    eax,ecx
c0008da9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008dad:	19 da                	sbb    edx,ebx
c0008daf:	89 f8                	mov    eax,edi
c0008db1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008db5:	5b                   	pop    ebx
c0008db6:	5e                   	pop    esi
c0008db7:	5f                   	pop    edi
c0008db8:	ff e0                	jmp    eax

c0008dba <KeSecondsToDatetime(unsigned long long)>:
c0008dba:	55                   	push   ebp
c0008dbb:	57                   	push   edi
c0008dbc:	56                   	push   esi
c0008dbd:	53                   	push   ebx
c0008dbe:	83 ec 1c             	sub    esp,0x1c
c0008dc1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dcd:	6a 00                	push   0x0
c0008dcf:	68 80 51 01 00       	push   0x15180
c0008dd4:	55                   	push   ebp
c0008dd5:	57                   	push   edi
c0008dd6:	e8 c9 6c 01 00       	call   c001faa4 <__udivdi3>
c0008ddb:	83 c4 10             	add    esp,0x10
c0008dde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008de2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008de8:	6a 00                	push   0x0
c0008dea:	68 80 51 01 00       	push   0x15180
c0008def:	55                   	push   ebp
c0008df0:	57                   	push   edi
c0008df1:	bf 10 0e 00 00       	mov    edi,0xe10
c0008df6:	e8 a9 6d 01 00       	call   c001fba4 <__umoddi3>
c0008dfb:	83 c4 10             	add    esp,0x10
c0008dfe:	99                   	cdq    
c0008dff:	f7 ff                	idiv   edi
c0008e01:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e06:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e09:	89 d0                	mov    eax,edx
c0008e0b:	99                   	cdq    
c0008e0c:	f7 ff                	idiv   edi
c0008e0e:	85 db                	test   ebx,ebx
c0008e10:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e13:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e16:	79 11                	jns    c0008e29 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e1c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e22:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e27:	eb 07                	jmp    c0008e30 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e29:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e2e:	89 d8                	mov    eax,ebx
c0008e30:	99                   	cdq    
c0008e31:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e36:	f7 f9                	idiv   ecx
c0008e38:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e3d:	31 d2                	xor    edx,edx
c0008e3f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e48:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e50:	01 c3                	add    ebx,eax
c0008e52:	89 d8                	mov    eax,ebx
c0008e54:	f7 f1                	div    ecx
c0008e56:	31 d2                	xor    edx,edx
c0008e58:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e5b:	89 d8                	mov    eax,ebx
c0008e5d:	f7 f7                	div    edi
c0008e5f:	31 d2                	xor    edx,edx
c0008e61:	29 c1                	sub    ecx,eax
c0008e63:	89 d8                	mov    eax,ebx
c0008e65:	f7 f5                	div    ebp
c0008e67:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e6c:	31 d2                	xor    edx,edx
c0008e6e:	29 c1                	sub    ecx,eax
c0008e70:	89 c8                	mov    eax,ecx
c0008e72:	f7 f5                	div    ebp
c0008e74:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e79:	31 d2                	xor    edx,edx
c0008e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e7f:	89 c8                	mov    eax,ecx
c0008e81:	f7 f5                	div    ebp
c0008e83:	31 d2                	xor    edx,edx
c0008e85:	01 c3                	add    ebx,eax
c0008e87:	89 c8                	mov    eax,ecx
c0008e89:	f7 f7                	div    edi
c0008e8b:	bf 99 00 00 00       	mov    edi,0x99
c0008e90:	31 d2                	xor    edx,edx
c0008e92:	29 c3                	sub    ebx,eax
c0008e94:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e9c:	29 c3                	sub    ebx,eax
c0008e9e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ea1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ea4:	83 c1 02             	add    ecx,0x2
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	bb 05 00 00 00       	mov    ebx,0x5
c0008eae:	f7 f7                	div    edi
c0008eb0:	31 d2                	xor    edx,edx
c0008eb2:	89 c7                	mov    edi,eax
c0008eb4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eba:	83 c0 02             	add    eax,0x2
c0008ebd:	f7 f3                	div    ebx
c0008ebf:	89 eb                	mov    ebx,ebp
c0008ec1:	29 c3                	sub    ebx,eax
c0008ec3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec9:	88 1e                	mov    BYTE PTR [esi],bl
c0008ecb:	19 c0                	sbb    eax,eax
c0008ecd:	31 d2                	xor    edx,edx
c0008ecf:	83 e0 0c             	and    eax,0xc
c0008ed2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ed6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008ede:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008ee2:	83 f9 01             	cmp    ecx,0x1
c0008ee5:	0f 96 c2             	setbe  dl
c0008ee8:	41                   	inc    ecx
c0008ee9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008eec:	01 d0                	add    eax,edx
c0008eee:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008ef2:	83 c4 1c             	add    esp,0x1c
c0008ef5:	89 f0                	mov    eax,esi
c0008ef7:	5b                   	pop    ebx
c0008ef8:	5e                   	pop    esi
c0008ef9:	5f                   	pop    edi
c0008efa:	5d                   	pop    ebp
c0008efb:	c2 04 00             	ret    0x4

c0008efe <Clock::timeInDatetimeLocal()>:
c0008efe:	53                   	push   ebx
c0008eff:	83 ec 14             	sub    esp,0x14
c0008f02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0a:	e8 85 fc ff ff       	call   c0008b94 <Clock::timeInSecondsLocal()>
c0008f0f:	83 c4 0c             	add    esp,0xc
c0008f12:	52                   	push   edx
c0008f13:	50                   	push   eax
c0008f14:	53                   	push   ebx
c0008f15:	e8 a0 fe ff ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0008f1a:	89 d8                	mov    eax,ebx
c0008f1c:	83 c4 14             	add    esp,0x14
c0008f1f:	5b                   	pop    ebx
c0008f20:	c2 04 00             	ret    0x4
c0008f23:	90                   	nop

c0008f24 <Device::hibernate()>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Device::wake()>:
c0008f26:	c3                   	ret    
c0008f27:	90                   	nop

c0008f28 <Device::detect()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Device::disableLegacy()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <Device::powerSaving(PowerSavingLevel)>:
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop

c0008f2e <DriverlessDevice::close(int, int, void*)>:
c0008f2e:	31 c0                	xor    eax,eax
c0008f30:	c3                   	ret    
c0008f31:	90                   	nop

c0008f32 <DriverlessDevice::detect()>:
c0008f32:	c3                   	ret    
c0008f33:	90                   	nop

c0008f34 <DriverlessDevice::open(int, int, void*)>:
c0008f34:	83 ec 18             	sub    esp,0x18
c0008f37:	68 90 15 02 c0       	push   0xc0021590
c0008f3c:	e8 d5 5c 00 00       	call   c000ec16 <KePanic(char const*)>
c0008f41:	83 c8 ff             	or     eax,0xffffffff
c0008f44:	83 c4 1c             	add    esp,0x1c
c0008f47:	c3                   	ret    

c0008f48 <Device::~Device()>:
c0008f48:	ba 34 16 02 c0       	mov    edx,0xc0021634
c0008f4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f51:	89 10                	mov    DWORD PTR [eax],edx
c0008f53:	90                   	nop
c0008f54:	c3                   	ret    
c0008f55:	90                   	nop

c0008f56 <Device::~Device()>:
c0008f56:	83 ec 0c             	sub    esp,0xc
c0008f59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f5d:	e8 e6 ff ff ff       	call   c0008f48 <Device::~Device()>
c0008f62:	83 c4 04             	add    esp,0x4
c0008f65:	83 ec 08             	sub    esp,0x8
c0008f68:	68 58 01 00 00       	push   0x158
c0008f6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f71:	e8 e5 36 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	83 c4 0c             	add    esp,0xc
c0008f7c:	c3                   	ret    
c0008f7d:	90                   	nop

c0008f7e <Device::findAndLoadDriver()>:
c0008f7e:	c7 44 24 04 ae 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215ae
c0008f86:	e9 c3 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008f8b:	90                   	nop

c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f8c:	57                   	push   edi
c0008f8d:	b9 09 00 00 00       	mov    ecx,0x9
c0008f92:	56                   	push   esi
c0008f93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f9b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fa5:	81 c7 18 01 00 00    	add    edi,0x118
c0008fab:	fc                   	cld    
c0008fac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fae:	5e                   	pop    esi
c0008faf:	5f                   	pop    edi
c0008fb0:	c3                   	ret    
c0008fb1:	90                   	nop

c0008fb2 <Device::preOpenACPI(void*, char*, char*)>:
c0008fb2:	57                   	push   edi
c0008fb3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb8:	56                   	push   esi
c0008fb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fc5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fcf:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fd5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fdd:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fe3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe7:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fee:	5e                   	pop    esi
c0008fef:	5f                   	pop    edi
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008ff2:	53                   	push   ebx
c0008ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ffb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008fff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009003:	0f b6 c0             	movzx  eax,al
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009012:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009016:	5b                   	pop    ebx
c0009017:	e9 65 f9 00 00       	jmp    c0018981 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000901c <Device::getParent()>:
c000901c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009020:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009026:	c3                   	ret    
c0009027:	90                   	nop

c0009028 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000902c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009030:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009039:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000903d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009041:	e9 ac fa 00 00       	jmp    c0018af2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009046 <Device::addChild(Device*)>:
c0009046:	53                   	push   ebx
c0009047:	83 ec 08             	sub    esp,0x8
c000904a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000904e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009052:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009058:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000905e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009060:	85 d2                	test   edx,edx
c0009062:	74 04                	je     c0009068 <Device::addChild(Device*)+0x22>
c0009064:	89 d3                	mov    ebx,edx
c0009066:	eb f6                	jmp    c000905e <Device::addChild(Device*)+0x18>
c0009068:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000906b:	83 ec 0c             	sub    esp,0xc
c000906e:	6a 08                	push   0x8
c0009070:	e8 5b 58 00 00       	call   c000e8d0 <malloc>
c0009075:	89 03                	mov    DWORD PTR [ebx],eax
c0009077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000907d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009084:	83 c4 18             	add    esp,0x18
c0009087:	5b                   	pop    ebx
c0009088:	c3                   	ret    
c0009089:	90                   	nop

c000908a <Device::removeAllChildren()>:
c000908a:	56                   	push   esi
c000908b:	53                   	push   ebx
c000908c:	52                   	push   edx
c000908d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009091:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009097:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000909a:	74 17                	je     c00090b3 <Device::removeAllChildren()+0x29>
c000909c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000909f:	85 c0                	test   eax,eax
c00090a1:	74 0c                	je     c00090af <Device::removeAllChildren()+0x25>
c00090a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a5:	83 ec 0c             	sub    esp,0xc
c00090a8:	50                   	push   eax
c00090a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090ac:	83 c4 10             	add    esp,0x10
c00090af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090b1:	eb e4                	jmp    c0009097 <Device::removeAllChildren()+0xd>
c00090b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090cc:	58                   	pop    eax
c00090cd:	5b                   	pop    ebx
c00090ce:	5e                   	pop    esi
c00090cf:	c3                   	ret    

c00090d0 <Device::hibernateAll()>:
c00090d0:	53                   	push   ebx
c00090d1:	83 ec 14             	sub    esp,0x14
c00090d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090da:	53                   	push   ebx
c00090db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090e4:	83 c4 10             	add    esp,0x10
c00090e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090ea:	74 0f                	je     c00090fb <Device::hibernateAll()+0x2b>
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f2:	e8 d9 ff ff ff       	call   c00090d0 <Device::hibernateAll()>
c00090f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f9:	eb e9                	jmp    c00090e4 <Device::hibernateAll()+0x14>
c00090fb:	83 c4 08             	add    esp,0x8
c00090fe:	5b                   	pop    ebx
c00090ff:	c3                   	ret    

c0009100 <Device::wakeAll()>:
c0009100:	53                   	push   ebx
c0009101:	83 ec 14             	sub    esp,0x14
c0009104:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009108:	8b 03                	mov    eax,DWORD PTR [ebx]
c000910a:	53                   	push   ebx
c000910b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000910e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009114:	83 c4 10             	add    esp,0x10
c0009117:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000911a:	74 0f                	je     c000912b <Device::wakeAll()+0x2b>
c000911c:	83 ec 0c             	sub    esp,0xc
c000911f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009122:	e8 d9 ff ff ff       	call   c0009100 <Device::wakeAll()>
c0009127:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009129:	eb e9                	jmp    c0009114 <Device::wakeAll()+0x14>
c000912b:	83 c4 08             	add    esp,0x8
c000912e:	5b                   	pop    ebx
c000912f:	c3                   	ret    

c0009130 <Device::detectAll()>:
c0009130:	53                   	push   ebx
c0009131:	83 ec 14             	sub    esp,0x14
c0009134:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009138:	8b 03                	mov    eax,DWORD PTR [ebx]
c000913a:	53                   	push   ebx
c000913b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000913e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009144:	83 c4 10             	add    esp,0x10
c0009147:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000914a:	74 0f                	je     c000915b <Device::detectAll()+0x2b>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009152:	e8 d9 ff ff ff       	call   c0009130 <Device::detectAll()>
c0009157:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009159:	eb e9                	jmp    c0009144 <Device::detectAll()+0x14>
c000915b:	83 c4 08             	add    esp,0x8
c000915e:	5b                   	pop    ebx
c000915f:	c3                   	ret    

c0009160 <Device::disableLegacyAll()>:
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Device::loadDriversForAll()>:
c0009162:	c3                   	ret    
c0009163:	90                   	nop

c0009164 <Device::powerSavingAll(PowerSavingLevel)>:
c0009164:	56                   	push   esi
c0009165:	53                   	push   ebx
c0009166:	83 ec 0c             	sub    esp,0xc
c0009169:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000916d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009171:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009173:	56                   	push   esi
c0009174:	53                   	push   ebx
c0009175:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009178:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000917e:	83 c4 10             	add    esp,0x10
c0009181:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009184:	74 0f                	je     c0009195 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009186:	52                   	push   edx
c0009187:	52                   	push   edx
c0009188:	56                   	push   esi
c0009189:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000918c:	e8 d3 ff ff ff       	call   c0009164 <Device::powerSavingAll(PowerSavingLevel)>
c0009191:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009193:	eb e9                	jmp    c000917e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009195:	58                   	pop    eax
c0009196:	5b                   	pop    ebx
c0009197:	5e                   	pop    esi
c0009198:	c3                   	ret    
c0009199:	90                   	nop

c000919a <Device::setName(char const*)>:
c000919a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091a2:	e9 a9 74 ff ff       	jmp    c0000650 <strcpy>
c00091a7:	90                   	nop

c00091a8 <Device::Device(char const*)>:
c00091a8:	83 ec 1c             	sub    esp,0x1c
c00091ab:	ba 34 16 02 c0       	mov    edx,0xc0021634
c00091b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b4:	89 10                	mov    DWORD PTR [eax],edx
c00091b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091ba:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091ee:	83 ec 08             	sub    esp,0x8
c00091f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f9:	e8 9c ff ff ff       	call   c000919a <Device::setName(char const*)>
c00091fe:	83 c4 10             	add    esp,0x10
c0009201:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009209:	83 ec 0c             	sub    esp,0xc
c000920c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009210:	e8 bb 56 00 00       	call   c000e8d0 <malloc>
c0009215:	83 c4 10             	add    esp,0x10
c0009218:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000921e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009225:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009229:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000922f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009233:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009239:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009243:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009249:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009254:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000925b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000926a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009278:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009286:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009294:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000929e:	90                   	nop
c000929f:	83 c4 1c             	add    esp,0x1c
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <Device::getName()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	05 d0 00 00 00       	add    eax,0xd0
c00092ad:	c3                   	ret    

c00092ae <Device::closeAll()>:
c00092ae:	53                   	push   ebx
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092b6:	53                   	push   ebx
c00092b7:	e8 e8 ff ff ff       	call   c00092a4 <Device::getName()>
c00092bc:	52                   	push   edx
c00092bd:	50                   	push   eax
c00092be:	68 e8 15 02 c0       	push   0xc00215e8
c00092c3:	e8 86 dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00092c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092ca:	6a 00                	push   0x0
c00092cc:	6a 00                	push   0x0
c00092ce:	6a 00                	push   0x0
c00092d0:	53                   	push   ebx
c00092d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092da:	83 c4 20             	add    esp,0x20
c00092dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092e0:	74 12                	je     c00092f4 <Device::closeAll()+0x46>
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e8:	e8 c1 ff ff ff       	call   c00092ae <Device::closeAll()>
c00092ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092ef:	83 c4 10             	add    esp,0x10
c00092f2:	eb e9                	jmp    c00092dd <Device::closeAll()+0x2f>
c00092f4:	83 c4 08             	add    esp,0x8
c00092f7:	5b                   	pop    ebx
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <DriverlessDevice::DriverlessDevice(char const*)>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	83 ec 08             	sub    esp,0x8
c0009304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009308:	50                   	push   eax
c0009309:	e8 9a fe ff ff       	call   c00091a8 <Device::Device(char const*)>
c000930e:	83 c4 10             	add    esp,0x10
c0009311:	ba 60 16 02 c0       	mov    edx,0xc0021660
c0009316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931a:	89 10                	mov    DWORD PTR [eax],edx
c000931c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009320:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000932a:	90                   	nop
c000932b:	83 c4 0c             	add    esp,0xc
c000932e:	c3                   	ret    
c000932f:	90                   	nop

c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009330:	57                   	push   edi
c0009331:	56                   	push   esi
c0009332:	53                   	push   ebx
c0009333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009337:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000933b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000933f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009345:	75 0c                	jne    c0009353 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009347:	52                   	push   edx
c0009348:	52                   	push   edx
c0009349:	53                   	push   ebx
c000934a:	56                   	push   esi
c000934b:	e8 cc 69 01 00       	call   c001fd1c <LinkedList<Device>::addElement(Device*)>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009359:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000935c:	74 12                	je     c0009370 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000935e:	50                   	push   eax
c000935f:	57                   	push   edi
c0009360:	56                   	push   esi
c0009361:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009364:	e8 c7 ff ff ff       	call   c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009369:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	eb e9                	jmp    c0009359 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009370:	5b                   	pop    ebx
c0009371:	5e                   	pop    esi
c0009372:	5f                   	pop    edi
c0009373:	c3                   	ret    

c0009374 <getDevicesOfType(DeviceType)>:
c0009374:	53                   	push   ebx
c0009375:	83 ec 14             	sub    esp,0x14
c0009378:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000937c:	53                   	push   ebx
c000937d:	e8 76 6a 01 00       	call   c001fdf8 <LinkedList<Device>::LinkedList()>
c0009382:	83 c4 0c             	add    esp,0xc
c0009385:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009389:	53                   	push   ebx
c000938a:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0009390:	e8 9b ff ff ff       	call   c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009395:	83 c4 18             	add    esp,0x18
c0009398:	89 d8                	mov    eax,ebx
c000939a:	5b                   	pop    ebx
c000939b:	c2 04 00             	ret    0x4
c000939e:	66 90                	xchg   ax,ax

c00093a0 <HardDiskController::HardDiskController(char const*)>:
c00093a0:	83 ec 0c             	sub    esp,0xc
c00093a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a7:	83 ec 08             	sub    esp,0x8
c00093aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ae:	50                   	push   eax
c00093af:	e8 f4 fd ff ff       	call   c00091a8 <Device::Device(char const*)>
c00093b4:	83 c4 10             	add    esp,0x10
c00093b7:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c00093bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093d0:	90                   	nop
c00093d1:	83 c4 0c             	add    esp,0xc
c00093d4:	c3                   	ret    
c00093d5:	90                   	nop
c00093d6:	66 90                	xchg   ax,ax

c00093d8 <HardDiskController::~HardDiskController()>:
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c00093e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e4:	89 10                	mov    DWORD PTR [eax],edx
c00093e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093ea:	83 ec 0c             	sub    esp,0xc
c00093ed:	50                   	push   eax
c00093ee:	e8 55 fb ff ff       	call   c0008f48 <Device::~Device()>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	90                   	nop
c00093f7:	83 c4 0c             	add    esp,0xc
c00093fa:	c3                   	ret    
c00093fb:	90                   	nop

c00093fc <HardDiskController::~HardDiskController()>:
c00093fc:	83 ec 0c             	sub    esp,0xc
c00093ff:	83 ec 0c             	sub    esp,0xc
c0009402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009406:	e8 cd ff ff ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c000940b:	83 c4 10             	add    esp,0x10
c000940e:	83 ec 08             	sub    esp,0x8
c0009411:	68 58 01 00 00       	push   0x158
c0009416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000941a:	e8 3c 32 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000941f:	83 c4 10             	add    esp,0x10
c0009422:	83 c4 0c             	add    esp,0xc
c0009425:	c3                   	ret    

c0009426 <PhysicalDisk::eject()>:
c0009426:	83 c8 ff             	or     eax,0xffffffff
c0009429:	c3                   	ret    

c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000942a:	83 ec 0c             	sub    esp,0xc
c000942d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009431:	83 ec 08             	sub    esp,0x8
c0009434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009438:	50                   	push   eax
c0009439:	e8 6a fd ff ff       	call   c00091a8 <Device::Device(char const*)>
c000943e:	83 c4 10             	add    esp,0x10
c0009441:	ba b8 16 02 c0       	mov    edx,0xc00216b8
c0009446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944a:	89 10                	mov    DWORD PTR [eax],edx
c000944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009450:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009466:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009478:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000947e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009482:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000948c:	90                   	nop
c000948d:	83 c4 0c             	add    esp,0xc
c0009490:	c3                   	ret    
c0009491:	90                   	nop

c0009492 <PhysicalDisk::startCache()>:
c0009492:	56                   	push   esi
c0009493:	53                   	push   ebx
c0009494:	83 ec 10             	sub    esp,0x10
c0009497:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000949b:	6a 44                	push   0x44
c000949d:	e8 2e 54 00 00       	call   c000e8d0 <malloc>
c00094a2:	89 c6                	mov    esi,eax
c00094a4:	58                   	pop    eax
c00094a5:	5a                   	pop    edx
c00094a6:	53                   	push   ebx
c00094a7:	56                   	push   esi
c00094a8:	e8 0f 14 00 00       	call   c000a8bc <VCache::VCache(PhysicalDisk*)>
c00094ad:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094b3:	83 c4 14             	add    esp,0x14
c00094b6:	5b                   	pop    ebx
c00094b7:	5e                   	pop    esi
c00094b8:	c3                   	ret    
c00094b9:	90                   	nop

c00094ba <PhysicalDisk::~PhysicalDisk()>:
c00094ba:	83 ec 0c             	sub    esp,0xc
c00094bd:	ba b8 16 02 c0       	mov    edx,0xc00216b8
c00094c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c6:	89 10                	mov    DWORD PTR [eax],edx
c00094c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094cc:	83 ec 0c             	sub    esp,0xc
c00094cf:	50                   	push   eax
c00094d0:	e8 73 fa ff ff       	call   c0008f48 <Device::~Device()>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	90                   	nop
c00094d9:	83 c4 0c             	add    esp,0xc
c00094dc:	c3                   	ret    
c00094dd:	90                   	nop

c00094de <PhysicalDisk::~PhysicalDisk()>:
c00094de:	83 ec 0c             	sub    esp,0xc
c00094e1:	83 ec 0c             	sub    esp,0xc
c00094e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e8:	e8 cd ff ff ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c00094ed:	83 c4 10             	add    esp,0x10
c00094f0:	83 ec 08             	sub    esp,0x8
c00094f3:	68 6c 01 00 00       	push   0x16c
c00094f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094fc:	e8 5a 31 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009501:	83 c4 10             	add    esp,0x10
c0009504:	83 c4 0c             	add    esp,0xc
c0009507:	c3                   	ret    

c0009508 <startGUI(void*)>:
c0009508:	55                   	push   ebp
c0009509:	89 e5                	mov    ebp,esp
c000950b:	53                   	push   ebx
c000950c:	83 ec 04             	sub    esp,0x4
c000950f:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009517:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000951c:	85 c0                	test   eax,eax
c000951e:	75 01                	jne    c0009521 <startGUI(void*)+0x19>
c0009520:	fb                   	sti    
c0009521:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009527:	83 ec 08             	sub    esp,0x8
c000952a:	6a 01                	push   0x1
c000952c:	68 e8 16 02 c0       	push   0xc00216e8
c0009531:	e8 b8 b3 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c0009536:	83 c4 10             	add    esp,0x10
c0009539:	83 ec 08             	sub    esp,0x8
c000953c:	53                   	push   ebx
c000953d:	50                   	push   eax
c000953e:	e8 0c b6 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c0009543:	83 c4 10             	add    esp,0x10
c0009546:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000954c:	83 ec 08             	sub    esp,0x8
c000954f:	6a 01                	push   0x1
c0009551:	68 02 17 02 c0       	push   0xc0021702
c0009556:	e8 93 b3 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c000955b:	83 c4 10             	add    esp,0x10
c000955e:	83 ec 08             	sub    esp,0x8
c0009561:	53                   	push   ebx
c0009562:	50                   	push   eax
c0009563:	e8 e7 b5 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	eb fe                	jmp    c000956b <startGUI(void*)+0x63>

c000956d <startGUIVESA(void*)>:
c000956d:	55                   	push   ebp
c000956e:	89 e5                	mov    ebp,esp
c0009570:	53                   	push   ebx
c0009571:	83 ec 04             	sub    esp,0x4
c0009574:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000957c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009581:	85 c0                	test   eax,eax
c0009583:	75 01                	jne    c0009586 <startGUIVESA(void*)+0x19>
c0009585:	fb                   	sti    
c0009586:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000958c:	83 ec 08             	sub    esp,0x8
c000958f:	6a 01                	push   0x1
c0009591:	68 20 17 02 c0       	push   0xc0021720
c0009596:	e8 53 b3 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c000959b:	83 c4 10             	add    esp,0x10
c000959e:	83 ec 08             	sub    esp,0x8
c00095a1:	53                   	push   ebx
c00095a2:	50                   	push   eax
c00095a3:	e8 a7 b5 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c00095a8:	83 c4 10             	add    esp,0x10
c00095ab:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095b1:	83 ec 08             	sub    esp,0x8
c00095b4:	6a 01                	push   0x1
c00095b6:	68 02 17 02 c0       	push   0xc0021702
c00095bb:	e8 2e b3 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c00095c0:	83 c4 10             	add    esp,0x10
c00095c3:	83 ec 08             	sub    esp,0x8
c00095c6:	53                   	push   ebx
c00095c7:	50                   	push   eax
c00095c8:	e8 82 b5 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c00095cd:	83 c4 10             	add    esp,0x10
c00095d0:	eb fe                	jmp    c00095d0 <startGUIVESA(void*)+0x63>

c00095d2 <sendKeyToTerminal(unsigned char)>:
c00095d2:	55                   	push   ebp
c00095d3:	89 e5                	mov    ebp,esp
c00095d5:	83 ec 28             	sub    esp,0x28
c00095d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095de:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095e3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095e7:	83 ec 08             	sub    esp,0x8
c00095ea:	52                   	push   edx
c00095eb:	50                   	push   eax
c00095ec:	e8 95 80 00 00       	call   c0011686 <VgaText::receiveKey(unsigned char)>
c00095f1:	83 c4 10             	add    esp,0x10
c00095f4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095f8:	83 f8 0a             	cmp    eax,0xa
c00095fb:	74 16                	je     c0009613 <sendKeyToTerminal(unsigned char)+0x41>
c00095fd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009601:	83 f8 03             	cmp    eax,0x3
c0009604:	74 0d                	je     c0009613 <sendKeyToTerminal(unsigned char)+0x41>
c0009606:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000960a:	83 f8 1c             	cmp    eax,0x1c
c000960d:	0f 85 92 00 00 00    	jne    c00096a5 <sendKeyToTerminal(unsigned char)+0xd3>
c0009613:	fa                   	cli    
c0009614:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009619:	83 c0 01             	add    eax,0x1
c000961c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009621:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009626:	83 c0 01             	add    eax,0x1
c0009629:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000962e:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0009633:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009636:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0009640:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009644:	74 1f                	je     c0009665 <sendKeyToTerminal(unsigned char)+0x93>
c0009646:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009649:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000964c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000964f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009652:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009655:	83 ec 0c             	sub    esp,0xc
c0009658:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000965b:	e8 7c c0 00 00       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0009660:	83 c4 10             	add    esp,0x10
c0009663:	eb db                	jmp    c0009640 <sendKeyToTerminal(unsigned char)+0x6e>
c0009665:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000966a:	83 e8 01             	sub    eax,0x1
c000966d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009672:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009677:	85 c0                	test   eax,eax
c0009679:	75 18                	jne    c0009693 <sendKeyToTerminal(unsigned char)+0xc1>
c000967b:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0009680:	85 c0                	test   eax,eax
c0009682:	74 0f                	je     c0009693 <sendKeyToTerminal(unsigned char)+0xc1>
c0009684:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000968e:	e8 49 bd 00 00       	call   c00153dc <schedule()>
c0009693:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000969b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00096a0:	85 c0                	test   eax,eax
c00096a2:	75 01                	jne    c00096a5 <sendKeyToTerminal(unsigned char)+0xd3>
c00096a4:	fb                   	sti    
c00096a5:	90                   	nop
c00096a6:	c9                   	leave  
c00096a7:	c3                   	ret    

c00096a8 <sendKeyboardToken(KeyboardToken)>:
c00096a8:	55                   	push   ebp
c00096a9:	89 e5                	mov    ebp,esp
c00096ab:	83 ec 18             	sub    esp,0x18
c00096ae:	e8 6f 5e 00 00       	call   c000f522 <KeUserIOReceived()>
c00096b3:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096b9:	0f b7 c0             	movzx  eax,ax
c00096bc:	83 f2 01             	xor    edx,0x1
c00096bf:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096c5:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096ca:	85 c0                	test   eax,eax
c00096cc:	74 24                	je     c00096f2 <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ce:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c00096d4:	83 ec 04             	sub    esp,0x4
c00096d7:	68 40 93 02 c0       	push   0xc0029340
c00096dc:	83 ec 08             	sub    esp,0x8
c00096df:	89 e0                	mov    eax,esp
c00096e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00096e4:	89 08                	mov    DWORD PTR [eax],ecx
c00096e6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00096e9:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c00096ed:	ff d2                	call   edx
c00096ef:	83 c4 10             	add    esp,0x10
c00096f2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00096f6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00096f9:	0f b6 c0             	movzx  eax,al
c00096fc:	85 c0                	test   eax,eax
c00096fe:	0f 84 da 00 00 00    	je     c00097de <sendKeyboardToken(KeyboardToken)+0x136>
c0009704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009707:	0f b7 c0             	movzx  eax,ax
c000970a:	3d 18 03 00 00       	cmp    eax,0x318
c000970f:	75 06                	jne    c0009717 <sendKeyboardToken(KeyboardToken)+0x6f>
c0009711:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000971a:	0f b7 c0             	movzx  eax,ax
c000971d:	3d 19 03 00 00       	cmp    eax,0x319
c0009722:	75 06                	jne    c000972a <sendKeyboardToken(KeyboardToken)+0x82>
c0009724:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000972a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000972d:	0f b7 c0             	movzx  eax,ax
c0009730:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009735:	75 06                	jne    c000973d <sendKeyboardToken(KeyboardToken)+0x95>
c0009737:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000973d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009740:	0f b7 c0             	movzx  eax,ax
c0009743:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009748:	75 06                	jne    c0009750 <sendKeyboardToken(KeyboardToken)+0xa8>
c000974a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0009750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009753:	0f b7 c0             	movzx  eax,ax
c0009756:	3d 1c 03 00 00       	cmp    eax,0x31c
c000975b:	75 06                	jne    c0009763 <sendKeyboardToken(KeyboardToken)+0xbb>
c000975d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0009763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009766:	0f b7 c0             	movzx  eax,ax
c0009769:	3d 1d 03 00 00       	cmp    eax,0x31d
c000976e:	75 06                	jne    c0009776 <sendKeyboardToken(KeyboardToken)+0xce>
c0009770:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009779:	0f b7 c0             	movzx  eax,ax
c000977c:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009781:	75 06                	jne    c0009789 <sendKeyboardToken(KeyboardToken)+0xe1>
c0009783:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000978c:	0f b7 c0             	movzx  eax,ax
c000978f:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009794:	75 06                	jne    c000979c <sendKeyboardToken(KeyboardToken)+0xf4>
c0009796:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000979c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979f:	0f b7 c0             	movzx  eax,ax
c00097a2:	3d 20 03 00 00       	cmp    eax,0x320
c00097a7:	75 06                	jne    c00097af <sendKeyboardToken(KeyboardToken)+0x107>
c00097a9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b2:	0f b7 c0             	movzx  eax,ax
c00097b5:	3d 21 03 00 00       	cmp    eax,0x321
c00097ba:	75 06                	jne    c00097c2 <sendKeyboardToken(KeyboardToken)+0x11a>
c00097bc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	0f b7 c0             	movzx  eax,ax
c00097c8:	3d 22 03 00 00       	cmp    eax,0x322
c00097cd:	0f 85 f1 00 00 00    	jne    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097d3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097d9:	e9 e6 00 00 00       	jmp    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e1:	0f b7 c0             	movzx  eax,ax
c00097e4:	3d 18 03 00 00       	cmp    eax,0x318
c00097e9:	75 0a                	jne    c00097f5 <sendKeyboardToken(KeyboardToken)+0x14d>
c00097eb:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00097f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097f8:	0f b7 c0             	movzx  eax,ax
c00097fb:	3d 19 03 00 00       	cmp    eax,0x319
c0009800:	75 0a                	jne    c000980c <sendKeyboardToken(KeyboardToken)+0x164>
c0009802:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009808:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000980c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000980f:	0f b7 c0             	movzx  eax,ax
c0009812:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009817:	75 0a                	jne    c0009823 <sendKeyboardToken(KeyboardToken)+0x17b>
c0009819:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000981f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009826:	0f b7 c0             	movzx  eax,ax
c0009829:	3d 1b 03 00 00       	cmp    eax,0x31b
c000982e:	75 0a                	jne    c000983a <sendKeyboardToken(KeyboardToken)+0x192>
c0009830:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009836:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000983a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000983d:	0f b7 c0             	movzx  eax,ax
c0009840:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009845:	75 0a                	jne    c0009851 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009847:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000984d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009854:	0f b7 c0             	movzx  eax,ax
c0009857:	3d 1d 03 00 00       	cmp    eax,0x31d
c000985c:	75 0a                	jne    c0009868 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000985e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009864:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000986b:	0f b7 c0             	movzx  eax,ax
c000986e:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009873:	75 0a                	jne    c000987f <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009875:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000987b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000987f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009882:	0f b7 c0             	movzx  eax,ax
c0009885:	3d 1f 03 00 00       	cmp    eax,0x31f
c000988a:	75 0a                	jne    c0009896 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000988c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0009892:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009899:	0f b7 c0             	movzx  eax,ax
c000989c:	3d 20 03 00 00       	cmp    eax,0x320
c00098a1:	75 0a                	jne    c00098ad <sendKeyboardToken(KeyboardToken)+0x205>
c00098a3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b0:	0f b7 c0             	movzx  eax,ax
c00098b3:	3d 21 03 00 00       	cmp    eax,0x321
c00098b8:	75 0a                	jne    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098ba:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098c7:	0f b7 c0             	movzx  eax,ax
c00098ca:	3d 00 02 00 00       	cmp    eax,0x200
c00098cf:	75 2f                	jne    c0009900 <sendKeyboardToken(KeyboardToken)+0x258>
c00098d1:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098d6:	83 f0 01             	xor    eax,0x1
c00098d9:	0f b6 c0             	movzx  eax,al
c00098dc:	85 c0                	test   eax,eax
c00098de:	74 20                	je     c0009900 <sendKeyboardToken(KeyboardToken)+0x258>
c00098e0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098e5:	6a 01                	push   0x1
c00098e7:	6a 00                	push   0x0
c00098e9:	68 08 95 00 c0       	push   0xc0009508
c00098ee:	50                   	push   eax
c00098ef:	e8 9c b8 00 00       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c00098f4:	83 c4 10             	add    esp,0x10
c00098f7:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c00098fe:	eb 3a                	jmp    c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c0009900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009903:	0f b7 c0             	movzx  eax,ax
c0009906:	3d 01 02 00 00       	cmp    eax,0x201
c000990b:	75 2d                	jne    c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c000990d:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c0009912:	83 f0 01             	xor    eax,0x1
c0009915:	0f b6 c0             	movzx  eax,al
c0009918:	85 c0                	test   eax,eax
c000991a:	74 1e                	je     c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c000991c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0009921:	6a 01                	push   0x1
c0009923:	6a 00                	push   0x0
c0009925:	68 6d 95 00 c0       	push   0xc000956d
c000992a:	50                   	push   eax
c000992b:	e8 60 b8 00 00       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c0009930:	83 c4 10             	add    esp,0x10
c0009933:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c000993a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000993d:	0f b7 c0             	movzx  eax,ax
c0009940:	3d 25 03 00 00       	cmp    eax,0x325
c0009945:	75 06                	jne    c000994d <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009947:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000994d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009950:	0f b7 c0             	movzx  eax,ax
c0009953:	3d 24 03 00 00       	cmp    eax,0x324
c0009958:	75 06                	jne    c0009960 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000995a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009963:	0f b7 c0             	movzx  eax,ax
c0009966:	3d 23 03 00 00       	cmp    eax,0x323
c000996b:	75 06                	jne    c0009973 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000996d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0009973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009976:	0f b7 c0             	movzx  eax,ax
c0009979:	3d 26 03 00 00       	cmp    eax,0x326
c000997e:	75 06                	jne    c0009986 <sendKeyboardToken(KeyboardToken)+0x2de>
c0009980:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009989:	0f b7 c0             	movzx  eax,ax
c000998c:	3d 27 03 00 00       	cmp    eax,0x327
c0009991:	75 06                	jne    c0009999 <sendKeyboardToken(KeyboardToken)+0x2f1>
c0009993:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0009999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000999c:	0f b7 c0             	movzx  eax,ax
c000999f:	3d 22 03 00 00       	cmp    eax,0x322
c00099a4:	75 06                	jne    c00099ac <sendKeyboardToken(KeyboardToken)+0x304>
c00099a6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099ac:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099b0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099b3:	83 f0 01             	xor    eax,0x1
c00099b6:	0f b6 c0             	movzx  eax,al
c00099b9:	85 c0                	test   eax,eax
c00099bb:	74 7c                	je     c0009a39 <sendKeyboardToken(KeyboardToken)+0x391>
c00099bd:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099c2:	0f b6 c0             	movzx  eax,al
c00099c5:	85 c0                	test   eax,eax
c00099c7:	74 43                	je     c0009a0c <sendKeyboardToken(KeyboardToken)+0x364>
c00099c9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099cd:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099d1:	85 c0                	test   eax,eax
c00099d3:	74 2b                	je     c0009a00 <sendKeyboardToken(KeyboardToken)+0x358>
c00099d5:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099db:	89 d0                	mov    eax,edx
c00099dd:	c1 e0 02             	shl    eax,0x2
c00099e0:	01 d0                	add    eax,edx
c00099e2:	d1 e0                	shl    eax,1
c00099e4:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099ec:	0f b7 c0             	movzx  eax,ax
c00099ef:	8d 50 d0             	lea    edx,[eax-0x30]
c00099f2:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c00099f7:	01 d0                	add    eax,edx
c00099f9:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099fe:	eb 71                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a00:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a0a:	eb 65                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a0c:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a11:	85 c0                	test   eax,eax
c0009a13:	74 18                	je     c0009a2d <sendKeyboardToken(KeyboardToken)+0x385>
c0009a15:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a1a:	0f b6 c0             	movzx  eax,al
c0009a1d:	83 ec 0c             	sub    esp,0xc
c0009a20:	50                   	push   eax
c0009a21:	e8 ac fb ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a2d:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a37:	eb 38                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a3c:	0f b7 c0             	movzx  eax,ax
c0009a3f:	3d 01 01 00 00       	cmp    eax,0x101
c0009a44:	75 2b                	jne    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a46:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a4b:	85 c0                	test   eax,eax
c0009a4d:	74 18                	je     c0009a67 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a4f:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a54:	0f b6 c0             	movzx  eax,al
c0009a57:	83 ec 0c             	sub    esp,0xc
c0009a5a:	50                   	push   eax
c0009a5b:	e8 72 fb ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a67:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a71:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a74:	83 f0 01             	xor    eax,0x1
c0009a77:	0f b6 c0             	movzx  eax,al
c0009a7a:	85 c0                	test   eax,eax
c0009a7c:	74 5a                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a7e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a81:	83 f0 01             	xor    eax,0x1
c0009a84:	0f b6 c0             	movzx  eax,al
c0009a87:	85 c0                	test   eax,eax
c0009a89:	74 4d                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a8b:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a90:	83 f0 01             	xor    eax,0x1
c0009a93:	0f b6 c0             	movzx  eax,al
c0009a96:	85 c0                	test   eax,eax
c0009a98:	74 3e                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a9d:	0f b7 c0             	movzx  eax,ax
c0009aa0:	83 f8 1f             	cmp    eax,0x1f
c0009aa3:	76 0b                	jbe    c0009ab0 <sendKeyboardToken(KeyboardToken)+0x408>
c0009aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa8:	0f b7 c0             	movzx  eax,ax
c0009aab:	83 f8 7e             	cmp    eax,0x7e
c0009aae:	76 16                	jbe    c0009ac6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ab3:	0f b7 c0             	movzx  eax,ax
c0009ab6:	83 f8 0a             	cmp    eax,0xa
c0009ab9:	74 0b                	je     c0009ac6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abe:	0f b7 c0             	movzx  eax,ax
c0009ac1:	83 f8 08             	cmp    eax,0x8
c0009ac4:	75 12                	jne    c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac9:	0f b6 c0             	movzx  eax,al
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	50                   	push   eax
c0009ad0:	e8 fd fa ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009ad5:	83 c4 10             	add    esp,0x10
c0009ad8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009adb:	83 f0 01             	xor    eax,0x1
c0009ade:	0f b6 c0             	movzx  eax,al
c0009ae1:	85 c0                	test   eax,eax
c0009ae3:	74 5d                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009ae5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009ae8:	83 f0 01             	xor    eax,0x1
c0009aeb:	0f b6 c0             	movzx  eax,al
c0009aee:	85 c0                	test   eax,eax
c0009af0:	74 50                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009af2:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009af7:	0f b6 c0             	movzx  eax,al
c0009afa:	85 c0                	test   eax,eax
c0009afc:	74 44                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b01:	0f b7 c0             	movzx  eax,ax
c0009b04:	83 f8 3f             	cmp    eax,0x3f
c0009b07:	76 39                	jbe    c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0c:	0f b7 c0             	movzx  eax,ax
c0009b0f:	83 f8 7f             	cmp    eax,0x7f
c0009b12:	77 2e                	ja     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b17:	88 c2                	mov    dl,al
c0009b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b1c:	0f b7 c0             	movzx  eax,ax
c0009b1f:	83 f8 5f             	cmp    eax,0x5f
c0009b22:	76 04                	jbe    c0009b28 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b24:	b0 20                	mov    al,0x20
c0009b26:	eb 02                	jmp    c0009b2a <sendKeyboardToken(KeyboardToken)+0x482>
c0009b28:	b0 00                	mov    al,0x0
c0009b2a:	89 d1                	mov    ecx,edx
c0009b2c:	29 c1                	sub    ecx,eax
c0009b2e:	89 c8                	mov    eax,ecx
c0009b30:	83 e8 40             	sub    eax,0x40
c0009b33:	0f b6 c0             	movzx  eax,al
c0009b36:	83 ec 0c             	sub    esp,0xc
c0009b39:	50                   	push   eax
c0009b3a:	e8 93 fa ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009b3f:	83 c4 10             	add    esp,0x10
c0009b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b45:	0f b7 c0             	movzx  eax,ax
c0009b48:	3d 00 03 00 00       	cmp    eax,0x300
c0009b4d:	75 12                	jne    c0009b61 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b52:	83 f0 01             	xor    eax,0x1
c0009b55:	0f b6 c0             	movzx  eax,al
c0009b58:	85 c0                	test   eax,eax
c0009b5a:	74 05                	je     c0009b61 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b5c:	e8 82 72 00 00       	call   c0010de3 <doTerminalCycle()>
c0009b61:	90                   	nop
c0009b62:	c9                   	leave  
c0009b63:	c3                   	ret    

c0009b64 <clearInternalKeybuffer(VgaText*)>:
c0009b64:	55                   	push   ebp
c0009b65:	89 e5                	mov    ebp,esp
c0009b67:	83 ec 08             	sub    esp,0x8
c0009b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b6d:	05 02 01 00 00       	add    eax,0x102
c0009b72:	83 ec 0c             	sub    esp,0xc
c0009b75:	50                   	push   eax
c0009b76:	e8 05 6a ff ff       	call   c0000580 <strlen>
c0009b7b:	83 c4 10             	add    esp,0x10
c0009b7e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b81:	81 c2 02 01 00 00    	add    edx,0x102
c0009b87:	83 ec 04             	sub    esp,0x4
c0009b8a:	50                   	push   eax
c0009b8b:	6a 00                	push   0x0
c0009b8d:	52                   	push   edx
c0009b8e:	e8 5d 69 ff ff       	call   c00004f0 <memset>
c0009b93:	83 c4 10             	add    esp,0x10
c0009b96:	90                   	nop
c0009b97:	c9                   	leave  
c0009b98:	c3                   	ret    

c0009b99 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009b99:	55                   	push   ebp
c0009b9a:	89 e5                	mov    ebp,esp
c0009b9c:	83 ec 18             	sub    esp,0x18
c0009b9f:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009ba4:	85 c0                	test   eax,eax
c0009ba6:	74 2a                	je     c0009bd2 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009ba8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bae:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c0009bb4:	83 ec 04             	sub    esp,0x4
c0009bb7:	68 40 93 02 c0       	push   0xc0029340
c0009bbc:	83 ec 08             	sub    esp,0x8
c0009bbf:	89 e0                	mov    eax,esp
c0009bc1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009bc4:	89 08                	mov    DWORD PTR [eax],ecx
c0009bc6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009bc9:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009bcd:	ff d2                	call   edx
c0009bcf:	83 c4 10             	add    esp,0x10
c0009bd2:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009bd7:	0f b6 c0             	movzx  eax,al
c0009bda:	85 c0                	test   eax,eax
c0009bdc:	74 07                	je     c0009be5 <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009bde:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009be5:	fb                   	sti    
c0009be6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bf1:	0f 84 2a 01 00 00    	je     c0009d21 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bfa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c00:	0f be c0             	movsx  eax,al
c0009c03:	85 c0                	test   eax,eax
c0009c05:	75 27                	jne    c0009c2e <readKeyboard(VgaText*, char*, unsigned long)+0x95>
c0009c07:	fa                   	cli    
c0009c08:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c0d:	83 c0 01             	add    eax,0x1
c0009c10:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c15:	e8 c2 b7 00 00       	call   c00153dc <schedule()>
c0009c1a:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009c22:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c27:	85 c0                	test   eax,eax
c0009c29:	75 cc                	jne    c0009bf7 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c2b:	fb                   	sti    
c0009c2c:	eb c9                	jmp    c0009bf7 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c2e:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c33:	0f b6 c0             	movzx  eax,al
c0009c36:	85 c0                	test   eax,eax
c0009c38:	74 0a                	je     c0009c44 <readKeyboard(VgaText*, char*, unsigned long)+0xab>
c0009c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c3d:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c47:	8d 50 01             	lea    edx,[eax+0x1]
c0009c4a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c50:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c56:	88 10                	mov    BYTE PTR [eax],dl
c0009c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c5b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c61:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c64:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c68:	83 f8 03             	cmp    eax,0x3
c0009c6b:	75 1e                	jne    c0009c8b <readKeyboard(VgaText*, char*, unsigned long)+0xf2>
c0009c6d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c77:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c7d:	83 ec 08             	sub    esp,0x8
c0009c80:	6a 02                	push   0x2
c0009c82:	50                   	push   eax
c0009c83:	e8 b0 60 00 00       	call   c000fd38 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c88:	83 c4 10             	add    esp,0x10
c0009c8b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8f:	83 f8 1c             	cmp    eax,0x1c
c0009c92:	75 1e                	jne    c0009cb2 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c0009c94:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca4:	83 ec 08             	sub    esp,0x8
c0009ca7:	6a 09                	push   0x9
c0009ca9:	50                   	push   eax
c0009caa:	e8 89 60 00 00       	call   c000fd38 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009caf:	83 c4 10             	add    esp,0x10
c0009cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cb5:	05 02 01 00 00       	add    eax,0x102
c0009cba:	83 ec 0c             	sub    esp,0xc
c0009cbd:	50                   	push   eax
c0009cbe:	e8 bd 68 ff ff       	call   c0000580 <strlen>
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc9:	81 c2 02 01 00 00    	add    edx,0x102
c0009ccf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cd2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd5:	81 c2 02 01 00 00    	add    edx,0x102
c0009cdb:	83 ec 04             	sub    esp,0x4
c0009cde:	50                   	push   eax
c0009cdf:	51                   	push   ecx
c0009ce0:	52                   	push   edx
c0009ce1:	e8 ea 66 ff ff       	call   c00003d0 <memmove>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ced:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009cf1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf5:	83 f8 0a             	cmp    eax,0xa
c0009cf8:	74 22                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009cfa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfe:	83 f8 03             	cmp    eax,0x3
c0009d01:	74 19                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009d03:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d07:	83 f8 1c             	cmp    eax,0x1c
c0009d0a:	74 10                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009d0c:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d11:	0f b6 c0             	movzx  eax,al
c0009d14:	85 c0                	test   eax,eax
c0009d16:	0f 84 d1 fe ff ff    	je     c0009bed <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d1f:	eb 03                	jmp    c0009d24 <readKeyboard(VgaText*, char*, unsigned long)+0x18b>
c0009d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d24:	c9                   	leave  
c0009d25:	c3                   	ret    

c0009d26 <Keyboard::Keyboard(char const*)>:
c0009d26:	83 ec 0c             	sub    esp,0xc
c0009d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2d:	83 ec 08             	sub    esp,0x8
c0009d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d34:	50                   	push   eax
c0009d35:	e8 6e f4 ff ff       	call   c00091a8 <Device::Device(char const*)>
c0009d3a:	83 c4 10             	add    esp,0x10
c0009d3d:	ba 44 17 02 c0       	mov    edx,0xc0021744
c0009d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d46:	89 10                	mov    DWORD PTR [eax],edx
c0009d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d4c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d56:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d5d:	90                   	nop
c0009d5e:	83 c4 0c             	add    esp,0xc
c0009d61:	c3                   	ret    

c0009d62 <Keyboard::~Keyboard()>:
c0009d62:	83 ec 0c             	sub    esp,0xc
c0009d65:	ba 44 17 02 c0       	mov    edx,0xc0021744
c0009d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d6e:	89 10                	mov    DWORD PTR [eax],edx
c0009d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d74:	83 ec 0c             	sub    esp,0xc
c0009d77:	50                   	push   eax
c0009d78:	e8 cb f1 ff ff       	call   c0008f48 <Device::~Device()>
c0009d7d:	83 c4 10             	add    esp,0x10
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop

c0009d86 <Keyboard::~Keyboard()>:
c0009d86:	83 ec 0c             	sub    esp,0xc
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d90:	e8 cd ff ff ff       	call   c0009d62 <Keyboard::~Keyboard()>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	83 ec 08             	sub    esp,0x8
c0009d9b:	68 5c 01 00 00       	push   0x15c
c0009da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da4:	e8 b2 28 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	83 c4 0c             	add    esp,0xc
c0009daf:	c3                   	ret    

c0009db0 <LogicalDisk::close(int, int, void*)>:
c0009db0:	83 c8 ff             	or     eax,0xffffffff
c0009db3:	c3                   	ret    

c0009db4 <LogicalDisk::~LogicalDisk()>:
c0009db4:	83 ec 0c             	sub    esp,0xc
c0009db7:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c0009dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc0:	89 10                	mov    DWORD PTR [eax],edx
c0009dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc6:	83 ec 0c             	sub    esp,0xc
c0009dc9:	50                   	push   eax
c0009dca:	e8 79 f1 ff ff       	call   c0008f48 <Device::~Device()>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	90                   	nop
c0009dd3:	83 c4 0c             	add    esp,0xc
c0009dd6:	c3                   	ret    
c0009dd7:	90                   	nop

c0009dd8 <LogicalDisk::~LogicalDisk()>:
c0009dd8:	83 ec 0c             	sub    esp,0xc
c0009ddb:	83 ec 0c             	sub    esp,0xc
c0009dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de2:	e8 cd ff ff ff       	call   c0009db4 <LogicalDisk::~LogicalDisk()>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	83 ec 08             	sub    esp,0x8
c0009ded:	68 78 01 00 00       	push   0x178
c0009df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df6:	e8 60 28 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	83 c4 0c             	add    esp,0xc
c0009e01:	c3                   	ret    

c0009e02 <LogicalDisk::open(int, int, void*)>:
c0009e02:	83 ec 18             	sub    esp,0x18
c0009e05:	68 70 17 02 c0       	push   0xc0021770
c0009e0a:	e8 07 4e 00 00       	call   c000ec16 <KePanic(char const*)>
c0009e0f:	83 c8 ff             	or     eax,0xffffffff
c0009e12:	83 c4 1c             	add    esp,0x1c
c0009e15:	c3                   	ret    

c0009e16 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e16:	53                   	push   ebx
c0009e17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e23:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e29:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e2f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e35:	77 10                	ja     c0009e47 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e37:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e3d:	89 d3                	mov    ebx,edx
c0009e3f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e45:	72 05                	jb     c0009e4c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e47:	83 c8 ff             	or     eax,0xffffffff
c0009e4a:	89 c2                	mov    edx,eax
c0009e4c:	5b                   	pop    ebx
c0009e4d:	c3                   	ret    

c0009e4e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e4e:	56                   	push   esi
c0009e4f:	83 c8 ff             	or     eax,0xffffffff
c0009e52:	53                   	push   ebx
c0009e53:	89 c2                	mov    edx,eax
c0009e55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e59:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e61:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e67:	77 27                	ja     c0009e90 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e69:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e6f:	89 d8                	mov    eax,ebx
c0009e71:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e7c:	89 c2                	mov    edx,eax
c0009e7e:	73 10                	jae    c0009e90 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e80:	89 c8                	mov    eax,ecx
c0009e82:	89 da                	mov    edx,ebx
c0009e84:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e8a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e90:	5b                   	pop    ebx
c0009e91:	5e                   	pop    esi
c0009e92:	c3                   	ret    
c0009e93:	90                   	nop

c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e94:	83 ec 1c             	sub    esp,0x1c
c0009e97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ea7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eab:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eba:	83 ec 08             	sub    esp,0x8
c0009ebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec1:	50                   	push   eax
c0009ec2:	e8 e1 f2 ff ff       	call   c00091a8 <Device::Device(char const*)>
c0009ec7:	83 c4 10             	add    esp,0x10
c0009eca:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c0009ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed3:	89 10                	mov    DWORD PTR [eax],edx
c0009ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efa:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f04:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f10:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f16:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f27:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f2d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f3b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f45:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f4f:	90                   	nop
c0009f50:	83 c4 1c             	add    esp,0x1c
c0009f53:	c3                   	ret    

c0009f54 <LogicalDisk::assignDriveLetter()>:
c0009f54:	55                   	push   ebp
c0009f55:	57                   	push   edi
c0009f56:	56                   	push   esi
c0009f57:	53                   	push   ebx
c0009f58:	83 ec 14             	sub    esp,0x14
c0009f5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f65:	b0 41                	mov    al,0x41
c0009f67:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f6d:	84 d2                	test   dl,dl
c0009f6f:	75 02                	jne    c0009f73 <LogicalDisk::assignDriveLetter()+0x1f>
c0009f71:	b0 43                	mov    al,0x43
c0009f73:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f79:	0f b6 ca             	movzx  ecx,dl
c0009f7c:	0f be e8             	movsx  ebp,al
c0009f7f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f83:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f87:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f8d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f91:	3c 43                	cmp    al,0x43
c0009f93:	75 10                	jne    c0009fa5 <LogicalDisk::assignDriveLetter()+0x51>
c0009f95:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f9c:	75 5a                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f9e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fa3:	75 53                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fa5:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fa8:	ba 01 00 00 00       	mov    edx,0x1
c0009fad:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fb0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fb3:	d3 e2                	shl    edx,cl
c0009fb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fb9:	89 d7                	mov    edi,edx
c0009fbb:	89 d6                	mov    esi,edx
c0009fbd:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fc1:	c1 ff 1f             	sar    edi,0x1f
c0009fc4:	21 f9                	and    ecx,edi
c0009fc6:	09 d1                	or     ecx,edx
c0009fc8:	75 2e                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fce:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fd2:	09 f2                	or     edx,esi
c0009fd4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fd7:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fe1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fe7:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009fee:	09 fa                	or     edx,edi
c0009ff0:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c0009ff6:	eb 0d                	jmp    c000a005 <LogicalDisk::assignDriveLetter()+0xb1>
c0009ff8:	8d 50 01             	lea    edx,[eax+0x1]
c0009ffb:	45                   	inc    ebp
c0009ffc:	80 fa 5b             	cmp    dl,0x5b
c0009fff:	88 d0                	mov    al,dl
c000a001:	75 8e                	jne    c0009f91 <LogicalDisk::assignDriveLetter()+0x3d>
c000a003:	31 c0                	xor    eax,eax
c000a005:	83 c4 14             	add    esp,0x14
c000a008:	5b                   	pop    ebx
c000a009:	5e                   	pop    esi
c000a00a:	5f                   	pop    edi
c000a00b:	5d                   	pop    ebp
c000a00c:	c3                   	ret    
c000a00d:	90                   	nop

c000a00e <LogicalDisk::mount()>:
c000a00e:	56                   	push   esi
c000a00f:	53                   	push   ebx
c000a010:	53                   	push   ebx
c000a011:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a015:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a01b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a025:	85 db                	test   ebx,ebx
c000a027:	74 27                	je     c000a050 <LogicalDisk::mount()+0x42>
c000a029:	51                   	push   ecx
c000a02a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a031:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a033:	83 e8 41             	sub    eax,0x41
c000a036:	50                   	push   eax
c000a037:	56                   	push   esi
c000a038:	53                   	push   ebx
c000a039:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	84 c0                	test   al,al
c000a041:	74 08                	je     c000a04b <LogicalDisk::mount()+0x3d>
c000a043:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a049:	eb 07                	jmp    c000a052 <LogicalDisk::mount()+0x44>
c000a04b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a04e:	eb d5                	jmp    c000a025 <LogicalDisk::mount()+0x17>
c000a050:	31 c0                	xor    eax,eax
c000a052:	5a                   	pop    edx
c000a053:	5b                   	pop    ebx
c000a054:	5e                   	pop    esi
c000a055:	c3                   	ret    

c000a056 <LogicalDisk::unmount()>:
c000a056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a05a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a064:	c3                   	ret    
c000a065:	90                   	nop

c000a066 <LogicalDisk::eject()>:
c000a066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a06a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a070:	8b 10                	mov    edx,DWORD PTR [eax]
c000a072:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a076:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a079:	90                   	nop

c000a07a <LogicalDisk::unassignDriveLetter()>:
c000a07a:	57                   	push   edi
c000a07b:	56                   	push   esi
c000a07c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a080:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a087:	85 c9                	test   ecx,ecx
c000a089:	75 0f                	jne    c000a09a <LogicalDisk::unassignDriveLetter()+0x20>
c000a08b:	c7 44 24 0c 94 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021794
c000a093:	5e                   	pop    esi
c000a094:	5f                   	pop    edi
c000a095:	e9 7c 4b 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000a09a:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0a1:	83 e9 41             	sub    ecx,0x41
c000a0a4:	b8 01 00 00 00       	mov    eax,0x1
c000a0a9:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0b4:	d3 e0                	shl    eax,cl
c000a0b6:	89 c7                	mov    edi,eax
c000a0b8:	f7 d0                	not    eax
c000a0ba:	c1 ff 1f             	sar    edi,0x1f
c000a0bd:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0c3:	89 fe                	mov    esi,edi
c000a0c5:	f7 d6                	not    esi
c000a0c7:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0cd:	5e                   	pop    esi
c000a0ce:	5f                   	pop    edi
c000a0cf:	c3                   	ret    

c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0d0:	57                   	push   edi
c000a0d1:	56                   	push   esi
c000a0d2:	53                   	push   ebx
c000a0d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0e9:	77 41                	ja     c000a12c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0eb:	99                   	cdq    
c000a0ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0f2:	01 c8                	add    eax,ecx
c000a0f4:	11 da                	adc    edx,ebx
c000a0f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0fc:	19 d7                	sbb    edi,edx
c000a0fe:	72 33                	jb     c000a133 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a100:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a106:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a10c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a110:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a114:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a11a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a124:	5b                   	pop    ebx
c000a125:	5e                   	pop    esi
c000a126:	5f                   	pop    edi
c000a127:	e9 cc 0a 00 00       	jmp    c000abf8 <VCache::read(unsigned long long, int, void*)>
c000a12c:	b8 05 00 00 00       	mov    eax,0x5
c000a131:	eb 05                	jmp    c000a138 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a133:	b8 07 00 00 00       	mov    eax,0x7
c000a138:	5b                   	pop    ebx
c000a139:	5e                   	pop    esi
c000a13a:	5f                   	pop    edi
c000a13b:	c3                   	ret    

c000a13c <LogicalDisk::write(unsigned long long, int, void*)>:
c000a13c:	57                   	push   edi
c000a13d:	56                   	push   esi
c000a13e:	53                   	push   ebx
c000a13f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a147:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a14b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a14f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a155:	77 41                	ja     c000a198 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a157:	99                   	cdq    
c000a158:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a15e:	01 c8                	add    eax,ecx
c000a160:	11 da                	adc    edx,ebx
c000a162:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a168:	19 d7                	sbb    edi,edx
c000a16a:	72 33                	jb     c000a19f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a16c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a172:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a178:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a17c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a180:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a186:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a18c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a190:	5b                   	pop    ebx
c000a191:	5e                   	pop    esi
c000a192:	5f                   	pop    edi
c000a193:	e9 70 09 00 00       	jmp    c000ab08 <VCache::write(unsigned long long, int, void*)>
c000a198:	b8 05 00 00 00       	mov    eax,0x5
c000a19d:	eb 05                	jmp    c000a1a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a19f:	b8 07 00 00 00       	mov    eax,0x7
c000a1a4:	5b                   	pop    ebx
c000a1a5:	5e                   	pop    esi
c000a1a6:	5f                   	pop    edi
c000a1a7:	c3                   	ret    

c000a1a8 <Mouse::Mouse(char const*)>:
c000a1a8:	83 ec 0c             	sub    esp,0xc
c000a1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1af:	83 ec 08             	sub    esp,0x8
c000a1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b6:	50                   	push   eax
c000a1b7:	e8 ec ef ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a1bc:	83 c4 10             	add    esp,0x10
c000a1bf:	ba e8 17 02 c0       	mov    edx,0xc00217e8
c000a1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c8:	89 10                	mov    DWORD PTR [eax],edx
c000a1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1d8:	90                   	nop
c000a1d9:	83 c4 0c             	add    esp,0xc
c000a1dc:	c3                   	ret    
c000a1dd:	90                   	nop
c000a1de:	66 90                	xchg   ax,ax

c000a1e0 <Mouse::~Mouse()>:
c000a1e0:	83 ec 0c             	sub    esp,0xc
c000a1e3:	ba e8 17 02 c0       	mov    edx,0xc00217e8
c000a1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ec:	89 10                	mov    DWORD PTR [eax],edx
c000a1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f2:	83 ec 0c             	sub    esp,0xc
c000a1f5:	50                   	push   eax
c000a1f6:	e8 4d ed ff ff       	call   c0008f48 <Device::~Device()>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	90                   	nop
c000a1ff:	83 c4 0c             	add    esp,0xc
c000a202:	c3                   	ret    
c000a203:	90                   	nop

c000a204 <Mouse::~Mouse()>:
c000a204:	83 ec 0c             	sub    esp,0xc
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20e:	e8 cd ff ff ff       	call   c000a1e0 <Mouse::~Mouse()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	83 ec 08             	sub    esp,0x8
c000a219:	68 58 01 00 00       	push   0x158
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	e8 34 24 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	83 c4 0c             	add    esp,0xc
c000a22d:	c3                   	ret    

c000a22e <NIC::getMAC()>:
c000a22e:	31 c0                	xor    eax,eax
c000a230:	31 d2                	xor    edx,edx
c000a232:	c3                   	ret    
c000a233:	90                   	nop

c000a234 <NIC::write(int, unsigned char*, int*)>:
c000a234:	b8 01 00 00 00       	mov    eax,0x1
c000a239:	c3                   	ret    

c000a23a <NIC::NIC(char const*)>:
c000a23a:	83 ec 0c             	sub    esp,0xc
c000a23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a241:	83 ec 08             	sub    esp,0x8
c000a244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a248:	50                   	push   eax
c000a249:	e8 5a ef ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a24e:	83 c4 10             	add    esp,0x10
c000a251:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000a256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25a:	89 10                	mov    DWORD PTR [eax],edx
c000a25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a260:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a26a:	90                   	nop
c000a26b:	83 c4 0c             	add    esp,0xc
c000a26e:	c3                   	ret    
c000a26f:	90                   	nop

c000a270 <NIC::~NIC()>:
c000a270:	83 ec 0c             	sub    esp,0xc
c000a273:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000a278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27c:	89 10                	mov    DWORD PTR [eax],edx
c000a27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a282:	83 ec 0c             	sub    esp,0xc
c000a285:	50                   	push   eax
c000a286:	e8 bd ec ff ff       	call   c0008f48 <Device::~Device()>
c000a28b:	83 c4 10             	add    esp,0x10
c000a28e:	90                   	nop
c000a28f:	83 c4 0c             	add    esp,0xc
c000a292:	c3                   	ret    
c000a293:	90                   	nop

c000a294 <NIC::~NIC()>:
c000a294:	83 ec 0c             	sub    esp,0xc
c000a297:	83 ec 0c             	sub    esp,0xc
c000a29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29e:	e8 cd ff ff ff       	call   c000a270 <NIC::~NIC()>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	83 ec 08             	sub    esp,0x8
c000a2a9:	68 58 01 00 00       	push   0x158
c000a2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b2:	e8 a4 23 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	83 c4 0c             	add    esp,0xc
c000a2bd:	c3                   	ret    

c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2be:	55                   	push   ebp
c000a2bf:	57                   	push   edi
c000a2c0:	56                   	push   esi
c000a2c1:	53                   	push   ebx
c000a2c2:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2c8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2cf:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2d6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2dd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2ec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2f3:	e8 ac ef ff ff       	call   c00092a4 <Device::getName()>
c000a2f8:	5a                   	pop    edx
c000a2f9:	59                   	pop    ecx
c000a2fa:	50                   	push   eax
c000a2fb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2ff:	55                   	push   ebp
c000a300:	e8 4b 63 ff ff       	call   c0000650 <strcpy>
c000a305:	5b                   	pop    ebx
c000a306:	58                   	pop    eax
c000a307:	68 40 18 02 c0       	push   0xc0021840
c000a30c:	55                   	push   ebp
c000a30d:	e8 5e 65 ff ff       	call   c0000870 <strcat>
c000a312:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a319:	e8 b2 45 00 00       	call   c000e8d0 <malloc>
c000a31e:	83 c4 0c             	add    esp,0xc
c000a321:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a325:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a329:	89 c3                	mov    ebx,eax
c000a32b:	57                   	push   edi
c000a32c:	56                   	push   esi
c000a32d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a334:	55                   	push   ebp
c000a335:	50                   	push   eax
c000a336:	e8 59 fb ff ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a33b:	83 c4 14             	add    esp,0x14
c000a33e:	53                   	push   ebx
c000a33f:	e8 10 fc ff ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c000a344:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a347:	e8 c2 fc ff ff       	call   c000a00e <LogicalDisk::mount()>
c000a34c:	58                   	pop    eax
c000a34d:	5a                   	pop    edx
c000a34e:	53                   	push   ebx
c000a34f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a356:	e8 eb ec ff ff       	call   c0009046 <Device::addChild(Device*)>
c000a35b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a361:	5b                   	pop    ebx
c000a362:	5e                   	pop    esi
c000a363:	5f                   	pop    edi
c000a364:	5d                   	pop    ebp
c000a365:	c3                   	ret    

c000a366 <createPartitionsForDisk(PhysicalDisk*)>:
c000a366:	55                   	push   ebp
c000a367:	57                   	push   edi
c000a368:	56                   	push   esi
c000a369:	53                   	push   ebx
c000a36a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a370:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a377:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a37d:	3d 00 02 00 00       	cmp    eax,0x200
c000a382:	74 27                	je     c000a3ab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a384:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a38a:	83 ec 10             	sub    esp,0x10
c000a38d:	99                   	cdq    
c000a38e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a394:	52                   	push   edx
c000a395:	50                   	push   eax
c000a396:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a39a:	c1 e6 0a             	shl    esi,0xa
c000a39d:	89 fd                	mov    ebp,edi
c000a39f:	55                   	push   ebp
c000a3a0:	56                   	push   esi
c000a3a1:	e8 fe 56 01 00       	call   c001faa4 <__udivdi3>
c000a3a6:	e9 b9 00 00 00       	jmp    c000a464 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3b0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3b4:	56                   	push   esi
c000a3b5:	6a 01                	push   0x1
c000a3b7:	6a 00                	push   0x0
c000a3b9:	6a 00                	push   0x0
c000a3bb:	53                   	push   ebx
c000a3bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3bf:	83 c4 20             	add    esp,0x20
c000a3c2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3ca:	75 0a                	jne    c000a3d6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3cc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3d4:	74 2c                	je     c000a402 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3dc:	83 ec 10             	sub    esp,0x10
c000a3df:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3e5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3eb:	89 f7                	mov    edi,esi
c000a3ed:	c1 ff 1f             	sar    edi,0x1f
c000a3f0:	57                   	push   edi
c000a3f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3f5:	56                   	push   esi
c000a3f6:	c1 e0 0a             	shl    eax,0xa
c000a3f9:	52                   	push   edx
c000a3fa:	50                   	push   eax
c000a3fb:	e8 a4 56 01 00       	call   c001faa4 <__udivdi3>
c000a400:	eb 62                	jmp    c000a464 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a402:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a409:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a410:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a417:	89 cf                	mov    edi,ecx
c000a419:	83 e2 7f             	and    edx,0x7f
c000a41c:	83 e7 7f             	and    edi,0x7f
c000a41f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a422:	83 e0 7f             	and    eax,0x7f
c000a425:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a428:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a42f:	83 e0 7f             	and    eax,0x7f
c000a432:	01 d0                	add    eax,edx
c000a434:	84 c0                	test   al,al
c000a436:	89 c5                	mov    ebp,eax
c000a438:	74 41                	je     c000a47b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a43a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a440:	83 ec 10             	sub    esp,0x10
c000a443:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a449:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a44f:	89 f7                	mov    edi,esi
c000a451:	c1 ff 1f             	sar    edi,0x1f
c000a454:	57                   	push   edi
c000a455:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a459:	56                   	push   esi
c000a45a:	c1 e0 0a             	shl    eax,0xa
c000a45d:	52                   	push   edx
c000a45e:	50                   	push   eax
c000a45f:	e8 40 56 01 00       	call   c001faa4 <__udivdi3>
c000a464:	83 c4 14             	add    esp,0x14
c000a467:	52                   	push   edx
c000a468:	50                   	push   eax
c000a469:	6a 00                	push   0x0
c000a46b:	6a 00                	push   0x0
c000a46d:	53                   	push   ebx
c000a46e:	e8 4b fe ff ff       	call   c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a473:	83 c4 20             	add    esp,0x20
c000a476:	e9 73 01 00 00       	jmp    c000a5ee <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a47b:	89 f0                	mov    eax,esi
c000a47d:	31 c9                	xor    ecx,ecx
c000a47f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a486:	75 02                	jne    c000a48a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a488:	89 cd                	mov    ebp,ecx
c000a48a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a492:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a499:	83 c0 10             	add    eax,0x10
c000a49c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4a4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a4ab:	c1 e2 08             	shl    edx,0x8
c000a4ae:	c1 e6 10             	shl    esi,0x10
c000a4b1:	09 f2                	or     edx,esi
c000a4b3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4ba:	09 f2                	or     edx,esi
c000a4bc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4c3:	c1 e6 18             	shl    esi,0x18
c000a4c6:	09 f2                	or     edx,esi
c000a4c8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4cf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4d3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4da:	c1 e6 10             	shl    esi,0x10
c000a4dd:	c1 e2 08             	shl    edx,0x8
c000a4e0:	09 f2                	or     edx,esi
c000a4e2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4e9:	09 f2                	or     edx,esi
c000a4eb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4f2:	c1 e6 18             	shl    esi,0x18
c000a4f5:	09 f2                	or     edx,esi
c000a4f7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4fb:	41                   	inc    ecx
c000a4fc:	83 f9 04             	cmp    ecx,0x4
c000a4ff:	0f 85 7a ff ff ff    	jne    c000a47f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a509:	83 f0 01             	xor    eax,0x1
c000a50c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a510:	75 4f                	jne    c000a561 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a516:	83 f0 01             	xor    eax,0x1
c000a519:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a51d:	75 42                	jne    c000a561 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a51f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a525:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a52d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a533:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a53b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a541:	89 f7                	mov    edi,esi
c000a543:	c1 ff 1f             	sar    edi,0x1f
c000a546:	57                   	push   edi
c000a547:	56                   	push   esi
c000a548:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a54c:	52                   	push   edx
c000a54d:	c1 e0 0a             	shl    eax,0xa
c000a550:	50                   	push   eax
c000a551:	e8 4e 55 01 00       	call   c001faa4 <__udivdi3>
c000a556:	83 c4 10             	add    esp,0x10
c000a559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a55d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a561:	89 e8                	mov    eax,ebp
c000a563:	0f b6 e8             	movzx  ebp,al
c000a566:	85 ed                	test   ebp,ebp
c000a568:	74 50                	je     c000a5ba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a56a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a56e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a572:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a576:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a57a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a57e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a582:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a586:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a58a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a592:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a596:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a59a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a59e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5a2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5a6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5aa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5ae:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5b2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5b6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5ba:	31 ed                	xor    ebp,ebp
c000a5bc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5c0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5c4:	89 f8                	mov    eax,edi
c000a5c6:	09 f0                	or     eax,esi
c000a5c8:	74 1e                	je     c000a5e8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5ca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ce:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5d2:	89 d1                	mov    ecx,edx
c000a5d4:	09 c1                	or     ecx,eax
c000a5d6:	74 10                	je     c000a5e8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5d8:	83 ec 0c             	sub    esp,0xc
c000a5db:	57                   	push   edi
c000a5dc:	56                   	push   esi
c000a5dd:	52                   	push   edx
c000a5de:	50                   	push   eax
c000a5df:	53                   	push   ebx
c000a5e0:	e8 d9 fc ff ff       	call   c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5e5:	83 c4 20             	add    esp,0x20
c000a5e8:	45                   	inc    ebp
c000a5e9:	83 fd 04             	cmp    ebp,0x4
c000a5ec:	75 ce                	jne    c000a5bc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5ee:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5f4:	5b                   	pop    ebx
c000a5f5:	5e                   	pop    esi
c000a5f6:	5f                   	pop    edi
c000a5f7:	5d                   	pop    ebp
c000a5f8:	c3                   	ret    
c000a5f9:	66 90                	xchg   ax,ax
c000a5fb:	90                   	nop

c000a5fc <Serial::Serial(char const*)>:
c000a5fc:	83 ec 0c             	sub    esp,0xc
c000a5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a603:	83 ec 08             	sub    esp,0x8
c000a606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a60a:	50                   	push   eax
c000a60b:	e8 98 eb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	ba 54 18 02 c0       	mov    edx,0xc0021854
c000a618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61c:	89 10                	mov    DWORD PTR [eax],edx
c000a61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a622:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a62c:	90                   	nop
c000a62d:	83 c4 0c             	add    esp,0xc
c000a630:	c3                   	ret    
c000a631:	90                   	nop
c000a632:	66 90                	xchg   ax,ax

c000a634 <Serial::~Serial()>:
c000a634:	83 ec 0c             	sub    esp,0xc
c000a637:	ba 54 18 02 c0       	mov    edx,0xc0021854
c000a63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a640:	89 10                	mov    DWORD PTR [eax],edx
c000a642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a646:	83 ec 0c             	sub    esp,0xc
c000a649:	50                   	push   eax
c000a64a:	e8 f9 e8 ff ff       	call   c0008f48 <Device::~Device()>
c000a64f:	83 c4 10             	add    esp,0x10
c000a652:	90                   	nop
c000a653:	83 c4 0c             	add    esp,0xc
c000a656:	c3                   	ret    
c000a657:	90                   	nop

c000a658 <Serial::~Serial()>:
c000a658:	83 ec 0c             	sub    esp,0xc
c000a65b:	83 ec 0c             	sub    esp,0xc
c000a65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a662:	e8 cd ff ff ff       	call   c000a634 <Serial::~Serial()>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	83 ec 08             	sub    esp,0x8
c000a66d:	68 58 01 00 00       	push   0x158
c000a672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a676:	e8 e0 1f 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a67b:	83 c4 10             	add    esp,0x10
c000a67e:	83 c4 0c             	add    esp,0xc
c000a681:	c3                   	ret    
c000a682:	66 90                	xchg   ax,ax

c000a684 <Timer::Timer(char const*)>:
c000a684:	83 ec 0c             	sub    esp,0xc
c000a687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68b:	83 ec 08             	sub    esp,0x8
c000a68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a692:	50                   	push   eax
c000a693:	e8 10 eb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	ba ec 18 02 c0       	mov    edx,0xc00218ec
c000a6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a4:	89 10                	mov    DWORD PTR [eax],edx
c000a6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6aa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6b4:	90                   	nop
c000a6b5:	83 c4 0c             	add    esp,0xc
c000a6b8:	c3                   	ret    
c000a6b9:	90                   	nop
c000a6ba:	66 90                	xchg   ax,ax

c000a6bc <Timer::~Timer()>:
c000a6bc:	83 ec 0c             	sub    esp,0xc
c000a6bf:	ba ec 18 02 c0       	mov    edx,0xc00218ec
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ce:	83 ec 0c             	sub    esp,0xc
c000a6d1:	50                   	push   eax
c000a6d2:	e8 71 e8 ff ff       	call   c0008f48 <Device::~Device()>
c000a6d7:	83 c4 10             	add    esp,0x10
c000a6da:	90                   	nop
c000a6db:	83 c4 0c             	add    esp,0xc
c000a6de:	c3                   	ret    
c000a6df:	90                   	nop

c000a6e0 <Timer::~Timer()>:
c000a6e0:	83 ec 0c             	sub    esp,0xc
c000a6e3:	83 ec 0c             	sub    esp,0xc
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 cd ff ff ff       	call   c000a6bc <Timer::~Timer()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 ec 08             	sub    esp,0x8
c000a6f5:	68 5c 01 00 00       	push   0x15c
c000a6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fe:	e8 58 1f 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	83 c4 0c             	add    esp,0xc
c000a709:	c3                   	ret    

c000a70a <Timer::read()>:
c000a70a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a70e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a714:	c3                   	ret    

c000a715 <setupTimer(int)>:
c000a715:	53                   	push   ebx
c000a716:	83 ec 14             	sub    esp,0x14
c000a719:	68 5c 01 00 00       	push   0x15c
c000a71e:	e8 ad 41 00 00       	call   c000e8d0 <malloc>
c000a723:	89 04 24             	mov    DWORD PTR [esp],eax
c000a726:	89 c3                	mov    ebx,eax
c000a728:	e8 f3 4b 01 00       	call   c001f320 <PIT::PIT()>
c000a72d:	58                   	pop    eax
c000a72e:	5a                   	pop    edx
c000a72f:	53                   	push   ebx
c000a730:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a736:	e8 0b e9 ff ff       	call   c0009046 <Device::addChild(Device*)>
c000a73b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a73d:	6a 00                	push   0x0
c000a73f:	6a 00                	push   0x0
c000a741:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a745:	53                   	push   ebx
c000a746:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a749:	83 c4 28             	add    esp,0x28
c000a74c:	89 d8                	mov    eax,ebx
c000a74e:	5b                   	pop    ebx
c000a74f:	c3                   	ret    

c000a750 <timerHandler(unsigned int)>:
c000a750:	57                   	push   edi
c000a751:	56                   	push   esi
c000a752:	53                   	push   ebx
c000a753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a757:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a75d:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a764:	0f 84 4e 01 00 00    	je     c000a8b8 <timerHandler(unsigned int)+0x168>
c000a76a:	fa                   	cli    
c000a76b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a771:	83 ec 0c             	sub    esp,0xc
c000a774:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a779:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a77f:	e8 b8 56 01 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a784:	83 c4 10             	add    esp,0x10
c000a787:	84 c0                	test   al,al
c000a789:	0f 85 a1 00 00 00    	jne    c000a830 <timerHandler(unsigned int)+0xe0>
c000a78f:	83 ec 0c             	sub    esp,0xc
c000a792:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a797:	e8 bc 56 01 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a79c:	83 c4 10             	add    esp,0x10
c000a79f:	89 c6                	mov    esi,eax
c000a7a1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7ac:	e8 a7 56 01 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7b1:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7b8:	89 c3                	mov    ebx,eax
c000a7ba:	e8 a1 56 01 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7bf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7c2:	83 c4 10             	add    esp,0x10
c000a7c5:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7cb:	77 23                	ja     c000a7f0 <timerHandler(unsigned int)+0xa0>
c000a7cd:	83 ec 0c             	sub    esp,0xc
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 06 af 00 00       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	39 de                	cmp    esi,ebx
c000a7db:	75 27                	jne    c000a804 <timerHandler(unsigned int)+0xb4>
c000a7dd:	83 ec 0c             	sub    esp,0xc
c000a7e0:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7e5:	e8 6e 56 01 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ea:	89 c6                	mov    esi,eax
c000a7ec:	eb 12                	jmp    c000a800 <timerHandler(unsigned int)+0xb0>
c000a7ee:	66 90                	xchg   ax,ax
c000a7f0:	50                   	push   eax
c000a7f1:	50                   	push   eax
c000a7f2:	53                   	push   ebx
c000a7f3:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f8:	e8 1f 57 01 00       	call   c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a800:	83 c4 10             	add    esp,0x10
c000a803:	90                   	nop
c000a804:	83 ec 0c             	sub    esp,0xc
c000a807:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a80c:	e8 2b 56 01 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a811:	83 c4 10             	add    esp,0x10
c000a814:	84 c0                	test   al,al
c000a816:	75 18                	jne    c000a830 <timerHandler(unsigned int)+0xe0>
c000a818:	83 ec 0c             	sub    esp,0xc
c000a81b:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a820:	e8 33 56 01 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a825:	83 c4 10             	add    esp,0x10
c000a828:	39 f0                	cmp    eax,esi
c000a82a:	0f 85 74 ff ff ff    	jne    c000a7a4 <timerHandler(unsigned int)+0x54>
c000a830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a835:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a839:	74 41                	je     c000a87c <timerHandler(unsigned int)+0x12c>
c000a83b:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a842:	74 38                	je     c000a87c <timerHandler(unsigned int)+0x12c>
c000a844:	fa                   	cli    
c000a845:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a84b:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a856:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a85e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a861:	77 05                	ja     c000a868 <timerHandler(unsigned int)+0x118>
c000a863:	e8 74 ab 00 00       	call   c00153dc <schedule()>
c000a868:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a86f:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a876:	75 04                	jne    c000a87c <timerHandler(unsigned int)+0x12c>
c000a878:	fb                   	sti    
c000a879:	8d 76 00             	lea    esi,[esi+0x0]
c000a87c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a881:	48                   	dec    eax
c000a882:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a887:	75 1b                	jne    c000a8a4 <timerHandler(unsigned int)+0x154>
c000a889:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a890:	74 12                	je     c000a8a4 <timerHandler(unsigned int)+0x154>
c000a892:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a89c:	e8 3b ab 00 00       	call   c00153dc <schedule()>
c000a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c000a8a4:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a8ab:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a8b2:	75 04                	jne    c000a8b8 <timerHandler(unsigned int)+0x168>
c000a8b4:	fb                   	sti    
c000a8b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a8b8:	5b                   	pop    ebx
c000a8b9:	5e                   	pop    esi
c000a8ba:	5f                   	pop    edi
c000a8bb:	c3                   	ret    

c000a8bc <VCache::VCache(PhysicalDisk*)>:
c000a8bc:	53                   	push   ebx
c000a8bd:	83 ec 18             	sub    esp,0x18
c000a8c0:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c000a8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c9:	89 10                	mov    DWORD PTR [eax],edx
c000a8cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8cf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8da:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8fe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a909:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a914:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a923:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a92a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a936:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a946:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a94d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a955:	83 ec 0c             	sub    esp,0xc
c000a958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a95c:	e8 6f 3f 00 00       	call   c000e8d0 <malloc>
c000a961:	83 c4 10             	add    esp,0x10
c000a964:	89 c3                	mov    ebx,eax
c000a966:	83 ec 0c             	sub    esp,0xc
c000a969:	53                   	push   ebx
c000a96a:	e8 8d 42 00 00       	call   c000ebfc <Mutex::Mutex()>
c000a96f:	83 c4 10             	add    esp,0x10
c000a972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a976:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a97d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a981:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a988:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a98f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a993:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a99d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9a4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9b4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9b7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9be:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9cc:	05 00 02 00 00       	add    eax,0x200
c000a9d1:	c1 e0 03             	shl    eax,0x3
c000a9d4:	83 ec 0c             	sub    esp,0xc
c000a9d7:	50                   	push   eax
c000a9d8:	e8 f3 3e 00 00       	call   c000e8d0 <malloc>
c000a9dd:	83 c4 10             	add    esp,0x10
c000a9e0:	89 c2                	mov    edx,eax
c000a9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ed:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a9f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa00:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa06:	89 d0                	mov    eax,edx
c000aa08:	c1 e0 02             	shl    eax,0x2
c000aa0b:	01 d0                	add    eax,edx
c000aa0d:	c1 e0 04             	shl    eax,0x4
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	50                   	push   eax
c000aa14:	e8 b7 3e 00 00       	call   c000e8d0 <malloc>
c000aa19:	83 c4 10             	add    esp,0x10
c000aa1c:	89 c2                	mov    edx,eax
c000aa1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa22:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa25:	90                   	nop
c000aa26:	83 c4 18             	add    esp,0x18
c000aa29:	5b                   	pop    ebx
c000aa2a:	c3                   	ret    
c000aa2b:	90                   	nop

c000aa2c <VCache::invalidateReadBuffer()>:
c000aa2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa30:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa3a:	c3                   	ret    
c000aa3b:	90                   	nop

c000aa3c <VCache::writeWriteBuffer()>:
c000aa3c:	53                   	push   ebx
c000aa3d:	83 ec 08             	sub    esp,0x8
c000aa40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa48:	74 1e                	je     c000aa68 <VCache::writeWriteBuffer()+0x2c>
c000aa4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa4d:	83 ec 0c             	sub    esp,0xc
c000aa50:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa5e:	50                   	push   eax
c000aa5f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa62:	83 c4 20             	add    esp,0x20
c000aa65:	8d 76 00             	lea    esi,[esi+0x0]
c000aa68:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa6f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa76:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa7a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa81:	83 c4 08             	add    esp,0x8
c000aa84:	5b                   	pop    ebx
c000aa85:	c3                   	ret    
c000aa86:	66 90                	xchg   ax,ax

c000aa88 <VCache::~VCache()>:
c000aa88:	83 ec 0c             	sub    esp,0xc
c000aa8b:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c000aa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa94:	89 10                	mov    DWORD PTR [eax],edx
c000aa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa9d:	0f b6 c0             	movzx  eax,al
c000aaa0:	85 c0                	test   eax,eax
c000aaa2:	74 10                	je     c000aab4 <VCache::~VCache()+0x2c>
c000aaa4:	83 ec 0c             	sub    esp,0xc
c000aaa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaab:	e8 8c ff ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000aab0:	83 c4 10             	add    esp,0x10
c000aab3:	90                   	nop
c000aab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aabb:	83 ec 0c             	sub    esp,0xc
c000aabe:	50                   	push   eax
c000aabf:	e8 1c 3e 00 00       	call   c000e8e0 <free>
c000aac4:	83 c4 10             	add    esp,0x10
c000aac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aace:	83 ec 0c             	sub    esp,0xc
c000aad1:	50                   	push   eax
c000aad2:	e8 09 3e 00 00       	call   c000e8e0 <free>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	90                   	nop
c000aadb:	83 c4 0c             	add    esp,0xc
c000aade:	c3                   	ret    
c000aadf:	90                   	nop

c000aae0 <VCache::~VCache()>:
c000aae0:	83 ec 0c             	sub    esp,0xc
c000aae3:	83 ec 0c             	sub    esp,0xc
c000aae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaea:	e8 99 ff ff ff       	call   c000aa88 <VCache::~VCache()>
c000aaef:	83 c4 10             	add    esp,0x10
c000aaf2:	83 ec 08             	sub    esp,0x8
c000aaf5:	6a 44                	push   0x44
c000aaf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafb:	e8 5b 1b 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	83 c4 0c             	add    esp,0xc
c000ab06:	c3                   	ret    
c000ab07:	90                   	nop

c000ab08 <VCache::write(unsigned long long, int, void*)>:
c000ab08:	55                   	push   ebp
c000ab09:	57                   	push   edi
c000ab0a:	56                   	push   esi
c000ab0b:	53                   	push   ebx
c000ab0c:	83 ec 1c             	sub    esp,0x1c
c000ab0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab17:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab1b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ab1f:	e8 24 a6 00 00       	call   c0015148 <KeDisablePreemption()>
c000ab24:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab28:	74 0e                	je     c000ab38 <VCache::write(unsigned long long, int, void*)+0x30>
c000ab2a:	83 ec 0c             	sub    esp,0xc
c000ab2d:	53                   	push   ebx
c000ab2e:	e8 f9 fe ff ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	66 90                	xchg   ax,ax
c000ab38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab3c:	74 5e                	je     c000ab9c <VCache::write(unsigned long long, int, void*)+0x94>
c000ab3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab45:	99                   	cdq    
c000ab46:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab49:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab4c:	89 c1                	mov    ecx,eax
c000ab4e:	31 f1                	xor    ecx,esi
c000ab50:	89 d0                	mov    eax,edx
c000ab52:	31 f8                	xor    eax,edi
c000ab54:	09 c1                	or     ecx,eax
c000ab56:	75 38                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab58:	83 fd 01             	cmp    ebp,0x1
c000ab5b:	75 33                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab5d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab60:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ab64:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab68:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab6e:	0f af f9             	imul   edi,ecx
c000ab71:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab79:	40                   	inc    eax
c000ab7a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab7d:	83 f8 50             	cmp    eax,0x50
c000ab80:	75 66                	jne    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab82:	83 ec 0c             	sub    esp,0xc
c000ab85:	53                   	push   ebx
c000ab86:	e8 b1 fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	eb 58                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab90:	83 ec 0c             	sub    esp,0xc
c000ab93:	53                   	push   ebx
c000ab94:	e8 a3 fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ab99:	83 c4 10             	add    esp,0x10
c000ab9c:	83 fd 4f             	cmp    ebp,0x4f
c000ab9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aba2:	7f 20                	jg     c000abc4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000aba4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000aba7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abab:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abae:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abb1:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000abb4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abb8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc0:	eb 26                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000abc2:	66 90                	xchg   ax,ax
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abcd:	55                   	push   ebp
c000abce:	57                   	push   edi
c000abcf:	56                   	push   esi
c000abd0:	50                   	push   eax
c000abd1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abd4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abd8:	83 c4 20             	add    esp,0x20
c000abdb:	e8 90 a5 00 00       	call   c0015170 <KeRestorePreemption()>
c000abe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abe4:	eb 0a                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe8>
c000abe6:	66 90                	xchg   ax,ax
c000abe8:	e8 83 a5 00 00       	call   c0015170 <KeRestorePreemption()>
c000abed:	31 c0                	xor    eax,eax
c000abef:	90                   	nop
c000abf0:	83 c4 1c             	add    esp,0x1c
c000abf3:	5b                   	pop    ebx
c000abf4:	5e                   	pop    esi
c000abf5:	5f                   	pop    edi
c000abf6:	5d                   	pop    ebp
c000abf7:	c3                   	ret    

c000abf8 <VCache::read(unsigned long long, int, void*)>:
c000abf8:	55                   	push   ebp
c000abf9:	57                   	push   edi
c000abfa:	56                   	push   esi
c000abfb:	53                   	push   ebx
c000abfc:	83 ec 1c             	sub    esp,0x1c
c000abff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac07:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ac0b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ac0f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ac13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1a:	e8 29 a5 00 00       	call   c0015148 <KeDisablePreemption()>
c000ac1f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac23:	74 0f                	je     c000ac34 <VCache::read(unsigned long long, int, void*)+0x3c>
c000ac25:	83 ec 0c             	sub    esp,0xc
c000ac28:	53                   	push   ebx
c000ac29:	e8 0e fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	8d 76 00             	lea    esi,[esi+0x0]
c000ac34:	83 fe 01             	cmp    esi,0x1
c000ac37:	0f 85 8b 00 00 00    	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac40:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac47:	75 7f                	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac49:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ac4c:	89 d1                	mov    ecx,edx
c000ac4e:	f7 d9                	neg    ecx
c000ac50:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac54:	89 cf                	mov    edi,ecx
c000ac56:	23 0c 24             	and    ecx,DWORD PTR [esp]
c000ac59:	c1 ff 1f             	sar    edi,0x1f
c000ac5c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ac60:	89 ce                	mov    esi,ecx
c000ac62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac66:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c000ac6a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac6e:	89 cf                	mov    edi,ecx
c000ac70:	74 32                	je     c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac72:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac75:	75 2d                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac77:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000ac7a:	75 28                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac7f:	89 ef                	mov    edi,ebp
c000ac81:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac87:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac8a:	8d 70 ff             	lea    esi,[eax-0x1]
c000ac8d:	23 34 24             	and    esi,DWORD PTR [esp]
c000ac90:	0f af f1             	imul   esi,ecx
c000ac93:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac98:	e8 d3 a4 00 00       	call   c0015170 <KeRestorePreemption()>
c000ac9d:	31 c0                	xor    eax,eax
c000ac9f:	eb 57                	jmp    c000acf8 <VCache::read(unsigned long long, int, void*)+0x100>
c000aca1:	8d 76 00             	lea    esi,[esi+0x0]
c000aca4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000aca8:	83 ec 0c             	sub    esp,0xc
c000acab:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c000acae:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c000acb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acb3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acb6:	52                   	push   edx
c000acb7:	57                   	push   edi
c000acb8:	56                   	push   esi
c000acb9:	50                   	push   eax
c000acba:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acbd:	83 c4 20             	add    esp,0x20
c000acc0:	85 c0                	test   eax,eax
c000acc2:	75 34                	jne    c000acf8 <VCache::read(unsigned long long, int, void*)+0x100>
c000acc4:	eb b6                	jmp    c000ac7c <VCache::read(unsigned long long, int, void*)+0x84>
c000acc6:	66 90                	xchg   ax,ax
c000acc8:	83 ec 0c             	sub    esp,0xc
c000accb:	53                   	push   ebx
c000accc:	e8 5b fd ff ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c000acd1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acd4:	8b 10                	mov    edx,DWORD PTR [eax]
c000acd6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000acd9:	56                   	push   esi
c000acda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace2:	50                   	push   eax
c000ace3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ace6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000acea:	83 c4 20             	add    esp,0x20
c000aced:	e8 7e a4 00 00       	call   c0015170 <KeRestorePreemption()>
c000acf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acf5:	8d 76 00             	lea    esi,[esi+0x0]
c000acf8:	83 c4 1c             	add    esp,0x1c
c000acfb:	5b                   	pop    ebx
c000acfc:	5e                   	pop    esi
c000acfd:	5f                   	pop    edi
c000acfe:	5d                   	pop    ebp
c000acff:	c3                   	ret    

c000ad00 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad00:	55                   	push   ebp
c000ad01:	57                   	push   edi
c000ad02:	56                   	push   esi
c000ad03:	53                   	push   ebx
c000ad04:	83 ec 1c             	sub    esp,0x1c
c000ad07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad0f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad13:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad1f:	01 df                	add    edi,ebx
c000ad21:	39 fb                	cmp    ebx,edi
c000ad23:	7d 1f                	jge    c000ad44 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad25:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad29:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad2d:	7d 12                	jge    c000ad41 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad2f:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad35:	53                   	push   ebx
c000ad36:	55                   	push   ebp
c000ad37:	45                   	inc    ebp
c000ad38:	56                   	push   esi
c000ad39:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	eb e8                	jmp    c000ad29 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad41:	43                   	inc    ebx
c000ad42:	eb dd                	jmp    c000ad21 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad44:	83 c4 1c             	add    esp,0x1c
c000ad47:	5b                   	pop    ebx
c000ad48:	5e                   	pop    esi
c000ad49:	5f                   	pop    edi
c000ad4a:	5d                   	pop    ebp
c000ad4b:	c3                   	ret    

c000ad4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad4c:	55                   	push   ebp
c000ad4d:	57                   	push   edi
c000ad4e:	31 ff                	xor    edi,edi
c000ad50:	56                   	push   esi
c000ad51:	53                   	push   ebx
c000ad52:	83 ec 1c             	sub    esp,0x1c
c000ad55:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad5d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad64:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad71:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad75:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad78:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad7c:	01 f9                	add    ecx,edi
c000ad7e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad82:	7d 2f                	jge    c000adb3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad84:	31 f6                	xor    esi,esi
c000ad86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad8a:	01 f2                	add    edx,esi
c000ad8c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad90:	7d 1a                	jge    c000adac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad95:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad98:	46                   	inc    esi
c000ad99:	51                   	push   ecx
c000ad9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ad9e:	52                   	push   edx
c000ad9f:	55                   	push   ebp
c000ada0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ada3:	83 c4 10             	add    esp,0x10
c000ada6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adaa:	eb da                	jmp    c000ad86 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adac:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adb0:	47                   	inc    edi
c000adb1:	eb c5                	jmp    c000ad78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	5b                   	pop    ebx
c000adb7:	5e                   	pop    esi
c000adb8:	5f                   	pop    edi
c000adb9:	5d                   	pop    ebp
c000adba:	c3                   	ret    
c000adbb:	90                   	nop

c000adbc <Video::blit(unsigned int*, int, int, int, int)>:
c000adbc:	55                   	push   ebp
c000adbd:	ba 00 00 00 00       	mov    edx,0x0
c000adc2:	57                   	push   edi
c000adc3:	56                   	push   esi
c000adc4:	53                   	push   ebx
c000adc5:	83 ec 1c             	sub    esp,0x1c
c000adc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000adcc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000add0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000add4:	85 c0                	test   eax,eax
c000add6:	0f 49 d0             	cmovns edx,eax
c000add9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ade0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ade4:	89 eb                	mov    ebx,ebp
c000ade6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000adea:	01 ea                	add    edx,ebp
c000adec:	39 da                	cmp    edx,ebx
c000adee:	7e 54                	jle    c000ae44 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adf0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adf6:	7c 4c                	jl     c000ae44 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adf8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adfc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae00:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae04:	01 c1                	add    ecx,eax
c000ae06:	39 f9                	cmp    ecx,edi
c000ae08:	7e 2f                	jle    c000ae39 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ae0a:	83 c2 04             	add    edx,0x4
c000ae0d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae13:	7c 21                	jl     c000ae36 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ae15:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ae19:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae1b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ae1e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ae22:	55                   	push   ebp
c000ae23:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae27:	56                   	push   esi
c000ae28:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae2b:	83 c4 10             	add    esp,0x10
c000ae2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ae32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae36:	47                   	inc    edi
c000ae37:	eb c7                	jmp    c000ae00 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000ae39:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ae3d:	43                   	inc    ebx
c000ae3e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000ae42:	eb a2                	jmp    c000ade6 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000ae44:	83 c4 1c             	add    esp,0x1c
c000ae47:	5b                   	pop    ebx
c000ae48:	5e                   	pop    esi
c000ae49:	5f                   	pop    edi
c000ae4a:	5d                   	pop    ebp
c000ae4b:	c3                   	ret    

c000ae4c <Video::clearScreen(unsigned int)>:
c000ae4c:	57                   	push   edi
c000ae4d:	56                   	push   esi
c000ae4e:	53                   	push   ebx
c000ae4f:	31 db                	xor    ebx,ebx
c000ae51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae55:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae5b:	7e 1f                	jle    c000ae7c <Video::clearScreen(unsigned int)+0x30>
c000ae5d:	31 ff                	xor    edi,edi
c000ae5f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae65:	7e 12                	jle    c000ae79 <Video::clearScreen(unsigned int)+0x2d>
c000ae67:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6d:	53                   	push   ebx
c000ae6e:	57                   	push   edi
c000ae6f:	47                   	inc    edi
c000ae70:	56                   	push   esi
c000ae71:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae74:	83 c4 10             	add    esp,0x10
c000ae77:	eb e6                	jmp    c000ae5f <Video::clearScreen(unsigned int)+0x13>
c000ae79:	43                   	inc    ebx
c000ae7a:	eb d9                	jmp    c000ae55 <Video::clearScreen(unsigned int)+0x9>
c000ae7c:	5b                   	pop    ebx
c000ae7d:	5e                   	pop    esi
c000ae7e:	5f                   	pop    edi
c000ae7f:	c3                   	ret    

c000ae80 <Video::putpixel(int, int, unsigned int)>:
c000ae80:	c7 44 24 04 24 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021924
c000ae88:	e9 89 3d 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000ae8d:	90                   	nop

c000ae8e <Video::readPixelApprox(int, int)>:
c000ae8e:	83 ec 18             	sub    esp,0x18
c000ae91:	68 45 19 02 c0       	push   0xc0021945
c000ae96:	e8 7b 3d 00 00       	call   c000ec16 <KePanic(char const*)>
c000ae9b:	31 c0                	xor    eax,eax
c000ae9d:	83 c4 1c             	add    esp,0x1c
c000aea0:	c3                   	ret    
c000aea1:	90                   	nop

c000aea2 <Video::Video(char const*)>:
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	50                   	push   eax
c000aeb1:	e8 f2 e2 ff ff       	call   c00091a8 <Device::Device(char const*)>
c000aeb6:	83 c4 10             	add    esp,0x10
c000aeb9:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	89 10                	mov    DWORD PTR [eax],edx
c000aec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aed2:	90                   	nop
c000aed3:	83 c4 0c             	add    esp,0xc
c000aed6:	c3                   	ret    
c000aed7:	90                   	nop

c000aed8 <Video::~Video()>:
c000aed8:	83 ec 0c             	sub    esp,0xc
c000aedb:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000aee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee4:	89 10                	mov    DWORD PTR [eax],edx
c000aee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeea:	83 ec 0c             	sub    esp,0xc
c000aeed:	50                   	push   eax
c000aeee:	e8 55 e0 ff ff       	call   c0008f48 <Device::~Device()>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	90                   	nop
c000aef7:	83 c4 0c             	add    esp,0xc
c000aefa:	c3                   	ret    
c000aefb:	90                   	nop

c000aefc <Video::~Video()>:
c000aefc:	83 ec 0c             	sub    esp,0xc
c000aeff:	83 ec 0c             	sub    esp,0xc
c000af02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af06:	e8 cd ff ff ff       	call   c000aed8 <Video::~Video()>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	83 ec 08             	sub    esp,0x8
c000af11:	68 64 01 00 00       	push   0x164
c000af16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af1a:	e8 3c 17 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000af1f:	83 c4 10             	add    esp,0x10
c000af22:	83 c4 0c             	add    esp,0xc
c000af25:	c3                   	ret    

c000af26 <Video::isMonochrome()>:
c000af26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af30:	c3                   	ret    
c000af31:	90                   	nop

c000af32 <Video::getWidth()>:
c000af32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af3c:	c3                   	ret    
c000af3d:	90                   	nop

c000af3e <Video::getHeight()>:
c000af3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af48:	c3                   	ret    
c000af49:	90                   	nop

c000af4a <Video::drawCursor(int, int, unsigned int*, int)>:
c000af4a:	55                   	push   ebp
c000af4b:	57                   	push   edi
c000af4c:	56                   	push   esi
c000af4d:	53                   	push   ebx
c000af4e:	83 ec 2c             	sub    esp,0x2c
c000af51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000af59:	83 f8 01             	cmp    eax,0x1
c000af5c:	19 c9                	sbb    ecx,ecx
c000af5e:	31 db                	xor    ebx,ebx
c000af60:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af64:	89 ce                	mov    esi,ecx
c000af66:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af6e:	f7 d6                	not    esi
c000af70:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000af76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af7a:	01 d8                	add    eax,ebx
c000af7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af80:	57                   	push   edi
c000af81:	e8 b8 ff ff ff       	call   c000af3e <Video::getHeight()>
c000af86:	59                   	pop    ecx
c000af87:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af8b:	7e 70                	jle    c000affd <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af8d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af91:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000af95:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000afa0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000afa7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afab:	89 e8                	mov    eax,ebp
c000afad:	83 c0 20             	add    eax,0x20
c000afb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afb4:	57                   	push   edi
c000afb5:	e8 78 ff ff ff       	call   c000af32 <Video::getWidth()>
c000afba:	5a                   	pop    edx
c000afbb:	39 c5                	cmp    ebp,eax
c000afbd:	7d 34                	jge    c000aff3 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afbf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afc4:	74 05                	je     c000afcb <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afc6:	8b 07                	mov    eax,DWORD PTR [edi]
c000afc8:	56                   	push   esi
c000afc9:	eb 0d                	jmp    c000afd8 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afcb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afd0:	74 12                	je     c000afe4 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afd2:	8b 07                	mov    eax,DWORD PTR [edi]
c000afd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afd8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afdc:	55                   	push   ebp
c000afdd:	57                   	push   edi
c000afde:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afe1:	83 c4 10             	add    esp,0x10
c000afe4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000afe8:	45                   	inc    ebp
c000afe9:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000afed:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000aff1:	75 c1                	jne    c000afb4 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000aff3:	43                   	inc    ebx
c000aff4:	83 fb 20             	cmp    ebx,0x20
c000aff7:	0f 85 79 ff ff ff    	jne    c000af76 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000affd:	83 c4 2c             	add    esp,0x2c
c000b000:	5b                   	pop    ebx
c000b001:	5e                   	pop    esi
c000b002:	5f                   	pop    edi
c000b003:	5d                   	pop    ebp
c000b004:	c3                   	ret    
c000b005:	90                   	nop

c000b006 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b006:	55                   	push   ebp
c000b007:	57                   	push   edi
c000b008:	56                   	push   esi
c000b009:	53                   	push   ebx
c000b00a:	83 ec 48             	sub    esp,0x48
c000b00d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b011:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b015:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b019:	c1 e0 08             	shl    eax,0x8
c000b01c:	01 d0                	add    eax,edx
c000b01e:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b022:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b026:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b02a:	c1 e0 08             	shl    eax,0x8
c000b02d:	01 d0                	add    eax,edx
c000b02f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b037:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b03c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b040:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b044:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b04b:	50                   	push   eax
c000b04c:	e8 7f 38 00 00       	call   c000e8d0 <malloc>
c000b051:	83 c4 10             	add    esp,0x10
c000b054:	85 c0                	test   eax,eax
c000b056:	89 c5                	mov    ebp,eax
c000b058:	75 10                	jne    c000b06a <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b05a:	83 ec 0c             	sub    esp,0xc
c000b05d:	68 70 19 02 c0       	push   0xc0021970
c000b062:	e8 af 3b 00 00       	call   c000ec16 <KePanic(char const*)>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	52                   	push   edx
c000b06b:	bf 12 00 00 00       	mov    edi,0x12
c000b070:	52                   	push   edx
c000b071:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b075:	50                   	push   eax
c000b076:	68 80 19 02 c0       	push   0xc0021980
c000b07b:	e8 ce be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b080:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b083:	83 e0 20             	and    eax,0x20
c000b086:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b08a:	85 c0                	test   eax,eax
c000b08c:	59                   	pop    ecx
c000b08d:	0f 94 c0             	sete   al
c000b090:	0f b6 c0             	movzx  eax,al
c000b093:	5e                   	pop    esi
c000b094:	50                   	push   eax
c000b095:	68 8a 19 02 c0       	push   0xc002198a
c000b09a:	e8 af be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b09f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	85 c0                	test   eax,eax
c000b0a8:	89 c2                	mov    edx,eax
c000b0aa:	74 11                	je     c000b0bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b0ac:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b0b0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0b4:	c1 ff 03             	sar    edi,0x3
c000b0b7:	0f af f9             	imul   edi,ecx
c000b0ba:	83 c7 12             	add    edi,0x12
c000b0bd:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b0c2:	74 07                	je     c000b0cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b0c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0c9:	75 12                	jne    c000b0dd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b0cb:	83 ec 0c             	sub    esp,0xc
c000b0ce:	68 98 19 02 c0       	push   0xc0021998
c000b0d3:	e8 76 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0d8:	e9 aa 02 00 00       	jmp    c000b387 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b0dd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0e1:	83 f9 02             	cmp    ecx,0x2
c000b0e4:	74 0e                	je     c000b0f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b0e6:	83 f9 0a             	cmp    ecx,0xa
c000b0e9:	0f 84 d1 00 00 00    	je     c000b1c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b0ef:	e9 7e 02 00 00       	jmp    c000b372 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b0f4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0f9:	75 0e                	jne    c000b109 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b0fb:	84 d2                	test   dl,dl
c000b0fd:	75 0a                	jne    c000b109 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b0ff:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b102:	83 e8 18             	sub    eax,0x18
c000b105:	a8 f7                	test   al,0xf7
c000b107:	74 0d                	je     c000b116 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b109:	83 ec 0c             	sub    esp,0xc
c000b10c:	68 ad 19 02 c0       	push   0xc00219ad
c000b111:	e9 64 02 00 00       	jmp    c000b37a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b116:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b11e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b123:	31 c0                	xor    eax,eax
c000b125:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b129:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b131:	89 c6                	mov    esi,eax
c000b133:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b138:	75 15                	jne    c000b14f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b13a:	99                   	cdq    
c000b13b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b13f:	85 d2                	test   edx,edx
c000b141:	75 0c                	jne    c000b14f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b143:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b147:	29 c6                	sub    esi,eax
c000b149:	4e                   	dec    esi
c000b14a:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b14f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b15b:	75 0c                	jne    c000b169 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b15d:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b162:	c1 e2 18             	shl    edx,0x18
c000b165:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b169:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b16e:	8d 46 01             	lea    eax,[esi+0x1]
c000b171:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b175:	c1 e1 10             	shl    ecx,0x10
c000b178:	89 ca                	mov    edx,ecx
c000b17a:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b17f:	c1 e1 08             	shl    ecx,0x8
c000b182:	09 d1                	or     ecx,edx
c000b184:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b188:	09 d1                	or     ecx,edx
c000b18a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b18e:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b192:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b196:	c1 fa 03             	sar    edx,0x3
c000b199:	01 d7                	add    edi,edx
c000b19b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b19f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b1a3:	7e 04                	jle    c000b1a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b1a5:	89 c6                	mov    esi,eax
c000b1a7:	eb 8a                	jmp    c000b133 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b1a9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b1ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b1b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b1b5:	0f 8f 6e ff ff ff    	jg     c000b129 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b1bb:	e9 ce 01 00 00       	jmp    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1c0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1c5:	75 0e                	jne    c000b1d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1c7:	85 c0                	test   eax,eax
c000b1c9:	75 0a                	jne    c000b1d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1cb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1ce:	83 e8 18             	sub    eax,0x18
c000b1d1:	a8 f7                	test   al,0xf7
c000b1d3:	74 0d                	je     c000b1e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b1d5:	83 ec 0c             	sub    esp,0xc
c000b1d8:	68 bb 19 02 c0       	push   0xc00219bb
c000b1dd:	e9 98 01 00 00       	jmp    c000b37a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b1e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b1ea:	31 c9                	xor    ecx,ecx
c000b1ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b1f4:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b1f8:	0f 8d 90 01 00 00    	jge    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b202:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b206:	0f 8e 82 01 00 00    	jle    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b20c:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b210:	8d 77 01             	lea    esi,[edi+0x1]
c000b213:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b217:	83 fa 7f             	cmp    edx,0x7f
c000b21a:	89 d0                	mov    eax,edx
c000b21c:	0f 8e a3 00 00 00    	jle    c000b2c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b222:	83 e0 7f             	and    eax,0x7f
c000b225:	31 d2                	xor    edx,edx
c000b227:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b22b:	40                   	inc    eax
c000b22c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b234:	75 08                	jne    c000b23e <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b236:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b23b:	c1 e2 18             	shl    edx,0x18
c000b23e:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b243:	c1 e0 10             	shl    eax,0x10
c000b246:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b24a:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b24f:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b253:	c1 e0 08             	shl    eax,0x8
c000b256:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b25a:	09 f8                	or     eax,edi
c000b25c:	31 ff                	xor    edi,edi
c000b25e:	09 d0                	or     eax,edx
c000b260:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b269:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b272:	75 1d                	jne    c000b291 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b274:	89 c8                	mov    eax,ecx
c000b276:	99                   	cdq    
c000b277:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b27b:	85 d2                	test   edx,edx
c000b27d:	75 12                	jne    c000b291 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b27f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b283:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b287:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b28b:	49                   	dec    ecx
c000b28c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b295:	8d 51 01             	lea    edx,[ecx+0x1]
c000b298:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b29c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b2a0:	8d 47 01             	lea    eax,[edi+0x1]
c000b2a3:	7e 06                	jle    c000b2ab <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b2a5:	89 c7                	mov    edi,eax
c000b2a7:	89 d1                	mov    ecx,edx
c000b2a9:	eb c2                	jmp    c000b26d <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b2ab:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b2af:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b2b3:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b2b7:	c1 f8 03             	sar    eax,0x3
c000b2ba:	01 c6                	add    esi,eax
c000b2bc:	89 d1                	mov    ecx,edx
c000b2be:	89 f7                	mov    edi,esi
c000b2c0:	e9 2f ff ff ff       	jmp    c000b1f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b2c5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b2cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2d1:	40                   	inc    eax
c000b2d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b2db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2df:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2e4:	75 1d                	jne    c000b303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2e6:	89 c8                	mov    eax,ecx
c000b2e8:	99                   	cdq    
c000b2e9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2ed:	85 d2                	test   edx,edx
c000b2ef:	75 12                	jne    c000b303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2f5:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b2f9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b2fd:	49                   	dec    ecx
c000b2fe:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b303:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b307:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b30f:	75 0c                	jne    c000b31d <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b311:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b316:	c1 e7 18             	shl    edi,0x18
c000b319:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b31d:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b322:	8d 51 01             	lea    edx,[ecx+0x1]
c000b325:	c1 e0 10             	shl    eax,0x10
c000b328:	89 c7                	mov    edi,eax
c000b32a:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b32f:	c1 e0 08             	shl    eax,0x8
c000b332:	09 f8                	or     eax,edi
c000b334:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b338:	09 f8                	or     eax,edi
c000b33a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b33e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b342:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b346:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b34a:	c1 f8 03             	sar    eax,0x3
c000b34d:	01 c6                	add    esi,eax
c000b34f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b353:	40                   	inc    eax
c000b354:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b358:	7e 0b                	jle    c000b365 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b35a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b35e:	89 d1                	mov    ecx,edx
c000b360:	e9 7a ff ff ff       	jmp    c000b2df <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b365:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b369:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b36d:	e9 4a ff ff ff       	jmp    c000b2bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b372:	50                   	push   eax
c000b373:	50                   	push   eax
c000b374:	51                   	push   ecx
c000b375:	68 ca 19 02 c0       	push   0xc00219ca
c000b37a:	e8 cf bb ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b37f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b382:	e8 59 35 00 00       	call   c000e8e0 <free>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	31 ed                	xor    ebp,ebp
c000b38c:	eb 14                	jmp    c000b3a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b38e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b392:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b396:	89 18                	mov    DWORD PTR [eax],ebx
c000b398:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b39c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b3a0:	89 18                	mov    DWORD PTR [eax],ebx
c000b3a2:	83 c4 3c             	add    esp,0x3c
c000b3a5:	89 e8                	mov    eax,ebp
c000b3a7:	5b                   	pop    ebx
c000b3a8:	5e                   	pop    esi
c000b3a9:	5f                   	pop    edi
c000b3aa:	5d                   	pop    ebp
c000b3ab:	c3                   	ret    

c000b3ac <Video::putTGA(int, int, unsigned char*, int)>:
c000b3ac:	55                   	push   ebp
c000b3ad:	57                   	push   edi
c000b3ae:	56                   	push   esi
c000b3af:	53                   	push   ebx
c000b3b0:	83 ec 28             	sub    esp,0x28
c000b3b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b3bb:	50                   	push   eax
c000b3bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3c0:	50                   	push   eax
c000b3c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3c9:	55                   	push   ebp
c000b3ca:	e8 37 fc ff ff       	call   c000b006 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3cf:	83 c4 20             	add    esp,0x20
c000b3d2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3d6:	85 c0                	test   eax,eax
c000b3d8:	74 3b                	je     c000b415 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3da:	89 c6                	mov    esi,eax
c000b3dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3e4:	39 d8                	cmp    eax,ebx
c000b3e6:	7e 2d                	jle    c000b415 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3e8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b3ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3f0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3f4:	39 f8                	cmp    eax,edi
c000b3f6:	7e 1a                	jle    c000b412 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b3f8:	83 c6 04             	add    esi,0x4
c000b3fb:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3fe:	85 c0                	test   eax,eax
c000b400:	79 0d                	jns    c000b40f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b402:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b405:	50                   	push   eax
c000b406:	53                   	push   ebx
c000b407:	57                   	push   edi
c000b408:	55                   	push   ebp
c000b409:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b40c:	83 c4 10             	add    esp,0x10
c000b40f:	47                   	inc    edi
c000b410:	eb da                	jmp    c000b3ec <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b412:	43                   	inc    ebx
c000b413:	eb c7                	jmp    c000b3dc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b415:	83 c4 1c             	add    esp,0x1c
c000b418:	5b                   	pop    ebx
c000b419:	5e                   	pop    esi
c000b41a:	5f                   	pop    edi
c000b41b:	5d                   	pop    ebp
c000b41c:	c3                   	ret    
c000b41d:	66 90                	xchg   ax,ax
c000b41f:	90                   	nop

c000b420 <ACPI::close(int, int, void*)>:
c000b420:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b425:	c3                   	ret    
c000b426:	66 90                	xchg   ax,ax

c000b428 <loadACPITables(unsigned char*)>:
c000b428:	57                   	push   edi
c000b429:	56                   	push   esi
c000b42a:	53                   	push   ebx
c000b42b:	83 ec 60             	sub    esp,0x60
c000b42e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b433:	0f 84 43 02 00 00    	je     c000b67c <loadACPITables(unsigned char*)+0x254>
c000b439:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b43e:	0f b6 c0             	movzx  eax,al
c000b441:	85 c0                	test   eax,eax
c000b443:	74 7b                	je     c000b4c0 <loadACPITables(unsigned char*)+0x98>
c000b445:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b449:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b44d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b451:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b454:	83 e8 24             	sub    eax,0x24
c000b457:	c1 e8 03             	shr    eax,0x3
c000b45a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b45e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b466:	66 90                	xchg   ax,ax
c000b468:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b46c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b470:	0f 8d ba 00 00 00    	jge    c000b530 <loadACPITables(unsigned char*)+0x108>
c000b476:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b47a:	83 c0 24             	add    eax,0x24
c000b47d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b481:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b485:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b489:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b48d:	c1 e0 03             	shl    eax,0x3
c000b490:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b494:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b498:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b49b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b49d:	89 c1                	mov    ecx,eax
c000b49f:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b4a4:	8d 50 01             	lea    edx,[eax+0x1]
c000b4a7:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b4ad:	89 ca                	mov    edx,ecx
c000b4af:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4b6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4bb:	eb ab                	jmp    c000b468 <loadACPITables(unsigned char*)+0x40>
c000b4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4cf:	83 e8 24             	sub    eax,0x24
c000b4d2:	c1 e8 02             	shr    eax,0x2
c000b4d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4d9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4e8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4ec:	7d 42                	jge    c000b530 <loadACPITables(unsigned char*)+0x108>
c000b4ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4f2:	83 c0 24             	add    eax,0x24
c000b4f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b501:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b505:	c1 e0 02             	shl    eax,0x2
c000b508:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b50c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b510:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b512:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b517:	8d 50 01             	lea    edx,[eax+0x1]
c000b51a:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b520:	89 ca                	mov    edx,ecx
c000b522:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b529:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b52e:	eb b4                	jmp    c000b4e4 <loadACPITables(unsigned char*)+0xbc>
c000b530:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b538:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b53d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b541:	0f 8d 39 01 00 00    	jge    c000b680 <loadACPITables(unsigned char*)+0x258>
c000b547:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b54b:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b552:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b55a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b562:	25 ff 0f 00 00       	and    eax,0xfff
c000b567:	89 c6                	mov    esi,eax
c000b569:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b56f:	83 ec 0c             	sub    esp,0xc
c000b572:	6a 01                	push   0x1
c000b574:	e8 ca 69 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000b579:	83 c4 10             	add    esp,0x10
c000b57c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b580:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b586:	83 ec 0c             	sub    esp,0xc
c000b589:	6a 01                	push   0x1
c000b58b:	6a 01                	push   0x1
c000b58d:	50                   	push   eax
c000b58e:	52                   	push   edx
c000b58f:	53                   	push   ebx
c000b590:	e8 81 72 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b595:	83 c4 20             	add    esp,0x20
c000b598:	09 f0                	or     eax,esi
c000b59a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b59e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b5a2:	c1 e0 03             	shl    eax,0x3
c000b5a5:	05 20 98 02 c0       	add    eax,0xc0029820
c000b5aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5b6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d2:	89 c6                	mov    esi,eax
c000b5d4:	89 d7                	mov    edi,edx
c000b5d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5d8:	89 c8                	mov    eax,ecx
c000b5da:	89 fa                	mov    edx,edi
c000b5dc:	89 f3                	mov    ebx,esi
c000b5de:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5f9:	05 00 10 00 00       	add    eax,0x1000
c000b5fe:	c1 e8 0c             	shr    eax,0xc
c000b601:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b609:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b611:	25 ff 0f 00 00       	and    eax,0xfff
c000b616:	89 c6                	mov    esi,eax
c000b618:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b61e:	83 ec 0c             	sub    esp,0xc
c000b621:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b625:	e8 19 69 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b631:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b637:	83 ec 0c             	sub    esp,0xc
c000b63a:	6a 01                	push   0x1
c000b63c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b640:	50                   	push   eax
c000b641:	52                   	push   edx
c000b642:	53                   	push   ebx
c000b643:	e8 ce 71 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b648:	83 c4 20             	add    esp,0x20
c000b64b:	09 f0                	or     eax,esi
c000b64d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b655:	83 ec 0c             	sub    esp,0xc
c000b658:	50                   	push   eax
c000b659:	e8 e3 6b 00 00       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b665:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b669:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b670:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b675:	e9 be fe ff ff       	jmp    c000b538 <loadACPITables(unsigned char*)+0x110>
c000b67a:	66 90                	xchg   ax,ax
c000b67c:	90                   	nop
c000b67d:	8d 76 00             	lea    esi,[esi+0x0]
c000b680:	83 c4 60             	add    esp,0x60
c000b683:	5b                   	pop    ebx
c000b684:	5e                   	pop    esi
c000b685:	5f                   	pop    edi
c000b686:	c3                   	ret    
c000b687:	90                   	nop

c000b688 <findRSDT(unsigned char*)>:
c000b688:	57                   	push   edi
c000b689:	56                   	push   esi
c000b68a:	53                   	push   ebx
c000b68b:	83 ec 50             	sub    esp,0x50
c000b68e:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b693:	85 c0                	test   eax,eax
c000b695:	75 0d                	jne    c000b6a4 <findRSDT(unsigned char*)+0x1c>
c000b697:	b8 00 00 00 00       	mov    eax,0x0
c000b69c:	e9 2b 01 00 00       	jmp    c000b7cc <findRSDT(unsigned char*)+0x144>
c000b6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b6a4:	89 e0                	mov    eax,esp
c000b6a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b6aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6b2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6ce:	89 c6                	mov    esi,eax
c000b6d0:	89 d7                	mov    edi,edx
c000b6d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6d4:	89 c8                	mov    eax,ecx
c000b6d6:	89 fa                	mov    edx,edi
c000b6d8:	89 f3                	mov    ebx,esi
c000b6da:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6de:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6e6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6ea:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6ee:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b706:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b70a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b70e:	25 ff 0f 00 00       	and    eax,0xfff
c000b713:	89 c6                	mov    esi,eax
c000b715:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b71b:	83 ec 0c             	sub    esp,0xc
c000b71e:	6a 02                	push   0x2
c000b720:	e8 1e 68 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b72c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b732:	83 ec 0c             	sub    esp,0xc
c000b735:	6a 01                	push   0x1
c000b737:	6a 02                	push   0x2
c000b739:	50                   	push   eax
c000b73a:	52                   	push   edx
c000b73b:	53                   	push   ebx
c000b73c:	e8 d5 70 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b741:	83 c4 20             	add    esp,0x20
c000b744:	09 f0                	or     eax,esi
c000b746:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b74a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b74e:	25 ff 0f 00 00       	and    eax,0xfff
c000b753:	89 c6                	mov    esi,eax
c000b755:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	6a 02                	push   0x2
c000b760:	e8 de 67 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b76c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	6a 01                	push   0x1
c000b777:	6a 02                	push   0x2
c000b779:	50                   	push   eax
c000b77a:	52                   	push   edx
c000b77b:	53                   	push   ebx
c000b77c:	e8 95 70 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b781:	83 c4 20             	add    esp,0x20
c000b784:	09 f0                	or     eax,esi
c000b786:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b78a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b78f:	85 c0                	test   eax,eax
c000b791:	75 11                	jne    c000b7a4 <findRSDT(unsigned char*)+0x11c>
c000b793:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b79a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b79e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7a2:	eb 24                	jmp    c000b7c8 <findRSDT(unsigned char*)+0x140>
c000b7a4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7a9:	83 f8 02             	cmp    eax,0x2
c000b7ac:	75 12                	jne    c000b7c0 <findRSDT(unsigned char*)+0x138>
c000b7ae:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7b9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7bd:	eb 09                	jmp    c000b7c8 <findRSDT(unsigned char*)+0x140>
c000b7bf:	90                   	nop
c000b7c0:	b8 00 00 00 00       	mov    eax,0x0
c000b7c5:	eb 05                	jmp    c000b7cc <findRSDT(unsigned char*)+0x144>
c000b7c7:	90                   	nop
c000b7c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7cc:	83 c4 50             	add    esp,0x50
c000b7cf:	5b                   	pop    ebx
c000b7d0:	5e                   	pop    esi
c000b7d1:	5f                   	pop    edi
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <findDataTable(unsigned char*, char*)>:
c000b7d4:	83 ec 1c             	sub    esp,0x1c
c000b7d7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7dc:	75 0a                	jne    c000b7e8 <findDataTable(unsigned char*, char*)+0x14>
c000b7de:	b8 00 00 00 00       	mov    eax,0x0
c000b7e3:	eb 5f                	jmp    c000b844 <findDataTable(unsigned char*, char*)+0x70>
c000b7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7f0:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7f5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7f9:	7d 41                	jge    c000b83c <findDataTable(unsigned char*, char*)+0x68>
c000b7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7ff:	c1 e0 03             	shl    eax,0x3
c000b802:	05 20 98 02 c0       	add    eax,0xc0029820
c000b807:	83 ec 04             	sub    esp,0x4
c000b80a:	6a 04                	push   0x4
c000b80c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b810:	50                   	push   eax
c000b811:	e8 6a 4b ff ff       	call   c0000380 <memcmp>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	85 c0                	test   eax,eax
c000b81b:	0f 94 c0             	sete   al
c000b81e:	0f b6 c0             	movzx  eax,al
c000b821:	85 c0                	test   eax,eax
c000b823:	74 0f                	je     c000b834 <findDataTable(unsigned char*, char*)+0x60>
c000b825:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b829:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b830:	eb 12                	jmp    c000b844 <findDataTable(unsigned char*, char*)+0x70>
c000b832:	66 90                	xchg   ax,ax
c000b834:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b839:	eb b5                	jmp    c000b7f0 <findDataTable(unsigned char*, char*)+0x1c>
c000b83b:	90                   	nop
c000b83c:	b8 00 00 00 00       	mov    eax,0x0
c000b841:	8d 76 00             	lea    esi,[esi+0x0]
c000b844:	83 c4 1c             	add    esp,0x1c
c000b847:	c3                   	ret    

c000b848 <scanMADT()>:
c000b848:	53                   	push   ebx
c000b849:	83 ec 38             	sub    esp,0x38
c000b84c:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b856:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b860:	e8 c6 c3 00 00       	call   c0017c2b <HalFindRSDP()>
c000b865:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b86a:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b86f:	85 c0                	test   eax,eax
c000b871:	0f 84 11 04 00 00    	je     c000bc88 <scanMADT()+0x440>
c000b877:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b87c:	83 ec 0c             	sub    esp,0xc
c000b87f:	50                   	push   eax
c000b880:	e8 03 fe ff ff       	call   c000b688 <findRSDT(unsigned char*)>
c000b885:	83 c4 10             	add    esp,0x10
c000b888:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b88d:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b892:	85 c0                	test   eax,eax
c000b894:	0f 84 f2 03 00 00    	je     c000bc8c <scanMADT()+0x444>
c000b89a:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b89f:	83 ec 0c             	sub    esp,0xc
c000b8a2:	50                   	push   eax
c000b8a3:	e8 80 fb ff ff       	call   c000b428 <loadACPITables(unsigned char*)>
c000b8a8:	83 c4 10             	add    esp,0x10
c000b8ab:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8b0:	83 ec 08             	sub    esp,0x8
c000b8b3:	68 2c 1a 02 c0       	push   0xc0021a2c
c000b8b8:	50                   	push   eax
c000b8b9:	e8 16 ff ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000b8be:	83 c4 10             	add    esp,0x10
c000b8c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8c5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8ca:	0f 84 c0 03 00 00    	je     c000bc90 <scanMADT()+0x448>
c000b8d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8df:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8e3:	0f 87 af 03 00 00    	ja     c000bc98 <scanMADT()+0x450>
c000b8e9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8f1:	0f 87 a1 03 00 00    	ja     c000bc98 <scanMADT()+0x450>
c000b8f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8fb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b903:	8d 50 01             	lea    edx,[eax+0x1]
c000b906:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b90a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b90e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b912:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b916:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b91a:	8d 50 01             	lea    edx,[eax+0x1]
c000b91d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b921:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b925:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b929:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b92d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b932:	83 f8 02             	cmp    eax,0x2
c000b935:	0f 86 59 03 00 00    	jbe    c000bc94 <scanMADT()+0x44c>
c000b93b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b940:	85 c0                	test   eax,eax
c000b942:	75 58                	jne    c000b99c <scanMADT()+0x154>
c000b944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b948:	8d 50 01             	lea    edx,[eax+0x1]
c000b94b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b94f:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b955:	0f b6 d2             	movzx  edx,dl
c000b958:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b95c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b960:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b96a:	8d 50 01             	lea    edx,[eax+0x1]
c000b96d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b971:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b977:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b97a:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b980:	0f b6 d2             	movzx  edx,dl
c000b983:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b987:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b98b:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b991:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b996:	e9 d9 02 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000b99b:	90                   	nop
c000b99c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b9a1:	83 f8 01             	cmp    eax,0x1
c000b9a4:	0f 85 1a 01 00 00    	jne    c000bac4 <scanMADT()+0x27c>
c000b9aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ae:	8d 50 01             	lea    edx,[eax+0x1]
c000b9b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b5:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9bb:	0f b6 d2             	movzx  edx,dl
c000b9be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9c2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9c6:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9cc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9d9:	01 d0                	add    eax,edx
c000b9db:	83 c0 2c             	add    eax,0x2c
c000b9de:	8a 00                	mov    al,BYTE PTR [eax]
c000b9e0:	0f b6 d0             	movzx  edx,al
c000b9e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9e7:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9f2:	0f b6 c0             	movzx  eax,al
c000b9f5:	c1 e0 08             	shl    eax,0x8
c000b9f8:	89 d1                	mov    ecx,edx
c000b9fa:	09 c1                	or     ecx,eax
c000b9fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba00:	8d 50 02             	lea    edx,[eax+0x2]
c000ba03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba07:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba0b:	0f b6 c0             	movzx  eax,al
c000ba0e:	c1 e0 10             	shl    eax,0x10
c000ba11:	09 c1                	or     ecx,eax
c000ba13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba17:	8d 50 03             	lea    edx,[eax+0x3]
c000ba1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba1e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba22:	0f b6 c0             	movzx  eax,al
c000ba25:	c1 e0 18             	shl    eax,0x18
c000ba28:	09 c1                	or     ecx,eax
c000ba2a:	89 ca                	mov    edx,ecx
c000ba2c:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba31:	0f b6 c0             	movzx  eax,al
c000ba34:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba3b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba48:	01 d0                	add    eax,edx
c000ba4a:	83 c0 2c             	add    eax,0x2c
c000ba4d:	8a 00                	mov    al,BYTE PTR [eax]
c000ba4f:	0f b6 d0             	movzx  edx,al
c000ba52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba56:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba5d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba61:	0f b6 c0             	movzx  eax,al
c000ba64:	c1 e0 08             	shl    eax,0x8
c000ba67:	89 d1                	mov    ecx,edx
c000ba69:	09 c1                	or     ecx,eax
c000ba6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba6f:	8d 50 02             	lea    edx,[eax+0x2]
c000ba72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba76:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba7a:	0f b6 c0             	movzx  eax,al
c000ba7d:	c1 e0 10             	shl    eax,0x10
c000ba80:	09 c1                	or     ecx,eax
c000ba82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba86:	8d 50 03             	lea    edx,[eax+0x3]
c000ba89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba8d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba91:	0f b6 c0             	movzx  eax,al
c000ba94:	c1 e0 18             	shl    eax,0x18
c000ba97:	09 c1                	or     ecx,eax
c000ba99:	89 ca                	mov    edx,ecx
c000ba9b:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa0:	0f b6 c0             	movzx  eax,al
c000baa3:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000baaa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000baaf:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000bab4:	83 c0 01             	add    eax,0x1
c000bab7:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000babc:	e9 b3 01 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000bac1:	8d 76 00             	lea    esi,[esi+0x0]
c000bac4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bac9:	83 f8 02             	cmp    eax,0x2
c000bacc:	0f 85 ea 00 00 00    	jne    c000bbbc <scanMADT()+0x374>
c000bad2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad6:	8d 50 01             	lea    edx,[eax+0x1]
c000bad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000badd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bae5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bae9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baed:	8d 50 01             	lea    edx,[eax+0x1]
c000baf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baf8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bafc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bb00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb08:	01 d0                	add    eax,edx
c000bb0a:	83 c0 2c             	add    eax,0x2c
c000bb0d:	8a 00                	mov    al,BYTE PTR [eax]
c000bb0f:	0f b6 d0             	movzx  edx,al
c000bb12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb16:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb1d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb21:	0f b6 c0             	movzx  eax,al
c000bb24:	c1 e0 08             	shl    eax,0x8
c000bb27:	89 d1                	mov    ecx,edx
c000bb29:	09 c1                	or     ecx,eax
c000bb2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb2f:	8d 50 02             	lea    edx,[eax+0x2]
c000bb32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb36:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb3a:	0f b6 c0             	movzx  eax,al
c000bb3d:	c1 e0 10             	shl    eax,0x10
c000bb40:	09 c1                	or     ecx,eax
c000bb42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb46:	8d 50 03             	lea    edx,[eax+0x3]
c000bb49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb4d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb51:	0f b6 c0             	movzx  eax,al
c000bb54:	c1 e0 18             	shl    eax,0x18
c000bb57:	09 c8                	or     eax,ecx
c000bb59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb5d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb6a:	01 d0                	add    eax,edx
c000bb6c:	83 c0 2c             	add    eax,0x2c
c000bb6f:	8a 00                	mov    al,BYTE PTR [eax]
c000bb71:	0f b6 d0             	movzx  edx,al
c000bb74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb78:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb7f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb83:	0f b6 c0             	movzx  eax,al
c000bb86:	c1 e0 08             	shl    eax,0x8
c000bb89:	09 d0                	or     eax,edx
c000bb8b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb90:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb95:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb9e:	88 90 c8 3a 02 c0    	mov    BYTE PTR [eax-0x3ffdc538],dl
c000bba4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bba9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bbae:	66 89 94 00 c0 9a 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd6540],dx
c000bbb6:	e9 b9 00 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000bbbb:	90                   	nop
c000bbbc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbc1:	83 f8 04             	cmp    eax,0x4
c000bbc4:	0f 85 9a 00 00 00    	jne    c000bc64 <scanMADT()+0x41c>
c000bbca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbce:	8d 50 01             	lea    edx,[eax+0x1]
c000bbd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbd9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbdd:	0f b6 c0             	movzx  eax,al
c000bbe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbe4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbec:	01 d0                	add    eax,edx
c000bbee:	83 c0 2c             	add    eax,0x2c
c000bbf1:	8a 00                	mov    al,BYTE PTR [eax]
c000bbf3:	0f b6 d0             	movzx  edx,al
c000bbf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbfa:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc01:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc05:	0f b6 c0             	movzx  eax,al
c000bc08:	c1 e0 08             	shl    eax,0x8
c000bc0b:	09 d0                	or     eax,edx
c000bc0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc11:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc1a:	8d 50 01             	lea    edx,[eax+0x1]
c000bc1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc25:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc29:	0f b6 c0             	movzx  eax,al
c000bc2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc34:	c1 e0 08             	shl    eax,0x8
c000bc37:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc3b:	89 c1                	mov    ecx,eax
c000bc3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc41:	c1 e0 18             	shl    eax,0x18
c000bc44:	89 c3                	mov    ebx,eax
c000bc46:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc4b:	8d 50 01             	lea    edx,[eax+0x1]
c000bc4e:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc54:	09 d9                	or     ecx,ebx
c000bc56:	89 ca                	mov    edx,ecx
c000bc58:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc5f:	eb 13                	jmp    c000bc74 <scanMADT()+0x42c>
c000bc61:	8d 76 00             	lea    esi,[esi+0x0]
c000bc64:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc69:	83 f8 05             	cmp    eax,0x5
c000bc6c:	75 06                	jne    c000bc74 <scanMADT()+0x42c>
c000bc6e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc73:	90                   	nop
c000bc74:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc7d:	01 d0                	add    eax,edx
c000bc7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc83:	e9 50 fc ff ff       	jmp    c000b8d8 <scanMADT()+0x90>
c000bc88:	90                   	nop
c000bc89:	eb 0d                	jmp    c000bc98 <scanMADT()+0x450>
c000bc8b:	90                   	nop
c000bc8c:	90                   	nop
c000bc8d:	eb 09                	jmp    c000bc98 <scanMADT()+0x450>
c000bc8f:	90                   	nop
c000bc90:	90                   	nop
c000bc91:	eb 05                	jmp    c000bc98 <scanMADT()+0x450>
c000bc93:	90                   	nop
c000bc94:	90                   	nop
c000bc95:	8d 76 00             	lea    esi,[esi+0x0]
c000bc98:	83 c4 38             	add    esp,0x38
c000bc9b:	5b                   	pop    ebx
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop
c000bc9e:	66 90                	xchg   ax,ax

c000bca0 <ACPI::ACPI()>:
c000bca0:	83 ec 0c             	sub    esp,0xc
c000bca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca7:	83 ec 08             	sub    esp,0x8
c000bcaa:	68 31 1a 02 c0       	push   0xc0021a31
c000bcaf:	50                   	push   eax
c000bcb0:	e8 f3 d4 ff ff       	call   c00091a8 <Device::Device(char const*)>
c000bcb5:	83 c4 10             	add    esp,0x10
c000bcb8:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c000bcbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc1:	89 10                	mov    DWORD PTR [eax],edx
c000bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcea:	e8 59 fb ff ff       	call   c000b848 <scanMADT()>
c000bcef:	90                   	nop
c000bcf0:	83 c4 0c             	add    esp,0xc
c000bcf3:	c3                   	ret    

c000bcf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bcf4:	83 ec 2c             	sub    esp,0x2c
c000bcf7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bcfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcff:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000bd03:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000bd07:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd0c:	88 c8                	mov    al,cl
c000bd0e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	90                   	nop
c000bd20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd24:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd2a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd2e:	0f 8d b0 00 00 00    	jge    c000bde4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd3c:	83 c2 2a             	add    edx,0x2a
c000bd3f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd43:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd48:	0f b7 c0             	movzx  eax,ax
c000bd4b:	39 c2                	cmp    edx,eax
c000bd4d:	0f 85 85 00 00 00    	jne    c000bdd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd5b:	83 c2 2a             	add    edx,0x2a
c000bd5e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd62:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd67:	0f b6 c0             	movzx  eax,al
c000bd6a:	39 c2                	cmp    edx,eax
c000bd6c:	75 6a                	jne    c000bdd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd6e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd73:	85 c0                	test   eax,eax
c000bd75:	74 3d                	je     c000bdb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd7f:	83 c2 2a             	add    edx,0x2a
c000bd82:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd8d:	39 c2                	cmp    edx,eax
c000bd8f:	74 13                	je     c000bda4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd91:	83 ec 0c             	sub    esp,0xc
c000bd94:	68 ac 1b 02 c0       	push   0xc0021bac
c000bd99:	e8 78 2e 00 00       	call   c000ec16 <KePanic(char const*)>
c000bd9e:	83 c4 10             	add    esp,0x10
c000bda1:	8d 76 00             	lea    esi,[esi+0x0]
c000bda4:	83 ec 0c             	sub    esp,0xc
c000bda7:	68 36 1a 02 c0       	push   0xc0021a36
c000bdac:	e8 65 2e 00 00       	call   c000ec16 <KePanic(char const*)>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bdb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdc0:	83 c2 2a             	add    edx,0x2a
c000bdc3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdc7:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdc9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdcc:	89 01                	mov    DWORD PTR [ecx],eax
c000bdce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdd1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdd6:	66 90                	xchg   ax,ax
c000bdd8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bddd:	e9 3e ff ff ff       	jmp    c000bd20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bde2:	66 90                	xchg   ax,ax
c000bde4:	90                   	nop
c000bde5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bde9:	83 c4 2c             	add    esp,0x2c
c000bdec:	c2 04 00             	ret    0x4
c000bdef:	90                   	nop

c000bdf0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bdf0:	83 ec 1c             	sub    esp,0x1c
c000bdf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdf7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bdfb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000be04:	88 c8                	mov    al,cl
c000be06:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000be0a:	88 d0                	mov    al,dl
c000be0c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be14:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1e:	83 c2 2a             	add    edx,0x2a
c000be21:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000be25:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000be29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be2d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be37:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be3e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000be43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be47:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be4d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be51:	83 c0 01             	add    eax,0x1
c000be54:	88 c1                	mov    cl,al
c000be56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be5a:	83 c2 2a             	add    edx,0x2a
c000be5d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be65:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be76:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be7e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be84:	8d 50 01             	lea    edx,[eax+0x1]
c000be87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be8b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be95:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be9b:	3d 00 02 00 00       	cmp    eax,0x200
c000bea0:	75 12                	jne    c000beb4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000bea2:	83 ec 0c             	sub    esp,0xc
c000bea5:	68 45 1a 02 c0       	push   0xc0021a45
c000beaa:	e8 67 2d 00 00       	call   c000ec16 <KePanic(char const*)>
c000beaf:	83 c4 10             	add    esp,0x10
c000beb2:	66 90                	xchg   ax,ax
c000beb4:	90                   	nop
c000beb5:	83 c4 1c             	add    esp,0x1c
c000beb8:	c3                   	ret    
c000beb9:	90                   	nop
c000beba:	66 90                	xchg   ax,ax

c000bebc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000bebc:	b8 00 00 00 00       	mov    eax,0x0
c000bec1:	c3                   	ret    
c000bec2:	66 90                	xchg   ax,ax

c000bec4 <ACPI::detectPCI()>:
c000bec4:	53                   	push   ebx
c000bec5:	83 ec 28             	sub    esp,0x28
c000bec8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000becd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bed2:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000bed7:	83 ec 08             	sub    esp,0x8
c000beda:	68 62 1a 02 c0       	push   0xc0021a62
c000bedf:	50                   	push   eax
c000bee0:	e8 ef f8 ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000beec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bef1:	74 0d                	je     c000bf00 <ACPI::detectPCI()+0x3c>
c000bef3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bef8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000befd:	8d 76 00             	lea    esi,[esi+0x0]
c000bf00:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bf08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf0c:	8a 00                	mov    al,BYTE PTR [eax]
c000bf0e:	0f b6 c0             	movzx  eax,al
c000bf11:	83 f8 01             	cmp    eax,0x1
c000bf14:	75 0e                	jne    c000bf24 <ACPI::detectPCI()+0x60>
c000bf16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf1b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf20:	eb 2e                	jmp    c000bf50 <ACPI::detectPCI()+0x8c>
c000bf22:	66 90                	xchg   ax,ax
c000bf24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf28:	8a 00                	mov    al,BYTE PTR [eax]
c000bf2a:	0f b6 c0             	movzx  eax,al
c000bf2d:	83 f8 02             	cmp    eax,0x2
c000bf30:	75 1e                	jne    c000bf50 <ACPI::detectPCI()+0x8c>
c000bf32:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf37:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	74 10                	je     c000bf50 <ACPI::detectPCI()+0x8c>
c000bf40:	83 ec 0c             	sub    esp,0xc
c000bf43:	68 dc 1b 02 c0       	push   0xc0021bdc
c000bf48:	e8 c9 2c 00 00       	call   c000ec16 <KePanic(char const*)>
c000bf4d:	83 c4 10             	add    esp,0x10
c000bf50:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf54:	83 f0 01             	xor    eax,0x1
c000bf57:	0f b6 c0             	movzx  eax,al
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	74 46                	je     c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf5e:	e8 cd 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf67:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf6c:	75 0e                	jne    c000bf7c <ACPI::detectPCI()+0xb8>
c000bf6e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf73:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf78:	eb 2a                	jmp    c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf7a:	66 90                	xchg   ax,ax
c000bf7c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf81:	75 21                	jne    c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf88:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf8d:	85 c0                	test   eax,eax
c000bf8f:	74 13                	je     c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf91:	83 ec 0c             	sub    esp,0xc
c000bf94:	68 dc 1b 02 c0       	push   0xc0021bdc
c000bf99:	e8 78 2c 00 00       	call   c000ec16 <KePanic(char const*)>
c000bf9e:	83 c4 10             	add    esp,0x10
c000bfa1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfa4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bfa9:	85 c0                	test   eax,eax
c000bfab:	0f 84 87 00 00 00    	je     c000c038 <ACPI::detectPCI()+0x174>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	68 67 1a 02 c0       	push   0xc0021a67
c000bfb9:	e8 dd 05 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000bfbe:	83 c4 10             	add    esp,0x10
c000bfc1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfc9:	83 ec 0c             	sub    esp,0xc
c000bfcc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfd0:	e8 fb 28 00 00       	call   c000e8d0 <malloc>
c000bfd5:	83 c4 10             	add    esp,0x10
c000bfd8:	89 c3                	mov    ebx,eax
c000bfda:	83 ec 0c             	sub    esp,0xc
c000bfdd:	53                   	push   ebx
c000bfde:	e8 07 f9 00 00       	call   c001b8ea <PCI::PCI()>
c000bfe3:	83 c4 10             	add    esp,0x10
c000bfe6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bfea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfee:	83 ec 08             	sub    esp,0x8
c000bff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff5:	50                   	push   eax
c000bff6:	e8 4b d0 ff ff       	call   c0009046 <Device::addChild(Device*)>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c002:	8b 00                	mov    eax,DWORD PTR [eax]
c000c004:	83 c0 08             	add    eax,0x8
c000c007:	8b 00                	mov    eax,DWORD PTR [eax]
c000c009:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c00e:	85 d2                	test   edx,edx
c000c010:	74 0a                	je     c000c01c <ACPI::detectPCI()+0x158>
c000c012:	ba 01 00 00 00       	mov    edx,0x1
c000c017:	eb 0b                	jmp    c000c024 <ACPI::detectPCI()+0x160>
c000c019:	8d 76 00             	lea    esi,[esi+0x0]
c000c01c:	ba 02 00 00 00       	mov    edx,0x2
c000c021:	8d 76 00             	lea    esi,[esi+0x0]
c000c024:	6a 00                	push   0x0
c000c026:	6a 00                	push   0x0
c000c028:	52                   	push   edx
c000c029:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c02d:	ff d0                	call   eax
c000c02f:	83 c4 10             	add    esp,0x10
c000c032:	e9 91 00 00 00       	jmp    c000c0c8 <ACPI::detectPCI()+0x204>
c000c037:	90                   	nop
c000c038:	83 ec 0c             	sub    esp,0xc
c000c03b:	68 7f 1a 02 c0       	push   0xc0021a7f
c000c040:	e8 56 05 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c045:	83 c4 10             	add    esp,0x10
c000c048:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c04f:	83 ec 0c             	sub    esp,0xc
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	e8 75 28 00 00       	call   c000e8d0 <malloc>
c000c05b:	83 c4 10             	add    esp,0x10
c000c05e:	89 c3                	mov    ebx,eax
c000c060:	83 ec 0c             	sub    esp,0xc
c000c063:	53                   	push   ebx
c000c064:	e8 89 04 01 00       	call   c001c4f2 <IDE::IDE()>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c074:	83 ec 08             	sub    esp,0x8
c000c077:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c07b:	50                   	push   eax
c000c07c:	e8 c5 cf ff ff       	call   c0009046 <Device::addChild(Device*)>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c088:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c092:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c096:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c09f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0a3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b2:	83 c0 08             	add    eax,0x8
c000c0b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b7:	6a 00                	push   0x0
c000c0b9:	6a 00                	push   0x0
c000c0bb:	6a 00                	push   0x0
c000c0bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c1:	ff d0                	call   eax
c000c0c3:	83 c4 10             	add    esp,0x10
c000c0c6:	66 90                	xchg   ax,ax
c000c0c8:	90                   	nop
c000c0c9:	83 c4 28             	add    esp,0x28
c000c0cc:	5b                   	pop    ebx
c000c0cd:	c3                   	ret    
c000c0ce:	66 90                	xchg   ax,ax

c000c0d0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0d0:	83 ec 0c             	sub    esp,0xc
c000c0d3:	83 ec 0c             	sub    esp,0xc
c000c0d6:	68 94 1a 02 c0       	push   0xc0021a94
c000c0db:	e8 36 2b 00 00       	call   c000ec16 <KePanic(char const*)>
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	90                   	nop
c000c0e4:	83 c4 0c             	add    esp,0xc
c000c0e7:	c3                   	ret    

c000c0e8 <ACPI::open(int, int, void*)>:
c000c0e8:	55                   	push   ebp
c000c0e9:	89 e5                	mov    ebp,esp
c000c0eb:	53                   	push   ebx
c000c0ec:	81 ec 74 01 00 00    	sub    esp,0x174
c000c0f2:	83 ec 0c             	sub    esp,0xc
c000c0f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c0f8:	e8 c7 fd ff ff       	call   c000bec4 <ACPI::detectPCI()>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	83 ec 0c             	sub    esp,0xc
c000c103:	68 04 1c 02 c0       	push   0xc0021c04
c000c108:	e8 8e 04 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c10d:	83 c4 10             	add    esp,0x10
c000c110:	b8 4c 05 00 00       	mov    eax,0x54c
c000c115:	8a 00                	mov    al,BYTE PTR [eax]
c000c117:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c11a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c11e:	83 f8 01             	cmp    eax,0x1
c000c121:	75 15                	jne    c000c138 <ACPI::open(int, int, void*)+0x50>
c000c123:	83 ec 0c             	sub    esp,0xc
c000c126:	68 a5 1a 02 c0       	push   0xc0021aa5
c000c12b:	e8 3c 7d 00 00       	call   c0013e6c <Thr::loadKernelSymbolTable(char const*)>
c000c130:	83 c4 10             	add    esp,0x10
c000c133:	eb 33                	jmp    c000c168 <ACPI::open(int, int, void*)+0x80>
c000c135:	8d 76 00             	lea    esi,[esi+0x0]
c000c138:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c13c:	3d bb 00 00 00       	cmp    eax,0xbb
c000c141:	75 15                	jne    c000c158 <ACPI::open(int, int, void*)+0x70>
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	68 c3 1a 02 c0       	push   0xc0021ac3
c000c14b:	e8 1c 7d 00 00       	call   c0013e6c <Thr::loadKernelSymbolTable(char const*)>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	eb 13                	jmp    c000c168 <ACPI::open(int, int, void*)+0x80>
c000c155:	8d 76 00             	lea    esi,[esi+0x0]
c000c158:	83 ec 0c             	sub    esp,0xc
c000c15b:	68 e1 1a 02 c0       	push   0xc0021ae1
c000c160:	e8 b1 2a 00 00       	call   c000ec16 <KePanic(char const*)>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c16c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c179:	e8 52 27 00 00       	call   c000e8d0 <malloc>
c000c17e:	83 c4 10             	add    esp,0x10
c000c181:	89 c3                	mov    ebx,eax
c000c183:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c188:	83 ec 04             	sub    esp,0x4
c000c18b:	50                   	push   eax
c000c18c:	68 fb 1a 02 c0       	push   0xc0021afb
c000c191:	53                   	push   ebx
c000c192:	e8 75 bf ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c197:	83 c4 10             	add    esp,0x10
c000c19a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c19d:	83 ec 08             	sub    esp,0x8
c000c1a0:	6a 01                	push   0x1
c000c1a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1a5:	e8 80 bf ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c1b0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c1b4:	75 12                	jne    c000c1c8 <ACPI::open(int, int, void*)+0xe0>
c000c1b6:	83 ec 0c             	sub    esp,0xc
c000c1b9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1bc:	e8 c7 bf ff ff       	call   c0008188 <File::close()>
c000c1c1:	83 c4 10             	add    esp,0x10
c000c1c4:	eb 06                	jmp    c000c1cc <ACPI::open(int, int, void*)+0xe4>
c000c1c6:	66 90                	xchg   ax,ax
c000c1c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c1cc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c1d0:	74 16                	je     c000c1e8 <ACPI::open(int, int, void*)+0x100>
c000c1d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1d7:	83 c0 08             	add    eax,0x8
c000c1da:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1e2:	ff d0                	call   eax
c000c1e4:	83 c4 10             	add    esp,0x10
c000c1e7:	90                   	nop
c000c1e8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c1eb:	83 f0 01             	xor    eax,0x1
c000c1ee:	0f b6 c0             	movzx  eax,al
c000c1f1:	85 c0                	test   eax,eax
c000c1f3:	74 27                	je     c000c21c <ACPI::open(int, int, void*)+0x134>
c000c1f5:	83 ec 0c             	sub    esp,0xc
c000c1f8:	68 19 1b 02 c0       	push   0xc0021b19
c000c1fd:	e8 99 03 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c202:	83 c4 10             	add    esp,0x10
c000c205:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c20c:	83 ec 0c             	sub    esp,0xc
c000c20f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c212:	e8 51 5f 00 00       	call   c0012168 <Virt::setupPageSwapping(int)>
c000c217:	83 c4 10             	add    esp,0x10
c000c21a:	66 90                	xchg   ax,ax
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	68 34 1b 02 c0       	push   0xc0021b34
c000c224:	e8 72 03 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c22f:	83 ec 08             	sub    esp,0x8
c000c232:	6a 13                	push   0x13
c000c234:	50                   	push   eax
c000c235:	e8 3a d1 ff ff       	call   c0009374 <getDevicesOfType(DeviceType)>
c000c23a:	83 c4 0c             	add    esp,0xc
c000c23d:	8d 76 00             	lea    esi,[esi+0x0]
c000c240:	83 ec 0c             	sub    esp,0xc
c000c243:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c246:	50                   	push   eax
c000c247:	e8 00 3e 01 00       	call   c002004c <LinkedList<Device>::isEmpty()>
c000c24c:	83 c4 10             	add    esp,0x10
c000c24f:	83 f0 01             	xor    eax,0x1
c000c252:	0f b6 c0             	movzx  eax,al
c000c255:	85 c0                	test   eax,eax
c000c257:	0f 84 1f 01 00 00    	je     c000c37c <ACPI::open(int, int, void*)+0x294>
c000c25d:	83 ec 0c             	sub    esp,0xc
c000c260:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c263:	50                   	push   eax
c000c264:	e8 ff 3d 01 00       	call   c0020068 <LinkedList<Device>::getFirstElement()>
c000c269:	83 c4 10             	add    esp,0x10
c000c26c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c275:	50                   	push   eax
c000c276:	e8 f5 3d 01 00       	call   c0020070 <LinkedList<Device>::removeFirst()>
c000c27b:	83 c4 10             	add    esp,0x10
c000c27e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c281:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c284:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c287:	b8 24 00 00 00       	mov    eax,0x24
c000c28c:	83 e0 fc             	and    eax,0xfffffffc
c000c28f:	89 c3                	mov    ebx,eax
c000c291:	b8 00 00 00 00       	mov    eax,0x0
c000c296:	66 90                	xchg   ax,ax
c000c298:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c29f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c2a6:	83 c0 04             	add    eax,0x4
c000c2a9:	39 d8                	cmp    eax,ebx
c000c2ab:	72 eb                	jb     c000c298 <ACPI::open(int, int, void*)+0x1b0>
c000c2ad:	83 ec 08             	sub    esp,0x8
c000c2b0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c2b6:	50                   	push   eax
c000c2b7:	83 ec 24             	sub    esp,0x24
c000c2ba:	89 e1                	mov    ecx,esp
c000c2bc:	b8 24 00 00 00       	mov    eax,0x24
c000c2c1:	83 e0 fc             	and    eax,0xfffffffc
c000c2c4:	89 c3                	mov    ebx,eax
c000c2c6:	b8 00 00 00 00       	mov    eax,0x0
c000c2cb:	90                   	nop
c000c2cc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c2d3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c2d6:	83 c0 04             	add    eax,0x4
c000c2d9:	39 d8                	cmp    eax,ebx
c000c2db:	72 ef                	jb     c000c2cc <ACPI::open(int, int, void*)+0x1e4>
c000c2dd:	e8 f0 fa 00 00       	call   c001bdd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c2e2:	83 c4 30             	add    esp,0x30
c000c2e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c2e8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c2ec:	0f 84 4e ff ff ff    	je     c000c240 <ACPI::open(int, int, void*)+0x158>
c000c2f2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c2f9:	83 ec 0c             	sub    esp,0xc
c000c2fc:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c2ff:	e8 cc 25 00 00       	call   c000e8d0 <malloc>
c000c304:	83 c4 10             	add    esp,0x10
c000c307:	89 c3                	mov    ebx,eax
c000c309:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c30e:	83 ec 04             	sub    esp,0x4
c000c311:	50                   	push   eax
c000c312:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c315:	53                   	push   ebx
c000c316:	e8 f1 bd ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c31b:	83 c4 10             	add    esp,0x10
c000c31e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c321:	83 ec 0c             	sub    esp,0xc
c000c324:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c327:	e8 c2 c0 ff ff       	call   c00083ee <File::exists()>
c000c32c:	83 c4 10             	add    esp,0x10
c000c32f:	0f b6 c0             	movzx  eax,al
c000c332:	85 c0                	test   eax,eax
c000c334:	74 22                	je     c000c358 <ACPI::open(int, int, void*)+0x270>
c000c336:	83 ec 08             	sub    esp,0x8
c000c339:	6a 01                	push   0x1
c000c33b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c33e:	e8 ab 85 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	83 ec 08             	sub    esp,0x8
c000c349:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c34c:	50                   	push   eax
c000c34d:	e8 fd 87 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	8d 76 00             	lea    esi,[esi+0x0]
c000c358:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c35c:	0f 84 de fe ff ff    	je     c000c240 <ACPI::open(int, int, void*)+0x158>
c000c362:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c365:	8b 00                	mov    eax,DWORD PTR [eax]
c000c367:	83 c0 08             	add    eax,0x8
c000c36a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c36c:	83 ec 0c             	sub    esp,0xc
c000c36f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c372:	ff d0                	call   eax
c000c374:	83 c4 10             	add    esp,0x10
c000c377:	e9 c4 fe ff ff       	jmp    c000c240 <ACPI::open(int, int, void*)+0x158>
c000c37c:	83 ec 0c             	sub    esp,0xc
c000c37f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c382:	50                   	push   eax
c000c383:	e8 c0 3c 01 00       	call   c0020048 <LinkedList<Device>::~LinkedList()>
c000c388:	83 c4 10             	add    esp,0x10
c000c38b:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c391:	83 ec 08             	sub    esp,0x8
c000c394:	6a 01                	push   0x1
c000c396:	68 4e 1b 02 c0       	push   0xc0021b4e
c000c39b:	e8 4e 85 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	83 ec 08             	sub    esp,0x8
c000c3a6:	53                   	push   ebx
c000c3a7:	50                   	push   eax
c000c3a8:	e8 a2 87 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000c3ad:	83 c4 10             	add    esp,0x10
c000c3b0:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c3b5:	85 c0                	test   eax,eax
c000c3b7:	0f 84 ef 00 00 00    	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c3bd:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c3c2:	85 c0                	test   eax,eax
c000c3c4:	0f 84 e2 00 00 00    	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	68 6b 1b 02 c0       	push   0xc0021b6b
c000c3d2:	e8 c4 01 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c3e1:	83 ec 0c             	sub    esp,0xc
c000c3e4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c3e7:	e8 e4 24 00 00       	call   c000e8d0 <malloc>
c000c3ec:	83 c4 10             	add    esp,0x10
c000c3ef:	89 c3                	mov    ebx,eax
c000c3f1:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c3f6:	83 ec 04             	sub    esp,0x4
c000c3f9:	50                   	push   eax
c000c3fa:	68 88 1b 02 c0       	push   0xc0021b88
c000c3ff:	53                   	push   ebx
c000c400:	e8 07 bd ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c405:	83 c4 10             	add    esp,0x10
c000c408:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c40b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c40f:	74 1b                	je     c000c42c <ACPI::open(int, int, void*)+0x344>
c000c411:	83 ec 0c             	sub    esp,0xc
c000c414:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c417:	e8 d2 bf ff ff       	call   c00083ee <File::exists()>
c000c41c:	83 c4 10             	add    esp,0x10
c000c41f:	0f b6 c0             	movzx  eax,al
c000c422:	85 c0                	test   eax,eax
c000c424:	74 06                	je     c000c42c <ACPI::open(int, int, void*)+0x344>
c000c426:	b0 01                	mov    al,0x1
c000c428:	eb 06                	jmp    c000c430 <ACPI::open(int, int, void*)+0x348>
c000c42a:	66 90                	xchg   ax,ax
c000c42c:	b0 00                	mov    al,0x0
c000c42e:	66 90                	xchg   ax,ax
c000c430:	0f b6 c0             	movzx  eax,al
c000c433:	85 c0                	test   eax,eax
c000c435:	74 21                	je     c000c458 <ACPI::open(int, int, void*)+0x370>
c000c437:	83 ec 08             	sub    esp,0x8
c000c43a:	6a 01                	push   0x1
c000c43c:	68 88 1b 02 c0       	push   0xc0021b88
c000c441:	e8 a8 84 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	83 ec 08             	sub    esp,0x8
c000c44c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c44f:	50                   	push   eax
c000c450:	e8 fa 86 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000c455:	83 c4 10             	add    esp,0x10
c000c458:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c45c:	74 1e                	je     c000c47c <ACPI::open(int, int, void*)+0x394>
c000c45e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c462:	74 18                	je     c000c47c <ACPI::open(int, int, void*)+0x394>
c000c464:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c467:	8b 00                	mov    eax,DWORD PTR [eax]
c000c469:	83 c0 08             	add    eax,0x8
c000c46c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c46e:	83 ec 0c             	sub    esp,0xc
c000c471:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c474:	ff d0                	call   eax
c000c476:	83 c4 10             	add    esp,0x10
c000c479:	8d 76 00             	lea    esi,[esi+0x0]
c000c47c:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c481:	83 ec 08             	sub    esp,0x8
c000c484:	68 a5 1b 02 c0       	push   0xc0021ba5
c000c489:	50                   	push   eax
c000c48a:	e8 45 f3 ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000c48f:	83 c4 10             	add    esp,0x10
c000c492:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c495:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c499:	74 11                	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c49b:	83 ec 08             	sub    esp,0x8
c000c49e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c4a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c4a4:	e8 27 fc ff ff       	call   c000c0d0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	b8 00 00 00 00       	mov    eax,0x0
c000c4b1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c4b4:	c9                   	leave  
c000c4b5:	c3                   	ret    

c000c4b6 <KeInitialiseAtexit()>:
c000c4b6:	83 ec 10             	sub    esp,0x10
c000c4b9:	6a 60                	push   0x60
c000c4bb:	6a 00                	push   0x0
c000c4bd:	68 00 9d 02 c0       	push   0xc0029d00
c000c4c2:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c4cc:	e8 1f 40 ff ff       	call   c00004f0 <memset>
c000c4d1:	83 c4 1c             	add    esp,0x1c
c000c4d4:	c3                   	ret    

c000c4d5 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c4d5:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c4da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c4de:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c4e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4e9:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c4f0:	40                   	inc    eax
c000c4f1:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c4f6:	83 f8 17             	cmp    eax,0x17
c000c4f9:	7e 0d                	jle    c000c508 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c4fb:	c7 44 24 04 50 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c50
c000c503:	e9 0e 27 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000c508:	c3                   	ret    

c000c509 <KeExecuteAtexit()>:
c000c509:	53                   	push   ebx
c000c50a:	31 db                	xor    ebx,ebx
c000c50c:	83 ec 08             	sub    esp,0x8
c000c50f:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c515:	7e 50                	jle    c000c567 <KeExecuteAtexit()+0x5e>
c000c517:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c51e:	85 c0                	test   eax,eax
c000c520:	74 42                	je     c000c564 <KeExecuteAtexit()+0x5b>
c000c522:	51                   	push   ecx
c000c523:	50                   	push   eax
c000c524:	53                   	push   ebx
c000c525:	68 69 1c 02 c0       	push   0xc0021c69
c000c52a:	e8 1f aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c52f:	58                   	pop    eax
c000c530:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c537:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c53e:	c7 04 24 8b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c8b
c000c545:	e8 04 aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c54a:	c7 04 24 0b 20 02 c0 	mov    DWORD PTR [esp],0xc002200b
c000c551:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c55c:	e8 ed a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c561:	83 c4 10             	add    esp,0x10
c000c564:	43                   	inc    ebx
c000c565:	eb a8                	jmp    c000c50f <KeExecuteAtexit()+0x6>
c000c567:	83 c4 08             	add    esp,0x8
c000c56a:	5b                   	pop    ebx
c000c56b:	c3                   	ret    

c000c56c <KeDisplaySplashScreen()>:
c000c56c:	53                   	push   ebx
c000c56d:	bb 01 00 00 00       	mov    ebx,0x1
c000c572:	83 ec 08             	sub    esp,0x8
c000c575:	43                   	inc    ebx
c000c576:	0f be 83 8e 1c 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde372]
c000c57d:	85 c0                	test   eax,eax
c000c57f:	74 15                	je     c000c596 <KeDisplaySplashScreen()+0x2a>
c000c581:	83 ec 0c             	sub    esp,0xc
c000c584:	6a 01                	push   0x1
c000c586:	53                   	push   ebx
c000c587:	6a 00                	push   0x0
c000c589:	6a 0f                	push   0xf
c000c58b:	50                   	push   eax
c000c58c:	e8 a7 cf 00 00       	call   c0019538 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c591:	83 c4 20             	add    esp,0x20
c000c594:	eb df                	jmp    c000c575 <KeDisplaySplashScreen()+0x9>
c000c596:	83 c4 08             	add    esp,0x8
c000c599:	5b                   	pop    ebx
c000c59a:	c3                   	ret    

c000c59b <KeSetBootMessage(char const*)>:
c000c59b:	57                   	push   edi
c000c59c:	56                   	push   esi
c000c59d:	53                   	push   ebx
c000c59e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c5a4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c5ab:	68 9e 00 00 00       	push   0x9e
c000c5b0:	6a 00                	push   0x0
c000c5b2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c5b6:	56                   	push   esi
c000c5b7:	e8 34 3f ff ff       	call   c00004f0 <memset>
c000c5bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c5bf:	e8 bc 3f ff ff       	call   c0000580 <strlen>
c000c5c4:	ba 50 00 00 00       	mov    edx,0x50
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	31 c9                	xor    ecx,ecx
c000c5ce:	29 c2                	sub    edx,eax
c000c5d0:	83 e2 fe             	and    edx,0xfffffffe
c000c5d3:	01 f2                	add    edx,esi
c000c5d5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c5da:	84 c0                	test   al,al
c000c5dc:	74 0a                	je     c000c5e8 <KeSetBootMessage(char const*)+0x4d>
c000c5de:	80 cc 07             	or     ah,0x7
c000c5e1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c5e5:	41                   	inc    ecx
c000c5e6:	eb ed                	jmp    c000c5d5 <KeSetBootMessage(char const*)+0x3a>
c000c5e8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c5ed:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c5f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5f4:	50                   	push   eax
c000c5f5:	50                   	push   eax
c000c5f6:	53                   	push   ebx
c000c5f7:	68 a3 1c 02 c0       	push   0xc0021ca3
c000c5fc:	e8 4d a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c601:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c607:	5b                   	pop    ebx
c000c608:	5e                   	pop    esi
c000c609:	5f                   	pop    edi
c000c60a:	c3                   	ret    

c000c60b <__cxa_atexit>:
c000c60b:	31 c0                	xor    eax,eax
c000c60d:	c3                   	ret    

c000c60e <__cxa_finalize>:
c000c60e:	c3                   	ret    

c000c60f <__stack_chk_fail>:
c000c60f:	55                   	push   ebp
c000c610:	89 e5                	mov    ebp,esp
c000c612:	83 ec 10             	sub    esp,0x10
c000c615:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c618:	68 b1 1c 02 c0       	push   0xc0021cb1
c000c61d:	e8 2c a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c622:	58                   	pop    eax
c000c623:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c626:	5a                   	pop    edx
c000c627:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c62a:	68 b1 1c 02 c0       	push   0xc0021cb1
c000c62f:	e8 1a a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c634:	c7 04 24 b9 1c 02 c0 	mov    DWORD PTR [esp],0xc0021cb9
c000c63b:	e8 d6 25 00 00       	call   c000ec16 <KePanic(char const*)>
c000c640:	83 c4 10             	add    esp,0x10
c000c643:	c9                   	leave  
c000c644:	c3                   	ret    

c000c645 <__cxa_pure_virtual>:
c000c645:	83 ec 18             	sub    esp,0x18
c000c648:	68 d1 1c 02 c0       	push   0xc0021cd1
c000c64d:	e8 c4 25 00 00       	call   c000ec16 <KePanic(char const*)>
c000c652:	83 c4 1c             	add    esp,0x1c
c000c655:	c3                   	ret    

c000c656 <operator new[](unsigned long)>:
c000c656:	e9 75 22 00 00       	jmp    c000e8d0 <malloc>

c000c65b <operator delete(void*, unsigned long)>:
c000c65b:	e9 90 22 00 00       	jmp    c000e8f0 <rfree>

c000c660 <operator delete[](void*)>:
c000c660:	e9 8b 22 00 00       	jmp    c000e8f0 <rfree>

c000c665 <operator delete[](void*, unsigned long)>:
c000c665:	e9 86 22 00 00       	jmp    c000e8f0 <rfree>
c000c66a:	66 90                	xchg   ax,ax

c000c66c <CUnlockScheduler>:
c000c66c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000c674:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c679:	85 c0                	test   eax,eax
c000c67b:	75 03                	jne    c000c680 <CUnlockScheduler+0x14>
c000c67d:	fb                   	sti    
c000c67e:	66 90                	xchg   ax,ax
c000c680:	90                   	nop
c000c681:	c3                   	ret    
c000c682:	66 90                	xchg   ax,ax

c000c684 <CLockScheduler>:
c000c684:	fa                   	cli    
c000c685:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c68a:	83 c0 01             	add    eax,0x1
c000c68d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c692:	90                   	nop
c000c693:	c3                   	ret    

c000c694 <CPrintf>:
c000c694:	83 ec 0c             	sub    esp,0xc
c000c697:	83 ec 08             	sub    esp,0x8
c000c69a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c69e:	68 e4 1c 02 c0       	push   0xc0021ce4
c000c6a3:	e8 a6 a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c6a8:	83 c4 10             	add    esp,0x10
c000c6ab:	90                   	nop
c000c6ac:	83 c4 0c             	add    esp,0xc
c000c6af:	c3                   	ret    

c000c6b0 <CmOpen(char const*)>:
c000c6b0:	57                   	push   edi
c000c6b1:	56                   	push   esi
c000c6b2:	53                   	push   ebx
c000c6b3:	83 ec 1c             	sub    esp,0x1c
c000c6b6:	6a 30                	push   0x30
c000c6b8:	e8 13 22 00 00       	call   c000e8d0 <malloc>
c000c6bd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c6c4:	89 c3                	mov    ebx,eax
c000c6c6:	e8 05 22 00 00       	call   c000e8d0 <malloc>
c000c6cb:	83 c4 0c             	add    esp,0xc
c000c6ce:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c6d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c6d8:	89 c6                	mov    esi,eax
c000c6da:	50                   	push   eax
c000c6db:	e8 2c ba ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c6e0:	83 c4 0c             	add    esp,0xc
c000c6e3:	89 33                	mov    DWORD PTR [ebx],esi
c000c6e5:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c6e9:	50                   	push   eax
c000c6ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6ee:	50                   	push   eax
c000c6ef:	56                   	push   esi
c000c6f0:	e8 37 bd ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000c6f5:	5a                   	pop    edx
c000c6f6:	59                   	pop    ecx
c000c6f7:	6a 01                	push   0x1
c000c6f9:	ff 33                	push   DWORD PTR [ebx]
c000c6fb:	e8 2a ba ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c700:	5e                   	pop    esi
c000c701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c705:	e8 c6 21 00 00       	call   c000e8d0 <malloc>
c000c70a:	5a                   	pop    edx
c000c70b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c70f:	89 c7                	mov    edi,eax
c000c711:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c713:	8b 10                	mov    edx,DWORD PTR [eax]
c000c715:	56                   	push   esi
c000c716:	57                   	push   edi
c000c717:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c71b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c71f:	50                   	push   eax
c000c720:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c723:	83 c4 14             	add    esp,0x14
c000c726:	ff 33                	push   DWORD PTR [ebx]
c000c728:	e8 5b ba ff ff       	call   c0008188 <File::close()>
c000c72d:	59                   	pop    ecx
c000c72e:	58                   	pop    eax
c000c72f:	6a 13                	push   0x13
c000c731:	ff 33                	push   DWORD PTR [ebx]
c000c733:	e8 f2 b9 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c738:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c73a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c73c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c73f:	57                   	push   edi
c000c740:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c744:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c748:	50                   	push   eax
c000c749:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c74c:	83 c4 14             	add    esp,0x14
c000c74f:	57                   	push   edi
c000c750:	e8 8b 21 00 00       	call   c000e8e0 <free>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c75b:	75 10                	jne    c000c76d <CmOpen(char const*)+0xbd>
c000c75d:	83 ec 0c             	sub    esp,0xc
c000c760:	68 e7 1c 02 c0       	push   0xc0021ce7
c000c765:	e8 ac 24 00 00       	call   c000ec16 <KePanic(char const*)>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	50                   	push   eax
c000c76e:	6a 00                	push   0x0
c000c770:	6a 00                	push   0x0
c000c772:	ff 33                	push   DWORD PTR [ebx]
c000c774:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c777:	e8 6c ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c77c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c77e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c780:	89 34 24             	mov    DWORD PTR [esp],esi
c000c783:	57                   	push   edi
c000c784:	6a 00                	push   0x0
c000c786:	6a 2b                	push   0x2b
c000c788:	50                   	push   eax
c000c789:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c78c:	83 c4 1c             	add    esp,0x1c
c000c78f:	6a 00                	push   0x0
c000c791:	6a 00                	push   0x0
c000c793:	ff 33                	push   DWORD PTR [ebx]
c000c795:	e8 4e ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c79a:	83 c4 0c             	add    esp,0xc
c000c79d:	6a 08                	push   0x8
c000c79f:	68 f8 1c 02 c0       	push   0xc0021cf8
c000c7a4:	57                   	push   edi
c000c7a5:	e8 d6 3b ff ff       	call   c0000380 <memcmp>
c000c7aa:	83 c4 10             	add    esp,0x10
c000c7ad:	85 c0                	test   eax,eax
c000c7af:	74 10                	je     c000c7c1 <CmOpen(char const*)+0x111>
c000c7b1:	83 ec 0c             	sub    esp,0xc
c000c7b4:	68 01 1d 02 c0       	push   0xc0021d01
c000c7b9:	e8 58 24 00 00       	call   c000ec16 <KePanic(char const*)>
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 d8                	mov    eax,ebx
c000c7ca:	5b                   	pop    ebx
c000c7cb:	5e                   	pop    esi
c000c7cc:	5f                   	pop    edi
c000c7cd:	c3                   	ret    

c000c7ce <CmClose(Reghive_Tag*)>:
c000c7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7d2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c7d6:	74 0b                	je     c000c7e3 <CmClose(Reghive_Tag*)+0x15>
c000c7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c7de:	e9 a5 b9 ff ff       	jmp    c0008188 <File::close()>
c000c7e3:	c3                   	ret    

c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c7e4:	53                   	push   ebx
c000c7e5:	83 ec 18             	sub    esp,0x18
c000c7e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c7ec:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c7f0:	74 29                	je     c000c81b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c7f2:	50                   	push   eax
c000c7f3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c7f8:	99                   	cdq    
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	ff 33                	push   DWORD PTR [ebx]
c000c7fd:	e8 e6 b9 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c802:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c804:	5a                   	pop    edx
c000c805:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c809:	8b 10                	mov    edx,DWORD PTR [eax]
c000c80b:	51                   	push   ecx
c000c80c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c810:	6a 00                	push   0x0
c000c812:	6a 2b                	push   0x2b
c000c814:	50                   	push   eax
c000c815:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c818:	83 c4 20             	add    esp,0x20
c000c81b:	83 c4 18             	add    esp,0x18
c000c81e:	5b                   	pop    ebx
c000c81f:	c3                   	ret    

c000c820 <CmGetString(Reghive_Tag*, int, char*)>:
c000c820:	55                   	push   ebp
c000c821:	57                   	push   edi
c000c822:	56                   	push   esi
c000c823:	53                   	push   ebx
c000c824:	31 db                	xor    ebx,ebx
c000c826:	83 ec 70             	sub    esp,0x70
c000c829:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c82d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c834:	50                   	push   eax
c000c835:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c83c:	55                   	push   ebp
c000c83d:	e8 a2 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c84a:	c1 e0 08             	shl    eax,0x8
c000c84d:	89 c2                	mov    edx,eax
c000c84f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c854:	09 d0                	or     eax,edx
c000c856:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c85b:	c1 e0 08             	shl    eax,0x8
c000c85e:	09 d0                	or     eax,edx
c000c860:	74 25                	je     c000c887 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c862:	52                   	push   edx
c000c863:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c867:	52                   	push   edx
c000c868:	6b fb 0d             	imul   edi,ebx,0xd
c000c86b:	50                   	push   eax
c000c86c:	55                   	push   ebp
c000c86d:	e8 72 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c872:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c876:	b9 27 00 00 00       	mov    ecx,0x27
c000c87b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c882:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c884:	83 c4 10             	add    esp,0x10
c000c887:	83 c3 03             	add    ebx,0x3
c000c88a:	83 fb 15             	cmp    ebx,0x15
c000c88d:	75 b6                	jne    c000c845 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c88f:	83 c4 6c             	add    esp,0x6c
c000c892:	5b                   	pop    ebx
c000c893:	5e                   	pop    esi
c000c894:	5f                   	pop    edi
c000c895:	5d                   	pop    ebp
c000c896:	c3                   	ret    

c000c897 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c897:	83 ec 40             	sub    esp,0x40
c000c89a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8a7:	e8 38 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	83 c8 ff             	or     eax,0xffffffff
c000c8b2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c8b7:	75 19                	jne    c000c8d2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c8b9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c8be:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c8c3:	c1 e0 08             	shl    eax,0x8
c000c8c6:	09 c2                	or     edx,eax
c000c8c8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c8cd:	c1 e0 10             	shl    eax,0x10
c000c8d0:	09 d0                	or     eax,edx
c000c8d2:	83 c4 3c             	add    esp,0x3c
c000c8d5:	c3                   	ret    

c000c8d6 <CmGetNext(Reghive_Tag*, int)>:
c000c8d6:	83 ec 40             	sub    esp,0x40
c000c8d9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c8dd:	50                   	push   eax
c000c8de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8e6:	e8 f9 fe ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8eb:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c8f0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c8f5:	c1 e0 08             	shl    eax,0x8
c000c8f8:	09 c2                	or     edx,eax
c000c8fa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c8ff:	83 c4 4c             	add    esp,0x4c
c000c902:	c1 e0 10             	shl    eax,0x10
c000c905:	09 d0                	or     eax,edx
c000c907:	c3                   	ret    

c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c908:	53                   	push   ebx
c000c909:	83 ec 18             	sub    esp,0x18
c000c90c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c910:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c914:	74 29                	je     c000c93f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c916:	50                   	push   eax
c000c917:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c91c:	99                   	cdq    
c000c91d:	52                   	push   edx
c000c91e:	50                   	push   eax
c000c91f:	ff 33                	push   DWORD PTR [ebx]
c000c921:	e8 c2 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c926:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c928:	5a                   	pop    edx
c000c929:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c92d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c92f:	51                   	push   ecx
c000c930:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c934:	6a 00                	push   0x0
c000c936:	6a 2b                	push   0x2b
c000c938:	50                   	push   eax
c000c939:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c93c:	83 c4 20             	add    esp,0x20
c000c93f:	83 c4 18             	add    esp,0x18
c000c942:	5b                   	pop    ebx
c000c943:	c3                   	ret    

c000c944 <CmFreeExtent(Reghive_Tag*, int)>:
c000c944:	53                   	push   ebx
c000c945:	83 ec 3c             	sub    esp,0x3c
c000c948:	6a 2b                	push   0x2b
c000c94a:	6a 00                	push   0x0
c000c94c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c950:	53                   	push   ebx
c000c951:	e8 9a 3b ff ff       	call   c00004f0 <memset>
c000c956:	83 c4 0c             	add    esp,0xc
c000c959:	53                   	push   ebx
c000c95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c962:	e8 a1 ff ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c967:	83 c4 48             	add    esp,0x48
c000c96a:	5b                   	pop    ebx
c000c96b:	c3                   	ret    

c000c96c <CmUpdateHeader(Reghive_Tag*)>:
c000c96c:	83 ec 0c             	sub    esp,0xc
c000c96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c973:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c977:	74 10                	je     c000c989 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000c979:	52                   	push   edx
c000c97a:	8d 50 05             	lea    edx,[eax+0x5]
c000c97d:	52                   	push   edx
c000c97e:	6a 00                	push   0x0
c000c980:	50                   	push   eax
c000c981:	e8 82 ff ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	83 c4 0c             	add    esp,0xc
c000c98c:	c3                   	ret    

c000c98d <CmExpand(Reghive_Tag*, int)>:
c000c98d:	55                   	push   ebp
c000c98e:	57                   	push   edi
c000c98f:	83 cf ff             	or     edi,0xffffffff
c000c992:	56                   	push   esi
c000c993:	53                   	push   ebx
c000c994:	83 ec 3c             	sub    esp,0x3c
c000c997:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000c99b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000c99f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9a3:	74 59                	je     c000c9fe <CmExpand(Reghive_Tag*, int)+0x71>
c000c9a5:	50                   	push   eax
c000c9a6:	31 d2                	xor    edx,edx
c000c9a8:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000c9ac:	31 ff                	xor    edi,edi
c000c9ae:	52                   	push   edx
c000c9af:	50                   	push   eax
c000c9b0:	ff 33                	push   DWORD PTR [ebx]
c000c9b2:	e8 31 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c9b7:	83 c4 0c             	add    esp,0xc
c000c9ba:	6a 2b                	push   0x2b
c000c9bc:	6a 00                	push   0x0
c000c9be:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000c9c2:	55                   	push   ebp
c000c9c3:	e8 28 3b ff ff       	call   c00004f0 <memset>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	39 f7                	cmp    edi,esi
c000c9cd:	7d 1b                	jge    c000c9ea <CmExpand(Reghive_Tag*, int)+0x5d>
c000c9cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9d1:	83 ec 0c             	sub    esp,0xc
c000c9d4:	47                   	inc    edi
c000c9d5:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000c9d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9db:	51                   	push   ecx
c000c9dc:	55                   	push   ebp
c000c9dd:	6a 00                	push   0x0
c000c9df:	6a 2b                	push   0x2b
c000c9e1:	50                   	push   eax
c000c9e2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9e5:	83 c4 20             	add    esp,0x20
c000c9e8:	eb e1                	jmp    c000c9cb <CmExpand(Reghive_Tag*, int)+0x3e>
c000c9ea:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000c9ed:	83 ec 0c             	sub    esp,0xc
c000c9f0:	01 fe                	add    esi,edi
c000c9f2:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000c9f5:	53                   	push   ebx
c000c9f6:	e8 71 ff ff ff       	call   c000c96c <CmUpdateHeader(Reghive_Tag*)>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	83 c4 3c             	add    esp,0x3c
c000ca01:	89 f8                	mov    eax,edi
c000ca03:	5b                   	pop    ebx
c000ca04:	5e                   	pop    esi
c000ca05:	5f                   	pop    edi
c000ca06:	5d                   	pop    ebp
c000ca07:	c3                   	ret    

c000ca08 <CmFindUnusedExtent(Reghive_Tag*)>:
c000ca08:	55                   	push   ebp
c000ca09:	57                   	push   edi
c000ca0a:	56                   	push   esi
c000ca0b:	53                   	push   ebx
c000ca0c:	83 cb ff             	or     ebx,0xffffffff
c000ca0f:	83 ec 1c             	sub    esp,0x1c
c000ca12:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca16:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000ca1a:	74 68                	je     c000ca84 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca1c:	51                   	push   ecx
c000ca1d:	be 2b 00 00 00       	mov    esi,0x2b
c000ca22:	6a 00                	push   0x0
c000ca24:	31 ff                	xor    edi,edi
c000ca26:	6a 00                	push   0x0
c000ca28:	31 db                	xor    ebx,ebx
c000ca2a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca2d:	e8 b6 b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000ca38:	76 3b                	jbe    c000ca75 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	83 ec 0c             	sub    esp,0xc
c000ca40:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca44:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca46:	51                   	push   ecx
c000ca47:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000ca4b:	51                   	push   ecx
c000ca4c:	6a 00                	push   0x0
c000ca4e:	6a 01                	push   0x1
c000ca50:	50                   	push   eax
c000ca51:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca54:	83 c4 20             	add    esp,0x20
c000ca57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ca5c:	74 26                	je     c000ca84 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca5e:	52                   	push   edx
c000ca5f:	43                   	inc    ebx
c000ca60:	57                   	push   edi
c000ca61:	56                   	push   esi
c000ca62:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca65:	e8 7e b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca6a:	83 c6 2b             	add    esi,0x2b
c000ca6d:	83 d7 00             	adc    edi,0x0
c000ca70:	83 c4 10             	add    esp,0x10
c000ca73:	eb c0                	jmp    c000ca35 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000ca75:	50                   	push   eax
c000ca76:	50                   	push   eax
c000ca77:	6a 40                	push   0x40
c000ca79:	55                   	push   ebp
c000ca7a:	e8 0e ff ff ff       	call   c000c98d <CmExpand(Reghive_Tag*, int)>
c000ca7f:	83 c4 10             	add    esp,0x10
c000ca82:	89 c3                	mov    ebx,eax
c000ca84:	83 c4 1c             	add    esp,0x1c
c000ca87:	89 d8                	mov    eax,ebx
c000ca89:	5b                   	pop    ebx
c000ca8a:	5e                   	pop    esi
c000ca8b:	5f                   	pop    edi
c000ca8c:	5d                   	pop    ebp
c000ca8d:	c3                   	ret    

c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000ca8e:	55                   	push   ebp
c000ca8f:	57                   	push   edi
c000ca90:	56                   	push   esi
c000ca91:	53                   	push   ebx
c000ca92:	81 ec 88 00 00 00    	sub    esp,0x88
c000ca98:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000ca9f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000caa6:	e8 5d ff ff ff       	call   c000ca08 <CmFindUnusedExtent(Reghive_Tag*)>
c000caab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000caaf:	83 c4 0c             	add    esp,0xc
c000cab2:	6a 2b                	push   0x2b
c000cab4:	6a 00                	push   0x0
c000cab6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000caba:	55                   	push   ebp
c000cabb:	e8 30 3a ff ff       	call   c00004f0 <memset>
c000cac0:	83 c4 10             	add    esp,0x10
c000cac3:	85 db                	test   ebx,ebx
c000cac5:	74 12                	je     c000cad9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cac7:	51                   	push   ecx
c000cac8:	55                   	push   ebp
c000cac9:	53                   	push   ebx
c000caca:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cad1:	e8 0e fd ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cad6:	83 c4 10             	add    esp,0x10
c000cad9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cadd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cae4:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cae9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000caeb:	85 db                	test   ebx,ebx
c000caed:	74 49                	je     c000cb38 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000caef:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000caf4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000caf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cafd:	c1 e0 08             	shl    eax,0x8
c000cb00:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cb06:	09 c8                	or     eax,ecx
c000cb08:	74 11                	je     c000cb1b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cb0a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cb0e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cb12:	c1 e8 10             	shr    eax,0x10
c000cb15:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cb19:	eb 0f                	jmp    c000cb2a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cb1b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb20:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb25:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb2a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cb2e:	c1 ea 08             	shr    edx,0x8
c000cb31:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cb36:	eb 0f                	jmp    c000cb47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cb38:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb3d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb42:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb47:	52                   	push   edx
c000cb48:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cb4c:	50                   	push   eax
c000cb4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb51:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb58:	e8 ab fd ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb5d:	83 c4 10             	add    esp,0x10
c000cb60:	85 db                	test   ebx,ebx
c000cb62:	74 12                	je     c000cb76 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cb64:	50                   	push   eax
c000cb65:	55                   	push   ebp
c000cb66:	53                   	push   ebx
c000cb67:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb6e:	e8 95 fd ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb7a:	83 c4 7c             	add    esp,0x7c
c000cb7d:	5b                   	pop    ebx
c000cb7e:	5e                   	pop    esi
c000cb7f:	5f                   	pop    edi
c000cb80:	5d                   	pop    ebp
c000cb81:	c3                   	ret    

c000cb82 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cb82:	55                   	push   ebp
c000cb83:	57                   	push   edi
c000cb84:	56                   	push   esi
c000cb85:	53                   	push   ebx
c000cb86:	bb 27 00 00 00       	mov    ebx,0x27
c000cb8b:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb91:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000cb98:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cb9f:	e8 dc 39 ff ff       	call   c0000580 <strlen>
c000cba4:	8d 48 26             	lea    ecx,[eax+0x26]
c000cba7:	89 c8                	mov    eax,ecx
c000cba9:	99                   	cdq    
c000cbaa:	f7 fb                	idiv   ebx
c000cbac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cbb0:	83 c4 10             	add    esp,0x10
c000cbb3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cbb9:	7e 10                	jle    c000cbcb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cbbb:	83 ec 0c             	sub    esp,0xc
c000cbbe:	68 12 1d 02 c0       	push   0xc0021d12
c000cbc3:	e8 4e 20 00 00       	call   c000ec16 <KePanic(char const*)>
c000cbc8:	83 c4 10             	add    esp,0x10
c000cbcb:	53                   	push   ebx
c000cbcc:	31 ed                	xor    ebp,ebp
c000cbce:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cbd2:	53                   	push   ebx
c000cbd3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbda:	57                   	push   edi
c000cbdb:	e8 04 fc ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cbe0:	83 c4 10             	add    esp,0x10
c000cbe3:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000cbe7:	89 f0                	mov    eax,esi
c000cbe9:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000cbed:	c1 e0 08             	shl    eax,0x8
c000cbf0:	09 c6                	or     esi,eax
c000cbf2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cbf6:	c1 e6 08             	shl    esi,0x8
c000cbf9:	09 c6                	or     esi,eax
c000cbfb:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000cbff:	7e 72                	jle    c000cc73 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000cc01:	85 f6                	test   esi,esi
c000cc03:	75 25                	jne    c000cc2a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cc05:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cc0a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cc0e:	50                   	push   eax
c000cc0f:	6a 00                	push   0x0
c000cc11:	6a 00                	push   0x0
c000cc13:	57                   	push   edi
c000cc14:	e8 75 fe ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cc19:	83 c4 10             	add    esp,0x10
c000cc1c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cc1f:	89 c6                	mov    esi,eax
c000cc21:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cc24:	c1 f8 10             	sar    eax,0x10
c000cc27:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cc2a:	51                   	push   ecx
c000cc2b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc2f:	52                   	push   edx
c000cc30:	56                   	push   esi
c000cc31:	57                   	push   edi
c000cc32:	e8 ad fb ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc37:	83 c4 0c             	add    esp,0xc
c000cc3a:	6a 27                	push   0x27
c000cc3c:	6a 00                	push   0x0
c000cc3e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc42:	51                   	push   ecx
c000cc43:	e8 a8 38 ff ff       	call   c00004f0 <memset>
c000cc48:	6b c5 27             	imul   eax,ebp,0x27
c000cc4b:	83 c4 0c             	add    esp,0xc
c000cc4e:	6a 27                	push   0x27
c000cc50:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cc57:	50                   	push   eax
c000cc58:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc5c:	51                   	push   ecx
c000cc5d:	e8 2e 3a ff ff       	call   c0000690 <strncpy>
c000cc62:	83 c4 0c             	add    esp,0xc
c000cc65:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc69:	52                   	push   edx
c000cc6a:	56                   	push   esi
c000cc6b:	57                   	push   edi
c000cc6c:	e8 97 fc ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc71:	eb 19                	jmp    c000cc8c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000cc73:	85 f6                	test   esi,esi
c000cc75:	74 18                	je     c000cc8f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000cc77:	52                   	push   edx
c000cc78:	52                   	push   edx
c000cc79:	56                   	push   esi
c000cc7a:	57                   	push   edi
c000cc7b:	e8 c4 fc ff ff       	call   c000c944 <CmFreeExtent(Reghive_Tag*, int)>
c000cc80:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cc84:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cc88:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	45                   	inc    ebp
c000cc90:	83 c3 03             	add    ebx,0x3
c000cc93:	83 fd 07             	cmp    ebp,0x7
c000cc96:	0f 85 47 ff ff ff    	jne    c000cbe3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cc9c:	50                   	push   eax
c000cc9d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cca1:	50                   	push   eax
c000cca2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cca9:	57                   	push   edi
c000ccaa:	e8 59 fc ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccaf:	81 c4 8c 00 00 00    	add    esp,0x8c
c000ccb5:	5b                   	pop    ebx
c000ccb6:	5e                   	pop    esi
c000ccb7:	5f                   	pop    edi
c000ccb8:	5d                   	pop    ebp
c000ccb9:	c3                   	ret    

c000ccba <CmGetMatch(char*, char*, bool, bool*)>:
c000ccba:	56                   	push   esi
c000ccbb:	53                   	push   ebx
c000ccbc:	50                   	push   eax
c000ccbd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccc2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ccc6:	74 25                	je     c000cced <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000ccc8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cccb:	31 db                	xor    ebx,ebx
c000cccd:	50                   	push   eax
c000ccce:	50                   	push   eax
c000cccf:	8d 04 9d e0 3a 02 c0 	lea    eax,[ebx*4-0x3ffdc520]
c000ccd6:	50                   	push   eax
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	e8 a0 3a ff ff       	call   c0000780 <strcmp>
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	85 c0                	test   eax,eax
c000cce5:	74 2e                	je     c000cd15 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cce7:	43                   	inc    ebx
c000cce8:	83 fb 3f             	cmp    ebx,0x3f
c000cceb:	75 e0                	jne    c000cccd <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cced:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ccf0:	31 db                	xor    ebx,ebx
c000ccf2:	51                   	push   ecx
c000ccf3:	51                   	push   ecx
c000ccf4:	8d 04 9d e0 3a 02 c0 	lea    eax,[ebx*4-0x3ffdc520]
c000ccfb:	50                   	push   eax
c000ccfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cd00:	e8 7b 3a ff ff       	call   c0000780 <strcmp>
c000cd05:	83 c4 10             	add    esp,0x10
c000cd08:	85 c0                	test   eax,eax
c000cd0a:	74 09                	je     c000cd15 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd0c:	43                   	inc    ebx
c000cd0d:	83 fb 3f             	cmp    ebx,0x3f
c000cd10:	75 e0                	jne    c000ccf2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cd12:	83 cb ff             	or     ebx,0xffffffff
c000cd15:	5a                   	pop    edx
c000cd16:	89 d8                	mov    eax,ebx
c000cd18:	5b                   	pop    ebx
c000cd19:	5e                   	pop    esi
c000cd1a:	c3                   	ret    

c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cd1b:	55                   	push   ebp
c000cd1c:	31 c0                	xor    eax,eax
c000cd1e:	57                   	push   edi
c000cd1f:	56                   	push   esi
c000cd20:	53                   	push   ebx
c000cd21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cd2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd31:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cd33:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cd36:	83 fd 1f             	cmp    ebp,0x1f
c000cd39:	7f 0b                	jg     c000cd46 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cd3b:	0f b6 c2             	movzx  eax,dl
c000cd3e:	d3 e0                	shl    eax,cl
c000cd40:	09 07                	or     DWORD PTR [edi],eax
c000cd42:	b0 01                	mov    al,0x1
c000cd44:	01 33                	add    DWORD PTR [ebx],esi
c000cd46:	5b                   	pop    ebx
c000cd47:	5e                   	pop    esi
c000cd48:	5f                   	pop    edi
c000cd49:	5d                   	pop    ebp
c000cd4a:	c3                   	ret    

c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cd4b:	57                   	push   edi
c000cd4c:	56                   	push   esi
c000cd4d:	53                   	push   ebx
c000cd4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cd56:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cd5a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd5e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cd60:	7c 17                	jl     c000cd79 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cd62:	8b 17                	mov    edx,DWORD PTR [edi]
c000cd64:	b8 01 00 00 00       	mov    eax,0x1
c000cd69:	d3 e0                	shl    eax,cl
c000cd6b:	48                   	dec    eax
c000cd6c:	21 d0                	and    eax,edx
c000cd6e:	d3 ea                	shr    edx,cl
c000cd70:	89 17                	mov    DWORD PTR [edi],edx
c000cd72:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cd74:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd77:	eb 05                	jmp    c000cd7e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cd79:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd7c:	31 c0                	xor    eax,eax
c000cd7e:	5b                   	pop    ebx
c000cd7f:	5e                   	pop    esi
c000cd80:	5f                   	pop    edi
c000cd81:	c3                   	ret    

c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cd82:	83 ec 40             	sub    esp,0x40
c000cd85:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cd89:	50                   	push   eax
c000cd8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd92:	e8 4d fa ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd97:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cd9b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cd9f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cda3:	89 10                	mov    DWORD PTR [eax],edx
c000cda5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cda8:	83 c4 4c             	add    esp,0x4c
c000cdab:	c3                   	ret    

c000cdac <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cdac:	55                   	push   ebp
c000cdad:	57                   	push   edi
c000cdae:	56                   	push   esi
c000cdaf:	53                   	push   ebx
c000cdb0:	83 ec 40             	sub    esp,0x40
c000cdb3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000cdb7:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000cdbb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000cdbf:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cdc3:	53                   	push   ebx
c000cdc4:	56                   	push   esi
c000cdc5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cdc9:	e8 16 fa ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cdce:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000cdd2:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000cdd6:	83 c4 0c             	add    esp,0xc
c000cdd9:	53                   	push   ebx
c000cdda:	56                   	push   esi
c000cddb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cddf:	e8 24 fb ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cde4:	83 c4 4c             	add    esp,0x4c
c000cde7:	5b                   	pop    ebx
c000cde8:	5e                   	pop    esi
c000cde9:	5f                   	pop    edi
c000cdea:	5d                   	pop    ebp
c000cdeb:	c3                   	ret    

c000cdec <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cdec:	55                   	push   ebp
c000cded:	57                   	push   edi
c000cdee:	56                   	push   esi
c000cdef:	31 f6                	xor    esi,esi
c000cdf1:	53                   	push   ebx
c000cdf2:	31 db                	xor    ebx,ebx
c000cdf4:	83 ec 40             	sub    esp,0x40
c000cdf7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cdff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ce07:	6a 12                	push   0x12
c000ce09:	68 ee 00 00 00       	push   0xee
c000ce0e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce12:	e8 d9 36 ff ff       	call   c00004f0 <memset>
c000ce17:	83 c4 10             	add    esp,0x10
c000ce1a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ce1e:	6a 08                	push   0x8
c000ce20:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce24:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ce28:	50                   	push   eax
c000ce29:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce2d:	55                   	push   ebp
c000ce2e:	57                   	push   edi
c000ce2f:	e8 e7 fe ff ff       	call   c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ce34:	83 c4 10             	add    esp,0x10
c000ce37:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ce3b:	50                   	push   eax
c000ce3c:	6a 06                	push   0x6
c000ce3e:	55                   	push   ebp
c000ce3f:	57                   	push   edi
c000ce40:	e8 06 ff ff ff       	call   c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ce4d:	74 07                	je     c000ce56 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000ce4f:	46                   	inc    esi
c000ce50:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000ce54:	eb e1                	jmp    c000ce37 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000ce56:	43                   	inc    ebx
c000ce57:	83 fb 12             	cmp    ebx,0x12
c000ce5a:	75 c2                	jne    c000ce1e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000ce5c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce60:	31 f6                	xor    esi,esi
c000ce62:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ce65:	50                   	push   eax
c000ce66:	50                   	push   eax
c000ce67:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000ce6c:	46                   	inc    esi
c000ce6d:	8d 04 85 e0 3a 02 c0 	lea    eax,[eax*4-0x3ffdc520]
c000ce74:	50                   	push   eax
c000ce75:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce79:	e8 f2 39 ff ff       	call   c0000870 <strcat>
c000ce7e:	83 c4 10             	add    esp,0x10
c000ce81:	83 fe 18             	cmp    esi,0x18
c000ce84:	75 df                	jne    c000ce65 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000ce86:	83 c4 3c             	add    esp,0x3c
c000ce89:	31 c0                	xor    eax,eax
c000ce8b:	5b                   	pop    ebx
c000ce8c:	5e                   	pop    esi
c000ce8d:	5f                   	pop    edi
c000ce8e:	5d                   	pop    ebp
c000ce8f:	c3                   	ret    

c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000ce90:	83 ec 40             	sub    esp,0x40
c000ce93:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce97:	50                   	push   eax
c000ce98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cea0:	e8 3f f9 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cea5:	58                   	pop    eax
c000cea6:	5a                   	pop    edx
c000cea7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000ceab:	8d 44 24 15          	lea    eax,[esp+0x15]
c000ceaf:	50                   	push   eax
c000ceb0:	e8 37 ff ff ff       	call   c000cdec <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000ceb5:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000ceba:	83 c4 4c             	add    esp,0x4c
c000cebd:	c3                   	ret    

c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cebe:	55                   	push   ebp
c000cebf:	57                   	push   edi
c000cec0:	56                   	push   esi
c000cec1:	53                   	push   ebx
c000cec2:	31 db                	xor    ebx,ebx
c000cec4:	83 ec 70             	sub    esp,0x70
c000cec7:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cece:	6a 30                	push   0x30
c000ced0:	6a 00                	push   0x0
c000ced2:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000ced6:	56                   	push   esi
c000ced7:	e8 14 36 ff ff       	call   c00004f0 <memset>
c000cedc:	83 c4 10             	add    esp,0x10
c000cedf:	83 ec 0c             	sub    esp,0xc
c000cee2:	57                   	push   edi
c000cee3:	e8 98 36 ff ff       	call   c0000580 <strlen>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	39 d8                	cmp    eax,ebx
c000ceed:	76 16                	jbe    c000cf05 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000ceef:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cef3:	83 ec 0c             	sub    esp,0xc
c000cef6:	50                   	push   eax
c000cef7:	e8 64 3a ff ff       	call   c0000960 <toupper>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cf02:	43                   	inc    ebx
c000cf03:	eb da                	jmp    c000cedf <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cf05:	52                   	push   edx
c000cf06:	31 db                	xor    ebx,ebx
c000cf08:	6a 18                	push   0x18
c000cf0a:	31 ff                	xor    edi,edi
c000cf0c:	6a 3f                	push   0x3f
c000cf0e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cf12:	50                   	push   eax
c000cf13:	e8 d8 35 ff ff       	call   c00004f0 <memset>
c000cf18:	83 c4 10             	add    esp,0x10
c000cf1b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000cf1f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cf23:	84 c0                	test   al,al
c000cf25:	0f 84 af 00 00 00    	je     c000cfda <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cf2b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cf2f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cf32:	83 ec 0c             	sub    esp,0xc
c000cf35:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000cf3a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cf3e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000cf42:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000cf47:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cf4b:	56                   	push   esi
c000cf4c:	e8 2f 36 ff ff       	call   c0000580 <strlen>
c000cf51:	83 c4 10             	add    esp,0x10
c000cf54:	85 c0                	test   eax,eax
c000cf56:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cf5a:	74 0b                	je     c000cf67 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000cf5c:	50                   	push   eax
c000cf5d:	6a 01                	push   0x1
c000cf5f:	56                   	push   esi
c000cf60:	8d 44 24 20          	lea    eax,[esp+0x20]
c000cf64:	50                   	push   eax
c000cf65:	eb 0a                	jmp    c000cf71 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000cf67:	50                   	push   eax
c000cf68:	6a 00                	push   0x0
c000cf6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000cf6e:	50                   	push   eax
c000cf6f:	6a 00                	push   0x0
c000cf71:	e8 44 fd ff ff       	call   c000ccba <CmGetMatch(char*, char*, bool, bool*)>
c000cf76:	83 c4 10             	add    esp,0x10
c000cf79:	83 f8 ff             	cmp    eax,0xffffffff
c000cf7c:	75 1a                	jne    c000cf98 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000cf7e:	83 ec 0c             	sub    esp,0xc
c000cf81:	68 27 1d 02 c0       	push   0xc0021d27
c000cf86:	e8 8b 1c 00 00       	call   c000ec16 <KePanic(char const*)>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	b8 02 00 00 00       	mov    eax,0x2
c000cf93:	e9 bb 00 00 00       	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cf98:	83 ff 18             	cmp    edi,0x18
c000cf9b:	75 1a                	jne    c000cfb7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000cf9d:	83 ec 0c             	sub    esp,0xc
c000cfa0:	68 3c 1d 02 c0       	push   0xc0021d3c
c000cfa5:	e8 6c 1c 00 00       	call   c000ec16 <KePanic(char const*)>
c000cfaa:	83 c4 10             	add    esp,0x10
c000cfad:	b8 01 00 00 00       	mov    eax,0x1
c000cfb2:	e9 9c 00 00 00       	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cfb7:	47                   	inc    edi
c000cfb8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cfbd:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000cfc1:	0f 45 dd             	cmovne ebx,ebp
c000cfc4:	83 ec 0c             	sub    esp,0xc
c000cfc7:	56                   	push   esi
c000cfc8:	e8 b3 35 ff ff       	call   c0000580 <strlen>
c000cfcd:	83 c4 10             	add    esp,0x10
c000cfd0:	85 c0                	test   eax,eax
c000cfd2:	74 06                	je     c000cfda <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cfd4:	43                   	inc    ebx
c000cfd5:	e9 41 ff ff ff       	jmp    c000cf1b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000cfda:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfe2:	31 db                	xor    ebx,ebx
c000cfe4:	31 ff                	xor    edi,edi
c000cfe6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfee:	50                   	push   eax
c000cfef:	6a 12                	push   0x12
c000cff1:	68 ee 00 00 00       	push   0xee
c000cff6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000cffd:	e8 ee 34 ff ff       	call   c00004f0 <memset>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d009:	83 fb 17             	cmp    ebx,0x17
c000d00c:	7e 26                	jle    c000d034 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d00e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d012:	50                   	push   eax
c000d013:	6a 08                	push   0x8
c000d015:	55                   	push   ebp
c000d016:	56                   	push   esi
c000d017:	e8 2f fd ff ff       	call   c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>
c000d01c:	83 c4 10             	add    esp,0x10
c000d01f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d024:	74 26                	je     c000d04c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d026:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d02d:	4b                   	dec    ebx
c000d02e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d031:	47                   	inc    edi
c000d032:	eb 1c                	jmp    c000d050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d034:	6a 06                	push   0x6
c000d036:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d03b:	50                   	push   eax
c000d03c:	55                   	push   ebp
c000d03d:	56                   	push   esi
c000d03e:	e8 d8 fc ff ff       	call   c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d043:	83 c4 10             	add    esp,0x10
c000d046:	84 c0                	test   al,al
c000d048:	75 06                	jne    c000d050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d04a:	eb c2                	jmp    c000d00e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d04c:	31 c0                	xor    eax,eax
c000d04e:	eb 03                	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d050:	43                   	inc    ebx
c000d051:	eb b2                	jmp    c000d005 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d053:	83 c4 6c             	add    esp,0x6c
c000d056:	5b                   	pop    ebx
c000d057:	5e                   	pop    esi
c000d058:	5f                   	pop    edi
c000d059:	5d                   	pop    ebp
c000d05a:	c3                   	ret    

c000d05b <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d05b:	53                   	push   ebx
c000d05c:	83 ec 3c             	sub    esp,0x3c
c000d05f:	6a 2b                	push   0x2b
c000d061:	6a 00                	push   0x0
c000d063:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d067:	53                   	push   ebx
c000d068:	e8 83 34 ff ff       	call   c00004f0 <memset>
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d073:	50                   	push   eax
c000d074:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d078:	e8 41 fe ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d07d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d082:	83 c4 0c             	add    esp,0xc
c000d085:	6a 15                	push   0x15
c000d087:	6a 00                	push   0x0
c000d089:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d08d:	50                   	push   eax
c000d08e:	e8 5d 34 ff ff       	call   c00004f0 <memset>
c000d093:	53                   	push   ebx
c000d094:	6a 00                	push   0x0
c000d096:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d09a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d09e:	e8 eb f9 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d0a3:	83 c4 58             	add    esp,0x58
c000d0a6:	5b                   	pop    ebx
c000d0a7:	c3                   	ret    

c000d0a8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d0a8:	56                   	push   esi
c000d0a9:	53                   	push   ebx
c000d0aa:	83 ec 48             	sub    esp,0x48
c000d0ad:	6a 12                	push   0x12
c000d0af:	68 ff 00 00 00       	push   0xff
c000d0b4:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d0b8:	56                   	push   esi
c000d0b9:	e8 32 34 ff ff       	call   c00004f0 <memset>
c000d0be:	5a                   	pop    edx
c000d0bf:	59                   	pop    ecx
c000d0c0:	56                   	push   esi
c000d0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d0c5:	e8 f4 fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d0ca:	83 c4 10             	add    esp,0x10
c000d0cd:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	74 42                	je     c000d117 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d0d5:	50                   	push   eax
c000d0d6:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d0da:	50                   	push   eax
c000d0db:	53                   	push   ebx
c000d0dc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0e0:	e8 ff f6 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0e5:	83 c4 0c             	add    esp,0xc
c000d0e8:	6a 12                	push   0x12
c000d0ea:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d0ee:	50                   	push   eax
c000d0ef:	56                   	push   esi
c000d0f0:	e8 8b 32 ff ff       	call   c0000380 <memcmp>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	85 c0                	test   eax,eax
c000d0fa:	74 1e                	je     c000d11a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d0fc:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d101:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d106:	c1 e3 08             	shl    ebx,0x8
c000d109:	09 d8                	or     eax,ebx
c000d10b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d110:	c1 e3 10             	shl    ebx,0x10
c000d113:	09 c3                	or     ebx,eax
c000d115:	eb ba                	jmp    c000d0d1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d117:	83 cb ff             	or     ebx,0xffffffff
c000d11a:	83 c4 44             	add    esp,0x44
c000d11d:	89 d8                	mov    eax,ebx
c000d11f:	5b                   	pop    ebx
c000d120:	5e                   	pop    esi
c000d121:	c3                   	ret    

c000d122 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d122:	57                   	push   edi
c000d123:	56                   	push   esi
c000d124:	53                   	push   ebx
c000d125:	83 ec 34             	sub    esp,0x34
c000d128:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d12c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d130:	6a 2b                	push   0x2b
c000d132:	6a 00                	push   0x0
c000d134:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d138:	53                   	push   ebx
c000d139:	e8 b2 33 ff ff       	call   c00004f0 <memset>
c000d13e:	58                   	pop    eax
c000d13f:	5a                   	pop    edx
c000d140:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d144:	50                   	push   eax
c000d145:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d149:	e8 70 fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d14e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d152:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d156:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d15a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d15e:	53                   	push   ebx
c000d15f:	6a 00                	push   0x0
c000d161:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d165:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d169:	e8 20 f9 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d16e:	83 c4 50             	add    esp,0x50
c000d171:	5b                   	pop    ebx
c000d172:	5e                   	pop    esi
c000d173:	5f                   	pop    edi
c000d174:	c3                   	ret    

c000d175 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d175:	55                   	push   ebp
c000d176:	57                   	push   edi
c000d177:	56                   	push   esi
c000d178:	53                   	push   ebx
c000d179:	83 ec 40             	sub    esp,0x40
c000d17c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d180:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d184:	6a 2b                	push   0x2b
c000d186:	6a 00                	push   0x0
c000d188:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d18c:	56                   	push   esi
c000d18d:	e8 5e 33 ff ff       	call   c00004f0 <memset>
c000d192:	5f                   	pop    edi
c000d193:	89 ef                	mov    edi,ebp
c000d195:	58                   	pop    eax
c000d196:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d19a:	50                   	push   eax
c000d19b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d19f:	e8 1a fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1a4:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d1a9:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d1ae:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d1b3:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d1b8:	83 c4 10             	add    esp,0x10
c000d1bb:	85 ed                	test   ebp,ebp
c000d1bd:	74 14                	je     c000d1d3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1bf:	51                   	push   ecx
c000d1c0:	51                   	push   ecx
c000d1c1:	57                   	push   edi
c000d1c2:	53                   	push   ebx
c000d1c3:	e8 0e f7 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c000d1c8:	83 c4 10             	add    esp,0x10
c000d1cb:	85 c0                	test   eax,eax
c000d1cd:	74 04                	je     c000d1d3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1cf:	89 c7                	mov    edi,eax
c000d1d1:	eb e8                	jmp    c000d1bb <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d1d3:	56                   	push   esi
c000d1d4:	6a 00                	push   0x0
c000d1d6:	57                   	push   edi
c000d1d7:	53                   	push   ebx
c000d1d8:	e8 b1 f8 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d1dd:	83 c4 0c             	add    esp,0xc
c000d1e0:	56                   	push   esi
c000d1e1:	50                   	push   eax
c000d1e2:	89 c7                	mov    edi,eax
c000d1e4:	53                   	push   ebx
c000d1e5:	e8 fa f5 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d1ea:	58                   	pop    eax
c000d1eb:	5a                   	pop    edx
c000d1ec:	6a 6c                	push   0x6c
c000d1ee:	6a 00                	push   0x0
c000d1f0:	6a 00                	push   0x0
c000d1f2:	68 4d 1d 02 c0       	push   0xc0021d4d
c000d1f7:	57                   	push   edi
c000d1f8:	53                   	push   ebx
c000d1f9:	e8 24 ff ff ff       	call   c000d122 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d1fe:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d202:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d206:	c1 e8 10             	shr    eax,0x10
c000d209:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d20d:	83 c4 1c             	add    esp,0x1c
c000d210:	56                   	push   esi
c000d211:	57                   	push   edi
c000d212:	53                   	push   ebx
c000d213:	e8 f0 f6 ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d218:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d21d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d222:	c1 e0 08             	shl    eax,0x8
c000d225:	09 c2                	or     edx,eax
c000d227:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d22c:	83 c4 4c             	add    esp,0x4c
c000d22f:	5b                   	pop    ebx
c000d230:	5e                   	pop    esi
c000d231:	c1 e0 10             	shl    eax,0x10
c000d234:	09 d0                	or     eax,edx
c000d236:	5f                   	pop    edi
c000d237:	5d                   	pop    ebp
c000d238:	c3                   	ret    

c000d239 <zStrtok(char*, char const*)>:
c000d239:	55                   	push   ebp
c000d23a:	57                   	push   edi
c000d23b:	56                   	push   esi
c000d23c:	53                   	push   ebx
c000d23d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d241:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d245:	85 db                	test   ebx,ebx
c000d247:	74 2f                	je     c000d278 <zStrtok(char*, char const*)+0x3f>
c000d249:	85 c0                	test   eax,eax
c000d24b:	75 09                	jne    c000d256 <zStrtok(char*, char const*)+0x1d>
c000d24d:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d252:	85 c0                	test   eax,eax
c000d254:	74 50                	je     c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d256:	31 c9                	xor    ecx,ecx
c000d258:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d25c:	74 03                	je     c000d261 <zStrtok(char*, char const*)+0x28>
c000d25e:	41                   	inc    ecx
c000d25f:	eb f7                	jmp    c000d258 <zStrtok(char*, char const*)+0x1f>
c000d261:	31 d2                	xor    edx,edx
c000d263:	39 ca                	cmp    edx,ecx
c000d265:	74 15                	je     c000d27c <zStrtok(char*, char const*)+0x43>
c000d267:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d26b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d26e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d271:	39 ee                	cmp    esi,ebp
c000d273:	74 13                	je     c000d288 <zStrtok(char*, char const*)+0x4f>
c000d275:	42                   	inc    edx
c000d276:	eb eb                	jmp    c000d263 <zStrtok(char*, char const*)+0x2a>
c000d278:	31 c0                	xor    eax,eax
c000d27a:	eb 2a                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d27c:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d286:	eb 1e                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d288:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d28b:	39 ce                	cmp    esi,ecx
c000d28d:	75 0a                	jne    c000d299 <zStrtok(char*, char const*)+0x60>
c000d28f:	40                   	inc    eax
c000d290:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d295:	89 d8                	mov    eax,ebx
c000d297:	eb 0d                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d299:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d29c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d2a0:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d2a6:	5b                   	pop    ebx
c000d2a7:	5e                   	pop    esi
c000d2a8:	5f                   	pop    edi
c000d2a9:	5d                   	pop    ebp
c000d2aa:	c3                   	ret    

c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d2ab:	57                   	push   edi
c000d2ac:	56                   	push   esi
c000d2ad:	53                   	push   ebx
c000d2ae:	81 ec 08 01 00 00    	sub    esp,0x108
c000d2b4:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d2bb:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d2c2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d2c6:	53                   	push   ebx
c000d2c7:	e8 84 33 ff ff       	call   c0000650 <strcpy>
c000d2cc:	59                   	pop    ecx
c000d2cd:	5e                   	pop    esi
c000d2ce:	68 84 2a 02 c0       	push   0xc0022a84
c000d2d3:	53                   	push   ebx
c000d2d4:	bb 01 00 00 00       	mov    ebx,0x1
c000d2d9:	e8 5b ff ff ff       	call   c000d239 <zStrtok(char*, char const*)>
c000d2de:	83 c4 10             	add    esp,0x10
c000d2e1:	85 c0                	test   eax,eax
c000d2e3:	74 3b                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d2e5:	52                   	push   edx
c000d2e6:	50                   	push   eax
c000d2e7:	6a 01                	push   0x1
c000d2e9:	57                   	push   edi
c000d2ea:	e8 b9 fd ff ff       	call   c000d0a8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d2ef:	59                   	pop    ecx
c000d2f0:	5e                   	pop    esi
c000d2f1:	89 c3                	mov    ebx,eax
c000d2f3:	68 84 2a 02 c0       	push   0xc0022a84
c000d2f8:	6a 00                	push   0x0
c000d2fa:	e8 3a ff ff ff       	call   c000d239 <zStrtok(char*, char const*)>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	85 c0                	test   eax,eax
c000d304:	89 c6                	mov    esi,eax
c000d306:	74 18                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d308:	52                   	push   edx
c000d309:	52                   	push   edx
c000d30a:	53                   	push   ebx
c000d30b:	57                   	push   edi
c000d30c:	e8 86 f5 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c000d311:	83 c4 10             	add    esp,0x10
c000d314:	83 f8 ff             	cmp    eax,0xffffffff
c000d317:	89 c3                	mov    ebx,eax
c000d319:	74 05                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d31b:	50                   	push   eax
c000d31c:	56                   	push   esi
c000d31d:	53                   	push   ebx
c000d31e:	eb c9                	jmp    c000d2e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d320:	81 c4 00 01 00 00    	add    esp,0x100
c000d326:	89 d8                	mov    eax,ebx
c000d328:	5b                   	pop    ebx
c000d329:	5e                   	pop    esi
c000d32a:	5f                   	pop    edi
c000d32b:	c3                   	ret    

c000d32c <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d32c:	55                   	push   ebp
c000d32d:	57                   	push   edi
c000d32e:	56                   	push   esi
c000d32f:	53                   	push   ebx
c000d330:	83 ec 5c             	sub    esp,0x5c
c000d333:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d337:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d33b:	85 db                	test   ebx,ebx
c000d33d:	0f 8e 84 00 00 00    	jle    c000d3c7 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d343:	57                   	push   edi
c000d344:	31 ed                	xor    ebp,ebp
c000d346:	6a 32                	push   0x32
c000d348:	6a 00                	push   0x0
c000d34a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d34e:	57                   	push   edi
c000d34f:	e8 9c 31 ff ff       	call   c00004f0 <memset>
c000d354:	83 c4 0c             	add    esp,0xc
c000d357:	57                   	push   edi
c000d358:	53                   	push   ebx
c000d359:	56                   	push   esi
c000d35a:	e8 31 fb ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d35f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d363:	83 c4 10             	add    esp,0x10
c000d366:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d36a:	7d 13                	jge    c000d37f <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d36c:	83 ec 0c             	sub    esp,0xc
c000d36f:	45                   	inc    ebp
c000d370:	68 32 2f 02 c0       	push   0xc0022f32
c000d375:	e8 d4 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	eb e7                	jmp    c000d366 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d37f:	51                   	push   ecx
c000d380:	57                   	push   edi
c000d381:	53                   	push   ebx
c000d382:	68 53 1d 02 c0       	push   0xc0021d53
c000d387:	e8 c2 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d394:	75 1e                	jne    c000d3b4 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d396:	52                   	push   edx
c000d397:	52                   	push   edx
c000d398:	53                   	push   ebx
c000d399:	56                   	push   esi
c000d39a:	e8 f8 f4 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c000d39f:	83 c4 0c             	add    esp,0xc
c000d3a2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d3a6:	8d 51 04             	lea    edx,[ecx+0x4]
c000d3a9:	52                   	push   edx
c000d3aa:	50                   	push   eax
c000d3ab:	56                   	push   esi
c000d3ac:	e8 7b ff ff ff       	call   c000d32c <CmDisplayTree(Reghive_Tag*, int, int)>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	50                   	push   eax
c000d3b5:	50                   	push   eax
c000d3b6:	53                   	push   ebx
c000d3b7:	56                   	push   esi
c000d3b8:	e8 19 f5 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c000d3bd:	83 c4 10             	add    esp,0x10
c000d3c0:	89 c3                	mov    ebx,eax
c000d3c2:	e9 74 ff ff ff       	jmp    c000d33b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d3c7:	83 c4 5c             	add    esp,0x5c
c000d3ca:	5b                   	pop    ebx
c000d3cb:	5e                   	pop    esi
c000d3cc:	5f                   	pop    edi
c000d3cd:	5d                   	pop    ebp
c000d3ce:	c3                   	ret    

c000d3cf <CmSplitFinalSlashInPlace(char*)>:
c000d3cf:	53                   	push   ebx
c000d3d0:	83 ec 14             	sub    esp,0x14
c000d3d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d3d7:	53                   	push   ebx
c000d3d8:	e8 a3 31 ff ff       	call   c0000580 <strlen>
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	48                   	dec    eax
c000d3e1:	85 c0                	test   eax,eax
c000d3e3:	74 15                	je     c000d3fa <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d3e5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d3e9:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d3ec:	75 09                	jne    c000d3f7 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d3ee:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d3f1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d3f5:	eb 05                	jmp    c000d3fc <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d3f7:	48                   	dec    eax
c000d3f8:	eb e7                	jmp    c000d3e1 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d3fa:	31 c0                	xor    eax,eax
c000d3fc:	83 c4 08             	add    esp,0x8
c000d3ff:	5b                   	pop    ebx
c000d400:	c3                   	ret    
c000d401:	66 90                	xchg   ax,ax
c000d403:	90                   	nop

c000d404 <Krnl::handlePowerButton()>:
c000d404:	83 ec 0c             	sub    esp,0xc
c000d407:	e8 21 21 00 00       	call   c000f52d <KeHandlePowerButton()>
c000d40c:	90                   	nop
c000d40d:	83 c4 0c             	add    esp,0xc
c000d410:	c3                   	ret    
c000d411:	8d 76 00             	lea    esi,[esi+0x0]

c000d414 <Krnl::handleSleepButton()>:
c000d414:	83 ec 0c             	sub    esp,0xc
c000d417:	e8 29 21 00 00       	call   c000f545 <KeHandleSleepButton()>
c000d41c:	90                   	nop
c000d41d:	83 c4 0c             	add    esp,0xc
c000d420:	c3                   	ret    
c000d421:	90                   	nop

c000d422 <Computer::close(int, int, void*)>:
c000d422:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d427:	c3                   	ret    

c000d428 <Computer::open(int, int, void*)>:
c000d428:	56                   	push   esi
c000d429:	53                   	push   ebx
c000d42a:	83 ec 04             	sub    esp,0x4
c000d42d:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d434:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d438:	0f 94 05 c0 41 02 c0 	sete   BYTE PTR ds:0xc00241c0
c000d43f:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d445:	74 10                	je     c000d457 <Computer::open(int, int, void*)+0x2f>
c000d447:	83 ec 0c             	sub    esp,0xc
c000d44a:	68 60 1d 02 c0       	push   0xc0021d60
c000d44f:	e8 c2 17 00 00       	call   c000ec16 <KePanic(char const*)>
c000d454:	83 c4 10             	add    esp,0x10
c000d457:	83 ec 0c             	sub    esp,0xc
c000d45a:	68 18 1e 02 c0       	push   0xc0021e18
c000d45f:	e8 37 f1 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d464:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d46b:	e8 60 14 00 00       	call   c000e8d0 <malloc>
c000d470:	89 04 24             	mov    DWORD PTR [esp],eax
c000d473:	89 c6                	mov    esi,eax
c000d475:	e8 26 e8 ff ff       	call   c000bca0 <ACPI::ACPI()>
c000d47a:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d480:	58                   	pop    eax
c000d481:	5a                   	pop    edx
c000d482:	56                   	push   esi
c000d483:	53                   	push   ebx
c000d484:	e8 bd bb ff ff       	call   c0009046 <Device::addChild(Device*)>
c000d489:	c7 04 24 30 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e30
c000d490:	e8 06 f1 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d495:	e8 cc a6 00 00       	call   c0017b66 <HalEnableNMI()>
c000d49a:	e8 df 98 00 00       	call   c0016d7e <HalDetectFeatures()>
c000d49f:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d4a6:	e8 25 14 00 00       	call   c000e8d0 <malloc>
c000d4ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4ae:	89 c6                	mov    esi,eax
c000d4b0:	e8 6f b1 00 00       	call   c0018624 <CPU::CPU()>
c000d4b5:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d4bb:	59                   	pop    ecx
c000d4bc:	58                   	pop    eax
c000d4bd:	56                   	push   esi
c000d4be:	53                   	push   ebx
c000d4bf:	e8 82 bb ff ff       	call   c0009046 <Device::addChild(Device*)>
c000d4c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d4c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4d0:	51                   	push   ecx
c000d4d1:	6a 00                	push   0x0
c000d4d3:	6a 00                	push   0x0
c000d4d5:	50                   	push   eax
c000d4d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d4d9:	83 c4 14             	add    esp,0x14
c000d4dc:	68 8c 1d 02 c0       	push   0xc0021d8c
c000d4e1:	e8 b5 f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d4e6:	e8 93 ad 00 00       	call   c001827e <HalInitialiseCoprocessor()>
c000d4eb:	c7 04 24 4a 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e4a
c000d4f2:	e8 a4 f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d4f7:	c7 04 24 0e d5 00 c0 	mov    DWORD PTR [esp],0xc000d50e
c000d4fe:	e8 b5 7d 00 00       	call   c00152b8 <setupMultitasking(void (*)())>
c000d503:	83 c4 14             	add    esp,0x14
c000d506:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d50b:	5b                   	pop    ebx
c000d50c:	5e                   	pop    esi
c000d50d:	c3                   	ret    

c000d50e <KeFirstTask()>:
c000d50e:	53                   	push   ebx
c000d50f:	83 ec 14             	sub    esp,0x14
c000d512:	fb                   	sti    
c000d513:	68 65 1e 02 c0       	push   0xc0021e65
c000d518:	e8 7e f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d51d:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d524:	e8 a7 13 00 00       	call   c000e8d0 <malloc>
c000d529:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d530:	89 c3                	mov    ebx,eax
c000d532:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d537:	50                   	push   eax
c000d538:	68 7e 1e 02 c0       	push   0xc0021e7e
c000d53d:	6a 01                	push   0x1
c000d53f:	53                   	push   ebx
c000d540:	e8 23 7a 00 00       	call   c0014f68 <Process::Process(bool, char const*, Process*, char**)>
c000d545:	83 c4 20             	add    esp,0x20
c000d548:	68 ff 00 00 00       	push   0xff
c000d54d:	6a 00                	push   0x0
c000d54f:	68 fd e1 00 c0       	push   0xc000e1fd
c000d554:	53                   	push   ebx
c000d555:	e8 36 7c 00 00       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c000d55a:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d560:	6a 7a                	push   0x7a
c000d562:	6a 00                	push   0x0
c000d564:	68 64 5a 01 c0       	push   0xc0015a64
c000d569:	52                   	push   edx
c000d56a:	e8 21 7c 00 00       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c000d56f:	83 c4 14             	add    esp,0x14
c000d572:	68 b0 1d 02 c0       	push   0xc0021db0
c000d577:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d57c:	e8 1a f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d581:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d588:	e8 c2 20 00 00       	call   c000f64f <KeInitRand()>
c000d58d:	e8 a0 88 00 00       	call   c0015e32 <Vm::initialise8086()>
c000d592:	e8 3f a8 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d597:	c7 04 24 34 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b34
c000d59e:	e8 f8 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5a3:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5a8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d5ae:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5b0:	6a 00                	push   0x0
c000d5b2:	6a 00                	push   0x0
c000d5b4:	6a 00                	push   0x0
c000d5b6:	50                   	push   eax
c000d5b7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d5ba:	83 c4 14             	add    esp,0x14
c000d5bd:	68 b0 1d 02 c0       	push   0xc0021db0
c000d5c2:	e8 d4 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5c7:	e8 ef 9f ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d5cc:	e8 f5 05 00 00       	call   c000dbc6 <KeLoadSystemEnv()>
c000d5d1:	e8 87 1f 00 00       	call   c000f55d <KeSetupPowerManager()>
c000d5d6:	c7 04 24 d4 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dd4
c000d5dd:	e8 b9 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5e2:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5e7:	59                   	pop    ecx
c000d5e8:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d5ee:	53                   	push   ebx
c000d5ef:	e8 6e bb ff ff       	call   c0009162 <Device::loadDriversForAll()>
c000d5f4:	c7 04 24 8b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e8b
c000d5fb:	e8 9b ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d600:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d606:	58                   	pop    eax
c000d607:	5a                   	pop    edx
c000d608:	6a 01                	push   0x1
c000d60a:	68 9c 1e 02 c0       	push   0xc0021e9c
c000d60f:	e8 da 72 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c000d614:	59                   	pop    ecx
c000d615:	5a                   	pop    edx
c000d616:	53                   	push   ebx
c000d617:	50                   	push   eax
c000d618:	e8 32 75 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c000d61d:	83 c4 10             	add    esp,0x10
c000d620:	83 ec 0c             	sub    esp,0xc
c000d623:	6a 02                	push   0x2
c000d625:	e8 72 7e 00 00       	call   c001549c <blockTask(TaskState)>
c000d62a:	83 c4 10             	add    esp,0x10
c000d62d:	eb f1                	jmp    c000d620 <KeFirstTask()+0x112>
c000d62f:	90                   	nop

c000d630 <Computer::Computer()>:
c000d630:	83 ec 0c             	sub    esp,0xc
c000d633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d637:	83 ec 08             	sub    esp,0x8
c000d63a:	68 b8 1e 02 c0       	push   0xc0021eb8
c000d63f:	50                   	push   eax
c000d640:	e8 63 bb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c000d64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d651:	89 10                	mov    DWORD PTR [eax],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d665:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d66f:	90                   	nop
c000d670:	83 c4 0c             	add    esp,0xc
c000d673:	c3                   	ret    

c000d674 <KePrepareShutdown()>:
c000d674:	83 ec 0c             	sub    esp,0xc
c000d677:	e8 8d ee ff ff       	call   c000c509 <KeExecuteAtexit()>
c000d67c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d68a:	50                   	push   eax
c000d68b:	e8 1e bc ff ff       	call   c00092ae <Device::closeAll()>
c000d690:	83 c4 1c             	add    esp,0x1c
c000d693:	c3                   	ret    

c000d694 <KeShutdown()>:
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	e8 d8 ff ff ff       	call   c000d674 <KePrepareShutdown()>
c000d69c:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	74 02                	je     c000d6a7 <KeShutdown()+0x13>
c000d6a5:	ff d0                	call   eax
c000d6a7:	83 ec 0c             	sub    esp,0xc
c000d6aa:	68 f4 1d 02 c0       	push   0xc0021df4
c000d6af:	e8 62 15 00 00       	call   c000ec16 <KePanic(char const*)>
c000d6b4:	83 c4 1c             	add    esp,0x1c
c000d6b7:	c3                   	ret    

c000d6b8 <KeSleep()>:
c000d6b8:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d6bd:	85 c0                	test   eax,eax
c000d6bf:	74 02                	je     c000d6c3 <KeSleep()+0xb>
c000d6c1:	ff e0                	jmp    eax
c000d6c3:	c3                   	ret    

c000d6c4 <KeRestart()>:
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	e8 a8 ff ff ff       	call   c000d674 <KePrepareShutdown()>
c000d6cc:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d6d1:	85 c0                	test   eax,eax
c000d6d3:	74 02                	je     c000d6d7 <KeRestart()+0x13>
c000d6d5:	ff d0                	call   eax
c000d6d7:	e4 64                	in     al,0x64
c000d6d9:	a8 02                	test   al,0x2
c000d6db:	75 fa                	jne    c000d6d7 <KeRestart()+0x13>
c000d6dd:	b0 fe                	mov    al,0xfe
c000d6df:	e6 64                	out    0x64,al
c000d6e1:	83 c4 0c             	add    esp,0xc
c000d6e4:	c3                   	ret    

c000d6e5 <KeCalculateCRC32(unsigned char*, int)>:
c000d6e5:	53                   	push   ebx
c000d6e6:	83 c8 ff             	or     eax,0xffffffff
c000d6e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d6f1:	01 cb                	add    ebx,ecx
c000d6f3:	39 d9                	cmp    ecx,ebx
c000d6f5:	74 15                	je     c000d70c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d6f7:	41                   	inc    ecx
c000d6f8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d6fb:	31 c2                	xor    edx,eax
c000d6fd:	c1 e8 08             	shr    eax,0x8
c000d700:	0f b6 d2             	movzx  edx,dl
c000d703:	33 04 95 e0 3b 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc420]
c000d70a:	eb e7                	jmp    c000d6f3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d70c:	5b                   	pop    ebx
c000d70d:	f7 d0                	not    eax
c000d70f:	c3                   	ret    

c000d710 <EnvVarContainer::getEnv(char const*)>:
c000d710:	57                   	push   edi
c000d711:	56                   	push   esi
c000d712:	53                   	push   ebx
c000d713:	31 db                	xor    ebx,ebx
c000d715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d719:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d71b:	7e 2b                	jle    c000d748 <EnvVarContainer::getEnv(char const*)+0x38>
c000d71d:	50                   	push   eax
c000d71e:	50                   	push   eax
c000d71f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d722:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d729:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d72c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d730:	e8 4b 30 ff ff       	call   c0000780 <strcmp>
c000d735:	83 c4 10             	add    esp,0x10
c000d738:	85 c0                	test   eax,eax
c000d73a:	75 09                	jne    c000d745 <EnvVarContainer::getEnv(char const*)+0x35>
c000d73c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d73f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d743:	eb 05                	jmp    c000d74a <EnvVarContainer::getEnv(char const*)+0x3a>
c000d745:	43                   	inc    ebx
c000d746:	eb d1                	jmp    c000d719 <EnvVarContainer::getEnv(char const*)+0x9>
c000d748:	31 c0                	xor    eax,eax
c000d74a:	5b                   	pop    ebx
c000d74b:	5e                   	pop    esi
c000d74c:	5f                   	pop    edi
c000d74d:	c3                   	ret    

c000d74e <EnvVarContainer::setEnv(char const*, char const*)>:
c000d74e:	55                   	push   ebp
c000d74f:	57                   	push   edi
c000d750:	56                   	push   esi
c000d751:	53                   	push   ebx
c000d752:	83 ec 28             	sub    esp,0x28
c000d755:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d759:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d75d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d761:	56                   	push   esi
c000d762:	e8 19 2e ff ff       	call   c0000580 <strlen>
c000d767:	40                   	inc    eax
c000d768:	89 04 24             	mov    DWORD PTR [esp],eax
c000d76b:	e8 60 11 00 00       	call   c000e8d0 <malloc>
c000d770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d777:	e8 04 2e ff ff       	call   c0000580 <strlen>
c000d77c:	40                   	inc    eax
c000d77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000d780:	e8 4b 11 00 00       	call   c000e8d0 <malloc>
c000d785:	89 34 24             	mov    DWORD PTR [esp],esi
c000d788:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d78c:	e8 ef 2d ff ff       	call   c0000580 <strlen>
c000d791:	83 c4 0c             	add    esp,0xc
c000d794:	40                   	inc    eax
c000d795:	50                   	push   eax
c000d796:	6a 00                	push   0x0
c000d798:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79c:	e8 4f 2d ff ff       	call   c00004f0 <memset>
c000d7a1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d7a4:	e8 d7 2d ff ff       	call   c0000580 <strlen>
c000d7a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d7ad:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7b5:	89 de                	mov    esi,ebx
c000d7b7:	e8 c4 2d ff ff       	call   c0000580 <strlen>
c000d7bc:	83 c4 0c             	add    esp,0xc
c000d7bf:	40                   	inc    eax
c000d7c0:	50                   	push   eax
c000d7c1:	6a 00                	push   0x0
c000d7c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7c7:	e8 24 2d ff ff       	call   c00004f0 <memset>
c000d7cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7cf:	e8 ac 2d ff ff       	call   c0000580 <strlen>
c000d7d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d7d8:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7e0:	40                   	inc    eax
c000d7e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d7e4:	c1 e0 03             	shl    eax,0x3
c000d7e7:	5a                   	pop    edx
c000d7e8:	59                   	pop    ecx
c000d7e9:	50                   	push   eax
c000d7ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d7ed:	e8 ca 10 00 00       	call   c000e8bc <realloc>
c000d7f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d7f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d7f9:	b9 08 00 00 00       	mov    ecx,0x8
c000d7fe:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d801:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d805:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d807:	83 c4 2c             	add    esp,0x2c
c000d80a:	5b                   	pop    ebx
c000d80b:	5e                   	pop    esi
c000d80c:	5f                   	pop    edi
c000d80d:	5d                   	pop    ebp
c000d80e:	c3                   	ret    
c000d80f:	90                   	nop

c000d810 <EnvVarContainer::deleteEnv(char const*)>:
c000d810:	c3                   	ret    
c000d811:	90                   	nop

c000d812 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d812:	55                   	push   ebp
c000d813:	57                   	push   edi
c000d814:	56                   	push   esi
c000d815:	53                   	push   ebx
c000d816:	81 ec 38 01 00 00    	sub    esp,0x138
c000d81c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d823:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d82a:	68 14 01 00 00       	push   0x114
c000d82f:	e8 9c 10 00 00       	call   c000e8d0 <malloc>
c000d834:	83 c4 0c             	add    esp,0xc
c000d837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d83a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d841:	89 c3                	mov    ebx,eax
c000d843:	50                   	push   eax
c000d844:	e8 c3 a8 ff ff       	call   c000810c <File::File(char const*, Process*)>
c000d849:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d84c:	e8 9d ab ff ff       	call   c00083ee <File::exists()>
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	84 c0                	test   al,al
c000d856:	75 31                	jne    c000d889 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d858:	50                   	push   eax
c000d859:	50                   	push   eax
c000d85a:	6a 12                	push   0x12
c000d85c:	53                   	push   ebx
c000d85d:	e8 c8 a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d862:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d864:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d867:	89 34 24             	mov    DWORD PTR [esp],esi
c000d86a:	e8 11 2d ff ff       	call   c0000580 <strlen>
c000d86f:	5a                   	pop    edx
c000d870:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d874:	52                   	push   edx
c000d875:	31 d2                	xor    edx,edx
c000d877:	56                   	push   esi
c000d878:	52                   	push   edx
c000d879:	50                   	push   eax
c000d87a:	53                   	push   ebx
c000d87b:	ff d7                	call   edi
c000d87d:	83 c4 14             	add    esp,0x14
c000d880:	53                   	push   ebx
c000d881:	e8 02 a9 ff ff       	call   c0008188 <File::close()>
c000d886:	83 c4 10             	add    esp,0x10
c000d889:	56                   	push   esi
c000d88a:	31 f6                	xor    esi,esi
c000d88c:	68 00 01 00 00       	push   0x100
c000d891:	6a 00                	push   0x0
c000d893:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d897:	50                   	push   eax
c000d898:	e8 53 2c ff ff       	call   c00004f0 <memset>
c000d89d:	5f                   	pop    edi
c000d89e:	58                   	pop    eax
c000d89f:	6a 01                	push   0x1
c000d8a1:	53                   	push   ebx
c000d8a2:	e8 83 a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d8a7:	83 c4 10             	add    esp,0x10
c000d8aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d8b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8ba:	83 ec 0c             	sub    esp,0xc
c000d8bd:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d8c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8c3:	52                   	push   edx
c000d8c4:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000d8c8:	51                   	push   ecx
c000d8c9:	6a 00                	push   0x0
c000d8cb:	6a 01                	push   0x1
c000d8cd:	53                   	push   ebx
c000d8ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d8d1:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d8d6:	83 c4 20             	add    esp,0x20
c000d8d9:	85 c0                	test   eax,eax
c000d8db:	89 c1                	mov    ecx,eax
c000d8dd:	0f 84 36 01 00 00    	je     c000da19 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d8e3:	83 f8 0d             	cmp    eax,0xd
c000d8e6:	0f 84 22 01 00 00    	je     c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d8ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d8f1:	0f 84 f0 00 00 00    	je     c000d9e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d8f7:	83 f8 0a             	cmp    eax,0xa
c000d8fa:	74 13                	je     c000d90f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d8fc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d901:	74 0c                	je     c000d90f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d903:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d909:	0f 8e f6 00 00 00    	jle    c000da05 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d90f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d913:	83 ec 0c             	sub    esp,0xc
c000d916:	8d 78 01             	lea    edi,[eax+0x1]
c000d919:	57                   	push   edi
c000d91a:	e8 b1 0f 00 00       	call   c000e8d0 <malloc>
c000d91f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d923:	8d 56 04             	lea    edx,[esi+0x4]
c000d926:	89 14 24             	mov    DWORD PTR [esp],edx
c000d929:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d92d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d931:	e8 9a 0f 00 00       	call   c000e8d0 <malloc>
c000d936:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d93a:	83 c4 0c             	add    esp,0xc
c000d93d:	57                   	push   edi
c000d93e:	6a 00                	push   0x0
c000d940:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d944:	e8 a7 2b ff ff       	call   c00004f0 <memset>
c000d949:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d94d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d951:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d957:	83 c4 0c             	add    esp,0xc
c000d95a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d95e:	52                   	push   edx
c000d95f:	6a 00                	push   0x0
c000d961:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d965:	e8 86 2b ff ff       	call   c00004f0 <memset>
c000d96a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d96e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000d972:	89 34 24             	mov    DWORD PTR [esp],esi
c000d975:	e8 06 2c ff ff       	call   c0000580 <strlen>
c000d97a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000d97e:	89 c1                	mov    ecx,eax
c000d980:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d982:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d98b:	40                   	inc    eax
c000d98c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d98f:	85 d2                	test   edx,edx
c000d991:	75 0c                	jne    c000d99f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000d993:	83 ec 0c             	sub    esp,0xc
c000d996:	6a 08                	push   0x8
c000d998:	e8 33 0f 00 00       	call   c000e8d0 <malloc>
c000d99d:	eb 0c                	jmp    c000d9ab <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000d99f:	51                   	push   ecx
c000d9a0:	51                   	push   ecx
c000d9a1:	c1 e0 03             	shl    eax,0x3
c000d9a4:	50                   	push   eax
c000d9a5:	52                   	push   edx
c000d9a6:	e8 11 0f 00 00       	call   c000e8bc <realloc>
c000d9ab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d9ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d9b1:	83 c4 10             	add    esp,0x10
c000d9b4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000d9b7:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d9bb:	b9 08 00 00 00       	mov    ecx,0x8
c000d9c0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d9c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9c6:	50                   	push   eax
c000d9c7:	31 f6                	xor    esi,esi
c000d9c9:	68 00 01 00 00       	push   0x100
c000d9ce:	6a 00                	push   0x0
c000d9d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9d4:	50                   	push   eax
c000d9d5:	e8 16 2b ff ff       	call   c00004f0 <memset>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d9e5:	eb 27                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9e7:	83 f8 3d             	cmp    eax,0x3d
c000d9ea:	74 1e                	je     c000da0a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000d9ec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9f2:	7f 07                	jg     c000d9fb <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000d9f4:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000d9f8:	46                   	inc    esi
c000d9f9:	eb 13                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9fb:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000da03:	eb 09                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da05:	83 f8 3d             	cmp    eax,0x3d
c000da08:	75 ea                	jne    c000d9f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000da0a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000da0e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000da13:	0f 85 99 fe ff ff    	jne    c000d8b2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000da19:	83 ec 0c             	sub    esp,0xc
c000da1c:	53                   	push   ebx
c000da1d:	e8 66 a7 ff ff       	call   c0008188 <File::close()>
c000da22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da2a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000da30:	5b                   	pop    ebx
c000da31:	5e                   	pop    esi
c000da32:	5f                   	pop    edi
c000da33:	5d                   	pop    ebp
c000da34:	c3                   	ret    
c000da35:	90                   	nop

c000da36 <EnvVarContainer::__loadSystem()>:
c000da36:	83 ec 10             	sub    esp,0x10
c000da39:	68 e0 3f 02 c0       	push   0xc0023fe0
c000da3e:	68 f0 1e 02 c0       	push   0xc0021ef0
c000da43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da47:	e8 c6 fd ff ff       	call   c000d812 <EnvVarContainer::loadFrom(char const*, char const*)>
c000da4c:	83 c4 1c             	add    esp,0x1c
c000da4f:	c3                   	ret    

c000da50 <EnvVarContainer::__loadUser()>:
c000da50:	c3                   	ret    
c000da51:	90                   	nop

c000da52 <EnvVarContainer::EnvVarContainer(Process*)>:
c000da52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000da5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da64:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da72:	90                   	nop
c000da73:	c3                   	ret    

c000da74 <EnvVarContainer::~EnvVarContainer()>:
c000da74:	83 ec 0c             	sub    esp,0xc
c000da77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da7e:	85 c0                	test   eax,eax
c000da80:	74 1d                	je     c000da9f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da86:	8b 00                	mov    eax,DWORD PTR [eax]
c000da88:	85 c0                	test   eax,eax
c000da8a:	74 13                	je     c000da9f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da93:	83 ec 0c             	sub    esp,0xc
c000da96:	50                   	push   eax
c000da97:	e8 44 0e 00 00       	call   c000e8e0 <free>
c000da9c:	83 c4 10             	add    esp,0x10
c000da9f:	90                   	nop
c000daa0:	83 c4 0c             	add    esp,0xc
c000daa3:	c3                   	ret    

c000daa4 <KeGetEnv(Process*, char const*)>:
c000daa4:	53                   	push   ebx
c000daa5:	83 ec 08             	sub    esp,0x8
c000daa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daac:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000dab2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dab6:	74 04                	je     c000dabc <KeGetEnv(Process*, char const*)+0x18>
c000dab8:	85 c0                	test   eax,eax
c000daba:	75 0b                	jne    c000dac7 <KeGetEnv(Process*, char const*)+0x23>
c000dabc:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dac1:	85 c0                	test   eax,eax
c000dac3:	75 19                	jne    c000dade <KeGetEnv(Process*, char const*)+0x3a>
c000dac5:	eb 27                	jmp    c000daee <KeGetEnv(Process*, char const*)+0x4a>
c000dac7:	52                   	push   edx
c000dac8:	52                   	push   edx
c000dac9:	53                   	push   ebx
c000daca:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dad0:	e8 3b fc ff ff       	call   c000d710 <EnvVarContainer::getEnv(char const*)>
c000dad5:	83 c4 10             	add    esp,0x10
c000dad8:	85 c0                	test   eax,eax
c000dada:	75 28                	jne    c000db04 <KeGetEnv(Process*, char const*)+0x60>
c000dadc:	eb de                	jmp    c000dabc <KeGetEnv(Process*, char const*)+0x18>
c000dade:	52                   	push   edx
c000dadf:	52                   	push   edx
c000dae0:	53                   	push   ebx
c000dae1:	50                   	push   eax
c000dae2:	e8 29 fc ff ff       	call   c000d710 <EnvVarContainer::getEnv(char const*)>
c000dae7:	83 c4 10             	add    esp,0x10
c000daea:	85 c0                	test   eax,eax
c000daec:	75 16                	jne    c000db04 <KeGetEnv(Process*, char const*)+0x60>
c000daee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000daf2:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000daf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dafb:	83 c4 08             	add    esp,0x8
c000dafe:	5b                   	pop    ebx
c000daff:	e9 0c fc ff ff       	jmp    c000d710 <EnvVarContainer::getEnv(char const*)>
c000db04:	83 c4 08             	add    esp,0x8
c000db07:	5b                   	pop    ebx
c000db08:	c3                   	ret    

c000db09 <KeSetEnvSystem(char const*, char const*)>:
c000db09:	83 ec 10             	sub    esp,0x10
c000db0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db14:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000db1a:	e8 2f fc ff ff       	call   c000d74e <EnvVarContainer::setEnv(char const*, char const*)>
c000db1f:	83 c4 1c             	add    esp,0x1c
c000db22:	c3                   	ret    

c000db23 <KeSetEnvUser(char const*, char const*)>:
c000db23:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db28:	85 c0                	test   eax,eax
c000db2a:	74 15                	je     c000db41 <KeSetEnvUser(char const*, char const*)+0x1e>
c000db2c:	83 ec 10             	sub    esp,0x10
c000db2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db37:	50                   	push   eax
c000db38:	e8 11 fc ff ff       	call   c000d74e <EnvVarContainer::setEnv(char const*, char const*)>
c000db3d:	83 c4 1c             	add    esp,0x1c
c000db40:	c3                   	ret    
c000db41:	c3                   	ret    

c000db42 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000db42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db46:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000db4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db50:	e9 f9 fb ff ff       	jmp    c000d74e <EnvVarContainer::setEnv(char const*, char const*)>

c000db55 <KeDeleteEnvSystem(char const*)>:
c000db55:	c3                   	ret    

c000db56 <KeDeleteEnvUser(char const*)>:
c000db56:	c3                   	ret    

c000db57 <KeDeleteEnvProcess(Process*, char const*)>:
c000db57:	c3                   	ret    

c000db58 <KeNewProcessEnv(Process*)>:
c000db58:	83 ec 28             	sub    esp,0x28
c000db5b:	6a 0c                	push   0xc
c000db5d:	e8 6e 0d 00 00       	call   c000e8d0 <malloc>
c000db62:	5a                   	pop    edx
c000db63:	59                   	pop    ecx
c000db64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db68:	50                   	push   eax
c000db69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db6d:	e8 e0 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000db72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db76:	83 c4 2c             	add    esp,0x2c
c000db79:	c3                   	ret    

c000db7a <KeCopyProcessEnv(Process*, Process*)>:
c000db7a:	57                   	push   edi
c000db7b:	56                   	push   esi
c000db7c:	53                   	push   ebx
c000db7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db81:	83 ec 0c             	sub    esp,0xc
c000db84:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000db8a:	6a 0c                	push   0xc
c000db8c:	e8 3f 0d 00 00       	call   c000e8d0 <malloc>
c000db91:	89 c3                	mov    ebx,eax
c000db93:	58                   	pop    eax
c000db94:	5a                   	pop    edx
c000db95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db99:	53                   	push   ebx
c000db9a:	e8 b3 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000db9f:	8b 07                	mov    eax,DWORD PTR [edi]
c000dba1:	89 03                	mov    DWORD PTR [ebx],eax
c000dba3:	c1 e0 03             	shl    eax,0x3
c000dba6:	89 04 24             	mov    DWORD PTR [esp],eax
c000dba9:	e8 22 0d 00 00       	call   c000e8d0 <malloc>
c000dbae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dbb1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dbb3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dbb6:	89 c7                	mov    edi,eax
c000dbb8:	c1 e1 03             	shl    ecx,0x3
c000dbbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	89 d8                	mov    eax,ebx
c000dbc2:	5b                   	pop    ebx
c000dbc3:	5e                   	pop    esi
c000dbc4:	5f                   	pop    edi
c000dbc5:	c3                   	ret    

c000dbc6 <KeLoadSystemEnv()>:
c000dbc6:	53                   	push   ebx
c000dbc7:	83 ec 14             	sub    esp,0x14
c000dbca:	6a 0c                	push   0xc
c000dbcc:	e8 ff 0c 00 00       	call   c000e8d0 <malloc>
c000dbd1:	89 c3                	mov    ebx,eax
c000dbd3:	58                   	pop    eax
c000dbd4:	5a                   	pop    edx
c000dbd5:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dbdb:	53                   	push   ebx
c000dbdc:	e8 71 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000dbe1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbe4:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dbea:	e8 47 fe ff ff       	call   c000da36 <EnvVarContainer::__loadSystem()>
c000dbef:	83 c4 18             	add    esp,0x18
c000dbf2:	5b                   	pop    ebx
c000dbf3:	c3                   	ret    

c000dbf4 <KeLoadUserEnv()>:
c000dbf4:	53                   	push   ebx
c000dbf5:	83 ec 14             	sub    esp,0x14
c000dbf8:	6a 0c                	push   0xc
c000dbfa:	e8 d1 0c 00 00       	call   c000e8d0 <malloc>
c000dbff:	89 c3                	mov    ebx,eax
c000dc01:	58                   	pop    eax
c000dc02:	5a                   	pop    edx
c000dc03:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc09:	53                   	push   ebx
c000dc0a:	e8 43 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc0f:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dc15:	83 c4 18             	add    esp,0x18
c000dc18:	5b                   	pop    ebx
c000dc19:	c3                   	ret    

c000dc1a <KeFlushEnv()>:
c000dc1a:	c3                   	ret    

c000dc1b <KeGetProcessTotalEnvCount(Process*)>:
c000dc1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc1f:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dc25:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc2b:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dc30:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc32:	03 01                	add    eax,DWORD PTR [ecx]
c000dc34:	85 d2                	test   edx,edx
c000dc36:	74 02                	je     c000dc3a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dc38:	03 02                	add    eax,DWORD PTR [edx]
c000dc3a:	c3                   	ret    

c000dc3b <KeGetProcessEnvPair(Process*, int)>:
c000dc3b:	57                   	push   edi
c000dc3c:	56                   	push   esi
c000dc3d:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dc43:	53                   	push   ebx
c000dc44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc4c:	85 f6                	test   esi,esi
c000dc4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc52:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc58:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc5a:	75 16                	jne    c000dc72 <KeGetProcessEnvPair(Process*, int)+0x37>
c000dc5c:	39 c2                	cmp    edx,eax
c000dc5e:	7c 16                	jl     c000dc76 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc60:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dc66:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dc68:	01 c6                	add    esi,eax
c000dc6a:	39 d6                	cmp    esi,edx
c000dc6c:	7e 3c                	jle    c000dcaa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc6e:	29 c2                	sub    edx,eax
c000dc70:	eb 04                	jmp    c000dc76 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc72:	39 c2                	cmp    edx,eax
c000dc74:	7d 05                	jge    c000dc7b <KeGetProcessEnvPair(Process*, int)+0x40>
c000dc76:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dc79:	eb 20                	jmp    c000dc9b <KeGetProcessEnvPair(Process*, int)+0x60>
c000dc7b:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dc7d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dc80:	39 d1                	cmp    ecx,edx
c000dc82:	7e 04                	jle    c000dc88 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dc84:	29 c2                	sub    edx,eax
c000dc86:	eb 10                	jmp    c000dc98 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dc88:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dc8e:	03 0e                	add    ecx,DWORD PTR [esi]
c000dc90:	39 d1                	cmp    ecx,edx
c000dc92:	7e 16                	jle    c000dcaa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc94:	29 c2                	sub    edx,eax
c000dc96:	29 fa                	sub    edx,edi
c000dc98:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dc9b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dc9e:	8b 02                	mov    eax,DWORD PTR [edx]
c000dca0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dca3:	89 03                	mov    DWORD PTR [ebx],eax
c000dca5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dca8:	eb 1d                	jmp    c000dcc7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dcaa:	83 ec 0c             	sub    esp,0xc
c000dcad:	68 12 1f 02 c0       	push   0xc0021f12
c000dcb2:	e8 5f 0f 00 00       	call   c000ec16 <KePanic(char const*)>
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dcc0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dcc7:	89 d8                	mov    eax,ebx
c000dcc9:	5b                   	pop    ebx
c000dcca:	5e                   	pop    esi
c000dccb:	5f                   	pop    edi
c000dccc:	c2 04 00             	ret    0x4
c000dccf:	90                   	nop

c000dcd0 <KeSetupInterrupts()>:
c000dcd0:	83 ec 10             	sub    esp,0x10
c000dcd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dcdb:	90                   	nop
c000dcdc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dce4:	7f 5a                	jg     c000dd40 <KeSetupInterrupts()+0x70>
c000dce6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dcee:	66 90                	xchg   ax,ax
c000dcf0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dcf5:	7f 41                	jg     c000dd38 <KeSetupInterrupts()+0x68>
c000dcf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcfb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd06:	01 d0                	add    eax,edx
c000dd08:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dd13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd17:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd22:	01 d0                	add    eax,edx
c000dd24:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000dd2f:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dd34:	eb ba                	jmp    c000dcf0 <KeSetupInterrupts()+0x20>
c000dd36:	66 90                	xchg   ax,ax
c000dd38:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dd3d:	eb 9d                	jmp    c000dcdc <KeSetupInterrupts()+0xc>
c000dd3f:	90                   	nop
c000dd40:	90                   	nop
c000dd41:	83 c4 10             	add    esp,0x10
c000dd44:	c3                   	ret    
c000dd45:	8d 76 00             	lea    esi,[esi+0x0]

c000dd48 <int_handler>:
c000dd48:	83 ec 2c             	sub    esp,0x2c
c000dd4b:	90                   	nop
c000dd4c:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000dd51:	0f b6 c0             	movzx  eax,al
c000dd54:	85 c0                	test   eax,eax
c000dd56:	74 04                	je     c000dd5c <int_handler+0x14>
c000dd58:	fa                   	cli    
c000dd59:	f4                   	hlt    
c000dd5a:	eb f0                	jmp    c000dd4c <int_handler+0x4>
c000dd5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd60:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dd63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd67:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000dd6c:	7e 1a                	jle    c000dd88 <int_handler+0x40>
c000dd6e:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000dd73:	7f 13                	jg     c000dd88 <int_handler+0x40>
c000dd75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd79:	83 e8 20             	sub    eax,0x20
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	50                   	push   eax
c000dd80:	e8 70 a8 00 00       	call   c00185f5 <HalEndOfInterrupt(int)>
c000dd85:	83 c4 10             	add    esp,0x10
c000dd88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd8c:	c1 e0 04             	shl    eax,0x4
c000dd8f:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000dd94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd9c:	c1 e0 04             	shl    eax,0x4
c000dd9f:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000dda4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dda8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ddb0:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ddb5:	0f 8f ad 00 00 00    	jg     c000de68 <int_handler+0x120>
c000ddbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddbf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddca:	01 d0                	add    eax,edx
c000ddcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddce:	85 c0                	test   eax,eax
c000ddd0:	0f 84 86 00 00 00    	je     c000de5c <int_handler+0x114>
c000ddd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddda:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dddd:	83 f8 60             	cmp    eax,0x60
c000dde0:	75 46                	jne    c000de28 <int_handler+0xe0>
c000dde2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dde6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dded:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddf1:	01 d0                	add    eax,edx
c000ddf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ddf9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de04:	01 ca                	add    edx,ecx
c000de06:	8b 12                	mov    edx,DWORD PTR [edx]
c000de08:	83 ec 08             	sub    esp,0x8
c000de0b:	52                   	push   edx
c000de0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de10:	ff d0                	call   eax
c000de12:	83 c4 10             	add    esp,0x10
c000de15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de25:	eb 4d                	jmp    c000de74 <int_handler+0x12c>
c000de27:	90                   	nop
c000de28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de2c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de37:	01 d0                	add    eax,edx
c000de39:	8b 00                	mov    eax,DWORD PTR [eax]
c000de3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de3f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de4a:	01 ca                	add    edx,ecx
c000de4c:	8b 12                	mov    edx,DWORD PTR [edx]
c000de4e:	83 ec 08             	sub    esp,0x8
c000de51:	52                   	push   edx
c000de52:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de56:	ff d0                	call   eax
c000de58:	83 c4 10             	add    esp,0x10
c000de5b:	90                   	nop
c000de5c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000de61:	e9 4a ff ff ff       	jmp    c000ddb0 <int_handler+0x68>
c000de66:	66 90                	xchg   ax,ax
c000de68:	b8 00 00 00 00       	mov    eax,0x0
c000de6d:	ba 00 00 00 00       	mov    edx,0x0
c000de72:	66 90                	xchg   ax,ax
c000de74:	83 c4 2c             	add    esp,0x2c
c000de77:	c3                   	ret    

c000de78 <KeDisplayProgramFault(char const*)>:
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	83 ec 0c             	sub    esp,0xc
c000de7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de82:	e8 c7 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000de87:	83 c4 10             	add    esp,0x10
c000de8a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000de8f:	8b 00                	mov    eax,DWORD PTR [eax]
c000de91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000de94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000de9a:	85 c0                	test   eax,eax
c000de9c:	74 22                	je     c000dec0 <KeDisplayProgramFault(char const*)+0x48>
c000de9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000dea3:	8b 00                	mov    eax,DWORD PTR [eax]
c000dea5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dea8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000deae:	6a 04                	push   0x4
c000deb0:	6a 0f                	push   0xf
c000deb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000deb6:	50                   	push   eax
c000deb7:	e8 2c 35 00 00       	call   c00113e8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	90                   	nop
c000dec0:	90                   	nop
c000dec1:	83 c4 0c             	add    esp,0xc
c000dec4:	c3                   	ret    
c000dec5:	8d 76 00             	lea    esi,[esi+0x0]

c000dec8 <KeGeneralProtectionFault(void*, void*)>:
c000dec8:	83 ec 0c             	sub    esp,0xc
c000decb:	83 ec 08             	sub    esp,0x8
c000dece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded6:	e8 3a 9d 00 00       	call   c0017c15 <HalHandleGeneralProtectionFault(void*, void*)>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	0f b6 c0             	movzx  eax,al
c000dee1:	85 c0                	test   eax,eax
c000dee3:	75 2f                	jne    c000df14 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000dee5:	83 ec 0c             	sub    esp,0xc
c000dee8:	68 2c 1f 02 c0       	push   0xc0021f2c
c000deed:	e8 86 ff ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	83 ec 0c             	sub    esp,0xc
c000def8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defc:	e8 30 9e 00 00       	call   c0017d31 <HalDisplayDebugInfo(void*)>
c000df01:	83 c4 10             	add    esp,0x10
c000df04:	83 ec 0c             	sub    esp,0xc
c000df07:	6a 00                	push   0x0
c000df09:	e8 7e 7d 00 00       	call   c0015c8c <Thr::terminateFromIRQ(int)>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	eb 05                	jmp    c000df18 <KeGeneralProtectionFault(void*, void*)+0x50>
c000df13:	90                   	nop
c000df14:	90                   	nop
c000df15:	8d 76 00             	lea    esi,[esi+0x0]
c000df18:	83 c4 0c             	add    esp,0xc
c000df1b:	c3                   	ret    

c000df1c <KePageFault(void*, void*)>:
c000df1c:	83 ec 0c             	sub    esp,0xc
c000df1f:	83 ec 08             	sub    esp,0x8
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2a:	e8 91 9d 00 00       	call   c0017cc0 <HalHandlePageFault(void*, void*)>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	0f b6 c0             	movzx  eax,al
c000df35:	85 c0                	test   eax,eax
c000df37:	75 2f                	jne    c000df68 <KePageFault(void*, void*)+0x4c>
c000df39:	83 ec 0c             	sub    esp,0xc
c000df3c:	68 45 1f 02 c0       	push   0xc0021f45
c000df41:	e8 32 ff ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	83 ec 0c             	sub    esp,0xc
c000df4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df50:	e8 dc 9d 00 00       	call   c0017d31 <HalDisplayDebugInfo(void*)>
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	6a 00                	push   0x0
c000df5d:	e8 2a 7d 00 00       	call   c0015c8c <Thr::terminateFromIRQ(int)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	eb 05                	jmp    c000df6c <KePageFault(void*, void*)+0x50>
c000df67:	90                   	nop
c000df68:	90                   	nop
c000df69:	8d 76 00             	lea    esi,[esi+0x0]
c000df6c:	83 c4 0c             	add    esp,0xc
c000df6f:	c3                   	ret    

c000df70 <KeNonMaskableInterrupt(void*, void*)>:
c000df70:	83 ec 0c             	sub    esp,0xc
c000df73:	e8 47 a1 00 00       	call   c00180bf <HalReceivedNMI()>
c000df78:	90                   	nop
c000df79:	83 c4 0c             	add    esp,0xc
c000df7c:	c3                   	ret    
c000df7d:	8d 76 00             	lea    esi,[esi+0x0]

c000df80 <KeOtherFault(void*, void*)>:
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	83 ec 0c             	sub    esp,0xc
c000df86:	68 50 1f 02 c0       	push   0xc0021f50
c000df8b:	e8 e8 fe ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000df90:	83 c4 10             	add    esp,0x10
c000df93:	83 ec 0c             	sub    esp,0xc
c000df96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9a:	e8 92 9d 00 00       	call   c0017d31 <HalDisplayDebugInfo(void*)>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	6a 00                	push   0x0
c000dfa7:	e8 e0 7c 00 00       	call   c0015c8c <Thr::terminateFromIRQ(int)>
c000dfac:	83 c4 10             	add    esp,0x10
c000dfaf:	90                   	nop
c000dfb0:	83 c4 0c             	add    esp,0xc
c000dfb3:	c3                   	ret    

c000dfb4 <KeOpcodeFault(void*, void*)>:
c000dfb4:	55                   	push   ebp
c000dfb5:	89 e5                	mov    ebp,esp
c000dfb7:	83 ec 08             	sub    esp,0x8
c000dfba:	83 ec 08             	sub    esp,0x8
c000dfbd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dfc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfc3:	e8 27 9d 00 00       	call   c0017cef <HalHandleOpcodeFault(void*, void*)>
c000dfc8:	83 c4 10             	add    esp,0x10
c000dfcb:	0f b6 c0             	movzx  eax,al
c000dfce:	85 c0                	test   eax,eax
c000dfd0:	75 2e                	jne    c000e000 <KeOpcodeFault(void*, void*)+0x4c>
c000dfd2:	83 ec 0c             	sub    esp,0xc
c000dfd5:	68 78 1f 02 c0       	push   0xc0021f78
c000dfda:	e8 99 fe ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000dfdf:	83 c4 10             	add    esp,0x10
c000dfe2:	83 ec 0c             	sub    esp,0xc
c000dfe5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfe8:	e8 44 9d 00 00       	call   c0017d31 <HalDisplayDebugInfo(void*)>
c000dfed:	83 c4 10             	add    esp,0x10
c000dff0:	83 ec 0c             	sub    esp,0xc
c000dff3:	6a 00                	push   0x0
c000dff5:	e8 92 7c 00 00       	call   c0015c8c <Thr::terminateFromIRQ(int)>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	eb 05                	jmp    c000e004 <KeOpcodeFault(void*, void*)+0x50>
c000dfff:	90                   	nop
c000e000:	90                   	nop
c000e001:	8d 76 00             	lea    esi,[esi+0x0]
c000e004:	c9                   	leave  
c000e005:	c3                   	ret    
c000e006:	66 90                	xchg   ax,ax

c000e008 <KeDoubleFault(void*, void*)>:
c000e008:	55                   	push   ebp
c000e009:	89 e5                	mov    ebp,esp
c000e00b:	83 ec 08             	sub    esp,0x8
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	68 85 1f 02 c0       	push   0xc0021f85
c000e016:	e8 fb 0b 00 00       	call   c000ec16 <KePanic(char const*)>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	90                   	nop
c000e01f:	c9                   	leave  
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <GDTEntry::setBase(unsigned int)>:
c000e022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e026:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e02a:	89 c1                	mov    ecx,eax
c000e02c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e030:	c1 e9 10             	shr    ecx,0x10
c000e033:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e036:	c1 e8 18             	shr    eax,0x18
c000e039:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e03c:	c3                   	ret    
c000e03d:	90                   	nop

c000e03e <GDTEntry::setLimit(unsigned int)>:
c000e03e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e046:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e049:	66 89 01             	mov    WORD PTR [ecx],ax
c000e04c:	c1 e8 10             	shr    eax,0x10
c000e04f:	83 e0 0f             	and    eax,0xf
c000e052:	83 e2 f0             	and    edx,0xfffffff0
c000e055:	09 d0                	or     eax,edx
c000e057:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e05a:	c3                   	ret    
c000e05b:	90                   	nop

c000e05c <GDT::GDT()>:
c000e05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e060:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e070:	90                   	nop
c000e071:	c3                   	ret    

c000e072 <GDT::addEntry(GDTEntry)>:
c000e072:	53                   	push   ebx
c000e073:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e077:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e07b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e07f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e081:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e085:	8d 48 01             	lea    ecx,[eax+0x1]
c000e088:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e08c:	c1 e0 03             	shl    eax,0x3
c000e08f:	89 0a                	mov    DWORD PTR [edx],ecx
c000e091:	5b                   	pop    ebx
c000e092:	c3                   	ret    
c000e093:	90                   	nop

c000e094 <GDT::getNumberOfEntries()>:
c000e094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e098:	8b 00                	mov    eax,DWORD PTR [eax]
c000e09a:	c3                   	ret    
c000e09b:	90                   	nop

c000e09c <GDT::flush()>:
c000e09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0a2:	83 c0 04             	add    eax,0x4
c000e0a5:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e0aa:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e0b1:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e0b8:	e9 9d 22 ff ff       	jmp    c000035a <loadGDT>
c000e0bd:	90                   	nop

c000e0be <GDT::setup()>:
c000e0be:	57                   	push   edi
c000e0bf:	56                   	push   esi
c000e0c0:	53                   	push   ebx
c000e0c1:	83 ec 30             	sub    esp,0x30
c000e0c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0c8:	6a 00                	push   0x0
c000e0ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e0ce:	56                   	push   esi
c000e0cf:	e8 4e ff ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e0d4:	6a 00                	push   0x0
c000e0d6:	56                   	push   esi
c000e0d7:	e8 62 ff ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c000e0dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e0e4:	6a 00                	push   0x0
c000e0e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e0ea:	56                   	push   esi
c000e0eb:	e8 32 ff ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e0f0:	68 ff ff ff 00       	push   0xffffff
c000e0f5:	56                   	push   esi
c000e0f6:	e8 43 ff ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c000e0fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e0ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e103:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e108:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e10c:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e111:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e115:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e119:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e11d:	89 f8                	mov    eax,edi
c000e11f:	89 fa                	mov    edx,edi
c000e121:	80 e4 f7             	and    ah,0xf7
c000e124:	80 ce 60             	or     dh,0x60
c000e127:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e12b:	89 c7                	mov    edi,eax
c000e12d:	80 cc 60             	or     ah,0x60
c000e130:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e134:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e138:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e13c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e140:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e144:	83 c4 20             	add    esp,0x20
c000e147:	6a 00                	push   0x0
c000e149:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e14d:	50                   	push   eax
c000e14e:	e8 cf fe ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e153:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e157:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e15b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e15f:	83 e0 3f             	and    eax,0x3f
c000e162:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e166:	6a 00                	push   0x0
c000e168:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e16c:	50                   	push   eax
c000e16d:	e8 b0 fe ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e172:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e176:	83 e0 3f             	and    eax,0x3f
c000e179:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e17d:	83 c4 0c             	add    esp,0xc
c000e180:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e184:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e188:	53                   	push   ebx
c000e189:	e8 e4 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e18e:	83 c4 0c             	add    esp,0xc
c000e191:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e195:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e199:	53                   	push   ebx
c000e19a:	e8 d3 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e19f:	83 c4 0c             	add    esp,0xc
c000e1a2:	57                   	push   edi
c000e1a3:	56                   	push   esi
c000e1a4:	53                   	push   ebx
c000e1a5:	e8 c8 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1aa:	83 c4 0c             	add    esp,0xc
c000e1ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1b5:	53                   	push   ebx
c000e1b6:	e8 b7 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1bb:	83 c4 0c             	add    esp,0xc
c000e1be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1c6:	53                   	push   ebx
c000e1c7:	e8 a6 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1cc:	83 c4 0c             	add    esp,0xc
c000e1cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1d7:	53                   	push   ebx
c000e1d8:	e8 95 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1dd:	83 c4 0c             	add    esp,0xc
c000e1e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1e8:	53                   	push   ebx
c000e1e9:	e8 84 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1f1:	e8 a6 fe ff ff       	call   c000e09c <GDT::flush()>
c000e1f6:	83 c4 40             	add    esp,0x40
c000e1f9:	5b                   	pop    ebx
c000e1fa:	5e                   	pop    esi
c000e1fb:	5f                   	pop    edi
c000e1fc:	c3                   	ret    

c000e1fd <idleFunction(void*)>:
c000e1fd:	83 ec 0c             	sub    esp,0xc
c000e200:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e207:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e20e:	75 01                	jne    c000e211 <idleFunction(void*)+0x14>
c000e210:	fb                   	sti    
c000e211:	e8 44 9f 00 00       	call   c001815a <HalSystemIdle()>
c000e216:	e8 5b 1f 01 00       	call   c0020176 <idleCommon()>
c000e21b:	eb f4                	jmp    c000e211 <idleFunction(void*)+0x14>
c000e21d:	66 90                	xchg   ax,ax
c000e21f:	90                   	nop

c000e220 <IDTEntry::IDTEntry(bool)>:
c000e220:	53                   	push   ebx
c000e221:	83 ec 04             	sub    esp,0x4
c000e224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e228:	88 04 24             	mov    BYTE PTR [esp],al
c000e22b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e239:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e241:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e244:	83 e2 f0             	and    edx,0xfffffff0
c000e247:	83 ca 0e             	or     edx,0xe
c000e24a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e24d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e251:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e254:	83 e2 ef             	and    edx,0xffffffef
c000e257:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e25a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e25e:	85 c0                	test   eax,eax
c000e260:	74 06                	je     c000e268 <IDTEntry::IDTEntry(bool)+0x48>
c000e262:	b2 03                	mov    dl,0x3
c000e264:	eb 06                	jmp    c000e26c <IDTEntry::IDTEntry(bool)+0x4c>
c000e266:	66 90                	xchg   ax,ax
c000e268:	b2 00                	mov    dl,0x0
c000e26a:	66 90                	xchg   ax,ax
c000e26c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e270:	83 e2 03             	and    edx,0x3
c000e273:	89 d3                	mov    ebx,edx
c000e275:	c1 e3 05             	shl    ebx,0x5
c000e278:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e27b:	83 e2 9f             	and    edx,0xffffff9f
c000e27e:	88 d1                	mov    cl,dl
c000e280:	88 da                	mov    dl,bl
c000e282:	09 ca                	or     edx,ecx
c000e284:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e28b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e28e:	83 ca 80             	or     edx,0xffffff80
c000e291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e294:	90                   	nop
c000e295:	83 c4 04             	add    esp,0x4
c000e298:	5b                   	pop    ebx
c000e299:	c3                   	ret    

c000e29a <IDTEntry::setOffset(unsigned int)>:
c000e29a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2a2:	66 89 02             	mov    WORD PTR [edx],ax
c000e2a5:	c1 e8 10             	shr    eax,0x10
c000e2a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e2ac:	c3                   	ret    
c000e2ad:	90                   	nop
c000e2ae:	66 90                	xchg   ax,ax

c000e2b0 <IDT::IDT()>:
c000e2b0:	90                   	nop
c000e2b1:	c3                   	ret    

c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2b6:	83 c0 30             	add    eax,0x30
c000e2b9:	c3                   	ret    

c000e2ba <IDT::addEntry(IDTEntry, int)>:
c000e2ba:	53                   	push   ebx
c000e2bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e2c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e2c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e2ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e2d2:	5b                   	pop    ebx
c000e2d3:	c3                   	ret    

c000e2d4 <IDT::addEntry(int, void (*)(), bool)>:
c000e2d4:	53                   	push   ebx
c000e2d5:	83 ec 10             	sub    esp,0x10
c000e2d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e2dd:	50                   	push   eax
c000e2de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e2e2:	53                   	push   ebx
c000e2e3:	e8 38 ff ff ff       	call   c000e220 <IDTEntry::IDTEntry(bool)>
c000e2e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2ec:	53                   	push   ebx
c000e2ed:	e8 a8 ff ff ff       	call   c000e29a <IDTEntry::setOffset(unsigned int)>
c000e2f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e302:	e8 b3 ff ff ff       	call   c000e2ba <IDT::addEntry(IDTEntry, int)>
c000e307:	83 c4 30             	add    esp,0x30
c000e30a:	5b                   	pop    ebx
c000e30b:	c3                   	ret    

c000e30c <IDT::flush()>:
c000e30c:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e315:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e319:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e31e:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e325:	c3                   	ret    

c000e326 <IDT::setup()>:
c000e326:	57                   	push   edi
c000e327:	56                   	push   esi
c000e328:	53                   	push   ebx
c000e329:	83 ec 10             	sub    esp,0x10
c000e32c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e330:	6a 00                	push   0x0
c000e332:	68 20 f4 01 c0       	push   0xc001f420
c000e337:	6a 00                	push   0x0
c000e339:	53                   	push   ebx
c000e33a:	e8 95 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e33f:	6a 00                	push   0x0
c000e341:	68 30 f4 01 c0       	push   0xc001f430
c000e346:	6a 01                	push   0x1
c000e348:	53                   	push   ebx
c000e349:	e8 86 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e34e:	83 c4 20             	add    esp,0x20
c000e351:	6a 00                	push   0x0
c000e353:	68 3a f4 01 c0       	push   0xc001f43a
c000e358:	6a 02                	push   0x2
c000e35a:	53                   	push   ebx
c000e35b:	e8 74 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e360:	6a 00                	push   0x0
c000e362:	68 44 f4 01 c0       	push   0xc001f444
c000e367:	6a 03                	push   0x3
c000e369:	53                   	push   ebx
c000e36a:	e8 65 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e36f:	83 c4 20             	add    esp,0x20
c000e372:	6a 00                	push   0x0
c000e374:	68 4e f4 01 c0       	push   0xc001f44e
c000e379:	6a 04                	push   0x4
c000e37b:	53                   	push   ebx
c000e37c:	e8 53 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e381:	6a 00                	push   0x0
c000e383:	68 58 f4 01 c0       	push   0xc001f458
c000e388:	6a 05                	push   0x5
c000e38a:	53                   	push   ebx
c000e38b:	e8 44 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e390:	83 c4 20             	add    esp,0x20
c000e393:	6a 00                	push   0x0
c000e395:	68 62 f4 01 c0       	push   0xc001f462
c000e39a:	6a 06                	push   0x6
c000e39c:	53                   	push   ebx
c000e39d:	e8 32 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3a2:	6a 00                	push   0x0
c000e3a4:	68 6c f4 01 c0       	push   0xc001f46c
c000e3a9:	6a 07                	push   0x7
c000e3ab:	53                   	push   ebx
c000e3ac:	e8 23 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3b1:	83 c4 20             	add    esp,0x20
c000e3b4:	6a 00                	push   0x0
c000e3b6:	68 76 f4 01 c0       	push   0xc001f476
c000e3bb:	6a 08                	push   0x8
c000e3bd:	53                   	push   ebx
c000e3be:	e8 11 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3c3:	6a 00                	push   0x0
c000e3c5:	68 7e f4 01 c0       	push   0xc001f47e
c000e3ca:	6a 09                	push   0x9
c000e3cc:	53                   	push   ebx
c000e3cd:	e8 02 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3d2:	83 c4 20             	add    esp,0x20
c000e3d5:	6a 00                	push   0x0
c000e3d7:	68 88 f4 01 c0       	push   0xc001f488
c000e3dc:	6a 0a                	push   0xa
c000e3de:	53                   	push   ebx
c000e3df:	e8 f0 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3e4:	6a 00                	push   0x0
c000e3e6:	68 90 f4 01 c0       	push   0xc001f490
c000e3eb:	6a 0b                	push   0xb
c000e3ed:	53                   	push   ebx
c000e3ee:	e8 e1 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3f3:	83 c4 20             	add    esp,0x20
c000e3f6:	6a 00                	push   0x0
c000e3f8:	68 98 f4 01 c0       	push   0xc001f498
c000e3fd:	6a 0c                	push   0xc
c000e3ff:	53                   	push   ebx
c000e400:	e8 cf fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e405:	6a 00                	push   0x0
c000e407:	68 a0 f4 01 c0       	push   0xc001f4a0
c000e40c:	6a 0d                	push   0xd
c000e40e:	53                   	push   ebx
c000e40f:	e8 c0 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e414:	83 c4 20             	add    esp,0x20
c000e417:	6a 00                	push   0x0
c000e419:	68 ba f4 01 c0       	push   0xc001f4ba
c000e41e:	6a 0e                	push   0xe
c000e420:	53                   	push   ebx
c000e421:	e8 ae fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e426:	6a 00                	push   0x0
c000e428:	68 c2 f4 01 c0       	push   0xc001f4c2
c000e42d:	6a 0f                	push   0xf
c000e42f:	53                   	push   ebx
c000e430:	e8 9f fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e435:	83 c4 20             	add    esp,0x20
c000e438:	6a 00                	push   0x0
c000e43a:	68 cc f4 01 c0       	push   0xc001f4cc
c000e43f:	6a 10                	push   0x10
c000e441:	53                   	push   ebx
c000e442:	e8 8d fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e447:	6a 00                	push   0x0
c000e449:	68 d6 f4 01 c0       	push   0xc001f4d6
c000e44e:	6a 11                	push   0x11
c000e450:	53                   	push   ebx
c000e451:	e8 7e fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e456:	83 c4 20             	add    esp,0x20
c000e459:	6a 00                	push   0x0
c000e45b:	68 e0 f4 01 c0       	push   0xc001f4e0
c000e460:	6a 12                	push   0x12
c000e462:	53                   	push   ebx
c000e463:	e8 6c fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e468:	6a 01                	push   0x1
c000e46a:	68 7a f5 01 c0       	push   0xc001f57a
c000e46f:	6a 60                	push   0x60
c000e471:	53                   	push   ebx
c000e472:	e8 5d fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e477:	83 c4 20             	add    esp,0x20
c000e47a:	6a 00                	push   0x0
c000e47c:	68 81 f5 01 c0       	push   0xc001f581
c000e481:	6a 20                	push   0x20
c000e483:	53                   	push   ebx
c000e484:	e8 4b fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e489:	6a 00                	push   0x0
c000e48b:	68 6c f5 01 c0       	push   0xc001f56c
c000e490:	6a 21                	push   0x21
c000e492:	53                   	push   ebx
c000e493:	e8 3c fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e498:	83 c4 20             	add    esp,0x20
c000e49b:	6a 00                	push   0x0
c000e49d:	68 73 f5 01 c0       	push   0xc001f573
c000e4a2:	6a 22                	push   0x22
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 2a fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4aa:	6a 00                	push   0x0
c000e4ac:	68 ea f4 01 c0       	push   0xc001f4ea
c000e4b1:	6a 23                	push   0x23
c000e4b3:	53                   	push   ebx
c000e4b4:	e8 1b fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4b9:	83 c4 20             	add    esp,0x20
c000e4bc:	6a 00                	push   0x0
c000e4be:	68 f4 f4 01 c0       	push   0xc001f4f4
c000e4c3:	6a 24                	push   0x24
c000e4c5:	53                   	push   ebx
c000e4c6:	e8 09 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4cb:	6a 00                	push   0x0
c000e4cd:	68 fe f4 01 c0       	push   0xc001f4fe
c000e4d2:	6a 25                	push   0x25
c000e4d4:	53                   	push   ebx
c000e4d5:	e8 fa fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4da:	83 c4 20             	add    esp,0x20
c000e4dd:	6a 00                	push   0x0
c000e4df:	68 08 f5 01 c0       	push   0xc001f508
c000e4e4:	6a 26                	push   0x26
c000e4e6:	53                   	push   ebx
c000e4e7:	e8 e8 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4ec:	6a 00                	push   0x0
c000e4ee:	68 12 f5 01 c0       	push   0xc001f512
c000e4f3:	6a 27                	push   0x27
c000e4f5:	53                   	push   ebx
c000e4f6:	e8 d9 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4fb:	83 c4 20             	add    esp,0x20
c000e4fe:	6a 00                	push   0x0
c000e500:	68 1c f5 01 c0       	push   0xc001f51c
c000e505:	6a 28                	push   0x28
c000e507:	53                   	push   ebx
c000e508:	e8 c7 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e50d:	6a 00                	push   0x0
c000e50f:	68 26 f5 01 c0       	push   0xc001f526
c000e514:	6a 29                	push   0x29
c000e516:	53                   	push   ebx
c000e517:	e8 b8 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e51c:	83 c4 20             	add    esp,0x20
c000e51f:	6a 00                	push   0x0
c000e521:	68 30 f5 01 c0       	push   0xc001f530
c000e526:	6a 2a                	push   0x2a
c000e528:	53                   	push   ebx
c000e529:	e8 a6 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e52e:	6a 00                	push   0x0
c000e530:	68 3a f5 01 c0       	push   0xc001f53a
c000e535:	6a 2b                	push   0x2b
c000e537:	53                   	push   ebx
c000e538:	e8 97 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e53d:	83 c4 20             	add    esp,0x20
c000e540:	6a 00                	push   0x0
c000e542:	68 44 f5 01 c0       	push   0xc001f544
c000e547:	6a 2c                	push   0x2c
c000e549:	53                   	push   ebx
c000e54a:	e8 85 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e54f:	6a 00                	push   0x0
c000e551:	68 4e f5 01 c0       	push   0xc001f54e
c000e556:	6a 2d                	push   0x2d
c000e558:	53                   	push   ebx
c000e559:	e8 76 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e55e:	83 c4 20             	add    esp,0x20
c000e561:	6a 00                	push   0x0
c000e563:	68 58 f5 01 c0       	push   0xc001f558
c000e568:	6a 2e                	push   0x2e
c000e56a:	53                   	push   ebx
c000e56b:	e8 64 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e570:	6a 00                	push   0x0
c000e572:	68 62 f5 01 c0       	push   0xc001f562
c000e577:	6a 2f                	push   0x2f
c000e579:	53                   	push   ebx
c000e57a:	e8 55 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e57f:	83 c4 20             	add    esp,0x20
c000e582:	6a 00                	push   0x0
c000e584:	68 bc f6 01 c0       	push   0xc001f6bc
c000e589:	6a 30                	push   0x30
c000e58b:	53                   	push   ebx
c000e58c:	e8 43 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e591:	6a 00                	push   0x0
c000e593:	68 c6 f6 01 c0       	push   0xc001f6c6
c000e598:	6a 31                	push   0x31
c000e59a:	53                   	push   ebx
c000e59b:	e8 34 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5a0:	83 c4 20             	add    esp,0x20
c000e5a3:	6a 00                	push   0x0
c000e5a5:	68 d0 f6 01 c0       	push   0xc001f6d0
c000e5aa:	6a 32                	push   0x32
c000e5ac:	53                   	push   ebx
c000e5ad:	e8 22 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5b2:	6a 00                	push   0x0
c000e5b4:	68 da f6 01 c0       	push   0xc001f6da
c000e5b9:	6a 33                	push   0x33
c000e5bb:	53                   	push   ebx
c000e5bc:	e8 13 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5c1:	83 c4 20             	add    esp,0x20
c000e5c4:	6a 00                	push   0x0
c000e5c6:	68 e4 f6 01 c0       	push   0xc001f6e4
c000e5cb:	6a 34                	push   0x34
c000e5cd:	53                   	push   ebx
c000e5ce:	e8 01 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5d3:	6a 00                	push   0x0
c000e5d5:	68 ee f6 01 c0       	push   0xc001f6ee
c000e5da:	6a 35                	push   0x35
c000e5dc:	53                   	push   ebx
c000e5dd:	e8 f2 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5e2:	83 c4 20             	add    esp,0x20
c000e5e5:	6a 00                	push   0x0
c000e5e7:	68 f8 f6 01 c0       	push   0xc001f6f8
c000e5ec:	6a 36                	push   0x36
c000e5ee:	53                   	push   ebx
c000e5ef:	e8 e0 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5f4:	6a 00                	push   0x0
c000e5f6:	68 02 f7 01 c0       	push   0xc001f702
c000e5fb:	6a 37                	push   0x37
c000e5fd:	53                   	push   ebx
c000e5fe:	e8 d1 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e603:	83 c4 1c             	add    esp,0x1c
c000e606:	6a 03                	push   0x3
c000e608:	6a 02                	push   0x2
c000e60a:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e610:	e8 0f 41 00 00       	call   c0012724 <VAS::allocatePages(int, int)>
c000e615:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e61c:	89 c6                	mov    esi,eax
c000e61e:	e8 ad 02 00 00       	call   c000e8d0 <malloc>
c000e623:	81 c6 00 20 00 00    	add    esi,0x2000
c000e629:	89 04 24             	mov    DWORD PTR [esp],eax
c000e62c:	89 c7                	mov    edi,eax
c000e62e:	e8 c5 31 00 00       	call   c00117f8 <TSS::TSS()>
c000e633:	83 c4 0c             	add    esp,0xc
c000e636:	68 76 f4 01 c0       	push   0xc001f476
c000e63b:	56                   	push   esi
c000e63c:	57                   	push   edi
c000e63d:	e8 fa 31 00 00       	call   c001183c <TSS::setup(unsigned long, unsigned long)>
c000e642:	89 c6                	mov    esi,eax
c000e644:	58                   	pop    eax
c000e645:	5a                   	pop    edx
c000e646:	6a 00                	push   0x0
c000e648:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e64c:	50                   	push   eax
c000e64d:	e8 ce fb ff ff       	call   c000e220 <IDTEntry::IDTEntry(bool)>
c000e652:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e656:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e65b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e662:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e66c:	80 ce 05             	or     dh,0x5
c000e66f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e676:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e67a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e67d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e680:	e8 87 fc ff ff       	call   c000e30c <IDT::flush()>
c000e685:	83 c4 20             	add    esp,0x20
c000e688:	5b                   	pop    ebx
c000e689:	5e                   	pop    esi
c000e68a:	5f                   	pop    edi
c000e68b:	c3                   	ret    

c000e68c <CPU::current()>:
c000e68c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e697:	c3                   	ret    

c000e698 <operator new(unsigned long)>:
c000e698:	e9 33 02 00 00       	jmp    c000e8d0 <malloc>

c000e69d <operator delete(void*)>:
c000e69d:	e9 4e 02 00 00       	jmp    c000e8f0 <rfree>

c000e6a2 <disableIRQs()>:
c000e6a2:	fa                   	cli    
c000e6a3:	c3                   	ret    

c000e6a4 <enableIRQs()>:
c000e6a4:	fb                   	sti    
c000e6a5:	c3                   	ret    

c000e6a6 <lockScheduler()>:
c000e6a6:	fa                   	cli    
c000e6a7:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6ad:	c3                   	ret    

c000e6ae <unlockScheduler()>:
c000e6ae:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e6b5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e6bc:	75 01                	jne    c000e6bf <unlockScheduler()+0x11>
c000e6be:	fb                   	sti    
c000e6bf:	c3                   	ret    

c000e6c0 <lockStuff()>:
c000e6c0:	fa                   	cli    
c000e6c1:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6c7:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e6cd:	c3                   	ret    

c000e6ce <unlockStuff()>:
c000e6ce:	83 ec 0c             	sub    esp,0xc
c000e6d1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e6d6:	48                   	dec    eax
c000e6d7:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e6dc:	75 18                	jne    c000e6f6 <unlockStuff()+0x28>
c000e6de:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e6e5:	74 0f                	je     c000e6f6 <unlockStuff()+0x28>
c000e6e7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e6f1:	e8 e6 6c 00 00       	call   c00153dc <schedule()>
c000e6f6:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e6fd:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e704:	75 01                	jne    c000e707 <unlockStuff()+0x39>
c000e706:	fb                   	sti    
c000e707:	83 c4 0c             	add    esp,0xc
c000e70a:	c3                   	ret    

c000e70b <Virt::getAKernelVAS()>:
c000e70b:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e710:	c3                   	ret    

c000e711 <__not_memcpy>:
c000e711:	57                   	push   edi
c000e712:	56                   	push   esi
c000e713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e717:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e71b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e71f:	89 c7                	mov    edi,eax
c000e721:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e723:	5e                   	pop    esi
c000e724:	5f                   	pop    edi
c000e725:	c3                   	ret    

c000e726 <sbrk>:
c000e726:	55                   	push   ebp
c000e727:	57                   	push   edi
c000e728:	56                   	push   esi
c000e729:	53                   	push   ebx
c000e72a:	83 ec 1c             	sub    esp,0x1c
c000e72d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e731:	85 c0                	test   eax,eax
c000e733:	74 66                	je     c000e79b <sbrk+0x75>
c000e735:	78 6b                	js     c000e7a2 <sbrk+0x7c>
c000e737:	8b 15 30 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024030
c000e73d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e741:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000e747:	05 ff 0f 00 00       	add    eax,0xfff
c000e74c:	0f 49 e8             	cmovns ebp,eax
c000e74f:	c1 fd 0c             	sar    ebp,0xc
c000e752:	bb 00 00 00 00       	mov    ebx,0x0
c000e757:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e75d:	8b 3d 30 40 02 c0    	mov    edi,DWORD PTR ds:0xc0024030
c000e763:	e8 a8 06 00 00       	call   c000ee10 <Phys::allocatePage()>
c000e768:	68 01 04 00 00       	push   0x401
c000e76d:	57                   	push   edi
c000e76e:	50                   	push   eax
c000e76f:	56                   	push   esi
c000e770:	e8 a7 3e 00 00       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e775:	81 05 30 40 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024030,0x1000
c000e77f:	83 c3 01             	add    ebx,0x1
c000e782:	83 c4 10             	add    esp,0x10
c000e785:	39 dd                	cmp    ebp,ebx
c000e787:	75 ce                	jne    c000e757 <sbrk+0x31>
c000e789:	0f 20 d8             	mov    eax,cr3
c000e78c:	0f 22 d8             	mov    cr3,eax
c000e78f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e793:	83 c4 1c             	add    esp,0x1c
c000e796:	5b                   	pop    ebx
c000e797:	5e                   	pop    esi
c000e798:	5f                   	pop    edi
c000e799:	5d                   	pop    ebp
c000e79a:	c3                   	ret    
c000e79b:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000e7a0:	eb f1                	jmp    c000e793 <sbrk+0x6d>
c000e7a2:	83 ec 08             	sub    esp,0x8
c000e7a5:	50                   	push   eax
c000e7a6:	68 94 1f 02 c0       	push   0xc0021f94
c000e7ab:	e8 9e 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7b8:	eb d9                	jmp    c000e793 <sbrk+0x6d>

c000e7ba <sbrk_thunk>:
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c1:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e7c6:	7f 10                	jg     c000e7d8 <sbrk_thunk+0x1e>
c000e7c8:	83 ec 0c             	sub    esp,0xc
c000e7cb:	50                   	push   eax
c000e7cc:	e8 55 ff ff ff       	call   c000e726 <sbrk>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	83 c4 0c             	add    esp,0xc
c000e7d7:	c3                   	ret    
c000e7d8:	83 ec 08             	sub    esp,0x8
c000e7db:	50                   	push   eax
c000e7dc:	68 c4 1f 02 c0       	push   0xc0021fc4
c000e7e1:	e8 68 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7e6:	83 c4 10             	add    esp,0x10
c000e7e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7ee:	eb e4                	jmp    c000e7d4 <sbrk_thunk+0x1a>

c000e7f0 <mmap>:
c000e7f0:	55                   	push   ebp
c000e7f1:	57                   	push   edi
c000e7f2:	56                   	push   esi
c000e7f3:	53                   	push   ebx
c000e7f4:	83 ec 18             	sub    esp,0x18
c000e7f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fb:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e801:	89 fb                	mov    ebx,edi
c000e803:	c1 eb 0c             	shr    ebx,0xc
c000e806:	53                   	push   ebx
c000e807:	e8 37 37 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000e80c:	89 c5                	mov    ebp,eax
c000e80e:	83 c4 10             	add    esp,0x10
c000e811:	85 db                	test   ebx,ebx
c000e813:	7e 2f                	jle    c000e844 <mmap+0x54>
c000e815:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e81b:	01 c7                	add    edi,eax
c000e81d:	89 c3                	mov    ebx,eax
c000e81f:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e825:	e8 e6 05 00 00       	call   c000ee10 <Phys::allocatePage()>
c000e82a:	68 01 04 00 00       	push   0x401
c000e82f:	53                   	push   ebx
c000e830:	50                   	push   eax
c000e831:	56                   	push   esi
c000e832:	e8 e5 3d 00 00       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e837:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	39 fb                	cmp    ebx,edi
c000e842:	75 db                	jne    c000e81f <mmap+0x2f>
c000e844:	89 e8                	mov    eax,ebp
c000e846:	83 c4 0c             	add    esp,0xc
c000e849:	5b                   	pop    ebx
c000e84a:	5e                   	pop    esi
c000e84b:	5f                   	pop    edi
c000e84c:	5d                   	pop    ebp
c000e84d:	c3                   	ret    

c000e84e <munmap>:
c000e84e:	83 ec 18             	sub    esp,0x18
c000e851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e855:	e8 e7 39 00 00       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c000e85a:	b8 00 00 00 00       	mov    eax,0x0
c000e85f:	83 c4 1c             	add    esp,0x1c
c000e862:	c3                   	ret    

c000e863 <liballoc_lock()>:
c000e863:	fa                   	cli    
c000e864:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e86b:	b8 00 00 00 00       	mov    eax,0x0
c000e870:	c3                   	ret    

c000e871 <liballoc_unlock()>:
c000e871:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e879:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e880:	75 01                	jne    c000e883 <liballoc_unlock()+0x12>
c000e882:	fb                   	sti    
c000e883:	b8 00 00 00 00       	mov    eax,0x0
c000e888:	c3                   	ret    

c000e889 <liballoc_alloc(int)>:
c000e889:	83 ec 10             	sub    esp,0x10
c000e88c:	6a 01                	push   0x1
c000e88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e892:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e898:	e8 87 3e 00 00       	call   c0012724 <VAS::allocatePages(int, int)>
c000e89d:	83 c4 1c             	add    esp,0x1c
c000e8a0:	c3                   	ret    

c000e8a1 <liballoc_free(void*, int)>:
c000e8a1:	83 ec 14             	sub    esp,0x14
c000e8a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8a8:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e8ae:	e8 cb 3a 00 00       	call   c001237e <VAS::freeAllocatedPages(unsigned long)>
c000e8b3:	b8 00 00 00 00       	mov    eax,0x0
c000e8b8:	83 c4 1c             	add    esp,0x1c
c000e8bb:	c3                   	ret    

c000e8bc <realloc>:
c000e8bc:	83 ec 14             	sub    esp,0x14
c000e8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c7:	e8 b9 2e ff ff       	call   c0001785 <dlrealloc>
c000e8cc:	83 c4 1c             	add    esp,0x1c
c000e8cf:	c3                   	ret    

c000e8d0 <malloc>:
c000e8d0:	83 ec 18             	sub    esp,0x18
c000e8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d7:	e8 6c 29 ff ff       	call   c0001248 <dlmalloc>
c000e8dc:	83 c4 1c             	add    esp,0x1c
c000e8df:	c3                   	ret    

c000e8e0 <free>:
c000e8e0:	83 ec 18             	sub    esp,0x18
c000e8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8e7:	e8 9a 24 ff ff       	call   c0000d86 <dlfree>
c000e8ec:	83 c4 1c             	add    esp,0x1c
c000e8ef:	c3                   	ret    

c000e8f0 <rfree>:
c000e8f0:	83 ec 18             	sub    esp,0x18
c000e8f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8f7:	e8 8a 24 ff ff       	call   c0000d86 <dlfree>
c000e8fc:	83 c4 1c             	add    esp,0x1c
c000e8ff:	c3                   	ret    

c000e900 <calloc>:
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 10             	sub    esp,0x10
c000e905:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e909:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e90e:	53                   	push   ebx
c000e90f:	e8 bc ff ff ff       	call   c000e8d0 <malloc>
c000e914:	89 c6                	mov    esi,eax
c000e916:	83 c4 0c             	add    esp,0xc
c000e919:	53                   	push   ebx
c000e91a:	6a 00                	push   0x0
c000e91c:	50                   	push   eax
c000e91d:	e8 ce 1b ff ff       	call   c00004f0 <memset>
c000e922:	89 f0                	mov    eax,esi
c000e924:	83 c4 14             	add    esp,0x14
c000e927:	5b                   	pop    ebx
c000e928:	5e                   	pop    esi
c000e929:	c3                   	ret    
c000e92a:	66 90                	xchg   ax,ax

c000e92c <KeMailboxTryPost(Mailbox*, void*)>:
c000e92c:	83 ec 10             	sub    esp,0x10
c000e92f:	fa                   	cli    
c000e930:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e935:	83 c0 01             	add    eax,0x1
c000e938:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e93d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e949:	85 c0                	test   eax,eax
c000e94b:	75 23                	jne    c000e970 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e94d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e951:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e955:	89 10                	mov    DWORD PTR [eax],edx
c000e957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e95b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e95e:	8d 50 01             	lea    edx,[eax+0x1]
c000e961:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e965:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e968:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e96d:	8d 76 00             	lea    esi,[esi+0x0]
c000e970:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e978:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e97d:	85 c0                	test   eax,eax
c000e97f:	75 03                	jne    c000e984 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000e981:	fb                   	sti    
c000e982:	66 90                	xchg   ax,ax
c000e984:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e988:	83 c4 10             	add    esp,0x10
c000e98b:	c3                   	ret    

c000e98c <KeMailboxTryGet(Mailbox*, void**)>:
c000e98c:	83 ec 10             	sub    esp,0x10
c000e98f:	fa                   	cli    
c000e990:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e995:	83 c0 01             	add    eax,0x1
c000e998:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e99d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9a9:	83 f8 01             	cmp    eax,0x1
c000e9ac:	75 22                	jne    c000e9d0 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000e9ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9b8:	89 10                	mov    DWORD PTR [eax],edx
c000e9ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9c1:	8d 50 ff             	lea    edx,[eax-0x1]
c000e9c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9cb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e9d0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e9d8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9dd:	85 c0                	test   eax,eax
c000e9df:	75 03                	jne    c000e9e4 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000e9e1:	fb                   	sti    
c000e9e2:	66 90                	xchg   ax,ax
c000e9e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9e8:	83 c4 10             	add    esp,0x10
c000e9eb:	c3                   	ret    

c000e9ec <KeMailboxCreate()>:
c000e9ec:	83 ec 1c             	sub    esp,0x1c
c000e9ef:	83 ec 0c             	sub    esp,0xc
c000e9f2:	6a 08                	push   0x8
c000e9f4:	e8 d7 fe ff ff       	call   c000e8d0 <malloc>
c000e9f9:	83 c4 10             	add    esp,0x10
c000e9fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ea0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ea15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea19:	83 c4 1c             	add    esp,0x1c
c000ea1c:	c3                   	ret    
c000ea1d:	8d 76 00             	lea    esi,[esi+0x0]

c000ea20 <KeMailboxPost(Mailbox*, void*)>:
c000ea20:	83 ec 1c             	sub    esp,0x1c
c000ea23:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea30:	e8 f7 fe ff ff       	call   c000e92c <KeMailboxTryPost(Mailbox*, void*)>
c000ea35:	83 c4 08             	add    esp,0x8
c000ea38:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea3c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea40:	83 f0 01             	xor    eax,0x1
c000ea43:	0f b6 c0             	movzx  eax,al
c000ea46:	85 c0                	test   eax,eax
c000ea48:	74 26                	je     c000ea70 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ea4a:	fa                   	cli    
c000ea4b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea50:	83 c0 01             	add    eax,0x1
c000ea53:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea58:	e8 7f 69 00 00       	call   c00153dc <schedule()>
c000ea5d:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ea65:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea6a:	85 c0                	test   eax,eax
c000ea6c:	75 02                	jne    c000ea70 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ea6e:	fb                   	sti    
c000ea6f:	90                   	nop
c000ea70:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ea75:	85 c0                	test   eax,eax
c000ea77:	75 03                	jne    c000ea7c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000ea79:	eb ad                	jmp    c000ea28 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ea7b:	90                   	nop
c000ea7c:	90                   	nop
c000ea7d:	83 c4 1c             	add    esp,0x1c
c000ea80:	c3                   	ret    
c000ea81:	8d 76 00             	lea    esi,[esi+0x0]

c000ea84 <KeMailboxGet(Mailbox*, void**)>:
c000ea84:	83 ec 1c             	sub    esp,0x1c
c000ea87:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea94:	e8 f3 fe ff ff       	call   c000e98c <KeMailboxTryGet(Mailbox*, void**)>
c000ea99:	83 c4 08             	add    esp,0x8
c000ea9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eaa0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaa4:	83 f0 01             	xor    eax,0x1
c000eaa7:	0f b6 c0             	movzx  eax,al
c000eaaa:	85 c0                	test   eax,eax
c000eaac:	74 26                	je     c000ead4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eaae:	fa                   	cli    
c000eaaf:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eab4:	83 c0 01             	add    eax,0x1
c000eab7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eabc:	e8 1b 69 00 00       	call   c00153dc <schedule()>
c000eac1:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000eac9:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eace:	85 c0                	test   eax,eax
c000ead0:	75 02                	jne    c000ead4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ead2:	fb                   	sti    
c000ead3:	90                   	nop
c000ead4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ead9:	85 c0                	test   eax,eax
c000eadb:	75 03                	jne    c000eae0 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000eadd:	eb ad                	jmp    c000ea8c <KeMailboxGet(Mailbox*, void**)+0x8>
c000eadf:	90                   	nop
c000eae0:	90                   	nop
c000eae1:	83 c4 1c             	add    esp,0x1c
c000eae4:	c3                   	ret    
c000eae5:	8d 76 00             	lea    esi,[esi+0x0]

c000eae8 <KeMailboxDestroy(Mailbox*)>:
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	83 ec 0c             	sub    esp,0xc
c000eaee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf2:	e8 e9 fd ff ff       	call   c000e8e0 <free>
c000eaf7:	83 c4 10             	add    esp,0x10
c000eafa:	90                   	nop
c000eafb:	83 c4 0c             	add    esp,0xc
c000eafe:	c3                   	ret    

c000eaff <KeEntryPoint>:
c000eaff:	57                   	push   edi
c000eb00:	bf f9 03 00 00       	mov    edi,0x3f9
c000eb05:	56                   	push   esi
c000eb06:	31 f6                	xor    esi,esi
c000eb08:	53                   	push   ebx
c000eb09:	89 fa                	mov    edx,edi
c000eb0b:	83 ec 2c             	sub    esp,0x2c
c000eb0e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000eb13:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000eb18:	89 f0                	mov    eax,esi
c000eb1a:	ee                   	out    dx,al
c000eb1b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000eb20:	b0 80                	mov    al,0x80
c000eb22:	89 da                	mov    edx,ebx
c000eb24:	ee                   	out    dx,al
c000eb25:	b1 03                	mov    cl,0x3
c000eb27:	ba f8 03 00 00       	mov    edx,0x3f8
c000eb2c:	88 c8                	mov    al,cl
c000eb2e:	ee                   	out    dx,al
c000eb2f:	89 f0                	mov    eax,esi
c000eb31:	89 fa                	mov    edx,edi
c000eb33:	ee                   	out    dx,al
c000eb34:	88 c8                	mov    al,cl
c000eb36:	89 da                	mov    edx,ebx
c000eb38:	ee                   	out    dx,al
c000eb39:	b0 c7                	mov    al,0xc7
c000eb3b:	ba fa 03 00 00       	mov    edx,0x3fa
c000eb40:	ee                   	out    dx,al
c000eb41:	b0 0b                	mov    al,0xb
c000eb43:	ba fc 03 00 00       	mov    edx,0x3fc
c000eb48:	ee                   	out    dx,al
c000eb49:	68 d3 1f 02 c0       	push   0xc0021fd3
c000eb4e:	e8 fb 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb53:	e8 14 da ff ff       	call   c000c56c <KeDisplaySplashScreen()>
c000eb58:	a1 24 05 00 00       	mov    eax,ds:0x524
c000eb5d:	05 ff 0f 00 00       	add    eax,0xfff
c000eb62:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb67:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb6a:	e8 13 04 00 00       	call   c000ef82 <Phys::physicalMemorySetup(unsigned int)>
c000eb6f:	e8 a3 35 00 00       	call   c0012117 <Virt::virtualMemorySetup()>
c000eb74:	e8 3d d9 ff ff       	call   c000c4b6 <KeInitialiseAtexit()>
c000eb79:	c7 04 24 ea 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fea
c000eb80:	e8 c9 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb85:	58                   	pop    eax
c000eb86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000eb8a:	53                   	push   ebx
c000eb8b:	e8 6e 38 00 00       	call   c00123fe <VAS::VAS()>
c000eb90:	c7 04 24 fa 1f 02 c0 	mov    DWORD PTR [esp],0xc0021ffa
c000eb97:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000eb9d:	e8 ac 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eba2:	e8 17 11 01 00       	call   c001fcbe <_init>
c000eba7:	c7 04 24 0e 20 02 c0 	mov    DWORD PTR [esp],0xc002200e
c000ebae:	e8 9b 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebb3:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ebba:	e8 11 fd ff ff       	call   c000e8d0 <malloc>
c000ebbf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebc2:	89 c6                	mov    esi,eax
c000ebc4:	e8 67 ea ff ff       	call   c000d630 <Computer::Computer()>
c000ebc9:	5a                   	pop    edx
c000ebca:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000ebd0:	59                   	pop    ecx
c000ebd1:	56                   	push   esi
c000ebd2:	68 1d 20 02 c0       	push   0xc002201d
c000ebd7:	e8 72 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebdc:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ebe1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebe3:	53                   	push   ebx
c000ebe4:	6a 00                	push   0x0
c000ebe6:	6a 00                	push   0x0
c000ebe8:	50                   	push   eax
c000ebe9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebec:	83 c4 14             	add    esp,0x14
c000ebef:	53                   	push   ebx
c000ebf0:	e8 bf 38 00 00       	call   c00124b4 <VAS::~VAS()>
c000ebf5:	83 c4 30             	add    esp,0x30
c000ebf8:	5b                   	pop    ebx
c000ebf9:	5e                   	pop    esi
c000ebfa:	5f                   	pop    edi
c000ebfb:	c3                   	ret    

c000ebfc <Mutex::Mutex()>:
c000ebfc:	83 ec 0c             	sub    esp,0xc
c000ebff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec03:	83 ec 08             	sub    esp,0x8
c000ec06:	6a 01                	push   0x1
c000ec08:	50                   	push   eax
c000ec09:	e8 32 0c 00 00       	call   c000f840 <Semaphore::Semaphore(int)>
c000ec0e:	83 c4 10             	add    esp,0x10
c000ec11:	90                   	nop
c000ec12:	83 c4 0c             	add    esp,0xc
c000ec15:	c3                   	ret    

c000ec16 <KePanic(char const*)>:
c000ec16:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000ec1d:	e9 e0 96 00 00       	jmp    c0018302 <HalPanic(char const*)>

c000ec22 <Phys::allocateDMA(unsigned long)>:
c000ec22:	55                   	push   ebp
c000ec23:	31 ed                	xor    ebp,ebp
c000ec25:	57                   	push   edi
c000ec26:	56                   	push   esi
c000ec27:	31 f6                	xor    esi,esi
c000ec29:	53                   	push   ebx
c000ec2a:	31 db                	xor    ebx,ebx
c000ec2c:	83 ec 1c             	sub    esp,0x1c
c000ec2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec33:	05 ff 0f 00 00       	add    eax,0xfff
c000ec38:	c1 e8 0c             	shr    eax,0xc
c000ec3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec3f:	31 c0                	xor    eax,eax
c000ec41:	eb 1b                	jmp    c000ec5e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec43:	8d 78 01             	lea    edi,[eax+0x1]
c000ec46:	85 c0                	test   eax,eax
c000ec48:	0f 44 eb             	cmove  ebp,ebx
c000ec4b:	0f 44 f3             	cmove  esi,ebx
c000ec4e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ec52:	74 37                	je     c000ec8b <Phys::allocateDMA(unsigned long)+0x69>
c000ec54:	89 f8                	mov    eax,edi
c000ec56:	83 c3 01             	add    ebx,0x1
c000ec59:	83 fb 0f             	cmp    ebx,0xf
c000ec5c:	7f 13                	jg     c000ec71 <Phys::allocateDMA(unsigned long)+0x4f>
c000ec5e:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ec65:	74 dc                	je     c000ec43 <Phys::allocateDMA(unsigned long)+0x21>
c000ec67:	31 c0                	xor    eax,eax
c000ec69:	83 c3 01             	add    ebx,0x1
c000ec6c:	83 fb 0f             	cmp    ebx,0xf
c000ec6f:	7e ed                	jle    c000ec5e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec71:	83 ec 0c             	sub    esp,0xc
c000ec74:	68 34 20 02 c0       	push   0xc0022034
c000ec79:	e8 98 ff ff ff       	call   c000ec16 <KePanic(char const*)>
c000ec7e:	83 c4 10             	add    esp,0x10
c000ec81:	31 c0                	xor    eax,eax
c000ec83:	83 c4 1c             	add    esp,0x1c
c000ec86:	5b                   	pop    ebx
c000ec87:	5e                   	pop    esi
c000ec88:	5f                   	pop    edi
c000ec89:	5d                   	pop    ebp
c000ec8a:	c3                   	ret    
c000ec8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ec8f:	89 f2                	mov    edx,esi
c000ec91:	c1 fa 04             	sar    edx,0x4
c000ec94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec98:	01 f1                	add    ecx,esi
c000ec9a:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ec9d:	83 e9 01             	sub    ecx,0x1
c000eca0:	0f 48 ca             	cmovs  ecx,edx
c000eca3:	c1 f9 04             	sar    ecx,0x4
c000eca6:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ecaa:	74 06                	je     c000ecb2 <Phys::allocateDMA(unsigned long)+0x90>
c000ecac:	89 eb                	mov    ebx,ebp
c000ecae:	31 c0                	xor    eax,eax
c000ecb0:	eb b7                	jmp    c000ec69 <Phys::allocateDMA(unsigned long)+0x47>
c000ecb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecb6:	85 d2                	test   edx,edx
c000ecb8:	74 17                	je     c000ecd1 <Phys::allocateDMA(unsigned long)+0xaf>
c000ecba:	8d 96 b0 bd 02 c0    	lea    edx,[esi-0x3ffd4250]
c000ecc0:	8d 84 06 b1 bd 02 c0 	lea    eax,[esi+eax*1-0x3ffd424f]
c000ecc7:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ecca:	83 c2 01             	add    edx,0x1
c000eccd:	39 d0                	cmp    eax,edx
c000eccf:	75 f6                	jne    c000ecc7 <Phys::allocateDMA(unsigned long)+0xa5>
c000ecd1:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ecd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecdb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecdf:	01 c2                	add    edx,eax
c000ece1:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ece7:	85 c9                	test   ecx,ecx
c000ece9:	74 17                	je     c000ed02 <Phys::allocateDMA(unsigned long)+0xe0>
c000eceb:	83 ec 0c             	sub    esp,0xc
c000ecee:	68 34 20 02 c0       	push   0xc0022034
c000ecf3:	e8 1e ff ff ff       	call   c000ec16 <KePanic(char const*)>
c000ecf8:	83 c4 10             	add    esp,0x10
c000ecfb:	89 f8                	mov    eax,edi
c000ecfd:	e9 54 ff ff ff       	jmp    c000ec56 <Phys::allocateDMA(unsigned long)+0x34>
c000ed02:	c1 e6 0c             	shl    esi,0xc
c000ed05:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000ed0b:	e9 73 ff ff ff       	jmp    c000ec83 <Phys::allocateDMA(unsigned long)+0x61>

c000ed10 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ed10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed14:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ed1a:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ed1f:	c1 ea 0c             	shr    edx,0xc
c000ed22:	29 d0                	sub    eax,edx
c000ed24:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ed29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed2d:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ed32:	c1 e8 0c             	shr    eax,0xc
c000ed35:	85 d2                	test   edx,edx
c000ed37:	74 11                	je     c000ed4a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ed39:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000ed3e:	01 c2                	add    edx,eax
c000ed40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ed43:	83 c0 01             	add    eax,0x1
c000ed46:	39 d0                	cmp    eax,edx
c000ed48:	75 f6                	jne    c000ed40 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ed4a:	c3                   	ret    

c000ed4b <Phys::setPageState(unsigned long, bool)>:
c000ed4b:	57                   	push   edi
c000ed4c:	56                   	push   esi
c000ed4d:	8b 35 34 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024034
c000ed53:	53                   	push   ebx
c000ed54:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ed59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ed61:	89 ca                	mov    edx,ecx
c000ed63:	83 e1 07             	and    ecx,0x7
c000ed66:	c1 ea 03             	shr    edx,0x3
c000ed69:	0f b6 c0             	movzx  eax,al
c000ed6c:	d3 c3                	rol    ebx,cl
c000ed6e:	01 d6                	add    esi,edx
c000ed70:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ed73:	d3 e0                	shl    eax,cl
c000ed75:	21 fb                	and    ebx,edi
c000ed77:	88 1e                	mov    BYTE PTR [esi],bl
c000ed79:	8b 1d 34 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024034
c000ed7f:	01 da                	add    edx,ebx
c000ed81:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ed83:	09 c8                	or     eax,ecx
c000ed85:	88 02                	mov    BYTE PTR [edx],al
c000ed87:	5b                   	pop    ebx
c000ed88:	5e                   	pop    esi
c000ed89:	5f                   	pop    edi
c000ed8a:	c3                   	ret    

c000ed8b <Phys::getPageState(unsigned long)>:
c000ed8b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed8f:	8b 15 34 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024034
c000ed95:	89 c8                	mov    eax,ecx
c000ed97:	83 e1 07             	and    ecx,0x7
c000ed9a:	c1 e8 03             	shr    eax,0x3
c000ed9d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000eda1:	d3 f8                	sar    eax,cl
c000eda3:	83 e0 01             	and    eax,0x1
c000eda6:	c3                   	ret    

c000eda7 <Phys::freePage(unsigned long)>:
c000eda7:	53                   	push   ebx
c000eda8:	83 ec 08             	sub    esp,0x8
c000edab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edaf:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000edb5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000edbb:	76 41                	jbe    c000edfe <Phys::freePage(unsigned long)+0x57>
c000edbd:	c1 e8 0c             	shr    eax,0xc
c000edc0:	50                   	push   eax
c000edc1:	89 c3                	mov    ebx,eax
c000edc3:	e8 c3 ff ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000edc8:	5a                   	pop    edx
c000edc9:	84 c0                	test   al,al
c000edcb:	74 20                	je     c000eded <Phys::freePage(unsigned long)+0x46>
c000edcd:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000edd2:	83 ec 08             	sub    esp,0x8
c000edd5:	6a 00                	push   0x0
c000edd7:	53                   	push   ebx
c000edd8:	83 e8 01             	sub    eax,0x1
c000eddb:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ede0:	e8 66 ff ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000ede5:	83 c4 10             	add    esp,0x10
c000ede8:	83 c4 08             	add    esp,0x8
c000edeb:	5b                   	pop    ebx
c000edec:	c3                   	ret    
c000eded:	c7 44 24 10 d9 20 02 c0 	mov    DWORD PTR [esp+0x10],0xc00220d9
c000edf5:	83 c4 08             	add    esp,0x8
c000edf8:	5b                   	pop    ebx
c000edf9:	e9 18 fe ff ff       	jmp    c000ec16 <KePanic(char const*)>
c000edfe:	68 00 10 00 00       	push   0x1000
c000ee03:	50                   	push   eax
c000ee04:	e8 07 ff ff ff       	call   c000ed10 <Phys::freeDMA(unsigned long, unsigned long)>
c000ee09:	59                   	pop    ecx
c000ee0a:	5b                   	pop    ebx
c000ee0b:	83 c4 08             	add    esp,0x8
c000ee0e:	5b                   	pop    ebx
c000ee0f:	c3                   	ret    

c000ee10 <Phys::allocatePage()>:
c000ee10:	56                   	push   esi
c000ee11:	53                   	push   ebx
c000ee12:	83 ec 14             	sub    esp,0x14
c000ee15:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000ee1b:	89 f3                	mov    ebx,esi
c000ee1d:	eb 0a                	jmp    c000ee29 <Phys::allocatePage()+0x19>
c000ee1f:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000ee25:	39 de                	cmp    esi,ebx
c000ee27:	74 26                	je     c000ee4f <Phys::allocatePage()+0x3f>
c000ee29:	53                   	push   ebx
c000ee2a:	e8 5c ff ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000ee2f:	5a                   	pop    edx
c000ee30:	84 c0                	test   al,al
c000ee32:	74 67                	je     c000ee9b <Phys::allocatePage()+0x8b>
c000ee34:	83 c3 01             	add    ebx,0x1
c000ee37:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ee3d:	75 e0                	jne    c000ee1f <Phys::allocatePage()+0xf>
c000ee3f:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000ee49:	31 db                	xor    ebx,ebx
c000ee4b:	39 de                	cmp    esi,ebx
c000ee4d:	75 da                	jne    c000ee29 <Phys::allocatePage()+0x19>
c000ee4f:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000ee54:	83 ec 0c             	sub    esp,0xc
c000ee57:	83 f0 01             	xor    eax,0x1
c000ee5a:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ee5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee67:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ee6d:	50                   	push   eax
c000ee6e:	e8 0b 40 00 00       	call   c0012e7e <VAS::scanForEviction()>
c000ee73:	83 c4 10             	add    esp,0x10
c000ee76:	85 c0                	test   eax,eax
c000ee78:	75 48                	jne    c000eec2 <Phys::allocatePage()+0xb2>
c000ee7a:	83 ec 0c             	sub    esp,0xc
c000ee7d:	68 5c 20 02 c0       	push   0xc002205c
c000ee82:	e8 8f fd ff ff       	call   c000ec16 <KePanic(char const*)>
c000ee87:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	53                   	push   ebx
c000ee91:	e8 f5 fe ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000ee96:	5a                   	pop    edx
c000ee97:	84 c0                	test   al,al
c000ee99:	75 99                	jne    c000ee34 <Phys::allocatePage()+0x24>
c000ee9b:	6a 01                	push   0x1
c000ee9d:	53                   	push   ebx
c000ee9e:	e8 a8 fe ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000eea3:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000eea9:	59                   	pop    ecx
c000eeaa:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000eeaf:	5b                   	pop    ebx
c000eeb0:	83 c2 01             	add    edx,0x1
c000eeb3:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000eeb9:	c1 e0 0c             	shl    eax,0xc
c000eebc:	83 c4 14             	add    esp,0x14
c000eebf:	5b                   	pop    ebx
c000eec0:	5e                   	pop    esi
c000eec1:	c3                   	ret    
c000eec2:	83 ec 08             	sub    esp,0x8
c000eec5:	89 c2                	mov    edx,eax
c000eec7:	6a 01                	push   0x1
c000eec9:	c1 ea 0c             	shr    edx,0xc
c000eecc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eed0:	52                   	push   edx
c000eed1:	e8 75 fe ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000eed6:	83 c4 10             	add    esp,0x10
c000eed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eedd:	eb dd                	jmp    c000eebc <Phys::allocatePage()+0xac>

c000eedf <Phys::allocateContiguousPages(int)>:
c000eedf:	57                   	push   edi
c000eee0:	56                   	push   esi
c000eee1:	53                   	push   ebx
c000eee2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eee6:	fa                   	cli    
c000eee7:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c000eeed:	31 db                	xor    ebx,ebx
c000eeef:	83 c2 01             	add    edx,0x1
c000eef2:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c000eef8:	85 db                	test   ebx,ebx
c000eefa:	75 11                	jne    c000ef0d <Phys::allocateContiguousPages(int)+0x2e>
c000eefc:	e8 0f ff ff ff       	call   c000ee10 <Phys::allocatePage()>
c000ef01:	83 fe 01             	cmp    esi,0x1
c000ef04:	89 c7                	mov    edi,eax
c000ef06:	74 21                	je     c000ef29 <Phys::allocateContiguousPages(int)+0x4a>
c000ef08:	bb 01 00 00 00       	mov    ebx,0x1
c000ef0d:	e8 fe fe ff ff       	call   c000ee10 <Phys::allocatePage()>
c000ef12:	89 da                	mov    edx,ebx
c000ef14:	c1 e2 0c             	shl    edx,0xc
c000ef17:	01 fa                	add    edx,edi
c000ef19:	39 c2                	cmp    edx,eax
c000ef1b:	74 24                	je     c000ef41 <Phys::allocateContiguousPages(int)+0x62>
c000ef1d:	83 fe 01             	cmp    esi,0x1
c000ef20:	bb 01 00 00 00       	mov    ebx,0x1
c000ef25:	89 c7                	mov    edi,eax
c000ef27:	75 e4                	jne    c000ef0d <Phys::allocateContiguousPages(int)+0x2e>
c000ef29:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ef31:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ef36:	85 c0                	test   eax,eax
c000ef38:	75 01                	jne    c000ef3b <Phys::allocateContiguousPages(int)+0x5c>
c000ef3a:	fb                   	sti    
c000ef3b:	5b                   	pop    ebx
c000ef3c:	89 f8                	mov    eax,edi
c000ef3e:	5e                   	pop    esi
c000ef3f:	5f                   	pop    edi
c000ef40:	c3                   	ret    
c000ef41:	83 c3 01             	add    ebx,0x1
c000ef44:	39 f3                	cmp    ebx,esi
c000ef46:	75 b0                	jne    c000eef8 <Phys::allocateContiguousPages(int)+0x19>
c000ef48:	eb df                	jmp    c000ef29 <Phys::allocateContiguousPages(int)+0x4a>

c000ef4a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ef4a:	56                   	push   esi
c000ef4b:	53                   	push   ebx
c000ef4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef50:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000ef56:	73 06                	jae    c000ef5e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ef58:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000ef5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef62:	c1 eb 0c             	shr    ebx,0xc
c000ef65:	c1 e8 0c             	shr    eax,0xc
c000ef68:	39 d8                	cmp    eax,ebx
c000ef6a:	73 13                	jae    c000ef7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ef6c:	6a 00                	push   0x0
c000ef6e:	50                   	push   eax
c000ef6f:	8d 70 01             	lea    esi,[eax+0x1]
c000ef72:	e8 d4 fd ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000ef77:	39 f3                	cmp    ebx,esi
c000ef79:	89 f0                	mov    eax,esi
c000ef7b:	5a                   	pop    edx
c000ef7c:	59                   	pop    ecx
c000ef7d:	75 ed                	jne    c000ef6c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ef7f:	5b                   	pop    ebx
c000ef80:	5e                   	pop    esi
c000ef81:	c3                   	ret    

c000ef82 <Phys::physicalMemorySetup(unsigned int)>:
c000ef82:	55                   	push   ebp
c000ef83:	57                   	push   edi
c000ef84:	56                   	push   esi
c000ef85:	53                   	push   ebx
c000ef86:	31 db                	xor    ebx,ebx
c000ef88:	83 ec 40             	sub    esp,0x40
c000ef8b:	6a 10                	push   0x10
c000ef8d:	6a 00                	push   0x0
c000ef8f:	68 b0 bd 02 c0       	push   0xc002bdb0
c000ef94:	e8 57 15 ff ff       	call   c00004f0 <memset>
c000ef99:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000efa2:	05 00 10 00 00       	add    eax,0x1000
c000efa7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efab:	5a                   	pop    edx
c000efac:	59                   	pop    ecx
c000efad:	50                   	push   eax
c000efae:	68 ef 20 02 c0       	push   0xc00220ef
c000efb3:	e8 96 7f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000efb8:	83 c4 10             	add    esp,0x10
c000efbb:	83 ec 08             	sub    esp,0x8
c000efbe:	6a 01                	push   0x1
c000efc0:	53                   	push   ebx
c000efc1:	83 c3 01             	add    ebx,0x1
c000efc4:	e8 82 fd ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000efc9:	83 c4 10             	add    esp,0x10
c000efcc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000efd2:	75 e7                	jne    c000efbb <Phys::physicalMemorySetup(unsigned int)+0x39>
c000efd4:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000efdb:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000efe2:	c1 e0 08             	shl    eax,0x8
c000efe5:	09 c2                	or     edx,eax
c000efe7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000efeb:	0f 84 43 01 00 00    	je     c000f134 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000eff1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000eff9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000effe:	e9 82 00 00 00       	jmp    c000f085 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f003:	ba 00 00 08 00       	mov    edx,0x80000
c000f008:	89 c1                	mov    ecx,eax
c000f00a:	39 f2                	cmp    edx,esi
c000f00c:	19 f9                	sbb    ecx,edi
c000f00e:	0f 82 c0 00 00 00    	jb     c000f0d4 <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f014:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f018:	89 c5                	mov    ebp,eax
c000f01a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f01e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f022:	19 cd                	sbb    ebp,ecx
c000f024:	0f 83 af 00 00 00    	jae    c000f0d9 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f02a:	89 d6                	mov    esi,edx
c000f02c:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f031:	39 f2                	cmp    edx,esi
c000f033:	89 cf                	mov    edi,ecx
c000f035:	19 c8                	sbb    eax,ecx
c000f037:	73 07                	jae    c000f040 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f039:	be 00 00 0a 00       	mov    esi,0xa0000
c000f03e:	31 ff                	xor    edi,edi
c000f040:	89 f2                	mov    edx,esi
c000f042:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f047:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f04d:	89 f9                	mov    ecx,edi
c000f04f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f053:	83 d1 ff             	adc    ecx,0xffffffff
c000f056:	39 d0                	cmp    eax,edx
c000f058:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f05c:	b8 00 00 00 00       	mov    eax,0x0
c000f061:	19 c8                	sbb    eax,ecx
c000f063:	0f 82 9d 01 00 00    	jb     c000f206 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f069:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f06d:	83 c3 18             	add    ebx,0x18
c000f070:	83 c6 01             	add    esi,0x1
c000f073:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f077:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f07b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f07f:	0f 84 bf 00 00 00    	je     c000f144 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f085:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f087:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f08a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f08d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f090:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f094:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f097:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f09b:	01 f0                	add    eax,esi
c000f09d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f0a5:	55                   	push   ebp
c000f0a6:	11 fa                	adc    edx,edi
c000f0a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f0b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0b4:	50                   	push   eax
c000f0b5:	56                   	push   esi
c000f0b6:	68 8c 20 02 c0       	push   0xc002208c
c000f0bb:	e8 8e 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f0c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f0c4:	83 c4 10             	add    esp,0x10
c000f0c7:	09 f8                	or     eax,edi
c000f0c9:	75 79                	jne    c000f144 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f0cb:	83 fd 01             	cmp    ebp,0x1
c000f0ce:	0f 84 2f ff ff ff    	je     c000f003 <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f0d4:	83 fd 01             	cmp    ebp,0x1
c000f0d7:	75 90                	jne    c000f069 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0d9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0dd:	31 d2                	xor    edx,edx
c000f0df:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f0e3:	89 c8                	mov    eax,ecx
c000f0e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0e9:	19 d1                	sbb    ecx,edx
c000f0eb:	0f 82 78 ff ff ff    	jb     c000f069 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0f1:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f0f6:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f0fa:	b9 00 00 00 00       	mov    ecx,0x0
c000f0ff:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f103:	0f 83 60 ff ff ff    	jae    c000f069 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f109:	39 c6                	cmp    esi,eax
c000f10b:	19 d7                	sbb    edi,edx
c000f10d:	0f 83 ff 00 00 00    	jae    c000f212 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f113:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f117:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f11b:	29 c7                	sub    edi,eax
c000f11d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f121:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f125:	19 d5                	sbb    ebp,edx
c000f127:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f12b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f12f:	e9 de 00 00 00       	jmp    c000f212 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f134:	83 ec 0c             	sub    esp,0xc
c000f137:	68 07 21 02 c0       	push   0xc0022107
c000f13c:	e8 d5 fa ff ff       	call   c000ec16 <KePanic(char const*)>
c000f141:	83 c4 10             	add    esp,0x10
c000f144:	83 ec 08             	sub    esp,0x8
c000f147:	bb 60 00 00 00       	mov    ebx,0x60
c000f14c:	6a 00                	push   0x0
c000f14e:	6a 06                	push   0x6
c000f150:	e8 f6 fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f155:	58                   	pop    eax
c000f156:	5a                   	pop    edx
c000f157:	6a 00                	push   0x0
c000f159:	6a 07                	push   0x7
c000f15b:	e8 eb fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f160:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f166:	83 c4 10             	add    esp,0x10
c000f169:	83 c1 02             	add    ecx,0x2
c000f16c:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f172:	83 ec 08             	sub    esp,0x8
c000f175:	6a 00                	push   0x0
c000f177:	53                   	push   ebx
c000f178:	83 c3 01             	add    ebx,0x1
c000f17b:	e8 cb fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f180:	83 c4 10             	add    esp,0x10
c000f183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f189:	75 e7                	jne    c000f172 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000f18b:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f190:	bb 40 01 00 00       	mov    ebx,0x140
c000f195:	83 c0 20             	add    eax,0x20
c000f198:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f19d:	eb 26                	jmp    c000f1c5 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000f19f:	83 ec 08             	sub    esp,0x8
c000f1a2:	6a 00                	push   0x0
c000f1a4:	53                   	push   ebx
c000f1a5:	83 c3 01             	add    ebx,0x1
c000f1a8:	e8 9e fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f1ad:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1b2:	83 c4 10             	add    esp,0x10
c000f1b5:	83 c0 01             	add    eax,0x1
c000f1b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f1be:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1c3:	74 07                	je     c000f1cc <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000f1c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f1ca:	7e d3                	jle    c000f19f <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000f1cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f1d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f1d6:	7f 26                	jg     c000f1fe <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000f1d8:	83 ec 08             	sub    esp,0x8
c000f1db:	6a 00                	push   0x0
c000f1dd:	53                   	push   ebx
c000f1de:	83 c3 01             	add    ebx,0x1
c000f1e1:	e8 65 fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f1e6:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1eb:	83 c4 10             	add    esp,0x10
c000f1ee:	83 c0 01             	add    eax,0x1
c000f1f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f1f7:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1fc:	75 d3                	jne    c000f1d1 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000f1fe:	83 c4 3c             	add    esp,0x3c
c000f201:	5b                   	pop    ebx
c000f202:	5e                   	pop    esi
c000f203:	5f                   	pop    edi
c000f204:	5d                   	pop    ebp
c000f205:	c3                   	ret    
c000f206:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000f20a:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000f212:	83 ec 04             	sub    esp,0x4
c000f215:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f219:	56                   	push   esi
c000f21a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f21e:	57                   	push   edi
c000f21f:	68 b0 20 02 c0       	push   0xc00220b0
c000f224:	e8 25 7d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f229:	5d                   	pop    ebp
c000f22a:	58                   	pop    eax
c000f22b:	56                   	push   esi
c000f22c:	57                   	push   edi
c000f22d:	e8 18 fd ff ff       	call   c000ef4a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f232:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f236:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f23a:	83 c4 0c             	add    esp,0xc
c000f23d:	8b 35 ac bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bdac
c000f243:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f247:	01 f0                	add    eax,esi
c000f249:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f24e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f255:	52                   	push   edx
c000f256:	50                   	push   eax
c000f257:	68 15 21 02 c0       	push   0xc0022115
c000f25c:	e8 ed 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f261:	83 c4 10             	add    esp,0x10
c000f264:	e9 00 fe ff ff       	jmp    c000f069 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f269:	90                   	nop

c000f26a <Pipe::isAtty()>:
c000f26a:	31 c0                	xor    eax,eax
c000f26c:	c3                   	ret    
c000f26d:	90                   	nop

c000f26e <Pipe::~Pipe()>:
c000f26e:	83 ec 0c             	sub    esp,0xc
c000f271:	ba 74 21 02 c0       	mov    edx,0xc0022174
c000f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27a:	89 10                	mov    DWORD PTR [eax],edx
c000f27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f280:	83 ec 0c             	sub    esp,0xc
c000f283:	50                   	push   eax
c000f284:	e8 51 2a 00 00       	call   c0011cda <UnixFile::~UnixFile()>
c000f289:	83 c4 10             	add    esp,0x10
c000f28c:	90                   	nop
c000f28d:	83 c4 0c             	add    esp,0xc
c000f290:	c3                   	ret    
c000f291:	90                   	nop

c000f292 <Pipe::~Pipe()>:
c000f292:	83 ec 0c             	sub    esp,0xc
c000f295:	83 ec 0c             	sub    esp,0xc
c000f298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f29c:	e8 cd ff ff ff       	call   c000f26e <Pipe::~Pipe()>
c000f2a1:	83 c4 10             	add    esp,0x10
c000f2a4:	83 ec 08             	sub    esp,0x8
c000f2a7:	6a 20                	push   0x20
c000f2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2ad:	e8 a9 d3 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c000f2b2:	83 c4 10             	add    esp,0x10
c000f2b5:	83 c4 0c             	add    esp,0xc
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <Pipe::write(unsigned long long, void*, int*)>:
c000f2ba:	55                   	push   ebp
c000f2bb:	57                   	push   edi
c000f2bc:	56                   	push   esi
c000f2bd:	53                   	push   ebx
c000f2be:	83 ec 1c             	sub    esp,0x1c
c000f2c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f2c5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f2c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f2cd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f2d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2d4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f2d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2da:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f2de:	89 d8                	mov    eax,ebx
c000f2e0:	89 d6                	mov    esi,edx
c000f2e2:	89 d7                	mov    edi,edx
c000f2e4:	c1 ff 1f             	sar    edi,0x1f
c000f2e7:	03 34 24             	add    esi,DWORD PTR [esp]
c000f2ea:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f2ee:	c1 f8 1f             	sar    eax,0x1f
c000f2f1:	39 f3                	cmp    ebx,esi
c000f2f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f2f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2fb:	19 f8                	sbb    eax,edi
c000f2fd:	b8 01 00 00 00       	mov    eax,0x1
c000f302:	72 72                	jb     c000f376 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000f304:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f307:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f30b:	01 d0                	add    eax,edx
c000f30d:	99                   	cdq    
c000f30e:	f7 fb                	idiv   ebx
c000f310:	89 d8                	mov    eax,ebx
c000f312:	29 d0                	sub    eax,edx
c000f314:	89 d6                	mov    esi,edx
c000f316:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f319:	89 c3                	mov    ebx,eax
c000f31b:	c1 fb 1f             	sar    ebx,0x1f
c000f31e:	39 c2                	cmp    edx,eax
c000f320:	19 df                	sbb    edi,ebx
c000f322:	bb 00 00 00 00       	mov    ebx,0x0
c000f327:	72 04                	jb     c000f32d <Pipe::write(unsigned long long, void*, int*)+0x73>
c000f329:	89 d3                	mov    ebx,edx
c000f32b:	29 c3                	sub    ebx,eax
c000f32d:	89 d0                	mov    eax,edx
c000f32f:	29 d8                	sub    eax,ebx
c000f331:	74 0d                	je     c000f340 <Pipe::write(unsigned long long, void*, int*)+0x86>
c000f333:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f336:	89 c1                	mov    ecx,eax
c000f338:	01 f7                	add    edi,esi
c000f33a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f33e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f340:	85 db                	test   ebx,ebx
c000f342:	74 0d                	je     c000f351 <Pipe::write(unsigned long long, void*, int*)+0x97>
c000f344:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f348:	89 d9                	mov    ecx,ebx
c000f34a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f34d:	89 c6                	mov    esi,eax
c000f34f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f351:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f354:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f359:	75 10                	jne    c000f36b <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000f35b:	83 ec 0c             	sub    esp,0xc
c000f35e:	68 31 21 02 c0       	push   0xc0022131
c000f363:	e8 ae f8 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f368:	83 c4 10             	add    esp,0x10
c000f36b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f36f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f372:	89 08                	mov    DWORD PTR [eax],ecx
c000f374:	31 c0                	xor    eax,eax
c000f376:	83 c4 1c             	add    esp,0x1c
c000f379:	5b                   	pop    ebx
c000f37a:	5e                   	pop    esi
c000f37b:	5f                   	pop    edi
c000f37c:	5d                   	pop    ebp
c000f37d:	c3                   	ret    

c000f37e <Pipe::read(unsigned long long, void*, int*)>:
c000f37e:	55                   	push   ebp
c000f37f:	57                   	push   edi
c000f380:	56                   	push   esi
c000f381:	53                   	push   ebx
c000f382:	83 ec 1c             	sub    esp,0x1c
c000f385:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f389:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f38d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f391:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f394:	89 c8                	mov    eax,ecx
c000f396:	99                   	cdq    
c000f397:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f39b:	74 27                	je     c000f3c4 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f39d:	39 f9                	cmp    ecx,edi
c000f39f:	89 d1                	mov    ecx,edx
c000f3a1:	19 f1                	sbb    ecx,esi
c000f3a3:	73 1f                	jae    c000f3c4 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f3a5:	fa                   	cli    
c000f3a6:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f3ac:	e8 2b 60 00 00       	call   c00153dc <schedule()>
c000f3b1:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f3b8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f3bf:	75 d0                	jne    c000f391 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3c1:	fb                   	sti    
c000f3c2:	eb cd                	jmp    c000f391 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3c4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f3c8:	39 f8                	cmp    eax,edi
c000f3ca:	89 d1                	mov    ecx,edx
c000f3cc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000f3d0:	19 f1                	sbb    ecx,esi
c000f3d2:	73 08                	jae    c000f3dc <Pipe::read(unsigned long long, void*, int*)+0x5e>
c000f3d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3dc:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f3df:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f3e2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000f3e6:	29 f7                	sub    edi,esi
c000f3e8:	89 f8                	mov    eax,edi
c000f3ea:	99                   	cdq    
c000f3eb:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f3ef:	89 d0                	mov    eax,edx
c000f3f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f3f5:	19 c2                	sbb    edx,eax
c000f3f7:	89 f8                	mov    eax,edi
c000f3f9:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000f3fe:	89 ea                	mov    edx,ebp
c000f400:	29 c2                	sub    edx,eax
c000f402:	85 c0                	test   eax,eax
c000f404:	74 0b                	je     c000f411 <Pipe::read(unsigned long long, void*, int*)+0x93>
c000f406:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f409:	89 c1                	mov    ecx,eax
c000f40b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f40f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f411:	85 d2                	test   edx,edx
c000f413:	74 0d                	je     c000f422 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c000f415:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f419:	89 d1                	mov    ecx,edx
c000f41b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f41e:	89 c7                	mov    edi,eax
c000f420:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f422:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f425:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f428:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f42b:	99                   	cdq    
c000f42c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000f430:	89 f7                	mov    edi,esi
c000f432:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000f436:	c1 ff 1f             	sar    edi,0x1f
c000f439:	57                   	push   edi
c000f43a:	56                   	push   esi
c000f43b:	52                   	push   edx
c000f43c:	50                   	push   eax
c000f43d:	e8 62 07 01 00       	call   c001fba4 <__umoddi3>
c000f442:	83 c4 10             	add    esp,0x10
c000f445:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f44a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f44d:	75 10                	jne    c000f45f <Pipe::read(unsigned long long, void*, int*)+0xe1>
c000f44f:	83 ec 0c             	sub    esp,0xc
c000f452:	68 4e 21 02 c0       	push   0xc002214e
c000f457:	e8 ba f7 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f45c:	83 c4 10             	add    esp,0x10
c000f45f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f463:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f467:	89 10                	mov    DWORD PTR [eax],edx
c000f469:	83 c4 1c             	add    esp,0x1c
c000f46c:	31 c0                	xor    eax,eax
c000f46e:	5b                   	pop    ebx
c000f46f:	5e                   	pop    esi
c000f470:	5f                   	pop    edi
c000f471:	5d                   	pop    ebp
c000f472:	c3                   	ret    
c000f473:	90                   	nop

c000f474 <Pipe::Pipe(int)>:
c000f474:	83 ec 0c             	sub    esp,0xc
c000f477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f47b:	83 ec 08             	sub    esp,0x8
c000f47e:	6a 00                	push   0x0
c000f480:	50                   	push   eax
c000f481:	e8 6e 26 00 00       	call   c0011af4 <UnixFile::UnixFile(int)>
c000f486:	83 c4 10             	add    esp,0x10
c000f489:	ba 74 21 02 c0       	mov    edx,0xc0022174
c000f48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f492:	89 10                	mov    DWORD PTR [eax],edx
c000f494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f498:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f49c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ae:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f4b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4b9:	83 ec 0c             	sub    esp,0xc
c000f4bc:	50                   	push   eax
c000f4bd:	e8 0e f4 ff ff       	call   c000e8d0 <malloc>
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	89 c2                	mov    edx,eax
c000f4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f4d6:	90                   	nop
c000f4d7:	83 c4 0c             	add    esp,0xc
c000f4da:	c3                   	ret    

c000f4db <KePowerThread(void*)>:
c000f4db:	83 ec 0c             	sub    esp,0xc
c000f4de:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f4e5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f4ec:	75 01                	jne    c000f4ef <KePowerThread(void*)+0x14>
c000f4ee:	fb                   	sti    
c000f4ef:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f4f6:	83 ec 0c             	sub    esp,0xc
c000f4f9:	6a 0a                	push   0xa
c000f4fb:	e8 d8 60 00 00       	call   c00155d8 <sleep(unsigned int)>
c000f500:	83 c4 10             	add    esp,0x10
c000f503:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f50a:	eb e3                	jmp    c000f4ef <KePowerThread(void*)+0x14>

c000f50c <KeChangePowerSettings(PowerSettings)>:
c000f50c:	57                   	push   edi
c000f50d:	b9 09 00 00 00       	mov    ecx,0x9
c000f512:	56                   	push   esi
c000f513:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f518:	fc                   	cld    
c000f519:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f51d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f51f:	5e                   	pop    esi
c000f520:	5f                   	pop    edi
c000f521:	c3                   	ret    

c000f522 <KeUserIOReceived()>:
c000f522:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f52c:	c3                   	ret    

c000f52d <KeHandlePowerButton()>:
c000f52d:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f532:	83 f8 02             	cmp    eax,0x2
c000f535:	75 05                	jne    c000f53c <KeHandlePowerButton()+0xf>
c000f537:	e9 58 e1 ff ff       	jmp    c000d694 <KeShutdown()>
c000f53c:	48                   	dec    eax
c000f53d:	75 05                	jne    c000f544 <KeHandlePowerButton()+0x17>
c000f53f:	e9 74 e1 ff ff       	jmp    c000d6b8 <KeSleep()>
c000f544:	c3                   	ret    

c000f545 <KeHandleSleepButton()>:
c000f545:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f54a:	83 f8 02             	cmp    eax,0x2
c000f54d:	75 05                	jne    c000f554 <KeHandleSleepButton()+0xf>
c000f54f:	e9 40 e1 ff ff       	jmp    c000d694 <KeShutdown()>
c000f554:	48                   	dec    eax
c000f555:	75 05                	jne    c000f55c <KeHandleSleepButton()+0x17>
c000f557:	e9 5c e1 ff ff       	jmp    c000d6b8 <KeSleep()>
c000f55c:	c3                   	ret    

c000f55d <KeSetupPowerManager()>:
c000f55d:	83 ec 0c             	sub    esp,0xc
c000f560:	68 f0 00 00 00       	push   0xf0
c000f565:	6a 00                	push   0x0
c000f567:	68 db f4 00 c0       	push   0xc000f4db
c000f56c:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f572:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f57c:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f583:	e8 08 5c 00 00       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c000f588:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f592:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f59c:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f5a6:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f5b0:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f5ba:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f5c4:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f5ce:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f5d8:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f5e2:	83 c4 1c             	add    esp,0x1c
c000f5e5:	c3                   	ret    

c000f5e6 <KeRand()>:
c000f5e6:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f5f0:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f5fa:	53                   	push   ebx
c000f5fb:	01 c1                	add    ecx,eax
c000f5fd:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f602:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f608:	01 ca                	add    edx,ecx
c000f60a:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f60f:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f614:	83 d2 00             	adc    edx,0x0
c000f617:	0f b7 da             	movzx  ebx,dx
c000f61a:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f620:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000f624:	5b                   	pop    ebx
c000f625:	c3                   	ret    

c000f626 <KeSeedRand(unsigned int)>:
c000f626:	53                   	push   ebx
c000f627:	83 ec 08             	sub    esp,0x8
c000f62a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f62e:	e8 bf 8f 00 00       	call   c00185f2 <HalGetRand()>
c000f633:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f63d:	31 d8                	xor    eax,ebx
c000f63f:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f644:	e8 9d ff ff ff       	call   c000f5e6 <KeRand()>
c000f649:	83 c4 08             	add    esp,0x8
c000f64c:	5b                   	pop    ebx
c000f64d:	eb 97                	jmp    c000f5e6 <KeRand()>

c000f64f <KeInitRand()>:
c000f64f:	83 ec 0c             	sub    esp,0xc
c000f652:	e8 bf 8d 00 00       	call   c0018416 <HalQueryPerformanceCounter()>
c000f657:	0f 20 da             	mov    edx,cr3
c000f65a:	0f 22 da             	mov    cr3,edx
c000f65d:	0f 20 da             	mov    edx,cr3
c000f660:	0f 22 da             	mov    cr3,edx
c000f663:	0f 20 da             	mov    edx,cr3
c000f666:	0f 22 da             	mov    cr3,edx
c000f669:	0f 20 da             	mov    edx,cr3
c000f66c:	0f 22 da             	mov    cr3,edx
c000f66f:	83 ec 0c             	sub    esp,0xc
c000f672:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f677:	50                   	push   eax
c000f678:	e8 a9 ff ff ff       	call   c000f626 <KeSeedRand(unsigned int)>
c000f67d:	83 c4 1c             	add    esp,0x1c
c000f680:	c3                   	ret    
c000f681:	66 90                	xchg   ax,ax
c000f683:	90                   	nop

c000f684 <KeResolveCompatibilitySymbol(char*)>:
c000f684:	83 ec 0c             	sub    esp,0xc
c000f687:	83 ec 08             	sub    esp,0x8
c000f68a:	68 88 21 02 c0       	push   0xc0022188
c000f68f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f693:	e8 e8 10 ff ff       	call   c0000780 <strcmp>
c000f698:	83 c4 10             	add    esp,0x10
c000f69b:	85 c0                	test   eax,eax
c000f69d:	0f 94 c0             	sete   al
c000f6a0:	0f b6 c0             	movzx  eax,al
c000f6a3:	85 c0                	test   eax,eax
c000f6a5:	74 0d                	je     c000f6b4 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f6a7:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f6ac:	e9 8b 01 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6b4:	83 ec 08             	sub    esp,0x8
c000f6b7:	68 91 21 02 c0       	push   0xc0022191
c000f6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6c0:	e8 bb 10 ff ff       	call   c0000780 <strcmp>
c000f6c5:	83 c4 10             	add    esp,0x10
c000f6c8:	85 c0                	test   eax,eax
c000f6ca:	0f 94 c0             	sete   al
c000f6cd:	0f b6 c0             	movzx  eax,al
c000f6d0:	85 c0                	test   eax,eax
c000f6d2:	74 0c                	je     c000f6e0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f6d4:	b8 a4 fa 01 c0       	mov    eax,0xc001faa4
c000f6d9:	e9 5e 01 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6de:	66 90                	xchg   ax,ax
c000f6e0:	83 ec 08             	sub    esp,0x8
c000f6e3:	68 9b 21 02 c0       	push   0xc002219b
c000f6e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6ec:	e8 8f 10 ff ff       	call   c0000780 <strcmp>
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	85 c0                	test   eax,eax
c000f6f6:	0f 94 c0             	sete   al
c000f6f9:	0f b6 c0             	movzx  eax,al
c000f6fc:	85 c0                	test   eax,eax
c000f6fe:	74 0c                	je     c000f70c <KeResolveCompatibilitySymbol(char*)+0x88>
c000f700:	b8 d8 f7 01 c0       	mov    eax,0xc001f7d8
c000f705:	e9 32 01 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f70a:	66 90                	xchg   ax,ax
c000f70c:	83 ec 08             	sub    esp,0x8
c000f70f:	68 a4 21 02 c0       	push   0xc00221a4
c000f714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f718:	e8 63 10 ff ff       	call   c0000780 <strcmp>
c000f71d:	83 c4 10             	add    esp,0x10
c000f720:	85 c0                	test   eax,eax
c000f722:	0f 94 c0             	sete   al
c000f725:	0f b6 c0             	movzx  eax,al
c000f728:	85 c0                	test   eax,eax
c000f72a:	74 0c                	je     c000f738 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f72c:	b8 16 ec 00 c0       	mov    eax,0xc000ec16
c000f731:	e9 06 01 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f736:	66 90                	xchg   ax,ax
c000f738:	83 ec 08             	sub    esp,0x8
c000f73b:	68 b7 21 02 c0       	push   0xc00221b7
c000f740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f744:	e8 37 10 ff ff       	call   c0000780 <strcmp>
c000f749:	83 c4 10             	add    esp,0x10
c000f74c:	85 c0                	test   eax,eax
c000f74e:	0f 94 c0             	sete   al
c000f751:	0f b6 c0             	movzx  eax,al
c000f754:	85 c0                	test   eax,eax
c000f756:	74 0c                	je     c000f764 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f758:	b8 9b c5 00 c0       	mov    eax,0xc000c59b
c000f75d:	e9 da 00 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f762:	66 90                	xchg   ax,ax
c000f764:	83 ec 08             	sub    esp,0x8
c000f767:	68 d4 21 02 c0       	push   0xc00221d4
c000f76c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f770:	e8 0b 10 ff ff       	call   c0000780 <strcmp>
c000f775:	83 c4 10             	add    esp,0x10
c000f778:	85 c0                	test   eax,eax
c000f77a:	0f 94 c0             	sete   al
c000f77d:	0f b6 c0             	movzx  eax,al
c000f780:	85 c0                	test   eax,eax
c000f782:	74 0c                	je     c000f790 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f784:	b8 a4 fb 01 c0       	mov    eax,0xc001fba4
c000f789:	e9 ae 00 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f78e:	66 90                	xchg   ax,ax
c000f790:	83 ec 08             	sub    esp,0x8
c000f793:	68 de 21 02 c0       	push   0xc00221de
c000f798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f79c:	e8 df 0f ff ff       	call   c0000780 <strcmp>
c000f7a1:	83 c4 10             	add    esp,0x10
c000f7a4:	85 c0                	test   eax,eax
c000f7a6:	0f 94 c0             	sete   al
c000f7a9:	0f b6 c0             	movzx  eax,al
c000f7ac:	85 c0                	test   eax,eax
c000f7ae:	74 0c                	je     c000f7bc <KeResolveCompatibilitySymbol(char*)+0x138>
c000f7b0:	b8 24 f9 01 c0       	mov    eax,0xc001f924
c000f7b5:	e9 82 00 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7ba:	66 90                	xchg   ax,ax
c000f7bc:	83 ec 08             	sub    esp,0x8
c000f7bf:	68 e7 21 02 c0       	push   0xc00221e7
c000f7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7c8:	e8 b3 0f ff ff       	call   c0000780 <strcmp>
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	85 c0                	test   eax,eax
c000f7d2:	0f 94 c0             	sete   al
c000f7d5:	0f b6 c0             	movzx  eax,al
c000f7d8:	85 c0                	test   eax,eax
c000f7da:	74 08                	je     c000f7e4 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f7dc:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f7e1:	eb 59                	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7e3:	90                   	nop
c000f7e4:	83 ec 08             	sub    esp,0x8
c000f7e7:	68 ff 21 02 c0       	push   0xc00221ff
c000f7ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7f0:	e8 8b 0f ff ff       	call   c0000780 <strcmp>
c000f7f5:	83 c4 10             	add    esp,0x10
c000f7f8:	85 c0                	test   eax,eax
c000f7fa:	0f 94 c0             	sete   al
c000f7fd:	0f b6 c0             	movzx  eax,al
c000f800:	85 c0                	test   eax,eax
c000f802:	74 08                	je     c000f80c <KeResolveCompatibilitySymbol(char*)+0x188>
c000f804:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f809:	eb 31                	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f80b:	90                   	nop
c000f80c:	83 ec 08             	sub    esp,0x8
c000f80f:	68 0c 22 02 c0       	push   0xc002220c
c000f814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f818:	e8 63 0f ff ff       	call   c0000780 <strcmp>
c000f81d:	83 c4 10             	add    esp,0x10
c000f820:	85 c0                	test   eax,eax
c000f822:	0f 94 c0             	sete   al
c000f825:	0f b6 c0             	movzx  eax,al
c000f828:	85 c0                	test   eax,eax
c000f82a:	74 08                	je     c000f834 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f82c:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f831:	eb 09                	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f833:	90                   	nop
c000f834:	b8 00 00 00 00       	mov    eax,0x0
c000f839:	8d 76 00             	lea    esi,[esi+0x0]
c000f83c:	83 c4 0c             	add    esp,0xc
c000f83f:	c3                   	ret    

c000f840 <Semaphore::Semaphore(int)>:
c000f840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f844:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f848:	89 10                	mov    DWORD PTR [eax],edx
c000f84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f84e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f855:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f859:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f864:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f86b:	90                   	nop
c000f86c:	c3                   	ret    
c000f86d:	90                   	nop
c000f86e:	66 90                	xchg   ax,ax

c000f870 <Semaphore::tryAcquire()>:
c000f870:	83 ec 0c             	sub    esp,0xc
c000f873:	fa                   	cli    
c000f874:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f879:	83 c0 01             	add    eax,0x1
c000f87c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f881:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f886:	83 c0 01             	add    eax,0x1
c000f889:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f892:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f899:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89b:	39 c2                	cmp    edx,eax
c000f89d:	7d 59                	jge    c000f8f8 <Semaphore::tryAcquire()+0x88>
c000f89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f8b0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8b5:	83 e8 01             	sub    eax,0x1
c000f8b8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f8bd:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8c2:	85 c0                	test   eax,eax
c000f8c4:	75 1a                	jne    c000f8e0 <Semaphore::tryAcquire()+0x70>
c000f8c6:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f8cb:	85 c0                	test   eax,eax
c000f8cd:	74 11                	je     c000f8e0 <Semaphore::tryAcquire()+0x70>
c000f8cf:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f8d9:	e8 fe 5a 00 00       	call   c00153dc <schedule()>
c000f8de:	66 90                	xchg   ax,ax
c000f8e0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f8e8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f8ed:	85 c0                	test   eax,eax
c000f8ef:	75 03                	jne    c000f8f4 <Semaphore::tryAcquire()+0x84>
c000f8f1:	fb                   	sti    
c000f8f2:	66 90                	xchg   ax,ax
c000f8f4:	b0 01                	mov    al,0x1
c000f8f6:	eb 48                	jmp    c000f940 <Semaphore::tryAcquire()+0xd0>
c000f8f8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8fd:	83 e8 01             	sub    eax,0x1
c000f900:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f905:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f90a:	85 c0                	test   eax,eax
c000f90c:	75 1a                	jne    c000f928 <Semaphore::tryAcquire()+0xb8>
c000f90e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f913:	85 c0                	test   eax,eax
c000f915:	74 11                	je     c000f928 <Semaphore::tryAcquire()+0xb8>
c000f917:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f921:	e8 b6 5a 00 00       	call   c00153dc <schedule()>
c000f926:	66 90                	xchg   ax,ax
c000f928:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f930:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f935:	85 c0                	test   eax,eax
c000f937:	75 03                	jne    c000f93c <Semaphore::tryAcquire()+0xcc>
c000f939:	fb                   	sti    
c000f93a:	66 90                	xchg   ax,ax
c000f93c:	b0 00                	mov    al,0x0
c000f93e:	66 90                	xchg   ax,ax
c000f940:	83 c4 0c             	add    esp,0xc
c000f943:	c3                   	ret    

c000f944 <Semaphore::assertLocked(char const*)>:
c000f944:	83 ec 0c             	sub    esp,0xc
c000f947:	fa                   	cli    
c000f948:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f94d:	83 c0 01             	add    eax,0x1
c000f950:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f955:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f95a:	83 c0 01             	add    eax,0x1
c000f95d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f966:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f96d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96f:	39 c2                	cmp    edx,eax
c000f971:	7d 11                	jge    c000f984 <Semaphore::assertLocked(char const*)+0x40>
c000f973:	83 ec 0c             	sub    esp,0xc
c000f976:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f97a:	e8 97 f2 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f97f:	83 c4 10             	add    esp,0x10
c000f982:	66 90                	xchg   ax,ax
c000f984:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f989:	83 e8 01             	sub    eax,0x1
c000f98c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f991:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f996:	85 c0                	test   eax,eax
c000f998:	75 1a                	jne    c000f9b4 <Semaphore::assertLocked(char const*)+0x70>
c000f99a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f99f:	85 c0                	test   eax,eax
c000f9a1:	74 11                	je     c000f9b4 <Semaphore::assertLocked(char const*)+0x70>
c000f9a3:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9ad:	e8 2a 5a 00 00       	call   c00153dc <schedule()>
c000f9b2:	66 90                	xchg   ax,ax
c000f9b4:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f9bc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9c1:	85 c0                	test   eax,eax
c000f9c3:	75 03                	jne    c000f9c8 <Semaphore::assertLocked(char const*)+0x84>
c000f9c5:	fb                   	sti    
c000f9c6:	66 90                	xchg   ax,ax
c000f9c8:	90                   	nop
c000f9c9:	83 c4 0c             	add    esp,0xc
c000f9cc:	c3                   	ret    
c000f9cd:	90                   	nop
c000f9ce:	66 90                	xchg   ax,ax

c000f9d0 <Semaphore::acquire(int)>:
c000f9d0:	83 ec 1c             	sub    esp,0x1c
c000f9d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000f9d8:	0f 84 9a 00 00 00    	je     c000fa78 <Semaphore::acquire(int)+0xa8>
c000f9de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f9e6:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000f9eb:	90                   	nop
c000f9ec:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000f9f1:	85 c0                	test   eax,eax
c000f9f3:	74 77                	je     c000fa6c <Semaphore::acquire(int)+0x9c>
c000f9f5:	83 ec 0c             	sub    esp,0xc
c000f9f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f9fc:	e8 6f fe ff ff       	call   c000f870 <Semaphore::tryAcquire()>
c000fa01:	83 c4 10             	add    esp,0x10
c000fa04:	83 f0 01             	xor    eax,0x1
c000fa07:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fa0b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fa0f:	83 f0 01             	xor    eax,0x1
c000fa12:	0f b6 c0             	movzx  eax,al
c000fa15:	85 c0                	test   eax,eax
c000fa17:	75 4f                	jne    c000fa68 <Semaphore::acquire(int)+0x98>
c000fa19:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fa1e:	7f 2c                	jg     c000fa4c <Semaphore::acquire(int)+0x7c>
c000fa20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa24:	89 d0                	mov    eax,edx
c000fa26:	c1 e0 02             	shl    eax,0x2
c000fa29:	01 d0                	add    eax,edx
c000fa2b:	d1 e0                	shl    eax,1
c000fa2d:	83 ec 0c             	sub    esp,0xc
c000fa30:	50                   	push   eax
c000fa31:	e8 8e 5b 00 00       	call   c00155c4 <milliTenthSleep(unsigned int)>
c000fa36:	83 c4 10             	add    esp,0x10
c000fa39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa3d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fa41:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fa49:	eb a1                	jmp    c000f9ec <Semaphore::acquire(int)+0x1c>
c000fa4b:	90                   	nop
c000fa4c:	83 ec 0c             	sub    esp,0xc
c000fa4f:	68 90 01 00 00       	push   0x190
c000fa54:	e8 6b 5b 00 00       	call   c00155c4 <milliTenthSleep(unsigned int)>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fa61:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fa66:	eb 84                	jmp    c000f9ec <Semaphore::acquire(int)+0x1c>
c000fa68:	90                   	nop
c000fa69:	8d 76 00             	lea    esi,[esi+0x0]
c000fa6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa70:	e9 fb 00 00 00       	jmp    c000fb70 <Semaphore::acquire(int)+0x1a0>
c000fa75:	8d 76 00             	lea    esi,[esi+0x0]
c000fa78:	fa                   	cli    
c000fa79:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa7e:	83 c0 01             	add    eax,0x1
c000fa81:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa86:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa8b:	83 c0 01             	add    eax,0x1
c000fa8e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa97:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa9e:	8b 00                	mov    eax,DWORD PTR [eax]
c000faa0:	39 c2                	cmp    edx,eax
c000faa2:	7d 14                	jge    c000fab8 <Semaphore::acquire(int)+0xe8>
c000faa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000faab:	8d 50 01             	lea    edx,[eax+0x1]
c000faae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fab5:	eb 6d                	jmp    c000fb24 <Semaphore::acquire(int)+0x154>
c000fab7:	90                   	nop
c000fab8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fabd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fabf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000facd:	85 c0                	test   eax,eax
c000facf:	75 13                	jne    c000fae4 <Semaphore::acquire(int)+0x114>
c000fad1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fad6:	8b 10                	mov    edx,DWORD PTR [eax]
c000fad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fadc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fadf:	eb 17                	jmp    c000faf8 <Semaphore::acquire(int)+0x128>
c000fae1:	8d 76 00             	lea    esi,[esi+0x0]
c000fae4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000faf0:	8b 12                	mov    edx,DWORD PTR [edx]
c000faf2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000faf5:	8d 76 00             	lea    esi,[esi+0x0]
c000faf8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fafd:	8b 10                	mov    edx,DWORD PTR [eax]
c000faff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fb06:	83 ec 0c             	sub    esp,0xc
c000fb09:	68 1c 22 02 c0       	push   0xc002221c
c000fb0e:	e8 3b 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fb13:	83 c4 10             	add    esp,0x10
c000fb16:	83 ec 0c             	sub    esp,0xc
c000fb19:	6a 05                	push   0x5
c000fb1b:	e8 7c 59 00 00       	call   c001549c <blockTask(TaskState)>
c000fb20:	83 c4 10             	add    esp,0x10
c000fb23:	90                   	nop
c000fb24:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb29:	83 e8 01             	sub    eax,0x1
c000fb2c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb31:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb36:	85 c0                	test   eax,eax
c000fb38:	75 1a                	jne    c000fb54 <Semaphore::acquire(int)+0x184>
c000fb3a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fb3f:	85 c0                	test   eax,eax
c000fb41:	74 11                	je     c000fb54 <Semaphore::acquire(int)+0x184>
c000fb43:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fb4d:	e8 8a 58 00 00       	call   c00153dc <schedule()>
c000fb52:	66 90                	xchg   ax,ax
c000fb54:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fb5c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb61:	85 c0                	test   eax,eax
c000fb63:	75 03                	jne    c000fb68 <Semaphore::acquire(int)+0x198>
c000fb65:	fb                   	sti    
c000fb66:	66 90                	xchg   ax,ax
c000fb68:	b8 00 00 00 00       	mov    eax,0x0
c000fb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb70:	83 c4 1c             	add    esp,0x1c
c000fb73:	c3                   	ret    

c000fb74 <Semaphore::acquire()>:
c000fb74:	83 ec 0c             	sub    esp,0xc
c000fb77:	83 ec 08             	sub    esp,0x8
c000fb7a:	6a 00                	push   0x0
c000fb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb80:	e8 4b fe ff ff       	call   c000f9d0 <Semaphore::acquire(int)>
c000fb85:	83 c4 10             	add    esp,0x10
c000fb88:	90                   	nop
c000fb89:	83 c4 0c             	add    esp,0xc
c000fb8c:	c3                   	ret    
c000fb8d:	90                   	nop
c000fb8e:	66 90                	xchg   ax,ax

c000fb90 <Semaphore::release()>:
c000fb90:	83 ec 1c             	sub    esp,0x1c
c000fb93:	fa                   	cli    
c000fb94:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb99:	83 c0 01             	add    eax,0x1
c000fb9c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fba1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fba6:	83 c0 01             	add    eax,0x1
c000fba9:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fbae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	74 2b                	je     c000fbe4 <Semaphore::release()+0x54>
c000fbb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbc8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbd2:	83 ec 0c             	sub    esp,0xc
c000fbd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbd9:	e8 fe 5a 00 00       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	eb 15                	jmp    c000fbf8 <Semaphore::release()+0x68>
c000fbe3:	90                   	nop
c000fbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbe8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbeb:	8d 50 ff             	lea    edx,[eax-0x1]
c000fbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbf8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbfd:	83 e8 01             	sub    eax,0x1
c000fc00:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc05:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc0a:	85 c0                	test   eax,eax
c000fc0c:	75 1a                	jne    c000fc28 <Semaphore::release()+0x98>
c000fc0e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fc13:	85 c0                	test   eax,eax
c000fc15:	74 11                	je     c000fc28 <Semaphore::release()+0x98>
c000fc17:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fc21:	e8 b6 57 00 00       	call   c00153dc <schedule()>
c000fc26:	66 90                	xchg   ax,ax
c000fc28:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fc30:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc35:	85 c0                	test   eax,eax
c000fc37:	75 03                	jne    c000fc3c <Semaphore::release()+0xac>
c000fc39:	fb                   	sti    
c000fc3a:	66 90                	xchg   ax,ax
c000fc3c:	90                   	nop
c000fc3d:	83 c4 1c             	add    esp,0x1c
c000fc40:	c3                   	ret    

c000fc41 <KiSigKill(int)>:
c000fc41:	83 ec 0c             	sub    esp,0xc
c000fc44:	6a 00                	push   0x0
c000fc46:	6a 00                	push   0x0
c000fc48:	6a ff                	push   0xffffffff
c000fc4a:	6a 01                	push   0x1
c000fc4c:	e8 01 54 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc51:	83 c4 1c             	add    esp,0x1c
c000fc54:	c3                   	ret    

c000fc55 <KiDefaultSignalHandlerIgnore(int)>:
c000fc55:	c3                   	ret    

c000fc56 <KiDefaultSignalHandlerPause(int)>:
c000fc56:	57                   	push   edi
c000fc57:	b9 07 00 00 00       	mov    ecx,0x7
c000fc5c:	56                   	push   esi
c000fc5d:	be 77 22 02 c0       	mov    esi,0xc0022277
c000fc62:	83 ec 24             	sub    esp,0x24
c000fc65:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fc69:	fc                   	cld    
c000fc6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc6c:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fc70:	50                   	push   eax
c000fc71:	6a 00                	push   0x0
c000fc73:	6a 00                	push   0x0
c000fc75:	6a 27                	push   0x27
c000fc77:	e8 d6 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc7c:	83 c4 34             	add    esp,0x34
c000fc7f:	5e                   	pop    esi
c000fc80:	5f                   	pop    edi
c000fc81:	c3                   	ret    

c000fc82 <KiDefaultSignalHandlerResume(int)>:
c000fc82:	57                   	push   edi
c000fc83:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fc88:	56                   	push   esi
c000fc89:	be 93 22 02 c0       	mov    esi,0xc0022293
c000fc8e:	83 ec 24             	sub    esp,0x24
c000fc91:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fc95:	fc                   	cld    
c000fc96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc98:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fc9c:	50                   	push   eax
c000fc9d:	6a 00                	push   0x0
c000fc9f:	6a 00                	push   0x0
c000fca1:	6a 27                	push   0x27
c000fca3:	e8 aa 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fca8:	83 c4 34             	add    esp,0x34
c000fcab:	5e                   	pop    esi
c000fcac:	5f                   	pop    edi
c000fcad:	c3                   	ret    

c000fcae <KeDeinitSignals(SigHandlerBlock*)>:
c000fcae:	e9 2d ec ff ff       	jmp    c000e8e0 <free>

c000fcb3 <KeInitSignals()>:
c000fcb3:	53                   	push   ebx
c000fcb4:	83 ec 14             	sub    esp,0x14
c000fcb7:	68 c8 00 00 00       	push   0xc8
c000fcbc:	e8 0f ec ff ff       	call   c000e8d0 <malloc>
c000fcc1:	83 c4 0c             	add    esp,0xc
c000fcc4:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fcce:	89 c3                	mov    ebx,eax
c000fcd0:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fcda:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fce0:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c000fce4:	6a 20                	push   0x20
c000fce6:	6a 00                	push   0x0
c000fce8:	50                   	push   eax
c000fce9:	e8 02 08 ff ff       	call   c00004f0 <memset>
c000fcee:	83 c4 0c             	add    esp,0xc
c000fcf1:	6a 44                	push   0x44
c000fcf3:	6a 00                	push   0x0
c000fcf5:	53                   	push   ebx
c000fcf6:	e8 f5 07 ff ff       	call   c00004f0 <memset>
c000fcfb:	83 c4 18             	add    esp,0x18
c000fcfe:	89 d8                	mov    eax,ebx
c000fd00:	5b                   	pop    ebx
c000fd01:	c3                   	ret    

c000fd02 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fd02:	53                   	push   ebx
c000fd03:	b8 01 00 00 00       	mov    eax,0x1
c000fd08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd10:	83 f9 10             	cmp    ecx,0x10
c000fd13:	7f 21                	jg     c000fd36 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd19:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fd1c:	89 03                	mov    DWORD PTR [ebx],eax
c000fd1e:	b8 01 00 00 00       	mov    eax,0x1
c000fd23:	d3 e0                	shl    eax,cl
c000fd25:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fd29:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fd2c:	31 c0                	xor    eax,eax
c000fd2e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fd36:	5b                   	pop    ebx
c000fd37:	c3                   	ret    

c000fd38 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fd38:	55                   	push   ebp
c000fd39:	57                   	push   edi
c000fd3a:	bf 08 00 00 00       	mov    edi,0x8
c000fd3f:	56                   	push   esi
c000fd40:	53                   	push   ebx
c000fd41:	83 ec 18             	sub    esp,0x18
c000fd44:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd48:	68 b0 22 02 c0       	push   0xc00222b0
c000fd4d:	e8 fc 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd52:	83 c4 10             	add    esp,0x10
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fd5e:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fd64:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fd68:	99                   	cdq    
c000fd69:	f7 ff                	idiv   edi
c000fd6b:	8d 42 24             	lea    eax,[edx+0x24]
c000fd6e:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fd72:	85 f6                	test   esi,esi
c000fd74:	75 1a                	jne    c000fd90 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fd76:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fd7a:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fd7e:	50                   	push   eax
c000fd7f:	50                   	push   eax
c000fd80:	52                   	push   edx
c000fd81:	68 c1 22 02 c0       	push   0xc00222c1
c000fd86:	e8 c3 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd8b:	83 c4 10             	add    esp,0x10
c000fd8e:	eb 1b                	jmp    c000fdab <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fd90:	41                   	inc    ecx
c000fd91:	83 f9 08             	cmp    ecx,0x8
c000fd94:	75 ce                	jne    c000fd64 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	be 01 00 00 00       	mov    esi,0x1
c000fd9e:	68 e2 22 02 c0       	push   0xc00222e2
c000fda3:	e8 a6 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fda8:	83 c4 10             	add    esp,0x10
c000fdab:	83 c4 0c             	add    esp,0xc
c000fdae:	89 f0                	mov    eax,esi
c000fdb0:	5b                   	pop    ebx
c000fdb1:	5e                   	pop    esi
c000fdb2:	5f                   	pop    edi
c000fdb3:	5d                   	pop    ebp
c000fdb4:	c3                   	ret    

c000fdb5 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fdb5:	55                   	push   ebp
c000fdb6:	57                   	push   edi
c000fdb7:	56                   	push   esi
c000fdb8:	53                   	push   ebx
c000fdb9:	51                   	push   ecx
c000fdba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fdbe:	85 db                	test   ebx,ebx
c000fdc0:	0f 84 bc 00 00 00    	je     c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdc6:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fdcd:	0f 84 af 00 00 00    	je     c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdd3:	31 c9                	xor    ecx,ecx
c000fdd5:	bf 08 00 00 00       	mov    edi,0x8
c000fdda:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fde0:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fde3:	99                   	cdq    
c000fde4:	f7 ff                	idiv   edi
c000fde6:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fded:	85 ed                	test   ebp,ebp
c000fdef:	0f 84 9e 00 00 00    	je     c000fe93 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fdf5:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fdfb:	89 e9                	mov    ecx,ebp
c000fdfd:	bf 01 00 00 00       	mov    edi,0x1
c000fe02:	d3 e7                	shl    edi,cl
c000fe04:	31 c9                	xor    ecx,ecx
c000fe06:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe09:	b8 01 00 00 00       	mov    eax,0x1
c000fe0e:	d3 e0                	shl    eax,cl
c000fe10:	85 04 24             	test   DWORD PTR [esp],eax
c000fe13:	74 06                	je     c000fe1b <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fe15:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fe19:	75 67                	jne    c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe1b:	41                   	inc    ecx
c000fe1c:	83 f9 11             	cmp    ecx,0x11
c000fe1f:	75 e8                	jne    c000fe09 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	46                   	inc    esi
c000fe25:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe2b:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000fe36:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000fe3d:	09 f8                	or     eax,edi
c000fe3f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000fe45:	31 c0                	xor    eax,eax
c000fe47:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000fe4f:	74 09                	je     c000fe5a <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000fe51:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe58:	eb 06                	jmp    c000fe60 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000fe5a:	40                   	inc    eax
c000fe5b:	83 f8 08             	cmp    eax,0x8
c000fe5e:	75 e7                	jne    c000fe47 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000fe60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fe64:	83 fd 09             	cmp    ebp,0x9
c000fe67:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000fe6a:	89 2a                	mov    DWORD PTR [edx],ebp
c000fe6c:	75 07                	jne    c000fe75 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000fe6e:	b8 41 fc 00 c0       	mov    eax,0xc000fc41
c000fe73:	eb 31                	jmp    c000fea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe75:	83 f8 01             	cmp    eax,0x1
c000fe78:	75 0c                	jne    c000fe86 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000fe7a:	f7 d7                	not    edi
c000fe7c:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000fe82:	31 c0                	xor    eax,eax
c000fe84:	eb 20                	jmp    c000fea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe86:	85 c0                	test   eax,eax
c000fe88:	75 1c                	jne    c000fea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe8a:	8b 04 ad 40 40 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdbfc0]
c000fe91:	eb 13                	jmp    c000fea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe93:	41                   	inc    ecx
c000fe94:	46                   	inc    esi
c000fe95:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe9b:	83 f9 08             	cmp    ecx,0x8
c000fe9e:	0f 85 36 ff ff ff    	jne    c000fdda <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000fea4:	eb dc                	jmp    c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fea6:	5a                   	pop    edx
c000fea7:	5b                   	pop    ebx
c000fea8:	5e                   	pop    esi
c000fea9:	5f                   	pop    edi
c000feaa:	5d                   	pop    ebp
c000feab:	c3                   	ret    

c000feac <KiCheckSignalZ>:
c000feac:	83 ec 10             	sub    esp,0x10
c000feaf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000feb3:	50                   	push   eax
c000feb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000feb9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000febc:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000fec2:	e8 ee fe ff ff       	call   c000fdb5 <KeCheckSignal(SigHandlerBlock*, int*)>
c000fec7:	5a                   	pop    edx
c000fec8:	31 d2                	xor    edx,edx
c000feca:	59                   	pop    ecx
c000fecb:	85 c0                	test   eax,eax
c000fecd:	74 19                	je     c000fee8 <KiCheckSignalZ+0x3c>
c000fecf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fed5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fed8:	89 02                	mov    DWORD PTR [edx],eax
c000feda:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000fee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fee5:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000fee8:	89 d0                	mov    eax,edx
c000feea:	83 c4 10             	add    esp,0x10
c000feed:	c3                   	ret    

c000feee <KeCompleteSignal(SigHandlerBlock*, int)>:
c000feee:	56                   	push   esi
c000feef:	53                   	push   ebx
c000fef0:	bb 01 00 00 00       	mov    ebx,0x1
c000fef5:	52                   	push   edx
c000fef6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fefa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fefe:	d3 e3                	shl    ebx,cl
c000ff00:	83 f9 10             	cmp    ecx,0x10
c000ff03:	7f 08                	jg     c000ff0d <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ff05:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ff0b:	75 10                	jne    c000ff1d <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ff0d:	83 ec 0c             	sub    esp,0xc
c000ff10:	68 f3 22 02 c0       	push   0xc00222f3
c000ff15:	e8 fc ec ff ff       	call   c000ec16 <KePanic(char const*)>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	f7 d3                	not    ebx
c000ff1f:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ff25:	58                   	pop    eax
c000ff26:	5b                   	pop    ebx
c000ff27:	5e                   	pop    esi
c000ff28:	c3                   	ret    

c000ff29 <KiFinishSignalZ>:
c000ff29:	53                   	push   ebx
c000ff2a:	83 ec 10             	sub    esp,0x10
c000ff2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff31:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000ff34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff3c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff42:	e8 a7 ff ff ff       	call   c000feee <KeCompleteSignal(SigHandlerBlock*, int)>
c000ff47:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ff4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ff54:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ff5b:	83 c4 18             	add    esp,0x18
c000ff5e:	5b                   	pop    ebx
c000ff5f:	c3                   	ret    

c000ff60 <SysSeekDir(regs*)>:
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	31 d2                	xor    edx,edx
c000ff64:	c3                   	ret    

c000ff65 <SysTellDir(regs*)>:
c000ff65:	31 c0                	xor    eax,eax
c000ff67:	31 d2                	xor    edx,edx
c000ff69:	c3                   	ret    

c000ff6a <SysVerify(regs*)>:
c000ff6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff6e:	31 d2                	xor    edx,edx
c000ff70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ff73:	c3                   	ret    

c000ff74 <SysGetArgc(regs*)>:
c000ff74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff7c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c000ff82:	89 c2                	mov    edx,eax
c000ff84:	c1 fa 1f             	sar    edx,0x1f
c000ff87:	c3                   	ret    

c000ff88 <SysTTYName(regs*)>:
c000ff88:	b8 01 00 00 00       	mov    eax,0x1
c000ff8d:	31 d2                	xor    edx,edx
c000ff8f:	c3                   	ret    

c000ff90 <SysFormatDisk(regs*)>:
c000ff90:	56                   	push   esi
c000ff91:	53                   	push   ebx
c000ff92:	83 ec 04             	sub    esp,0x4
c000ff95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff99:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000ff9f:	eb 2a                	jmp    c000ffcb <SysFormatDisk(regs*)+0x3b>
c000ffa1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c000ffa4:	83 ec 0c             	sub    esp,0xc
c000ffa7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ffaa:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ffac:	51                   	push   ecx
c000ffad:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c000ffb0:	51                   	push   ecx
c000ffb1:	50                   	push   eax
c000ffb2:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000ffb9:	50                   	push   eax
c000ffba:	53                   	push   ebx
c000ffbb:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c000ffbe:	83 c4 20             	add    esp,0x20
c000ffc1:	83 f8 08             	cmp    eax,0x8
c000ffc4:	89 c1                	mov    ecx,eax
c000ffc6:	75 14                	jne    c000ffdc <SysFormatDisk(regs*)+0x4c>
c000ffc8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ffcb:	85 db                	test   ebx,ebx
c000ffcd:	75 d2                	jne    c000ffa1 <SysFormatDisk(regs*)+0x11>
c000ffcf:	b8 03 00 00 00       	mov    eax,0x3
c000ffd4:	31 d2                	xor    edx,edx
c000ffd6:	83 c4 04             	add    esp,0x4
c000ffd9:	5b                   	pop    ebx
c000ffda:	5e                   	pop    esi
c000ffdb:	c3                   	ret    
c000ffdc:	85 c0                	test   eax,eax
c000ffde:	74 13                	je     c000fff3 <SysFormatDisk(regs*)+0x63>
c000ffe0:	31 d2                	xor    edx,edx
c000ffe2:	83 f9 09             	cmp    ecx,0x9
c000ffe5:	b8 01 00 00 00       	mov    eax,0x1
c000ffea:	74 ea                	je     c000ffd6 <SysFormatDisk(regs*)+0x46>
c000ffec:	b8 02 00 00 00       	mov    eax,0x2
c000fff1:	eb e1                	jmp    c000ffd4 <SysFormatDisk(regs*)+0x44>
c000fff3:	31 c0                	xor    eax,eax
c000fff5:	eb dd                	jmp    c000ffd4 <SysFormatDisk(regs*)+0x44>

c000fff7 <SysSetDiskVolumeLabel(regs*)>:
c000fff7:	56                   	push   esi
c000fff8:	53                   	push   ebx
c000fff9:	83 ec 04             	sub    esp,0x4
c000fffc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010000:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010003:	83 f8 19             	cmp    eax,0x19
c0010006:	77 33                	ja     c001003b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010008:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001000f:	85 c9                	test   ecx,ecx
c0010011:	74 28                	je     c001003b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010013:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010016:	85 db                	test   ebx,ebx
c0010018:	74 21                	je     c001003b <SysSetDiskVolumeLabel(regs*)+0x44>
c001001a:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010020:	85 d2                	test   edx,edx
c0010022:	74 17                	je     c001003b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010024:	8b 32                	mov    esi,DWORD PTR [edx]
c0010026:	53                   	push   ebx
c0010027:	50                   	push   eax
c0010028:	51                   	push   ecx
c0010029:	52                   	push   edx
c001002a:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001002d:	83 c4 10             	add    esp,0x10
c0010030:	83 c4 04             	add    esp,0x4
c0010033:	5b                   	pop    ebx
c0010034:	5e                   	pop    esi
c0010035:	89 c2                	mov    edx,eax
c0010037:	c1 fa 1f             	sar    edx,0x1f
c001003a:	c3                   	ret    
c001003b:	83 c4 04             	add    esp,0x4
c001003e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010043:	5b                   	pop    ebx
c0010044:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010049:	5e                   	pop    esi
c001004a:	c3                   	ret    

c001004b <SysGetDiskVolumeLabel(regs*)>:
c001004b:	57                   	push   edi
c001004c:	56                   	push   esi
c001004d:	53                   	push   ebx
c001004e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010052:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010055:	83 fa 19             	cmp    edx,0x19
c0010058:	77 3c                	ja     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001005a:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c0010061:	85 c9                	test   ecx,ecx
c0010063:	74 31                	je     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010065:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010068:	85 db                	test   ebx,ebx
c001006a:	74 2a                	je     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001006c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001006f:	85 f6                	test   esi,esi
c0010071:	74 23                	je     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010073:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010079:	85 c0                	test   eax,eax
c001007b:	74 19                	je     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001007d:	83 ec 0c             	sub    esp,0xc
c0010080:	8b 38                	mov    edi,DWORD PTR [eax]
c0010082:	56                   	push   esi
c0010083:	53                   	push   ebx
c0010084:	52                   	push   edx
c0010085:	51                   	push   ecx
c0010086:	50                   	push   eax
c0010087:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001008a:	83 c4 20             	add    esp,0x20
c001008d:	5b                   	pop    ebx
c001008e:	5e                   	pop    esi
c001008f:	89 c2                	mov    edx,eax
c0010091:	c1 fa 1f             	sar    edx,0x1f
c0010094:	5f                   	pop    edi
c0010095:	c3                   	ret    
c0010096:	5b                   	pop    ebx
c0010097:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001009c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00100a1:	5e                   	pop    esi
c00100a2:	5f                   	pop    edi
c00100a3:	c3                   	ret    

c00100a4 <SysRealpath(regs*)>:
c00100a4:	53                   	push   ebx
c00100a5:	83 ec 08             	sub    esp,0x8
c00100a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ac:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00100af:	85 c9                	test   ecx,ecx
c00100b1:	74 36                	je     c00100e9 <SysRealpath(regs*)+0x45>
c00100b3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00100b6:	31 d2                	xor    edx,edx
c00100b8:	b8 01 00 00 00       	mov    eax,0x1
c00100bd:	85 db                	test   ebx,ebx
c00100bf:	75 05                	jne    c00100c6 <SysRealpath(regs*)+0x22>
c00100c1:	83 c4 08             	add    esp,0x8
c00100c4:	5b                   	pop    ebx
c00100c5:	c3                   	ret    
c00100c6:	6a 00                	push   0x0
c00100c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100d0:	05 0c 01 00 00       	add    eax,0x10c
c00100d5:	50                   	push   eax
c00100d6:	51                   	push   ecx
c00100d7:	53                   	push   ebx
c00100d8:	e8 23 7d ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	31 c0                	xor    eax,eax
c00100e2:	31 d2                	xor    edx,edx
c00100e4:	83 c4 08             	add    esp,0x8
c00100e7:	5b                   	pop    ebx
c00100e8:	c3                   	ret    
c00100e9:	b8 01 00 00 00       	mov    eax,0x1
c00100ee:	31 d2                	xor    edx,edx
c00100f0:	eb f2                	jmp    c00100e4 <SysRealpath(regs*)+0x40>

c00100f2 <SysReadDir(regs*)>:
c00100f2:	53                   	push   ebx
c00100f3:	83 ec 18             	sub    esp,0x18
c00100f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00100fa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00100fd:	83 f8 02             	cmp    eax,0x2
c0010100:	76 4f                	jbe    c0010151 <SysReadDir(regs*)+0x5f>
c0010102:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010109:	77 52                	ja     c001015d <SysReadDir(regs*)+0x6b>
c001010b:	83 ec 0c             	sub    esp,0xc
c001010e:	50                   	push   eax
c001010f:	e8 d5 1c 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c0010114:	83 c4 10             	add    esp,0x10
c0010117:	85 c0                	test   eax,eax
c0010119:	74 42                	je     c001015d <SysReadDir(regs*)+0x6b>
c001011b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010123:	83 ec 0c             	sub    esp,0xc
c0010126:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001012a:	8b 10                	mov    edx,DWORD PTR [eax]
c001012c:	51                   	push   ecx
c001012d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010130:	51                   	push   ecx
c0010131:	6a 00                	push   0x0
c0010133:	68 10 01 00 00       	push   0x110
c0010138:	50                   	push   eax
c0010139:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001013c:	83 c4 20             	add    esp,0x20
c001013f:	85 c0                	test   eax,eax
c0010141:	89 c1                	mov    ecx,eax
c0010143:	74 27                	je     c001016c <SysReadDir(regs*)+0x7a>
c0010145:	31 d2                	xor    edx,edx
c0010147:	83 f9 07             	cmp    ecx,0x7
c001014a:	b8 02 00 00 00       	mov    eax,0x2
c001014f:	75 16                	jne    c0010167 <SysReadDir(regs*)+0x75>
c0010151:	b8 01 00 00 00       	mov    eax,0x1
c0010156:	31 d2                	xor    edx,edx
c0010158:	83 c4 18             	add    esp,0x18
c001015b:	5b                   	pop    ebx
c001015c:	c3                   	ret    
c001015d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010162:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010167:	83 c4 18             	add    esp,0x18
c001016a:	5b                   	pop    ebx
c001016b:	c3                   	ret    
c001016c:	31 c0                	xor    eax,eax
c001016e:	31 d2                	xor    edx,edx
c0010170:	eb e6                	jmp    c0010158 <SysReadDir(regs*)+0x66>

c0010172 <SysIsATTY(regs*)>:
c0010172:	83 ec 0c             	sub    esp,0xc
c0010175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010179:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001017c:	83 f8 02             	cmp    eax,0x2
c001017f:	76 07                	jbe    c0010188 <SysIsATTY(regs*)+0x16>
c0010181:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010186:	75 26                	jne    c00101ae <SysIsATTY(regs*)+0x3c>
c0010188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001018d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010190:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010196:	85 c0                	test   eax,eax
c0010198:	74 24                	je     c00101be <SysIsATTY(regs*)+0x4c>
c001019a:	8b 10                	mov    edx,DWORD PTR [eax]
c001019c:	83 ec 0c             	sub    esp,0xc
c001019f:	50                   	push   eax
c00101a0:	ff 12                	call   DWORD PTR [edx]
c00101a2:	83 c4 10             	add    esp,0x10
c00101a5:	31 d2                	xor    edx,edx
c00101a7:	83 c4 0c             	add    esp,0xc
c00101aa:	0f b6 c0             	movzx  eax,al
c00101ad:	c3                   	ret    
c00101ae:	83 ec 0c             	sub    esp,0xc
c00101b1:	50                   	push   eax
c00101b2:	e8 32 1c 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00101b7:	83 c4 10             	add    esp,0x10
c00101ba:	85 c0                	test   eax,eax
c00101bc:	75 dc                	jne    c001019a <SysIsATTY(regs*)+0x28>
c00101be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101c8:	83 c4 0c             	add    esp,0xc
c00101cb:	c3                   	ret    

c00101cc <SysSeek(regs*)>:
c00101cc:	56                   	push   esi
c00101cd:	53                   	push   ebx
c00101ce:	83 ec 04             	sub    esp,0x4
c00101d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101d5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00101d8:	8d 71 fd             	lea    esi,[ecx-0x3]
c00101db:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00101e1:	77 33                	ja     c0010216 <SysSeek(regs*)+0x4a>
c00101e3:	83 ec 0c             	sub    esp,0xc
c00101e6:	51                   	push   ecx
c00101e7:	e8 fd 1b 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00101ec:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00101ef:	83 c4 0c             	add    esp,0xc
c00101f2:	31 db                	xor    ebx,ebx
c00101f4:	53                   	push   ebx
c00101f5:	51                   	push   ecx
c00101f6:	50                   	push   eax
c00101f7:	e8 ec 7f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	85 c0                	test   eax,eax
c0010201:	0f 95 c0             	setne  al
c0010204:	31 d2                	xor    edx,edx
c0010206:	0f b6 c0             	movzx  eax,al
c0010209:	f7 d8                	neg    eax
c001020b:	83 d2 00             	adc    edx,0x0
c001020e:	83 c4 04             	add    esp,0x4
c0010211:	5b                   	pop    ebx
c0010212:	f7 da                	neg    edx
c0010214:	5e                   	pop    esi
c0010215:	c3                   	ret    
c0010216:	83 c4 04             	add    esp,0x4
c0010219:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001021e:	5b                   	pop    ebx
c001021f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010224:	5e                   	pop    esi
c0010225:	c3                   	ret    

c0010226 <SysTell(regs*)>:
c0010226:	53                   	push   ebx
c0010227:	83 ec 08             	sub    esp,0x8
c001022a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001022e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010231:	83 f8 02             	cmp    eax,0x2
c0010234:	76 4e                	jbe    c0010284 <SysTell(regs*)+0x5e>
c0010236:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001023b:	76 19                	jbe    c0010256 <SysTell(regs*)+0x30>
c001023d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010240:	31 d2                	xor    edx,edx
c0010242:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010248:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001024f:	83 c4 08             	add    esp,0x8
c0010252:	31 c0                	xor    eax,eax
c0010254:	5b                   	pop    ebx
c0010255:	c3                   	ret    
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	50                   	push   eax
c001025a:	e8 8a 1b 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c001025f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010262:	5a                   	pop    edx
c0010263:	59                   	pop    ecx
c0010264:	53                   	push   ebx
c0010265:	50                   	push   eax
c0010266:	e8 29 80 ff ff       	call   c0008294 <File::tell(unsigned long long*)>
c001026b:	83 c4 10             	add    esp,0x10
c001026e:	85 c0                	test   eax,eax
c0010270:	0f 95 c0             	setne  al
c0010273:	31 d2                	xor    edx,edx
c0010275:	0f b6 c0             	movzx  eax,al
c0010278:	f7 d8                	neg    eax
c001027a:	83 d2 00             	adc    edx,0x0
c001027d:	83 c4 08             	add    esp,0x8
c0010280:	5b                   	pop    ebx
c0010281:	f7 da                	neg    edx
c0010283:	c3                   	ret    
c0010284:	83 c4 08             	add    esp,0x8
c0010287:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001028c:	5b                   	pop    ebx
c001028d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010292:	c3                   	ret    

c0010293 <SysSize(regs*)>:
c0010293:	53                   	push   ebx
c0010294:	83 ec 18             	sub    esp,0x18
c0010297:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001029b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001029e:	83 f8 02             	cmp    eax,0x2
c00102a1:	76 54                	jbe    c00102f7 <SysSize(regs*)+0x64>
c00102a3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102a8:	76 19                	jbe    c00102c3 <SysSize(regs*)+0x30>
c00102aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102ad:	31 d2                	xor    edx,edx
c00102af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00102bc:	83 c4 18             	add    esp,0x18
c00102bf:	31 c0                	xor    eax,eax
c00102c1:	5b                   	pop    ebx
c00102c2:	c3                   	ret    
c00102c3:	83 ec 0c             	sub    esp,0xc
c00102c6:	50                   	push   eax
c00102c7:	e8 1d 1b 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00102cc:	83 c4 0c             	add    esp,0xc
c00102cf:	8d 54 24 13          	lea    edx,[esp+0x13]
c00102d3:	52                   	push   edx
c00102d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00102d7:	52                   	push   edx
c00102d8:	50                   	push   eax
c00102d9:	e8 4e 81 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c00102de:	83 c4 10             	add    esp,0x10
c00102e1:	85 c0                	test   eax,eax
c00102e3:	0f 95 c0             	setne  al
c00102e6:	31 d2                	xor    edx,edx
c00102e8:	0f b6 c0             	movzx  eax,al
c00102eb:	f7 d8                	neg    eax
c00102ed:	83 d2 00             	adc    edx,0x0
c00102f0:	83 c4 18             	add    esp,0x18
c00102f3:	5b                   	pop    ebx
c00102f4:	f7 da                	neg    edx
c00102f6:	c3                   	ret    
c00102f7:	83 c4 18             	add    esp,0x18
c00102fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102ff:	5b                   	pop    ebx
c0010300:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010305:	c3                   	ret    

c0010306 <SysSizeFromFilename(regs*)>:
c0010306:	55                   	push   ebp
c0010307:	57                   	push   edi
c0010308:	56                   	push   esi
c0010309:	53                   	push   ebx
c001030a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010310:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010317:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001031a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001031d:	85 f6                	test   esi,esi
c001031f:	89 f8                	mov    eax,edi
c0010321:	74 09                	je     c001032c <SysSizeFromFilename(regs*)+0x26>
c0010323:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010329:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001032c:	83 f8 02             	cmp    eax,0x2
c001032f:	0f 86 ca 00 00 00    	jbe    c00103ff <SysSizeFromFilename(regs*)+0xf9>
c0010335:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001033a:	76 1f                	jbe    c001035b <SysSizeFromFilename(regs*)+0x55>
c001033c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001033f:	31 d2                	xor    edx,edx
c0010341:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010347:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001034e:	31 c0                	xor    eax,eax
c0010350:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010356:	5b                   	pop    ebx
c0010357:	5e                   	pop    esi
c0010358:	5f                   	pop    edi
c0010359:	5d                   	pop    ebp
c001035a:	c3                   	ret    
c001035b:	83 ec 0c             	sub    esp,0xc
c001035e:	68 14 01 00 00       	push   0x114
c0010363:	e8 68 e5 ff ff       	call   c000e8d0 <malloc>
c0010368:	6a 01                	push   0x1
c001036a:	89 c5                	mov    ebp,eax
c001036c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010371:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010374:	51                   	push   ecx
c0010375:	57                   	push   edi
c0010376:	55                   	push   ebp
c0010377:	e8 b2 7c ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001037c:	83 c4 1c             	add    esp,0x1c
c001037f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010383:	50                   	push   eax
c0010384:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010387:	53                   	push   ebx
c0010388:	55                   	push   ebp
c0010389:	e8 9e 80 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001038e:	83 c4 10             	add    esp,0x10
c0010391:	85 ed                	test   ebp,ebp
c0010393:	89 c3                	mov    ebx,eax
c0010395:	74 0d                	je     c00103a4 <SysSizeFromFilename(regs*)+0x9e>
c0010397:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001039a:	83 ec 0c             	sub    esp,0xc
c001039d:	55                   	push   ebp
c001039e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00103a1:	83 c4 10             	add    esp,0x10
c00103a4:	85 db                	test   ebx,ebx
c00103a6:	75 57                	jne    c00103ff <SysSizeFromFilename(regs*)+0xf9>
c00103a8:	6a 00                	push   0x0
c00103aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103b2:	05 0c 01 00 00       	add    eax,0x10c
c00103b7:	50                   	push   eax
c00103b8:	57                   	push   edi
c00103b9:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00103c0:	53                   	push   ebx
c00103c1:	e8 3a 7a ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00103c6:	58                   	pop    eax
c00103c7:	5a                   	pop    edx
c00103c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00103cc:	50                   	push   eax
c00103cd:	53                   	push   ebx
c00103ce:	e8 b4 74 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00103d3:	83 c4 10             	add    esp,0x10
c00103d6:	ba 00 00 00 00       	mov    edx,0x0
c00103db:	83 f8 01             	cmp    eax,0x1
c00103de:	b8 00 00 00 00       	mov    eax,0x0
c00103e3:	74 2f                	je     c0010414 <SysSizeFromFilename(regs*)+0x10e>
c00103e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00103ea:	74 3b                	je     c0010427 <SysSizeFromFilename(regs*)+0x121>
c00103ec:	85 f6                	test   esi,esi
c00103ee:	0f 84 5c ff ff ff    	je     c0010350 <SysSizeFromFilename(regs*)+0x4a>
c00103f4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00103fa:	e9 51 ff ff ff       	jmp    c0010350 <SysSizeFromFilename(regs*)+0x4a>
c00103ff:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010405:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001040a:	5b                   	pop    ebx
c001040b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010410:	5e                   	pop    esi
c0010411:	5f                   	pop    edi
c0010412:	5d                   	pop    ebp
c0010413:	c3                   	ret    
c0010414:	85 f6                	test   esi,esi
c0010416:	0f 84 34 ff ff ff    	je     c0010350 <SysSizeFromFilename(regs*)+0x4a>
c001041c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010422:	e9 29 ff ff ff       	jmp    c0010350 <SysSizeFromFilename(regs*)+0x4a>
c0010427:	85 f6                	test   esi,esi
c0010429:	0f 84 21 ff ff ff    	je     c0010350 <SysSizeFromFilename(regs*)+0x4a>
c001042f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010435:	e9 16 ff ff ff       	jmp    c0010350 <SysSizeFromFilename(regs*)+0x4a>

c001043a <SysSizeFromFilenameNoSymlink(regs*)>:
c001043a:	55                   	push   ebp
c001043b:	57                   	push   edi
c001043c:	56                   	push   esi
c001043d:	53                   	push   ebx
c001043e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010444:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001044b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001044e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010451:	85 f6                	test   esi,esi
c0010453:	89 f8                	mov    eax,edi
c0010455:	74 09                	je     c0010460 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0010457:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001045d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010460:	83 f8 02             	cmp    eax,0x2
c0010463:	0f 86 ca 00 00 00    	jbe    c0010533 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0010469:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001046e:	76 1f                	jbe    c001048f <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0010470:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010473:	31 d2                	xor    edx,edx
c0010475:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001047b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010482:	31 c0                	xor    eax,eax
c0010484:	81 c4 4c 02 00 00    	add    esp,0x24c
c001048a:	5b                   	pop    ebx
c001048b:	5e                   	pop    esi
c001048c:	5f                   	pop    edi
c001048d:	5d                   	pop    ebp
c001048e:	c3                   	ret    
c001048f:	83 ec 0c             	sub    esp,0xc
c0010492:	68 14 01 00 00       	push   0x114
c0010497:	e8 34 e4 ff ff       	call   c000e8d0 <malloc>
c001049c:	6a 00                	push   0x0
c001049e:	89 c5                	mov    ebp,eax
c00104a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104a5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00104a8:	51                   	push   ecx
c00104a9:	57                   	push   edi
c00104aa:	55                   	push   ebp
c00104ab:	e8 7e 7b ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00104b0:	83 c4 1c             	add    esp,0x1c
c00104b3:	8d 44 24 13          	lea    eax,[esp+0x13]
c00104b7:	50                   	push   eax
c00104b8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00104bb:	53                   	push   ebx
c00104bc:	55                   	push   ebp
c00104bd:	e8 6a 7f ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	85 ed                	test   ebp,ebp
c00104c7:	89 c3                	mov    ebx,eax
c00104c9:	74 0d                	je     c00104d8 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00104cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00104ce:	83 ec 0c             	sub    esp,0xc
c00104d1:	55                   	push   ebp
c00104d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00104d5:	83 c4 10             	add    esp,0x10
c00104d8:	85 db                	test   ebx,ebx
c00104da:	75 57                	jne    c0010533 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00104dc:	6a 00                	push   0x0
c00104de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00104e6:	05 0c 01 00 00       	add    eax,0x10c
c00104eb:	50                   	push   eax
c00104ec:	57                   	push   edi
c00104ed:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00104f4:	53                   	push   ebx
c00104f5:	e8 06 79 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00104fa:	58                   	pop    eax
c00104fb:	5a                   	pop    edx
c00104fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010500:	50                   	push   eax
c0010501:	53                   	push   ebx
c0010502:	e8 80 73 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	ba 00 00 00 00       	mov    edx,0x0
c001050f:	83 f8 01             	cmp    eax,0x1
c0010512:	b8 00 00 00 00       	mov    eax,0x0
c0010517:	74 2f                	je     c0010548 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0010519:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001051e:	74 3b                	je     c001055b <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0010520:	85 f6                	test   esi,esi
c0010522:	0f 84 5c ff ff ff    	je     c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010528:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001052e:	e9 51 ff ff ff       	jmp    c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010533:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010539:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001053e:	5b                   	pop    ebx
c001053f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010544:	5e                   	pop    esi
c0010545:	5f                   	pop    edi
c0010546:	5d                   	pop    ebp
c0010547:	c3                   	ret    
c0010548:	85 f6                	test   esi,esi
c001054a:	0f 84 34 ff ff ff    	je     c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010550:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010556:	e9 29 ff ff ff       	jmp    c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001055b:	85 f6                	test   esi,esi
c001055d:	0f 84 21 ff ff ff    	je     c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010563:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010569:	e9 16 ff ff ff       	jmp    c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001056e <SysClose(regs*)>:
c001056e:	53                   	push   ebx
c001056f:	83 ec 08             	sub    esp,0x8
c0010572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010576:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010579:	83 f8 02             	cmp    eax,0x2
c001057c:	76 41                	jbe    c00105bf <SysClose(regs*)+0x51>
c001057e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010584:	83 fa 01             	cmp    edx,0x1
c0010587:	76 2d                	jbe    c00105b6 <SysClose(regs*)+0x48>
c0010589:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001058e:	77 2f                	ja     c00105bf <SysClose(regs*)+0x51>
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	50                   	push   eax
c0010594:	e8 50 18 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c0010599:	89 04 24             	mov    DWORD PTR [esp],eax
c001059c:	89 c3                	mov    ebx,eax
c001059e:	e8 e5 7b ff ff       	call   c0008188 <File::close()>
c00105a3:	83 c4 10             	add    esp,0x10
c00105a6:	85 db                	test   ebx,ebx
c00105a8:	74 0c                	je     c00105b6 <SysClose(regs*)+0x48>
c00105aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105ac:	83 ec 0c             	sub    esp,0xc
c00105af:	53                   	push   ebx
c00105b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00105b3:	83 c4 10             	add    esp,0x10
c00105b6:	83 c4 08             	add    esp,0x8
c00105b9:	31 c0                	xor    eax,eax
c00105bb:	5b                   	pop    ebx
c00105bc:	31 d2                	xor    edx,edx
c00105be:	c3                   	ret    
c00105bf:	83 c4 08             	add    esp,0x8
c00105c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105c7:	5b                   	pop    ebx
c00105c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105cd:	c3                   	ret    

c00105ce <SysOpenDir(regs*)>:
c00105ce:	56                   	push   esi
c00105cf:	53                   	push   ebx
c00105d0:	83 ec 04             	sub    esp,0x4
c00105d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105d7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00105da:	85 c9                	test   ecx,ecx
c00105dc:	74 5d                	je     c001063b <SysOpenDir(regs*)+0x6d>
c00105de:	83 ec 0c             	sub    esp,0xc
c00105e1:	68 14 01 00 00       	push   0x114
c00105e6:	e8 e5 e2 ff ff       	call   c000e8d0 <malloc>
c00105eb:	83 c4 0c             	add    esp,0xc
c00105ee:	89 c6                	mov    esi,eax
c00105f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105f8:	50                   	push   eax
c00105f9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00105fc:	52                   	push   edx
c00105fd:	56                   	push   esi
c00105fe:	e8 e9 7f ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c0010603:	83 c4 10             	add    esp,0x10
c0010606:	85 f6                	test   esi,esi
c0010608:	74 31                	je     c001063b <SysOpenDir(regs*)+0x6d>
c001060a:	83 ec 0c             	sub    esp,0xc
c001060d:	56                   	push   esi
c001060e:	e8 a1 80 ff ff       	call   c00086b4 <Directory::open()>
c0010613:	83 c4 10             	add    esp,0x10
c0010616:	85 c0                	test   eax,eax
c0010618:	75 21                	jne    c001063b <SysOpenDir(regs*)+0x6d>
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	56                   	push   esi
c001061e:	e8 c9 14 00 00       	call   c0011aec <UnixFile::getFileDescriptor()>
c0010623:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	89 02                	mov    DWORD PTR [edx],eax
c001062b:	c1 f8 1f             	sar    eax,0x1f
c001062e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010631:	83 c4 04             	add    esp,0x4
c0010634:	31 c0                	xor    eax,eax
c0010636:	5b                   	pop    ebx
c0010637:	31 d2                	xor    edx,edx
c0010639:	5e                   	pop    esi
c001063a:	c3                   	ret    
c001063b:	83 c4 04             	add    esp,0x4
c001063e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010643:	5b                   	pop    ebx
c0010644:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010649:	5e                   	pop    esi
c001064a:	c3                   	ret    

c001064b <SysMakeDir(regs*)>:
c001064b:	56                   	push   esi
c001064c:	53                   	push   ebx
c001064d:	83 ec 10             	sub    esp,0x10
c0010650:	68 14 01 00 00       	push   0x114
c0010655:	e8 76 e2 ff ff       	call   c000e8d0 <malloc>
c001065a:	83 c4 0c             	add    esp,0xc
c001065d:	89 c3                	mov    ebx,eax
c001065f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010664:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010667:	50                   	push   eax
c0010668:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001066c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001066f:	52                   	push   edx
c0010670:	53                   	push   ebx
c0010671:	e8 76 7f ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	85 db                	test   ebx,ebx
c001067b:	74 2c                	je     c00106a9 <SysMakeDir(regs*)+0x5e>
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	53                   	push   ebx
c0010681:	e8 0e 82 ff ff       	call   c0008894 <Directory::create()>
c0010686:	89 c6                	mov    esi,eax
c0010688:	8b 03                	mov    eax,DWORD PTR [ebx]
c001068a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001068d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	31 c0                	xor    eax,eax
c0010695:	85 f6                	test   esi,esi
c0010697:	0f 95 c0             	setne  al
c001069a:	31 d2                	xor    edx,edx
c001069c:	f7 d8                	neg    eax
c001069e:	83 d2 00             	adc    edx,0x0
c00106a1:	83 c4 04             	add    esp,0x4
c00106a4:	5b                   	pop    ebx
c00106a5:	f7 da                	neg    edx
c00106a7:	5e                   	pop    esi
c00106a8:	c3                   	ret    
c00106a9:	83 c4 04             	add    esp,0x4
c00106ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106b1:	5b                   	pop    ebx
c00106b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106b7:	5e                   	pop    esi
c00106b8:	c3                   	ret    

c00106b9 <SysCloseDir(regs*)>:
c00106b9:	53                   	push   ebx
c00106ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106bf:	83 ec 08             	sub    esp,0x8
c00106c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00106c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106ce:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00106d1:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00106d7:	77 2a                	ja     c0010703 <SysCloseDir(regs*)+0x4a>
c00106d9:	83 ec 0c             	sub    esp,0xc
c00106dc:	51                   	push   ecx
c00106dd:	e8 07 17 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00106e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00106e5:	89 c3                	mov    ebx,eax
c00106e7:	e8 24 80 ff ff       	call   c0008710 <Directory::close()>
c00106ec:	83 c4 10             	add    esp,0x10
c00106ef:	85 db                	test   ebx,ebx
c00106f1:	74 0c                	je     c00106ff <SysCloseDir(regs*)+0x46>
c00106f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106f5:	83 ec 0c             	sub    esp,0xc
c00106f8:	53                   	push   ebx
c00106f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	31 c0                	xor    eax,eax
c0010701:	31 d2                	xor    edx,edx
c0010703:	83 c4 08             	add    esp,0x8
c0010706:	5b                   	pop    ebx
c0010707:	c3                   	ret    

c0010708 <SysWait(regs*)>:
c0010708:	83 ec 10             	sub    esp,0x10
c001070b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001070f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010712:	52                   	push   edx
c0010713:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010716:	51                   	push   ecx
c0010717:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001071a:	50                   	push   eax
c001071b:	e8 b8 4d 00 00       	call   c00154d8 <waitTask(int, int*, int)>
c0010720:	83 c4 1c             	add    esp,0x1c
c0010723:	89 c2                	mov    edx,eax
c0010725:	c1 fa 1f             	sar    edx,0x1f
c0010728:	c3                   	ret    

c0010729 <SysNotImpl(regs*)>:
c0010729:	83 ec 18             	sub    esp,0x18
c001072c:	68 04 23 02 c0       	push   0xc0022304
c0010731:	e8 e0 e4 ff ff       	call   c000ec16 <KePanic(char const*)>
c0010736:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001073b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010740:	83 c4 1c             	add    esp,0x1c
c0010743:	c3                   	ret    

c0010744 <SysPanic(regs*)>:
c0010744:	83 ec 18             	sub    esp,0x18
c0010747:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001074b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001074e:	50                   	push   eax
c001074f:	e8 c2 e4 ff ff       	call   c000ec16 <KePanic(char const*)>
c0010754:	b8 01 00 00 00       	mov    eax,0x1
c0010759:	31 d2                	xor    edx,edx
c001075b:	83 c4 1c             	add    esp,0x1c
c001075e:	c3                   	ret    

c001075f <SysRmdir(regs*)>:
c001075f:	56                   	push   esi
c0010760:	53                   	push   ebx
c0010761:	83 ec 10             	sub    esp,0x10
c0010764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010768:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001076b:	68 14 01 00 00       	push   0x114
c0010770:	e8 5b e1 ff ff       	call   c000e8d0 <malloc>
c0010775:	6a 00                	push   0x0
c0010777:	89 c3                	mov    ebx,eax
c0010779:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001077e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010781:	50                   	push   eax
c0010782:	56                   	push   esi
c0010783:	53                   	push   ebx
c0010784:	e8 a5 78 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010789:	83 c4 14             	add    esp,0x14
c001078c:	53                   	push   ebx
c001078d:	e8 66 7b ff ff       	call   c00082f8 <File::unlink()>
c0010792:	83 c4 10             	add    esp,0x10
c0010795:	85 db                	test   ebx,ebx
c0010797:	89 c6                	mov    esi,eax
c0010799:	74 0c                	je     c00107a7 <SysRmdir(regs*)+0x48>
c001079b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001079d:	83 ec 0c             	sub    esp,0xc
c00107a0:	53                   	push   ebx
c00107a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107a4:	83 c4 10             	add    esp,0x10
c00107a7:	31 c0                	xor    eax,eax
c00107a9:	85 f6                	test   esi,esi
c00107ab:	0f 95 c0             	setne  al
c00107ae:	31 d2                	xor    edx,edx
c00107b0:	f7 d8                	neg    eax
c00107b2:	83 d2 00             	adc    edx,0x0
c00107b5:	83 c4 04             	add    esp,0x4
c00107b8:	5b                   	pop    ebx
c00107b9:	f7 da                	neg    edx
c00107bb:	5e                   	pop    esi
c00107bc:	c3                   	ret    

c00107bd <SysUnlink(regs*)>:
c00107bd:	56                   	push   esi
c00107be:	53                   	push   ebx
c00107bf:	83 ec 10             	sub    esp,0x10
c00107c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107c6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00107c9:	68 14 01 00 00       	push   0x114
c00107ce:	e8 fd e0 ff ff       	call   c000e8d0 <malloc>
c00107d3:	6a 00                	push   0x0
c00107d5:	89 c3                	mov    ebx,eax
c00107d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107df:	50                   	push   eax
c00107e0:	56                   	push   esi
c00107e1:	53                   	push   ebx
c00107e2:	e8 47 78 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00107e7:	83 c4 14             	add    esp,0x14
c00107ea:	53                   	push   ebx
c00107eb:	e8 08 7b ff ff       	call   c00082f8 <File::unlink()>
c00107f0:	83 c4 10             	add    esp,0x10
c00107f3:	85 db                	test   ebx,ebx
c00107f5:	89 c6                	mov    esi,eax
c00107f7:	74 0c                	je     c0010805 <SysUnlink(regs*)+0x48>
c00107f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107fb:	83 ec 0c             	sub    esp,0xc
c00107fe:	53                   	push   ebx
c00107ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010802:	83 c4 10             	add    esp,0x10
c0010805:	31 c0                	xor    eax,eax
c0010807:	85 f6                	test   esi,esi
c0010809:	0f 95 c0             	setne  al
c001080c:	31 d2                	xor    edx,edx
c001080e:	f7 d8                	neg    eax
c0010810:	83 d2 00             	adc    edx,0x0
c0010813:	83 c4 04             	add    esp,0x4
c0010816:	5b                   	pop    ebx
c0010817:	f7 da                	neg    edx
c0010819:	5e                   	pop    esi
c001081a:	c3                   	ret    

c001081b <SysGetArgv(regs*)>:
c001081b:	83 ec 0c             	sub    esp,0xc
c001081e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010822:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010825:	85 c0                	test   eax,eax
c0010827:	78 2c                	js     c0010855 <SysGetArgv(regs*)+0x3a>
c0010829:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001082f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010832:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010838:	7d 1b                	jge    c0010855 <SysGetArgv(regs*)+0x3a>
c001083a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010841:	85 c0                	test   eax,eax
c0010843:	74 18                	je     c001085d <SysGetArgv(regs*)+0x42>
c0010845:	83 ec 08             	sub    esp,0x8
c0010848:	50                   	push   eax
c0010849:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001084c:	50                   	push   eax
c001084d:	e8 fe fd fe ff       	call   c0000650 <strcpy>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	31 c0                	xor    eax,eax
c0010857:	31 d2                	xor    edx,edx
c0010859:	83 c4 0c             	add    esp,0xc
c001085c:	c3                   	ret    
c001085d:	b8 01 00 00 00       	mov    eax,0x1
c0010862:	31 d2                	xor    edx,edx
c0010864:	83 c4 0c             	add    esp,0xc
c0010867:	c3                   	ret    

c0010868 <SysUSleep(regs*)>:
c0010868:	83 ec 1c             	sub    esp,0x1c
c001086b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001086f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010872:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010875:	6a 00                	push   0x0
c0010877:	6a 64                	push   0x64
c0010879:	52                   	push   edx
c001087a:	50                   	push   eax
c001087b:	e8 24 f2 00 00       	call   c001faa4 <__udivdi3>
c0010880:	83 c4 14             	add    esp,0x14
c0010883:	50                   	push   eax
c0010884:	e8 3b 4d 00 00       	call   c00155c4 <milliTenthSleep(unsigned int)>
c0010889:	31 c0                	xor    eax,eax
c001088b:	31 d2                	xor    edx,edx
c001088d:	83 c4 1c             	add    esp,0x1c
c0010890:	c3                   	ret    

c0010891 <SysSpawn(regs*)>:
c0010891:	56                   	push   esi
c0010892:	53                   	push   ebx
c0010893:	83 ec 04             	sub    esp,0x4
c0010896:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001089a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001089d:	85 f6                	test   esi,esi
c001089f:	75 0a                	jne    c00108ab <SysSpawn(regs*)+0x1a>
c00108a1:	83 c4 04             	add    esp,0x4
c00108a4:	31 c0                	xor    eax,eax
c00108a6:	5b                   	pop    ebx
c00108a7:	31 d2                	xor    edx,edx
c00108a9:	5e                   	pop    esi
c00108aa:	c3                   	ret    
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	68 24 07 00 00       	push   0x724
c00108b3:	e8 18 e0 ff ff       	call   c000e8d0 <malloc>
c00108b8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00108bb:	83 c4 10             	add    esp,0x10
c00108be:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00108c1:	89 c6                	mov    esi,eax
c00108c3:	31 c0                	xor    eax,eax
c00108c5:	85 c9                	test   ecx,ecx
c00108c7:	75 08                	jne    c00108d1 <SysSpawn(regs*)+0x40>
c00108c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d1:	52                   	push   edx
c00108d2:	50                   	push   eax
c00108d3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00108d6:	50                   	push   eax
c00108d7:	56                   	push   esi
c00108d8:	e8 7f 44 00 00       	call   c0014d5c <Process::Process(char const*, Process*, char**)>
c00108dd:	83 c4 10             	add    esp,0x10
c00108e0:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00108e7:	75 b8                	jne    c00108a1 <SysSpawn(regs*)+0x10>
c00108e9:	83 ec 0c             	sub    esp,0xc
c00108ec:	56                   	push   esi
c00108ed:	e8 a6 49 00 00       	call   c0015298 <Process::createUserThread()>
c00108f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00108f4:	83 c4 10             	add    esp,0x10
c00108f7:	83 c4 04             	add    esp,0x4
c00108fa:	5b                   	pop    ebx
c00108fb:	89 c2                	mov    edx,eax
c00108fd:	c1 fa 1f             	sar    edx,0x1f
c0010900:	5e                   	pop    esi
c0010901:	c3                   	ret    

c0010902 <SysGetEnv(regs*)>:
c0010902:	57                   	push   edi
c0010903:	56                   	push   esi
c0010904:	53                   	push   ebx
c0010905:	83 ec 1c             	sub    esp,0x1c
c0010908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001090d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010911:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010914:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010917:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001091a:	51                   	push   ecx
c001091b:	e8 fb d2 ff ff       	call   c000dc1b <KeGetProcessTotalEnvCount(Process*)>
c0010920:	83 c4 10             	add    esp,0x10
c0010923:	39 c7                	cmp    edi,eax
c0010925:	7c 12                	jl     c0010939 <SysGetEnv(regs*)+0x37>
c0010927:	31 c0                	xor    eax,eax
c0010929:	31 d2                	xor    edx,edx
c001092b:	85 f6                	test   esi,esi
c001092d:	74 03                	je     c0010932 <SysGetEnv(regs*)+0x30>
c001092f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	5b                   	pop    ebx
c0010936:	5e                   	pop    esi
c0010937:	5f                   	pop    edi
c0010938:	c3                   	ret    
c0010939:	8d 44 24 08          	lea    eax,[esp+0x8]
c001093d:	83 ec 04             	sub    esp,0x4
c0010940:	57                   	push   edi
c0010941:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010947:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001094a:	57                   	push   edi
c001094b:	50                   	push   eax
c001094c:	e8 ea d2 ff ff       	call   c000dc3b <KeGetProcessEnvPair(Process*, int)>
c0010951:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010958:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001095c:	83 c4 0c             	add    esp,0xc
c001095f:	85 d2                	test   edx,edx
c0010961:	75 23                	jne    c0010986 <SysGetEnv(regs*)+0x84>
c0010963:	83 ec 0c             	sub    esp,0xc
c0010966:	50                   	push   eax
c0010967:	e8 14 fc fe ff       	call   c0000580 <strlen>
c001096c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001096f:	89 c3                	mov    ebx,eax
c0010971:	e8 0a fc fe ff       	call   c0000580 <strlen>
c0010976:	83 c4 10             	add    esp,0x10
c0010979:	31 d2                	xor    edx,edx
c001097b:	83 c4 10             	add    esp,0x10
c001097e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010982:	5b                   	pop    ebx
c0010983:	5e                   	pop    esi
c0010984:	5f                   	pop    edi
c0010985:	c3                   	ret    
c0010986:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010989:	83 ec 08             	sub    esp,0x8
c001098c:	50                   	push   eax
c001098d:	56                   	push   esi
c001098e:	e8 bd fc fe ff       	call   c0000650 <strcpy>
c0010993:	58                   	pop    eax
c0010994:	5a                   	pop    edx
c0010995:	68 1e 23 02 c0       	push   0xc002231e
c001099a:	56                   	push   esi
c001099b:	e8 d0 fe fe ff       	call   c0000870 <strcat>
c00109a0:	59                   	pop    ecx
c00109a1:	5b                   	pop    ebx
c00109a2:	57                   	push   edi
c00109a3:	56                   	push   esi
c00109a4:	e8 c7 fe fe ff       	call   c0000870 <strcat>
c00109a9:	83 c4 10             	add    esp,0x10
c00109ac:	31 c0                	xor    eax,eax
c00109ae:	83 c4 10             	add    esp,0x10
c00109b1:	31 d2                	xor    edx,edx
c00109b3:	5b                   	pop    ebx
c00109b4:	5e                   	pop    esi
c00109b5:	5f                   	pop    edi
c00109b6:	c3                   	ret    

c00109b7 <SysSetFatAttrib(regs*)>:
c00109b7:	57                   	push   edi
c00109b8:	56                   	push   esi
c00109b9:	53                   	push   ebx
c00109ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109be:	83 ec 0c             	sub    esp,0xc
c00109c1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00109c4:	68 14 01 00 00       	push   0x114
c00109c9:	e8 02 df ff ff       	call   c000e8d0 <malloc>
c00109ce:	83 c4 0c             	add    esp,0xc
c00109d1:	89 c3                	mov    ebx,eax
c00109d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109db:	50                   	push   eax
c00109dc:	57                   	push   edi
c00109dd:	53                   	push   ebx
c00109de:	e8 29 77 ff ff       	call   c000810c <File::File(char const*, Process*)>
c00109e3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00109e6:	83 c4 0c             	add    esp,0xc
c00109e9:	0f b6 d4             	movzx  edx,ah
c00109ec:	0f b6 c0             	movzx  eax,al
c00109ef:	52                   	push   edx
c00109f0:	50                   	push   eax
c00109f1:	53                   	push   ebx
c00109f2:	e8 9b 79 ff ff       	call   c0008392 <File::chfatattr(unsigned char, unsigned char)>
c00109f7:	83 c4 10             	add    esp,0x10
c00109fa:	85 db                	test   ebx,ebx
c00109fc:	89 c6                	mov    esi,eax
c00109fe:	74 0c                	je     c0010a0c <SysSetFatAttrib(regs*)+0x55>
c0010a00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a02:	83 ec 0c             	sub    esp,0xc
c0010a05:	53                   	push   ebx
c0010a06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a09:	83 c4 10             	add    esp,0x10
c0010a0c:	5b                   	pop    ebx
c0010a0d:	31 c0                	xor    eax,eax
c0010a0f:	85 f6                	test   esi,esi
c0010a11:	0f 95 c0             	setne  al
c0010a14:	31 d2                	xor    edx,edx
c0010a16:	5e                   	pop    esi
c0010a17:	f7 d8                	neg    eax
c0010a19:	83 d2 00             	adc    edx,0x0
c0010a1c:	f7 da                	neg    edx
c0010a1e:	5f                   	pop    edi
c0010a1f:	c3                   	ret    

c0010a20 <SysShutdown(regs*)>:
c0010a20:	83 ec 1c             	sub    esp,0x1c
c0010a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a27:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010a2a:	85 c9                	test   ecx,ecx
c0010a2c:	74 18                	je     c0010a46 <SysShutdown(regs*)+0x26>
c0010a2e:	83 f9 01             	cmp    ecx,0x1
c0010a31:	74 26                	je     c0010a59 <SysShutdown(regs*)+0x39>
c0010a33:	83 f9 02             	cmp    ecx,0x2
c0010a36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a3b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a40:	74 24                	je     c0010a66 <SysShutdown(regs*)+0x46>
c0010a42:	83 c4 1c             	add    esp,0x1c
c0010a45:	c3                   	ret    
c0010a46:	e8 49 cc ff ff       	call   c000d694 <KeShutdown()>
c0010a4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a50:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a55:	83 c4 1c             	add    esp,0x1c
c0010a58:	c3                   	ret    
c0010a59:	e8 5a cc ff ff       	call   c000d6b8 <KeSleep()>
c0010a5e:	31 c0                	xor    eax,eax
c0010a60:	31 d2                	xor    edx,edx
c0010a62:	83 c4 1c             	add    esp,0x1c
c0010a65:	c3                   	ret    
c0010a66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a6e:	e8 51 cc ff ff       	call   c000d6c4 <KeRestart()>
c0010a73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a7b:	eb c5                	jmp    c0010a42 <SysShutdown(regs*)+0x22>

c0010a7d <SysPipe(regs*)>:
c0010a7d:	57                   	push   edi
c0010a7e:	56                   	push   esi
c0010a7f:	53                   	push   ebx
c0010a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a84:	83 ec 0c             	sub    esp,0xc
c0010a87:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010a8a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010a8d:	6a 20                	push   0x20
c0010a8f:	e8 3c de ff ff       	call   c000e8d0 <malloc>
c0010a94:	89 c3                	mov    ebx,eax
c0010a96:	58                   	pop    eax
c0010a97:	5a                   	pop    edx
c0010a98:	68 00 50 00 00       	push   0x5000
c0010a9d:	53                   	push   ebx
c0010a9e:	e8 d1 e9 ff ff       	call   c000f474 <Pipe::Pipe(int)>
c0010aa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aa6:	e8 41 10 00 00       	call   c0011aec <UnixFile::getFileDescriptor()>
c0010aab:	89 07                	mov    DWORD PTR [edi],eax
c0010aad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ab0:	e8 37 10 00 00       	call   c0011aec <UnixFile::getFileDescriptor()>
c0010ab5:	83 c4 10             	add    esp,0x10
c0010ab8:	31 d2                	xor    edx,edx
c0010aba:	89 06                	mov    DWORD PTR [esi],eax
c0010abc:	31 c0                	xor    eax,eax
c0010abe:	5b                   	pop    ebx
c0010abf:	5e                   	pop    esi
c0010ac0:	5f                   	pop    edi
c0010ac1:	c3                   	ret    

c0010ac2 <SysGetUnixTime(regs*)>:
c0010ac2:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010ac7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010acd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ad1:	e9 be 80 ff ff       	jmp    c0008b94 <Clock::timeInSecondsLocal()>

c0010ad6 <string_ends_with(char const*, char const*)>:
c0010ad6:	57                   	push   edi
c0010ad7:	56                   	push   esi
c0010ad8:	53                   	push   ebx
c0010ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010add:	83 ec 0c             	sub    esp,0xc
c0010ae0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010ae4:	53                   	push   ebx
c0010ae5:	e8 96 fa fe ff       	call   c0000580 <strlen>
c0010aea:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010aed:	89 c6                	mov    esi,eax
c0010aef:	e8 8c fa fe ff       	call   c0000580 <strlen>
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	31 d2                	xor    edx,edx
c0010af9:	39 c6                	cmp    esi,eax
c0010afb:	7d 06                	jge    c0010b03 <string_ends_with(char const*, char const*)+0x2d>
c0010afd:	5b                   	pop    ebx
c0010afe:	89 d0                	mov    eax,edx
c0010b00:	5e                   	pop    esi
c0010b01:	5f                   	pop    edi
c0010b02:	c3                   	ret    
c0010b03:	83 ec 08             	sub    esp,0x8
c0010b06:	29 c6                	sub    esi,eax
c0010b08:	57                   	push   edi
c0010b09:	01 f3                	add    ebx,esi
c0010b0b:	53                   	push   ebx
c0010b0c:	e8 6f fc fe ff       	call   c0000780 <strcmp>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	31 d2                	xor    edx,edx
c0010b16:	5b                   	pop    ebx
c0010b17:	5e                   	pop    esi
c0010b18:	85 c0                	test   eax,eax
c0010b1a:	5f                   	pop    edi
c0010b1b:	0f 94 c2             	sete   dl
c0010b1e:	89 d0                	mov    eax,edx
c0010b20:	c3                   	ret    

c0010b21 <SysOpen(regs*)>:
c0010b21:	56                   	push   esi
c0010b22:	53                   	push   ebx
c0010b23:	81 ec 04 01 00 00    	sub    esp,0x104
c0010b29:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010b30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b33:	85 c0                	test   eax,eax
c0010b35:	0f 84 c4 01 00 00    	je     c0010cff <SysOpen(regs*)+0x1de>
c0010b3b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b3e:	85 c0                	test   eax,eax
c0010b40:	0f 84 b9 01 00 00    	je     c0010cff <SysOpen(regs*)+0x1de>
c0010b46:	6a 00                	push   0x0
c0010b48:	68 20 23 02 c0       	push   0xc0022320
c0010b4d:	50                   	push   eax
c0010b4e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010b52:	56                   	push   esi
c0010b53:	e8 a8 72 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010b58:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b5b:	e8 20 fa fe ff       	call   c0000580 <strlen>
c0010b60:	83 c4 10             	add    esp,0x10
c0010b63:	83 e8 01             	sub    eax,0x1
c0010b66:	74 29                	je     c0010b91 <SysOpen(regs*)+0x70>
c0010b68:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010b6c:	83 fa 2e             	cmp    edx,0x2e
c0010b6f:	74 1c                	je     c0010b8d <SysOpen(regs*)+0x6c>
c0010b71:	83 fa 3a             	cmp    edx,0x3a
c0010b74:	74 17                	je     c0010b8d <SysOpen(regs*)+0x6c>
c0010b76:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010b7a:	83 e8 01             	sub    eax,0x1
c0010b7d:	74 12                	je     c0010b91 <SysOpen(regs*)+0x70>
c0010b7f:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010b83:	83 fa 3a             	cmp    edx,0x3a
c0010b86:	74 05                	je     c0010b8d <SysOpen(regs*)+0x6c>
c0010b88:	83 fa 2e             	cmp    edx,0x2e
c0010b8b:	75 e9                	jne    c0010b76 <SysOpen(regs*)+0x55>
c0010b8d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010b91:	83 ec 08             	sub    esp,0x8
c0010b94:	68 24 23 02 c0       	push   0xc0022324
c0010b99:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b9c:	50                   	push   eax
c0010b9d:	e8 34 ff ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010ba2:	83 c4 10             	add    esp,0x10
c0010ba5:	85 c0                	test   eax,eax
c0010ba7:	74 1d                	je     c0010bc6 <SysOpen(regs*)+0xa5>
c0010ba9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bac:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010bb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bb9:	81 c4 04 01 00 00    	add    esp,0x104
c0010bbf:	31 c0                	xor    eax,eax
c0010bc1:	5b                   	pop    ebx
c0010bc2:	31 d2                	xor    edx,edx
c0010bc4:	5e                   	pop    esi
c0010bc5:	c3                   	ret    
c0010bc6:	83 ec 08             	sub    esp,0x8
c0010bc9:	68 29 23 02 c0       	push   0xc0022329
c0010bce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bd1:	50                   	push   eax
c0010bd2:	e8 ff fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010bd7:	83 c4 10             	add    esp,0x10
c0010bda:	85 c0                	test   eax,eax
c0010bdc:	75 cb                	jne    c0010ba9 <SysOpen(regs*)+0x88>
c0010bde:	83 ec 08             	sub    esp,0x8
c0010be1:	68 25 23 02 c0       	push   0xc0022325
c0010be6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010be9:	50                   	push   eax
c0010bea:	e8 91 fb fe ff       	call   c0000780 <strcmp>
c0010bef:	83 c4 10             	add    esp,0x10
c0010bf2:	85 c0                	test   eax,eax
c0010bf4:	74 b3                	je     c0010ba9 <SysOpen(regs*)+0x88>
c0010bf6:	83 ec 08             	sub    esp,0x8
c0010bf9:	68 24 23 02 c0       	push   0xc0022324
c0010bfe:	56                   	push   esi
c0010bff:	e8 d2 fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010c04:	83 c4 10             	add    esp,0x10
c0010c07:	85 c0                	test   eax,eax
c0010c09:	75 9e                	jne    c0010ba9 <SysOpen(regs*)+0x88>
c0010c0b:	83 ec 08             	sub    esp,0x8
c0010c0e:	68 2e 23 02 c0       	push   0xc002232e
c0010c13:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c16:	50                   	push   eax
c0010c17:	e8 ba fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	85 c0                	test   eax,eax
c0010c21:	0f 85 eb 00 00 00    	jne    c0010d12 <SysOpen(regs*)+0x1f1>
c0010c27:	83 ec 08             	sub    esp,0x8
c0010c2a:	68 33 23 02 c0       	push   0xc0022333
c0010c2f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c32:	50                   	push   eax
c0010c33:	e8 9e fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	85 c0                	test   eax,eax
c0010c3d:	0f 85 cf 00 00 00    	jne    c0010d12 <SysOpen(regs*)+0x1f1>
c0010c43:	83 ec 08             	sub    esp,0x8
c0010c46:	68 2f 23 02 c0       	push   0xc002232f
c0010c4b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010c4e:	51                   	push   ecx
c0010c4f:	e8 2c fb fe ff       	call   c0000780 <strcmp>
c0010c54:	83 c4 10             	add    esp,0x10
c0010c57:	85 c0                	test   eax,eax
c0010c59:	0f 84 b3 00 00 00    	je     c0010d12 <SysOpen(regs*)+0x1f1>
c0010c5f:	83 ec 08             	sub    esp,0x8
c0010c62:	68 2e 23 02 c0       	push   0xc002232e
c0010c67:	56                   	push   esi
c0010c68:	e8 69 fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	85 c0                	test   eax,eax
c0010c72:	0f 85 9a 00 00 00    	jne    c0010d12 <SysOpen(regs*)+0x1f1>
c0010c78:	83 ec 0c             	sub    esp,0xc
c0010c7b:	68 14 01 00 00       	push   0x114
c0010c80:	e8 4b dc ff ff       	call   c000e8d0 <malloc>
c0010c85:	83 c4 0c             	add    esp,0xc
c0010c88:	89 c6                	mov    esi,eax
c0010c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c92:	50                   	push   eax
c0010c93:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010c96:	52                   	push   edx
c0010c97:	56                   	push   esi
c0010c98:	e8 6f 74 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	85 f6                	test   esi,esi
c0010ca2:	74 5b                	je     c0010cff <SysOpen(regs*)+0x1de>
c0010ca4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010ca7:	0f b6 c2             	movzx  eax,dl
c0010caa:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010cad:	89 d0                	mov    eax,edx
c0010caf:	83 e0 01             	and    eax,0x1
c0010cb2:	f6 c2 02             	test   dl,0x2
c0010cb5:	74 03                	je     c0010cba <SysOpen(regs*)+0x199>
c0010cb7:	83 c8 02             	or     eax,0x2
c0010cba:	f6 c2 04             	test   dl,0x4
c0010cbd:	74 03                	je     c0010cc2 <SysOpen(regs*)+0x1a1>
c0010cbf:	83 c8 04             	or     eax,0x4
c0010cc2:	f6 c2 08             	test   dl,0x8
c0010cc5:	74 03                	je     c0010cca <SysOpen(regs*)+0x1a9>
c0010cc7:	83 c8 0a             	or     eax,0xa
c0010cca:	80 e2 10             	and    dl,0x10
c0010ccd:	74 03                	je     c0010cd2 <SysOpen(regs*)+0x1b1>
c0010ccf:	83 c8 12             	or     eax,0x12
c0010cd2:	83 ec 08             	sub    esp,0x8
c0010cd5:	50                   	push   eax
c0010cd6:	56                   	push   esi
c0010cd7:	e8 4e 74 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0010cdc:	83 c4 10             	add    esp,0x10
c0010cdf:	85 c0                	test   eax,eax
c0010ce1:	75 1c                	jne    c0010cff <SysOpen(regs*)+0x1de>
c0010ce3:	83 ec 0c             	sub    esp,0xc
c0010ce6:	56                   	push   esi
c0010ce7:	e8 00 0e 00 00       	call   c0011aec <UnixFile::getFileDescriptor()>
c0010cec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	89 02                	mov    DWORD PTR [edx],eax
c0010cf4:	c1 f8 1f             	sar    eax,0x1f
c0010cf7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010cfa:	e9 ba fe ff ff       	jmp    c0010bb9 <SysOpen(regs*)+0x98>
c0010cff:	81 c4 04 01 00 00    	add    esp,0x104
c0010d05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d0a:	5b                   	pop    ebx
c0010d0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d10:	5e                   	pop    esi
c0010d11:	c3                   	ret    
c0010d12:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d15:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010d1b:	e9 92 fe ff ff       	jmp    c0010bb2 <SysOpen(regs*)+0x91>

c0010d20 <KeSystemCall(regs*, void*)>:
c0010d20:	56                   	push   esi
c0010d21:	53                   	push   ebx
c0010d22:	50                   	push   eax
c0010d23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d27:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010d2a:	83 fb 40             	cmp    ebx,0x40
c0010d2d:	77 25                	ja     c0010d54 <KeSystemCall(regs*, void*)+0x34>
c0010d2f:	8b 04 9d a0 40 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf60]
c0010d36:	85 c0                	test   eax,eax
c0010d38:	74 1a                	je     c0010d54 <KeSystemCall(regs*, void*)+0x34>
c0010d3a:	83 ec 0c             	sub    esp,0xc
c0010d3d:	56                   	push   esi
c0010d3e:	ff d0                	call   eax
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	83 fb 2f             	cmp    ebx,0x2f
c0010d46:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010d49:	75 19                	jne    c0010d64 <KeSystemCall(regs*, void*)+0x44>
c0010d4b:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010d52:	eb 10                	jmp    c0010d64 <KeSystemCall(regs*, void*)+0x44>
c0010d54:	56                   	push   esi
c0010d55:	56                   	push   esi
c0010d56:	53                   	push   ebx
c0010d57:	68 38 23 02 c0       	push   0xc0022338
c0010d5c:	e8 ed 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010d61:	83 c4 10             	add    esp,0x10
c0010d64:	59                   	pop    ecx
c0010d65:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010d6a:	31 d2                	xor    edx,edx
c0010d6c:	5b                   	pop    ebx
c0010d6d:	5e                   	pop    esi
c0010d6e:	c3                   	ret    
c0010d6f:	90                   	nop

c0010d70 <VgaText::isAtty()>:
c0010d70:	b0 01                	mov    al,0x1
c0010d72:	c3                   	ret    
c0010d73:	90                   	nop

c0010d74 <VgaText::~VgaText()>:
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	ba 80 23 02 c0       	mov    edx,0xc0022380
c0010d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d80:	89 10                	mov    DWORD PTR [eax],edx
c0010d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d86:	83 ec 0c             	sub    esp,0xc
c0010d89:	50                   	push   eax
c0010d8a:	e8 4b 0f 00 00       	call   c0011cda <UnixFile::~UnixFile()>
c0010d8f:	83 c4 10             	add    esp,0x10
c0010d92:	90                   	nop
c0010d93:	83 c4 0c             	add    esp,0xc
c0010d96:	c3                   	ret    
c0010d97:	90                   	nop

c0010d98 <VgaText::~VgaText()>:
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	83 ec 0c             	sub    esp,0xc
c0010d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010da2:	e8 cd ff ff ff       	call   c0010d74 <VgaText::~VgaText()>
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	83 ec 08             	sub    esp,0x8
c0010dad:	68 84 01 00 00       	push   0x184
c0010db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db6:	e8 a0 b8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	83 c4 0c             	add    esp,0xc
c0010dc1:	c3                   	ret    

c0010dc2 <VgaText::read(unsigned long long, void*, int*)>:
c0010dc2:	83 ec 10             	sub    esp,0x10
c0010dc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dc9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010dcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd1:	e8 c3 8d ff ff       	call   c0009b99 <readKeyboard(VgaText*, char*, unsigned long)>
c0010dd6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010dda:	89 02                	mov    DWORD PTR [edx],eax
c0010ddc:	31 c0                	xor    eax,eax
c0010dde:	83 c4 1c             	add    esp,0x1c
c0010de1:	c3                   	ret    

c0010de2 <setTerminalScrollLock(bool)>:
c0010de2:	c3                   	ret    

c0010de3 <doTerminalCycle()>:
c0010de3:	c3                   	ret    

c0010de4 <addToTerminalCycle(VgaText*)>:
c0010de4:	c3                   	ret    

c0010de5 <scrollTerminalScrollLock(int)>:
c0010de5:	c3                   	ret    

c0010de6 <VgaText::updateTitle()>:
c0010de6:	c3                   	ret    
c0010de7:	90                   	nop

c0010de8 <VgaText::load()>:
c0010de8:	c3                   	ret    
c0010de9:	90                   	nop

c0010dea <VgaText::updateCursor()>:
c0010dea:	83 ec 14             	sub    esp,0x14
c0010ded:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010df1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010df4:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010df7:	e8 a0 87 00 00       	call   c001959c <HalConsoleCursorUpdate(int, int)>
c0010dfc:	83 c4 1c             	add    esp,0x1c
c0010dff:	c3                   	ret    

c0010e00 <VgaText::doANSI_SGR(int)>:
c0010e00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e08:	85 d2                	test   edx,edx
c0010e0a:	75 0b                	jne    c0010e17 <VgaText::doANSI_SGR(int)+0x17>
c0010e0c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010e0f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e12:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e15:	eb 59                	jmp    c0010e70 <VgaText::doANSI_SGR(int)+0x70>
c0010e17:	83 fa 07             	cmp    edx,0x7
c0010e1a:	75 0b                	jne    c0010e27 <VgaText::doANSI_SGR(int)+0x27>
c0010e1c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010e1f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010e22:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010e25:	eb 49                	jmp    c0010e70 <VgaText::doANSI_SGR(int)+0x70>
c0010e27:	83 fa 1b             	cmp    edx,0x1b
c0010e2a:	74 e0                	je     c0010e0c <VgaText::doANSI_SGR(int)+0xc>
c0010e2c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010e2f:	83 f9 07             	cmp    ecx,0x7
c0010e32:	77 09                	ja     c0010e3d <VgaText::doANSI_SGR(int)+0x3d>
c0010e34:	8b 14 8d e0 41 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbe20]
c0010e3b:	eb 20                	jmp    c0010e5d <VgaText::doANSI_SGR(int)+0x5d>
c0010e3d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010e40:	83 f9 07             	cmp    ecx,0x7
c0010e43:	77 09                	ja     c0010e4e <VgaText::doANSI_SGR(int)+0x4e>
c0010e45:	8b 14 8d e0 41 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbe20]
c0010e4c:	eb 22                	jmp    c0010e70 <VgaText::doANSI_SGR(int)+0x70>
c0010e4e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010e51:	83 f9 07             	cmp    ecx,0x7
c0010e54:	77 0b                	ja     c0010e61 <VgaText::doANSI_SGR(int)+0x61>
c0010e56:	8b 14 95 98 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf68]
c0010e5d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e60:	c3                   	ret    
c0010e61:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010e64:	83 f9 07             	cmp    ecx,0x7
c0010e67:	77 0a                	ja     c0010e73 <VgaText::doANSI_SGR(int)+0x73>
c0010e69:	8b 14 95 70 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf90]
c0010e70:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010e73:	c3                   	ret    

c0010e74 <VgaText::setDefaultBgColour(VgaColour)>:
c0010e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e7c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010e7f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010e82:	c3                   	ret    
c0010e83:	90                   	nop

c0010e84 <VgaText::setDefaultFgColour(VgaColour)>:
c0010e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e8c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010e8f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e92:	c3                   	ret    
c0010e93:	90                   	nop

c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010e94:	53                   	push   ebx
c0010e95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ea1:	51                   	push   ecx
c0010ea2:	e8 cd ff ff ff       	call   c0010e74 <VgaText::setDefaultBgColour(VgaColour)>
c0010ea7:	58                   	pop    eax
c0010ea8:	5a                   	pop    edx
c0010ea9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010ead:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010eb1:	5b                   	pop    ebx
c0010eb2:	eb d0                	jmp    c0010e84 <VgaText::setDefaultFgColour(VgaColour)>

c0010eb4 <VgaText::setTitleTextColour(VgaColour)>:
c0010eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010eb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010ebf:	c3                   	ret    

c0010ec0 <VgaText::setTitleColour(VgaColour)>:
c0010ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ec4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ecb:	c3                   	ret    

c0010ecc <VgaText::setTitle(char*)>:
c0010ecc:	c3                   	ret    
c0010ecd:	90                   	nop

c0010ece <VgaText::combineColours(unsigned char, unsigned char)>:
c0010ece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010ed7:	83 e0 0f             	and    eax,0xf
c0010eda:	c1 e2 04             	shl    edx,0x4
c0010edd:	09 d0                	or     eax,edx
c0010edf:	c3                   	ret    

c0010ee0 <VgaText::scrollScreen()>:
c0010ee0:	55                   	push   ebp
c0010ee1:	57                   	push   edi
c0010ee2:	56                   	push   esi
c0010ee3:	be 01 00 00 00       	mov    esi,0x1
c0010ee8:	53                   	push   ebx
c0010ee9:	83 ec 0c             	sub    esp,0xc
c0010eec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ef0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010ef3:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010ef9:	31 ff                	xor    edi,edi
c0010efb:	01 e9                	add    ecx,ebp
c0010efd:	8a 01                	mov    al,BYTE PTR [ecx]
c0010eff:	83 fe 18             	cmp    esi,0x18
c0010f02:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010f08:	75 20                	jne    c0010f2a <VgaText::scrollScreen()+0x4a>
c0010f0a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010f10:	74 15                	je     c0010f27 <VgaText::scrollScreen()+0x47>
c0010f12:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f16:	50                   	push   eax
c0010f17:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f1b:	50                   	push   eax
c0010f1c:	e8 ad ff ff ff       	call   c0010ece <VgaText::combineColours(unsigned char, unsigned char)>
c0010f21:	5a                   	pop    edx
c0010f22:	5a                   	pop    edx
c0010f23:	88 01                	mov    BYTE PTR [ecx],al
c0010f25:	eb 03                	jmp    c0010f2a <VgaText::scrollScreen()+0x4a>
c0010f27:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0010f2a:	47                   	inc    edi
c0010f2b:	41                   	inc    ecx
c0010f2c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010f32:	75 c9                	jne    c0010efd <VgaText::scrollScreen()+0x1d>
c0010f34:	46                   	inc    esi
c0010f35:	83 fe 19             	cmp    esi,0x19
c0010f38:	75 b9                	jne    c0010ef3 <VgaText::scrollScreen()+0x13>
c0010f3a:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c0010f40:	75 1f                	jne    c0010f61 <VgaText::scrollScreen()+0x81>
c0010f42:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010f46:	74 05                	je     c0010f4d <VgaText::scrollScreen()+0x6d>
c0010f48:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010f4b:	eb 14                	jmp    c0010f61 <VgaText::scrollScreen()+0x81>
c0010f4d:	50                   	push   eax
c0010f4e:	50                   	push   eax
c0010f4f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f53:	50                   	push   eax
c0010f54:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f58:	50                   	push   eax
c0010f59:	e8 d2 84 00 00       	call   c0019430 <HalConsoleScroll(int, int)>
c0010f5e:	83 c4 10             	add    esp,0x10
c0010f61:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010f65:	83 c4 0c             	add    esp,0xc
c0010f68:	5b                   	pop    ebx
c0010f69:	5e                   	pop    esi
c0010f6a:	5f                   	pop    edi
c0010f6b:	5d                   	pop    ebp
c0010f6c:	e9 79 fe ff ff       	jmp    c0010dea <VgaText::updateCursor()>
c0010f71:	90                   	nop

c0010f72 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010f72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010f77:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0010f7c:	c1 e0 08             	shl    eax,0x8
c0010f7f:	09 d0                	or     eax,edx
c0010f81:	c3                   	ret    

c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010f82:	55                   	push   ebp
c0010f83:	57                   	push   edi
c0010f84:	56                   	push   esi
c0010f85:	53                   	push   ebx
c0010f86:	83 ec 1c             	sub    esp,0x1c
c0010f89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010f8d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f91:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010f95:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010f99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f9d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010fa1:	0f b6 c3             	movzx  eax,bl
c0010fa4:	50                   	push   eax
c0010fa5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0010faa:	50                   	push   eax
c0010fab:	e8 1e ff ff ff       	call   c0010ece <VgaText::combineColours(unsigned char, unsigned char)>
c0010fb0:	5a                   	pop    edx
c0010fb1:	59                   	pop    ecx
c0010fb2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0010fb7:	0f b6 c0             	movzx  eax,al
c0010fba:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010fbe:	50                   	push   eax
c0010fbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010fc3:	e8 aa ff ff ff       	call   c0010f72 <VgaText::combineCharAndColour(char, unsigned char)>
c0010fc8:	5a                   	pop    edx
c0010fc9:	6b d7 50             	imul   edx,edi,0x50
c0010fcc:	59                   	pop    ecx
c0010fcd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0010fd0:	01 f2                	add    edx,esi
c0010fd2:	0f b7 d2             	movzx  edx,dx
c0010fd5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0010fd9:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c0010fdf:	75 28                	jne    c0011009 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0010fe1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0010fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fe9:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0010fed:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0010ff1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ff9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ffd:	83 c4 1c             	add    esp,0x1c
c0011000:	5b                   	pop    ebx
c0011001:	5e                   	pop    esi
c0011002:	5f                   	pop    edi
c0011003:	5d                   	pop    ebp
c0011004:	e9 2f 85 00 00       	jmp    c0019538 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011009:	83 c4 1c             	add    esp,0x1c
c001100c:	5b                   	pop    ebx
c001100d:	5e                   	pop    esi
c001100e:	5f                   	pop    edi
c001100f:	5d                   	pop    ebp
c0011010:	c3                   	ret    
c0011011:	90                   	nop

c0011012 <VgaText::getCursorX()>:
c0011012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011016:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011019:	c3                   	ret    

c001101a <VgaText::getCursorY()>:
c001101a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001101e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011021:	c3                   	ret    

c0011022 <VgaText::setCursor(int, int)>:
c0011022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001102a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001102d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011031:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011034:	e9 b1 fd ff ff       	jmp    c0010dea <VgaText::updateCursor()>

c0011039 <setActiveTerminal(VgaText*)>:
c0011039:	53                   	push   ebx
c001103a:	83 ec 08             	sub    esp,0x8
c001103d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011041:	85 db                	test   ebx,ebx
c0011043:	75 11                	jne    c0011056 <setActiveTerminal(VgaText*)+0x1d>
c0011045:	c7 44 24 10 4c 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc002234c
c001104d:	83 c4 08             	add    esp,0x8
c0011050:	5b                   	pop    ebx
c0011051:	e9 c0 db ff ff       	jmp    c000ec16 <KePanic(char const*)>
c0011056:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c001105b:	85 c0                	test   eax,eax
c001105d:	74 0c                	je     c001106b <setActiveTerminal(VgaText*)+0x32>
c001105f:	83 ec 0c             	sub    esp,0xc
c0011062:	50                   	push   eax
c0011063:	e8 82 fd ff ff       	call   c0010dea <VgaText::updateCursor()>
c0011068:	83 c4 10             	add    esp,0x10
c001106b:	50                   	push   eax
c001106c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001106f:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c0011075:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011078:	53                   	push   ebx
c0011079:	e8 a4 ff ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c001107e:	83 c4 18             	add    esp,0x18
c0011081:	5b                   	pop    ebx
c0011082:	c3                   	ret    
c0011083:	90                   	nop

c0011084 <VgaText::clearScreen()>:
c0011084:	57                   	push   edi
c0011085:	56                   	push   esi
c0011086:	31 f6                	xor    esi,esi
c0011088:	53                   	push   ebx
c0011089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001108d:	52                   	push   edx
c001108e:	6a 00                	push   0x0
c0011090:	6a 00                	push   0x0
c0011092:	53                   	push   ebx
c0011093:	e8 8a ff ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c0011098:	83 c4 10             	add    esp,0x10
c001109b:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00110a2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00110a5:	7e 20                	jle    c00110c7 <VgaText::clearScreen()+0x43>
c00110a7:	31 ff                	xor    edi,edi
c00110a9:	50                   	push   eax
c00110aa:	50                   	push   eax
c00110ab:	56                   	push   esi
c00110ac:	57                   	push   edi
c00110ad:	47                   	inc    edi
c00110ae:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00110b1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00110b4:	6a 20                	push   0x20
c00110b6:	53                   	push   ebx
c00110b7:	e8 c6 fe ff ff       	call   c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00110bc:	83 c4 20             	add    esp,0x20
c00110bf:	83 ff 50             	cmp    edi,0x50
c00110c2:	75 e5                	jne    c00110a9 <VgaText::clearScreen()+0x25>
c00110c4:	46                   	inc    esi
c00110c5:	eb db                	jmp    c00110a2 <VgaText::clearScreen()+0x1e>
c00110c7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00110ce:	5b                   	pop    ebx
c00110cf:	5e                   	pop    esi
c00110d0:	5f                   	pop    edi
c00110d1:	c3                   	ret    

c00110d2 <VgaText::setCursorX(int)>:
c00110d2:	83 ec 10             	sub    esp,0x10
c00110d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110d9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00110dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110e0:	50                   	push   eax
c00110e1:	e8 3c ff ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c00110e6:	83 c4 1c             	add    esp,0x1c
c00110e9:	c3                   	ret    

c00110ea <VgaText::setCursorY(int)>:
c00110ea:	83 ec 10             	sub    esp,0x10
c00110ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00110f8:	50                   	push   eax
c00110f9:	e8 24 ff ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c00110fe:	83 c4 1c             	add    esp,0x1c
c0011101:	c3                   	ret    

c0011102 <VgaText::incrementCursor(bool)>:
c0011102:	56                   	push   esi
c0011103:	53                   	push   ebx
c0011104:	51                   	push   ecx
c0011105:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011109:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001110d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011110:	40                   	inc    eax
c0011111:	83 f8 50             	cmp    eax,0x50
c0011114:	74 05                	je     c001111b <VgaText::incrementCursor(bool)+0x19>
c0011116:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011119:	eb 24                	jmp    c001113f <VgaText::incrementCursor(bool)+0x3d>
c001111b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011122:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011125:	8d 50 01             	lea    edx,[eax+0x1]
c0011128:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001112b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001112e:	75 0f                	jne    c001113f <VgaText::incrementCursor(bool)+0x3d>
c0011130:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011133:	83 ec 0c             	sub    esp,0xc
c0011136:	53                   	push   ebx
c0011137:	e8 a4 fd ff ff       	call   c0010ee0 <VgaText::scrollScreen()>
c001113c:	83 c4 10             	add    esp,0x10
c001113f:	89 f0                	mov    eax,esi
c0011141:	84 c0                	test   al,al
c0011143:	74 0c                	je     c0011151 <VgaText::incrementCursor(bool)+0x4f>
c0011145:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011149:	5a                   	pop    edx
c001114a:	5b                   	pop    ebx
c001114b:	5e                   	pop    esi
c001114c:	e9 99 fc ff ff       	jmp    c0010dea <VgaText::updateCursor()>
c0011151:	58                   	pop    eax
c0011152:	5b                   	pop    ebx
c0011153:	5e                   	pop    esi
c0011154:	c3                   	ret    
c0011155:	90                   	nop

c0011156 <VgaText::decrementCursor(bool)>:
c0011156:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001115a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001115e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011161:	85 c0                	test   eax,eax
c0011163:	74 04                	je     c0011169 <VgaText::decrementCursor(bool)+0x13>
c0011165:	48                   	dec    eax
c0011166:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011169:	84 c9                	test   cl,cl
c001116b:	74 09                	je     c0011176 <VgaText::decrementCursor(bool)+0x20>
c001116d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011171:	e9 74 fc ff ff       	jmp    c0010dea <VgaText::updateCursor()>
c0011176:	c3                   	ret    
c0011177:	90                   	nop

c0011178 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011178:	53                   	push   ebx
c0011179:	83 ec 08             	sub    esp,0x8
c001117c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011181:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011185:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011189:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001118d:	83 f8 07             	cmp    eax,0x7
c0011190:	75 21                	jne    c00111b3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011192:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001119a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00111a2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00111aa:	83 c4 08             	add    esp,0x8
c00111ad:	5b                   	pop    ebx
c00111ae:	e9 fb 77 ff ff       	jmp    c00089ae <KeBeep(int, int, bool)>
c00111b3:	83 f8 0d             	cmp    eax,0xd
c00111b6:	75 09                	jne    c00111c1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00111b8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00111bf:	eb 2d                	jmp    c00111ee <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00111c1:	83 f8 0a             	cmp    eax,0xa
c00111c4:	75 31                	jne    c00111f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00111c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00111cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00111d0:	8d 50 01             	lea    edx,[eax+0x1]
c00111d3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00111d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00111d9:	75 0f                	jne    c00111ea <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00111db:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00111de:	83 ec 0c             	sub    esp,0xc
c00111e1:	53                   	push   ebx
c00111e2:	e8 f9 fc ff ff       	call   c0010ee0 <VgaText::scrollScreen()>
c00111e7:	83 c4 10             	add    esp,0x10
c00111ea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00111ee:	83 c4 08             	add    esp,0x8
c00111f1:	5b                   	pop    ebx
c00111f2:	e9 f3 fb ff ff       	jmp    c0010dea <VgaText::updateCursor()>
c00111f7:	83 f8 08             	cmp    eax,0x8
c00111fa:	75 25                	jne    c0011221 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00111fc:	50                   	push   eax
c00111fd:	50                   	push   eax
c00111fe:	6a 01                	push   0x1
c0011200:	53                   	push   ebx
c0011201:	e8 50 ff ff ff       	call   c0011156 <VgaText::decrementCursor(bool)>
c0011206:	5a                   	pop    edx
c0011207:	59                   	pop    ecx
c0011208:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001120b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001120e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011211:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011214:	6a 20                	push   0x20
c0011216:	53                   	push   ebx
c0011217:	e8 66 fd ff ff       	call   c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001121c:	83 c4 28             	add    esp,0x28
c001121f:	5b                   	pop    ebx
c0011220:	c3                   	ret    
c0011221:	83 ec 08             	sub    esp,0x8
c0011224:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011227:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001122a:	51                   	push   ecx
c001122b:	52                   	push   edx
c001122c:	50                   	push   eax
c001122d:	53                   	push   ebx
c001122e:	e8 4f fd ff ff       	call   c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011233:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011237:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001123f:	83 c4 28             	add    esp,0x28
c0011242:	5b                   	pop    ebx
c0011243:	e9 ba fe ff ff       	jmp    c0011102 <VgaText::incrementCursor(bool)>

c0011248 <VgaText::putchar(char)>:
c0011248:	57                   	push   edi
c0011249:	56                   	push   esi
c001124a:	53                   	push   ebx
c001124b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001124f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011253:	0f be c2             	movsx  eax,dl
c0011256:	83 f8 5b             	cmp    eax,0x5b
c0011259:	75 18                	jne    c0011273 <VgaText::putchar(char)+0x2b>
c001125b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001125f:	74 20                	je     c0011281 <VgaText::putchar(char)+0x39>
c0011261:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011267:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001126e:	e9 b8 00 00 00       	jmp    c001132b <VgaText::putchar(char)+0xe3>
c0011273:	83 f8 1b             	cmp    eax,0x1b
c0011276:	75 09                	jne    c0011281 <VgaText::putchar(char)+0x39>
c0011278:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001127c:	e9 aa 00 00 00       	jmp    c001132b <VgaText::putchar(char)+0xe3>
c0011281:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0011285:	89 f9                	mov    ecx,edi
c0011287:	84 c9                	test   cl,cl
c0011289:	0f 84 8c 00 00 00    	je     c001131b <VgaText::putchar(char)+0xd3>
c001128f:	8d 4a c0             	lea    ecx,[edx-0x40]
c0011292:	80 f9 3e             	cmp    cl,0x3e
c0011295:	77 70                	ja     c0011307 <VgaText::putchar(char)+0xbf>
c0011297:	83 f8 6d             	cmp    eax,0x6d
c001129a:	75 3f                	jne    c00112db <VgaText::putchar(char)+0x93>
c001129c:	31 f6                	xor    esi,esi
c001129e:	31 d2                	xor    edx,edx
c00112a0:	31 c0                	xor    eax,eax
c00112a2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00112a5:	7e 25                	jle    c00112cc <VgaText::putchar(char)+0x84>
c00112a7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00112ac:	83 fa 3b             	cmp    edx,0x3b
c00112af:	75 0f                	jne    c00112c0 <VgaText::putchar(char)+0x78>
c00112b1:	50                   	push   eax
c00112b2:	53                   	push   ebx
c00112b3:	e8 48 fb ff ff       	call   c0010e00 <VgaText::doANSI_SGR(int)>
c00112b8:	31 d2                	xor    edx,edx
c00112ba:	59                   	pop    ecx
c00112bb:	58                   	pop    eax
c00112bc:	31 c0                	xor    eax,eax
c00112be:	eb 09                	jmp    c00112c9 <VgaText::putchar(char)+0x81>
c00112c0:	6b c0 0a             	imul   eax,eax,0xa
c00112c3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00112c7:	89 fa                	mov    edx,edi
c00112c9:	46                   	inc    esi
c00112ca:	eb d6                	jmp    c00112a2 <VgaText::putchar(char)+0x5a>
c00112cc:	84 d2                	test   dl,dl
c00112ce:	74 2f                	je     c00112ff <VgaText::putchar(char)+0xb7>
c00112d0:	50                   	push   eax
c00112d1:	53                   	push   ebx
c00112d2:	e8 29 fb ff ff       	call   c0010e00 <VgaText::doANSI_SGR(int)>
c00112d7:	58                   	pop    eax
c00112d8:	5a                   	pop    edx
c00112d9:	eb 24                	jmp    c00112ff <VgaText::putchar(char)+0xb7>
c00112db:	83 f8 4a             	cmp    eax,0x4a
c00112de:	75 1f                	jne    c00112ff <VgaText::putchar(char)+0xb7>
c00112e0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00112e4:	75 19                	jne    c00112ff <VgaText::putchar(char)+0xb7>
c00112e6:	83 ec 0c             	sub    esp,0xc
c00112e9:	53                   	push   ebx
c00112ea:	e8 95 fd ff ff       	call   c0011084 <VgaText::clearScreen()>
c00112ef:	83 c4 0c             	add    esp,0xc
c00112f2:	6a 00                	push   0x0
c00112f4:	6a 00                	push   0x0
c00112f6:	53                   	push   ebx
c00112f7:	e8 26 fd ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c00112fc:	83 c4 10             	add    esp,0x10
c00112ff:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011305:	eb 24                	jmp    c001132b <VgaText::putchar(char)+0xe3>
c0011307:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001130a:	83 f8 0e             	cmp    eax,0xe
c001130d:	7f 1c                	jg     c001132b <VgaText::putchar(char)+0xe3>
c001130f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011312:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011315:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011319:	eb 10                	jmp    c001132b <VgaText::putchar(char)+0xe3>
c001131b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001131e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011321:	50                   	push   eax
c0011322:	53                   	push   ebx
c0011323:	e8 50 fe ff ff       	call   c0011178 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011328:	83 c4 10             	add    esp,0x10
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	c3                   	ret    
c001132f:	90                   	nop

c0011330 <VgaText::putx(unsigned int)>:
c0011330:	57                   	push   edi
c0011331:	b9 11 00 00 00       	mov    ecx,0x11
c0011336:	56                   	push   esi
c0011337:	be 5a 23 02 c0       	mov    esi,0xc002235a
c001133c:	53                   	push   ebx
c001133d:	83 ec 20             	sub    esp,0x20
c0011340:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011344:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011348:	fc                   	cld    
c0011349:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001134b:	be 08 00 00 00       	mov    esi,0x8
c0011350:	50                   	push   eax
c0011351:	50                   	push   eax
c0011352:	89 d8                	mov    eax,ebx
c0011354:	c1 e8 1c             	shr    eax,0x1c
c0011357:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001135c:	c1 e3 04             	shl    ebx,0x4
c001135f:	50                   	push   eax
c0011360:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011364:	e8 df fe ff ff       	call   c0011248 <VgaText::putchar(char)>
c0011369:	83 c4 10             	add    esp,0x10
c001136c:	4e                   	dec    esi
c001136d:	75 e1                	jne    c0011350 <VgaText::putx(unsigned int)+0x20>
c001136f:	83 c4 20             	add    esp,0x20
c0011372:	5b                   	pop    ebx
c0011373:	5e                   	pop    esi
c0011374:	5f                   	pop    edi
c0011375:	c3                   	ret    

c0011376 <VgaText::puts(char const*)>:
c0011376:	53                   	push   ebx
c0011377:	83 ec 08             	sub    esp,0x8
c001137a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001137e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011381:	85 c0                	test   eax,eax
c0011383:	74 12                	je     c0011397 <VgaText::puts(char const*)+0x21>
c0011385:	51                   	push   ecx
c0011386:	43                   	inc    ebx
c0011387:	51                   	push   ecx
c0011388:	50                   	push   eax
c0011389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001138d:	e8 b6 fe ff ff       	call   c0011248 <VgaText::putchar(char)>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	eb e7                	jmp    c001137e <VgaText::puts(char const*)+0x8>
c0011397:	83 c4 08             	add    esp,0x8
c001139a:	5b                   	pop    ebx
c001139b:	c3                   	ret    

c001139c <VgaText::write(unsigned long long, void*, int*)>:
c001139c:	55                   	push   ebp
c001139d:	57                   	push   edi
c001139e:	56                   	push   esi
c001139f:	53                   	push   ebx
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113af:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00113b6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113b9:	39 eb                	cmp    ebx,ebp
c00113bb:	74 13                	je     c00113d0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113bd:	50                   	push   eax
c00113be:	43                   	inc    ebx
c00113bf:	50                   	push   eax
c00113c0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113c4:	50                   	push   eax
c00113c5:	56                   	push   esi
c00113c6:	e8 7d fe ff ff       	call   c0011248 <VgaText::putchar(char)>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	eb e9                	jmp    c00113b9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00113d0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00113d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113db:	89 38                	mov    DWORD PTR [eax],edi
c00113dd:	83 c4 0c             	add    esp,0xc
c00113e0:	31 c0                	xor    eax,eax
c00113e2:	5b                   	pop    ebx
c00113e3:	5e                   	pop    esi
c00113e4:	5f                   	pop    edi
c00113e5:	5d                   	pop    ebp
c00113e6:	c3                   	ret    
c00113e7:	90                   	nop

c00113e8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00113e8:	55                   	push   ebp
c00113e9:	57                   	push   edi
c00113ea:	56                   	push   esi
c00113eb:	53                   	push   ebx
c00113ec:	83 ec 0c             	sub    esp,0xc
c00113ef:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00113f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00113f8:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c00113ff:	50                   	push   eax
c0011400:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011405:	50                   	push   eax
c0011406:	e8 c3 fa ff ff       	call   c0010ece <VgaText::combineColours(unsigned char, unsigned char)>
c001140b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001140f:	5a                   	pop    edx
c0011410:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0011413:	59                   	pop    ecx
c0011414:	0f b6 f8             	movzx  edi,al
c0011417:	0f b7 db             	movzx  ebx,bx
c001141a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001141e:	01 db                	add    ebx,ebx
c0011420:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011423:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011426:	85 c0                	test   eax,eax
c0011428:	0f 84 ef 00 00 00    	je     c001151d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001142e:	83 f8 0d             	cmp    eax,0xd
c0011431:	75 0c                	jne    c001143f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0011433:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c001143a:	e9 d8 00 00 00       	jmp    c0011517 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001143f:	83 f8 0a             	cmp    eax,0xa
c0011442:	75 44                	jne    c0011488 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0011444:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c001144b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001144e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011451:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0011454:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0011457:	75 0f                	jne    c0011468 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011459:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	55                   	push   ebp
c0011460:	e8 7b fa ff ff       	call   c0010ee0 <VgaText::scrollScreen()>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	55                   	push   ebp
c001146c:	e8 79 f9 ff ff       	call   c0010dea <VgaText::updateCursor()>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011478:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001147b:	0f b7 db             	movzx  ebx,bx
c001147e:	01 db                	add    ebx,ebx
c0011480:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011483:	e9 8f 00 00 00       	jmp    c0011517 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011488:	83 f8 08             	cmp    eax,0x8
c001148b:	75 34                	jne    c00114c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001148d:	51                   	push   ecx
c001148e:	51                   	push   ecx
c001148f:	6a 01                	push   0x1
c0011491:	55                   	push   ebp
c0011492:	e8 bf fc ff ff       	call   c0011156 <VgaText::decrementCursor(bool)>
c0011497:	5b                   	pop    ebx
c0011498:	58                   	pop    eax
c0011499:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c001149c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c001149f:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00114a2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00114a5:	6a 20                	push   0x20
c00114a7:	55                   	push   ebp
c00114a8:	e8 d5 fa ff ff       	call   c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00114ad:	83 c4 20             	add    esp,0x20
c00114b0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00114b4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00114b7:	0f b7 db             	movzx  ebx,bx
c00114ba:	01 db                	add    ebx,ebx
c00114bc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00114bf:	eb 56                	jmp    c0011517 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00114c1:	52                   	push   edx
c00114c2:	52                   	push   edx
c00114c3:	57                   	push   edi
c00114c4:	50                   	push   eax
c00114c5:	e8 a8 fa ff ff       	call   c0010f72 <VgaText::combineCharAndColour(char, unsigned char)>
c00114ca:	83 c4 10             	add    esp,0x10
c00114cd:	66 89 03             	mov    WORD PTR [ebx],ax
c00114d0:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c00114d6:	75 1d                	jne    c00114f5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00114de:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00114e1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00114e5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00114e9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00114ec:	50                   	push   eax
c00114ed:	e8 46 80 00 00       	call   c0019538 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00114f2:	83 c4 20             	add    esp,0x20
c00114f5:	50                   	push   eax
c00114f6:	83 c3 02             	add    ebx,0x2
c00114f9:	50                   	push   eax
c00114fa:	6a 00                	push   0x0
c00114fc:	55                   	push   ebp
c00114fd:	e8 00 fc ff ff       	call   c0011102 <VgaText::incrementCursor(bool)>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0011509:	75 0c                	jne    c0011517 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001150b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001150f:	0f b7 db             	movzx  ebx,bx
c0011512:	01 db                	add    ebx,ebx
c0011514:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011517:	46                   	inc    esi
c0011518:	e9 06 ff ff ff       	jmp    c0011423 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	55                   	push   ebp
c0011521:	e8 c4 f8 ff ff       	call   c0010dea <VgaText::updateCursor()>
c0011526:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c001152d:	83 c4 1c             	add    esp,0x1c
c0011530:	5b                   	pop    ebx
c0011531:	5e                   	pop    esi
c0011532:	5f                   	pop    edi
c0011533:	5d                   	pop    ebp
c0011534:	c3                   	ret    
c0011535:	90                   	nop

c0011536 <VgaText::VgaText(char const*)>:
c0011536:	56                   	push   esi
c0011537:	53                   	push   ebx
c0011538:	83 ec 04             	sub    esp,0x4
c001153b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001153f:	83 ec 08             	sub    esp,0x8
c0011542:	6a 00                	push   0x0
c0011544:	50                   	push   eax
c0011545:	e8 aa 05 00 00       	call   c0011af4 <UnixFile::UnixFile(int)>
c001154a:	83 c4 10             	add    esp,0x10
c001154d:	ba 80 23 02 c0       	mov    edx,0xc0022380
c0011552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011556:	89 10                	mov    DWORD PTR [eax],edx
c0011558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001155c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011567:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001156e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011572:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001157a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001157e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011582:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001158d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011598:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001159f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00115aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ae:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	6a 01                	push   0x1
c00115ba:	e8 84 09 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00115bf:	83 c4 10             	add    esp,0x10
c00115c2:	89 c2                	mov    edx,eax
c00115c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00115cb:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00115d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115d8:	89 c6                	mov    esi,eax
c00115da:	e8 31 d8 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00115df:	68 05 0c 00 00       	push   0xc05
c00115e4:	56                   	push   esi
c00115e5:	50                   	push   eax
c00115e6:	53                   	push   ebx
c00115e7:	e8 30 10 00 00       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115f6:	83 ec 04             	sub    esp,0x4
c00115f9:	68 a0 0f 00 00       	push   0xfa0
c00115fe:	6a 00                	push   0x0
c0011600:	50                   	push   eax
c0011601:	e8 ea ee fe ff       	call   c00004f0 <memset>
c0011606:	83 c4 10             	add    esp,0x10
c0011609:	83 ec 04             	sub    esp,0x4
c001160c:	6a 00                	push   0x0
c001160e:	6a 07                	push   0x7
c0011610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011614:	e8 7b f8 ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011619:	83 c4 10             	add    esp,0x10
c001161c:	83 ec 04             	sub    esp,0x4
c001161f:	6a 00                	push   0x0
c0011621:	6a 00                	push   0x0
c0011623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011627:	e8 f6 f9 ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	83 ec 0c             	sub    esp,0xc
c0011632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011636:	e8 49 fa ff ff       	call   c0011084 <VgaText::clearScreen()>
c001163b:	83 c4 10             	add    esp,0x10
c001163e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011642:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001164a:	05 82 00 00 00       	add    eax,0x82
c001164f:	83 ec 04             	sub    esp,0x4
c0011652:	68 80 00 00 00       	push   0x80
c0011657:	6a 00                	push   0x0
c0011659:	50                   	push   eax
c001165a:	e8 91 ee fe ff       	call   c00004f0 <memset>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011666:	05 02 01 00 00       	add    eax,0x102
c001166b:	83 ec 04             	sub    esp,0x4
c001166e:	68 80 00 00 00       	push   0x80
c0011673:	6a 00                	push   0x0
c0011675:	50                   	push   eax
c0011676:	e8 75 ee fe ff       	call   c00004f0 <memset>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	90                   	nop
c001167f:	83 c4 04             	add    esp,0x4
c0011682:	5b                   	pop    ebx
c0011683:	5e                   	pop    esi
c0011684:	c3                   	ret    
c0011685:	90                   	nop

c0011686 <VgaText::receiveKey(unsigned char)>:
c0011686:	55                   	push   ebp
c0011687:	57                   	push   edi
c0011688:	56                   	push   esi
c0011689:	53                   	push   ebx
c001168a:	83 ec 2c             	sub    esp,0x2c
c001168d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011691:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011695:	89 fd                	mov    ebp,edi
c0011697:	81 e5 ff 00 00 00    	and    ebp,0xff
c001169d:	0f 84 48 01 00 00    	je     c00117eb <VgaText::receiveKey(unsigned char)+0x165>
c00116a3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00116a9:	83 fd 08             	cmp    ebp,0x8
c00116ac:	75 6a                	jne    c0011718 <VgaText::receiveKey(unsigned char)+0x92>
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	56                   	push   esi
c00116b2:	e8 c9 ee fe ff       	call   c0000580 <strlen>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	85 c0                	test   eax,eax
c00116bc:	0f 84 ef 00 00 00    	je     c00117b1 <VgaText::receiveKey(unsigned char)+0x12b>
c00116c2:	50                   	push   eax
c00116c3:	50                   	push   eax
c00116c4:	6a 08                	push   0x8
c00116c6:	53                   	push   ebx
c00116c7:	e8 7c fb ff ff       	call   c0011248 <VgaText::putchar(char)>
c00116cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00116cf:	e8 ac ee fe ff       	call   c0000580 <strlen>
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00116df:	83 fa 1f             	cmp    edx,0x1f
c00116e2:	89 d0                	mov    eax,edx
c00116e4:	7f 1c                	jg     c0011702 <VgaText::receiveKey(unsigned char)+0x7c>
c00116e6:	83 e8 08             	sub    eax,0x8
c00116e9:	3c 02                	cmp    al,0x2
c00116eb:	76 15                	jbe    c0011702 <VgaText::receiveKey(unsigned char)+0x7c>
c00116ed:	83 fa 0d             	cmp    edx,0xd
c00116f0:	74 10                	je     c0011702 <VgaText::receiveKey(unsigned char)+0x7c>
c00116f2:	57                   	push   edi
c00116f3:	57                   	push   edi
c00116f4:	68 6b 23 02 c0       	push   0xc002236b
c00116f9:	53                   	push   ebx
c00116fa:	e8 77 fc ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	83 ec 0c             	sub    esp,0xc
c0011705:	56                   	push   esi
c0011706:	e8 75 ee fe ff       	call   c0000580 <strlen>
c001170b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0011713:	e9 96 00 00 00       	jmp    c00117ae <VgaText::receiveKey(unsigned char)+0x128>
c0011718:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001171e:	83 ec 0c             	sub    esp,0xc
c0011721:	50                   	push   eax
c0011722:	e8 59 ee fe ff       	call   c0000580 <strlen>
c0011727:	89 34 24             	mov    DWORD PTR [esp],esi
c001172a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001172e:	e8 4d ee fe ff       	call   c0000580 <strlen>
c0011733:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011737:	83 c4 10             	add    esp,0x10
c001173a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001173e:	3d 80 00 00 00       	cmp    eax,0x80
c0011743:	0f 87 a2 00 00 00    	ja     c00117eb <VgaText::receiveKey(unsigned char)+0x165>
c0011749:	8d 47 ff             	lea    eax,[edi-0x1]
c001174c:	3c 1e                	cmp    al,0x1e
c001174e:	77 35                	ja     c0011785 <VgaText::receiveKey(unsigned char)+0xff>
c0011750:	8d 47 f7             	lea    eax,[edi-0x9]
c0011753:	3c 01                	cmp    al,0x1
c0011755:	76 2e                	jbe    c0011785 <VgaText::receiveKey(unsigned char)+0xff>
c0011757:	83 fd 0d             	cmp    ebp,0xd
c001175a:	74 29                	je     c0011785 <VgaText::receiveKey(unsigned char)+0xff>
c001175c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001175f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011762:	68 71 23 02 c0       	push   0xc0022371
c0011767:	53                   	push   ebx
c0011768:	e8 7b fc ff ff       	call   c00113e8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001176d:	8d 47 40             	lea    eax,[edi+0x40]
c0011770:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011773:	0f b6 c0             	movzx  eax,al
c0011776:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011779:	50                   	push   eax
c001177a:	53                   	push   ebx
c001177b:	e8 f8 f9 ff ff       	call   c0011178 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011780:	83 c4 20             	add    esp,0x20
c0011783:	eb 11                	jmp    c0011796 <VgaText::receiveKey(unsigned char)+0x110>
c0011785:	51                   	push   ecx
c0011786:	89 f8                	mov    eax,edi
c0011788:	51                   	push   ecx
c0011789:	0f be c0             	movsx  eax,al
c001178c:	50                   	push   eax
c001178d:	53                   	push   ebx
c001178e:	e8 b5 fa ff ff       	call   c0011248 <VgaText::putchar(char)>
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001179b:	89 f8                	mov    eax,edi
c001179d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00117a1:	52                   	push   edx
c00117a2:	52                   	push   edx
c00117a3:	8d 44 24 26          	lea    eax,[esp+0x26]
c00117a7:	50                   	push   eax
c00117a8:	56                   	push   esi
c00117a9:	e8 c2 f0 fe ff       	call   c0000870 <strcat>
c00117ae:	83 c4 10             	add    esp,0x10
c00117b1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00117b8:	75 0f                	jne    c00117c9 <VgaText::receiveKey(unsigned char)+0x143>
c00117ba:	83 fd 1c             	cmp    ebp,0x1c
c00117bd:	77 2c                	ja     c00117eb <VgaText::receiveKey(unsigned char)+0x165>
c00117bf:	b8 08 04 00 10       	mov    eax,0x10000408
c00117c4:	0f a3 e8             	bt     eax,ebp
c00117c7:	73 22                	jae    c00117eb <VgaText::receiveKey(unsigned char)+0x165>
c00117c9:	50                   	push   eax
c00117ca:	81 c3 02 01 00 00    	add    ebx,0x102
c00117d0:	50                   	push   eax
c00117d1:	56                   	push   esi
c00117d2:	53                   	push   ebx
c00117d3:	e8 98 f0 fe ff       	call   c0000870 <strcat>
c00117d8:	83 c4 0c             	add    esp,0xc
c00117db:	68 80 00 00 00       	push   0x80
c00117e0:	6a 00                	push   0x0
c00117e2:	56                   	push   esi
c00117e3:	e8 08 ed fe ff       	call   c00004f0 <memset>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	83 c4 2c             	add    esp,0x2c
c00117ee:	5b                   	pop    ebx
c00117ef:	5e                   	pop    esi
c00117f0:	5f                   	pop    edi
c00117f1:	5d                   	pop    ebp
c00117f2:	c3                   	ret    
c00117f3:	90                   	nop

c00117f4 <VgaText::doUpdate()>:
c00117f4:	c3                   	ret    
c00117f5:	66 90                	xchg   ax,ax
c00117f7:	90                   	nop

c00117f8 <TSS::TSS()>:
c00117f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011803:	90                   	nop
c0011804:	c3                   	ret    
c0011805:	90                   	nop
c0011806:	66 90                	xchg   ax,ax

c0011808 <TSS::setESP(unsigned long)>:
c0011808:	55                   	push   ebp
c0011809:	89 e5                	mov    ebp,esp
c001180b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001180e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011811:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011814:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011817:	90                   	nop
c0011818:	5d                   	pop    ebp
c0011819:	c3                   	ret    
c001181a:	66 90                	xchg   ax,ax

c001181c <TSS::flush()>:
c001181c:	55                   	push   ebp
c001181d:	89 e5                	mov    ebp,esp
c001181f:	83 ec 10             	sub    esp,0x10
c0011822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011825:	8b 00                	mov    eax,DWORD PTR [eax]
c0011827:	83 c8 03             	or     eax,0x3
c001182a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001182e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011832:	66 89 d0             	mov    ax,dx
c0011835:	0f 00 d8             	ltr    ax
c0011838:	90                   	nop
c0011839:	c9                   	leave  
c001183a:	c3                   	ret    
c001183b:	90                   	nop

c001183c <TSS::setup(unsigned long, unsigned long)>:
c001183c:	55                   	push   ebp
c001183d:	89 e5                	mov    ebp,esp
c001183f:	83 ec 18             	sub    esp,0x18
c0011842:	83 ec 0c             	sub    esp,0xc
c0011845:	6a 68                	push   0x68
c0011847:	e8 84 d0 ff ff       	call   c000e8d0 <malloc>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	89 c2                	mov    edx,eax
c0011851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011854:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001185d:	83 ec 08             	sub    esp,0x8
c0011860:	50                   	push   eax
c0011861:	68 94 23 02 c0       	push   0xc0022394
c0011866:	e8 e3 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011871:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011874:	83 ec 04             	sub    esp,0x4
c0011877:	6a 68                	push   0x68
c0011879:	6a 00                	push   0x0
c001187b:	50                   	push   eax
c001187c:	e8 6f ec fe ff       	call   c00004f0 <memset>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001188a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011893:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011896:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001189c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118a2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00118a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ae:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00118b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ba:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00118c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118c6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00118cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00118d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118de:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00118e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ea:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00118f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00118f9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00118fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011902:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011905:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001190e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011915:	83 ec 0c             	sub    esp,0xc
c0011918:	68 ab 23 02 c0       	push   0xc00223ab
c001191d:	e8 2c 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011922:	83 c4 10             	add    esp,0x10
c0011925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192b:	0f 20 da             	mov    edx,cr3
c001192e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011931:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011934:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011937:	83 ec 0c             	sub    esp,0xc
c001193a:	68 ae 23 02 c0       	push   0xc00223ae
c001193f:	e8 0a 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001194d:	83 ec 08             	sub    esp,0x8
c0011950:	50                   	push   eax
c0011951:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011954:	50                   	push   eax
c0011955:	e8 c8 c6 ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c001195a:	83 c4 10             	add    esp,0x10
c001195d:	83 ec 08             	sub    esp,0x8
c0011960:	6a 68                	push   0x68
c0011962:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011965:	50                   	push   eax
c0011966:	e8 d3 c6 ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011972:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011975:	83 e0 0f             	and    eax,0xf
c0011978:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001197b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001197e:	83 c8 40             	or     eax,0x40
c0011981:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011984:	83 ec 0c             	sub    esp,0xc
c0011987:	68 b1 23 02 c0       	push   0xc00223b1
c001198c:	e8 bd 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011999:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001199f:	83 ec 08             	sub    esp,0x8
c00119a2:	50                   	push   eax
c00119a3:	68 b4 23 02 c0       	push   0xc00223b4
c00119a8:	e8 a1 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119ad:	83 c4 10             	add    esp,0x10
c00119b0:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00119bb:	05 64 01 00 00       	add    eax,0x164
c00119c0:	83 ec 04             	sub    esp,0x4
c00119c3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00119c6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00119c9:	50                   	push   eax
c00119ca:	e8 a3 c6 ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c00119cf:	83 c4 10             	add    esp,0x10
c00119d2:	89 c2                	mov    edx,eax
c00119d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d7:	89 10                	mov    DWORD PTR [eax],edx
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	68 c9 23 02 c0       	push   0xc00223c9
c00119e1:	e8 68 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00119f4:	05 64 01 00 00       	add    eax,0x164
c00119f9:	83 ec 0c             	sub    esp,0xc
c00119fc:	50                   	push   eax
c00119fd:	e8 9a c6 ff ff       	call   c000e09c <GDT::flush()>
c0011a02:	83 c4 10             	add    esp,0x10
c0011a05:	83 ec 0c             	sub    esp,0xc
c0011a08:	68 cc 23 02 c0       	push   0xc00223cc
c0011a0d:	e8 3c 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a1a:	c9                   	leave  
c0011a1b:	c3                   	ret    

c0011a1c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011a24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a27:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011a2c:	75 08                	jne    c0011a36 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011a2e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011a34:	eb 38                	jmp    c0011a6e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011a36:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011a3b:	75 17                	jne    c0011a54 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011a3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011a4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a51:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011a54:	89 c1                	mov    ecx,eax
c0011a56:	83 e1 fd             	and    ecx,0xfffffffd
c0011a59:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011a5f:	74 cd                	je     c0011a2e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011a61:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011a66:	83 e0 ef             	and    eax,0xffffffef
c0011a69:	83 f8 08             	cmp    eax,0x8
c0011a6c:	76 c0                	jbe    c0011a2e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011a6e:	31 c0                	xor    eax,eax
c0011a70:	c3                   	ret    
c0011a71:	90                   	nop

c0011a72 <ReservedFilename::isAtty()>:
c0011a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a76:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a79:	31 c0                	xor    eax,eax
c0011a7b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011a81:	74 09                	je     c0011a8c <ReservedFilename::isAtty()+0x1a>
c0011a83:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011a89:	0f 94 c0             	sete   al
c0011a8c:	c3                   	ret    
c0011a8d:	90                   	nop

c0011a8e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011a8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011a96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011a9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a9d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011aa2:	75 08                	jne    c0011aac <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011aa4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011aaa:	eb 3d                	jmp    c0011ae9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011aac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ab1:	75 17                	jne    c0011aca <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011ab3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ab8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011abb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ac1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ac3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ac7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011aca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011acf:	75 04                	jne    c0011ad5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011ad1:	89 0a                	mov    DWORD PTR [edx],ecx
c0011ad3:	eb 14                	jmp    c0011ae9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011ad5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011ada:	74 c8                	je     c0011aa4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011adc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011ae1:	83 e0 ef             	and    eax,0xffffffef
c0011ae4:	83 f8 08             	cmp    eax,0x8
c0011ae7:	76 bb                	jbe    c0011aa4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011ae9:	31 c0                	xor    eax,eax
c0011aeb:	c3                   	ret    

c0011aec <UnixFile::getFileDescriptor()>:
c0011aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011af0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011af3:	c3                   	ret    

c0011af4 <UnixFile::UnixFile(int)>:
c0011af4:	53                   	push   ebx
c0011af5:	83 ec 28             	sub    esp,0x28
c0011af8:	ba f8 23 02 c0       	mov    edx,0xc00223f8
c0011afd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b01:	89 10                	mov    DWORD PTR [eax],edx
c0011b03:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011b0b:	0f 8f 90 01 00 00    	jg     c0011ca1 <UnixFile::UnixFile(int)+0x1ad>
c0011b11:	a1 20 42 02 c0       	mov    eax,ds:0xc0024220
c0011b16:	8d 50 01             	lea    edx,[eax+0x1]
c0011b19:	89 15 20 42 02 c0    	mov    DWORD PTR ds:0xc0024220,edx
c0011b1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011b23:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b26:	83 ec 08             	sub    esp,0x8
c0011b29:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011b2d:	68 b8 be 02 c0       	push   0xc002beb8
c0011b32:	e8 a7 e6 00 00       	call   c00201de <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011b37:	83 c4 10             	add    esp,0x10
c0011b3a:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011b3f:	83 f0 01             	xor    eax,0x1
c0011b42:	0f b6 c0             	movzx  eax,al
c0011b45:	85 c0                	test   eax,eax
c0011b47:	0f 84 55 01 00 00    	je     c0011ca2 <UnixFile::UnixFile(int)+0x1ae>
c0011b4d:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011b54:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011b5c:	83 ec 0c             	sub    esp,0xc
c0011b5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b63:	e8 68 cd ff ff       	call   c000e8d0 <malloc>
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	89 c3                	mov    ebx,eax
c0011b6d:	83 ec 08             	sub    esp,0x8
c0011b70:	68 03 ff ff 0f       	push   0xfffff03
c0011b75:	53                   	push   ebx
c0011b76:	e8 2d 01 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011b7b:	83 c4 10             	add    esp,0x10
c0011b7e:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011b84:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011b8c:	83 ec 0c             	sub    esp,0xc
c0011b8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b93:	e8 38 cd ff ff       	call   c000e8d0 <malloc>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	89 c3                	mov    ebx,eax
c0011b9d:	83 ec 08             	sub    esp,0x8
c0011ba0:	68 01 ff ff 0f       	push   0xfffff01
c0011ba5:	53                   	push   ebx
c0011ba6:	e8 fd 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011bab:	83 c4 10             	add    esp,0x10
c0011bae:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011bb4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011bbc:	83 ec 0c             	sub    esp,0xc
c0011bbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011bc3:	e8 08 cd ff ff       	call   c000e8d0 <malloc>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	89 c3                	mov    ebx,eax
c0011bcd:	83 ec 08             	sub    esp,0x8
c0011bd0:	68 00 ff ff 0f       	push   0xfffff00
c0011bd5:	53                   	push   ebx
c0011bd6:	e8 cd 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011bdb:	83 c4 10             	add    esp,0x10
c0011bde:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011be4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011bec:	83 ec 0c             	sub    esp,0xc
c0011bef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011bf3:	e8 d8 cc ff ff       	call   c000e8d0 <malloc>
c0011bf8:	83 c4 10             	add    esp,0x10
c0011bfb:	89 c3                	mov    ebx,eax
c0011bfd:	83 ec 08             	sub    esp,0x8
c0011c00:	68 02 ff ff 0f       	push   0xfffff02
c0011c05:	53                   	push   ebx
c0011c06:	e8 9d 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011c14:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c1c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011c21:	7f 7f                	jg     c0011ca2 <UnixFile::UnixFile(int)+0x1ae>
c0011c23:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011c2b:	83 ec 0c             	sub    esp,0xc
c0011c2e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c32:	e8 99 cc ff ff       	call   c000e8d0 <malloc>
c0011c37:	83 c4 10             	add    esp,0x10
c0011c3a:	89 c3                	mov    ebx,eax
c0011c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c40:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011c45:	83 ec 08             	sub    esp,0x8
c0011c48:	50                   	push   eax
c0011c49:	53                   	push   ebx
c0011c4a:	e8 59 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011c4f:	83 c4 10             	add    esp,0x10
c0011c52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c56:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011c5d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011c65:	83 ec 0c             	sub    esp,0xc
c0011c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c6c:	e8 5f cc ff ff       	call   c000e8d0 <malloc>
c0011c71:	83 c4 10             	add    esp,0x10
c0011c74:	89 c3                	mov    ebx,eax
c0011c76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c7a:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011c7f:	83 ec 08             	sub    esp,0x8
c0011c82:	50                   	push   eax
c0011c83:	53                   	push   ebx
c0011c84:	e8 1f 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c90:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011c97:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011c9c:	e9 7b ff ff ff       	jmp    c0011c1c <UnixFile::UnixFile(int)+0x128>
c0011ca1:	90                   	nop
c0011ca2:	83 c4 28             	add    esp,0x28
c0011ca5:	5b                   	pop    ebx
c0011ca6:	c3                   	ret    
c0011ca7:	90                   	nop

c0011ca8 <ReservedFilename::ReservedFilename(int)>:
c0011ca8:	83 ec 0c             	sub    esp,0xc
c0011cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011caf:	83 ec 08             	sub    esp,0x8
c0011cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cb6:	50                   	push   eax
c0011cb7:	e8 38 fe ff ff       	call   c0011af4 <UnixFile::UnixFile(int)>
c0011cbc:	83 c4 10             	add    esp,0x10
c0011cbf:	ba 14 24 02 c0       	mov    edx,0xc0022414
c0011cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cc8:	89 10                	mov    DWORD PTR [eax],edx
c0011cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011cd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011cd5:	90                   	nop
c0011cd6:	83 c4 0c             	add    esp,0xc
c0011cd9:	c3                   	ret    

c0011cda <UnixFile::~UnixFile()>:
c0011cda:	83 ec 1c             	sub    esp,0x1c
c0011cdd:	ba f8 23 02 c0       	mov    edx,0xc00223f8
c0011ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ce6:	89 10                	mov    DWORD PTR [eax],edx
c0011ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cef:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011cf4:	7f 76                	jg     c0011d6c <UnixFile::~UnixFile()+0x92>
c0011cf6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cfe:	83 ec 0c             	sub    esp,0xc
c0011d01:	68 b8 be 02 c0       	push   0xc002beb8
c0011d06:	e8 a7 e5 00 00       	call   c00202b2 <LinkedList<UnixFile>::getFirstElement()>
c0011d0b:	83 c4 10             	add    esp,0x10
c0011d0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d12:	83 ec 0c             	sub    esp,0xc
c0011d15:	68 b8 be 02 c0       	push   0xc002beb8
c0011d1a:	e8 9b e5 00 00       	call   c00202ba <LinkedList<UnixFile>::removeFirst()>
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d26:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011d2a:	74 43                	je     c0011d6f <UnixFile::~UnixFile()+0x95>
c0011d2c:	83 ec 08             	sub    esp,0x8
c0011d2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d33:	68 b8 be 02 c0       	push   0xc002beb8
c0011d38:	e8 a1 e4 00 00       	call   c00201de <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011d3d:	83 c4 10             	add    esp,0x10
c0011d40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d44:	8d 50 01             	lea    edx,[eax+0x1]
c0011d47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d4b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011d50:	0f 94 c0             	sete   al
c0011d53:	0f b6 c0             	movzx  eax,al
c0011d56:	85 c0                	test   eax,eax
c0011d58:	74 a4                	je     c0011cfe <UnixFile::~UnixFile()+0x24>
c0011d5a:	83 ec 0c             	sub    esp,0xc
c0011d5d:	68 d0 23 02 c0       	push   0xc00223d0
c0011d62:	e8 af ce ff ff       	call   c000ec16 <KePanic(char const*)>
c0011d67:	83 c4 10             	add    esp,0x10
c0011d6a:	eb 92                	jmp    c0011cfe <UnixFile::~UnixFile()+0x24>
c0011d6c:	90                   	nop
c0011d6d:	eb 01                	jmp    c0011d70 <UnixFile::~UnixFile()+0x96>
c0011d6f:	90                   	nop
c0011d70:	90                   	nop
c0011d71:	83 c4 1c             	add    esp,0x1c
c0011d74:	c3                   	ret    
c0011d75:	90                   	nop

c0011d76 <UnixFile::~UnixFile()>:
c0011d76:	83 ec 0c             	sub    esp,0xc
c0011d79:	83 ec 0c             	sub    esp,0xc
c0011d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d80:	e8 55 ff ff ff       	call   c0011cda <UnixFile::~UnixFile()>
c0011d85:	83 c4 10             	add    esp,0x10
c0011d88:	83 ec 08             	sub    esp,0x8
c0011d8b:	6a 0c                	push   0xc
c0011d8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d91:	e8 c5 a8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	83 c4 0c             	add    esp,0xc
c0011d9c:	c3                   	ret    
c0011d9d:	90                   	nop

c0011d9e <ReservedFilename::~ReservedFilename()>:
c0011d9e:	83 ec 0c             	sub    esp,0xc
c0011da1:	ba 14 24 02 c0       	mov    edx,0xc0022414
c0011da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011daa:	89 10                	mov    DWORD PTR [eax],edx
c0011dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db0:	83 ec 0c             	sub    esp,0xc
c0011db3:	50                   	push   eax
c0011db4:	e8 21 ff ff ff       	call   c0011cda <UnixFile::~UnixFile()>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	90                   	nop
c0011dbd:	83 c4 0c             	add    esp,0xc
c0011dc0:	c3                   	ret    
c0011dc1:	90                   	nop

c0011dc2 <ReservedFilename::~ReservedFilename()>:
c0011dc2:	83 ec 0c             	sub    esp,0xc
c0011dc5:	83 ec 0c             	sub    esp,0xc
c0011dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dcc:	e8 cd ff ff ff       	call   c0011d9e <ReservedFilename::~ReservedFilename()>
c0011dd1:	83 c4 10             	add    esp,0x10
c0011dd4:	83 ec 08             	sub    esp,0x8
c0011dd7:	6a 0c                	push   0xc
c0011dd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ddd:	e8 79 a8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	83 c4 0c             	add    esp,0xc
c0011de8:	c3                   	ret    

c0011de9 <KeGetFileFromDescriptor(int)>:
c0011de9:	53                   	push   ebx
c0011dea:	83 ec 08             	sub    esp,0x8
c0011ded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011df1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011df7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011dfd:	7f 2c                	jg     c0011e2b <KeGetFileFromDescriptor(int)+0x42>
c0011dff:	83 ec 0c             	sub    esp,0xc
c0011e02:	68 b8 be 02 c0       	push   0xc002beb8
c0011e07:	e8 a6 e4 00 00       	call   c00202b2 <LinkedList<UnixFile>::getFirstElement()>
c0011e0c:	83 c4 10             	add    esp,0x10
c0011e0f:	85 c0                	test   eax,eax
c0011e11:	75 04                	jne    c0011e17 <KeGetFileFromDescriptor(int)+0x2e>
c0011e13:	31 c0                	xor    eax,eax
c0011e15:	eb 6e                	jmp    c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e17:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011e1a:	74 69                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e1c:	52                   	push   edx
c0011e1d:	52                   	push   edx
c0011e1e:	50                   	push   eax
c0011e1f:	68 b8 be 02 c0       	push   0xc002beb8
c0011e24:	e8 33 e5 00 00       	call   c002035c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011e29:	eb e1                	jmp    c0011e0c <KeGetFileFromDescriptor(int)+0x23>
c0011e2b:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011e31:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011e36:	74 4d                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e38:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011e3e:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011e43:	74 40                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e45:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011e4b:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011e50:	74 33                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e52:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e58:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011e5d:	74 26                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e5f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011e65:	83 f8 08             	cmp    eax,0x8
c0011e68:	77 09                	ja     c0011e73 <KeGetFileFromDescriptor(int)+0x8a>
c0011e6a:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011e71:	eb 12                	jmp    c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e73:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011e79:	83 fb 08             	cmp    ebx,0x8
c0011e7c:	77 95                	ja     c0011e13 <KeGetFileFromDescriptor(int)+0x2a>
c0011e7e:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011e85:	83 c4 08             	add    esp,0x8
c0011e88:	5b                   	pop    ebx
c0011e89:	c3                   	ret    

c0011e8a <__static_initialization_and_destruction_0(int, int)>:
c0011e8a:	83 ec 0c             	sub    esp,0xc
c0011e8d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011e92:	75 34                	jne    c0011ec8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011e94:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011e9c:	75 2a                	jne    c0011ec8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011e9e:	83 ec 0c             	sub    esp,0xc
c0011ea1:	68 b8 be 02 c0       	push   0xc002beb8
c0011ea6:	e8 f1 e2 00 00       	call   c002019c <LinkedList<UnixFile>::LinkedList()>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	83 ec 04             	sub    esp,0x4
c0011eb1:	68 90 3a 02 c0       	push   0xc0023a90
c0011eb6:	68 b8 be 02 c0       	push   0xc002beb8
c0011ebb:	68 9a 01 02 c0       	push   0xc002019a
c0011ec0:	e8 46 a7 ff ff       	call   c000c60b <__cxa_atexit>
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	90                   	nop
c0011ec9:	83 c4 0c             	add    esp,0xc
c0011ecc:	c3                   	ret    

c0011ecd <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ecd:	83 ec 0c             	sub    esp,0xc
c0011ed0:	83 ec 08             	sub    esp,0x8
c0011ed3:	68 ff ff 00 00       	push   0xffff
c0011ed8:	6a 01                	push   0x1
c0011eda:	e8 ab ff ff ff       	call   c0011e8a <__static_initialization_and_destruction_0(int, int)>
c0011edf:	83 c4 10             	add    esp,0x10
c0011ee2:	83 c4 0c             	add    esp,0xc
c0011ee5:	c3                   	ret    

c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ee6:	53                   	push   ebx
c0011ee7:	8b 15 28 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024228
c0011eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ef1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ef5:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0011efb:	89 d8                	mov    eax,ebx
c0011efd:	d1 e8                	shr    eax,1
c0011eff:	01 d0                	add    eax,edx
c0011f01:	80 e3 01             	and    bl,0x1
c0011f04:	8a 10                	mov    dl,BYTE PTR [eax]
c0011f06:	75 09                	jne    c0011f11 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0011f08:	83 e2 f0             	and    edx,0xfffffff0
c0011f0b:	09 ca                	or     edx,ecx
c0011f0d:	88 10                	mov    BYTE PTR [eax],dl
c0011f0f:	5b                   	pop    ebx
c0011f10:	c3                   	ret    
c0011f11:	0f b6 c9             	movzx  ecx,cl
c0011f14:	83 e2 0f             	and    edx,0xf
c0011f17:	c1 e1 04             	shl    ecx,0x4
c0011f1a:	09 ca                	or     edx,ecx
c0011f1c:	88 10                	mov    BYTE PTR [eax],dl
c0011f1e:	5b                   	pop    ebx
c0011f1f:	c3                   	ret    

c0011f20 <Virt::getPageState(unsigned long)>:
c0011f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f24:	8b 0d 28 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024228
c0011f2a:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011f30:	89 d0                	mov    eax,edx
c0011f32:	d1 e8                	shr    eax,1
c0011f34:	80 e2 01             	and    dl,0x1
c0011f37:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011f3a:	74 03                	je     c0011f3f <Virt::getPageState(unsigned long)+0x1f>
c0011f3c:	c1 e8 04             	shr    eax,0x4
c0011f3f:	83 e0 0f             	and    eax,0xf
c0011f42:	c3                   	ret    

c0011f43 <Virt::allocateKernelVirtualPages(int)>:
c0011f43:	55                   	push   ebp
c0011f44:	57                   	push   edi
c0011f45:	56                   	push   esi
c0011f46:	31 f6                	xor    esi,esi
c0011f48:	53                   	push   ebx
c0011f49:	31 db                	xor    ebx,ebx
c0011f4b:	83 ec 1c             	sub    esp,0x1c
c0011f4e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011f53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f57:	8b 2d 24 42 02 c0    	mov    ebp,DWORD PTR ds:0xc0024224
c0011f5d:	55                   	push   ebp
c0011f5e:	e8 bd ff ff ff       	call   c0011f20 <Virt::getPageState(unsigned long)>
c0011f63:	5a                   	pop    edx
c0011f64:	84 c0                	test   al,al
c0011f66:	75 3d                	jne    c0011fa5 <Virt::allocateKernelVirtualPages(int)+0x62>
c0011f68:	85 db                	test   ebx,ebx
c0011f6a:	0f 44 f5             	cmove  esi,ebp
c0011f6d:	83 c3 01             	add    ebx,0x1
c0011f70:	39 fb                	cmp    ebx,edi
c0011f72:	74 5e                	je     c0011fd2 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0011f74:	83 c5 01             	add    ebp,0x1
c0011f77:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0011f7d:	76 33                	jbe    c0011fb2 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0011f7f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0011f84:	c7 05 24 42 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024224,0xc8000
c0011f8e:	75 2a                	jne    c0011fba <Virt::allocateKernelVirtualPages(int)+0x77>
c0011f90:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011f95:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0011f9a:	55                   	push   ebp
c0011f9b:	e8 80 ff ff ff       	call   c0011f20 <Virt::getPageState(unsigned long)>
c0011fa0:	5a                   	pop    edx
c0011fa1:	84 c0                	test   al,al
c0011fa3:	74 c3                	je     c0011f68 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011fa5:	83 c5 01             	add    ebp,0x1
c0011fa8:	31 db                	xor    ebx,ebx
c0011faa:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0011fb0:	77 cd                	ja     c0011f7f <Virt::allocateKernelVirtualPages(int)+0x3c>
c0011fb2:	89 2d 24 42 02 c0    	mov    DWORD PTR ds:0xc0024224,ebp
c0011fb8:	eb a3                	jmp    c0011f5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011fba:	83 ec 0c             	sub    esp,0xc
c0011fbd:	68 28 24 02 c0       	push   0xc0022428
c0011fc2:	e8 4f cc ff ff       	call   c000ec16 <KePanic(char const*)>
c0011fc7:	8b 2d 24 42 02 c0    	mov    ebp,DWORD PTR ds:0xc0024224
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	eb 8b                	jmp    c0011f5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011fd2:	89 35 24 42 02 c0    	mov    DWORD PTR ds:0xc0024224,esi
c0011fd8:	83 fb 01             	cmp    ebx,0x1
c0011fdb:	74 63                	je     c0012040 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0011fdd:	85 ff                	test   edi,edi
c0011fdf:	74 41                	je     c0012022 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0011fe1:	89 f0                	mov    eax,esi
c0011fe3:	31 db                	xor    ebx,ebx
c0011fe5:	8d 6f ff             	lea    ebp,[edi-0x1]
c0011fe8:	eb 16                	jmp    c0012000 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0011fea:	6a 01                	push   0x1
c0011fec:	83 c3 01             	add    ebx,0x1
c0011fef:	50                   	push   eax
c0011ff0:	e8 f1 fe ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ff5:	39 fb                	cmp    ebx,edi
c0011ff7:	58                   	pop    eax
c0011ff8:	5a                   	pop    edx
c0011ff9:	74 27                	je     c0012022 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0011ffb:	a1 24 42 02 c0       	mov    eax,ds:0xc0024224
c0012000:	8d 50 01             	lea    edx,[eax+0x1]
c0012003:	85 db                	test   ebx,ebx
c0012005:	89 15 24 42 02 c0    	mov    DWORD PTR ds:0xc0024224,edx
c001200b:	74 22                	je     c001202f <Virt::allocateKernelVirtualPages(int)+0xec>
c001200d:	39 dd                	cmp    ebp,ebx
c001200f:	75 d9                	jne    c0011fea <Virt::allocateKernelVirtualPages(int)+0xa7>
c0012011:	6a 03                	push   0x3
c0012013:	83 c3 01             	add    ebx,0x1
c0012016:	50                   	push   eax
c0012017:	e8 ca fe ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001201c:	39 fb                	cmp    ebx,edi
c001201e:	59                   	pop    ecx
c001201f:	58                   	pop    eax
c0012020:	75 d9                	jne    c0011ffb <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012022:	83 c4 1c             	add    esp,0x1c
c0012025:	89 f0                	mov    eax,esi
c0012027:	5b                   	pop    ebx
c0012028:	c1 e0 0c             	shl    eax,0xc
c001202b:	5e                   	pop    esi
c001202c:	5f                   	pop    edi
c001202d:	5d                   	pop    ebp
c001202e:	c3                   	ret    
c001202f:	6a 02                	push   0x2
c0012031:	bb 01 00 00 00       	mov    ebx,0x1
c0012036:	50                   	push   eax
c0012037:	e8 aa fe ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001203c:	58                   	pop    eax
c001203d:	5a                   	pop    edx
c001203e:	eb bb                	jmp    c0011ffb <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012040:	6a 04                	push   0x4
c0012042:	56                   	push   esi
c0012043:	8d 46 01             	lea    eax,[esi+0x1]
c0012046:	a3 24 42 02 c0       	mov    ds:0xc0024224,eax
c001204b:	e8 96 fe ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012050:	89 f0                	mov    eax,esi
c0012052:	59                   	pop    ecx
c0012053:	c1 e0 0c             	shl    eax,0xc
c0012056:	5b                   	pop    ebx
c0012057:	83 c4 1c             	add    esp,0x1c
c001205a:	5b                   	pop    ebx
c001205b:	5e                   	pop    esi
c001205c:	5f                   	pop    edi
c001205d:	5d                   	pop    ebp
c001205e:	c3                   	ret    

c001205f <Virt::freeSwapfilePage(unsigned long)>:
c001205f:	53                   	push   ebx
c0012060:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c0012066:	b8 01 00 00 00       	mov    eax,0x1
c001206b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001206f:	d3 e0                	shl    eax,cl
c0012071:	89 cb                	mov    ebx,ecx
c0012073:	c1 eb 05             	shr    ebx,0x5
c0012076:	f7 d0                	not    eax
c0012078:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001207b:	21 c1                	and    ecx,eax
c001207d:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012080:	5b                   	pop    ebx
c0012081:	c3                   	ret    

c0012082 <Virt::swapIDToSector(unsigned long)>:
c0012082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012086:	8b 15 2c 42 02 c0    	mov    edx,DWORD PTR ds:0xc002422c
c001208c:	8b 0d 34 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024234
c0012092:	0f af c2             	imul   eax,edx
c0012095:	01 c8                	add    eax,ecx
c0012097:	c3                   	ret    

c0012098 <Virt::allocateSwapfilePage()>:
c0012098:	55                   	push   ebp
c0012099:	31 d2                	xor    edx,edx
c001209b:	57                   	push   edi
c001209c:	56                   	push   esi
c001209d:	53                   	push   ebx
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	8b 1d 30 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024230
c00120a7:	8b 0d 2c 42 02 c0    	mov    ecx,DWORD PTR ds:0xc002422c
c00120ad:	89 d8                	mov    eax,ebx
c00120af:	f7 f1                	div    ecx
c00120b1:	39 cb                	cmp    ebx,ecx
c00120b3:	72 2f                	jb     c00120e4 <Virt::allocateSwapfilePage()+0x4c>
c00120b5:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c00120bb:	8b 16                	mov    edx,DWORD PTR [esi]
c00120bd:	f6 c2 01             	test   dl,0x1
c00120c0:	74 3e                	je     c0012100 <Virt::allocateSwapfilePage()+0x68>
c00120c2:	31 c9                	xor    ecx,ecx
c00120c4:	bf 01 00 00 00       	mov    edi,0x1
c00120c9:	eb 12                	jmp    c00120dd <Virt::allocateSwapfilePage()+0x45>
c00120cb:	89 ca                	mov    edx,ecx
c00120cd:	89 fd                	mov    ebp,edi
c00120cf:	c1 ea 05             	shr    edx,0x5
c00120d2:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00120d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00120d7:	d3 e5                	shl    ebp,cl
c00120d9:	85 ea                	test   edx,ebp
c00120db:	74 2c                	je     c0012109 <Virt::allocateSwapfilePage()+0x71>
c00120dd:	83 c1 01             	add    ecx,0x1
c00120e0:	39 c8                	cmp    eax,ecx
c00120e2:	77 e7                	ja     c00120cb <Virt::allocateSwapfilePage()+0x33>
c00120e4:	83 ec 0c             	sub    esp,0xc
c00120e7:	68 98 26 02 c0       	push   0xc0022698
c00120ec:	e8 25 cb ff ff       	call   c000ec16 <KePanic(char const*)>
c00120f1:	83 c4 10             	add    esp,0x10
c00120f4:	31 c9                	xor    ecx,ecx
c00120f6:	83 c4 0c             	add    esp,0xc
c00120f9:	89 c8                	mov    eax,ecx
c00120fb:	5b                   	pop    ebx
c00120fc:	5e                   	pop    esi
c00120fd:	5f                   	pop    edi
c00120fe:	5d                   	pop    ebp
c00120ff:	c3                   	ret    
c0012100:	89 f3                	mov    ebx,esi
c0012102:	bd 01 00 00 00       	mov    ebp,0x1
c0012107:	31 c9                	xor    ecx,ecx
c0012109:	09 ea                	or     edx,ebp
c001210b:	89 c8                	mov    eax,ecx
c001210d:	89 13                	mov    DWORD PTR [ebx],edx
c001210f:	83 c4 0c             	add    esp,0xc
c0012112:	5b                   	pop    ebx
c0012113:	5e                   	pop    esi
c0012114:	5f                   	pop    edi
c0012115:	5d                   	pop    ebp
c0012116:	c3                   	ret    

c0012117 <Virt::virtualMemorySetup()>:
c0012117:	53                   	push   ebx
c0012118:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001211d:	6a 0f                	push   0xf
c001211f:	53                   	push   ebx
c0012120:	83 c3 01             	add    ebx,0x1
c0012123:	e8 be fd ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012128:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001212e:	58                   	pop    eax
c001212f:	5a                   	pop    edx
c0012130:	75 eb                	jne    c001211d <Virt::virtualMemorySetup()+0x6>
c0012132:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012137:	6a 00                	push   0x0
c0012139:	53                   	push   ebx
c001213a:	83 c3 01             	add    ebx,0x1
c001213d:	e8 a4 fd ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012142:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012148:	59                   	pop    ecx
c0012149:	58                   	pop    eax
c001214a:	75 eb                	jne    c0012137 <Virt::virtualMemorySetup()+0x20>
c001214c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012151:	6a 0f                	push   0xf
c0012153:	53                   	push   ebx
c0012154:	83 c3 01             	add    ebx,0x1
c0012157:	e8 8a fd ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001215c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012162:	58                   	pop    eax
c0012163:	5a                   	pop    edx
c0012164:	75 eb                	jne    c0012151 <Virt::virtualMemorySetup()+0x3a>
c0012166:	5b                   	pop    ebx
c0012167:	c3                   	ret    

c0012168 <Virt::setupPageSwapping(int)>:
c0012168:	53                   	push   ebx
c0012169:	83 ec 0c             	sub    esp,0xc
c001216c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0012171:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012175:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001217b:	8b 10                	mov    edx,DWORD PTR [eax]
c001217d:	53                   	push   ebx
c001217e:	68 af 26 02 c0       	push   0xc00226af
c0012183:	50                   	push   eax
c0012184:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012187:	c1 e3 0b             	shl    ebx,0xb
c001218a:	89 1d 30 42 02 c0    	mov    DWORD PTR ds:0xc0024230,ebx
c0012190:	c1 eb 08             	shr    ebx,0x8
c0012193:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012196:	c6 05 38 42 02 c0 43 	mov    BYTE PTR ds:0xc0024238,0x43
c001219d:	c7 05 2c 42 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002422c,0x8
c00121a7:	a3 34 42 02 c0       	mov    ds:0xc0024234,eax
c00121ac:	e8 1f c7 ff ff       	call   c000e8d0 <malloc>
c00121b1:	31 d2                	xor    edx,edx
c00121b3:	83 c4 0c             	add    esp,0xc
c00121b6:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c00121bb:	89 c1                	mov    ecx,eax
c00121bd:	a1 30 42 02 c0       	mov    eax,ds:0xc0024230
c00121c2:	f7 35 2c 42 02 c0    	div    DWORD PTR ds:0xc002422c
c00121c8:	c1 e8 05             	shr    eax,0x5
c00121cb:	50                   	push   eax
c00121cc:	6a 00                	push   0x0
c00121ce:	51                   	push   ecx
c00121cf:	e8 1c e3 fe ff       	call   c00004f0 <memset>
c00121d4:	83 c4 18             	add    esp,0x18
c00121d7:	5b                   	pop    ebx
c00121d8:	c3                   	ret    
c00121d9:	90                   	nop

c00121da <VAS::setCPUSpecific(unsigned long)>:
c00121da:	c3                   	ret    
c00121db:	90                   	nop

c00121dc <VAS::VAS(VAS*)>:
c00121dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121f2:	90                   	nop
c00121f3:	c3                   	ret    

c00121f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00121f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121f8:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00121fd:	89 c2                	mov    edx,eax
c00121ff:	c1 ea 16             	shr    edx,0x16
c0012202:	c1 e8 0a             	shr    eax,0xa
c0012205:	83 f9 01             	cmp    ecx,0x1
c0012208:	19 c9                	sbb    ecx,ecx
c001220a:	25 fc 0f 00 00       	and    eax,0xffc
c001220f:	c1 e2 0c             	shl    edx,0xc
c0012212:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012218:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001221f:	01 d0                	add    eax,edx
c0012221:	c3                   	ret    

c0012222 <VAS::getPageTableEntry(unsigned long)>:
c0012222:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012226:	89 ca                	mov    edx,ecx
c0012228:	c1 ea 16             	shr    edx,0x16
c001222b:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012231:	c1 e9 0a             	shr    ecx,0xa
c0012234:	c1 e0 0c             	shl    eax,0xc
c0012237:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001223d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012240:	c3                   	ret    

c0012241 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012241:	55                   	push   ebp
c0012242:	57                   	push   edi
c0012243:	bf 01 00 00 00       	mov    edi,0x1
c0012248:	56                   	push   esi
c0012249:	53                   	push   ebx
c001224a:	83 ec 1c             	sub    esp,0x1c
c001224d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012251:	c1 ee 0c             	shr    esi,0xc
c0012254:	eb 48                	jmp    c001229e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012256:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001225b:	83 ec 08             	sub    esp,0x8
c001225e:	55                   	push   ebp
c001225f:	50                   	push   eax
c0012260:	e8 bd ff ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012265:	83 c4 10             	add    esp,0x10
c0012268:	8b 10                	mov    edx,DWORD PTR [eax]
c001226a:	f6 c6 04             	test   dh,0x4
c001226d:	75 70                	jne    c00122df <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001226f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012275:	83 fb 04             	cmp    ebx,0x4
c0012278:	0f 84 8a 00 00 00    	je     c0012308 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001227e:	83 fb 02             	cmp    ebx,0x2
c0012281:	0f 84 9a 00 00 00    	je     c0012321 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012287:	83 fb 03             	cmp    ebx,0x3
c001228a:	0f 84 be 00 00 00    	je     c001234e <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012290:	83 fb 01             	cmp    ebx,0x1
c0012293:	0f 84 a2 00 00 00    	je     c001233b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012299:	83 c6 01             	add    esi,0x1
c001229c:	31 ff                	xor    edi,edi
c001229e:	56                   	push   esi
c001229f:	89 f5                	mov    ebp,esi
c00122a1:	e8 7a fc ff ff       	call   c0011f20 <Virt::getPageState(unsigned long)>
c00122a6:	c1 e5 0c             	shl    ebp,0xc
c00122a9:	5a                   	pop    edx
c00122aa:	0f b6 d8             	movzx  ebx,al
c00122ad:	85 db                	test   ebx,ebx
c00122af:	75 a5                	jne    c0012256 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00122b1:	83 ec 0c             	sub    esp,0xc
c00122b4:	68 c6 26 02 c0       	push   0xc00226c6
c00122b9:	e8 58 c9 ff ff       	call   c000ec16 <KePanic(char const*)>
c00122be:	5a                   	pop    edx
c00122bf:	59                   	pop    ecx
c00122c0:	55                   	push   ebp
c00122c1:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c00122c7:	55                   	push   ebp
c00122c8:	e8 55 ff ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c00122cd:	83 c4 10             	add    esp,0x10
c00122d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00122d2:	f6 c6 04             	test   dh,0x4
c00122d5:	75 08                	jne    c00122df <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00122d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122dd:	eb ba                	jmp    c0012299 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00122df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00122e9:	83 ec 0c             	sub    esp,0xc
c00122ec:	52                   	push   edx
c00122ed:	e8 b5 ca ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c00122f2:	83 c4 10             	add    esp,0x10
c00122f5:	83 fb 04             	cmp    ebx,0x4
c00122f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012302:	0f 85 76 ff ff ff    	jne    c001227e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012308:	83 e7 01             	and    edi,0x1
c001230b:	75 46                	jne    c0012353 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001230d:	c7 44 24 30 48 24 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022448
c0012315:	83 c4 1c             	add    esp,0x1c
c0012318:	5b                   	pop    ebx
c0012319:	5e                   	pop    esi
c001231a:	5f                   	pop    edi
c001231b:	5d                   	pop    ebp
c001231c:	e9 f5 c8 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c0012321:	83 e7 01             	and    edi,0x1
c0012324:	75 15                	jne    c001233b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012326:	83 ec 0c             	sub    esp,0xc
c0012329:	68 e2 26 02 c0       	push   0xc00226e2
c001232e:	e8 e3 c8 ff ff       	call   c000ec16 <KePanic(char const*)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	e9 5e ff ff ff       	jmp    c0012299 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001233b:	83 ec 08             	sub    esp,0x8
c001233e:	6a 00                	push   0x0
c0012340:	56                   	push   esi
c0012341:	e8 a0 fb ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012346:	83 c4 10             	add    esp,0x10
c0012349:	e9 4b ff ff ff       	jmp    c0012299 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001234e:	83 e7 01             	and    edi,0x1
c0012351:	75 16                	jne    c0012369 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012353:	83 ec 08             	sub    esp,0x8
c0012356:	6a 00                	push   0x0
c0012358:	56                   	push   esi
c0012359:	e8 88 fb ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	83 c4 1c             	add    esp,0x1c
c0012364:	5b                   	pop    ebx
c0012365:	5e                   	pop    esi
c0012366:	5f                   	pop    edi
c0012367:	5d                   	pop    ebp
c0012368:	c3                   	ret    
c0012369:	c7 44 24 30 fe 26 02 c0 	mov    DWORD PTR [esp+0x30],0xc00226fe
c0012371:	83 c4 1c             	add    esp,0x1c
c0012374:	5b                   	pop    ebx
c0012375:	5e                   	pop    esi
c0012376:	5f                   	pop    edi
c0012377:	5d                   	pop    ebp
c0012378:	e9 99 c8 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001237d:	90                   	nop

c001237e <VAS::freeAllocatedPages(unsigned long)>:
c001237e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012382:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012386:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001238a:	74 09                	je     c0012395 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001238c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012390:	e9 ac fe ff ff       	jmp    c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0012395:	c7 44 24 04 6c 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc002246c
c001239d:	e9 ac 4b ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00123a2 <VAS::virtualToPhysical(unsigned long)>:
c00123a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123a6:	50                   	push   eax
c00123a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123ab:	52                   	push   edx
c00123ac:	e8 71 fe ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c00123b1:	59                   	pop    ecx
c00123b2:	5a                   	pop    edx
c00123b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00123b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ba:	c3                   	ret    
c00123bb:	90                   	nop

c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00123bc:	55                   	push   ebp
c00123bd:	57                   	push   edi
c00123be:	56                   	push   esi
c00123bf:	53                   	push   ebx
c00123c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00123c4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00123c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00123cc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00123d0:	85 db                	test   ebx,ebx
c00123d2:	7e 24                	jle    c00123f8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00123d4:	c1 e3 0c             	shl    ebx,0xc
c00123d7:	01 f3                	add    ebx,esi
c00123d9:	56                   	push   esi
c00123da:	81 c6 00 10 00 00    	add    esi,0x1000
c00123e0:	55                   	push   ebp
c00123e1:	e8 3c fe ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c00123e6:	5a                   	pop    edx
c00123e7:	59                   	pop    ecx
c00123e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123ea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00123ee:	21 f9                	and    ecx,edi
c00123f0:	09 d1                	or     ecx,edx
c00123f2:	39 f3                	cmp    ebx,esi
c00123f4:	89 08                	mov    DWORD PTR [eax],ecx
c00123f6:	75 e1                	jne    c00123d9 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00123f8:	5b                   	pop    ebx
c00123f9:	5e                   	pop    esi
c00123fa:	5f                   	pop    edi
c00123fb:	5d                   	pop    ebp
c00123fc:	c3                   	ret    
c00123fd:	90                   	nop

c00123fe <VAS::VAS()>:
c00123fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012402:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001240d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012418:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c001241d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012421:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012425:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012429:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001242c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012430:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012437:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c001243c:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012441:	29 c2                	sub    edx,eax
c0012443:	89 d0                	mov    eax,edx
c0012445:	05 ff 0f 00 00       	add    eax,0xfff
c001244a:	c1 e8 0c             	shr    eax,0xc
c001244d:	89 c2                	mov    edx,eax
c001244f:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012454:	6a 04                	push   0x4
c0012456:	6a ff                	push   0xffffffff
c0012458:	52                   	push   edx
c0012459:	50                   	push   eax
c001245a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001245e:	e8 59 ff ff ff       	call   c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012463:	83 c4 14             	add    esp,0x14
c0012466:	90                   	nop
c0012467:	c3                   	ret    

c0012468 <VAS::setToWriteCombining(unsigned long, int)>:
c0012468:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001246d:	50                   	push   eax
c001246e:	6a ff                	push   0xffffffff
c0012470:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012474:	52                   	push   edx
c0012475:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012479:	51                   	push   ecx
c001247a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001247e:	50                   	push   eax
c001247f:	e8 38 ff ff ff       	call   c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012484:	83 c4 14             	add    esp,0x14
c0012487:	c3                   	ret    

c0012488 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001248c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001248f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012493:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012496:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001249b:	83 f8 01             	cmp    eax,0x1
c001249e:	19 c0                	sbb    eax,eax
c00124a0:	83 ca 03             	or     edx,0x3
c00124a3:	83 e0 fc             	and    eax,0xfffffffc
c00124a6:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00124ad:	0f 20 d8             	mov    eax,cr3
c00124b0:	0f 22 d8             	mov    cr3,eax
c00124b3:	c3                   	ret    

c00124b4 <VAS::~VAS()>:
c00124b4:	83 ec 2c             	sub    esp,0x2c
c00124b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124bf:	fa                   	cli    
c00124c0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00124c5:	83 c0 01             	add    eax,0x1
c00124c8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00124cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00124d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00124d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124d7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00124dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00124e1:	6a 01                	push   0x1
c00124e3:	50                   	push   eax
c00124e4:	e8 9f ff ff ff       	call   c0012488 <VAS::mapOtherVASIn(bool, VAS*)>
c00124e9:	83 c4 0c             	add    esp,0xc
c00124ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124f4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00124fc:	0f 8f d8 00 00 00    	jg     c00125da <VAS::~VAS()+0x126>
c0012502:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012506:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012509:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001250d:	c1 e2 02             	shl    edx,0x2
c0012510:	01 d0                	add    eax,edx
c0012512:	8b 00                	mov    eax,DWORD PTR [eax]
c0012514:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251c:	83 e0 01             	and    eax,0x1
c001251f:	0f 84 ab 00 00 00    	je     c00125d0 <VAS::~VAS()+0x11c>
c0012525:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001252d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012535:	7f 74                	jg     c00125ab <VAS::~VAS()+0xf7>
c0012537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001253b:	c1 e0 0a             	shl    eax,0xa
c001253e:	89 c2                	mov    edx,eax
c0012540:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012544:	01 d0                	add    eax,edx
c0012546:	c1 e0 0c             	shl    eax,0xc
c0012549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001254d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012552:	8b 00                	mov    eax,DWORD PTR [eax]
c0012554:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012557:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001255d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012561:	6a 01                	push   0x1
c0012563:	50                   	push   eax
c0012564:	e8 8b fc ff ff       	call   c00121f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012569:	83 c4 0c             	add    esp,0xc
c001256c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012570:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012574:	8b 00                	mov    eax,DWORD PTR [eax]
c0012576:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001257a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001257e:	25 01 04 00 00       	and    eax,0x401
c0012583:	3d 01 04 00 00       	cmp    eax,0x401
c0012588:	75 1a                	jne    c00125a4 <VAS::~VAS()+0xf0>
c001258a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001258e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012593:	83 ec 0c             	sub    esp,0xc
c0012596:	50                   	push   eax
c0012597:	e8 0b c8 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c001259c:	83 c4 10             	add    esp,0x10
c001259f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00125a4:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00125a9:	eb 82                	jmp    c001252d <VAS::~VAS()+0x79>
c00125ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125af:	25 00 04 00 00       	and    eax,0x400
c00125b4:	74 1a                	je     c00125d0 <VAS::~VAS()+0x11c>
c00125b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125bf:	83 ec 0c             	sub    esp,0xc
c00125c2:	50                   	push   eax
c00125c3:	e8 df c7 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c00125c8:	83 c4 10             	add    esp,0x10
c00125cb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00125d0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00125d5:	e9 1a ff ff ff       	jmp    c00124f4 <VAS::~VAS()+0x40>
c00125da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125e1:	83 ec 0c             	sub    esp,0xc
c00125e4:	50                   	push   eax
c00125e5:	e8 57 fc ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c00125ea:	83 c4 10             	add    esp,0x10
c00125ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00125f4:	83 ec 0c             	sub    esp,0xc
c00125f7:	50                   	push   eax
c00125f8:	e8 aa c7 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c00125fd:	83 c4 10             	add    esp,0x10
c0012600:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012605:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001260d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012612:	85 c0                	test   eax,eax
c0012614:	75 01                	jne    c0012617 <VAS::~VAS()+0x163>
c0012616:	fb                   	sti    
c0012617:	90                   	nop
c0012618:	83 c4 2c             	add    esp,0x2c
c001261b:	c3                   	ret    

c001261c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001261c:	55                   	push   ebp
c001261d:	57                   	push   edi
c001261e:	56                   	push   esi
c001261f:	53                   	push   ebx
c0012620:	83 ec 1c             	sub    esp,0x1c
c0012623:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012627:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001262b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001262f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012635:	77 08                	ja     c001263f <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0012637:	0f 20 d8             	mov    eax,cr3
c001263a:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001263d:	75 43                	jne    c0012682 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001263f:	89 d8                	mov    eax,ebx
c0012641:	09 f8                	or     eax,edi
c0012643:	a9 ff 0f 00 00       	test   eax,0xfff
c0012648:	75 53                	jne    c001269d <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c001264a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001264d:	89 de                	mov    esi,ebx
c001264f:	c1 ee 16             	shr    esi,0x16
c0012652:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012659:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001265d:	74 50                	je     c00126af <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c001265f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012663:	c1 eb 0a             	shr    ebx,0xa
c0012666:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001266c:	c1 e6 0c             	shl    esi,0xc
c001266f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012675:	09 c7                	or     edi,eax
c0012677:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c001267a:	83 c4 1c             	add    esp,0x1c
c001267d:	5b                   	pop    ebx
c001267e:	5e                   	pop    esi
c001267f:	5f                   	pop    edi
c0012680:	5d                   	pop    ebp
c0012681:	c3                   	ret    
c0012682:	83 ec 0c             	sub    esp,0xc
c0012685:	68 90 24 02 c0       	push   0xc0022490
c001268a:	e8 bf 48 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001268f:	89 d8                	mov    eax,ebx
c0012691:	83 c4 10             	add    esp,0x10
c0012694:	09 f8                	or     eax,edi
c0012696:	a9 ff 0f 00 00       	test   eax,0xfff
c001269b:	74 ad                	je     c001264a <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001269d:	83 ec 0c             	sub    esp,0xc
c00126a0:	68 f8 24 02 c0       	push   0xc00224f8
c00126a5:	e8 6c c5 ff ff       	call   c000ec16 <KePanic(char const*)>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	eb 9b                	jmp    c001264a <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00126af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126b3:	e8 58 c7 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00126b8:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00126be:	83 ec 0c             	sub    esp,0xc
c00126c1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00126c9:	6a 01                	push   0x1
c00126cb:	e8 73 f8 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00126d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126d7:	6a 01                	push   0x1
c00126d9:	50                   	push   eax
c00126da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00126de:	52                   	push   edx
c00126df:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126e3:	51                   	push   ecx
c00126e4:	e8 2d 01 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126e9:	83 c4 1c             	add    esp,0x1c
c00126ec:	68 00 10 00 00       	push   0x1000
c00126f1:	6a 00                	push   0x0
c00126f3:	50                   	push   eax
c00126f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126f8:	e8 f3 dd fe ff       	call   c00004f0 <memset>
c00126fd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012701:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012704:	e8 38 fb ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0012709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001270d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012711:	83 c4 10             	add    esp,0x10
c0012714:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0012717:	0d 07 04 00 00       	or     eax,0x407
c001271c:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c001271f:	e9 3b ff ff ff       	jmp    c001265f <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0012724 <VAS::allocatePages(int, int)>:
c0012724:	55                   	push   ebp
c0012725:	57                   	push   edi
c0012726:	56                   	push   esi
c0012727:	53                   	push   ebx
c0012728:	83 ec 1c             	sub    esp,0x1c
c001272b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001272f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012733:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0012737:	75 75                	jne    c00127ae <VAS::allocatePages(int, int)+0x8a>
c0012739:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001273c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012740:	85 c0                	test   eax,eax
c0012742:	74 49                	je     c001278d <VAS::allocatePages(int, int)+0x69>
c0012744:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012748:	89 d5                	mov    ebp,edx
c001274a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001274e:	c1 e5 0c             	shl    ebp,0xc
c0012751:	01 dd                	add    ebp,ebx
c0012753:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012756:	81 cf 00 04 00 00    	or     edi,0x400
c001275c:	85 d2                	test   edx,edx
c001275e:	7e 1b                	jle    c001277b <VAS::allocatePages(int, int)+0x57>
c0012760:	e8 ab c6 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012765:	57                   	push   edi
c0012766:	53                   	push   ebx
c0012767:	81 c3 00 10 00 00    	add    ebx,0x1000
c001276d:	50                   	push   eax
c001276e:	56                   	push   esi
c001276f:	e8 a8 fe ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012774:	83 c4 10             	add    esp,0x10
c0012777:	39 dd                	cmp    ebp,ebx
c0012779:	75 e5                	jne    c0012760 <VAS::allocatePages(int, int)+0x3c>
c001277b:	0f 20 d8             	mov    eax,cr3
c001277e:	0f 22 d8             	mov    cr3,eax
c0012781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012785:	83 c4 1c             	add    esp,0x1c
c0012788:	5b                   	pop    ebx
c0012789:	5e                   	pop    esi
c001278a:	5f                   	pop    edi
c001278b:	5d                   	pop    ebp
c001278c:	c3                   	ret    
c001278d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012791:	83 ec 0c             	sub    esp,0xc
c0012794:	68 1c 25 02 c0       	push   0xc002251c
c0012799:	e8 78 c4 ff ff       	call   c000ec16 <KePanic(char const*)>
c001279e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00127a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127a5:	83 c4 10             	add    esp,0x10
c00127a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127ac:	eb 96                	jmp    c0012744 <VAS::allocatePages(int, int)+0x20>
c00127ae:	83 ec 0c             	sub    esp,0xc
c00127b1:	52                   	push   edx
c00127b2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00127b6:	e8 88 f7 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00127bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00127c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127cb:	77 38                	ja     c0012805 <VAS::allocatePages(int, int)+0xe1>
c00127cd:	85 d2                	test   edx,edx
c00127cf:	7e aa                	jle    c001277b <VAS::allocatePages(int, int)+0x57>
c00127d1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127d5:	c1 e2 0c             	shl    edx,0xc
c00127d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127dc:	81 cf 00 04 00 00    	or     edi,0x400
c00127e2:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c00127e5:	e8 26 c6 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00127ea:	57                   	push   edi
c00127eb:	53                   	push   ebx
c00127ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c00127f2:	50                   	push   eax
c00127f3:	56                   	push   esi
c00127f4:	e8 23 fe ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c00127f9:	83 c4 10             	add    esp,0x10
c00127fc:	39 dd                	cmp    ebp,ebx
c00127fe:	75 e5                	jne    c00127e5 <VAS::allocatePages(int, int)+0xc1>
c0012800:	e9 76 ff ff ff       	jmp    c001277b <VAS::allocatePages(int, int)+0x57>
c0012805:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012809:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c001280e:	09 c1                	or     ecx,eax
c0012810:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012814:	eb b7                	jmp    c00127cd <VAS::allocatePages(int, int)+0xa9>

c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012816:	55                   	push   ebp
c0012817:	57                   	push   edi
c0012818:	56                   	push   esi
c0012819:	53                   	push   ebx
c001281a:	83 ec 1c             	sub    esp,0x1c
c001281d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012821:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012825:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012829:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001282d:	85 db                	test   ebx,ebx
c001282f:	7e 2c                	jle    c001285d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0012831:	c1 e3 0c             	shl    ebx,0xc
c0012834:	8d 04 33             	lea    eax,[ebx+esi*1]
c0012837:	89 f3                	mov    ebx,esi
c0012839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001283d:	55                   	push   ebp
c001283e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012842:	29 f2                	sub    edx,esi
c0012844:	01 da                	add    edx,ebx
c0012846:	52                   	push   edx
c0012847:	53                   	push   ebx
c0012848:	81 c3 00 10 00 00    	add    ebx,0x1000
c001284e:	57                   	push   edi
c001284f:	e8 c8 fd ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012854:	83 c4 10             	add    esp,0x10
c0012857:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c001285b:	75 e0                	jne    c001283d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c001285d:	0f 20 d8             	mov    eax,cr3
c0012860:	0f 22 d8             	mov    cr3,eax
c0012863:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012867:	83 c4 1c             	add    esp,0x1c
c001286a:	5b                   	pop    ebx
c001286b:	5e                   	pop    esi
c001286c:	5f                   	pop    edi
c001286d:	5d                   	pop    ebp
c001286e:	c3                   	ret    
c001286f:	90                   	nop

c0012870 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012870:	55                   	push   ebp
c0012871:	57                   	push   edi
c0012872:	56                   	push   esi
c0012873:	53                   	push   ebx
c0012874:	83 ec 1c             	sub    esp,0x1c
c0012877:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001287b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001287f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012887:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001288b:	09 d8                	or     eax,ebx
c001288d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012892:	75 4b                	jne    c00128df <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012894:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012897:	89 de                	mov    esi,ebx
c0012899:	c1 ee 16             	shr    esi,0x16
c001289c:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c00128a3:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c00128a7:	74 48                	je     c00128f1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c00128a9:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c00128ae:	c1 eb 0a             	shr    ebx,0xa
c00128b1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00128b5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00128b9:	83 ff 01             	cmp    edi,0x1
c00128bc:	19 c0                	sbb    eax,eax
c00128be:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00128c4:	c1 e6 0c             	shl    esi,0xc
c00128c7:	25 00 00 c0 ff       	and    eax,0xffc00000
c00128cc:	01 f3                	add    ebx,esi
c00128ce:	09 ca                	or     edx,ecx
c00128d0:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c00128d7:	83 c4 1c             	add    esp,0x1c
c00128da:	5b                   	pop    ebx
c00128db:	5e                   	pop    esi
c00128dc:	5f                   	pop    edi
c00128dd:	5d                   	pop    ebp
c00128de:	c3                   	ret    
c00128df:	83 ec 0c             	sub    esp,0xc
c00128e2:	68 48 25 02 c0       	push   0xc0022548
c00128e7:	e8 2a c3 ff ff       	call   c000ec16 <KePanic(char const*)>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	eb a3                	jmp    c0012894 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00128f1:	e8 1a c5 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00128f6:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00128fc:	83 ec 0c             	sub    esp,0xc
c00128ff:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012903:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012907:	6a 01                	push   0x1
c0012909:	e8 35 f6 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001290e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012915:	6a 01                	push   0x1
c0012917:	50                   	push   eax
c0012918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001291c:	50                   	push   eax
c001291d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012921:	51                   	push   ecx
c0012922:	e8 ef fe ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012927:	83 c4 1c             	add    esp,0x1c
c001292a:	68 00 10 00 00       	push   0x1000
c001292f:	6a 00                	push   0x0
c0012931:	50                   	push   eax
c0012932:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012936:	e8 b5 db fe ff       	call   c00004f0 <memset>
c001293b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001293f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012942:	e8 fa f8 ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0012947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001294b:	83 c4 10             	add    esp,0x10
c001294e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012951:	81 ca 07 04 00 00    	or     edx,0x407
c0012957:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c001295a:	e9 4a ff ff ff       	jmp    c00128a9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c001295f:	90                   	nop

c0012960 <VAS::VAS(bool)>:
c0012960:	53                   	push   ebx
c0012961:	83 ec 28             	sub    esp,0x28
c0012964:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012968:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001296c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012970:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012977:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001297b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012982:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012986:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001298a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001298d:	e8 7e c4 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012992:	89 c2                	mov    edx,eax
c0012994:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012998:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001299b:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00129a1:	83 ec 0c             	sub    esp,0xc
c00129a4:	6a 01                	push   0x1
c00129a6:	e8 98 f5 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	89 c2                	mov    edx,eax
c00129b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00129b7:	83 ec 0c             	sub    esp,0xc
c00129ba:	6a 03                	push   0x3
c00129bc:	6a 01                	push   0x1
c00129be:	52                   	push   edx
c00129bf:	50                   	push   eax
c00129c0:	53                   	push   ebx
c00129c1:	e8 50 fe ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00129c6:	83 c4 20             	add    esp,0x20
c00129c9:	89 c2                	mov    edx,eax
c00129cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00129d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00129da:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00129e2:	7f 1d                	jg     c0012a01 <VAS::VAS(bool)+0xa1>
c00129e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00129ef:	c1 e2 02             	shl    edx,0x2
c00129f2:	01 d0                	add    eax,edx
c00129f4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00129fa:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00129ff:	eb d9                	jmp    c00129da <VAS::VAS(bool)+0x7a>
c0012a01:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012a09:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012a11:	7f 59                	jg     c0012a6c <VAS::VAS(bool)+0x10c>
c0012a13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a17:	2d 00 02 00 00       	sub    eax,0x200
c0012a1c:	c1 e0 0c             	shl    eax,0xc
c0012a1f:	89 c2                	mov    edx,eax
c0012a21:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012a26:	89 d1                	mov    ecx,edx
c0012a28:	09 c1                	or     ecx,eax
c0012a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a35:	c1 e2 02             	shl    edx,0x2
c0012a38:	01 d0                	add    eax,edx
c0012a3a:	83 c9 05             	or     ecx,0x5
c0012a3d:	89 ca                	mov    edx,ecx
c0012a3f:	89 10                	mov    DWORD PTR [eax],edx
c0012a41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a45:	2d 40 03 00 00       	sub    eax,0x340
c0012a4a:	83 f8 7f             	cmp    eax,0x7f
c0012a4d:	77 16                	ja     c0012a65 <VAS::VAS(bool)+0x105>
c0012a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a5a:	c1 e2 02             	shl    edx,0x2
c0012a5d:	01 d0                	add    eax,edx
c0012a5f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012a65:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012a6a:	eb 9d                	jmp    c0012a09 <VAS::VAS(bool)+0xa9>
c0012a6c:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012a72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a79:	05 20 0c 00 00       	add    eax,0xc20
c0012a7e:	81 ca 03 40 00 00    	or     edx,0x4003
c0012a84:	89 10                	mov    DWORD PTR [eax],edx
c0012a86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012a8d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012a92:	09 c2                	or     edx,eax
c0012a94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a9b:	05 fc 0f 00 00       	add    eax,0xffc
c0012aa0:	83 ca 03             	or     edx,0x3
c0012aa3:	89 10                	mov    DWORD PTR [eax],edx
c0012aa5:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012aaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ab0:	83 ec 0c             	sub    esp,0xc
c0012ab3:	50                   	push   eax
c0012ab4:	e8 eb 67 ff ff       	call   c00092a4 <Device::getName()>
c0012ab9:	83 c4 10             	add    esp,0x10
c0012abc:	83 ec 08             	sub    esp,0x8
c0012abf:	68 18 27 02 c0       	push   0xc0022718
c0012ac4:	50                   	push   eax
c0012ac5:	e8 b6 dc fe ff       	call   c0000780 <strcmp>
c0012aca:	83 c4 10             	add    esp,0x10
c0012acd:	85 c0                	test   eax,eax
c0012acf:	0f 94 c0             	sete   al
c0012ad2:	0f b6 c0             	movzx  eax,al
c0012ad5:	85 c0                	test   eax,eax
c0012ad7:	74 68                	je     c0012b41 <VAS::VAS(bool)+0x1e1>
c0012ad9:	fa                   	cli    
c0012ada:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012adf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ae5:	05 68 09 00 00       	add    eax,0x968
c0012aea:	83 ec 0c             	sub    esp,0xc
c0012aed:	50                   	push   eax
c0012aee:	e8 bf b7 ff ff       	call   c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012af3:	83 c4 10             	add    esp,0x10
c0012af6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012afb:	89 c3                	mov    ebx,eax
c0012afd:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b08:	05 68 09 00 00       	add    eax,0x968
c0012b0d:	83 ec 0c             	sub    esp,0xc
c0012b10:	50                   	push   eax
c0012b11:	e8 9c b7 ff ff       	call   c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012b16:	83 c4 10             	add    esp,0x10
c0012b19:	83 ec 08             	sub    esp,0x8
c0012b1c:	50                   	push   eax
c0012b1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b21:	e8 fc f6 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b30:	6a 11                	push   0x11
c0012b32:	53                   	push   ebx
c0012b33:	50                   	push   eax
c0012b34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b38:	e8 df fa ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	fb                   	sti    
c0012b41:	90                   	nop
c0012b42:	83 c4 28             	add    esp,0x28
c0012b45:	5b                   	pop    ebx
c0012b46:	c3                   	ret    
c0012b47:	90                   	nop

c0012b48 <VAS::evict(unsigned long)>:
c0012b48:	55                   	push   ebp
c0012b49:	57                   	push   edi
c0012b4a:	56                   	push   esi
c0012b4b:	53                   	push   ebx
c0012b4c:	83 ec 1c             	sub    esp,0x1c
c0012b4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b53:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012b57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b5b:	e8 38 f5 ff ff       	call   c0012098 <Virt::allocateSwapfilePage()>
c0012b60:	89 c7                	mov    edi,eax
c0012b62:	a1 2c 42 02 c0       	mov    eax,ds:0xc002422c
c0012b67:	85 c0                	test   eax,eax
c0012b69:	7e 40                	jle    c0012bab <VAS::evict(unsigned long)+0x63>
c0012b6b:	89 ee                	mov    esi,ebp
c0012b6d:	31 db                	xor    ebx,ebx
c0012b6f:	83 ec 0c             	sub    esp,0xc
c0012b72:	57                   	push   edi
c0012b73:	e8 0a f5 ff ff       	call   c0012082 <Virt::swapIDToSector(unsigned long)>
c0012b78:	31 d2                	xor    edx,edx
c0012b7a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b7d:	81 c6 00 02 00 00    	add    esi,0x200
c0012b83:	6a 01                	push   0x1
c0012b85:	52                   	push   edx
c0012b86:	01 d8                	add    eax,ebx
c0012b88:	83 c3 01             	add    ebx,0x1
c0012b8b:	50                   	push   eax
c0012b8c:	0f be 05 38 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024238
c0012b93:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012b9a:	50                   	push   eax
c0012b9b:	e8 9c 75 ff ff       	call   c000a13c <LogicalDisk::write(unsigned long long, int, void*)>
c0012ba0:	83 c4 20             	add    esp,0x20
c0012ba3:	39 1d 2c 42 02 c0    	cmp    DWORD PTR ds:0xc002422c,ebx
c0012ba9:	7f c4                	jg     c0012b6f <VAS::evict(unsigned long)+0x27>
c0012bab:	c1 e7 0c             	shl    edi,0xc
c0012bae:	83 ec 08             	sub    esp,0x8
c0012bb1:	55                   	push   ebp
c0012bb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bb6:	50                   	push   eax
c0012bb7:	e8 66 f6 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bbe:	89 d3                	mov    ebx,edx
c0012bc0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012bc6:	09 d7                	or     edi,edx
c0012bc8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012bce:	89 38                	mov    DWORD PTR [eax],edi
c0012bd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012bd3:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012bd9:	83 c2 01             	add    edx,0x1
c0012bdc:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012be2:	e8 c0 c1 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c0012be7:	0f 20 d8             	mov    eax,cr3
c0012bea:	0f 22 d8             	mov    cr3,eax
c0012bed:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012bf3:	51                   	push   ecx
c0012bf4:	55                   	push   ebp
c0012bf5:	53                   	push   ebx
c0012bf6:	68 6c 25 02 c0       	push   0xc002256c
c0012bfb:	e8 4e 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c00:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012c05:	c7 44 24 50 26 27 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022726
c0012c0d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012c11:	8d 50 01             	lea    edx,[eax+0x1]
c0012c14:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012c1a:	83 c4 3c             	add    esp,0x3c
c0012c1d:	5b                   	pop    ebx
c0012c1e:	5e                   	pop    esi
c0012c1f:	5f                   	pop    edi
c0012c20:	5d                   	pop    ebp
c0012c21:	e9 28 43 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012c26 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012c26:	55                   	push   ebp
c0012c27:	57                   	push   edi
c0012c28:	56                   	push   esi
c0012c29:	53                   	push   ebx
c0012c2a:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012c30:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0012c37:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c3d:	77 7c                	ja     c0012cbb <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012c3f:	83 ec 08             	sub    esp,0x8
c0012c42:	53                   	push   ebx
c0012c43:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012c49:	68 49 27 02 c0       	push   0xc0022749
c0012c4e:	e8 fb 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c53:	59                   	pop    ecx
c0012c54:	5e                   	pop    esi
c0012c55:	53                   	push   ebx
c0012c56:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0012c5d:	57                   	push   edi
c0012c5e:	e8 bf f5 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	85 c0                	test   eax,eax
c0012c68:	89 c5                	mov    ebp,eax
c0012c6a:	0f 95 c0             	setne  al
c0012c6d:	85 db                	test   ebx,ebx
c0012c6f:	0f 95 c2             	setne  dl
c0012c72:	21 d0                	and    eax,edx
c0012c74:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012c78:	a8 01                	test   al,0x1
c0012c7a:	75 0f                	jne    c0012c8b <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0012c7c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012c80:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012c86:	5b                   	pop    ebx
c0012c87:	5e                   	pop    esi
c0012c88:	5f                   	pop    edi
c0012c89:	5d                   	pop    ebp
c0012c8a:	c3                   	ret    
c0012c8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c8e:	f6 c4 02             	test   ah,0x2
c0012c91:	75 3d                	jne    c0012cd0 <VAS::tryLoadBackOffDisk(unsigned long)+0xaa>
c0012c93:	89 c2                	mov    edx,eax
c0012c95:	81 e2 01 04 00 00    	and    edx,0x401
c0012c9b:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012ca1:	0f 84 82 00 00 00    	je     c0012d29 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c0012ca7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012cac:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012cb0:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012cb6:	5b                   	pop    ebx
c0012cb7:	5e                   	pop    esi
c0012cb8:	5f                   	pop    edi
c0012cb9:	5d                   	pop    ebp
c0012cba:	c3                   	ret    
c0012cbb:	83 ec 0c             	sub    esp,0xc
c0012cbe:	68 37 27 02 c0       	push   0xc0022737
c0012cc3:	e8 4e bf ff ff       	call   c000ec16 <KePanic(char const*)>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	e9 6f ff ff ff       	jmp    c0012c3f <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0012cd0:	83 ec 0c             	sub    esp,0xc
c0012cd3:	68 9c 25 02 c0       	push   0xc002259c
c0012cd8:	e8 71 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cdd:	e8 2e c1 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012ce2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012ce5:	83 ca 01             	or     edx,0x1
c0012ce8:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012ceb:	0f 20 da             	mov    edx,cr3
c0012cee:	0f 22 da             	mov    cr3,edx
c0012cf1:	ba 00 10 00 00       	mov    edx,0x1000
c0012cf6:	89 de                	mov    esi,ebx
c0012cf8:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012cfc:	89 d1                	mov    ecx,edx
c0012cfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d00:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012d03:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012d09:	09 c8                	or     eax,ecx
c0012d0b:	83 c8 02             	or     eax,0x2
c0012d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012d11:	0f 20 d8             	mov    eax,cr3
c0012d14:	0f 22 d8             	mov    cr3,eax
c0012d17:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012d1b:	89 df                	mov    edi,ebx
c0012d1d:	89 d1                	mov    ecx,edx
c0012d1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	e9 53 ff ff ff       	jmp    c0012c7c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012d29:	c1 e8 0c             	shr    eax,0xc
c0012d2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d30:	e8 db c0 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012d35:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012d38:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012d3e:	09 c2                	or     edx,eax
c0012d40:	81 ca 01 08 00 00    	or     edx,0x801
c0012d46:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012d49:	a1 2c 42 02 c0       	mov    eax,ds:0xc002422c
c0012d4e:	85 c0                	test   eax,eax
c0012d50:	7e 44                	jle    c0012d96 <VAS::tryLoadBackOffDisk(unsigned long)+0x170>
c0012d52:	89 df                	mov    edi,ebx
c0012d54:	31 f6                	xor    esi,esi
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0012d5d:	55                   	push   ebp
c0012d5e:	e8 1f f3 ff ff       	call   c0012082 <Virt::swapIDToSector(unsigned long)>
c0012d63:	31 d2                	xor    edx,edx
c0012d65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d68:	81 c7 00 02 00 00    	add    edi,0x200
c0012d6e:	6a 01                	push   0x1
c0012d70:	52                   	push   edx
c0012d71:	01 f0                	add    eax,esi
c0012d73:	83 c6 01             	add    esi,0x1
c0012d76:	50                   	push   eax
c0012d77:	0f be 05 38 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024238
c0012d7e:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012d85:	50                   	push   eax
c0012d86:	e8 45 73 ff ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0012d8b:	83 c4 20             	add    esp,0x20
c0012d8e:	39 35 2c 42 02 c0    	cmp    DWORD PTR ds:0xc002422c,esi
c0012d94:	7f c0                	jg     c0012d56 <VAS::tryLoadBackOffDisk(unsigned long)+0x130>
c0012d96:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012d9b:	83 ec 04             	sub    esp,0x4
c0012d9e:	83 e8 01             	sub    eax,0x1
c0012da1:	50                   	push   eax
c0012da2:	53                   	push   ebx
c0012da3:	68 5c 27 02 c0       	push   0xc002275c
c0012da8:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012dad:	e8 9c 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012db2:	58                   	pop    eax
c0012db3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012db7:	52                   	push   edx
c0012db8:	e8 a2 f2 ff ff       	call   c001205f <Virt::freeSwapfilePage(unsigned long)>
c0012dbd:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0012dc5:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0012dcb:	83 c4 10             	add    esp,0x10
c0012dce:	85 c9                	test   ecx,ecx
c0012dd0:	75 01                	jne    c0012dd3 <VAS::tryLoadBackOffDisk(unsigned long)+0x1ad>
c0012dd2:	fb                   	sti    
c0012dd3:	0f 20 d8             	mov    eax,cr3
c0012dd6:	0f 22 d8             	mov    cr3,eax
c0012dd9:	e9 9e fe ff ff       	jmp    c0012c7c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c0012dde <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012dde:	55                   	push   ebp
c0012ddf:	57                   	push   edi
c0012de0:	56                   	push   esi
c0012de1:	53                   	push   ebx
c0012de2:	83 ec 28             	sub    esp,0x28
c0012de5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012de9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012ded:	50                   	push   eax
c0012dee:	e8 50 f1 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c0012df3:	83 c4 0c             	add    esp,0xc
c0012df6:	6a 07                	push   0x7
c0012df8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012dfc:	52                   	push   edx
c0012dfd:	89 c5                	mov    ebp,eax
c0012dff:	53                   	push   ebx
c0012e00:	e8 1f f9 ff ff       	call   c0012724 <VAS::allocatePages(int, int)>
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012e0c:	89 c7                	mov    edi,eax
c0012e0e:	85 c9                	test   ecx,ecx
c0012e10:	74 2f                	je     c0012e41 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012e12:	31 f6                	xor    esi,esi
c0012e14:	e8 f7 bf ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012e19:	83 c6 01             	add    esi,0x1
c0012e1c:	6a 03                	push   0x3
c0012e1e:	55                   	push   ebp
c0012e1f:	50                   	push   eax
c0012e20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e24:	53                   	push   ebx
c0012e25:	e8 f2 f7 ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e2a:	6a 07                	push   0x7
c0012e2c:	57                   	push   edi
c0012e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012e31:	50                   	push   eax
c0012e32:	53                   	push   ebx
c0012e33:	e8 e4 f7 ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e38:	83 c4 20             	add    esp,0x20
c0012e3b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0012e3f:	75 d3                	jne    c0012e14 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0012e41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e45:	89 28                	mov    DWORD PTR [eax],ebp
c0012e47:	83 c4 1c             	add    esp,0x1c
c0012e4a:	89 f8                	mov    eax,edi
c0012e4c:	5b                   	pop    ebx
c0012e4d:	5e                   	pop    esi
c0012e4e:	5f                   	pop    edi
c0012e4f:	5d                   	pop    ebp
c0012e50:	c3                   	ret    
c0012e51:	90                   	nop

c0012e52 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0012e52:	53                   	push   ebx
c0012e53:	83 ec 14             	sub    esp,0x14
c0012e56:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012e5a:	68 bc 25 02 c0       	push   0xc00225bc
c0012e5f:	e8 ea 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e64:	c7 04 24 1c 26 02 c0 	mov    DWORD PTR [esp],0xc002261c
c0012e6b:	e8 de 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e70:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012e74:	83 c4 18             	add    esp,0x18
c0012e77:	5b                   	pop    ebx
c0012e78:	e9 c4 f3 ff ff       	jmp    c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0012e7d:	90                   	nop

c0012e7e <VAS::scanForEviction()>:
c0012e7e:	57                   	push   edi
c0012e7f:	56                   	push   esi
c0012e80:	31 f6                	xor    esi,esi
c0012e82:	53                   	push   ebx
c0012e83:	83 ec 10             	sub    esp,0x10
c0012e86:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012e8a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012e8d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012e93:	75 0e                	jne    c0012ea3 <VAS::scanForEviction()+0x25>
c0012e95:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012e98:	89 da                	mov    edx,ebx
c0012e9a:	c1 ea 16             	shr    edx,0x16
c0012e9d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012ea1:	74 57                	je     c0012efa <VAS::scanForEviction()+0x7c>
c0012ea3:	53                   	push   ebx
c0012ea4:	57                   	push   edi
c0012ea5:	e8 78 f3 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012eaa:	5a                   	pop    edx
c0012eab:	59                   	pop    ecx
c0012eac:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eae:	89 d1                	mov    ecx,edx
c0012eb0:	c1 e9 0c             	shr    ecx,0xc
c0012eb3:	74 10                	je     c0012ec5 <VAS::scanForEviction()+0x47>
c0012eb5:	89 d1                	mov    ecx,edx
c0012eb7:	81 e1 01 08 00 00    	and    ecx,0x801
c0012ebd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012ec3:	74 40                	je     c0012f05 <VAS::scanForEviction()+0x87>
c0012ec5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012ecb:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012ed1:	76 2d                	jbe    c0012f00 <VAS::scanForEviction()+0x82>
c0012ed3:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0012eda:	83 c6 01             	add    esi,0x1
c0012edd:	83 fe 03             	cmp    esi,0x3
c0012ee0:	74 32                	je     c0012f14 <VAS::scanForEviction()+0x96>
c0012ee2:	31 db                	xor    ebx,ebx
c0012ee4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012eea:	75 b7                	jne    c0012ea3 <VAS::scanForEviction()+0x25>
c0012eec:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012eef:	89 da                	mov    edx,ebx
c0012ef1:	c1 ea 16             	shr    edx,0x16
c0012ef4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012ef8:	75 a9                	jne    c0012ea3 <VAS::scanForEviction()+0x25>
c0012efa:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012f00:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0012f03:	eb 88                	jmp    c0012e8d <VAS::scanForEviction()+0xf>
c0012f05:	f6 c2 20             	test   dl,0x20
c0012f08:	74 13                	je     c0012f1d <VAS::scanForEviction()+0x9f>
c0012f0a:	83 e2 df             	and    edx,0xffffffdf
c0012f0d:	89 10                	mov    DWORD PTR [eax],edx
c0012f0f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012f12:	eb b1                	jmp    c0012ec5 <VAS::scanForEviction()+0x47>
c0012f14:	83 c4 10             	add    esp,0x10
c0012f17:	31 c0                	xor    eax,eax
c0012f19:	5b                   	pop    ebx
c0012f1a:	5e                   	pop    esi
c0012f1b:	5f                   	pop    edi
c0012f1c:	c3                   	ret    
c0012f1d:	89 d0                	mov    eax,edx
c0012f1f:	83 ec 08             	sub    esp,0x8
c0012f22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f2b:	53                   	push   ebx
c0012f2c:	68 71 27 02 c0       	push   0xc0022771
c0012f31:	e8 18 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f36:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0012f39:	58                   	pop    eax
c0012f3a:	5a                   	pop    edx
c0012f3b:	51                   	push   ecx
c0012f3c:	57                   	push   edi
c0012f3d:	e8 06 fc ff ff       	call   c0012b48 <VAS::evict(unsigned long)>
c0012f42:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012f45:	5b                   	pop    ebx
c0012f46:	5e                   	pop    esi
c0012f47:	50                   	push   eax
c0012f48:	68 85 27 02 c0       	push   0xc0022785
c0012f4d:	e8 fc 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f52:	58                   	pop    eax
c0012f53:	5a                   	pop    edx
c0012f54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f58:	50                   	push   eax
c0012f59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f5d:	68 98 27 02 c0       	push   0xc0022798
c0012f62:	e8 e7 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f67:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	81 c1 00 10 00 00    	add    ecx,0x1000
c0012f73:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0012f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	5b                   	pop    ebx
c0012f7e:	5e                   	pop    esi
c0012f7f:	5f                   	pop    edi
c0012f80:	c3                   	ret    

c0012f81 <mapVASFirstTime>:
c0012f81:	55                   	push   ebp
c0012f82:	57                   	push   edi
c0012f83:	56                   	push   esi
c0012f84:	53                   	push   ebx
c0012f85:	83 ec 0c             	sub    esp,0xc
c0012f88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f8d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012f90:	83 fa 01             	cmp    edx,0x1
c0012f93:	0f 84 cb 00 00 00    	je     c0013064 <mapVASFirstTime+0xe3>
c0012f99:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012f9c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012fa1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012fa6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0012fa9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0012faf:	c1 e5 15             	shl    ebp,0x15
c0012fb2:	29 eb                	sub    ebx,ebp
c0012fb4:	29 ef                	sub    edi,ebp
c0012fb6:	e8 55 be ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012fbb:	83 ec 0c             	sub    esp,0xc
c0012fbe:	68 03 04 00 00       	push   0x403
c0012fc3:	6a 01                	push   0x1
c0012fc5:	53                   	push   ebx
c0012fc6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012fcc:	50                   	push   eax
c0012fcd:	56                   	push   esi
c0012fce:	e8 43 f8 ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012fd3:	83 c4 20             	add    esp,0x20
c0012fd6:	39 fb                	cmp    ebx,edi
c0012fd8:	75 dc                	jne    c0012fb6 <mapVASFirstTime+0x35>
c0012fda:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012fdf:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012fe4:	29 eb                	sub    ebx,ebp
c0012fe6:	29 ef                	sub    edi,ebp
c0012fe8:	e8 23 be ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012fed:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0012ff1:	83 fa 01             	cmp    edx,0x1
c0012ff4:	19 d2                	sbb    edx,edx
c0012ff6:	83 ec 0c             	sub    esp,0xc
c0012ff9:	83 e2 04             	and    edx,0x4
c0012ffc:	81 c2 03 04 00 00    	add    edx,0x403
c0013002:	52                   	push   edx
c0013003:	6a 01                	push   0x1
c0013005:	53                   	push   ebx
c0013006:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001300c:	50                   	push   eax
c001300d:	56                   	push   esi
c001300e:	e8 03 f8 ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013013:	83 c4 20             	add    esp,0x20
c0013016:	39 df                	cmp    edi,ebx
c0013018:	75 ce                	jne    c0012fe8 <mapVASFirstTime+0x67>
c001301a:	83 ec 0c             	sub    esp,0xc
c001301d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c0013022:	6a 04                	push   0x4
c0013024:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c001302a:	6a ff                	push   0xffffffff
c001302c:	c1 eb 0c             	shr    ebx,0xc
c001302f:	53                   	push   ebx
c0013030:	68 00 50 02 c0       	push   0xc0025000
c0013035:	56                   	push   esi
c0013036:	e8 81 f3 ff ff       	call   c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001303b:	83 c4 14             	add    esp,0x14
c001303e:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c0013043:	6a 04                	push   0x4
c0013045:	6a ff                	push   0xffffffff
c0013047:	53                   	push   ebx
c0013048:	68 00 50 02 c0       	push   0xc0025000
c001304d:	50                   	push   eax
c001304e:	e8 69 f3 ff ff       	call   c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013053:	0f 20 d8             	mov    eax,cr3
c0013056:	0f 22 d8             	mov    cr3,eax
c0013059:	83 c4 20             	add    esp,0x20
c001305c:	83 c4 0c             	add    esp,0xc
c001305f:	5b                   	pop    ebx
c0013060:	5e                   	pop    esi
c0013061:	5f                   	pop    edi
c0013062:	5d                   	pop    ebp
c0013063:	c3                   	ret    
c0013064:	83 ec 0c             	sub    esp,0xc
c0013067:	68 a5 27 02 c0       	push   0xc00227a5
c001306c:	e8 dd 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	83 c4 0c             	add    esp,0xc
c0013077:	5b                   	pop    ebx
c0013078:	5e                   	pop    esi
c0013079:	5f                   	pop    edi
c001307a:	5d                   	pop    ebp
c001307b:	c3                   	ret    

c001307c <SysEject(regs*)>:
c001307c:	83 ec 0c             	sub    esp,0xc
c001307f:	83 ca ff             	or     edx,0xffffffff
c0013082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013086:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013089:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001308e:	83 e9 41             	sub    ecx,0x41
c0013091:	83 f9 19             	cmp    ecx,0x19
c0013094:	77 18                	ja     c00130ae <SysEject(regs*)+0x32>
c0013096:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001309d:	85 c9                	test   ecx,ecx
c001309f:	74 0d                	je     c00130ae <SysEject(regs*)+0x32>
c00130a1:	83 ec 0c             	sub    esp,0xc
c00130a4:	51                   	push   ecx
c00130a5:	e8 bc 6f ff ff       	call   c000a066 <LogicalDisk::eject()>
c00130aa:	83 c4 10             	add    esp,0x10
c00130ad:	99                   	cdq    
c00130ae:	83 c4 0c             	add    esp,0xc
c00130b1:	c3                   	ret    

c00130b2 <SysExit(regs*)>:
c00130b2:	83 ec 18             	sub    esp,0x18
c00130b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130b9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00130bc:	e8 bb 2a 00 00       	call   c0015b7c <terminateTask(int)>
c00130c1:	83 c8 ff             	or     eax,0xffffffff
c00130c4:	83 c4 1c             	add    esp,0x1c
c00130c7:	89 c2                	mov    edx,eax
c00130c9:	c3                   	ret    

c00130ca <SysGetCwd(regs*)>:
c00130ca:	83 ec 10             	sub    esp,0x10
c00130cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130d1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00130d4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00130d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130dc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00130df:	e8 c8 4c ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c00130e4:	83 c4 1c             	add    esp,0x1c
c00130e7:	99                   	cdq    
c00130e8:	c3                   	ret    

c00130e9 <SysGetPID(regs*)>:
c00130e9:	83 ec 14             	sub    esp,0x14
c00130ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130f4:	ff 30                	push   DWORD PTR [eax]
c00130f6:	68 be 27 02 c0       	push   0xc00227be
c00130fb:	e8 4e 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013100:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013105:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013108:	8b 00                	mov    eax,DWORD PTR [eax]
c001310a:	83 c4 1c             	add    esp,0x1c
c001310d:	99                   	cdq    
c001310e:	c3                   	ret    

c001310f <SysGetRAMData(regs*)>:
c001310f:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c0013119:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c001311f:	99                   	cdq    
c0013120:	f7 f9                	idiv   ecx
c0013122:	c1 e0 18             	shl    eax,0x18
c0013125:	09 c8                	or     eax,ecx
c0013127:	99                   	cdq    
c0013128:	c3                   	ret    

c0013129 <SysGetVGAPtr(regs*)>:
c0013129:	55                   	push   ebp
c001312a:	57                   	push   edi
c001312b:	56                   	push   esi
c001312c:	53                   	push   ebx
c001312d:	83 ec 0c             	sub    esp,0xc
c0013130:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013134:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013137:	83 f8 ff             	cmp    eax,0xffffffff
c001313a:	74 1b                	je     c0013157 <SysGetVGAPtr(regs*)+0x2e>
c001313c:	83 ec 0c             	sub    esp,0xc
c001313f:	50                   	push   eax
c0013140:	e8 eb 24 00 00       	call   c0015630 <Thr::processFromPID(int)>
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	31 d2                	xor    edx,edx
c001314a:	89 c1                	mov    ecx,eax
c001314c:	b8 01 00 00 00       	mov    eax,0x1
c0013151:	85 c9                	test   ecx,ecx
c0013153:	75 0a                	jne    c001315f <SysGetVGAPtr(regs*)+0x36>
c0013155:	eb 61                	jmp    c00131b8 <SysGetVGAPtr(regs*)+0x8f>
c0013157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001315c:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001315f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013163:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013169:	74 0c                	je     c0013177 <SysGetVGAPtr(regs*)+0x4e>
c001316b:	83 ec 0c             	sub    esp,0xc
c001316e:	55                   	push   ebp
c001316f:	e8 c5 de ff ff       	call   c0011039 <setActiveTerminal(VgaText*)>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001317a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001317f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013182:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013184:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013187:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001318a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013190:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013193:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013196:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001319c:	50                   	push   eax
c001319d:	50                   	push   eax
c001319e:	68 cd 27 02 c0       	push   0xc00227cd
c00131a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131a6:	05 a8 0f 00 00       	add    eax,0xfa8
c00131ab:	50                   	push   eax
c00131ac:	e8 9f d4 fe ff       	call   c0000650 <strcpy>
c00131b1:	83 c4 10             	add    esp,0x10
c00131b4:	31 c0                	xor    eax,eax
c00131b6:	31 d2                	xor    edx,edx
c00131b8:	83 c4 0c             	add    esp,0xc
c00131bb:	5b                   	pop    ebx
c00131bc:	5e                   	pop    esi
c00131bd:	5f                   	pop    edi
c00131be:	5d                   	pop    ebp
c00131bf:	c3                   	ret    

c00131c0 <SysKill(regs*)>:
c00131c0:	53                   	push   ebx
c00131c1:	83 ec 08             	sub    esp,0x8
c00131c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131c8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00131cc:	75 16                	jne    c00131e4 <SysKill(regs*)+0x24>
c00131ce:	83 ec 0c             	sub    esp,0xc
c00131d1:	68 d7 27 02 c0       	push   0xc00227d7
c00131d6:	e8 3b ba ff ff       	call   c000ec16 <KePanic(char const*)>
c00131db:	83 c4 10             	add    esp,0x10
c00131de:	e9 89 00 00 00       	jmp    c001326c <SysKill(regs*)+0xac>
c00131e3:	90                   	nop
c00131e4:	83 ec 0c             	sub    esp,0xc
c00131e7:	68 cc c6 02 c0       	push   0xc002c6cc
c00131ec:	e8 67 cc 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00131f1:	8d 76 00             	lea    esi,[esi+0x0]
c00131f4:	83 c4 10             	add    esp,0x10
c00131f7:	85 c0                	test   eax,eax
c00131f9:	74 19                	je     c0013214 <SysKill(regs*)+0x54>
c00131fb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00131fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013201:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013203:	74 33                	je     c0013238 <SysKill(regs*)+0x78>
c0013205:	52                   	push   edx
c0013206:	52                   	push   edx
c0013207:	50                   	push   eax
c0013208:	68 cc c6 02 c0       	push   0xc002c6cc
c001320d:	e8 52 d1 00 00       	call   c0020364 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013212:	eb e0                	jmp    c00131f4 <SysKill(regs*)+0x34>
c0013214:	83 ec 0c             	sub    esp,0xc
c0013217:	68 c0 c6 02 c0       	push   0xc002c6c0
c001321c:	e8 37 cc 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013221:	8d 76 00             	lea    esi,[esi+0x0]
c0013224:	83 c4 10             	add    esp,0x10
c0013227:	85 c0                	test   eax,eax
c0013229:	74 41                	je     c001326c <SysKill(regs*)+0xac>
c001322b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001322e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013231:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013233:	75 27                	jne    c001325c <SysKill(regs*)+0x9c>
c0013235:	8d 76 00             	lea    esi,[esi+0x0]
c0013238:	51                   	push   ecx
c0013239:	51                   	push   ecx
c001323a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001323d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013242:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013245:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001324b:	e8 e8 ca ff ff       	call   c000fd38 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013250:	83 c4 10             	add    esp,0x10
c0013253:	31 c0                	xor    eax,eax
c0013255:	31 d2                	xor    edx,edx
c0013257:	eb 1b                	jmp    c0013274 <SysKill(regs*)+0xb4>
c0013259:	8d 76 00             	lea    esi,[esi+0x0]
c001325c:	52                   	push   edx
c001325d:	52                   	push   edx
c001325e:	50                   	push   eax
c001325f:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013264:	e8 fb d0 00 00       	call   c0020364 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013269:	eb b9                	jmp    c0013224 <SysKill(regs*)+0x64>
c001326b:	90                   	nop
c001326c:	83 c8 ff             	or     eax,0xffffffff
c001326f:	89 c2                	mov    edx,eax
c0013271:	8d 76 00             	lea    esi,[esi+0x0]
c0013274:	83 c4 08             	add    esp,0x8
c0013277:	5b                   	pop    ebx
c0013278:	c3                   	ret    

c0013279 <SysLoadDLL(regs*)>:
c0013279:	56                   	push   esi
c001327a:	31 d2                	xor    edx,edx
c001327c:	53                   	push   ebx
c001327d:	b8 01 00 00 00       	mov    eax,0x1
c0013282:	51                   	push   ecx
c0013283:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013287:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001328b:	0f 84 8c 00 00 00    	je     c001331d <SysLoadDLL(regs*)+0xa4>
c0013291:	83 ec 0c             	sub    esp,0xc
c0013294:	68 14 01 00 00       	push   0x114
c0013299:	e8 32 b6 ff ff       	call   c000e8d0 <malloc>
c001329e:	83 c4 0c             	add    esp,0xc
c00132a1:	89 c3                	mov    ebx,eax
c00132a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132a8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00132ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00132ae:	53                   	push   ebx
c00132af:	e8 58 4e ff ff       	call   c000810c <File::File(char const*, Process*)>
c00132b4:	83 c4 10             	add    esp,0x10
c00132b7:	31 d2                	xor    edx,edx
c00132b9:	85 db                	test   ebx,ebx
c00132bb:	b8 02 00 00 00       	mov    eax,0x2
c00132c0:	74 5b                	je     c001331d <SysLoadDLL(regs*)+0xa4>
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	53                   	push   ebx
c00132c6:	e8 23 51 ff ff       	call   c00083ee <File::exists()>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	84 c0                	test   al,al
c00132d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132d2:	75 11                	jne    c00132e5 <SysLoadDLL(regs*)+0x6c>
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	53                   	push   ebx
c00132d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132db:	83 c4 10             	add    esp,0x10
c00132de:	b8 03 00 00 00       	mov    eax,0x3
c00132e3:	eb 36                	jmp    c001331b <SysLoadDLL(regs*)+0xa2>
c00132e5:	83 ec 0c             	sub    esp,0xc
c00132e8:	53                   	push   ebx
c00132e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132ec:	58                   	pop    eax
c00132ed:	5a                   	pop    edx
c00132ee:	6a 00                	push   0x0
c00132f0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00132f3:	e8 f6 15 00 00       	call   c00148ee <Thr::loadDLL(char const*, bool)>
c00132f8:	83 c4 10             	add    esp,0x10
c00132fb:	31 d2                	xor    edx,edx
c00132fd:	89 c1                	mov    ecx,eax
c00132ff:	b8 04 00 00 00       	mov    eax,0x4
c0013304:	85 c9                	test   ecx,ecx
c0013306:	74 15                	je     c001331d <SysLoadDLL(regs*)+0xa4>
c0013308:	53                   	push   ebx
c0013309:	53                   	push   ebx
c001330a:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0013310:	51                   	push   ecx
c0013311:	e8 39 18 00 00       	call   c0014b4f <Thr::executeDLL(unsigned long, void*)>
c0013316:	83 c4 10             	add    esp,0x10
c0013319:	31 c0                	xor    eax,eax
c001331b:	31 d2                	xor    edx,edx
c001331d:	59                   	pop    ecx
c001331e:	5b                   	pop    ebx
c001331f:	5e                   	pop    esi
c0013320:	c3                   	ret    

c0013321 <SysRead(regs*)>:
c0013321:	57                   	push   edi
c0013322:	56                   	push   esi
c0013323:	53                   	push   ebx
c0013324:	83 ec 10             	sub    esp,0x10
c0013327:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001332b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001332e:	83 f8 02             	cmp    eax,0x2
c0013331:	77 10                	ja     c0013343 <SysRead(regs*)+0x22>
c0013333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013338:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001333b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013341:	eb 0e                	jmp    c0013351 <SysRead(regs*)+0x30>
c0013343:	83 ec 0c             	sub    esp,0xc
c0013346:	50                   	push   eax
c0013347:	e8 9d ea ff ff       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c001334c:	83 c4 10             	add    esp,0x10
c001334f:	89 c1                	mov    ecx,eax
c0013351:	83 c8 ff             	or     eax,0xffffffff
c0013354:	85 c9                	test   ecx,ecx
c0013356:	89 c2                	mov    edx,eax
c0013358:	74 28                	je     c0013382 <SysRead(regs*)+0x61>
c001335a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013362:	83 ec 0c             	sub    esp,0xc
c0013365:	31 ff                	xor    edi,edi
c0013367:	8d 54 24 18          	lea    edx,[esp+0x18]
c001336b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001336d:	52                   	push   edx
c001336e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013371:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013374:	57                   	push   edi
c0013375:	56                   	push   esi
c0013376:	51                   	push   ecx
c0013377:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001337a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001337e:	83 c4 20             	add    esp,0x20
c0013381:	99                   	cdq    
c0013382:	83 c4 10             	add    esp,0x10
c0013385:	5b                   	pop    ebx
c0013386:	5e                   	pop    esi
c0013387:	5f                   	pop    edi
c0013388:	c3                   	ret    

c0013389 <SysRegisterSignal(regs*)>:
c0013389:	83 ec 18             	sub    esp,0x18
c001338c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013390:	6a 00                	push   0x0
c0013392:	6a 00                	push   0x0
c0013394:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013397:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001339a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001339f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133a2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00133a8:	e8 55 c9 ff ff       	call   c000fd02 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00133ad:	83 c4 2c             	add    esp,0x2c
c00133b0:	99                   	cdq    
c00133b1:	c3                   	ret    

c00133b2 <SysRegistryGetTypeFromPath(regs*)>:
c00133b2:	53                   	push   ebx
c00133b3:	81 ec 40 01 00 00    	sub    esp,0x140
c00133b9:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00133c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133c3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133c6:	e8 e0 9e ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	85 c0                	test   eax,eax
c00133d0:	89 c1                	mov    ecx,eax
c00133d2:	74 15                	je     c00133e9 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00133d4:	50                   	push   eax
c00133d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00133d9:	50                   	push   eax
c00133da:	51                   	push   ecx
c00133db:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133de:	e8 ad 9a ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133e3:	83 c4 10             	add    esp,0x10
c00133e6:	99                   	cdq    
c00133e7:	eb 05                	jmp    c00133ee <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00133e9:	83 c8 ff             	or     eax,0xffffffff
c00133ec:	89 c2                	mov    edx,eax
c00133ee:	81 c4 38 01 00 00    	add    esp,0x138
c00133f4:	5b                   	pop    ebx
c00133f5:	c3                   	ret    

c00133f6 <SysRegistryReadExtent(regs*)>:
c00133f6:	83 ec 1c             	sub    esp,0x1c
c00133f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00133fd:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013400:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013403:	85 c0                	test   eax,eax
c0013405:	79 1f                	jns    c0013426 <SysRegistryReadExtent(regs*)+0x30>
c0013407:	52                   	push   edx
c0013408:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001340d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013411:	52                   	push   edx
c0013412:	50                   	push   eax
c0013413:	51                   	push   ecx
c0013414:	e8 69 99 ff ff       	call   c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013419:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001341d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013421:	83 c4 10             	add    esp,0x10
c0013424:	eb 14                	jmp    c001343a <SysRegistryReadExtent(regs*)+0x44>
c0013426:	83 ec 04             	sub    esp,0x4
c0013429:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001342c:	50                   	push   eax
c001342d:	51                   	push   ecx
c001342e:	e8 ed 93 ff ff       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c0013433:	83 c4 10             	add    esp,0x10
c0013436:	31 c0                	xor    eax,eax
c0013438:	31 d2                	xor    edx,edx
c001343a:	83 c4 1c             	add    esp,0x1c
c001343d:	c3                   	ret    

c001343e <SysRegistryPathToExtentLookup(regs*)>:
c001343e:	83 ec 14             	sub    esp,0x14
c0013441:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013445:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013448:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001344b:	e8 5b 9e ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013450:	83 c4 1c             	add    esp,0x1c
c0013453:	99                   	cdq    
c0013454:	c3                   	ret    

c0013455 <SysRegistryEnterDirectory(regs*)>:
c0013455:	83 ec 14             	sub    esp,0x14
c0013458:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001345c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001345f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013462:	e8 30 94 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c0013467:	83 c4 1c             	add    esp,0x1c
c001346a:	99                   	cdq    
c001346b:	c3                   	ret    

c001346c <SysRegistryGetNext(regs*)>:
c001346c:	83 ec 14             	sub    esp,0x14
c001346f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013473:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013476:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013479:	e8 58 94 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c001347e:	83 c4 1c             	add    esp,0x1c
c0013481:	99                   	cdq    
c0013482:	c3                   	ret    

c0013483 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013483:	57                   	push   edi
c0013484:	56                   	push   esi
c0013485:	53                   	push   ebx
c0013486:	81 ec 34 01 00 00    	sub    esp,0x134
c001348c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013493:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013497:	57                   	push   edi
c0013498:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001349b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001349e:	e8 ed 99 ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134a3:	89 c3                	mov    ebx,eax
c00134a5:	58                   	pop    eax
c00134a6:	5a                   	pop    edx
c00134a7:	57                   	push   edi
c00134a8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00134ab:	e8 a0 d1 fe ff       	call   c0000650 <strcpy>
c00134b0:	81 c4 40 01 00 00    	add    esp,0x140
c00134b6:	89 d8                	mov    eax,ebx
c00134b8:	5b                   	pop    ebx
c00134b9:	99                   	cdq    
c00134ba:	5e                   	pop    esi
c00134bb:	5f                   	pop    edi
c00134bc:	c3                   	ret    

c00134bd <SysRegistryOpen(regs*)>:
c00134bd:	83 ec 18             	sub    esp,0x18
c00134c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00134c7:	e8 e4 91 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c00134cc:	83 c4 1c             	add    esp,0x1c
c00134cf:	99                   	cdq    
c00134d0:	c3                   	ret    

c00134d1 <SysRegistryClose(regs*)>:
c00134d1:	83 ec 18             	sub    esp,0x18
c00134d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134db:	e8 ee 92 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c00134e0:	31 c0                	xor    eax,eax
c00134e2:	31 d2                	xor    edx,edx
c00134e4:	83 c4 1c             	add    esp,0x1c
c00134e7:	c3                   	ret    

c00134e8 <SysRegistryEasyReadString(regs*)>:
c00134e8:	57                   	push   edi
c00134e9:	56                   	push   esi
c00134ea:	53                   	push   ebx
c00134eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134ef:	83 ec 0c             	sub    esp,0xc
c00134f2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00134f5:	e8 b6 91 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c00134fa:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00134fd:	5a                   	pop    edx
c00134fe:	59                   	pop    ecx
c00134ff:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013502:	89 c3                	mov    ebx,eax
c0013504:	50                   	push   eax
c0013505:	e8 a1 9d ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001350a:	83 c4 10             	add    esp,0x10
c001350d:	89 c1                	mov    ecx,eax
c001350f:	b8 01 00 00 00       	mov    eax,0x1
c0013514:	85 c9                	test   ecx,ecx
c0013516:	7e 16                	jle    c001352e <SysRegistryEasyReadString(regs*)+0x46>
c0013518:	50                   	push   eax
c0013519:	57                   	push   edi
c001351a:	51                   	push   ecx
c001351b:	53                   	push   ebx
c001351c:	e8 ff 92 ff ff       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c0013521:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013524:	e8 a5 92 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c0013529:	83 c4 10             	add    esp,0x10
c001352c:	31 c0                	xor    eax,eax
c001352e:	5b                   	pop    ebx
c001352f:	31 d2                	xor    edx,edx
c0013531:	5e                   	pop    esi
c0013532:	5f                   	pop    edi
c0013533:	c3                   	ret    

c0013534 <SysRegistryEasyReadInteger(regs*)>:
c0013534:	56                   	push   esi
c0013535:	53                   	push   ebx
c0013536:	83 ec 10             	sub    esp,0x10
c0013539:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001353d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013540:	e8 6b 91 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c0013545:	5a                   	pop    edx
c0013546:	59                   	pop    ecx
c0013547:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001354a:	89 c3                	mov    ebx,eax
c001354c:	50                   	push   eax
c001354d:	e8 59 9d ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	89 c1                	mov    ecx,eax
c0013557:	b8 01 00 00 00       	mov    eax,0x1
c001355c:	85 c9                	test   ecx,ecx
c001355e:	7e 18                	jle    c0013578 <SysRegistryEasyReadInteger(regs*)+0x44>
c0013560:	50                   	push   eax
c0013561:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013564:	51                   	push   ecx
c0013565:	53                   	push   ebx
c0013566:	e8 17 98 ff ff       	call   c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001356b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001356e:	e8 5b 92 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c0013573:	83 c4 10             	add    esp,0x10
c0013576:	31 c0                	xor    eax,eax
c0013578:	59                   	pop    ecx
c0013579:	31 d2                	xor    edx,edx
c001357b:	5b                   	pop    ebx
c001357c:	5e                   	pop    esi
c001357d:	c3                   	ret    

c001357e <SysSbrk(regs*)>:
c001357e:	56                   	push   esi
c001357f:	53                   	push   ebx
c0013580:	50                   	push   eax
c0013581:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013586:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001358a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001358d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013590:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013596:	85 db                	test   ebx,ebx
c0013598:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001359b:	74 02                	je     c001359f <SysSbrk(regs*)+0x21>
c001359d:	79 06                	jns    c00135a5 <SysSbrk(regs*)+0x27>
c001359f:	89 f0                	mov    eax,esi
c00135a1:	31 d2                	xor    edx,edx
c00135a3:	eb 2a                	jmp    c00135cf <SysSbrk(regs*)+0x51>
c00135a5:	83 c8 ff             	or     eax,0xffffffff
c00135a8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00135ae:	89 c2                	mov    edx,eax
c00135b0:	77 1d                	ja     c00135cf <SysSbrk(regs*)+0x51>
c00135b2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00135b8:	50                   	push   eax
c00135b9:	68 07 0c 00 00       	push   0xc07
c00135be:	c1 ea 0c             	shr    edx,0xc
c00135c1:	52                   	push   edx
c00135c2:	51                   	push   ecx
c00135c3:	e8 5c f1 ff ff       	call   c0012724 <VAS::allocatePages(int, int)>
c00135c8:	89 f0                	mov    eax,esi
c00135ca:	31 d2                	xor    edx,edx
c00135cc:	83 c4 10             	add    esp,0x10
c00135cf:	59                   	pop    ecx
c00135d0:	5b                   	pop    ebx
c00135d1:	5e                   	pop    esi
c00135d2:	c3                   	ret    

c00135d3 <SysSetCwd(regs*)>:
c00135d3:	83 ec 14             	sub    esp,0x14
c00135d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135da:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135e2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00135e5:	e8 a3 4e ff ff       	call   c000848d <Fs::setcwd(Process*, char*)>
c00135ea:	83 c4 1c             	add    esp,0x1c
c00135ed:	99                   	cdq    
c00135ee:	c3                   	ret    

c00135ef <SysSetTime(regs*)>:
c00135ef:	55                   	push   ebp
c00135f0:	31 c9                	xor    ecx,ecx
c00135f2:	57                   	push   edi
c00135f3:	bd 0c 00 00 00       	mov    ebp,0xc
c00135f8:	56                   	push   esi
c00135f9:	53                   	push   ebx
c00135fa:	31 db                	xor    ebx,ebx
c00135fc:	83 ec 10             	sub    esp,0x10
c00135ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013603:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013606:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013609:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001360c:	89 c2                	mov    edx,eax
c001360e:	c1 e8 05             	shr    eax,0x5
c0013611:	83 e2 1f             	and    edx,0x1f
c0013614:	42                   	inc    edx
c0013615:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001361b:	c1 e7 10             	shl    edi,0x10
c001361e:	88 d1                	mov    cl,dl
c0013620:	31 d2                	xor    edx,edx
c0013622:	f7 f5                	div    ebp
c0013624:	89 dd                	mov    ebp,ebx
c0013626:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001362c:	88 d5                	mov    ch,dl
c001362e:	31 d2                	xor    edx,edx
c0013630:	0f b7 c1             	movzx  eax,cx
c0013633:	09 f8                	or     eax,edi
c0013635:	bf 3c 00 00 00       	mov    edi,0x3c
c001363a:	89 c1                	mov    ecx,eax
c001363c:	89 f0                	mov    eax,esi
c001363e:	f7 f7                	div    edi
c0013640:	c1 e2 10             	shl    edx,0x10
c0013643:	09 d5                	or     ebp,edx
c0013645:	31 d2                	xor    edx,edx
c0013647:	f7 f7                	div    edi
c0013649:	89 eb                	mov    ebx,ebp
c001364b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013650:	89 f0                	mov    eax,esi
c0013652:	88 d7                	mov    bh,dl
c0013654:	31 d2                	xor    edx,edx
c0013656:	f7 f7                	div    edi
c0013658:	bf 18 00 00 00       	mov    edi,0x18
c001365d:	31 d2                	xor    edx,edx
c001365f:	f7 f7                	div    edi
c0013661:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0013666:	88 d3                	mov    bl,dl
c0013668:	53                   	push   ebx
c0013669:	51                   	push   ecx
c001366a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013670:	e8 e5 56 ff ff       	call   c0008d5a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013675:	83 c4 1c             	add    esp,0x1c
c0013678:	31 d2                	xor    edx,edx
c001367a:	5b                   	pop    ebx
c001367b:	5e                   	pop    esi
c001367c:	83 f0 01             	xor    eax,0x1
c001367f:	5f                   	pop    edi
c0013680:	0f b6 c0             	movzx  eax,al
c0013683:	5d                   	pop    ebp
c0013684:	c3                   	ret    

c0013685 <SysSymlink(regs*)>:
c0013685:	56                   	push   esi
c0013686:	83 c8 ff             	or     eax,0xffffffff
c0013689:	53                   	push   ebx
c001368a:	89 c2                	mov    edx,eax
c001368c:	81 ec 34 02 00 00    	sub    esp,0x234
c0013692:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013699:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001369d:	74 50                	je     c00136ef <SysSymlink(regs*)+0x6a>
c001369f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00136a2:	85 c9                	test   ecx,ecx
c00136a4:	74 49                	je     c00136ef <SysSymlink(regs*)+0x6a>
c00136a6:	6a 01                	push   0x1
c00136a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136b0:	05 0c 01 00 00       	add    eax,0x10c
c00136b5:	50                   	push   eax
c00136b6:	51                   	push   ecx
c00136b7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00136bb:	56                   	push   esi
c00136bc:	e8 3f 47 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00136c1:	6a 01                	push   0x1
c00136c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136cb:	05 0c 01 00 00       	add    eax,0x10c
c00136d0:	50                   	push   eax
c00136d1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136d4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00136db:	53                   	push   ebx
c00136dc:	e8 1f 47 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00136e1:	83 c4 18             	add    esp,0x18
c00136e4:	56                   	push   esi
c00136e5:	53                   	push   ebx
c00136e6:	e8 43 43 ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c00136eb:	83 c4 10             	add    esp,0x10
c00136ee:	99                   	cdq    
c00136ef:	81 c4 34 02 00 00    	add    esp,0x234
c00136f5:	5b                   	pop    ebx
c00136f6:	5e                   	pop    esi
c00136f7:	c3                   	ret    

c00136f8 <SysTimezone(regs*)>:
c00136f8:	83 ec 0c             	sub    esp,0xc
c00136fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ff:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013703:	75 17                	jne    c001371c <SysTimezone(regs*)+0x24>
c0013705:	83 ec 0c             	sub    esp,0xc
c0013708:	68 f8 27 02 c0       	push   0xc00227f8
c001370d:	e8 3c 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013712:	83 c8 ff             	or     eax,0xffffffff
c0013715:	83 c4 10             	add    esp,0x10
c0013718:	89 c2                	mov    edx,eax
c001371a:	eb 17                	jmp    c0013733 <SysTimezone(regs*)+0x3b>
c001371c:	83 ec 0c             	sub    esp,0xc
c001371f:	68 0d 28 02 c0       	push   0xc002280d
c0013724:	e8 25 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013729:	83 c4 10             	add    esp,0x10
c001372c:	b8 01 00 00 00       	mov    eax,0x1
c0013731:	31 d2                	xor    edx,edx
c0013733:	83 c4 0c             	add    esp,0xc
c0013736:	c3                   	ret    

c0013737 <SysTruncate(regs*)>:
c0013737:	55                   	push   ebp
c0013738:	57                   	push   edi
c0013739:	31 ff                	xor    edi,edi
c001373b:	56                   	push   esi
c001373c:	53                   	push   ebx
c001373d:	83 ec 0c             	sub    esp,0xc
c0013740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013744:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013747:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001374b:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001374e:	89 ce                	mov    esi,ecx
c0013750:	0f 84 9a 00 00 00    	je     c00137f0 <SysTruncate(regs*)+0xb9>
c0013756:	83 ec 0c             	sub    esp,0xc
c0013759:	68 14 01 00 00       	push   0x114
c001375e:	e8 6d b1 ff ff       	call   c000e8d0 <malloc>
c0013763:	83 c4 0c             	add    esp,0xc
c0013766:	89 c3                	mov    ebx,eax
c0013768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001376d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013770:	55                   	push   ebp
c0013771:	53                   	push   ebx
c0013772:	e8 95 49 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013777:	83 c4 10             	add    esp,0x10
c001377a:	31 d2                	xor    edx,edx
c001377c:	85 db                	test   ebx,ebx
c001377e:	b8 03 00 00 00       	mov    eax,0x3
c0013783:	0f 84 a2 00 00 00    	je     c001382b <SysTruncate(regs*)+0xf4>
c0013789:	51                   	push   ecx
c001378a:	51                   	push   ecx
c001378b:	6a 02                	push   0x2
c001378d:	53                   	push   ebx
c001378e:	e8 97 49 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013793:	83 c4 10             	add    esp,0x10
c0013796:	85 c0                	test   eax,eax
c0013798:	74 13                	je     c00137ad <SysTruncate(regs*)+0x76>
c001379a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	53                   	push   ebx
c00137a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137a3:	83 c4 10             	add    esp,0x10
c00137a6:	b8 04 00 00 00       	mov    eax,0x4
c00137ab:	eb 7c                	jmp    c0013829 <SysTruncate(regs*)+0xf2>
c00137ad:	52                   	push   edx
c00137ae:	57                   	push   edi
c00137af:	56                   	push   esi
c00137b0:	53                   	push   ebx
c00137b1:	e8 88 4a ff ff       	call   c000823e <File::truncate(unsigned long long)>
c00137b6:	83 c4 10             	add    esp,0x10
c00137b9:	85 c0                	test   eax,eax
c00137bb:	74 1b                	je     c00137d8 <SysTruncate(regs*)+0xa1>
c00137bd:	83 ec 0c             	sub    esp,0xc
c00137c0:	53                   	push   ebx
c00137c1:	e8 c2 49 ff ff       	call   c0008188 <File::close()>
c00137c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	b8 05 00 00 00       	mov    eax,0x5
c00137d6:	eb 51                	jmp    c0013829 <SysTruncate(regs*)+0xf2>
c00137d8:	83 ec 0c             	sub    esp,0xc
c00137db:	53                   	push   ebx
c00137dc:	e8 a7 49 ff ff       	call   c0008188 <File::close()>
c00137e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137e9:	83 c4 10             	add    esp,0x10
c00137ec:	31 c0                	xor    eax,eax
c00137ee:	eb 39                	jmp    c0013829 <SysTruncate(regs*)+0xf2>
c00137f0:	31 d2                	xor    edx,edx
c00137f2:	83 fd 02             	cmp    ebp,0x2
c00137f5:	b8 01 00 00 00       	mov    eax,0x1
c00137fa:	7e 2f                	jle    c001382b <SysTruncate(regs*)+0xf4>
c00137fc:	83 ec 0c             	sub    esp,0xc
c00137ff:	51                   	push   ecx
c0013800:	e8 e4 e5 ff ff       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c0013805:	83 c4 10             	add    esp,0x10
c0013808:	31 d2                	xor    edx,edx
c001380a:	89 c1                	mov    ecx,eax
c001380c:	b8 02 00 00 00       	mov    eax,0x2
c0013811:	85 c9                	test   ecx,ecx
c0013813:	74 16                	je     c001382b <SysTruncate(regs*)+0xf4>
c0013815:	50                   	push   eax
c0013816:	57                   	push   edi
c0013817:	56                   	push   esi
c0013818:	51                   	push   ecx
c0013819:	e8 20 4a ff ff       	call   c000823e <File::truncate(unsigned long long)>
c001381e:	83 c4 10             	add    esp,0x10
c0013821:	85 c0                	test   eax,eax
c0013823:	0f 95 c0             	setne  al
c0013826:	0f b6 c0             	movzx  eax,al
c0013829:	31 d2                	xor    edx,edx
c001382b:	83 c4 0c             	add    esp,0xc
c001382e:	5b                   	pop    ebx
c001382f:	5e                   	pop    esi
c0013830:	5f                   	pop    edi
c0013831:	5d                   	pop    ebp
c0013832:	c3                   	ret    

c0013833 <SysWrite(regs*)>:
c0013833:	57                   	push   edi
c0013834:	56                   	push   esi
c0013835:	53                   	push   ebx
c0013836:	83 ec 10             	sub    esp,0x10
c0013839:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001383d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013840:	83 f8 02             	cmp    eax,0x2
c0013843:	77 10                	ja     c0013855 <SysWrite(regs*)+0x22>
c0013845:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001384a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001384d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013853:	eb 0e                	jmp    c0013863 <SysWrite(regs*)+0x30>
c0013855:	83 ec 0c             	sub    esp,0xc
c0013858:	50                   	push   eax
c0013859:	e8 8b e5 ff ff       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c001385e:	83 c4 10             	add    esp,0x10
c0013861:	89 c1                	mov    ecx,eax
c0013863:	83 c8 ff             	or     eax,0xffffffff
c0013866:	85 c9                	test   ecx,ecx
c0013868:	89 c2                	mov    edx,eax
c001386a:	74 28                	je     c0013894 <SysWrite(regs*)+0x61>
c001386c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013874:	83 ec 0c             	sub    esp,0xc
c0013877:	31 ff                	xor    edi,edi
c0013879:	8d 54 24 18          	lea    edx,[esp+0x18]
c001387d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001387f:	52                   	push   edx
c0013880:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013883:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013886:	57                   	push   edi
c0013887:	56                   	push   esi
c0013888:	51                   	push   ecx
c0013889:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001388c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013890:	83 c4 20             	add    esp,0x20
c0013893:	99                   	cdq    
c0013894:	83 c4 10             	add    esp,0x10
c0013897:	5b                   	pop    ebx
c0013898:	5e                   	pop    esi
c0013899:	5f                   	pop    edi
c001389a:	c3                   	ret    

c001389b <SysWsbe(regs*)>:
c001389b:	55                   	push   ebp
c001389c:	57                   	push   edi
c001389d:	56                   	push   esi
c001389e:	53                   	push   ebx
c001389f:	83 ec 3c             	sub    esp,0x3c
c00138a2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00138a6:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00138ad:	75 2d                	jne    c00138dc <SysWsbe(regs*)+0x41>
c00138af:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00138b6:	75 24                	jne    c00138dc <SysWsbe(regs*)+0x41>
c00138b8:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00138bf:	75 1b                	jne    c00138dc <SysWsbe(regs*)+0x41>
c00138c1:	6a 01                	push   0x1
c00138c3:	6a 00                	push   0x0
c00138c5:	68 6d 95 00 c0       	push   0xc000956d
c00138ca:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00138d0:	e8 bb 18 00 00       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	31 c0                	xor    eax,eax
c00138da:	eb 52                	jmp    c001392e <SysWsbe(regs*)+0x93>
c00138dc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00138e0:	be 4c 28 02 c0       	mov    esi,0xc002284c
c00138e5:	b9 0b 00 00 00       	mov    ecx,0xb
c00138ea:	fc                   	cld    
c00138eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00138ed:	83 ec 0c             	sub    esp,0xc
c00138f0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00138f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138fc:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013902:	8b 06                	mov    eax,DWORD PTR [esi]
c0013904:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013907:	57                   	push   edi
c0013908:	e8 73 cc fe ff       	call   c0000580 <strlen>
c001390d:	5a                   	pop    edx
c001390e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013912:	52                   	push   edx
c0013913:	31 d2                	xor    edx,edx
c0013915:	57                   	push   edi
c0013916:	52                   	push   edx
c0013917:	50                   	push   eax
c0013918:	56                   	push   esi
c0013919:	ff d5                	call   ebp
c001391b:	83 c4 14             	add    esp,0x14
c001391e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013921:	e8 56 22 00 00       	call   c0015b7c <terminateTask(int)>
c0013926:	83 c4 10             	add    esp,0x10
c0013929:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001392e:	83 c4 3c             	add    esp,0x3c
c0013931:	31 d2                	xor    edx,edx
c0013933:	5b                   	pop    ebx
c0013934:	5e                   	pop    esi
c0013935:	5f                   	pop    edi
c0013936:	5d                   	pop    ebp
c0013937:	c3                   	ret    

c0013938 <SysYield(regs*)>:
c0013938:	83 ec 0c             	sub    esp,0xc
c001393b:	fa                   	cli    
c001393c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013942:	e8 95 1a 00 00       	call   c00153dc <schedule()>
c0013947:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001394e:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013955:	75 01                	jne    c0013958 <SysYield(regs*)+0x20>
c0013957:	fb                   	sti    
c0013958:	31 c0                	xor    eax,eax
c001395a:	31 d2                	xor    edx,edx
c001395c:	83 c4 0c             	add    esp,0xc
c001395f:	c3                   	ret    

c0013960 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013960:	55                   	push   ebp
c0013961:	57                   	push   edi
c0013962:	56                   	push   esi
c0013963:	53                   	push   ebx
c0013964:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001396a:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013975:	74 3b                	je     c00139b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013977:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001397f:	74 31                	je     c00139b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013981:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013989:	75 27                	jne    c00139b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001398b:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013992:	05 00 10 00 00       	add    eax,0x1000
c0013997:	89 c2                	mov    edx,eax
c0013999:	25 00 f0 ff ff       	and    eax,0xfffff000
c001399e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00139a5:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00139ab:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00139b2:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00139b9:	83 ec 0c             	sub    esp,0xc
c00139bc:	6a 01                	push   0x1
c00139be:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00139c4:	e8 7a e5 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00139c9:	83 c4 10             	add    esp,0x10
c00139cc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00139d2:	89 c3                	mov    ebx,eax
c00139d4:	0f 86 27 01 00 00    	jbe    c0013b01 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00139da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139e2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00139e9:	c1 ee 0c             	shr    esi,0xc
c00139ec:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00139f0:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00139f7:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00139fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a02:	29 ef                	sub    edi,ebp
c0013a04:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013a08:	0f 83 fa 00 00 00    	jae    c0013b08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013a0e:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013a14:	b8 00 10 00 00       	mov    eax,0x1000
c0013a19:	0f 47 f8             	cmova  edi,eax
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013a26:	31 d2                	xor    edx,edx
c0013a28:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a2a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a2e:	50                   	push   eax
c0013a2f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013a33:	56                   	push   esi
c0013a34:	52                   	push   edx
c0013a35:	57                   	push   edi
c0013a36:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013a3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a40:	83 c4 20             	add    esp,0x20
c0013a43:	85 c0                	test   eax,eax
c0013a45:	75 06                	jne    c0013a4d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013a47:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013a4b:	74 13                	je     c0013a60 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013a4d:	83 ec 0c             	sub    esp,0xc
c0013a50:	53                   	push   ebx
c0013a51:	e8 eb e7 ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a56:	83 c4 10             	add    esp,0x10
c0013a59:	31 c0                	xor    eax,eax
c0013a5b:	e9 80 01 00 00       	jmp    c0013be0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0013a60:	fa                   	cli    
c0013a61:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013a67:	e8 a4 b3 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0013a6c:	6a 07                	push   0x7
c0013a6e:	53                   	push   ebx
c0013a6f:	50                   	push   eax
c0013a70:	89 c7                	mov    edi,eax
c0013a72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a7a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a80:	e8 97 eb ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a85:	83 c4 0c             	add    esp,0xc
c0013a88:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013a8f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a95:	6a 00                	push   0x0
c0013a97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aa5:	e8 de e9 ff ff       	call   c0012488 <VAS::mapOtherVASIn(bool, VAS*)>
c0013aaa:	58                   	pop    eax
c0013aab:	5a                   	pop    edx
c0013aac:	68 07 0c 00 00       	push   0xc07
c0013ab1:	55                   	push   ebp
c0013ab2:	57                   	push   edi
c0013ab3:	89 df                	mov    edi,ebx
c0013ab5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013abc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ac2:	6a 00                	push   0x0
c0013ac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013acc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ad2:	e8 99 ed ff ff       	call   c0012870 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013ad7:	b9 00 10 00 00       	mov    ecx,0x1000
c0013adc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ade:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013ae5:	83 c4 20             	add    esp,0x20
c0013ae8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013aef:	75 01                	jne    c0013af2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0013af1:	fb                   	sti    
c0013af2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013af6:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013afc:	e9 ef fe ff ff       	jmp    c00139f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013b01:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b08:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b0f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b15:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b1b:	0f 86 b1 00 00 00    	jbe    c0013bd2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013b21:	fa                   	cli    
c0013b22:	51                   	push   ecx
c0013b23:	31 ff                	xor    edi,edi
c0013b25:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b2c:	c1 ee 0c             	shr    esi,0xc
c0013b2f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013b35:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b3b:	6a 00                	push   0x0
c0013b3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b45:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b4b:	e8 38 e9 ff ff       	call   c0012488 <VAS::mapOtherVASIn(bool, VAS*)>
c0013b50:	83 c4 10             	add    esp,0x10
c0013b53:	e8 b8 b2 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0013b58:	47                   	inc    edi
c0013b59:	6a 07                	push   0x7
c0013b5b:	53                   	push   ebx
c0013b5c:	50                   	push   eax
c0013b5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b67:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013b6a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013b70:	e8 a7 ea ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b75:	58                   	pop    eax
c0013b76:	5a                   	pop    edx
c0013b77:	68 07 0c 00 00       	push   0xc07
c0013b7c:	55                   	push   ebp
c0013b7d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b87:	50                   	push   eax
c0013b88:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b8f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b95:	6a 00                	push   0x0
c0013b97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ba5:	e8 c6 ec ff ff       	call   c0012870 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013baa:	83 c4 1c             	add    esp,0x1c
c0013bad:	68 00 10 00 00       	push   0x1000
c0013bb2:	6a 00                	push   0x0
c0013bb4:	53                   	push   ebx
c0013bb5:	e8 36 c9 fe ff       	call   c00004f0 <memset>
c0013bba:	83 c4 10             	add    esp,0x10
c0013bbd:	39 fe                	cmp    esi,edi
c0013bbf:	77 92                	ja     c0013b53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0013bc1:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013bc8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013bcf:	75 01                	jne    c0013bd2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013bd1:	fb                   	sti    
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	53                   	push   ebx
c0013bd6:	e8 66 e6 ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	b0 01                	mov    al,0x1
c0013be0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013be6:	5b                   	pop    ebx
c0013be7:	5e                   	pop    esi
c0013be8:	5f                   	pop    edi
c0013be9:	5d                   	pop    ebp
c0013bea:	c3                   	ret    

c0013beb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013beb:	55                   	push   ebp
c0013bec:	57                   	push   edi
c0013bed:	56                   	push   esi
c0013bee:	53                   	push   ebx
c0013bef:	83 ec 48             	sub    esp,0x48
c0013bf2:	68 14 01 00 00       	push   0x114
c0013bf7:	e8 d4 ac ff ff       	call   c000e8d0 <malloc>
c0013bfc:	83 c4 0c             	add    esp,0xc
c0013bff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013c03:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013c07:	89 c7                	mov    edi,eax
c0013c09:	50                   	push   eax
c0013c0a:	e8 fd 44 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013c0f:	58                   	pop    eax
c0013c10:	5a                   	pop    edx
c0013c11:	6a 01                	push   0x1
c0013c13:	57                   	push   edi
c0013c14:	e8 11 45 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013c19:	83 c4 10             	add    esp,0x10
c0013c1c:	85 c0                	test   eax,eax
c0013c1e:	0f 85 4c 01 00 00    	jne    c0013d70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c24:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	6a 34                	push   0x34
c0013c31:	e8 9a ac ff ff       	call   c000e8d0 <malloc>
c0013c36:	89 c3                	mov    ebx,eax
c0013c38:	58                   	pop    eax
c0013c39:	8b 07                	mov    eax,DWORD PTR [edi]
c0013c3b:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013c3f:	56                   	push   esi
c0013c40:	53                   	push   ebx
c0013c41:	6a 00                	push   0x0
c0013c43:	6a 34                	push   0x34
c0013c45:	57                   	push   edi
c0013c46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c49:	83 c4 20             	add    esp,0x20
c0013c4c:	85 c0                	test   eax,eax
c0013c4e:	0f 85 1c 01 00 00    	jne    c0013d70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c54:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013c5a:	0f 85 10 01 00 00    	jne    c0013d70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c60:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c63:	85 c0                	test   eax,eax
c0013c65:	0f 84 05 01 00 00    	je     c0013d70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c6b:	31 d2                	xor    edx,edx
c0013c6d:	55                   	push   ebp
c0013c6e:	52                   	push   edx
c0013c6f:	50                   	push   eax
c0013c70:	57                   	push   edi
c0013c71:	e8 72 45 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013c76:	83 c4 10             	add    esp,0x10
c0013c79:	85 c0                	test   eax,eax
c0013c7b:	0f 85 ef 00 00 00    	jne    c0013d70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c81:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c84:	83 ec 0c             	sub    esp,0xc
c0013c87:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013c8b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013c8f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013c93:	0f af c2             	imul   eax,edx
c0013c96:	50                   	push   eax
c0013c97:	e8 34 ac ff ff       	call   c000e8d0 <malloc>
c0013c9c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013c9e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ca1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013ca5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ca9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013cad:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cb1:	0f af c2             	imul   eax,edx
c0013cb4:	99                   	cdq    
c0013cb5:	52                   	push   edx
c0013cb6:	50                   	push   eax
c0013cb7:	57                   	push   edi
c0013cb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cbb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013cbe:	83 c4 20             	add    esp,0x20
c0013cc1:	85 c0                	test   eax,eax
c0013cc3:	0f 84 a7 00 00 00    	je     c0013d70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013cc9:	31 d2                	xor    edx,edx
c0013ccb:	51                   	push   ecx
c0013ccc:	52                   	push   edx
c0013ccd:	50                   	push   eax
c0013cce:	57                   	push   edi
c0013ccf:	e8 14 45 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013cd4:	83 c4 10             	add    esp,0x10
c0013cd7:	85 c0                	test   eax,eax
c0013cd9:	0f 85 91 00 00 00    	jne    c0013d70 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013cdf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013ce3:	83 ec 0c             	sub    esp,0xc
c0013ce6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013cea:	0f af c2             	imul   eax,edx
c0013ced:	50                   	push   eax
c0013cee:	e8 dd ab ff ff       	call   c000e8d0 <malloc>
c0013cf3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013cf5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d00:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d04:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d08:	0f af c2             	imul   eax,edx
c0013d0b:	99                   	cdq    
c0013d0c:	52                   	push   edx
c0013d0d:	50                   	push   eax
c0013d0e:	57                   	push   edi
c0013d0f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d12:	83 c4 20             	add    esp,0x20
c0013d15:	31 c9                	xor    ecx,ecx
c0013d17:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d1f:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013d23:	0f b7 e9             	movzx  ebp,cx
c0013d26:	0f 83 86 00 00 00    	jae    c0013db2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013d2c:	c1 e5 05             	shl    ebp,0x5
c0013d2f:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013d33:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013d37:	75 73                	jne    c0013dac <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013d39:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013d40:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013d43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d47:	52                   	push   edx
c0013d48:	31 d2                	xor    edx,edx
c0013d4a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013d4d:	52                   	push   edx
c0013d4e:	50                   	push   eax
c0013d4f:	57                   	push   edi
c0013d50:	e8 93 44 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d5c:	85 c0                	test   eax,eax
c0013d5e:	74 17                	je     c0013d77 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013d60:	83 ec 0c             	sub    esp,0xc
c0013d63:	68 78 28 02 c0       	push   0xc0022878
c0013d68:	e8 e1 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013d6d:	83 c4 10             	add    esp,0x10
c0013d70:	31 c0                	xor    eax,eax
c0013d72:	e9 8b 00 00 00       	jmp    c0013e02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013d77:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d7b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013d7e:	83 ec 0c             	sub    esp,0xc
c0013d81:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013d84:	50                   	push   eax
c0013d85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013d89:	56                   	push   esi
c0013d8a:	57                   	push   edi
c0013d8b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013d8f:	e8 cc fb ff ff       	call   c0013960 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013d94:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013d98:	83 c4 20             	add    esp,0x20
c0013d9b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013d9f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013da3:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013da8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013dac:	41                   	inc    ecx
c0013dad:	e9 6d ff ff ff       	jmp    c0013d1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013db2:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013db6:	83 ec 0c             	sub    esp,0xc
c0013db9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013dbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dc1:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013dc7:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013dcd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dd2:	05 00 10 00 00       	add    eax,0x1000
c0013dd7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dde:	e8 fd aa ff ff       	call   c000e8e0 <free>
c0013de3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013de6:	e8 f5 aa ff ff       	call   c000e8e0 <free>
c0013deb:	58                   	pop    eax
c0013dec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013df0:	e8 eb aa ff ff       	call   c000e8e0 <free>
c0013df5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013df8:	e8 8b 43 ff ff       	call   c0008188 <File::close()>
c0013dfd:	83 c4 10             	add    esp,0x10
c0013e00:	b0 01                	mov    al,0x1
c0013e02:	83 c4 3c             	add    esp,0x3c
c0013e05:	5b                   	pop    ebx
c0013e06:	5e                   	pop    esi
c0013e07:	5f                   	pop    edi
c0013e08:	5d                   	pop    ebp
c0013e09:	c3                   	ret    

c0013e0a <Thr::runtimeReferenceHelper()>:
c0013e0a:	83 ec 18             	sub    esp,0x18
c0013e0d:	68 80 28 02 c0       	push   0xc0022880
c0013e12:	e8 37 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013e17:	fa                   	cli    
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	eb fe                	jmp    c0013e1b <Thr::runtimeReferenceHelper()+0x11>

c0013e1d <Thr::getAddressOfKernelSymbol(char const*)>:
c0013e1d:	57                   	push   edi
c0013e1e:	56                   	push   esi
c0013e1f:	53                   	push   ebx
c0013e20:	31 db                	xor    ebx,ebx
c0013e22:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013e28:	7e 3c                	jle    c0013e66 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013e2a:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013e31:	31 ff                	xor    edi,edi
c0013e33:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013e3a:	7e 27                	jle    c0013e63 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e3c:	50                   	push   eax
c0013e3d:	50                   	push   eax
c0013e3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e42:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e44:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013e4b:	50                   	push   eax
c0013e4c:	e8 2f c9 fe ff       	call   c0000780 <strcmp>
c0013e51:	83 c4 10             	add    esp,0x10
c0013e54:	85 c0                	test   eax,eax
c0013e56:	75 05                	jne    c0013e5d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013e58:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e5b:	eb 0b                	jmp    c0013e68 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013e5d:	83 c6 10             	add    esi,0x10
c0013e60:	47                   	inc    edi
c0013e61:	eb d0                	jmp    c0013e33 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013e63:	43                   	inc    ebx
c0013e64:	eb bc                	jmp    c0013e22 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013e66:	31 c0                	xor    eax,eax
c0013e68:	5b                   	pop    ebx
c0013e69:	5e                   	pop    esi
c0013e6a:	5f                   	pop    edi
c0013e6b:	c3                   	ret    

c0013e6c <Thr::loadKernelSymbolTable(char const*)>:
c0013e6c:	55                   	push   ebp
c0013e6d:	57                   	push   edi
c0013e6e:	56                   	push   esi
c0013e6f:	53                   	push   ebx
c0013e70:	83 ec 68             	sub    esp,0x68
c0013e73:	68 14 01 00 00       	push   0x114
c0013e78:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0013e7e:	e8 4d aa ff ff       	call   c000e8d0 <malloc>
c0013e83:	83 c4 0c             	add    esp,0xc
c0013e86:	56                   	push   esi
c0013e87:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013e8b:	89 c3                	mov    ebx,eax
c0013e8d:	50                   	push   eax
c0013e8e:	e8 79 42 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013e93:	5e                   	pop    esi
c0013e94:	5f                   	pop    edi
c0013e95:	6a 01                	push   0x1
c0013e97:	53                   	push   ebx
c0013e98:	e8 8d 42 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013e9d:	83 c4 10             	add    esp,0x10
c0013ea0:	85 c0                	test   eax,eax
c0013ea2:	74 0a                	je     c0013eae <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013ea4:	83 ec 0c             	sub    esp,0xc
c0013ea7:	68 a2 28 02 c0       	push   0xc00228a2
c0013eac:	eb 34                	jmp    c0013ee2 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013eae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013eb6:	83 ec 0c             	sub    esp,0xc
c0013eb9:	6a 34                	push   0x34
c0013ebb:	e8 10 aa ff ff       	call   c000e8d0 <malloc>
c0013ec0:	59                   	pop    ecx
c0013ec1:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013ec5:	89 c7                	mov    edi,eax
c0013ec7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ec9:	56                   	push   esi
c0013eca:	57                   	push   edi
c0013ecb:	6a 00                	push   0x0
c0013ecd:	6a 34                	push   0x34
c0013ecf:	53                   	push   ebx
c0013ed0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ed3:	83 c4 20             	add    esp,0x20
c0013ed6:	85 c0                	test   eax,eax
c0013ed8:	74 17                	je     c0013ef1 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013eda:	83 ec 0c             	sub    esp,0xc
c0013edd:	68 b9 28 02 c0       	push   0xc00228b9
c0013ee2:	e8 2f ad ff ff       	call   c000ec16 <KePanic(char const*)>
c0013ee7:	83 c4 10             	add    esp,0x10
c0013eea:	31 c0                	xor    eax,eax
c0013eec:	e9 31 02 00 00       	jmp    c0014122 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013ef1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013ef7:	75 e1                	jne    c0013eda <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ef9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013efc:	85 c0                	test   eax,eax
c0013efe:	74 da                	je     c0013eda <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f00:	52                   	push   edx
c0013f01:	31 d2                	xor    edx,edx
c0013f03:	52                   	push   edx
c0013f04:	50                   	push   eax
c0013f05:	53                   	push   ebx
c0013f06:	e8 dd 42 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013f0b:	83 c4 10             	add    esp,0x10
c0013f0e:	85 c0                	test   eax,eax
c0013f10:	75 c8                	jne    c0013eda <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f12:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f16:	83 ec 0c             	sub    esp,0xc
c0013f19:	31 ed                	xor    ebp,ebp
c0013f1b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f1f:	0f af c2             	imul   eax,edx
c0013f22:	50                   	push   eax
c0013f23:	e8 a8 a9 ff ff       	call   c000e8d0 <malloc>
c0013f28:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f35:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f39:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f3d:	0f af c2             	imul   eax,edx
c0013f40:	99                   	cdq    
c0013f41:	52                   	push   edx
c0013f42:	50                   	push   eax
c0013f43:	53                   	push   ebx
c0013f44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f47:	83 c4 20             	add    esp,0x20
c0013f4a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013f52:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f5a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f62:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f6a:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013f6e:	0f b7 f5             	movzx  esi,bp
c0013f71:	0f 83 a7 00 00 00    	jae    c001401e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013f77:	6b f6 28             	imul   esi,esi,0x28
c0013f7a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013f7e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013f81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f85:	50                   	push   eax
c0013f86:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013f8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f8e:	8b 16                	mov    edx,DWORD PTR [esi]
c0013f90:	6b c0 28             	imul   eax,eax,0x28
c0013f93:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013f97:	89 d0                	mov    eax,edx
c0013f99:	31 d2                	xor    edx,edx
c0013f9b:	52                   	push   edx
c0013f9c:	50                   	push   eax
c0013f9d:	53                   	push   ebx
c0013f9e:	e8 45 42 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013fa3:	83 c4 0c             	add    esp,0xc
c0013fa6:	6a 20                	push   0x20
c0013fa8:	6a 00                	push   0x0
c0013faa:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fae:	52                   	push   edx
c0013faf:	e8 3c c5 fe ff       	call   c00004f0 <memset>
c0013fb4:	58                   	pop    eax
c0013fb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fb7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013fbb:	51                   	push   ecx
c0013fbc:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013fc0:	52                   	push   edx
c0013fc1:	6a 00                	push   0x0
c0013fc3:	6a 1f                	push   0x1f
c0013fc5:	53                   	push   ebx
c0013fc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fc9:	83 c4 18             	add    esp,0x18
c0013fcc:	68 d0 28 02 c0       	push   0xc00228d0
c0013fd1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fd5:	52                   	push   edx
c0013fd6:	e8 a5 c7 fe ff       	call   c0000780 <strcmp>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	85 c0                	test   eax,eax
c0013fe0:	75 0f                	jne    c0013ff1 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013fe2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013fe5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fe9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff1:	50                   	push   eax
c0013ff2:	50                   	push   eax
c0013ff3:	68 d8 28 02 c0       	push   0xc00228d8
c0013ff8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013ffc:	50                   	push   eax
c0013ffd:	e8 7e c7 fe ff       	call   c0000780 <strcmp>
c0014002:	83 c4 10             	add    esp,0x10
c0014005:	85 c0                	test   eax,eax
c0014007:	75 0f                	jne    c0014018 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014009:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001400c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014010:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014014:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014018:	45                   	inc    ebp
c0014019:	e9 4c ff ff ff       	jmp    c0013f6a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001401e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014023:	75 10                	jne    c0014035 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014025:	83 ec 0c             	sub    esp,0xc
c0014028:	68 e0 28 02 c0       	push   0xc00228e0
c001402d:	e8 e4 ab ff ff       	call   c000ec16 <KePanic(char const*)>
c0014032:	83 c4 10             	add    esp,0x10
c0014035:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001403a:	75 10                	jne    c001404c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	68 e0 28 02 c0       	push   0xc00228e0
c0014044:	e8 cd ab ff ff       	call   c000ec16 <KePanic(char const*)>
c0014049:	83 c4 10             	add    esp,0x10
c001404c:	50                   	push   eax
c001404d:	31 d2                	xor    edx,edx
c001404f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014053:	52                   	push   edx
c0014054:	50                   	push   eax
c0014055:	53                   	push   ebx
c0014056:	e8 8d 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001405b:	5a                   	pop    edx
c001405c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014060:	e8 6b a8 ff ff       	call   c000e8d0 <malloc>
c0014065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014069:	31 c9                	xor    ecx,ecx
c001406b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001406f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014071:	5e                   	pop    esi
c0014072:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014076:	55                   	push   ebp
c0014077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001407b:	51                   	push   ecx
c001407c:	52                   	push   edx
c001407d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014081:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014085:	53                   	push   ebx
c0014086:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014089:	83 c4 14             	add    esp,0x14
c001408c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014090:	e8 3b a8 ff ff       	call   c000e8d0 <malloc>
c0014095:	89 c6                	mov    esi,eax
c0014097:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014099:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001409c:	56                   	push   esi
c001409d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00140a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00140a5:	51                   	push   ecx
c00140a6:	52                   	push   edx
c00140a7:	53                   	push   ebx
c00140a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00140af:	83 c4 1c             	add    esp,0x1c
c00140b2:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c00140b8:	c1 e8 04             	shr    eax,0x4
c00140bb:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c00140c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140c6:	31 d2                	xor    edx,edx
c00140c8:	52                   	push   edx
c00140c9:	50                   	push   eax
c00140ca:	53                   	push   ebx
c00140cb:	e8 18 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00140d0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140d2:	31 d2                	xor    edx,edx
c00140d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140d7:	56                   	push   esi
c00140d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140dc:	52                   	push   edx
c00140dd:	50                   	push   eax
c00140de:	53                   	push   ebx
c00140df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140e2:	83 c4 14             	add    esp,0x14
c00140e5:	53                   	push   ebx
c00140e6:	e8 9d 40 ff ff       	call   c0008188 <File::close()>
c00140eb:	5d                   	pop    ebp
c00140ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140f0:	e8 eb a7 ff ff       	call   c000e8e0 <free>
c00140f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140f8:	e8 e3 a7 ff ff       	call   c000e8e0 <free>
c00140fd:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c0014102:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014106:	83 c4 10             	add    esp,0x10
c0014109:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c0014110:	8d 50 01             	lea    edx,[eax+0x1]
c0014113:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c001411a:	b0 01                	mov    al,0x1
c001411c:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c0014122:	83 c4 5c             	add    esp,0x5c
c0014125:	5b                   	pop    ebx
c0014126:	5e                   	pop    esi
c0014127:	5f                   	pop    edi
c0014128:	5d                   	pop    ebp
c0014129:	c3                   	ret    

c001412a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001412a:	55                   	push   ebp
c001412b:	57                   	push   edi
c001412c:	56                   	push   esi
c001412d:	53                   	push   ebx
c001412e:	81 ec 68 03 00 00    	sub    esp,0x368
c0014134:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001413b:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0014141:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014145:	68 14 01 00 00       	push   0x114
c001414a:	e8 81 a7 ff ff       	call   c000e8d0 <malloc>
c001414f:	83 c4 0c             	add    esp,0xc
c0014152:	56                   	push   esi
c0014153:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001415a:	50                   	push   eax
c001415b:	89 c3                	mov    ebx,eax
c001415d:	e8 aa 3f ff ff       	call   c000810c <File::File(char const*, Process*)>
c0014162:	5f                   	pop    edi
c0014163:	5d                   	pop    ebp
c0014164:	6a 01                	push   0x1
c0014166:	53                   	push   ebx
c0014167:	e8 be 3f ff ff       	call   c000812a <File::open(FileOpenMode)>
c001416c:	83 c4 10             	add    esp,0x10
c001416f:	85 c0                	test   eax,eax
c0014171:	0f 85 b3 06 00 00    	jne    c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014177:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001417f:	83 ec 0c             	sub    esp,0xc
c0014182:	6a 34                	push   0x34
c0014184:	e8 47 a7 ff ff       	call   c000e8d0 <malloc>
c0014189:	5e                   	pop    esi
c001418a:	8d 74 24 54          	lea    esi,[esp+0x54]
c001418e:	89 c5                	mov    ebp,eax
c0014190:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014192:	56                   	push   esi
c0014193:	55                   	push   ebp
c0014194:	6a 00                	push   0x0
c0014196:	6a 34                	push   0x34
c0014198:	53                   	push   ebx
c0014199:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001419c:	83 c4 20             	add    esp,0x20
c001419f:	85 c0                	test   eax,eax
c00141a1:	0f 85 83 06 00 00    	jne    c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141a7:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00141ae:	0f 85 76 06 00 00    	jne    c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141b4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00141b7:	85 c0                	test   eax,eax
c00141b9:	0f 84 6b 06 00 00    	je     c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141bf:	31 d2                	xor    edx,edx
c00141c1:	51                   	push   ecx
c00141c2:	52                   	push   edx
c00141c3:	50                   	push   eax
c00141c4:	53                   	push   ebx
c00141c5:	e8 1e 40 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00141ca:	83 c4 10             	add    esp,0x10
c00141cd:	85 c0                	test   eax,eax
c00141cf:	0f 85 55 06 00 00    	jne    c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141d5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00141d8:	83 ec 0c             	sub    esp,0xc
c00141db:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141e3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00141e7:	0f af c2             	imul   eax,edx
c00141ea:	50                   	push   eax
c00141eb:	e8 e0 a6 ff ff       	call   c000e8d0 <malloc>
c00141f0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00141f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141fd:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014201:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014205:	0f af c2             	imul   eax,edx
c0014208:	99                   	cdq    
c0014209:	52                   	push   edx
c001420a:	50                   	push   eax
c001420b:	53                   	push   ebx
c001420c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001420f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014212:	83 c4 20             	add    esp,0x20
c0014215:	85 c0                	test   eax,eax
c0014217:	0f 84 0d 06 00 00    	je     c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001421d:	52                   	push   edx
c001421e:	31 d2                	xor    edx,edx
c0014220:	52                   	push   edx
c0014221:	50                   	push   eax
c0014222:	53                   	push   ebx
c0014223:	e8 c0 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	85 c0                	test   eax,eax
c001422d:	0f 85 f7 05 00 00    	jne    c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014233:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014237:	83 ec 0c             	sub    esp,0xc
c001423a:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001423e:	0f af c2             	imul   eax,edx
c0014241:	50                   	push   eax
c0014242:	e8 89 a6 ff ff       	call   c000e8d0 <malloc>
c0014247:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014249:	89 34 24             	mov    DWORD PTR [esp],esi
c001424c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014254:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014258:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001425c:	0f af c2             	imul   eax,edx
c001425f:	99                   	cdq    
c0014260:	52                   	push   edx
c0014261:	50                   	push   eax
c0014262:	53                   	push   ebx
c0014263:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014266:	83 c4 20             	add    esp,0x20
c0014269:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001426f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014272:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014276:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c001427a:	73 78                	jae    c00142f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c001427c:	c1 e7 05             	shl    edi,0x5
c001427f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014283:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014286:	75 63                	jne    c00142eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014288:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001428b:	31 d2                	xor    edx,edx
c001428d:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014290:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014294:	50                   	push   eax
c0014295:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014298:	52                   	push   edx
c0014299:	50                   	push   eax
c001429a:	53                   	push   ebx
c001429b:	e8 48 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00142a0:	83 c4 10             	add    esp,0x10
c00142a3:	85 c0                	test   eax,eax
c00142a5:	0f 85 7f 05 00 00    	jne    c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00142ab:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00142b2:	83 ec 0c             	sub    esp,0xc
c00142b5:	31 d2                	xor    edx,edx
c00142b7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00142bb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00142bd:	01 c6                	add    esi,eax
c00142bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142c6:	50                   	push   eax
c00142c7:	56                   	push   esi
c00142c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142cc:	52                   	push   edx
c00142cd:	50                   	push   eax
c00142ce:	53                   	push   ebx
c00142cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142d2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00142d5:	83 c4 1c             	add    esp,0x1c
c00142d8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00142db:	50                   	push   eax
c00142dc:	6a 00                	push   0x0
c00142de:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00142e2:	56                   	push   esi
c00142e3:	e8 08 c2 fe ff       	call   c00004f0 <memset>
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	66 ff 04 24          	inc    WORD PTR [esp]
c00142ef:	e9 7b ff ff ff       	jmp    c001426f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00142f4:	50                   	push   eax
c00142f5:	68 00 01 00 00       	push   0x100
c00142fa:	6a 00                	push   0x0
c00142fc:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014300:	50                   	push   eax
c0014301:	e8 ea c1 fe ff       	call   c00004f0 <memset>
c0014306:	83 c4 0c             	add    esp,0xc
c0014309:	68 00 01 00 00       	push   0x100
c001430e:	6a 00                	push   0x0
c0014310:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014317:	50                   	push   eax
c0014318:	e8 d3 c1 fe ff       	call   c00004f0 <memset>
c001431d:	83 c4 10             	add    esp,0x10
c0014320:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014327:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001432e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014336:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001433e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014346:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001434e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014352:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014356:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001435b:	0f 83 16 01 00 00    	jae    c0014477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014361:	6b ff 28             	imul   edi,edi,0x28
c0014364:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014368:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001436b:	51                   	push   ecx
c001436c:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014370:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014374:	8b 07                	mov    eax,DWORD PTR [edi]
c0014376:	6b d2 28             	imul   edx,edx,0x28
c0014379:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001437d:	31 d2                	xor    edx,edx
c001437f:	52                   	push   edx
c0014380:	50                   	push   eax
c0014381:	53                   	push   ebx
c0014382:	e8 61 3e ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014387:	83 c4 0c             	add    esp,0xc
c001438a:	6a 20                	push   0x20
c001438c:	6a 00                	push   0x0
c001438e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014395:	51                   	push   ecx
c0014396:	e8 55 c1 fe ff       	call   c00004f0 <memset>
c001439b:	58                   	pop    eax
c001439c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001439e:	8d 54 24 58          	lea    edx,[esp+0x58]
c00143a2:	52                   	push   edx
c00143a3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00143aa:	51                   	push   ecx
c00143ab:	6a 00                	push   0x0
c00143ad:	6a 1f                	push   0x1f
c00143af:	53                   	push   ebx
c00143b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143b3:	83 c4 1c             	add    esp,0x1c
c00143b6:	6a 09                	push   0x9
c00143b8:	68 fa 28 02 c0       	push   0xc00228fa
c00143bd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00143c4:	51                   	push   ecx
c00143c5:	e8 b6 bf fe ff       	call   c0000380 <memcmp>
c00143ca:	83 c4 10             	add    esp,0x10
c00143cd:	85 c0                	test   eax,eax
c00143cf:	75 1a                	jne    c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00143d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00143d4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00143d7:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143db:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143de:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00143e5:	89 d0                	mov    eax,edx
c00143e7:	40                   	inc    eax
c00143e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00143eb:	52                   	push   edx
c00143ec:	6a 09                	push   0x9
c00143ee:	68 04 29 02 c0       	push   0xc0022904
c00143f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143fa:	50                   	push   eax
c00143fb:	e8 80 bf fe ff       	call   c0000380 <memcmp>
c0014400:	83 c4 10             	add    esp,0x10
c0014403:	85 c0                	test   eax,eax
c0014405:	75 1a                	jne    c0014421 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014407:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001440a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001440d:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014411:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014414:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001441b:	89 c8                	mov    eax,ecx
c001441d:	40                   	inc    eax
c001441e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014421:	50                   	push   eax
c0014422:	50                   	push   eax
c0014423:	68 d0 28 02 c0       	push   0xc00228d0
c0014428:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001442f:	50                   	push   eax
c0014430:	e8 4b c3 fe ff       	call   c0000780 <strcmp>
c0014435:	83 c4 10             	add    esp,0x10
c0014438:	85 c0                	test   eax,eax
c001443a:	75 0b                	jne    c0014447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c001443c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014440:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014447:	50                   	push   eax
c0014448:	50                   	push   eax
c0014449:	68 d8 28 02 c0       	push   0xc00228d8
c001444e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014455:	50                   	push   eax
c0014456:	e8 25 c3 fe ff       	call   c0000780 <strcmp>
c001445b:	83 c4 10             	add    esp,0x10
c001445e:	85 c0                	test   eax,eax
c0014460:	75 0b                	jne    c001446d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014462:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014466:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014469:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001446d:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014472:	e9 d7 fe ff ff       	jmp    c001434e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014477:	50                   	push   eax
c0014478:	31 d2                	xor    edx,edx
c001447a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001447e:	52                   	push   edx
c001447f:	50                   	push   eax
c0014480:	53                   	push   ebx
c0014481:	e8 62 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014486:	58                   	pop    eax
c0014487:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001448b:	e8 40 a4 ff ff       	call   c000e8d0 <malloc>
c0014490:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014492:	31 d2                	xor    edx,edx
c0014494:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014498:	58                   	pop    eax
c0014499:	8d 74 24 54          	lea    esi,[esp+0x54]
c001449d:	56                   	push   esi
c001449e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00144a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a6:	52                   	push   edx
c00144a7:	50                   	push   eax
c00144a8:	53                   	push   ebx
c00144a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144ac:	83 c4 14             	add    esp,0x14
c00144af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144b3:	e8 18 a4 ff ff       	call   c000e8d0 <malloc>
c00144b8:	31 d2                	xor    edx,edx
c00144ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00144be:	83 c4 0c             	add    esp,0xc
c00144c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c5:	52                   	push   edx
c00144c6:	50                   	push   eax
c00144c7:	53                   	push   ebx
c00144c8:	e8 1b 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00144cd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144cf:	31 d2                	xor    edx,edx
c00144d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00144d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00144dc:	52                   	push   edx
c00144dd:	50                   	push   eax
c00144de:	53                   	push   ebx
c00144df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144e2:	83 c4 20             	add    esp,0x20
c00144e5:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00144ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144f2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00144f6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144fa:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00144fd:	0f 84 2b 03 00 00    	je     c001482e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014503:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c001450a:	31 d2                	xor    edx,edx
c001450c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014510:	c1 e8 03             	shr    eax,0x3
c0014513:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014517:	51                   	push   ecx
c0014518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001451c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014520:	52                   	push   edx
c0014521:	50                   	push   eax
c0014522:	53                   	push   ebx
c0014523:	e8 c0 3c ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014528:	5e                   	pop    esi
c0014529:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001452d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014534:	e8 97 a3 ff ff       	call   c000e8d0 <malloc>
c0014539:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001453b:	31 d2                	xor    edx,edx
c001453d:	89 c7                	mov    edi,eax
c001453f:	58                   	pop    eax
c0014540:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014544:	50                   	push   eax
c0014545:	57                   	push   edi
c0014546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014551:	52                   	push   edx
c0014552:	50                   	push   eax
c0014553:	53                   	push   ebx
c0014554:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014557:	83 c4 20             	add    esp,0x20
c001455a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014562:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014566:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001456a:	0f 8d a5 02 00 00    	jge    c0014815 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014570:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014575:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014579:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c001457c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014584:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014588:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001458c:	c1 e8 08             	shr    eax,0x8
c001458f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014593:	89 c2                	mov    edx,eax
c0014595:	c1 e2 04             	shl    edx,0x4
c0014598:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c001459c:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c001459f:	85 f6                	test   esi,esi
c00145a1:	0f 85 cf 00 00 00    	jne    c0014676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145a7:	83 ec 0c             	sub    esp,0xc
c00145aa:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b2:	03 02                	add    eax,DWORD PTR [edx]
c00145b4:	50                   	push   eax
c00145b5:	e8 63 f8 ff ff       	call   c0013e1d <Thr::getAddressOfKernelSymbol(char const*)>
c00145ba:	83 c4 10             	add    esp,0x10
c00145bd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145c1:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00145c6:	85 c0                	test   eax,eax
c00145c8:	89 c6                	mov    esi,eax
c00145ca:	0f 85 a6 00 00 00    	jne    c0014676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145d0:	83 ec 0c             	sub    esp,0xc
c00145d3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145db:	03 02                	add    eax,DWORD PTR [edx]
c00145dd:	50                   	push   eax
c00145de:	e8 a1 b0 ff ff       	call   c000f684 <KeResolveCompatibilitySymbol(char*)>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145ea:	85 c0                	test   eax,eax
c00145ec:	89 c6                	mov    esi,eax
c00145ee:	0f 85 82 00 00 00    	jne    c0014676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145f4:	50                   	push   eax
c00145f5:	50                   	push   eax
c00145f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145fa:	03 02                	add    eax,DWORD PTR [edx]
c00145fc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014600:	50                   	push   eax
c0014601:	68 0e 29 02 c0       	push   0xc002290e
c0014606:	e8 43 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001460b:	58                   	pop    eax
c001460c:	5a                   	pop    edx
c001460d:	68 28 29 02 c0       	push   0xc0022928
c0014612:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014619:	51                   	push   ecx
c001461a:	e8 31 c0 fe ff       	call   c0000650 <strcpy>
c001461f:	59                   	pop    ecx
c0014620:	58                   	pop    eax
c0014621:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014629:	03 02                	add    eax,DWORD PTR [edx]
c001462b:	50                   	push   eax
c001462c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014633:	51                   	push   ecx
c0014634:	e8 37 c2 fe ff       	call   c0000870 <strcat>
c0014639:	58                   	pop    eax
c001463a:	5a                   	pop    edx
c001463b:	68 c2 29 02 c0       	push   0xc00229c2
c0014640:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014647:	51                   	push   ecx
c0014648:	e8 23 c2 fe ff       	call   c0000870 <strcat>
c001464d:	83 c4 10             	add    esp,0x10
c0014650:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014655:	0f 84 77 01 00 00    	je     c00147d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001465b:	83 ec 0c             	sub    esp,0xc
c001465e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014665:	51                   	push   ecx
c0014666:	e8 ab a5 ff ff       	call   c000ec16 <KePanic(char const*)>
c001466b:	83 c4 10             	add    esp,0x10
c001466e:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014672:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014676:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001467b:	83 f8 01             	cmp    eax,0x1
c001467e:	0f 85 9b 00 00 00    	jne    c001471f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014684:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014688:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c001468f:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014693:	01 d0                	add    eax,edx
c0014695:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001469d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00146a1:	0f 94 c0             	sete   al
c00146a4:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00146ac:	0f 94 c1             	sete   cl
c00146af:	09 c1                	or     ecx,eax
c00146b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146b5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00146ba:	0f b6 c9             	movzx  ecx,cl
c00146bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00146bf:	74 41                	je     c0014702 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00146c1:	8d 14 06             	lea    edx,[esi+eax*1]
c00146c4:	85 c9                	test   ecx,ecx
c00146c6:	75 15                	jne    c00146dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00146c8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00146cc:	66 83 f8 0c          	cmp    ax,0xc
c00146d0:	76 05                	jbe    c00146d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00146d2:	b8 0c 00 00 00       	mov    eax,0xc
c00146d7:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00146db:	76 37                	jbe    c0014714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146dd:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00146e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00146e6:	0f 84 e6 00 00 00    	je     c00147d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00146ec:	83 ec 0c             	sub    esp,0xc
c00146ef:	68 3f 29 02 c0       	push   0xc002293f
c00146f4:	e8 1d a5 ff ff       	call   c000ec16 <KePanic(char const*)>
c00146f9:	83 c4 10             	add    esp,0x10
c00146fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014700:	eb 12                	jmp    c0014714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014702:	01 c2                	add    edx,eax
c0014704:	85 c9                	test   ecx,ecx
c0014706:	75 0c                	jne    c0014714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014708:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001470c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014710:	77 02                	ja     c0014714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014712:	01 f2                	add    edx,esi
c0014714:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014718:	89 10                	mov    DWORD PTR [eax],edx
c001471a:	e9 ed 00 00 00       	jmp    c001480c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001471f:	83 f8 02             	cmp    eax,0x2
c0014722:	0f 85 81 00 00 00    	jne    c00147a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014728:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001472f:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014733:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014737:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001473f:	74 21                	je     c0014762 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014741:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014749:	74 17                	je     c0014762 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001474b:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001474f:	ba 0a 00 00 00       	mov    edx,0xa
c0014754:	83 f9 0e             	cmp    ecx,0xe
c0014757:	77 03                	ja     c001475c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014759:	8d 51 fc             	lea    edx,[ecx-0x4]
c001475c:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014760:	76 1f                	jbe    c0014781 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014762:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014767:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001476b:	74 65                	je     c00147d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001476d:	83 ec 0c             	sub    esp,0xc
c0014770:	68 5b 29 02 c0       	push   0xc002295b
c0014775:	e8 9c a4 ff ff       	call   c000ec16 <KePanic(char const*)>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014781:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014786:	8b 10                	mov    edx,DWORD PTR [eax]
c0014788:	74 15                	je     c001479f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001478a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001478e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014795:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014799:	01 d1                	add    ecx,edx
c001479b:	01 ce                	add    esi,ecx
c001479d:	eb 06                	jmp    c00147a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001479f:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00147a3:	01 d6                	add    esi,edx
c00147a5:	89 30                	mov    DWORD PTR [eax],esi
c00147a7:	eb 63                	jmp    c001480c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00147a9:	56                   	push   esi
c00147aa:	56                   	push   esi
c00147ab:	50                   	push   eax
c00147ac:	68 77 29 02 c0       	push   0xc0022977
c00147b1:	e8 98 27 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00147b6:	83 c4 10             	add    esp,0x10
c00147b9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00147be:	74 12                	je     c00147d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00147c0:	83 ec 0c             	sub    esp,0xc
c00147c3:	68 82 29 02 c0       	push   0xc0022982
c00147c8:	e8 49 a4 ff ff       	call   c000ec16 <KePanic(char const*)>
c00147cd:	83 c4 10             	add    esp,0x10
c00147d0:	eb 3a                	jmp    c001480c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	53                   	push   ebx
c00147d6:	e8 ad 39 ff ff       	call   c0008188 <File::close()>
c00147db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147e6:	e8 f5 a0 ff ff       	call   c000e8e0 <free>
c00147eb:	59                   	pop    ecx
c00147ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147f0:	e8 eb a0 ff ff       	call   c000e8e0 <free>
c00147f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147f8:	e8 e3 a0 ff ff       	call   c000e8e0 <free>
c00147fd:	5b                   	pop    ebx
c00147fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014802:	e8 d9 a0 ff ff       	call   c000e8e0 <free>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	eb 1e                	jmp    c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001480c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014810:	e9 4d fd ff ff       	jmp    c0014562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014815:	83 ec 0c             	sub    esp,0xc
c0014818:	57                   	push   edi
c0014819:	e8 c2 a0 ff ff       	call   c000e8e0 <free>
c001481e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014822:	83 c4 10             	add    esp,0x10
c0014825:	e9 cc fc ff ff       	jmp    c00144f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001482a:	31 c0                	xor    eax,eax
c001482c:	eb 32                	jmp    c0014860 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001482e:	83 ec 0c             	sub    esp,0xc
c0014831:	53                   	push   ebx
c0014832:	e8 51 39 ff ff       	call   c0008188 <File::close()>
c0014837:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001483c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001483f:	58                   	pop    eax
c0014840:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014844:	e8 97 a0 ff ff       	call   c000e8e0 <free>
c0014849:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001484c:	e8 8f a0 ff ff       	call   c000e8e0 <free>
c0014851:	5a                   	pop    edx
c0014852:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014856:	e8 85 a0 ff ff       	call   c000e8e0 <free>
c001485b:	83 c4 10             	add    esp,0x10
c001485e:	b0 01                	mov    al,0x1
c0014860:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014866:	5b                   	pop    ebx
c0014867:	5e                   	pop    esi
c0014868:	5f                   	pop    edi
c0014869:	5d                   	pop    ebp
c001486a:	c3                   	ret    

c001486b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001486b:	56                   	push   esi
c001486c:	31 d2                	xor    edx,edx
c001486e:	53                   	push   ebx
c001486f:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014875:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014879:	39 d3                	cmp    ebx,edx
c001487b:	7e 1b                	jle    c0014898 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001487d:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c0014884:	39 c8                	cmp    eax,ecx
c0014886:	77 0d                	ja     c0014895 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014888:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c001488f:	01 c6                	add    esi,eax
c0014891:	39 ce                	cmp    esi,ecx
c0014893:	77 05                	ja     c001489a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014895:	42                   	inc    edx
c0014896:	eb e1                	jmp    c0014879 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014898:	31 c0                	xor    eax,eax
c001489a:	5b                   	pop    ebx
c001489b:	5e                   	pop    esi
c001489c:	c3                   	ret    

c001489d <Thr::getDriverNameFromAddress(unsigned long)>:
c001489d:	53                   	push   ebx
c001489e:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c00148a4:	31 c0                	xor    eax,eax
c00148a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00148aa:	39 c3                	cmp    ebx,eax
c00148ac:	7e 22                	jle    c00148d0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00148ae:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c00148b5:	39 ca                	cmp    edx,ecx
c00148b7:	77 14                	ja     c00148cd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148b9:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c00148c0:	39 ca                	cmp    edx,ecx
c00148c2:	76 09                	jbe    c00148cd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00148c4:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c00148cb:	eb 05                	jmp    c00148d2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00148cd:	40                   	inc    eax
c00148ce:	eb da                	jmp    c00148aa <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00148d0:	31 c0                	xor    eax,eax
c00148d2:	5b                   	pop    ebx
c00148d3:	c3                   	ret    

c00148d4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00148d4:	53                   	push   ebx
c00148d5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00148d9:	53                   	push   ebx
c00148da:	e8 8c ff ff ff       	call   c001486b <Thr::getDriverBaseFromAddress(unsigned long)>
c00148df:	5a                   	pop    edx
c00148e0:	31 d2                	xor    edx,edx
c00148e2:	85 c0                	test   eax,eax
c00148e4:	74 04                	je     c00148ea <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00148e6:	89 da                	mov    edx,ebx
c00148e8:	29 c2                	sub    edx,eax
c00148ea:	5b                   	pop    ebx
c00148eb:	89 d0                	mov    eax,edx
c00148ed:	c3                   	ret    

c00148ee <Thr::loadDLL(char const*, bool)>:
c00148ee:	55                   	push   ebp
c00148ef:	57                   	push   edi
c00148f0:	56                   	push   esi
c00148f1:	53                   	push   ebx
c00148f2:	81 ec 34 01 00 00    	sub    esp,0x134
c00148f8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00148ff:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014906:	56                   	push   esi
c0014907:	68 9a 29 02 c0       	push   0xc002299a
c001490c:	e8 3d 26 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014911:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014918:	e8 b3 9f ff ff       	call   c000e8d0 <malloc>
c001491d:	83 c4 0c             	add    esp,0xc
c0014920:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0014926:	56                   	push   esi
c0014927:	50                   	push   eax
c0014928:	89 c3                	mov    ebx,eax
c001492a:	e8 dd 37 ff ff       	call   c000810c <File::File(char const*, Process*)>
c001492f:	83 c4 10             	add    esp,0x10
c0014932:	85 db                	test   ebx,ebx
c0014934:	75 3c                	jne    c0014972 <Thr::loadDLL(char const*, bool)+0x84>
c0014936:	89 e8                	mov    eax,ebp
c0014938:	84 c0                	test   al,al
c001493a:	0f 84 02 02 00 00    	je     c0014b42 <Thr::loadDLL(char const*, bool)+0x254>
c0014940:	50                   	push   eax
c0014941:	50                   	push   eax
c0014942:	68 ab 29 02 c0       	push   0xc00229ab
c0014947:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001494b:	57                   	push   edi
c001494c:	e8 ff bc fe ff       	call   c0000650 <strcpy>
c0014951:	58                   	pop    eax
c0014952:	5a                   	pop    edx
c0014953:	56                   	push   esi
c0014954:	57                   	push   edi
c0014955:	e8 16 bf fe ff       	call   c0000870 <strcat>
c001495a:	59                   	pop    ecx
c001495b:	58                   	pop    eax
c001495c:	68 c2 29 02 c0       	push   0xc00229c2
c0014961:	57                   	push   edi
c0014962:	e8 09 bf fe ff       	call   c0000870 <strcat>
c0014967:	89 3c 24             	mov    DWORD PTR [esp],edi
c001496a:	e8 a7 a2 ff ff       	call   c000ec16 <KePanic(char const*)>
c001496f:	83 c4 10             	add    esp,0x10
c0014972:	50                   	push   eax
c0014973:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014977:	50                   	push   eax
c0014978:	8d 44 24 20          	lea    eax,[esp+0x20]
c001497c:	50                   	push   eax
c001497d:	53                   	push   ebx
c001497e:	e8 a9 3a ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0014983:	83 c4 10             	add    esp,0x10
c0014986:	85 db                	test   ebx,ebx
c0014988:	89 c7                	mov    edi,eax
c001498a:	74 0c                	je     c0014998 <Thr::loadDLL(char const*, bool)+0xaa>
c001498c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001498e:	83 ec 0c             	sub    esp,0xc
c0014991:	53                   	push   ebx
c0014992:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014995:	83 c4 10             	add    esp,0x10
c0014998:	83 ec 0c             	sub    esp,0xc
c001499b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00149a0:	50                   	push   eax
c00149a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149a9:	57                   	push   edi
c00149aa:	68 c4 29 02 c0       	push   0xc00229c4
c00149af:	e8 9a 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00149b4:	83 c4 20             	add    esp,0x20
c00149b7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00149bc:	75 0a                	jne    c00149c8 <Thr::loadDLL(char const*, bool)+0xda>
c00149be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149c2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00149c6:	75 3e                	jne    c0014a06 <Thr::loadDLL(char const*, bool)+0x118>
c00149c8:	89 e8                	mov    eax,ebp
c00149ca:	31 db                	xor    ebx,ebx
c00149cc:	84 c0                	test   al,al
c00149ce:	0f 84 6e 01 00 00    	je     c0014b42 <Thr::loadDLL(char const*, bool)+0x254>
c00149d4:	50                   	push   eax
c00149d5:	50                   	push   eax
c00149d6:	68 e5 29 02 c0       	push   0xc00229e5
c00149db:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00149df:	53                   	push   ebx
c00149e0:	e8 6b bc fe ff       	call   c0000650 <strcpy>
c00149e5:	58                   	pop    eax
c00149e6:	5a                   	pop    edx
c00149e7:	56                   	push   esi
c00149e8:	53                   	push   ebx
c00149e9:	e8 82 be fe ff       	call   c0000870 <strcat>
c00149ee:	59                   	pop    ecx
c00149ef:	5f                   	pop    edi
c00149f0:	68 c2 29 02 c0       	push   0xc00229c2
c00149f5:	53                   	push   ebx
c00149f6:	e8 75 be fe ff       	call   c0000870 <strcat>
c00149fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149fe:	e8 13 a2 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014a03:	83 c4 10             	add    esp,0x10
c0014a06:	53                   	push   ebx
c0014a07:	6a 03                	push   0x3
c0014a09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014a11:	05 ff 0f 00 00       	add    eax,0xfff
c0014a16:	83 d2 00             	adc    edx,0x0
c0014a19:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014a1d:	50                   	push   eax
c0014a1e:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014a24:	e8 fb dc ff ff       	call   c0012724 <VAS::allocatePages(int, int)>
c0014a29:	89 c3                	mov    ebx,eax
c0014a2b:	58                   	pop    eax
c0014a2c:	5a                   	pop    edx
c0014a2d:	53                   	push   ebx
c0014a2e:	68 fa 20 02 c0       	push   0xc00220fa
c0014a33:	e8 16 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014a38:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a3b:	e8 40 bb fe ff       	call   c0000580 <strlen>
c0014a40:	8b 3d e0 be 02 c0    	mov    edi,DWORD PTR ds:0xc002bee0
c0014a46:	40                   	inc    eax
c0014a47:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a4a:	e8 81 9e ff ff       	call   c000e8d0 <malloc>
c0014a4f:	59                   	pop    ecx
c0014a50:	89 04 bd 00 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3d00],eax
c0014a57:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014a5c:	5f                   	pop    edi
c0014a5d:	56                   	push   esi
c0014a5e:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014a65:	e8 e6 bb fe ff       	call   c0000650 <strcpy>
c0014a6a:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014a6f:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014a76:	8d 50 01             	lea    edx,[eax+0x1]
c0014a79:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014a7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a83:	83 c4 0c             	add    esp,0xc
c0014a86:	6a 01                	push   0x1
c0014a88:	53                   	push   ebx
c0014a89:	56                   	push   esi
c0014a8a:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014a91:	e8 94 f6 ff ff       	call   c001412a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	89 c7                	mov    edi,eax
c0014a9b:	89 f8                	mov    eax,edi
c0014a9d:	83 f0 01             	xor    eax,0x1
c0014aa0:	84 c0                	test   al,al
c0014aa2:	74 18                	je     c0014abc <Thr::loadDLL(char const*, bool)+0x1ce>
c0014aa4:	89 e8                	mov    eax,ebp
c0014aa6:	84 c0                	test   al,al
c0014aa8:	74 12                	je     c0014abc <Thr::loadDLL(char const*, bool)+0x1ce>
c0014aaa:	83 ec 0c             	sub    esp,0xc
c0014aad:	68 fe 29 02 c0       	push   0xc00229fe
c0014ab2:	e8 5f a1 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014ab7:	83 c4 10             	add    esp,0x10
c0014aba:	eb 06                	jmp    c0014ac2 <Thr::loadDLL(char const*, bool)+0x1d4>
c0014abc:	89 f8                	mov    eax,edi
c0014abe:	84 c0                	test   al,al
c0014ac0:	75 10                	jne    c0014ad2 <Thr::loadDLL(char const*, bool)+0x1e4>
c0014ac2:	83 ec 0c             	sub    esp,0xc
c0014ac5:	68 1d 2a 02 c0       	push   0xc0022a1d
c0014aca:	e8 47 a1 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014acf:	83 c4 10             	add    esp,0x10
c0014ad2:	31 f6                	xor    esi,esi
c0014ad4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ad8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014adc:	05 ff 0f 00 00       	add    eax,0xfff
c0014ae1:	83 d2 00             	adc    edx,0x0
c0014ae4:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014aec:	c1 ea 0c             	shr    edx,0xc
c0014aef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014af3:	ba 00 00 00 00       	mov    edx,0x0
c0014af8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014afc:	89 d0                	mov    eax,edx
c0014afe:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014b02:	73 32                	jae    c0014b36 <Thr::loadDLL(char const*, bool)+0x248>
c0014b04:	50                   	push   eax
c0014b05:	50                   	push   eax
c0014b06:	89 f0                	mov    eax,esi
c0014b08:	c1 e0 0c             	shl    eax,0xc
c0014b0b:	01 d8                	add    eax,ebx
c0014b0d:	50                   	push   eax
c0014b0e:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014b14:	e8 09 d7 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0014b19:	83 c4 10             	add    esp,0x10
c0014b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b1e:	a8 60                	test   al,0x60
c0014b20:	75 11                	jne    c0014b33 <Thr::loadDLL(char const*, bool)+0x245>
c0014b22:	83 ec 0c             	sub    esp,0xc
c0014b25:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b2a:	50                   	push   eax
c0014b2b:	e8 77 a2 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c0014b30:	83 c4 10             	add    esp,0x10
c0014b33:	46                   	inc    esi
c0014b34:	eb 9e                	jmp    c0014ad4 <Thr::loadDLL(char const*, bool)+0x1e6>
c0014b36:	89 f8                	mov    eax,edi
c0014b38:	84 c0                	test   al,al
c0014b3a:	b8 00 00 00 00       	mov    eax,0x0
c0014b3f:	0f 44 d8             	cmove  ebx,eax
c0014b42:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014b48:	89 d8                	mov    eax,ebx
c0014b4a:	5b                   	pop    ebx
c0014b4b:	5e                   	pop    esi
c0014b4c:	5f                   	pop    edi
c0014b4d:	5d                   	pop    ebp
c0014b4e:	c3                   	ret    

c0014b4f <Thr::executeDLL(unsigned long, void*)>:
c0014b4f:	56                   	push   esi
c0014b50:	53                   	push   ebx
c0014b51:	52                   	push   edx
c0014b52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b56:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b5a:	85 db                	test   ebx,ebx
c0014b5c:	75 10                	jne    c0014b6e <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014b5e:	83 ec 0c             	sub    esp,0xc
c0014b61:	68 39 2a 02 c0       	push   0xc0022a39
c0014b66:	e8 ab a0 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014b6b:	83 c4 10             	add    esp,0x10
c0014b6e:	50                   	push   eax
c0014b6f:	50                   	push   eax
c0014b70:	53                   	push   ebx
c0014b71:	68 63 2a 02 c0       	push   0xc0022a63
c0014b76:	e8 d3 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014b7b:	89 d8                	mov    eax,ebx
c0014b7d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b81:	83 c4 14             	add    esp,0x14
c0014b84:	5b                   	pop    ebx
c0014b85:	5e                   	pop    esi
c0014b86:	ff e0                	jmp    eax

c0014b88 <KeProcessExec(Process*, char const*)>:
c0014b88:	56                   	push   esi
c0014b89:	53                   	push   ebx
c0014b8a:	83 ec 04             	sub    esp,0x4
c0014b8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b91:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014b97:	85 f6                	test   esi,esi
c0014b99:	74 16                	je     c0014bb1 <KeProcessExec(Process*, char const*)+0x29>
c0014b9b:	83 ec 0c             	sub    esp,0xc
c0014b9e:	56                   	push   esi
c0014b9f:	e8 10 d9 ff ff       	call   c00124b4 <VAS::~VAS()>
c0014ba4:	58                   	pop    eax
c0014ba5:	5a                   	pop    edx
c0014ba6:	6a 14                	push   0x14
c0014ba8:	56                   	push   esi
c0014ba9:	e8 ad 7a ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0014bae:	83 c4 10             	add    esp,0x10
c0014bb1:	83 ec 0c             	sub    esp,0xc
c0014bb4:	6a 14                	push   0x14
c0014bb6:	e8 15 9d ff ff       	call   c000e8d0 <malloc>
c0014bbb:	89 c6                	mov    esi,eax
c0014bbd:	58                   	pop    eax
c0014bbe:	5a                   	pop    edx
c0014bbf:	6a 00                	push   0x0
c0014bc1:	56                   	push   esi
c0014bc2:	e8 99 dd ff ff       	call   c0012960 <VAS::VAS(bool)>
c0014bc7:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014bcd:	59                   	pop    ecx
c0014bce:	5e                   	pop    esi
c0014bcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bd3:	50                   	push   eax
c0014bd4:	53                   	push   ebx
c0014bd5:	e8 11 f0 ff ff       	call   c0013beb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014bda:	83 c4 14             	add    esp,0x14
c0014bdd:	31 c0                	xor    eax,eax
c0014bdf:	5b                   	pop    ebx
c0014be0:	5e                   	pop    esi
c0014be1:	c3                   	ret    
c0014be2:	66 90                	xchg   ax,ax

c0014be4 <userModeEntryPoint(void*)>:
c0014be4:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0014bec:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014bf1:	85 c0                	test   eax,eax
c0014bf3:	75 03                	jne    c0014bf8 <userModeEntryPoint(void*)+0x14>
c0014bf5:	fb                   	sti    
c0014bf6:	66 90                	xchg   ax,ax
c0014bf8:	fb                   	sti    
c0014bf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bfe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c01:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014c07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c0b:	e9 2f b6 fe ff       	jmp    c000023f <goToUsermode>

c0014c10 <changeTSS>:
c0014c10:	83 ec 14             	sub    esp,0x14
c0014c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c18:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014c1b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014c20:	c1 e2 15             	shl    edx,0x15
c0014c23:	29 d0                	sub    eax,edx
c0014c25:	50                   	push   eax
c0014c26:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014c2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c31:	05 68 11 00 00       	add    eax,0x1168
c0014c36:	50                   	push   eax
c0014c37:	e8 cc cb ff ff       	call   c0011808 <TSS::setESP(unsigned long)>
c0014c3c:	83 c4 1c             	add    esp,0x1c
c0014c3f:	c3                   	ret    

c0014c40 <switchToThread(ThreadControlBlock*)>:
c0014c40:	57                   	push   edi
c0014c41:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014c47:	56                   	push   esi
c0014c48:	53                   	push   ebx
c0014c49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c4d:	85 c9                	test   ecx,ecx
c0014c4f:	0f 85 8b 00 00 00    	jne    c0014ce0 <switchToThread(ThreadControlBlock*)+0xa0>
c0014c55:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014c59:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014c5f:	74 7b                	je     c0014cdc <switchToThread(ThreadControlBlock*)+0x9c>
c0014c61:	b8 00 04 00 00       	mov    eax,0x400
c0014c66:	29 d0                	sub    eax,edx
c0014c68:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014c6b:	d1 f8                	sar    eax,1
c0014c6d:	01 d0                	add    eax,edx
c0014c6f:	90                   	nop
c0014c70:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014c73:	e8 9e 37 00 00       	call   c0018416 <HalQueryPerformanceCounter()>
c0014c78:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014c7d:	89 c6                	mov    esi,eax
c0014c7f:	89 d7                	mov    edi,edx
c0014c81:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014c87:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014c8c:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014c92:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014c98:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014c9e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ca4:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014caa:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014cb0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014cb3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014cb6:	01 c6                	add    esi,eax
c0014cb8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014cbb:	11 d7                	adc    edi,edx
c0014cbd:	83 ec 0c             	sub    esp,0xc
c0014cc0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014cc3:	53                   	push   ebx
c0014cc4:	e8 ae b5 fe ff       	call   c0000277 <switchToThreadASM>
c0014cc9:	0f 20 c0             	mov    eax,cr0
c0014ccc:	83 c8 08             	or     eax,0x8
c0014ccf:	0f 22 c0             	mov    cr0,eax
c0014cd2:	83 c4 10             	add    esp,0x10
c0014cd5:	5b                   	pop    ebx
c0014cd6:	5e                   	pop    esi
c0014cd7:	5f                   	pop    edi
c0014cd8:	c3                   	ret    
c0014cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cdc:	31 c0                	xor    eax,eax
c0014cde:	eb 90                	jmp    c0014c70 <switchToThread(ThreadControlBlock*)+0x30>
c0014ce0:	5b                   	pop    ebx
c0014ce1:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014ceb:	5e                   	pop    esi
c0014cec:	5f                   	pop    edi
c0014ced:	c3                   	ret    
c0014cee:	66 90                	xchg   ax,ax

c0014cf0 <Process::addArgs(char**)>:
c0014cf0:	57                   	push   edi
c0014cf1:	56                   	push   esi
c0014cf2:	53                   	push   ebx
c0014cf3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014cf7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014cfb:	85 f6                	test   esi,esi
c0014cfd:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014d07:	74 4f                	je     c0014d58 <Process::addArgs(char**)+0x68>
c0014d09:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d0b:	85 c0                	test   eax,eax
c0014d0d:	74 49                	je     c0014d58 <Process::addArgs(char**)+0x68>
c0014d0f:	31 db                	xor    ebx,ebx
c0014d11:	8d 76 00             	lea    esi,[esi+0x0]
c0014d14:	83 ec 0c             	sub    esp,0xc
c0014d17:	50                   	push   eax
c0014d18:	e8 63 b8 fe ff       	call   c0000580 <strlen>
c0014d1d:	83 c0 01             	add    eax,0x1
c0014d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d23:	e8 a8 9b ff ff       	call   c000e8d0 <malloc>
c0014d28:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014d2f:	5a                   	pop    edx
c0014d30:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014d33:	83 c3 01             	add    ebx,0x1
c0014d36:	59                   	pop    ecx
c0014d37:	52                   	push   edx
c0014d38:	50                   	push   eax
c0014d39:	e8 12 b9 fe ff       	call   c0000650 <strcpy>
c0014d3e:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	83 c1 01             	add    ecx,0x1
c0014d4a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014d50:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014d53:	85 c0                	test   eax,eax
c0014d55:	75 bd                	jne    c0014d14 <Process::addArgs(char**)+0x24>
c0014d57:	90                   	nop
c0014d58:	5b                   	pop    ebx
c0014d59:	5e                   	pop    esi
c0014d5a:	5f                   	pop    edi
c0014d5b:	c3                   	ret    

c0014d5c <Process::Process(char const*, Process*, char**)>:
c0014d5c:	56                   	push   esi
c0014d5d:	53                   	push   ebx
c0014d5e:	83 ec 14             	sub    esp,0x14
c0014d61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d65:	05 0c 02 00 00       	add    eax,0x20c
c0014d6a:	bb 07 00 00 00       	mov    ebx,0x7
c0014d6f:	89 c6                	mov    esi,eax
c0014d71:	8d 76 00             	lea    esi,[esi+0x0]
c0014d74:	85 db                	test   ebx,ebx
c0014d76:	78 14                	js     c0014d8c <Process::Process(char const*, Process*, char**)+0x30>
c0014d78:	83 ec 0c             	sub    esp,0xc
c0014d7b:	56                   	push   esi
c0014d7c:	e8 ef b5 00 00       	call   c0020370 <ThreadControlBlock::ThreadControlBlock()>
c0014d81:	83 c4 10             	add    esp,0x10
c0014d84:	83 c6 5f             	add    esi,0x5f
c0014d87:	83 eb 01             	sub    ebx,0x1
c0014d8a:	eb e8                	jmp    c0014d74 <Process::Process(char const*, Process*, char**)+0x18>
c0014d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d90:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d9b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014da2:	83 ec 0c             	sub    esp,0xc
c0014da5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014da9:	e8 aa 8d ff ff       	call   c000db58 <KeNewProcessEnv(Process*)>
c0014dae:	83 c4 10             	add    esp,0x10
c0014db1:	89 c2                	mov    edx,eax
c0014db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014dca:	a1 3c 42 02 c0       	mov    eax,ds:0xc002423c
c0014dcf:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd2:	89 15 3c 42 02 c0    	mov    DWORD PTR ds:0xc002423c,edx
c0014dd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ddc:	89 02                	mov    DWORD PTR [edx],eax
c0014dde:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014de6:	83 ec 0c             	sub    esp,0xc
c0014de9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ded:	e8 de 9a ff ff       	call   c000e8d0 <malloc>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	89 c3                	mov    ebx,eax
c0014df7:	83 ec 08             	sub    esp,0x8
c0014dfa:	6a 00                	push   0x0
c0014dfc:	53                   	push   ebx
c0014dfd:	e8 5e db ff ff       	call   c0012960 <VAS::VAS(bool)>
c0014e02:	83 c4 10             	add    esp,0x10
c0014e05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e09:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014e0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e13:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014e1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e25:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014e2b:	e8 83 ae ff ff       	call   c000fcb3 <KeInitSignals()>
c0014e30:	89 c2                	mov    edx,eax
c0014e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e36:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e46:	85 c0                	test   eax,eax
c0014e48:	74 42                	je     c0014e8c <Process::Process(char const*, Process*, char**)+0x130>
c0014e4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e4e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e54:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e5e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e68:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e78:	05 0c 01 00 00       	add    eax,0x10c
c0014e7d:	83 ec 08             	sub    esp,0x8
c0014e80:	52                   	push   edx
c0014e81:	50                   	push   eax
c0014e82:	e8 c9 b7 fe ff       	call   c0000650 <strcpy>
c0014e87:	83 c4 10             	add    esp,0x10
c0014e8a:	eb 64                	jmp    c0014ef0 <Process::Process(char const*, Process*, char**)+0x194>
c0014e8c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014e94:	83 ec 0c             	sub    esp,0xc
c0014e97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e9b:	e8 30 9a ff ff       	call   c000e8d0 <malloc>
c0014ea0:	83 c4 10             	add    esp,0x10
c0014ea3:	89 c3                	mov    ebx,eax
c0014ea5:	83 ec 08             	sub    esp,0x8
c0014ea8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eac:	53                   	push   ebx
c0014ead:	e8 84 c6 ff ff       	call   c0011536 <VgaText::VgaText(char const*)>
c0014eb2:	83 c4 10             	add    esp,0x10
c0014eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eb9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ec9:	83 ec 0c             	sub    esp,0xc
c0014ecc:	50                   	push   eax
c0014ecd:	e8 12 bf ff ff       	call   c0010de4 <addToTerminalCycle(VgaText*)>
c0014ed2:	83 c4 10             	add    esp,0x10
c0014ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed9:	05 0c 01 00 00       	add    eax,0x10c
c0014ede:	83 ec 08             	sub    esp,0x8
c0014ee1:	68 82 2a 02 c0       	push   0xc0022a82
c0014ee6:	50                   	push   eax
c0014ee7:	e8 64 b7 fe ff       	call   c0000650 <strcpy>
c0014eec:	83 c4 10             	add    esp,0x10
c0014eef:	90                   	nop
c0014ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef4:	83 c0 0c             	add    eax,0xc
c0014ef7:	83 ec 08             	sub    esp,0x8
c0014efa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014efe:	50                   	push   eax
c0014eff:	e8 4c b7 fe ff       	call   c0000650 <strcpy>
c0014f04:	83 c4 10             	add    esp,0x10
c0014f07:	83 ec 08             	sub    esp,0x8
c0014f0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f12:	e8 d9 fd ff ff       	call   c0014cf0 <Process::addArgs(char**)>
c0014f17:	83 c4 10             	add    esp,0x10
c0014f1a:	83 ec 08             	sub    esp,0x8
c0014f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f25:	e8 c1 ec ff ff       	call   c0013beb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014f2a:	83 c4 10             	add    esp,0x10
c0014f2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014f31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f35:	83 f0 01             	xor    eax,0x1
c0014f38:	88 c2                	mov    dl,al
c0014f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f3e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014f44:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014f49:	83 ec 04             	sub    esp,0x4
c0014f4c:	50                   	push   eax
c0014f4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f51:	68 dc 2a 02 c0       	push   0xc0022adc
c0014f56:	e8 f3 1f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014f5b:	83 c4 10             	add    esp,0x10
c0014f5e:	90                   	nop
c0014f5f:	83 c4 14             	add    esp,0x14
c0014f62:	5b                   	pop    ebx
c0014f63:	5e                   	pop    esi
c0014f64:	c3                   	ret    
c0014f65:	90                   	nop
c0014f66:	66 90                	xchg   ax,ax

c0014f68 <Process::Process(bool, char const*, Process*, char**)>:
c0014f68:	56                   	push   esi
c0014f69:	53                   	push   ebx
c0014f6a:	83 ec 24             	sub    esp,0x24
c0014f6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f71:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f79:	05 0c 02 00 00       	add    eax,0x20c
c0014f7e:	bb 07 00 00 00       	mov    ebx,0x7
c0014f83:	89 c6                	mov    esi,eax
c0014f85:	8d 76 00             	lea    esi,[esi+0x0]
c0014f88:	85 db                	test   ebx,ebx
c0014f8a:	78 14                	js     c0014fa0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014f8c:	83 ec 0c             	sub    esp,0xc
c0014f8f:	56                   	push   esi
c0014f90:	e8 db b3 00 00       	call   c0020370 <ThreadControlBlock::ThreadControlBlock()>
c0014f95:	83 c4 10             	add    esp,0x10
c0014f98:	83 c6 5f             	add    esi,0x5f
c0014f9b:	83 eb 01             	sub    ebx,0x1
c0014f9e:	eb e8                	jmp    c0014f88 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014fa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fa4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014fab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014faf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014fb6:	83 ec 0c             	sub    esp,0xc
c0014fb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fbd:	e8 96 8b ff ff       	call   c000db58 <KeNewProcessEnv(Process*)>
c0014fc2:	83 c4 10             	add    esp,0x10
c0014fc5:	89 c2                	mov    edx,eax
c0014fc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fcb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014fd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fd5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014fde:	a1 3c 42 02 c0       	mov    eax,ds:0xc002423c
c0014fe3:	8d 50 01             	lea    edx,[eax+0x1]
c0014fe6:	89 15 3c 42 02 c0    	mov    DWORD PTR ds:0xc002423c,edx
c0014fec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014ff0:	89 02                	mov    DWORD PTR [edx],eax
c0014ff2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014ffa:	83 ec 0c             	sub    esp,0xc
c0014ffd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015001:	e8 ca 98 ff ff       	call   c000e8d0 <malloc>
c0015006:	83 c4 10             	add    esp,0x10
c0015009:	89 c3                	mov    ebx,eax
c001500b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015010:	83 ec 08             	sub    esp,0x8
c0015013:	50                   	push   eax
c0015014:	53                   	push   ebx
c0015015:	e8 46 d9 ff ff       	call   c0012960 <VAS::VAS(bool)>
c001501a:	83 c4 10             	add    esp,0x10
c001501d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015021:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015027:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001502b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015035:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015039:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001503d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015043:	e8 6b ac ff ff       	call   c000fcb3 <KeInitSignals()>
c0015048:	89 c2                	mov    edx,eax
c001504a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001504e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015054:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015058:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001505e:	85 c0                	test   eax,eax
c0015060:	74 42                	je     c00150a4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015062:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015066:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001506c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015076:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001507c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015080:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015086:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001508c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015090:	05 0c 01 00 00       	add    eax,0x10c
c0015095:	83 ec 08             	sub    esp,0x8
c0015098:	52                   	push   edx
c0015099:	50                   	push   eax
c001509a:	e8 b1 b5 fe ff       	call   c0000650 <strcpy>
c001509f:	83 c4 10             	add    esp,0x10
c00150a2:	eb 64                	jmp    c0015108 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00150a4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00150ac:	83 ec 0c             	sub    esp,0xc
c00150af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00150b3:	e8 18 98 ff ff       	call   c000e8d0 <malloc>
c00150b8:	83 c4 10             	add    esp,0x10
c00150bb:	89 c3                	mov    ebx,eax
c00150bd:	83 ec 08             	sub    esp,0x8
c00150c0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00150c4:	53                   	push   ebx
c00150c5:	e8 6c c4 ff ff       	call   c0011536 <VgaText::VgaText(char const*)>
c00150ca:	83 c4 10             	add    esp,0x10
c00150cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150d1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00150d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e1:	83 ec 0c             	sub    esp,0xc
c00150e4:	50                   	push   eax
c00150e5:	e8 fa bc ff ff       	call   c0010de4 <addToTerminalCycle(VgaText*)>
c00150ea:	83 c4 10             	add    esp,0x10
c00150ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150f1:	05 0c 01 00 00       	add    eax,0x10c
c00150f6:	83 ec 08             	sub    esp,0x8
c00150f9:	68 82 2a 02 c0       	push   0xc0022a82
c00150fe:	50                   	push   eax
c00150ff:	e8 4c b5 fe ff       	call   c0000650 <strcpy>
c0015104:	83 c4 10             	add    esp,0x10
c0015107:	90                   	nop
c0015108:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001510c:	83 c0 0c             	add    eax,0xc
c001510f:	83 ec 08             	sub    esp,0x8
c0015112:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015116:	50                   	push   eax
c0015117:	e8 34 b5 fe ff       	call   c0000650 <strcpy>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	83 ec 08             	sub    esp,0x8
c0015122:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015126:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001512a:	e8 c1 fb ff ff       	call   c0014cf0 <Process::addArgs(char**)>
c001512f:	83 c4 10             	add    esp,0x10
c0015132:	90                   	nop
c0015133:	83 c4 24             	add    esp,0x24
c0015136:	5b                   	pop    ebx
c0015137:	5e                   	pop    esi
c0015138:	c3                   	ret    
c0015139:	8d 76 00             	lea    esi,[esi+0x0]

c001513c <taskStartupFunction>:
c001513c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015141:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015144:	c3                   	ret    
c0015145:	8d 76 00             	lea    esi,[esi+0x0]

c0015148 <KeDisablePreemption()>:
c0015148:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c001514d:	85 c0                	test   eax,eax
c001514f:	75 13                	jne    c0015164 <KeDisablePreemption()+0x1c>
c0015151:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c0015157:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c001515e:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c0015164:	83 c0 01             	add    eax,0x1
c0015167:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c001516c:	c3                   	ret    
c001516d:	8d 76 00             	lea    esi,[esi+0x0]

c0015170 <KeRestorePreemption()>:
c0015170:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015175:	83 e8 01             	sub    eax,0x1
c0015178:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c001517d:	75 0d                	jne    c001518c <KeRestorePreemption()+0x1c>
c001517f:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c0015184:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c0015189:	8d 76 00             	lea    esi,[esi+0x0]
c001518c:	c3                   	ret    
c001518d:	90                   	nop
c001518e:	66 90                	xchg   ax,ax

c0015190 <Process::createThread(void (*)(void*), void*, int)>:
c0015190:	57                   	push   edi
c0015191:	31 c9                	xor    ecx,ecx
c0015193:	56                   	push   esi
c0015194:	53                   	push   ebx
c0015195:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015199:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00151a0:	89 f2                	mov    edx,esi
c00151a2:	66 90                	xchg   ax,ax
c00151a4:	0f b7 c2             	movzx  eax,dx
c00151a7:	80 e2 01             	and    dl,0x1
c00151aa:	74 14                	je     c00151c0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00151ac:	d1 f8                	sar    eax,1
c00151ae:	83 c1 01             	add    ecx,0x1
c00151b1:	83 f9 10             	cmp    ecx,0x10
c00151b4:	89 c2                	mov    edx,eax
c00151b6:	75 ec                	jne    c00151a4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00151b8:	31 db                	xor    ebx,ebx
c00151ba:	89 d8                	mov    eax,ebx
c00151bc:	5b                   	pop    ebx
c00151bd:	5e                   	pop    esi
c00151be:	5f                   	pop    edi
c00151bf:	c3                   	ret    
c00151c0:	b8 01 00 00 00       	mov    eax,0x1
c00151c5:	d3 e0                	shl    eax,cl
c00151c7:	09 c6                	or     esi,eax
c00151c9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00151d0:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00151d3:	c1 e0 05             	shl    eax,0x5
c00151d6:	29 c8                	sub    eax,ecx
c00151d8:	01 d8                	add    eax,ebx
c00151da:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00151e1:	75 0d                	jne    c00151f0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00151e3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00151ed:	8d 76 00             	lea    esi,[esi+0x0]
c00151f0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00151f6:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00151f9:	83 ec 0c             	sub    esp,0xc
c00151fc:	c1 e6 05             	shl    esi,0x5
c00151ff:	29 ce                	sub    esi,ecx
c0015201:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015204:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015207:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001520d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015213:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015219:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015220:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015226:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001522a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015230:	89 ca                	mov    edx,ecx
c0015232:	f7 da                	neg    edx
c0015234:	c1 e2 15             	shl    edx,0x15
c0015237:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001523d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015243:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015247:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015251:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015257:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001525b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015261:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001526b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015275:	68 00 01 00 00       	push   0x100
c001527a:	e8 51 96 ff ff       	call   c000e8d0 <malloc>
c001527f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015282:	58                   	pop    eax
c0015283:	5a                   	pop    edx
c0015284:	53                   	push   ebx
c0015285:	68 cc c6 02 c0       	push   0xc002c6cc
c001528a:	e8 8d ac 00 00       	call   c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001528f:	83 c4 10             	add    esp,0x10
c0015292:	89 d8                	mov    eax,ebx
c0015294:	5b                   	pop    ebx
c0015295:	5e                   	pop    esi
c0015296:	5f                   	pop    edi
c0015297:	c3                   	ret    

c0015298 <Process::createUserThread()>:
c0015298:	83 ec 0c             	sub    esp,0xc
c001529b:	68 80 00 00 00       	push   0x80
c00152a0:	6a 00                	push   0x0
c00152a2:	68 e4 4b 01 c0       	push   0xc0014be4
c00152a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152ab:	50                   	push   eax
c00152ac:	e8 df fe ff ff       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c00152b1:	83 c4 1c             	add    esp,0x1c
c00152b4:	c3                   	ret    
c00152b5:	8d 76 00             	lea    esi,[esi+0x0]

c00152b8 <setupMultitasking(void (*)())>:
c00152b8:	56                   	push   esi
c00152b9:	53                   	push   ebx
c00152ba:	83 ec 04             	sub    esp,0x4
c00152bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152c1:	eb 11                	jmp    c00152d4 <setupMultitasking(void (*)())+0x1c>
c00152c3:	90                   	nop
c00152c4:	83 ec 0c             	sub    esp,0xc
c00152c7:	68 cc c6 02 c0       	push   0xc002c6cc
c00152cc:	e8 8f ab 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00152d1:	83 c4 10             	add    esp,0x10
c00152d4:	83 ec 0c             	sub    esp,0xc
c00152d7:	68 cc c6 02 c0       	push   0xc002c6cc
c00152dc:	e8 5b ab 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	84 c0                	test   al,al
c00152e6:	74 dc                	je     c00152c4 <setupMultitasking(void (*)())+0xc>
c00152e8:	83 ec 0c             	sub    esp,0xc
c00152eb:	68 24 07 00 00       	push   0x724
c00152f0:	e8 db 95 ff ff       	call   c000e8d0 <malloc>
c00152f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00152fc:	6a 00                	push   0x0
c00152fe:	68 86 2a 02 c0       	push   0xc0022a86
c0015303:	6a 01                	push   0x1
c0015305:	50                   	push   eax
c0015306:	89 c3                	mov    ebx,eax
c0015308:	e8 5b fc ff ff       	call   c0014f68 <Process::Process(bool, char const*, Process*, char**)>
c001530d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015313:	83 c4 14             	add    esp,0x14
c0015316:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c001531c:	50                   	push   eax
c001531d:	e8 17 bd ff ff       	call   c0011039 <setActiveTerminal(VgaText*)>
c0015322:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015329:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015333:	83 c8 01             	or     eax,0x1
c0015336:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001533d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015343:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015346:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015350:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015356:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015360:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015366:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015370:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001537a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015380:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015386:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015390:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001539a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00153a1:	e8 2a 95 ff ff       	call   c000e8d0 <malloc>
c00153a6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00153ac:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00153b2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00153b8:	5a                   	pop    edx
c00153b9:	59                   	pop    ecx
c00153ba:	68 82 2a 02 c0       	push   0xc0022a82
c00153bf:	50                   	push   eax
c00153c0:	e8 8b b2 fe ff       	call   c0000650 <strcpy>
c00153c5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00153cc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153d0:	83 c4 14             	add    esp,0x14
c00153d3:	5b                   	pop    ebx
c00153d4:	5e                   	pop    esi
c00153d5:	e9 8f ae fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00153da:	66 90                	xchg   ax,ax

c00153dc <schedule()>:
c00153dc:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c00153e2:	85 d2                	test   edx,edx
c00153e4:	74 0e                	je     c00153f4 <schedule()+0x18>
c00153e6:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c00153f0:	c3                   	ret    
c00153f1:	8d 76 00             	lea    esi,[esi+0x0]
c00153f4:	53                   	push   ebx
c00153f5:	83 ec 14             	sub    esp,0x14
c00153f8:	68 cc c6 02 c0       	push   0xc002c6cc
c00153fd:	e8 3a aa 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015402:	83 c4 10             	add    esp,0x10
c0015405:	84 c0                	test   al,al
c0015407:	75 3f                	jne    c0015448 <schedule()+0x6c>
c0015409:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001540e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015411:	83 fa 01             	cmp    edx,0x1
c0015414:	74 3a                	je     c0015450 <schedule()+0x74>
c0015416:	66 90                	xchg   ax,ax
c0015418:	83 ec 0c             	sub    esp,0xc
c001541b:	68 cc c6 02 c0       	push   0xc002c6cc
c0015420:	e8 33 aa 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015425:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c001542c:	89 c3                	mov    ebx,eax
c001542e:	e8 2d aa 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015433:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001543a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001543d:	e8 fe f7 ff ff       	call   c0014c40 <switchToThread(ThreadControlBlock*)>
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	8d 76 00             	lea    esi,[esi+0x0]
c0015448:	83 c4 08             	add    esp,0x8
c001544b:	5b                   	pop    ebx
c001544c:	c3                   	ret    
c001544d:	8d 76 00             	lea    esi,[esi+0x0]
c0015450:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015457:	83 ec 08             	sub    esp,0x8
c001545a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001545f:	50                   	push   eax
c0015460:	68 cc c6 02 c0       	push   0xc002c6cc
c0015465:	e8 b2 aa 00 00       	call   c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001546a:	83 c4 10             	add    esp,0x10
c001546d:	eb a9                	jmp    c0015418 <schedule()+0x3c>
c001546f:	90                   	nop

c0015470 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015470:	83 ec 0c             	sub    esp,0xc
c0015473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015478:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001547c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001547f:	e8 58 ff ff ff       	call   c00153dc <schedule()>
c0015484:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001548c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015491:	85 c0                	test   eax,eax
c0015493:	75 03                	jne    c0015498 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0015495:	fb                   	sti    
c0015496:	66 90                	xchg   ax,ax
c0015498:	83 c4 0c             	add    esp,0xc
c001549b:	c3                   	ret    

c001549c <blockTask(TaskState)>:
c001549c:	83 ec 0c             	sub    esp,0xc
c001549f:	fa                   	cli    
c00154a0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00154a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154a9:	83 c0 01             	add    eax,0x1
c00154ac:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00154b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00154b9:	e8 1e ff ff ff       	call   c00153dc <schedule()>
c00154be:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00154c6:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00154cc:	85 d2                	test   edx,edx
c00154ce:	75 04                	jne    c00154d4 <blockTask(TaskState)+0x38>
c00154d0:	fb                   	sti    
c00154d1:	8d 76 00             	lea    esi,[esi+0x0]
c00154d4:	83 c4 0c             	add    esp,0xc
c00154d7:	c3                   	ret    

c00154d8 <waitTask(int, int*, int)>:
c00154d8:	83 ec 18             	sub    esp,0x18
c00154db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00154e4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00154e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00154f3:	6a 07                	push   0x7
c00154f5:	e8 a2 ff ff ff       	call   c001549c <blockTask(TaskState)>
c00154fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015505:	85 d2                	test   edx,edx
c0015507:	74 0b                	je     c0015514 <waitTask(int, int*, int)+0x3c>
c0015509:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001550c:	89 02                	mov    DWORD PTR [edx],eax
c001550e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015513:	90                   	nop
c0015514:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015517:	83 c4 0c             	add    esp,0xc
c001551a:	c3                   	ret    
c001551b:	90                   	nop

c001551c <milliTenthSleepUntil(unsigned int)>:
c001551c:	83 ec 0c             	sub    esp,0xc
c001551f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015523:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c0015529:	76 05                	jbe    c0015530 <milliTenthSleepUntil(unsigned int)+0x14>
c001552b:	90                   	nop
c001552c:	83 c4 0c             	add    esp,0xc
c001552f:	c3                   	ret    
c0015530:	fa                   	cli    
c0015531:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015537:	83 ec 08             	sub    esp,0x8
c001553a:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c0015540:	83 c1 01             	add    ecx,0x1
c0015543:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c0015549:	83 c2 01             	add    edx,0x1
c001554c:	89 15 ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,edx
c0015552:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015558:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001555b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015561:	51                   	push   ecx
c0015562:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015567:	e8 b0 a9 00 00       	call   c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001556c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015573:	e8 24 ff ff ff       	call   c001549c <blockTask(TaskState)>
c0015578:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c001557d:	83 c4 10             	add    esp,0x10
c0015580:	83 e8 01             	sub    eax,0x1
c0015583:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015588:	85 c0                	test   eax,eax
c001558a:	75 0c                	jne    c0015598 <milliTenthSleepUntil(unsigned int)+0x7c>
c001558c:	8b 15 a8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a8
c0015592:	85 d2                	test   edx,edx
c0015594:	75 1a                	jne    c00155b0 <milliTenthSleepUntil(unsigned int)+0x94>
c0015596:	66 90                	xchg   ax,ax
c0015598:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00155a0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00155a5:	85 c0                	test   eax,eax
c00155a7:	75 83                	jne    c001552c <milliTenthSleepUntil(unsigned int)+0x10>
c00155a9:	fb                   	sti    
c00155aa:	83 c4 0c             	add    esp,0xc
c00155ad:	c3                   	ret    
c00155ae:	66 90                	xchg   ax,ax
c00155b0:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c00155ba:	e8 1d fe ff ff       	call   c00153dc <schedule()>
c00155bf:	eb d7                	jmp    c0015598 <milliTenthSleepUntil(unsigned int)+0x7c>
c00155c1:	8d 76 00             	lea    esi,[esi+0x0]

c00155c4 <milliTenthSleep(unsigned int)>:
c00155c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00155c8:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c00155cd:	01 c2                	add    edx,eax
c00155cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00155d3:	e9 44 ff ff ff       	jmp    c001551c <milliTenthSleepUntil(unsigned int)>

c00155d8 <sleep(unsigned int)>:
c00155d8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00155e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155e4:	eb de                	jmp    c00155c4 <milliTenthSleep(unsigned int)>
c00155e6:	66 90                	xchg   ax,ax

c00155e8 <taskReturned>:
c00155e8:	83 ec 18             	sub    esp,0x18
c00155eb:	68 08 2b 02 c0       	push   0xc0022b08
c00155f0:	e8 21 96 ff ff       	call   c000ec16 <KePanic(char const*)>
c00155f5:	83 c4 10             	add    esp,0x10
c00155f8:	83 ec 0c             	sub    esp,0xc
c00155fb:	6a 02                	push   0x2
c00155fd:	e8 9a fe ff ff       	call   c001549c <blockTask(TaskState)>
c0015602:	fa                   	cli    
c0015603:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015608:	83 c0 01             	add    eax,0x1
c001560b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015610:	e8 c7 fd ff ff       	call   c00153dc <schedule()>
c0015615:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001561d:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015623:	83 c4 10             	add    esp,0x10
c0015626:	85 d2                	test   edx,edx
c0015628:	75 ce                	jne    c00155f8 <taskReturned+0x10>
c001562a:	fb                   	sti    
c001562b:	eb cb                	jmp    c00155f8 <taskReturned+0x10>
c001562d:	8d 76 00             	lea    esi,[esi+0x0]

c0015630 <Thr::processFromPID(int)>:
c0015630:	57                   	push   edi
c0015631:	56                   	push   esi
c0015632:	53                   	push   ebx
c0015633:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015637:	fa                   	cli    
c0015638:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c001563e:	83 ec 0c             	sub    esp,0xc
c0015641:	68 cc c6 02 c0       	push   0xc002c6cc
c0015646:	83 c1 01             	add    ecx,0x1
c0015649:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c001564f:	e8 04 a8 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015654:	83 c4 10             	add    esp,0x10
c0015657:	89 c7                	mov    edi,eax
c0015659:	eb 15                	jmp    c0015670 <Thr::processFromPID(int)+0x40>
c001565b:	90                   	nop
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015664:	e8 ef a7 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	39 f8                	cmp    eax,edi
c001566e:	74 50                	je     c00156c0 <Thr::processFromPID(int)+0x90>
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	68 cc c6 02 c0       	push   0xc002c6cc
c0015678:	e8 db a7 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001567d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015684:	89 c3                	mov    ebx,eax
c0015686:	e8 d5 a7 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001568b:	58                   	pop    eax
c001568c:	5a                   	pop    edx
c001568d:	53                   	push   ebx
c001568e:	68 cc c6 02 c0       	push   0xc002c6cc
c0015693:	e8 84 a8 00 00       	call   c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015698:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001569b:	83 c4 10             	add    esp,0x10
c001569e:	39 30                	cmp    DWORD PTR [eax],esi
c00156a0:	75 ba                	jne    c001565c <Thr::processFromPID(int)+0x2c>
c00156a2:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00156aa:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c00156b0:	85 c9                	test   ecx,ecx
c00156b2:	74 08                	je     c00156bc <Thr::processFromPID(int)+0x8c>
c00156b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156b7:	90                   	nop
c00156b8:	5b                   	pop    ebx
c00156b9:	5e                   	pop    esi
c00156ba:	5f                   	pop    edi
c00156bb:	c3                   	ret    
c00156bc:	fb                   	sti    
c00156bd:	eb f5                	jmp    c00156b4 <Thr::processFromPID(int)+0x84>
c00156bf:	90                   	nop
c00156c0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00156c8:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00156ce:	31 c0                	xor    eax,eax
c00156d0:	85 d2                	test   edx,edx
c00156d2:	75 e4                	jne    c00156b8 <Thr::processFromPID(int)+0x88>
c00156d4:	fb                   	sti    
c00156d5:	5b                   	pop    ebx
c00156d6:	5e                   	pop    esi
c00156d7:	5f                   	pop    edi
c00156d8:	c3                   	ret    
c00156d9:	8d 76 00             	lea    esi,[esi+0x0]

c00156dc <unblockTask(ThreadControlBlock*)>:
c00156dc:	53                   	push   ebx
c00156dd:	83 ec 08             	sub    esp,0x8
c00156e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156e4:	fa                   	cli    
c00156e5:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00156eb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00156ee:	83 c2 01             	add    edx,0x1
c00156f1:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00156f7:	85 c0                	test   eax,eax
c00156f9:	74 6d                	je     c0015768 <unblockTask(ThreadControlBlock*)+0x8c>
c00156fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00156fe:	83 f8 01             	cmp    eax,0x1
c0015701:	74 39                	je     c001573c <unblockTask(ThreadControlBlock*)+0x60>
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	68 cc c6 02 c0       	push   0xc002c6cc
c001570b:	e8 48 a7 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	85 c0                	test   eax,eax
c0015715:	75 1d                	jne    c0015734 <unblockTask(ThreadControlBlock*)+0x58>
c0015717:	eb 63                	jmp    c001577c <unblockTask(ThreadControlBlock*)+0xa0>
c0015719:	8d 76 00             	lea    esi,[esi+0x0]
c001571c:	83 ec 08             	sub    esp,0x8
c001571f:	50                   	push   eax
c0015720:	68 cc c6 02 c0       	push   0xc002c6cc
c0015725:	e8 3a ac 00 00       	call   c0020364 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001572a:	83 c4 10             	add    esp,0x10
c001572d:	85 c0                	test   eax,eax
c001572f:	74 4b                	je     c001577c <unblockTask(ThreadControlBlock*)+0xa0>
c0015731:	8d 76 00             	lea    esi,[esi+0x0]
c0015734:	39 c3                	cmp    ebx,eax
c0015736:	75 e4                	jne    c001571c <unblockTask(ThreadControlBlock*)+0x40>
c0015738:	eb 12                	jmp    c001574c <unblockTask(ThreadControlBlock*)+0x70>
c001573a:	66 90                	xchg   ax,ax
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	68 a4 2a 02 c0       	push   0xc0022aa4
c0015744:	e8 05 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015754:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015759:	85 c0                	test   eax,eax
c001575b:	75 03                	jne    c0015760 <unblockTask(ThreadControlBlock*)+0x84>
c001575d:	fb                   	sti    
c001575e:	66 90                	xchg   ax,ax
c0015760:	83 c4 08             	add    esp,0x8
c0015763:	5b                   	pop    ebx
c0015764:	c3                   	ret    
c0015765:	8d 76 00             	lea    esi,[esi+0x0]
c0015768:	83 ec 0c             	sub    esp,0xc
c001576b:	68 8d 2a 02 c0       	push   0xc0022a8d
c0015770:	e8 d9 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	eb d2                	jmp    c001574c <unblockTask(ThreadControlBlock*)+0x70>
c001577a:	66 90                	xchg   ax,ax
c001577c:	83 ec 08             	sub    esp,0x8
c001577f:	53                   	push   ebx
c0015780:	68 cc c6 02 c0       	push   0xc002c6cc
c0015785:	e8 92 a7 00 00       	call   c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001578a:	83 c4 10             	add    esp,0x10
c001578d:	eb bd                	jmp    c001574c <unblockTask(ThreadControlBlock*)+0x70>
c001578f:	90                   	nop

c0015790 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015790:	55                   	push   ebp
c0015791:	57                   	push   edi
c0015792:	56                   	push   esi
c0015793:	53                   	push   ebx
c0015794:	83 ec 1c             	sub    esp,0x1c
c0015797:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001579b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001579e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00157a4:	85 ed                	test   ebp,ebp
c00157a6:	7e 28                	jle    c00157d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00157a8:	31 f6                	xor    esi,esi
c00157aa:	66 90                	xchg   ax,ax
c00157ac:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00157b3:	83 ec 0c             	sub    esp,0xc
c00157b6:	83 c6 01             	add    esi,0x1
c00157b9:	57                   	push   edi
c00157ba:	e8 21 91 ff ff       	call   c000e8e0 <free>
c00157bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157c2:	83 c4 10             	add    esp,0x10
c00157c5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00157cb:	7f df                	jg     c00157ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00157cd:	8d 76 00             	lea    esi,[esi+0x0]
c00157d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00157da:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157df:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00157e2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00157e5:	d3 c0                	rol    eax,cl
c00157e7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00157ee:	21 c8                	and    eax,ecx
c00157f0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00157f7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157fa:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015802:	89 f7                	mov    edi,esi
c0015804:	0f 85 72 01 00 00    	jne    c001597c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001580a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015810:	85 ed                	test   ebp,ebp
c0015812:	74 1c                	je     c0015830 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015814:	83 ec 0c             	sub    esp,0xc
c0015817:	55                   	push   ebp
c0015818:	e8 57 82 ff ff       	call   c000da74 <EnvVarContainer::~EnvVarContainer()>
c001581d:	59                   	pop    ecx
c001581e:	5e                   	pop    esi
c001581f:	6a 0c                	push   0xc
c0015821:	55                   	push   ebp
c0015822:	e8 34 6e ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0015827:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	89 f7                	mov    edi,esi
c001582f:	90                   	nop
c0015830:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015836:	85 c0                	test   eax,eax
c0015838:	0f 84 b2 00 00 00    	je     c00158f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001583e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015841:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015845:	31 c9                	xor    ecx,ecx
c0015847:	eb 17                	jmp    c0015860 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015849:	8d 76 00             	lea    esi,[esi+0x0]
c001584c:	83 c1 01             	add    ecx,0x1
c001584f:	83 f9 10             	cmp    ecx,0x10
c0015852:	0f 84 98 00 00 00    	je     c00158f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015858:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001585e:	66 90                	xchg   ax,ax
c0015860:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015867:	d3 fa                	sar    edx,cl
c0015869:	80 e2 01             	and    dl,0x1
c001586c:	74 de                	je     c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001586e:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015871:	c1 e2 05             	shl    edx,0x5
c0015874:	29 ca                	sub    edx,ecx
c0015876:	01 d0                	add    eax,edx
c0015878:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001587e:	83 fd 07             	cmp    ebp,0x7
c0015881:	75 c9                	jne    c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015883:	05 40 02 00 00       	add    eax,0x240
c0015888:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001588b:	83 fd ff             	cmp    ebp,0xffffffff
c001588e:	0f 8c f0 00 00 00    	jl     c0015984 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015894:	0f 84 ae 01 00 00    	je     c0015a48 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001589a:	85 ed                	test   ebp,ebp
c001589c:	0f 84 92 01 00 00    	je     c0015a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00158a2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00158a4:	75 a6                	jne    c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00158a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158aa:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00158b0:	01 d0                	add    eax,edx
c00158b2:	66 90                	xchg   ax,ax
c00158b4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00158c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158ca:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00158d1:	50                   	push   eax
c00158d2:	e8 05 fe ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c00158d7:	83 c4 10             	add    esp,0x10
c00158da:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158dd:	89 f7                	mov    edi,esi
c00158df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158e3:	83 c1 01             	add    ecx,0x1
c00158e6:	83 f9 10             	cmp    ecx,0x10
c00158e9:	0f 85 69 ff ff ff    	jne    c0015858 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00158ef:	90                   	nop
c00158f0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00158f6:	85 c0                	test   eax,eax
c00158f8:	74 62                	je     c001595c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00158fa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015900:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015906:	74 54                	je     c001595c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015908:	83 ec 0c             	sub    esp,0xc
c001590b:	68 cc c6 02 c0       	push   0xc002c6cc
c0015910:	e8 43 a5 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015915:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c001591c:	89 c7                	mov    edi,eax
c001591e:	e8 19 a5 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015923:	83 c4 10             	add    esp,0x10
c0015926:	84 c0                	test   al,al
c0015928:	0f 84 ce 00 00 00    	je     c00159fc <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001592e:	66 90                	xchg   ax,ax
c0015930:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015933:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015939:	85 d2                	test   edx,edx
c001593b:	74 0f                	je     c001594c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001593d:	8b 02                	mov    eax,DWORD PTR [edx]
c001593f:	83 ec 0c             	sub    esp,0xc
c0015942:	52                   	push   edx
c0015943:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015946:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015956:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015959:	8d 76 00             	lea    esi,[esi+0x0]
c001595c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015962:	85 db                	test   ebx,ebx
c0015964:	74 16                	je     c001597c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015966:	83 ec 0c             	sub    esp,0xc
c0015969:	53                   	push   ebx
c001596a:	e8 45 cb ff ff       	call   c00124b4 <VAS::~VAS()>
c001596f:	58                   	pop    eax
c0015970:	5a                   	pop    edx
c0015971:	6a 14                	push   0x14
c0015973:	53                   	push   ebx
c0015974:	e8 e2 6c ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	83 c4 1c             	add    esp,0x1c
c001597f:	5b                   	pop    ebx
c0015980:	5e                   	pop    esi
c0015981:	5f                   	pop    edi
c0015982:	5d                   	pop    ebp
c0015983:	c3                   	ret    
c0015984:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	68 3c 2b 02 c0       	push   0xc0022b3c
c0015990:	e8 81 92 ff ff       	call   c000ec16 <KePanic(char const*)>
c0015995:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015998:	83 c4 10             	add    esp,0x10
c001599b:	89 f7                	mov    edi,esi
c001599d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159a1:	e9 a6 fe ff ff       	jmp    c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00159a6:	66 90                	xchg   ax,ax
c00159a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00159ae:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00159b4:	75 1e                	jne    c00159d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00159b6:	83 ec 0c             	sub    esp,0xc
c00159b9:	68 a4 2b 02 c0       	push   0xc0022ba4
c00159be:	e8 8b 15 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00159c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00159ca:	e8 cd fa ff ff       	call   c001549c <blockTask(TaskState)>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	66 90                	xchg   ax,ax
c00159d4:	83 ec 08             	sub    esp,0x8
c00159d7:	56                   	push   esi
c00159d8:	68 cc c6 02 c0       	push   0xc002c6cc
c00159dd:	e8 3a a5 00 00       	call   c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159e2:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00159e9:	e8 6a a4 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159ee:	83 c4 10             	add    esp,0x10
c00159f1:	39 f8                	cmp    eax,edi
c00159f3:	0f 84 37 ff ff ff    	je     c0015930 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00159f9:	8d 76 00             	lea    esi,[esi+0x0]
c00159fc:	83 ec 0c             	sub    esp,0xc
c00159ff:	68 cc c6 02 c0       	push   0xc002c6cc
c0015a04:	e8 4f a4 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a09:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015a10:	89 c6                	mov    esi,eax
c0015a12:	e8 49 a4 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a17:	83 c4 10             	add    esp,0x10
c0015a1a:	39 f3                	cmp    ebx,esi
c0015a1c:	74 b6                	je     c00159d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a1e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015a21:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a24:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015a2a:	75 a8                	jne    c00159d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a2c:	e9 77 ff ff ff       	jmp    c00159a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015a31:	8d 76 00             	lea    esi,[esi+0x0]
c0015a34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a38:	83 ec 0c             	sub    esp,0xc
c0015a3b:	68 70 2b 02 c0       	push   0xc0022b70
c0015a40:	e9 4b ff ff ff       	jmp    c0015990 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015a45:	8d 76 00             	lea    esi,[esi+0x0]
c0015a48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a4c:	8b 36                	mov    esi,DWORD PTR [esi]
c0015a4e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015a51:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a54:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015a5a:	01 d7                	add    edi,edx
c0015a5c:	89 f8                	mov    eax,edi
c0015a5e:	e9 51 fe ff ff       	jmp    c00158b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015a63:	90                   	nop

c0015a64 <cleanerTaskFunction(void*)>:
c0015a64:	53                   	push   ebx
c0015a65:	83 ec 08             	sub    esp,0x8
c0015a68:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015a70:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015a75:	85 c0                	test   eax,eax
c0015a77:	75 03                	jne    c0015a7c <cleanerTaskFunction(void*)+0x18>
c0015a79:	fb                   	sti    
c0015a7a:	66 90                	xchg   ax,ax
c0015a7c:	fa                   	cli    
c0015a7d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015a82:	83 c0 01             	add    eax,0x1
c0015a85:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015a8c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015a91:	0f 85 c9 00 00 00    	jne    c0015b60 <cleanerTaskFunction(void*)+0xfc>
c0015a97:	83 ec 0c             	sub    esp,0xc
c0015a9a:	6a 02                	push   0x2
c0015a9c:	e8 cf f9 ff ff       	call   c0015470 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015aab:	fa                   	cli    
c0015aac:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015ab2:	8b 1d ac c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6ac
c0015ab8:	83 c1 01             	add    ecx,0x1
c0015abb:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c0015ac1:	83 c3 01             	add    ebx,0x1
c0015ac4:	89 1d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ebx
c0015aca:	fa                   	cli    
c0015acb:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ad0:	83 c0 01             	add    eax,0x1
c0015ad3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015ad8:	eb 2a                	jmp    c0015b04 <cleanerTaskFunction(void*)+0xa0>
c0015ada:	66 90                	xchg   ax,ax
c0015adc:	83 ec 0c             	sub    esp,0xc
c0015adf:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015ae4:	e8 6f a3 00 00       	call   c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ae9:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015af0:	89 c3                	mov    ebx,eax
c0015af2:	e8 69 a3 00 00       	call   c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015af7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015afa:	e8 91 fc ff ff       	call   c0015790 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015aff:	83 c4 10             	add    esp,0x10
c0015b02:	66 90                	xchg   ax,ax
c0015b04:	83 ec 0c             	sub    esp,0xc
c0015b07:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015b0c:	e8 2b a3 00 00       	call   c001fe3c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b11:	83 c4 10             	add    esp,0x10
c0015b14:	84 c0                	test   al,al
c0015b16:	74 c4                	je     c0015adc <cleanerTaskFunction(void*)+0x78>
c0015b18:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015b20:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015b26:	85 d2                	test   edx,edx
c0015b28:	75 02                	jne    c0015b2c <cleanerTaskFunction(void*)+0xc8>
c0015b2a:	fb                   	sti    
c0015b2b:	90                   	nop
c0015b2c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015b31:	83 e8 01             	sub    eax,0x1
c0015b34:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015b39:	0f 85 29 ff ff ff    	jne    c0015a68 <cleanerTaskFunction(void*)+0x4>
c0015b3f:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015b44:	85 c0                	test   eax,eax
c0015b46:	0f 84 1c ff ff ff    	je     c0015a68 <cleanerTaskFunction(void*)+0x4>
c0015b4c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015b56:	e8 81 f8 ff ff       	call   c00153dc <schedule()>
c0015b5b:	e9 08 ff ff ff       	jmp    c0015a68 <cleanerTaskFunction(void*)+0x4>
c0015b60:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015b68:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b6d:	85 c0                	test   eax,eax
c0015b6f:	0f 85 2f ff ff ff    	jne    c0015aa4 <cleanerTaskFunction(void*)+0x40>
c0015b75:	fb                   	sti    
c0015b76:	e9 29 ff ff ff       	jmp    c0015aa4 <cleanerTaskFunction(void*)+0x40>
c0015b7b:	90                   	nop

c0015b7c <terminateTask(int)>:
c0015b7c:	83 ec 14             	sub    esp,0x14
c0015b7f:	fa                   	cli    
c0015b80:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b85:	83 c0 01             	add    eax,0x1
c0015b88:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b8d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015b92:	83 c0 01             	add    eax,0x1
c0015b95:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015b9a:	fa                   	cli    
c0015b9b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015ba4:	83 c0 01             	add    eax,0x1
c0015ba7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015bac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bb1:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015bb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bb9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015bbc:	50                   	push   eax
c0015bbd:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015bc2:	e8 55 a3 00 00       	call   c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015bd6:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015bdb:	85 c0                	test   eax,eax
c0015bdd:	0f 84 81 00 00 00    	je     c0015c64 <terminateTask(int)+0xe8>
c0015be3:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015bea:	83 ec 0c             	sub    esp,0xc
c0015bed:	50                   	push   eax
c0015bee:	e8 e9 fa ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	66 90                	xchg   ax,ax
c0015bf8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c00:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c05:	85 c0                	test   eax,eax
c0015c07:	75 03                	jne    c0015c0c <terminateTask(int)+0x90>
c0015c09:	fb                   	sti    
c0015c0a:	66 90                	xchg   ax,ax
c0015c0c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015c11:	83 e8 01             	sub    eax,0x1
c0015c14:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015c19:	75 09                	jne    c0015c24 <terminateTask(int)+0xa8>
c0015c1b:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015c22:	75 54                	jne    c0015c78 <terminateTask(int)+0xfc>
c0015c24:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c2c:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015c32:	85 c9                	test   ecx,ecx
c0015c34:	75 06                	jne    c0015c3c <terminateTask(int)+0xc0>
c0015c36:	66 90                	xchg   ax,ax
c0015c38:	fb                   	sti    
c0015c39:	8d 76 00             	lea    esi,[esi+0x0]
c0015c3c:	fa                   	cli    
c0015c3d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c42:	83 c0 01             	add    eax,0x1
c0015c45:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c4a:	e8 8d f7 ff ff       	call   c00153dc <schedule()>
c0015c4f:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c57:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015c5d:	85 d2                	test   edx,edx
c0015c5f:	75 db                	jne    c0015c3c <terminateTask(int)+0xc0>
c0015c61:	eb d5                	jmp    c0015c38 <terminateTask(int)+0xbc>
c0015c63:	90                   	nop
c0015c64:	83 ec 0c             	sub    esp,0xc
c0015c67:	68 bb 2a 02 c0       	push   0xc0022abb
c0015c6c:	e8 dd 12 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	eb 82                	jmp    c0015bf8 <terminateTask(int)+0x7c>
c0015c76:	66 90                	xchg   ax,ax
c0015c78:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015c82:	e8 55 f7 ff ff       	call   c00153dc <schedule()>
c0015c87:	eb 9b                	jmp    c0015c24 <terminateTask(int)+0xa8>
c0015c89:	8d 76 00             	lea    esi,[esi+0x0]

c0015c8c <Thr::terminateFromIRQ(int)>:
c0015c8c:	83 ec 18             	sub    esp,0x18
c0015c8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c93:	50                   	push   eax
c0015c94:	e8 e3 fe ff ff       	call   c0015b7c <terminateTask(int)>
c0015c99:	8d 76 00             	lea    esi,[esi+0x0]

c0015c9c <__static_initialization_and_destruction_0(int, int)>:
c0015c9c:	83 ec 0c             	sub    esp,0xc
c0015c9f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015ca4:	0f 85 8e 00 00 00    	jne    c0015d38 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015caa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015cb2:	0f 85 80 00 00 00    	jne    c0015d38 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015cb8:	83 ec 0c             	sub    esp,0xc
c0015cbb:	68 cc c6 02 c0       	push   0xc002c6cc
c0015cc0:	e8 f7 a6 00 00       	call   c00203bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015cc5:	83 c4 10             	add    esp,0x10
c0015cc8:	83 ec 04             	sub    esp,0x4
c0015ccb:	68 90 3a 02 c0       	push   0xc0023a90
c0015cd0:	68 cc c6 02 c0       	push   0xc002c6cc
c0015cd5:	68 6c 03 02 c0       	push   0xc002036c
c0015cda:	e8 2c 69 ff ff       	call   c000c60b <__cxa_atexit>
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	83 ec 0c             	sub    esp,0xc
c0015ce5:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015cea:	e8 cd a6 00 00       	call   c00203bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	83 ec 04             	sub    esp,0x4
c0015cf5:	68 90 3a 02 c0       	push   0xc0023a90
c0015cfa:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015cff:	68 6c 03 02 c0       	push   0xc002036c
c0015d04:	e8 02 69 ff ff       	call   c000c60b <__cxa_atexit>
c0015d09:	83 c4 10             	add    esp,0x10
c0015d0c:	83 ec 0c             	sub    esp,0xc
c0015d0f:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015d14:	e8 a3 a6 00 00       	call   c00203bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	83 ec 04             	sub    esp,0x4
c0015d1f:	68 90 3a 02 c0       	push   0xc0023a90
c0015d24:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015d29:	68 6c 03 02 c0       	push   0xc002036c
c0015d2e:	e8 d8 68 ff ff       	call   c000c60b <__cxa_atexit>
c0015d33:	83 c4 10             	add    esp,0x10
c0015d36:	66 90                	xchg   ax,ax
c0015d38:	90                   	nop
c0015d39:	83 c4 0c             	add    esp,0xc
c0015d3c:	c3                   	ret    
c0015d3d:	8d 76 00             	lea    esi,[esi+0x0]

c0015d40 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015d40:	83 ec 0c             	sub    esp,0xc
c0015d43:	83 ec 08             	sub    esp,0x8
c0015d46:	68 ff ff 00 00       	push   0xffff
c0015d4b:	6a 01                	push   0x1
c0015d4d:	e8 4a ff ff ff       	call   c0015c9c <__static_initialization_and_destruction_0(int, int)>
c0015d52:	83 c4 10             	add    esp,0x10
c0015d55:	83 c4 0c             	add    esp,0xc
c0015d58:	c3                   	ret    

c0015d59 <Vm::inbv(unsigned short)>:
c0015d59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d5d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015d62:	75 06                	jne    c0015d6a <Vm::inbv(unsigned short)+0x11>
c0015d64:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015d69:	c3                   	ret    
c0015d6a:	ec                   	in     al,dx
c0015d6b:	c3                   	ret    

c0015d6c <Vm::outbv(unsigned short, unsigned char)>:
c0015d6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d74:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015d79:	75 25                	jne    c0015da0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015d7b:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015d81:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015d87:	8d 51 01             	lea    edx,[ecx+0x1]
c0015d8a:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015d90:	83 fa 20             	cmp    edx,0x20
c0015d93:	75 0c                	jne    c0015da1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015d95:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015d9f:	c3                   	ret    
c0015da0:	ee                   	out    dx,al
c0015da1:	c3                   	ret    

c0015da2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015da2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015da7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015dac:	c1 e0 04             	shl    eax,0x4
c0015daf:	01 d0                	add    eax,edx
c0015db1:	c3                   	ret    

c0015db2 <Vm::getSegment(unsigned int)>:
c0015db2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015db6:	c1 e8 10             	shr    eax,0x10
c0015db9:	c3                   	ret    

c0015dba <Vm::getOffset(unsigned int)>:
c0015dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dbe:	c3                   	ret    

c0015dbf <Vm::mainloop2()>:
c0015dbf:	83 ec 18             	sub    esp,0x18
c0015dc2:	fa                   	cli    
c0015dc3:	6a 02                	push   0x2
c0015dc5:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015dcb:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015dd2:	e8 99 f6 ff ff       	call   c0015470 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015dd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ddc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015de0:	52                   	push   edx
c0015de1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015de5:	52                   	push   edx
c0015de6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015dea:	52                   	push   edx
c0015deb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015def:	50                   	push   eax
c0015df0:	e8 1a a4 fe ff       	call   c000020f <goToVM86>
c0015df5:	83 c4 2c             	add    esp,0x2c
c0015df8:	c3                   	ret    

c0015df9 <Vm::mainVm8086Loop(void*)>:
c0015df9:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015e00:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015e07:	75 01                	jne    c0015e0a <Vm::mainVm8086Loop(void*)+0x11>
c0015e09:	fb                   	sti    
c0015e0a:	eb b3                	jmp    c0015dbf <Vm::mainloop2()>

c0015e0c <Vm::mainloop3(unsigned long)>:
c0015e0c:	83 ec 18             	sub    esp,0x18
c0015e0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e13:	fa                   	cli    
c0015e14:	6a 02                	push   0x2
c0015e16:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e1c:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015e23:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015e28:	e8 43 f6 ff ff       	call   c0015470 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015e2d:	83 c4 1c             	add    esp,0x1c
c0015e30:	eb 8d                	jmp    c0015dbf <Vm::mainloop2()>

c0015e32 <Vm::initialise8086()>:
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	68 80 00 00 00       	push   0x80
c0015e3a:	6a 00                	push   0x0
c0015e3c:	68 f9 5d 01 c0       	push   0xc0015df9
c0015e41:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015e47:	e8 44 f3 ff ff       	call   c0015190 <Process::createThread(void (*)(void*), void*, int)>
c0015e4c:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015e53:	68 10 01 00 00       	push   0x110
c0015e58:	6a 00                	push   0x0
c0015e5a:	6a 00                	push   0x0
c0015e5c:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015e61:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015e66:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e6c:	e8 a5 c9 ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015e71:	83 c4 2c             	add    esp,0x2c
c0015e74:	c3                   	ret    

c0015e75 <Vm::resetConventionalMemory8086()>:
c0015e75:	c3                   	ret    

c0015e76 <Vm::finish8086()>:
c0015e76:	53                   	push   ebx
c0015e77:	83 ec 08             	sub    esp,0x8
c0015e7a:	fa                   	cli    
c0015e7b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e81:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015e88:	75 18                	jne    c0015ea2 <Vm::finish8086()+0x2c>
c0015e8a:	e8 4d f5 ff ff       	call   c00153dc <schedule()>
c0015e8f:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015e96:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015e9d:	75 db                	jne    c0015e7a <Vm::finish8086()+0x4>
c0015e9f:	fb                   	sti    
c0015ea0:	eb d8                	jmp    c0015e7a <Vm::finish8086()+0x4>
c0015ea2:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015ea9:	83 ec 0c             	sub    esp,0xc
c0015eac:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015eb2:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015eb8:	e8 1f f8 ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0015ebd:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015ec4:	83 c4 10             	add    esp,0x10
c0015ec7:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015ece:	75 01                	jne    c0015ed1 <Vm::finish8086()+0x5b>
c0015ed0:	fb                   	sti    
c0015ed1:	83 c4 08             	add    esp,0x8
c0015ed4:	89 d8                	mov    eax,ebx
c0015ed6:	5b                   	pop    ebx
c0015ed7:	c3                   	ret    

c0015ed8 <Vm::getOutput8086(unsigned char*)>:
c0015ed8:	57                   	push   edi
c0015ed9:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015edf:	56                   	push   esi
c0015ee0:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0015ee5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015ee9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015eeb:	5e                   	pop    esi
c0015eec:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0015ef1:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015efb:	5f                   	pop    edi
c0015efc:	c3                   	ret    

c0015efd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015efd:	55                   	push   ebp
c0015efe:	57                   	push   edi
c0015eff:	56                   	push   esi
c0015f00:	53                   	push   ebx
c0015f01:	83 ec 2c             	sub    esp,0x2c
c0015f04:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015f08:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0015f0f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f13:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0015f17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f1b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015f1f:	75 5d                	jne    c0015f7e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015f21:	83 ec 0c             	sub    esp,0xc
c0015f24:	68 14 01 00 00       	push   0x114
c0015f29:	e8 a2 89 ff ff       	call   c000e8d0 <malloc>
c0015f2e:	83 c4 0c             	add    esp,0xc
c0015f31:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015f37:	68 cc 2b 02 c0       	push   0xc0022bcc
c0015f3c:	50                   	push   eax
c0015f3d:	89 c7                	mov    edi,eax
c0015f3f:	e8 c8 21 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0015f44:	58                   	pop    eax
c0015f45:	5a                   	pop    edx
c0015f46:	6a 12                	push   0x12
c0015f48:	57                   	push   edi
c0015f49:	e8 dc 21 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0015f4e:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f50:	59                   	pop    ecx
c0015f51:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0015f55:	51                   	push   ecx
c0015f56:	6a 00                	push   0x0
c0015f58:	6a 00                	push   0x0
c0015f5a:	68 00 00 11 00       	push   0x110000
c0015f5f:	57                   	push   edi
c0015f60:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015f63:	83 c4 14             	add    esp,0x14
c0015f66:	57                   	push   edi
c0015f67:	e8 1c 22 ff ff       	call   c0008188 <File::close()>
c0015f6c:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f74:	83 c4 10             	add    esp,0x10
c0015f77:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c0015f7e:	fa                   	cli    
c0015f7f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f85:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c0015f8c:	75 18                	jne    c0015fa6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015f8e:	e8 49 f4 ff ff       	call   c00153dc <schedule()>
c0015f93:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015f9a:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015fa1:	75 db                	jne    c0015f7e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015fa3:	fb                   	sti    
c0015fa4:	eb d8                	jmp    c0015f7e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015fa6:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015fb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fb4:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0015fb9:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0015fbd:	0f b7 f6             	movzx  esi,si
c0015fc0:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0015fc4:	0f b7 db             	movzx  ebx,bx
c0015fc7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015fcb:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0015fcf:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015fd3:	50                   	push   eax
c0015fd4:	6a 20                	push   0x20
c0015fd6:	6a 00                	push   0x0
c0015fd8:	68 20 c7 02 c0       	push   0xc002c720
c0015fdd:	e8 0e a5 fe ff       	call   c00004f0 <memset>
c0015fe2:	5a                   	pop    edx
c0015fe3:	59                   	pop    ecx
c0015fe4:	56                   	push   esi
c0015fe5:	53                   	push   ebx
c0015fe6:	e8 b7 fd ff ff       	call   c0015da2 <Vm::realToLinear(unsigned short, unsigned short)>
c0015feb:	83 c4 10             	add    esp,0x10
c0015fee:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015ff2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0015ff6:	89 c7                	mov    edi,eax
c0015ff8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ffa:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c0016001:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0016008:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001600f:	75 01                	jne    c0016012 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0016011:	fb                   	sti    
c0016012:	83 ec 0c             	sub    esp,0xc
c0016015:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c001601b:	e8 bc f6 ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0016020:	83 c4 3c             	add    esp,0x3c
c0016023:	b0 01                	mov    al,0x1
c0016025:	5b                   	pop    ebx
c0016026:	5e                   	pop    esi
c0016027:	5f                   	pop    edi
c0016028:	5d                   	pop    ebp
c0016029:	c3                   	ret    

c001602a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001602a:	55                   	push   ebp
c001602b:	57                   	push   edi
c001602c:	56                   	push   esi
c001602d:	53                   	push   ebx
c001602e:	83 ec 2c             	sub    esp,0x2c
c0016031:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016035:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c001603c:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016040:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016044:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016048:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001604c:	75 5d                	jne    c00160ab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001604e:	83 ec 0c             	sub    esp,0xc
c0016051:	68 14 01 00 00       	push   0x114
c0016056:	e8 75 88 ff ff       	call   c000e8d0 <malloc>
c001605b:	83 c4 0c             	add    esp,0xc
c001605e:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0016064:	68 cc 2b 02 c0       	push   0xc0022bcc
c0016069:	50                   	push   eax
c001606a:	89 c3                	mov    ebx,eax
c001606c:	e8 9b 20 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0016071:	58                   	pop    eax
c0016072:	5a                   	pop    edx
c0016073:	6a 12                	push   0x12
c0016075:	53                   	push   ebx
c0016076:	e8 af 20 ff ff       	call   c000812a <File::open(FileOpenMode)>
c001607b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001607d:	59                   	pop    ecx
c001607e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016082:	52                   	push   edx
c0016083:	6a 00                	push   0x0
c0016085:	6a 00                	push   0x0
c0016087:	68 00 00 11 00       	push   0x110000
c001608c:	53                   	push   ebx
c001608d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016090:	83 c4 14             	add    esp,0x14
c0016093:	53                   	push   ebx
c0016094:	e8 ef 20 ff ff       	call   c0008188 <File::close()>
c0016099:	8b 03                	mov    eax,DWORD PTR [ebx]
c001609b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001609e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c00160ab:	50                   	push   eax
c00160ac:	50                   	push   eax
c00160ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00160b1:	68 e7 2b 02 c0       	push   0xc0022be7
c00160b6:	e8 93 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00160bb:	83 c4 10             	add    esp,0x10
c00160be:	fa                   	cli    
c00160bf:	8a 1d 09 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c709
c00160c5:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c00160cb:	84 db                	test   bl,bl
c00160cd:	75 18                	jne    c00160e7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c00160cf:	e8 08 f3 ff ff       	call   c00153dc <schedule()>
c00160d4:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00160db:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00160e2:	75 da                	jne    c00160be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00160e4:	fb                   	sti    
c00160e5:	eb d7                	jmp    c00160be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00160e7:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c00160f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160f5:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c00160fa:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00160fe:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016102:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016106:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001610a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001610e:	50                   	push   eax
c001610f:	6a 20                	push   0x20
c0016111:	6a 00                	push   0x0
c0016113:	68 20 c7 02 c0       	push   0xc002c720
c0016118:	e8 d3 a3 fe ff       	call   c00004f0 <memset>
c001611d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016124:	e8 a7 87 ff ff       	call   c000e8d0 <malloc>
c0016129:	83 c4 0c             	add    esp,0xc
c001612c:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0016132:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016136:	89 c5                	mov    ebp,eax
c0016138:	50                   	push   eax
c0016139:	e8 ce 1f ff ff       	call   c000810c <File::File(char const*, Process*)>
c001613e:	83 c4 10             	add    esp,0x10
c0016141:	85 ed                	test   ebp,ebp
c0016143:	75 0a                	jne    c001614f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0016145:	83 ec 0c             	sub    esp,0xc
c0016148:	68 09 2c 02 c0       	push   0xc0022c09
c001614d:	eb 2b                	jmp    c001617a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c001614f:	50                   	push   eax
c0016150:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016154:	50                   	push   eax
c0016155:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016159:	50                   	push   eax
c001615a:	55                   	push   ebp
c001615b:	e8 cc 22 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0016160:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016164:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016168:	83 c4 10             	add    esp,0x10
c001616b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016170:	74 28                	je     c001619a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c0016172:	83 ec 0c             	sub    esp,0xc
c0016175:	68 1d 2c 02 c0       	push   0xc0022c1d
c001617a:	e8 97 8a ff ff       	call   c000ec16 <KePanic(char const*)>
c001617f:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0016186:	83 c4 10             	add    esp,0x10
c0016189:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0016190:	75 01                	jne    c0016193 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0016192:	fb                   	sti    
c0016193:	31 db                	xor    ebx,ebx
c0016195:	e9 92 00 00 00       	jmp    c001622c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c001619a:	51                   	push   ecx
c001619b:	51                   	push   ecx
c001619c:	6a 01                	push   0x1
c001619e:	55                   	push   ebp
c001619f:	e8 86 1f ff ff       	call   c000812a <File::open(FileOpenMode)>
c00161a4:	83 c4 10             	add    esp,0x10
c00161a7:	85 c0                	test   eax,eax
c00161a9:	74 27                	je     c00161d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c00161ab:	83 ec 0c             	sub    esp,0xc
c00161ae:	68 36 2c 02 c0       	push   0xc0022c36
c00161b3:	e8 5e 8a ff ff       	call   c000ec16 <KePanic(char const*)>
c00161b8:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00161bf:	83 c4 10             	add    esp,0x10
c00161c2:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00161c9:	75 c8                	jne    c0016193 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c00161cb:	fb                   	sti    
c00161cc:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00161d0:	eb 5a                	jmp    c001622c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00161d2:	50                   	push   eax
c00161d3:	0f b7 ff             	movzx  edi,di
c00161d6:	50                   	push   eax
c00161d7:	0f b7 f6             	movzx  esi,si
c00161da:	57                   	push   edi
c00161db:	56                   	push   esi
c00161dc:	e8 c1 fb ff ff       	call   c0015da2 <Vm::realToLinear(unsigned short, unsigned short)>
c00161e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00161e4:	5a                   	pop    edx
c00161e5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00161e9:	56                   	push   esi
c00161ea:	50                   	push   eax
c00161eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00161ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00161f3:	55                   	push   ebp
c00161f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161f7:	83 c4 14             	add    esp,0x14
c00161fa:	55                   	push   ebp
c00161fb:	e8 88 1f ff ff       	call   c0008188 <File::close()>
c0016200:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c0016207:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001620e:	83 c4 10             	add    esp,0x10
c0016211:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0016218:	75 01                	jne    c001621b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c001621a:	fb                   	sti    
c001621b:	83 ec 0c             	sub    esp,0xc
c001621e:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0016224:	e8 b3 f4 ff ff       	call   c00156dc <unblockTask(ThreadControlBlock*)>
c0016229:	83 c4 10             	add    esp,0x10
c001622c:	83 c4 2c             	add    esp,0x2c
c001622f:	88 d8                	mov    al,bl
c0016231:	5b                   	pop    ebx
c0016232:	5e                   	pop    esi
c0016233:	5f                   	pop    edi
c0016234:	5d                   	pop    ebp
c0016235:	c3                   	ret    

c0016236 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016236:	57                   	push   edi
c0016237:	56                   	push   esi
c0016238:	53                   	push   ebx
c0016239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001623d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016241:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016245:	83 e8 06             	sub    eax,0x6
c0016248:	0f b7 c0             	movzx  eax,ax
c001624b:	50                   	push   eax
c001624c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016251:	50                   	push   eax
c0016252:	e8 4b fb ff ff       	call   c0015da2 <Vm::realToLinear(unsigned short, unsigned short)>
c0016257:	5a                   	pop    edx
c0016258:	59                   	pop    ecx
c0016259:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001625c:	8d 51 fa             	lea    edx,[ecx-0x6]
c001625f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016262:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016268:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001626b:	8d 51 02             	lea    edx,[ecx+0x2]
c001626e:	66 89 10             	mov    WORD PTR [eax],dx
c0016271:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016275:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016279:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001627d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016280:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016284:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001628a:	89 f1                	mov    ecx,esi
c001628c:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016290:	89 f2                	mov    edx,esi
c0016292:	0f b6 d6             	movzx  edx,dh
c0016295:	0f b6 f1             	movzx  esi,cl
c0016298:	74 0a                	je     c00162a4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001629a:	c1 e2 08             	shl    edx,0x8
c001629d:	09 f2                	or     edx,esi
c001629f:	80 ce 02             	or     dh,0x2
c00162a2:	eb 08                	jmp    c00162ac <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00162a4:	c1 e2 08             	shl    edx,0x8
c00162a7:	09 f2                	or     edx,esi
c00162a9:	80 e6 fd             	and    dh,0xfd
c00162ac:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00162b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00162b9:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00162c1:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00162c4:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00162cc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00162cf:	5b                   	pop    ebx
c00162d0:	5e                   	pop    esi
c00162d1:	5f                   	pop    edi
c00162d2:	c3                   	ret    

c00162d3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00162d3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162d8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162dd:	c1 e0 04             	shl    eax,0x4
c00162e0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00162e3:	c3                   	ret    

c00162e4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00162e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162e9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162ee:	c1 e0 04             	shl    eax,0x4
c00162f1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00162f5:	c3                   	ret    

c00162f6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00162f6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016300:	c1 e0 04             	shl    eax,0x4
c0016303:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016306:	c3                   	ret    

c0016307 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016307:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001630c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016311:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016315:	c1 e0 04             	shl    eax,0x4
c0016318:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001631b:	c3                   	ret    

c001631c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001631c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016321:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016326:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001632a:	c1 e0 04             	shl    eax,0x4
c001632d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016331:	c3                   	ret    

c0016332 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016332:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016337:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001633c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016340:	c1 e0 04             	shl    eax,0x4
c0016343:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016346:	c3                   	ret    

c0016347 <Vm::faultHandler(regs*)>:
c0016347:	55                   	push   ebp
c0016348:	57                   	push   edi
c0016349:	56                   	push   esi
c001634a:	53                   	push   ebx
c001634b:	83 ec 2c             	sub    esp,0x2c
c001634e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016352:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016355:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016359:	0f b7 f8             	movzx  edi,ax
c001635c:	0f b7 c0             	movzx  eax,ax
c001635f:	52                   	push   edx
c0016360:	50                   	push   eax
c0016361:	e8 3c fa ff ff       	call   c0015da2 <Vm::realToLinear(unsigned short, unsigned short)>
c0016366:	5a                   	pop    edx
c0016367:	59                   	pop    ecx
c0016368:	89 c1                	mov    ecx,eax
c001636a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001636d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016371:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016376:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001637a:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001637d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016381:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016386:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001638a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001638e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016392:	e8 0b fa ff ff       	call   c0015da2 <Vm::realToLinear(unsigned short, unsigned short)>
c0016397:	5e                   	pop    esi
c0016398:	be 06 00 00 00       	mov    esi,0x6
c001639d:	5d                   	pop    ebp
c001639e:	31 ed                	xor    ebp,ebp
c00163a0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00163a5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00163a8:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00163ae:	0f 84 74 02 00 00    	je     c0016628 <Vm::faultHandler(regs*)+0x2e1>
c00163b4:	0f 87 94 00 00 00    	ja     c001644e <Vm::faultHandler(regs*)+0x107>
c00163ba:	83 fa 66             	cmp    edx,0x66
c00163bd:	0f 84 e2 01 00 00    	je     c00165a5 <Vm::faultHandler(regs*)+0x25e>
c00163c3:	77 47                	ja     c001640c <Vm::faultHandler(regs*)+0xc5>
c00163c5:	83 fa 36             	cmp    edx,0x36
c00163c8:	0f 84 ca 01 00 00    	je     c0016598 <Vm::faultHandler(regs*)+0x251>
c00163ce:	77 1a                	ja     c00163ea <Vm::faultHandler(regs*)+0xa3>
c00163d0:	83 fa 26             	cmp    edx,0x26
c00163d3:	0f 84 98 01 00 00    	je     c0016571 <Vm::faultHandler(regs*)+0x22a>
c00163d9:	83 fa 2e             	cmp    edx,0x2e
c00163dc:	0f 85 27 06 00 00    	jne    c0016a09 <Vm::faultHandler(regs*)+0x6c2>
c00163e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163e5:	31 f6                	xor    esi,esi
c00163e7:	41                   	inc    ecx
c00163e8:	eb bb                	jmp    c00163a5 <Vm::faultHandler(regs*)+0x5e>
c00163ea:	83 fa 64             	cmp    edx,0x64
c00163ed:	0f 84 8b 01 00 00    	je     c001657e <Vm::faultHandler(regs*)+0x237>
c00163f3:	0f 87 92 01 00 00    	ja     c001658b <Vm::faultHandler(regs*)+0x244>
c00163f9:	83 fa 3e             	cmp    edx,0x3e
c00163fc:	0f 85 07 06 00 00    	jne    c0016a09 <Vm::faultHandler(regs*)+0x6c2>
c0016402:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016405:	be 01 00 00 00       	mov    esi,0x1
c001640a:	eb db                	jmp    c00163e7 <Vm::faultHandler(regs*)+0xa0>
c001640c:	83 fa 6d             	cmp    edx,0x6d
c001640f:	0f 84 34 03 00 00    	je     c0016749 <Vm::faultHandler(regs*)+0x402>
c0016415:	77 17                	ja     c001642e <Vm::faultHandler(regs*)+0xe7>
c0016417:	83 fa 67             	cmp    edx,0x67
c001641a:	0f 84 92 01 00 00    	je     c00165b2 <Vm::faultHandler(regs*)+0x26b>
c0016420:	83 fa 6c             	cmp    edx,0x6c
c0016423:	0f 84 b1 02 00 00    	je     c00166da <Vm::faultHandler(regs*)+0x393>
c0016429:	e9 db 05 00 00       	jmp    c0016a09 <Vm::faultHandler(regs*)+0x6c2>
c001642e:	83 fa 6f             	cmp    edx,0x6f
c0016431:	0f 84 40 04 00 00    	je     c0016877 <Vm::faultHandler(regs*)+0x530>
c0016437:	0f 82 a2 03 00 00    	jb     c00167df <Vm::faultHandler(regs*)+0x498>
c001643d:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016443:	0f 84 76 01 00 00    	je     c00165bf <Vm::faultHandler(regs*)+0x278>
c0016449:	e9 bb 05 00 00       	jmp    c0016a09 <Vm::faultHandler(regs*)+0x6c2>
c001644e:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016454:	0f 84 57 05 00 00    	je     c00169b1 <Vm::faultHandler(regs*)+0x66a>
c001645a:	0f 87 a9 00 00 00    	ja     c0016509 <Vm::faultHandler(regs*)+0x1c2>
c0016460:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016466:	0f 84 d6 04 00 00    	je     c0016942 <Vm::faultHandler(regs*)+0x5fb>
c001646c:	77 78                	ja     c00164e6 <Vm::faultHandler(regs*)+0x19f>
c001646e:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016474:	0f 84 0e 02 00 00    	je     c0016688 <Vm::faultHandler(regs*)+0x341>
c001647a:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016480:	0f 85 83 05 00 00    	jne    c0016a09 <Vm::faultHandler(regs*)+0x6c2>
c0016486:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001648a:	89 d1                	mov    ecx,edx
c001648c:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c001648f:	c1 e1 08             	shl    ecx,0x8
c0016492:	09 ca                	or     edx,ecx
c0016494:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016497:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001649b:	89 d1                	mov    ecx,edx
c001649d:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00164a1:	c1 e1 08             	shl    ecx,0x8
c00164a4:	09 ca                	or     edx,ecx
c00164a6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00164a9:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00164ad:	89 d1                	mov    ecx,edx
c00164af:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00164b3:	c1 e1 08             	shl    ecx,0x8
c00164b6:	09 ca                	or     edx,ecx
c00164b8:	81 ca 00 02 02 00    	or     edx,0x20200
c00164be:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00164c1:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00164c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00164cb:	d1 e8                	shr    eax,1
c00164cd:	83 e0 01             	and    eax,0x1
c00164d0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00164d3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00164d6:	83 c0 06             	add    eax,0x6
c00164d9:	25 ff ff 00 00       	and    eax,0xffff
c00164de:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00164e1:	e9 1f 05 00 00       	jmp    c0016a05 <Vm::faultHandler(regs*)+0x6be>
c00164e6:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00164ec:	0f 84 95 04 00 00    	je     c0016987 <Vm::faultHandler(regs*)+0x640>
c00164f2:	0f 82 66 04 00 00    	jb     c001695e <Vm::faultHandler(regs*)+0x617>
c00164f8:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00164fe:	0f 84 9a 04 00 00    	je     c001699e <Vm::faultHandler(regs*)+0x657>
c0016504:	e9 00 05 00 00       	jmp    c0016a09 <Vm::faultHandler(regs*)+0x6c2>
c0016509:	81 fa ef 00 00 00    	cmp    edx,0xef
c001650f:	0f 84 dd 04 00 00    	je     c00169f2 <Vm::faultHandler(regs*)+0x6ab>
c0016515:	77 2e                	ja     c0016545 <Vm::faultHandler(regs*)+0x1fe>
c0016517:	81 fa ed 00 00 00    	cmp    edx,0xed
c001651d:	0f 84 aa 04 00 00    	je     c00169cd <Vm::faultHandler(regs*)+0x686>
c0016523:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016529:	0f 85 da 04 00 00    	jne    c0016a09 <Vm::faultHandler(regs*)+0x6c2>
c001652f:	50                   	push   eax
c0016530:	50                   	push   eax
c0016531:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016535:	50                   	push   eax
c0016536:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001653a:	50                   	push   eax
c001653b:	e8 2c f8 ff ff       	call   c0015d6c <Vm::outbv(unsigned short, unsigned char)>
c0016540:	e9 a5 04 00 00       	jmp    c00169ea <Vm::faultHandler(regs*)+0x6a3>
c0016545:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001654b:	0f 84 6d 01 00 00    	je     c00166be <Vm::faultHandler(regs*)+0x377>
c0016551:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016557:	0f 84 6f 01 00 00    	je     c00166cc <Vm::faultHandler(regs*)+0x385>
c001655d:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016563:	0f 85 a0 04 00 00    	jne    c0016a09 <Vm::faultHandler(regs*)+0x6c2>
c0016569:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001656c:	e9 76 fe ff ff       	jmp    c00163e7 <Vm::faultHandler(regs*)+0xa0>
c0016571:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016574:	be 02 00 00 00       	mov    esi,0x2
c0016579:	e9 69 fe ff ff       	jmp    c00163e7 <Vm::faultHandler(regs*)+0xa0>
c001657e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016581:	be 03 00 00 00       	mov    esi,0x3
c0016586:	e9 5c fe ff ff       	jmp    c00163e7 <Vm::faultHandler(regs*)+0xa0>
c001658b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001658e:	be 04 00 00 00       	mov    esi,0x4
c0016593:	e9 4f fe ff ff       	jmp    c00163e7 <Vm::faultHandler(regs*)+0xa0>
c0016598:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001659b:	be 05 00 00 00       	mov    esi,0x5
c00165a0:	e9 42 fe ff ff       	jmp    c00163e7 <Vm::faultHandler(regs*)+0xa0>
c00165a5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165a8:	bd 01 00 00 00       	mov    ebp,0x1
c00165ad:	e9 35 fe ff ff       	jmp    c00163e7 <Vm::faultHandler(regs*)+0xa0>
c00165b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165b5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00165ba:	e9 28 fe ff ff       	jmp    c00163e7 <Vm::faultHandler(regs*)+0xa0>
c00165bf:	83 e5 01             	and    ebp,0x1
c00165c2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00165c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165c9:	74 30                	je     c00165fb <Vm::faultHandler(regs*)+0x2b4>
c00165cb:	83 e9 04             	sub    ecx,0x4
c00165ce:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00165d4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00165da:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00165dd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00165e0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165e6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00165ea:	0f 84 12 04 00 00    	je     c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c00165f0:	80 ce 02             	or     dh,0x2
c00165f3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00165f6:	e9 07 04 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c00165fb:	83 e9 02             	sub    ecx,0x2
c00165fe:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016604:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016607:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001660b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016611:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016615:	74 05                	je     c001661c <Vm::faultHandler(regs*)+0x2d5>
c0016617:	80 ce 02             	or     dh,0x2
c001661a:	eb 03                	jmp    c001661f <Vm::faultHandler(regs*)+0x2d8>
c001661c:	80 e6 fd             	and    dh,0xfd
c001661f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016623:	e9 da 03 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c0016628:	83 e5 01             	and    ebp,0x1
c001662b:	74 2a                	je     c0016657 <Vm::faultHandler(regs*)+0x310>
c001662d:	8b 10                	mov    edx,DWORD PTR [eax]
c001662f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016635:	81 ca 00 02 02 00    	or     edx,0x20200
c001663b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001663e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016640:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016646:	c1 e8 09             	shr    eax,0x9
c0016649:	83 e0 01             	and    eax,0x1
c001664c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001664f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016652:	83 c0 04             	add    eax,0x4
c0016655:	eb 24                	jmp    c001667b <Vm::faultHandler(regs*)+0x334>
c0016657:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001665a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016660:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016663:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016666:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001666c:	c1 e8 09             	shr    eax,0x9
c001666f:	83 e0 01             	and    eax,0x1
c0016672:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016675:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016678:	83 c0 02             	add    eax,0x2
c001667b:	25 ff ff 00 00       	and    eax,0xffff
c0016680:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016683:	e9 7a 03 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c0016688:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001668c:	3d ee 00 00 00       	cmp    eax,0xee
c0016691:	75 10                	jne    c00166a3 <Vm::faultHandler(regs*)+0x35c>
c0016693:	83 ec 0c             	sub    esp,0xc
c0016696:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016699:	e8 6e f7 ff ff       	call   c0015e0c <Vm::mainloop3(unsigned long)>
c001669e:	e9 4a 03 00 00       	jmp    c00169ed <Vm::faultHandler(regs*)+0x6a6>
c00166a3:	83 ec 0c             	sub    esp,0xc
c00166a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00166aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166ae:	51                   	push   ecx
c00166af:	50                   	push   eax
c00166b0:	53                   	push   ebx
c00166b1:	e8 80 fb ff ff       	call   c0016236 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00166b6:	83 c4 20             	add    esp,0x20
c00166b9:	e9 47 03 00 00       	jmp    c0016a05 <Vm::faultHandler(regs*)+0x6be>
c00166be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00166c7:	e9 36 03 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c00166cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d1:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00166d5:	e9 28 03 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c00166da:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00166df:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00166e2:	74 2b                	je     c001670f <Vm::faultHandler(regs*)+0x3c8>
c00166e4:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00166eb:	76 22                	jbe    c001670f <Vm::faultHandler(regs*)+0x3c8>
c00166ed:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00166f1:	50                   	push   eax
c00166f2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00166f6:	50                   	push   eax
c00166f7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00166fb:	50                   	push   eax
c00166fc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016700:	50                   	push   eax
c0016701:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016705:	50                   	push   eax
c0016706:	6a 6c                	push   0x6c
c0016708:	6a 6c                	push   0x6c
c001670a:	e9 c0 01 00 00       	jmp    c00168cf <Vm::faultHandler(regs*)+0x588>
c001670f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016713:	83 ec 0c             	sub    esp,0xc
c0016716:	0f b7 f6             	movzx  esi,si
c0016719:	50                   	push   eax
c001671a:	e8 3a f6 ff ff       	call   c0015d59 <Vm::inbv(unsigned short)>
c001671f:	83 c4 0c             	add    esp,0xc
c0016722:	0f b6 c0             	movzx  eax,al
c0016725:	50                   	push   eax
c0016726:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001672a:	50                   	push   eax
c001672b:	56                   	push   esi
c001672c:	e8 d6 fb ff ff       	call   c0016307 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016731:	83 c4 10             	add    esp,0x10
c0016734:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016737:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001673b:	74 03                	je     c0016740 <Vm::faultHandler(regs*)+0x3f9>
c001673d:	48                   	dec    eax
c001673e:	eb 01                	jmp    c0016741 <Vm::faultHandler(regs*)+0x3fa>
c0016740:	40                   	inc    eax
c0016741:	0f b7 c0             	movzx  eax,ax
c0016744:	e9 8e 00 00 00       	jmp    c00167d7 <Vm::faultHandler(regs*)+0x490>
c0016749:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001674e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016751:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016754:	74 29                	je     c001677f <Vm::faultHandler(regs*)+0x438>
c0016756:	3d ff ff 00 00       	cmp    eax,0xffff
c001675b:	76 22                	jbe    c001677f <Vm::faultHandler(regs*)+0x438>
c001675d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016761:	50                   	push   eax
c0016762:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016766:	50                   	push   eax
c0016767:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001676b:	50                   	push   eax
c001676c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016770:	50                   	push   eax
c0016771:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016775:	50                   	push   eax
c0016776:	6a 6d                	push   0x6d
c0016778:	6a 6d                	push   0x6d
c001677a:	e9 50 01 00 00       	jmp    c00168cf <Vm::faultHandler(regs*)+0x588>
c001677f:	83 e5 01             	and    ebp,0x1
c0016782:	0f b7 c8             	movzx  ecx,ax
c0016785:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016788:	0f b7 f6             	movzx  esi,si
c001678b:	74 1e                	je     c00167ab <Vm::faultHandler(regs*)+0x464>
c001678d:	ed                   	in     eax,dx
c001678e:	55                   	push   ebp
c001678f:	50                   	push   eax
c0016790:	51                   	push   ecx
c0016791:	56                   	push   esi
c0016792:	e8 9b fb ff ff       	call   c0016332 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016797:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001679a:	83 c4 10             	add    esp,0x10
c001679d:	8d 50 04             	lea    edx,[eax+0x4]
c00167a0:	83 e8 04             	sub    eax,0x4
c00167a3:	81 e2 ff ff 00 00    	and    edx,0xffff
c00167a9:	eb 20                	jmp    c00167cb <Vm::faultHandler(regs*)+0x484>
c00167ab:	66 ed                	in     ax,dx
c00167ad:	57                   	push   edi
c00167ae:	0f b7 c0             	movzx  eax,ax
c00167b1:	50                   	push   eax
c00167b2:	51                   	push   ecx
c00167b3:	56                   	push   esi
c00167b4:	e8 63 fb ff ff       	call   c001631c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00167b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167bc:	83 c4 10             	add    esp,0x10
c00167bf:	8d 50 02             	lea    edx,[eax+0x2]
c00167c2:	83 e8 02             	sub    eax,0x2
c00167c5:	81 e2 ff ff 00 00    	and    edx,0xffff
c00167cb:	25 ff ff 00 00       	and    eax,0xffff
c00167d0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00167d4:	0f 44 c2             	cmove  eax,edx
c00167d7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00167da:	e9 23 02 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c00167df:	8d 46 ff             	lea    eax,[esi-0x1]
c00167e2:	0f b6 f0             	movzx  esi,al
c00167e5:	83 fe 05             	cmp    esi,0x5
c00167e8:	77 23                	ja     c001680d <Vm::faultHandler(regs*)+0x4c6>
c00167ea:	ff 24 b5 ac 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd354]
c00167f1:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00167f6:	eb 15                	jmp    c001680d <Vm::faultHandler(regs*)+0x4c6>
c00167f8:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00167fc:	eb 0f                	jmp    c001680d <Vm::faultHandler(regs*)+0x4c6>
c00167fe:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016802:	eb 09                	jmp    c001680d <Vm::faultHandler(regs*)+0x4c6>
c0016804:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016808:	eb 03                	jmp    c001680d <Vm::faultHandler(regs*)+0x4c6>
c001680a:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001680d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016812:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016815:	74 29                	je     c0016840 <Vm::faultHandler(regs*)+0x4f9>
c0016817:	3d ff ff 00 00       	cmp    eax,0xffff
c001681c:	76 22                	jbe    c0016840 <Vm::faultHandler(regs*)+0x4f9>
c001681e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016822:	50                   	push   eax
c0016823:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016827:	50                   	push   eax
c0016828:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001682c:	50                   	push   eax
c001682d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016831:	50                   	push   eax
c0016832:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016836:	50                   	push   eax
c0016837:	6a 6e                	push   0x6e
c0016839:	6a 6e                	push   0x6e
c001683b:	e9 8f 00 00 00       	jmp    c00168cf <Vm::faultHandler(regs*)+0x588>
c0016840:	52                   	push   edx
c0016841:	0f b7 c0             	movzx  eax,ax
c0016844:	52                   	push   edx
c0016845:	50                   	push   eax
c0016846:	57                   	push   edi
c0016847:	e8 87 fa ff ff       	call   c00162d3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001684c:	59                   	pop    ecx
c001684d:	5e                   	pop    esi
c001684e:	0f b6 c0             	movzx  eax,al
c0016851:	50                   	push   eax
c0016852:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016856:	50                   	push   eax
c0016857:	e8 10 f5 ff ff       	call   c0015d6c <Vm::outbv(unsigned short, unsigned char)>
c001685c:	83 c4 10             	add    esp,0x10
c001685f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016862:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016866:	74 03                	je     c001686b <Vm::faultHandler(regs*)+0x524>
c0016868:	48                   	dec    eax
c0016869:	eb 01                	jmp    c001686c <Vm::faultHandler(regs*)+0x525>
c001686b:	40                   	inc    eax
c001686c:	0f b7 c0             	movzx  eax,ax
c001686f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016872:	e9 8b 01 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c0016877:	8d 46 ff             	lea    eax,[esi-0x1]
c001687a:	0f b6 f0             	movzx  esi,al
c001687d:	83 fe 05             	cmp    esi,0x5
c0016880:	77 1e                	ja     c00168a0 <Vm::faultHandler(regs*)+0x559>
c0016882:	ff 24 b5 c4 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd33c]
c0016889:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001688d:	eb 11                	jmp    c00168a0 <Vm::faultHandler(regs*)+0x559>
c001688f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016892:	eb 0c                	jmp    c00168a0 <Vm::faultHandler(regs*)+0x559>
c0016894:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016897:	eb 07                	jmp    c00168a0 <Vm::faultHandler(regs*)+0x559>
c0016899:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001689c:	eb 02                	jmp    c00168a0 <Vm::faultHandler(regs*)+0x559>
c001689e:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00168a0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168a5:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00168a8:	74 37                	je     c00168e1 <Vm::faultHandler(regs*)+0x59a>
c00168aa:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00168b0:	76 2f                	jbe    c00168e1 <Vm::faultHandler(regs*)+0x59a>
c00168b2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00168b6:	50                   	push   eax
c00168b7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00168bb:	50                   	push   eax
c00168bc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168c0:	50                   	push   eax
c00168c1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00168c5:	50                   	push   eax
c00168c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168ca:	50                   	push   eax
c00168cb:	6a 6f                	push   0x6f
c00168cd:	6a 6f                	push   0x6f
c00168cf:	68 4f 2c 02 c0       	push   0xc0022c4f
c00168d4:	e8 75 06 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00168d9:	83 c4 20             	add    esp,0x20
c00168dc:	e9 86 01 00 00       	jmp    c0016a67 <Vm::faultHandler(regs*)+0x720>
c00168e1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00168e4:	0f b7 d7             	movzx  edx,di
c00168e7:	0f b7 c6             	movzx  eax,si
c00168ea:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00168ed:	81 e1 00 04 00 00    	and    ecx,0x400
c00168f3:	83 e5 01             	and    ebp,0x1
c00168f6:	74 1c                	je     c0016914 <Vm::faultHandler(regs*)+0x5cd>
c00168f8:	55                   	push   ebp
c00168f9:	55                   	push   ebp
c00168fa:	50                   	push   eax
c00168fb:	52                   	push   edx
c00168fc:	e8 f5 f9 ff ff       	call   c00162f6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016901:	83 c4 10             	add    esp,0x10
c0016904:	89 fa                	mov    edx,edi
c0016906:	ef                   	out    dx,eax
c0016907:	8d 46 04             	lea    eax,[esi+0x4]
c001690a:	83 ee 04             	sub    esi,0x4
c001690d:	25 ff ff 00 00       	and    eax,0xffff
c0016912:	eb 1b                	jmp    c001692f <Vm::faultHandler(regs*)+0x5e8>
c0016914:	55                   	push   ebp
c0016915:	55                   	push   ebp
c0016916:	50                   	push   eax
c0016917:	52                   	push   edx
c0016918:	e8 c7 f9 ff ff       	call   c00162e4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	89 fa                	mov    edx,edi
c0016922:	66 ef                	out    dx,ax
c0016924:	8d 46 02             	lea    eax,[esi+0x2]
c0016927:	83 ee 02             	sub    esi,0x2
c001692a:	25 ff ff 00 00       	and    eax,0xffff
c001692f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016935:	85 c9                	test   ecx,ecx
c0016937:	0f 44 f0             	cmove  esi,eax
c001693a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001693d:	e9 c0 00 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c0016942:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016949:	83 ec 0c             	sub    esp,0xc
c001694c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016950:	50                   	push   eax
c0016951:	e8 03 f4 ff ff       	call   c0015d59 <Vm::inbv(unsigned short)>
c0016956:	0f b6 c0             	movzx  eax,al
c0016959:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001695c:	eb 3a                	jmp    c0016998 <Vm::faultHandler(regs*)+0x651>
c001695e:	83 e5 01             	and    ebp,0x1
c0016961:	74 07                	je     c001696a <Vm::faultHandler(regs*)+0x623>
c0016963:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016967:	ed                   	in     eax,dx
c0016968:	eb 14                	jmp    c001697e <Vm::faultHandler(regs*)+0x637>
c001696a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001696d:	66 31 f6             	xor    si,si
c0016970:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016973:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016977:	66 ed                	in     ax,dx
c0016979:	0f b7 c0             	movzx  eax,ax
c001697c:	09 f0                	or     eax,esi
c001697e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016981:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016985:	eb 7e                	jmp    c0016a05 <Vm::faultHandler(regs*)+0x6be>
c0016987:	52                   	push   edx
c0016988:	52                   	push   edx
c0016989:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001698d:	50                   	push   eax
c001698e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016992:	50                   	push   eax
c0016993:	e8 d4 f3 ff ff       	call   c0015d6c <Vm::outbv(unsigned short, unsigned char)>
c0016998:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001699c:	eb 4f                	jmp    c00169ed <Vm::faultHandler(regs*)+0x6a6>
c001699e:	83 e5 01             	and    ebp,0x1
c00169a1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00169a4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00169a8:	74 03                	je     c00169ad <Vm::faultHandler(regs*)+0x666>
c00169aa:	ef                   	out    dx,eax
c00169ab:	eb d4                	jmp    c0016981 <Vm::faultHandler(regs*)+0x63a>
c00169ad:	66 ef                	out    dx,ax
c00169af:	eb d0                	jmp    c0016981 <Vm::faultHandler(regs*)+0x63a>
c00169b1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00169b5:	83 ec 0c             	sub    esp,0xc
c00169b8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00169bf:	50                   	push   eax
c00169c0:	e8 94 f3 ff ff       	call   c0015d59 <Vm::inbv(unsigned short)>
c00169c5:	0f b6 c0             	movzx  eax,al
c00169c8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00169cb:	eb 1d                	jmp    c00169ea <Vm::faultHandler(regs*)+0x6a3>
c00169cd:	83 e5 01             	and    ebp,0x1
c00169d0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00169d3:	74 03                	je     c00169d8 <Vm::faultHandler(regs*)+0x691>
c00169d5:	ed                   	in     eax,dx
c00169d6:	eb 0d                	jmp    c00169e5 <Vm::faultHandler(regs*)+0x69e>
c00169d8:	66 ed                	in     ax,dx
c00169da:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00169dd:	0f b7 c0             	movzx  eax,ax
c00169e0:	66 31 d2             	xor    dx,dx
c00169e3:	09 d0                	or     eax,edx
c00169e5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00169e8:	eb 18                	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c00169ea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169ed:	83 c4 10             	add    esp,0x10
c00169f0:	eb 13                	jmp    c0016a05 <Vm::faultHandler(regs*)+0x6be>
c00169f2:	83 e5 01             	and    ebp,0x1
c00169f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00169f8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00169fb:	74 03                	je     c0016a00 <Vm::faultHandler(regs*)+0x6b9>
c00169fd:	ef                   	out    dx,eax
c00169fe:	eb 02                	jmp    c0016a02 <Vm::faultHandler(regs*)+0x6bb>
c0016a00:	66 ef                	out    dx,ax
c0016a02:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a05:	b0 01                	mov    al,0x1
c0016a07:	eb 60                	jmp    c0016a69 <Vm::faultHandler(regs*)+0x722>
c0016a09:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a0d:	50                   	push   eax
c0016a0e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a12:	50                   	push   eax
c0016a13:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a17:	50                   	push   eax
c0016a18:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a1c:	50                   	push   eax
c0016a1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a21:	50                   	push   eax
c0016a22:	52                   	push   edx
c0016a23:	52                   	push   edx
c0016a24:	68 7c 2c 02 c0       	push   0xc0022c7c
c0016a29:	e8 20 05 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016a2e:	83 c4 20             	add    esp,0x20
c0016a31:	83 ec 0c             	sub    esp,0xc
c0016a34:	6a 60                	push   0x60
c0016a36:	e8 1e f3 ff ff       	call   c0015d59 <Vm::inbv(unsigned short)>
c0016a3b:	83 c4 10             	add    esp,0x10
c0016a3e:	0f b6 d0             	movzx  edx,al
c0016a41:	83 fa 1c             	cmp    edx,0x1c
c0016a44:	74 05                	je     c0016a4b <Vm::faultHandler(regs*)+0x704>
c0016a46:	83 fa 5a             	cmp    edx,0x5a
c0016a49:	75 e6                	jne    c0016a31 <Vm::faultHandler(regs*)+0x6ea>
c0016a4b:	0f b6 c0             	movzx  eax,al
c0016a4e:	83 f8 1c             	cmp    eax,0x1c
c0016a51:	74 05                	je     c0016a58 <Vm::faultHandler(regs*)+0x711>
c0016a53:	83 f8 5a             	cmp    eax,0x5a
c0016a56:	75 0f                	jne    c0016a67 <Vm::faultHandler(regs*)+0x720>
c0016a58:	83 ec 0c             	sub    esp,0xc
c0016a5b:	6a 60                	push   0x60
c0016a5d:	e8 f7 f2 ff ff       	call   c0015d59 <Vm::inbv(unsigned short)>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	eb e4                	jmp    c0016a4b <Vm::faultHandler(regs*)+0x704>
c0016a67:	31 c0                	xor    eax,eax
c0016a69:	83 c4 2c             	add    esp,0x2c
c0016a6c:	5b                   	pop    ebx
c0016a6d:	5e                   	pop    esi
c0016a6e:	5f                   	pop    edi
c0016a6f:	5d                   	pop    ebp
c0016a70:	c3                   	ret    
c0016a71:	90                   	nop

c0016a72 <noCopro(unsigned long)>:
c0016a72:	c3                   	ret    
c0016a73:	90                   	nop

c0016a74 <CPU::close(int, int, void*)>:
c0016a74:	31 c0                	xor    eax,eax
c0016a76:	c3                   	ret    

c0016a77 <x86ReadCMOS(unsigned char)>:
c0016a77:	83 ec 14             	sub    esp,0x14
c0016a7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a7e:	88 04 24             	mov    BYTE PTR [esp],al
c0016a81:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016a86:	0f b6 c0             	movzx  eax,al
c0016a89:	85 c0                	test   eax,eax
c0016a8b:	74 04                	je     c0016a91 <x86ReadCMOS(unsigned char)+0x1a>
c0016a8d:	b2 00                	mov    dl,0x0
c0016a8f:	eb 02                	jmp    c0016a93 <x86ReadCMOS(unsigned char)+0x1c>
c0016a91:	b2 80                	mov    dl,0x80
c0016a93:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016a96:	09 d0                	or     eax,edx
c0016a98:	0f b6 c0             	movzx  eax,al
c0016a9b:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016aa2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016aa6:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016aaa:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016aaf:	ee                   	out    dx,al
c0016ab0:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016ab7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016abc:	89 c2                	mov    edx,eax
c0016abe:	ec                   	in     al,dx
c0016abf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016ac3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016ac7:	83 c4 14             	add    esp,0x14
c0016aca:	c3                   	ret    

c0016acb <x86WriteCMOS(unsigned char, unsigned char)>:
c0016acb:	83 ec 18             	sub    esp,0x18
c0016ace:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ad2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ad6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016ada:	88 d0                	mov    al,dl
c0016adc:	88 04 24             	mov    BYTE PTR [esp],al
c0016adf:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016ae4:	0f b6 c0             	movzx  eax,al
c0016ae7:	85 c0                	test   eax,eax
c0016ae9:	74 04                	je     c0016aef <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016aeb:	b2 00                	mov    dl,0x0
c0016aed:	eb 02                	jmp    c0016af1 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0016aef:	b2 80                	mov    dl,0x80
c0016af1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016af5:	09 d0                	or     eax,edx
c0016af7:	0f b6 c0             	movzx  eax,al
c0016afa:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016b01:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016b05:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016b09:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016b0e:	ee                   	out    dx,al
c0016b0f:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016b13:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016b1a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016b1e:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016b22:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016b27:	ee                   	out    dx,al
c0016b28:	90                   	nop
c0016b29:	83 c4 18             	add    esp,0x18
c0016b2c:	c3                   	ret    

c0016b2d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016b2d:	60                   	pusha  
c0016b2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b36:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b3a:	9c                   	pushf  
c0016b3b:	fa                   	cli    
c0016b3c:	0f 09                	wbinvd 
c0016b3e:	0f 30                	wrmsr  
c0016b40:	9d                   	popf   
c0016b41:	89 c2                	mov    edx,eax
c0016b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b47:	89 10                	mov    DWORD PTR [eax],edx
c0016b49:	61                   	popa   
c0016b4a:	90                   	nop
c0016b4b:	c3                   	ret    

c0016b4c <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016b4c:	60                   	pusha  
c0016b4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b51:	89 c1                	mov    ecx,eax
c0016b53:	9c                   	pushf  
c0016b54:	fa                   	cli    
c0016b55:	0f 09                	wbinvd 
c0016b57:	31 c0                	xor    eax,eax
c0016b59:	31 d2                	xor    edx,edx
c0016b5b:	0f 32                	rdmsr  
c0016b5d:	9d                   	popf   
c0016b5e:	89 c2                	mov    edx,eax
c0016b60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b64:	89 10                	mov    DWORD PTR [eax],edx
c0016b66:	61                   	popa   
c0016b67:	90                   	nop
c0016b68:	c3                   	ret    

c0016b69 <AMD_K6_writeback(int, int, int)>:
c0016b69:	83 ec 20             	sub    esp,0x20
c0016b6c:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016b71:	c1 e8 14             	shr    eax,0x14
c0016b74:	c1 e8 02             	shr    eax,0x2
c0016b77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b7b:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016b80:	0f 85 9e 00 00 00    	jne    c0016c24 <AMD_K6_writeback(int, int, int)+0xbb>
c0016b86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b8e:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016b93:	75 19                	jne    c0016bae <AMD_K6_writeback(int, int, int)+0x45>
c0016b95:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016b9a:	7f 0a                	jg     c0016ba6 <AMD_K6_writeback(int, int, int)+0x3d>
c0016b9c:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016ba4:	eb 08                	jmp    c0016bae <AMD_K6_writeback(int, int, int)+0x45>
c0016ba6:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016bae:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016bb3:	7c 6e                	jl     c0016c23 <AMD_K6_writeback(int, int, int)+0xba>
c0016bb5:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016bba:	7e 09                	jle    c0016bc5 <AMD_K6_writeback(int, int, int)+0x5c>
c0016bbc:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016bc1:	74 36                	je     c0016bf9 <AMD_K6_writeback(int, int, int)+0x90>
c0016bc3:	eb 5e                	jmp    c0016c23 <AMD_K6_writeback(int, int, int)+0xba>
c0016bc5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bc9:	50                   	push   eax
c0016bca:	68 82 00 00 c0       	push   0xc0000082
c0016bcf:	e8 78 ff ff ff       	call   c0016b4c <AMD_K6_read_msr(unsigned int, REGS*)>
c0016bd4:	83 c4 08             	add    esp,0x8
c0016bd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bdb:	d1 e0                	shl    eax,1
c0016bdd:	83 e0 7f             	and    eax,0x7f
c0016be0:	89 c2                	mov    edx,eax
c0016be2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016be6:	50                   	push   eax
c0016be7:	6a 00                	push   0x0
c0016be9:	52                   	push   edx
c0016bea:	68 82 00 00 c0       	push   0xc0000082
c0016bef:	e8 39 ff ff ff       	call   c0016b2d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016bf4:	83 c4 10             	add    esp,0x10
c0016bf7:	eb 2b                	jmp    c0016c24 <AMD_K6_writeback(int, int, int)+0xbb>
c0016bf9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bfd:	50                   	push   eax
c0016bfe:	68 82 00 00 c0       	push   0xc0000082
c0016c03:	e8 44 ff ff ff       	call   c0016b4c <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c08:	83 c4 08             	add    esp,0x8
c0016c0b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c0f:	50                   	push   eax
c0016c10:	6a 00                	push   0x0
c0016c12:	6a 00                	push   0x0
c0016c14:	68 82 00 00 c0       	push   0xc0000082
c0016c19:	e8 0f ff ff ff       	call   c0016b2d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016c1e:	83 c4 10             	add    esp,0x10
c0016c21:	eb 01                	jmp    c0016c24 <AMD_K6_writeback(int, int, int)+0xbb>
c0016c23:	90                   	nop
c0016c24:	90                   	nop
c0016c25:	83 c4 20             	add    esp,0x20
c0016c28:	c3                   	ret    

c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016c29:	56                   	push   esi
c0016c2a:	53                   	push   ebx
c0016c2b:	a1 e0 44 02 c0       	mov    eax,ds:0xc00244e0
c0016c30:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016c34:	75 32                	jne    c0016c68 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016c36:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c40:	89 10                	mov    DWORD PTR [eax],edx
c0016c42:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c4c:	89 10                	mov    DWORD PTR [eax],edx
c0016c4e:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016c54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c58:	89 10                	mov    DWORD PTR [eax],edx
c0016c5a:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c64:	89 10                	mov    DWORD PTR [eax],edx
c0016c66:	eb 5c                	jmp    c0016cc4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016c68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c6c:	ba 00 00 00 00       	mov    edx,0x0
c0016c71:	89 d1                	mov    ecx,edx
c0016c73:	0f a2                	cpuid  
c0016c75:	89 c6                	mov    esi,eax
c0016c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7b:	89 30                	mov    DWORD PTR [eax],esi
c0016c7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c81:	89 18                	mov    DWORD PTR [eax],ebx
c0016c83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c87:	89 08                	mov    DWORD PTR [eax],ecx
c0016c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c8d:	89 10                	mov    DWORD PTR [eax],edx
c0016c8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c93:	a3 e0 44 02 c0       	mov    ds:0xc00244e0,eax
c0016c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c9e:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016ca3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ca9:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016cae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cb4:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016cb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cbf:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016cc4:	5b                   	pop    ebx
c0016cc5:	5e                   	pop    esi
c0016cc6:	c3                   	ret    

c0016cc7 <cpuidCheckEDX(unsigned int)>:
c0016cc7:	83 ec 10             	sub    esp,0x10
c0016cca:	89 e0                	mov    eax,esp
c0016ccc:	50                   	push   eax
c0016ccd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cd1:	50                   	push   eax
c0016cd2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016cd6:	50                   	push   eax
c0016cd7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016cdb:	50                   	push   eax
c0016cdc:	6a 01                	push   0x1
c0016cde:	e8 46 ff ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016ce3:	83 c4 14             	add    esp,0x14
c0016ce6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016ce9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016ced:	0f 95 c0             	setne  al
c0016cf0:	83 c4 10             	add    esp,0x10
c0016cf3:	c3                   	ret    

c0016cf4 <cpuidCheckECX(unsigned int)>:
c0016cf4:	83 ec 10             	sub    esp,0x10
c0016cf7:	89 e0                	mov    eax,esp
c0016cf9:	50                   	push   eax
c0016cfa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cfe:	50                   	push   eax
c0016cff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d03:	50                   	push   eax
c0016d04:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d08:	50                   	push   eax
c0016d09:	6a 01                	push   0x1
c0016d0b:	e8 19 ff ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d10:	83 c4 14             	add    esp,0x14
c0016d13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d17:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d1b:	0f 95 c0             	setne  al
c0016d1e:	83 c4 10             	add    esp,0x10
c0016d21:	c3                   	ret    

c0016d22 <cpuidCheckExtendedEBX(unsigned int)>:
c0016d22:	83 ec 10             	sub    esp,0x10
c0016d25:	89 e0                	mov    eax,esp
c0016d27:	50                   	push   eax
c0016d28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d2c:	50                   	push   eax
c0016d2d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d31:	50                   	push   eax
c0016d32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d36:	50                   	push   eax
c0016d37:	6a 07                	push   0x7
c0016d39:	e8 eb fe ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d3e:	83 c4 14             	add    esp,0x14
c0016d41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d45:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d49:	0f 95 c0             	setne  al
c0016d4c:	83 c4 10             	add    esp,0x10
c0016d4f:	c3                   	ret    

c0016d50 <cpuidCheckExtendedECX(unsigned int)>:
c0016d50:	83 ec 10             	sub    esp,0x10
c0016d53:	89 e0                	mov    eax,esp
c0016d55:	50                   	push   eax
c0016d56:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d5a:	50                   	push   eax
c0016d5b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d5f:	50                   	push   eax
c0016d60:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d64:	50                   	push   eax
c0016d65:	6a 07                	push   0x7
c0016d67:	e8 bd fe ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d6c:	83 c4 14             	add    esp,0x14
c0016d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d73:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d77:	0f 95 c0             	setne  al
c0016d7a:	83 c4 10             	add    esp,0x10
c0016d7d:	c3                   	ret    

c0016d7e <HalDetectFeatures()>:
c0016d7e:	57                   	push   edi
c0016d7f:	56                   	push   esi
c0016d80:	53                   	push   ebx
c0016d81:	81 ec 90 00 00 00    	sub    esp,0x90
c0016d87:	83 ec 04             	sub    esp,0x4
c0016d8a:	6a 08                	push   0x8
c0016d8c:	6a 00                	push   0x0
c0016d8e:	68 8c c7 02 c0       	push   0xc002c78c
c0016d93:	e8 58 97 fe ff       	call   c00004f0 <memset>
c0016d98:	83 c4 10             	add    esp,0x10
c0016d9b:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016da0:	83 c8 04             	or     eax,0x4
c0016da3:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016da8:	e8 4c 94 fe ff       	call   c00001f9 <detectCPUID>
c0016dad:	85 c0                	test   eax,eax
c0016daf:	0f 95 c0             	setne  al
c0016db2:	83 e0 01             	and    eax,0x1
c0016db5:	83 e0 01             	and    eax,0x1
c0016db8:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016dbb:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016dc0:	83 e0 fd             	and    eax,0xfffffffd
c0016dc3:	88 c2                	mov    dl,al
c0016dc5:	88 c8                	mov    al,cl
c0016dc7:	09 d0                	or     eax,edx
c0016dc9:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016dce:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016dd3:	83 e0 fb             	and    eax,0xfffffffb
c0016dd6:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ddb:	83 ec 0c             	sub    esp,0xc
c0016dde:	68 dc 2c 02 c0       	push   0xc0022cdc
c0016de3:	e8 66 01 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016de8:	83 c4 10             	add    esp,0x10
c0016deb:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016df0:	83 e0 02             	and    eax,0x2
c0016df3:	0f b6 c0             	movzx  eax,al
c0016df6:	85 c0                	test   eax,eax
c0016df8:	0f 84 7f 02 00 00    	je     c001707d <HalDetectFeatures()+0x2ff>
c0016dfe:	83 ec 0c             	sub    esp,0xc
c0016e01:	6a 20                	push   0x20
c0016e03:	e8 bf fe ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c0016e08:	83 c4 10             	add    esp,0x10
c0016e0b:	83 e0 01             	and    eax,0x1
c0016e0e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016e15:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e1a:	83 e0 f7             	and    eax,0xfffffff7
c0016e1d:	88 c2                	mov    dl,al
c0016e1f:	88 c8                	mov    al,cl
c0016e21:	09 d0                	or     eax,edx
c0016e23:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e28:	83 ec 0c             	sub    esp,0xc
c0016e2b:	68 00 00 00 04       	push   0x4000000
c0016e30:	e8 92 fe ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c0016e35:	83 c4 10             	add    esp,0x10
c0016e38:	89 c1                	mov    ecx,eax
c0016e3a:	83 e1 01             	and    ecx,0x1
c0016e3d:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016e42:	83 e0 fe             	and    eax,0xfffffffe
c0016e45:	88 c2                	mov    dl,al
c0016e47:	88 c8                	mov    al,cl
c0016e49:	09 d0                	or     eax,edx
c0016e4b:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	68 80 00 00 00       	push   0x80
c0016e58:	e8 6a fe ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c0016e5d:	83 c4 10             	add    esp,0x10
c0016e60:	89 c1                	mov    ecx,eax
c0016e62:	c1 e1 07             	shl    ecx,0x7
c0016e65:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016e6a:	83 e0 7f             	and    eax,0x7f
c0016e6d:	88 c2                	mov    dl,al
c0016e6f:	88 c8                	mov    al,cl
c0016e71:	09 d0                	or     eax,edx
c0016e73:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	68 00 00 80 00       	push   0x800000
c0016e80:	e8 42 fe ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c0016e85:	83 c4 10             	add    esp,0x10
c0016e88:	83 e0 01             	and    eax,0x1
c0016e8b:	89 c1                	mov    ecx,eax
c0016e8d:	c1 e1 05             	shl    ecx,0x5
c0016e90:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e95:	83 e0 df             	and    eax,0xffffffdf
c0016e98:	88 c2                	mov    dl,al
c0016e9a:	88 c8                	mov    al,cl
c0016e9c:	09 d0                	or     eax,edx
c0016e9e:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ea3:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016ea8:	83 e0 01             	and    eax,0x1
c0016eab:	75 0c                	jne    c0016eb9 <HalDetectFeatures()+0x13b>
c0016ead:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016eb2:	25 00 04 00 00       	and    eax,0x400
c0016eb7:	74 0f                	je     c0016ec8 <HalDetectFeatures()+0x14a>
c0016eb9:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ebe:	83 e0 fe             	and    eax,0xfffffffe
c0016ec1:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ec6:	eb 28                	jmp    c0016ef0 <HalDetectFeatures()+0x172>
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	68 00 02 00 00       	push   0x200
c0016ed0:	e8 f2 fd ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c0016ed5:	83 c4 10             	add    esp,0x10
c0016ed8:	89 c1                	mov    ecx,eax
c0016eda:	83 e1 01             	and    ecx,0x1
c0016edd:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ee2:	83 e0 fe             	and    eax,0xfffffffe
c0016ee5:	88 c2                	mov    dl,al
c0016ee7:	88 c8                	mov    al,cl
c0016ee9:	09 d0                	or     eax,edx
c0016eeb:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ef0:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ef5:	83 e0 01             	and    eax,0x1
c0016ef8:	0f b6 c0             	movzx  eax,al
c0016efb:	85 c0                	test   eax,eax
c0016efd:	74 1c                	je     c0016f1b <HalDetectFeatures()+0x19d>
c0016eff:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f04:	83 e0 08             	and    eax,0x8
c0016f07:	0f b6 c0             	movzx  eax,al
c0016f0a:	85 c0                	test   eax,eax
c0016f0c:	75 0d                	jne    c0016f1b <HalDetectFeatures()+0x19d>
c0016f0e:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f13:	83 e0 fe             	and    eax,0xfffffffe
c0016f16:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f1b:	83 ec 0c             	sub    esp,0xc
c0016f1e:	68 ee 2c 02 c0       	push   0xc0022cee
c0016f23:	e8 26 00 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016f28:	83 c4 10             	add    esp,0x10
c0016f2b:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f30:	83 e0 fe             	and    eax,0xfffffffe
c0016f33:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f38:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0016f40:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0016f48:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0016f50:	85 c0                	test   eax,eax
c0016f52:	0f 84 ab 00 00 00    	je     c0017003 <HalDetectFeatures()+0x285>
c0016f58:	83 ec 0c             	sub    esp,0xc
c0016f5b:	6a 01                	push   0x1
c0016f5d:	e8 92 fd ff ff       	call   c0016cf4 <cpuidCheckECX(unsigned int)>
c0016f62:	83 c4 10             	add    esp,0x10
c0016f65:	83 e0 01             	and    eax,0x1
c0016f68:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016f6b:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f70:	83 e0 fd             	and    eax,0xfffffffd
c0016f73:	88 c2                	mov    dl,al
c0016f75:	88 c8                	mov    al,cl
c0016f77:	09 d0                	or     eax,edx
c0016f79:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f7e:	83 ec 0c             	sub    esp,0xc
c0016f81:	68 00 02 00 00       	push   0x200
c0016f86:	e8 69 fd ff ff       	call   c0016cf4 <cpuidCheckECX(unsigned int)>
c0016f8b:	83 c4 10             	add    esp,0x10
c0016f8e:	83 e0 01             	and    eax,0x1
c0016f91:	89 c1                	mov    ecx,eax
c0016f93:	c1 e1 04             	shl    ecx,0x4
c0016f96:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f9b:	83 e0 ef             	and    eax,0xffffffef
c0016f9e:	88 c2                	mov    dl,al
c0016fa0:	88 c8                	mov    al,cl
c0016fa2:	09 d0                	or     eax,edx
c0016fa4:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016fa9:	83 ec 0c             	sub    esp,0xc
c0016fac:	68 00 00 08 00       	push   0x80000
c0016fb1:	e8 3e fd ff ff       	call   c0016cf4 <cpuidCheckECX(unsigned int)>
c0016fb6:	83 c4 10             	add    esp,0x10
c0016fb9:	83 e0 01             	and    eax,0x1
c0016fbc:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0016fc3:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016fc8:	83 e0 fb             	and    eax,0xfffffffb
c0016fcb:	88 c2                	mov    dl,al
c0016fcd:	88 c8                	mov    al,cl
c0016fcf:	09 d0                	or     eax,edx
c0016fd1:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016fd6:	83 ec 0c             	sub    esp,0xc
c0016fd9:	68 00 00 10 00       	push   0x100000
c0016fde:	e8 11 fd ff ff       	call   c0016cf4 <cpuidCheckECX(unsigned int)>
c0016fe3:	83 c4 10             	add    esp,0x10
c0016fe6:	83 e0 01             	and    eax,0x1
c0016fe9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016ff0:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016ff5:	83 e0 f7             	and    eax,0xfffffff7
c0016ff8:	88 c2                	mov    dl,al
c0016ffa:	88 c8                	mov    al,cl
c0016ffc:	09 d0                	or     eax,edx
c0016ffe:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017003:	83 ec 0c             	sub    esp,0xc
c0017006:	8d 44 24 24          	lea    eax,[esp+0x24]
c001700a:	50                   	push   eax
c001700b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001700f:	50                   	push   eax
c0017010:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017014:	50                   	push   eax
c0017015:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017019:	50                   	push   eax
c001701a:	68 00 00 00 80       	push   0x80000000
c001701f:	e8 05 fc ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017024:	83 c4 20             	add    esp,0x20
c0017027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001702b:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017030:	76 4b                	jbe    c001707d <HalDetectFeatures()+0x2ff>
c0017032:	83 ec 0c             	sub    esp,0xc
c0017035:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017039:	50                   	push   eax
c001703a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001703e:	50                   	push   eax
c001703f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017043:	50                   	push   eax
c0017044:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017048:	50                   	push   eax
c0017049:	68 01 00 00 80       	push   0x80000001
c001704e:	e8 d6 fb ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017053:	83 c4 20             	add    esp,0x20
c0017056:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001705b:	83 e0 bf             	and    eax,0xffffffbf
c001705e:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017063:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017068:	83 e0 fd             	and    eax,0xfffffffd
c001706b:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017070:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017075:	83 e0 fe             	and    eax,0xfffffffe
c0017078:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001707d:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017082:	25 00 04 00 00       	and    eax,0x400
c0017087:	74 0d                	je     c0017096 <HalDetectFeatures()+0x318>
c0017089:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001708e:	83 e0 fb             	and    eax,0xfffffffb
c0017091:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017096:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c001709d:	83 ec 04             	sub    esp,0x4
c00170a0:	6a 0d                	push   0xd
c00170a2:	6a 00                	push   0x0
c00170a4:	68 70 c7 02 c0       	push   0xc002c770
c00170a9:	e8 42 94 fe ff       	call   c00004f0 <memset>
c00170ae:	83 c4 10             	add    esp,0x10
c00170b1:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00170b6:	83 e0 02             	and    eax,0x2
c00170b9:	0f b6 c0             	movzx  eax,al
c00170bc:	85 c0                	test   eax,eax
c00170be:	0f 84 16 08 00 00    	je     c00178da <HalDetectFeatures()+0xb5c>
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	6a 10                	push   0x10
c00170c9:	e8 f9 fb ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	83 e0 01             	and    eax,0x1
c00170d4:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00170db:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170e0:	83 e0 f7             	and    eax,0xfffffff7
c00170e3:	88 c2                	mov    dl,al
c00170e5:	88 c8                	mov    al,cl
c00170e7:	09 d0                	or     eax,edx
c00170e9:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170ee:	83 ec 0c             	sub    esp,0xc
c00170f1:	6a 40                	push   0x40
c00170f3:	e8 cf fb ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c00170f8:	83 c4 10             	add    esp,0x10
c00170fb:	83 e0 01             	and    eax,0x1
c00170fe:	89 c1                	mov    ecx,eax
c0017100:	c1 e1 04             	shl    ecx,0x4
c0017103:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017108:	83 e0 ef             	and    eax,0xffffffef
c001710b:	88 c2                	mov    dl,al
c001710d:	88 c8                	mov    al,cl
c001710f:	09 d0                	or     eax,edx
c0017111:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017116:	83 ec 0c             	sub    esp,0xc
c0017119:	6a 08                	push   0x8
c001711b:	e8 a7 fb ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c0017120:	83 c4 10             	add    esp,0x10
c0017123:	83 e0 01             	and    eax,0x1
c0017126:	89 c1                	mov    ecx,eax
c0017128:	c1 e1 05             	shl    ecx,0x5
c001712b:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017130:	83 e0 df             	and    eax,0xffffffdf
c0017133:	88 c2                	mov    dl,al
c0017135:	88 c8                	mov    al,cl
c0017137:	09 d0                	or     eax,edx
c0017139:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001713e:	83 ec 0c             	sub    esp,0xc
c0017141:	68 00 20 00 00       	push   0x2000
c0017146:	e8 7c fb ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c001714b:	83 c4 10             	add    esp,0x10
c001714e:	83 e0 01             	and    eax,0x1
c0017151:	89 c1                	mov    ecx,eax
c0017153:	c1 e1 06             	shl    ecx,0x6
c0017156:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001715b:	83 e0 bf             	and    eax,0xffffffbf
c001715e:	88 c2                	mov    dl,al
c0017160:	88 c8                	mov    al,cl
c0017162:	09 d0                	or     eax,edx
c0017164:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017169:	83 ec 0c             	sub    esp,0xc
c001716c:	68 00 00 01 00       	push   0x10000
c0017171:	e8 51 fb ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c0017176:	83 c4 10             	add    esp,0x10
c0017179:	89 c1                	mov    ecx,eax
c001717b:	c1 e1 07             	shl    ecx,0x7
c001717e:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017183:	83 e0 7f             	and    eax,0x7f
c0017186:	88 c2                	mov    dl,al
c0017188:	88 c8                	mov    al,cl
c001718a:	09 d0                	or     eax,edx
c001718c:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017191:	83 ec 0c             	sub    esp,0xc
c0017194:	6a 01                	push   0x1
c0017196:	e8 2c fb ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c001719b:	83 c4 10             	add    esp,0x10
c001719e:	83 e0 01             	and    eax,0x1
c00171a1:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00171a8:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00171ad:	83 e0 f7             	and    eax,0xfffffff7
c00171b0:	88 c2                	mov    dl,al
c00171b2:	88 c8                	mov    al,cl
c00171b4:	09 d0                	or     eax,edx
c00171b6:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00171bb:	83 ec 0c             	sub    esp,0xc
c00171be:	68 00 08 00 00       	push   0x800
c00171c3:	e8 ff fa ff ff       	call   c0016cc7 <cpuidCheckEDX(unsigned int)>
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	89 c1                	mov    ecx,eax
c00171cd:	83 e1 01             	and    ecx,0x1
c00171d0:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00171d5:	83 e0 fe             	and    eax,0xfffffffe
c00171d8:	88 c2                	mov    dl,al
c00171da:	88 c8                	mov    al,cl
c00171dc:	09 d0                	or     eax,edx
c00171de:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00171e3:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171e8:	83 e0 40             	and    eax,0x40
c00171eb:	0f b6 c0             	movzx  eax,al
c00171ee:	85 c0                	test   eax,eax
c00171f0:	74 0a                	je     c00171fc <HalDetectFeatures()+0x47e>
c00171f2:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c00171fc:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017201:	83 e0 80             	and    eax,0xffffff80
c0017204:	0f b6 c0             	movzx  eax,al
c0017207:	85 c0                	test   eax,eax
c0017209:	74 0a                	je     c0017215 <HalDetectFeatures()+0x497>
c001720b:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c0017215:	83 ec 0c             	sub    esp,0xc
c0017218:	8d 44 24 14          	lea    eax,[esp+0x14]
c001721c:	50                   	push   eax
c001721d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017221:	50                   	push   eax
c0017222:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017226:	50                   	push   eax
c0017227:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001722b:	50                   	push   eax
c001722c:	6a 00                	push   0x0
c001722e:	e8 f6 f9 ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017233:	83 c4 20             	add    esp,0x20
c0017236:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c001723e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017242:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017246:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001724e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017252:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017256:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001725a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001725e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0017262:	89 c6                	mov    esi,eax
c0017264:	89 d7                	mov    edi,edx
c0017266:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017268:	89 c8                	mov    eax,ecx
c001726a:	89 fa                	mov    edx,edi
c001726c:	89 f3                	mov    ebx,esi
c001726e:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017272:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017276:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001727a:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c001727f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017283:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017287:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001728b:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017293:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0017297:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001729b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001729f:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00172a3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00172a7:	89 c6                	mov    esi,eax
c00172a9:	89 d7                	mov    edi,edx
c00172ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172ad:	89 c8                	mov    eax,ecx
c00172af:	89 fa                	mov    edx,edi
c00172b1:	89 f3                	mov    ebx,esi
c00172b3:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00172b7:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00172bb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00172bf:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c00172c4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00172cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00172cf:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00172d3:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00172db:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00172e2:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00172e6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00172ea:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00172f1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00172f5:	89 c6                	mov    esi,eax
c00172f7:	89 d7                	mov    edi,edx
c00172f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172fb:	89 c8                	mov    eax,ecx
c00172fd:	89 fa                	mov    edx,edi
c00172ff:	89 f3                	mov    ebx,esi
c0017301:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0017305:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0017309:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001730d:	83 ec 08             	sub    esp,0x8
c0017310:	68 00 2d 02 c0       	push   0xc0022d00
c0017315:	68 70 c7 02 c0       	push   0xc002c770
c001731a:	e8 61 94 fe ff       	call   c0000780 <strcmp>
c001731f:	83 c4 10             	add    esp,0x10
c0017322:	85 c0                	test   eax,eax
c0017324:	74 19                	je     c001733f <HalDetectFeatures()+0x5c1>
c0017326:	83 ec 08             	sub    esp,0x8
c0017329:	68 0d 2d 02 c0       	push   0xc0022d0d
c001732e:	68 70 c7 02 c0       	push   0xc002c770
c0017333:	e8 48 94 fe ff       	call   c0000780 <strcmp>
c0017338:	83 c4 10             	add    esp,0x10
c001733b:	85 c0                	test   eax,eax
c001733d:	75 04                	jne    c0017343 <HalDetectFeatures()+0x5c5>
c001733f:	b0 01                	mov    al,0x1
c0017341:	eb 02                	jmp    c0017345 <HalDetectFeatures()+0x5c7>
c0017343:	b0 00                	mov    al,0x0
c0017345:	0f b6 c0             	movzx  eax,al
c0017348:	85 c0                	test   eax,eax
c001734a:	74 0f                	je     c001735b <HalDetectFeatures()+0x5dd>
c001734c:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c0017356:	e9 0d 03 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c001735b:	83 ec 08             	sub    esp,0x8
c001735e:	68 1a 2d 02 c0       	push   0xc0022d1a
c0017363:	68 70 c7 02 c0       	push   0xc002c770
c0017368:	e8 13 94 fe ff       	call   c0000780 <strcmp>
c001736d:	83 c4 10             	add    esp,0x10
c0017370:	85 c0                	test   eax,eax
c0017372:	74 19                	je     c001738d <HalDetectFeatures()+0x60f>
c0017374:	83 ec 08             	sub    esp,0x8
c0017377:	68 27 2d 02 c0       	push   0xc0022d27
c001737c:	68 70 c7 02 c0       	push   0xc002c770
c0017381:	e8 fa 93 fe ff       	call   c0000780 <strcmp>
c0017386:	83 c4 10             	add    esp,0x10
c0017389:	85 c0                	test   eax,eax
c001738b:	75 04                	jne    c0017391 <HalDetectFeatures()+0x613>
c001738d:	b0 01                	mov    al,0x1
c001738f:	eb 02                	jmp    c0017393 <HalDetectFeatures()+0x615>
c0017391:	b0 00                	mov    al,0x0
c0017393:	0f b6 c0             	movzx  eax,al
c0017396:	85 c0                	test   eax,eax
c0017398:	74 0f                	je     c00173a9 <HalDetectFeatures()+0x62b>
c001739a:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c00173a4:	e9 bf 02 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c00173a9:	83 ec 08             	sub    esp,0x8
c00173ac:	68 34 2d 02 c0       	push   0xc0022d34
c00173b1:	68 70 c7 02 c0       	push   0xc002c770
c00173b6:	e8 c5 93 fe ff       	call   c0000780 <strcmp>
c00173bb:	83 c4 10             	add    esp,0x10
c00173be:	85 c0                	test   eax,eax
c00173c0:	74 19                	je     c00173db <HalDetectFeatures()+0x65d>
c00173c2:	83 ec 08             	sub    esp,0x8
c00173c5:	68 41 2d 02 c0       	push   0xc0022d41
c00173ca:	68 70 c7 02 c0       	push   0xc002c770
c00173cf:	e8 ac 93 fe ff       	call   c0000780 <strcmp>
c00173d4:	83 c4 10             	add    esp,0x10
c00173d7:	85 c0                	test   eax,eax
c00173d9:	75 04                	jne    c00173df <HalDetectFeatures()+0x661>
c00173db:	b0 01                	mov    al,0x1
c00173dd:	eb 02                	jmp    c00173e1 <HalDetectFeatures()+0x663>
c00173df:	b0 00                	mov    al,0x0
c00173e1:	0f b6 c0             	movzx  eax,al
c00173e4:	85 c0                	test   eax,eax
c00173e6:	74 0f                	je     c00173f7 <HalDetectFeatures()+0x679>
c00173e8:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c00173f2:	e9 71 02 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c00173f7:	83 ec 08             	sub    esp,0x8
c00173fa:	68 4e 2d 02 c0       	push   0xc0022d4e
c00173ff:	68 70 c7 02 c0       	push   0xc002c770
c0017404:	e8 77 93 fe ff       	call   c0000780 <strcmp>
c0017409:	83 c4 10             	add    esp,0x10
c001740c:	85 c0                	test   eax,eax
c001740e:	0f 94 c0             	sete   al
c0017411:	0f b6 c0             	movzx  eax,al
c0017414:	85 c0                	test   eax,eax
c0017416:	74 0f                	je     c0017427 <HalDetectFeatures()+0x6a9>
c0017418:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c0017422:	e9 41 02 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c0017427:	83 ec 08             	sub    esp,0x8
c001742a:	68 5b 2d 02 c0       	push   0xc0022d5b
c001742f:	68 70 c7 02 c0       	push   0xc002c770
c0017434:	e8 47 93 fe ff       	call   c0000780 <strcmp>
c0017439:	83 c4 10             	add    esp,0x10
c001743c:	85 c0                	test   eax,eax
c001743e:	0f 94 c0             	sete   al
c0017441:	0f b6 c0             	movzx  eax,al
c0017444:	85 c0                	test   eax,eax
c0017446:	74 0f                	je     c0017457 <HalDetectFeatures()+0x6d9>
c0017448:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c0017452:	e9 11 02 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c0017457:	83 ec 08             	sub    esp,0x8
c001745a:	68 1a 2d 02 c0       	push   0xc0022d1a
c001745f:	68 70 c7 02 c0       	push   0xc002c770
c0017464:	e8 17 93 fe ff       	call   c0000780 <strcmp>
c0017469:	83 c4 10             	add    esp,0x10
c001746c:	85 c0                	test   eax,eax
c001746e:	0f 94 c0             	sete   al
c0017471:	0f b6 c0             	movzx  eax,al
c0017474:	85 c0                	test   eax,eax
c0017476:	74 0f                	je     c0017487 <HalDetectFeatures()+0x709>
c0017478:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c0017482:	e9 e1 01 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c0017487:	83 ec 08             	sub    esp,0x8
c001748a:	68 68 2d 02 c0       	push   0xc0022d68
c001748f:	68 70 c7 02 c0       	push   0xc002c770
c0017494:	e8 e7 92 fe ff       	call   c0000780 <strcmp>
c0017499:	83 c4 10             	add    esp,0x10
c001749c:	85 c0                	test   eax,eax
c001749e:	0f 94 c0             	sete   al
c00174a1:	0f b6 c0             	movzx  eax,al
c00174a4:	85 c0                	test   eax,eax
c00174a6:	74 0f                	je     c00174b7 <HalDetectFeatures()+0x739>
c00174a8:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c00174b2:	e9 b1 01 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c00174b7:	83 ec 08             	sub    esp,0x8
c00174ba:	68 75 2d 02 c0       	push   0xc0022d75
c00174bf:	68 70 c7 02 c0       	push   0xc002c770
c00174c4:	e8 b7 92 fe ff       	call   c0000780 <strcmp>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	85 c0                	test   eax,eax
c00174ce:	0f 94 c0             	sete   al
c00174d1:	0f b6 c0             	movzx  eax,al
c00174d4:	85 c0                	test   eax,eax
c00174d6:	74 0f                	je     c00174e7 <HalDetectFeatures()+0x769>
c00174d8:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c00174e2:	e9 81 01 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c00174e7:	83 ec 08             	sub    esp,0x8
c00174ea:	68 82 2d 02 c0       	push   0xc0022d82
c00174ef:	68 70 c7 02 c0       	push   0xc002c770
c00174f4:	e8 87 92 fe ff       	call   c0000780 <strcmp>
c00174f9:	83 c4 10             	add    esp,0x10
c00174fc:	85 c0                	test   eax,eax
c00174fe:	0f 94 c0             	sete   al
c0017501:	0f b6 c0             	movzx  eax,al
c0017504:	85 c0                	test   eax,eax
c0017506:	74 0f                	je     c0017517 <HalDetectFeatures()+0x799>
c0017508:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c0017512:	e9 51 01 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c0017517:	83 ec 08             	sub    esp,0x8
c001751a:	68 8f 2d 02 c0       	push   0xc0022d8f
c001751f:	68 70 c7 02 c0       	push   0xc002c770
c0017524:	e8 57 92 fe ff       	call   c0000780 <strcmp>
c0017529:	83 c4 10             	add    esp,0x10
c001752c:	85 c0                	test   eax,eax
c001752e:	0f 94 c0             	sete   al
c0017531:	0f b6 c0             	movzx  eax,al
c0017534:	85 c0                	test   eax,eax
c0017536:	74 0f                	je     c0017547 <HalDetectFeatures()+0x7c9>
c0017538:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c0017542:	e9 21 01 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c0017547:	83 ec 08             	sub    esp,0x8
c001754a:	68 9c 2d 02 c0       	push   0xc0022d9c
c001754f:	68 70 c7 02 c0       	push   0xc002c770
c0017554:	e8 27 92 fe ff       	call   c0000780 <strcmp>
c0017559:	83 c4 10             	add    esp,0x10
c001755c:	85 c0                	test   eax,eax
c001755e:	0f 94 c0             	sete   al
c0017561:	0f b6 c0             	movzx  eax,al
c0017564:	85 c0                	test   eax,eax
c0017566:	74 0f                	je     c0017577 <HalDetectFeatures()+0x7f9>
c0017568:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c0017572:	e9 f1 00 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c0017577:	83 ec 08             	sub    esp,0x8
c001757a:	68 a9 2d 02 c0       	push   0xc0022da9
c001757f:	68 70 c7 02 c0       	push   0xc002c770
c0017584:	e8 f7 91 fe ff       	call   c0000780 <strcmp>
c0017589:	83 c4 10             	add    esp,0x10
c001758c:	85 c0                	test   eax,eax
c001758e:	0f 94 c0             	sete   al
c0017591:	0f b6 c0             	movzx  eax,al
c0017594:	85 c0                	test   eax,eax
c0017596:	74 0f                	je     c00175a7 <HalDetectFeatures()+0x829>
c0017598:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c00175a2:	e9 c1 00 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c00175a7:	83 ec 08             	sub    esp,0x8
c00175aa:	68 b6 2d 02 c0       	push   0xc0022db6
c00175af:	68 70 c7 02 c0       	push   0xc002c770
c00175b4:	e8 c7 91 fe ff       	call   c0000780 <strcmp>
c00175b9:	83 c4 10             	add    esp,0x10
c00175bc:	85 c0                	test   eax,eax
c00175be:	0f 94 c0             	sete   al
c00175c1:	0f b6 c0             	movzx  eax,al
c00175c4:	85 c0                	test   eax,eax
c00175c6:	74 0f                	je     c00175d7 <HalDetectFeatures()+0x859>
c00175c8:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00175d2:	e9 91 00 00 00       	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c00175d7:	83 ec 08             	sub    esp,0x8
c00175da:	68 c3 2d 02 c0       	push   0xc0022dc3
c00175df:	68 70 c7 02 c0       	push   0xc002c770
c00175e4:	e8 97 91 fe ff       	call   c0000780 <strcmp>
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	85 c0                	test   eax,eax
c00175ee:	0f 94 c0             	sete   al
c00175f1:	0f b6 c0             	movzx  eax,al
c00175f4:	85 c0                	test   eax,eax
c00175f6:	74 0c                	je     c0017604 <HalDetectFeatures()+0x886>
c00175f8:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017602:	eb 64                	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c0017604:	83 ec 08             	sub    esp,0x8
c0017607:	68 d0 2d 02 c0       	push   0xc0022dd0
c001760c:	68 70 c7 02 c0       	push   0xc002c770
c0017611:	e8 6a 91 fe ff       	call   c0000780 <strcmp>
c0017616:	83 c4 10             	add    esp,0x10
c0017619:	85 c0                	test   eax,eax
c001761b:	0f 94 c0             	sete   al
c001761e:	0f b6 c0             	movzx  eax,al
c0017621:	85 c0                	test   eax,eax
c0017623:	74 0c                	je     c0017631 <HalDetectFeatures()+0x8b3>
c0017625:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c001762f:	eb 37                	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c0017631:	83 ec 08             	sub    esp,0x8
c0017634:	68 dd 2d 02 c0       	push   0xc0022ddd
c0017639:	68 70 c7 02 c0       	push   0xc002c770
c001763e:	e8 3d 91 fe ff       	call   c0000780 <strcmp>
c0017643:	83 c4 10             	add    esp,0x10
c0017646:	85 c0                	test   eax,eax
c0017648:	0f 94 c0             	sete   al
c001764b:	0f b6 c0             	movzx  eax,al
c001764e:	85 c0                	test   eax,eax
c0017650:	74 0c                	je     c001765e <HalDetectFeatures()+0x8e0>
c0017652:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c001765c:	eb 0a                	jmp    c0017668 <HalDetectFeatures()+0x8ea>
c001765e:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c0017668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001766c:	83 f8 06             	cmp    eax,0x6
c001766f:	0f 86 cc 00 00 00    	jbe    c0017741 <HalDetectFeatures()+0x9c3>
c0017675:	83 ec 0c             	sub    esp,0xc
c0017678:	68 80 00 00 00       	push   0x80
c001767d:	e8 a0 f6 ff ff       	call   c0016d22 <cpuidCheckExtendedEBX(unsigned int)>
c0017682:	83 c4 10             	add    esp,0x10
c0017685:	89 c1                	mov    ecx,eax
c0017687:	83 e1 01             	and    ecx,0x1
c001768a:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001768f:	83 e0 fe             	and    eax,0xfffffffe
c0017692:	88 c2                	mov    dl,al
c0017694:	88 c8                	mov    al,cl
c0017696:	09 d0                	or     eax,edx
c0017698:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001769d:	83 ec 0c             	sub    esp,0xc
c00176a0:	68 00 00 10 00       	push   0x100000
c00176a5:	e8 78 f6 ff ff       	call   c0016d22 <cpuidCheckExtendedEBX(unsigned int)>
c00176aa:	83 c4 10             	add    esp,0x10
c00176ad:	83 e0 01             	and    eax,0x1
c00176b0:	89 c1                	mov    ecx,eax
c00176b2:	c1 e1 06             	shl    ecx,0x6
c00176b5:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176ba:	83 e0 bf             	and    eax,0xffffffbf
c00176bd:	88 c2                	mov    dl,al
c00176bf:	88 c8                	mov    al,cl
c00176c1:	09 d0                	or     eax,edx
c00176c3:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176c8:	83 ec 0c             	sub    esp,0xc
c00176cb:	68 00 00 04 00       	push   0x40000
c00176d0:	e8 4d f6 ff ff       	call   c0016d22 <cpuidCheckExtendedEBX(unsigned int)>
c00176d5:	83 c4 10             	add    esp,0x10
c00176d8:	83 e0 01             	and    eax,0x1
c00176db:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00176de:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176e3:	83 e0 fd             	and    eax,0xfffffffd
c00176e6:	88 c2                	mov    dl,al
c00176e8:	88 c8                	mov    al,cl
c00176ea:	09 d0                	or     eax,edx
c00176ec:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176f1:	83 ec 0c             	sub    esp,0xc
c00176f4:	6a 04                	push   0x4
c00176f6:	e8 55 f6 ff ff       	call   c0016d50 <cpuidCheckExtendedECX(unsigned int)>
c00176fb:	83 c4 10             	add    esp,0x10
c00176fe:	83 e0 01             	and    eax,0x1
c0017701:	89 c1                	mov    ecx,eax
c0017703:	c1 e1 05             	shl    ecx,0x5
c0017706:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001770b:	83 e0 df             	and    eax,0xffffffdf
c001770e:	88 c2                	mov    dl,al
c0017710:	88 c8                	mov    al,cl
c0017712:	09 d0                	or     eax,edx
c0017714:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017719:	83 ec 0c             	sub    esp,0xc
c001771c:	6a 20                	push   0x20
c001771e:	e8 2d f6 ff ff       	call   c0016d50 <cpuidCheckExtendedECX(unsigned int)>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	83 e0 01             	and    eax,0x1
c0017729:	89 c1                	mov    ecx,eax
c001772b:	c1 e1 04             	shl    ecx,0x4
c001772e:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017733:	83 e0 ef             	and    eax,0xffffffef
c0017736:	88 c2                	mov    dl,al
c0017738:	88 c8                	mov    al,cl
c001773a:	09 d0                	or     eax,edx
c001773c:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017741:	83 ec 0c             	sub    esp,0xc
c0017744:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017748:	50                   	push   eax
c0017749:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001774d:	50                   	push   eax
c001774e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017752:	50                   	push   eax
c0017753:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017757:	50                   	push   eax
c0017758:	6a 01                	push   0x1
c001775a:	e8 ca f4 ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001775f:	83 c4 20             	add    esp,0x20
c0017762:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017766:	83 e0 0f             	and    eax,0xf
c0017769:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c001776e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017772:	c1 e8 04             	shr    eax,0x4
c0017775:	83 e0 0f             	and    eax,0xf
c0017778:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c001777d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017781:	c1 e8 08             	shr    eax,0x8
c0017784:	83 e0 0f             	and    eax,0xf
c0017787:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c001778c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017790:	c1 e8 0c             	shr    eax,0xc
c0017793:	83 e0 03             	and    eax,0x3
c0017796:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c001779b:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177a0:	0f b6 c0             	movzx  eax,al
c00177a3:	83 f8 06             	cmp    eax,0x6
c00177a6:	74 0d                	je     c00177b5 <HalDetectFeatures()+0xa37>
c00177a8:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177ad:	0f b6 c0             	movzx  eax,al
c00177b0:	83 f8 0f             	cmp    eax,0xf
c00177b3:	75 18                	jne    c00177cd <HalDetectFeatures()+0xa4f>
c00177b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177b9:	c1 e8 10             	shr    eax,0x10
c00177bc:	c1 e0 04             	shl    eax,0x4
c00177bf:	88 c2                	mov    dl,al
c00177c1:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c00177c6:	09 d0                	or     eax,edx
c00177c8:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c00177cd:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177d2:	0f b6 c0             	movzx  eax,al
c00177d5:	83 f8 0f             	cmp    eax,0xf
c00177d8:	75 15                	jne    c00177ef <HalDetectFeatures()+0xa71>
c00177da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177de:	c1 e8 14             	shr    eax,0x14
c00177e1:	88 c2                	mov    dl,al
c00177e3:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177e8:	01 d0                	add    eax,edx
c00177ea:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00177ef:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00177f7:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00177ff:	85 c0                	test   eax,eax
c0017801:	74 2d                	je     c0017830 <HalDetectFeatures()+0xab2>
c0017803:	83 ec 0c             	sub    esp,0xc
c0017806:	68 00 00 00 40       	push   0x40000000
c001780b:	e8 e4 f4 ff ff       	call   c0016cf4 <cpuidCheckECX(unsigned int)>
c0017810:	83 c4 10             	add    esp,0x10
c0017813:	83 e0 01             	and    eax,0x1
c0017816:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001781d:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017822:	83 e0 fb             	and    eax,0xfffffffb
c0017825:	88 c2                	mov    dl,al
c0017827:	88 c8                	mov    al,cl
c0017829:	09 d0                	or     eax,edx
c001782b:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017830:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017835:	83 c8 04             	or     eax,0x4
c0017838:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001783d:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017842:	83 c8 08             	or     eax,0x8
c0017845:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001784a:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001784f:	83 c8 10             	or     eax,0x10
c0017852:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017857:	83 ec 0c             	sub    esp,0xc
c001785a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001785e:	50                   	push   eax
c001785f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017863:	50                   	push   eax
c0017864:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017868:	50                   	push   eax
c0017869:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001786d:	50                   	push   eax
c001786e:	68 00 00 00 80       	push   0x80000000
c0017873:	e8 b1 f3 ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017878:	83 c4 20             	add    esp,0x20
c001787b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001787f:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017884:	0f 86 96 01 00 00    	jbe    c0017a20 <HalDetectFeatures()+0xca2>
c001788a:	83 ec 0c             	sub    esp,0xc
c001788d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017891:	50                   	push   eax
c0017892:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017896:	50                   	push   eax
c0017897:	8d 44 24 24          	lea    eax,[esp+0x24]
c001789b:	50                   	push   eax
c001789c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00178a0:	50                   	push   eax
c00178a1:	68 01 00 00 80       	push   0x80000001
c00178a6:	e8 7e f3 ff ff       	call   c0016c29 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178ab:	83 c4 20             	add    esp,0x20
c00178ae:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178b3:	83 e0 7f             	and    eax,0x7f
c00178b6:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178bb:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00178c0:	83 e0 fb             	and    eax,0xfffffffb
c00178c3:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00178c8:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00178cd:	83 e0 fd             	and    eax,0xfffffffd
c00178d0:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00178d5:	e9 46 01 00 00       	jmp    c0017a20 <HalDetectFeatures()+0xca2>
c00178da:	83 ec 08             	sub    esp,0x8
c00178dd:	68 4e 2d 02 c0       	push   0xc0022d4e
c00178e2:	68 70 c7 02 c0       	push   0xc002c770
c00178e7:	e8 64 8d fe ff       	call   c0000650 <strcpy>
c00178ec:	83 c4 10             	add    esp,0x10
c00178ef:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00178f9:	e8 c5 88 fe ff       	call   c00001c3 <is486>
c00178fe:	85 c0                	test   eax,eax
c0017900:	0f 95 c0             	setne  al
c0017903:	0f b6 c0             	movzx  eax,al
c0017906:	85 c0                	test   eax,eax
c0017908:	0f 84 8d 00 00 00    	je     c001799b <HalDetectFeatures()+0xc1d>
c001790e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017913:	83 c8 04             	or     eax,0x4
c0017916:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001791b:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017920:	83 c8 08             	or     eax,0x8
c0017923:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017928:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001792d:	83 c8 10             	or     eax,0x10
c0017930:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017935:	0f 20 c0             	mov    eax,cr0
c0017938:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001793c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017940:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017947:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001794e:	83 e0 04             	and    eax,0x4
c0017951:	74 1e                	je     c0017971 <HalDetectFeatures()+0xbf3>
c0017953:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001795a:	83 e0 10             	and    eax,0x10
c001795d:	75 12                	jne    c0017971 <HalDetectFeatures()+0xbf3>
c001795f:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017964:	83 e0 f7             	and    eax,0xfffffff7
c0017967:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001796c:	e9 af 00 00 00       	jmp    c0017a20 <HalDetectFeatures()+0xca2>
c0017971:	e8 28 88 fe ff       	call   c000019e <hasLegacyFPU>
c0017976:	83 e0 01             	and    eax,0x1
c0017979:	83 e0 01             	and    eax,0x1
c001797c:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017983:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017988:	83 e0 f7             	and    eax,0xfffffff7
c001798b:	88 c2                	mov    dl,al
c001798d:	88 c8                	mov    al,cl
c001798f:	09 d0                	or     eax,edx
c0017991:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017996:	e9 85 00 00 00       	jmp    c0017a20 <HalDetectFeatures()+0xca2>
c001799b:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179a0:	83 e0 fb             	and    eax,0xfffffffb
c00179a3:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179a8:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179ad:	83 e0 f7             	and    eax,0xfffffff7
c00179b0:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179b5:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179ba:	83 e0 ef             	and    eax,0xffffffef
c00179bd:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179c2:	0f 20 c0             	mov    eax,cr0
c00179c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179cd:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00179d4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00179db:	83 e0 04             	and    eax,0x4
c00179de:	74 1b                	je     c00179fb <HalDetectFeatures()+0xc7d>
c00179e0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00179e7:	83 e0 10             	and    eax,0x10
c00179ea:	75 0f                	jne    c00179fb <HalDetectFeatures()+0xc7d>
c00179ec:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179f1:	83 e0 f7             	and    eax,0xfffffff7
c00179f4:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179f9:	eb 25                	jmp    c0017a20 <HalDetectFeatures()+0xca2>
c00179fb:	e8 9e 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a00:	83 e0 01             	and    eax,0x1
c0017a03:	83 e0 01             	and    eax,0x1
c0017a06:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a0d:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a12:	83 e0 f7             	and    eax,0xfffffff7
c0017a15:	88 c2                	mov    dl,al
c0017a17:	88 c8                	mov    al,cl
c0017a19:	09 d0                	or     eax,edx
c0017a1b:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a20:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a25:	83 e0 08             	and    eax,0x8
c0017a28:	0f b6 c0             	movzx  eax,al
c0017a2b:	85 c0                	test   eax,eax
c0017a2d:	75 25                	jne    c0017a54 <HalDetectFeatures()+0xcd6>
c0017a2f:	e8 6a 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a34:	83 e0 01             	and    eax,0x1
c0017a37:	83 e0 01             	and    eax,0x1
c0017a3a:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a41:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a46:	83 e0 f7             	and    eax,0xfffffff7
c0017a49:	88 c2                	mov    dl,al
c0017a4b:	88 c8                	mov    al,cl
c0017a4d:	09 d0                	or     eax,edx
c0017a4f:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a54:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a59:	83 e0 08             	and    eax,0x8
c0017a5c:	0f b6 c0             	movzx  eax,al
c0017a5f:	85 c0                	test   eax,eax
c0017a61:	74 0d                	je     c0017a70 <HalDetectFeatures()+0xcf2>
c0017a63:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a68:	83 c8 10             	or     eax,0x10
c0017a6b:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017a70:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a75:	83 e0 10             	and    eax,0x10
c0017a78:	0f b6 c0             	movzx  eax,al
c0017a7b:	85 c0                	test   eax,eax
c0017a7d:	75 23                	jne    c0017aa2 <HalDetectFeatures()+0xd24>
c0017a7f:	e8 e2 7c 00 00       	call   c001f766 <x87Detect>
c0017a84:	83 e0 01             	and    eax,0x1
c0017a87:	83 e0 01             	and    eax,0x1
c0017a8a:	89 c1                	mov    ecx,eax
c0017a8c:	c1 e1 04             	shl    ecx,0x4
c0017a8f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a94:	83 e0 ef             	and    eax,0xffffffef
c0017a97:	88 c2                	mov    dl,al
c0017a99:	88 c8                	mov    al,cl
c0017a9b:	09 d0                	or     eax,edx
c0017a9d:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017aa2:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017aa7:	83 e0 01             	and    eax,0x1
c0017aaa:	0f b6 c0             	movzx  eax,al
c0017aad:	85 c0                	test   eax,eax
c0017aaf:	75 2d                	jne    c0017ade <HalDetectFeatures()+0xd60>
c0017ab1:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017ab6:	83 e0 02             	and    eax,0x2
c0017ab9:	0f b6 c0             	movzx  eax,al
c0017abc:	85 c0                	test   eax,eax
c0017abe:	75 1e                	jne    c0017ade <HalDetectFeatures()+0xd60>
c0017ac0:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017ac5:	83 e0 04             	and    eax,0x4
c0017ac8:	0f b6 c0             	movzx  eax,al
c0017acb:	85 c0                	test   eax,eax
c0017acd:	75 0f                	jne    c0017ade <HalDetectFeatures()+0xd60>
c0017acf:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017ad4:	83 e0 08             	and    eax,0x8
c0017ad7:	0f b6 c0             	movzx  eax,al
c0017ada:	85 c0                	test   eax,eax
c0017adc:	74 0d                	je     c0017aeb <HalDetectFeatures()+0xd6d>
c0017ade:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ae3:	83 c8 80             	or     eax,0xffffff80
c0017ae6:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017aeb:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017af0:	83 e0 10             	and    eax,0x10
c0017af3:	0f b6 c0             	movzx  eax,al
c0017af6:	85 c0                	test   eax,eax
c0017af8:	74 2f                	je     c0017b29 <HalDetectFeatures()+0xdab>
c0017afa:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017aff:	83 e0 80             	and    eax,0xffffff80
c0017b02:	0f b6 c0             	movzx  eax,al
c0017b05:	85 c0                	test   eax,eax
c0017b07:	75 20                	jne    c0017b29 <HalDetectFeatures()+0xdab>
c0017b09:	e8 12 7c 00 00       	call   c001f720 <sseDetect>
c0017b0e:	83 e0 01             	and    eax,0x1
c0017b11:	89 c1                	mov    ecx,eax
c0017b13:	c1 e1 07             	shl    ecx,0x7
c0017b16:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b1b:	83 e0 7f             	and    eax,0x7f
c0017b1e:	88 c2                	mov    dl,al
c0017b20:	88 c8                	mov    al,cl
c0017b22:	09 d0                	or     eax,edx
c0017b24:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b29:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b2e:	83 e0 80             	and    eax,0xffffff80
c0017b31:	0f b6 c0             	movzx  eax,al
c0017b34:	85 c0                	test   eax,eax
c0017b36:	74 1c                	je     c0017b54 <HalDetectFeatures()+0xdd6>
c0017b38:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b3d:	83 e0 20             	and    eax,0x20
c0017b40:	0f b6 c0             	movzx  eax,al
c0017b43:	85 c0                	test   eax,eax
c0017b45:	75 0d                	jne    c0017b54 <HalDetectFeatures()+0xdd6>
c0017b47:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b4c:	83 e0 df             	and    eax,0xffffffdf
c0017b4f:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017b54:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017b5b:	90                   	nop
c0017b5c:	81 c4 90 00 00 00    	add    esp,0x90
c0017b62:	5b                   	pop    ebx
c0017b63:	5e                   	pop    esi
c0017b64:	5f                   	pop    edi
c0017b65:	c3                   	ret    

c0017b66 <HalEnableNMI()>:
c0017b66:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017b6d:	6a 10                	push   0x10
c0017b6f:	e8 03 ef ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0017b74:	83 c4 04             	add    esp,0x4
c0017b77:	90                   	nop
c0017b78:	c3                   	ret    

c0017b79 <HalDisableNMI()>:
c0017b79:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017b80:	6a 10                	push   0x10
c0017b82:	e8 f0 ee ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0017b87:	83 c4 04             	add    esp,0x4
c0017b8a:	90                   	nop
c0017b8b:	c3                   	ret    

c0017b8c <HalGetNMIState()>:
c0017b8c:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017b91:	c3                   	ret    

c0017b92 <x86rdmsr(unsigned int)>:
c0017b92:	83 ec 1c             	sub    esp,0x1c
c0017b95:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b9a:	83 e0 08             	and    eax,0x8
c0017b9d:	0f b6 c0             	movzx  eax,al
c0017ba0:	85 c0                	test   eax,eax
c0017ba2:	75 10                	jne    c0017bb4 <x86rdmsr(unsigned int)+0x22>
c0017ba4:	83 ec 0c             	sub    esp,0xc
c0017ba7:	68 e9 2d 02 c0       	push   0xc0022de9
c0017bac:	e8 65 70 ff ff       	call   c000ec16 <KePanic(char const*)>
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bb8:	89 c1                	mov    ecx,eax
c0017bba:	0f 32                	rdmsr  
c0017bbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017bc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bcc:	83 c4 1c             	add    esp,0x1c
c0017bcf:	c3                   	ret    

c0017bd0 <x86wrmsr(unsigned int, unsigned long long)>:
c0017bd0:	83 ec 1c             	sub    esp,0x1c
c0017bd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017be3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017be8:	83 e0 08             	and    eax,0x8
c0017beb:	0f b6 c0             	movzx  eax,al
c0017bee:	85 c0                	test   eax,eax
c0017bf0:	75 10                	jne    c0017c02 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017bf2:	83 ec 0c             	sub    esp,0xc
c0017bf5:	68 ef 2d 02 c0       	push   0xc0022def
c0017bfa:	e8 17 70 ff ff       	call   c000ec16 <KePanic(char const*)>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017c06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c0e:	0f 30                	wrmsr  
c0017c10:	90                   	nop
c0017c11:	83 c4 1c             	add    esp,0x1c
c0017c14:	c3                   	ret    

c0017c15 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017c15:	83 ec 0c             	sub    esp,0xc
c0017c18:	83 ec 0c             	sub    esp,0xc
c0017c1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c1f:	e8 23 e7 ff ff       	call   c0016347 <Vm::faultHandler(regs*)>
c0017c24:	83 c4 10             	add    esp,0x10
c0017c27:	83 c4 0c             	add    esp,0xc
c0017c2a:	c3                   	ret    

c0017c2b <HalFindRSDP()>:
c0017c2b:	83 ec 1c             	sub    esp,0x1c
c0017c2e:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017c33:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017c38:	7e 0c                	jle    c0017c46 <HalFindRSDP()+0x1b>
c0017c3a:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017c3f:	25 00 04 00 00       	and    eax,0x400
c0017c44:	74 0d                	je     c0017c53 <HalFindRSDP()+0x28>
c0017c46:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c4b:	83 e0 fb             	and    eax,0xfffffffb
c0017c4e:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017c53:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c58:	83 e0 04             	and    eax,0x4
c0017c5b:	0f b6 c0             	movzx  eax,al
c0017c5e:	85 c0                	test   eax,eax
c0017c60:	75 07                	jne    c0017c69 <HalFindRSDP()+0x3e>
c0017c62:	b8 00 00 00 00       	mov    eax,0x0
c0017c67:	eb 53                	jmp    c0017cbc <HalFindRSDP()+0x91>
c0017c69:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017c71:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017c79:	77 2f                	ja     c0017caa <HalFindRSDP()+0x7f>
c0017c7b:	83 ec 04             	sub    esp,0x4
c0017c7e:	6a 08                	push   0x8
c0017c80:	68 f5 2d 02 c0       	push   0xc0022df5
c0017c85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c89:	e8 f2 86 fe ff       	call   c0000380 <memcmp>
c0017c8e:	83 c4 10             	add    esp,0x10
c0017c91:	85 c0                	test   eax,eax
c0017c93:	0f 94 c0             	sete   al
c0017c96:	0f b6 c0             	movzx  eax,al
c0017c99:	85 c0                	test   eax,eax
c0017c9b:	74 06                	je     c0017ca3 <HalFindRSDP()+0x78>
c0017c9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ca1:	eb 19                	jmp    c0017cbc <HalFindRSDP()+0x91>
c0017ca3:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017ca8:	eb c7                	jmp    c0017c71 <HalFindRSDP()+0x46>
c0017caa:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017caf:	83 e0 fb             	and    eax,0xfffffffb
c0017cb2:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017cb7:	b8 00 00 00 00       	mov    eax,0x0
c0017cbc:	83 c4 1c             	add    esp,0x1c
c0017cbf:	c3                   	ret    

c0017cc0 <HalHandlePageFault(void*, void*)>:
c0017cc0:	83 ec 1c             	sub    esp,0x1c
c0017cc3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ccd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017cd3:	0f 20 d2             	mov    edx,cr2
c0017cd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cde:	83 ec 08             	sub    esp,0x8
c0017ce1:	52                   	push   edx
c0017ce2:	50                   	push   eax
c0017ce3:	e8 3e af ff ff       	call   c0012c26 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017ce8:	83 c4 10             	add    esp,0x10
c0017ceb:	83 c4 1c             	add    esp,0x1c
c0017cee:	c3                   	ret    

c0017cef <HalHandleOpcodeFault(void*, void*)>:
c0017cef:	83 ec 1c             	sub    esp,0x1c
c0017cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cfa:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017cff:	0f b6 c0             	movzx  eax,al
c0017d02:	85 c0                	test   eax,eax
c0017d04:	74 25                	je     c0017d2b <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017d06:	83 ec 0c             	sub    esp,0xc
c0017d09:	68 ec 2f 02 c0       	push   0xc0022fec
c0017d0e:	e8 3b f2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d1d:	8d 50 19             	lea    edx,[eax+0x19]
c0017d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d24:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d27:	b0 01                	mov    al,0x1
c0017d29:	eb 02                	jmp    c0017d2d <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017d2b:	b0 00                	mov    al,0x0
c0017d2d:	83 c4 1c             	add    esp,0x1c
c0017d30:	c3                   	ret    

c0017d31 <HalDisplayDebugInfo(void*)>:
c0017d31:	83 ec 2c             	sub    esp,0x2c
c0017d34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d3c:	0f 20 c0             	mov    eax,cr0
c0017d3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d43:	0f 20 d0             	mov    eax,cr2
c0017d46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d4a:	0f 20 d8             	mov    eax,cr3
c0017d4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d51:	0f 20 e0             	mov    eax,cr4
c0017d54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d5c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017d5f:	83 ec 08             	sub    esp,0x8
c0017d62:	50                   	push   eax
c0017d63:	68 0d 2e 02 c0       	push   0xc0022e0d
c0017d68:	e8 e1 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d6d:	83 c4 10             	add    esp,0x10
c0017d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d74:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017d77:	83 ec 08             	sub    esp,0x8
c0017d7a:	50                   	push   eax
c0017d7b:	68 fe 2d 02 c0       	push   0xc0022dfe
c0017d80:	e8 c9 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d85:	83 c4 10             	add    esp,0x10
c0017d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d8c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d8f:	83 ec 08             	sub    esp,0x8
c0017d92:	50                   	push   eax
c0017d93:	68 09 2e 02 c0       	push   0xc0022e09
c0017d98:	e8 b1 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d9d:	83 c4 10             	add    esp,0x10
c0017da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017da7:	83 ec 08             	sub    esp,0x8
c0017daa:	50                   	push   eax
c0017dab:	68 18 2e 02 c0       	push   0xc0022e18
c0017db0:	e8 99 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dbc:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017dbf:	83 ec 08             	sub    esp,0x8
c0017dc2:	50                   	push   eax
c0017dc3:	68 23 2e 02 c0       	push   0xc0022e23
c0017dc8:	e8 81 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017dcd:	83 c4 10             	add    esp,0x10
c0017dd0:	83 ec 08             	sub    esp,0x8
c0017dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dd7:	68 2e 2e 02 c0       	push   0xc0022e2e
c0017ddc:	e8 6d f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017de1:	83 c4 10             	add    esp,0x10
c0017de4:	83 ec 08             	sub    esp,0x8
c0017de7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017deb:	68 39 2e 02 c0       	push   0xc0022e39
c0017df0:	e8 59 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017df5:	83 c4 10             	add    esp,0x10
c0017df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dfc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017dff:	c1 e0 05             	shl    eax,0x5
c0017e02:	8d 90 40 42 02 c0    	lea    edx,[eax-0x3ffdbdc0]
c0017e08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e0c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017e0f:	83 ec 04             	sub    esp,0x4
c0017e12:	52                   	push   edx
c0017e13:	50                   	push   eax
c0017e14:	68 44 2e 02 c0       	push   0xc0022e44
c0017e19:	e8 30 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017e1e:	83 c4 10             	add    esp,0x10
c0017e21:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e2c:	83 ec 0c             	sub    esp,0xc
c0017e2f:	50                   	push   eax
c0017e30:	e8 04 92 ff ff       	call   c0011039 <setActiveTerminal(VgaText*)>
c0017e35:	83 c4 10             	add    esp,0x10
c0017e38:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e3d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e43:	83 ec 08             	sub    esp,0x8
c0017e46:	68 53 2e 02 c0       	push   0xc0022e53
c0017e4b:	50                   	push   eax
c0017e4c:	e8 25 95 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017e51:	83 c4 10             	add    esp,0x10
c0017e54:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e63:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017e66:	83 ec 08             	sub    esp,0x8
c0017e69:	52                   	push   edx
c0017e6a:	50                   	push   eax
c0017e6b:	e8 c0 94 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017e70:	83 c4 10             	add    esp,0x10
c0017e73:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e7e:	83 ec 08             	sub    esp,0x8
c0017e81:	68 61 2e 02 c0       	push   0xc0022e61
c0017e86:	50                   	push   eax
c0017e87:	e8 ea 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e9a:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017e9f:	8b 12                	mov    edx,DWORD PTR [edx]
c0017ea1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017ea4:	83 c2 0c             	add    edx,0xc
c0017ea7:	83 ec 08             	sub    esp,0x8
c0017eaa:	52                   	push   edx
c0017eab:	50                   	push   eax
c0017eac:	e8 c5 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017eb9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ebf:	83 ec 08             	sub    esp,0x8
c0017ec2:	68 6a 2e 02 c0       	push   0xc0022e6a
c0017ec7:	50                   	push   eax
c0017ec8:	e8 a9 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ed5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017edf:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017ee2:	83 ec 08             	sub    esp,0x8
c0017ee5:	52                   	push   edx
c0017ee6:	50                   	push   eax
c0017ee7:	e8 44 94 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017eec:	83 c4 10             	add    esp,0x10
c0017eef:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ef4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017efa:	83 ec 08             	sub    esp,0x8
c0017efd:	68 72 2e 02 c0       	push   0xc0022e72
c0017f02:	50                   	push   eax
c0017f03:	e8 6e 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f10:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f1a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017f1d:	83 ec 08             	sub    esp,0x8
c0017f20:	52                   	push   edx
c0017f21:	50                   	push   eax
c0017f22:	e8 09 94 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f35:	83 ec 08             	sub    esp,0x8
c0017f38:	68 7a 2e 02 c0       	push   0xc0022e7a
c0017f3d:	50                   	push   eax
c0017f3e:	e8 33 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017f43:	83 c4 10             	add    esp,0x10
c0017f46:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f51:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f55:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017f58:	83 ec 08             	sub    esp,0x8
c0017f5b:	52                   	push   edx
c0017f5c:	50                   	push   eax
c0017f5d:	e8 ce 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017f62:	83 c4 10             	add    esp,0x10
c0017f65:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f70:	83 ec 08             	sub    esp,0x8
c0017f73:	68 82 2e 02 c0       	push   0xc0022e82
c0017f78:	50                   	push   eax
c0017f79:	e8 f8 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017f7e:	83 c4 10             	add    esp,0x10
c0017f81:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f90:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017f93:	83 ec 08             	sub    esp,0x8
c0017f96:	52                   	push   edx
c0017f97:	50                   	push   eax
c0017f98:	e8 93 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fa5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fab:	83 ec 08             	sub    esp,0x8
c0017fae:	68 8a 2e 02 c0       	push   0xc0022e8a
c0017fb3:	50                   	push   eax
c0017fb4:	e8 bd 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017fb9:	83 c4 10             	add    esp,0x10
c0017fbc:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fc1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fcb:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017fce:	83 ec 08             	sub    esp,0x8
c0017fd1:	52                   	push   edx
c0017fd2:	50                   	push   eax
c0017fd3:	e8 58 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017fd8:	83 c4 10             	add    esp,0x10
c0017fdb:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fe0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fe6:	83 ec 08             	sub    esp,0x8
c0017fe9:	68 92 2e 02 c0       	push   0xc0022e92
c0017fee:	50                   	push   eax
c0017fef:	e8 82 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017ff4:	83 c4 10             	add    esp,0x10
c0017ff7:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ffc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018006:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018009:	83 ec 08             	sub    esp,0x8
c001800c:	52                   	push   edx
c001800d:	50                   	push   eax
c001800e:	e8 1d 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0018013:	83 c4 10             	add    esp,0x10
c0018016:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001801b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018021:	83 ec 08             	sub    esp,0x8
c0018024:	68 9a 2e 02 c0       	push   0xc0022e9a
c0018029:	50                   	push   eax
c001802a:	e8 47 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001802f:	83 c4 10             	add    esp,0x10
c0018032:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018037:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001803d:	83 ec 08             	sub    esp,0x8
c0018040:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018044:	50                   	push   eax
c0018045:	e8 e6 92 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c001804a:	83 c4 10             	add    esp,0x10
c001804d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018052:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018058:	83 ec 08             	sub    esp,0x8
c001805b:	68 a3 2e 02 c0       	push   0xc0022ea3
c0018060:	50                   	push   eax
c0018061:	e8 10 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0018066:	83 c4 10             	add    esp,0x10
c0018069:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001806e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018074:	83 ec 08             	sub    esp,0x8
c0018077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001807b:	50                   	push   eax
c001807c:	e8 af 92 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018089:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001808f:	83 ec 08             	sub    esp,0x8
c0018092:	68 ab 2e 02 c0       	push   0xc0022eab
c0018097:	50                   	push   eax
c0018098:	e8 d9 92 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001809d:	83 c4 10             	add    esp,0x10
c00180a0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180ab:	83 ec 08             	sub    esp,0x8
c00180ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180b2:	50                   	push   eax
c00180b3:	e8 78 92 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c00180b8:	83 c4 10             	add    esp,0x10
c00180bb:	fa                   	cli    
c00180bc:	f4                   	hlt    
c00180bd:	eb fe                	jmp    c00180bd <HalDisplayDebugInfo(void*)+0x38c>

c00180bf <HalReceivedNMI()>:
c00180bf:	83 ec 1c             	sub    esp,0x1c
c00180c2:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c00180c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180cd:	89 c2                	mov    edx,eax
c00180cf:	ec                   	in     al,dx
c00180d0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00180d4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00180d8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180dc:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00180e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180e7:	89 c2                	mov    edx,eax
c00180e9:	ec                   	in     al,dx
c00180ea:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00180ee:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00180f2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00180f6:	83 ec 0c             	sub    esp,0xc
c00180f9:	68 b3 2e 02 c0       	push   0xc0022eb3
c00180fe:	e8 4b ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018103:	83 c4 10             	add    esp,0x10
c0018106:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001810b:	83 e0 10             	and    eax,0x10
c001810e:	74 10                	je     c0018120 <HalReceivedNMI()+0x61>
c0018110:	83 ec 0c             	sub    esp,0xc
c0018113:	68 c4 2e 02 c0       	push   0xc0022ec4
c0018118:	e8 f9 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c001811d:	83 c4 10             	add    esp,0x10
c0018120:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0018125:	83 e0 40             	and    eax,0x40
c0018128:	74 10                	je     c001813a <HalReceivedNMI()+0x7b>
c001812a:	83 ec 0c             	sub    esp,0xc
c001812d:	68 d1 2e 02 c0       	push   0xc0022ed1
c0018132:	e8 df 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c0018137:	83 c4 10             	add    esp,0x10
c001813a:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001813e:	0f be c0             	movsx  eax,al
c0018141:	85 c0                	test   eax,eax
c0018143:	79 10                	jns    c0018155 <HalReceivedNMI()+0x96>
c0018145:	83 ec 0c             	sub    esp,0xc
c0018148:	68 db 2e 02 c0       	push   0xc0022edb
c001814d:	e8 c4 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	90                   	nop
c0018156:	83 c4 1c             	add    esp,0x1c
c0018159:	c3                   	ret    

c001815a <HalSystemIdle()>:
c001815a:	56                   	push   esi
c001815b:	53                   	push   ebx
c001815c:	83 ec 14             	sub    esp,0x14
c001815f:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0018164:	83 e0 10             	and    eax,0x10
c0018167:	0f b6 c0             	movzx  eax,al
c001816a:	85 c0                	test   eax,eax
c001816c:	74 43                	je     c00181b1 <HalSystemIdle()+0x57>
c001816e:	83 ec 0c             	sub    esp,0xc
c0018171:	68 e1 00 00 00       	push   0xe1
c0018176:	e8 17 fa ff ff       	call   c0017b92 <x86rdmsr(unsigned int)>
c001817b:	83 c4 10             	add    esp,0x10
c001817e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018182:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018186:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001818a:	83 e0 02             	and    eax,0x2
c001818d:	89 c3                	mov    ebx,eax
c001818f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018193:	83 e0 00             	and    eax,0x0
c0018196:	89 c6                	mov    esi,eax
c0018198:	83 ec 04             	sub    esp,0x4
c001819b:	56                   	push   esi
c001819c:	53                   	push   ebx
c001819d:	68 e1 00 00 00       	push   0xe1
c00181a2:	e8 29 fa ff ff       	call   c0017bd0 <x86wrmsr(unsigned int, unsigned long long)>
c00181a7:	83 c4 10             	add    esp,0x10
c00181aa:	e8 e5 7f fe ff       	call   c0000194 <doTPAUSE>
c00181af:	eb 01                	jmp    c00181b2 <HalSystemIdle()+0x58>
c00181b1:	f4                   	hlt    
c00181b2:	90                   	nop
c00181b3:	83 c4 14             	add    esp,0x14
c00181b6:	5b                   	pop    ebx
c00181b7:	5e                   	pop    esi
c00181b8:	c3                   	ret    

c00181b9 <i386SaveCoprocessor(void*)>:
c00181b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181bd:	83 c0 3f             	add    eax,0x3f
c00181c0:	83 e0 c0             	and    eax,0xffffffc0
c00181c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181c7:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c00181cd <i386LoadCoprocessor(void*)>:
c00181cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181d1:	83 c0 3f             	add    eax,0x3f
c00181d4:	83 e0 c0             	and    eax,0xffffffc0
c00181d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181db:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c00181e1 <x87EmulHandler(regs*, void*)>:
c00181e1:	53                   	push   ebx
c00181e2:	83 ec 08             	sub    esp,0x8
c00181e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181ea:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00181ee:	74 10                	je     c0018200 <x87EmulHandler(regs*, void*)+0x1f>
c00181f0:	83 ec 0c             	sub    esp,0xc
c00181f3:	68 e8 2e 02 c0       	push   0xc0022ee8
c00181f8:	e8 19 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c00181fd:	83 c4 10             	add    esp,0x10
c0018200:	0f 20 c0             	mov    eax,cr0
c0018203:	a8 08                	test   al,0x8
c0018205:	74 59                	je     c0018260 <x87EmulHandler(regs*, void*)+0x7f>
c0018207:	0f 06                	clts   
c0018209:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c001820e:	85 c0                	test   eax,eax
c0018210:	74 0e                	je     c0018220 <x87EmulHandler(regs*, void*)+0x3f>
c0018212:	83 ec 0c             	sub    esp,0xc
c0018215:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018218:	e8 9c ff ff ff       	call   c00181b9 <i386SaveCoprocessor(void*)>
c001821d:	83 c4 10             	add    esp,0x10
c0018220:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018226:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001822a:	75 12                	jne    c001823e <x87EmulHandler(regs*, void*)+0x5d>
c001822c:	83 ec 0c             	sub    esp,0xc
c001822f:	68 40 02 00 00       	push   0x240
c0018234:	e8 97 66 ff ff       	call   c000e8d0 <malloc>
c0018239:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001823c:	eb 10                	jmp    c001824e <x87EmulHandler(regs*, void*)+0x6d>
c001823e:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018243:	83 ec 0c             	sub    esp,0xc
c0018246:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018249:	e8 7f ff ff ff       	call   c00181cd <i386LoadCoprocessor(void*)>
c001824e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018253:	83 c4 10             	add    esp,0x10
c0018256:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c001825b:	83 c4 08             	add    esp,0x8
c001825e:	5b                   	pop    ebx
c001825f:	c3                   	ret    
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	68 fc 2e 02 c0       	push   0xc0022efc
c0018268:	e8 e1 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001826d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018275:	83 c4 18             	add    esp,0x18
c0018278:	5b                   	pop    ebx
c0018279:	e9 0e da ff ff       	jmp    c0015c8c <Thr::terminateFromIRQ(int)>

c001827e <HalInitialiseCoprocessor()>:
c001827e:	83 ec 10             	sub    esp,0x10
c0018281:	6a 00                	push   0x0
c0018283:	68 e1 81 01 c0       	push   0xc00181e1
c0018288:	6a 07                	push   0x7
c001828a:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c0018294:	e8 9e 06 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018299:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001829e:	83 c4 10             	add    esp,0x10
c00182a1:	a8 80                	test   al,0x80
c00182a3:	74 1c                	je     c00182c1 <HalInitialiseCoprocessor()+0x43>
c00182a5:	c7 05 50 c7 02 c0 38 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f738
c00182af:	c7 05 4c c7 02 c0 40 f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f740
c00182b9:	83 c4 0c             	add    esp,0xc
c00182bc:	e9 87 74 00 00       	jmp    c001f748 <sseInit>
c00182c1:	a8 10                	test   al,0x10
c00182c3:	74 1c                	je     c00182e1 <HalInitialiseCoprocessor()+0x63>
c00182c5:	c7 05 50 c7 02 c0 87 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f787
c00182cf:	c7 05 4c c7 02 c0 8e f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f78e
c00182d9:	83 c4 0c             	add    esp,0xc
c00182dc:	e9 b4 74 00 00       	jmp    c001f795 <x87Init>
c00182e1:	c7 05 50 c7 02 c0 72 6a 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016a72
c00182eb:	c7 05 4c c7 02 c0 72 6a 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016a72
c00182f5:	0f 20 c0             	mov    eax,cr0
c00182f8:	83 c8 04             	or     eax,0x4
c00182fb:	0f 22 c0             	mov    cr0,eax
c00182fe:	83 c4 0c             	add    esp,0xc
c0018301:	c3                   	ret    

c0018302 <HalPanic(char const*)>:
c0018302:	53                   	push   ebx
c0018303:	83 ec 10             	sub    esp,0x10
c0018306:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001830a:	fa                   	cli    
c001830b:	53                   	push   ebx
c001830c:	68 12 2f 02 c0       	push   0xc0022f12
c0018311:	e8 38 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018316:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	85 c0                	test   eax,eax
c0018320:	74 09                	je     c001832b <HalPanic(char const*)+0x29>
c0018322:	83 ec 0c             	sub    esp,0xc
c0018325:	53                   	push   ebx
c0018326:	ff d0                	call   eax
c0018328:	83 c4 10             	add    esp,0x10
c001832b:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c0018330:	85 c0                	test   eax,eax
c0018332:	0f 84 dc 00 00 00    	je     c0018414 <HalPanic(char const*)+0x112>
c0018338:	52                   	push   edx
c0018339:	6a 01                	push   0x1
c001833b:	6a 0f                	push   0xf
c001833d:	50                   	push   eax
c001833e:	e8 51 8b ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018343:	59                   	pop    ecx
c0018344:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001834a:	e8 35 8d ff ff       	call   c0011084 <VgaText::clearScreen()>
c001834f:	58                   	pop    eax
c0018350:	5a                   	pop    edx
c0018351:	68 70 23 02 c0       	push   0xc0022370
c0018356:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001835c:	e8 6b 8b ff ff       	call   c0010ecc <VgaText::setTitle(char*)>
c0018361:	83 c4 0c             	add    esp,0xc
c0018364:	6a 01                	push   0x1
c0018366:	6a 0f                	push   0xf
c0018368:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001836e:	e8 21 8b ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018373:	59                   	pop    ecx
c0018374:	58                   	pop    eax
c0018375:	68 2b 2f 02 c0       	push   0xc0022f2b
c001837a:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018380:	e8 f1 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0018385:	83 c4 0c             	add    esp,0xc
c0018388:	6a 0f                	push   0xf
c001838a:	6a 01                	push   0x1
c001838c:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018392:	e8 fd 8a ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018397:	58                   	pop    eax
c0018398:	5a                   	pop    edx
c0018399:	68 34 2f 02 c0       	push   0xc0022f34
c001839e:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183a4:	e8 cd 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183a9:	83 c4 0c             	add    esp,0xc
c00183ac:	6a 01                	push   0x1
c00183ae:	6a 0f                	push   0xf
c00183b0:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183b6:	e8 d9 8a ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00183bb:	59                   	pop    ecx
c00183bc:	58                   	pop    eax
c00183bd:	68 78 2f 02 c0       	push   0xc0022f78
c00183c2:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183c8:	e8 a9 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183cd:	58                   	pop    eax
c00183ce:	5a                   	pop    edx
c00183cf:	68 41 2f 02 c0       	push   0xc0022f41
c00183d4:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183da:	e8 97 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183df:	59                   	pop    ecx
c00183e0:	58                   	pop    eax
c00183e1:	68 7b 2f 02 c0       	push   0xc0022f7b
c00183e6:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183ec:	e8 85 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183f1:	58                   	pop    eax
c00183f2:	5a                   	pop    edx
c00183f3:	53                   	push   ebx
c00183f4:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183fa:	e8 77 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183ff:	59                   	pop    ecx
c0018400:	5b                   	pop    ebx
c0018401:	68 78 2f 02 c0       	push   0xc0022f78
c0018406:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001840c:	e8 65 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0018411:	83 c4 10             	add    esp,0x10
c0018414:	eb fe                	jmp    c0018414 <HalPanic(char const*)+0x112>

c0018416 <HalQueryPerformanceCounter()>:
c0018416:	31 c0                	xor    eax,eax
c0018418:	31 d2                	xor    edx,edx
c001841a:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c0018421:	75 02                	jne    c0018425 <HalQueryPerformanceCounter()+0xf>
c0018423:	0f 31                	rdtsc  
c0018425:	c3                   	ret    

c0018426 <HalInitialise()>:
c0018426:	53                   	push   ebx
c0018427:	83 ec 08             	sub    esp,0x8
c001842a:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c0018431:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018436:	83 e0 fe             	and    eax,0xfffffffe
c0018439:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c001843e:	e8 d9 07 00 00       	call   c0018c1c <picOpen()>
c0018443:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c001844a:	74 0a                	je     c0018456 <HalInitialise()+0x30>
c001844c:	e8 1b 07 00 00       	call   c0018b6c <picDisable()>
c0018451:	e8 b4 68 00 00       	call   c001ed0a <apicOpen()>
c0018456:	50                   	push   eax
c0018457:	bb 0f 00 00 00       	mov    ebx,0xf
c001845c:	6a 00                	push   0x0
c001845e:	68 80 df 00 c0       	push   0xc000df80
c0018463:	6a 00                	push   0x0
c0018465:	e8 cd 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001846a:	83 c4 0c             	add    esp,0xc
c001846d:	6a 00                	push   0x0
c001846f:	68 80 df 00 c0       	push   0xc000df80
c0018474:	6a 01                	push   0x1
c0018476:	e8 bc 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001847b:	83 c4 0c             	add    esp,0xc
c001847e:	6a 00                	push   0x0
c0018480:	68 70 df 00 c0       	push   0xc000df70
c0018485:	6a 02                	push   0x2
c0018487:	e8 ab 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001848c:	83 c4 0c             	add    esp,0xc
c001848f:	6a 00                	push   0x0
c0018491:	68 80 df 00 c0       	push   0xc000df80
c0018496:	6a 03                	push   0x3
c0018498:	e8 9a 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001849d:	83 c4 0c             	add    esp,0xc
c00184a0:	6a 00                	push   0x0
c00184a2:	68 80 df 00 c0       	push   0xc000df80
c00184a7:	6a 04                	push   0x4
c00184a9:	e8 89 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184ae:	83 c4 0c             	add    esp,0xc
c00184b1:	6a 00                	push   0x0
c00184b3:	68 80 df 00 c0       	push   0xc000df80
c00184b8:	6a 05                	push   0x5
c00184ba:	e8 78 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184bf:	83 c4 0c             	add    esp,0xc
c00184c2:	6a 00                	push   0x0
c00184c4:	68 b4 df 00 c0       	push   0xc000dfb4
c00184c9:	6a 06                	push   0x6
c00184cb:	e8 67 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184d0:	83 c4 0c             	add    esp,0xc
c00184d3:	6a 00                	push   0x0
c00184d5:	68 08 e0 00 c0       	push   0xc000e008
c00184da:	6a 08                	push   0x8
c00184dc:	e8 56 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184e1:	83 c4 0c             	add    esp,0xc
c00184e4:	6a 00                	push   0x0
c00184e6:	68 80 df 00 c0       	push   0xc000df80
c00184eb:	6a 09                	push   0x9
c00184ed:	e8 45 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184f2:	83 c4 0c             	add    esp,0xc
c00184f5:	6a 00                	push   0x0
c00184f7:	68 80 df 00 c0       	push   0xc000df80
c00184fc:	6a 0a                	push   0xa
c00184fe:	e8 34 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018503:	83 c4 0c             	add    esp,0xc
c0018506:	6a 00                	push   0x0
c0018508:	68 80 df 00 c0       	push   0xc000df80
c001850d:	6a 0b                	push   0xb
c001850f:	e8 23 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018514:	83 c4 0c             	add    esp,0xc
c0018517:	6a 00                	push   0x0
c0018519:	68 c8 de 00 c0       	push   0xc000dec8
c001851e:	6a 0d                	push   0xd
c0018520:	e8 12 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018525:	83 c4 0c             	add    esp,0xc
c0018528:	6a 00                	push   0x0
c001852a:	68 1c df 00 c0       	push   0xc000df1c
c001852f:	6a 0e                	push   0xe
c0018531:	e8 01 04 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018536:	83 c4 10             	add    esp,0x10
c0018539:	50                   	push   eax
c001853a:	6a 00                	push   0x0
c001853c:	68 80 df 00 c0       	push   0xc000df80
c0018541:	53                   	push   ebx
c0018542:	43                   	inc    ebx
c0018543:	e8 ef 03 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018548:	83 c4 10             	add    esp,0x10
c001854b:	83 fb 1e             	cmp    ebx,0x1e
c001854e:	75 e9                	jne    c0018539 <HalInitialise()+0x113>
c0018550:	50                   	push   eax
c0018551:	6a 00                	push   0x0
c0018553:	68 20 0d 01 c0       	push   0xc0010d20
c0018558:	6a 60                	push   0x60
c001855a:	e8 d8 03 00 00       	call   c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001855f:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0018564:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001856e:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018575:	e8 56 63 ff ff       	call   c000e8d0 <malloc>
c001857a:	89 04 24             	mov    DWORD PTR [esp],eax
c001857d:	89 c3                	mov    ebx,eax
c001857f:	e8 00 0e 00 00       	call   c0019384 <RTC::RTC()>
c0018584:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001858e:	5a                   	pop    edx
c001858f:	59                   	pop    ecx
c0018590:	53                   	push   ebx
c0018591:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0018597:	e8 aa 0a ff ff       	call   c0009046 <Device::addChild(Device*)>
c001859c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001859e:	6a 00                	push   0x0
c00185a0:	6a 00                	push   0x0
c00185a2:	6a 00                	push   0x0
c00185a4:	53                   	push   ebx
c00185a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185a8:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00185ad:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00185b3:	83 c4 28             	add    esp,0x28
c00185b6:	5b                   	pop    ebx
c00185b7:	c3                   	ret    

c00185b8 <HalMakeBeep(int)>:
c00185b8:	53                   	push   ebx
c00185b9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00185bd:	85 db                	test   ebx,ebx
c00185bf:	75 07                	jne    c00185c8 <HalMakeBeep(int)+0x10>
c00185c1:	e4 61                	in     al,0x61
c00185c3:	83 e0 fc             	and    eax,0xfffffffc
c00185c6:	eb 26                	jmp    c00185ee <HalMakeBeep(int)+0x36>
c00185c8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00185cd:	99                   	cdq    
c00185ce:	f7 fb                	idiv   ebx
c00185d0:	89 c1                	mov    ecx,eax
c00185d2:	b0 b6                	mov    al,0xb6
c00185d4:	e6 43                	out    0x43,al
c00185d6:	88 c8                	mov    al,cl
c00185d8:	e6 42                	out    0x42,al
c00185da:	89 c8                	mov    eax,ecx
c00185dc:	c1 e8 08             	shr    eax,0x8
c00185df:	e6 42                	out    0x42,al
c00185e1:	e4 61                	in     al,0x61
c00185e3:	89 c2                	mov    edx,eax
c00185e5:	83 ca 03             	or     edx,0x3
c00185e8:	38 d0                	cmp    al,dl
c00185ea:	74 04                	je     c00185f0 <HalMakeBeep(int)+0x38>
c00185ec:	88 d0                	mov    al,dl
c00185ee:	e6 61                	out    0x61,al
c00185f0:	5b                   	pop    ebx
c00185f1:	c3                   	ret    

c00185f2 <HalGetRand()>:
c00185f2:	31 c0                	xor    eax,eax
c00185f4:	c3                   	ret    

c00185f5 <HalEndOfInterrupt(int)>:
c00185f5:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c00185fc:	74 1d                	je     c001861b <HalEndOfInterrupt(int)+0x26>
c00185fe:	83 ec 18             	sub    esp,0x18
c0018601:	6a 1b                	push   0x1b
c0018603:	e8 8a f5 ff ff       	call   c0017b92 <x86rdmsr(unsigned int)>
c0018608:	25 00 f0 ff ff       	and    eax,0xfffff000
c001860d:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018617:	83 c4 1c             	add    esp,0x1c
c001861a:	c3                   	ret    
c001861b:	e9 80 07 00 00       	jmp    c0018da0 <picEOI(int)>

c0018620 <HalRestart()>:
c0018620:	c3                   	ret    

c0018621 <HalShutdown()>:
c0018621:	c3                   	ret    

c0018622 <HalSleep()>:
c0018622:	c3                   	ret    
c0018623:	90                   	nop

c0018624 <CPU::CPU()>:
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001862b:	83 ec 08             	sub    esp,0x8
c001862e:	68 3d 2d 02 c0       	push   0xc0022d3d
c0018633:	50                   	push   eax
c0018634:	e8 6f 0b ff ff       	call   c00091a8 <Device::Device(char const*)>
c0018639:	83 c4 10             	add    esp,0x10
c001863c:	ba 18 30 02 c0       	mov    edx,0xc0023018
c0018641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018645:	89 10                	mov    DWORD PTR [eax],edx
c0018647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001864b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018659:	05 64 01 00 00       	add    eax,0x164
c001865e:	83 ec 0c             	sub    esp,0xc
c0018661:	50                   	push   eax
c0018662:	e8 f5 59 ff ff       	call   c000e05c <GDT::GDT()>
c0018667:	83 c4 10             	add    esp,0x10
c001866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001866e:	05 68 09 00 00       	add    eax,0x968
c0018673:	83 ec 0c             	sub    esp,0xc
c0018676:	50                   	push   eax
c0018677:	e8 34 5c ff ff       	call   c000e2b0 <IDT::IDT()>
c001867c:	83 c4 10             	add    esp,0x10
c001867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018683:	05 68 11 00 00       	add    eax,0x1168
c0018688:	83 ec 0c             	sub    esp,0xc
c001868b:	50                   	push   eax
c001868c:	e8 67 91 ff ff       	call   c00117f8 <TSS::TSS()>
c0018691:	83 c4 10             	add    esp,0x10
c0018694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018698:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00186a2:	90                   	nop
c00186a3:	83 c4 0c             	add    esp,0xc
c00186a6:	c3                   	ret    
c00186a7:	90                   	nop

c00186a8 <CPU::setupSMEP()>:
c00186a8:	0f 20 e0             	mov    eax,cr4
c00186ab:	0d 00 00 10 00       	or     eax,0x100000
c00186b0:	0f 22 e0             	mov    cr4,eax
c00186b3:	c3                   	ret    

c00186b4 <CPU::setupUMIP()>:
c00186b4:	0f 20 e0             	mov    eax,cr4
c00186b7:	80 cc 08             	or     ah,0x8
c00186ba:	0f 22 e0             	mov    cr4,eax
c00186bd:	c3                   	ret    

c00186be <CPU::setupTSC()>:
c00186be:	0f 20 e0             	mov    eax,cr4
c00186c1:	83 c8 04             	or     eax,0x4
c00186c4:	0f 22 e0             	mov    cr4,eax
c00186c7:	c3                   	ret    

c00186c8 <CPU::setupLargePages()>:
c00186c8:	0f 20 e0             	mov    eax,cr4
c00186cb:	83 c8 10             	or     eax,0x10
c00186ce:	0f 22 e0             	mov    cr4,eax
c00186d1:	c3                   	ret    

c00186d2 <CPU::setupPAT()>:
c00186d2:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c00186d9:	74 28                	je     c0018703 <CPU::setupPAT()+0x31>
c00186db:	53                   	push   ebx
c00186dc:	83 ec 14             	sub    esp,0x14
c00186df:	68 77 02 00 00       	push   0x277
c00186e4:	e8 a9 f4 ff ff       	call   c0017b92 <x86rdmsr(unsigned int)>
c00186e9:	83 c4 0c             	add    esp,0xc
c00186ec:	83 e2 f8             	and    edx,0xfffffff8
c00186ef:	83 ca 01             	or     edx,0x1
c00186f2:	52                   	push   edx
c00186f3:	50                   	push   eax
c00186f4:	68 77 02 00 00       	push   0x277
c00186f9:	e8 d2 f4 ff ff       	call   c0017bd0 <x86wrmsr(unsigned int, unsigned long long)>
c00186fe:	83 c4 18             	add    esp,0x18
c0018701:	5b                   	pop    ebx
c0018702:	c3                   	ret    
c0018703:	c3                   	ret    

c0018704 <CPU::setupMTRR()>:
c0018704:	c3                   	ret    
c0018705:	90                   	nop

c0018706 <CPU::setupGlobalPages()>:
c0018706:	0f 20 e0             	mov    eax,cr4
c0018709:	0c 80                	or     al,0x80
c001870b:	0f 22 e0             	mov    cr4,eax
c001870e:	c3                   	ret    
c001870f:	90                   	nop

c0018710 <CPU::allowUsermodeDataAccess()>:
c0018710:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c0018717:	74 03                	je     c001871c <CPU::allowUsermodeDataAccess()+0xc>
c0018719:	0f 01 cb             	stac   
c001871c:	c3                   	ret    
c001871d:	90                   	nop

c001871e <CPU::prohibitUsermodeDataAccess()>:
c001871e:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c0018725:	74 03                	je     c001872a <CPU::prohibitUsermodeDataAccess()+0xc>
c0018727:	0f 01 ca             	clac   
c001872a:	c3                   	ret    
c001872b:	90                   	nop

c001872c <CPU::setupSMAP()>:
c001872c:	0f 20 e0             	mov    eax,cr4
c001872f:	0d 00 00 20 00       	or     eax,0x200000
c0018734:	0f 22 e0             	mov    cr4,eax
c0018737:	eb e5                	jmp    c001871e <CPU::prohibitUsermodeDataAccess()>
c0018739:	90                   	nop

c001873a <CPU::setupFeatures()>:
c001873a:	53                   	push   ebx
c001873b:	83 ec 08             	sub    esp,0x8
c001873e:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c0018745:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018749:	74 18                	je     c0018763 <CPU::setupFeatures()+0x29>
c001874b:	83 ec 0c             	sub    esp,0xc
c001874e:	68 86 2f 02 c0       	push   0xc0022f86
c0018753:	e8 f6 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018758:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001875b:	e8 54 ff ff ff       	call   c00186b4 <CPU::setupUMIP()>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c001876a:	74 18                	je     c0018784 <CPU::setupFeatures()+0x4a>
c001876c:	83 ec 0c             	sub    esp,0xc
c001876f:	68 90 2f 02 c0       	push   0xc0022f90
c0018774:	e8 d5 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018779:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001877c:	e8 3d ff ff ff       	call   c00186be <CPU::setupTSC()>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c001878b:	74 18                	je     c00187a5 <CPU::setupFeatures()+0x6b>
c001878d:	83 ec 0c             	sub    esp,0xc
c0018790:	68 99 2f 02 c0       	push   0xc0022f99
c0018795:	e8 b4 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001879a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001879d:	e8 26 ff ff ff       	call   c00186c8 <CPU::setupLargePages()>
c00187a2:	83 c4 10             	add    esp,0x10
c00187a5:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c00187ac:	74 18                	je     c00187c6 <CPU::setupFeatures()+0x8c>
c00187ae:	83 ec 0c             	sub    esp,0xc
c00187b1:	68 a2 2f 02 c0       	push   0xc0022fa2
c00187b6:	e8 93 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00187bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187be:	e8 43 ff ff ff       	call   c0018706 <CPU::setupGlobalPages()>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c00187cd:	74 18                	je     c00187e7 <CPU::setupFeatures()+0xad>
c00187cf:	83 ec 0c             	sub    esp,0xc
c00187d2:	68 b4 2f 02 c0       	push   0xc0022fb4
c00187d7:	e8 72 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00187dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187df:	e8 ee fe ff ff       	call   c00186d2 <CPU::setupPAT()>
c00187e4:	83 c4 10             	add    esp,0x10
c00187e7:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c00187ee:	74 11                	je     c0018801 <CPU::setupFeatures()+0xc7>
c00187f0:	c7 44 24 10 bd 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022fbd
c00187f8:	83 c4 08             	add    esp,0x8
c00187fb:	5b                   	pop    ebx
c00187fc:	e9 4d e7 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0018801:	83 c4 08             	add    esp,0x8
c0018804:	5b                   	pop    ebx
c0018805:	c3                   	ret    

c0018806 <CPU::open(int, int, void*)>:
c0018806:	55                   	push   ebp
c0018807:	57                   	push   edi
c0018808:	56                   	push   esi
c0018809:	53                   	push   ebx
c001880a:	83 ec 18             	sub    esp,0x18
c001880d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018811:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018815:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018819:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001881f:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018825:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001882b:	50                   	push   eax
c001882c:	e8 8d 58 ff ff       	call   c000e0be <GDT::setup()>
c0018831:	83 c4 0c             	add    esp,0xc
c0018834:	6a 00                	push   0x0
c0018836:	68 ef be ad de       	push   0xdeadbeef
c001883b:	55                   	push   ebp
c001883c:	e8 fb 8f ff ff       	call   c001183c <TSS::setup(unsigned long, unsigned long)>
c0018841:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018844:	e8 d3 8f ff ff       	call   c001181c <TSS::flush()>
c0018849:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001884f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018852:	e8 cf 5a ff ff       	call   c000e326 <IDT::setup()>
c0018857:	b8 00 04 00 00       	mov    eax,0x400
c001885c:	0f 23 f8             	mov    dr7,eax
c001885f:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018869:	e8 a2 65 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001886e:	83 c4 10             	add    esp,0x10
c0018871:	85 f6                	test   esi,esi
c0018873:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018879:	89 38                	mov    DWORD PTR [eax],edi
c001887b:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018881:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018884:	74 10                	je     c0018896 <CPU::open(int, int, void*)+0x90>
c0018886:	50                   	push   eax
c0018887:	50                   	push   eax
c0018888:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001888e:	56                   	push   esi
c001888f:	e8 46 99 ff ff       	call   c00121da <VAS::setCPUSpecific(unsigned long)>
c0018894:	eb 0d                	jmp    c00188a3 <CPU::open(int, int, void*)+0x9d>
c0018896:	83 ec 0c             	sub    esp,0xc
c0018899:	68 c7 2f 02 c0       	push   0xc0022fc7
c001889e:	e8 73 63 ff ff       	call   c000ec16 <KePanic(char const*)>
c00188a3:	83 c4 10             	add    esp,0x10
c00188a6:	83 ec 0c             	sub    esp,0xc
c00188a9:	68 d5 2f 02 c0       	push   0xc0022fd5
c00188ae:	e8 e8 3c ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c00188b3:	e8 6e fb ff ff       	call   c0018426 <HalInitialise()>
c00188b8:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c00188bd:	83 e0 10             	and    eax,0x10
c00188c0:	83 f8 01             	cmp    eax,0x1
c00188c3:	19 c0                	sbb    eax,eax
c00188c5:	83 e0 46             	and    eax,0x46
c00188c8:	83 c0 1e             	add    eax,0x1e
c00188cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00188ce:	e8 42 1e ff ff       	call   c000a715 <setupTimer(int)>
c00188d3:	83 c4 10             	add    esp,0x10
c00188d6:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c00188dd:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c00188e3:	74 0c                	je     c00188f1 <CPU::open(int, int, void*)+0xeb>
c00188e5:	83 ec 0c             	sub    esp,0xc
c00188e8:	53                   	push   ebx
c00188e9:	e8 4c fe ff ff       	call   c001873a <CPU::setupFeatures()>
c00188ee:	83 c4 10             	add    esp,0x10
c00188f1:	83 c4 0c             	add    esp,0xc
c00188f4:	31 c0                	xor    eax,eax
c00188f6:	5b                   	pop    ebx
c00188f7:	5e                   	pop    esi
c00188f8:	5f                   	pop    edi
c00188f9:	5d                   	pop    ebp
c00188fa:	c3                   	ret    

c00188fb <convertLegacyIRQNumber(int)>:
c00188fb:	83 ec 0c             	sub    esp,0xc
c00188fe:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018909:	74 0c                	je     c0018917 <convertLegacyIRQNumber(int)+0x1c>
c001890b:	83 f8 0f             	cmp    eax,0xf
c001890e:	7f 0b                	jg     c001891b <convertLegacyIRQNumber(int)+0x20>
c0018910:	0f b6 80 c8 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc538]
c0018917:	83 c4 0c             	add    esp,0xc
c001891a:	c3                   	ret    
c001891b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001891f:	83 ec 0c             	sub    esp,0xc
c0018922:	68 3c 30 02 c0       	push   0xc002303c
c0018927:	e8 ea 62 ff ff       	call   c000ec16 <KePanic(char const*)>
c001892c:	83 c4 10             	add    esp,0x10
c001892f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018933:	83 c4 0c             	add    esp,0xc
c0018936:	c3                   	ret    

c0018937 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018937:	56                   	push   esi
c0018938:	31 c0                	xor    eax,eax
c001893a:	53                   	push   ebx
c001893b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001893f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018943:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018947:	89 ca                	mov    edx,ecx
c0018949:	c1 e2 04             	shl    edx,0x4
c001894c:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c0018954:	74 17                	je     c001896d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018956:	83 c0 01             	add    eax,0x1
c0018959:	83 f8 04             	cmp    eax,0x4
c001895c:	75 ee                	jne    c001894c <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001895e:	c7 44 24 0c 9d 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc002309d
c0018966:	5b                   	pop    ebx
c0018967:	5e                   	pop    esi
c0018968:	e9 a9 62 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001896d:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018970:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c0018977:	5b                   	pop    ebx
c0018978:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c001897f:	5e                   	pop    esi
c0018980:	c3                   	ret    

c0018981 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018981:	55                   	push   ebp
c0018982:	57                   	push   edi
c0018983:	56                   	push   esi
c0018984:	53                   	push   ebx
c0018985:	83 ec 0c             	sub    esp,0xc
c0018988:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001898c:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018993:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018997:	8d 6e 20             	lea    ebp,[esi+0x20]
c001899a:	74 57                	je     c00189f3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001899c:	84 c0                	test   al,al
c001899e:	89 c7                	mov    edi,eax
c00189a0:	74 1d                	je     c00189bf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c00189a2:	83 fe 0f             	cmp    esi,0xf
c00189a5:	0f 8f d9 00 00 00    	jg     c0018a84 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c00189ab:	0f b6 b6 c8 3a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc538]
c00189b2:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c00189ba:	d1 ef                	shr    edi,1
c00189bc:	83 e7 01             	and    edi,0x1
c00189bf:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c00189c4:	83 ec 08             	sub    esp,0x8
c00189c7:	31 db                	xor    ebx,ebx
c00189c9:	50                   	push   eax
c00189ca:	68 aa 30 02 c0       	push   0xc00230aa
c00189cf:	e8 7a e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00189d4:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c00189d9:	83 c4 10             	add    esp,0x10
c00189dc:	85 c0                	test   eax,eax
c00189de:	7f 59                	jg     c0018a39 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c00189e0:	8d 6e 20             	lea    ebp,[esi+0x20]
c00189e3:	83 ec 0c             	sub    esp,0xc
c00189e6:	68 c1 30 02 c0       	push   0xc00230c1
c00189eb:	e8 26 62 ff ff       	call   c000ec16 <KePanic(char const*)>
c00189f0:	83 c4 10             	add    esp,0x10
c00189f3:	89 e8                	mov    eax,ebp
c00189f5:	31 d2                	xor    edx,edx
c00189f7:	c1 e0 04             	shl    eax,0x4
c00189fa:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c0018a01:	85 c9                	test   ecx,ecx
c0018a03:	0f 84 92 00 00 00    	je     c0018a9b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c0018a09:	83 c2 01             	add    edx,0x1
c0018a0c:	83 fa 04             	cmp    edx,0x4
c0018a0f:	75 e9                	jne    c00189fa <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c0018a11:	83 ec 0c             	sub    esp,0xc
c0018a14:	68 78 30 02 c0       	push   0xc0023078
c0018a19:	e8 f8 61 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018a1e:	83 c4 10             	add    esp,0x10
c0018a21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018a26:	83 c4 0c             	add    esp,0xc
c0018a29:	5b                   	pop    ebx
c0018a2a:	5e                   	pop    esi
c0018a2b:	5f                   	pop    edi
c0018a2c:	5d                   	pop    ebp
c0018a2d:	c3                   	ret    
c0018a2e:	83 c3 01             	add    ebx,0x1
c0018a31:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c0018a37:	7e a7                	jle    c00189e0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c0018a39:	8b 2c 9d 00 d1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f00]
c0018a40:	83 ec 08             	sub    esp,0x8
c0018a43:	56                   	push   esi
c0018a44:	55                   	push   ebp
c0018a45:	e8 4c 64 00 00       	call   c001ee96 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018a4a:	83 c4 10             	add    esp,0x10
c0018a4d:	84 c0                	test   al,al
c0018a4f:	74 dd                	je     c0018a2e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018a51:	89 f8                	mov    eax,edi
c0018a53:	83 ec 04             	sub    esp,0x4
c0018a56:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018a5d:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018a60:	0f b6 f8             	movzx  edi,al
c0018a63:	57                   	push   edi
c0018a64:	89 e8                	mov    eax,ebp
c0018a66:	6a 00                	push   0x0
c0018a68:	0f b6 c0             	movzx  eax,al
c0018a6b:	50                   	push   eax
c0018a6c:	89 f0                	mov    eax,esi
c0018a6e:	6a 00                	push   0x0
c0018a70:	0f b6 c0             	movzx  eax,al
c0018a73:	6a 00                	push   0x0
c0018a75:	50                   	push   eax
c0018a76:	53                   	push   ebx
c0018a77:	e8 86 65 00 00       	call   c001f002 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018a7c:	83 c4 20             	add    esp,0x20
c0018a7f:	e9 6f ff ff ff       	jmp    c00189f3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018a84:	83 ec 0c             	sub    esp,0xc
c0018a87:	31 ff                	xor    edi,edi
c0018a89:	68 3c 30 02 c0       	push   0xc002303c
c0018a8e:	e8 83 61 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018a93:	83 c4 10             	add    esp,0x10
c0018a96:	e9 24 ff ff ff       	jmp    c00189bf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018a9b:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0018a9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018aa2:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018aa9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018aad:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018ab4:	83 c4 0c             	add    esp,0xc
c0018ab7:	89 f0                	mov    eax,esi
c0018ab9:	5b                   	pop    ebx
c0018aba:	5e                   	pop    esi
c0018abb:	5f                   	pop    edi
c0018abc:	5d                   	pop    ebp
c0018abd:	c3                   	ret    

c0018abe <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ac2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018ac6:	c1 e0 04             	shl    eax,0x4
c0018ac9:	8d 50 10             	lea    edx,[eax+0x10]
c0018acc:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018ad2:	74 08                	je     c0018adc <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018ad4:	83 c0 04             	add    eax,0x4
c0018ad7:	39 d0                	cmp    eax,edx
c0018ad9:	75 f1                	jne    c0018acc <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018adb:	c3                   	ret    
c0018adc:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018ae6:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018af0:	eb e2                	jmp    c0018ad4 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018af2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018af2:	56                   	push   esi
c0018af3:	53                   	push   ebx
c0018af4:	83 ec 04             	sub    esp,0x4
c0018af7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018afc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b00:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018b04:	74 09                	je     c0018b0f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b06:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018b0d:	75 34                	jne    c0018b43 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0018b0f:	8d 43 20             	lea    eax,[ebx+0x20]
c0018b12:	c1 e0 04             	shl    eax,0x4
c0018b15:	8d 50 10             	lea    edx,[eax+0x10]
c0018b18:	39 b0 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],esi
c0018b1e:	74 0d                	je     c0018b2d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0018b20:	83 c0 04             	add    eax,0x4
c0018b23:	39 d0                	cmp    eax,edx
c0018b25:	75 f1                	jne    c0018b18 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c0018b27:	83 c4 04             	add    esp,0x4
c0018b2a:	5b                   	pop    ebx
c0018b2b:	5e                   	pop    esi
c0018b2c:	c3                   	ret    
c0018b2d:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018b37:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018b41:	eb dd                	jmp    c0018b20 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c0018b43:	83 fb 0f             	cmp    ebx,0xf
c0018b46:	7f 09                	jg     c0018b51 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c0018b48:	0f b6 9b c8 3a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc538]
c0018b4f:	eb be                	jmp    c0018b0f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b51:	83 ec 0c             	sub    esp,0xc
c0018b54:	68 ce 30 02 c0       	push   0xc00230ce
c0018b59:	e8 b8 60 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018b5e:	83 c4 10             	add    esp,0x10
c0018b61:	eb ac                	jmp    c0018b0f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b63:	90                   	nop

c0018b64 <picIoWait()>:
c0018b64:	eb 00                	jmp    c0018b66 <picIoWait()+0x2>
c0018b66:	eb 00                	jmp    c0018b68 <picIoWait()+0x4>
c0018b68:	90                   	nop
c0018b69:	c3                   	ret    
c0018b6a:	66 90                	xchg   ax,ax

c0018b6c <picDisable()>:
c0018b6c:	83 ec 10             	sub    esp,0x10
c0018b6f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018b76:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018b7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b7f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018b84:	ee                   	out    dx,al
c0018b85:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018b8c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018b91:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b95:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018b9a:	ee                   	out    dx,al
c0018b9b:	90                   	nop
c0018b9c:	83 c4 10             	add    esp,0x10
c0018b9f:	c3                   	ret    

c0018ba0 <picGetIRQReg(int)>:
c0018ba0:	83 ec 10             	sub    esp,0x10
c0018ba3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ba7:	0f b6 c0             	movzx  eax,al
c0018baa:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018bb1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018bb5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018bb9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018bbe:	ee                   	out    dx,al
c0018bbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bc3:	0f b6 c0             	movzx  eax,al
c0018bc6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018bcd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018bd1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018bd5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018bda:	ee                   	out    dx,al
c0018bdb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018be2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018be7:	89 c2                	mov    edx,eax
c0018be9:	ec                   	in     al,dx
c0018bea:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bee:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bf2:	0f b6 c0             	movzx  eax,al
c0018bf5:	c1 e0 08             	shl    eax,0x8
c0018bf8:	89 c1                	mov    ecx,eax
c0018bfa:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018c01:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018c06:	89 c2                	mov    edx,eax
c0018c08:	ec                   	in     al,dx
c0018c09:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018c0d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c11:	0f b6 c0             	movzx  eax,al
c0018c14:	09 c8                	or     eax,ecx
c0018c16:	83 c4 10             	add    esp,0x10
c0018c19:	c3                   	ret    
c0018c1a:	66 90                	xchg   ax,ax

c0018c1c <picOpen()>:
c0018c1c:	83 ec 50             	sub    esp,0x50
c0018c1f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018c26:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018c2b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c33:	ee                   	out    dx,al
c0018c34:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018c3b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c40:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018c44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c48:	ee                   	out    dx,al
c0018c49:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018c51:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018c59:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018c60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c64:	89 c2                	mov    edx,eax
c0018c66:	ec                   	in     al,dx
c0018c67:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018c6b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018c6f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018c73:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018c7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c7e:	89 c2                	mov    edx,eax
c0018c80:	ec                   	in     al,dx
c0018c81:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018c85:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018c89:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018c8d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018c94:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018c99:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018c9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ca1:	ee                   	out    dx,al
c0018ca2:	e8 bd fe ff ff       	call   c0018b64 <picIoWait()>
c0018ca7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018cae:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018cb3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018cb7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cbb:	ee                   	out    dx,al
c0018cbc:	e8 a3 fe ff ff       	call   c0018b64 <picIoWait()>
c0018cc1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018cc5:	0f b6 c0             	movzx  eax,al
c0018cc8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018ccf:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018cd3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018cd7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018cdb:	ee                   	out    dx,al
c0018cdc:	e8 83 fe ff ff       	call   c0018b64 <picIoWait()>
c0018ce1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018ce5:	0f b6 c0             	movzx  eax,al
c0018ce8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018cef:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018cf3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018cf7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018cfb:	ee                   	out    dx,al
c0018cfc:	e8 63 fe ff ff       	call   c0018b64 <picIoWait()>
c0018d01:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018d08:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018d0d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018d11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d15:	ee                   	out    dx,al
c0018d16:	e8 49 fe ff ff       	call   c0018b64 <picIoWait()>
c0018d1b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018d22:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018d27:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018d2b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018d2f:	ee                   	out    dx,al
c0018d30:	e8 2f fe ff ff       	call   c0018b64 <picIoWait()>
c0018d35:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018d3c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018d41:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018d45:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d49:	ee                   	out    dx,al
c0018d4a:	e8 15 fe ff ff       	call   c0018b64 <picIoWait()>
c0018d4f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018d56:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018d5b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018d5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d63:	ee                   	out    dx,al
c0018d64:	e8 fb fd ff ff       	call   c0018b64 <picIoWait()>
c0018d69:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018d6e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018d75:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018d79:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018d7d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018d81:	ee                   	out    dx,al
c0018d82:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018d87:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018d8e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018d92:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018d96:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018d9a:	ee                   	out    dx,al
c0018d9b:	90                   	nop
c0018d9c:	83 c4 50             	add    esp,0x50
c0018d9f:	c3                   	ret    

c0018da0 <picEOI(int)>:
c0018da0:	83 ec 10             	sub    esp,0x10
c0018da3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018da8:	75 1e                	jne    c0018dc8 <picEOI(int)+0x28>
c0018daa:	6a 0b                	push   0xb
c0018dac:	e8 ef fd ff ff       	call   c0018ba0 <picGetIRQReg(int)>
c0018db1:	83 c4 04             	add    esp,0x4
c0018db4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018db9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018dbe:	25 80 00 00 00       	and    eax,0x80
c0018dc3:	74 73                	je     c0018e38 <picEOI(int)+0x98>
c0018dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018dc8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018dcd:	75 31                	jne    c0018e00 <picEOI(int)+0x60>
c0018dcf:	6a 0b                	push   0xb
c0018dd1:	e8 ca fd ff ff       	call   c0018ba0 <picGetIRQReg(int)>
c0018dd6:	83 c4 04             	add    esp,0x4
c0018dd9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018de2:	98                   	cwde   
c0018de3:	85 c0                	test   eax,eax
c0018de5:	78 19                	js     c0018e00 <picEOI(int)+0x60>
c0018de7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018dee:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018df3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018df7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018dfc:	ee                   	out    dx,al
c0018dfd:	eb 3d                	jmp    c0018e3c <picEOI(int)+0x9c>
c0018dff:	90                   	nop
c0018e00:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018e05:	7e 19                	jle    c0018e20 <picEOI(int)+0x80>
c0018e07:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018e0e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018e13:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018e17:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018e1c:	ee                   	out    dx,al
c0018e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e20:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018e27:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018e2c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018e30:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018e35:	ee                   	out    dx,al
c0018e36:	eb 04                	jmp    c0018e3c <picEOI(int)+0x9c>
c0018e38:	90                   	nop
c0018e39:	8d 76 00             	lea    esi,[esi+0x0]
c0018e3c:	83 c4 10             	add    esp,0x10
c0018e3f:	c3                   	ret    

c0018e40 <RTC::open(int, int, void*)>:
c0018e40:	31 c0                	xor    eax,eax
c0018e42:	c3                   	ret    
c0018e43:	90                   	nop

c0018e44 <RTC::close(int, int, void*)>:
c0018e44:	31 c0                	xor    eax,eax
c0018e46:	c3                   	ret    
c0018e47:	90                   	nop

c0018e48 <RTC::timeInSecondsUTC()>:
c0018e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e4c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018e52:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018e58:	c3                   	ret    
c0018e59:	90                   	nop

c0018e5a <RTC::timeInDatetimeUTC()>:
c0018e5a:	53                   	push   ebx
c0018e5b:	83 ec 14             	sub    esp,0x14
c0018e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018e66:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e68:	50                   	push   eax
c0018e69:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018e6c:	83 c4 0c             	add    esp,0xc
c0018e6f:	52                   	push   edx
c0018e70:	50                   	push   eax
c0018e71:	53                   	push   ebx
c0018e72:	e8 43 ff fe ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0018e77:	89 d8                	mov    eax,ebx
c0018e79:	83 c4 14             	add    esp,0x14
c0018e7c:	5b                   	pop    ebx
c0018e7d:	c2 04 00             	ret    0x4

c0018e80 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018e80:	56                   	push   esi
c0018e81:	53                   	push   ebx
c0018e82:	83 ec 14             	sub    esp,0x14
c0018e85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018e89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018e8b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018e8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e92:	52                   	push   edx
c0018e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e9b:	50                   	push   eax
c0018e9c:	e8 19 ff fe ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0018ea1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018ea5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ea9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ead:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018eb1:	89 f0                	mov    eax,esi
c0018eb3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018eb7:	83 c4 20             	add    esp,0x20
c0018eba:	5b                   	pop    ebx
c0018ebb:	5e                   	pop    esi
c0018ebc:	ff e0                	jmp    eax

c0018ebe <RTC::~RTC()>:
c0018ebe:	83 ec 0c             	sub    esp,0xc
c0018ec1:	ba f8 30 02 c0       	mov    edx,0xc00230f8
c0018ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eca:	89 10                	mov    DWORD PTR [eax],edx
c0018ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ed0:	83 ec 0c             	sub    esp,0xc
c0018ed3:	50                   	push   eax
c0018ed4:	e8 6d fc fe ff       	call   c0008b46 <Clock::~Clock()>
c0018ed9:	83 c4 10             	add    esp,0x10
c0018edc:	90                   	nop
c0018edd:	83 c4 0c             	add    esp,0xc
c0018ee0:	c3                   	ret    
c0018ee1:	90                   	nop

c0018ee2 <RTC::~RTC()>:
c0018ee2:	83 ec 0c             	sub    esp,0xc
c0018ee5:	83 ec 0c             	sub    esp,0xc
c0018ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018eec:	e8 cd ff ff ff       	call   c0018ebe <RTC::~RTC()>
c0018ef1:	83 c4 10             	add    esp,0x10
c0018ef4:	83 ec 08             	sub    esp,0x8
c0018ef7:	68 60 01 00 00       	push   0x160
c0018efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f00:	e8 56 37 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0018f05:	83 c4 10             	add    esp,0x10
c0018f08:	83 c4 0c             	add    esp,0xc
c0018f0b:	c3                   	ret    

c0018f0c <RTC::get_update_in_progress_flag()>:
c0018f0c:	83 ec 18             	sub    esp,0x18
c0018f0f:	6a 0a                	push   0xa
c0018f11:	e8 61 db ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018f16:	83 c4 1c             	add    esp,0x1c
c0018f19:	0f b6 c0             	movzx  eax,al
c0018f1c:	c1 e8 07             	shr    eax,0x7
c0018f1f:	c3                   	ret    

c0018f20 <RTC::completeRTCRefresh()>:
c0018f20:	55                   	push   ebp
c0018f21:	57                   	push   edi
c0018f22:	56                   	push   esi
c0018f23:	53                   	push   ebx
c0018f24:	83 ec 3c             	sub    esp,0x3c
c0018f27:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018f2d:	83 ec 0c             	sub    esp,0xc
c0018f30:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018f34:	e8 d3 ff ff ff       	call   c0018f0c <RTC::get_update_in_progress_flag()>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	84 c0                	test   al,al
c0018f3e:	74 0e                	je     c0018f4e <RTC::completeRTCRefresh()+0x2e>
c0018f40:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018f46:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018f4c:	73 df                	jae    c0018f2d <RTC::completeRTCRefresh()+0xd>
c0018f4e:	83 ec 0c             	sub    esp,0xc
c0018f51:	6a 00                	push   0x0
c0018f53:	e8 1f db ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018f58:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018f5f:	89 c7                	mov    edi,eax
c0018f61:	e8 11 db ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018f66:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f6d:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018f71:	e8 01 db ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018f76:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018f7d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018f81:	e8 f1 da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018f86:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018f8d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018f91:	e8 e1 da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018f96:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0018f9d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018fa1:	e8 d1 da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018fa6:	0f b6 c0             	movzx  eax,al
c0018fa9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018fad:	83 c4 10             	add    esp,0x10
c0018fb0:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018fb6:	83 ec 0c             	sub    esp,0xc
c0018fb9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018fbd:	e8 4a ff ff ff       	call   c0018f0c <RTC::get_update_in_progress_flag()>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	84 c0                	test   al,al
c0018fc7:	74 0e                	je     c0018fd7 <RTC::completeRTCRefresh()+0xb7>
c0018fc9:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018fcf:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018fd5:	73 df                	jae    c0018fb6 <RTC::completeRTCRefresh()+0x96>
c0018fd7:	83 ec 0c             	sub    esp,0xc
c0018fda:	6a 00                	push   0x0
c0018fdc:	e8 96 da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018fe1:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018fe8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018fec:	e8 86 da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0018ff1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018ff8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018ffc:	e8 76 da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0019001:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019008:	88 c3                	mov    bl,al
c001900a:	e8 68 da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c001900f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019016:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001901a:	e8 58 da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c001901f:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019026:	89 c6                	mov    esi,eax
c0019028:	e8 4a da ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c001902d:	89 f9                	mov    ecx,edi
c001902f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019033:	83 c4 10             	add    esp,0x10
c0019036:	0f b6 e8             	movzx  ebp,al
c0019039:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001903e:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019042:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019046:	74 27                	je     c001906f <RTC::completeRTCRefresh()+0x14f>
c0019048:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001904c:	89 f0                	mov    eax,esi
c001904e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019052:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019056:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001905a:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001905e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019062:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019066:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001906a:	e9 41 ff ff ff       	jmp    c0018fb0 <RTC::completeRTCRefresh()+0x90>
c001906f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019074:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019078:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001907c:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0019080:	75 c6                	jne    c0019048 <RTC::completeRTCRefresh()+0x128>
c0019082:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019087:	89 f1                	mov    ecx,esi
c0019089:	0f b6 fb             	movzx  edi,bl
c001908c:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019090:	0f b6 c9             	movzx  ecx,cl
c0019093:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019097:	89 f1                	mov    ecx,esi
c0019099:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001909d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00190a1:	0f 94 c2             	sete   dl
c00190a4:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00190a8:	0f 94 c0             	sete   al
c00190ab:	21 d0                	and    eax,edx
c00190ad:	31 d2                	xor    edx,edx
c00190af:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00190b3:	0f 94 c2             	sete   dl
c00190b6:	85 c2                	test   edx,eax
c00190b8:	74 8e                	je     c0019048 <RTC::completeRTCRefresh()+0x128>
c00190ba:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00190be:	75 88                	jne    c0019048 <RTC::completeRTCRefresh()+0x128>
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	6a 0b                	push   0xb
c00190c5:	e8 ad d9 ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c00190ca:	83 c4 10             	add    esp,0x10
c00190cd:	a8 04                	test   al,0x4
c00190cf:	75 7a                	jne    c001914b <RTC::completeRTCRefresh()+0x22b>
c00190d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190d5:	c1 ef 04             	shr    edi,0x4
c00190d8:	83 e6 0f             	and    esi,0xf
c00190db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00190df:	c1 ed 04             	shr    ebp,0x4
c00190e2:	6b ed 0a             	imul   ebp,ebp,0xa
c00190e5:	c1 ea 04             	shr    edx,0x4
c00190e8:	6b d2 0a             	imul   edx,edx,0xa
c00190eb:	83 e1 0f             	and    ecx,0xf
c00190ee:	01 d1                	add    ecx,edx
c00190f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00190f4:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00190f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00190fc:	c1 ea 04             	shr    edx,0x4
c00190ff:	6b d2 0a             	imul   edx,edx,0xa
c0019102:	83 e1 0f             	and    ecx,0xf
c0019105:	01 d1                	add    ecx,edx
c0019107:	89 fa                	mov    edx,edi
c0019109:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001910d:	83 e2 07             	and    edx,0x7
c0019110:	89 d9                	mov    ecx,ebx
c0019112:	6b d2 0a             	imul   edx,edx,0xa
c0019115:	83 e1 0f             	and    ecx,0xf
c0019118:	83 e3 80             	and    ebx,0xffffff80
c001911b:	01 d1                	add    ecx,edx
c001911d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019121:	09 cb                	or     ebx,ecx
c0019123:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019127:	c1 ea 04             	shr    edx,0x4
c001912a:	6b d2 0a             	imul   edx,edx,0xa
c001912d:	83 e1 0f             	and    ecx,0xf
c0019130:	01 d1                	add    ecx,edx
c0019132:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019136:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001913a:	c1 ea 04             	shr    edx,0x4
c001913d:	6b d2 0a             	imul   edx,edx,0xa
c0019140:	01 d6                	add    esi,edx
c0019142:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019146:	83 e2 0f             	and    edx,0xf
c0019149:	01 d5                	add    ebp,edx
c001914b:	a8 02                	test   al,0x2
c001914d:	75 15                	jne    c0019164 <RTC::completeRTCRefresh()+0x244>
c001914f:	f6 c3 80             	test   bl,0x80
c0019152:	74 10                	je     c0019164 <RTC::completeRTCRefresh()+0x244>
c0019154:	83 e3 7f             	and    ebx,0x7f
c0019157:	b9 18 00 00 00       	mov    ecx,0x18
c001915c:	8d 43 0c             	lea    eax,[ebx+0xc]
c001915f:	99                   	cdq    
c0019160:	f7 f9                	idiv   ecx
c0019162:	88 d3                	mov    bl,dl
c0019164:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001916a:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0019170:	77 06                	ja     c0019178 <RTC::completeRTCRefresh()+0x258>
c0019172:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0019178:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001917d:	31 c9                	xor    ecx,ecx
c001917f:	31 d2                	xor    edx,edx
c0019181:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019185:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019189:	89 cd                	mov    ebp,ecx
c001918b:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001918f:	c1 e7 10             	shl    edi,0x10
c0019192:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0019198:	c1 e0 10             	shl    eax,0x10
c001919b:	09 c5                	or     ebp,eax
c001919d:	89 e9                	mov    ecx,ebp
c001919f:	0f b7 c2             	movzx  eax,dx
c00191a2:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00191a6:	09 f8                	or     eax,edi
c00191a8:	89 c2                	mov    edx,eax
c00191aa:	50                   	push   eax
c00191ab:	50                   	push   eax
c00191ac:	88 d9                	mov    cl,bl
c00191ae:	51                   	push   ecx
c00191af:	52                   	push   edx
c00191b0:	e8 80 fa fe ff       	call   c0008c35 <KeDatetimeToSeconds(datetime_t)>
c00191b5:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00191b9:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00191bf:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00191c5:	83 c4 4c             	add    esp,0x4c
c00191c8:	5b                   	pop    ebx
c00191c9:	5e                   	pop    esi
c00191ca:	5f                   	pop    edi
c00191cb:	5d                   	pop    ebp
c00191cc:	c3                   	ret    
c00191cd:	90                   	nop

c00191ce <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00191ce:	55                   	push   ebp
c00191cf:	57                   	push   edi
c00191d0:	56                   	push   esi
c00191d1:	53                   	push   ebx
c00191d2:	83 ec 34             	sub    esp,0x34
c00191d5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00191d9:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00191dd:	6a 00                	push   0x0
c00191df:	6a 00                	push   0x0
c00191e1:	e8 e5 d8 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c00191e6:	5d                   	pop    ebp
c00191e7:	89 fb                	mov    ebx,edi
c00191e9:	58                   	pop    eax
c00191ea:	6a 00                	push   0x0
c00191ec:	6a 02                	push   0x2
c00191ee:	e8 d8 d8 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c00191f3:	89 f8                	mov    eax,edi
c00191f5:	89 f9                	mov    ecx,edi
c00191f7:	0f b6 c4             	movzx  eax,ah
c00191fa:	31 d2                	xor    edx,edx
c00191fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019200:	c1 e9 10             	shr    ecx,0x10
c0019203:	89 f0                	mov    eax,esi
c0019205:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019209:	89 f0                	mov    eax,esi
c001920b:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001920f:	0f b6 c4             	movzx  eax,ah
c0019212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019216:	89 f0                	mov    eax,esi
c0019218:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001921c:	c1 e8 10             	shr    eax,0x10
c001921f:	b9 64 00 00 00       	mov    ecx,0x64
c0019224:	f7 f1                	div    ecx
c0019226:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001922d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019231:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019235:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019239:	e8 39 d8 ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c001923e:	83 c4 10             	add    esp,0x10
c0019241:	a8 04                	test   al,0x4
c0019243:	89 c5                	mov    ebp,eax
c0019245:	75 6e                	jne    c00192b5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c0019247:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001924b:	31 d2                	xor    edx,edx
c001924d:	0f b6 c1             	movzx  eax,cl
c0019250:	b9 0a 00 00 00       	mov    ecx,0xa
c0019255:	f7 f1                	div    ecx
c0019257:	c1 e0 04             	shl    eax,0x4
c001925a:	09 d0                	or     eax,edx
c001925c:	31 d2                	xor    edx,edx
c001925e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019262:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0019267:	f7 f1                	div    ecx
c0019269:	c1 e0 04             	shl    eax,0x4
c001926c:	09 d0                	or     eax,edx
c001926e:	31 d2                	xor    edx,edx
c0019270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019274:	0f b6 c3             	movzx  eax,bl
c0019277:	f7 f1                	div    ecx
c0019279:	c1 e0 04             	shl    eax,0x4
c001927c:	09 d0                	or     eax,edx
c001927e:	31 d2                	xor    edx,edx
c0019280:	89 c3                	mov    ebx,eax
c0019282:	89 f0                	mov    eax,esi
c0019284:	0f b6 c0             	movzx  eax,al
c0019287:	f7 f1                	div    ecx
c0019289:	c1 e0 04             	shl    eax,0x4
c001928c:	09 d0                	or     eax,edx
c001928e:	31 d2                	xor    edx,edx
c0019290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019294:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019299:	f7 f1                	div    ecx
c001929b:	c1 e0 04             	shl    eax,0x4
c001929e:	09 d0                	or     eax,edx
c00192a0:	31 d2                	xor    edx,edx
c00192a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00192a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192aa:	f7 f1                	div    ecx
c00192ac:	c1 e0 04             	shl    eax,0x4
c00192af:	09 d0                	or     eax,edx
c00192b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192b5:	83 e5 02             	and    ebp,0x2
c00192b8:	75 1e                	jne    c00192d8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00192ba:	0f b6 c3             	movzx  eax,bl
c00192bd:	83 f8 0b             	cmp    eax,0xb
c00192c0:	76 10                	jbe    c00192d2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c00192c2:	8d 53 f4             	lea    edx,[ebx-0xc]
c00192c5:	84 d2                	test   dl,dl
c00192c7:	88 d3                	mov    bl,dl
c00192c9:	75 02                	jne    c00192cd <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c00192cb:	b3 0c                	mov    bl,0xc
c00192cd:	83 cb 80             	or     ebx,0xffffff80
c00192d0:	eb 06                	jmp    c00192d8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00192d2:	85 c0                	test   eax,eax
c00192d4:	75 02                	jne    c00192d8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00192d6:	b3 0c                	mov    bl,0xc
c00192d8:	50                   	push   eax
c00192d9:	0f b6 db             	movzx  ebx,bl
c00192dc:	50                   	push   eax
c00192dd:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00192e2:	52                   	push   edx
c00192e3:	6a 00                	push   0x0
c00192e5:	e8 e1 d7 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c00192ea:	5a                   	pop    edx
c00192eb:	59                   	pop    ecx
c00192ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00192f1:	50                   	push   eax
c00192f2:	6a 02                	push   0x2
c00192f4:	e8 d2 d7 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c00192f9:	5e                   	pop    esi
c00192fa:	5f                   	pop    edi
c00192fb:	53                   	push   ebx
c00192fc:	6a 04                	push   0x4
c00192fe:	e8 c8 d7 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c0019303:	5d                   	pop    ebp
c0019304:	58                   	pop    eax
c0019305:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001930a:	52                   	push   edx
c001930b:	6a 07                	push   0x7
c001930d:	e8 b9 d7 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c0019312:	58                   	pop    eax
c0019313:	5a                   	pop    edx
c0019314:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019319:	50                   	push   eax
c001931a:	6a 08                	push   0x8
c001931c:	e8 aa d7 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c0019321:	59                   	pop    ecx
c0019322:	5b                   	pop    ebx
c0019323:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0019328:	55                   	push   ebp
c0019329:	6a 09                	push   0x9
c001932b:	e8 9b d7 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c0019330:	5e                   	pop    esi
c0019331:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019335:	e8 e6 fb ff ff       	call   c0018f20 <RTC::completeRTCRefresh()>
c001933a:	83 c4 3c             	add    esp,0x3c
c001933d:	b0 01                	mov    al,0x1
c001933f:	5b                   	pop    ebx
c0019340:	5e                   	pop    esi
c0019341:	5f                   	pop    edi
c0019342:	5d                   	pop    ebp
c0019343:	c3                   	ret    

c0019344 <rtcIRQHandler(regs*, void*)>:
c0019344:	53                   	push   ebx
c0019345:	83 ec 14             	sub    esp,0x14
c0019348:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001934c:	6a 0c                	push   0xc
c001934e:	e8 24 d7 ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c0019353:	83 c4 10             	add    esp,0x10
c0019356:	a8 80                	test   al,0x80
c0019358:	74 24                	je     c001937e <rtcIRQHandler(regs*, void*)+0x3a>
c001935a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019361:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0019368:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c001936f:	75 0d                	jne    c001937e <rtcIRQHandler(regs*, void*)+0x3a>
c0019371:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019375:	83 c4 08             	add    esp,0x8
c0019378:	5b                   	pop    ebx
c0019379:	e9 a2 fb ff ff       	jmp    c0018f20 <RTC::completeRTCRefresh()>
c001937e:	83 c4 08             	add    esp,0x8
c0019381:	5b                   	pop    ebx
c0019382:	c3                   	ret    
c0019383:	90                   	nop

c0019384 <RTC::RTC()>:
c0019384:	83 ec 1c             	sub    esp,0x1c
c0019387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001938b:	83 ec 08             	sub    esp,0x8
c001938e:	68 db 30 02 c0       	push   0xc00230db
c0019393:	50                   	push   eax
c0019394:	e8 77 f7 fe ff       	call   c0008b10 <Clock::Clock(char const*)>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	ba f8 30 02 c0       	mov    edx,0xc00230f8
c00193a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193a5:	89 10                	mov    DWORD PTR [eax],edx
c00193a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193ab:	83 ec 0c             	sub    esp,0xc
c00193ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193b2:	6a 01                	push   0x1
c00193b4:	68 44 93 01 c0       	push   0xc0019344
c00193b9:	6a 08                	push   0x8
c00193bb:	50                   	push   eax
c00193bc:	e8 31 fc fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00193c1:	83 c4 20             	add    esp,0x20
c00193c4:	89 c2                	mov    edx,eax
c00193c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193ca:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00193d0:	fa                   	cli    
c00193d1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00193d6:	83 c0 01             	add    eax,0x1
c00193d9:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00193de:	83 ec 0c             	sub    esp,0xc
c00193e1:	6a 0b                	push   0xb
c00193e3:	e8 8f d6 ff ff       	call   c0016a77 <x86ReadCMOS(unsigned char)>
c00193e8:	83 c4 10             	add    esp,0x10
c00193eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00193ef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00193f3:	83 c8 10             	or     eax,0x10
c00193f6:	0f b6 c0             	movzx  eax,al
c00193f9:	83 ec 08             	sub    esp,0x8
c00193fc:	50                   	push   eax
c00193fd:	6a 0b                	push   0xb
c00193ff:	e8 c7 d6 ff ff       	call   c0016acb <x86WriteCMOS(unsigned char, unsigned char)>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	83 ec 0c             	sub    esp,0xc
c001940a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001940e:	e8 0d fb ff ff       	call   c0018f20 <RTC::completeRTCRefresh()>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001941e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0019423:	85 c0                	test   eax,eax
c0019425:	75 01                	jne    c0019428 <RTC::RTC()+0xa4>
c0019427:	fb                   	sti    
c0019428:	90                   	nop
c0019429:	83 c4 1c             	add    esp,0x1c
c001942c:	c3                   	ret    
c001942d:	66 90                	xchg   ax,ax
c001942f:	90                   	nop

c0019430 <HalConsoleScroll(int, int)>:
c0019430:	83 ec 10             	sub    esp,0x10
c0019433:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001943b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0019443:	90                   	nop
c0019444:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019449:	0f 8f e1 00 00 00    	jg     c0019530 <HalConsoleScroll(int, int)+0x100>
c001944f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019457:	90                   	nop
c0019458:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019460:	0f 8f be 00 00 00    	jg     c0019524 <HalConsoleScroll(int, int)+0xf4>
c0019466:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001946a:	89 d0                	mov    eax,edx
c001946c:	c1 e0 02             	shl    eax,0x2
c001946f:	01 d0                	add    eax,edx
c0019471:	c1 e0 05             	shl    eax,0x5
c0019474:	89 c2                	mov    edx,eax
c0019476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001947a:	01 d0                	add    eax,edx
c001947c:	89 c2                	mov    edx,eax
c001947e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019482:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019485:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019489:	89 d0                	mov    eax,edx
c001948b:	c1 e0 02             	shl    eax,0x2
c001948e:	01 d0                	add    eax,edx
c0019490:	c1 e0 05             	shl    eax,0x5
c0019493:	89 c2                	mov    edx,eax
c0019495:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019499:	01 d0                	add    eax,edx
c001949b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00194a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194a5:	01 d0                	add    eax,edx
c00194a7:	8a 11                	mov    dl,BYTE PTR [ecx]
c00194a9:	88 10                	mov    BYTE PTR [eax],dl
c00194ab:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00194b0:	75 66                	jne    c0019518 <HalConsoleScroll(int, int)+0xe8>
c00194b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194b6:	83 e0 01             	and    eax,0x1
c00194b9:	74 39                	je     c00194f4 <HalConsoleScroll(int, int)+0xc4>
c00194bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194bf:	83 e0 0f             	and    eax,0xf
c00194c2:	88 c2                	mov    dl,al
c00194c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00194c8:	c1 e0 04             	shl    eax,0x4
c00194cb:	09 d0                	or     eax,edx
c00194cd:	88 c1                	mov    cl,al
c00194cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194d3:	89 d0                	mov    eax,edx
c00194d5:	c1 e0 02             	shl    eax,0x2
c00194d8:	01 d0                	add    eax,edx
c00194da:	c1 e0 05             	shl    eax,0x5
c00194dd:	89 c2                	mov    edx,eax
c00194df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194e3:	01 d0                	add    eax,edx
c00194e5:	89 c2                	mov    edx,eax
c00194e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194eb:	01 d0                	add    eax,edx
c00194ed:	88 ca                	mov    dl,cl
c00194ef:	88 10                	mov    BYTE PTR [eax],dl
c00194f1:	eb 25                	jmp    c0019518 <HalConsoleScroll(int, int)+0xe8>
c00194f3:	90                   	nop
c00194f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194f8:	89 d0                	mov    eax,edx
c00194fa:	c1 e0 02             	shl    eax,0x2
c00194fd:	01 d0                	add    eax,edx
c00194ff:	c1 e0 05             	shl    eax,0x5
c0019502:	89 c2                	mov    edx,eax
c0019504:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019508:	01 d0                	add    eax,edx
c001950a:	89 c2                	mov    edx,eax
c001950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019510:	01 d0                	add    eax,edx
c0019512:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0019515:	8d 76 00             	lea    esi,[esi+0x0]
c0019518:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001951d:	e9 36 ff ff ff       	jmp    c0019458 <HalConsoleScroll(int, int)+0x28>
c0019522:	66 90                	xchg   ax,ax
c0019524:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019529:	e9 16 ff ff ff       	jmp    c0019444 <HalConsoleScroll(int, int)+0x14>
c001952e:	66 90                	xchg   ax,ax
c0019530:	90                   	nop
c0019531:	83 c4 10             	add    esp,0x10
c0019534:	c3                   	ret    
c0019535:	8d 76 00             	lea    esi,[esi+0x0]

c0019538 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0019538:	83 ec 14             	sub    esp,0x14
c001953b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001953f:	88 04 24             	mov    BYTE PTR [esp],al
c0019542:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019545:	0f b6 c0             	movzx  eax,al
c0019548:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001954c:	89 d1                	mov    ecx,edx
c001954e:	83 e1 0f             	and    ecx,0xf
c0019551:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019555:	c1 e2 04             	shl    edx,0x4
c0019558:	0f b6 d2             	movzx  edx,dl
c001955b:	09 ca                	or     edx,ecx
c001955d:	c1 e2 08             	shl    edx,0x8
c0019560:	09 d0                	or     eax,edx
c0019562:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0019567:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001956f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019573:	89 d0                	mov    eax,edx
c0019575:	c1 e0 02             	shl    eax,0x2
c0019578:	01 d0                	add    eax,edx
c001957a:	c1 e0 04             	shl    eax,0x4
c001957d:	89 c2                	mov    edx,eax
c001957f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019583:	01 d0                	add    eax,edx
c0019585:	d1 e0                	shl    eax,1
c0019587:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001958b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001958f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019594:	66 89 10             	mov    WORD PTR [eax],dx
c0019597:	90                   	nop
c0019598:	83 c4 14             	add    esp,0x14
c001959b:	c3                   	ret    

c001959c <HalConsoleCursorUpdate(int, int)>:
c001959c:	83 ec 20             	sub    esp,0x20
c001959f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195a3:	89 c2                	mov    edx,eax
c00195a5:	c1 e2 02             	shl    edx,0x2
c00195a8:	01 d0                	add    eax,edx
c00195aa:	c1 e0 04             	shl    eax,0x4
c00195ad:	89 c2                	mov    edx,eax
c00195af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00195b3:	01 d0                	add    eax,edx
c00195b5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00195ba:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00195c1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00195c6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00195ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195ce:	ee                   	out    dx,al
c00195cf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00195d4:	0f b6 c0             	movzx  eax,al
c00195d7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00195de:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00195e2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00195e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195ea:	ee                   	out    dx,al
c00195eb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00195f2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00195f7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00195fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195ff:	ee                   	out    dx,al
c0019600:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0019605:	c1 e8 08             	shr    eax,0x8
c0019608:	0f b6 c0             	movzx  eax,al
c001960b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0019612:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019616:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001961a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001961e:	ee                   	out    dx,al
c001961f:	90                   	nop
c0019620:	83 c4 20             	add    esp,0x20
c0019623:	c3                   	ret    

c0019624 <FAT::getName()>:
c0019624:	b8 2c 31 02 c0       	mov    eax,0xc002312c
c0019629:	c3                   	ret    
c001962a:	66 90                	xchg   ax,ax

c001962c <FAT::tell(void*, unsigned long long*)>:
c001962c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019631:	75 09                	jne    c001963c <FAT::tell(void*, unsigned long long*)+0x10>
c0019633:	b8 04 00 00 00       	mov    eax,0x4
c0019638:	c3                   	ret    
c0019639:	8d 76 00             	lea    esi,[esi+0x0]
c001963c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019641:	75 09                	jne    c001964c <FAT::tell(void*, unsigned long long*)+0x20>
c0019643:	b8 04 00 00 00       	mov    eax,0x4
c0019648:	c3                   	ret    
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019650:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019653:	ba 00 00 00 00       	mov    edx,0x0
c0019658:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001965c:	89 01                	mov    DWORD PTR [ecx],eax
c001965e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019661:	b8 00 00 00 00       	mov    eax,0x0
c0019666:	c3                   	ret    
c0019667:	90                   	nop

c0019668 <FAT::stat(void*, unsigned long long*)>:
c0019668:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001966d:	75 09                	jne    c0019678 <FAT::stat(void*, unsigned long long*)+0x10>
c001966f:	b8 04 00 00 00       	mov    eax,0x4
c0019674:	c3                   	ret    
c0019675:	8d 76 00             	lea    esi,[esi+0x0]
c0019678:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001967d:	75 09                	jne    c0019688 <FAT::stat(void*, unsigned long long*)+0x20>
c001967f:	b8 04 00 00 00       	mov    eax,0x4
c0019684:	c3                   	ret    
c0019685:	8d 76 00             	lea    esi,[esi+0x0]
c0019688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001968c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001968f:	ba 00 00 00 00       	mov    edx,0x0
c0019694:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019698:	89 01                	mov    DWORD PTR [ecx],eax
c001969a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001969d:	b8 00 00 00 00       	mov    eax,0x0
c00196a2:	c3                   	ret    
c00196a3:	90                   	nop

c00196a4 <FAT::~FAT()>:
c00196a4:	83 ec 0c             	sub    esp,0xc
c00196a7:	ba 78 31 02 c0       	mov    edx,0xc0023178
c00196ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b0:	89 10                	mov    DWORD PTR [eax],edx
c00196b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b6:	83 ec 0c             	sub    esp,0xc
c00196b9:	50                   	push   eax
c00196ba:	e8 bb e6 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c00196bf:	83 c4 10             	add    esp,0x10
c00196c2:	90                   	nop
c00196c3:	83 c4 0c             	add    esp,0xc
c00196c6:	c3                   	ret    
c00196c7:	90                   	nop

c00196c8 <FAT::~FAT()>:
c00196c8:	83 ec 0c             	sub    esp,0xc
c00196cb:	83 ec 0c             	sub    esp,0xc
c00196ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196d2:	e8 cd ff ff ff       	call   c00196a4 <FAT::~FAT()>
c00196d7:	83 c4 10             	add    esp,0x10
c00196da:	83 ec 08             	sub    esp,0x8
c00196dd:	6a 08                	push   0x8
c00196df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196e3:	e8 73 2f ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00196e8:	83 c4 10             	add    esp,0x10
c00196eb:	83 c4 0c             	add    esp,0xc
c00196ee:	c3                   	ret    
c00196ef:	90                   	nop

c00196f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00196f0:	83 ec 1c             	sub    esp,0x1c
c00196f3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00196fa:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00196ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019703:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001970a:	83 f8 ff             	cmp    eax,0xffffffff
c001970d:	75 35                	jne    c0019744 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001970f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019713:	88 c2                	mov    dl,al
c0019715:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001971a:	01 d0                	add    eax,edx
c001971c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019720:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019726:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001972a:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019731:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019736:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001973a:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019741:	eb 19                	jmp    c001975c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019743:	90                   	nop
c0019744:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019748:	88 c2                	mov    dl,al
c001974a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001974e:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019755:	01 d0                	add    eax,edx
c0019757:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001975b:	90                   	nop
c001975c:	83 ec 04             	sub    esp,0x4
c001975f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019763:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019767:	8d 44 24 15          	lea    eax,[esp+0x15]
c001976b:	50                   	push   eax
c001976c:	e8 63 ba fe ff       	call   c00051d4 <f_getlabel>
c0019771:	83 c4 10             	add    esp,0x10
c0019774:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019778:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001977d:	75 09                	jne    c0019788 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001977f:	b8 00 00 00 00       	mov    eax,0x0
c0019784:	eb 0a                	jmp    c0019790 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019786:	66 90                	xchg   ax,ax
c0019788:	b8 01 00 00 00       	mov    eax,0x1
c001978d:	8d 76 00             	lea    esi,[esi+0x0]
c0019790:	83 c4 1c             	add    esp,0x1c
c0019793:	c3                   	ret    

c0019794 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019794:	53                   	push   ebx
c0019795:	83 ec 58             	sub    esp,0x58
c0019798:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00197a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197a4:	b9 00 00 00 00       	mov    ecx,0x0
c00197a9:	b8 3c 00 00 00       	mov    eax,0x3c
c00197ae:	83 e0 f8             	and    eax,0xfffffff8
c00197b1:	89 c3                	mov    ebx,eax
c00197b3:	b8 00 00 00 00       	mov    eax,0x0
c00197b8:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00197bc:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c00197c0:	83 c0 08             	add    eax,0x8
c00197c3:	39 d8                	cmp    eax,ebx
c00197c5:	72 f1                	jb     c00197b8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c00197c7:	01 c2                	add    edx,eax
c00197c9:	89 0a                	mov    DWORD PTR [edx],ecx
c00197cb:	83 c2 04             	add    edx,0x4
c00197ce:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197d2:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197d9:	83 f8 ff             	cmp    eax,0xffffffff
c00197dc:	75 36                	jne    c0019814 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c00197de:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00197e2:	88 c2                	mov    dl,al
c00197e4:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197e9:	01 d0                	add    eax,edx
c00197eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197ef:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00197f5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197f9:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019800:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019805:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019809:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019810:	eb 1a                	jmp    c001982c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019812:	66 90                	xchg   ax,ax
c0019814:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019818:	88 c2                	mov    dl,al
c001981a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001981e:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019825:	01 d0                	add    eax,edx
c0019827:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001982b:	90                   	nop
c001982c:	83 ec 08             	sub    esp,0x8
c001982f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019833:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019837:	50                   	push   eax
c0019838:	e8 33 70 fe ff       	call   c0000870 <strcat>
c001983d:	83 c4 10             	add    esp,0x10
c0019840:	83 ec 0c             	sub    esp,0xc
c0019843:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019847:	50                   	push   eax
c0019848:	e8 db ba fe ff       	call   c0005328 <f_setlabel>
c001984d:	83 c4 10             	add    esp,0x10
c0019850:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019854:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019859:	75 09                	jne    c0019864 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001985b:	b8 00 00 00 00       	mov    eax,0x0
c0019860:	eb 0a                	jmp    c001986c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019862:	66 90                	xchg   ax,ax
c0019864:	b8 01 00 00 00       	mov    eax,0x1
c0019869:	8d 76 00             	lea    esi,[esi+0x0]
c001986c:	83 c4 58             	add    esp,0x58
c001986f:	5b                   	pop    ebx
c0019870:	c3                   	ret    
c0019871:	90                   	nop
c0019872:	66 90                	xchg   ax,ax

c0019874 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019874:	83 ec 2c             	sub    esp,0x2c
c0019877:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001987f:	83 ec 08             	sub    esp,0x8
c0019882:	68 50 31 02 c0       	push   0xc0023150
c0019887:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001988b:	e8 f0 6e fe ff       	call   c0000780 <strcmp>
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	85 c0                	test   eax,eax
c0019895:	0f 94 c0             	sete   al
c0019898:	0f b6 c0             	movzx  eax,al
c001989b:	85 c0                	test   eax,eax
c001989d:	74 0d                	je     c00198ac <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001989f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198a7:	e9 c0 00 00 00       	jmp    c001996c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198ac:	83 ec 08             	sub    esp,0x8
c00198af:	68 42 31 02 c0       	push   0xc0023142
c00198b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198b8:	e8 c3 6e fe ff       	call   c0000780 <strcmp>
c00198bd:	83 c4 10             	add    esp,0x10
c00198c0:	85 c0                	test   eax,eax
c00198c2:	0f 94 c0             	sete   al
c00198c5:	0f b6 c0             	movzx  eax,al
c00198c8:	85 c0                	test   eax,eax
c00198ca:	74 10                	je     c00198dc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00198cc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198d4:	e9 93 00 00 00       	jmp    c001996c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198d9:	8d 76 00             	lea    esi,[esi+0x0]
c00198dc:	83 ec 08             	sub    esp,0x8
c00198df:	68 48 31 02 c0       	push   0xc0023148
c00198e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198e8:	e8 93 6e fe ff       	call   c0000780 <strcmp>
c00198ed:	83 c4 10             	add    esp,0x10
c00198f0:	85 c0                	test   eax,eax
c00198f2:	0f 94 c0             	sete   al
c00198f5:	0f b6 c0             	movzx  eax,al
c00198f8:	85 c0                	test   eax,eax
c00198fa:	74 0c                	je     c0019908 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00198fc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019904:	eb 66                	jmp    c001996c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019906:	66 90                	xchg   ax,ax
c0019908:	83 ec 08             	sub    esp,0x8
c001990b:	68 9c 08 02 c0       	push   0xc002089c
c0019910:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019914:	e8 67 6e fe ff       	call   c0000780 <strcmp>
c0019919:	83 c4 10             	add    esp,0x10
c001991c:	85 c0                	test   eax,eax
c001991e:	0f 94 c0             	sete   al
c0019921:	0f b6 c0             	movzx  eax,al
c0019924:	85 c0                	test   eax,eax
c0019926:	74 0c                	je     c0019934 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019928:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019930:	eb 3a                	jmp    c001996c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019932:	66 90                	xchg   ax,ax
c0019934:	83 ec 08             	sub    esp,0x8
c0019937:	68 4e 31 02 c0       	push   0xc002314e
c001993c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019940:	e8 3b 6e fe ff       	call   c0000780 <strcmp>
c0019945:	83 c4 10             	add    esp,0x10
c0019948:	85 c0                	test   eax,eax
c001994a:	0f 94 c0             	sete   al
c001994d:	0f b6 c0             	movzx  eax,al
c0019950:	85 c0                	test   eax,eax
c0019952:	74 0c                	je     c0019960 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019954:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001995c:	eb 0e                	jmp    c001996c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001995e:	66 90                	xchg   ax,ax
c0019960:	b8 08 00 00 00       	mov    eax,0x8
c0019965:	e9 ea 00 00 00       	jmp    c0019a54 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001996a:	66 90                	xchg   ax,ax
c001996c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019973:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019978:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001997c:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019983:	83 f8 ff             	cmp    eax,0xffffffff
c0019986:	75 34                	jne    c00199bc <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019988:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001998c:	88 c2                	mov    dl,al
c001998e:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019993:	01 d0                	add    eax,edx
c0019995:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019999:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c001999f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199a3:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00199aa:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00199af:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00199b3:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00199ba:	eb 18                	jmp    c00199d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00199bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00199c0:	88 c2                	mov    dl,al
c00199c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199c6:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00199cd:	01 d0                	add    eax,edx
c00199cf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00199d3:	90                   	nop
c00199d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199d8:	88 04 24             	mov    BYTE PTR [esp],al
c00199db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00199df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00199eb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00199f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00199f8:	83 ec 0c             	sub    esp,0xc
c00199fb:	68 00 20 00 00       	push   0x2000
c0019a00:	e8 cb 4e ff ff       	call   c000e8d0 <malloc>
c0019a05:	83 c4 10             	add    esp,0x10
c0019a08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a0c:	68 00 20 00 00       	push   0x2000
c0019a11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a15:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a19:	50                   	push   eax
c0019a1a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019a1e:	50                   	push   eax
c0019a1f:	e8 01 bc fe ff       	call   c0005625 <f_mkfs>
c0019a24:	83 c4 10             	add    esp,0x10
c0019a27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a30:	75 0a                	jne    c0019a3c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019a32:	b8 00 00 00 00       	mov    eax,0x0
c0019a37:	eb 1b                	jmp    c0019a54 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a39:	8d 76 00             	lea    esi,[esi+0x0]
c0019a3c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019a41:	75 09                	jne    c0019a4c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019a43:	b8 09 00 00 00       	mov    eax,0x9
c0019a48:	eb 0a                	jmp    c0019a54 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a4a:	66 90                	xchg   ax,ax
c0019a4c:	b8 01 00 00 00       	mov    eax,0x1
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]
c0019a54:	83 c4 2c             	add    esp,0x2c
c0019a57:	c3                   	ret    

c0019a58 <FAT::tryMount(LogicalDisk*, int)>:
c0019a58:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019a5e:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a63:	83 f8 14             	cmp    eax,0x14
c0019a66:	75 18                	jne    c0019a80 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019a68:	83 ec 0c             	sub    esp,0xc
c0019a6b:	68 54 31 02 c0       	push   0xc0023154
c0019a70:	e8 a1 51 ff ff       	call   c000ec16 <KePanic(char const*)>
c0019a75:	83 c4 10             	add    esp,0x10
c0019a78:	b0 00                	mov    al,0x0
c0019a7a:	e9 ed 01 00 00       	jmp    c0019c6c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a7f:	90                   	nop
c0019a80:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019a87:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a8d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a93:	3d 00 02 00 00       	cmp    eax,0x200
c0019a98:	74 0a                	je     c0019aa4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019a9a:	b0 00                	mov    al,0x0
c0019a9c:	e9 cb 01 00 00       	jmp    c0019c6c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019aac:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019ab3:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019aba:	83 f8 ff             	cmp    eax,0xffffffff
c0019abd:	74 09                	je     c0019ac8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019abf:	b0 01                	mov    al,0x1
c0019ac1:	e9 a6 01 00 00       	jmp    c0019c6c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019ac6:	66 90                	xchg   ax,ax
c0019ac8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019ad2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019ada:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019ae1:	88 c2                	mov    dl,al
c0019ae3:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019ae8:	01 d0                	add    eax,edx
c0019aea:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019af1:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019af7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019afe:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019b05:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b0a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019b11:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019b18:	83 ec 0c             	sub    esp,0xc
c0019b1b:	68 34 02 00 00       	push   0x234
c0019b20:	e8 ab 4d ff ff       	call   c000e8d0 <malloc>
c0019b25:	83 c4 10             	add    esp,0x10
c0019b28:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019b2f:	83 ec 04             	sub    esp,0x4
c0019b32:	6a 00                	push   0x0
c0019b34:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019b3b:	50                   	push   eax
c0019b3c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b43:	e8 d7 a2 fe ff       	call   c0003e1f <f_mount>
c0019b48:	83 c4 10             	add    esp,0x10
c0019b4b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019b52:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019b5a:	74 1c                	je     c0019b78 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019b5c:	83 ec 0c             	sub    esp,0xc
c0019b5f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b66:	e8 85 4d ff ff       	call   c000e8f0 <rfree>
c0019b6b:	83 c4 10             	add    esp,0x10
c0019b6e:	b0 00                	mov    al,0x0
c0019b70:	e9 f7 00 00 00       	jmp    c0019c6c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b75:	8d 76 00             	lea    esi,[esi+0x0]
c0019b78:	83 ec 04             	sub    esp,0x4
c0019b7b:	68 00 01 00 00       	push   0x100
c0019b80:	6a 00                	push   0x0
c0019b82:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b89:	50                   	push   eax
c0019b8a:	e8 61 69 fe ff       	call   c00004f0 <memset>
c0019b8f:	83 c4 10             	add    esp,0x10
c0019b92:	83 ec 08             	sub    esp,0x8
c0019b95:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019b9c:	50                   	push   eax
c0019b9d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019ba4:	50                   	push   eax
c0019ba5:	e8 c6 6c fe ff       	call   c0000870 <strcat>
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	83 ec 08             	sub    esp,0x8
c0019bb0:	68 62 31 02 c0       	push   0xc0023162
c0019bb5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019bbc:	50                   	push   eax
c0019bbd:	e8 ae 6c fe ff       	call   c0000870 <strcat>
c0019bc2:	83 c4 10             	add    esp,0x10
c0019bc5:	83 ec 04             	sub    esp,0x4
c0019bc8:	6a 01                	push   0x1
c0019bca:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019bd1:	50                   	push   eax
c0019bd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bd6:	50                   	push   eax
c0019bd7:	e8 a5 a2 fe ff       	call   c0003e81 <f_open>
c0019bdc:	83 c4 10             	add    esp,0x10
c0019bdf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019be6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019bed:	85 c0                	test   eax,eax
c0019bef:	74 0b                	je     c0019bfc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019bf1:	78 31                	js     c0019c24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019bf3:	83 e8 04             	sub    eax,0x4
c0019bf6:	83 f8 01             	cmp    eax,0x1
c0019bf9:	77 29                	ja     c0019c24 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019bfb:	90                   	nop
c0019bfc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019c04:	83 ec 0c             	sub    esp,0xc
c0019c07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c0b:	50                   	push   eax
c0019c0c:	e8 20 aa fe ff       	call   c0004631 <f_close>
c0019c11:	83 c4 10             	add    esp,0x10
c0019c14:	90                   	nop
c0019c15:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019c1d:	85 c0                	test   eax,eax
c0019c1f:	74 43                	je     c0019c64 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019c21:	eb 31                	jmp    c0019c54 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019c23:	90                   	nop
c0019c24:	83 ec 0c             	sub    esp,0xc
c0019c27:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019c2e:	e8 bd 4c ff ff       	call   c000e8f0 <rfree>
c0019c33:	83 c4 10             	add    esp,0x10
c0019c36:	83 ec 04             	sub    esp,0x4
c0019c39:	6a 00                	push   0x0
c0019c3b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c42:	50                   	push   eax
c0019c43:	6a 00                	push   0x0
c0019c45:	e8 d5 a1 fe ff       	call   c0003e1f <f_mount>
c0019c4a:	83 c4 10             	add    esp,0x10
c0019c4d:	b0 00                	mov    al,0x0
c0019c4f:	eb 1b                	jmp    c0019c6c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019c51:	8d 76 00             	lea    esi,[esi+0x0]
c0019c54:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019c59:	83 c0 01             	add    eax,0x1
c0019c5c:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019c61:	8d 76 00             	lea    esi,[esi+0x0]
c0019c64:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019c6b:	90                   	nop
c0019c6c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019c72:	c3                   	ret    
c0019c73:	90                   	nop

c0019c74 <FAT::allocateSwapfile(char const*, int)>:
c0019c74:	55                   	push   ebp
c0019c75:	57                   	push   edi
c0019c76:	56                   	push   esi
c0019c77:	53                   	push   ebx
c0019c78:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019c7e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019c89:	83 ec 0c             	sub    esp,0xc
c0019c8c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019c93:	e8 38 4c ff ff       	call   c000e8d0 <malloc>
c0019c98:	83 c4 10             	add    esp,0x10
c0019c9b:	89 c7                	mov    edi,eax
c0019c9d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019ca2:	83 ec 04             	sub    esp,0x4
c0019ca5:	50                   	push   eax
c0019ca6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019cad:	57                   	push   edi
c0019cae:	e8 59 e4 fe ff       	call   c000810c <File::File(char const*, Process*)>
c0019cb3:	83 c4 10             	add    esp,0x10
c0019cb6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019cbd:	83 ec 04             	sub    esp,0x4
c0019cc0:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019cc4:	50                   	push   eax
c0019cc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cc9:	50                   	push   eax
c0019cca:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019cd1:	e8 56 e7 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0019cd6:	83 c4 10             	add    esp,0x10
c0019cd9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019ce0:	c1 e0 14             	shl    eax,0x14
c0019ce3:	89 c7                	mov    edi,eax
c0019ce5:	89 c5                	mov    ebp,eax
c0019ce7:	c1 fd 1f             	sar    ebp,0x1f
c0019cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019cf2:	89 f9                	mov    ecx,edi
c0019cf4:	31 c1                	xor    ecx,eax
c0019cf6:	89 cb                	mov    ebx,ecx
c0019cf8:	89 e9                	mov    ecx,ebp
c0019cfa:	31 d1                	xor    ecx,edx
c0019cfc:	89 ce                	mov    esi,ecx
c0019cfe:	89 f0                	mov    eax,esi
c0019d00:	09 d8                	or     eax,ebx
c0019d02:	0f 84 9c 00 00 00    	je     c0019da4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019d08:	83 ec 0c             	sub    esp,0xc
c0019d0b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d12:	e8 e1 e5 fe ff       	call   c00082f8 <File::unlink()>
c0019d17:	83 c4 10             	add    esp,0x10
c0019d1a:	83 ec 08             	sub    esp,0x8
c0019d1d:	6a 12                	push   0x12
c0019d1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d26:	e8 ff e3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019d2b:	83 c4 10             	add    esp,0x10
c0019d2e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d35:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019d3b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019d42:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d49:	c1 e0 14             	shl    eax,0x14
c0019d4c:	83 ec 04             	sub    esp,0x4
c0019d4f:	6a 01                	push   0x1
c0019d51:	50                   	push   eax
c0019d52:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019d59:	e8 5a b7 fe ff       	call   c00054b8 <f_expand>
c0019d5e:	83 c4 10             	add    esp,0x10
c0019d61:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d68:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d6a:	83 c0 10             	add    eax,0x10
c0019d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d6f:	83 ec 0c             	sub    esp,0xc
c0019d72:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019d76:	52                   	push   edx
c0019d77:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019d7b:	52                   	push   edx
c0019d7c:	6a 00                	push   0x0
c0019d7e:	68 00 04 00 00       	push   0x400
c0019d83:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019d8a:	ff d0                	call   eax
c0019d8c:	83 c4 20             	add    esp,0x20
c0019d8f:	83 ec 0c             	sub    esp,0xc
c0019d92:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d99:	e8 ea e3 fe ff       	call   c0008188 <File::close()>
c0019d9e:	83 c4 10             	add    esp,0x10
c0019da1:	8d 76 00             	lea    esi,[esi+0x0]
c0019da4:	83 ec 08             	sub    esp,0x8
c0019da7:	6a 01                	push   0x1
c0019da9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019db0:	e8 75 e3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019db5:	83 c4 10             	add    esp,0x10
c0019db8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019dbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dc1:	83 c0 0c             	add    eax,0xc
c0019dc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dc6:	83 ec 0c             	sub    esp,0xc
c0019dc9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019dcd:	52                   	push   edx
c0019dce:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019dd2:	52                   	push   edx
c0019dd3:	6a 00                	push   0x0
c0019dd5:	6a 04                	push   0x4
c0019dd7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019dde:	ff d0                	call   eax
c0019de0:	83 c4 20             	add    esp,0x20
c0019de3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019dea:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019df0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019df7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019dfe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019e01:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019e08:	83 ec 0c             	sub    esp,0xc
c0019e0b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e12:	e8 71 e3 fe ff       	call   c0008188 <File::close()>
c0019e17:	83 c4 10             	add    esp,0x10
c0019e1a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019e21:	ba 00 00 00 00       	mov    edx,0x0
c0019e26:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019e2c:	5b                   	pop    ebx
c0019e2d:	5e                   	pop    esi
c0019e2e:	5f                   	pop    edi
c0019e2f:	5d                   	pop    ebp
c0019e30:	c3                   	ret    
c0019e31:	90                   	nop
c0019e32:	66 90                	xchg   ax,ax

c0019e34 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019e34:	57                   	push   edi
c0019e35:	56                   	push   esi
c0019e36:	53                   	push   ebx
c0019e37:	81 ec 50 02 00 00    	sub    esp,0x250
c0019e3d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019e45:	74 0d                	je     c0019e54 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019e47:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019e4f:	75 0f                	jne    c0019e60 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019e51:	8d 76 00             	lea    esi,[esi+0x0]
c0019e54:	b8 04 00 00 00       	mov    eax,0x4
c0019e59:	e9 3a 01 00 00       	jmp    c0019f98 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019e5e:	66 90                	xchg   ax,ax
c0019e60:	83 ec 08             	sub    esp,0x8
c0019e63:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019e6a:	50                   	push   eax
c0019e6b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019e72:	e8 86 aa fe ff       	call   c00048fd <f_readdir>
c0019e77:	83 c4 10             	add    esp,0x10
c0019e7a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019e81:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019e88:	83 ec 0c             	sub    esp,0xc
c0019e8b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019e92:	83 c0 16             	add    eax,0x16
c0019e95:	50                   	push   eax
c0019e96:	e8 e5 66 fe ff       	call   c0000580 <strlen>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	ba 00 00 00 00       	mov    edx,0x0
c0019ea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ea7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019eab:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019eb2:	0f b6 c0             	movzx  eax,al
c0019eb5:	83 e0 10             	and    eax,0x10
c0019eb8:	74 0a                	je     c0019ec4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019eba:	b8 02 00 00 00       	mov    eax,0x2
c0019ebf:	eb 0b                	jmp    c0019ecc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec4:	b8 01 00 00 00       	mov    eax,0x1
c0019ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ed0:	83 ec 08             	sub    esp,0x8
c0019ed3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019eda:	83 c0 16             	add    eax,0x16
c0019edd:	50                   	push   eax
c0019ede:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ee2:	83 c0 10             	add    eax,0x10
c0019ee5:	50                   	push   eax
c0019ee6:	e8 65 67 fe ff       	call   c0000650 <strcpy>
c0019eeb:	83 c4 10             	add    esp,0x10
c0019eee:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019ef5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019efc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f00:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019f07:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019f0e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019f15:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019f1c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019f23:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019f2a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019f31:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019f38:	89 c6                	mov    esi,eax
c0019f3a:	89 d7                	mov    edi,edx
c0019f3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f3e:	89 c8                	mov    eax,ecx
c0019f40:	89 fa                	mov    edx,edi
c0019f42:	89 f3                	mov    ebx,esi
c0019f44:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019f4b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019f52:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019f59:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019f60:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019f66:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019f6d:	0f be c0             	movsx  eax,al
c0019f70:	85 c0                	test   eax,eax
c0019f72:	75 08                	jne    c0019f7c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019f74:	b8 07 00 00 00       	mov    eax,0x7
c0019f79:	eb 1d                	jmp    c0019f98 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f7b:	90                   	nop
c0019f7c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019f83:	85 c0                	test   eax,eax
c0019f85:	75 09                	jne    c0019f90 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019f87:	b8 00 00 00 00       	mov    eax,0x0
c0019f8c:	eb 0a                	jmp    c0019f98 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f8e:	66 90                	xchg   ax,ax
c0019f90:	b8 01 00 00 00       	mov    eax,0x1
c0019f95:	8d 76 00             	lea    esi,[esi+0x0]
c0019f98:	81 c4 50 02 00 00    	add    esp,0x250
c0019f9e:	5b                   	pop    ebx
c0019f9f:	5e                   	pop    esi
c0019fa0:	5f                   	pop    edi
c0019fa1:	c3                   	ret    
c0019fa2:	66 90                	xchg   ax,ax

c0019fa4 <FAT::read(void*, unsigned long, void*, int*)>:
c0019fa4:	83 ec 1c             	sub    esp,0x1c
c0019fa7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019fac:	74 0a                	je     c0019fb8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019fae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019fb3:	75 0b                	jne    c0019fc0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb8:	b8 04 00 00 00       	mov    eax,0x4
c0019fbd:	eb 41                	jmp    c001a000 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019fbf:	90                   	nop
c0019fc0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fc4:	50                   	push   eax
c0019fc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019fc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019fcd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019fd1:	e8 6e a1 fe ff       	call   c0004144 <f_read>
c0019fd6:	83 c4 10             	add    esp,0x10
c0019fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fe1:	89 c2                	mov    edx,eax
c0019fe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fe7:	89 10                	mov    DWORD PTR [eax],edx
c0019fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fed:	85 c0                	test   eax,eax
c0019fef:	75 07                	jne    c0019ff8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019ff1:	b8 00 00 00 00       	mov    eax,0x0
c0019ff6:	eb 08                	jmp    c001a000 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019ff8:	b8 01 00 00 00       	mov    eax,0x1
c0019ffd:	8d 76 00             	lea    esi,[esi+0x0]
c001a000:	83 c4 1c             	add    esp,0x1c
c001a003:	c3                   	ret    

c001a004 <FAT::write(void*, unsigned long, void*, int*)>:
c001a004:	83 ec 1c             	sub    esp,0x1c
c001a007:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a00c:	74 0a                	je     c001a018 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a00e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a013:	75 0b                	jne    c001a020 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a015:	8d 76 00             	lea    esi,[esi+0x0]
c001a018:	b8 04 00 00 00       	mov    eax,0x4
c001a01d:	eb 41                	jmp    c001a060 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a01f:	90                   	nop
c001a020:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a024:	50                   	push   eax
c001a025:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a029:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a02d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a031:	e8 ef a2 fe ff       	call   c0004325 <f_write>
c001a036:	83 c4 10             	add    esp,0x10
c001a039:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a03d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a041:	89 c2                	mov    edx,eax
c001a043:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a047:	89 10                	mov    DWORD PTR [eax],edx
c001a049:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a04d:	85 c0                	test   eax,eax
c001a04f:	75 07                	jne    c001a058 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a051:	b8 00 00 00 00       	mov    eax,0x0
c001a056:	eb 08                	jmp    c001a060 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a058:	b8 01 00 00 00       	mov    eax,0x1
c001a05d:	8d 76 00             	lea    esi,[esi+0x0]
c001a060:	83 c4 1c             	add    esp,0x1c
c001a063:	c3                   	ret    

c001a064 <FAT::close(void*)>:
c001a064:	83 ec 1c             	sub    esp,0x1c
c001a067:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a06c:	75 0a                	jne    c001a078 <FAT::close(void*)+0x14>
c001a06e:	b8 04 00 00 00       	mov    eax,0x4
c001a073:	eb 3f                	jmp    c001a0b4 <FAT::close(void*)+0x50>
c001a075:	8d 76 00             	lea    esi,[esi+0x0]
c001a078:	83 ec 0c             	sub    esp,0xc
c001a07b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a07f:	e8 ad a5 fe ff       	call   c0004631 <f_close>
c001a084:	83 c4 10             	add    esp,0x10
c001a087:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a08b:	83 ec 0c             	sub    esp,0xc
c001a08e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a092:	e8 49 48 ff ff       	call   c000e8e0 <free>
c001a097:	83 c4 10             	add    esp,0x10
c001a09a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a09e:	85 c0                	test   eax,eax
c001a0a0:	75 0a                	jne    c001a0ac <FAT::close(void*)+0x48>
c001a0a2:	b8 00 00 00 00       	mov    eax,0x0
c001a0a7:	eb 0b                	jmp    c001a0b4 <FAT::close(void*)+0x50>
c001a0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ac:	b8 01 00 00 00       	mov    eax,0x1
c001a0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b4:	83 c4 1c             	add    esp,0x1c
c001a0b7:	c3                   	ret    

c001a0b8 <FAT::closeDir(void*)>:
c001a0b8:	83 ec 1c             	sub    esp,0x1c
c001a0bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0c0:	75 0a                	jne    c001a0cc <FAT::closeDir(void*)+0x14>
c001a0c2:	b8 04 00 00 00       	mov    eax,0x4
c001a0c7:	eb 3f                	jmp    c001a108 <FAT::closeDir(void*)+0x50>
c001a0c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0cc:	83 ec 0c             	sub    esp,0xc
c001a0cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0d3:	e8 03 a8 fe ff       	call   c00048db <f_closedir>
c001a0d8:	83 c4 10             	add    esp,0x10
c001a0db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0df:	83 ec 0c             	sub    esp,0xc
c001a0e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0e6:	e8 f5 47 ff ff       	call   c000e8e0 <free>
c001a0eb:	83 c4 10             	add    esp,0x10
c001a0ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0f2:	85 c0                	test   eax,eax
c001a0f4:	75 0a                	jne    c001a100 <FAT::closeDir(void*)+0x48>
c001a0f6:	b8 00 00 00 00       	mov    eax,0x0
c001a0fb:	eb 0b                	jmp    c001a108 <FAT::closeDir(void*)+0x50>
c001a0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a100:	b8 01 00 00 00       	mov    eax,0x1
c001a105:	8d 76 00             	lea    esi,[esi+0x0]
c001a108:	83 c4 1c             	add    esp,0x1c
c001a10b:	c3                   	ret    

c001a10c <FAT::truncate(void*, unsigned long long)>:
c001a10c:	83 ec 2c             	sub    esp,0x2c
c001a10f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a113:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a117:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a11b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a11f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a124:	75 0a                	jne    c001a130 <FAT::truncate(void*, unsigned long long)+0x24>
c001a126:	b8 04 00 00 00       	mov    eax,0x4
c001a12b:	eb 47                	jmp    c001a174 <FAT::truncate(void*, unsigned long long)+0x68>
c001a12d:	8d 76 00             	lea    esi,[esi+0x0]
c001a130:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a134:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a137:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a13b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a147:	83 ec 08             	sub    esp,0x8
c001a14a:	50                   	push   eax
c001a14b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a14f:	e8 0c a5 fe ff       	call   c0004660 <f_lseek>
c001a154:	83 c4 10             	add    esp,0x10
c001a157:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a15b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a15f:	85 c0                	test   eax,eax
c001a161:	75 09                	jne    c001a16c <FAT::truncate(void*, unsigned long long)+0x60>
c001a163:	b8 00 00 00 00       	mov    eax,0x0
c001a168:	eb 0a                	jmp    c001a174 <FAT::truncate(void*, unsigned long long)+0x68>
c001a16a:	66 90                	xchg   ax,ax
c001a16c:	b8 01 00 00 00       	mov    eax,0x1
c001a171:	8d 76 00             	lea    esi,[esi+0x0]
c001a174:	83 c4 2c             	add    esp,0x2c
c001a177:	c3                   	ret    

c001a178 <FAT::seek(void*, unsigned long long)>:
c001a178:	83 ec 2c             	sub    esp,0x2c
c001a17b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a17f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a183:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a18b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a190:	75 0a                	jne    c001a19c <FAT::seek(void*, unsigned long long)+0x24>
c001a192:	b8 04 00 00 00       	mov    eax,0x4
c001a197:	eb 33                	jmp    c001a1cc <FAT::seek(void*, unsigned long long)+0x54>
c001a199:	8d 76 00             	lea    esi,[esi+0x0]
c001a19c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1a0:	83 ec 08             	sub    esp,0x8
c001a1a3:	50                   	push   eax
c001a1a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a1a8:	e8 b3 a4 fe ff       	call   c0004660 <f_lseek>
c001a1ad:	83 c4 10             	add    esp,0x10
c001a1b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1b8:	85 c0                	test   eax,eax
c001a1ba:	75 08                	jne    c001a1c4 <FAT::seek(void*, unsigned long long)+0x4c>
c001a1bc:	b8 00 00 00 00       	mov    eax,0x0
c001a1c1:	eb 09                	jmp    c001a1cc <FAT::seek(void*, unsigned long long)+0x54>
c001a1c3:	90                   	nop
c001a1c4:	b8 01 00 00 00       	mov    eax,0x1
c001a1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1cc:	83 c4 2c             	add    esp,0x2c
c001a1cf:	c3                   	ret    

c001a1d0 <fatWrapperReadDisk>:
c001a1d0:	53                   	push   ebx
c001a1d1:	83 ec 18             	sub    esp,0x18
c001a1d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1e1:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a1e8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a1ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1f0:	ba 00 00 00 00       	mov    edx,0x0
c001a1f5:	83 ec 0c             	sub    esp,0xc
c001a1f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1fc:	53                   	push   ebx
c001a1fd:	52                   	push   edx
c001a1fe:	50                   	push   eax
c001a1ff:	51                   	push   ecx
c001a200:	e8 cb fe fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001a205:	83 c4 20             	add    esp,0x20
c001a208:	83 c4 18             	add    esp,0x18
c001a20b:	5b                   	pop    ebx
c001a20c:	c3                   	ret    
c001a20d:	8d 76 00             	lea    esi,[esi+0x0]

c001a210 <fatWrapperWriteDisk>:
c001a210:	53                   	push   ebx
c001a211:	83 ec 18             	sub    esp,0x18
c001a214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a218:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a21c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a221:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a228:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a22c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a230:	ba 00 00 00 00       	mov    edx,0x0
c001a235:	83 ec 0c             	sub    esp,0xc
c001a238:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a23c:	53                   	push   ebx
c001a23d:	52                   	push   edx
c001a23e:	50                   	push   eax
c001a23f:	51                   	push   ecx
c001a240:	e8 f7 fe fe ff       	call   c000a13c <LogicalDisk::write(unsigned long long, int, void*)>
c001a245:	83 c4 20             	add    esp,0x20
c001a248:	83 c4 18             	add    esp,0x18
c001a24b:	5b                   	pop    ebx
c001a24c:	c3                   	ret    
c001a24d:	8d 76 00             	lea    esi,[esi+0x0]

c001a250 <fatWrapperIoctl>:
c001a250:	53                   	push   ebx
c001a251:	83 ec 28             	sub    esp,0x28
c001a254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a258:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a25c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a260:	88 d0                	mov    al,dl
c001a262:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a266:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a26b:	83 f8 02             	cmp    eax,0x2
c001a26e:	75 34                	jne    c001a2a4 <fatWrapperIoctl+0x54>
c001a270:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a274:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a278:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a27d:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a284:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a28a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a290:	89 c2                	mov    edx,eax
c001a292:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a296:	66 89 10             	mov    WORD PTR [eax],dx
c001a299:	b8 00 00 00 00       	mov    eax,0x0
c001a29e:	e9 c5 00 00 00       	jmp    c001a368 <fatWrapperIoctl+0x118>
c001a2a3:	90                   	nop
c001a2a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a2a9:	83 f8 01             	cmp    eax,0x1
c001a2ac:	75 6a                	jne    c001a318 <fatWrapperIoctl+0xc8>
c001a2ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2bb:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a2c2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a2c8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a2ce:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a2d4:	89 c8                	mov    eax,ecx
c001a2d6:	89 da                	mov    edx,ebx
c001a2d8:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a2dc:	c1 e0 0a             	shl    eax,0xa
c001a2df:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a2e4:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a2eb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a2f1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a2f7:	89 cb                	mov    ebx,ecx
c001a2f9:	c1 fb 1f             	sar    ebx,0x1f
c001a2fc:	53                   	push   ebx
c001a2fd:	51                   	push   ecx
c001a2fe:	52                   	push   edx
c001a2ff:	50                   	push   eax
c001a300:	e8 9f 57 00 00       	call   c001faa4 <__udivdi3>
c001a305:	83 c4 10             	add    esp,0x10
c001a308:	89 c2                	mov    edx,eax
c001a30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a30e:	89 10                	mov    DWORD PTR [eax],edx
c001a310:	b8 00 00 00 00       	mov    eax,0x0
c001a315:	eb 51                	jmp    c001a368 <fatWrapperIoctl+0x118>
c001a317:	90                   	nop
c001a318:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a31d:	85 c0                	test   eax,eax
c001a31f:	75 07                	jne    c001a328 <fatWrapperIoctl+0xd8>
c001a321:	b8 00 00 00 00       	mov    eax,0x0
c001a326:	eb 40                	jmp    c001a368 <fatWrapperIoctl+0x118>
c001a328:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a32d:	83 f8 03             	cmp    eax,0x3
c001a330:	75 1a                	jne    c001a34c <fatWrapperIoctl+0xfc>
c001a332:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a336:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a33a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a33e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a344:	b8 00 00 00 00       	mov    eax,0x0
c001a349:	eb 1d                	jmp    c001a368 <fatWrapperIoctl+0x118>
c001a34b:	90                   	nop
c001a34c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a351:	83 f8 04             	cmp    eax,0x4
c001a354:	75 0a                	jne    c001a360 <fatWrapperIoctl+0x110>
c001a356:	b8 00 00 00 00       	mov    eax,0x0
c001a35b:	eb 0b                	jmp    c001a368 <fatWrapperIoctl+0x118>
c001a35d:	8d 76 00             	lea    esi,[esi+0x0]
c001a360:	b8 04 00 00 00       	mov    eax,0x4
c001a365:	8d 76 00             	lea    esi,[esi+0x0]
c001a368:	83 c4 28             	add    esp,0x28
c001a36b:	5b                   	pop    ebx
c001a36c:	c3                   	ret    
c001a36d:	90                   	nop
c001a36e:	66 90                	xchg   ax,ax

c001a370 <FAT::FAT()>:
c001a370:	83 ec 1c             	sub    esp,0x1c
c001a373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a377:	83 ec 0c             	sub    esp,0xc
c001a37a:	50                   	push   eax
c001a37b:	e8 d6 d9 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001a380:	83 c4 10             	add    esp,0x10
c001a383:	ba 78 31 02 c0       	mov    edx,0xc0023178
c001a388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a38c:	89 10                	mov    DWORD PTR [eax],edx
c001a38e:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a398:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a3a0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a3a5:	7f 19                	jg     c001a3c0 <FAT::FAT()+0x50>
c001a3a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3ab:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a3b6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a3bb:	eb e3                	jmp    c001a3a0 <FAT::FAT()+0x30>
c001a3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c0:	90                   	nop
c001a3c1:	83 c4 1c             	add    esp,0x1c
c001a3c4:	c3                   	ret    
c001a3c5:	90                   	nop
c001a3c6:	66 90                	xchg   ax,ax

c001a3c8 <FAT::fixFilepath(char*)>:
c001a3c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3cc:	8a 00                	mov    al,BYTE PTR [eax]
c001a3ce:	0f be c0             	movsx  eax,al
c001a3d1:	83 f8 40             	cmp    eax,0x40
c001a3d4:	7e 2e                	jle    c001a404 <FAT::fixFilepath(char*)+0x3c>
c001a3d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3da:	8a 00                	mov    al,BYTE PTR [eax]
c001a3dc:	83 e8 41             	sub    eax,0x41
c001a3df:	88 c2                	mov    dl,al
c001a3e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3e5:	88 10                	mov    BYTE PTR [eax],dl
c001a3e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3eb:	8a 00                	mov    al,BYTE PTR [eax]
c001a3ed:	0f be c0             	movsx  eax,al
c001a3f0:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a3f7:	83 c0 30             	add    eax,0x30
c001a3fa:	88 c2                	mov    dl,al
c001a3fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a400:	88 10                	mov    BYTE PTR [eax],dl
c001a402:	66 90                	xchg   ax,ax
c001a404:	90                   	nop
c001a405:	c3                   	ret    
c001a406:	66 90                	xchg   ax,ax

c001a408 <FAT::open(char const*, void**, FileOpenMode)>:
c001a408:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a40e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a416:	74 0c                	je     c001a424 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a418:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a420:	75 0e                	jne    c001a430 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a422:	66 90                	xchg   ax,ax
c001a424:	b8 04 00 00 00       	mov    eax,0x4
c001a429:	e9 46 01 00 00       	jmp    c001a574 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a42e:	66 90                	xchg   ax,ax
c001a430:	83 ec 08             	sub    esp,0x8
c001a433:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a43a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a43e:	50                   	push   eax
c001a43f:	e8 0c 62 fe ff       	call   c0000650 <strcpy>
c001a444:	83 c4 10             	add    esp,0x10
c001a447:	83 ec 08             	sub    esp,0x8
c001a44a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a44e:	50                   	push   eax
c001a44f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a456:	e8 6d ff ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001a45b:	83 c4 10             	add    esp,0x10
c001a45e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a466:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a46d:	83 e0 01             	and    eax,0x1
c001a470:	74 12                	je     c001a484 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a472:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a479:	83 c8 01             	or     eax,0x1
c001a47c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a483:	90                   	nop
c001a484:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a48b:	83 e0 04             	and    eax,0x4
c001a48e:	74 24                	je     c001a4b4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a490:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a497:	83 c8 30             	or     eax,0x30
c001a49a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4a1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4a8:	83 c8 02             	or     eax,0x2
c001a4ab:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4b2:	66 90                	xchg   ax,ax
c001a4b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4bb:	83 e0 02             	and    eax,0x2
c001a4be:	74 14                	je     c001a4d4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a4c0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4c7:	83 c8 02             	or     eax,0x2
c001a4ca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4db:	83 e0 08             	and    eax,0x8
c001a4de:	74 14                	je     c001a4f4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a4e0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4e7:	83 c8 04             	or     eax,0x4
c001a4ea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4fb:	83 e0 10             	and    eax,0x10
c001a4fe:	74 14                	je     c001a514 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a500:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a507:	83 c8 08             	or     eax,0x8
c001a50a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a511:	8d 76 00             	lea    esi,[esi+0x0]
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	68 28 02 00 00       	push   0x228
c001a51c:	e8 af 43 ff ff       	call   c000e8d0 <malloc>
c001a521:	83 c4 10             	add    esp,0x10
c001a524:	89 c2                	mov    edx,eax
c001a526:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a52d:	89 10                	mov    DWORD PTR [eax],edx
c001a52f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a537:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a53e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a540:	83 ec 04             	sub    esp,0x4
c001a543:	52                   	push   edx
c001a544:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a548:	52                   	push   edx
c001a549:	50                   	push   eax
c001a54a:	e8 32 99 fe ff       	call   c0003e81 <f_open>
c001a54f:	83 c4 10             	add    esp,0x10
c001a552:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a559:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a561:	74 09                	je     c001a56c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a563:	b8 01 00 00 00       	mov    eax,0x1
c001a568:	eb 0a                	jmp    c001a574 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a56a:	66 90                	xchg   ax,ax
c001a56c:	b8 00 00 00 00       	mov    eax,0x0
c001a571:	8d 76 00             	lea    esi,[esi+0x0]
c001a574:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a57a:	c3                   	ret    
c001a57b:	90                   	nop

c001a57c <FAT::openDir(char const*, void**)>:
c001a57c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a582:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a58a:	74 0c                	je     c001a598 <FAT::openDir(char const*, void**)+0x1c>
c001a58c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a594:	75 0e                	jne    c001a5a4 <FAT::openDir(char const*, void**)+0x28>
c001a596:	66 90                	xchg   ax,ax
c001a598:	b8 04 00 00 00       	mov    eax,0x4
c001a59d:	e9 82 00 00 00       	jmp    c001a624 <FAT::openDir(char const*, void**)+0xa8>
c001a5a2:	66 90                	xchg   ax,ax
c001a5a4:	83 ec 08             	sub    esp,0x8
c001a5a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a5ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5b2:	50                   	push   eax
c001a5b3:	e8 98 60 fe ff       	call   c0000650 <strcpy>
c001a5b8:	83 c4 10             	add    esp,0x10
c001a5bb:	83 ec 08             	sub    esp,0x8
c001a5be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a5c2:	50                   	push   eax
c001a5c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a5ca:	e8 f9 fd ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001a5cf:	83 c4 10             	add    esp,0x10
c001a5d2:	83 ec 0c             	sub    esp,0xc
c001a5d5:	6a 30                	push   0x30
c001a5d7:	e8 f4 42 ff ff       	call   c000e8d0 <malloc>
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	89 c2                	mov    edx,eax
c001a5e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5e8:	89 10                	mov    DWORD PTR [eax],edx
c001a5ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5f3:	83 ec 08             	sub    esp,0x8
c001a5f6:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a5fa:	52                   	push   edx
c001a5fb:	50                   	push   eax
c001a5fc:	e8 0f a2 fe ff       	call   c0004810 <f_opendir>
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a60b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a613:	74 07                	je     c001a61c <FAT::openDir(char const*, void**)+0xa0>
c001a615:	b8 01 00 00 00       	mov    eax,0x1
c001a61a:	eb 08                	jmp    c001a624 <FAT::openDir(char const*, void**)+0xa8>
c001a61c:	b8 00 00 00 00       	mov    eax,0x0
c001a621:	8d 76 00             	lea    esi,[esi+0x0]
c001a624:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a62a:	c3                   	ret    
c001a62b:	90                   	nop

c001a62c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a62c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a632:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a63a:	75 0c                	jne    c001a648 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a63c:	b8 04 00 00 00       	mov    eax,0x4
c001a641:	e9 d6 00 00 00       	jmp    c001a71c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a646:	66 90                	xchg   ax,ax
c001a648:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a650:	75 0a                	jne    c001a65c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a652:	b8 04 00 00 00       	mov    eax,0x4
c001a657:	e9 c0 00 00 00       	jmp    c001a71c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a65c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a664:	75 0a                	jne    c001a670 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a666:	b8 04 00 00 00       	mov    eax,0x4
c001a66b:	e9 ac 00 00 00       	jmp    c001a71c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a670:	83 ec 08             	sub    esp,0x8
c001a673:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a67a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a681:	50                   	push   eax
c001a682:	e8 c9 5f fe ff       	call   c0000650 <strcpy>
c001a687:	83 c4 10             	add    esp,0x10
c001a68a:	83 ec 08             	sub    esp,0x8
c001a68d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a694:	50                   	push   eax
c001a695:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a69c:	e8 27 fd ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001a6a1:	83 c4 10             	add    esp,0x10
c001a6a4:	83 ec 08             	sub    esp,0x8
c001a6a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a6ab:	50                   	push   eax
c001a6ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a6b3:	50                   	push   eax
c001a6b4:	e8 d6 a2 fe ff       	call   c000498f <f_stat>
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a6c3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a6ca:	85 c0                	test   eax,eax
c001a6cc:	74 0a                	je     c001a6d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a6ce:	83 f8 04             	cmp    eax,0x4
c001a6d1:	74 39                	je     c001a70c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a6d3:	eb 3f                	jmp    c001a714 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a6d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6dc:	0f b6 c0             	movzx  eax,al
c001a6df:	83 e0 10             	and    eax,0x10
c001a6e2:	0f 95 c2             	setne  dl
c001a6e5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a6ec:	88 10                	mov    BYTE PTR [eax],dl
c001a6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f2:	ba 00 00 00 00       	mov    edx,0x0
c001a6f7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a6fe:	89 01                	mov    DWORD PTR [ecx],eax
c001a700:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a703:	b8 00 00 00 00       	mov    eax,0x0
c001a708:	eb 12                	jmp    c001a71c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a70a:	66 90                	xchg   ax,ax
c001a70c:	b8 02 00 00 00       	mov    eax,0x2
c001a711:	eb 09                	jmp    c001a71c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a713:	90                   	nop
c001a714:	b8 01 00 00 00       	mov    eax,0x1
c001a719:	8d 76 00             	lea    esi,[esi+0x0]
c001a71c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a722:	c3                   	ret    
c001a723:	90                   	nop

c001a724 <FAT::unlink(char const*)>:
c001a724:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a72a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a732:	75 08                	jne    c001a73c <FAT::unlink(char const*)+0x18>
c001a734:	b8 04 00 00 00       	mov    eax,0x4
c001a739:	eb 61                	jmp    c001a79c <FAT::unlink(char const*)+0x78>
c001a73b:	90                   	nop
c001a73c:	83 ec 08             	sub    esp,0x8
c001a73f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a746:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a74a:	50                   	push   eax
c001a74b:	e8 00 5f fe ff       	call   c0000650 <strcpy>
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	83 ec 08             	sub    esp,0x8
c001a756:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a75a:	50                   	push   eax
c001a75b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a762:	e8 61 fc ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001a767:	83 c4 10             	add    esp,0x10
c001a76a:	83 ec 0c             	sub    esp,0xc
c001a76d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a771:	50                   	push   eax
c001a772:	e8 8a a4 fe ff       	call   c0004c01 <f_unlink>
c001a777:	83 c4 10             	add    esp,0x10
c001a77a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a781:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a788:	85 c0                	test   eax,eax
c001a78a:	75 08                	jne    c001a794 <FAT::unlink(char const*)+0x70>
c001a78c:	b8 00 00 00 00       	mov    eax,0x0
c001a791:	eb 09                	jmp    c001a79c <FAT::unlink(char const*)+0x78>
c001a793:	90                   	nop
c001a794:	b8 01 00 00 00       	mov    eax,0x1
c001a799:	8d 76 00             	lea    esi,[esi+0x0]
c001a79c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a7a2:	c3                   	ret    
c001a7a3:	90                   	nop

c001a7a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a7a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a7aa:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a7b1:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a7b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7bc:	88 d0                	mov    al,dl
c001a7be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a7c2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a7ca:	75 0c                	jne    c001a7d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a7cc:	b8 04 00 00 00       	mov    eax,0x4
c001a7d1:	e9 7e 01 00 00       	jmp    c001a954 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a7d6:	66 90                	xchg   ax,ax
c001a7d8:	83 ec 08             	sub    esp,0x8
c001a7db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7e6:	50                   	push   eax
c001a7e7:	e8 64 5e fe ff       	call   c0000650 <strcpy>
c001a7ec:	83 c4 10             	add    esp,0x10
c001a7ef:	83 ec 08             	sub    esp,0x8
c001a7f2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7f6:	50                   	push   eax
c001a7f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7fe:	e8 c5 fb ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001a803:	83 c4 10             	add    esp,0x10
c001a806:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a80e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a816:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a81b:	83 e0 01             	and    eax,0x1
c001a81e:	74 14                	je     c001a834 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a820:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a827:	83 c8 01             	or     eax,0x1
c001a82a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a831:	8d 76 00             	lea    esi,[esi+0x0]
c001a834:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a839:	83 e0 02             	and    eax,0x2
c001a83c:	74 12                	je     c001a850 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a83e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a845:	83 c8 20             	or     eax,0x20
c001a848:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a84f:	90                   	nop
c001a850:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a855:	83 e0 04             	and    eax,0x4
c001a858:	74 12                	je     c001a86c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a85a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a861:	83 c8 04             	or     eax,0x4
c001a864:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a86b:	90                   	nop
c001a86c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a871:	83 e0 08             	and    eax,0x8
c001a874:	74 12                	je     c001a888 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a876:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a87d:	83 c8 02             	or     eax,0x2
c001a880:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a887:	90                   	nop
c001a888:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a88d:	83 e0 01             	and    eax,0x1
c001a890:	74 12                	je     c001a8a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a892:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a899:	83 c8 01             	or     eax,0x1
c001a89c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8a3:	90                   	nop
c001a8a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8a9:	83 e0 02             	and    eax,0x2
c001a8ac:	74 12                	je     c001a8c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a8ae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8b5:	83 c8 20             	or     eax,0x20
c001a8b8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8bf:	90                   	nop
c001a8c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8c5:	83 e0 04             	and    eax,0x4
c001a8c8:	74 12                	je     c001a8dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a8ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8d1:	83 c8 04             	or     eax,0x4
c001a8d4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8db:	90                   	nop
c001a8dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8e1:	83 e0 08             	and    eax,0x8
c001a8e4:	74 12                	je     c001a8f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a8e6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8ed:	83 c8 02             	or     eax,0x2
c001a8f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8f7:	90                   	nop
c001a8f8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a8ff:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a906:	09 d0                	or     eax,edx
c001a908:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a90f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a917:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a91f:	83 ec 04             	sub    esp,0x4
c001a922:	52                   	push   edx
c001a923:	50                   	push   eax
c001a924:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a928:	50                   	push   eax
c001a929:	e8 46 a7 fe ff       	call   c0005074 <f_chmod>
c001a92e:	83 c4 10             	add    esp,0x10
c001a931:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a938:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a93f:	85 c0                	test   eax,eax
c001a941:	75 09                	jne    c001a94c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a943:	b8 00 00 00 00       	mov    eax,0x0
c001a948:	eb 0a                	jmp    c001a954 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a94a:	66 90                	xchg   ax,ax
c001a94c:	b8 01 00 00 00       	mov    eax,0x1
c001a951:	8d 76 00             	lea    esi,[esi+0x0]
c001a954:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a95a:	c3                   	ret    
c001a95b:	90                   	nop

c001a95c <FAT::rename(char const*, char const*)>:
c001a95c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a962:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a96a:	74 0c                	je     c001a978 <FAT::rename(char const*, char const*)+0x1c>
c001a96c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a974:	75 0e                	jne    c001a984 <FAT::rename(char const*, char const*)+0x28>
c001a976:	66 90                	xchg   ax,ax
c001a978:	b8 04 00 00 00       	mov    eax,0x4
c001a97d:	e9 9e 00 00 00       	jmp    c001aa20 <FAT::rename(char const*, char const*)+0xc4>
c001a982:	66 90                	xchg   ax,ax
c001a984:	83 ec 08             	sub    esp,0x8
c001a987:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a98e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a995:	50                   	push   eax
c001a996:	e8 b5 5c fe ff       	call   c0000650 <strcpy>
c001a99b:	83 c4 10             	add    esp,0x10
c001a99e:	83 ec 08             	sub    esp,0x8
c001a9a1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a9a8:	50                   	push   eax
c001a9a9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9b0:	e8 13 fa ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	83 ec 08             	sub    esp,0x8
c001a9bb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a9c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a9c6:	50                   	push   eax
c001a9c7:	e8 84 5c fe ff       	call   c0000650 <strcpy>
c001a9cc:	83 c4 10             	add    esp,0x10
c001a9cf:	83 ec 08             	sub    esp,0x8
c001a9d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9d6:	50                   	push   eax
c001a9d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9de:	e8 e5 f9 ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001a9e3:	83 c4 10             	add    esp,0x10
c001a9e6:	83 ec 08             	sub    esp,0x8
c001a9e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9ed:	50                   	push   eax
c001a9ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a9f5:	50                   	push   eax
c001a9f6:	e8 c1 a4 fe ff       	call   c0004ebc <f_rename>
c001a9fb:	83 c4 10             	add    esp,0x10
c001a9fe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001aa05:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001aa0c:	85 c0                	test   eax,eax
c001aa0e:	75 08                	jne    c001aa18 <FAT::rename(char const*, char const*)+0xbc>
c001aa10:	b8 00 00 00 00       	mov    eax,0x0
c001aa15:	eb 09                	jmp    c001aa20 <FAT::rename(char const*, char const*)+0xc4>
c001aa17:	90                   	nop
c001aa18:	b8 01 00 00 00       	mov    eax,0x1
c001aa1d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa20:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aa26:	c3                   	ret    
c001aa27:	90                   	nop

c001aa28 <FAT::mkdir(char const*)>:
c001aa28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa36:	75 08                	jne    c001aa40 <FAT::mkdir(char const*)+0x18>
c001aa38:	b8 04 00 00 00       	mov    eax,0x4
c001aa3d:	eb 61                	jmp    c001aaa0 <FAT::mkdir(char const*)+0x78>
c001aa3f:	90                   	nop
c001aa40:	83 ec 08             	sub    esp,0x8
c001aa43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa4e:	50                   	push   eax
c001aa4f:	e8 fc 5b fe ff       	call   c0000650 <strcpy>
c001aa54:	83 c4 10             	add    esp,0x10
c001aa57:	83 ec 08             	sub    esp,0x8
c001aa5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa5e:	50                   	push   eax
c001aa5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa66:	e8 5d f9 ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001aa6b:	83 c4 10             	add    esp,0x10
c001aa6e:	83 ec 0c             	sub    esp,0xc
c001aa71:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa75:	50                   	push   eax
c001aa76:	e8 a6 a2 fe ff       	call   c0004d21 <f_mkdir>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa85:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aa8c:	85 c0                	test   eax,eax
c001aa8e:	75 08                	jne    c001aa98 <FAT::mkdir(char const*)+0x70>
c001aa90:	b8 00 00 00 00       	mov    eax,0x0
c001aa95:	eb 09                	jmp    c001aaa0 <FAT::mkdir(char const*)+0x78>
c001aa97:	90                   	nop
c001aa98:	b8 01 00 00 00       	mov    eax,0x1
c001aa9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aaa6:	c3                   	ret    
c001aaa7:	90                   	nop

c001aaa8 <FAT::exists(char const*)>:
c001aaa8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aaae:	83 ec 08             	sub    esp,0x8
c001aab1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aab8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aabc:	50                   	push   eax
c001aabd:	e8 8e 5b fe ff       	call   c0000650 <strcpy>
c001aac2:	83 c4 10             	add    esp,0x10
c001aac5:	83 ec 08             	sub    esp,0x8
c001aac8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aacc:	50                   	push   eax
c001aacd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aad4:	e8 ef f8 ff ff       	call   c001a3c8 <FAT::fixFilepath(char*)>
c001aad9:	83 c4 10             	add    esp,0x10
c001aadc:	83 ec 08             	sub    esp,0x8
c001aadf:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001aae6:	50                   	push   eax
c001aae7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaeb:	50                   	push   eax
c001aaec:	e8 9e 9e fe ff       	call   c000498f <f_stat>
c001aaf1:	83 c4 10             	add    esp,0x10
c001aaf4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aafb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab02:	85 c0                	test   eax,eax
c001ab04:	75 06                	jne    c001ab0c <FAT::exists(char const*)+0x64>
c001ab06:	b0 01                	mov    al,0x1
c001ab08:	eb 06                	jmp    c001ab10 <FAT::exists(char const*)+0x68>
c001ab0a:	66 90                	xchg   ax,ax
c001ab0c:	b0 00                	mov    al,0x0
c001ab0e:	66 90                	xchg   ax,ax
c001ab10:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ab16:	c3                   	ret    
c001ab17:	90                   	nop

c001ab18 <isoReadDiscSectorHelper>:
c001ab18:	83 ec 2c             	sub    esp,0x2c
c001ab1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ab23:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ab28:	83 e8 41             	sub    eax,0x41
c001ab2b:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001ab32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab36:	ba 00 00 00 00       	mov    edx,0x0
c001ab3b:	83 ec 0c             	sub    esp,0xc
c001ab3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab42:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ab46:	52                   	push   edx
c001ab47:	50                   	push   eax
c001ab48:	51                   	push   ecx
c001ab49:	e8 82 f5 fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab4e:	83 c4 20             	add    esp,0x20
c001ab51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab55:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ab5a:	74 0c                	je     c001ab68 <isoReadDiscSectorHelper+0x50>
c001ab5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab60:	c1 e0 0b             	shl    eax,0xb
c001ab63:	eb 0b                	jmp    c001ab70 <isoReadDiscSectorHelper+0x58>
c001ab65:	8d 76 00             	lea    esi,[esi+0x0]
c001ab68:	b8 00 00 00 00       	mov    eax,0x0
c001ab6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab70:	83 c4 2c             	add    esp,0x2c
c001ab73:	c3                   	ret    

c001ab74 <iso_kprintf>:
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	83 ec 08             	sub    esp,0x8
c001ab7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab7e:	68 4f 2e 02 c0       	push   0xc0022e4f
c001ab83:	e8 c6 c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	90                   	nop
c001ab8c:	83 c4 0c             	add    esp,0xc
c001ab8f:	c3                   	ret    

c001ab90 <iso_kprintfd>:
c001ab90:	83 ec 0c             	sub    esp,0xc
c001ab93:	83 ec 08             	sub    esp,0x8
c001ab96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab9a:	68 f1 14 02 c0       	push   0xc00214f1
c001ab9f:	e8 aa c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aba4:	83 c4 10             	add    esp,0x10
c001aba7:	90                   	nop
c001aba8:	83 c4 0c             	add    esp,0xc
c001abab:	c3                   	ret    

c001abac <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001abac:	b8 08 00 00 00       	mov    eax,0x8
c001abb1:	c3                   	ret    

c001abb2 <ISO9660::truncate(void*, unsigned long long)>:
c001abb2:	b8 01 00 00 00       	mov    eax,0x1
c001abb7:	c3                   	ret    

c001abb8 <ISO9660::getName()>:
c001abb8:	b8 dc 31 02 c0       	mov    eax,0xc00231dc
c001abbd:	c3                   	ret    

c001abbe <ISO9660::closeDir(void*)>:
c001abbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc2:	8b 00                	mov    eax,DWORD PTR [eax]
c001abc4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001abc7:	90                   	nop

c001abc8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001abc8:	b8 01 00 00 00       	mov    eax,0x1
c001abcd:	c3                   	ret    

c001abce <ISO9660::unlink(char const*)>:
c001abce:	b8 01 00 00 00       	mov    eax,0x1
c001abd3:	c3                   	ret    

c001abd4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001abd4:	b8 03 00 00 00       	mov    eax,0x3
c001abd9:	c3                   	ret    

c001abda <ISO9660::rename(char const*, char const*)>:
c001abda:	b8 01 00 00 00       	mov    eax,0x1
c001abdf:	c3                   	ret    

c001abe0 <ISO9660::mkdir(char const*)>:
c001abe0:	b8 01 00 00 00       	mov    eax,0x1
c001abe5:	c3                   	ret    

c001abe6 <ISO9660::~ISO9660()>:
c001abe6:	83 ec 0c             	sub    esp,0xc
c001abe9:	ba 1c 33 02 c0       	mov    edx,0xc002331c
c001abee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf2:	89 10                	mov    DWORD PTR [eax],edx
c001abf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf8:	83 ec 0c             	sub    esp,0xc
c001abfb:	50                   	push   eax
c001abfc:	e8 79 d1 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001ac01:	83 c4 10             	add    esp,0x10
c001ac04:	90                   	nop
c001ac05:	83 c4 0c             	add    esp,0xc
c001ac08:	c3                   	ret    
c001ac09:	90                   	nop

c001ac0a <ISO9660::~ISO9660()>:
c001ac0a:	83 ec 0c             	sub    esp,0xc
c001ac0d:	83 ec 0c             	sub    esp,0xc
c001ac10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac14:	e8 cd ff ff ff       	call   c001abe6 <ISO9660::~ISO9660()>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	83 ec 08             	sub    esp,0x8
c001ac1f:	6a 08                	push   0x8
c001ac21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac25:	e8 31 1a ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001ac2a:	83 c4 10             	add    esp,0x10
c001ac2d:	83 c4 0c             	add    esp,0xc
c001ac30:	c3                   	ret    
c001ac31:	90                   	nop

c001ac32 <ISO9660::exists(char const*)>:
c001ac32:	83 ec 18             	sub    esp,0x18
c001ac35:	68 f7 31 02 c0       	push   0xc00231f7
c001ac3a:	e8 d7 3f ff ff       	call   c000ec16 <KePanic(char const*)>
c001ac3f:	31 c0                	xor    eax,eax
c001ac41:	83 c4 1c             	add    esp,0x1c
c001ac44:	c3                   	ret    
c001ac45:	90                   	nop

c001ac46 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ac46:	56                   	push   esi
c001ac47:	53                   	push   ebx
c001ac48:	53                   	push   ebx
c001ac49:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac4d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ac51:	85 db                	test   ebx,ebx
c001ac53:	0f 84 ca 00 00 00    	je     c001ad23 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac59:	85 f6                	test   esi,esi
c001ac5b:	0f 84 c2 00 00 00    	je     c001ad23 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac61:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ac66:	b8 03 00 00 00       	mov    eax,0x3
c001ac6b:	0f 85 b7 00 00 00    	jne    c001ad28 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ac71:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ac73:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ac79:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ac80:	74 1b                	je     c001ac9d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ac82:	85 c0                	test   eax,eax
c001ac84:	74 10                	je     c001ac96 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ac86:	83 ec 0c             	sub    esp,0xc
c001ac89:	68 15 32 02 c0       	push   0xc0023215
c001ac8e:	e8 83 3f ff ff       	call   c000ec16 <KePanic(char const*)>
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	8a 03                	mov    al,BYTE PTR [ebx]
c001ac98:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ac9d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aca0:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001aca7:	85 c0                	test   eax,eax
c001aca9:	74 09                	je     c001acb4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001acab:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001acb2:	74 48                	je     c001acfc <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001acb4:	83 ec 0c             	sub    esp,0xc
c001acb7:	68 25 32 02 c0       	push   0xc0023225
c001acbc:	e8 8d c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001acc1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001acc4:	83 c4 10             	add    esp,0x10
c001acc7:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001acce:	85 c0                	test   eax,eax
c001acd0:	74 17                	je     c001ace9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001acd2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001acd9:	83 ec 0c             	sub    esp,0xc
c001acdc:	68 45 32 02 c0       	push   0xc0023245
c001ace1:	e8 68 c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ace6:	83 c4 10             	add    esp,0x10
c001ace9:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001acf0:	83 ec 0c             	sub    esp,0xc
c001acf3:	50                   	push   eax
c001acf4:	e8 4e bf fe ff       	call   c0006c47 <init_percd>
c001acf9:	83 c4 10             	add    esp,0x10
c001acfc:	51                   	push   ecx
c001acfd:	83 c3 03             	add    ebx,0x3
c001ad00:	51                   	push   ecx
c001ad01:	6a 00                	push   0x0
c001ad03:	53                   	push   ebx
c001ad04:	e8 01 ba fe ff       	call   c000670a <iso_open>
c001ad09:	83 c4 10             	add    esp,0x10
c001ad0c:	89 c2                	mov    edx,eax
c001ad0e:	b8 01 00 00 00       	mov    eax,0x1
c001ad13:	83 fa ff             	cmp    edx,0xffffffff
c001ad16:	74 10                	je     c001ad28 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad18:	83 c2 32             	add    edx,0x32
c001ad1b:	31 c0                	xor    eax,eax
c001ad1d:	01 d2                	add    edx,edx
c001ad1f:	89 16                	mov    DWORD PTR [esi],edx
c001ad21:	eb 05                	jmp    c001ad28 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad23:	b8 04 00 00 00       	mov    eax,0x4
c001ad28:	5a                   	pop    edx
c001ad29:	5b                   	pop    ebx
c001ad2a:	5e                   	pop    esi
c001ad2b:	c3                   	ret    

c001ad2c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ad2c:	53                   	push   ebx
c001ad2d:	83 ec 08             	sub    esp,0x8
c001ad30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad38:	85 c0                	test   eax,eax
c001ad3a:	74 2d                	je     c001ad69 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ad3c:	85 db                	test   ebx,ebx
c001ad3e:	74 29                	je     c001ad69 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ad40:	52                   	push   edx
c001ad41:	b9 02 00 00 00       	mov    ecx,0x2
c001ad46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad4a:	99                   	cdq    
c001ad4b:	f7 f9                	idiv   ecx
c001ad4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ad51:	83 e8 32             	sub    eax,0x32
c001ad54:	50                   	push   eax
c001ad55:	e8 58 ba fe ff       	call   c00067b2 <iso_read>
c001ad5a:	83 c4 10             	add    esp,0x10
c001ad5d:	89 03                	mov    DWORD PTR [ebx],eax
c001ad5f:	09 d0                	or     eax,edx
c001ad61:	0f 94 c0             	sete   al
c001ad64:	0f b6 c0             	movzx  eax,al
c001ad67:	eb 05                	jmp    c001ad6e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001ad69:	b8 04 00 00 00       	mov    eax,0x4
c001ad6e:	83 c4 08             	add    esp,0x8
c001ad71:	5b                   	pop    ebx
c001ad72:	c3                   	ret    
c001ad73:	90                   	nop

c001ad74 <ISO9660::seek(void*, unsigned long long)>:
c001ad74:	57                   	push   edi
c001ad75:	b8 04 00 00 00       	mov    eax,0x4
c001ad7a:	56                   	push   esi
c001ad7b:	51                   	push   ecx
c001ad7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad80:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ad84:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ad88:	85 d2                	test   edx,edx
c001ad8a:	74 26                	je     c001adb2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ad8c:	89 d0                	mov    eax,edx
c001ad8e:	b9 02 00 00 00       	mov    ecx,0x2
c001ad93:	6a 00                	push   0x0
c001ad95:	99                   	cdq    
c001ad96:	f7 f9                	idiv   ecx
c001ad98:	57                   	push   edi
c001ad99:	56                   	push   esi
c001ad9a:	83 e8 32             	sub    eax,0x32
c001ad9d:	50                   	push   eax
c001ad9e:	e8 25 bb fe ff       	call   c00068c8 <iso_seek>
c001ada3:	83 c4 10             	add    esp,0x10
c001ada6:	31 f0                	xor    eax,esi
c001ada8:	31 fa                	xor    edx,edi
c001adaa:	09 d0                	or     eax,edx
c001adac:	0f 95 c0             	setne  al
c001adaf:	0f b6 c0             	movzx  eax,al
c001adb2:	5a                   	pop    edx
c001adb3:	5e                   	pop    esi
c001adb4:	5f                   	pop    edi
c001adb5:	c3                   	ret    

c001adb6 <ISO9660::tell(void*, unsigned long long*)>:
c001adb6:	53                   	push   ebx
c001adb7:	83 ec 08             	sub    esp,0x8
c001adba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adbe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001adc2:	85 c0                	test   eax,eax
c001adc4:	74 24                	je     c001adea <ISO9660::tell(void*, unsigned long long*)+0x34>
c001adc6:	85 db                	test   ebx,ebx
c001adc8:	74 20                	je     c001adea <ISO9660::tell(void*, unsigned long long*)+0x34>
c001adca:	b9 02 00 00 00       	mov    ecx,0x2
c001adcf:	99                   	cdq    
c001add0:	f7 f9                	idiv   ecx
c001add2:	83 ec 0c             	sub    esp,0xc
c001add5:	83 e8 32             	sub    eax,0x32
c001add8:	50                   	push   eax
c001add9:	e8 6e bb fe ff       	call   c000694c <iso_tell>
c001adde:	83 c4 10             	add    esp,0x10
c001ade1:	89 03                	mov    DWORD PTR [ebx],eax
c001ade3:	31 c0                	xor    eax,eax
c001ade5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ade8:	eb 05                	jmp    c001adef <ISO9660::tell(void*, unsigned long long*)+0x39>
c001adea:	b8 04 00 00 00       	mov    eax,0x4
c001adef:	83 c4 08             	add    esp,0x8
c001adf2:	5b                   	pop    ebx
c001adf3:	c3                   	ret    

c001adf4 <ISO9660::stat(void*, unsigned long long*)>:
c001adf4:	56                   	push   esi
c001adf5:	53                   	push   ebx
c001adf6:	83 ec 10             	sub    esp,0x10
c001adf9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adfd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ae01:	68 69 32 02 c0       	push   0xc0023269
c001ae06:	e8 43 c1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae0b:	83 c4 10             	add    esp,0x10
c001ae0e:	85 db                	test   ebx,ebx
c001ae10:	74 2a                	je     c001ae3c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ae12:	85 f6                	test   esi,esi
c001ae14:	74 26                	je     c001ae3c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ae16:	89 d8                	mov    eax,ebx
c001ae18:	b9 02 00 00 00       	mov    ecx,0x2
c001ae1d:	99                   	cdq    
c001ae1e:	83 ec 0c             	sub    esp,0xc
c001ae21:	f7 f9                	idiv   ecx
c001ae23:	83 e8 32             	sub    eax,0x32
c001ae26:	50                   	push   eax
c001ae27:	e8 51 bb fe ff       	call   c000697d <iso_total>
c001ae2c:	83 c4 10             	add    esp,0x10
c001ae2f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001ae36:	89 06                	mov    DWORD PTR [esi],eax
c001ae38:	31 c0                	xor    eax,eax
c001ae3a:	eb 05                	jmp    c001ae41 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ae3c:	b8 04 00 00 00       	mov    eax,0x4
c001ae41:	5a                   	pop    edx
c001ae42:	5b                   	pop    ebx
c001ae43:	5e                   	pop    esi
c001ae44:	c3                   	ret    
c001ae45:	90                   	nop

c001ae46 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ae46:	55                   	push   ebp
c001ae47:	57                   	push   edi
c001ae48:	56                   	push   esi
c001ae49:	53                   	push   ebx
c001ae4a:	83 ec 18             	sub    esp,0x18
c001ae4d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae51:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ae55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae59:	68 71 32 02 c0       	push   0xc0023271
c001ae5e:	e8 eb c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae63:	83 c4 10             	add    esp,0x10
c001ae66:	85 ff                	test   edi,edi
c001ae68:	0f 94 c0             	sete   al
c001ae6b:	85 f6                	test   esi,esi
c001ae6d:	0f 94 c2             	sete   dl
c001ae70:	09 d0                	or     eax,edx
c001ae72:	a8 01                	test   al,0x1
c001ae74:	0f 85 dd 00 00 00    	jne    c001af57 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ae7a:	85 db                	test   ebx,ebx
c001ae7c:	0f 84 d5 00 00 00    	je     c001af57 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ae82:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae85:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ae8b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001ae92:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ae99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ae9b:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001aea1:	74 1b                	je     c001aebe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001aea3:	85 c0                	test   eax,eax
c001aea5:	74 10                	je     c001aeb7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001aea7:	83 ec 0c             	sub    esp,0xc
c001aeaa:	68 15 32 02 c0       	push   0xc0023215
c001aeaf:	e8 62 3d ff ff       	call   c000ec16 <KePanic(char const*)>
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	8a 03                	mov    al,BYTE PTR [ebx]
c001aeb9:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001aebe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aec1:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001aec8:	85 c0                	test   eax,eax
c001aeca:	74 09                	je     c001aed5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001aecc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001aed3:	74 51                	je     c001af26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001aed5:	83 ec 0c             	sub    esp,0xc
c001aed8:	68 79 32 02 c0       	push   0xc0023279
c001aedd:	e8 6c c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aee2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aee5:	83 c4 10             	add    esp,0x10
c001aee8:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001aef0:	74 21                	je     c001af13 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001aef2:	83 ec 0c             	sub    esp,0xc
c001aef5:	68 99 32 02 c0       	push   0xc0023299
c001aefa:	e8 4f c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aeff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af02:	83 c4 10             	add    esp,0x10
c001af05:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001af0c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001af13:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af1a:	83 ec 0c             	sub    esp,0xc
c001af1d:	50                   	push   eax
c001af1e:	e8 24 bd fe ff       	call   c0006c47 <init_percd>
c001af23:	83 c4 10             	add    esp,0x10
c001af26:	52                   	push   edx
c001af27:	83 c3 03             	add    ebx,0x3
c001af2a:	52                   	push   edx
c001af2b:	6a 00                	push   0x0
c001af2d:	53                   	push   ebx
c001af2e:	e8 d7 b7 fe ff       	call   c000670a <iso_open>
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	83 f8 ff             	cmp    eax,0xffffffff
c001af39:	89 c5                	mov    ebp,eax
c001af3b:	75 21                	jne    c001af5e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001af3d:	50                   	push   eax
c001af3e:	50                   	push   eax
c001af3f:	6a 01                	push   0x1
c001af41:	53                   	push   ebx
c001af42:	e8 c3 b7 fe ff       	call   c000670a <iso_open>
c001af47:	83 c4 10             	add    esp,0x10
c001af4a:	ba 02 00 00 00       	mov    edx,0x2
c001af4f:	40                   	inc    eax
c001af50:	74 2b                	je     c001af7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af52:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001af55:	eb 24                	jmp    c001af7b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001af57:	ba 04 00 00 00       	mov    edx,0x4
c001af5c:	eb 1f                	jmp    c001af7d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af5e:	83 ec 0c             	sub    esp,0xc
c001af61:	50                   	push   eax
c001af62:	e8 16 ba fe ff       	call   c000697d <iso_total>
c001af67:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af6e:	89 07                	mov    DWORD PTR [edi],eax
c001af70:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af73:	e8 1c b8 fe ff       	call   c0006794 <iso_close>
c001af78:	83 c4 10             	add    esp,0x10
c001af7b:	31 d2                	xor    edx,edx
c001af7d:	83 c4 0c             	add    esp,0xc
c001af80:	89 d0                	mov    eax,edx
c001af82:	5b                   	pop    ebx
c001af83:	5e                   	pop    esi
c001af84:	5f                   	pop    edi
c001af85:	5d                   	pop    ebp
c001af86:	c3                   	ret    
c001af87:	90                   	nop

c001af88 <ISO9660::close(void*)>:
c001af88:	83 ec 0c             	sub    esp,0xc
c001af8b:	b8 04 00 00 00       	mov    eax,0x4
c001af90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af94:	85 d2                	test   edx,edx
c001af96:	74 1b                	je     c001afb3 <ISO9660::close(void*)+0x2b>
c001af98:	89 d0                	mov    eax,edx
c001af9a:	b9 02 00 00 00       	mov    ecx,0x2
c001af9f:	99                   	cdq    
c001afa0:	83 ec 0c             	sub    esp,0xc
c001afa3:	f7 f9                	idiv   ecx
c001afa5:	83 e8 32             	sub    eax,0x32
c001afa8:	50                   	push   eax
c001afa9:	e8 e6 b7 fe ff       	call   c0006794 <iso_close>
c001afae:	83 c4 10             	add    esp,0x10
c001afb1:	31 c0                	xor    eax,eax
c001afb3:	83 c4 0c             	add    esp,0xc
c001afb6:	c3                   	ret    
c001afb7:	90                   	nop

c001afb8 <ISO9660::openDir(char const*, void**)>:
c001afb8:	56                   	push   esi
c001afb9:	53                   	push   ebx
c001afba:	50                   	push   eax
c001afbb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001afbf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001afc3:	85 db                	test   ebx,ebx
c001afc5:	0f 84 bd 00 00 00    	je     c001b088 <ISO9660::openDir(char const*, void**)+0xd0>
c001afcb:	85 f6                	test   esi,esi
c001afcd:	0f 84 b5 00 00 00    	je     c001b088 <ISO9660::openDir(char const*, void**)+0xd0>
c001afd3:	8a 13                	mov    dl,BYTE PTR [ebx]
c001afd5:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001afdb:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001afe2:	74 1b                	je     c001afff <ISO9660::openDir(char const*, void**)+0x47>
c001afe4:	85 c0                	test   eax,eax
c001afe6:	74 10                	je     c001aff8 <ISO9660::openDir(char const*, void**)+0x40>
c001afe8:	83 ec 0c             	sub    esp,0xc
c001afeb:	68 15 32 02 c0       	push   0xc0023215
c001aff0:	e8 21 3c ff ff       	call   c000ec16 <KePanic(char const*)>
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	8a 03                	mov    al,BYTE PTR [ebx]
c001affa:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001afff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b002:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001b009:	85 c0                	test   eax,eax
c001b00b:	74 10                	je     c001b01d <ISO9660::openDir(char const*, void**)+0x65>
c001b00d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b014:	74 1a                	je     c001b030 <ISO9660::openDir(char const*, void**)+0x78>
c001b016:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b01d:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	50                   	push   eax
c001b028:	e8 1a bc fe ff       	call   c0006c47 <init_percd>
c001b02d:	83 c4 10             	add    esp,0x10
c001b030:	50                   	push   eax
c001b031:	83 c3 03             	add    ebx,0x3
c001b034:	50                   	push   eax
c001b035:	6a 01                	push   0x1
c001b037:	53                   	push   ebx
c001b038:	e8 cd b6 fe ff       	call   c000670a <iso_open>
c001b03d:	83 c4 10             	add    esp,0x10
c001b040:	83 f8 ff             	cmp    eax,0xffffffff
c001b043:	89 c3                	mov    ebx,eax
c001b045:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b04a:	75 1c                	jne    c001b068 <ISO9660::openDir(char const*, void**)+0xb0>
c001b04c:	53                   	push   ebx
c001b04d:	53                   	push   ebx
c001b04e:	68 bd 32 02 c0       	push   0xc00232bd
c001b053:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b059:	e8 18 63 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001b05e:	83 c4 10             	add    esp,0x10
c001b061:	b8 01 00 00 00       	mov    eax,0x1
c001b066:	eb 25                	jmp    c001b08d <ISO9660::openDir(char const*, void**)+0xd5>
c001b068:	51                   	push   ecx
c001b069:	01 db                	add    ebx,ebx
c001b06b:	51                   	push   ecx
c001b06c:	83 c3 65             	add    ebx,0x65
c001b06f:	68 d0 32 02 c0       	push   0xc00232d0
c001b074:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b07a:	e8 f7 62 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001b07f:	83 c4 10             	add    esp,0x10
c001b082:	31 c0                	xor    eax,eax
c001b084:	89 1e                	mov    DWORD PTR [esi],ebx
c001b086:	eb 05                	jmp    c001b08d <ISO9660::openDir(char const*, void**)+0xd5>
c001b088:	b8 04 00 00 00       	mov    eax,0x4
c001b08d:	5a                   	pop    edx
c001b08e:	5b                   	pop    ebx
c001b08f:	5e                   	pop    esi
c001b090:	c3                   	ret    
c001b091:	90                   	nop

c001b092 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b092:	55                   	push   ebp
c001b093:	57                   	push   edi
c001b094:	56                   	push   esi
c001b095:	53                   	push   ebx
c001b096:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b09c:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001b0a3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b0aa:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001b0b1:	85 db                	test   ebx,ebx
c001b0b3:	0f 84 e4 00 00 00    	je     c001b19d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b0b9:	85 ed                	test   ebp,ebp
c001b0bb:	0f 84 dc 00 00 00    	je     c001b19d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b0c1:	83 ec 0c             	sub    esp,0xc
c001b0c4:	68 e3 32 02 c0       	push   0xc00232e3
c001b0c9:	e8 80 be fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b0ce:	89 d8                	mov    eax,ebx
c001b0d0:	b9 02 00 00 00       	mov    ecx,0x2
c001b0d5:	99                   	cdq    
c001b0d6:	f7 f9                	idiv   ecx
c001b0d8:	83 e8 32             	sub    eax,0x32
c001b0db:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0de:	e8 ec b8 fe ff       	call   c00069cf <iso_readdir>
c001b0e3:	83 c4 10             	add    esp,0x10
c001b0e6:	85 c0                	test   eax,eax
c001b0e8:	89 c3                	mov    ebx,eax
c001b0ea:	75 38                	jne    c001b124 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001b0ec:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b0f1:	53                   	push   ebx
c001b0f2:	53                   	push   ebx
c001b0f3:	68 ee 32 02 c0       	push   0xc00232ee
c001b0f8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0fe:	e8 73 62 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001b103:	83 c4 0c             	add    esp,0xc
c001b106:	68 10 01 00 00       	push   0x110
c001b10b:	6a 00                	push   0x0
c001b10d:	57                   	push   edi
c001b10e:	e8 dd 53 fe ff       	call   c00004f0 <memset>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	b8 01 00 00 00       	mov    eax,0x1
c001b11b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001b122:	eb 7e                	jmp    c001b1a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b124:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b12a:	8d 70 08             	lea    esi,[eax+0x8]
c001b12d:	83 ec 0c             	sub    esp,0xc
c001b130:	56                   	push   esi
c001b131:	e8 4a 54 fe ff       	call   c0000580 <strlen>
c001b136:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b13e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b142:	83 c4 10             	add    esp,0x10
c001b145:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001b149:	75 0a                	jne    c001b155 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001b14b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001b14e:	b8 02 00 00 00       	mov    eax,0x2
c001b153:	74 05                	je     c001b15a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001b155:	b8 01 00 00 00       	mov    eax,0x1
c001b15a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b15e:	50                   	push   eax
c001b15f:	50                   	push   eax
c001b160:	56                   	push   esi
c001b161:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b165:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b169:	50                   	push   eax
c001b16a:	e8 e1 54 fe ff       	call   c0000650 <strcpy>
c001b16f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b176:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b178:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001b17f:	5a                   	pop    edx
c001b180:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b185:	59                   	pop    ecx
c001b186:	68 01 33 02 c0       	push   0xc0023301
c001b18b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b191:	e8 e0 61 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001b196:	83 c4 10             	add    esp,0x10
c001b199:	31 c0                	xor    eax,eax
c001b19b:	eb 05                	jmp    c001b1a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b19d:	b8 04 00 00 00       	mov    eax,0x4
c001b1a2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b1a8:	5b                   	pop    ebx
c001b1a9:	5e                   	pop    esi
c001b1aa:	5f                   	pop    edi
c001b1ab:	5d                   	pop    ebp
c001b1ac:	c3                   	ret    

c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1ad:	57                   	push   edi
c001b1ae:	56                   	push   esi
c001b1af:	53                   	push   ebx
c001b1b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1b4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1b8:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b1be:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b1c2:	0f be cb             	movsx  ecx,bl
c001b1c5:	75 0b                	jne    c001b1d2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b1c7:	0f be 05 e4 44 02 c0 	movsx  eax,BYTE PTR ds:0xc00244e4
c001b1ce:	39 c8                	cmp    eax,ecx
c001b1d0:	74 47                	je     c001b219 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b1d2:	83 ec 0c             	sub    esp,0xc
c001b1d5:	31 d2                	xor    edx,edx
c001b1d7:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b1dc:	6a 01                	push   0x1
c001b1de:	52                   	push   edx
c001b1df:	56                   	push   esi
c001b1e0:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b1e7:	e8 e4 ee fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001b1ec:	83 c4 20             	add    esp,0x20
c001b1ef:	85 c0                	test   eax,eax
c001b1f1:	75 0e                	jne    c001b201 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b1f3:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b1f9:	88 1d e4 44 02 c0    	mov    BYTE PTR ds:0xc00244e4,bl
c001b1ff:	eb 18                	jmp    c001b219 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b201:	50                   	push   eax
c001b202:	68 00 08 00 00       	push   0x800
c001b207:	6a 00                	push   0x0
c001b209:	57                   	push   edi
c001b20a:	e8 e1 52 fe ff       	call   c00004f0 <memset>
c001b20f:	83 c4 10             	add    esp,0x10
c001b212:	b8 01 00 00 00       	mov    eax,0x1
c001b217:	eb 0e                	jmp    c001b227 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b219:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b21e:	b9 00 08 00 00       	mov    ecx,0x800
c001b223:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b225:	31 c0                	xor    eax,eax
c001b227:	5b                   	pop    ebx
c001b228:	5e                   	pop    esi
c001b229:	5f                   	pop    edi
c001b22a:	c3                   	ret    
c001b22b:	90                   	nop

c001b22c <ISO9660::tryMount(LogicalDisk*, int)>:
c001b22c:	53                   	push   ebx
c001b22d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b233:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b23d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b244:	8d 58 41             	lea    ebx,[eax+0x41]
c001b247:	0f be db             	movsx  ebx,bl
c001b24a:	53                   	push   ebx
c001b24b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b24f:	50                   	push   eax
c001b250:	6a 10                	push   0x10
c001b252:	e8 56 ff ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b257:	83 c4 10             	add    esp,0x10
c001b25a:	31 d2                	xor    edx,edx
c001b25c:	85 c0                	test   eax,eax
c001b25e:	75 33                	jne    c001b293 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b260:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b265:	75 2c                	jne    c001b293 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b267:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b26c:	75 25                	jne    c001b293 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b26e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b273:	75 1e                	jne    c001b293 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b275:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b27a:	75 17                	jne    c001b293 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b27c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b281:	75 10                	jne    c001b293 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b283:	83 ec 0c             	sub    esp,0xc
c001b286:	53                   	push   ebx
c001b287:	e8 bb b9 fe ff       	call   c0006c47 <init_percd>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	40                   	inc    eax
c001b290:	0f 95 c2             	setne  dl
c001b293:	81 c4 08 08 00 00    	add    esp,0x808
c001b299:	88 d0                	mov    al,dl
c001b29b:	5b                   	pop    ebx
c001b29c:	c3                   	ret    
c001b29d:	90                   	nop

c001b29e <ISO9660::ISO9660()>:
c001b29e:	83 ec 0c             	sub    esp,0xc
c001b2a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a5:	83 ec 0c             	sub    esp,0xc
c001b2a8:	50                   	push   eax
c001b2a9:	e8 a8 ca fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b2ae:	83 c4 10             	add    esp,0x10
c001b2b1:	ba 1c 33 02 c0       	mov    edx,0xc002331c
c001b2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ba:	89 10                	mov    DWORD PTR [eax],edx
c001b2bc:	e8 98 ba fe ff       	call   c0006d59 <fs_iso9660_init>
c001b2c1:	90                   	nop
c001b2c2:	83 c4 0c             	add    esp,0xc
c001b2c5:	c3                   	ret    

c001b2c6 <SoundCard::beginPlayback()>:
c001b2c6:	c7 44 24 04 80 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023380
c001b2ce:	e9 43 39 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001b2d3:	90                   	nop

c001b2d4 <SoundCard::stopPlayback()>:
c001b2d4:	c7 44 24 04 80 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023380
c001b2dc:	e9 35 39 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001b2e1:	90                   	nop

c001b2e2 <SoundCard::SoundCard(char const*)>:
c001b2e2:	83 ec 1c             	sub    esp,0x1c
c001b2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2e9:	83 ec 08             	sub    esp,0x8
c001b2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2f0:	50                   	push   eax
c001b2f1:	e8 b2 de fe ff       	call   c00091a8 <Device::Device(char const*)>
c001b2f6:	83 c4 10             	add    esp,0x10
c001b2f9:	ba cc 33 02 c0       	mov    edx,0xc00233cc
c001b2fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b302:	89 10                	mov    DWORD PTR [eax],edx
c001b304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b308:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b30f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b313:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b31d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b321:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b32b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b32f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b33d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b347:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b34f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b354:	7f 1a                	jg     c001b370 <SoundCard::SoundCard(char const*)+0x8e>
c001b356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b35a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b35e:	83 c2 54             	add    edx,0x54
c001b361:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b369:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b36e:	eb df                	jmp    c001b34f <SoundCard::SoundCard(char const*)+0x6d>
c001b370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b374:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b37b:	90                   	nop
c001b37c:	83 c4 1c             	add    esp,0x1c
c001b37f:	c3                   	ret    

c001b380 <SoundCard::~SoundCard()>:
c001b380:	83 ec 0c             	sub    esp,0xc
c001b383:	ba cc 33 02 c0       	mov    edx,0xc00233cc
c001b388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b38c:	89 10                	mov    DWORD PTR [eax],edx
c001b38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b392:	83 ec 0c             	sub    esp,0xc
c001b395:	50                   	push   eax
c001b396:	e8 ad db fe ff       	call   c0008f48 <Device::~Device()>
c001b39b:	83 c4 10             	add    esp,0x10
c001b39e:	90                   	nop
c001b39f:	83 c4 0c             	add    esp,0xc
c001b3a2:	c3                   	ret    
c001b3a3:	90                   	nop

c001b3a4 <SoundCard::~SoundCard()>:
c001b3a4:	83 ec 0c             	sub    esp,0xc
c001b3a7:	83 ec 0c             	sub    esp,0xc
c001b3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3ae:	e8 cd ff ff ff       	call   c001b380 <SoundCard::~SoundCard()>
c001b3b3:	83 c4 10             	add    esp,0x10
c001b3b6:	83 ec 08             	sub    esp,0x8
c001b3b9:	68 e8 01 00 00       	push   0x1e8
c001b3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3c2:	e8 94 12 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001b3c7:	83 c4 10             	add    esp,0x10
c001b3ca:	83 c4 0c             	add    esp,0xc
c001b3cd:	c3                   	ret    

c001b3ce <SoundCard::configureRates(int, int, int)>:
c001b3ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b3d2:	31 c0                	xor    eax,eax
c001b3d4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b3db:	75 20                	jne    c001b3fd <SoundCard::configureRates(int, int, int)+0x2f>
c001b3dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3e1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b3e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3eb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f5:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b3fb:	b0 01                	mov    al,0x1
c001b3fd:	c3                   	ret    

c001b3fe <SoundCard::getSamples16(int, short*)>:
c001b3fe:	55                   	push   ebp
c001b3ff:	57                   	push   edi
c001b400:	31 ff                	xor    edi,edi
c001b402:	56                   	push   esi
c001b403:	53                   	push   ebx
c001b404:	31 db                	xor    ebx,ebx
c001b406:	83 ec 10             	sub    esp,0x10
c001b409:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b40d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b411:	8d 04 36             	lea    eax,[esi+esi*1]
c001b414:	50                   	push   eax
c001b415:	6a 00                	push   0x0
c001b417:	55                   	push   ebp
c001b418:	e8 d3 50 fe ff       	call   c00004f0 <memset>
c001b41d:	83 c4 10             	add    esp,0x10
c001b420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b424:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001b42b:	85 c0                	test   eax,eax
c001b42d:	74 1a                	je     c001b449 <SoundCard::getSamples16(int, short*)+0x4b>
c001b42f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b433:	75 14                	jne    c001b449 <SoundCard::getSamples16(int, short*)+0x4b>
c001b435:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b439:	55                   	push   ebp
c001b43a:	56                   	push   esi
c001b43b:	50                   	push   eax
c001b43c:	e8 f3 02 00 00       	call   c001b734 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	39 c3                	cmp    ebx,eax
c001b446:	0f 4c d8             	cmovl  ebx,eax
c001b449:	47                   	inc    edi
c001b44a:	83 ff 20             	cmp    edi,0x20
c001b44d:	75 d1                	jne    c001b420 <SoundCard::getSamples16(int, short*)+0x22>
c001b44f:	83 c4 0c             	add    esp,0xc
c001b452:	89 d8                	mov    eax,ebx
c001b454:	5b                   	pop    ebx
c001b455:	5e                   	pop    esi
c001b456:	5f                   	pop    edi
c001b457:	5d                   	pop    ebp
c001b458:	c3                   	ret    
c001b459:	90                   	nop

c001b45a <SoundCard::getSamples32(int, int*)>:
c001b45a:	55                   	push   ebp
c001b45b:	57                   	push   edi
c001b45c:	31 ff                	xor    edi,edi
c001b45e:	56                   	push   esi
c001b45f:	31 f6                	xor    esi,esi
c001b461:	53                   	push   ebx
c001b462:	83 ec 10             	sub    esp,0x10
c001b465:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b469:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b46d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b471:	c1 e0 02             	shl    eax,0x2
c001b474:	50                   	push   eax
c001b475:	6a 00                	push   0x0
c001b477:	55                   	push   ebp
c001b478:	e8 73 50 fe ff       	call   c00004f0 <memset>
c001b47d:	83 c4 10             	add    esp,0x10
c001b480:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b487:	85 c0                	test   eax,eax
c001b489:	74 1a                	je     c001b4a5 <SoundCard::getSamples32(int, int*)+0x4b>
c001b48b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b48f:	75 14                	jne    c001b4a5 <SoundCard::getSamples32(int, int*)+0x4b>
c001b491:	53                   	push   ebx
c001b492:	55                   	push   ebp
c001b493:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b497:	50                   	push   eax
c001b498:	e8 67 03 00 00       	call   c001b804 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b49d:	83 c4 10             	add    esp,0x10
c001b4a0:	39 c6                	cmp    esi,eax
c001b4a2:	0f 4c f0             	cmovl  esi,eax
c001b4a5:	47                   	inc    edi
c001b4a6:	83 ff 20             	cmp    edi,0x20
c001b4a9:	75 d5                	jne    c001b480 <SoundCard::getSamples32(int, int*)+0x26>
c001b4ab:	85 f6                	test   esi,esi
c001b4ad:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b4b4:	75 0f                	jne    c001b4c5 <SoundCard::getSamples32(int, int*)+0x6b>
c001b4b6:	85 c0                	test   eax,eax
c001b4b8:	74 1b                	je     c001b4d5 <SoundCard::getSamples32(int, int*)+0x7b>
c001b4ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4bc:	83 ec 0c             	sub    esp,0xc
c001b4bf:	53                   	push   ebx
c001b4c0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b4c3:	eb 0d                	jmp    c001b4d2 <SoundCard::getSamples32(int, int*)+0x78>
c001b4c5:	85 c0                	test   eax,eax
c001b4c7:	75 0c                	jne    c001b4d5 <SoundCard::getSamples32(int, int*)+0x7b>
c001b4c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4cb:	83 ec 0c             	sub    esp,0xc
c001b4ce:	53                   	push   ebx
c001b4cf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b4d2:	83 c4 10             	add    esp,0x10
c001b4d5:	83 c4 0c             	add    esp,0xc
c001b4d8:	89 f0                	mov    eax,esi
c001b4da:	5b                   	pop    ebx
c001b4db:	5e                   	pop    esi
c001b4dc:	5f                   	pop    edi
c001b4dd:	5d                   	pop    ebp
c001b4de:	c3                   	ret    
c001b4df:	90                   	nop

c001b4e0 <SoundCard::addChannel(SoundPort*)>:
c001b4e0:	83 ec 0c             	sub    esp,0xc
c001b4e3:	31 c0                	xor    eax,eax
c001b4e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4e9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b4f1:	74 1b                	je     c001b50e <SoundCard::addChannel(SoundPort*)+0x2e>
c001b4f3:	40                   	inc    eax
c001b4f4:	83 f8 20             	cmp    eax,0x20
c001b4f7:	75 f0                	jne    c001b4e9 <SoundCard::addChannel(SoundPort*)+0x9>
c001b4f9:	83 ec 0c             	sub    esp,0xc
c001b4fc:	68 a5 33 02 c0       	push   0xc00233a5
c001b501:	e8 10 37 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	83 c8 ff             	or     eax,0xffffffff
c001b50c:	eb 0b                	jmp    c001b519 <SoundCard::addChannel(SoundPort*)+0x39>
c001b50e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b512:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b519:	83 c4 0c             	add    esp,0xc
c001b51c:	c3                   	ret    
c001b51d:	90                   	nop

c001b51e <SoundCard::removeChannel(int)>:
c001b51e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b522:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b526:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b531:	c3                   	ret    
c001b532:	66 90                	xchg   ax,ax

c001b534 <SoundPort::SoundPort(int, int, int, int)>:
c001b534:	83 ec 0c             	sub    esp,0xc
c001b537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b53b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b546:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b54e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b552:	89 10                	mov    DWORD PTR [eax],edx
c001b554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b558:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b55c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b563:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b567:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b56a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b56f:	75 13                	jne    c001b584 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b575:	8b 00                	mov    eax,DWORD PTR [eax]
c001b577:	05 a0 0f 00 00       	add    eax,0xfa0
c001b57c:	d1 e0                	shl    eax,1
c001b57e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b582:	66 90                	xchg   ax,ax
c001b584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b588:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b58c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b593:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b5a1:	c1 e0 02             	shl    eax,0x2
c001b5a4:	83 ec 0c             	sub    esp,0xc
c001b5a7:	50                   	push   eax
c001b5a8:	e8 23 33 ff ff       	call   c000e8d0 <malloc>
c001b5ad:	83 c4 10             	add    esp,0x10
c001b5b0:	89 c2                	mov    edx,eax
c001b5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b5b9:	90                   	nop
c001b5ba:	83 c4 0c             	add    esp,0xc
c001b5bd:	c3                   	ret    
c001b5be:	66 90                	xchg   ax,ax

c001b5c0 <SoundPort::~SoundPort()>:
c001b5c0:	83 ec 0c             	sub    esp,0xc
c001b5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b5ca:	85 c0                	test   eax,eax
c001b5cc:	74 1e                	je     c001b5ec <SoundPort::~SoundPort()+0x2c>
c001b5ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b5d5:	83 ec 0c             	sub    esp,0xc
c001b5d8:	50                   	push   eax
c001b5d9:	e8 02 33 ff ff       	call   c000e8e0 <free>
c001b5de:	83 c4 10             	add    esp,0x10
c001b5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b5ec:	90                   	nop
c001b5ed:	83 c4 0c             	add    esp,0xc
c001b5f0:	c3                   	ret    
c001b5f1:	90                   	nop
c001b5f2:	66 90                	xchg   ax,ax

c001b5f4 <SoundPort::unpause()>:
c001b5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5f8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b5fc:	c3                   	ret    
c001b5fd:	90                   	nop
c001b5fe:	66 90                	xchg   ax,ax

c001b600 <SoundPort::pause()>:
c001b600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b604:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b608:	c3                   	ret    
c001b609:	90                   	nop
c001b60a:	66 90                	xchg   ax,ax

c001b60c <SoundPort::getBufferUsed()>:
c001b60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b610:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b613:	c3                   	ret    

c001b614 <SoundPort::getBufferSize()>:
c001b614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b618:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b61b:	c3                   	ret    

c001b61c <SoundPort::buffer16(short*, int)>:
c001b61c:	55                   	push   ebp
c001b61d:	57                   	push   edi
c001b61e:	56                   	push   esi
c001b61f:	53                   	push   ebx
c001b620:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b624:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b628:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b62b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b62e:	74 68                	je     c001b698 <SoundPort::buffer16(short*, int)+0x7c>
c001b630:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b634:	85 c9                	test   ecx,ecx
c001b636:	7e 60                	jle    c001b698 <SoundPort::buffer16(short*, int)+0x7c>
c001b638:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b63c:	8d 70 01             	lea    esi,[eax+0x1]
c001b63f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b642:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b645:	c1 e1 0f             	shl    ecx,0xf
c001b648:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b64b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b64e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b651:	74 4d                	je     c001b6a0 <SoundPort::buffer16(short*, int)+0x84>
c001b653:	31 f6                	xor    esi,esi
c001b655:	eb 21                	jmp    c001b678 <SoundPort::buffer16(short*, int)+0x5c>
c001b657:	90                   	nop
c001b658:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b65d:	8d 79 01             	lea    edi,[ecx+0x1]
c001b660:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b663:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b666:	c1 e3 0f             	shl    ebx,0xf
c001b669:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b66c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b66f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b672:	74 1c                	je     c001b690 <SoundPort::buffer16(short*, int)+0x74>
c001b674:	89 c6                	mov    esi,eax
c001b676:	66 90                	xchg   ax,ax
c001b678:	8d 46 01             	lea    eax,[esi+0x1]
c001b67b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b67f:	75 d7                	jne    c001b658 <SoundPort::buffer16(short*, int)+0x3c>
c001b681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b685:	8d 76 00             	lea    esi,[esi+0x0]
c001b688:	5b                   	pop    ebx
c001b689:	5e                   	pop    esi
c001b68a:	5f                   	pop    edi
c001b68b:	5d                   	pop    ebp
c001b68c:	c3                   	ret    
c001b68d:	8d 76 00             	lea    esi,[esi+0x0]
c001b690:	5b                   	pop    ebx
c001b691:	8d 46 02             	lea    eax,[esi+0x2]
c001b694:	5e                   	pop    esi
c001b695:	5f                   	pop    edi
c001b696:	5d                   	pop    ebp
c001b697:	c3                   	ret    
c001b698:	5b                   	pop    ebx
c001b699:	31 c0                	xor    eax,eax
c001b69b:	5e                   	pop    esi
c001b69c:	5f                   	pop    edi
c001b69d:	5d                   	pop    ebp
c001b69e:	c3                   	ret    
c001b69f:	90                   	nop
c001b6a0:	b8 01 00 00 00       	mov    eax,0x1
c001b6a5:	eb e1                	jmp    c001b688 <SoundPort::buffer16(short*, int)+0x6c>
c001b6a7:	90                   	nop

c001b6a8 <SoundPort::buffer32(int*, int)>:
c001b6a8:	55                   	push   ebp
c001b6a9:	57                   	push   edi
c001b6aa:	56                   	push   esi
c001b6ab:	53                   	push   ebx
c001b6ac:	83 ec 04             	sub    esp,0x4
c001b6af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b6bb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6be:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6c4:	74 5a                	je     c001b720 <SoundPort::buffer32(int*, int)+0x78>
c001b6c6:	85 c0                	test   eax,eax
c001b6c8:	7e 56                	jle    c001b720 <SoundPort::buffer32(int*, int)+0x78>
c001b6ca:	8d 71 01             	lea    esi,[ecx+0x1]
c001b6cd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b6d0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b6d3:	8b 37                	mov    esi,DWORD PTR [edi]
c001b6d5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b6d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6db:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6de:	74 4c                	je     c001b72c <SoundPort::buffer32(int*, int)+0x84>
c001b6e0:	31 f6                	xor    esi,esi
c001b6e2:	eb 1c                	jmp    c001b700 <SoundPort::buffer32(int*, int)+0x58>
c001b6e4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b6e7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b6ea:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b6ed:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b6f0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b6f4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6f7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6fa:	74 18                	je     c001b714 <SoundPort::buffer32(int*, int)+0x6c>
c001b6fc:	89 de                	mov    esi,ebx
c001b6fe:	66 90                	xchg   ax,ax
c001b700:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b703:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b706:	75 dc                	jne    c001b6e4 <SoundPort::buffer32(int*, int)+0x3c>
c001b708:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b70b:	90                   	nop
c001b70c:	83 c4 04             	add    esp,0x4
c001b70f:	5b                   	pop    ebx
c001b710:	5e                   	pop    esi
c001b711:	5f                   	pop    edi
c001b712:	5d                   	pop    ebp
c001b713:	c3                   	ret    
c001b714:	8d 46 02             	lea    eax,[esi+0x2]
c001b717:	83 c4 04             	add    esp,0x4
c001b71a:	5b                   	pop    ebx
c001b71b:	5e                   	pop    esi
c001b71c:	5f                   	pop    edi
c001b71d:	5d                   	pop    ebp
c001b71e:	c3                   	ret    
c001b71f:	90                   	nop
c001b720:	83 c4 04             	add    esp,0x4
c001b723:	31 c0                	xor    eax,eax
c001b725:	5b                   	pop    ebx
c001b726:	5e                   	pop    esi
c001b727:	5f                   	pop    edi
c001b728:	5d                   	pop    ebp
c001b729:	c3                   	ret    
c001b72a:	66 90                	xchg   ax,ax
c001b72c:	b8 01 00 00 00       	mov    eax,0x1
c001b731:	eb d9                	jmp    c001b70c <SoundPort::buffer32(int*, int)+0x64>
c001b733:	90                   	nop

c001b734 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b734:	55                   	push   ebp
c001b735:	57                   	push   edi
c001b736:	56                   	push   esi
c001b737:	53                   	push   ebx
c001b738:	83 ec 0c             	sub    esp,0xc
c001b73b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b73f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b743:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b747:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b74b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b751:	39 03                	cmp    DWORD PTR [ebx],eax
c001b753:	74 13                	je     c001b768 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b755:	83 ec 0c             	sub    esp,0xc
c001b758:	68 f8 33 02 c0       	push   0xc00233f8
c001b75d:	e8 b4 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b762:	83 c4 10             	add    esp,0x10
c001b765:	8d 76 00             	lea    esi,[esi+0x0]
c001b768:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b76e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b771:	74 11                	je     c001b784 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b773:	83 ec 0c             	sub    esp,0xc
c001b776:	68 37 34 02 c0       	push   0xc0023437
c001b77b:	e8 96 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	90                   	nop
c001b784:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b78a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b78d:	74 11                	je     c001b7a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b78f:	83 ec 0c             	sub    esp,0xc
c001b792:	68 37 34 02 c0       	push   0xc0023437
c001b797:	e8 7a 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b79c:	83 c4 10             	add    esp,0x10
c001b79f:	90                   	nop
c001b7a0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b7a3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b7a7:	85 f6                	test   esi,esi
c001b7a9:	7e 2d                	jle    c001b7d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b7ab:	31 c0                	xor    eax,eax
c001b7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b7b3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b7b6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b7bc:	85 c9                	test   ecx,ecx
c001b7be:	0f 49 d1             	cmovns edx,ecx
c001b7c1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b7c5:	c1 fa 0f             	sar    edx,0xf
c001b7c8:	01 d1                	add    ecx,edx
c001b7ca:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b7ce:	83 c0 01             	add    eax,0x1
c001b7d1:	39 f0                	cmp    eax,esi
c001b7d3:	75 db                	jne    c001b7b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b7d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b7db:	83 ec 04             	sub    esp,0x4
c001b7de:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b7e1:	29 f0                	sub    eax,esi
c001b7e3:	c1 e0 02             	shl    eax,0x2
c001b7e6:	50                   	push   eax
c001b7e7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b7ea:	50                   	push   eax
c001b7eb:	52                   	push   edx
c001b7ec:	e8 df 4b fe ff       	call   c00003d0 <memmove>
c001b7f1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b7f4:	29 f0                	sub    eax,esi
c001b7f6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b7f9:	83 c4 1c             	add    esp,0x1c
c001b7fc:	89 f0                	mov    eax,esi
c001b7fe:	5b                   	pop    ebx
c001b7ff:	5e                   	pop    esi
c001b800:	5f                   	pop    edi
c001b801:	5d                   	pop    ebp
c001b802:	c3                   	ret    
c001b803:	90                   	nop

c001b804 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b804:	55                   	push   ebp
c001b805:	57                   	push   edi
c001b806:	56                   	push   esi
c001b807:	53                   	push   ebx
c001b808:	83 ec 0c             	sub    esp,0xc
c001b80b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b80f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b813:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b817:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b81b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b821:	39 03                	cmp    DWORD PTR [ebx],eax
c001b823:	74 13                	je     c001b838 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b825:	83 ec 0c             	sub    esp,0xc
c001b828:	68 18 34 02 c0       	push   0xc0023418
c001b82d:	e8 e4 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b832:	83 c4 10             	add    esp,0x10
c001b835:	8d 76 00             	lea    esi,[esi+0x0]
c001b838:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b83e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b841:	74 11                	je     c001b854 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b843:	83 ec 0c             	sub    esp,0xc
c001b846:	68 53 34 02 c0       	push   0xc0023453
c001b84b:	e8 c6 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b850:	83 c4 10             	add    esp,0x10
c001b853:	90                   	nop
c001b854:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b85a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b85d:	74 11                	je     c001b870 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b85f:	83 ec 0c             	sub    esp,0xc
c001b862:	68 53 34 02 c0       	push   0xc0023453
c001b867:	e8 aa 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b86c:	83 c4 10             	add    esp,0x10
c001b86f:	90                   	nop
c001b870:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b873:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b877:	85 ff                	test   edi,edi
c001b879:	7e 21                	jle    c001b89c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b87b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b882:	31 c0                	xor    eax,eax
c001b884:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b887:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b88a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b88d:	01 d5                	add    ebp,edx
c001b88f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b892:	83 c0 04             	add    eax,0x4
c001b895:	39 c1                	cmp    ecx,eax
c001b897:	75 eb                	jne    c001b884 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b899:	8d 76 00             	lea    esi,[esi+0x0]
c001b89c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b89f:	83 ec 04             	sub    esp,0x4
c001b8a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b8a5:	29 f8                	sub    eax,edi
c001b8a7:	c1 e0 02             	shl    eax,0x2
c001b8aa:	50                   	push   eax
c001b8ab:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b8ae:	50                   	push   eax
c001b8af:	52                   	push   edx
c001b8b0:	e8 1b 4b fe ff       	call   c00003d0 <memmove>
c001b8b5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b8b8:	29 f8                	sub    eax,edi
c001b8ba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b8bd:	83 c4 1c             	add    esp,0x1c
c001b8c0:	89 f8                	mov    eax,edi
c001b8c2:	5b                   	pop    ebx
c001b8c3:	5e                   	pop    esi
c001b8c4:	5f                   	pop    edi
c001b8c5:	5d                   	pop    ebp
c001b8c6:	c3                   	ret    
c001b8c7:	90                   	nop

c001b8c8 <PCI::open(int, int, void*)>:
c001b8c8:	83 ec 18             	sub    esp,0x18
c001b8cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b8d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8d9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8db:	50                   	push   eax
c001b8dc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b8df:	31 c0                	xor    eax,eax
c001b8e1:	83 c4 1c             	add    esp,0x1c
c001b8e4:	c3                   	ret    
c001b8e5:	90                   	nop

c001b8e6 <PCI::close(int, int, void*)>:
c001b8e6:	31 c0                	xor    eax,eax
c001b8e8:	c3                   	ret    
c001b8e9:	90                   	nop

c001b8ea <PCI::PCI()>:
c001b8ea:	83 ec 0c             	sub    esp,0xc
c001b8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f1:	83 ec 08             	sub    esp,0x8
c001b8f4:	68 6f 34 02 c0       	push   0xc002346f
c001b8f9:	50                   	push   eax
c001b8fa:	e8 e9 cf fe ff       	call   c00088e8 <Bus::Bus(char const*)>
c001b8ff:	83 c4 10             	add    esp,0x10
c001b902:	ba 7c 35 02 c0       	mov    edx,0xc002357c
c001b907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90b:	89 10                	mov    DWORD PTR [eax],edx
c001b90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b911:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91f:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001b924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b928:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b92e:	0f b6 d0             	movzx  edx,al
c001b931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b935:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b940:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b946:	0f b6 d0             	movzx  edx,al
c001b949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b956:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b95c:	8d 50 01             	lea    edx,[eax+0x1]
c001b95f:	88 d1                	mov    cl,dl
c001b961:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b965:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b96b:	0f b6 d0             	movzx  edx,al
c001b96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b972:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b976:	83 c9 c0             	or     ecx,0xffffffc0
c001b979:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b97d:	90                   	nop
c001b97e:	83 c4 0c             	add    esp,0xc
c001b981:	c3                   	ret    

c001b982 <PCI::readBAR8(unsigned int, int)>:
c001b982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b98a:	f6 c2 01             	test   dl,0x1
c001b98d:	74 07                	je     c001b996 <PCI::readBAR8(unsigned int, int)+0x14>
c001b98f:	83 e2 fc             	and    edx,0xfffffffc
c001b992:	01 c2                	add    edx,eax
c001b994:	ec                   	in     al,dx
c001b995:	c3                   	ret    
c001b996:	83 e2 f0             	and    edx,0xfffffff0
c001b999:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b99c:	c3                   	ret    
c001b99d:	90                   	nop

c001b99e <PCI::readBAR16(unsigned int, int)>:
c001b99e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9a6:	f6 c2 01             	test   dl,0x1
c001b9a9:	74 08                	je     c001b9b3 <PCI::readBAR16(unsigned int, int)+0x15>
c001b9ab:	83 e2 fc             	and    edx,0xfffffffc
c001b9ae:	01 c2                	add    edx,eax
c001b9b0:	66 ed                	in     ax,dx
c001b9b2:	c3                   	ret    
c001b9b3:	83 e2 f0             	and    edx,0xfffffff0
c001b9b6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b9ba:	c3                   	ret    
c001b9bb:	90                   	nop

c001b9bc <PCI::readBAR32(unsigned int, int)>:
c001b9bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c4:	f6 c2 01             	test   dl,0x1
c001b9c7:	74 07                	je     c001b9d0 <PCI::readBAR32(unsigned int, int)+0x14>
c001b9c9:	83 e2 fc             	and    edx,0xfffffffc
c001b9cc:	01 c2                	add    edx,eax
c001b9ce:	ed                   	in     eax,dx
c001b9cf:	c3                   	ret    
c001b9d0:	83 e2 f0             	and    edx,0xfffffff0
c001b9d3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b9d6:	c3                   	ret    
c001b9d7:	90                   	nop

c001b9d8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b9d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9e4:	f6 c2 01             	test   dl,0x1
c001b9e7:	74 07                	je     c001b9f0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b9e9:	83 e2 fc             	and    edx,0xfffffffc
c001b9ec:	01 ca                	add    edx,ecx
c001b9ee:	ee                   	out    dx,al
c001b9ef:	c3                   	ret    
c001b9f0:	83 e2 f0             	and    edx,0xfffffff0
c001b9f3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b9f6:	c3                   	ret    
c001b9f7:	90                   	nop

c001b9f8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b9f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba04:	f6 c2 01             	test   dl,0x1
c001ba07:	74 08                	je     c001ba11 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ba09:	83 e2 fc             	and    edx,0xfffffffc
c001ba0c:	01 ca                	add    edx,ecx
c001ba0e:	66 ef                	out    dx,ax
c001ba10:	c3                   	ret    
c001ba11:	83 e2 f0             	and    edx,0xfffffff0
c001ba14:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ba18:	c3                   	ret    
c001ba19:	90                   	nop

c001ba1a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ba1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba26:	f6 c2 01             	test   dl,0x1
c001ba29:	74 07                	je     c001ba32 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ba2b:	83 e2 fc             	and    edx,0xfffffffc
c001ba2e:	01 ca                	add    edx,ecx
c001ba30:	ef                   	out    dx,eax
c001ba31:	c3                   	ret    
c001ba32:	83 e2 f0             	and    edx,0xfffffff0
c001ba35:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ba38:	c3                   	ret    
c001ba39:	90                   	nop

c001ba3a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ba3a:	55                   	push   ebp
c001ba3b:	57                   	push   edi
c001ba3c:	56                   	push   esi
c001ba3d:	53                   	push   ebx
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ba46:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ba4a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ba4e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba52:	83 fe 07             	cmp    esi,0x7
c001ba55:	76 10                	jbe    c001ba67 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ba57:	83 ec 0c             	sub    esp,0xc
c001ba5a:	68 77 34 02 c0       	push   0xc0023477
c001ba5f:	e8 b2 31 ff ff       	call   c000ec16 <KePanic(char const*)>
c001ba64:	83 c4 10             	add    esp,0x10
c001ba67:	0f b6 db             	movzx  ebx,bl
c001ba6a:	83 fb 0f             	cmp    ebx,0xf
c001ba6d:	76 10                	jbe    c001ba7f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ba6f:	83 ec 0c             	sub    esp,0xc
c001ba72:	68 a7 34 02 c0       	push   0xc00234a7
c001ba77:	e8 9a 31 ff ff       	call   c000ec16 <KePanic(char const*)>
c001ba7c:	83 c4 10             	add    esp,0x10
c001ba7f:	8d 04 36             	lea    eax,[esi+esi*1]
c001ba82:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ba87:	83 c8 f0             	or     eax,0xfffffff0
c001ba8a:	ee                   	out    dx,al
c001ba8b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ba90:	89 e8                	mov    eax,ebp
c001ba92:	ee                   	out    dx,al
c001ba93:	89 f9                	mov    ecx,edi
c001ba95:	89 d8                	mov    eax,ebx
c001ba97:	0f b6 d9             	movzx  ebx,cl
c001ba9a:	83 c4 0c             	add    esp,0xc
c001ba9d:	c1 e0 08             	shl    eax,0x8
c001baa0:	83 e3 fc             	and    ebx,0xfffffffc
c001baa3:	09 d8                	or     eax,ebx
c001baa5:	5b                   	pop    ebx
c001baa6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001baab:	5e                   	pop    esi
c001baac:	5f                   	pop    edi
c001baad:	5d                   	pop    ebp
c001baae:	c3                   	ret    
c001baaf:	90                   	nop

c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bab0:	57                   	push   edi
c001bab1:	56                   	push   esi
c001bab2:	53                   	push   ebx
c001bab3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bab7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001babb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001babf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bac3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bac9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bacd:	83 ff 01             	cmp    edi,0x1
c001bad0:	75 3f                	jne    c001bb11 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bad2:	89 de                	mov    esi,ebx
c001bad4:	0f b6 c0             	movzx  eax,al
c001bad7:	c1 e0 10             	shl    eax,0x10
c001bada:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bae0:	0f b6 c9             	movzx  ecx,cl
c001bae3:	09 f0                	or     eax,esi
c001bae5:	c1 e1 08             	shl    ecx,0x8
c001bae8:	0f b6 d2             	movzx  edx,dl
c001baeb:	c1 e2 0b             	shl    edx,0xb
c001baee:	09 c8                	or     eax,ecx
c001baf0:	09 d0                	or     eax,edx
c001baf2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001baf7:	0d 00 00 00 80       	or     eax,0x80000000
c001bafc:	ef                   	out    dx,eax
c001bafd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb02:	ed                   	in     eax,dx
c001bb03:	83 e3 02             	and    ebx,0x2
c001bb06:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bb0d:	d3 e8                	shr    eax,cl
c001bb0f:	eb 44                	jmp    c001bb55 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bb11:	83 ff 02             	cmp    edi,0x2
c001bb14:	75 2d                	jne    c001bb43 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bb16:	83 ec 0c             	sub    esp,0xc
c001bb19:	0f b6 fb             	movzx  edi,bl
c001bb1c:	57                   	push   edi
c001bb1d:	0f b6 c9             	movzx  ecx,cl
c001bb20:	51                   	push   ecx
c001bb21:	0f b6 d2             	movzx  edx,dl
c001bb24:	52                   	push   edx
c001bb25:	0f b6 c0             	movzx  eax,al
c001bb28:	50                   	push   eax
c001bb29:	56                   	push   esi
c001bb2a:	e8 0b ff ff ff       	call   c001ba3a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb2f:	89 c2                	mov    edx,eax
c001bb31:	ed                   	in     eax,dx
c001bb32:	83 e3 02             	and    ebx,0x2
c001bb35:	83 c4 20             	add    esp,0x20
c001bb38:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bb3f:	d3 e8                	shr    eax,cl
c001bb41:	eb 12                	jmp    c001bb55 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bb43:	83 ec 0c             	sub    esp,0xc
c001bb46:	68 d7 34 02 c0       	push   0xc00234d7
c001bb4b:	e8 c6 30 ff ff       	call   c000ec16 <KePanic(char const*)>
c001bb50:	83 c4 10             	add    esp,0x10
c001bb53:	31 c0                	xor    eax,eax
c001bb55:	5b                   	pop    ebx
c001bb56:	5e                   	pop    esi
c001bb57:	5f                   	pop    edi
c001bb58:	c3                   	ret    
c001bb59:	90                   	nop

c001bb5a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bb5a:	83 ec 18             	sub    esp,0x18
c001bb5d:	6a 00                	push   0x0
c001bb5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb64:	50                   	push   eax
c001bb65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb6a:	50                   	push   eax
c001bb6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb70:	50                   	push   eax
c001bb71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb75:	e8 36 ff ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb7a:	83 c4 2c             	add    esp,0x2c
c001bb7d:	c3                   	ret    

c001bb7e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bb7e:	83 ec 18             	sub    esp,0x18
c001bb81:	6a 0e                	push   0xe
c001bb83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb88:	50                   	push   eax
c001bb89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb8e:	50                   	push   eax
c001bb8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb94:	50                   	push   eax
c001bb95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb99:	e8 12 ff ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb9e:	83 c4 2c             	add    esp,0x2c
c001bba1:	0f b6 c0             	movzx  eax,al
c001bba4:	c3                   	ret    
c001bba5:	90                   	nop

c001bba6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bba6:	55                   	push   ebp
c001bba7:	57                   	push   edi
c001bba8:	56                   	push   esi
c001bba9:	53                   	push   ebx
c001bbaa:	83 ec 18             	sub    esp,0x18
c001bbad:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bbb2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bbb7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bbbc:	6a 0a                	push   0xa
c001bbbe:	56                   	push   esi
c001bbbf:	55                   	push   ebp
c001bbc0:	57                   	push   edi
c001bbc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bbc5:	e8 e6 fe ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbca:	83 c4 14             	add    esp,0x14
c001bbcd:	6a 0a                	push   0xa
c001bbcf:	56                   	push   esi
c001bbd0:	55                   	push   ebp
c001bbd1:	57                   	push   edi
c001bbd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bbd6:	89 c3                	mov    ebx,eax
c001bbd8:	0f b6 db             	movzx  ebx,bl
c001bbdb:	e8 d0 fe ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbe0:	83 c4 2c             	add    esp,0x2c
c001bbe3:	25 00 ff 00 00       	and    eax,0xff00
c001bbe8:	09 d8                	or     eax,ebx
c001bbea:	5b                   	pop    ebx
c001bbeb:	5e                   	pop    esi
c001bbec:	5f                   	pop    edi
c001bbed:	5d                   	pop    ebp
c001bbee:	c3                   	ret    
c001bbef:	90                   	nop

c001bbf0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bbf0:	83 ec 18             	sub    esp,0x18
c001bbf3:	6a 08                	push   0x8
c001bbf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbfa:	50                   	push   eax
c001bbfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc00:	50                   	push   eax
c001bc01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc06:	50                   	push   eax
c001bc07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc0b:	e8 a0 fe ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc10:	83 c4 2c             	add    esp,0x2c
c001bc13:	0f b6 c4             	movzx  eax,ah
c001bc16:	c3                   	ret    
c001bc17:	90                   	nop

c001bc18 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bc18:	83 ec 18             	sub    esp,0x18
c001bc1b:	6a 08                	push   0x8
c001bc1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc22:	50                   	push   eax
c001bc23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc28:	50                   	push   eax
c001bc29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc2e:	50                   	push   eax
c001bc2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc33:	e8 78 fe ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc38:	83 c4 2c             	add    esp,0x2c
c001bc3b:	c3                   	ret    

c001bc3c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bc3c:	83 ec 18             	sub    esp,0x18
c001bc3f:	6a 3c                	push   0x3c
c001bc41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc46:	50                   	push   eax
c001bc47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc4c:	50                   	push   eax
c001bc4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc52:	50                   	push   eax
c001bc53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc57:	e8 54 fe ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc5c:	83 c4 2c             	add    esp,0x2c
c001bc5f:	c3                   	ret    

c001bc60 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bc60:	83 ec 18             	sub    esp,0x18
c001bc63:	6a 18                	push   0x18
c001bc65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc6a:	50                   	push   eax
c001bc6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc70:	50                   	push   eax
c001bc71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc76:	50                   	push   eax
c001bc77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc7b:	e8 30 fe ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc80:	83 c4 2c             	add    esp,0x2c
c001bc83:	0f b6 c4             	movzx  eax,ah
c001bc86:	c3                   	ret    
c001bc87:	90                   	nop

c001bc88 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bc88:	55                   	push   ebp
c001bc89:	57                   	push   edi
c001bc8a:	56                   	push   esi
c001bc8b:	53                   	push   ebx
c001bc8c:	83 ec 28             	sub    esp,0x28
c001bc8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bc93:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bc98:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bc9d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bca2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bca9:	8d 43 12             	lea    eax,[ebx+0x12]
c001bcac:	83 c3 10             	add    ebx,0x10
c001bcaf:	0f b6 c0             	movzx  eax,al
c001bcb2:	0f b6 db             	movzx  ebx,bl
c001bcb5:	50                   	push   eax
c001bcb6:	51                   	push   ecx
c001bcb7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bcbb:	57                   	push   edi
c001bcbc:	55                   	push   ebp
c001bcbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bcc1:	e8 ea fd ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcc6:	83 c4 14             	add    esp,0x14
c001bcc9:	53                   	push   ebx
c001bcca:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bcce:	51                   	push   ecx
c001bccf:	89 c6                	mov    esi,eax
c001bcd1:	57                   	push   edi
c001bcd2:	55                   	push   ebp
c001bcd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bcd7:	c1 e6 10             	shl    esi,0x10
c001bcda:	e8 d1 fd ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcdf:	83 c4 3c             	add    esp,0x3c
c001bce2:	5b                   	pop    ebx
c001bce3:	0f b7 c0             	movzx  eax,ax
c001bce6:	09 f0                	or     eax,esi
c001bce8:	5e                   	pop    esi
c001bce9:	5f                   	pop    edi
c001bcea:	5d                   	pop    ebp
c001bceb:	c3                   	ret    

c001bcec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bcec:	55                   	push   ebp
c001bced:	57                   	push   edi
c001bcee:	56                   	push   esi
c001bcef:	53                   	push   ebx
c001bcf0:	83 ec 0c             	sub    esp,0xc
c001bcf3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bcf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bcfb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcff:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001bd03:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001bd09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd0d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd11:	83 f9 01             	cmp    ecx,0x1
c001bd14:	75 5d                	jne    c001bd73 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001bd16:	0f b6 c8             	movzx  ecx,al
c001bd19:	89 f0                	mov    eax,esi
c001bd1b:	25 fc 00 00 00       	and    eax,0xfc
c001bd20:	0f b6 d2             	movzx  edx,dl
c001bd23:	c1 e1 10             	shl    ecx,0x10
c001bd26:	c1 e2 0b             	shl    edx,0xb
c001bd29:	09 c1                	or     ecx,eax
c001bd2b:	89 f8                	mov    eax,edi
c001bd2d:	0f b6 f8             	movzx  edi,al
c001bd30:	c1 e7 08             	shl    edi,0x8
c001bd33:	09 f9                	or     ecx,edi
c001bd35:	09 d1                	or     ecx,edx
c001bd37:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd3c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bd42:	89 c8                	mov    eax,ecx
c001bd44:	ef                   	out    dx,eax
c001bd45:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd4a:	ed                   	in     eax,dx
c001bd4b:	83 e6 02             	and    esi,0x2
c001bd4e:	0f b7 db             	movzx  ebx,bx
c001bd51:	74 0a                	je     c001bd5d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001bd53:	c1 e3 10             	shl    ebx,0x10
c001bd56:	0f b7 d0             	movzx  edx,ax
c001bd59:	09 d3                	or     ebx,edx
c001bd5b:	eb 05                	jmp    c001bd62 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001bd5d:	66 31 c0             	xor    ax,ax
c001bd60:	09 c3                	or     ebx,eax
c001bd62:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd67:	89 c8                	mov    eax,ecx
c001bd69:	ef                   	out    dx,eax
c001bd6a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd6f:	89 d8                	mov    eax,ebx
c001bd71:	eb 41                	jmp    c001bdb4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001bd73:	83 f9 02             	cmp    ecx,0x2
c001bd76:	75 45                	jne    c001bdbd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001bd78:	89 f1                	mov    ecx,esi
c001bd7a:	83 ec 0c             	sub    esp,0xc
c001bd7d:	0f b6 f1             	movzx  esi,cl
c001bd80:	89 f9                	mov    ecx,edi
c001bd82:	56                   	push   esi
c001bd83:	0f b6 f9             	movzx  edi,cl
c001bd86:	57                   	push   edi
c001bd87:	0f b6 d2             	movzx  edx,dl
c001bd8a:	52                   	push   edx
c001bd8b:	0f b6 c0             	movzx  eax,al
c001bd8e:	50                   	push   eax
c001bd8f:	55                   	push   ebp
c001bd90:	e8 a5 fc ff ff       	call   c001ba3a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd95:	89 c2                	mov    edx,eax
c001bd97:	ed                   	in     eax,dx
c001bd98:	83 c4 20             	add    esp,0x20
c001bd9b:	f6 c2 02             	test   dl,0x2
c001bd9e:	0f b7 db             	movzx  ebx,bx
c001bda1:	74 0c                	je     c001bdaf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001bda3:	0f b7 c8             	movzx  ecx,ax
c001bda6:	89 d8                	mov    eax,ebx
c001bda8:	c1 e0 10             	shl    eax,0x10
c001bdab:	09 c8                	or     eax,ecx
c001bdad:	eb 05                	jmp    c001bdb4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001bdaf:	66 31 c0             	xor    ax,ax
c001bdb2:	09 d8                	or     eax,ebx
c001bdb4:	ef                   	out    dx,eax
c001bdb5:	83 c4 0c             	add    esp,0xc
c001bdb8:	5b                   	pop    ebx
c001bdb9:	5e                   	pop    esi
c001bdba:	5f                   	pop    edi
c001bdbb:	5d                   	pop    ebp
c001bdbc:	c3                   	ret    
c001bdbd:	c7 44 24 20 d7 34 02 c0 	mov    DWORD PTR [esp+0x20],0xc00234d7
c001bdc5:	83 c4 0c             	add    esp,0xc
c001bdc8:	5b                   	pop    ebx
c001bdc9:	5e                   	pop    esi
c001bdca:	5f                   	pop    edi
c001bdcb:	5d                   	pop    ebp
c001bdcc:	e9 45 2e ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001bdd1:	90                   	nop

c001bdd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001bdd2:	55                   	push   ebp
c001bdd3:	57                   	push   edi
c001bdd4:	56                   	push   esi
c001bdd5:	53                   	push   ebx
c001bdd6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001bddc:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001bde3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001bdea:	0f 85 bd 00 00 00    	jne    c001bead <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001bdf0:	83 ec 0c             	sub    esp,0xc
c001bdf3:	68 14 01 00 00       	push   0x114
c001bdf8:	e8 d3 2a ff ff       	call   c000e8d0 <malloc>
c001bdfd:	83 c4 0c             	add    esp,0xc
c001be00:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001be06:	68 dd 34 02 c0       	push   0xc00234dd
c001be0b:	50                   	push   eax
c001be0c:	89 c3                	mov    ebx,eax
c001be0e:	e8 f9 c2 fe ff       	call   c000810c <File::File(char const*, Process*)>
c001be13:	83 c4 10             	add    esp,0x10
c001be16:	85 db                	test   ebx,ebx
c001be18:	0f 84 6b 02 00 00    	je     c001c089 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be1e:	57                   	push   edi
c001be1f:	57                   	push   edi
c001be20:	6a 01                	push   0x1
c001be22:	53                   	push   ebx
c001be23:	e8 02 c3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c001be28:	83 c4 10             	add    esp,0x10
c001be2b:	85 c0                	test   eax,eax
c001be2d:	0f 85 56 02 00 00    	jne    c001c089 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be33:	52                   	push   edx
c001be34:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001be38:	50                   	push   eax
c001be39:	8d 44 24 48          	lea    eax,[esp+0x48]
c001be3d:	50                   	push   eax
c001be3e:	53                   	push   ebx
c001be3f:	e8 e8 c5 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001be44:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be48:	40                   	inc    eax
c001be49:	89 04 24             	mov    DWORD PTR [esp],eax
c001be4c:	e8 7f 2a ff ff       	call   c000e8d0 <malloc>
c001be51:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001be55:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001be59:	59                   	pop    ecx
c001be5a:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001be5f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be61:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001be65:	51                   	push   ecx
c001be66:	50                   	push   eax
c001be67:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001be6b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001be6f:	53                   	push   ebx
c001be70:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be73:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001be77:	83 c4 20             	add    esp,0x20
c001be7a:	89 c8                	mov    eax,ecx
c001be7c:	99                   	cdq    
c001be7d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001be81:	0f 85 02 02 00 00    	jne    c001c089 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be87:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001be8b:	0f 85 f8 01 00 00    	jne    c001c089 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be91:	83 ec 0c             	sub    esp,0xc
c001be94:	53                   	push   ebx
c001be95:	e8 ee c2 fe ff       	call   c0008188 <File::close()>
c001be9a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be9e:	83 c4 10             	add    esp,0x10
c001bea1:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001bea8:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001bead:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001beb5:	31 c9                	xor    ecx,ecx
c001beb7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001bebe:	8b 2d c4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0c4
c001bec4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001becb:	8b 15 c8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c8
c001bed1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001bed6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001bede:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001bee3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001beeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001beef:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001bef7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001befb:	39 cd                	cmp    ebp,ecx
c001befd:	0f 8e 86 01 00 00    	jle    c001c089 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bf03:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001bf06:	d4 40                	aam    0x40
c001bf08:	d5 39                	aad    0x39
c001bf0a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bf0e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001bf12:	d4 40                	aam    0x40
c001bf14:	d5 39                	aad    0x39
c001bf16:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf1a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001bf1e:	d4 40                	aam    0x40
c001bf20:	d5 39                	aad    0x39
c001bf22:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bf26:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001bf2a:	d4 40                	aam    0x40
c001bf2c:	d5 39                	aad    0x39
c001bf2e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bf32:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001bf36:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001bf3a:	3c 56                	cmp    al,0x56
c001bf3c:	74 47                	je     c001bf85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001bf3e:	d4 40                	aam    0x40
c001bf40:	d5 39                	aad    0x39
c001bf42:	8d 58 d0             	lea    ebx,[eax-0x30]
c001bf45:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001bf49:	0f b6 db             	movzx  ebx,bl
c001bf4c:	c1 e3 04             	shl    ebx,0x4
c001bf4f:	d4 40                	aam    0x40
c001bf51:	d5 39                	aad    0x39
c001bf53:	83 e8 30             	sub    eax,0x30
c001bf56:	0f b6 c0             	movzx  eax,al
c001bf59:	09 c3                	or     ebx,eax
c001bf5b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001bf5f:	c1 e3 04             	shl    ebx,0x4
c001bf62:	d4 40                	aam    0x40
c001bf64:	d5 39                	aad    0x39
c001bf66:	83 e8 30             	sub    eax,0x30
c001bf69:	0f b6 c0             	movzx  eax,al
c001bf6c:	09 c3                	or     ebx,eax
c001bf6e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001bf72:	c1 e3 04             	shl    ebx,0x4
c001bf75:	d4 40                	aam    0x40
c001bf77:	d5 39                	aad    0x39
c001bf79:	83 e8 30             	sub    eax,0x30
c001bf7c:	0f b6 c0             	movzx  eax,al
c001bf7f:	09 c3                	or     ebx,eax
c001bf81:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001bf85:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001bf89:	80 fb 58             	cmp    bl,0x58
c001bf8c:	74 49                	je     c001bfd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001bf8e:	88 d8                	mov    al,bl
c001bf90:	d4 40                	aam    0x40
c001bf92:	d5 39                	aad    0x39
c001bf94:	83 e8 30             	sub    eax,0x30
c001bf97:	0f b6 f8             	movzx  edi,al
c001bf9a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001bf9e:	c1 e7 04             	shl    edi,0x4
c001bfa1:	d4 40                	aam    0x40
c001bfa3:	d5 39                	aad    0x39
c001bfa5:	83 e8 30             	sub    eax,0x30
c001bfa8:	0f b6 c0             	movzx  eax,al
c001bfab:	09 c7                	or     edi,eax
c001bfad:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001bfb1:	c1 e7 04             	shl    edi,0x4
c001bfb4:	d4 40                	aam    0x40
c001bfb6:	d5 39                	aad    0x39
c001bfb8:	83 e8 30             	sub    eax,0x30
c001bfbb:	0f b6 c0             	movzx  eax,al
c001bfbe:	09 c7                	or     edi,eax
c001bfc0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001bfc4:	c1 e7 04             	shl    edi,0x4
c001bfc7:	d4 40                	aam    0x40
c001bfc9:	d5 39                	aad    0x39
c001bfcb:	83 e8 30             	sub    eax,0x30
c001bfce:	0f b6 c0             	movzx  eax,al
c001bfd1:	09 c7                	or     edi,eax
c001bfd3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001bfd7:	8d 41 10             	lea    eax,[ecx+0x10]
c001bfda:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001bfde:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001bfe2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bfe6:	83 f9 0a             	cmp    ecx,0xa
c001bfe9:	74 07                	je     c001bff2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001bfeb:	47                   	inc    edi
c001bfec:	39 c5                	cmp    ebp,eax
c001bfee:	75 16                	jne    c001c006 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001bff0:	89 e8                	mov    eax,ebp
c001bff2:	83 f9 0a             	cmp    ecx,0xa
c001bff5:	0f 94 c1             	sete   cl
c001bff8:	0f b6 c9             	movzx  ecx,cl
c001bffb:	01 c1                	add    ecx,eax
c001bffd:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c002:	75 0f                	jne    c001c013 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001c004:	eb 1c                	jmp    c001c022 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001c006:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c009:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c00d:	40                   	inc    eax
c001c00e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001c011:	eb cb                	jmp    c001bfde <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001c013:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c017:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c01c:	0f 85 d9 fe ff ff    	jne    c001befb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c022:	80 fb 58             	cmp    bl,0x58
c001c025:	74 10                	je     c001c037 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001c027:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c02c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001c031:	0f 85 c4 fe ff ff    	jne    c001befb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c037:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c03b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c03f:	83 e8 30             	sub    eax,0x30
c001c042:	c1 e0 04             	shl    eax,0x4
c001c045:	83 eb 30             	sub    ebx,0x30
c001c048:	09 d8                	or     eax,ebx
c001c04a:	0f b6 c0             	movzx  eax,al
c001c04d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c051:	0f 85 a4 fe ff ff    	jne    c001befb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c05b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c05f:	83 e8 30             	sub    eax,0x30
c001c062:	c1 e0 04             	shl    eax,0x4
c001c065:	83 eb 30             	sub    ebx,0x30
c001c068:	09 d8                	or     eax,ebx
c001c06a:	0f b6 c0             	movzx  eax,al
c001c06d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c071:	0f 85 84 fe ff ff    	jne    c001befb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c077:	50                   	push   eax
c001c078:	50                   	push   eax
c001c079:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c07d:	50                   	push   eax
c001c07e:	56                   	push   esi
c001c07f:	e8 cc 45 fe ff       	call   c0000650 <strcpy>
c001c084:	83 c4 10             	add    esp,0x10
c001c087:	eb 05                	jmp    c001c08e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001c089:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c08c:	31 f6                	xor    esi,esi
c001c08e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c094:	89 f0                	mov    eax,esi
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	5f                   	pop    edi
c001c099:	5d                   	pop    ebp
c001c09a:	c3                   	ret    
c001c09b:	90                   	nop

c001c09c <PCI::checkBus(unsigned char)>:
c001c09c:	56                   	push   esi
c001c09d:	53                   	push   ebx
c001c09e:	31 db                	xor    ebx,ebx
c001c0a0:	51                   	push   ecx
c001c0a1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c0a6:	52                   	push   edx
c001c0a7:	53                   	push   ebx
c001c0a8:	43                   	inc    ebx
c001c0a9:	56                   	push   esi
c001c0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0ae:	e8 6f 03 00 00       	call   c001c422 <PCI::checkDevice(unsigned char, unsigned char)>
c001c0b3:	83 c4 10             	add    esp,0x10
c001c0b6:	83 fb 20             	cmp    ebx,0x20
c001c0b9:	75 eb                	jne    c001c0a6 <PCI::checkBus(unsigned char)+0xa>
c001c0bb:	58                   	pop    eax
c001c0bc:	5b                   	pop    ebx
c001c0bd:	5e                   	pop    esi
c001c0be:	c3                   	ret    
c001c0bf:	90                   	nop

c001c0c0 <PCI::foundDevice(PCIDeviceInfo)>:
c001c0c0:	55                   	push   ebp
c001c0c1:	57                   	push   edi
c001c0c2:	56                   	push   esi
c001c0c3:	53                   	push   ebx
c001c0c4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c0ca:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c0d2:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001c0d9:	3d ff ff 00 00       	cmp    eax,0xffff
c001c0de:	0f 84 b6 01 00 00    	je     c001c29a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c0e4:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001c0ec:	66 81 fd 06 04       	cmp    bp,0x406
c001c0f1:	75 32                	jne    c001c125 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c0f3:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c0fb:	50                   	push   eax
c001c0fc:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c104:	50                   	push   eax
c001c105:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c10d:	50                   	push   eax
c001c10e:	53                   	push   ebx
c001c10f:	e8 4c fb ff ff       	call   c001bc60 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c114:	59                   	pop    ecx
c001c115:	5e                   	pop    esi
c001c116:	0f b6 c0             	movzx  eax,al
c001c119:	50                   	push   eax
c001c11a:	53                   	push   ebx
c001c11b:	e8 7c ff ff ff       	call   c001c09c <PCI::checkBus(unsigned char)>
c001c120:	e9 15 01 00 00       	jmp    c001c23a <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001c125:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001c12d:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001c133:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001c13a:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c141:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c145:	85 c0                	test   eax,eax
c001c147:	74 34                	je     c001c17d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001c149:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c14c:	85 d2                	test   edx,edx
c001c14e:	74 29                	je     c001c179 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c150:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c156:	31 cf                	xor    edi,ecx
c001c158:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c15e:	75 19                	jne    c001c179 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c160:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001c166:	75 11                	jne    c001c179 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c168:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c16f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c173:	0f 84 21 01 00 00    	je     c001c29a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c179:	8b 00                	mov    eax,DWORD PTR [eax]
c001c17b:	eb c8                	jmp    c001c145 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c17d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c181:	be 10 35 02 c0       	mov    esi,0xc0023510
c001c186:	b9 07 00 00 00       	mov    ecx,0x7
c001c18b:	fc                   	cld    
c001c18c:	31 d2                	xor    edx,edx
c001c18e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c190:	b9 12 00 00 00       	mov    ecx,0x12
c001c195:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c19c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c1a0:	83 ec 0c             	sub    esp,0xc
c001c1a3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c1a5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c1ad:	b9 0a 00 00 00       	mov    ecx,0xa
c001c1b2:	f7 f1                	div    ecx
c001c1b4:	83 c0 30             	add    eax,0x30
c001c1b7:	83 c2 30             	add    edx,0x30
c001c1ba:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c1be:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c1c6:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c1ca:	31 d2                	xor    edx,edx
c001c1cc:	f7 f1                	div    ecx
c001c1ce:	83 c0 30             	add    eax,0x30
c001c1d1:	83 c2 30             	add    edx,0x30
c001c1d4:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c1d8:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c1dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c1e0:	50                   	push   eax
c001c1e1:	e8 b5 03 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c1e6:	83 c4 10             	add    esp,0x10
c001c1e9:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001c1ef:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c1f6:	75 47                	jne    c001c23f <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001c1f8:	83 ec 0c             	sub    esp,0xc
c001c1fb:	68 64 01 00 00       	push   0x164
c001c200:	e8 cb 26 ff ff       	call   c000e8d0 <malloc>
c001c205:	89 04 24             	mov    DWORD PTR [esp],eax
c001c208:	89 c5                	mov    ebp,eax
c001c20a:	e8 9d 10 00 00       	call   c001d2ac <SATABus::SATABus()>
c001c20f:	58                   	pop    eax
c001c210:	5a                   	pop    edx
c001c211:	55                   	push   ebp
c001c212:	53                   	push   ebx
c001c213:	e8 2e ce fe ff       	call   c0009046 <Device::addChild(Device*)>
c001c218:	83 ec 1c             	sub    esp,0x1c
c001c21b:	b9 09 00 00 00       	mov    ecx,0x9
c001c220:	89 e7                	mov    edi,esp
c001c222:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c224:	55                   	push   ebp
c001c225:	e8 62 cd fe ff       	call   c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>
c001c22a:	83 c4 30             	add    esp,0x30
c001c22d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c230:	6a 00                	push   0x0
c001c232:	6a 00                	push   0x0
c001c234:	6a 00                	push   0x0
c001c236:	55                   	push   ebp
c001c237:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c23a:	83 c4 10             	add    esp,0x10
c001c23d:	eb 5b                	jmp    c001c29a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c23f:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001c245:	75 19                	jne    c001c260 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001c247:	83 ec 0c             	sub    esp,0xc
c001c24a:	68 70 02 00 00       	push   0x270
c001c24f:	e8 7c 26 ff ff       	call   c000e8d0 <malloc>
c001c254:	89 04 24             	mov    DWORD PTR [esp],eax
c001c257:	89 c5                	mov    ebp,eax
c001c259:	e8 94 02 00 00       	call   c001c4f2 <IDE::IDE()>
c001c25e:	eb af                	jmp    c001c20f <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001c260:	83 ec 0c             	sub    esp,0xc
c001c263:	68 58 01 00 00       	push   0x158
c001c268:	e8 63 26 ff ff       	call   c000e8d0 <malloc>
c001c26d:	89 c5                	mov    ebp,eax
c001c26f:	58                   	pop    eax
c001c270:	5a                   	pop    edx
c001c271:	68 f6 34 02 c0       	push   0xc00234f6
c001c276:	55                   	push   ebp
c001c277:	e8 7e d0 fe ff       	call   c00092fa <DriverlessDevice::DriverlessDevice(char const*)>
c001c27c:	59                   	pop    ecx
c001c27d:	5f                   	pop    edi
c001c27e:	55                   	push   ebp
c001c27f:	53                   	push   ebx
c001c280:	e8 c1 cd fe ff       	call   c0009046 <Device::addChild(Device*)>
c001c285:	83 ec 1c             	sub    esp,0x1c
c001c288:	b9 09 00 00 00       	mov    ecx,0x9
c001c28d:	89 e7                	mov    edi,esp
c001c28f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c291:	55                   	push   ebp
c001c292:	e8 f5 cc fe ff       	call   c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>
c001c297:	83 c4 30             	add    esp,0x30
c001c29a:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c2a0:	5b                   	pop    ebx
c001c2a1:	5e                   	pop    esi
c001c2a2:	5f                   	pop    edi
c001c2a3:	5d                   	pop    ebp
c001c2a4:	c3                   	ret    
c001c2a5:	90                   	nop

c001c2a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c2a6:	55                   	push   ebp
c001c2a7:	57                   	push   edi
c001c2a8:	56                   	push   esi
c001c2a9:	53                   	push   ebx
c001c2aa:	83 ec 68             	sub    esp,0x68
c001c2ad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c2b4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c2b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2bc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c2c3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2cc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c2d3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c2d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c2dc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c2e1:	6a 0c                	push   0xc
c001c2e3:	57                   	push   edi
c001c2e4:	53                   	push   ebx
c001c2e5:	56                   	push   esi
c001c2e6:	55                   	push   ebp
c001c2e7:	e8 c4 f7 ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2ec:	83 c4 20             	add    esp,0x20
c001c2ef:	57                   	push   edi
c001c2f0:	53                   	push   ebx
c001c2f1:	56                   	push   esi
c001c2f2:	55                   	push   ebp
c001c2f3:	e8 ae f8 ff ff       	call   c001bba6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c2f8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c2fd:	57                   	push   edi
c001c2fe:	53                   	push   ebx
c001c2ff:	56                   	push   esi
c001c300:	55                   	push   ebp
c001c301:	e8 36 f9 ff ff       	call   c001bc3c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c306:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c30a:	83 c4 14             	add    esp,0x14
c001c30d:	6a 3c                	push   0x3c
c001c30f:	57                   	push   edi
c001c310:	53                   	push   ebx
c001c311:	56                   	push   esi
c001c312:	55                   	push   ebp
c001c313:	e8 98 f7 ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c318:	0f b6 c4             	movzx  eax,ah
c001c31b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c31f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c323:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c327:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c32c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c332:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c338:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c33c:	83 c4 20             	add    esp,0x20
c001c33f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c344:	74 30                	je     c001c376 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c346:	31 c0                	xor    eax,eax
c001c348:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c34c:	7e 28                	jle    c001c376 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c34e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c356:	39 cb                	cmp    ebx,ecx
c001c358:	75 19                	jne    c001c373 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c35a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c362:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c366:	75 0b                	jne    c001c373 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c368:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c36f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c373:	40                   	inc    eax
c001c374:	eb d2                	jmp    c001c348 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c376:	31 d2                	xor    edx,edx
c001c378:	83 ec 0c             	sub    esp,0xc
c001c37b:	57                   	push   edi
c001c37c:	53                   	push   ebx
c001c37d:	56                   	push   esi
c001c37e:	52                   	push   edx
c001c37f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c383:	55                   	push   ebp
c001c384:	e8 ff f8 ff ff       	call   c001bc88 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c389:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c38d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c391:	42                   	inc    edx
c001c392:	83 c4 20             	add    esp,0x20
c001c395:	83 fa 06             	cmp    edx,0x6
c001c398:	75 de                	jne    c001c378 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c39a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c39e:	83 ec 0c             	sub    esp,0xc
c001c3a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3a5:	c1 e2 08             	shl    edx,0x8
c001c3a8:	0f b6 c4             	movzx  eax,ah
c001c3ab:	09 d0                	or     eax,edx
c001c3ad:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c3b2:	6a 02                	push   0x2
c001c3b4:	57                   	push   edi
c001c3b5:	53                   	push   ebx
c001c3b6:	56                   	push   esi
c001c3b7:	55                   	push   ebp
c001c3b8:	e8 f3 f6 ff ff       	call   c001bab0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3bd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c3c2:	83 c4 20             	add    esp,0x20
c001c3c5:	57                   	push   edi
c001c3c6:	53                   	push   ebx
c001c3c7:	56                   	push   esi
c001c3c8:	55                   	push   ebp
c001c3c9:	e8 22 f8 ff ff       	call   c001bbf0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c3ce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c3d2:	57                   	push   edi
c001c3d3:	53                   	push   ebx
c001c3d4:	56                   	push   esi
c001c3d5:	55                   	push   ebp
c001c3d6:	e8 7f f7 ff ff       	call   c001bb5a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c3db:	b9 09 00 00 00       	mov    ecx,0x9
c001c3e0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c3e5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c3e9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c3ed:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c3f1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c3f5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c3f9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c3fd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c401:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c405:	83 ec 0c             	sub    esp,0xc
c001c408:	fc                   	cld    
c001c409:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c40d:	89 e7                	mov    edi,esp
c001c40f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c411:	55                   	push   ebp
c001c412:	e8 a9 fc ff ff       	call   c001c0c0 <PCI::foundDevice(PCIDeviceInfo)>
c001c417:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c41d:	5b                   	pop    ebx
c001c41e:	5e                   	pop    esi
c001c41f:	5f                   	pop    edi
c001c420:	5d                   	pop    ebp
c001c421:	c3                   	ret    

c001c422 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c422:	55                   	push   ebp
c001c423:	57                   	push   edi
c001c424:	56                   	push   esi
c001c425:	53                   	push   ebx
c001c426:	83 ec 0c             	sub    esp,0xc
c001c429:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c42e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c433:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c437:	6a 00                	push   0x0
c001c439:	56                   	push   esi
c001c43a:	57                   	push   edi
c001c43b:	55                   	push   ebp
c001c43c:	e8 19 f7 ff ff       	call   c001bb5a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c441:	6a 00                	push   0x0
c001c443:	56                   	push   esi
c001c444:	57                   	push   edi
c001c445:	55                   	push   ebp
c001c446:	e8 5b fe ff ff       	call   c001c2a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c44b:	83 c4 20             	add    esp,0x20
c001c44e:	6a 00                	push   0x0
c001c450:	56                   	push   esi
c001c451:	57                   	push   edi
c001c452:	55                   	push   ebp
c001c453:	e8 26 f7 ff ff       	call   c001bb7e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c458:	83 c4 10             	add    esp,0x10
c001c45b:	a8 80                	test   al,0x80
c001c45d:	74 2d                	je     c001c48c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c45f:	bb 01 00 00 00       	mov    ebx,0x1
c001c464:	53                   	push   ebx
c001c465:	56                   	push   esi
c001c466:	57                   	push   edi
c001c467:	55                   	push   ebp
c001c468:	e8 ed f6 ff ff       	call   c001bb5a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	0f b7 c0             	movzx  eax,ax
c001c473:	3d ff ff 00 00       	cmp    eax,0xffff
c001c478:	74 0c                	je     c001c486 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c47a:	53                   	push   ebx
c001c47b:	56                   	push   esi
c001c47c:	57                   	push   edi
c001c47d:	55                   	push   ebp
c001c47e:	e8 23 fe ff ff       	call   c001c2a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c483:	83 c4 10             	add    esp,0x10
c001c486:	43                   	inc    ebx
c001c487:	83 fb 08             	cmp    ebx,0x8
c001c48a:	75 d8                	jne    c001c464 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c48c:	83 c4 0c             	add    esp,0xc
c001c48f:	5b                   	pop    ebx
c001c490:	5e                   	pop    esi
c001c491:	5f                   	pop    edi
c001c492:	5d                   	pop    ebp
c001c493:	c3                   	ret    

c001c494 <PCI::detect()>:
c001c494:	56                   	push   esi
c001c495:	53                   	push   ebx
c001c496:	53                   	push   ebx
c001c497:	31 db                	xor    ebx,ebx
c001c499:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c49d:	6a 00                	push   0x0
c001c49f:	6a 00                	push   0x0
c001c4a1:	6a 00                	push   0x0
c001c4a3:	56                   	push   esi
c001c4a4:	e8 d5 f6 ff ff       	call   c001bb7e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c4a9:	83 c4 10             	add    esp,0x10
c001c4ac:	a8 80                	test   al,0x80
c001c4ae:	75 21                	jne    c001c4d1 <PCI::detect()+0x3d>
c001c4b0:	51                   	push   ecx
c001c4b1:	51                   	push   ecx
c001c4b2:	6a 00                	push   0x0
c001c4b4:	56                   	push   esi
c001c4b5:	e8 e2 fb ff ff       	call   c001c09c <PCI::checkBus(unsigned char)>
c001c4ba:	83 c4 10             	add    esp,0x10
c001c4bd:	eb 2a                	jmp    c001c4e9 <PCI::detect()+0x55>
c001c4bf:	52                   	push   edx
c001c4c0:	52                   	push   edx
c001c4c1:	53                   	push   ebx
c001c4c2:	43                   	inc    ebx
c001c4c3:	56                   	push   esi
c001c4c4:	e8 d3 fb ff ff       	call   c001c09c <PCI::checkBus(unsigned char)>
c001c4c9:	83 c4 10             	add    esp,0x10
c001c4cc:	83 fb 08             	cmp    ebx,0x8
c001c4cf:	74 18                	je     c001c4e9 <PCI::detect()+0x55>
c001c4d1:	53                   	push   ebx
c001c4d2:	6a 00                	push   0x0
c001c4d4:	6a 00                	push   0x0
c001c4d6:	56                   	push   esi
c001c4d7:	e8 7e f6 ff ff       	call   c001bb5a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4dc:	83 c4 10             	add    esp,0x10
c001c4df:	0f b7 c0             	movzx  eax,ax
c001c4e2:	3d ff ff 00 00       	cmp    eax,0xffff
c001c4e7:	74 d6                	je     c001c4bf <PCI::detect()+0x2b>
c001c4e9:	58                   	pop    eax
c001c4ea:	5b                   	pop    ebx
c001c4eb:	5e                   	pop    esi
c001c4ec:	c3                   	ret    
c001c4ed:	90                   	nop

c001c4ee <IDE::close(int, int, void*)>:
c001c4ee:	83 c8 ff             	or     eax,0xffffffff
c001c4f1:	c3                   	ret    

c001c4f2 <IDE::IDE()>:
c001c4f2:	83 ec 0c             	sub    esp,0xc
c001c4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f9:	83 ec 08             	sub    esp,0x8
c001c4fc:	68 a0 35 02 c0       	push   0xc00235a0
c001c501:	50                   	push   eax
c001c502:	e8 99 ce fe ff       	call   c00093a0 <HardDiskController::HardDiskController(char const*)>
c001c507:	83 c4 10             	add    esp,0x10
c001c50a:	ba b4 36 02 c0       	mov    edx,0xc00236b4
c001c50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c513:	89 10                	mov    DWORD PTR [eax],edx
c001c515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c519:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c520:	90                   	nop
c001c521:	83 c4 0c             	add    esp,0xc
c001c524:	c3                   	ret    
c001c525:	90                   	nop

c001c526 <IDE::prepareInterrupt(unsigned char)>:
c001c526:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c52b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c52f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c537:	c3                   	ret    

c001c538 <selectDrive(unsigned char, unsigned char)>:
c001c538:	c3                   	ret    
c001c539:	90                   	nop

c001c53a <IDE::getBase(unsigned char)>:
c001c53a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c53f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c543:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c54b:	c3                   	ret    

c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c54c:	55                   	push   ebp
c001c54d:	57                   	push   edi
c001c54e:	56                   	push   esi
c001c54f:	53                   	push   ebx
c001c550:	83 ec 1c             	sub    esp,0x1c
c001c553:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c557:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c55b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c55f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c563:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c566:	80 f9 03             	cmp    cl,0x3
c001c569:	77 4f                	ja     c001c5ba <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c56b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c56f:	0f b6 f2             	movzx  esi,dl
c001c572:	0f b6 db             	movzx  ebx,bl
c001c575:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c578:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c57d:	80 ca 80             	or     dl,0x80
c001c580:	52                   	push   edx
c001c581:	6a 0c                	push   0xc
c001c583:	56                   	push   esi
c001c584:	57                   	push   edi
c001c585:	e8 c2 ff ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c58a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c58f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c593:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c597:	ee                   	out    dx,al
c001c598:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c59d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c5a1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c5a5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c5ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c5b1:	83 c4 2c             	add    esp,0x2c
c001c5b4:	5b                   	pop    ebx
c001c5b5:	5e                   	pop    esi
c001c5b6:	5f                   	pop    edi
c001c5b7:	5d                   	pop    ebp
c001c5b8:	eb 92                	jmp    c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5ba:	0f b6 cb             	movzx  ecx,bl
c001c5bd:	83 f9 07             	cmp    ecx,0x7
c001c5c0:	77 12                	ja     c001c5d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c5c2:	0f b6 d2             	movzx  edx,dl
c001c5c5:	0f b6 db             	movzx  ebx,bl
c001c5c8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001c5d0:	01 da                	add    edx,ebx
c001c5d2:	eb 2f                	jmp    c001c603 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c5d4:	83 f9 0d             	cmp    ecx,0xd
c001c5d7:	77 13                	ja     c001c5ec <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c5d9:	0f b6 d2             	movzx  edx,dl
c001c5dc:	0f b6 db             	movzx  ebx,bl
c001c5df:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c5e6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c5ea:	eb 17                	jmp    c001c603 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c5ec:	83 f9 15             	cmp    ecx,0x15
c001c5ef:	77 13                	ja     c001c604 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c5f1:	0f b6 d2             	movzx  edx,dl
c001c5f4:	0f b6 db             	movzx  ebx,bl
c001c5f7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c5ff:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c603:	ee                   	out    dx,al
c001c604:	83 c4 1c             	add    esp,0x1c
c001c607:	5b                   	pop    ebx
c001c608:	5e                   	pop    esi
c001c609:	5f                   	pop    edi
c001c60a:	5d                   	pop    ebp
c001c60b:	c3                   	ret    

c001c60c <IDE::read(unsigned char, unsigned char)>:
c001c60c:	57                   	push   edi
c001c60d:	56                   	push   esi
c001c60e:	53                   	push   ebx
c001c60f:	83 ec 10             	sub    esp,0x10
c001c612:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c616:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c61a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c61e:	8d 42 f8             	lea    eax,[edx-0x8]
c001c621:	3c 03                	cmp    al,0x3
c001c623:	77 48                	ja     c001c66d <IDE::read(unsigned char, unsigned char)+0x61>
c001c625:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c629:	0f b6 f1             	movzx  esi,cl
c001c62c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001c62f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001c634:	0c 80                	or     al,0x80
c001c636:	50                   	push   eax
c001c637:	6a 0c                	push   0xc
c001c639:	56                   	push   esi
c001c63a:	53                   	push   ebx
c001c63b:	e8 0c ff ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c640:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c644:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001c649:	0f b6 d2             	movzx  edx,dl
c001c64c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c650:	ec                   	in     al,dx
c001c651:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c655:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001c65a:	52                   	push   edx
c001c65b:	6a 0c                	push   0xc
c001c65d:	56                   	push   esi
c001c65e:	53                   	push   ebx
c001c65f:	e8 e8 fe ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c664:	83 c4 20             	add    esp,0x20
c001c667:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c66b:	eb 4c                	jmp    c001c6b9 <IDE::read(unsigned char, unsigned char)+0xad>
c001c66d:	0f b6 f2             	movzx  esi,dl
c001c670:	83 fe 07             	cmp    esi,0x7
c001c673:	77 12                	ja     c001c687 <IDE::read(unsigned char, unsigned char)+0x7b>
c001c675:	0f b6 c9             	movzx  ecx,cl
c001c678:	0f b6 d2             	movzx  edx,dl
c001c67b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001c683:	01 c2                	add    edx,eax
c001c685:	eb 31                	jmp    c001c6b8 <IDE::read(unsigned char, unsigned char)+0xac>
c001c687:	83 fe 0d             	cmp    esi,0xd
c001c68a:	77 13                	ja     c001c69f <IDE::read(unsigned char, unsigned char)+0x93>
c001c68c:	0f b6 c9             	movzx  ecx,cl
c001c68f:	0f b6 d2             	movzx  edx,dl
c001c692:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001c699:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c69d:	eb 19                	jmp    c001c6b8 <IDE::read(unsigned char, unsigned char)+0xac>
c001c69f:	31 c0                	xor    eax,eax
c001c6a1:	83 fe 15             	cmp    esi,0x15
c001c6a4:	77 13                	ja     c001c6b9 <IDE::read(unsigned char, unsigned char)+0xad>
c001c6a6:	0f b6 c9             	movzx  ecx,cl
c001c6a9:	0f b6 d2             	movzx  edx,dl
c001c6ac:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001c6b4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c6b8:	ec                   	in     al,dx
c001c6b9:	83 c4 10             	add    esp,0x10
c001c6bc:	5b                   	pop    ebx
c001c6bd:	5e                   	pop    esi
c001c6be:	5f                   	pop    edi
c001c6bf:	c3                   	ret    

c001c6c0 <IDE::waitInterrupt(unsigned char)>:
c001c6c0:	55                   	push   ebp
c001c6c1:	57                   	push   edi
c001c6c2:	56                   	push   esi
c001c6c3:	53                   	push   ebx
c001c6c4:	31 db                	xor    ebx,ebx
c001c6c6:	83 ec 0c             	sub    esp,0xc
c001c6c9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c6cd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c6d2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c6da:	89 e8                	mov    eax,ebp
c001c6dc:	84 c0                	test   al,al
c001c6de:	75 30                	jne    c001c710 <IDE::waitInterrupt(unsigned char)+0x50>
c001c6e0:	50                   	push   eax
c001c6e1:	6a 0c                	push   0xc
c001c6e3:	56                   	push   esi
c001c6e4:	57                   	push   edi
c001c6e5:	e8 22 ff ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001c6ea:	83 c4 10             	add    esp,0x10
c001c6ed:	a8 01                	test   al,0x1
c001c6ef:	75 27                	jne    c001c718 <IDE::waitInterrupt(unsigned char)+0x58>
c001c6f1:	f6 c3 04             	test   bl,0x4
c001c6f4:	75 12                	jne    c001c708 <IDE::waitInterrupt(unsigned char)+0x48>
c001c6f6:	83 fb 32             	cmp    ebx,0x32
c001c6f9:	7e 0d                	jle    c001c708 <IDE::waitInterrupt(unsigned char)+0x48>
c001c6fb:	83 ec 0c             	sub    esp,0xc
c001c6fe:	6a 64                	push   0x64
c001c700:	e8 bf 8e ff ff       	call   c00155c4 <milliTenthSleep(unsigned int)>
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	83 fb 3c             	cmp    ebx,0x3c
c001c70b:	74 0b                	je     c001c718 <IDE::waitInterrupt(unsigned char)+0x58>
c001c70d:	43                   	inc    ebx
c001c70e:	eb c2                	jmp    c001c6d2 <IDE::waitInterrupt(unsigned char)+0x12>
c001c710:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c718:	83 c4 0c             	add    esp,0xc
c001c71b:	89 e8                	mov    eax,ebp
c001c71d:	5b                   	pop    ebx
c001c71e:	5e                   	pop    esi
c001c71f:	5f                   	pop    edi
c001c720:	5d                   	pop    ebp
c001c721:	c3                   	ret    

c001c722 <ideChannel0IRQHandler(regs*, void*)>:
c001c722:	83 ec 10             	sub    esp,0x10
c001c725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c729:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c730:	6a 07                	push   0x7
c001c732:	6a 00                	push   0x0
c001c734:	50                   	push   eax
c001c735:	e8 d2 fe ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001c73a:	83 c4 1c             	add    esp,0x1c
c001c73d:	c3                   	ret    

c001c73e <ideChannel1IRQHandler(regs*, void*)>:
c001c73e:	83 ec 10             	sub    esp,0x10
c001c741:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c745:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c74c:	6a 07                	push   0x7
c001c74e:	6a 01                	push   0x1
c001c750:	50                   	push   eax
c001c751:	e8 b6 fe ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001c756:	83 c4 1c             	add    esp,0x1c
c001c759:	c3                   	ret    

c001c75a <IDE::enableIRQs(unsigned char, bool)>:
c001c75a:	57                   	push   edi
c001c75b:	b8 02 00 00 00       	mov    eax,0x2
c001c760:	56                   	push   esi
c001c761:	53                   	push   ebx
c001c762:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c76b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c76f:	74 02                	je     c001c773 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c771:	31 c0                	xor    eax,eax
c001c773:	0f b6 db             	movzx  ebx,bl
c001c776:	bf 04 00 00 00       	mov    edi,0x4
c001c77b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c782:	50                   	push   eax
c001c783:	6a 0c                	push   0xc
c001c785:	53                   	push   ebx
c001c786:	56                   	push   esi
c001c787:	e8 c0 fd ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c78c:	83 c4 10             	add    esp,0x10
c001c78f:	50                   	push   eax
c001c790:	6a 0c                	push   0xc
c001c792:	53                   	push   ebx
c001c793:	56                   	push   esi
c001c794:	e8 73 fe ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001c799:	83 c4 10             	add    esp,0x10
c001c79c:	4f                   	dec    edi
c001c79d:	75 f0                	jne    c001c78f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c79f:	5b                   	pop    ebx
c001c7a0:	5e                   	pop    esi
c001c7a1:	5f                   	pop    edi
c001c7a2:	c3                   	ret    
c001c7a3:	90                   	nop

c001c7a4 <IDE::open(int, int, void*)>:
c001c7a4:	55                   	push   ebp
c001c7a5:	57                   	push   edi
c001c7a6:	56                   	push   esi
c001c7a7:	53                   	push   ebx
c001c7a8:	83 ec 1c             	sub    esp,0x1c
c001c7ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c7af:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c7b6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c7bf:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c7c8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c7cf:	0f 85 13 02 00 00    	jne    c001c9e8 <IDE::open(int, int, void*)+0x244>
c001c7d5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c7db:	a8 70                	test   al,0x70
c001c7dd:	75 44                	jne    c001c823 <IDE::open(int, int, void*)+0x7f>
c001c7df:	ba 20 84 00 00       	mov    edx,0x8420
c001c7e4:	0f a3 c2             	bt     edx,eax
c001c7e7:	73 3a                	jae    c001c823 <IDE::open(int, int, void*)+0x7f>
c001c7e9:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c7ef:	83 ec 0c             	sub    esp,0xc
c001c7f2:	83 e0 fc             	and    eax,0xfffffffc
c001c7f5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c7fc:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c802:	83 e0 fc             	and    eax,0xfffffffc
c001c805:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c80c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c812:	83 e0 fc             	and    eax,0xfffffffc
c001c815:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c81c:	68 45 13 02 c0       	push   0xc0021345
c001c821:	eb 60                	jmp    c001c883 <IDE::open(int, int, void*)+0xdf>
c001c823:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c82d:	be 64 00 00 00       	mov    esi,0x64
c001c832:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c83c:	57                   	push   edi
c001c83d:	57                   	push   edi
c001c83e:	68 b8 35 02 c0       	push   0xc00235b8
c001c843:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c847:	57                   	push   edi
c001c848:	e8 03 3e fe ff       	call   c0000650 <strcpy>
c001c84d:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c854:	31 d2                	xor    edx,edx
c001c856:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c859:	89 c8                	mov    eax,ecx
c001c85b:	f7 f6                	div    esi
c001c85d:	be 0a 00 00 00       	mov    esi,0xa
c001c862:	31 d2                	xor    edx,edx
c001c864:	83 c0 30             	add    eax,0x30
c001c867:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c86b:	89 c8                	mov    eax,ecx
c001c86d:	f7 f6                	div    esi
c001c86f:	89 d1                	mov    ecx,edx
c001c871:	31 d2                	xor    edx,edx
c001c873:	f7 f6                	div    esi
c001c875:	83 c1 30             	add    ecx,0x30
c001c878:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c87c:	83 c2 30             	add    edx,0x30
c001c87f:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c883:	e8 13 fd fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c888:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c88f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c894:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c89b:	83 c4 10             	add    esp,0x10
c001c89e:	89 fa                	mov    edx,edi
c001c8a0:	c1 e1 10             	shl    ecx,0x10
c001c8a3:	c1 e0 0b             	shl    eax,0xb
c001c8a6:	09 c1                	or     ecx,eax
c001c8a8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c8af:	c1 e0 08             	shl    eax,0x8
c001c8b2:	09 c1                	or     ecx,eax
c001c8b4:	89 c8                	mov    eax,ecx
c001c8b6:	0d 08 00 00 80       	or     eax,0x80000008
c001c8bb:	ef                   	out    dx,eax
c001c8bc:	be fc 0c 00 00       	mov    esi,0xcfc
c001c8c1:	89 f2                	mov    edx,esi
c001c8c3:	ed                   	in     eax,dx
c001c8c4:	c1 e8 10             	shr    eax,0x10
c001c8c7:	3d ff ff 00 00       	cmp    eax,0xffff
c001c8cc:	0f 84 e1 00 00 00    	je     c001c9b3 <IDE::open(int, int, void*)+0x20f>
c001c8d2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c8d8:	89 fa                	mov    edx,edi
c001c8da:	89 c8                	mov    eax,ecx
c001c8dc:	ef                   	out    dx,eax
c001c8dd:	b0 fe                	mov    al,0xfe
c001c8df:	89 f2                	mov    edx,esi
c001c8e1:	ee                   	out    dx,al
c001c8e2:	89 c8                	mov    eax,ecx
c001c8e4:	89 fa                	mov    edx,edi
c001c8e6:	ef                   	out    dx,eax
c001c8e7:	89 f2                	mov    edx,esi
c001c8e9:	ed                   	in     eax,dx
c001c8ea:	3c fe                	cmp    al,0xfe
c001c8ec:	0f 85 83 00 00 00    	jne    c001c975 <IDE::open(int, int, void*)+0x1d1>
c001c8f2:	83 ec 0c             	sub    esp,0xc
c001c8f5:	68 7b 13 02 c0       	push   0xc002137b
c001c8fa:	e8 9c fc fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c8ff:	c7 04 24 be 35 02 c0 	mov    DWORD PTR [esp],0xc00235be
c001c906:	e8 43 a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c90b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c915:	c7 04 24 ac 15 02 c0 	mov    DWORD PTR [esp],0xc00215ac
c001c91c:	e8 7a fc fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c921:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c928:	89 fa                	mov    edx,edi
c001c92a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c931:	c1 e1 10             	shl    ecx,0x10
c001c934:	c1 e0 08             	shl    eax,0x8
c001c937:	09 c1                	or     ecx,eax
c001c939:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c940:	c1 e0 0b             	shl    eax,0xb
c001c943:	09 c1                	or     ecx,eax
c001c945:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c94b:	89 c8                	mov    eax,ecx
c001c94d:	ef                   	out    dx,eax
c001c94e:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001c954:	89 f2                	mov    edx,esi
c001c956:	89 e8                	mov    eax,ebp
c001c958:	ee                   	out    dx,al
c001c959:	89 c8                	mov    eax,ecx
c001c95b:	89 fa                	mov    edx,edi
c001c95d:	ef                   	out    dx,eax
c001c95e:	89 f2                	mov    edx,esi
c001c960:	ed                   	in     eax,dx
c001c961:	0f b6 c0             	movzx  eax,al
c001c964:	83 c4 10             	add    esp,0x10
c001c967:	39 e8                	cmp    eax,ebp
c001c969:	74 58                	je     c001c9c3 <IDE::open(int, int, void*)+0x21f>
c001c96b:	83 ec 0c             	sub    esp,0xc
c001c96e:	68 d3 35 02 c0       	push   0xc00235d3
c001c973:	eb 46                	jmp    c001c9bb <IDE::open(int, int, void*)+0x217>
c001c975:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c97e:	75 29                	jne    c001c9a9 <IDE::open(int, int, void*)+0x205>
c001c980:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001c987:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c98c:	74 05                	je     c001c993 <IDE::open(int, int, void*)+0x1ef>
c001c98e:	83 c0 80             	add    eax,0xffffff80
c001c991:	75 16                	jne    c001c9a9 <IDE::open(int, int, void*)+0x205>
c001c993:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c99a:	83 ec 0c             	sub    esp,0xc
c001c99d:	68 69 23 02 c0       	push   0xc0022369
c001c9a2:	e8 f4 fb fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c9a7:	eb 17                	jmp    c001c9c0 <IDE::open(int, int, void*)+0x21c>
c001c9a9:	83 ec 0c             	sub    esp,0xc
c001c9ac:	68 db 35 02 c0       	push   0xc00235db
c001c9b1:	eb 08                	jmp    c001c9bb <IDE::open(int, int, void*)+0x217>
c001c9b3:	83 ec 0c             	sub    esp,0xc
c001c9b6:	68 0c 36 02 c0       	push   0xc002360c
c001c9bb:	e8 56 22 ff ff       	call   c000ec16 <KePanic(char const*)>
c001c9c0:	83 c4 10             	add    esp,0x10
c001c9c3:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c9ca:	74 56                	je     c001ca22 <IDE::open(int, int, void*)+0x27e>
c001c9cc:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c9d2:	83 e0 fc             	and    eax,0xfffffffc
c001c9d5:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c9dc:	83 c0 08             	add    eax,0x8
c001c9df:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c9e6:	eb 3a                	jmp    c001ca22 <IDE::open(int, int, void*)+0x27e>
c001c9e8:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c9ef:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c9f5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c9fc:	05 06 02 00 00       	add    eax,0x206
c001ca01:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca08:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ca0f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ca16:	05 06 02 00 00       	add    eax,0x206
c001ca1b:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ca22:	83 ec 0c             	sub    esp,0xc
c001ca25:	68 a3 1a 02 c0       	push   0xc0021aa3
c001ca2a:	e8 6c fb fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ca2f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ca35:	83 c4 10             	add    esp,0x10
c001ca38:	89 c2                	mov    edx,eax
c001ca3a:	83 e2 0f             	and    edx,0xf
c001ca3d:	83 fa 08             	cmp    edx,0x8
c001ca40:	75 0a                	jne    c001ca4c <IDE::open(int, int, void*)+0x2a8>
c001ca42:	83 e8 02             	sub    eax,0x2
c001ca45:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca4c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ca52:	89 c2                	mov    edx,eax
c001ca54:	83 e2 0f             	and    edx,0xf
c001ca57:	83 fa 08             	cmp    edx,0x8
c001ca5a:	75 0a                	jne    c001ca66 <IDE::open(int, int, void*)+0x2c2>
c001ca5c:	83 e8 02             	sub    eax,0x2
c001ca5f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ca66:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ca6d:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ca74:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ca77:	89 d0                	mov    eax,edx
c001ca79:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ca7d:	8d 7a 01             	lea    edi,[edx+0x1]
c001ca80:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ca84:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ca88:	83 e1 3f             	and    ecx,0x3f
c001ca8b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ca8f:	89 f9                	mov    ecx,edi
c001ca91:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ca98:	8d 78 02             	lea    edi,[eax+0x2]
c001ca9b:	0f b6 c9             	movzx  ecx,cl
c001ca9e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001caa1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001caa5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001caa9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001caad:	83 e2 3f             	and    edx,0x3f
c001cab0:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cab4:	89 f9                	mov    ecx,edi
c001cab6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cabc:	8d 78 03             	lea    edi,[eax+0x3]
c001cabf:	0f b6 d1             	movzx  edx,cl
c001cac2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cac5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cac9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cacd:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cad1:	83 e1 3f             	and    ecx,0x3f
c001cad4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cad8:	89 fa                	mov    edx,edi
c001cada:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cae0:	8d 78 04             	lea    edi,[eax+0x4]
c001cae3:	0f b6 ca             	movzx  ecx,dl
c001cae6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cae9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001caed:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001caf1:	89 fa                	mov    edx,edi
c001caf3:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001caf9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cafd:	83 e2 3f             	and    edx,0x3f
c001cb00:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cb04:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cb0b:	66 85 f6             	test   si,si
c001cb0e:	74 24                	je     c001cb34 <IDE::open(int, int, void*)+0x390>
c001cb10:	89 f9                	mov    ecx,edi
c001cb12:	83 c0 05             	add    eax,0x5
c001cb15:	0f b6 d1             	movzx  edx,cl
c001cb18:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb1b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb1f:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cb23:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cb29:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cb2d:	83 e0 3f             	and    eax,0x3f
c001cb30:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cb34:	83 ec 0c             	sub    esp,0xc
c001cb37:	68 36 36 02 c0       	push   0xc0023636
c001cb3c:	e8 5a fa fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cb41:	58                   	pop    eax
c001cb42:	5a                   	pop    edx
c001cb43:	6a 00                	push   0x0
c001cb45:	53                   	push   ebx
c001cb46:	e8 db f9 ff ff       	call   c001c526 <IDE::prepareInterrupt(unsigned char)>
c001cb4b:	59                   	pop    ecx
c001cb4c:	5e                   	pop    esi
c001cb4d:	6a 01                	push   0x1
c001cb4f:	53                   	push   ebx
c001cb50:	e8 d1 f9 ff ff       	call   c001c526 <IDE::prepareInterrupt(unsigned char)>
c001cb55:	c7 04 24 cf 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ecf
c001cb5c:	e8 3a fa fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cb61:	83 c4 0c             	add    esp,0xc
c001cb64:	6a 00                	push   0x0
c001cb66:	6a 00                	push   0x0
c001cb68:	53                   	push   ebx
c001cb69:	e8 ec fb ff ff       	call   c001c75a <IDE::enableIRQs(unsigned char, bool)>
c001cb6e:	83 c4 0c             	add    esp,0xc
c001cb71:	6a 00                	push   0x0
c001cb73:	6a 01                	push   0x1
c001cb75:	53                   	push   ebx
c001cb76:	e8 df fb ff ff       	call   c001c75a <IDE::enableIRQs(unsigned char, bool)>
c001cb7b:	c7 04 24 38 36 02 c0 	mov    DWORD PTR [esp],0xc0023638
c001cb82:	e8 14 fa fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cb91:	74 3c                	je     c001cbcf <IDE::open(int, int, void*)+0x42b>
c001cb93:	83 ec 0c             	sub    esp,0xc
c001cb96:	53                   	push   ebx
c001cb97:	6a 01                	push   0x1
c001cb99:	68 22 c7 01 c0       	push   0xc001c722
c001cb9e:	6a 0e                	push   0xe
c001cba0:	53                   	push   ebx
c001cba1:	e8 4c c4 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cba6:	83 c4 14             	add    esp,0x14
c001cba9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cbaf:	53                   	push   ebx
c001cbb0:	6a 01                	push   0x1
c001cbb2:	68 3e c7 01 c0       	push   0xc001c73e
c001cbb7:	6a 0f                	push   0xf
c001cbb9:	53                   	push   ebx
c001cbba:	e8 33 c4 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbbf:	83 c4 14             	add    esp,0x14
c001cbc2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cbc8:	68 b2 17 02 c0       	push   0xc00217b2
c001cbcd:	eb 40                	jmp    c001cc0f <IDE::open(int, int, void*)+0x46b>
c001cbcf:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cbd9:	83 ec 0c             	sub    esp,0xc
c001cbdc:	53                   	push   ebx
c001cbdd:	6a 00                	push   0x0
c001cbdf:	68 22 c7 01 c0       	push   0xc001c722
c001cbe4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cbea:	53                   	push   ebx
c001cbeb:	e8 02 c4 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbf0:	83 c4 14             	add    esp,0x14
c001cbf3:	53                   	push   ebx
c001cbf4:	6a 00                	push   0x0
c001cbf6:	68 3e c7 01 c0       	push   0xc001c73e
c001cbfb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cc01:	53                   	push   ebx
c001cc02:	e8 eb c3 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc07:	83 c4 14             	add    esp,0x14
c001cc0a:	68 58 23 02 c0       	push   0xc0022358
c001cc0f:	e8 87 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc14:	83 c4 10             	add    esp,0x10
c001cc17:	83 ec 0c             	sub    esp,0xc
c001cc1a:	68 3a 36 02 c0       	push   0xc002363a
c001cc1f:	e8 77 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc24:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc29:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cc2c:	c7 04 24 16 27 02 c0 	mov    DWORD PTR [esp],0xc0022716
c001cc33:	e8 63 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc38:	83 c4 0c             	add    esp,0xc
c001cc3b:	6a 07                	push   0x7
c001cc3d:	6a 00                	push   0x0
c001cc3f:	53                   	push   ebx
c001cc40:	e8 c7 f9 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001cc45:	83 c4 0c             	add    esp,0xc
c001cc48:	6a 07                	push   0x7
c001cc4a:	6a 01                	push   0x1
c001cc4c:	53                   	push   ebx
c001cc4d:	e8 ba f9 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001cc52:	c7 04 24 68 21 02 c0 	mov    DWORD PTR [esp],0xc0022168
c001cc59:	e8 3d f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc5e:	83 c4 0c             	add    esp,0xc
c001cc61:	6a 01                	push   0x1
c001cc63:	6a 00                	push   0x0
c001cc65:	53                   	push   ebx
c001cc66:	e8 ef fa ff ff       	call   c001c75a <IDE::enableIRQs(unsigned char, bool)>
c001cc6b:	83 c4 0c             	add    esp,0xc
c001cc6e:	6a 01                	push   0x1
c001cc70:	6a 01                	push   0x1
c001cc72:	53                   	push   ebx
c001cc73:	e8 e2 fa ff ff       	call   c001c75a <IDE::enableIRQs(unsigned char, bool)>
c001cc78:	c7 04 24 3d 36 02 c0 	mov    DWORD PTR [esp],0xc002363d
c001cc7f:	e8 17 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc84:	83 c4 2c             	add    esp,0x2c
c001cc87:	31 c0                	xor    eax,eax
c001cc89:	5b                   	pop    ebx
c001cc8a:	5e                   	pop    esi
c001cc8b:	5f                   	pop    edi
c001cc8c:	5d                   	pop    ebp
c001cc8d:	c3                   	ret    

c001cc8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cc8e:	55                   	push   ebp
c001cc8f:	57                   	push   edi
c001cc90:	56                   	push   esi
c001cc91:	53                   	push   ebx
c001cc92:	83 ec 1c             	sub    esp,0x1c
c001cc95:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cc99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc9d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cca1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cca5:	8d 42 f8             	lea    eax,[edx-0x8]
c001cca8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ccac:	3c 03                	cmp    al,0x3
c001ccae:	77 5a                	ja     c001cd0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001ccb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ccb4:	0f b6 db             	movzx  ebx,bl
c001ccb7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ccbb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ccbe:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ccc3:	0c 80                	or     al,0x80
c001ccc5:	50                   	push   eax
c001ccc6:	6a 0c                	push   0xc
c001ccc8:	53                   	push   ebx
c001ccc9:	56                   	push   esi
c001ccca:	e8 7d f8 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cccf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ccd3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ccd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccdc:	0f b6 d2             	movzx  edx,dl
c001ccdf:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cce3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cce5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ccea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ccee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ccf2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ccfa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ccfe:	83 c4 2c             	add    esp,0x2c
c001cd01:	5b                   	pop    ebx
c001cd02:	5e                   	pop    esi
c001cd03:	5f                   	pop    edi
c001cd04:	5d                   	pop    ebp
c001cd05:	e9 42 f8 ff ff       	jmp    c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd0a:	0f b6 c2             	movzx  eax,dl
c001cd0d:	83 f8 07             	cmp    eax,0x7
c001cd10:	77 12                	ja     c001cd24 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001cd12:	0f b6 db             	movzx  ebx,bl
c001cd15:	0f b6 c2             	movzx  eax,dl
c001cd18:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001cd20:	01 c2                	add    edx,eax
c001cd22:	eb 2f                	jmp    c001cd53 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cd24:	83 f8 0d             	cmp    eax,0xd
c001cd27:	77 13                	ja     c001cd3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001cd29:	0f b6 db             	movzx  ebx,bl
c001cd2c:	0f b6 d2             	movzx  edx,dl
c001cd2f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001cd36:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cd3a:	eb 17                	jmp    c001cd53 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cd3c:	83 f8 15             	cmp    eax,0x15
c001cd3f:	77 14                	ja     c001cd55 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001cd41:	0f b6 db             	movzx  ebx,bl
c001cd44:	0f b6 d2             	movzx  edx,dl
c001cd47:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001cd4f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cd53:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd55:	83 c4 1c             	add    esp,0x1c
c001cd58:	5b                   	pop    ebx
c001cd59:	5e                   	pop    esi
c001cd5a:	5f                   	pop    edi
c001cd5b:	5d                   	pop    ebp
c001cd5c:	c3                   	ret    
c001cd5d:	90                   	nop

c001cd5e <IDE::detect()>:
c001cd5e:	55                   	push   ebp
c001cd5f:	57                   	push   edi
c001cd60:	56                   	push   esi
c001cd61:	53                   	push   ebx
c001cd62:	81 ec 28 02 00 00    	sub    esp,0x228
c001cd68:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001cd6f:	68 3f 36 02 c0       	push   0xc002363f
c001cd74:	e8 22 f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd79:	83 c4 10             	add    esp,0x10
c001cd7c:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cd83:	0f 85 03 04 00 00    	jne    c001d18c <IDE::detect()+0x42e>
c001cd89:	83 ec 0c             	sub    esp,0xc
c001cd8c:	31 f6                	xor    esi,esi
c001cd8e:	68 42 36 02 c0       	push   0xc0023642
c001cd93:	31 ff                	xor    edi,edi
c001cd95:	e8 01 f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd9a:	83 c4 10             	add    esp,0x10
c001cd9d:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cda4:	83 ec 0c             	sub    esp,0xc
c001cda7:	68 45 36 02 c0       	push   0xc0023645
c001cdac:	e8 ea f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdbc:	83 ec 0c             	sub    esp,0xc
c001cdbf:	31 ed                	xor    ebp,ebp
c001cdc1:	68 48 36 02 c0       	push   0xc0023648
c001cdc6:	e8 d0 f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cdcb:	89 f8                	mov    eax,edi
c001cdcd:	c1 e0 06             	shl    eax,0x6
c001cdd0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cdd8:	c7 04 24 4b 36 02 c0 	mov    DWORD PTR [esp],0xc002364b
c001cddf:	e8 b7 f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cde4:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001cde8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cdec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdf0:	c1 e0 04             	shl    eax,0x4
c001cdf3:	83 c8 a0             	or     eax,0xffffffa0
c001cdf6:	0f b6 c0             	movzx  eax,al
c001cdf9:	50                   	push   eax
c001cdfa:	6a 06                	push   0x6
c001cdfc:	56                   	push   esi
c001cdfd:	53                   	push   ebx
c001cdfe:	e8 49 f7 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce03:	83 c4 1c             	add    esp,0x1c
c001ce06:	6a 0c                	push   0xc
c001ce08:	56                   	push   esi
c001ce09:	53                   	push   ebx
c001ce0a:	e8 fd f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce0f:	83 c4 0c             	add    esp,0xc
c001ce12:	6a 0c                	push   0xc
c001ce14:	56                   	push   esi
c001ce15:	53                   	push   ebx
c001ce16:	e8 f1 f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce1b:	83 c4 0c             	add    esp,0xc
c001ce1e:	6a 0c                	push   0xc
c001ce20:	56                   	push   esi
c001ce21:	53                   	push   ebx
c001ce22:	e8 e5 f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce27:	83 c4 0c             	add    esp,0xc
c001ce2a:	6a 0c                	push   0xc
c001ce2c:	56                   	push   esi
c001ce2d:	53                   	push   ebx
c001ce2e:	e8 d9 f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce33:	c7 04 24 4e 36 02 c0 	mov    DWORD PTR [esp],0xc002364e
c001ce3a:	e8 5c f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ce3f:	68 ec 00 00 00       	push   0xec
c001ce44:	6a 07                	push   0x7
c001ce46:	56                   	push   esi
c001ce47:	53                   	push   ebx
c001ce48:	e8 ff f6 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce4d:	83 c4 1c             	add    esp,0x1c
c001ce50:	6a 0c                	push   0xc
c001ce52:	56                   	push   esi
c001ce53:	53                   	push   ebx
c001ce54:	e8 b3 f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce59:	83 c4 0c             	add    esp,0xc
c001ce5c:	6a 0c                	push   0xc
c001ce5e:	56                   	push   esi
c001ce5f:	53                   	push   ebx
c001ce60:	e8 a7 f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce65:	83 c4 0c             	add    esp,0xc
c001ce68:	6a 0c                	push   0xc
c001ce6a:	56                   	push   esi
c001ce6b:	53                   	push   ebx
c001ce6c:	e8 9b f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce71:	83 c4 0c             	add    esp,0xc
c001ce74:	6a 0c                	push   0xc
c001ce76:	56                   	push   esi
c001ce77:	53                   	push   ebx
c001ce78:	e8 8f f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce7d:	c7 04 24 51 36 02 c0 	mov    DWORD PTR [esp],0xc0023651
c001ce84:	e8 12 f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ce89:	83 c4 0c             	add    esp,0xc
c001ce8c:	6a 0c                	push   0xc
c001ce8e:	56                   	push   esi
c001ce8f:	53                   	push   ebx
c001ce90:	e8 77 f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001ce95:	83 c4 10             	add    esp,0x10
c001ce98:	84 c0                	test   al,al
c001ce9a:	75 1f                	jne    c001cebb <IDE::detect()+0x15d>
c001ce9c:	83 ec 0c             	sub    esp,0xc
c001ce9f:	68 54 36 02 c0       	push   0xc0023654
c001cea4:	e8 f2 f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cea9:	e9 ba 02 00 00       	jmp    c001d168 <IDE::detect()+0x40a>
c001ceae:	a8 80                	test   al,0x80
c001ceb0:	74 21                	je     c001ced3 <IDE::detect()+0x175>
c001ceb2:	45                   	inc    ebp
c001ceb3:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001ceb9:	7f 1e                	jg     c001ced9 <IDE::detect()+0x17b>
c001cebb:	50                   	push   eax
c001cebc:	6a 0c                	push   0xc
c001cebe:	56                   	push   esi
c001cebf:	53                   	push   ebx
c001cec0:	e8 47 f7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001cec5:	83 c4 10             	add    esp,0x10
c001cec8:	a8 01                	test   al,0x1
c001ceca:	74 e2                	je     c001ceae <IDE::detect()+0x150>
c001cecc:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ced1:	eb 22                	jmp    c001cef5 <IDE::detect()+0x197>
c001ced3:	a8 08                	test   al,0x8
c001ced5:	74 db                	je     c001ceb2 <IDE::detect()+0x154>
c001ced7:	eb 17                	jmp    c001cef0 <IDE::detect()+0x192>
c001ced9:	83 ec 0c             	sub    esp,0xc
c001cedc:	6a 32                	push   0x32
c001cede:	e8 e1 86 ff ff       	call   c00155c4 <milliTenthSleep(unsigned int)>
c001cee3:	83 c4 10             	add    esp,0x10
c001cee6:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001ceec:	75 cd                	jne    c001cebb <IDE::detect()+0x15d>
c001ceee:	eb dc                	jmp    c001cecc <IDE::detect()+0x16e>
c001cef0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cef5:	83 ec 0c             	sub    esp,0xc
c001cef8:	68 57 36 02 c0       	push   0xc0023657
c001cefd:	e8 99 f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cf02:	83 c4 10             	add    esp,0x10
c001cf05:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001cf0a:	74 57                	je     c001cf63 <IDE::detect()+0x205>
c001cf0c:	50                   	push   eax
c001cf0d:	6a 04                	push   0x4
c001cf0f:	56                   	push   esi
c001cf10:	53                   	push   ebx
c001cf11:	e8 f6 f6 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001cf16:	83 c4 0c             	add    esp,0xc
c001cf19:	6a 05                	push   0x5
c001cf1b:	56                   	push   esi
c001cf1c:	53                   	push   ebx
c001cf1d:	89 c5                	mov    ebp,eax
c001cf1f:	e8 e8 f6 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001cf24:	89 e9                	mov    ecx,ebp
c001cf26:	83 c4 10             	add    esp,0x10
c001cf29:	0f b6 e9             	movzx  ebp,cl
c001cf2c:	83 fd 14             	cmp    ebp,0x14
c001cf2f:	75 04                	jne    c001cf35 <IDE::detect()+0x1d7>
c001cf31:	3c eb                	cmp    al,0xeb
c001cf33:	74 11                	je     c001cf46 <IDE::detect()+0x1e8>
c001cf35:	83 fd 69             	cmp    ebp,0x69
c001cf38:	0f 85 2d 02 00 00    	jne    c001d16b <IDE::detect()+0x40d>
c001cf3e:	3c 96                	cmp    al,0x96
c001cf40:	0f 85 25 02 00 00    	jne    c001d16b <IDE::detect()+0x40d>
c001cf46:	68 a1 00 00 00       	push   0xa1
c001cf4b:	6a 07                	push   0x7
c001cf4d:	56                   	push   esi
c001cf4e:	53                   	push   ebx
c001cf4f:	e8 f8 f5 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf54:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001cf5b:	e8 64 86 ff ff       	call   c00155c4 <milliTenthSleep(unsigned int)>
c001cf60:	83 c4 10             	add    esp,0x10
c001cf63:	83 ec 0c             	sub    esp,0xc
c001cf66:	89 fd                	mov    ebp,edi
c001cf68:	68 5a 36 02 c0       	push   0xc002365a
c001cf6d:	e8 29 f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cf72:	8d 54 24 20          	lea    edx,[esp+0x20]
c001cf76:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001cf7d:	c1 e5 06             	shl    ebp,0x6
c001cf80:	52                   	push   edx
c001cf81:	01 dd                	add    ebp,ebx
c001cf83:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001cf87:	6a 00                	push   0x0
c001cf89:	56                   	push   esi
c001cf8a:	53                   	push   ebx
c001cf8b:	e8 fe fc ff ff       	call   c001cc8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cf90:	83 c4 14             	add    esp,0x14
c001cf93:	68 5e 36 02 c0       	push   0xc002365e
c001cf98:	e8 fe f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cf9d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001cfa2:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001cfa9:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001cfb0:	89 f0                	mov    eax,esi
c001cfb2:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001cfb8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cfbc:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001cfc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc6:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001cfcd:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001cfd5:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001cfdc:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001cfe4:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001cfea:	c7 04 24 62 36 02 c0 	mov    DWORD PTR [esp],0xc0023662
c001cff1:	e8 a5 f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cff6:	83 c4 10             	add    esp,0x10
c001cff9:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d000:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d004:	74 09                	je     c001d00f <IDE::detect()+0x2b1>
c001d006:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d00d:	eb 07                	jmp    c001d016 <IDE::detect()+0x2b8>
c001d00f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d016:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d01a:	89 f8                	mov    eax,edi
c001d01c:	83 ec 0c             	sub    esp,0xc
c001d01f:	c1 e0 06             	shl    eax,0x6
c001d022:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d025:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d02b:	68 66 36 02 c0       	push   0xc0023666
c001d030:	e8 66 f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d035:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d039:	89 e8                	mov    eax,ebp
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d041:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d044:	83 c2 02             	add    edx,0x2
c001d047:	83 c0 02             	add    eax,0x2
c001d04a:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d050:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d053:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d059:	39 d5                	cmp    ebp,edx
c001d05b:	75 e4                	jne    c001d041 <IDE::detect()+0x2e3>
c001d05d:	89 fd                	mov    ebp,edi
c001d05f:	83 ec 0c             	sub    esp,0xc
c001d062:	c1 e5 06             	shl    ebp,0x6
c001d065:	01 dd                	add    ebp,ebx
c001d067:	c6 85 a8 01 00 00 00 	mov    BYTE PTR [ebp+0x1a8],0x0
c001d06e:	0f b7 85 74 01 00 00 	movzx  eax,WORD PTR [ebp+0x174]
c001d075:	c1 e8 09             	shr    eax,0x9
c001d078:	83 e0 01             	and    eax,0x1
c001d07b:	88 85 a9 01 00 00    	mov    BYTE PTR [ebp+0x1a9],al
c001d081:	68 6a 36 02 c0       	push   0xc002366a
c001d086:	e8 10 f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d08b:	83 c4 10             	add    esp,0x10
c001d08e:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001d093:	75 66                	jne    c001d0fb <IDE::detect()+0x39d>
c001d095:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d09c:	0f 84 b8 00 00 00    	je     c001d15a <IDE::detect()+0x3fc>
c001d0a2:	83 ec 0c             	sub    esp,0xc
c001d0a5:	68 6e 36 02 c0       	push   0xc002366e
c001d0aa:	e8 ec f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0af:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d0b6:	e8 15 18 ff ff       	call   c000e8d0 <malloc>
c001d0bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0be:	89 c5                	mov    ebp,eax
c001d0c0:	e8 47 05 00 00       	call   c001d60c <ATA::ATA()>
c001d0c5:	c7 04 24 72 36 02 c0 	mov    DWORD PTR [esp],0xc0023672
c001d0cc:	e8 ca f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0d1:	59                   	pop    ecx
c001d0d2:	58                   	pop    eax
c001d0d3:	55                   	push   ebp
c001d0d4:	53                   	push   ebx
c001d0d5:	e8 6c bf fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d0da:	c7 04 24 77 36 02 c0 	mov    DWORD PTR [esp],0xc0023677
c001d0e1:	e8 b5 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0e9:	53                   	push   ebx
c001d0ea:	57                   	push   edi
c001d0eb:	6a 00                	push   0x0
c001d0ed:	55                   	push   ebp
c001d0ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0f1:	83 c4 14             	add    esp,0x14
c001d0f4:	68 7c 36 02 c0       	push   0xc002367c
c001d0f9:	eb 57                	jmp    c001d152 <IDE::detect()+0x3f4>
c001d0fb:	83 ec 0c             	sub    esp,0xc
c001d0fe:	68 81 36 02 c0       	push   0xc0023681
c001d103:	e8 93 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d108:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d10f:	e8 bc 17 ff ff       	call   c000e8d0 <malloc>
c001d114:	89 04 24             	mov    DWORD PTR [esp],eax
c001d117:	89 c5                	mov    ebp,eax
c001d119:	e8 96 0b 00 00       	call   c001dcb4 <ATAPI::ATAPI()>
c001d11e:	c7 04 24 87 36 02 c0 	mov    DWORD PTR [esp],0xc0023687
c001d125:	e8 71 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d12a:	58                   	pop    eax
c001d12b:	5a                   	pop    edx
c001d12c:	55                   	push   ebp
c001d12d:	53                   	push   ebx
c001d12e:	e8 13 bf fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d133:	c7 04 24 8e 36 02 c0 	mov    DWORD PTR [esp],0xc002368e
c001d13a:	e8 5c f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d142:	53                   	push   ebx
c001d143:	57                   	push   edi
c001d144:	6a 00                	push   0x0
c001d146:	55                   	push   ebp
c001d147:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d14a:	83 c4 14             	add    esp,0x14
c001d14d:	68 95 36 02 c0       	push   0xc0023695
c001d152:	e8 44 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d157:	83 c4 10             	add    esp,0x10
c001d15a:	83 ec 0c             	sub    esp,0xc
c001d15d:	47                   	inc    edi
c001d15e:	68 9c 36 02 c0       	push   0xc002369c
c001d163:	e8 33 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d168:	83 c4 10             	add    esp,0x10
c001d16b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001d170:	74 0d                	je     c001d17f <IDE::detect()+0x421>
c001d172:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d17a:	e9 3d fc ff ff       	jmp    c001cdbc <IDE::detect()+0x5e>
c001d17f:	4e                   	dec    esi
c001d180:	74 0a                	je     c001d18c <IDE::detect()+0x42e>
c001d182:	be 01 00 00 00       	mov    esi,0x1
c001d187:	e9 18 fc ff ff       	jmp    c001cda4 <IDE::detect()+0x46>
c001d18c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d192:	5b                   	pop    ebx
c001d193:	5e                   	pop    esi
c001d194:	5f                   	pop    edi
c001d195:	5d                   	pop    ebp
c001d196:	c3                   	ret    
c001d197:	90                   	nop

c001d198 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d198:	55                   	push   ebp
c001d199:	57                   	push   edi
c001d19a:	56                   	push   esi
c001d19b:	53                   	push   ebx
c001d19c:	83 ec 1c             	sub    esp,0x1c
c001d19f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d1a7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d1ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d1b3:	88 c3                	mov    bl,al
c001d1b5:	25 ff 00 00 00       	and    eax,0xff
c001d1ba:	0f 84 88 00 00 00    	je     c001d248 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d1c0:	83 ec 0c             	sub    esp,0xc
c001d1c3:	89 c7                	mov    edi,eax
c001d1c5:	68 a0 36 02 c0       	push   0xc00236a0
c001d1ca:	e8 7f 9d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d1cf:	83 c4 10             	add    esp,0x10
c001d1d2:	83 ff 01             	cmp    edi,0x1
c001d1d5:	74 6b                	je     c001d242 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d1d7:	83 ff 02             	cmp    edi,0x2
c001d1da:	75 58                	jne    c001d234 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d1dc:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d1e1:	50                   	push   eax
c001d1e2:	6a 01                	push   0x1
c001d1e4:	01 ff                	add    edi,edi
c001d1e6:	09 fe                	or     esi,edi
c001d1e8:	89 f0                	mov    eax,esi
c001d1ea:	0f b6 f0             	movzx  esi,al
c001d1ed:	c1 e6 06             	shl    esi,0x6
c001d1f0:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d1f8:	50                   	push   eax
c001d1f9:	55                   	push   ebp
c001d1fa:	e8 0d f4 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001d1ff:	83 c4 10             	add    esp,0x10
c001d202:	a8 01                	test   al,0x1
c001d204:	74 02                	je     c001d208 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d206:	b3 07                	mov    bl,0x7
c001d208:	a8 02                	test   al,0x2
c001d20a:	74 02                	je     c001d20e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d20c:	b3 03                	mov    bl,0x3
c001d20e:	a8 04                	test   al,0x4
c001d210:	74 02                	je     c001d214 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d212:	b3 14                	mov    bl,0x14
c001d214:	a8 08                	test   al,0x8
c001d216:	74 02                	je     c001d21a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d218:	b3 03                	mov    bl,0x3
c001d21a:	a8 10                	test   al,0x10
c001d21c:	74 02                	je     c001d220 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d21e:	b3 15                	mov    bl,0x15
c001d220:	a8 20                	test   al,0x20
c001d222:	74 02                	je     c001d226 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d224:	b3 03                	mov    bl,0x3
c001d226:	a8 40                	test   al,0x40
c001d228:	74 02                	je     c001d22c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d22a:	b3 16                	mov    bl,0x16
c001d22c:	a8 80                	test   al,0x80
c001d22e:	74 18                	je     c001d248 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d230:	b3 0d                	mov    bl,0xd
c001d232:	eb 14                	jmp    c001d248 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d234:	83 ff 03             	cmp    edi,0x3
c001d237:	74 0d                	je     c001d246 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d239:	83 ff 04             	cmp    edi,0x4
c001d23c:	75 0a                	jne    c001d248 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d23e:	b3 08                	mov    bl,0x8
c001d240:	eb 06                	jmp    c001d248 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d242:	b3 13                	mov    bl,0x13
c001d244:	eb 02                	jmp    c001d248 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d246:	b3 17                	mov    bl,0x17
c001d248:	83 c4 1c             	add    esp,0x1c
c001d24b:	88 d8                	mov    al,bl
c001d24d:	5b                   	pop    ebx
c001d24e:	5e                   	pop    esi
c001d24f:	5f                   	pop    edi
c001d250:	5d                   	pop    ebp
c001d251:	c3                   	ret    

c001d252 <IDE::polling(unsigned char, unsigned int)>:
c001d252:	57                   	push   edi
c001d253:	56                   	push   esi
c001d254:	53                   	push   ebx
c001d255:	bb 04 00 00 00       	mov    ebx,0x4
c001d25a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d25e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d263:	52                   	push   edx
c001d264:	6a 0c                	push   0xc
c001d266:	56                   	push   esi
c001d267:	57                   	push   edi
c001d268:	e8 9f f3 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001d26d:	83 c4 10             	add    esp,0x10
c001d270:	4b                   	dec    ebx
c001d271:	75 f0                	jne    c001d263 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d273:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d278:	50                   	push   eax
c001d279:	6a 0c                	push   0xc
c001d27b:	56                   	push   esi
c001d27c:	57                   	push   edi
c001d27d:	e8 8a f3 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	a8 01                	test   al,0x1
c001d287:	75 17                	jne    c001d2a0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d289:	a8 20                	test   al,0x20
c001d28b:	75 0f                	jne    c001d29c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d28d:	4b                   	dec    ebx
c001d28e:	74 10                	je     c001d2a0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d290:	a8 80                	test   al,0x80
c001d292:	75 e4                	jne    c001d278 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d294:	a8 08                	test   al,0x8
c001d296:	74 e0                	je     c001d278 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d298:	31 c0                	xor    eax,eax
c001d29a:	eb 06                	jmp    c001d2a2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d29c:	b0 01                	mov    al,0x1
c001d29e:	eb 02                	jmp    c001d2a2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d2a0:	b0 02                	mov    al,0x2
c001d2a2:	5b                   	pop    ebx
c001d2a3:	5e                   	pop    esi
c001d2a4:	5f                   	pop    edi
c001d2a5:	c3                   	ret    

c001d2a6 <SATABus::close(int, int, void*)>:
c001d2a6:	31 c0                	xor    eax,eax
c001d2a8:	c3                   	ret    
c001d2a9:	90                   	nop

c001d2aa <SATABus::detect()>:
c001d2aa:	c3                   	ret    
c001d2ab:	90                   	nop

c001d2ac <SATABus::SATABus()>:
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b3:	83 ec 08             	sub    esp,0x8
c001d2b6:	68 d8 36 02 c0       	push   0xc00236d8
c001d2bb:	50                   	push   eax
c001d2bc:	e8 df c0 fe ff       	call   c00093a0 <HardDiskController::HardDiskController(char const*)>
c001d2c1:	83 c4 10             	add    esp,0x10
c001d2c4:	ba 04 37 02 c0       	mov    edx,0xc0023704
c001d2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2cd:	89 10                	mov    DWORD PTR [eax],edx
c001d2cf:	83 ec 0c             	sub    esp,0xc
c001d2d2:	6a 50                	push   0x50
c001d2d4:	e8 06 1c ff ff       	call   c000eedf <Phys::allocateContiguousPages(int)>
c001d2d9:	83 c4 10             	add    esp,0x10
c001d2dc:	89 c2                	mov    edx,eax
c001d2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d2e8:	83 ec 0c             	sub    esp,0xc
c001d2eb:	6a 50                	push   0x50
c001d2ed:	e8 51 4c ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001d2f2:	83 c4 10             	add    esp,0x10
c001d2f5:	89 c2                	mov    edx,eax
c001d2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d301:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d306:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d30a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d310:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d314:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d31a:	83 ec 0c             	sub    esp,0xc
c001d31d:	6a 03                	push   0x3
c001d31f:	6a 50                	push   0x50
c001d321:	51                   	push   ecx
c001d322:	52                   	push   edx
c001d323:	50                   	push   eax
c001d324:	e8 ed 54 ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d329:	83 c4 20             	add    esp,0x20
c001d32c:	90                   	nop
c001d32d:	83 c4 0c             	add    esp,0xc
c001d330:	c3                   	ret    
c001d331:	90                   	nop

c001d332 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d332:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d336:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d339:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d33c:	09 c2                	or     edx,eax
c001d33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d342:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d348:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d34a:	31 c0                	xor    eax,eax
c001d34c:	c1 e9 08             	shr    ecx,0x8
c001d34f:	83 e1 0f             	and    ecx,0xf
c001d352:	39 c8                	cmp    eax,ecx
c001d354:	74 0a                	je     c001d360 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d356:	f6 c2 01             	test   dl,0x1
c001d359:	74 08                	je     c001d363 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d35b:	d1 ea                	shr    edx,1
c001d35d:	40                   	inc    eax
c001d35e:	eb f2                	jmp    c001d352 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d360:	83 c8 ff             	or     eax,0xffffffff
c001d363:	c3                   	ret    

c001d364 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d364:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d368:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d36b:	89 c2                	mov    edx,eax
c001d36d:	c1 ea 08             	shr    edx,0x8
c001d370:	83 e2 0f             	and    edx,0xf
c001d373:	4a                   	dec    edx
c001d374:	75 32                	jne    c001d3a8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d376:	83 e0 0f             	and    eax,0xf
c001d379:	83 f8 03             	cmp    eax,0x3
c001d37c:	75 2a                	jne    c001d3a8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d37e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d381:	b8 02 00 00 00       	mov    eax,0x2
c001d386:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d38c:	74 1c                	je     c001d3aa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d38e:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d394:	b8 04 00 00 00       	mov    eax,0x4
c001d399:	74 0f                	je     c001d3aa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d39b:	31 c0                	xor    eax,eax
c001d39d:	83 fa 03             	cmp    edx,0x3
c001d3a0:	0f 94 c0             	sete   al
c001d3a3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d3a7:	c3                   	ret    
c001d3a8:	31 c0                	xor    eax,eax
c001d3aa:	c3                   	ret    
c001d3ab:	90                   	nop

c001d3ac <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d3ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3b3:	0f ba e2 0f          	bt     edx,0xf
c001d3b7:	72 f7                	jb     c001d3b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d3b9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3bc:	83 ca 10             	or     edx,0x10
c001d3bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3c5:	83 ca 01             	or     edx,0x1
c001d3c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3cb:	c3                   	ret    

c001d3cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3d3:	83 e2 fe             	and    edx,0xfffffffe
c001d3d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3d9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3dc:	83 e2 ef             	and    edx,0xffffffef
c001d3df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3e5:	0f ba e2 0e          	bt     edx,0xe
c001d3e9:	72 f7                	jb     c001d3e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d3eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3ee:	0f ba e2 0f          	bt     edx,0xf
c001d3f2:	72 ee                	jb     c001d3e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d3f4:	c3                   	ret    
c001d3f5:	90                   	nop

c001d3f6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d3f6:	55                   	push   ebp
c001d3f7:	57                   	push   edi
c001d3f8:	56                   	push   esi
c001d3f9:	53                   	push   ebx
c001d3fa:	83 ec 1c             	sub    esp,0x1c
c001d3fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d401:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d405:	53                   	push   ebx
c001d406:	57                   	push   edi
c001d407:	e8 c0 ff ff ff       	call   c001d3cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d40c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d410:	83 ec 0c             	sub    esp,0xc
c001d413:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d419:	c1 e5 0a             	shl    ebp,0xa
c001d41c:	01 e8                	add    eax,ebp
c001d41e:	89 03                	mov    DWORD PTR [ebx],eax
c001d420:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d422:	68 00 04 00 00       	push   0x400
c001d427:	6a 00                	push   0x0
c001d429:	50                   	push   eax
c001d42a:	e8 c1 30 fe ff       	call   c00004f0 <memset>
c001d42f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d435:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001d439:	83 c4 1c             	add    esp,0x1c
c001d43c:	01 e8                	add    eax,ebp
c001d43e:	89 03                	mov    DWORD PTR [ebx],eax
c001d440:	c1 e6 08             	shl    esi,0x8
c001d443:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d44a:	81 c6 00 80 00 00    	add    esi,0x8000
c001d450:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d456:	01 f0                	add    eax,esi
c001d458:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d45b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d45e:	68 00 01 00 00       	push   0x100
c001d463:	6a 00                	push   0x0
c001d465:	50                   	push   eax
c001d466:	e8 85 30 fe ff       	call   c00004f0 <memset>
c001d46b:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d471:	31 d2                	xor    edx,edx
c001d473:	01 f0                	add    eax,esi
c001d475:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d478:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d47f:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001d485:	01 ee                	add    esi,ebp
c001d487:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d48b:	83 c4 10             	add    esp,0x10
c001d48e:	c1 e5 0d             	shl    ebp,0xd
c001d491:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001d497:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001d49d:	83 c6 20             	add    esi,0x20
c001d4a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d4a4:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d4aa:	01 e8                	add    eax,ebp
c001d4ac:	01 d0                	add    eax,edx
c001d4ae:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d4b1:	52                   	push   edx
c001d4b2:	68 00 01 00 00       	push   0x100
c001d4b7:	6a 00                	push   0x0
c001d4b9:	50                   	push   eax
c001d4ba:	e8 31 30 fe ff       	call   c00004f0 <memset>
c001d4bf:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d4c5:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001d4cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d4d0:	83 c4 10             	add    esp,0x10
c001d4d3:	01 e8                	add    eax,ebp
c001d4d5:	01 d0                	add    eax,edx
c001d4d7:	81 c2 00 01 00 00    	add    edx,0x100
c001d4dd:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d4e0:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001d4e6:	75 af                	jne    c001d497 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001d4e8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d4ef:	50                   	push   eax
c001d4f0:	50                   	push   eax
c001d4f1:	53                   	push   ebx
c001d4f2:	57                   	push   edi
c001d4f3:	e8 b4 fe ff ff       	call   c001d3ac <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d4f8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d4ff:	83 c4 2c             	add    esp,0x2c
c001d502:	5b                   	pop    ebx
c001d503:	5e                   	pop    esi
c001d504:	5f                   	pop    edi
c001d505:	5d                   	pop    ebp
c001d506:	c3                   	ret    
c001d507:	90                   	nop

c001d508 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d508:	55                   	push   ebp
c001d509:	57                   	push   edi
c001d50a:	56                   	push   esi
c001d50b:	53                   	push   ebx
c001d50c:	31 db                	xor    ebx,ebx
c001d50e:	83 ec 0c             	sub    esp,0xc
c001d511:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d515:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d519:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d51c:	f7 c7 01 00 00 00    	test   edi,0x1
c001d522:	74 7a                	je     c001d59e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d524:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d528:	89 d8                	mov    eax,ebx
c001d52a:	c1 e0 07             	shl    eax,0x7
c001d52d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d534:	55                   	push   ebp
c001d535:	56                   	push   esi
c001d536:	e8 29 fe ff ff       	call   c001d364 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d53b:	5a                   	pop    edx
c001d53c:	59                   	pop    ecx
c001d53d:	83 f8 01             	cmp    eax,0x1
c001d540:	75 21                	jne    c001d563 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d542:	50                   	push   eax
c001d543:	53                   	push   ebx
c001d544:	55                   	push   ebp
c001d545:	56                   	push   esi
c001d546:	e8 ab fe ff ff       	call   c001d3f6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d54b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d552:	e8 79 13 ff ff       	call   c000e8d0 <malloc>
c001d557:	89 04 24             	mov    DWORD PTR [esp],eax
c001d55a:	89 c5                	mov    ebp,eax
c001d55c:	e8 19 0e 00 00       	call   c001e37a <SATA::SATA()>
c001d561:	eb 24                	jmp    c001d587 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d563:	83 f8 04             	cmp    eax,0x4
c001d566:	75 36                	jne    c001d59e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d568:	51                   	push   ecx
c001d569:	53                   	push   ebx
c001d56a:	55                   	push   ebp
c001d56b:	56                   	push   esi
c001d56c:	e8 85 fe ff ff       	call   c001d3f6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d571:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d578:	e8 53 13 ff ff       	call   c000e8d0 <malloc>
c001d57d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d580:	89 c5                	mov    ebp,eax
c001d582:	e8 89 11 00 00       	call   c001e710 <SATAPI::SATAPI()>
c001d587:	58                   	pop    eax
c001d588:	5a                   	pop    edx
c001d589:	55                   	push   ebp
c001d58a:	56                   	push   esi
c001d58b:	e8 b6 ba fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d590:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d593:	56                   	push   esi
c001d594:	6a 00                	push   0x0
c001d596:	53                   	push   ebx
c001d597:	55                   	push   ebp
c001d598:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d59b:	83 c4 20             	add    esp,0x20
c001d59e:	d1 ef                	shr    edi,1
c001d5a0:	43                   	inc    ebx
c001d5a1:	83 fb 20             	cmp    ebx,0x20
c001d5a4:	0f 85 72 ff ff ff    	jne    c001d51c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d5aa:	83 c4 0c             	add    esp,0xc
c001d5ad:	5b                   	pop    ebx
c001d5ae:	5e                   	pop    esi
c001d5af:	5f                   	pop    edi
c001d5b0:	5d                   	pop    ebp
c001d5b1:	c3                   	ret    

c001d5b2 <SATABus::open(int, int, void*)>:
c001d5b2:	53                   	push   ebx
c001d5b3:	83 ec 08             	sub    esp,0x8
c001d5b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5ba:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d5c0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d5c6:	e8 7d 7b ff ff       	call   c0015148 <KeDisablePreemption()>
c001d5cb:	52                   	push   edx
c001d5cc:	52                   	push   edx
c001d5cd:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d5d3:	53                   	push   ebx
c001d5d4:	e8 2f ff ff ff       	call   c001d508 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d5d9:	e8 92 7b ff ff       	call   c0015170 <KeRestorePreemption()>
c001d5de:	83 c4 18             	add    esp,0x18
c001d5e1:	31 c0                	xor    eax,eax
c001d5e3:	5b                   	pop    ebx
c001d5e4:	c3                   	ret    
c001d5e5:	90                   	nop

c001d5e6 <ATA::close(int, int, void*)>:
c001d5e6:	83 ec 0c             	sub    esp,0xc
c001d5e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5f3:	85 c0                	test   eax,eax
c001d5f5:	74 0c                	je     c001d603 <ATA::close(int, int, void*)+0x1d>
c001d5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5f9:	83 ec 0c             	sub    esp,0xc
c001d5fc:	50                   	push   eax
c001d5fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d600:	83 c4 10             	add    esp,0x10
c001d603:	31 c0                	xor    eax,eax
c001d605:	83 c4 0c             	add    esp,0xc
c001d608:	c3                   	ret    
c001d609:	90                   	nop

c001d60a <ATA::powerSaving(PowerSavingLevel)>:
c001d60a:	c3                   	ret    
c001d60b:	90                   	nop

c001d60c <ATA::ATA()>:
c001d60c:	83 ec 0c             	sub    esp,0xc
c001d60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d613:	83 ec 04             	sub    esp,0x4
c001d616:	68 00 02 00 00       	push   0x200
c001d61b:	68 dd 37 02 c0       	push   0xc00237dd
c001d620:	50                   	push   eax
c001d621:	e8 04 be fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d626:	83 c4 10             	add    esp,0x10
c001d629:	ba 44 37 02 c0       	mov    edx,0xc0023744
c001d62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d632:	89 10                	mov    DWORD PTR [eax],edx
c001d634:	90                   	nop
c001d635:	83 c4 0c             	add    esp,0xc
c001d638:	c3                   	ret    
c001d639:	90                   	nop

c001d63a <ATA::flush(bool)>:
c001d63a:	53                   	push   ebx
c001d63b:	83 ec 08             	sub    esp,0x8
c001d63e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d643:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d647:	83 f8 01             	cmp    eax,0x1
c001d64a:	19 c0                	sbb    eax,eax
c001d64c:	83 e0 fd             	and    eax,0xfffffffd
c001d64f:	05 ea 00 00 00       	add    eax,0xea
c001d654:	50                   	push   eax
c001d655:	6a 07                	push   0x7
c001d657:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d65e:	50                   	push   eax
c001d65f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d665:	e8 e2 ee ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d66a:	83 c4 0c             	add    esp,0xc
c001d66d:	6a 00                	push   0x0
c001d66f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d676:	50                   	push   eax
c001d677:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d67d:	e8 d0 fb ff ff       	call   c001d252 <IDE::polling(unsigned char, unsigned int)>
c001d682:	83 c4 18             	add    esp,0x18
c001d685:	5b                   	pop    ebx
c001d686:	c3                   	ret    
c001d687:	90                   	nop

c001d688 <ATA::readyForCommand()>:
c001d688:	56                   	push   esi
c001d689:	53                   	push   ebx
c001d68a:	53                   	push   ebx
c001d68b:	31 db                	xor    ebx,ebx
c001d68d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d691:	51                   	push   ecx
c001d692:	6a 0c                	push   0xc
c001d694:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d69b:	50                   	push   eax
c001d69c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d6a2:	e8 65 ef ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001d6a7:	83 c4 10             	add    esp,0x10
c001d6aa:	a8 88                	test   al,0x88
c001d6ac:	74 1f                	je     c001d6cd <ATA::readyForCommand()+0x45>
c001d6ae:	43                   	inc    ebx
c001d6af:	83 fb 63             	cmp    ebx,0x63
c001d6b2:	7e dd                	jle    c001d691 <ATA::readyForCommand()+0x9>
c001d6b4:	83 ec 0c             	sub    esp,0xc
c001d6b7:	6a 0a                	push   0xa
c001d6b9:	e8 06 7f ff ff       	call   c00155c4 <milliTenthSleep(unsigned int)>
c001d6be:	83 c4 10             	add    esp,0x10
c001d6c1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d6c7:	75 c8                	jne    c001d691 <ATA::readyForCommand()+0x9>
c001d6c9:	31 c0                	xor    eax,eax
c001d6cb:	eb 02                	jmp    c001d6cf <ATA::readyForCommand()+0x47>
c001d6cd:	b0 01                	mov    al,0x1
c001d6cf:	5a                   	pop    edx
c001d6d0:	5b                   	pop    ebx
c001d6d1:	5e                   	pop    esi
c001d6d2:	c3                   	ret    
c001d6d3:	90                   	nop

c001d6d4 <ATA::access(unsigned long long, int, void*, bool)>:
c001d6d4:	55                   	push   ebp
c001d6d5:	57                   	push   edi
c001d6d6:	56                   	push   esi
c001d6d7:	53                   	push   ebx
c001d6d8:	83 ec 2c             	sub    esp,0x2c
c001d6db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6df:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6e3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6e7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d6eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6ef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d6f3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d6f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d6fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d701:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d707:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d70b:	c1 e0 06             	shl    eax,0x6
c001d70e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d716:	74 5b                	je     c001d773 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d718:	89 fa                	mov    edx,edi
c001d71a:	89 f0                	mov    eax,esi
c001d71c:	c1 ea 1c             	shr    edx,0x1c
c001d71f:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001d723:	89 d1                	mov    ecx,edx
c001d725:	09 c1                	or     ecx,eax
c001d727:	74 25                	je     c001d74e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d729:	31 ed                	xor    ebp,ebp
c001d72b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d732:	89 fa                	mov    edx,edi
c001d734:	89 f0                	mov    eax,esi
c001d736:	0f ad d0             	shrd   eax,edx,cl
c001d739:	d3 ea                	shr    edx,cl
c001d73b:	f6 c1 20             	test   cl,0x20
c001d73e:	74 02                	je     c001d742 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d740:	89 d0                	mov    eax,edx
c001d742:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d746:	45                   	inc    ebp
c001d747:	83 fd 06             	cmp    ebp,0x6
c001d74a:	75 df                	jne    c001d72b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d74c:	eb 71                	jmp    c001d7bf <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d74e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d753:	89 f0                	mov    eax,esi
c001d755:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d75c:	0f ac f8 10          	shrd   eax,edi,0x10
c001d760:	bf 01 00 00 00       	mov    edi,0x1
c001d765:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d769:	c1 ee 18             	shr    esi,0x18
c001d76c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d771:	eb 53                	jmp    c001d7c6 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d773:	6a 00                	push   0x0
c001d775:	6a 3f                	push   0x3f
c001d777:	57                   	push   edi
c001d778:	56                   	push   esi
c001d779:	e8 26 24 00 00       	call   c001fba4 <__umoddi3>
c001d77e:	83 c4 10             	add    esp,0x10
c001d781:	40                   	inc    eax
c001d782:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d786:	6a 00                	push   0x0
c001d788:	68 f0 03 00 00       	push   0x3f0
c001d78d:	57                   	push   edi
c001d78e:	56                   	push   esi
c001d78f:	e8 10 23 00 00       	call   c001faa4 <__udivdi3>
c001d794:	83 c4 10             	add    esp,0x10
c001d797:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d79c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d7a3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d7a8:	6a 00                	push   0x0
c001d7aa:	6a 3f                	push   0x3f
c001d7ac:	57                   	push   edi
c001d7ad:	31 ff                	xor    edi,edi
c001d7af:	56                   	push   esi
c001d7b0:	e8 ef 22 00 00       	call   c001faa4 <__udivdi3>
c001d7b5:	83 c4 10             	add    esp,0x10
c001d7b8:	83 e0 0f             	and    eax,0xf
c001d7bb:	89 c6                	mov    esi,eax
c001d7bd:	eb 07                	jmp    c001d7c6 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d7bf:	31 f6                	xor    esi,esi
c001d7c1:	bf 02 00 00 00       	mov    edi,0x2
c001d7c6:	55                   	push   ebp
c001d7c7:	6a 00                	push   0x0
c001d7c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7d0:	50                   	push   eax
c001d7d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d7d5:	e8 80 ef ff ff       	call   c001c75a <IDE::enableIRQs(unsigned char, bool)>
c001d7da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7dd:	e8 a6 fe ff ff       	call   c001d688 <ATA::readyForCommand()>
c001d7e2:	83 c4 10             	add    esp,0x10
c001d7e5:	84 c0                	test   al,al
c001d7e7:	75 0a                	jne    c001d7f3 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d7e9:	be 01 00 00 00       	mov    esi,0x1
c001d7ee:	e9 e1 02 00 00       	jmp    c001dad4 <ATA::access(unsigned long long, int, void*, bool)+0x400>
c001d7f3:	fa                   	cli    
c001d7f4:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d7fa:	f7 c7 03 00 00 00    	test   edi,0x3
c001d800:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d806:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d80c:	75 0a                	jne    c001d818 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001d80e:	c1 e0 04             	shl    eax,0x4
c001d811:	09 c6                	or     esi,eax
c001d813:	83 ce a0             	or     esi,0xffffffa0
c001d816:	eb 08                	jmp    c001d820 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001d818:	c1 e0 04             	shl    eax,0x4
c001d81b:	09 c6                	or     esi,eax
c001d81d:	83 ce e0             	or     esi,0xffffffe0
c001d820:	89 f0                	mov    eax,esi
c001d822:	0f b6 d2             	movzx  edx,dl
c001d825:	0f b6 f0             	movzx  esi,al
c001d828:	56                   	push   esi
c001d829:	6a 06                	push   0x6
c001d82b:	52                   	push   edx
c001d82c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d832:	e8 15 ed ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d837:	83 c4 10             	add    esp,0x10
c001d83a:	6a 00                	push   0x0
c001d83c:	6a 01                	push   0x1
c001d83e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d845:	50                   	push   eax
c001d846:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d84c:	e8 fb ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d851:	89 f8                	mov    eax,edi
c001d853:	83 c4 10             	add    esp,0x10
c001d856:	0f b6 f0             	movzx  esi,al
c001d859:	83 fe 02             	cmp    esi,0x2
c001d85c:	75 6e                	jne    c001d8cc <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001d85e:	6a 00                	push   0x0
c001d860:	6a 08                	push   0x8
c001d862:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d869:	50                   	push   eax
c001d86a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d870:	e8 d7 ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d875:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d87a:	50                   	push   eax
c001d87b:	6a 09                	push   0x9
c001d87d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d884:	50                   	push   eax
c001d885:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d88b:	e8 bc ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d890:	83 c4 20             	add    esp,0x20
c001d893:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d898:	50                   	push   eax
c001d899:	6a 0a                	push   0xa
c001d89b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8a2:	50                   	push   eax
c001d8a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8a9:	e8 9e ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8ae:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d8b3:	50                   	push   eax
c001d8b4:	6a 0b                	push   0xb
c001d8b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8bd:	50                   	push   eax
c001d8be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8c4:	e8 83 ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8c9:	83 c4 20             	add    esp,0x20
c001d8cc:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d8d1:	50                   	push   eax
c001d8d2:	6a 02                	push   0x2
c001d8d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8db:	50                   	push   eax
c001d8dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8e2:	e8 65 ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8e7:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d8ec:	50                   	push   eax
c001d8ed:	6a 03                	push   0x3
c001d8ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8f6:	50                   	push   eax
c001d8f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8fd:	e8 4a ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d902:	83 c4 20             	add    esp,0x20
c001d905:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d90a:	50                   	push   eax
c001d90b:	6a 04                	push   0x4
c001d90d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d914:	50                   	push   eax
c001d915:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d91b:	e8 2c ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d920:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d925:	50                   	push   eax
c001d926:	6a 05                	push   0x5
c001d928:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d92f:	50                   	push   eax
c001d930:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d936:	e8 11 ec ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d93b:	83 c4 20             	add    esp,0x20
c001d93e:	83 fe 02             	cmp    esi,0x2
c001d941:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001d946:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001d94b:	85 c9                	test   ecx,ecx
c001d94d:	74 07                	je     c001d956 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001d94f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d954:	75 47                	jne    c001d99d <ATA::access(unsigned long long, int, void*, bool)+0x2c9>
c001d956:	89 f8                	mov    eax,edi
c001d958:	0f b6 f8             	movzx  edi,al
c001d95b:	31 c0                	xor    eax,eax
c001d95d:	83 ff 02             	cmp    edi,0x2
c001d960:	0f 95 c0             	setne  al
c001d963:	89 c6                	mov    esi,eax
c001d965:	74 0c                	je     c001d973 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001d967:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d96c:	b8 30 00 00 00       	mov    eax,0x30
c001d971:	75 2f                	jne    c001d9a2 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d973:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d977:	83 f2 01             	xor    edx,0x1
c001d97a:	85 c9                	test   ecx,ecx
c001d97c:	74 09                	je     c001d987 <ATA::access(unsigned long long, int, void*, bool)+0x2b3>
c001d97e:	84 d2                	test   dl,dl
c001d980:	b8 24 00 00 00       	mov    eax,0x24
c001d985:	75 1b                	jne    c001d9a2 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d987:	85 f6                	test   esi,esi
c001d989:	0f 84 5a fe ff ff    	je     c001d7e9 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d98f:	84 d2                	test   dl,dl
c001d991:	b8 20 00 00 00       	mov    eax,0x20
c001d996:	75 0a                	jne    c001d9a2 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d998:	e9 4c fe ff ff       	jmp    c001d7e9 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d99d:	b8 34 00 00 00       	mov    eax,0x34
c001d9a2:	50                   	push   eax
c001d9a3:	6a 07                	push   0x7
c001d9a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9ac:	50                   	push   eax
c001d9ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9b3:	e8 94 eb ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9b8:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001d9bf:	83 c4 10             	add    esp,0x10
c001d9c2:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001d9c9:	75 01                	jne    c001d9cc <ATA::access(unsigned long long, int, void*, bool)+0x2f8>
c001d9cb:	fb                   	sti    
c001d9cc:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d9d0:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d9d5:	85 f6                	test   esi,esi
c001d9d7:	0f 84 dd 00 00 00    	je     c001daba <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001d9dd:	57                   	push   edi
c001d9de:	6a 01                	push   0x1
c001d9e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9e7:	50                   	push   eax
c001d9e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9ee:	e8 5f f8 ff ff       	call   c001d252 <IDE::polling(unsigned char, unsigned int)>
c001d9f3:	83 c4 10             	add    esp,0x10
c001d9f6:	0f b6 c0             	movzx  eax,al
c001d9f9:	85 c0                	test   eax,eax
c001d9fb:	74 23                	je     c001da20 <ATA::access(unsigned long long, int, void*, bool)+0x34c>
c001d9fd:	50                   	push   eax
c001d9fe:	89 c6                	mov    esi,eax
c001da00:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001da07:	50                   	push   eax
c001da08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da0f:	50                   	push   eax
c001da10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da16:	e8 7d f7 ff ff       	call   c001d198 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001da1b:	e9 b1 00 00 00       	jmp    c001dad1 <ATA::access(unsigned long long, int, void*, bool)+0x3fd>
c001da20:	85 ed                	test   ebp,ebp
c001da22:	74 49                	je     c001da6d <ATA::access(unsigned long long, int, void*, bool)+0x399>
c001da24:	fa                   	cli    
c001da25:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001da2b:	31 ff                	xor    edi,edi
c001da2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001da31:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001da35:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001da3a:	51                   	push   ecx
c001da3b:	51                   	push   ecx
c001da3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da43:	50                   	push   eax
c001da44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da4a:	e8 eb ea ff ff       	call   c001c53a <IDE::getBase(unsigned char)>
c001da4f:	89 c2                	mov    edx,eax
c001da51:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001da56:	66 ef                	out    dx,ax
c001da58:	47                   	inc    edi
c001da59:	83 c4 10             	add    esp,0x10
c001da5c:	81 ff 00 01 00 00    	cmp    edi,0x100
c001da62:	75 c9                	jne    c001da2d <ATA::access(unsigned long long, int, void*, bool)+0x359>
c001da64:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001da6b:	eb 35                	jmp    c001daa2 <ATA::access(unsigned long long, int, void*, bool)+0x3ce>
c001da6d:	fa                   	cli    
c001da6e:	52                   	push   edx
c001da6f:	52                   	push   edx
c001da70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da77:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001da7d:	50                   	push   eax
c001da7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da84:	e8 b1 ea ff ff       	call   c001c53a <IDE::getBase(unsigned char)>
c001da89:	b9 00 01 00 00       	mov    ecx,0x100
c001da8e:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001da92:	89 c2                	mov    edx,eax
c001da94:	fc                   	cld    
c001da95:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001da98:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001da9f:	83 c4 10             	add    esp,0x10
c001daa2:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001daa9:	75 01                	jne    c001daac <ATA::access(unsigned long long, int, void*, bool)+0x3d8>
c001daab:	fb                   	sti    
c001daac:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001dab4:	4e                   	dec    esi
c001dab5:	e9 1b ff ff ff       	jmp    c001d9d5 <ATA::access(unsigned long long, int, void*, bool)+0x301>
c001daba:	31 f6                	xor    esi,esi
c001dabc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001dac1:	74 11                	je     c001dad4 <ATA::access(unsigned long long, int, void*, bool)+0x400>
c001dac3:	50                   	push   eax
c001dac4:	50                   	push   eax
c001dac5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001daca:	50                   	push   eax
c001dacb:	53                   	push   ebx
c001dacc:	e8 69 fb ff ff       	call   c001d63a <ATA::flush(bool)>
c001dad1:	83 c4 10             	add    esp,0x10
c001dad4:	83 c4 2c             	add    esp,0x2c
c001dad7:	89 f0                	mov    eax,esi
c001dad9:	5b                   	pop    ebx
c001dada:	5e                   	pop    esi
c001dadb:	5f                   	pop    edi
c001dadc:	5d                   	pop    ebp
c001dadd:	c3                   	ret    

c001dade <ATA::read(unsigned long long, int, void*)>:
c001dade:	57                   	push   edi
c001dadf:	b8 04 00 00 00       	mov    eax,0x4
c001dae4:	56                   	push   esi
c001dae5:	53                   	push   ebx
c001dae6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001daea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001daee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001daf2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001daf6:	8d 7a ff             	lea    edi,[edx-0x1]
c001daf9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001daff:	77 25                	ja     c001db26 <ATA::read(unsigned long long, int, void*)+0x48>
c001db01:	85 f6                	test   esi,esi
c001db03:	b8 06 00 00 00       	mov    eax,0x6
c001db08:	74 1c                	je     c001db26 <ATA::read(unsigned long long, int, void*)+0x48>
c001db0a:	50                   	push   eax
c001db0b:	50                   	push   eax
c001db0c:	6a 00                	push   0x0
c001db0e:	56                   	push   esi
c001db0f:	52                   	push   edx
c001db10:	53                   	push   ebx
c001db11:	51                   	push   ecx
c001db12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db16:	e8 b9 fb ff ff       	call   c001d6d4 <ATA::access(unsigned long long, int, void*, bool)>
c001db1b:	83 c4 20             	add    esp,0x20
c001db1e:	85 c0                	test   eax,eax
c001db20:	0f 95 c0             	setne  al
c001db23:	0f b6 c0             	movzx  eax,al
c001db26:	5b                   	pop    ebx
c001db27:	5e                   	pop    esi
c001db28:	5f                   	pop    edi
c001db29:	c3                   	ret    

c001db2a <ATA::write(unsigned long long, int, void*)>:
c001db2a:	57                   	push   edi
c001db2b:	b8 04 00 00 00       	mov    eax,0x4
c001db30:	56                   	push   esi
c001db31:	53                   	push   ebx
c001db32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001db3a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db3e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001db42:	8d 7a ff             	lea    edi,[edx-0x1]
c001db45:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db4b:	77 25                	ja     c001db72 <ATA::write(unsigned long long, int, void*)+0x48>
c001db4d:	85 f6                	test   esi,esi
c001db4f:	b8 06 00 00 00       	mov    eax,0x6
c001db54:	74 1c                	je     c001db72 <ATA::write(unsigned long long, int, void*)+0x48>
c001db56:	50                   	push   eax
c001db57:	50                   	push   eax
c001db58:	6a 01                	push   0x1
c001db5a:	56                   	push   esi
c001db5b:	52                   	push   edx
c001db5c:	53                   	push   ebx
c001db5d:	51                   	push   ecx
c001db5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db62:	e8 6d fb ff ff       	call   c001d6d4 <ATA::access(unsigned long long, int, void*, bool)>
c001db67:	83 c4 20             	add    esp,0x20
c001db6a:	85 c0                	test   eax,eax
c001db6c:	0f 95 c0             	setne  al
c001db6f:	0f b6 c0             	movzx  eax,al
c001db72:	5b                   	pop    ebx
c001db73:	5e                   	pop    esi
c001db74:	5f                   	pop    edi
c001db75:	c3                   	ret    

c001db76 <ATA::detectCHS()>:
c001db76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db7a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001db80:	c1 e0 06             	shl    eax,0x6
c001db83:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001db89:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001db93:	c7 44 24 04 28 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023728
c001db9b:	e9 76 10 ff ff       	jmp    c000ec16 <KePanic(char const*)>

c001dba0 <ATA::open(int, int, void*)>:
c001dba0:	53                   	push   ebx
c001dba1:	83 ec 08             	sub    esp,0x8
c001dba4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dbac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbb0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbb6:	c1 e0 06             	shl    eax,0x6
c001dbb9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dbbf:	01 d0                	add    eax,edx
c001dbc1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dbc8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dbce:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dbd5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dbdf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dbe6:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dbec:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dbf3:	75 0c                	jne    c001dc01 <ATA::open(int, int, void*)+0x61>
c001dbf5:	83 ec 0c             	sub    esp,0xc
c001dbf8:	53                   	push   ebx
c001dbf9:	e8 78 ff ff ff       	call   c001db76 <ATA::detectCHS()>
c001dbfe:	83 c4 10             	add    esp,0x10
c001dc01:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dc07:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc0d:	c1 e0 06             	shl    eax,0x6
c001dc10:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dc17:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc21:	d1 e8                	shr    eax,1
c001dc23:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dc29:	6a 04                	push   0x4
c001dc2b:	6a 0c                	push   0xc
c001dc2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc34:	50                   	push   eax
c001dc35:	52                   	push   edx
c001dc36:	e8 11 e9 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc3b:	90                   	nop
c001dc3c:	90                   	nop
c001dc3d:	6a 00                	push   0x0
c001dc3f:	6a 0c                	push   0xc
c001dc41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc48:	50                   	push   eax
c001dc49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc4f:	e8 f8 e8 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc54:	83 c4 14             	add    esp,0x14
c001dc57:	53                   	push   ebx
c001dc58:	e8 35 b8 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001dc5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc60:	e8 01 c7 fe ff       	call   c000a366 <createPartitionsForDisk(PhysicalDisk*)>
c001dc65:	83 c4 18             	add    esp,0x18
c001dc68:	31 c0                	xor    eax,eax
c001dc6a:	5b                   	pop    ebx
c001dc6b:	c3                   	ret    

c001dc6c <combineCharAndColour(char, unsigned char)>:
c001dc6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc71:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001dc77:	c1 e0 08             	shl    eax,0x8
c001dc7a:	09 d0                	or     eax,edx
c001dc7c:	c3                   	ret    

c001dc7d <combineColours(unsigned char, unsigned char)>:
c001dc7d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc82:	c1 e0 04             	shl    eax,0x4
c001dc85:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001dc89:	c3                   	ret    

c001dc8a <ATAPI::write(unsigned long long, int, void*)>:
c001dc8a:	b8 03 00 00 00       	mov    eax,0x3
c001dc8f:	c3                   	ret    

c001dc90 <ATAPI::close(int, int, void*)>:
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc97:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc9d:	85 c0                	test   eax,eax
c001dc9f:	74 0c                	je     c001dcad <ATAPI::close(int, int, void*)+0x1d>
c001dca1:	8b 10                	mov    edx,DWORD PTR [eax]
c001dca3:	83 ec 0c             	sub    esp,0xc
c001dca6:	50                   	push   eax
c001dca7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dcaa:	83 c4 10             	add    esp,0x10
c001dcad:	31 c0                	xor    eax,eax
c001dcaf:	83 c4 0c             	add    esp,0xc
c001dcb2:	c3                   	ret    
c001dcb3:	90                   	nop

c001dcb4 <ATAPI::ATAPI()>:
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcbb:	83 ec 04             	sub    esp,0x4
c001dcbe:	68 00 08 00 00       	push   0x800
c001dcc3:	68 7d 38 02 c0       	push   0xc002387d
c001dcc8:	50                   	push   eax
c001dcc9:	e8 5c b7 fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcce:	83 c4 10             	add    esp,0x10
c001dcd1:	ba 8c 37 02 c0       	mov    edx,0xc002378c
c001dcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcda:	89 10                	mov    DWORD PTR [eax],edx
c001dcdc:	90                   	nop
c001dcdd:	83 c4 0c             	add    esp,0xc
c001dce0:	c3                   	ret    
c001dce1:	90                   	nop

c001dce2 <ATAPI::readyForCommand()>:
c001dce2:	56                   	push   esi
c001dce3:	53                   	push   ebx
c001dce4:	53                   	push   ebx
c001dce5:	31 db                	xor    ebx,ebx
c001dce7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dceb:	51                   	push   ecx
c001dcec:	6a 0c                	push   0xc
c001dcee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dcf5:	50                   	push   eax
c001dcf6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dcfc:	e8 0b e9 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001dd01:	83 c4 10             	add    esp,0x10
c001dd04:	a8 88                	test   al,0x88
c001dd06:	74 25                	je     c001dd2d <ATAPI::readyForCommand()+0x4b>
c001dd08:	43                   	inc    ebx
c001dd09:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001dd0f:	7e da                	jle    c001dceb <ATAPI::readyForCommand()+0x9>
c001dd11:	83 ec 0c             	sub    esp,0xc
c001dd14:	68 5e 01 00 00       	push   0x15e
c001dd19:	e8 a6 78 ff ff       	call   c00155c4 <milliTenthSleep(unsigned int)>
c001dd1e:	83 c4 10             	add    esp,0x10
c001dd21:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001dd27:	75 c2                	jne    c001dceb <ATAPI::readyForCommand()+0x9>
c001dd29:	31 c0                	xor    eax,eax
c001dd2b:	eb 02                	jmp    c001dd2f <ATAPI::readyForCommand()+0x4d>
c001dd2d:	b0 01                	mov    al,0x1
c001dd2f:	5a                   	pop    edx
c001dd30:	5b                   	pop    ebx
c001dd31:	5e                   	pop    esi
c001dd32:	c3                   	ret    
c001dd33:	90                   	nop

c001dd34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dd34:	55                   	push   ebp
c001dd35:	57                   	push   edi
c001dd36:	56                   	push   esi
c001dd37:	53                   	push   ebx
c001dd38:	83 ec 20             	sub    esp,0x20
c001dd3b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dd3f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dd43:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001dd47:	6a 01                	push   0x1
c001dd49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd50:	50                   	push   eax
c001dd51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd57:	e8 fe e9 ff ff       	call   c001c75a <IDE::enableIRQs(unsigned char, bool)>
c001dd5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd63:	59                   	pop    ecx
c001dd64:	5e                   	pop    esi
c001dd65:	50                   	push   eax
c001dd66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd6c:	e8 b5 e7 ff ff       	call   c001c526 <IDE::prepareInterrupt(unsigned char)>
c001dd71:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dd74:	e8 69 ff ff ff       	call   c001dce2 <ATAPI::readyForCommand()>
c001dd79:	83 c4 10             	add    esp,0x10
c001dd7c:	84 c0                	test   al,al
c001dd7e:	75 0a                	jne    c001dd8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001dd80:	bb 01 00 00 00       	mov    ebx,0x1
c001dd85:	e9 5f 02 00 00       	jmp    c001dfe9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd8a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001dd90:	c1 e0 04             	shl    eax,0x4
c001dd93:	0f b6 c0             	movzx  eax,al
c001dd96:	50                   	push   eax
c001dd97:	6a 06                	push   0x6
c001dd99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dda0:	50                   	push   eax
c001dda1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dda7:	e8 a0 e7 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddac:	6a 00                	push   0x0
c001ddae:	6a 01                	push   0x1
c001ddb0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddb7:	50                   	push   eax
c001ddb8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddbe:	e8 89 e7 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddc3:	83 c4 20             	add    esp,0x20
c001ddc6:	0f b6 c3             	movzx  eax,bl
c001ddc9:	50                   	push   eax
c001ddca:	0f b6 df             	movzx  ebx,bh
c001ddcd:	6a 04                	push   0x4
c001ddcf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddd6:	50                   	push   eax
c001ddd7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dddd:	e8 6a e7 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dde2:	53                   	push   ebx
c001dde3:	6a 05                	push   0x5
c001dde5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddec:	50                   	push   eax
c001dded:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddf3:	e8 54 e7 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddf8:	83 c4 20             	add    esp,0x20
c001ddfb:	68 a0 00 00 00       	push   0xa0
c001de00:	6a 07                	push   0x7
c001de02:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de09:	50                   	push   eax
c001de0a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de10:	e8 37 e7 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de15:	83 c4 0c             	add    esp,0xc
c001de18:	6a 01                	push   0x1
c001de1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de21:	50                   	push   eax
c001de22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de28:	e8 25 f4 ff ff       	call   c001d252 <IDE::polling(unsigned char, unsigned int)>
c001de2d:	83 c4 10             	add    esp,0x10
c001de30:	0f b6 d8             	movzx  ebx,al
c001de33:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001de39:	85 db                	test   ebx,ebx
c001de3b:	74 20                	je     c001de5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001de3d:	53                   	push   ebx
c001de3e:	0f b6 c0             	movzx  eax,al
c001de41:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001de48:	52                   	push   edx
c001de49:	50                   	push   eax
c001de4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de50:	e8 43 f3 ff ff       	call   c001d198 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001de55:	83 c4 10             	add    esp,0x10
c001de58:	e9 8c 01 00 00       	jmp    c001dfe9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de5d:	52                   	push   edx
c001de5e:	0f b6 c0             	movzx  eax,al
c001de61:	52                   	push   edx
c001de62:	50                   	push   eax
c001de63:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de69:	e8 cc e6 ff ff       	call   c001c53a <IDE::getBase(unsigned char)>
c001de6e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001de72:	b9 06 00 00 00       	mov    ecx,0x6
c001de77:	89 c2                	mov    edx,eax
c001de79:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001de7c:	89 e8                	mov    eax,ebp
c001de7e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001de82:	83 c4 10             	add    esp,0x10
c001de85:	0f b6 c0             	movzx  eax,al
c001de88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de8c:	85 db                	test   ebx,ebx
c001de8e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de94:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de9b:	0f 84 eb 00 00 00    	je     c001df8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dea1:	55                   	push   ebp
c001dea2:	55                   	push   ebp
c001dea3:	52                   	push   edx
c001dea4:	50                   	push   eax
c001dea5:	e8 16 e8 ff ff       	call   c001c6c0 <IDE::waitInterrupt(unsigned char)>
c001deaa:	83 c4 10             	add    esp,0x10
c001dead:	84 c0                	test   al,al
c001deaf:	0f 84 cb fe ff ff    	je     c001dd80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001deb5:	56                   	push   esi
c001deb6:	56                   	push   esi
c001deb7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001debe:	50                   	push   eax
c001debf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dec5:	e8 5c e6 ff ff       	call   c001c526 <IDE::prepareInterrupt(unsigned char)>
c001deca:	83 c4 0c             	add    esp,0xc
c001decd:	6a 04                	push   0x4
c001decf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ded6:	50                   	push   eax
c001ded7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dedd:	e8 2a e7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001dee2:	83 c4 0c             	add    esp,0xc
c001dee5:	6a 05                	push   0x5
c001dee7:	89 c6                	mov    esi,eax
c001dee9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001def0:	50                   	push   eax
c001def1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001def7:	e8 10 e7 ff ff       	call   c001c60c <IDE::read(unsigned char, unsigned char)>
c001defc:	83 c4 10             	add    esp,0x10
c001deff:	0f b6 e8             	movzx  ebp,al
c001df02:	89 f0                	mov    eax,esi
c001df04:	c1 e5 08             	shl    ebp,0x8
c001df07:	0f b6 f0             	movzx  esi,al
c001df0a:	09 f5                	or     ebp,esi
c001df0c:	31 f6                	xor    esi,esi
c001df0e:	d1 fd                	sar    ebp,1
c001df10:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001df15:	74 5c                	je     c001df73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001df17:	39 ee                	cmp    esi,ebp
c001df19:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df1f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df26:	75 0d                	jne    c001df35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001df28:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001df2b:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001df2f:	4b                   	dec    ebx
c001df30:	e9 57 ff ff ff       	jmp    c001de8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001df35:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001df39:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001df3d:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001df42:	51                   	push   ecx
c001df43:	51                   	push   ecx
c001df44:	52                   	push   edx
c001df45:	50                   	push   eax
c001df46:	e8 ef e5 ff ff       	call   c001c53a <IDE::getBase(unsigned char)>
c001df4b:	89 c2                	mov    edx,eax
c001df4d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001df52:	66 ef                	out    dx,ax
c001df54:	46                   	inc    esi
c001df55:	83 c4 10             	add    esp,0x10
c001df58:	eb bd                	jmp    c001df17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001df5a:	51                   	push   ecx
c001df5b:	51                   	push   ecx
c001df5c:	52                   	push   edx
c001df5d:	50                   	push   eax
c001df5e:	e8 d7 e5 ff ff       	call   c001c53a <IDE::getBase(unsigned char)>
c001df63:	89 c2                	mov    edx,eax
c001df65:	66 ed                	in     ax,dx
c001df67:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001df6b:	83 c4 10             	add    esp,0x10
c001df6e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001df72:	46                   	inc    esi
c001df73:	39 ee                	cmp    esi,ebp
c001df75:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df7b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df82:	75 d6                	jne    c001df5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001df84:	01 f6                	add    esi,esi
c001df86:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001df8a:	eb a3                	jmp    c001df2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001df8c:	51                   	push   ecx
c001df8d:	51                   	push   ecx
c001df8e:	52                   	push   edx
c001df8f:	50                   	push   eax
c001df90:	e8 2b e7 ff ff       	call   c001c6c0 <IDE::waitInterrupt(unsigned char)>
c001df95:	83 c4 10             	add    esp,0x10
c001df98:	84 c0                	test   al,al
c001df9a:	0f 84 e0 fd ff ff    	je     c001dd80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001dfa0:	52                   	push   edx
c001dfa1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001dfa6:	52                   	push   edx
c001dfa7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dfae:	50                   	push   eax
c001dfaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfb5:	e8 6c e5 ff ff       	call   c001c526 <IDE::prepareInterrupt(unsigned char)>
c001dfba:	83 c4 10             	add    esp,0x10
c001dfbd:	50                   	push   eax
c001dfbe:	50                   	push   eax
c001dfbf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dfc6:	50                   	push   eax
c001dfc7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfcd:	e8 68 e5 ff ff       	call   c001c53a <IDE::getBase(unsigned char)>
c001dfd2:	8d 50 07             	lea    edx,[eax+0x7]
c001dfd5:	ec                   	in     al,dx
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	a8 88                	test   al,0x88
c001dfdb:	74 0a                	je     c001dfe7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dfdd:	4b                   	dec    ebx
c001dfde:	75 dd                	jne    c001dfbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dfe0:	bb 02 00 00 00       	mov    ebx,0x2
c001dfe5:	eb 02                	jmp    c001dfe9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dfe7:	31 db                	xor    ebx,ebx
c001dfe9:	83 c4 1c             	add    esp,0x1c
c001dfec:	89 d8                	mov    eax,ebx
c001dfee:	5b                   	pop    ebx
c001dfef:	5e                   	pop    esi
c001dff0:	5f                   	pop    edi
c001dff1:	5d                   	pop    ebp
c001dff2:	c3                   	ret    
c001dff3:	90                   	nop

c001dff4 <ATAPI::diskRemoved()>:
c001dff4:	53                   	push   ebx
c001dff5:	83 ec 14             	sub    esp,0x14
c001dff8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dffc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e003:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e009:	e8 48 c0 fe ff       	call   c000a056 <LogicalDisk::unmount()>
c001e00e:	58                   	pop    eax
c001e00f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e015:	e8 22 ca fe ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c001e01a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e020:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e024:	83 c4 18             	add    esp,0x18
c001e027:	5b                   	pop    ebx
c001e028:	e9 ff c9 fe ff       	jmp    c000aa2c <VCache::invalidateReadBuffer()>
c001e02d:	90                   	nop

c001e02e <ATAPI::eject()>:
c001e02e:	57                   	push   edi
c001e02f:	b9 03 00 00 00       	mov    ecx,0x3
c001e034:	53                   	push   ebx
c001e035:	83 ec 14             	sub    esp,0x14
c001e038:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e03c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e040:	fc                   	cld    
c001e041:	31 c0                	xor    eax,eax
c001e043:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e045:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e04a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e04f:	50                   	push   eax
c001e050:	50                   	push   eax
c001e051:	6a 00                	push   0x0
c001e053:	6a 00                	push   0x0
c001e055:	6a 00                	push   0x0
c001e057:	6a 02                	push   0x2
c001e059:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e05d:	50                   	push   eax
c001e05e:	53                   	push   ebx
c001e05f:	e8 d0 fc ff ff       	call   c001dd34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e064:	83 c4 14             	add    esp,0x14
c001e067:	53                   	push   ebx
c001e068:	e8 87 ff ff ff       	call   c001dff4 <ATAPI::diskRemoved()>
c001e06d:	83 c4 24             	add    esp,0x24
c001e070:	31 c0                	xor    eax,eax
c001e072:	5b                   	pop    ebx
c001e073:	5f                   	pop    edi
c001e074:	c3                   	ret    
c001e075:	90                   	nop

c001e076 <ATAPI::diskInserted()>:
c001e076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e07a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e081:	c3                   	ret    

c001e082 <ATAPI::detectMedia()>:
c001e082:	56                   	push   esi
c001e083:	53                   	push   ebx
c001e084:	83 ec 28             	sub    esp,0x28
c001e087:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e08b:	6a 0c                	push   0xc
c001e08d:	6a 00                	push   0x0
c001e08f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e093:	56                   	push   esi
c001e094:	e8 57 24 fe ff       	call   c00004f0 <memset>
c001e099:	58                   	pop    eax
c001e09a:	5a                   	pop    edx
c001e09b:	6a 00                	push   0x0
c001e09d:	6a 00                	push   0x0
c001e09f:	6a 00                	push   0x0
c001e0a1:	6a 00                	push   0x0
c001e0a3:	56                   	push   esi
c001e0a4:	53                   	push   ebx
c001e0a5:	e8 8a fc ff ff       	call   c001dd34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0aa:	83 c4 1c             	add    esp,0x1c
c001e0ad:	6a 0c                	push   0xc
c001e0af:	6a 00                	push   0x0
c001e0b1:	56                   	push   esi
c001e0b2:	e8 39 24 fe ff       	call   c00004f0 <memset>
c001e0b7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e0bc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e0c1:	59                   	pop    ecx
c001e0c2:	58                   	pop    eax
c001e0c3:	6a 01                	push   0x1
c001e0c5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e0c9:	50                   	push   eax
c001e0ca:	6a 00                	push   0x0
c001e0cc:	6a 12                	push   0x12
c001e0ce:	56                   	push   esi
c001e0cf:	53                   	push   ebx
c001e0d0:	e8 5f fc ff ff       	call   c001dd34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0d5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e0d9:	83 c4 20             	add    esp,0x20
c001e0dc:	83 e0 7f             	and    eax,0x7f
c001e0df:	83 f8 70             	cmp    eax,0x70
c001e0e2:	74 15                	je     c001e0f9 <ATAPI::detectMedia()+0x77>
c001e0e4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0eb:	75 0c                	jne    c001e0f9 <ATAPI::detectMedia()+0x77>
c001e0ed:	83 ec 0c             	sub    esp,0xc
c001e0f0:	53                   	push   ebx
c001e0f1:	e8 80 ff ff ff       	call   c001e076 <ATAPI::diskInserted()>
c001e0f6:	83 c4 10             	add    esp,0x10
c001e0f9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e0fd:	83 e0 0f             	and    eax,0xf
c001e100:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e105:	0f b6 c0             	movzx  eax,al
c001e108:	75 19                	jne    c001e123 <ATAPI::detectMedia()+0xa1>
c001e10a:	83 f8 02             	cmp    eax,0x2
c001e10d:	75 14                	jne    c001e123 <ATAPI::detectMedia()+0xa1>
c001e10f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e116:	74 24                	je     c001e13c <ATAPI::detectMedia()+0xba>
c001e118:	83 ec 0c             	sub    esp,0xc
c001e11b:	53                   	push   ebx
c001e11c:	e8 d3 fe ff ff       	call   c001dff4 <ATAPI::diskRemoved()>
c001e121:	eb 16                	jmp    c001e139 <ATAPI::detectMedia()+0xb7>
c001e123:	85 c0                	test   eax,eax
c001e125:	75 15                	jne    c001e13c <ATAPI::detectMedia()+0xba>
c001e127:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e12e:	75 0c                	jne    c001e13c <ATAPI::detectMedia()+0xba>
c001e130:	83 ec 0c             	sub    esp,0xc
c001e133:	53                   	push   ebx
c001e134:	e8 3d ff ff ff       	call   c001e076 <ATAPI::diskInserted()>
c001e139:	83 c4 10             	add    esp,0x10
c001e13c:	83 c4 24             	add    esp,0x24
c001e13f:	5b                   	pop    ebx
c001e140:	5e                   	pop    esi
c001e141:	c3                   	ret    

c001e142 <ATAPI::open(int, int, void*)>:
c001e142:	56                   	push   esi
c001e143:	53                   	push   ebx
c001e144:	50                   	push   eax
c001e145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e14d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e151:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e157:	c1 e0 06             	shl    eax,0x6
c001e15a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e160:	01 d0                	add    eax,edx
c001e162:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e169:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e16f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e176:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e180:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e187:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e18d:	6a 04                	push   0x4
c001e18f:	6a 0c                	push   0xc
c001e191:	51                   	push   ecx
c001e192:	52                   	push   edx
c001e193:	e8 b4 e3 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e198:	90                   	nop
c001e199:	90                   	nop
c001e19a:	6a 00                	push   0x0
c001e19c:	6a 0c                	push   0xc
c001e19e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1a5:	50                   	push   eax
c001e1a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1ac:	e8 9b e3 ff ff       	call   c001c54c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1b1:	83 c4 14             	add    esp,0x14
c001e1b4:	68 78 01 00 00       	push   0x178
c001e1b9:	e8 12 07 ff ff       	call   c000e8d0 <malloc>
c001e1be:	83 c4 0c             	add    esp,0xc
c001e1c1:	6a 00                	push   0x0
c001e1c3:	68 ff ff ff 7f       	push   0x7fffffff
c001e1c8:	6a 00                	push   0x0
c001e1ca:	6a 00                	push   0x0
c001e1cc:	53                   	push   ebx
c001e1cd:	68 2f 39 02 c0       	push   0xc002392f
c001e1d2:	89 c6                	mov    esi,eax
c001e1d4:	50                   	push   eax
c001e1d5:	e8 ba bc fe ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1da:	83 c4 14             	add    esp,0x14
c001e1dd:	56                   	push   esi
c001e1de:	e8 71 bd fe ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c001e1e3:	5a                   	pop    edx
c001e1e4:	59                   	pop    ecx
c001e1e5:	0f be c0             	movsx  eax,al
c001e1e8:	50                   	push   eax
c001e1e9:	68 74 37 02 c0       	push   0xc0023774
c001e1ee:	e8 5b 8d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e1f3:	58                   	pop    eax
c001e1f4:	5a                   	pop    edx
c001e1f5:	56                   	push   esi
c001e1f6:	53                   	push   ebx
c001e1f7:	e8 4a ae fe ff       	call   c0009046 <Device::addChild(Device*)>
c001e1fc:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e202:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e205:	e8 88 b2 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001e20a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e211:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e214:	e8 69 fe ff ff       	call   c001e082 <ATAPI::detectMedia()>
c001e219:	83 c4 14             	add    esp,0x14
c001e21c:	31 c0                	xor    eax,eax
c001e21e:	5b                   	pop    ebx
c001e21f:	5e                   	pop    esi
c001e220:	c3                   	ret    
c001e221:	90                   	nop

c001e222 <ATAPI::read(unsigned long long, int, void*)>:
c001e222:	55                   	push   ebp
c001e223:	57                   	push   edi
c001e224:	56                   	push   esi
c001e225:	53                   	push   ebx
c001e226:	83 ec 1c             	sub    esp,0x1c
c001e229:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e22d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e231:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e235:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e23c:	74 3c                	je     c001e27a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e23e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e242:	b9 03 00 00 00       	mov    ecx,0x3
c001e247:	fc                   	cld    
c001e248:	31 c0                	xor    eax,eax
c001e24a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e24c:	89 e8                	mov    eax,ebp
c001e24e:	0f ce                	bswap  esi
c001e250:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e254:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e259:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e25d:	50                   	push   eax
c001e25e:	50                   	push   eax
c001e25f:	55                   	push   ebp
c001e260:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e264:	c1 e5 0b             	shl    ebp,0xb
c001e267:	6a 00                	push   0x0
c001e269:	55                   	push   ebp
c001e26a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e26e:	50                   	push   eax
c001e26f:	53                   	push   ebx
c001e270:	e8 bf fa ff ff       	call   c001dd34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e275:	83 c4 20             	add    esp,0x20
c001e278:	eb 1a                	jmp    c001e294 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e27a:	83 ec 0c             	sub    esp,0xc
c001e27d:	53                   	push   ebx
c001e27e:	e8 ff fd ff ff       	call   c001e082 <ATAPI::detectMedia()>
c001e283:	83 c4 10             	add    esp,0x10
c001e286:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e28d:	75 af                	jne    c001e23e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e28f:	b8 02 00 00 00       	mov    eax,0x2
c001e294:	83 c4 1c             	add    esp,0x1c
c001e297:	5b                   	pop    ebx
c001e298:	5e                   	pop    esi
c001e299:	5f                   	pop    edi
c001e29a:	5d                   	pop    ebp
c001e29b:	c3                   	ret    

c001e29c <SATA::close(int, int, void*)>:
c001e29c:	83 ec 0c             	sub    esp,0xc
c001e29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2a9:	85 c0                	test   eax,eax
c001e2ab:	74 0c                	je     c001e2b9 <SATA::close(int, int, void*)+0x1d>
c001e2ad:	8b 10                	mov    edx,DWORD PTR [eax]
c001e2af:	83 ec 0c             	sub    esp,0xc
c001e2b2:	50                   	push   eax
c001e2b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e2b6:	83 c4 10             	add    esp,0x10
c001e2b9:	31 c0                	xor    eax,eax
c001e2bb:	83 c4 0c             	add    esp,0xc
c001e2be:	c3                   	ret    
c001e2bf:	90                   	nop

c001e2c0 <SATA::powerSaving(PowerSavingLevel)>:
c001e2c0:	c3                   	ret    
c001e2c1:	90                   	nop

c001e2c2 <SATA::open(int, int, void*)>:
c001e2c2:	56                   	push   esi
c001e2c3:	53                   	push   ebx
c001e2c4:	83 ec 10             	sub    esp,0x10
c001e2c7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e2cb:	68 bc 37 02 c0       	push   0xc00237bc
c001e2d0:	e8 79 8c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e2d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2d9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e2e3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e2f7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e301:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e308:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e30e:	e8 fd 0a ff ff       	call   c000ee10 <Phys::allocatePage()>
c001e313:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e319:	89 c6                	mov    esi,eax
c001e31b:	e8 f0 0a ff ff       	call   c000ee10 <Phys::allocatePage()>
c001e320:	81 c6 00 10 00 00    	add    esi,0x1000
c001e326:	83 c4 10             	add    esp,0x10
c001e329:	39 c6                	cmp    esi,eax
c001e32b:	74 10                	je     c001e33d <SATA::open(int, int, void*)+0x7b>
c001e32d:	83 ec 0c             	sub    esp,0xc
c001e330:	68 c8 37 02 c0       	push   0xc00237c8
c001e335:	e8 dc 08 ff ff       	call   c000ec16 <KePanic(char const*)>
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	83 ec 0c             	sub    esp,0xc
c001e340:	6a 02                	push   0x2
c001e342:	e8 fc 3b ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001e347:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e34d:	6a 03                	push   0x3
c001e34f:	50                   	push   eax
c001e350:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e356:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e35c:	e8 bb 42 ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c001e361:	83 c4 14             	add    esp,0x14
c001e364:	53                   	push   ebx
c001e365:	e8 28 b1 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001e36a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e36d:	e8 f4 bf fe ff       	call   c000a366 <createPartitionsForDisk(PhysicalDisk*)>
c001e372:	83 c4 14             	add    esp,0x14
c001e375:	31 c0                	xor    eax,eax
c001e377:	5b                   	pop    ebx
c001e378:	5e                   	pop    esi
c001e379:	c3                   	ret    

c001e37a <SATA::SATA()>:
c001e37a:	83 ec 0c             	sub    esp,0xc
c001e37d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e381:	83 ec 04             	sub    esp,0x4
c001e384:	68 00 02 00 00       	push   0x200
c001e389:	68 dc 37 02 c0       	push   0xc00237dc
c001e38e:	50                   	push   eax
c001e38f:	e8 96 b0 fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e394:	83 c4 10             	add    esp,0x10
c001e397:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001e39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a0:	89 10                	mov    DWORD PTR [eax],edx
c001e3a2:	90                   	nop
c001e3a3:	83 c4 0c             	add    esp,0xc
c001e3a6:	c3                   	ret    
c001e3a7:	90                   	nop

c001e3a8 <SATA::access(unsigned long long, int, void*, bool)>:
c001e3a8:	55                   	push   ebp
c001e3a9:	57                   	push   edi
c001e3aa:	56                   	push   esi
c001e3ab:	53                   	push   ebx
c001e3ac:	83 ec 2c             	sub    esp,0x2c
c001e3af:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e3b3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e3b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e3bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e3c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e3c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3cb:	fa                   	cli    
c001e3cc:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e3d2:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e3d7:	7e 10                	jle    c001e3e9 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001e3d9:	83 ec 0c             	sub    esp,0xc
c001e3dc:	68 ec 37 02 c0       	push   0xc00237ec
c001e3e1:	e8 30 08 ff ff       	call   c000ec16 <KePanic(char const*)>
c001e3e6:	83 c4 10             	add    esp,0x10
c001e3e9:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e3ef:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001e3f5:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e3fb:	89 e8                	mov    eax,ebp
c001e3fd:	c1 e0 07             	shl    eax,0x7
c001e400:	01 d0                	add    eax,edx
c001e402:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e40c:	8d 45 02             	lea    eax,[ebp+0x2]
c001e40f:	51                   	push   ecx
c001e410:	c1 e0 07             	shl    eax,0x7
c001e413:	51                   	push   ecx
c001e414:	01 d0                	add    eax,edx
c001e416:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001e41a:	50                   	push   eax
c001e41b:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e421:	e8 0c ef ff ff       	call   c001d332 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e426:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e42a:	83 c4 10             	add    esp,0x10
c001e42d:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001e432:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e436:	0f 84 a6 01 00 00    	je     c001e5e2 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001e43c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e440:	c1 e0 09             	shl    eax,0x9
c001e443:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e448:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e44c:	74 0e                	je     c001e45c <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001e44e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e454:	89 c1                	mov    ecx,eax
c001e456:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e45a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e45c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e460:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e466:	8d 45 02             	lea    eax,[ebp+0x2]
c001e469:	c1 e0 07             	shl    eax,0x7
c001e46c:	01 d0                	add    eax,edx
c001e46e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e470:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e476:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e47c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e480:	c1 e1 05             	shl    ecx,0x5
c001e483:	01 c8                	add    eax,ecx
c001e485:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e489:	83 e1 01             	and    ecx,0x1
c001e48c:	89 ce                	mov    esi,ecx
c001e48e:	8a 08                	mov    cl,BYTE PTR [eax]
c001e490:	c1 e6 06             	shl    esi,0x6
c001e493:	83 e1 bf             	and    ecx,0xffffffbf
c001e496:	09 f1                	or     ecx,esi
c001e498:	88 08                	mov    BYTE PTR [eax],cl
c001e49a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e49c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e4a2:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e4a8:	89 08                	mov    DWORD PTR [eax],ecx
c001e4aa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e4b0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e4b6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e4bc:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e4bf:	50                   	push   eax
c001e4c0:	68 90 00 00 00       	push   0x90
c001e4c5:	6a 00                	push   0x0
c001e4c7:	56                   	push   esi
c001e4c8:	e8 23 20 fe ff       	call   c00004f0 <memset>
c001e4cd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e4d3:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e4d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4dd:	83 c4 10             	add    esp,0x10
c001e4e0:	48                   	dec    eax
c001e4e1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e4e6:	89 c1                	mov    ecx,eax
c001e4e8:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e4ee:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4f3:	09 c8                	or     eax,ecx
c001e4f5:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e4fb:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e501:	83 c8 80             	or     eax,0xffffff80
c001e504:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e50a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e50d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e511:	25 00 7f 00 00       	and    eax,0x7f00
c001e516:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e51b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e520:	66 89 06             	mov    WORD PTR [esi],ax
c001e523:	b0 35                	mov    al,0x35
c001e525:	75 02                	jne    c001e529 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001e527:	b0 25                	mov    al,0x25
c001e529:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e52c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e530:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e534:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001e538:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e53c:	c1 e8 10             	shr    eax,0x10
c001e53f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e542:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e546:	c1 e8 18             	shr    eax,0x18
c001e549:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e54c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e550:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e553:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e557:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e55a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e55e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e562:	89 ee                	mov    esi,ebp
c001e564:	31 c0                	xor    eax,eax
c001e566:	c1 e6 07             	shl    esi,0x7
c001e569:	01 d6                	add    esi,edx
c001e56b:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e571:	80 e1 88             	and    cl,0x88
c001e574:	74 0a                	je     c001e580 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e576:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e57b:	74 0a                	je     c001e587 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e57d:	40                   	inc    eax
c001e57e:	eb eb                	jmp    c001e56b <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e580:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e585:	75 0a                	jne    c001e591 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e587:	83 ec 0c             	sub    esp,0xc
c001e58a:	68 25 38 02 c0       	push   0xc0023825
c001e58f:	eb 34                	jmp    c001e5c5 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001e591:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001e595:	c1 e5 07             	shl    ebp,0x7
c001e598:	b8 01 00 00 00       	mov    eax,0x1
c001e59d:	01 ea                	add    edx,ebp
c001e59f:	d3 e0                	shl    eax,cl
c001e5a1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e5a7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e5ad:	85 c8                	test   eax,ecx
c001e5af:	74 25                	je     c001e5d6 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001e5b1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e5b7:	0f ba e1 1e          	bt     ecx,0x1e
c001e5bb:	73 ea                	jae    c001e5a7 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001e5bd:	83 ec 0c             	sub    esp,0xc
c001e5c0:	68 33 38 02 c0       	push   0xc0023833
c001e5c5:	e8 84 89 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e5ca:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e5d1:	83 c4 10             	add    esp,0x10
c001e5d4:	eb 13                	jmp    c001e5e9 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001e5d6:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e5dc:	0f ba e0 1e          	bt     eax,0x1e
c001e5e0:	73 18                	jae    c001e5fa <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001e5e2:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e5e9:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001e5f0:	75 01                	jne    c001e5f3 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001e5f2:	fb                   	sti    
c001e5f3:	b8 01 00 00 00       	mov    eax,0x1
c001e5f8:	eb 2c                	jmp    c001e626 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e5fa:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e5ff:	75 10                	jne    c001e611 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001e601:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e607:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e60b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e60f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e611:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e618:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e61d:	85 c0                	test   eax,eax
c001e61f:	75 03                	jne    c001e624 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001e621:	fb                   	sti    
c001e622:	eb 02                	jmp    c001e626 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e624:	31 c0                	xor    eax,eax
c001e626:	83 c4 2c             	add    esp,0x2c
c001e629:	5b                   	pop    ebx
c001e62a:	5e                   	pop    esi
c001e62b:	5f                   	pop    edi
c001e62c:	5d                   	pop    ebp
c001e62d:	c3                   	ret    

c001e62e <SATA::read(unsigned long long, int, void*)>:
c001e62e:	57                   	push   edi
c001e62f:	b8 04 00 00 00       	mov    eax,0x4
c001e634:	56                   	push   esi
c001e635:	53                   	push   ebx
c001e636:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e63a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e63e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e642:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e646:	8d 7a ff             	lea    edi,[edx-0x1]
c001e649:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e64f:	77 25                	ja     c001e676 <SATA::read(unsigned long long, int, void*)+0x48>
c001e651:	85 f6                	test   esi,esi
c001e653:	b8 06 00 00 00       	mov    eax,0x6
c001e658:	74 1c                	je     c001e676 <SATA::read(unsigned long long, int, void*)+0x48>
c001e65a:	50                   	push   eax
c001e65b:	50                   	push   eax
c001e65c:	6a 00                	push   0x0
c001e65e:	56                   	push   esi
c001e65f:	52                   	push   edx
c001e660:	53                   	push   ebx
c001e661:	51                   	push   ecx
c001e662:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e666:	e8 3d fd ff ff       	call   c001e3a8 <SATA::access(unsigned long long, int, void*, bool)>
c001e66b:	83 c4 20             	add    esp,0x20
c001e66e:	85 c0                	test   eax,eax
c001e670:	0f 95 c0             	setne  al
c001e673:	0f b6 c0             	movzx  eax,al
c001e676:	5b                   	pop    ebx
c001e677:	5e                   	pop    esi
c001e678:	5f                   	pop    edi
c001e679:	c3                   	ret    

c001e67a <SATA::write(unsigned long long, int, void*)>:
c001e67a:	55                   	push   ebp
c001e67b:	b8 04 00 00 00       	mov    eax,0x4
c001e680:	57                   	push   edi
c001e681:	56                   	push   esi
c001e682:	53                   	push   ebx
c001e683:	83 ec 0c             	sub    esp,0xc
c001e686:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e68a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e68e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e692:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e696:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e699:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e69f:	77 3d                	ja     c001e6de <SATA::write(unsigned long long, int, void*)+0x64>
c001e6a1:	85 ed                	test   ebp,ebp
c001e6a3:	b8 06 00 00 00       	mov    eax,0x6
c001e6a8:	74 34                	je     c001e6de <SATA::write(unsigned long long, int, void*)+0x64>
c001e6aa:	c1 e3 09             	shl    ebx,0x9
c001e6ad:	01 eb                	add    ebx,ebp
c001e6af:	50                   	push   eax
c001e6b0:	89 d6                	mov    esi,edx
c001e6b2:	50                   	push   eax
c001e6b3:	83 c6 01             	add    esi,0x1
c001e6b6:	6a 01                	push   0x1
c001e6b8:	89 cf                	mov    edi,ecx
c001e6ba:	55                   	push   ebp
c001e6bb:	83 d7 00             	adc    edi,0x0
c001e6be:	6a 01                	push   0x1
c001e6c0:	81 c5 00 02 00 00    	add    ebp,0x200
c001e6c6:	51                   	push   ecx
c001e6c7:	52                   	push   edx
c001e6c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e6cc:	e8 d7 fc ff ff       	call   c001e3a8 <SATA::access(unsigned long long, int, void*, bool)>
c001e6d1:	83 c4 20             	add    esp,0x20
c001e6d4:	39 dd                	cmp    ebp,ebx
c001e6d6:	89 f2                	mov    edx,esi
c001e6d8:	89 f9                	mov    ecx,edi
c001e6da:	75 d3                	jne    c001e6af <SATA::write(unsigned long long, int, void*)+0x35>
c001e6dc:	31 c0                	xor    eax,eax
c001e6de:	83 c4 0c             	add    esp,0xc
c001e6e1:	5b                   	pop    ebx
c001e6e2:	5e                   	pop    esi
c001e6e3:	5f                   	pop    edi
c001e6e4:	5d                   	pop    ebp
c001e6e5:	c3                   	ret    

c001e6e6 <SATAPI::write(unsigned long long, int, void*)>:
c001e6e6:	b8 03 00 00 00       	mov    eax,0x3
c001e6eb:	c3                   	ret    

c001e6ec <SATAPI::close(int, int, void*)>:
c001e6ec:	83 ec 0c             	sub    esp,0xc
c001e6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6f9:	85 c0                	test   eax,eax
c001e6fb:	74 0c                	je     c001e709 <SATAPI::close(int, int, void*)+0x1d>
c001e6fd:	8b 10                	mov    edx,DWORD PTR [eax]
c001e6ff:	83 ec 0c             	sub    esp,0xc
c001e702:	50                   	push   eax
c001e703:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e706:	83 c4 10             	add    esp,0x10
c001e709:	31 c0                	xor    eax,eax
c001e70b:	83 c4 0c             	add    esp,0xc
c001e70e:	c3                   	ret    
c001e70f:	90                   	nop

c001e710 <SATAPI::SATAPI()>:
c001e710:	83 ec 0c             	sub    esp,0xc
c001e713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e717:	83 ec 04             	sub    esp,0x4
c001e71a:	68 00 08 00 00       	push   0x800
c001e71f:	68 7c 38 02 c0       	push   0xc002387c
c001e724:	50                   	push   eax
c001e725:	e8 00 ad fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e72a:	83 c4 10             	add    esp,0x10
c001e72d:	ba 70 39 02 c0       	mov    edx,0xc0023970
c001e732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e736:	89 10                	mov    DWORD PTR [eax],edx
c001e738:	90                   	nop
c001e739:	83 c4 0c             	add    esp,0xc
c001e73c:	c3                   	ret    
c001e73d:	90                   	nop

c001e73e <SATAPI::diskRemoved()>:
c001e73e:	c3                   	ret    
c001e73f:	90                   	nop

c001e740 <SATAPI::diskInserted()>:
c001e740:	83 ec 18             	sub    esp,0x18
c001e743:	68 88 38 02 c0       	push   0xc0023888
c001e748:	e8 01 88 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e74d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e751:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e758:	83 c4 1c             	add    esp,0x1c
c001e75b:	c3                   	ret    

c001e75c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e75c:	55                   	push   ebp
c001e75d:	57                   	push   edi
c001e75e:	56                   	push   esi
c001e75f:	53                   	push   ebx
c001e760:	83 ec 34             	sub    esp,0x34
c001e763:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e767:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e76b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e76f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e773:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e777:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e77d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e783:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e787:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e78d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e791:	83 c0 02             	add    eax,0x2
c001e794:	c1 e0 07             	shl    eax,0x7
c001e797:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e79b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e79f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7a3:	c1 e0 07             	shl    eax,0x7
c001e7a6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e7aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e7ae:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e7b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e7bc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e7c2:	e8 6b eb ff ff       	call   c001d332 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e7c7:	83 c4 10             	add    esp,0x10
c001e7ca:	89 c2                	mov    edx,eax
c001e7cc:	b8 01 00 00 00       	mov    eax,0x1
c001e7d1:	83 fa ff             	cmp    edx,0xffffffff
c001e7d4:	0f 84 5f 02 00 00    	je     c001ea39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e7da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7e2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e7e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7ea:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e7f0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e7f6:	89 d1                	mov    ecx,edx
c001e7f8:	c1 e1 05             	shl    ecx,0x5
c001e7fb:	01 c8                	add    eax,ecx
c001e7fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7ff:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e805:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e80b:	89 08                	mov    DWORD PTR [eax],ecx
c001e80d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e813:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e819:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e81f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e822:	50                   	push   eax
c001e823:	68 90 00 00 00       	push   0x90
c001e828:	6a 00                	push   0x0
c001e82a:	53                   	push   ebx
c001e82b:	e8 c0 1c fe ff       	call   c00004f0 <memset>
c001e830:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e833:	b9 0c 00 00 00       	mov    ecx,0xc
c001e838:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e83c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e83e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e844:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e848:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e84c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e852:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e856:	48                   	dec    eax
c001e857:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e85c:	89 c1                	mov    ecx,eax
c001e85e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e864:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e869:	09 c8                	or     eax,ecx
c001e86b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e871:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e877:	83 c8 80             	or     eax,0xffffff80
c001e87a:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e880:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e883:	25 00 7f 00 00       	and    eax,0x7f00
c001e888:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e88d:	66 89 03             	mov    WORD PTR [ebx],ax
c001e890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e894:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e89c:	c1 e8 10             	shr    eax,0x10
c001e89f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e8a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8a6:	c1 e8 18             	shr    eax,0x18
c001e8a9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e8ac:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e8b0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e8b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e8b7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e8ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e8be:	83 c4 10             	add    esp,0x10
c001e8c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e8c5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e8c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8cd:	31 c0                	xor    eax,eax
c001e8cf:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e8d5:	80 e1 88             	and    cl,0x88
c001e8d8:	74 0a                	je     c001e8e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e8da:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e8df:	74 0a                	je     c001e8eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e8e1:	40                   	inc    eax
c001e8e2:	eb eb                	jmp    c001e8cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e8e4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e8e9:	75 43                	jne    c001e92e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e8eb:	83 ec 0c             	sub    esp,0xc
c001e8ee:	68 a0 38 02 c0       	push   0xc00238a0
c001e8f3:	e8 56 86 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e8f8:	58                   	pop    eax
c001e8f9:	5a                   	pop    edx
c001e8fa:	68 b5 38 02 c0       	push   0xc00238b5
c001e8ff:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001e905:	e8 6c 2a ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001e90a:	59                   	pop    ecx
c001e90b:	5b                   	pop    ebx
c001e90c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e910:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e916:	e8 b1 ea ff ff       	call   c001d3cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e91b:	5e                   	pop    esi
c001e91c:	5f                   	pop    edi
c001e91d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e921:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e927:	e8 80 ea ff ff       	call   c001d3ac <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e92c:	eb 48                	jmp    c001e976 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e92e:	b8 01 00 00 00       	mov    eax,0x1
c001e933:	88 d1                	mov    cl,dl
c001e935:	d3 e0                	shl    eax,cl
c001e937:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e93c:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e942:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e946:	89 c7                	mov    edi,eax
c001e948:	c1 e3 07             	shl    ebx,0x7
c001e94b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e94f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e955:	85 c7                	test   edi,eax
c001e957:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e95d:	0f 84 a3 00 00 00    	je     c001ea06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e963:	0f ba e0 1e          	bt     eax,0x1e
c001e967:	73 1a                	jae    c001e983 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e969:	83 ec 0c             	sub    esp,0xc
c001e96c:	68 c7 38 02 c0       	push   0xc00238c7
c001e971:	e8 d8 85 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e976:	83 c4 10             	add    esp,0x10
c001e979:	b8 01 00 00 00       	mov    eax,0x1
c001e97e:	e9 b6 00 00 00       	jmp    c001ea39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e983:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e989:	83 f8 0d             	cmp    eax,0xd
c001e98c:	77 0a                	ja     c001e998 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e98e:	83 ec 0c             	sub    esp,0xc
c001e991:	68 c8 00 00 00       	push   0xc8
c001e996:	eb 28                	jmp    c001e9c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e998:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e99e:	83 f8 0d             	cmp    eax,0xd
c001e9a1:	77 0a                	ja     c001e9ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e9a3:	83 ec 0c             	sub    esp,0xc
c001e9a6:	68 58 02 00 00       	push   0x258
c001e9ab:	eb 13                	jmp    c001e9c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e9ad:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e9b3:	83 f8 06             	cmp    eax,0x6
c001e9b6:	77 10                	ja     c001e9c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e9b8:	83 ec 0c             	sub    esp,0xc
c001e9bb:	68 dc 05 00 00       	push   0x5dc
c001e9c0:	e8 ff 6b ff ff       	call   c00155c4 <milliTenthSleep(unsigned int)>
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e9cc:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e9cf:	75 06                	jne    c001e9d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e9d1:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e9d5:	74 15                	je     c001e9ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e9d7:	83 fe 06             	cmp    esi,0x6
c001e9da:	77 10                	ja     c001e9ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e9dc:	83 ec 0c             	sub    esp,0xc
c001e9df:	68 c4 09 00 00       	push   0x9c4
c001e9e4:	e8 db 6b ff ff       	call   c00155c4 <milliTenthSleep(unsigned int)>
c001e9e9:	83 c4 10             	add    esp,0x10
c001e9ec:	46                   	inc    esi
c001e9ed:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e9f3:	0f 85 56 ff ff ff    	jne    c001e94f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e9f9:	83 ec 0c             	sub    esp,0xc
c001e9fc:	68 da 38 02 c0       	push   0xc00238da
c001ea01:	e9 6b ff ff ff       	jmp    c001e971 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001ea06:	0f ba e0 1e          	bt     eax,0x1e
c001ea0a:	73 0d                	jae    c001ea19 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001ea0c:	83 ec 0c             	sub    esp,0xc
c001ea0f:	68 ee 38 02 c0       	push   0xc00238ee
c001ea14:	e9 58 ff ff ff       	jmp    c001e971 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001ea19:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ea1e:	74 17                	je     c001ea37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001ea20:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ea25:	74 10                	je     c001ea37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001ea27:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ea2d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ea31:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ea35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ea37:	31 c0                	xor    eax,eax
c001ea39:	83 c4 2c             	add    esp,0x2c
c001ea3c:	5b                   	pop    ebx
c001ea3d:	5e                   	pop    esi
c001ea3e:	5f                   	pop    edi
c001ea3f:	5d                   	pop    ebp
c001ea40:	c3                   	ret    
c001ea41:	90                   	nop

c001ea42 <SATAPI::eject()>:
c001ea42:	57                   	push   edi
c001ea43:	b9 03 00 00 00       	mov    ecx,0x3
c001ea48:	83 ec 18             	sub    esp,0x18
c001ea4b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ea4f:	fc                   	cld    
c001ea50:	31 c0                	xor    eax,eax
c001ea52:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ea54:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ea59:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ea5e:	50                   	push   eax
c001ea5f:	6a 00                	push   0x0
c001ea61:	6a 00                	push   0x0
c001ea63:	6a 00                	push   0x0
c001ea65:	6a 00                	push   0x0
c001ea67:	6a 02                	push   0x2
c001ea69:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ea6d:	50                   	push   eax
c001ea6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea72:	e8 e5 fc ff ff       	call   c001e75c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ea77:	83 c4 38             	add    esp,0x38
c001ea7a:	31 c0                	xor    eax,eax
c001ea7c:	5f                   	pop    edi
c001ea7d:	c3                   	ret    

c001ea7e <SATAPI::detectMedia()>:
c001ea7e:	53                   	push   ebx
c001ea7f:	83 ec 14             	sub    esp,0x14
c001ea82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ea86:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ea8c:	e8 ab bf fe ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c001ea91:	59                   	pop    ecx
c001ea92:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ea98:	e8 8f bf fe ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c001ea9d:	c7 04 24 03 39 02 c0 	mov    DWORD PTR [esp],0xc0023903
c001eaa4:	e8 a5 84 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eaa9:	83 c4 10             	add    esp,0x10
c001eaac:	31 c0                	xor    eax,eax
c001eaae:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001eab5:	85 d2                	test   edx,edx
c001eab7:	74 0f                	je     c001eac8 <SATAPI::detectMedia()+0x4a>
c001eab9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001eabf:	75 07                	jne    c001eac8 <SATAPI::detectMedia()+0x4a>
c001eac1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001eac8:	40                   	inc    eax
c001eac9:	83 f8 1a             	cmp    eax,0x1a
c001eacc:	75 e0                	jne    c001eaae <SATAPI::detectMedia()+0x30>
c001eace:	83 c4 08             	add    esp,0x8
c001ead1:	5b                   	pop    ebx
c001ead2:	c3                   	ret    
c001ead3:	90                   	nop

c001ead4 <SATAPI::open(int, int, void*)>:
c001ead4:	56                   	push   esi
c001ead5:	53                   	push   ebx
c001ead6:	51                   	push   ecx
c001ead7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eadb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eadf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001eae9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001eaef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eaf3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eafd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001eb07:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001eb0e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001eb14:	e8 f7 02 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001eb19:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001eb1f:	89 c6                	mov    esi,eax
c001eb21:	e8 ea 02 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001eb26:	81 c6 00 10 00 00    	add    esi,0x1000
c001eb2c:	39 c6                	cmp    esi,eax
c001eb2e:	74 10                	je     c001eb40 <SATAPI::open(int, int, void*)+0x6c>
c001eb30:	83 ec 0c             	sub    esp,0xc
c001eb33:	68 18 39 02 c0       	push   0xc0023918
c001eb38:	e8 d9 00 ff ff       	call   c000ec16 <KePanic(char const*)>
c001eb3d:	83 c4 10             	add    esp,0x10
c001eb40:	83 ec 0c             	sub    esp,0xc
c001eb43:	6a 02                	push   0x2
c001eb45:	e8 f9 33 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001eb4a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001eb50:	6a 03                	push   0x3
c001eb52:	50                   	push   eax
c001eb53:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001eb59:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001eb5f:	e8 b8 3a ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c001eb64:	83 c4 14             	add    esp,0x14
c001eb67:	68 78 01 00 00       	push   0x178
c001eb6c:	e8 5f fd fe ff       	call   c000e8d0 <malloc>
c001eb71:	83 c4 0c             	add    esp,0xc
c001eb74:	6a 00                	push   0x0
c001eb76:	68 ff ff ff 7f       	push   0x7fffffff
c001eb7b:	6a 00                	push   0x0
c001eb7d:	6a 00                	push   0x0
c001eb7f:	53                   	push   ebx
c001eb80:	68 2e 39 02 c0       	push   0xc002392e
c001eb85:	89 c6                	mov    esi,eax
c001eb87:	50                   	push   eax
c001eb88:	e8 07 b3 fe ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001eb8d:	83 c4 14             	add    esp,0x14
c001eb90:	56                   	push   esi
c001eb91:	e8 be b3 fe ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c001eb96:	5a                   	pop    edx
c001eb97:	59                   	pop    ecx
c001eb98:	0f be c0             	movsx  eax,al
c001eb9b:	50                   	push   eax
c001eb9c:	68 74 37 02 c0       	push   0xc0023774
c001eba1:	e8 a8 83 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eba6:	58                   	pop    eax
c001eba7:	5a                   	pop    edx
c001eba8:	56                   	push   esi
c001eba9:	53                   	push   ebx
c001ebaa:	e8 97 a4 fe ff       	call   c0009046 <Device::addChild(Device*)>
c001ebaf:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ebb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ebb8:	e8 d5 a8 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001ebbd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ebc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ebc7:	e8 b2 fe ff ff       	call   c001ea7e <SATAPI::detectMedia()>
c001ebcc:	83 c4 14             	add    esp,0x14
c001ebcf:	31 c0                	xor    eax,eax
c001ebd1:	5b                   	pop    ebx
c001ebd2:	5e                   	pop    esi
c001ebd3:	c3                   	ret    

c001ebd4 <SATAPI::read(unsigned long long, int, void*)>:
c001ebd4:	55                   	push   ebp
c001ebd5:	57                   	push   edi
c001ebd6:	56                   	push   esi
c001ebd7:	53                   	push   ebx
c001ebd8:	83 ec 3c             	sub    esp,0x3c
c001ebdb:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001ebdf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ebe3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ebe7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ebeb:	83 fd 04             	cmp    ebp,0x4
c001ebee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ebf2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ebf6:	7e 10                	jle    c001ec08 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001ebf8:	83 ec 0c             	sub    esp,0xc
c001ebfb:	68 3c 39 02 c0       	push   0xc002393c
c001ec00:	e8 11 00 ff ff       	call   c000ec16 <KePanic(char const*)>
c001ec05:	83 c4 10             	add    esp,0x10
c001ec08:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ec0e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ec14:	51                   	push   ecx
c001ec15:	50                   	push   eax
c001ec16:	83 c0 02             	add    eax,0x2
c001ec19:	c1 e0 07             	shl    eax,0x7
c001ec1c:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ec22:	50                   	push   eax
c001ec23:	52                   	push   edx
c001ec24:	e8 cd e7 ff ff       	call   c001d3f6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ec29:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ec2d:	b9 03 00 00 00       	mov    ecx,0x3
c001ec32:	fc                   	cld    
c001ec33:	31 c0                	xor    eax,eax
c001ec35:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec37:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ec3c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ec41:	83 c4 0c             	add    esp,0xc
c001ec44:	6a 00                	push   0x0
c001ec46:	6a 00                	push   0x0
c001ec48:	6a 00                	push   0x0
c001ec4a:	6a 00                	push   0x0
c001ec4c:	6a 02                	push   0x2
c001ec4e:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ec52:	50                   	push   eax
c001ec53:	53                   	push   ebx
c001ec54:	e8 03 fb ff ff       	call   c001e75c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ec59:	83 c4 20             	add    esp,0x20
c001ec5c:	85 c0                	test   eax,eax
c001ec5e:	89 c6                	mov    esi,eax
c001ec60:	75 46                	jne    c001eca8 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001ec62:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ec66:	b9 03 00 00 00       	mov    ecx,0x3
c001ec6b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec71:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ec76:	0f c8                	bswap  eax
c001ec78:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ec7c:	89 e8                	mov    eax,ebp
c001ec7e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ec82:	50                   	push   eax
c001ec83:	55                   	push   ebp
c001ec84:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001ec88:	c1 e5 0b             	shl    ebp,0xb
c001ec8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec93:	55                   	push   ebp
c001ec94:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ec98:	50                   	push   eax
c001ec99:	53                   	push   ebx
c001ec9a:	e8 bd fa ff ff       	call   c001e75c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ec9f:	83 c4 20             	add    esp,0x20
c001eca2:	85 c0                	test   eax,eax
c001eca4:	89 c6                	mov    esi,eax
c001eca6:	74 0c                	je     c001ecb4 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001eca8:	83 ec 0c             	sub    esp,0xc
c001ecab:	53                   	push   ebx
c001ecac:	e8 cd fd ff ff       	call   c001ea7e <SATAPI::detectMedia()>
c001ecb1:	83 c4 10             	add    esp,0x10
c001ecb4:	83 c4 3c             	add    esp,0x3c
c001ecb7:	89 f0                	mov    eax,esi
c001ecb9:	5b                   	pop    ebx
c001ecba:	5e                   	pop    esi
c001ecbb:	5f                   	pop    edi
c001ecbc:	5d                   	pop    ebp
c001ecbd:	c3                   	ret    

c001ecbe <IOAPIC::close(int, int, void*)>:
c001ecbe:	b8 00 00 00 00       	mov    eax,0x0
c001ecc3:	c3                   	ret    

c001ecc4 <apicGetBase()>:
c001ecc4:	55                   	push   ebp
c001ecc5:	89 e5                	mov    ebp,esp
c001ecc7:	83 ec 08             	sub    esp,0x8
c001ecca:	83 ec 0c             	sub    esp,0xc
c001eccd:	68 a0 39 02 c0       	push   0xc00239a0
c001ecd2:	e8 3f ff fe ff       	call   c000ec16 <KePanic(char const*)>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	b8 00 00 00 00       	mov    eax,0x0
c001ecdf:	c9                   	leave  
c001ece0:	c3                   	ret    
c001ece1:	90                   	nop

c001ece2 <IOAPIC::IOAPIC()>:
c001ece2:	83 ec 0c             	sub    esp,0xc
c001ece5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece9:	83 ec 08             	sub    esp,0x8
c001ecec:	68 af 39 02 c0       	push   0xc00239af
c001ecf1:	50                   	push   eax
c001ecf2:	e8 b1 a4 fe ff       	call   c00091a8 <Device::Device(char const*)>
c001ecf7:	83 c4 10             	add    esp,0x10
c001ecfa:	ba d0 39 02 c0       	mov    edx,0xc00239d0
c001ecff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed03:	89 10                	mov    DWORD PTR [eax],edx
c001ed05:	90                   	nop
c001ed06:	83 c4 0c             	add    esp,0xc
c001ed09:	c3                   	ret    

c001ed0a <apicOpen()>:
c001ed0a:	55                   	push   ebp
c001ed0b:	89 e5                	mov    ebp,esp
c001ed0d:	53                   	push   ebx
c001ed0e:	83 ec 34             	sub    esp,0x34
c001ed11:	83 ec 0c             	sub    esp,0xc
c001ed14:	68 b7 39 02 c0       	push   0xc00239b7
c001ed19:	e8 30 82 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ed1e:	83 c4 10             	add    esp,0x10
c001ed21:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001ed26:	83 f0 01             	xor    eax,0x1
c001ed29:	0f b6 c0             	movzx  eax,al
c001ed2c:	85 c0                	test   eax,eax
c001ed2e:	0f 84 a3 00 00 00    	je     c001edd7 <apicOpen()+0xcd>
c001ed34:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ed38:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001ed3d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ed41:	0f b6 c0             	movzx  eax,al
c001ed44:	39 c2                	cmp    edx,eax
c001ed46:	0f 83 84 00 00 00    	jae    c001edd0 <apicOpen()+0xc6>
c001ed4c:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ed53:	83 ec 0c             	sub    esp,0xc
c001ed56:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ed59:	e8 72 fb fe ff       	call   c000e8d0 <malloc>
c001ed5e:	83 c4 10             	add    esp,0x10
c001ed61:	89 c3                	mov    ebx,eax
c001ed63:	83 ec 0c             	sub    esp,0xc
c001ed66:	53                   	push   ebx
c001ed67:	e8 76 ff ff ff       	call   c001ece2 <IOAPIC::IOAPIC()>
c001ed6c:	83 c4 10             	add    esp,0x10
c001ed6f:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ed72:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ed76:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed79:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001ed80:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001ed85:	83 c0 01             	add    eax,0x1
c001ed88:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001ed8d:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001ed92:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ed98:	83 ec 08             	sub    esp,0x8
c001ed9b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ed9e:	50                   	push   eax
c001ed9f:	e8 a2 a2 fe ff       	call   c0009046 <Device::addChild(Device*)>
c001eda4:	83 c4 10             	add    esp,0x10
c001eda7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001edaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001edac:	83 c0 08             	add    eax,0x8
c001edaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb1:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001edb5:	6a 00                	push   0x0
c001edb7:	6a 00                	push   0x0
c001edb9:	52                   	push   edx
c001edba:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001edbd:	ff d0                	call   eax
c001edbf:	83 c4 10             	add    esp,0x10
c001edc2:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001edc5:	83 c0 01             	add    eax,0x1
c001edc8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001edcb:	e9 68 ff ff ff       	jmp    c001ed38 <apicOpen()+0x2e>
c001edd0:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001edd7:	e8 e8 fe ff ff       	call   c001ecc4 <apicGetBase()>
c001eddc:	05 f0 00 00 00       	add    eax,0xf0
c001ede1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ede4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ede7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ede9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001edec:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001edf3:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001edfa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001edfd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ee00:	89 10                	mov    DWORD PTR [eax],edx
c001ee02:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ee09:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001ee0e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ee11:	7d 7c                	jge    c001ee8f <apicOpen()+0x185>
c001ee13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee16:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee1d:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ee20:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee23:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee2a:	c1 e8 08             	shr    eax,0x8
c001ee2d:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ee31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee34:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee3b:	c1 e8 18             	shr    eax,0x18
c001ee3e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ee41:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ee45:	3d ff 00 00 00       	cmp    eax,0xff
c001ee4a:	75 3a                	jne    c001ee86 <apicOpen()+0x17c>
c001ee4c:	e8 73 fe ff ff       	call   c001ecc4 <apicGetBase()>
c001ee51:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ee55:	83 fa 01             	cmp    edx,0x1
c001ee58:	75 07                	jne    c001ee61 <apicOpen()+0x157>
c001ee5a:	ba 60 03 00 00       	mov    edx,0x360
c001ee5f:	eb 05                	jmp    c001ee66 <apicOpen()+0x15c>
c001ee61:	ba 50 03 00 00       	mov    edx,0x350
c001ee66:	01 d0                	add    eax,edx
c001ee68:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ee6b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee70:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ee73:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ee7a:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ee7e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee81:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ee84:	89 10                	mov    DWORD PTR [eax],edx
c001ee86:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ee8a:	e9 7a ff ff ff       	jmp    c001ee09 <apicOpen()+0xff>
c001ee8f:	90                   	nop
c001ee90:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee93:	c9                   	leave  
c001ee94:	c3                   	ret    
c001ee95:	90                   	nop

c001ee96 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ee96:	55                   	push   ebp
c001ee97:	89 e5                	mov    ebp,esp
c001ee99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eea2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eea5:	72 1d                	jb     c001eec4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eeaa:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eeb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eeb3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eeb9:	01 d0                	add    eax,edx
c001eebb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eebe:	73 04                	jae    c001eec4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eec0:	b0 01                	mov    al,0x1
c001eec2:	eb 02                	jmp    c001eec6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eec4:	b0 00                	mov    al,0x0
c001eec6:	5d                   	pop    ebp
c001eec7:	c3                   	ret    

c001eec8 <IOAPIC::read(int)>:
c001eec8:	55                   	push   ebp
c001eec9:	89 e5                	mov    ebp,esp
c001eecb:	83 ec 10             	sub    esp,0x10
c001eece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eed1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eed7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eeda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eedd:	0f b6 d0             	movzx  edx,al
c001eee0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eee3:	89 10                	mov    DWORD PTR [eax],edx
c001eee5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eee8:	83 c0 10             	add    eax,0x10
c001eeeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeed:	c9                   	leave  
c001eeee:	c3                   	ret    
c001eeef:	90                   	nop

c001eef0 <IOAPIC::open(int, int, void*)>:
c001eef0:	55                   	push   ebp
c001eef1:	89 e5                	mov    ebp,esp
c001eef3:	57                   	push   edi
c001eef4:	56                   	push   esi
c001eef5:	53                   	push   ebx
c001eef6:	83 ec 04             	sub    esp,0x4
c001eef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eefc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eeff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef0e:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001ef15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef18:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef21:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef27:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001ef2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef31:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ef37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef3a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ef40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef43:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef49:	0f b6 f0             	movzx  esi,al
c001ef4c:	89 d0                	mov    eax,edx
c001ef4e:	ba 00 00 00 00       	mov    edx,0x0
c001ef53:	89 c7                	mov    edi,eax
c001ef55:	83 e7 ff             	and    edi,0xffffffff
c001ef58:	89 f9                	mov    ecx,edi
c001ef5a:	0f b6 da             	movzx  ebx,dl
c001ef5d:	89 c8                	mov    eax,ecx
c001ef5f:	89 da                	mov    edx,ebx
c001ef61:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ef64:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ef67:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef6b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef6f:	83 e0 00             	and    eax,0x0
c001ef72:	09 d0                	or     eax,edx
c001ef74:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef7b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef81:	8d 50 01             	lea    edx,[eax+0x1]
c001ef84:	88 d1                	mov    cl,dl
c001ef86:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ef89:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ef8f:	0f b6 d0             	movzx  edx,al
c001ef92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef95:	83 c2 08             	add    edx,0x8
c001ef98:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef9c:	0f b6 c9             	movzx  ecx,cl
c001ef9f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001efa5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001efa9:	6a 01                	push   0x1
c001efab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001efae:	e8 15 ff ff ff       	call   c001eec8 <IOAPIC::read(int)>
c001efb3:	83 c4 08             	add    esp,0x8
c001efb6:	c1 f8 10             	sar    eax,0x10
c001efb9:	0f b6 c0             	movzx  eax,al
c001efbc:	8d 50 01             	lea    edx,[eax+0x1]
c001efbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efc2:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001efc8:	b8 00 00 00 00       	mov    eax,0x0
c001efcd:	8d 65 f4             	lea    esp,[ebp-0xc]
c001efd0:	5b                   	pop    ebx
c001efd1:	5e                   	pop    esi
c001efd2:	5f                   	pop    edi
c001efd3:	5d                   	pop    ebp
c001efd4:	c3                   	ret    
c001efd5:	90                   	nop

c001efd6 <IOAPIC::write(int, int)>:
c001efd6:	55                   	push   ebp
c001efd7:	89 e5                	mov    ebp,esp
c001efd9:	83 ec 10             	sub    esp,0x10
c001efdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efdf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001efe5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001efe8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001efeb:	0f b6 d0             	movzx  edx,al
c001efee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eff1:	89 10                	mov    DWORD PTR [eax],edx
c001eff3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eff6:	8d 50 10             	lea    edx,[eax+0x10]
c001eff9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001effc:	89 02                	mov    DWORD PTR [edx],eax
c001effe:	90                   	nop
c001efff:	c9                   	leave  
c001f000:	c3                   	ret    
c001f001:	90                   	nop

c001f002 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f002:	55                   	push   ebp
c001f003:	89 e5                	mov    ebp,esp
c001f005:	53                   	push   ebx
c001f006:	83 ec 2c             	sub    esp,0x2c
c001f009:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f00c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f00f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f012:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f015:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f018:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f01b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f01e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f021:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f024:	88 d8                	mov    al,bl
c001f026:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f029:	88 c8                	mov    al,cl
c001f02b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f02e:	88 d0                	mov    al,dl
c001f030:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f033:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f037:	83 c0 08             	add    eax,0x8
c001f03a:	d1 e0                	shl    eax,1
c001f03c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f03f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f043:	83 c0 08             	add    eax,0x8
c001f046:	d1 e0                	shl    eax,1
c001f048:	83 c0 01             	add    eax,0x1
c001f04b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f04e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f051:	50                   	push   eax
c001f052:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f055:	e8 6e fe ff ff       	call   c001eec8 <IOAPIC::read(int)>
c001f05a:	83 c4 08             	add    esp,0x8
c001f05d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f060:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f067:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f06a:	c1 e0 18             	shl    eax,0x18
c001f06d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f070:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f073:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f076:	52                   	push   edx
c001f077:	50                   	push   eax
c001f078:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f07b:	e8 56 ff ff ff       	call   c001efd6 <IOAPIC::write(int, int)>
c001f080:	83 c4 0c             	add    esp,0xc
c001f083:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f086:	50                   	push   eax
c001f087:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f08a:	e8 39 fe ff ff       	call   c001eec8 <IOAPIC::read(int)>
c001f08f:	83 c4 08             	add    esp,0x8
c001f092:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f095:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f09c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f0a3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f0aa:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f0ae:	85 c0                	test   eax,eax
c001f0b0:	74 09                	je     c001f0bb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f0b2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f0b9:	eb 07                	jmp    c001f0c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f0bb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f0c2:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f0c6:	85 c0                	test   eax,eax
c001f0c8:	74 09                	je     c001f0d3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f0ca:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f0d1:	eb 07                	jmp    c001f0da <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f0d3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f0da:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f0e1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f0e5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f0e8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f0eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0ee:	52                   	push   edx
c001f0ef:	50                   	push   eax
c001f0f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0f3:	e8 de fe ff ff       	call   c001efd6 <IOAPIC::write(int, int)>
c001f0f8:	83 c4 0c             	add    esp,0xc
c001f0fb:	90                   	nop
c001f0fc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f0ff:	c9                   	leave  
c001f100:	c3                   	ret    
c001f101:	66 90                	xchg   ax,ax
c001f103:	90                   	nop

c001f104 <APICTimer::close(int, int, void*)>:
c001f104:	b8 00 00 00 00       	mov    eax,0x0
c001f109:	c3                   	ret    
c001f10a:	66 90                	xchg   ax,ax

c001f10c <apicTimerHandler(regs*, void*)>:
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f113:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f115:	b8 10 27 00 00       	mov    eax,0x2710
c001f11a:	ba 00 00 00 00       	mov    edx,0x0
c001f11f:	f7 f1                	div    ecx
c001f121:	83 ec 0c             	sub    esp,0xc
c001f124:	50                   	push   eax
c001f125:	e8 26 b6 fe ff       	call   c000a750 <timerHandler(unsigned int)>
c001f12a:	83 c4 10             	add    esp,0x10
c001f12d:	90                   	nop
c001f12e:	83 c4 0c             	add    esp,0xc
c001f131:	c3                   	ret    
c001f132:	66 90                	xchg   ax,ax

c001f134 <APICTimer::open(int, int, void*)>:
c001f134:	83 ec 0c             	sub    esp,0xc
c001f137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f13d:	83 c0 24             	add    eax,0x24
c001f140:	8b 00                	mov    eax,DWORD PTR [eax]
c001f142:	83 ec 08             	sub    esp,0x8
c001f145:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14d:	ff d0                	call   eax
c001f14f:	83 c4 10             	add    esp,0x10
c001f152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f156:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f15a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f164:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f168:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f16e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f172:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	51                   	push   ecx
c001f17c:	6a 01                	push   0x1
c001f17e:	68 0c f1 01 c0       	push   0xc001f10c
c001f183:	52                   	push   edx
c001f184:	50                   	push   eax
c001f185:	e8 68 9e fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f18a:	83 c4 20             	add    esp,0x20
c001f18d:	89 c2                	mov    edx,eax
c001f18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f193:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f199:	b8 00 00 00 00       	mov    eax,0x0
c001f19e:	83 c4 0c             	add    esp,0xc
c001f1a1:	c3                   	ret    
c001f1a2:	66 90                	xchg   ax,ax

c001f1a4 <APICTimer::write(int)>:
c001f1a4:	83 ec 0c             	sub    esp,0xc
c001f1a7:	83 ec 0c             	sub    esp,0xc
c001f1aa:	68 f4 39 02 c0       	push   0xc00239f4
c001f1af:	e8 62 fa fe ff       	call   c000ec16 <KePanic(char const*)>
c001f1b4:	83 c4 10             	add    esp,0x10
c001f1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f1bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f1c5:	90                   	nop
c001f1c6:	83 c4 0c             	add    esp,0xc
c001f1c9:	c3                   	ret    
c001f1ca:	66 90                	xchg   ax,ax

c001f1cc <APICTimer::APICTimer()>:
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d3:	83 ec 08             	sub    esp,0x8
c001f1d6:	68 04 3a 02 c0       	push   0xc0023a04
c001f1db:	50                   	push   eax
c001f1dc:	e8 a3 b4 fe ff       	call   c000a684 <Timer::Timer(char const*)>
c001f1e1:	83 c4 10             	add    esp,0x10
c001f1e4:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c001f1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ed:	89 10                	mov    DWORD PTR [eax],edx
c001f1ef:	90                   	nop
c001f1f0:	83 c4 0c             	add    esp,0xc
c001f1f3:	c3                   	ret    

c001f1f4 <PIT::write(int)>:
c001f1f4:	83 ec 10             	sub    esp,0x10
c001f1f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f1ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f205:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f209:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f20e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f213:	89 c2                	mov    edx,eax
c001f215:	c1 fa 1f             	sar    edx,0x1f
c001f218:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f21c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f220:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f227:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f22c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f230:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f235:	ee                   	out    dx,al
c001f236:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f23a:	0f b6 c0             	movzx  eax,al
c001f23d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f244:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f248:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f24c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f251:	ee                   	out    dx,al
c001f252:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f256:	c1 f8 08             	sar    eax,0x8
c001f259:	0f b6 c0             	movzx  eax,al
c001f25c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f263:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f267:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f26b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f270:	ee                   	out    dx,al
c001f271:	90                   	nop
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	c3                   	ret    
c001f276:	66 90                	xchg   ax,ax

c001f278 <pitHandler(regs*, void*)>:
c001f278:	83 ec 0c             	sub    esp,0xc
c001f27b:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f281:	b8 10 27 00 00       	mov    eax,0x2710
c001f286:	89 c2                	mov    edx,eax
c001f288:	c1 fa 1f             	sar    edx,0x1f
c001f28b:	f7 f9                	idiv   ecx
c001f28d:	83 ec 0c             	sub    esp,0xc
c001f290:	50                   	push   eax
c001f291:	e8 ba b4 fe ff       	call   c000a750 <timerHandler(unsigned int)>
c001f296:	83 c4 10             	add    esp,0x10
c001f299:	90                   	nop
c001f29a:	83 c4 0c             	add    esp,0xc
c001f29d:	c3                   	ret    
c001f29e:	66 90                	xchg   ax,ax

c001f2a0 <PIT::open(int, int, void*)>:
c001f2a0:	83 ec 0c             	sub    esp,0xc
c001f2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2a9:	83 c0 24             	add    eax,0x24
c001f2ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2ae:	83 ec 08             	sub    esp,0x8
c001f2b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b9:	ff d0                	call   eax
c001f2bb:	83 c4 10             	add    esp,0x10
c001f2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c2:	83 ec 0c             	sub    esp,0xc
c001f2c5:	6a 00                	push   0x0
c001f2c7:	6a 01                	push   0x1
c001f2c9:	68 78 f2 01 c0       	push   0xc001f278
c001f2ce:	6a 00                	push   0x0
c001f2d0:	50                   	push   eax
c001f2d1:	e8 1c 9d fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f2d6:	83 c4 20             	add    esp,0x20
c001f2d9:	89 c2                	mov    edx,eax
c001f2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2df:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f2e5:	b8 00 00 00 00       	mov    eax,0x0
c001f2ea:	83 c4 0c             	add    esp,0xc
c001f2ed:	c3                   	ret    
c001f2ee:	66 90                	xchg   ax,ax

c001f2f0 <PIT::close(int, int, void*)>:
c001f2f0:	83 ec 0c             	sub    esp,0xc
c001f2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f305:	6a 01                	push   0x1
c001f307:	68 78 f2 01 c0       	push   0xc001f278
c001f30c:	6a 00                	push   0x0
c001f30e:	50                   	push   eax
c001f30f:	e8 14 9d fe ff       	call   c0009028 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	b8 00 00 00 00       	mov    eax,0x0
c001f31c:	83 c4 0c             	add    esp,0xc
c001f31f:	c3                   	ret    

c001f320 <PIT::PIT()>:
c001f320:	83 ec 0c             	sub    esp,0xc
c001f323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f327:	83 ec 08             	sub    esp,0x8
c001f32a:	68 40 3a 02 c0       	push   0xc0023a40
c001f32f:	50                   	push   eax
c001f330:	e8 4f b3 fe ff       	call   c000a684 <Timer::Timer(char const*)>
c001f335:	83 c4 10             	add    esp,0x10
c001f338:	ba 68 3a 02 c0       	mov    edx,0xc0023a68
c001f33d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f341:	89 10                	mov    DWORD PTR [eax],edx
c001f343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f347:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f34d:	0f b6 d0             	movzx  edx,al
c001f350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f354:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f365:	0f b6 d0             	movzx  edx,al
c001f368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f36c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f375:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f37b:	8d 50 01             	lea    edx,[eax+0x1]
c001f37e:	88 d1                	mov    cl,dl
c001f380:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f384:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f38a:	0f b6 d0             	movzx  edx,al
c001f38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f391:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f395:	83 e1 3f             	and    ecx,0x3f
c001f398:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f39c:	90                   	nop
c001f39d:	83 c4 0c             	add    esp,0xc
c001f3a0:	c3                   	ret    
c001f3a1:	66 90                	xchg   ax,ax
c001f3a3:	66 90                	xchg   ax,ax
c001f3a5:	66 90                	xchg   ax,ax
c001f3a7:	66 90                	xchg   ax,ax
c001f3a9:	66 90                	xchg   ax,ax
c001f3ab:	66 90                	xchg   ax,ax
c001f3ad:	66 90                	xchg   ax,ax
c001f3af:	90                   	nop

c001f3b0 <avxDetect>:
c001f3b0:	b8 01 00 00 00       	mov    eax,0x1
c001f3b5:	0f a2                	cpuid  
c001f3b7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f3bd:	74 15                	je     c001f3d4 <avxDetect.noAVX>
c001f3bf:	b8 01 00 00 00       	mov    eax,0x1
c001f3c4:	0f a2                	cpuid  
c001f3c6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f3cc:	74 06                	je     c001f3d4 <avxDetect.noAVX>
c001f3ce:	b8 01 00 00 00       	mov    eax,0x1
c001f3d3:	c3                   	ret    

c001f3d4 <avxDetect.noAVX>:
c001f3d4:	b8 00 00 00 00       	mov    eax,0x0
c001f3d9:	c3                   	ret    

c001f3da <avxSave>:
c001f3da:	53                   	push   ebx
c001f3db:	52                   	push   edx
c001f3dc:	31 c0                	xor    eax,eax
c001f3de:	48                   	dec    eax
c001f3df:	89 c2                	mov    edx,eax
c001f3e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3e5:	0f ae 23             	xsave  [ebx]
c001f3e8:	5a                   	pop    edx
c001f3e9:	5b                   	pop    ebx
c001f3ea:	c3                   	ret    

c001f3eb <avxLoad>:
c001f3eb:	53                   	push   ebx
c001f3ec:	52                   	push   edx
c001f3ed:	31 c0                	xor    eax,eax
c001f3ef:	48                   	dec    eax
c001f3f0:	89 c2                	mov    edx,eax
c001f3f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3f6:	0f ae 2b             	xrstor [ebx]
c001f3f9:	5a                   	pop    edx
c001f3fa:	5b                   	pop    ebx
c001f3fb:	c3                   	ret    

c001f3fc <avxInit>:
c001f3fc:	e8 47 03 00 00       	call   c001f748 <sseInit>
c001f401:	50                   	push   eax
c001f402:	51                   	push   ecx
c001f403:	0f 20 e0             	mov    eax,cr4
c001f406:	0d 00 00 04 00       	or     eax,0x40000
c001f40b:	0f 22 e0             	mov    cr4,eax
c001f40e:	31 c9                	xor    ecx,ecx
c001f410:	0f 01 d0             	xgetbv 
c001f413:	0d 07 00 00 00       	or     eax,0x7
c001f418:	0f 01 d1             	xsetbv 
c001f41b:	59                   	pop    ecx
c001f41c:	58                   	pop    eax
c001f41d:	c3                   	ret    

c001f41e <avxClose>:
c001f41e:	c3                   	ret    
c001f41f:	90                   	nop

c001f420 <isr0>:
c001f420:	fa                   	cli    
c001f421:	68 00 00 00 00       	push   0x0
c001f426:	68 00 00 00 00       	push   0x0
c001f42b:	e9 56 01 00 00       	jmp    c001f586 <int_common_stub>

c001f430 <isr1>:
c001f430:	fa                   	cli    
c001f431:	6a 00                	push   0x0
c001f433:	6a 01                	push   0x1
c001f435:	e9 4c 01 00 00       	jmp    c001f586 <int_common_stub>

c001f43a <isr2>:
c001f43a:	fa                   	cli    
c001f43b:	6a 00                	push   0x0
c001f43d:	6a 02                	push   0x2
c001f43f:	e9 42 01 00 00       	jmp    c001f586 <int_common_stub>

c001f444 <isr3>:
c001f444:	fa                   	cli    
c001f445:	6a 00                	push   0x0
c001f447:	6a 03                	push   0x3
c001f449:	e9 38 01 00 00       	jmp    c001f586 <int_common_stub>

c001f44e <isr4>:
c001f44e:	fa                   	cli    
c001f44f:	6a 00                	push   0x0
c001f451:	6a 04                	push   0x4
c001f453:	e9 2e 01 00 00       	jmp    c001f586 <int_common_stub>

c001f458 <isr5>:
c001f458:	fa                   	cli    
c001f459:	6a 00                	push   0x0
c001f45b:	6a 05                	push   0x5
c001f45d:	e9 24 01 00 00       	jmp    c001f586 <int_common_stub>

c001f462 <isr6>:
c001f462:	fa                   	cli    
c001f463:	6a 00                	push   0x0
c001f465:	6a 06                	push   0x6
c001f467:	e9 1a 01 00 00       	jmp    c001f586 <int_common_stub>

c001f46c <isr7>:
c001f46c:	fa                   	cli    
c001f46d:	6a 00                	push   0x0
c001f46f:	6a 07                	push   0x7
c001f471:	e9 10 01 00 00       	jmp    c001f586 <int_common_stub>

c001f476 <isr8>:
c001f476:	fa                   	cli    
c001f477:	6a 08                	push   0x8
c001f479:	e9 08 01 00 00       	jmp    c001f586 <int_common_stub>

c001f47e <isr9>:
c001f47e:	fa                   	cli    
c001f47f:	6a 00                	push   0x0
c001f481:	6a 09                	push   0x9
c001f483:	e9 fe 00 00 00       	jmp    c001f586 <int_common_stub>

c001f488 <isr10>:
c001f488:	fa                   	cli    
c001f489:	6a 0a                	push   0xa
c001f48b:	e9 f6 00 00 00       	jmp    c001f586 <int_common_stub>

c001f490 <isr11>:
c001f490:	fa                   	cli    
c001f491:	6a 0b                	push   0xb
c001f493:	e9 ee 00 00 00       	jmp    c001f586 <int_common_stub>

c001f498 <isr12>:
c001f498:	fa                   	cli    
c001f499:	6a 0c                	push   0xc
c001f49b:	e9 e6 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4a0 <isr13>:
c001f4a0:	fa                   	cli    
c001f4a1:	6a 0d                	push   0xd
c001f4a3:	53                   	push   ebx
c001f4a4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f4a8:	81 fb 76 f6 01 c0    	cmp    ebx,0xc001f676
c001f4ae:	5b                   	pop    ebx
c001f4af:	0f 84 c3 01 00 00    	je     c001f678 <finishSignal2>
c001f4b5:	e9 cc 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4ba <isr14>:
c001f4ba:	fa                   	cli    
c001f4bb:	6a 0e                	push   0xe
c001f4bd:	e9 c4 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4c2 <isr15>:
c001f4c2:	fa                   	cli    
c001f4c3:	6a 00                	push   0x0
c001f4c5:	6a 0f                	push   0xf
c001f4c7:	e9 ba 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4cc <isr16>:
c001f4cc:	fa                   	cli    
c001f4cd:	6a 00                	push   0x0
c001f4cf:	6a 10                	push   0x10
c001f4d1:	e9 b0 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4d6 <isr17>:
c001f4d6:	fa                   	cli    
c001f4d7:	6a 00                	push   0x0
c001f4d9:	6a 11                	push   0x11
c001f4db:	e9 a6 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4e0 <isr18>:
c001f4e0:	fa                   	cli    
c001f4e1:	6a 00                	push   0x0
c001f4e3:	6a 12                	push   0x12
c001f4e5:	e9 9c 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4ea <irq3>:
c001f4ea:	fa                   	cli    
c001f4eb:	6a 00                	push   0x0
c001f4ed:	6a 23                	push   0x23
c001f4ef:	e9 92 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4f4 <irq4>:
c001f4f4:	fa                   	cli    
c001f4f5:	6a 00                	push   0x0
c001f4f7:	6a 24                	push   0x24
c001f4f9:	e9 88 00 00 00       	jmp    c001f586 <int_common_stub>

c001f4fe <irq5>:
c001f4fe:	fa                   	cli    
c001f4ff:	6a 00                	push   0x0
c001f501:	6a 25                	push   0x25
c001f503:	e9 7e 00 00 00       	jmp    c001f586 <int_common_stub>

c001f508 <irq6>:
c001f508:	fa                   	cli    
c001f509:	6a 00                	push   0x0
c001f50b:	6a 26                	push   0x26
c001f50d:	e9 74 00 00 00       	jmp    c001f586 <int_common_stub>

c001f512 <irq7>:
c001f512:	fa                   	cli    
c001f513:	6a 00                	push   0x0
c001f515:	6a 27                	push   0x27
c001f517:	e9 6a 00 00 00       	jmp    c001f586 <int_common_stub>

c001f51c <irq8>:
c001f51c:	fa                   	cli    
c001f51d:	6a 00                	push   0x0
c001f51f:	6a 28                	push   0x28
c001f521:	e9 60 00 00 00       	jmp    c001f586 <int_common_stub>

c001f526 <irq9>:
c001f526:	fa                   	cli    
c001f527:	6a 00                	push   0x0
c001f529:	6a 29                	push   0x29
c001f52b:	e9 56 00 00 00       	jmp    c001f586 <int_common_stub>

c001f530 <irq10>:
c001f530:	fa                   	cli    
c001f531:	6a 00                	push   0x0
c001f533:	6a 2a                	push   0x2a
c001f535:	e9 4c 00 00 00       	jmp    c001f586 <int_common_stub>

c001f53a <irq11>:
c001f53a:	fa                   	cli    
c001f53b:	6a 00                	push   0x0
c001f53d:	6a 2b                	push   0x2b
c001f53f:	e9 42 00 00 00       	jmp    c001f586 <int_common_stub>

c001f544 <irq12>:
c001f544:	fa                   	cli    
c001f545:	6a 00                	push   0x0
c001f547:	6a 2c                	push   0x2c
c001f549:	e9 38 00 00 00       	jmp    c001f586 <int_common_stub>

c001f54e <irq13>:
c001f54e:	fa                   	cli    
c001f54f:	6a 00                	push   0x0
c001f551:	6a 2d                	push   0x2d
c001f553:	e9 2e 00 00 00       	jmp    c001f586 <int_common_stub>

c001f558 <irq14>:
c001f558:	fa                   	cli    
c001f559:	6a 00                	push   0x0
c001f55b:	6a 2e                	push   0x2e
c001f55d:	e9 24 00 00 00       	jmp    c001f586 <int_common_stub>

c001f562 <irq15>:
c001f562:	fa                   	cli    
c001f563:	6a 00                	push   0x0
c001f565:	6a 2f                	push   0x2f
c001f567:	e9 1a 00 00 00       	jmp    c001f586 <int_common_stub>

c001f56c <irq1>:
c001f56c:	fa                   	cli    
c001f56d:	6a 00                	push   0x0
c001f56f:	6a 21                	push   0x21
c001f571:	eb 13                	jmp    c001f586 <int_common_stub>

c001f573 <irq2>:
c001f573:	fa                   	cli    
c001f574:	6a 00                	push   0x0
c001f576:	6a 22                	push   0x22
c001f578:	eb 0c                	jmp    c001f586 <int_common_stub>

c001f57a <isr96>:
c001f57a:	6a 00                	push   0x0
c001f57c:	6a 60                	push   0x60
c001f57e:	fb                   	sti    
c001f57f:	eb 37                	jmp    c001f5b8 <syscall_common_stub>

c001f581 <irq0>:
c001f581:	fa                   	cli    
c001f582:	6a 00                	push   0x0
c001f584:	6a 20                	push   0x20

c001f586 <int_common_stub>:
c001f586:	60                   	pusha  
c001f587:	1e                   	push   ds
c001f588:	06                   	push   es
c001f589:	0f a0                	push   fs
c001f58b:	0f a8                	push   gs
c001f58d:	66 b8 10 00          	mov    ax,0x10
c001f591:	66 8e d8             	mov    ds,ax
c001f594:	66 8e c0             	mov    es,ax
c001f597:	66 8e e0             	mov    fs,ax
c001f59a:	66 8e e8             	mov    gs,ax
c001f59d:	54                   	push   esp
c001f59e:	fc                   	cld    
c001f59f:	e8 a4 e7 fe ff       	call   c000dd48 <int_handler>
c001f5a4:	81 c4 04 00 00 00    	add    esp,0x4
c001f5aa:	0f a9                	pop    gs
c001f5ac:	0f a1                	pop    fs
c001f5ae:	07                   	pop    es
c001f5af:	1f                   	pop    ds
c001f5b0:	61                   	popa   
c001f5b1:	81 c4 08 00 00 00    	add    esp,0x8
c001f5b7:	cf                   	iret   

c001f5b8 <syscall_common_stub>:
c001f5b8:	60                   	pusha  
c001f5b9:	1e                   	push   ds
c001f5ba:	06                   	push   es
c001f5bb:	0f a0                	push   fs
c001f5bd:	0f a8                	push   gs
c001f5bf:	66 b8 10 00          	mov    ax,0x10
c001f5c3:	66 8e d8             	mov    ds,ax
c001f5c6:	66 8e c0             	mov    es,ax
c001f5c9:	66 8e e0             	mov    fs,ax
c001f5cc:	66 8e e8             	mov    gs,ax
c001f5cf:	54                   	push   esp
c001f5d0:	fc                   	cld    
c001f5d1:	e8 72 e7 fe ff       	call   c000dd48 <int_handler>
c001f5d6:	81 c4 04 00 00 00    	add    esp,0x4
c001f5dc:	0f a9                	pop    gs
c001f5de:	0f a1                	pop    fs
c001f5e0:	07                   	pop    es
c001f5e1:	1f                   	pop    ds
c001f5e2:	e8 c5 08 ff ff       	call   c000feac <KiCheckSignalZ>
c001f5e7:	3d 00 00 00 00       	cmp    eax,0x0
c001f5ec:	0f 84 c0 00 00 00    	je     c001f6b2 <skipSignals>
c001f5f2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f5f7:	61                   	popa   
c001f5f8:	53                   	push   ebx
c001f5f9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f5ff:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f602:	5b                   	pop    ebx
c001f603:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f608:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f60b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f60e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f611:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f614:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f617:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f61a:	81 c4 08 00 00 00    	add    esp,0x8
c001f620:	5e                   	pop    esi
c001f621:	5b                   	pop    ebx
c001f622:	59                   	pop    ecx
c001f623:	5a                   	pop    edx
c001f624:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f627:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f62a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f62d:	52                   	push   edx
c001f62e:	51                   	push   ecx
c001f62f:	53                   	push   ebx
c001f630:	56                   	push   esi
c001f631:	81 ec 08 00 00 00    	sub    esp,0x8
c001f637:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f63a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f63d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f640:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f643:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f646:	60                   	pusha  
c001f647:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f64d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f650:	89 e3                	mov    ebx,esp
c001f652:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f655:	52                   	push   edx
c001f656:	68 76 f6 01 c0       	push   0xc001f676
c001f65b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f65e:	89 dc                	mov    esp,ebx
c001f660:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f663:	68 23 00 00 00       	push   0x23
c001f668:	51                   	push   ecx
c001f669:	68 02 02 00 00       	push   0x202
c001f66e:	68 1b 00 00 00       	push   0x1b
c001f673:	ff 36                	push   DWORD PTR [esi]
c001f675:	cf                   	iret   

c001f676 <finishSignal>:
c001f676:	cd 0f                	int    0xf

c001f678 <finishSignal2>:
c001f678:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f67e:	e8 a6 08 ff ff       	call   c000ff29 <KiFinishSignalZ>
c001f683:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f689:	68 23 00 00 00       	push   0x23
c001f68e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f691:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f694:	68 1b 00 00 00       	push   0x1b
c001f699:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f69c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f69f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f6a2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f6a5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f6a8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f6ab:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f6ae:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f6b1:	cf                   	iret   

c001f6b2 <skipSignals>:
c001f6b2:	61                   	popa   
c001f6b3:	81 c4 08 00 00 00    	add    esp,0x8
c001f6b9:	cf                   	iret   
c001f6ba:	90                   	nop
c001f6bb:	90                   	nop

c001f6bc <irq16>:
c001f6bc:	fa                   	cli    
c001f6bd:	6a 00                	push   0x0
c001f6bf:	6a 30                	push   0x30
c001f6c1:	e9 c0 fe ff ff       	jmp    c001f586 <int_common_stub>

c001f6c6 <irq17>:
c001f6c6:	fa                   	cli    
c001f6c7:	6a 00                	push   0x0
c001f6c9:	6a 31                	push   0x31
c001f6cb:	e9 b6 fe ff ff       	jmp    c001f586 <int_common_stub>

c001f6d0 <irq18>:
c001f6d0:	fa                   	cli    
c001f6d1:	6a 00                	push   0x0
c001f6d3:	6a 32                	push   0x32
c001f6d5:	e9 ac fe ff ff       	jmp    c001f586 <int_common_stub>

c001f6da <irq19>:
c001f6da:	fa                   	cli    
c001f6db:	6a 00                	push   0x0
c001f6dd:	6a 33                	push   0x33
c001f6df:	e9 a2 fe ff ff       	jmp    c001f586 <int_common_stub>

c001f6e4 <irq20>:
c001f6e4:	fa                   	cli    
c001f6e5:	6a 00                	push   0x0
c001f6e7:	6a 34                	push   0x34
c001f6e9:	e9 98 fe ff ff       	jmp    c001f586 <int_common_stub>

c001f6ee <irq21>:
c001f6ee:	fa                   	cli    
c001f6ef:	6a 00                	push   0x0
c001f6f1:	6a 35                	push   0x35
c001f6f3:	e9 8e fe ff ff       	jmp    c001f586 <int_common_stub>

c001f6f8 <irq22>:
c001f6f8:	fa                   	cli    
c001f6f9:	6a 00                	push   0x0
c001f6fb:	6a 36                	push   0x36
c001f6fd:	e9 84 fe ff ff       	jmp    c001f586 <int_common_stub>

c001f702 <irq23>:
c001f702:	fa                   	cli    
c001f703:	6a 00                	push   0x0
c001f705:	6a 37                	push   0x37
c001f707:	e9 7a fe ff ff       	jmp    c001f586 <int_common_stub>
c001f70c:	66 90                	xchg   ax,ax
c001f70e:	66 90                	xchg   ax,ax

c001f710 <i386GetRDRAND>:
c001f710:	b9 64 00 00 00       	mov    ecx,0x64

c001f715 <retry>:
c001f715:	0f c7 f0             	rdrand eax
c001f718:	72 05                	jb     c001f71f <retry.done>
c001f71a:	e2 f9                	loop   c001f715 <retry>

c001f71c <retry.fail>:
c001f71c:	31 c0                	xor    eax,eax
c001f71e:	c3                   	ret    

c001f71f <retry.done>:
c001f71f:	c3                   	ret    

c001f720 <sseDetect>:
c001f720:	b8 01 00 00 00       	mov    eax,0x1
c001f725:	0f a2                	cpuid  
c001f727:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f72d:	74 06                	je     c001f735 <sseDetect.noSSE>
c001f72f:	b8 01 00 00 00       	mov    eax,0x1
c001f734:	c3                   	ret    

c001f735 <sseDetect.noSSE>:
c001f735:	31 c0                	xor    eax,eax
c001f737:	c3                   	ret    

c001f738 <sseSave>:
c001f738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73c:	0f ae 00             	fxsave [eax]
c001f73f:	c3                   	ret    

c001f740 <sseLoad>:
c001f740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f744:	0f ae 08             	fxrstor [eax]
c001f747:	c3                   	ret    

c001f748 <sseInit>:
c001f748:	e8 48 00 00 00       	call   c001f795 <x87Init>
c001f74d:	0f 20 e0             	mov    eax,cr4
c001f750:	66 0d 00 06          	or     ax,0x600
c001f754:	0f 22 e0             	mov    cr4,eax
c001f757:	c3                   	ret    

c001f758 <sseClose>:
c001f758:	c3                   	ret    
c001f759:	66 90                	xchg   ax,ax
c001f75b:	66 90                	xchg   ax,ax
c001f75d:	66 90                	xchg   ax,ax
c001f75f:	90                   	nop

c001f760 <value_37F>:
c001f760:	7f 03                	jg     c001f765 <value_37A+0x1>

c001f762 <value_37E>:
c001f762:	7e 03                	jle    c001f767 <x87Detect+0x1>

c001f764 <value_37A>:
c001f764:	7a 03                	jp     c001f769 <x87Detect+0x3>

c001f766 <x87Detect>:
c001f766:	53                   	push   ebx
c001f767:	51                   	push   ecx
c001f768:	52                   	push   edx
c001f769:	b8 01 00 00 00       	mov    eax,0x1
c001f76e:	0f a2                	cpuid  
c001f770:	f7 c2 01 00 00 00    	test   edx,0x1
c001f776:	74 06                	je     c001f77e <x87Detect.nox87>
c001f778:	b8 01 00 00 00       	mov    eax,0x1
c001f77d:	c3                   	ret    

c001f77e <x87Detect.nox87>:
c001f77e:	b8 00 00 00 00       	mov    eax,0x0
c001f783:	5a                   	pop    edx
c001f784:	59                   	pop    ecx
c001f785:	5b                   	pop    ebx
c001f786:	c3                   	ret    

c001f787 <x87Save>:
c001f787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f78b:	dd 30                	fnsave [eax]
c001f78d:	c3                   	ret    

c001f78e <x87Load>:
c001f78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f792:	dd 20                	frstor [eax]
c001f794:	c3                   	ret    

c001f795 <x87Init>:
c001f795:	0f 20 c0             	mov    eax,cr0
c001f798:	66 25 fb ff          	and    ax,0xfffb
c001f79c:	66 0d 22 00          	or     ax,0x22
c001f7a0:	0f 22 c0             	mov    cr0,eax
c001f7a3:	db e3                	fninit 
c001f7a5:	0f 06                	clts   
c001f7a7:	d9 2d 64 f7 01 c0    	fldcw  WORD PTR ds:0xc001f764
c001f7ad:	c3                   	ret    

c001f7ae <x87Close>:
c001f7ae:	c3                   	ret    
c001f7af:	90                   	nop

c001f7b0 <__do_global_ctors_aux>:
c001f7b0:	a1 64 07 02 c0       	mov    eax,ds:0xc0020764
c001f7b5:	83 f8 ff             	cmp    eax,0xffffffff
c001f7b8:	74 1a                	je     c001f7d4 <__do_global_ctors_aux+0x24>
c001f7ba:	55                   	push   ebp
c001f7bb:	89 e5                	mov    ebp,esp
c001f7bd:	53                   	push   ebx
c001f7be:	52                   	push   edx
c001f7bf:	bb 64 07 02 c0       	mov    ebx,0xc0020764
c001f7c4:	ff d0                	call   eax
c001f7c6:	83 eb 04             	sub    ebx,0x4
c001f7c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f7cb:	83 f8 ff             	cmp    eax,0xffffffff
c001f7ce:	75 f4                	jne    c001f7c4 <__do_global_ctors_aux+0x14>
c001f7d0:	58                   	pop    eax
c001f7d1:	5b                   	pop    ebx
c001f7d2:	5d                   	pop    ebp
c001f7d3:	c3                   	ret    
c001f7d4:	c3                   	ret    
c001f7d5:	66 90                	xchg   ax,ax
c001f7d7:	90                   	nop

c001f7d8 <__divdi3>:
c001f7d8:	55                   	push   ebp
c001f7d9:	57                   	push   edi
c001f7da:	56                   	push   esi
c001f7db:	53                   	push   ebx
c001f7dc:	83 ec 1c             	sub    esp,0x1c
c001f7df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f7e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f7ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f7ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7f6:	85 db                	test   ebx,ebx
c001f7f8:	0f 88 8e 00 00 00    	js     c001f88c <__divdi3+0xb4>
c001f7fe:	89 dd                	mov    ebp,ebx
c001f800:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f808:	89 d3                	mov    ebx,edx
c001f80a:	85 d2                	test   edx,edx
c001f80c:	79 0d                	jns    c001f81b <__divdi3+0x43>
c001f80e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f812:	f7 d8                	neg    eax
c001f814:	83 d2 00             	adc    edx,0x0
c001f817:	f7 da                	neg    edx
c001f819:	89 d3                	mov    ebx,edx
c001f81b:	89 c7                	mov    edi,eax
c001f81d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f820:	85 db                	test   ebx,ebx
c001f822:	75 48                	jne    c001f86c <__divdi3+0x94>
c001f824:	39 ef                	cmp    edi,ebp
c001f826:	76 24                	jbe    c001f84c <__divdi3+0x74>
c001f828:	89 ea                	mov    edx,ebp
c001f82a:	f7 f7                	div    edi
c001f82c:	89 c1                	mov    ecx,eax
c001f82e:	31 f6                	xor    esi,esi
c001f830:	89 c8                	mov    eax,ecx
c001f832:	89 f2                	mov    edx,esi
c001f834:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f838:	85 c9                	test   ecx,ecx
c001f83a:	74 07                	je     c001f843 <__divdi3+0x6b>
c001f83c:	f7 d8                	neg    eax
c001f83e:	83 d2 00             	adc    edx,0x0
c001f841:	f7 da                	neg    edx
c001f843:	83 c4 1c             	add    esp,0x1c
c001f846:	5b                   	pop    ebx
c001f847:	5e                   	pop    esi
c001f848:	5f                   	pop    edi
c001f849:	5d                   	pop    ebp
c001f84a:	c3                   	ret    
c001f84b:	90                   	nop
c001f84c:	85 ff                	test   edi,edi
c001f84e:	75 0b                	jne    c001f85b <__divdi3+0x83>
c001f850:	b8 01 00 00 00       	mov    eax,0x1
c001f855:	31 d2                	xor    edx,edx
c001f857:	f7 f3                	div    ebx
c001f859:	89 c7                	mov    edi,eax
c001f85b:	31 d2                	xor    edx,edx
c001f85d:	89 e8                	mov    eax,ebp
c001f85f:	f7 f7                	div    edi
c001f861:	89 c6                	mov    esi,eax
c001f863:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f866:	f7 f7                	div    edi
c001f868:	89 c1                	mov    ecx,eax
c001f86a:	eb c4                	jmp    c001f830 <__divdi3+0x58>
c001f86c:	39 eb                	cmp    ebx,ebp
c001f86e:	77 3c                	ja     c001f8ac <__divdi3+0xd4>
c001f870:	0f bd f3             	bsr    esi,ebx
c001f873:	83 f6 1f             	xor    esi,0x1f
c001f876:	75 40                	jne    c001f8b8 <__divdi3+0xe0>
c001f878:	39 eb                	cmp    ebx,ebp
c001f87a:	72 09                	jb     c001f885 <__divdi3+0xad>
c001f87c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f87f:	0f 87 97 00 00 00    	ja     c001f91c <__divdi3+0x144>
c001f885:	b9 01 00 00 00       	mov    ecx,0x1
c001f88a:	eb a4                	jmp    c001f830 <__divdi3+0x58>
c001f88c:	f7 d9                	neg    ecx
c001f88e:	83 d3 00             	adc    ebx,0x0
c001f891:	f7 db                	neg    ebx
c001f893:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f896:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f89a:	89 dd                	mov    ebp,ebx
c001f89c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f8a4:	e9 5f ff ff ff       	jmp    c001f808 <__divdi3+0x30>
c001f8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001f8ac:	31 f6                	xor    esi,esi
c001f8ae:	31 c9                	xor    ecx,ecx
c001f8b0:	e9 7b ff ff ff       	jmp    c001f830 <__divdi3+0x58>
c001f8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8b8:	b8 20 00 00 00       	mov    eax,0x20
c001f8bd:	29 f0                	sub    eax,esi
c001f8bf:	89 f1                	mov    ecx,esi
c001f8c1:	d3 e3                	shl    ebx,cl
c001f8c3:	89 fa                	mov    edx,edi
c001f8c5:	88 c1                	mov    cl,al
c001f8c7:	d3 ea                	shr    edx,cl
c001f8c9:	09 da                	or     edx,ebx
c001f8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f8cf:	89 f1                	mov    ecx,esi
c001f8d1:	d3 e7                	shl    edi,cl
c001f8d3:	89 eb                	mov    ebx,ebp
c001f8d5:	88 c1                	mov    cl,al
c001f8d7:	d3 eb                	shr    ebx,cl
c001f8d9:	89 f1                	mov    ecx,esi
c001f8db:	d3 e5                	shl    ebp,cl
c001f8dd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f8e0:	88 c1                	mov    cl,al
c001f8e2:	d3 ea                	shr    edx,cl
c001f8e4:	09 d5                	or     ebp,edx
c001f8e6:	89 e8                	mov    eax,ebp
c001f8e8:	89 da                	mov    edx,ebx
c001f8ea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f8ee:	89 d3                	mov    ebx,edx
c001f8f0:	89 c5                	mov    ebp,eax
c001f8f2:	f7 e7                	mul    edi
c001f8f4:	39 d3                	cmp    ebx,edx
c001f8f6:	72 18                	jb     c001f910 <__divdi3+0x138>
c001f8f8:	74 0a                	je     c001f904 <__divdi3+0x12c>
c001f8fa:	89 e9                	mov    ecx,ebp
c001f8fc:	31 f6                	xor    esi,esi
c001f8fe:	e9 2d ff ff ff       	jmp    c001f830 <__divdi3+0x58>
c001f903:	90                   	nop
c001f904:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f907:	89 f1                	mov    ecx,esi
c001f909:	d3 e7                	shl    edi,cl
c001f90b:	39 c7                	cmp    edi,eax
c001f90d:	73 eb                	jae    c001f8fa <__divdi3+0x122>
c001f90f:	90                   	nop
c001f910:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f913:	31 f6                	xor    esi,esi
c001f915:	e9 16 ff ff ff       	jmp    c001f830 <__divdi3+0x58>
c001f91a:	66 90                	xchg   ax,ax
c001f91c:	31 c9                	xor    ecx,ecx
c001f91e:	e9 0d ff ff ff       	jmp    c001f830 <__divdi3+0x58>
c001f923:	90                   	nop

c001f924 <__moddi3>:
c001f924:	55                   	push   ebp
c001f925:	57                   	push   edi
c001f926:	56                   	push   esi
c001f927:	53                   	push   ebx
c001f928:	83 ec 2c             	sub    esp,0x2c
c001f92b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f92f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f933:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f937:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f93b:	85 db                	test   ebx,ebx
c001f93d:	0f 88 85 00 00 00    	js     c001f9c8 <__moddi3+0xa4>
c001f943:	89 de                	mov    esi,ebx
c001f945:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f94d:	89 d7                	mov    edi,edx
c001f94f:	85 d2                	test   edx,edx
c001f951:	79 09                	jns    c001f95c <__moddi3+0x38>
c001f953:	f7 d8                	neg    eax
c001f955:	83 d2 00             	adc    edx,0x0
c001f958:	f7 da                	neg    edx
c001f95a:	89 d7                	mov    edi,edx
c001f95c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f960:	89 cd                	mov    ebp,ecx
c001f962:	85 ff                	test   edi,edi
c001f964:	75 52                	jne    c001f9b8 <__moddi3+0x94>
c001f966:	89 c3                	mov    ebx,eax
c001f968:	39 f0                	cmp    eax,esi
c001f96a:	76 24                	jbe    c001f990 <__moddi3+0x6c>
c001f96c:	89 c8                	mov    eax,ecx
c001f96e:	89 f2                	mov    edx,esi
c001f970:	f7 f3                	div    ebx
c001f972:	89 d6                	mov    esi,edx
c001f974:	89 f0                	mov    eax,esi
c001f976:	31 d2                	xor    edx,edx
c001f978:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f97c:	85 c9                	test   ecx,ecx
c001f97e:	74 07                	je     c001f987 <__moddi3+0x63>
c001f980:	f7 d8                	neg    eax
c001f982:	83 d2 00             	adc    edx,0x0
c001f985:	f7 da                	neg    edx
c001f987:	83 c4 2c             	add    esp,0x2c
c001f98a:	5b                   	pop    ebx
c001f98b:	5e                   	pop    esi
c001f98c:	5f                   	pop    edi
c001f98d:	5d                   	pop    ebp
c001f98e:	c3                   	ret    
c001f98f:	90                   	nop
c001f990:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f994:	85 db                	test   ebx,ebx
c001f996:	75 0d                	jne    c001f9a5 <__moddi3+0x81>
c001f998:	b8 01 00 00 00       	mov    eax,0x1
c001f99d:	31 d2                	xor    edx,edx
c001f99f:	f7 f7                	div    edi
c001f9a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9a5:	89 f0                	mov    eax,esi
c001f9a7:	31 d2                	xor    edx,edx
c001f9a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f9ad:	f7 f7                	div    edi
c001f9af:	89 e8                	mov    eax,ebp
c001f9b1:	f7 f7                	div    edi
c001f9b3:	89 d6                	mov    esi,edx
c001f9b5:	eb bd                	jmp    c001f974 <__moddi3+0x50>
c001f9b7:	90                   	nop
c001f9b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f9bc:	39 f7                	cmp    edi,esi
c001f9be:	76 20                	jbe    c001f9e0 <__moddi3+0xbc>
c001f9c0:	89 c8                	mov    eax,ecx
c001f9c2:	89 f2                	mov    edx,esi
c001f9c4:	eb b2                	jmp    c001f978 <__moddi3+0x54>
c001f9c6:	66 90                	xchg   ax,ax
c001f9c8:	f7 d9                	neg    ecx
c001f9ca:	83 d3 00             	adc    ebx,0x0
c001f9cd:	f7 db                	neg    ebx
c001f9cf:	89 de                	mov    esi,ebx
c001f9d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f9d9:	e9 6f ff ff ff       	jmp    c001f94d <__moddi3+0x29>
c001f9de:	66 90                	xchg   ax,ax
c001f9e0:	0f bd c7             	bsr    eax,edi
c001f9e3:	83 f0 1f             	xor    eax,0x1f
c001f9e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f9ea:	75 24                	jne    c001fa10 <__moddi3+0xec>
c001f9ec:	39 f7                	cmp    edi,esi
c001f9ee:	72 06                	jb     c001f9f6 <__moddi3+0xd2>
c001f9f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f9f4:	77 0c                	ja     c001fa02 <__moddi3+0xde>
c001f9f6:	89 e9                	mov    ecx,ebp
c001f9f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f9fc:	19 fe                	sbb    esi,edi
c001f9fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fa02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa06:	89 f2                	mov    edx,esi
c001fa08:	e9 6b ff ff ff       	jmp    c001f978 <__moddi3+0x54>
c001fa0d:	8d 76 00             	lea    esi,[esi+0x0]
c001fa10:	b8 20 00 00 00       	mov    eax,0x20
c001fa15:	89 c2                	mov    edx,eax
c001fa17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa1b:	29 da                	sub    edx,ebx
c001fa1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fa21:	88 d9                	mov    cl,bl
c001fa23:	d3 e7                	shl    edi,cl
c001fa25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa29:	88 d1                	mov    cl,dl
c001fa2b:	d3 e8                	shr    eax,cl
c001fa2d:	09 c7                	or     edi,eax
c001fa2f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fa33:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa37:	89 d8                	mov    eax,ebx
c001fa39:	88 d9                	mov    cl,bl
c001fa3b:	d3 e7                	shl    edi,cl
c001fa3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fa41:	89 f3                	mov    ebx,esi
c001fa43:	88 d1                	mov    cl,dl
c001fa45:	d3 eb                	shr    ebx,cl
c001fa47:	89 c7                	mov    edi,eax
c001fa49:	88 c1                	mov    cl,al
c001fa4b:	d3 e6                	shl    esi,cl
c001fa4d:	89 e8                	mov    eax,ebp
c001fa4f:	88 d1                	mov    cl,dl
c001fa51:	d3 e8                	shr    eax,cl
c001fa53:	09 f0                	or     eax,esi
c001fa55:	89 f9                	mov    ecx,edi
c001fa57:	d3 e5                	shl    ebp,cl
c001fa59:	89 da                	mov    edx,ebx
c001fa5b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001fa5f:	89 d3                	mov    ebx,edx
c001fa61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa65:	89 c6                	mov    esi,eax
c001fa67:	89 d1                	mov    ecx,edx
c001fa69:	39 d3                	cmp    ebx,edx
c001fa6b:	72 27                	jb     c001fa94 <__moddi3+0x170>
c001fa6d:	74 21                	je     c001fa90 <__moddi3+0x16c>
c001fa6f:	29 f5                	sub    ebp,esi
c001fa71:	19 cb                	sbb    ebx,ecx
c001fa73:	89 de                	mov    esi,ebx
c001fa75:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fa79:	d3 e6                	shl    esi,cl
c001fa7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa7f:	89 f9                	mov    ecx,edi
c001fa81:	d3 ed                	shr    ebp,cl
c001fa83:	09 ee                	or     esi,ebp
c001fa85:	89 f0                	mov    eax,esi
c001fa87:	d3 eb                	shr    ebx,cl
c001fa89:	89 da                	mov    edx,ebx
c001fa8b:	e9 e8 fe ff ff       	jmp    c001f978 <__moddi3+0x54>
c001fa90:	39 c5                	cmp    ebp,eax
c001fa92:	73 db                	jae    c001fa6f <__moddi3+0x14b>
c001fa94:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa98:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fa9c:	89 d1                	mov    ecx,edx
c001fa9e:	89 c6                	mov    esi,eax
c001faa0:	eb cd                	jmp    c001fa6f <__moddi3+0x14b>
c001faa2:	66 90                	xchg   ax,ax

c001faa4 <__udivdi3>:
c001faa4:	55                   	push   ebp
c001faa5:	57                   	push   edi
c001faa6:	56                   	push   esi
c001faa7:	53                   	push   ebx
c001faa8:	83 ec 1c             	sub    esp,0x1c
c001faab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001faaf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fab3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fab7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fabb:	85 d2                	test   edx,edx
c001fabd:	75 41                	jne    c001fb00 <__udivdi3+0x5c>
c001fabf:	39 f7                	cmp    edi,esi
c001fac1:	76 15                	jbe    c001fad8 <__udivdi3+0x34>
c001fac3:	89 e8                	mov    eax,ebp
c001fac5:	89 f2                	mov    edx,esi
c001fac7:	f7 f7                	div    edi
c001fac9:	31 db                	xor    ebx,ebx
c001facb:	89 da                	mov    edx,ebx
c001facd:	83 c4 1c             	add    esp,0x1c
c001fad0:	5b                   	pop    ebx
c001fad1:	5e                   	pop    esi
c001fad2:	5f                   	pop    edi
c001fad3:	5d                   	pop    ebp
c001fad4:	c3                   	ret    
c001fad5:	8d 76 00             	lea    esi,[esi+0x0]
c001fad8:	89 f9                	mov    ecx,edi
c001fada:	85 ff                	test   edi,edi
c001fadc:	75 0b                	jne    c001fae9 <__udivdi3+0x45>
c001fade:	b8 01 00 00 00       	mov    eax,0x1
c001fae3:	31 d2                	xor    edx,edx
c001fae5:	f7 f7                	div    edi
c001fae7:	89 c1                	mov    ecx,eax
c001fae9:	31 d2                	xor    edx,edx
c001faeb:	89 f0                	mov    eax,esi
c001faed:	f7 f1                	div    ecx
c001faef:	89 c3                	mov    ebx,eax
c001faf1:	89 e8                	mov    eax,ebp
c001faf3:	f7 f1                	div    ecx
c001faf5:	89 da                	mov    edx,ebx
c001faf7:	83 c4 1c             	add    esp,0x1c
c001fafa:	5b                   	pop    ebx
c001fafb:	5e                   	pop    esi
c001fafc:	5f                   	pop    edi
c001fafd:	5d                   	pop    ebp
c001fafe:	c3                   	ret    
c001faff:	90                   	nop
c001fb00:	39 f2                	cmp    edx,esi
c001fb02:	77 1c                	ja     c001fb20 <__udivdi3+0x7c>
c001fb04:	0f bd da             	bsr    ebx,edx
c001fb07:	83 f3 1f             	xor    ebx,0x1f
c001fb0a:	75 24                	jne    c001fb30 <__udivdi3+0x8c>
c001fb0c:	39 f2                	cmp    edx,esi
c001fb0e:	72 08                	jb     c001fb18 <__udivdi3+0x74>
c001fb10:	39 ef                	cmp    edi,ebp
c001fb12:	0f 87 84 00 00 00    	ja     c001fb9c <__udivdi3+0xf8>
c001fb18:	b8 01 00 00 00       	mov    eax,0x1
c001fb1d:	eb ac                	jmp    c001facb <__udivdi3+0x27>
c001fb1f:	90                   	nop
c001fb20:	31 db                	xor    ebx,ebx
c001fb22:	31 c0                	xor    eax,eax
c001fb24:	89 da                	mov    edx,ebx
c001fb26:	83 c4 1c             	add    esp,0x1c
c001fb29:	5b                   	pop    ebx
c001fb2a:	5e                   	pop    esi
c001fb2b:	5f                   	pop    edi
c001fb2c:	5d                   	pop    ebp
c001fb2d:	c3                   	ret    
c001fb2e:	66 90                	xchg   ax,ax
c001fb30:	b8 20 00 00 00       	mov    eax,0x20
c001fb35:	29 d8                	sub    eax,ebx
c001fb37:	88 d9                	mov    cl,bl
c001fb39:	d3 e2                	shl    edx,cl
c001fb3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb3f:	89 fa                	mov    edx,edi
c001fb41:	88 c1                	mov    cl,al
c001fb43:	d3 ea                	shr    edx,cl
c001fb45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb49:	09 d1                	or     ecx,edx
c001fb4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fb4f:	88 d9                	mov    cl,bl
c001fb51:	d3 e7                	shl    edi,cl
c001fb53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fb57:	89 f7                	mov    edi,esi
c001fb59:	88 c1                	mov    cl,al
c001fb5b:	d3 ef                	shr    edi,cl
c001fb5d:	88 d9                	mov    cl,bl
c001fb5f:	d3 e6                	shl    esi,cl
c001fb61:	89 ea                	mov    edx,ebp
c001fb63:	88 c1                	mov    cl,al
c001fb65:	d3 ea                	shr    edx,cl
c001fb67:	09 d6                	or     esi,edx
c001fb69:	89 f0                	mov    eax,esi
c001fb6b:	89 fa                	mov    edx,edi
c001fb6d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fb71:	89 d7                	mov    edi,edx
c001fb73:	89 c6                	mov    esi,eax
c001fb75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fb79:	39 d7                	cmp    edi,edx
c001fb7b:	72 13                	jb     c001fb90 <__udivdi3+0xec>
c001fb7d:	74 09                	je     c001fb88 <__udivdi3+0xe4>
c001fb7f:	89 f0                	mov    eax,esi
c001fb81:	31 db                	xor    ebx,ebx
c001fb83:	e9 43 ff ff ff       	jmp    c001facb <__udivdi3+0x27>
c001fb88:	88 d9                	mov    cl,bl
c001fb8a:	d3 e5                	shl    ebp,cl
c001fb8c:	39 c5                	cmp    ebp,eax
c001fb8e:	73 ef                	jae    c001fb7f <__udivdi3+0xdb>
c001fb90:	8d 46 ff             	lea    eax,[esi-0x1]
c001fb93:	31 db                	xor    ebx,ebx
c001fb95:	e9 31 ff ff ff       	jmp    c001facb <__udivdi3+0x27>
c001fb9a:	66 90                	xchg   ax,ax
c001fb9c:	31 c0                	xor    eax,eax
c001fb9e:	e9 28 ff ff ff       	jmp    c001facb <__udivdi3+0x27>
c001fba3:	90                   	nop

c001fba4 <__umoddi3>:
c001fba4:	55                   	push   ebp
c001fba5:	57                   	push   edi
c001fba6:	56                   	push   esi
c001fba7:	53                   	push   ebx
c001fba8:	83 ec 1c             	sub    esp,0x1c
c001fbab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fbaf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fbb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fbb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fbbb:	89 da                	mov    edx,ebx
c001fbbd:	85 c0                	test   eax,eax
c001fbbf:	75 37                	jne    c001fbf8 <__umoddi3+0x54>
c001fbc1:	39 df                	cmp    edi,ebx
c001fbc3:	76 13                	jbe    c001fbd8 <__umoddi3+0x34>
c001fbc5:	89 f0                	mov    eax,esi
c001fbc7:	f7 f7                	div    edi
c001fbc9:	89 d0                	mov    eax,edx
c001fbcb:	31 d2                	xor    edx,edx
c001fbcd:	83 c4 1c             	add    esp,0x1c
c001fbd0:	5b                   	pop    ebx
c001fbd1:	5e                   	pop    esi
c001fbd2:	5f                   	pop    edi
c001fbd3:	5d                   	pop    ebp
c001fbd4:	c3                   	ret    
c001fbd5:	8d 76 00             	lea    esi,[esi+0x0]
c001fbd8:	89 fd                	mov    ebp,edi
c001fbda:	85 ff                	test   edi,edi
c001fbdc:	75 0b                	jne    c001fbe9 <__umoddi3+0x45>
c001fbde:	b8 01 00 00 00       	mov    eax,0x1
c001fbe3:	31 d2                	xor    edx,edx
c001fbe5:	f7 f7                	div    edi
c001fbe7:	89 c5                	mov    ebp,eax
c001fbe9:	89 d8                	mov    eax,ebx
c001fbeb:	31 d2                	xor    edx,edx
c001fbed:	f7 f5                	div    ebp
c001fbef:	89 f0                	mov    eax,esi
c001fbf1:	f7 f5                	div    ebp
c001fbf3:	89 d0                	mov    eax,edx
c001fbf5:	eb d4                	jmp    c001fbcb <__umoddi3+0x27>
c001fbf7:	90                   	nop
c001fbf8:	89 f1                	mov    ecx,esi
c001fbfa:	39 d8                	cmp    eax,ebx
c001fbfc:	76 0a                	jbe    c001fc08 <__umoddi3+0x64>
c001fbfe:	89 f0                	mov    eax,esi
c001fc00:	83 c4 1c             	add    esp,0x1c
c001fc03:	5b                   	pop    ebx
c001fc04:	5e                   	pop    esi
c001fc05:	5f                   	pop    edi
c001fc06:	5d                   	pop    ebp
c001fc07:	c3                   	ret    
c001fc08:	0f bd e8             	bsr    ebp,eax
c001fc0b:	83 f5 1f             	xor    ebp,0x1f
c001fc0e:	75 1c                	jne    c001fc2c <__umoddi3+0x88>
c001fc10:	39 d8                	cmp    eax,ebx
c001fc12:	72 04                	jb     c001fc18 <__umoddi3+0x74>
c001fc14:	39 f7                	cmp    edi,esi
c001fc16:	77 08                	ja     c001fc20 <__umoddi3+0x7c>
c001fc18:	89 da                	mov    edx,ebx
c001fc1a:	29 fe                	sub    esi,edi
c001fc1c:	19 c2                	sbb    edx,eax
c001fc1e:	89 f1                	mov    ecx,esi
c001fc20:	89 c8                	mov    eax,ecx
c001fc22:	83 c4 1c             	add    esp,0x1c
c001fc25:	5b                   	pop    ebx
c001fc26:	5e                   	pop    esi
c001fc27:	5f                   	pop    edi
c001fc28:	5d                   	pop    ebp
c001fc29:	c3                   	ret    
c001fc2a:	66 90                	xchg   ax,ax
c001fc2c:	ba 20 00 00 00       	mov    edx,0x20
c001fc31:	29 ea                	sub    edx,ebp
c001fc33:	89 e9                	mov    ecx,ebp
c001fc35:	d3 e0                	shl    eax,cl
c001fc37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc3b:	89 f8                	mov    eax,edi
c001fc3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fc41:	88 d1                	mov    cl,dl
c001fc43:	d3 e8                	shr    eax,cl
c001fc45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc49:	09 c1                	or     ecx,eax
c001fc4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fc4f:	89 e9                	mov    ecx,ebp
c001fc51:	d3 e7                	shl    edi,cl
c001fc53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fc57:	89 d8                	mov    eax,ebx
c001fc59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc5d:	88 d1                	mov    cl,dl
c001fc5f:	d3 e8                	shr    eax,cl
c001fc61:	89 c7                	mov    edi,eax
c001fc63:	89 e9                	mov    ecx,ebp
c001fc65:	d3 e3                	shl    ebx,cl
c001fc67:	89 f0                	mov    eax,esi
c001fc69:	88 d1                	mov    cl,dl
c001fc6b:	d3 e8                	shr    eax,cl
c001fc6d:	09 d8                	or     eax,ebx
c001fc6f:	89 e9                	mov    ecx,ebp
c001fc71:	d3 e6                	shl    esi,cl
c001fc73:	89 f3                	mov    ebx,esi
c001fc75:	89 fa                	mov    edx,edi
c001fc77:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fc7b:	89 d1                	mov    ecx,edx
c001fc7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fc81:	89 c6                	mov    esi,eax
c001fc83:	89 d7                	mov    edi,edx
c001fc85:	39 d1                	cmp    ecx,edx
c001fc87:	72 27                	jb     c001fcb0 <__umoddi3+0x10c>
c001fc89:	74 21                	je     c001fcac <__umoddi3+0x108>
c001fc8b:	89 ca                	mov    edx,ecx
c001fc8d:	29 f3                	sub    ebx,esi
c001fc8f:	19 fa                	sbb    edx,edi
c001fc91:	89 d0                	mov    eax,edx
c001fc93:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fc97:	d3 e0                	shl    eax,cl
c001fc99:	89 e9                	mov    ecx,ebp
c001fc9b:	d3 eb                	shr    ebx,cl
c001fc9d:	09 d8                	or     eax,ebx
c001fc9f:	d3 ea                	shr    edx,cl
c001fca1:	83 c4 1c             	add    esp,0x1c
c001fca4:	5b                   	pop    ebx
c001fca5:	5e                   	pop    esi
c001fca6:	5f                   	pop    edi
c001fca7:	5d                   	pop    ebp
c001fca8:	c3                   	ret    
c001fca9:	8d 76 00             	lea    esi,[esi+0x0]
c001fcac:	39 c3                	cmp    ebx,eax
c001fcae:	73 db                	jae    c001fc8b <__umoddi3+0xe7>
c001fcb0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fcb4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fcb8:	89 d7                	mov    edi,edx
c001fcba:	89 c6                	mov    esi,eax
c001fcbc:	eb cd                	jmp    c001fc8b <__umoddi3+0xe7>

Disassembly of section .init:

c001fcbe <_init>:
c001fcbe:	55                   	push   ebp
c001fcbf:	89 e5                	mov    ebp,esp
c001fcc1:	e8 2e 04 fe ff       	call   c00000f4 <frame_dummy>
c001fcc6:	e8 e5 fa ff ff       	call   c001f7b0 <__do_global_ctors_aux>
c001fccb:	5d                   	pop    ebp
c001fccc:	c3                   	ret    

Disassembly of section .fini:

c001fccd <_fini>:
c001fccd:	55                   	push   ebp
c001fcce:	89 e5                	mov    ebp,esp
c001fcd0:	e8 af 03 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fcd5:	5d                   	pop    ebp
c001fcd6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fcd8 <DriverlessDevice::~DriverlessDevice()>:
c001fcd8:	ba 60 16 02 c0       	mov    edx,0xc0021660
c001fcdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce1:	89 10                	mov    DWORD PTR [eax],edx
c001fce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce7:	50                   	push   eax
c001fce8:	e8 5b 92 fe ff       	call   c0008f48 <Device::~Device()>
c001fced:	83 c4 04             	add    esp,0x4
c001fcf0:	90                   	nop
c001fcf1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fcf2 <DriverlessDevice::~DriverlessDevice()>:
c001fcf2:	83 ec 0c             	sub    esp,0xc
c001fcf5:	83 ec 0c             	sub    esp,0xc
c001fcf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcfc:	e8 d7 ff ff ff       	call   c001fcd8 <DriverlessDevice::~DriverlessDevice()>
c001fd01:	83 c4 10             	add    esp,0x10
c001fd04:	83 ec 08             	sub    esp,0x8
c001fd07:	68 58 01 00 00       	push   0x158
c001fd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd10:	e8 46 c9 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	83 c4 0c             	add    esp,0xc
c001fd1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fd1c <LinkedList<Device>::addElement(Device*)>:
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd24:	75 10                	jne    c001fd36 <LinkedList<Device>::addElement(Device*)+0x1a>
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	68 f4 15 02 c0       	push   0xc00215f4
c001fd2e:	e8 e3 ee fe ff       	call   c000ec16 <KePanic(char const*)>
c001fd33:	83 c4 10             	add    esp,0x10
c001fd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3a:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd3c:	85 c0                	test   eax,eax
c001fd3e:	74 3a                	je     c001fd7a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd47:	85 c0                	test   eax,eax
c001fd49:	74 2f                	je     c001fd7a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd56:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd6e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd78:	eb 68                	jmp    c001fde2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd80:	85 c0                	test   eax,eax
c001fd82:	75 4e                	jne    c001fdd2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd8b:	85 c0                	test   eax,eax
c001fd8d:	75 43                	jne    c001fdd2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd97:	89 10                	mov    DWORD PTR [eax],edx
c001fd99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fda1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdab:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fdb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdbc:	85 c0                	test   eax,eax
c001fdbe:	74 22                	je     c001fde2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdc0:	83 ec 0c             	sub    esp,0xc
c001fdc3:	68 16 16 02 c0       	push   0xc0021616
c001fdc8:	e8 49 ee fe ff       	call   c000ec16 <KePanic(char const*)>
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	eb 10                	jmp    c001fde2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdd2:	83 ec 0c             	sub    esp,0xc
c001fdd5:	68 20 16 02 c0       	push   0xc0021620
c001fdda:	e8 37 ee fe ff       	call   c000ec16 <KePanic(char const*)>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fde9:	8d 50 01             	lea    edx,[eax+0x1]
c001fdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdf3:	90                   	nop
c001fdf4:	83 c4 0c             	add    esp,0xc
c001fdf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fdf8 <LinkedList<Device>::LinkedList()>:
c001fdf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdfc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe11:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe38:	90                   	nop
c001fe39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fe3c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fe3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe42:	85 c0                	test   eax,eax
c001fe44:	75 0e                	jne    c001fe54 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe4d:	85 c0                	test   eax,eax
c001fe4f:	75 03                	jne    c001fe54 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe51:	b0 01                	mov    al,0x1
c001fe53:	c3                   	ret    
c001fe54:	b0 00                	mov    al,0x0
c001fe56:	90                   	nop
c001fe57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe58 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe60 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe60:	83 ec 0c             	sub    esp,0xc
c001fe63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe67:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe69:	85 c0                	test   eax,eax
c001fe6b:	75 17                	jne    c001fe84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe6d:	83 ec 0c             	sub    esp,0xc
c001fe70:	68 90 18 02 c0       	push   0xc0021890
c001fe75:	e8 9c ed fe ff       	call   c000ec16 <KePanic(char const*)>
c001fe7a:	83 c4 10             	add    esp,0x10
c001fe7d:	e9 96 00 00 00       	jmp    c001ff18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe82:	66 90                	xchg   ax,ax
c001fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe8e:	85 c0                	test   eax,eax
c001fe90:	0f 95 c0             	setne  al
c001fe93:	0f b6 c0             	movzx  eax,al
c001fe96:	85 c0                	test   eax,eax
c001fe98:	74 12                	je     c001feac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe9a:	83 ec 0c             	sub    esp,0xc
c001fe9d:	68 db 18 02 c0       	push   0xc00218db
c001fea2:	e8 6f ed fe ff       	call   c000ec16 <KePanic(char const*)>
c001fea7:	83 c4 10             	add    esp,0x10
c001feaa:	66 90                	xchg   ax,ax
c001feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001feb5:	85 c0                	test   eax,eax
c001feb7:	0f 94 c0             	sete   al
c001feba:	0f b6 c0             	movzx  eax,al
c001febd:	85 c0                	test   eax,eax
c001febf:	74 33                	je     c001fef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fedd:	83 f8 01             	cmp    eax,0x1
c001fee0:	74 22                	je     c001ff04 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fee2:	83 ec 0c             	sub    esp,0xc
c001fee5:	68 b4 18 02 c0       	push   0xc00218b4
c001feea:	e8 27 ed fe ff       	call   c000ec16 <KePanic(char const*)>
c001feef:	83 c4 10             	add    esp,0x10
c001fef2:	eb 10                	jmp    c001ff04 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef8:	8b 00                	mov    eax,DWORD PTR [eax]
c001fefa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff01:	89 10                	mov    DWORD PTR [eax],edx
c001ff03:	90                   	nop
c001ff04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff0b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff15:	8d 76 00             	lea    esi,[esi+0x0]
c001ff18:	83 c4 0c             	add    esp,0xc
c001ff1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ff1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ff1c:	83 ec 0c             	sub    esp,0xc
c001ff1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff24:	75 12                	jne    c001ff38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ff26:	83 ec 0c             	sub    esp,0xc
c001ff29:	68 f4 15 02 c0       	push   0xc00215f4
c001ff2e:	e8 e3 ec fe ff       	call   c000ec16 <KePanic(char const*)>
c001ff33:	83 c4 10             	add    esp,0x10
c001ff36:	66 90                	xchg   ax,ax
c001ff38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff3e:	85 c0                	test   eax,eax
c001ff40:	74 36                	je     c001ff78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff49:	85 c0                	test   eax,eax
c001ff4b:	74 2b                	je     c001ff78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff58:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff74:	eb 6a                	jmp    c001ffe0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff76:	66 90                	xchg   ax,ax
c001ff78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff7e:	85 c0                	test   eax,eax
c001ff80:	75 4e                	jne    c001ffd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff89:	85 c0                	test   eax,eax
c001ff8b:	75 43                	jne    c001ffd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff95:	89 10                	mov    DWORD PTR [eax],edx
c001ff97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffa9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ffb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffb7:	85 c0                	test   eax,eax
c001ffb9:	74 25                	je     c001ffe0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffbb:	83 ec 0c             	sub    esp,0xc
c001ffbe:	68 16 16 02 c0       	push   0xc0021616
c001ffc3:	e8 4e ec fe ff       	call   c000ec16 <KePanic(char const*)>
c001ffc8:	83 c4 10             	add    esp,0x10
c001ffcb:	eb 13                	jmp    c001ffe0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffcd:	8d 76 00             	lea    esi,[esi+0x0]
c001ffd0:	83 ec 0c             	sub    esp,0xc
c001ffd3:	68 20 16 02 c0       	push   0xc0021620
c001ffd8:	e8 39 ec fe ff       	call   c000ec16 <KePanic(char const*)>
c001ffdd:	83 c4 10             	add    esp,0x10
c001ffe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffe7:	8d 50 01             	lea    edx,[eax+0x1]
c001ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fff1:	90                   	nop
c001fff2:	83 c4 0c             	add    esp,0xc
c001fff5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fff8 <ACPI::~ACPI()>:
c001fff8:	83 ec 0c             	sub    esp,0xc
c001fffb:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c0020000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020004:	89 10                	mov    DWORD PTR [eax],edx
c0020006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000a:	83 ec 0c             	sub    esp,0xc
c002000d:	50                   	push   eax
c002000e:	e8 35 8f fe ff       	call   c0008f48 <Device::~Device()>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	90                   	nop
c0020017:	83 c4 0c             	add    esp,0xc
c002001a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002001c <ACPI::~ACPI()>:
c002001c:	83 ec 0c             	sub    esp,0xc
c002001f:	83 ec 0c             	sub    esp,0xc
c0020022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020026:	e8 cd ff ff ff       	call   c001fff8 <ACPI::~ACPI()>
c002002b:	83 c4 10             	add    esp,0x10
c002002e:	83 ec 08             	sub    esp,0x8
c0020031:	68 64 12 00 00       	push   0x1264
c0020036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002003a:	e8 1c c6 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002003f:	83 c4 10             	add    esp,0x10
c0020042:	83 c4 0c             	add    esp,0xc
c0020045:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020048 <LinkedList<Device>::~LinkedList()>:
c0020048:	90                   	nop
c0020049:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002004c <LinkedList<Device>::isEmpty()>:
c002004c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020050:	8b 00                	mov    eax,DWORD PTR [eax]
c0020052:	85 c0                	test   eax,eax
c0020054:	75 0e                	jne    c0020064 <LinkedList<Device>::isEmpty()+0x18>
c0020056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002005d:	85 c0                	test   eax,eax
c002005f:	75 03                	jne    c0020064 <LinkedList<Device>::isEmpty()+0x18>
c0020061:	b0 01                	mov    al,0x1
c0020063:	c3                   	ret    
c0020064:	b0 00                	mov    al,0x0
c0020066:	90                   	nop
c0020067:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020068 <LinkedList<Device>::getFirstElement()>:
c0020068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002006c:	8b 00                	mov    eax,DWORD PTR [eax]
c002006e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020070 <LinkedList<Device>::removeFirst()>:
c0020070:	83 ec 0c             	sub    esp,0xc
c0020073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020077:	8b 00                	mov    eax,DWORD PTR [eax]
c0020079:	85 c0                	test   eax,eax
c002007b:	75 17                	jne    c0020094 <LinkedList<Device>::removeFirst()+0x24>
c002007d:	83 ec 0c             	sub    esp,0xc
c0020080:	68 90 18 02 c0       	push   0xc0021890
c0020085:	e8 8c eb fe ff       	call   c000ec16 <KePanic(char const*)>
c002008a:	83 c4 10             	add    esp,0x10
c002008d:	e9 92 00 00 00       	jmp    c0020124 <LinkedList<Device>::removeFirst()+0xb4>
c0020092:	66 90                	xchg   ax,ax
c0020094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002009b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00200a1:	85 c0                	test   eax,eax
c00200a3:	74 13                	je     c00200b8 <LinkedList<Device>::removeFirst()+0x48>
c00200a5:	83 ec 0c             	sub    esp,0xc
c00200a8:	68 db 18 02 c0       	push   0xc00218db
c00200ad:	e8 64 eb fe ff       	call   c000ec16 <KePanic(char const*)>
c00200b2:	83 c4 10             	add    esp,0x10
c00200b5:	8d 76 00             	lea    esi,[esi+0x0]
c00200b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00200be:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00200c4:	85 c0                	test   eax,eax
c00200c6:	75 34                	jne    c00200fc <LinkedList<Device>::removeFirst()+0x8c>
c00200c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200e4:	83 f8 01             	cmp    eax,0x1
c00200e7:	74 27                	je     c0020110 <LinkedList<Device>::removeFirst()+0xa0>
c00200e9:	83 ec 0c             	sub    esp,0xc
c00200ec:	68 b4 18 02 c0       	push   0xc00218b4
c00200f1:	e8 20 eb fe ff       	call   c000ec16 <KePanic(char const*)>
c00200f6:	83 c4 10             	add    esp,0x10
c00200f9:	eb 15                	jmp    c0020110 <LinkedList<Device>::removeFirst()+0xa0>
c00200fb:	90                   	nop
c00200fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020100:	8b 00                	mov    eax,DWORD PTR [eax]
c0020102:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0020108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010c:	89 10                	mov    DWORD PTR [eax],edx
c002010e:	66 90                	xchg   ax,ax
c0020110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020114:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020117:	8d 50 ff             	lea    edx,[eax-0x1]
c002011a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020121:	8d 76 00             	lea    esi,[esi+0x0]
c0020124:	83 c4 0c             	add    esp,0xc
c0020127:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020128 <Computer::~Computer()>:
c0020128:	83 ec 0c             	sub    esp,0xc
c002012b:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c0020130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020134:	89 10                	mov    DWORD PTR [eax],edx
c0020136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013a:	83 ec 0c             	sub    esp,0xc
c002013d:	50                   	push   eax
c002013e:	e8 05 8e fe ff       	call   c0008f48 <Device::~Device()>
c0020143:	83 c4 10             	add    esp,0x10
c0020146:	90                   	nop
c0020147:	83 c4 0c             	add    esp,0xc
c002014a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002014c <Computer::~Computer()>:
c002014c:	83 ec 0c             	sub    esp,0xc
c002014f:	83 ec 0c             	sub    esp,0xc
c0020152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020156:	e8 cd ff ff ff       	call   c0020128 <Computer::~Computer()>
c002015b:	83 c4 10             	add    esp,0x10
c002015e:	83 ec 08             	sub    esp,0x8
c0020161:	68 6c 01 00 00       	push   0x16c
c0020166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002016a:	e8 ec c4 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002016f:	83 c4 10             	add    esp,0x10
c0020172:	83 c4 0c             	add    esp,0xc
c0020175:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020176 <idleCommon()>:
c0020176:	83 ec 0c             	sub    esp,0xc
c0020179:	fa                   	cli    
c002017a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0020180:	e8 57 52 ff ff       	call   c00153dc <schedule()>
c0020185:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c002018c:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0020193:	75 01                	jne    c0020196 <idleCommon()+0x20>
c0020195:	fb                   	sti    
c0020196:	83 c4 0c             	add    esp,0xc
c0020199:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002019a <LinkedList<UnixFile>::~LinkedList()>:
c002019a:	90                   	nop
c002019b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002019c <LinkedList<UnixFile>::LinkedList()>:
c002019c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201dc:	90                   	nop
c00201dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00201de <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00201de:	83 ec 0c             	sub    esp,0xc
c00201e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201e6:	75 10                	jne    c00201f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00201e8:	83 ec 0c             	sub    esp,0xc
c00201eb:	68 f4 15 02 c0       	push   0xc00215f4
c00201f0:	e8 21 ea fe ff       	call   c000ec16 <KePanic(char const*)>
c00201f5:	83 c4 10             	add    esp,0x10
c00201f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00201fe:	85 c0                	test   eax,eax
c0020200:	74 34                	je     c0020236 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020209:	85 c0                	test   eax,eax
c002020b:	74 29                	je     c0020236 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002020d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020211:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020214:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020218:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002021b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020223:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002022a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002022d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020234:	eb 65                	jmp    c002029b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023a:	8b 00                	mov    eax,DWORD PTR [eax]
c002023c:	85 c0                	test   eax,eax
c002023e:	75 4b                	jne    c002028b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020247:	85 c0                	test   eax,eax
c0020249:	75 40                	jne    c002028b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002024b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020253:	89 10                	mov    DWORD PTR [eax],edx
c0020255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020259:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002025d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020264:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020267:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002026e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020272:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020275:	85 c0                	test   eax,eax
c0020277:	74 22                	je     c002029b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020279:	83 ec 0c             	sub    esp,0xc
c002027c:	68 16 16 02 c0       	push   0xc0021616
c0020281:	e8 90 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020286:	83 c4 10             	add    esp,0x10
c0020289:	eb 10                	jmp    c002029b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002028b:	83 ec 0c             	sub    esp,0xc
c002028e:	68 20 16 02 c0       	push   0xc0021620
c0020293:	e8 7e e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020298:	83 c4 10             	add    esp,0x10
c002029b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202a2:	8d 50 01             	lea    edx,[eax+0x1]
c00202a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00202ac:	90                   	nop
c00202ad:	83 c4 0c             	add    esp,0xc
c00202b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00202b2 <LinkedList<UnixFile>::getFirstElement()>:
c00202b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00202b8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00202ba <LinkedList<UnixFile>::removeFirst()>:
c00202ba:	83 ec 0c             	sub    esp,0xc
c00202bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00202c3:	85 c0                	test   eax,eax
c00202c5:	75 12                	jne    c00202d9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00202c7:	83 ec 0c             	sub    esp,0xc
c00202ca:	68 90 18 02 c0       	push   0xc0021890
c00202cf:	e8 42 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c00202d4:	83 c4 10             	add    esp,0x10
c00202d7:	eb 7e                	jmp    c0020357 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00202d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202e3:	85 c0                	test   eax,eax
c00202e5:	74 10                	je     c00202f7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00202e7:	83 ec 0c             	sub    esp,0xc
c00202ea:	68 db 18 02 c0       	push   0xc00218db
c00202ef:	e8 22 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c00202f4:	83 c4 10             	add    esp,0x10
c00202f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00202fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020300:	85 c0                	test   eax,eax
c0020302:	75 33                	jne    c0020337 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0020304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020308:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002030e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020312:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002031d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020320:	83 f8 01             	cmp    eax,0x1
c0020323:	74 21                	je     c0020346 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	68 b4 18 02 c0       	push   0xc00218b4
c002032d:	e8 e4 e8 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020332:	83 c4 10             	add    esp,0x10
c0020335:	eb 0f                	jmp    c0020346 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033b:	8b 00                	mov    eax,DWORD PTR [eax]
c002033d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020344:	89 10                	mov    DWORD PTR [eax],edx
c0020346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002034a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002034d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020354:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020357:	83 c4 0c             	add    esp,0xc
c002035a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002035c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002035c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020360:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020363:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020364 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020364:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020368:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002036b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002036c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002036c:	90                   	nop
c002036d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020370 <ThreadControlBlock::ThreadControlBlock()>:
c0020370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020374:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002037b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002037f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002038a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020391:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020395:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002039c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203a0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00203a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ab:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00203af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203b3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00203b7:	90                   	nop
c00203b8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00203bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00203bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203fc:	90                   	nop
c00203fd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00203fe <CPU::~CPU()>:
c00203fe:	83 ec 0c             	sub    esp,0xc
c0020401:	ba 18 30 02 c0       	mov    edx,0xc0023018
c0020406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040a:	89 10                	mov    DWORD PTR [eax],edx
c002040c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020410:	83 ec 0c             	sub    esp,0xc
c0020413:	50                   	push   eax
c0020414:	e8 2f 8b fe ff       	call   c0008f48 <Device::~Device()>
c0020419:	83 c4 10             	add    esp,0x10
c002041c:	90                   	nop
c002041d:	83 c4 0c             	add    esp,0xc
c0020420:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020422 <CPU::~CPU()>:
c0020422:	83 ec 0c             	sub    esp,0xc
c0020425:	83 ec 0c             	sub    esp,0xc
c0020428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042c:	e8 cd ff ff ff       	call   c00203fe <CPU::~CPU()>
c0020431:	83 c4 10             	add    esp,0x10
c0020434:	83 ec 08             	sub    esp,0x8
c0020437:	68 78 11 00 00       	push   0x1178
c002043c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020440:	e8 16 c2 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020445:	83 c4 10             	add    esp,0x10
c0020448:	83 c4 0c             	add    esp,0xc
c002044b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002044c <PCI::~PCI()>:
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	ba 7c 35 02 c0       	mov    edx,0xc002357c
c0020454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020458:	89 10                	mov    DWORD PTR [eax],edx
c002045a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045e:	83 ec 0c             	sub    esp,0xc
c0020461:	50                   	push   eax
c0020462:	e8 b9 84 fe ff       	call   c0008920 <Bus::~Bus()>
c0020467:	83 c4 10             	add    esp,0x10
c002046a:	90                   	nop
c002046b:	83 c4 0c             	add    esp,0xc
c002046e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020470 <PCI::~PCI()>:
c0020470:	83 ec 0c             	sub    esp,0xc
c0020473:	83 ec 0c             	sub    esp,0xc
c0020476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047a:	e8 cd ff ff ff       	call   c002044c <PCI::~PCI()>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	83 ec 08             	sub    esp,0x8
c0020485:	68 5c 01 00 00       	push   0x15c
c002048a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002048e:	e8 c8 c1 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020493:	83 c4 10             	add    esp,0x10
c0020496:	83 c4 0c             	add    esp,0xc
c0020499:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002049a <IDE::~IDE()>:
c002049a:	83 ec 0c             	sub    esp,0xc
c002049d:	ba b4 36 02 c0       	mov    edx,0xc00236b4
c00204a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a6:	89 10                	mov    DWORD PTR [eax],edx
c00204a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ac:	83 ec 0c             	sub    esp,0xc
c00204af:	50                   	push   eax
c00204b0:	e8 23 8f fe ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c00204b5:	83 c4 10             	add    esp,0x10
c00204b8:	90                   	nop
c00204b9:	83 c4 0c             	add    esp,0xc
c00204bc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00204be <IDE::~IDE()>:
c00204be:	83 ec 0c             	sub    esp,0xc
c00204c1:	83 ec 0c             	sub    esp,0xc
c00204c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204c8:	e8 cd ff ff ff       	call   c002049a <IDE::~IDE()>
c00204cd:	83 c4 10             	add    esp,0x10
c00204d0:	83 ec 08             	sub    esp,0x8
c00204d3:	68 70 02 00 00       	push   0x270
c00204d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204dc:	e8 7a c1 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00204e1:	83 c4 10             	add    esp,0x10
c00204e4:	83 c4 0c             	add    esp,0xc
c00204e7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00204e8 <SATABus::~SATABus()>:
c00204e8:	83 ec 0c             	sub    esp,0xc
c00204eb:	ba 04 37 02 c0       	mov    edx,0xc0023704
c00204f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f4:	89 10                	mov    DWORD PTR [eax],edx
c00204f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fa:	83 ec 0c             	sub    esp,0xc
c00204fd:	50                   	push   eax
c00204fe:	e8 d5 8e fe ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c0020503:	83 c4 10             	add    esp,0x10
c0020506:	90                   	nop
c0020507:	83 c4 0c             	add    esp,0xc
c002050a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002050c <SATABus::~SATABus()>:
c002050c:	83 ec 0c             	sub    esp,0xc
c002050f:	83 ec 0c             	sub    esp,0xc
c0020512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020516:	e8 cd ff ff ff       	call   c00204e8 <SATABus::~SATABus()>
c002051b:	83 c4 10             	add    esp,0x10
c002051e:	83 ec 08             	sub    esp,0x8
c0020521:	68 64 01 00 00       	push   0x164
c0020526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002052a:	e8 2c c1 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002052f:	83 c4 10             	add    esp,0x10
c0020532:	83 c4 0c             	add    esp,0xc
c0020535:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020536 <ATA::~ATA()>:
c0020536:	83 ec 0c             	sub    esp,0xc
c0020539:	ba 44 37 02 c0       	mov    edx,0xc0023744
c002053e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020542:	89 10                	mov    DWORD PTR [eax],edx
c0020544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020548:	83 ec 0c             	sub    esp,0xc
c002054b:	50                   	push   eax
c002054c:	e8 69 8f fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c0020551:	83 c4 10             	add    esp,0x10
c0020554:	90                   	nop
c0020555:	83 c4 0c             	add    esp,0xc
c0020558:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002055a <ATA::~ATA()>:
c002055a:	83 ec 0c             	sub    esp,0xc
c002055d:	83 ec 0c             	sub    esp,0xc
c0020560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020564:	e8 cd ff ff ff       	call   c0020536 <ATA::~ATA()>
c0020569:	83 c4 10             	add    esp,0x10
c002056c:	83 ec 08             	sub    esp,0x8
c002056f:	68 7c 01 00 00       	push   0x17c
c0020574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020578:	e8 de c0 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002057d:	83 c4 10             	add    esp,0x10
c0020580:	83 c4 0c             	add    esp,0xc
c0020583:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020584 <ATAPI::~ATAPI()>:
c0020584:	83 ec 0c             	sub    esp,0xc
c0020587:	ba 8c 37 02 c0       	mov    edx,0xc002378c
c002058c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020590:	89 10                	mov    DWORD PTR [eax],edx
c0020592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020596:	83 ec 0c             	sub    esp,0xc
c0020599:	50                   	push   eax
c002059a:	e8 1b 8f fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c002059f:	83 c4 10             	add    esp,0x10
c00205a2:	90                   	nop
c00205a3:	83 c4 0c             	add    esp,0xc
c00205a6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00205a8 <ATAPI::~ATAPI()>:
c00205a8:	83 ec 0c             	sub    esp,0xc
c00205ab:	83 ec 0c             	sub    esp,0xc
c00205ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b2:	e8 cd ff ff ff       	call   c0020584 <ATAPI::~ATAPI()>
c00205b7:	83 c4 10             	add    esp,0x10
c00205ba:	83 ec 08             	sub    esp,0x8
c00205bd:	68 84 01 00 00       	push   0x184
c00205c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c6:	e8 90 c0 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00205cb:	83 c4 10             	add    esp,0x10
c00205ce:	83 c4 0c             	add    esp,0xc
c00205d1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00205d2 <SATA::~SATA()>:
c00205d2:	83 ec 0c             	sub    esp,0xc
c00205d5:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c00205da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205de:	89 10                	mov    DWORD PTR [eax],edx
c00205e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e4:	83 ec 0c             	sub    esp,0xc
c00205e7:	50                   	push   eax
c00205e8:	e8 cd 8e fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c00205ed:	83 c4 10             	add    esp,0x10
c00205f0:	90                   	nop
c00205f1:	83 c4 0c             	add    esp,0xc
c00205f4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00205f6 <SATA::~SATA()>:
c00205f6:	83 ec 0c             	sub    esp,0xc
c00205f9:	83 ec 0c             	sub    esp,0xc
c00205fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020600:	e8 cd ff ff ff       	call   c00205d2 <SATA::~SATA()>
c0020605:	83 c4 10             	add    esp,0x10
c0020608:	83 ec 08             	sub    esp,0x8
c002060b:	68 7c 01 00 00       	push   0x17c
c0020610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020614:	e8 42 c0 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020619:	83 c4 10             	add    esp,0x10
c002061c:	83 c4 0c             	add    esp,0xc
c002061f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020620 <SATAPI::~SATAPI()>:
c0020620:	83 ec 0c             	sub    esp,0xc
c0020623:	ba 70 39 02 c0       	mov    edx,0xc0023970
c0020628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002062c:	89 10                	mov    DWORD PTR [eax],edx
c002062e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020632:	83 ec 0c             	sub    esp,0xc
c0020635:	50                   	push   eax
c0020636:	e8 7f 8e fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c002063b:	83 c4 10             	add    esp,0x10
c002063e:	90                   	nop
c002063f:	83 c4 0c             	add    esp,0xc
c0020642:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020644 <SATAPI::~SATAPI()>:
c0020644:	83 ec 0c             	sub    esp,0xc
c0020647:	83 ec 0c             	sub    esp,0xc
c002064a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002064e:	e8 cd ff ff ff       	call   c0020620 <SATAPI::~SATAPI()>
c0020653:	83 c4 10             	add    esp,0x10
c0020656:	83 ec 08             	sub    esp,0x8
c0020659:	68 84 01 00 00       	push   0x184
c002065e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020662:	e8 f4 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020667:	83 c4 10             	add    esp,0x10
c002066a:	83 c4 0c             	add    esp,0xc
c002066d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002066e <IOAPIC::~IOAPIC()>:
c002066e:	83 ec 0c             	sub    esp,0xc
c0020671:	ba d0 39 02 c0       	mov    edx,0xc00239d0
c0020676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067a:	89 10                	mov    DWORD PTR [eax],edx
c002067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020680:	83 ec 0c             	sub    esp,0xc
c0020683:	50                   	push   eax
c0020684:	e8 bf 88 fe ff       	call   c0008f48 <Device::~Device()>
c0020689:	83 c4 10             	add    esp,0x10
c002068c:	90                   	nop
c002068d:	83 c4 0c             	add    esp,0xc
c0020690:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020692 <IOAPIC::~IOAPIC()>:
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	83 ec 0c             	sub    esp,0xc
c0020698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002069c:	e8 cd ff ff ff       	call   c002066e <IOAPIC::~IOAPIC()>
c00206a1:	83 c4 10             	add    esp,0x10
c00206a4:	83 ec 08             	sub    esp,0x8
c00206a7:	68 68 01 00 00       	push   0x168
c00206ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206b0:	e8 a6 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00206b5:	83 c4 10             	add    esp,0x10
c00206b8:	83 c4 0c             	add    esp,0xc
c00206bb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00206bc <APICTimer::~APICTimer()>:
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	ba 18 3a 02 c0       	mov    edx,0xc0023a18
c00206c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206c8:	89 10                	mov    DWORD PTR [eax],edx
c00206ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ce:	83 ec 0c             	sub    esp,0xc
c00206d1:	50                   	push   eax
c00206d2:	e8 e5 9f fe ff       	call   c000a6bc <Timer::~Timer()>
c00206d7:	83 c4 10             	add    esp,0x10
c00206da:	90                   	nop
c00206db:	83 c4 0c             	add    esp,0xc
c00206de:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00206e0 <APICTimer::~APICTimer()>:
c00206e0:	83 ec 0c             	sub    esp,0xc
c00206e3:	83 ec 0c             	sub    esp,0xc
c00206e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ea:	e8 cd ff ff ff       	call   c00206bc <APICTimer::~APICTimer()>
c00206ef:	83 c4 10             	add    esp,0x10
c00206f2:	83 ec 08             	sub    esp,0x8
c00206f5:	68 60 01 00 00       	push   0x160
c00206fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206fe:	e8 58 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	83 c4 0c             	add    esp,0xc
c0020709:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002070c <PIT::~PIT()>:
c002070c:	83 ec 0c             	sub    esp,0xc
c002070f:	ba 68 3a 02 c0       	mov    edx,0xc0023a68
c0020714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020718:	89 10                	mov    DWORD PTR [eax],edx
c002071a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002071e:	83 ec 0c             	sub    esp,0xc
c0020721:	50                   	push   eax
c0020722:	e8 95 9f fe ff       	call   c000a6bc <Timer::~Timer()>
c0020727:	83 c4 10             	add    esp,0x10
c002072a:	90                   	nop
c002072b:	83 c4 0c             	add    esp,0xc
c002072e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020730 <PIT::~PIT()>:
c0020730:	83 ec 0c             	sub    esp,0xc
c0020733:	83 ec 0c             	sub    esp,0xc
c0020736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002073a:	e8 cd ff ff ff       	call   c002070c <PIT::~PIT()>
c002073f:	83 c4 10             	add    esp,0x10
c0020742:	83 ec 08             	sub    esp,0x8
c0020745:	68 5c 01 00 00       	push   0x15c
c002074a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002074e:	e8 08 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	83 c4 0c             	add    esp,0xc
c0020759:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 3b 22 02 c0       	mov    esi,0xc002223b
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 57 22 02 c0       	mov    esi,0xc0022257
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
