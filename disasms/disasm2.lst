
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 fc 00 00       	call   c000fce6 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 68 6d 02 c0       	mov    eax,0xc0026d68
c0000025:	3d 68 6d 02 c0       	cmp    eax,0xc0026d68
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 68 6d 02 c0       	push   0xc0026d68
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 68 6d 02 c0       	mov    eax,0xc0026d68
c0000051:	2d 68 6d 02 c0       	sub    eax,0xc0026d68
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 68 6d 02 c0       	push   0xc0026d68
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 80 27 02 c0       	mov    ebx,0xc0022780
c0000097:	81 eb 7c 27 02 c0    	sub    ebx,0xc002277c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 7c 27 02 c0       	mov    esi,0xc002277c
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 68 6d 02 c0       	push   0xc0026d68
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 68 6d 02 c0       	push   0xc0026d68
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 17 64 01 00       	call   c00166c4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 28 43 01 00       	call   c00145ed <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 f5 63 01 00       	call   c00166c4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 56 69 01 00       	call   c0016c44 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ad 6e 01 00       	call   c00171a4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 e0 02 c0 	lgdtd  ds:0xc002e0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 6a ee 00 00       	jmp    c000f1e9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 a0 27 02 c0 02 	test   BYTE PTR [edx-0x3ffdd860],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 a0 27 02 c0 01 	test   BYTE PTR [edx-0x3ffdd860],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 a0 27 02 c0 08 	test   BYTE PTR [edx-0x3ffdd860],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 a0 27 02 c0 08 	test   BYTE PTR [edx-0x3ffdd860],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 a0 27 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd860],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 a0 27 02 c0 01 	test   BYTE PTR [edx-0x3ffdd860],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000e2a:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e8e:	e8 97 ea 00 00       	call   c000f92a <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 a4 e9 00 00       	call   c000f8cc <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 7f e8 00 00       	call   c000f896 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 7a e8 00 00       	call   c000f8cc <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 70 e7 00 00       	call   c000f896 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 8b e6 00 00       	call   c000f896 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 75 e6 00 00       	call   c000f896 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c0001313:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000136a:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c00013b3:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013ce:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c0001488:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c000148e:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001495:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000155b:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001561:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c0001568:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c00016b6:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 a4 28 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd75c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 00 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1400]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 45 a4 01 00       	jmp    c001c400 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 00 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1400]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 6f a4 01 00       	jmp    c001c440 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 00 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1400]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 90 a4 01 00       	jmp    c001c480 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 00 2a 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd600]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 00 2a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd600]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 50 59 02 c0       	mov    edx,0xc0025950
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba bc 28 02 c0       	mov    edx,0xc00228bc
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 c2 28 02 c0       	mov    eax,0xc00228c2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 80 29 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd680]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 cb 28 02 c0       	mov    eax,0xc00228cb
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 00 2a 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdd600]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 50 29 02 c0       	mov    eax,0xc0022950
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 40 29 02 c0       	mov    ebx,0xc0022940
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 20 29 02 c0       	mov    eax,0xc0022920
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 30 29 02 c0       	mov    eax,0xc0022930
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba d2 28 02 c0       	mov    edx,0xc00228d2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba de 28 02 c0       	mov    edx,0xc00228de
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba f2 28 02 c0       	mov    edx,0xc00228f2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 69 9b 00 00       	call   c000f9ac <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 61 9b 00 00       	call   c000f9bc <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 20 2d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022d20
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 20 2d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022d20
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 20 2b 02 c0       	mov    eax,0xc0022b20
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 20 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5e0]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 20 2e 02 c0       	push   0xc0022e20
c0006327:	e8 78 6a 01 00       	call   c001cda4 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 2e 2e 02 c0       	push   0xc0022e2e
c000635f:	e8 40 6a 01 00       	call   c001cda4 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 a9 69 01 00       	call   c001cd48 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 80 02 c0       	mov    eax,0xc0028080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 80 02 c0       	mov    eax,0xc0028020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 3d 2e 02 c0       	push   0xc0022e3d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c000675b:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006765:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c000677d:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067f6:	8b 9d 4c 85 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd7ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c000688d:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068ef:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c000692c:	05 40 85 02 c0       	add    eax,0xc0028540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069ec:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 40 2e 02 c0       	push   0xc0022e40
c0006a0f:	e8 90 63 01 00       	call   c001cda4 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 9e 63 01 00       	call   c001cdc0 <iso_kprintfd>
c0006a22:	c7 04 24 45 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e45
c0006a29:	e8 76 63 01 00       	call   c001cda4 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a35:	e8 86 63 01 00       	call   c001cdc0 <iso_kprintfd>
c0006a3a:	c7 04 24 4b 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e4b
c0006a41:	e8 5e 63 01 00       	call   c001cda4 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a4d:	e8 6e 63 01 00       	call   c001cdc0 <iso_kprintfd>
c0006a52:	c7 04 24 51 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e51
c0006a59:	e8 46 63 01 00       	call   c001cda4 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a65:	e8 56 63 01 00       	call   c001cdc0 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006acb:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 85 02 c0    	lea    ebp,[edi-0x3ffd7aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 85 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd7aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 3d 2e 02 c0       	push   0xc0022e3d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006c0a:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006c10:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 85 02 c0    	lea    eax,[edi-0x3ffd7ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 5a 2e 02 c0       	push   0xc0022e5a
c0006c32:	e8 6d 61 01 00       	call   c001cda4 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c67:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 65 2e 02 c0       	push   0xc0022e65
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 6c 2e 02 c0       	push   0xc0022e6c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006d05:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d28:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 73 2e 02 c0       	push   0xc0022e73
c0006d49:	e8 56 60 01 00       	call   c001cda4 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 7e 2e 02 c0       	push   0xc0022e7e
c0006d64:	e8 3b 60 01 00       	call   c001cda4 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 85 02 c0       	push   0xc0028540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 19 8c 00 00       	call   c000f9ac <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d9f:	e8 08 8c 00 00       	call   c000f9ac <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 f3 8b 00 00       	call   c000f9ac <malloc>
c0006db9:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 da 8b 00 00       	call   c000f9ac <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006dff:	e8 b8 8b 00 00       	call   c000f9bc <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 aa 8b 00 00       	call   c000f9bc <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 90 8b 00 00       	call   c000f9bc <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 7b 8b 00 00       	call   c000f9bc <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 09 63 00 00       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 65 62 00 00       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 c8 2e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd138]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 90 2e 02 c0       	push   0xc0022e90
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 18 30 02 c0       	push   0xc0023018
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 2c 30 02 c0       	push   0xc002302c
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 36 30 02 c0       	push   0xc0023036
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 40 30 02 c0       	push   0xc0023040
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 84 31 02 c0       	push   0xc0023184
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 4a 30 02 c0       	push   0xc002304a
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 a4 31 02 c0       	push   0xc00231a4
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 5f 30 02 c0       	push   0xc002305f
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 79 30 02 c0       	push   0xc0023079
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 00 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9d00]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 cc 31 02 c0       	push   0xc00231cc
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 84 31 02 c0       	push   0xc0023184
c0007218:	e8 e5 8b 00 00       	call   c000fe02 <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 14 32 02 c0       	push   0xc0023214
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 14 32 02 c0       	push   0xc0023214
c0007247:	e8 b6 8b 00 00       	call   c000fe02 <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 84 30 02 c0       	push   0xc0023084
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 84 30 02 c0       	push   0xc0023084
c0007273:	e8 8a 8b 00 00       	call   c000fe02 <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 a1 30 02 c0       	push   0xc00230a1
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 a1 30 02 c0       	push   0xc00230a1
c000729f:	e8 5e 8b 00 00       	call   c000fe02 <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 34 32 02 c0       	push   0xc0023234
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 34 32 02 c0       	push   0xc0023234
c00072cb:	e8 32 8b 00 00       	call   c000fe02 <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 58 32 02 c0       	push   0xc0023258
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 58 32 02 c0       	push   0xc0023258
c00072f7:	e8 06 8b 00 00       	call   c000fe02 <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 bd 30 02 c0       	push   0xc00230bd
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 bd 30 02 c0       	push   0xc00230bd
c0007323:	e8 da 8a 00 00       	call   c000fe02 <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 d9 30 02 c0       	push   0xc00230d9
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 d9 30 02 c0       	push   0xc00230d9
c000734f:	e8 ae 8a 00 00       	call   c000fe02 <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 78 32 02 c0       	push   0xc0023278
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 78 32 02 c0       	push   0xc0023278
c000737b:	e8 82 8a 00 00       	call   c000fe02 <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 9c 32 02 c0       	push   0xc002329c
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 9c 32 02 c0       	push   0xc002329c
c00073a7:	e8 56 8a 00 00       	call   c000fe02 <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <KiIsHashInTable(unsigned short)>:
c00073b4:	0f b7 d0             	movzx  edx,ax
c00073b7:	83 e0 07             	and    eax,0x7
c00073ba:	c1 fa 03             	sar    edx,0x3
c00073bd:	88 c1                	mov    cl,al
c00073bf:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c00073c6:	d3 fa                	sar    edx,cl
c00073c8:	89 d0                	mov    eax,edx
c00073ca:	83 e0 01             	and    eax,0x1
c00073cd:	c3                   	ret    

c00073ce <KiSetHashInTable(unsigned short, bool)>:
c00073ce:	56                   	push   esi
c00073cf:	53                   	push   ebx
c00073d0:	0f b7 d8             	movzx  ebx,ax
c00073d3:	c1 fb 03             	sar    ebx,0x3
c00073d6:	83 e0 07             	and    eax,0x7
c00073d9:	89 c1                	mov    ecx,eax
c00073db:	b8 01 00 00 00       	mov    eax,0x1
c00073e0:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c00073e7:	d3 e0                	shl    eax,cl
c00073e9:	84 d2                	test   dl,dl
c00073eb:	74 04                	je     c00073f1 <KiSetHashInTable(unsigned short, bool)+0x23>
c00073ed:	09 f0                	or     eax,esi
c00073ef:	eb 04                	jmp    c00073f5 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073f1:	f7 d0                	not    eax
c00073f3:	21 f0                	and    eax,esi
c00073f5:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c00073fb:	5b                   	pop    ebx
c00073fc:	5e                   	pop    esi
c00073fd:	c3                   	ret    

c00073fe <KiFlushSymlinkChanges()>:
c00073fe:	57                   	push   edi
c00073ff:	56                   	push   esi
c0007400:	53                   	push   ebx
c0007401:	83 ec 1c             	sub    esp,0x1c
c0007404:	68 14 01 00 00       	push   0x114
c0007409:	e8 9e 85 00 00       	call   c000f9ac <malloc>
c000740e:	83 c4 0c             	add    esp,0xc
c0007411:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007417:	68 bb 32 02 c0       	push   0xc00232bb
c000741c:	50                   	push   eax
c000741d:	89 c3                	mov    ebx,eax
c000741f:	e8 64 0d 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007424:	83 c4 10             	add    esp,0x10
c0007427:	85 db                	test   ebx,ebx
c0007429:	75 10                	jne    c000743b <KiFlushSymlinkChanges()+0x3d>
c000742b:	83 ec 0c             	sub    esp,0xc
c000742e:	68 d9 32 02 c0       	push   0xc00232d9
c0007433:	e8 ca 89 00 00       	call   c000fe02 <KePanic(char const*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	50                   	push   eax
c000743c:	50                   	push   eax
c000743d:	6a 06                	push   0x6
c000743f:	53                   	push   ebx
c0007440:	e8 61 0d 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007445:	83 c4 10             	add    esp,0x10
c0007448:	85 c0                	test   eax,eax
c000744a:	74 10                	je     c000745c <KiFlushSymlinkChanges()+0x5e>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	68 f3 32 02 c0       	push   0xc00232f3
c0007454:	e8 a9 89 00 00       	call   c000fe02 <KePanic(char const*)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	31 f6                	xor    esi,esi
c000745e:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007464:	7e 70                	jle    c00074d6 <KiFlushSymlinkChanges()+0xd8>
c0007466:	83 ec 0c             	sub    esp,0xc
c0007469:	89 f0                	mov    eax,esi
c000746b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000746d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007471:	c1 e0 08             	shl    eax,0x8
c0007474:	57                   	push   edi
c0007475:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000747a:	50                   	push   eax
c000747b:	6a 00                	push   0x0
c000747d:	68 00 01 00 00       	push   0x100
c0007482:	53                   	push   ebx
c0007483:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007486:	83 c4 20             	add    esp,0x20
c0007489:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007491:	74 10                	je     c00074a3 <KiFlushSymlinkChanges()+0xa5>
c0007493:	83 ec 0c             	sub    esp,0xc
c0007496:	68 0d 33 02 c0       	push   0xc002330d
c000749b:	e8 62 89 00 00       	call   c000fe02 <KePanic(char const*)>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a5:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c00074ac:	83 ec 0c             	sub    esp,0xc
c00074af:	57                   	push   edi
c00074b0:	52                   	push   edx
c00074b1:	6a 00                	push   0x0
c00074b3:	6a 08                	push   0x8
c00074b5:	53                   	push   ebx
c00074b6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074b9:	83 c4 20             	add    esp,0x20
c00074bc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074c1:	74 10                	je     c00074d3 <KiFlushSymlinkChanges()+0xd5>
c00074c3:	83 ec 0c             	sub    esp,0xc
c00074c6:	68 27 33 02 c0       	push   0xc0023327
c00074cb:	e8 32 89 00 00       	call   c000fe02 <KePanic(char const*)>
c00074d0:	83 c4 10             	add    esp,0x10
c00074d3:	46                   	inc    esi
c00074d4:	eb 88                	jmp    c000745e <KiFlushSymlinkChanges()+0x60>
c00074d6:	83 ec 0c             	sub    esp,0xc
c00074d9:	53                   	push   ebx
c00074da:	e8 25 0d 00 00       	call   c0008204 <File::close()>
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	85 db                	test   ebx,ebx
c00074e4:	74 0c                	je     c00074f2 <KiFlushSymlinkChanges()+0xf4>
c00074e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	53                   	push   ebx
c00074ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ef:	83 c4 10             	add    esp,0x10
c00074f2:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074fc:	83 c4 10             	add    esp,0x10
c00074ff:	5b                   	pop    ebx
c0007500:	5e                   	pop    esi
c0007501:	5f                   	pop    edi
c0007502:	c3                   	ret    

c0007503 <KiDeinitialiseSymlinks(void*)>:
c0007503:	e9 f6 fe ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>

c0007508 <KiGetSymlinkHash(char const*)>:
c0007508:	53                   	push   ebx
c0007509:	89 c3                	mov    ebx,eax
c000750b:	83 ec 14             	sub    esp,0x14
c000750e:	50                   	push   eax
c000750f:	e8 6c 90 ff ff       	call   c0000580 <strlen>
c0007514:	5a                   	pop    edx
c0007515:	59                   	pop    ecx
c0007516:	50                   	push   eax
c0007517:	53                   	push   ebx
c0007518:	e8 80 6c 00 00       	call   c000e19d <KeCalculateCRC32(unsigned char*, int)>
c000751d:	83 c4 18             	add    esp,0x18
c0007520:	5b                   	pop    ebx
c0007521:	89 c2                	mov    edx,eax
c0007523:	c1 ea 10             	shr    edx,0x10
c0007526:	31 d0                	xor    eax,edx
c0007528:	c3                   	ret    

c0007529 <KiCreateSymlinkID()>:
c0007529:	55                   	push   ebp
c000752a:	57                   	push   edi
c000752b:	56                   	push   esi
c000752c:	53                   	push   ebx
c000752d:	31 db                	xor    ebx,ebx
c000752f:	83 ec 1c             	sub    esp,0x1c
c0007532:	e8 51 93 00 00       	call   c0010888 <KeRand()>
c0007537:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c000753d:	31 d2                	xor    edx,edx
c000753f:	43                   	inc    ebx
c0007540:	31 ff                	xor    edi,edi
c0007542:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007545:	89 ee                	mov    esi,ebp
c0007547:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c000754d:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007555:	c1 e0 1f             	shl    eax,0x1f
c0007558:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000755e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007562:	75 10                	jne    c0007574 <KiCreateSymlinkID()+0x4b>
c0007564:	83 ec 0c             	sub    esp,0xc
c0007567:	68 41 33 02 c0       	push   0xc0023341
c000756c:	e8 91 88 00 00       	call   c000fe02 <KePanic(char const*)>
c0007571:	83 c4 10             	add    esp,0x10
c0007574:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007578:	75 06                	jne    c0007580 <KiCreateSymlinkID()+0x57>
c000757a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000757e:	74 b2                	je     c0007532 <KiCreateSymlinkID()+0x9>
c0007580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007584:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007588:	83 c4 1c             	add    esp,0x1c
c000758b:	5b                   	pop    ebx
c000758c:	31 f0                	xor    eax,esi
c000758e:	5e                   	pop    esi
c000758f:	31 fa                	xor    edx,edi
c0007591:	5f                   	pop    edi
c0007592:	5d                   	pop    ebp
c0007593:	c3                   	ret    

c0007594 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007594:	53                   	push   ebx
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000759c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075a0:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075a9:	68 00 01 00 00       	push   0x100
c00075ae:	6a 00                	push   0x0
c00075b0:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c00075b7:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c00075be:	c1 e0 08             	shl    eax,0x8
c00075c1:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075c6:	50                   	push   eax
c00075c7:	e8 24 8f ff ff       	call   c00004f0 <memset>
c00075cc:	58                   	pop    eax
c00075cd:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075d2:	5a                   	pop    edx
c00075d3:	c1 e0 08             	shl    eax,0x8
c00075d6:	53                   	push   ebx
c00075d7:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075dc:	50                   	push   eax
c00075dd:	e8 6e 90 ff ff       	call   c0000650 <strcpy>
c00075e2:	89 d8                	mov    eax,ebx
c00075e4:	e8 1f ff ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c00075e9:	ba 01 00 00 00       	mov    edx,0x1
c00075ee:	0f b7 c0             	movzx  eax,ax
c00075f1:	e8 d8 fd ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c00075f6:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075fb:	83 c4 10             	add    esp,0x10
c00075fe:	40                   	inc    eax
c00075ff:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c0007604:	83 f8 03             	cmp    eax,0x3
c0007607:	7e 09                	jle    c0007612 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007609:	83 c4 08             	add    esp,0x8
c000760c:	5b                   	pop    ebx
c000760d:	e9 ec fd ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>
c0007612:	83 c4 08             	add    esp,0x8
c0007615:	5b                   	pop    ebx
c0007616:	c3                   	ret    

c0007617 <KeInitialiseSymlinks()>:
c0007617:	57                   	push   edi
c0007618:	56                   	push   esi
c0007619:	53                   	push   ebx
c000761a:	81 ec 14 01 00 00    	sub    esp,0x114
c0007620:	68 00 20 00 00       	push   0x2000
c0007625:	6a 00                	push   0x0
c0007627:	68 00 93 02 c0       	push   0xc0029300
c000762c:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c0007636:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c0007640:	e8 ab 8e ff ff       	call   c00004f0 <memset>
c0007645:	59                   	pop    ecx
c0007646:	5b                   	pop    ebx
c0007647:	6a 00                	push   0x0
c0007649:	68 03 75 00 c0       	push   0xc0007503
c000764e:	e8 fe 5a 00 00       	call   c000d151 <KeRegisterAtexit(void (*)(void*), void*)>
c0007653:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000765a:	e8 4d 83 00 00       	call   c000f9ac <malloc>
c000765f:	83 c4 0c             	add    esp,0xc
c0007662:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007668:	68 bb 32 02 c0       	push   0xc00232bb
c000766d:	50                   	push   eax
c000766e:	89 c3                	mov    ebx,eax
c0007670:	e8 13 0b 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007675:	83 c4 10             	add    esp,0x10
c0007678:	85 db                	test   ebx,ebx
c000767a:	75 10                	jne    c000768c <KeInitialiseSymlinks()+0x75>
c000767c:	83 ec 0c             	sub    esp,0xc
c000767f:	68 4a 33 02 c0       	push   0xc002334a
c0007684:	e8 79 87 00 00       	call   c000fe02 <KePanic(char const*)>
c0007689:	83 c4 10             	add    esp,0x10
c000768c:	83 ec 0c             	sub    esp,0xc
c000768f:	53                   	push   ebx
c0007690:	e8 d5 0d 00 00       	call   c000846a <File::exists()>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	84 c0                	test   al,al
c000769a:	75 3a                	jne    c00076d6 <KeInitialiseSymlinks()+0xbf>
c000769c:	52                   	push   edx
c000769d:	52                   	push   edx
c000769e:	6a 12                	push   0x12
c00076a0:	53                   	push   ebx
c00076a1:	e8 00 0b 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076a6:	83 c4 10             	add    esp,0x10
c00076a9:	85 c0                	test   eax,eax
c00076ab:	74 10                	je     c00076bd <KeInitialiseSymlinks()+0xa6>
c00076ad:	83 ec 0c             	sub    esp,0xc
c00076b0:	68 67 33 02 c0       	push   0xc0023367
c00076b5:	e8 48 87 00 00       	call   c000fe02 <KePanic(char const*)>
c00076ba:	83 c4 10             	add    esp,0x10
c00076bd:	83 ec 0c             	sub    esp,0xc
c00076c0:	53                   	push   ebx
c00076c1:	e8 3e 0b 00 00       	call   c0008204 <File::close()>
c00076c6:	83 c4 10             	add    esp,0x10
c00076c9:	85 db                	test   ebx,ebx
c00076cb:	0f 84 9e 00 00 00    	je     c000776f <KeInitialiseSymlinks()+0x158>
c00076d1:	e9 8d 00 00 00       	jmp    c0007763 <KeInitialiseSymlinks()+0x14c>
c00076d6:	50                   	push   eax
c00076d7:	50                   	push   eax
c00076d8:	6a 01                	push   0x1
c00076da:	53                   	push   ebx
c00076db:	e8 c6 0a 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076e0:	83 c4 10             	add    esp,0x10
c00076e3:	85 c0                	test   eax,eax
c00076e5:	74 10                	je     c00076f7 <KeInitialiseSymlinks()+0xe0>
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	68 84 33 02 c0       	push   0xc0023384
c00076ef:	e8 0e 87 00 00       	call   c000fe02 <KePanic(char const*)>
c00076f4:	83 c4 10             	add    esp,0x10
c00076f7:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007704:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007706:	57                   	push   edi
c0007707:	8d 74 24 20          	lea    esi,[esp+0x20]
c000770b:	56                   	push   esi
c000770c:	6a 00                	push   0x0
c000770e:	68 00 01 00 00       	push   0x100
c0007713:	53                   	push   ebx
c0007714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007717:	83 c4 20             	add    esp,0x20
c000771a:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007722:	75 33                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007729:	57                   	push   edi
c000772a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000772e:	52                   	push   edx
c000772f:	6a 00                	push   0x0
c0007731:	6a 08                	push   0x8
c0007733:	53                   	push   ebx
c0007734:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007737:	83 c4 20             	add    esp,0x20
c000773a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000773f:	75 16                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007741:	89 f0                	mov    eax,esi
c0007743:	e8 c0 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007748:	ba 01 00 00 00       	mov    edx,0x1
c000774d:	0f b7 c0             	movzx  eax,ax
c0007750:	e8 79 fc ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c0007755:	eb a0                	jmp    c00076f7 <KeInitialiseSymlinks()+0xe0>
c0007757:	83 ec 0c             	sub    esp,0xc
c000775a:	53                   	push   ebx
c000775b:	e8 a4 0a 00 00       	call   c0008204 <File::close()>
c0007760:	83 c4 10             	add    esp,0x10
c0007763:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007765:	83 ec 0c             	sub    esp,0xc
c0007768:	53                   	push   ebx
c0007769:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	81 c4 10 01 00 00    	add    esp,0x110
c0007775:	5b                   	pop    ebx
c0007776:	5e                   	pop    esi
c0007777:	5f                   	pop    edi
c0007778:	c3                   	ret    

c0007779 <KiIsSymlinkRegistered(char const*)>:
c0007779:	55                   	push   ebp
c000777a:	57                   	push   edi
c000777b:	56                   	push   esi
c000777c:	53                   	push   ebx
c000777d:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007783:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000778a:	89 f0                	mov    eax,esi
c000778c:	e8 77 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007791:	0f b7 c0             	movzx  eax,ax
c0007794:	e8 1b fc ff ff       	call   c00073b4 <KiIsHashInTable(unsigned short)>
c0007799:	31 d2                	xor    edx,edx
c000779b:	88 c1                	mov    cl,al
c000779d:	31 c0                	xor    eax,eax
c000779f:	84 c9                	test   cl,cl
c00077a1:	0f 84 31 01 00 00    	je     c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077a7:	31 db                	xor    ebx,ebx
c00077a9:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c00077af:	7e 30                	jle    c00077e1 <KiIsSymlinkRegistered(char const*)+0x68>
c00077b1:	89 d8                	mov    eax,ebx
c00077b3:	c1 e0 08             	shl    eax,0x8
c00077b6:	51                   	push   ecx
c00077b7:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00077bc:	51                   	push   ecx
c00077bd:	50                   	push   eax
c00077be:	56                   	push   esi
c00077bf:	e8 bc 8f ff ff       	call   c0000780 <strcmp>
c00077c4:	83 c4 10             	add    esp,0x10
c00077c7:	85 c0                	test   eax,eax
c00077c9:	75 13                	jne    c00077de <KiIsSymlinkRegistered(char const*)+0x65>
c00077cb:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c00077d2:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c00077d9:	e9 fa 00 00 00       	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077de:	43                   	inc    ebx
c00077df:	eb c8                	jmp    c00077a9 <KiIsSymlinkRegistered(char const*)+0x30>
c00077e1:	83 ec 0c             	sub    esp,0xc
c00077e4:	68 14 01 00 00       	push   0x114
c00077e9:	e8 be 81 00 00       	call   c000f9ac <malloc>
c00077ee:	83 c4 0c             	add    esp,0xc
c00077f1:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00077f7:	68 bb 32 02 c0       	push   0xc00232bb
c00077fc:	50                   	push   eax
c00077fd:	89 c3                	mov    ebx,eax
c00077ff:	e8 84 09 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007804:	83 c4 10             	add    esp,0x10
c0007807:	85 db                	test   ebx,ebx
c0007809:	75 12                	jne    c000781d <KiIsSymlinkRegistered(char const*)+0xa4>
c000780b:	83 ec 0c             	sub    esp,0xc
c000780e:	68 9f 33 02 c0       	push   0xc002339f
c0007813:	e8 ea 85 00 00       	call   c000fe02 <KePanic(char const*)>
c0007818:	83 c4 10             	add    esp,0x10
c000781b:	eb 10                	jmp    c000782d <KiIsSymlinkRegistered(char const*)+0xb4>
c000781d:	83 ec 0c             	sub    esp,0xc
c0007820:	53                   	push   ebx
c0007821:	e8 44 0c 00 00       	call   c000846a <File::exists()>
c0007826:	83 c4 10             	add    esp,0x10
c0007829:	84 c0                	test   al,al
c000782b:	74 de                	je     c000780b <KiIsSymlinkRegistered(char const*)+0x92>
c000782d:	52                   	push   edx
c000782e:	52                   	push   edx
c000782f:	6a 01                	push   0x1
c0007831:	53                   	push   ebx
c0007832:	e8 6f 09 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007837:	83 c4 10             	add    esp,0x10
c000783a:	85 c0                	test   eax,eax
c000783c:	74 10                	je     c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c000783e:	83 ec 0c             	sub    esp,0xc
c0007841:	68 ba 33 02 c0       	push   0xc00233ba
c0007846:	e8 b7 85 00 00       	call   c000fe02 <KePanic(char const*)>
c000784b:	83 c4 10             	add    esp,0x10
c000784e:	83 ec 0c             	sub    esp,0xc
c0007851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007853:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007857:	55                   	push   ebp
c0007858:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000785c:	57                   	push   edi
c000785d:	6a 00                	push   0x0
c000785f:	68 00 01 00 00       	push   0x100
c0007864:	53                   	push   ebx
c0007865:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007868:	83 c4 20             	add    esp,0x20
c000786b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007873:	75 4b                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007875:	83 ec 0c             	sub    esp,0xc
c0007878:	8b 03                	mov    eax,DWORD PTR [ebx]
c000787a:	55                   	push   ebp
c000787b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000787f:	52                   	push   edx
c0007880:	6a 00                	push   0x0
c0007882:	6a 08                	push   0x8
c0007884:	53                   	push   ebx
c0007885:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007888:	83 c4 20             	add    esp,0x20
c000788b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007890:	75 2e                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007892:	50                   	push   eax
c0007893:	50                   	push   eax
c0007894:	57                   	push   edi
c0007895:	56                   	push   esi
c0007896:	e8 e5 8e ff ff       	call   c0000780 <strcmp>
c000789b:	83 c4 10             	add    esp,0x10
c000789e:	85 c0                	test   eax,eax
c00078a0:	75 ac                	jne    c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c00078a2:	83 ec 0c             	sub    esp,0xc
c00078a5:	53                   	push   ebx
c00078a6:	e8 59 09 00 00       	call   c0008204 <File::close()>
c00078ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bb:	83 c4 10             	add    esp,0x10
c00078be:	eb 18                	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00078c0:	83 ec 0c             	sub    esp,0xc
c00078c3:	53                   	push   ebx
c00078c4:	e8 3b 09 00 00       	call   c0008204 <File::close()>
c00078c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	31 d2                	xor    edx,edx
c00078d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078de:	5b                   	pop    ebx
c00078df:	5e                   	pop    esi
c00078e0:	5f                   	pop    edi
c00078e1:	5d                   	pop    ebp
c00078e2:	c3                   	ret    

c00078e3 <KeDereferenceSymlink(char const*, char*)>:
c00078e3:	55                   	push   ebp
c00078e4:	57                   	push   edi
c00078e5:	56                   	push   esi
c00078e6:	53                   	push   ebx
c00078e7:	83 ec 48             	sub    esp,0x48
c00078ea:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ee:	56                   	push   esi
c00078ef:	e8 85 fe ff ff       	call   c0007779 <KiIsSymlinkRegistered(char const*)>
c00078f4:	83 c4 10             	add    esp,0x10
c00078f7:	89 c7                	mov    edi,eax
c00078f9:	89 d0                	mov    eax,edx
c00078fb:	09 f8                	or     eax,edi
c00078fd:	75 07                	jne    c0007906 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078ff:	31 c0                	xor    eax,eax
c0007901:	e9 7c 01 00 00       	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007906:	83 ec 0c             	sub    esp,0xc
c0007909:	89 d5                	mov    ebp,edx
c000790b:	68 14 01 00 00       	push   0x114
c0007910:	e8 97 80 00 00       	call   c000f9ac <malloc>
c0007915:	83 c4 0c             	add    esp,0xc
c0007918:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000791e:	56                   	push   esi
c000791f:	50                   	push   eax
c0007920:	89 c3                	mov    ebx,eax
c0007922:	e8 61 08 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007927:	83 c4 10             	add    esp,0x10
c000792a:	85 db                	test   ebx,ebx
c000792c:	0f 84 32 01 00 00    	je     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007932:	56                   	push   esi
c0007933:	56                   	push   esi
c0007934:	6a 01                	push   0x1
c0007936:	53                   	push   ebx
c0007937:	e8 6a 08 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c000793c:	83 c4 10             	add    esp,0x10
c000793f:	85 c0                	test   eax,eax
c0007941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007943:	74 09                	je     c000794e <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007945:	83 ec 0c             	sub    esp,0xc
c0007948:	53                   	push   ebx
c0007949:	e9 10 01 00 00       	jmp    c0007a5e <KeDereferenceSymlink(char const*, char*)+0x17b>
c000794e:	83 ec 0c             	sub    esp,0xc
c0007951:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007955:	56                   	push   esi
c0007956:	8d 54 24 37          	lea    edx,[esp+0x37]
c000795a:	52                   	push   edx
c000795b:	6a 00                	push   0x0
c000795d:	6a 08                	push   0x8
c000795f:	53                   	push   ebx
c0007960:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007963:	83 c4 20             	add    esp,0x20
c0007966:	85 c0                	test   eax,eax
c0007968:	0f 85 e2 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000796e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007973:	0f 85 d7 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007979:	83 ec 0c             	sub    esp,0xc
c000797c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000797e:	56                   	push   esi
c000797f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007983:	52                   	push   edx
c0007984:	6a 00                	push   0x0
c0007986:	6a 08                	push   0x8
c0007988:	53                   	push   ebx
c0007989:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000798c:	83 c4 20             	add    esp,0x20
c000798f:	85 c0                	test   eax,eax
c0007991:	0f 85 b9 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007997:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000799c:	0f 85 ae 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079a2:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079a6:	0f 85 53 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079ac:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079b0:	0f 85 49 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079be:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079c6:	51                   	push   ecx
c00079c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079cb:	50                   	push   eax
c00079cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079d0:	50                   	push   eax
c00079d1:	53                   	push   ebx
c00079d2:	e8 d1 0a 00 00       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079df:	75 6f                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079e5:	31 c9                	xor    ecx,ecx
c00079e7:	bf 0f 00 00 00       	mov    edi,0xf
c00079ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079f0:	39 c7                	cmp    edi,eax
c00079f2:	89 cf                	mov    edi,ecx
c00079f4:	19 d7                	sbb    edi,edx
c00079f6:	73 58                	jae    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f8:	83 c0 f0             	add    eax,0xfffffff0
c00079fb:	bf ff 00 00 00       	mov    edi,0xff
c0007a00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a04:	83 d2 ff             	adc    edx,0xffffffff
c0007a07:	39 c7                	cmp    edi,eax
c0007a09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a0d:	19 d1                	sbb    ecx,edx
c0007a0f:	72 53                	jb     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a11:	40                   	inc    eax
c0007a12:	52                   	push   edx
c0007a13:	50                   	push   eax
c0007a14:	6a 00                	push   0x0
c0007a16:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a1a:	e8 d1 8a ff ff       	call   c00004f0 <memset>
c0007a1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a21:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a30:	53                   	push   ebx
c0007a31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	75 15                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a3f:	89 c7                	mov    edi,eax
c0007a41:	c1 ff 1f             	sar    edi,0x1f
c0007a44:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a48:	75 06                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a4a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a4e:	74 19                	je     c0007a69 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a50:	83 ec 0c             	sub    esp,0xc
c0007a53:	53                   	push   ebx
c0007a54:	e8 ab 07 00 00       	call   c0008204 <File::close()>
c0007a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a61:	83 c4 10             	add    esp,0x10
c0007a64:	83 c8 ff             	or     eax,0xffffffff
c0007a67:	eb 19                	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a69:	83 ec 0c             	sub    esp,0xc
c0007a6c:	53                   	push   ebx
c0007a6d:	e8 92 07 00 00       	call   c0008204 <File::close()>
c0007a72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a7a:	83 c4 10             	add    esp,0x10
c0007a7d:	b8 01 00 00 00       	mov    eax,0x1
c0007a82:	83 c4 3c             	add    esp,0x3c
c0007a85:	5b                   	pop    ebx
c0007a86:	5e                   	pop    esi
c0007a87:	5f                   	pop    edi
c0007a88:	5d                   	pop    ebp
c0007a89:	c3                   	ret    

c0007a8a <KeCreateSymlink(char const*, char const*)>:
c0007a8a:	55                   	push   ebp
c0007a8b:	57                   	push   edi
c0007a8c:	56                   	push   esi
c0007a8d:	53                   	push   ebx
c0007a8e:	83 ec 38             	sub    esp,0x38
c0007a91:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a95:	68 14 01 00 00       	push   0x114
c0007a9a:	e8 0d 7f 00 00       	call   c000f9ac <malloc>
c0007a9f:	6a 00                	push   0x0
c0007aa1:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007aa7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007aab:	89 c3                	mov    ebx,eax
c0007aad:	50                   	push   eax
c0007aae:	e8 d7 05 00 00       	call   c000808a <File::File(char const*, Process*, bool)>
c0007ab3:	83 c4 20             	add    esp,0x20
c0007ab6:	85 db                	test   ebx,ebx
c0007ab8:	b8 01 00 00 00       	mov    eax,0x1
c0007abd:	0f 84 fb 00 00 00    	je     c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ac3:	52                   	push   edx
c0007ac4:	52                   	push   edx
c0007ac5:	6a 12                	push   0x12
c0007ac7:	53                   	push   ebx
c0007ac8:	e8 d9 06 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007acd:	83 c4 10             	add    esp,0x10
c0007ad0:	85 c0                	test   eax,eax
c0007ad2:	74 0b                	je     c0007adf <KeCreateSymlink(char const*, char const*)+0x55>
c0007ad4:	83 ec 0c             	sub    esp,0xc
c0007ad7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad9:	53                   	push   ebx
c0007ada:	e9 d4 00 00 00       	jmp    c0007bb3 <KeCreateSymlink(char const*, char const*)+0x129>
c0007adf:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007ae3:	be d5 33 02 c0       	mov    esi,0xc00233d5
c0007ae8:	b9 09 00 00 00       	mov    ecx,0x9
c0007aed:	fc                   	cld    
c0007aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007af0:	83 ec 0c             	sub    esp,0xc
c0007af3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007af7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af9:	56                   	push   esi
c0007afa:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007afe:	52                   	push   edx
c0007aff:	6a 00                	push   0x0
c0007b01:	6a 08                	push   0x8
c0007b03:	53                   	push   ebx
c0007b04:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b07:	83 c4 20             	add    esp,0x20
c0007b0a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b0f:	0f 85 90 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b15:	85 c0                	test   eax,eax
c0007b17:	0f 85 88 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1d:	e8 07 fa ff ff       	call   c0007529 <KiCreateSymlinkID()>
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b2f:	56                   	push   esi
c0007b30:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b34:	52                   	push   edx
c0007b35:	6a 00                	push   0x0
c0007b37:	6a 08                	push   0x8
c0007b39:	53                   	push   ebx
c0007b3a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b3d:	83 c4 20             	add    esp,0x20
c0007b40:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b45:	75 5e                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b47:	85 c0                	test   eax,eax
c0007b49:	75 5a                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b4d:	83 ec 0c             	sub    esp,0xc
c0007b50:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b53:	55                   	push   ebp
c0007b54:	e8 27 8a ff ff       	call   c0000580 <strlen>
c0007b59:	31 d2                	xor    edx,edx
c0007b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b5e:	55                   	push   ebp
c0007b5f:	52                   	push   edx
c0007b60:	50                   	push   eax
c0007b61:	53                   	push   ebx
c0007b62:	ff d7                	call   edi
c0007b64:	83 c4 14             	add    esp,0x14
c0007b67:	55                   	push   ebp
c0007b68:	89 c6                	mov    esi,eax
c0007b6a:	e8 11 8a ff ff       	call   c0000580 <strlen>
c0007b6f:	83 c4 10             	add    esp,0x10
c0007b72:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b76:	75 2d                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b78:	85 f6                	test   esi,esi
c0007b7a:	75 29                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b7c:	50                   	push   eax
c0007b7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b85:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b89:	e8 06 fa ff ff       	call   c0007594 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b91:	e8 6e 06 00 00       	call   c0008204 <File::close()>
c0007b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b9e:	83 c4 10             	add    esp,0x10
c0007ba1:	31 c0                	xor    eax,eax
c0007ba3:	eb 19                	jmp    c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ba5:	83 ec 0c             	sub    esp,0xc
c0007ba8:	53                   	push   ebx
c0007ba9:	e8 56 06 00 00       	call   c0008204 <File::close()>
c0007bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb6:	83 c4 10             	add    esp,0x10
c0007bb9:	b8 01 00 00 00       	mov    eax,0x1
c0007bbe:	83 c4 2c             	add    esp,0x2c
c0007bc1:	5b                   	pop    ebx
c0007bc2:	5e                   	pop    esi
c0007bc3:	5f                   	pop    edi
c0007bc4:	5d                   	pop    ebp
c0007bc5:	c3                   	ret    

c0007bc6 <File::read(unsigned long long, void*, int*)>:
c0007bc6:	53                   	push   ebx
c0007bc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd6:	83 f8 19             	cmp    eax,0x19
c0007bd9:	77 35                	ja     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bdb:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007be2:	85 c0                	test   eax,eax
c0007be4:	74 2a                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007be6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007bec:	85 c0                	test   eax,eax
c0007bee:	74 20                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf4:	74 21                	je     c0007c17 <File::read(unsigned long long, void*, int*)+0x51>
c0007bf6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bfc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c0a:	5b                   	pop    ebx
c0007c0b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c0e:	ff e0                	jmp    eax
c0007c10:	b8 0b 00 00 00       	mov    eax,0xb
c0007c15:	eb 05                	jmp    c0007c1c <File::read(unsigned long long, void*, int*)+0x56>
c0007c17:	b8 05 00 00 00       	mov    eax,0x5
c0007c1c:	5b                   	pop    ebx
c0007c1d:	c3                   	ret    

c0007c1e <File::write(unsigned long long, void*, int*)>:
c0007c1e:	53                   	push   ebx
c0007c1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2e:	83 f8 19             	cmp    eax,0x19
c0007c31:	77 35                	ja     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c33:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c3a:	85 c0                	test   eax,eax
c0007c3c:	74 2a                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c3e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c44:	85 c0                	test   eax,eax
c0007c46:	74 20                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c4c:	74 21                	je     c0007c6f <File::write(unsigned long long, void*, int*)+0x51>
c0007c4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c54:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c62:	5b                   	pop    ebx
c0007c63:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c66:	ff e0                	jmp    eax
c0007c68:	b8 0b 00 00 00       	mov    eax,0xb
c0007c6d:	eb 05                	jmp    c0007c74 <File::write(unsigned long long, void*, int*)+0x56>
c0007c6f:	b8 05 00 00 00       	mov    eax,0x5
c0007c74:	5b                   	pop    ebx
c0007c75:	c3                   	ret    

c0007c76 <Directory::read(unsigned long long, void*, int*)>:
c0007c76:	53                   	push   ebx
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c86:	83 f8 19             	cmp    eax,0x19
c0007c89:	77 35                	ja     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c8b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c92:	85 c0                	test   eax,eax
c0007c94:	74 2a                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c96:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c9c:	85 c0                	test   eax,eax
c0007c9e:	74 20                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007ca4:	74 21                	je     c0007cc7 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007ca6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007ca8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cba:	5b                   	pop    ebx
c0007cbb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cbe:	ff e0                	jmp    eax
c0007cc0:	b8 0b 00 00 00       	mov    eax,0xb
c0007cc5:	eb 05                	jmp    c0007ccc <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cc7:	b8 05 00 00 00       	mov    eax,0x5
c0007ccc:	5b                   	pop    ebx
c0007ccd:	c3                   	ret    

c0007cce <Directory::write(unsigned long long, void*, int*)>:
c0007cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cd9:	b8 0b 00 00 00       	mov    eax,0xb
c0007cde:	83 fa 19             	cmp    edx,0x19
c0007ce1:	77 18                	ja     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ce3:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007cea:	85 d2                	test   edx,edx
c0007cec:	74 0d                	je     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cee:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cf5:	19 c0                	sbb    eax,eax
c0007cf7:	83 e0 0a             	and    eax,0xa
c0007cfa:	40                   	inc    eax
c0007cfb:	c3                   	ret    

c0007cfc <File::isAtty()>:
c0007cfc:	31 c0                	xor    eax,eax
c0007cfe:	c3                   	ret    
c0007cff:	90                   	nop

c0007d00 <Directory::isAtty()>:
c0007d00:	31 c0                	xor    eax,eax
c0007d02:	c3                   	ret    
c0007d03:	90                   	nop

c0007d04 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d04:	b8 0a 00 00 00       	mov    eax,0xa
c0007d09:	c3                   	ret    

c0007d0a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d0a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d0f:	c3                   	ret    

c0007d10 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d10:	31 c0                	xor    eax,eax
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <File::~File()>:
c0007d16:	83 ec 0c             	sub    esp,0xc
c0007d19:	ba ac 34 02 c0       	mov    edx,0xc00234ac
c0007d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d22:	89 10                	mov    DWORD PTR [eax],edx
c0007d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d28:	83 ec 0c             	sub    esp,0xc
c0007d2b:	50                   	push   eax
c0007d2c:	e8 59 b4 00 00       	call   c001318a <UnixFile::~UnixFile()>
c0007d31:	83 c4 10             	add    esp,0x10
c0007d34:	90                   	nop
c0007d35:	83 c4 0c             	add    esp,0xc
c0007d38:	c3                   	ret    
c0007d39:	90                   	nop

c0007d3a <File::~File()>:
c0007d3a:	83 ec 0c             	sub    esp,0xc
c0007d3d:	83 ec 0c             	sub    esp,0xc
c0007d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d44:	e8 cd ff ff ff       	call   c0007d16 <File::~File()>
c0007d49:	83 c4 10             	add    esp,0x10
c0007d4c:	83 ec 08             	sub    esp,0x8
c0007d4f:	68 14 01 00 00       	push   0x114
c0007d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d58:	e8 98 55 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0007d5d:	83 c4 10             	add    esp,0x10
c0007d60:	83 c4 0c             	add    esp,0xc
c0007d63:	c3                   	ret    

c0007d64 <Directory::~Directory()>:
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	ba c8 34 02 c0       	mov    edx,0xc00234c8
c0007d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d70:	89 10                	mov    DWORD PTR [eax],edx
c0007d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d76:	83 ec 0c             	sub    esp,0xc
c0007d79:	50                   	push   eax
c0007d7a:	e8 0b b4 00 00       	call   c001318a <UnixFile::~UnixFile()>
c0007d7f:	83 c4 10             	add    esp,0x10
c0007d82:	90                   	nop
c0007d83:	83 c4 0c             	add    esp,0xc
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Directory::~Directory()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	83 ec 0c             	sub    esp,0xc
c0007d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d92:	e8 cd ff ff ff       	call   c0007d64 <Directory::~Directory()>
c0007d97:	83 c4 10             	add    esp,0x10
c0007d9a:	83 ec 08             	sub    esp,0x8
c0007d9d:	68 14 01 00 00       	push   0x114
c0007da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da6:	e8 4a 55 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 0c             	add    esp,0xc
c0007db1:	c3                   	ret    

c0007db2 <Filesystem::Filesystem()>:
c0007db2:	ba 40 34 02 c0       	mov    edx,0xc0023440
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 10                	mov    DWORD PTR [eax],edx
c0007dbd:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dce:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007dd3:	90                   	nop
c0007dd4:	c3                   	ret    
c0007dd5:	90                   	nop

c0007dd6 <Filesystem::~Filesystem()>:
c0007dd6:	ba 40 34 02 c0       	mov    edx,0xc0023440
c0007ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddf:	89 10                	mov    DWORD PTR [eax],edx
c0007de1:	90                   	nop
c0007de2:	c3                   	ret    
c0007de3:	90                   	nop

c0007de4 <Filesystem::~Filesystem()>:
c0007de4:	83 ec 0c             	sub    esp,0xc
c0007de7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007deb:	e8 e6 ff ff ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c0007df0:	83 c4 04             	add    esp,0x4
c0007df3:	83 ec 08             	sub    esp,0x8
c0007df6:	6a 08                	push   0x8
c0007df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dfc:	e8 f4 54 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0007e01:	83 c4 10             	add    esp,0x10
c0007e04:	83 c4 0c             	add    esp,0xc
c0007e07:	c3                   	ret    

c0007e08 <Fs::getcwd(Process*, char*, int)>:
c0007e08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e0c:	31 c0                	xor    eax,eax
c0007e0e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e12:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e15:	7d 15                	jge    c0007e2c <Fs::getcwd(Process*, char*, int)+0x24>
c0007e17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e1b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e22:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e25:	84 c9                	test   cl,cl
c0007e27:	74 06                	je     c0007e2f <Fs::getcwd(Process*, char*, int)+0x27>
c0007e29:	40                   	inc    eax
c0007e2a:	eb e2                	jmp    c0007e0e <Fs::getcwd(Process*, char*, int)+0x6>
c0007e2c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e2f:	31 c0                	xor    eax,eax
c0007e31:	c3                   	ret    

c0007e32 <Fs::initVFS()>:
c0007e32:	83 ec 18             	sub    esp,0x18
c0007e35:	6a 08                	push   0x8
c0007e37:	e8 70 7b 00 00       	call   c000f9ac <malloc>
c0007e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e3f:	e8 5c 47 01 00       	call   c001c5a0 <FAT::FAT()>
c0007e44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e4b:	e8 5c 7b 00 00       	call   c000f9ac <malloc>
c0007e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e53:	e8 76 56 01 00       	call   c001d4ce <ISO9660::ISO9660()>
c0007e58:	83 c4 1c             	add    esp,0x1c
c0007e5b:	c3                   	ret    

c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e5c:	55                   	push   ebp
c0007e5d:	57                   	push   edi
c0007e5e:	56                   	push   esi
c0007e5f:	53                   	push   ebx
c0007e60:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e66:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e6d:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e74:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e7b:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e82:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e86:	68 00 04 00 00       	push   0x400
c0007e8b:	6a 00                	push   0x0
c0007e8d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e91:	57                   	push   edi
c0007e92:	e8 59 86 ff ff       	call   c00004f0 <memset>
c0007e97:	83 c4 10             	add    esp,0x10
c0007e9a:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e9e:	75 0b                	jne    c0007eab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007ea0:	50                   	push   eax
c0007ea1:	50                   	push   eax
c0007ea2:	56                   	push   esi
c0007ea3:	57                   	push   edi
c0007ea4:	e8 a7 87 ff ff       	call   c0000650 <strcpy>
c0007ea9:	eb 45                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007eab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007eae:	83 f8 2f             	cmp    eax,0x2f
c0007eb1:	74 05                	je     c0007eb8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007eb3:	83 f8 5c             	cmp    eax,0x5c
c0007eb6:	75 19                	jne    c0007ed1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007eb8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007ebb:	3c 60                	cmp    al,0x60
c0007ebd:	7e 03                	jle    c0007ec2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007ebf:	83 e8 20             	sub    eax,0x20
c0007ec2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ec6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007ecd:	50                   	push   eax
c0007ece:	50                   	push   eax
c0007ecf:	eb 18                	jmp    c0007ee9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007ed1:	50                   	push   eax
c0007ed2:	50                   	push   eax
c0007ed3:	55                   	push   ebp
c0007ed4:	57                   	push   edi
c0007ed5:	e8 76 87 ff ff       	call   c0000650 <strcpy>
c0007eda:	58                   	pop    eax
c0007edb:	5a                   	pop    edx
c0007edc:	68 bd 4e 02 c0       	push   0xc0024ebd
c0007ee1:	57                   	push   edi
c0007ee2:	e8 89 89 ff ff       	call   c0000870 <strcat>
c0007ee7:	59                   	pop    ecx
c0007ee8:	5d                   	pop    ebp
c0007ee9:	56                   	push   esi
c0007eea:	57                   	push   edi
c0007eeb:	e8 80 89 ff ff       	call   c0000870 <strcat>
c0007ef0:	83 c4 10             	add    esp,0x10
c0007ef3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007ef7:	3c 60                	cmp    al,0x60
c0007ef9:	7e 03                	jle    c0007efe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007efb:	83 e8 20             	sub    eax,0x20
c0007efe:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007f02:	be 03 00 00 00       	mov    esi,0x3
c0007f07:	88 03                	mov    BYTE PTR [ebx],al
c0007f09:	b8 03 00 00 00       	mov    eax,0x3
c0007f0e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007f15:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007f1b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007f1f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007f24:	89 fa                	mov    edx,edi
c0007f26:	0f be ea             	movsx  ebp,dl
c0007f29:	85 ed                	test   ebp,ebp
c0007f2b:	0f 84 a1 00 00 00    	je     c0007fd2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007f31:	8d 56 01             	lea    edx,[esi+0x1]
c0007f34:	83 fd 2f             	cmp    ebp,0x2f
c0007f37:	74 05                	je     c0007f3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007f39:	83 fd 5c             	cmp    ebp,0x5c
c0007f3c:	75 12                	jne    c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f3e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f43:	89 c5                	mov    ebp,eax
c0007f45:	74 09                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f47:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007f4b:	40                   	inc    eax
c0007f4c:	89 d6                	mov    esi,edx
c0007f4e:	eb cf                	jmp    c0007f1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f50:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007f55:	89 f9                	mov    ecx,edi
c0007f57:	0f be e9             	movsx  ebp,cl
c0007f5a:	75 61                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f5c:	83 fd 2e             	cmp    ebp,0x2e
c0007f5f:	75 5c                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f61:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f66:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f6b:	74 19                	je     c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f6d:	83 fd 2e             	cmp    ebp,0x2e
c0007f70:	74 55                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f72:	89 f2                	mov    edx,esi
c0007f74:	42                   	inc    edx
c0007f75:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f7a:	83 f9 2f             	cmp    ecx,0x2f
c0007f7d:	74 f5                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f7f:	83 f9 5c             	cmp    ecx,0x5c
c0007f82:	74 f0                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f84:	eb c6                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f86:	83 fd 2e             	cmp    ebp,0x2e
c0007f89:	74 3c                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f8b:	83 f8 03             	cmp    eax,0x3
c0007f8e:	74 bc                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f90:	42                   	inc    edx
c0007f91:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f96:	83 f9 2f             	cmp    ecx,0x2f
c0007f99:	74 f5                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f9b:	83 f9 5c             	cmp    ecx,0x5c
c0007f9e:	74 f0                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007fa0:	48                   	dec    eax
c0007fa1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fa5:	75 06                	jne    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fa7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fab:	eb f3                	jmp    c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007fad:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fb1:	74 07                	je     c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007fb3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fb7:	48                   	dec    eax
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fba:	40                   	inc    eax
c0007fbb:	eb 8f                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fbd:	83 fd 2f             	cmp    ebp,0x2f
c0007fc0:	74 8a                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc2:	83 fd 5c             	cmp    ebp,0x5c
c0007fc5:	74 85                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc7:	89 f9                	mov    ecx,edi
c0007fc9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007fcc:	40                   	inc    eax
c0007fcd:	e9 7a ff ff ff       	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fd6:	83 ec 0c             	sub    esp,0xc
c0007fd9:	53                   	push   ebx
c0007fda:	e8 a1 85 ff ff       	call   c0000580 <strlen>
c0007fdf:	83 c4 10             	add    esp,0x10
c0007fe2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007fe7:	74 1c                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fe9:	83 ec 0c             	sub    esp,0xc
c0007fec:	53                   	push   ebx
c0007fed:	e8 8e 85 ff ff       	call   c0000580 <strlen>
c0007ff2:	83 c4 10             	add    esp,0x10
c0007ff5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ffa:	74 09                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007ffc:	31 ff                	xor    edi,edi
c0007ffe:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0008003:	eb 5c                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008005:	83 ec 0c             	sub    esp,0xc
c0008008:	53                   	push   ebx
c0008009:	e8 72 85 ff ff       	call   c0000580 <strlen>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008016:	74 e4                	je     c0007ffc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008018:	83 ec 0c             	sub    esp,0xc
c000801b:	53                   	push   ebx
c000801c:	e8 5f 85 ff ff       	call   c0000580 <strlen>
c0008021:	83 c4 10             	add    esp,0x10
c0008024:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008029:	eb ab                	jmp    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000802b:	52                   	push   edx
c000802c:	52                   	push   edx
c000802d:	53                   	push   ebx
c000802e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0008032:	55                   	push   ebp
c0008033:	e8 18 86 ff ff       	call   c0000650 <strcpy>
c0008038:	59                   	pop    ecx
c0008039:	58                   	pop    eax
c000803a:	53                   	push   ebx
c000803b:	55                   	push   ebp
c000803c:	e8 a2 f8 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0008041:	83 c4 10             	add    esp,0x10
c0008044:	48                   	dec    eax
c0008045:	75 37                	jne    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008047:	50                   	push   eax
c0008048:	53                   	push   ebx
c0008049:	55                   	push   ebp
c000804a:	68 de 33 02 c0       	push   0xc00233de
c000804f:	e8 12 ef ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008054:	8d 47 01             	lea    eax,[edi+0x1]
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	83 ff 14             	cmp    edi,0x14
c000805d:	74 08                	je     c0008067 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000805f:	89 c7                	mov    edi,eax
c0008061:	85 f6                	test   esi,esi
c0008063:	75 c6                	jne    c000802b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008065:	eb 17                	jmp    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008067:	83 ec 0c             	sub    esp,0xc
c000806a:	bf 15 00 00 00       	mov    edi,0x15
c000806f:	68 f9 33 02 c0       	push   0xc00233f9
c0008074:	e8 89 7d 00 00       	call   c000fe02 <KePanic(char const*)>
c0008079:	83 c4 10             	add    esp,0x10
c000807c:	eb e3                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000807e:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008084:	5b                   	pop    ebx
c0008085:	5e                   	pop    esi
c0008086:	5f                   	pop    edi
c0008087:	5d                   	pop    ebp
c0008088:	c3                   	ret    
c0008089:	90                   	nop

c000808a <File::File(char const*, Process*, bool)>:
c000808a:	83 ec 1c             	sub    esp,0x1c
c000808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008091:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008099:	83 ec 08             	sub    esp,0x8
c000809c:	6a 00                	push   0x0
c000809e:	50                   	push   eax
c000809f:	e8 00 af 00 00       	call   c0012fa4 <UnixFile::UnixFile(int)>
c00080a4:	83 c4 10             	add    esp,0x10
c00080a7:	ba ac 34 02 c0       	mov    edx,0xc00234ac
c00080ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b0:	89 10                	mov    DWORD PTR [eax],edx
c00080b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b7:	85 c0                	test   eax,eax
c00080b9:	74 0f                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080bb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00080c0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c4:	74 04                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080c6:	b0 01                	mov    al,0x1
c00080c8:	eb 02                	jmp    c00080cc <File::File(char const*, Process*, bool)+0x42>
c00080ca:	b0 00                	mov    al,0x0
c00080cc:	0f b6 c0             	movzx  eax,al
c00080cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080dd:	83 c2 0d             	add    edx,0xd
c00080e0:	50                   	push   eax
c00080e1:	51                   	push   ecx
c00080e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e6:	52                   	push   edx
c00080e7:	e8 70 fd ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ec:	83 c4 10             	add    esp,0x10
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fa:	83 c2 0d             	add    edx,0xd
c00080fd:	83 ec 04             	sub    esp,0x4
c0008100:	50                   	push   eax
c0008101:	52                   	push   edx
c0008102:	68 1f 34 02 c0       	push   0xc002341f
c0008107:	e8 5a ee ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008113:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008116:	83 e8 41             	sub    eax,0x41
c0008119:	88 c2                	mov    dl,al
c000811b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000811f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008129:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008131:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008141:	85 c0                	test   eax,eax
c0008143:	74 3e                	je     c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008149:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000814f:	0f b6 c0             	movzx  eax,al
c0008152:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008159:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000815f:	85 c0                	test   eax,eax
c0008161:	75 20                	jne    c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008167:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816d:	0f b6 c0             	movzx  eax,al
c0008170:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008177:	83 ec 0c             	sub    esp,0xc
c000817a:	50                   	push   eax
c000817b:	e8 0a 28 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	90                   	nop
c0008184:	83 c4 1c             	add    esp,0x1c
c0008187:	c3                   	ret    

c0008188 <File::File(char const*, Process*)>:
c0008188:	83 ec 0c             	sub    esp,0xc
c000818b:	6a 01                	push   0x1
c000818d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 ec fe ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <File::open(FileOpenMode)>:
c00081a6:	53                   	push   ebx
c00081a7:	b8 0b 00 00 00       	mov    eax,0xb
c00081ac:	83 ec 08             	sub    esp,0x8
c00081af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081ba:	83 fa 19             	cmp    edx,0x19
c00081bd:	77 40                	ja     c00081ff <File::open(FileOpenMode)+0x59>
c00081bf:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00081c6:	85 d2                	test   edx,edx
c00081c8:	74 35                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081ca:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d0:	85 d2                	test   edx,edx
c00081d2:	74 2b                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081d4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081d8:	b8 06 00 00 00       	mov    eax,0x6
c00081dd:	75 20                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081df:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081eb:	51                   	push   ecx
c00081ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081ef:	51                   	push   ecx
c00081f0:	52                   	push   edx
c00081f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	85 c0                	test   eax,eax
c00081f9:	75 04                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081ff:	83 c4 08             	add    esp,0x8
c0008202:	5b                   	pop    ebx
c0008203:	c3                   	ret    

c0008204 <File::close()>:
c0008204:	53                   	push   ebx
c0008205:	b8 0b 00 00 00       	mov    eax,0xb
c000820a:	83 ec 08             	sub    esp,0x8
c000820d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008211:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008218:	83 f9 19             	cmp    ecx,0x19
c000821b:	77 41                	ja     c000825e <File::close()+0x5a>
c000821d:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008224:	85 db                	test   ebx,ebx
c0008226:	74 36                	je     c000825e <File::close()+0x5a>
c0008228:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000822f:	74 2d                	je     c000825e <File::close()+0x5a>
c0008231:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008235:	b8 05 00 00 00       	mov    eax,0x5
c000823a:	74 22                	je     c000825e <File::close()+0x5a>
c000823c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008240:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008247:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824d:	53                   	push   ebx
c000824e:	53                   	push   ebx
c000824f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008251:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008257:	50                   	push   eax
c0008258:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	83 c4 08             	add    esp,0x8
c0008261:	5b                   	pop    ebx
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::seek(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	b8 0b 00 00 00       	mov    eax,0xb
c000826a:	53                   	push   ebx
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008278:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::seek(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c0008299:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000829d:	b8 05 00 00 00       	mov    eax,0x5
c00082a2:	74 11                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::truncate(unsigned long long)>:
c00082ba:	56                   	push   esi
c00082bb:	b8 0b 00 00 00       	mov    eax,0xb
c00082c0:	53                   	push   ebx
c00082c1:	51                   	push   ecx
c00082c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d5:	83 fa 19             	cmp    edx,0x19
c00082d8:	77 31                	ja     c000830b <File::truncate(unsigned long long)+0x51>
c00082da:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082e1:	85 d2                	test   edx,edx
c00082e3:	74 26                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082eb:	85 d2                	test   edx,edx
c00082ed:	74 1c                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082f3:	b8 05 00 00 00       	mov    eax,0x5
c00082f8:	74 11                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fc:	53                   	push   ebx
c00082fd:	51                   	push   ecx
c00082fe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008304:	52                   	push   edx
c0008305:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	5a                   	pop    edx
c000830c:	5b                   	pop    ebx
c000830d:	5e                   	pop    esi
c000830e:	c3                   	ret    
c000830f:	90                   	nop

c0008310 <File::tell(unsigned long long*)>:
c0008310:	83 ec 0c             	sub    esp,0xc
c0008313:	b8 0b 00 00 00       	mov    eax,0xb
c0008318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008323:	83 fa 19             	cmp    edx,0x19
c0008326:	77 34                	ja     c000835c <File::tell(unsigned long long*)+0x4c>
c0008328:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000832f:	85 d2                	test   edx,edx
c0008331:	74 29                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008333:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008339:	85 d2                	test   edx,edx
c000833b:	74 1f                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c000833d:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008341:	b8 05 00 00 00       	mov    eax,0x5
c0008346:	74 14                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008348:	50                   	push   eax
c0008349:	8b 02                	mov    eax,DWORD PTR [edx]
c000834b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000834f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008355:	52                   	push   edx
c0008356:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008359:	83 c4 10             	add    esp,0x10
c000835c:	83 c4 0c             	add    esp,0xc
c000835f:	c3                   	ret    

c0008360 <File::rewind()>:
c0008360:	83 ec 10             	sub    esp,0x10
c0008363:	6a 00                	push   0x0
c0008365:	6a 00                	push   0x0
c0008367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836b:	e8 f4 fe ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0008370:	83 c4 1c             	add    esp,0x1c
c0008373:	c3                   	ret    

c0008374 <File::unlink()>:
c0008374:	83 ec 0c             	sub    esp,0xc
c0008377:	b8 0b 00 00 00       	mov    eax,0xb
c000837c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008380:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008387:	83 f9 19             	cmp    ecx,0x19
c000838a:	77 2f                	ja     c00083bb <File::unlink()+0x47>
c000838c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 24                	je     c00083bb <File::unlink()+0x47>
c0008397:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839d:	85 c9                	test   ecx,ecx
c000839f:	74 1a                	je     c00083bb <File::unlink()+0x47>
c00083a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a5:	b8 06 00 00 00       	mov    eax,0x6
c00083aa:	75 0f                	jne    c00083bb <File::unlink()+0x47>
c00083ac:	50                   	push   eax
c00083ad:	83 c2 0d             	add    edx,0xd
c00083b0:	50                   	push   eax
c00083b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b3:	52                   	push   edx
c00083b4:	51                   	push   ecx
c00083b5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083b8:	83 c4 10             	add    esp,0x10
c00083bb:	83 c4 0c             	add    esp,0xc
c00083be:	c3                   	ret    
c00083bf:	90                   	nop

c00083c0 <File::rename(char const*)>:
c00083c0:	83 ec 0c             	sub    esp,0xc
c00083c3:	b8 0b 00 00 00       	mov    eax,0xb
c00083c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 32                	ja     c000840a <File::rename(char const*)+0x4a>
c00083d8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 27                	je     c000840a <File::rename(char const*)+0x4a>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 1d                	je     c000840a <File::rename(char const*)+0x4a>
c00083ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f1:	b8 06 00 00 00       	mov    eax,0x6
c00083f6:	75 12                	jne    c000840a <File::rename(char const*)+0x4a>
c00083f8:	50                   	push   eax
c00083f9:	83 c2 0d             	add    edx,0xd
c00083fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008402:	52                   	push   edx
c0008403:	51                   	push   ecx
c0008404:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008407:	83 c4 10             	add    esp,0x10
c000840a:	83 c4 0c             	add    esp,0xc
c000840d:	c3                   	ret    

c000840e <File::chfatattr(unsigned char, unsigned char)>:
c000840e:	57                   	push   edi
c000840f:	b8 0b 00 00 00       	mov    eax,0xb
c0008414:	56                   	push   esi
c0008415:	53                   	push   ebx
c0008416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000841e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008422:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008429:	83 f9 19             	cmp    ecx,0x19
c000842c:	77 37                	ja     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000842e:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008435:	85 c9                	test   ecx,ecx
c0008437:	74 2c                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008439:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843f:	85 c9                	test   ecx,ecx
c0008441:	74 22                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008443:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008447:	b8 06 00 00 00       	mov    eax,0x6
c000844c:	75 17                	jne    c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000844e:	89 f0                	mov    eax,esi
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	0f b6 db             	movzx  ebx,bl
c0008455:	0f b6 f0             	movzx  esi,al
c0008458:	83 c2 0d             	add    edx,0xd
c000845b:	56                   	push   esi
c000845c:	53                   	push   ebx
c000845d:	52                   	push   edx
c000845e:	51                   	push   ecx
c000845f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008462:	83 c4 10             	add    esp,0x10
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	c3                   	ret    
c0008469:	90                   	nop

c000846a <File::exists()>:
c000846a:	83 ec 0c             	sub    esp,0xc
c000846d:	31 c0                	xor    eax,eax
c000846f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008473:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847a:	83 f9 19             	cmp    ecx,0x19
c000847d:	77 24                	ja     c00084a3 <File::exists()+0x39>
c000847f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008486:	85 c9                	test   ecx,ecx
c0008488:	74 19                	je     c00084a3 <File::exists()+0x39>
c000848a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008490:	85 c9                	test   ecx,ecx
c0008492:	74 0f                	je     c00084a3 <File::exists()+0x39>
c0008494:	50                   	push   eax
c0008495:	83 c2 0d             	add    edx,0xd
c0008498:	50                   	push   eax
c0008499:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849b:	52                   	push   edx
c000849c:	51                   	push   ecx
c000849d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a0:	83 c4 10             	add    esp,0x10
c00084a3:	83 c4 0c             	add    esp,0xc
c00084a6:	c3                   	ret    
c00084a7:	90                   	nop

c00084a8 <File::stat(unsigned long long*, bool*)>:
c00084a8:	56                   	push   esi
c00084a9:	53                   	push   ebx
c00084aa:	50                   	push   eax
c00084ab:	b8 0b 00 00 00       	mov    eax,0xb
c00084b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c3:	83 f9 19             	cmp    ecx,0x19
c00084c6:	77 3d                	ja     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084c8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00084cf:	85 c9                	test   ecx,ecx
c00084d1:	74 32                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084d9:	85 c9                	test   ecx,ecx
c00084db:	74 28                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e3:	74 13                	je     c00084f8 <File::stat(unsigned long long*, bool*)+0x50>
c00084e5:	83 ec 04             	sub    esp,0x4
c00084e8:	56                   	push   esi
c00084e9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084ef:	51                   	push   ecx
c00084f0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f6:	eb 0a                	jmp    c0008502 <File::stat(unsigned long long*, bool*)+0x5a>
c00084f8:	53                   	push   ebx
c00084f9:	83 c2 0d             	add    edx,0xd
c00084fc:	56                   	push   esi
c00084fd:	52                   	push   edx
c00084fe:	51                   	push   ecx
c00084ff:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	5a                   	pop    edx
c0008506:	5b                   	pop    ebx
c0008507:	5e                   	pop    esi
c0008508:	c3                   	ret    

c0008509 <Fs::setcwd(Process*, char*)>:
c0008509:	55                   	push   ebp
c000850a:	57                   	push   edi
c000850b:	56                   	push   esi
c000850c:	53                   	push   ebx
c000850d:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008513:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851a:	6a 00                	push   0x0
c000851c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008522:	57                   	push   edi
c0008523:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000852e:	56                   	push   esi
c000852f:	e8 28 f9 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008534:	89 34 24             	mov    DWORD PTR [esp],esi
c0008537:	e8 44 80 ff ff       	call   c0000580 <strlen>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	83 f8 02             	cmp    eax,0x2
c0008542:	77 15                	ja     c0008559 <Fs::setcwd(Process*, char*)+0x50>
c0008544:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008549:	83 eb 41             	sub    ebx,0x41
c000854c:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c0008553:	85 c0                	test   eax,eax
c0008555:	75 1c                	jne    c0008573 <Fs::setcwd(Process*, char*)+0x6a>
c0008557:	eb 2f                	jmp    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c0008559:	83 ec 0c             	sub    esp,0xc
c000855c:	56                   	push   esi
c000855d:	e8 1e 80 ff ff       	call   c0000580 <strlen>
c0008562:	83 c4 10             	add    esp,0x10
c0008565:	83 f8 03             	cmp    eax,0x3
c0008568:	75 57                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c000856a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000856f:	75 50                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c0008571:	eb d1                	jmp    c0008544 <Fs::setcwd(Process*, char*)+0x3b>
c0008573:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857a:	75 0c                	jne    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c000857c:	83 ec 0c             	sub    esp,0xc
c000857f:	50                   	push   eax
c0008580:	e8 05 24 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	83 fb 19             	cmp    ebx,0x19
c000858b:	b8 03 00 00 00       	mov    eax,0x3
c0008590:	0f 87 c6 00 00 00    	ja     c000865c <Fs::setcwd(Process*, char*)+0x153>
c0008596:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c000859d:	b8 05 00 00 00       	mov    eax,0x5
c00085a2:	85 d2                	test   edx,edx
c00085a4:	0f 84 b2 00 00 00    	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085aa:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b1:	b8 06 00 00 00       	mov    eax,0x6
c00085b6:	0f 85 92 00 00 00    	jne    c000864e <Fs::setcwd(Process*, char*)+0x145>
c00085bc:	e9 9b 00 00 00       	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085c1:	83 ec 0c             	sub    esp,0xc
c00085c4:	68 14 01 00 00       	push   0x114
c00085c9:	e8 de 73 00 00       	call   c000f9ac <malloc>
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	55                   	push   ebp
c00085d2:	56                   	push   esi
c00085d3:	50                   	push   eax
c00085d4:	89 c3                	mov    ebx,eax
c00085d6:	e8 ad fb ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00085db:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e0:	83 c4 0c             	add    esp,0xc
c00085e3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e7:	50                   	push   eax
c00085e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ec:	50                   	push   eax
c00085ed:	53                   	push   ebx
c00085ee:	e8 b5 fe ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00085f3:	83 c4 10             	add    esp,0x10
c00085f6:	83 f8 02             	cmp    eax,0x2
c00085f9:	74 27                	je     c0008622 <Fs::setcwd(Process*, char*)+0x119>
c00085fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008600:	75 1c                	jne    c000861e <Fs::setcwd(Process*, char*)+0x115>
c0008602:	85 db                	test   ebx,ebx
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	74 51                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000860b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	53                   	push   ebx
c0008611:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008614:	83 c4 10             	add    esp,0x10
c0008617:	b8 02 00 00 00       	mov    eax,0x2
c000861c:	eb 3e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000861e:	85 c0                	test   eax,eax
c0008620:	74 1c                	je     c000863e <Fs::setcwd(Process*, char*)+0x135>
c0008622:	85 db                	test   ebx,ebx
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	74 31                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000862b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	53                   	push   ebx
c0008631:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008634:	83 c4 10             	add    esp,0x10
c0008637:	b8 01 00 00 00       	mov    eax,0x1
c000863c:	eb 1e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000863e:	85 db                	test   ebx,ebx
c0008640:	74 0c                	je     c000864e <Fs::setcwd(Process*, char*)+0x145>
c0008642:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	53                   	push   ebx
c0008648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	50                   	push   eax
c000864f:	50                   	push   eax
c0008650:	56                   	push   esi
c0008651:	57                   	push   edi
c0008652:	e8 f9 7f ff ff       	call   c0000650 <strcpy>
c0008657:	83 c4 10             	add    esp,0x10
c000865a:	31 c0                	xor    eax,eax
c000865c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008662:	5b                   	pop    ebx
c0008663:	5e                   	pop    esi
c0008664:	5f                   	pop    edi
c0008665:	5d                   	pop    ebp
c0008666:	c3                   	ret    
c0008667:	90                   	nop

c0008668 <Directory::Directory(char const*, Process*)>:
c0008668:	83 ec 0c             	sub    esp,0xc
c000866b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866f:	83 ec 08             	sub    esp,0x8
c0008672:	6a 00                	push   0x0
c0008674:	50                   	push   eax
c0008675:	e8 2a a9 00 00       	call   c0012fa4 <UnixFile::UnixFile(int)>
c000867a:	83 c4 10             	add    esp,0x10
c000867d:	ba c8 34 02 c0       	mov    edx,0xc00234c8
c0008682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008686:	89 10                	mov    DWORD PTR [eax],edx
c0008688:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000868d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008691:	0f 95 c0             	setne  al
c0008694:	0f b6 c0             	movzx  eax,al
c0008697:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a5:	83 c2 0d             	add    edx,0xd
c00086a8:	50                   	push   eax
c00086a9:	51                   	push   ecx
c00086aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086ae:	52                   	push   edx
c00086af:	e8 a8 f7 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b4:	83 c4 10             	add    esp,0x10
c00086b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086be:	83 e8 41             	sub    eax,0x41
c00086c1:	88 c2                	mov    dl,al
c00086c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086e9:	85 c0                	test   eax,eax
c00086eb:	74 3e                	je     c000872b <Directory::Directory(char const*, Process*)+0xc3>
c00086ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f7:	0f b6 c0             	movzx  eax,al
c00086fa:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008701:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008707:	85 c0                	test   eax,eax
c0008709:	75 20                	jne    c000872b <Directory::Directory(char const*, Process*)+0xc3>
c000870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000870f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008715:	0f b6 c0             	movzx  eax,al
c0008718:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000871f:	83 ec 0c             	sub    esp,0xc
c0008722:	50                   	push   eax
c0008723:	e8 62 22 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	90                   	nop
c000872c:	83 c4 0c             	add    esp,0xc
c000872f:	c3                   	ret    

c0008730 <Directory::open()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008744:	83 fa 19             	cmp    edx,0x19
c0008747:	77 3d                	ja     c0008786 <Directory::open()+0x56>
c0008749:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008750:	85 d2                	test   edx,edx
c0008752:	74 32                	je     c0008786 <Directory::open()+0x56>
c0008754:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875a:	85 d2                	test   edx,edx
c000875c:	74 28                	je     c0008786 <Directory::open()+0x56>
c000875e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008762:	b8 06 00 00 00       	mov    eax,0x6
c0008767:	75 1d                	jne    c0008786 <Directory::open()+0x56>
c0008769:	50                   	push   eax
c000876a:	8b 02                	mov    eax,DWORD PTR [edx]
c000876c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008772:	51                   	push   ecx
c0008773:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008776:	51                   	push   ecx
c0008777:	52                   	push   edx
c0008778:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877b:	83 c4 10             	add    esp,0x10
c000877e:	85 c0                	test   eax,eax
c0008780:	75 04                	jne    c0008786 <Directory::open()+0x56>
c0008782:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008786:	83 c4 08             	add    esp,0x8
c0008789:	5b                   	pop    ebx
c000878a:	c3                   	ret    
c000878b:	90                   	nop

c000878c <Directory::close()>:
c000878c:	53                   	push   ebx
c000878d:	b8 0b 00 00 00       	mov    eax,0xb
c0008792:	83 ec 08             	sub    esp,0x8
c0008795:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008799:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a0:	83 f9 19             	cmp    ecx,0x19
c00087a3:	77 41                	ja     c00087e6 <Directory::close()+0x5a>
c00087a5:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	74 36                	je     c00087e6 <Directory::close()+0x5a>
c00087b0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b7:	74 2d                	je     c00087e6 <Directory::close()+0x5a>
c00087b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087bd:	b8 05 00 00 00       	mov    eax,0x5
c00087c2:	74 22                	je     c00087e6 <Directory::close()+0x5a>
c00087c4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087c8:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00087cf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d5:	53                   	push   ebx
c00087d6:	53                   	push   ebx
c00087d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087d9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087df:	50                   	push   eax
c00087e0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e3:	83 c4 10             	add    esp,0x10
c00087e6:	83 c4 08             	add    esp,0x8
c00087e9:	5b                   	pop    ebx
c00087ea:	c3                   	ret    
c00087eb:	90                   	nop

c00087ec <Directory::unlink()>:
c00087ec:	83 ec 0c             	sub    esp,0xc
c00087ef:	b8 0b 00 00 00       	mov    eax,0xb
c00087f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ff:	83 f9 19             	cmp    ecx,0x19
c0008802:	77 2f                	ja     c0008833 <Directory::unlink()+0x47>
c0008804:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 24                	je     c0008833 <Directory::unlink()+0x47>
c000880f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008815:	85 c9                	test   ecx,ecx
c0008817:	74 1a                	je     c0008833 <Directory::unlink()+0x47>
c0008819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000881d:	b8 06 00 00 00       	mov    eax,0x6
c0008822:	75 0f                	jne    c0008833 <Directory::unlink()+0x47>
c0008824:	50                   	push   eax
c0008825:	83 c2 0d             	add    edx,0xd
c0008828:	50                   	push   eax
c0008829:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882b:	52                   	push   edx
c000882c:	51                   	push   ecx
c000882d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008830:	83 c4 10             	add    esp,0x10
c0008833:	83 c4 0c             	add    esp,0xc
c0008836:	c3                   	ret    
c0008837:	90                   	nop

c0008838 <Directory::rename(char const*)>:
c0008838:	83 ec 0c             	sub    esp,0xc
c000883b:	b8 0b 00 00 00       	mov    eax,0xb
c0008840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008844:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884b:	83 f9 19             	cmp    ecx,0x19
c000884e:	77 32                	ja     c0008882 <Directory::rename(char const*)+0x4a>
c0008850:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008857:	85 c9                	test   ecx,ecx
c0008859:	74 27                	je     c0008882 <Directory::rename(char const*)+0x4a>
c000885b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008861:	85 c9                	test   ecx,ecx
c0008863:	74 1d                	je     c0008882 <Directory::rename(char const*)+0x4a>
c0008865:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008869:	b8 06 00 00 00       	mov    eax,0x6
c000886e:	75 12                	jne    c0008882 <Directory::rename(char const*)+0x4a>
c0008870:	50                   	push   eax
c0008871:	83 c2 0d             	add    edx,0xd
c0008874:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008876:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887a:	52                   	push   edx
c000887b:	51                   	push   ecx
c000887c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000887f:	83 c4 10             	add    esp,0x10
c0008882:	83 c4 0c             	add    esp,0xc
c0008885:	c3                   	ret    

c0008886 <Directory::exists()>:
c0008886:	83 ec 0c             	sub    esp,0xc
c0008889:	31 c0                	xor    eax,eax
c000888b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000888f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008896:	83 f9 19             	cmp    ecx,0x19
c0008899:	77 24                	ja     c00088bf <Directory::exists()+0x39>
c000889b:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088a2:	85 c9                	test   ecx,ecx
c00088a4:	74 19                	je     c00088bf <Directory::exists()+0x39>
c00088a6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ac:	85 c9                	test   ecx,ecx
c00088ae:	74 0f                	je     c00088bf <Directory::exists()+0x39>
c00088b0:	50                   	push   eax
c00088b1:	83 c2 0d             	add    edx,0xd
c00088b4:	50                   	push   eax
c00088b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b7:	52                   	push   edx
c00088b8:	51                   	push   ecx
c00088b9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 c4 0c             	add    esp,0xc
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <Directory::read(dirent*)>:
c00088c4:	83 ec 1c             	sub    esp,0x1c
c00088c7:	b8 0b 00 00 00       	mov    eax,0xb
c00088cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d7:	83 f9 19             	cmp    ecx,0x19
c00088da:	77 30                	ja     c000890c <Directory::read(dirent*)+0x48>
c00088dc:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 25                	je     c000890c <Directory::read(dirent*)+0x48>
c00088e7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088ee:	74 1c                	je     c000890c <Directory::read(dirent*)+0x48>
c00088f0:	83 ec 0c             	sub    esp,0xc
c00088f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088f9:	51                   	push   ecx
c00088fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088fe:	6a 00                	push   0x0
c0008900:	68 10 01 00 00       	push   0x110
c0008905:	52                   	push   edx
c0008906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008909:	83 c4 20             	add    esp,0x20
c000890c:	83 c4 1c             	add    esp,0x1c
c000890f:	c3                   	ret    

c0008910 <Directory::create()>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	b8 0b 00 00 00       	mov    eax,0xb
c0008918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008923:	83 f9 19             	cmp    ecx,0x19
c0008926:	77 2f                	ja     c0008957 <Directory::create()+0x47>
c0008928:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000892f:	85 c9                	test   ecx,ecx
c0008931:	74 24                	je     c0008957 <Directory::create()+0x47>
c0008933:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008939:	85 c9                	test   ecx,ecx
c000893b:	74 1a                	je     c0008957 <Directory::create()+0x47>
c000893d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008941:	b8 06 00 00 00       	mov    eax,0x6
c0008946:	75 0f                	jne    c0008957 <Directory::create()+0x47>
c0008948:	50                   	push   eax
c0008949:	83 c2 0d             	add    edx,0xd
c000894c:	50                   	push   eax
c000894d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000894f:	52                   	push   edx
c0008950:	51                   	push   ecx
c0008951:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008954:	83 c4 10             	add    esp,0x10
c0008957:	83 c4 0c             	add    esp,0xc
c000895a:	c3                   	ret    
c000895b:	90                   	nop

c000895c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895c:	b8 0a 00 00 00       	mov    eax,0xa
c0008961:	c3                   	ret    
c0008962:	66 90                	xchg   ax,ax

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 e0 11 00 00       	call   c0009b58 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba e4 34 02 c0       	mov    edx,0xc00234e4
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba e4 34 02 c0       	mov    edx,0xc00234e4
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 41 0f 00 00       	call   c00098f8 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 12 49 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00089f8:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 25 e7 00 00       	call   c0017134 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 c0 1d 01 00       	call   c001a7db <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 d5 e5 00 00       	jmp    c0017000 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 9a 1d 01 00       	call   c001a7db <HalMakeBeep(int)>
c0008a41:	89 f0                	mov    eax,esi
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 dd e6 00 00       	call   c0017134 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 72 1d 01 00       	jmp    c001a7db <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0008a7a:	e8 19 e2 00 00       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 06 6f 00 00       	call   c000f9ac <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 20 35 02 c0       	push   0xc0023520
c0008ab9:	53                   	push   ebx
c0008aba:	e8 c9 f6 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 3f 35 02 c0       	push   0xc002353f
c0008ad3:	e8 2a 73 00 00       	call   c000fe02 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 be f6 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 aa f9 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 55 35 02 c0       	push   0xc0023555
c0008b10:	e8 51 e4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 82 6e 00 00       	call   c000f9ac <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 65 35 02 c0       	push   0xc0023565
c0008b77:	e8 ea e3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7a f6 ff ff       	call   c0008204 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 e3 6d 00 00       	call   c000f9ac <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 6e 35 02 c0       	push   0xc002356e
c0008bea:	50                   	push   eax
c0008beb:	e8 60 7a ff ff       	call   c0000650 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 3a 79 ff ff       	call   c0000580 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 6e 35 02 c0       	push   0xc002356e
c0008c6c:	50                   	push   eax
c0008c6d:	e8 fe 7b ff ff       	call   c0000870 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 e7 78 ff ff       	call   c0000580 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 6e 35 02 c0       	push   0xc002356e
c0008cbb:	50                   	push   eax
c0008cbc:	e8 af 7b ff ff       	call   c0000870 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 70 35 02 c0       	push   0xc0023570
c0008cf7:	e8 6a e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 85 35 02 c0       	push   0xc0023585
c0008d0d:	e8 54 e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 4c 78 ff ff       	call   c0000580 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 15 7b ff ff       	call   c0000870 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 0a 78 ff ff       	call   c0000580 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 89 35 02 c0       	push   0xc0023589
c0008d9c:	50                   	push   eax
c0008d9d:	e8 ce 7a ff ff       	call   c0000870 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 8e 35 02 c0       	push   0xc002358e
c0008de3:	e8 7e e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 9c 35 02 c0       	push   0xc002359c
c0008e01:	e8 60 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 a5 35 02 c0       	push   0xc00235a5
c0008e26:	e8 3b e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 c3 35 02 c0       	push   0xc00235c3
c0008e4a:	e8 17 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 d4 35 02 c0       	push   0xc00235d4
c0008e63:	e8 fe e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 e7 35 02 c0       	push   0xc00235e7
c0008e9b:	e8 c6 e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	d1 e0                	shl    eax,1
c0008f57:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f98:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f9f:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 f4 35 02 c0       	push   0xc00235f4
c0008fba:	e8 89 43 00 00       	call   c000d348 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 19 36 02 c0       	push   0xc0023619
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 6e 4f 00 00       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 33 48 00 00       	call   c000d81a <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 71 44 00 00       	call   c000d466 <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 f4 35 02 c0       	push   0xc00235f4
c0009054:	e8 ef 42 00 00       	call   c000d348 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 19 36 02 c0       	push   0xc0023619
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 d4 4e 00 00       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 28 44 00 00       	call   c000d4b8 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 c8 43 00 00       	call   c000d466 <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 8e 0a 00 00       	call   c0009b58 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba 78 36 02 c0       	mov    edx,0xc0023678
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba 78 36 02 c0       	mov    edx,0xc0023678
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 f1 07 00 00       	call   c00098f8 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 c2 41 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009167:	01 d0                	add    eax,edx
c0009169:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000916f:	89 c2                	mov    edx,eax
c0009171:	c1 fa 1f             	sar    edx,0x1f
c0009174:	01 c1                	add    ecx,eax
c0009176:	11 d3                	adc    ebx,edx
c0009178:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000917d:	0f b6 c0             	movzx  eax,al
c0009180:	85 c0                	test   eax,eax
c0009182:	74 0c                	je     c0009190 <Clock::timeInSecondsLocal()+0x56>
c0009184:	b8 08 07 00 00       	mov    eax,0x708
c0009189:	ba 00 00 00 00       	mov    edx,0x0
c000918e:	eb 0a                	jmp    c000919a <Clock::timeInSecondsLocal()+0x60>
c0009190:	b8 00 00 00 00       	mov    eax,0x0
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	01 c8                	add    eax,ecx
c000919c:	11 da                	adc    edx,ebx
c000919e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091a1:	c9                   	leave  
c00091a2:	c3                   	ret    
c00091a3:	90                   	nop

c00091a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091a4:	55                   	push   ebp
c00091a5:	89 e5                	mov    ebp,esp
c00091a7:	56                   	push   esi
c00091a8:	53                   	push   ebx
c00091a9:	83 ec 10             	sub    esp,0x10
c00091ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091bd:	83 c0 2c             	add    eax,0x2c
c00091c0:	8b 30                	mov    esi,DWORD PTR [eax]
c00091c2:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c00091c7:	0f b6 d0             	movzx  edx,al
c00091ca:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c00091cf:	01 d0                	add    eax,edx
c00091d1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00091d7:	89 c2                	mov    edx,eax
c00091d9:	c1 fa 1f             	sar    edx,0x1f
c00091dc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091df:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091e2:	29 c1                	sub    ecx,eax
c00091e4:	19 d3                	sbb    ebx,edx
c00091e6:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00091eb:	0f b6 c0             	movzx  eax,al
c00091ee:	85 c0                	test   eax,eax
c00091f0:	74 0c                	je     c00091fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c00091f2:	b8 08 07 00 00       	mov    eax,0x708
c00091f7:	ba 00 00 00 00       	mov    edx,0x0
c00091fc:	eb 0a                	jmp    c0009208 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091fe:	b8 00 00 00 00       	mov    eax,0x0
c0009203:	ba 00 00 00 00       	mov    edx,0x0
c0009208:	29 c1                	sub    ecx,eax
c000920a:	19 d3                	sbb    ebx,edx
c000920c:	89 c8                	mov    eax,ecx
c000920e:	89 da                	mov    edx,ebx
c0009210:	83 ec 04             	sub    esp,0x4
c0009213:	52                   	push   edx
c0009214:	50                   	push   eax
c0009215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009218:	ff d6                	call   esi
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009220:	5b                   	pop    ebx
c0009221:	5e                   	pop    esi
c0009222:	5d                   	pop    ebp
c0009223:	c3                   	ret    

c0009224 <KeDatetimeToSeconds(datetime_t)>:
c0009224:	55                   	push   ebp
c0009225:	89 e5                	mov    ebp,esp
c0009227:	53                   	push   ebx
c0009228:	83 ec 24             	sub    esp,0x24
c000922b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000922f:	2d 6c 07 00 00       	sub    eax,0x76c
c0009234:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009238:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000923b:	83 e8 01             	sub    eax,0x1
c000923e:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009241:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009248:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000924f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009256:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000925d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009260:	0f b6 c8             	movzx  ecx,al
c0009263:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009266:	0f b6 d0             	movzx  edx,al
c0009269:	89 d0                	mov    eax,edx
c000926b:	c1 e0 04             	shl    eax,0x4
c000926e:	29 d0                	sub    eax,edx
c0009270:	c1 e0 02             	shl    eax,0x2
c0009273:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009276:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009279:	0f b6 c0             	movzx  eax,al
c000927c:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009282:	01 d0                	add    eax,edx
c0009284:	89 c2                	mov    edx,eax
c0009286:	c1 fa 1f             	sar    edx,0x1f
c0009289:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000928c:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000928f:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009292:	0f b6 c0             	movzx  eax,al
c0009295:	83 e8 01             	sub    eax,0x1
c0009298:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000929b:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000929e:	0f b6 c0             	movzx  eax,al
c00092a1:	8b 04 85 40 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc9c0]
c00092a8:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092ab:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092ae:	0f b6 c0             	movzx  eax,al
c00092b1:	83 f8 01             	cmp    eax,0x1
c00092b4:	76 7c                	jbe    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092b6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ba:	0f b7 c0             	movzx  eax,ax
c00092bd:	83 e0 03             	and    eax,0x3
c00092c0:	85 c0                	test   eax,eax
c00092c2:	75 6e                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092c4:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092c8:	0f b7 c8             	movzx  ecx,ax
c00092cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092d0:	89 c8                	mov    eax,ecx
c00092d2:	f7 e2                	mul    edx
c00092d4:	c1 ea 05             	shr    edx,0x5
c00092d7:	89 d0                	mov    eax,edx
c00092d9:	c1 e0 02             	shl    eax,0x2
c00092dc:	01 d0                	add    eax,edx
c00092de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	c1 e0 02             	shl    eax,0x2
c00092ea:	29 c1                	sub    ecx,eax
c00092ec:	89 c8                	mov    eax,ecx
c00092ee:	0f b7 c0             	movzx  eax,ax
c00092f1:	85 c0                	test   eax,eax
c00092f3:	75 39                	jne    c000932e <KeDatetimeToSeconds(datetime_t)+0x10a>
c00092f5:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f9:	0f b7 c0             	movzx  eax,ax
c00092fc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009302:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009307:	f7 e9                	imul   ecx
c0009309:	c1 fa 07             	sar    edx,0x7
c000930c:	89 c8                	mov    eax,ecx
c000930e:	c1 f8 1f             	sar    eax,0x1f
c0009311:	29 c2                	sub    edx,eax
c0009313:	89 d0                	mov    eax,edx
c0009315:	c1 e0 02             	shl    eax,0x2
c0009318:	01 d0                	add    eax,edx
c000931a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009321:	01 d0                	add    eax,edx
c0009323:	c1 e0 04             	shl    eax,0x4
c0009326:	29 c1                	sub    ecx,eax
c0009328:	89 ca                	mov    edx,ecx
c000932a:	85 d2                	test   edx,edx
c000932c:	75 04                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c000932e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009332:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009336:	0f b7 c0             	movzx  eax,ax
c0009339:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 f8 46             	cmp    eax,0x46
c0009342:	0f 9f c0             	setg   al
c0009345:	0f b6 c0             	movzx  eax,al
c0009348:	85 c0                	test   eax,eax
c000934a:	0f 84 a4 00 00 00    	je     c00093f4 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009350:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009357:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000935b:	0f b7 d0             	movzx  edx,ax
c000935e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009361:	39 c2                	cmp    edx,eax
c0009363:	0f 8e b8 01 00 00    	jle    c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009369:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936c:	83 e0 03             	and    eax,0x3
c000936f:	85 c0                	test   eax,eax
c0009371:	75 6b                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009373:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009376:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000937b:	f7 e9                	imul   ecx
c000937d:	c1 fa 05             	sar    edx,0x5
c0009380:	89 c8                	mov    eax,ecx
c0009382:	c1 f8 1f             	sar    eax,0x1f
c0009385:	29 c2                	sub    edx,eax
c0009387:	89 d0                	mov    eax,edx
c0009389:	c1 e0 02             	shl    eax,0x2
c000938c:	01 d0                	add    eax,edx
c000938e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009395:	01 d0                	add    eax,edx
c0009397:	c1 e0 02             	shl    eax,0x2
c000939a:	29 c1                	sub    ecx,eax
c000939c:	89 ca                	mov    edx,ecx
c000939e:	85 d2                	test   edx,edx
c00093a0:	75 35                	jne    c00093d7 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c00093a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093a5:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093ab:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093b0:	f7 e9                	imul   ecx
c00093b2:	c1 fa 07             	sar    edx,0x7
c00093b5:	89 c8                	mov    eax,ecx
c00093b7:	c1 f8 1f             	sar    eax,0x1f
c00093ba:	29 c2                	sub    edx,eax
c00093bc:	89 d0                	mov    eax,edx
c00093be:	c1 e0 02             	shl    eax,0x2
c00093c1:	01 d0                	add    eax,edx
c00093c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093ca:	01 d0                	add    eax,edx
c00093cc:	c1 e0 04             	shl    eax,0x4
c00093cf:	29 c1                	sub    ecx,eax
c00093d1:	89 ca                	mov    edx,ecx
c00093d3:	85 d2                	test   edx,edx
c00093d5:	75 07                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c00093d7:	b8 6e 01 00 00       	mov    eax,0x16e
c00093dc:	eb 05                	jmp    c00093e3 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c00093de:	b8 6d 01 00 00       	mov    eax,0x16d
c00093e3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e9:	83 c0 01             	add    eax,0x1
c00093ec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093ef:	e9 63 ff ff ff       	jmp    c0009357 <KeDatetimeToSeconds(datetime_t)+0x133>
c00093f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f7:	83 f8 45             	cmp    eax,0x45
c00093fa:	0f 8f 21 01 00 00    	jg     c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009400:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009407:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000940b:	0f b7 d0             	movzx  edx,ax
c000940e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009411:	39 c2                	cmp    edx,eax
c0009413:	0f 8d 8b 00 00 00    	jge    c00094a4 <KeDatetimeToSeconds(datetime_t)+0x280>
c0009419:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000941c:	83 e0 03             	and    eax,0x3
c000941f:	85 c0                	test   eax,eax
c0009421:	75 6b                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009423:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009426:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000942b:	f7 e9                	imul   ecx
c000942d:	c1 fa 05             	sar    edx,0x5
c0009430:	89 c8                	mov    eax,ecx
c0009432:	c1 f8 1f             	sar    eax,0x1f
c0009435:	29 c2                	sub    edx,eax
c0009437:	89 d0                	mov    eax,edx
c0009439:	c1 e0 02             	shl    eax,0x2
c000943c:	01 d0                	add    eax,edx
c000943e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009445:	01 d0                	add    eax,edx
c0009447:	c1 e0 02             	shl    eax,0x2
c000944a:	29 c1                	sub    ecx,eax
c000944c:	89 ca                	mov    edx,ecx
c000944e:	85 d2                	test   edx,edx
c0009450:	75 35                	jne    c0009487 <KeDatetimeToSeconds(datetime_t)+0x263>
c0009452:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009455:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000945b:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009460:	f7 e9                	imul   ecx
c0009462:	c1 fa 07             	sar    edx,0x7
c0009465:	89 c8                	mov    eax,ecx
c0009467:	c1 f8 1f             	sar    eax,0x1f
c000946a:	29 c2                	sub    edx,eax
c000946c:	89 d0                	mov    eax,edx
c000946e:	c1 e0 02             	shl    eax,0x2
c0009471:	01 d0                	add    eax,edx
c0009473:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000947a:	01 d0                	add    eax,edx
c000947c:	c1 e0 04             	shl    eax,0x4
c000947f:	29 c1                	sub    ecx,eax
c0009481:	89 ca                	mov    edx,ecx
c0009483:	85 d2                	test   edx,edx
c0009485:	75 07                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009487:	b8 6e 01 00 00       	mov    eax,0x16e
c000948c:	eb 05                	jmp    c0009493 <KeDatetimeToSeconds(datetime_t)+0x26f>
c000948e:	b8 6d 01 00 00       	mov    eax,0x16d
c0009493:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009499:	83 e8 01             	sub    eax,0x1
c000949c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000949f:	e9 63 ff ff ff       	jmp    c0009407 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c00094a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094a7:	83 e0 03             	and    eax,0x3
c00094aa:	85 c0                	test   eax,eax
c00094ac:	75 6b                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094ae:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094b1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094b6:	f7 e9                	imul   ecx
c00094b8:	c1 fa 05             	sar    edx,0x5
c00094bb:	89 c8                	mov    eax,ecx
c00094bd:	c1 f8 1f             	sar    eax,0x1f
c00094c0:	29 c2                	sub    edx,eax
c00094c2:	89 d0                	mov    eax,edx
c00094c4:	c1 e0 02             	shl    eax,0x2
c00094c7:	01 d0                	add    eax,edx
c00094c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d0:	01 d0                	add    eax,edx
c00094d2:	c1 e0 02             	shl    eax,0x2
c00094d5:	29 c1                	sub    ecx,eax
c00094d7:	89 ca                	mov    edx,ecx
c00094d9:	85 d2                	test   edx,edx
c00094db:	75 35                	jne    c0009512 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c00094dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094e0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094e6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094eb:	f7 e9                	imul   ecx
c00094ed:	c1 fa 07             	sar    edx,0x7
c00094f0:	89 c8                	mov    eax,ecx
c00094f2:	c1 f8 1f             	sar    eax,0x1f
c00094f5:	29 c2                	sub    edx,eax
c00094f7:	89 d0                	mov    eax,edx
c00094f9:	c1 e0 02             	shl    eax,0x2
c00094fc:	01 d0                	add    eax,edx
c00094fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009505:	01 d0                	add    eax,edx
c0009507:	c1 e0 04             	shl    eax,0x4
c000950a:	29 c1                	sub    ecx,eax
c000950c:	89 ca                	mov    edx,ecx
c000950e:	85 d2                	test   edx,edx
c0009510:	75 07                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009512:	b8 6e 01 00 00       	mov    eax,0x16e
c0009517:	eb 05                	jmp    c000951e <KeDatetimeToSeconds(datetime_t)+0x2fa>
c0009519:	b8 6d 01 00 00       	mov    eax,0x16d
c000951e:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009524:	89 c2                	mov    edx,eax
c0009526:	c1 fa 1f             	sar    edx,0x1f
c0009529:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000952f:	6b c8 00             	imul   ecx,eax,0x0
c0009532:	01 d9                	add    ecx,ebx
c0009534:	bb 80 51 01 00       	mov    ebx,0x15180
c0009539:	f7 e3                	mul    ebx
c000953b:	01 d1                	add    ecx,edx
c000953d:	89 ca                	mov    edx,ecx
c000953f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009542:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009545:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009548:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000954b:	83 c4 24             	add    esp,0x24
c000954e:	5b                   	pop    ebx
c000954f:	5d                   	pop    ebp
c0009550:	c3                   	ret    
c0009551:	90                   	nop

c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009552:	55                   	push   ebp
c0009553:	89 e5                	mov    ebp,esp
c0009555:	56                   	push   esi
c0009556:	53                   	push   ebx
c0009557:	83 ec 20             	sub    esp,0x20
c000955a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000955d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009560:	e8 bf fc ff ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c0009565:	83 c4 08             	add    esp,0x8
c0009568:	89 c3                	mov    ebx,eax
c000956a:	89 d6                	mov    esi,edx
c000956c:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009571:	0f b6 d0             	movzx  edx,al
c0009574:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009579:	01 d0                	add    eax,edx
c000957b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009581:	89 c2                	mov    edx,eax
c0009583:	c1 fa 1f             	sar    edx,0x1f
c0009586:	29 c3                	sub    ebx,eax
c0009588:	19 d6                	sbb    esi,edx
c000958a:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000958f:	0f b6 c0             	movzx  eax,al
c0009592:	85 c0                	test   eax,eax
c0009594:	74 0c                	je     c00095a2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009596:	b8 08 07 00 00       	mov    eax,0x708
c000959b:	ba 00 00 00 00       	mov    edx,0x0
c00095a0:	eb 0a                	jmp    c00095ac <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c00095a2:	b8 00 00 00 00       	mov    eax,0x0
c00095a7:	ba 00 00 00 00       	mov    edx,0x0
c00095ac:	29 c3                	sub    ebx,eax
c00095ae:	19 d6                	sbb    esi,edx
c00095b0:	89 d8                	mov    eax,ebx
c00095b2:	89 f2                	mov    edx,esi
c00095b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095bd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095c0:	89 d0                	mov    eax,edx
c00095c2:	31 d2                	xor    edx,edx
c00095c4:	89 c3                	mov    ebx,eax
c00095c6:	89 d6                	mov    esi,edx
c00095c8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095cb:	80 e5 ff             	and    ch,0xff
c00095ce:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095d1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095d4:	83 e1 00             	and    ecx,0x0
c00095d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095da:	83 ec 0c             	sub    esp,0xc
c00095dd:	56                   	push   esi
c00095de:	53                   	push   ebx
c00095df:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095e5:	68 2e 36 02 c0       	push   0xc002362e
c00095ea:	e8 77 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00095ef:	83 c4 20             	add    esp,0x20
c00095f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00095f7:	83 c0 2c             	add    eax,0x2c
c00095fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00095fc:	83 ec 04             	sub    esp,0x4
c00095ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009602:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009605:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009608:	ff d0                	call   eax
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009610:	5b                   	pop    ebx
c0009611:	5e                   	pop    esi
c0009612:	5d                   	pop    ebp
c0009613:	c3                   	ret    

c0009614 <KeSecondsToDatetime(unsigned long long)>:
c0009614:	55                   	push   ebp
c0009615:	89 e5                	mov    ebp,esp
c0009617:	83 ec 48             	sub    esp,0x48
c000961a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000961d:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009620:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009623:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009626:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009629:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000962c:	6a 00                	push   0x0
c000962e:	68 80 51 01 00       	push   0x15180
c0009633:	52                   	push   edx
c0009634:	50                   	push   eax
c0009635:	e8 7a 84 01 00       	call   c0021ab4 <__udivdi3>
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009642:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009645:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009648:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000964b:	6a 00                	push   0x0
c000964d:	68 80 51 01 00       	push   0x15180
c0009652:	52                   	push   edx
c0009653:	50                   	push   eax
c0009654:	e8 5b 85 01 00       	call   c0021bb4 <__umoddi3>
c0009659:	83 c4 10             	add    esp,0x10
c000965c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000965f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009663:	79 0b                	jns    c0009670 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009665:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000966c:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009670:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009673:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009678:	89 c8                	mov    eax,ecx
c000967a:	f7 ea                	imul   edx
c000967c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000967f:	c1 f8 0b             	sar    eax,0xb
c0009682:	89 c2                	mov    edx,eax
c0009684:	89 c8                	mov    eax,ecx
c0009686:	c1 f8 1f             	sar    eax,0x1f
c0009689:	29 c2                	sub    edx,eax
c000968b:	89 d0                	mov    eax,edx
c000968d:	88 c2                	mov    dl,al
c000968f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009692:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009695:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009698:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000969d:	89 c8                	mov    eax,ecx
c000969f:	f7 ea                	imul   edx
c00096a1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096a4:	c1 f8 0b             	sar    eax,0xb
c00096a7:	89 c2                	mov    edx,eax
c00096a9:	89 c8                	mov    eax,ecx
c00096ab:	c1 f8 1f             	sar    eax,0x1f
c00096ae:	29 c2                	sub    edx,eax
c00096b0:	89 d0                	mov    eax,edx
c00096b2:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00096b8:	29 c1                	sub    ecx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096bf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096c2:	ba 89 88 88 88       	mov    edx,0x88888889
c00096c7:	89 c8                	mov    eax,ecx
c00096c9:	f7 ea                	imul   edx
c00096cb:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096ce:	c1 f8 05             	sar    eax,0x5
c00096d1:	89 c2                	mov    edx,eax
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	c1 f8 1f             	sar    eax,0x1f
c00096d8:	29 c2                	sub    edx,eax
c00096da:	89 d0                	mov    eax,edx
c00096dc:	88 c2                	mov    dl,al
c00096de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096e4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096e7:	ba 89 88 88 88       	mov    edx,0x88888889
c00096ec:	89 c8                	mov    eax,ecx
c00096ee:	f7 ea                	imul   edx
c00096f0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096f3:	c1 f8 05             	sar    eax,0x5
c00096f6:	89 c2                	mov    edx,eax
c00096f8:	89 c8                	mov    eax,ecx
c00096fa:	c1 f8 1f             	sar    eax,0x1f
c00096fd:	29 c2                	sub    edx,eax
c00096ff:	89 d0                	mov    eax,edx
c0009701:	c1 e0 04             	shl    eax,0x4
c0009704:	29 d0                	sub    eax,edx
c0009706:	c1 e0 02             	shl    eax,0x2
c0009709:	29 c1                	sub    ecx,eax
c000970b:	89 ca                	mov    edx,ecx
c000970d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009710:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009713:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009717:	79 20                	jns    c0009739 <KeSecondsToDatetime(unsigned long long)+0x125>
c0009719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000971c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009722:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009727:	89 c8                	mov    eax,ecx
c0009729:	f7 ea                	imul   edx
c000972b:	c1 fa 0f             	sar    edx,0xf
c000972e:	89 c8                	mov    eax,ecx
c0009730:	c1 f8 1f             	sar    eax,0x1f
c0009733:	29 c2                	sub    edx,eax
c0009735:	89 d0                	mov    eax,edx
c0009737:	eb 18                	jmp    c0009751 <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009739:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000973c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009741:	89 c8                	mov    eax,ecx
c0009743:	f7 ea                	imul   edx
c0009745:	c1 fa 0f             	sar    edx,0xf
c0009748:	89 c8                	mov    eax,ecx
c000974a:	c1 f8 1f             	sar    eax,0x1f
c000974d:	29 c2                	sub    edx,eax
c000974f:	89 d0                	mov    eax,edx
c0009751:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009754:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009757:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c000975d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009760:	01 d0                	add    eax,edx
c0009762:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009768:	c1 e8 02             	shr    eax,0x2
c000976b:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009770:	f7 e2                	mul    edx
c0009772:	c1 ea 07             	shr    edx,0x7
c0009775:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009778:	29 d0                	sub    eax,edx
c000977a:	89 c1                	mov    ecx,eax
c000977c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977f:	c1 e8 02             	shr    eax,0x2
c0009782:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009787:	f7 e2                	mul    edx
c0009789:	89 d0                	mov    eax,edx
c000978b:	c1 e8 0b             	shr    eax,0xb
c000978e:	01 c1                	add    ecx,eax
c0009790:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009793:	c1 e8 04             	shr    eax,0x4
c0009796:	ba 41 d6 72 00       	mov    edx,0x72d641
c000979b:	f7 e2                	mul    edx
c000979d:	89 d0                	mov    eax,edx
c000979f:	c1 e8 04             	shr    eax,0x4
c00097a2:	29 c1                	sub    ecx,eax
c00097a4:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097a9:	89 c8                	mov    eax,ecx
c00097ab:	f7 e2                	mul    edx
c00097ad:	89 c8                	mov    eax,ecx
c00097af:	29 d0                	sub    eax,edx
c00097b1:	d1 e8                	shr    eax,1
c00097b3:	01 d0                	add    eax,edx
c00097b5:	c1 e8 08             	shr    eax,0x8
c00097b8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097be:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c3:	f7 e2                	mul    edx
c00097c5:	89 d1                	mov    ecx,edx
c00097c7:	c1 e9 05             	shr    ecx,0x5
c00097ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097cd:	89 d0                	mov    eax,edx
c00097cf:	c1 e0 03             	shl    eax,0x3
c00097d2:	01 d0                	add    eax,edx
c00097d4:	c1 e0 03             	shl    eax,0x3
c00097d7:	01 d0                	add    eax,edx
c00097d9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e0:	01 c2                	add    edx,eax
c00097e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097e5:	c1 e8 02             	shr    eax,0x2
c00097e8:	01 d0                	add    eax,edx
c00097ea:	29 c1                	sub    ecx,eax
c00097ec:	89 ca                	mov    edx,ecx
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	01 d0                	add    eax,edx
c00097f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097f6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097f9:	89 d0                	mov    eax,edx
c00097fb:	c1 e0 02             	shl    eax,0x2
c00097fe:	01 d0                	add    eax,edx
c0009800:	83 c0 02             	add    eax,0x2
c0009803:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009808:	f7 e2                	mul    edx
c000980a:	89 d0                	mov    eax,edx
c000980c:	c1 e8 07             	shr    eax,0x7
c000980f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009812:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009815:	89 d0                	mov    eax,edx
c0009817:	c1 e0 03             	shl    eax,0x3
c000981a:	01 d0                	add    eax,edx
c000981c:	89 c2                	mov    edx,eax
c000981e:	c1 e2 04             	shl    edx,0x4
c0009821:	01 d0                	add    eax,edx
c0009823:	83 c0 02             	add    eax,0x2
c0009826:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000982b:	f7 e2                	mul    edx
c000982d:	c1 ea 02             	shr    edx,0x2
c0009830:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009833:	29 d0                	sub    eax,edx
c0009835:	83 c0 01             	add    eax,0x1
c0009838:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000983b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000983f:	77 07                	ja     c0009848 <KeSecondsToDatetime(unsigned long long)+0x234>
c0009841:	b8 02 00 00 00       	mov    eax,0x2
c0009846:	eb 05                	jmp    c000984d <KeSecondsToDatetime(unsigned long long)+0x239>
c0009848:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000984d:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009850:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009853:	89 d0                	mov    eax,edx
c0009855:	c1 e0 02             	shl    eax,0x2
c0009858:	01 d0                	add    eax,edx
c000985a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009861:	01 d0                	add    eax,edx
c0009863:	c1 e0 04             	shl    eax,0x4
c0009866:	89 c2                	mov    edx,eax
c0009868:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000986b:	01 c2                	add    edx,eax
c000986d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009871:	0f 96 c0             	setbe  al
c0009874:	0f b6 c0             	movzx  eax,al
c0009877:	01 d0                	add    eax,edx
c0009879:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000987c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000987f:	89 c2                	mov    edx,eax
c0009881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009884:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0009888:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000988b:	83 c0 01             	add    eax,0x1
c000988e:	88 c2                	mov    dl,al
c0009890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009893:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009899:	88 c2                	mov    dl,al
c000989b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000989e:	88 10                	mov    BYTE PTR [eax],dl
c00098a0:	90                   	nop
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	c9                   	leave  
c00098a5:	c2 04 00             	ret    0x4

c00098a8 <Clock::timeInDatetimeLocal()>:
c00098a8:	55                   	push   ebp
c00098a9:	89 e5                	mov    ebp,esp
c00098ab:	83 ec 08             	sub    esp,0x8
c00098ae:	83 ec 0c             	sub    esp,0xc
c00098b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098b4:	e8 81 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098bf:	83 ec 04             	sub    esp,0x4
c00098c2:	52                   	push   edx
c00098c3:	50                   	push   eax
c00098c4:	51                   	push   ecx
c00098c5:	e8 4a fd ff ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c00098ca:	83 c4 0c             	add    esp,0xc
c00098cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d0:	c9                   	leave  
c00098d1:	c2 04 00             	ret    0x4

c00098d4 <Device::hibernate()>:
c00098d4:	c3                   	ret    
c00098d5:	90                   	nop

c00098d6 <Device::wake()>:
c00098d6:	c3                   	ret    
c00098d7:	90                   	nop

c00098d8 <Device::detect()>:
c00098d8:	c3                   	ret    
c00098d9:	90                   	nop

c00098da <Device::disableLegacy()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::powerSaving(PowerSavingLevel)>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <DriverlessDevice::close(int, int, void*)>:
c00098de:	31 c0                	xor    eax,eax
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <DriverlessDevice::detect()>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::open(int, int, void*)>:
c00098e4:	83 ec 18             	sub    esp,0x18
c00098e7:	68 ac 36 02 c0       	push   0xc00236ac
c00098ec:	e8 11 65 00 00       	call   c000fe02 <KePanic(char const*)>
c00098f1:	83 c8 ff             	or     eax,0xffffffff
c00098f4:	83 c4 1c             	add    esp,0x1c
c00098f7:	c3                   	ret    

c00098f8 <Device::~Device()>:
c00098f8:	ba 50 37 02 c0       	mov    edx,0xc0023750
c00098fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009901:	89 10                	mov    DWORD PTR [eax],edx
c0009903:	90                   	nop
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Device::~Device()>:
c0009906:	83 ec 0c             	sub    esp,0xc
c0009909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000990d:	e8 e6 ff ff ff       	call   c00098f8 <Device::~Device()>
c0009912:	83 c4 04             	add    esp,0x4
c0009915:	83 ec 08             	sub    esp,0x8
c0009918:	68 58 01 00 00       	push   0x158
c000991d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009921:	e8 cf 39 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0009926:	83 c4 10             	add    esp,0x10
c0009929:	83 c4 0c             	add    esp,0xc
c000992c:	c3                   	ret    
c000992d:	90                   	nop

c000992e <Device::findAndLoadDriver()>:
c000992e:	c7 44 24 04 ca 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc00236ca
c0009936:	e9 2b d6 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000993b:	90                   	nop

c000993c <Device::preOpenPCI(PCIDeviceInfo)>:
c000993c:	57                   	push   edi
c000993d:	b9 09 00 00 00       	mov    ecx,0x9
c0009942:	56                   	push   esi
c0009943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009947:	8d 74 24 10          	lea    esi,[esp+0x10]
c000994b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009955:	81 c7 18 01 00 00    	add    edi,0x118
c000995b:	fc                   	cld    
c000995c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000995e:	5e                   	pop    esi
c000995f:	5f                   	pop    edi
c0009960:	c3                   	ret    
c0009961:	90                   	nop

c0009962 <Device::preOpenACPI(void*, char*, char*)>:
c0009962:	57                   	push   edi
c0009963:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009968:	56                   	push   esi
c0009969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009971:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009975:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000997f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009985:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000998b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000998d:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009993:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009997:	b9 0e 00 00 00       	mov    ecx,0xe
c000999c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000999e:	5e                   	pop    esi
c000999f:	5f                   	pop    edi
c00099a0:	c3                   	ret    
c00099a1:	90                   	nop

c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a2:	53                   	push   ebx
c00099a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b3:	0f b6 c0             	movzx  eax,al
c00099b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099be:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c6:	5b                   	pop    ebx
c00099c7:	e9 e3 11 01 00       	jmp    c001abaf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099cc <Device::getParent()>:
c00099cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099d6:	c3                   	ret    
c00099d7:	90                   	nop

c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f1:	e9 2a 13 01 00       	jmp    c001ad20 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099f6 <Device::addChild(Device*)>:
c00099f6:	53                   	push   ebx
c00099f7:	83 ec 08             	sub    esp,0x8
c00099fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a10:	85 d2                	test   edx,edx
c0009a12:	74 04                	je     c0009a18 <Device::addChild(Device*)+0x22>
c0009a14:	89 d3                	mov    ebx,edx
c0009a16:	eb f6                	jmp    c0009a0e <Device::addChild(Device*)+0x18>
c0009a18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a1b:	83 ec 0c             	sub    esp,0xc
c0009a1e:	6a 08                	push   0x8
c0009a20:	e8 87 5f 00 00       	call   c000f9ac <malloc>
c0009a25:	89 03                	mov    DWORD PTR [ebx],eax
c0009a27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a34:	83 c4 18             	add    esp,0x18
c0009a37:	5b                   	pop    ebx
c0009a38:	c3                   	ret    
c0009a39:	90                   	nop

c0009a3a <Device::removeAllChildren()>:
c0009a3a:	56                   	push   esi
c0009a3b:	53                   	push   ebx
c0009a3c:	52                   	push   edx
c0009a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a4a:	74 17                	je     c0009a63 <Device::removeAllChildren()+0x29>
c0009a4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a4f:	85 c0                	test   eax,eax
c0009a51:	74 0c                	je     c0009a5f <Device::removeAllChildren()+0x25>
c0009a53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a55:	83 ec 0c             	sub    esp,0xc
c0009a58:	50                   	push   eax
c0009a59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a61:	eb e4                	jmp    c0009a47 <Device::removeAllChildren()+0xd>
c0009a63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a7c:	58                   	pop    eax
c0009a7d:	5b                   	pop    ebx
c0009a7e:	5e                   	pop    esi
c0009a7f:	c3                   	ret    

c0009a80 <Device::hibernateAll()>:
c0009a80:	53                   	push   ebx
c0009a81:	83 ec 14             	sub    esp,0x14
c0009a84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8a:	53                   	push   ebx
c0009a8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9a:	74 0f                	je     c0009aab <Device::hibernateAll()+0x2b>
c0009a9c:	83 ec 0c             	sub    esp,0xc
c0009a9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa2:	e8 d9 ff ff ff       	call   c0009a80 <Device::hibernateAll()>
c0009aa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aa9:	eb e9                	jmp    c0009a94 <Device::hibernateAll()+0x14>
c0009aab:	83 c4 08             	add    esp,0x8
c0009aae:	5b                   	pop    ebx
c0009aaf:	c3                   	ret    

c0009ab0 <Device::wakeAll()>:
c0009ab0:	53                   	push   ebx
c0009ab1:	83 ec 14             	sub    esp,0x14
c0009ab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aba:	53                   	push   ebx
c0009abb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009abe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ac4:	83 c4 10             	add    esp,0x10
c0009ac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aca:	74 0f                	je     c0009adb <Device::wakeAll()+0x2b>
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad2:	e8 d9 ff ff ff       	call   c0009ab0 <Device::wakeAll()>
c0009ad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ad9:	eb e9                	jmp    c0009ac4 <Device::wakeAll()+0x14>
c0009adb:	83 c4 08             	add    esp,0x8
c0009ade:	5b                   	pop    ebx
c0009adf:	c3                   	ret    

c0009ae0 <Device::detectAll()>:
c0009ae0:	53                   	push   ebx
c0009ae1:	83 ec 14             	sub    esp,0x14
c0009ae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aea:	53                   	push   ebx
c0009aeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009aee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009afa:	74 0f                	je     c0009b0b <Device::detectAll()+0x2b>
c0009afc:	83 ec 0c             	sub    esp,0xc
c0009aff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b02:	e8 d9 ff ff ff       	call   c0009ae0 <Device::detectAll()>
c0009b07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b09:	eb e9                	jmp    c0009af4 <Device::detectAll()+0x14>
c0009b0b:	83 c4 08             	add    esp,0x8
c0009b0e:	5b                   	pop    ebx
c0009b0f:	c3                   	ret    

c0009b10 <Device::disableLegacyAll()>:
c0009b10:	c3                   	ret    
c0009b11:	90                   	nop

c0009b12 <Device::loadDriversForAll()>:
c0009b12:	c3                   	ret    
c0009b13:	90                   	nop

c0009b14 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b14:	56                   	push   esi
c0009b15:	53                   	push   ebx
c0009b16:	83 ec 0c             	sub    esp,0xc
c0009b19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b23:	56                   	push   esi
c0009b24:	53                   	push   ebx
c0009b25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b34:	74 0f                	je     c0009b45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b36:	52                   	push   edx
c0009b37:	52                   	push   edx
c0009b38:	56                   	push   esi
c0009b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b3c:	e8 d3 ff ff ff       	call   c0009b14 <Device::powerSavingAll(PowerSavingLevel)>
c0009b41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b43:	eb e9                	jmp    c0009b2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b45:	58                   	pop    eax
c0009b46:	5b                   	pop    ebx
c0009b47:	5e                   	pop    esi
c0009b48:	c3                   	ret    
c0009b49:	90                   	nop

c0009b4a <Device::setName(char const*)>:
c0009b4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b52:	e9 f9 6a ff ff       	jmp    c0000650 <strcpy>
c0009b57:	90                   	nop

c0009b58 <Device::Device(char const*)>:
c0009b58:	83 ec 1c             	sub    esp,0x1c
c0009b5b:	ba 50 37 02 c0       	mov    edx,0xc0023750
c0009b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b64:	89 10                	mov    DWORD PTR [eax],edx
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b9e:	83 ec 08             	sub    esp,0x8
c0009ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba9:	e8 9c ff ff ff       	call   c0009b4a <Device::setName(char const*)>
c0009bae:	83 c4 10             	add    esp,0x10
c0009bb1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bb9:	83 ec 0c             	sub    esp,0xc
c0009bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc0:	e8 e7 5d 00 00       	call   c000f9ac <malloc>
c0009bc5:	83 c4 10             	add    esp,0x10
c0009bc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009be9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c44:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c4e:	90                   	nop
c0009c4f:	83 c4 1c             	add    esp,0x1c
c0009c52:	c3                   	ret    
c0009c53:	90                   	nop

c0009c54 <Device::getName()>:
c0009c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c58:	05 d0 00 00 00       	add    eax,0xd0
c0009c5d:	c3                   	ret    

c0009c5e <Device::closeAll()>:
c0009c5e:	53                   	push   ebx
c0009c5f:	83 ec 08             	sub    esp,0x8
c0009c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c66:	53                   	push   ebx
c0009c67:	e8 e8 ff ff ff       	call   c0009c54 <Device::getName()>
c0009c6c:	52                   	push   edx
c0009c6d:	50                   	push   eax
c0009c6e:	68 04 37 02 c0       	push   0xc0023704
c0009c73:	e8 ee d2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009c78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c7a:	6a 00                	push   0x0
c0009c7c:	6a 00                	push   0x0
c0009c7e:	6a 00                	push   0x0
c0009c80:	53                   	push   ebx
c0009c81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c8a:	83 c4 20             	add    esp,0x20
c0009c8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c90:	74 12                	je     c0009ca4 <Device::closeAll()+0x46>
c0009c92:	83 ec 0c             	sub    esp,0xc
c0009c95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c98:	e8 c1 ff ff ff       	call   c0009c5e <Device::closeAll()>
c0009c9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c9f:	83 c4 10             	add    esp,0x10
c0009ca2:	eb e9                	jmp    c0009c8d <Device::closeAll()+0x2f>
c0009ca4:	83 c4 08             	add    esp,0x8
c0009ca7:	5b                   	pop    ebx
c0009ca8:	c3                   	ret    
c0009ca9:	90                   	nop

c0009caa <DriverlessDevice::DriverlessDevice(char const*)>:
c0009caa:	83 ec 0c             	sub    esp,0xc
c0009cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb1:	83 ec 08             	sub    esp,0x8
c0009cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb8:	50                   	push   eax
c0009cb9:	e8 9a fe ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009cbe:	83 c4 10             	add    esp,0x10
c0009cc1:	ba 7c 37 02 c0       	mov    edx,0xc002377c
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	89 10                	mov    DWORD PTR [eax],edx
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009cda:	90                   	nop
c0009cdb:	83 c4 0c             	add    esp,0xc
c0009cde:	c3                   	ret    
c0009cdf:	90                   	nop

c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce0:	57                   	push   edi
c0009ce1:	56                   	push   esi
c0009ce2:	53                   	push   ebx
c0009ce3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ce7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009ceb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cef:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cf5:	75 0c                	jne    c0009d03 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cf7:	52                   	push   edx
c0009cf8:	52                   	push   edx
c0009cf9:	53                   	push   ebx
c0009cfa:	56                   	push   esi
c0009cfb:	e8 2c 80 01 00       	call   c0021d2c <LinkedList<Device>::addElement(Device*)>
c0009d00:	83 c4 10             	add    esp,0x10
c0009d03:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d0c:	74 12                	je     c0009d20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d0e:	50                   	push   eax
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d14:	e8 c7 ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	eb e9                	jmp    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d20:	5b                   	pop    ebx
c0009d21:	5e                   	pop    esi
c0009d22:	5f                   	pop    edi
c0009d23:	c3                   	ret    

c0009d24 <getDevicesOfType(DeviceType)>:
c0009d24:	53                   	push   ebx
c0009d25:	83 ec 14             	sub    esp,0x14
c0009d28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d2c:	53                   	push   ebx
c0009d2d:	e8 d6 80 01 00       	call   c0021e08 <LinkedList<Device>::LinkedList()>
c0009d32:	83 c4 0c             	add    esp,0xc
c0009d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d39:	53                   	push   ebx
c0009d3a:	ff 35 c8 c0 02 c0    	push   DWORD PTR ds:0xc002c0c8
c0009d40:	e8 9b ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d45:	83 c4 18             	add    esp,0x18
c0009d48:	89 d8                	mov    eax,ebx
c0009d4a:	5b                   	pop    ebx
c0009d4b:	c2 04 00             	ret    0x4
c0009d4e:	66 90                	xchg   ax,ax

c0009d50 <HardDiskController::HardDiskController(char const*)>:
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d57:	83 ec 08             	sub    esp,0x8
c0009d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5e:	50                   	push   eax
c0009d5f:	e8 f4 fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009d64:	83 c4 10             	add    esp,0x10
c0009d67:	ba a8 37 02 c0       	mov    edx,0xc00237a8
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	89 10                	mov    DWORD PTR [eax],edx
c0009d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d76:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop
c0009d86:	66 90                	xchg   ax,ax

c0009d88 <HardDiskController::~HardDiskController()>:
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	ba a8 37 02 c0       	mov    edx,0xc00237a8
c0009d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d94:	89 10                	mov    DWORD PTR [eax],edx
c0009d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9a:	83 ec 0c             	sub    esp,0xc
c0009d9d:	50                   	push   eax
c0009d9e:	e8 55 fb ff ff       	call   c00098f8 <Device::~Device()>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	90                   	nop
c0009da7:	83 c4 0c             	add    esp,0xc
c0009daa:	c3                   	ret    
c0009dab:	90                   	nop

c0009dac <HardDiskController::~HardDiskController()>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	83 ec 0c             	sub    esp,0xc
c0009db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db6:	e8 cd ff ff ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	83 ec 08             	sub    esp,0x8
c0009dc1:	68 58 01 00 00       	push   0x158
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	e8 26 35 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	83 c4 0c             	add    esp,0xc
c0009dd5:	c3                   	ret    

c0009dd6 <PhysicalDisk::eject()>:
c0009dd6:	83 c8 ff             	or     eax,0xffffffff
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dda:	83 ec 0c             	sub    esp,0xc
c0009ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de1:	83 ec 08             	sub    esp,0x8
c0009de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de8:	50                   	push   eax
c0009de9:	e8 6a fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009dee:	83 c4 10             	add    esp,0x10
c0009df1:	ba d4 37 02 c0       	mov    edx,0xc00237d4
c0009df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfa:	89 10                	mov    DWORD PTR [eax],edx
c0009dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e00:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e16:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e28:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e3c:	90                   	nop
c0009e3d:	83 c4 0c             	add    esp,0xc
c0009e40:	c3                   	ret    
c0009e41:	90                   	nop

c0009e42 <PhysicalDisk::startCache()>:
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	83 ec 10             	sub    esp,0x10
c0009e47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4b:	6a 44                	push   0x44
c0009e4d:	e8 5a 5b 00 00       	call   c000f9ac <malloc>
c0009e52:	89 c6                	mov    esi,eax
c0009e54:	58                   	pop    eax
c0009e55:	5a                   	pop    edx
c0009e56:	53                   	push   ebx
c0009e57:	56                   	push   esi
c0009e58:	e8 d3 13 00 00       	call   c000b230 <VCache::VCache(PhysicalDisk*)>
c0009e5d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e63:	83 c4 14             	add    esp,0x14
c0009e66:	5b                   	pop    ebx
c0009e67:	5e                   	pop    esi
c0009e68:	c3                   	ret    
c0009e69:	90                   	nop

c0009e6a <PhysicalDisk::~PhysicalDisk()>:
c0009e6a:	83 ec 0c             	sub    esp,0xc
c0009e6d:	ba d4 37 02 c0       	mov    edx,0xc00237d4
c0009e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e76:	89 10                	mov    DWORD PTR [eax],edx
c0009e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7c:	83 ec 0c             	sub    esp,0xc
c0009e7f:	50                   	push   eax
c0009e80:	e8 73 fa ff ff       	call   c00098f8 <Device::~Device()>
c0009e85:	83 c4 10             	add    esp,0x10
c0009e88:	90                   	nop
c0009e89:	83 c4 0c             	add    esp,0xc
c0009e8c:	c3                   	ret    
c0009e8d:	90                   	nop

c0009e8e <PhysicalDisk::~PhysicalDisk()>:
c0009e8e:	83 ec 0c             	sub    esp,0xc
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e98:	e8 cd ff ff ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	83 ec 08             	sub    esp,0x8
c0009ea3:	68 6c 01 00 00       	push   0x16c
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	e8 44 34 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	83 c4 0c             	add    esp,0xc
c0009eb7:	c3                   	ret    

c0009eb8 <startGUI(void*)>:
c0009eb8:	55                   	push   ebp
c0009eb9:	89 e5                	mov    ebp,esp
c0009ebb:	53                   	push   ebx
c0009ebc:	83 ec 04             	sub    esp,0x4
c0009ebf:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009ec7:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ecc:	85 c0                	test   eax,eax
c0009ece:	75 01                	jne    c0009ed1 <startGUI(void*)+0x19>
c0009ed0:	fb                   	sti    
c0009ed1:	8b 1d c8 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0c8
c0009ed7:	83 ec 08             	sub    esp,0x8
c0009eda:	6a 01                	push   0x1
c0009edc:	68 04 38 02 c0       	push   0xc0023804
c0009ee1:	e8 bd c4 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c0009ee6:	83 c4 10             	add    esp,0x10
c0009ee9:	83 ec 08             	sub    esp,0x8
c0009eec:	53                   	push   ebx
c0009eed:	50                   	push   eax
c0009eee:	e8 11 c7 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c0009ef3:	83 c4 10             	add    esp,0x10
c0009ef6:	8b 1d c8 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0c8
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	6a 01                	push   0x1
c0009f01:	68 1e 38 02 c0       	push   0xc002381e
c0009f06:	e8 98 c4 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c0009f0b:	83 c4 10             	add    esp,0x10
c0009f0e:	83 ec 08             	sub    esp,0x8
c0009f11:	53                   	push   ebx
c0009f12:	50                   	push   eax
c0009f13:	e8 ec c6 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c0009f18:	83 c4 10             	add    esp,0x10
c0009f1b:	eb fe                	jmp    c0009f1b <startGUI(void*)+0x63>

c0009f1d <startGUIVESA(void*)>:
c0009f1d:	55                   	push   ebp
c0009f1e:	89 e5                	mov    ebp,esp
c0009f20:	53                   	push   ebx
c0009f21:	83 ec 04             	sub    esp,0x4
c0009f24:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009f2c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009f31:	85 c0                	test   eax,eax
c0009f33:	75 01                	jne    c0009f36 <startGUIVESA(void*)+0x19>
c0009f35:	fb                   	sti    
c0009f36:	8b 1d c8 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0c8
c0009f3c:	83 ec 08             	sub    esp,0x8
c0009f3f:	6a 01                	push   0x1
c0009f41:	68 3c 38 02 c0       	push   0xc002383c
c0009f46:	e8 58 c4 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c0009f4b:	83 c4 10             	add    esp,0x10
c0009f4e:	83 ec 08             	sub    esp,0x8
c0009f51:	53                   	push   ebx
c0009f52:	50                   	push   eax
c0009f53:	e8 ac c6 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c0009f58:	83 c4 10             	add    esp,0x10
c0009f5b:	8b 1d c8 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0c8
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	6a 01                	push   0x1
c0009f66:	68 1e 38 02 c0       	push   0xc002381e
c0009f6b:	e8 33 c4 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	83 ec 08             	sub    esp,0x8
c0009f76:	53                   	push   ebx
c0009f77:	50                   	push   eax
c0009f78:	e8 87 c6 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c0009f7d:	83 c4 10             	add    esp,0x10
c0009f80:	eb fe                	jmp    c0009f80 <startGUIVESA(void*)+0x63>

c0009f82 <sendKeyToTerminal(unsigned char)>:
c0009f82:	55                   	push   ebp
c0009f83:	89 e5                	mov    ebp,esp
c0009f85:	83 ec 28             	sub    esp,0x28
c0009f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f8b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f8e:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0009f93:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f97:	83 ec 08             	sub    esp,0x8
c0009f9a:	52                   	push   edx
c0009f9b:	50                   	push   eax
c0009f9c:	e8 97 8b 00 00       	call   c0012b38 <VgaText::receiveKey(unsigned char)>
c0009fa1:	83 c4 10             	add    esp,0x10
c0009fa4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fa8:	83 f8 0a             	cmp    eax,0xa
c0009fab:	74 16                	je     c0009fc3 <sendKeyToTerminal(unsigned char)+0x41>
c0009fad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fb1:	83 f8 03             	cmp    eax,0x3
c0009fb4:	74 0d                	je     c0009fc3 <sendKeyToTerminal(unsigned char)+0x41>
c0009fb6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fba:	83 f8 1c             	cmp    eax,0x1c
c0009fbd:	0f 85 92 00 00 00    	jne    c000a055 <sendKeyToTerminal(unsigned char)+0xd3>
c0009fc3:	fa                   	cli    
c0009fc4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009fc9:	83 c0 01             	add    eax,0x1
c0009fcc:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0009fd1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fd6:	83 c0 01             	add    eax,0x1
c0009fd9:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009fde:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009fe3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fe6:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009ff0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009ff4:	74 1f                	je     c000a015 <sendKeyToTerminal(unsigned char)+0x93>
c0009ff6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ff9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009ffc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a005:	83 ec 0c             	sub    esp,0xc
c000a008:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a00b:	e8 88 d2 00 00       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c000a010:	83 c4 10             	add    esp,0x10
c000a013:	eb db                	jmp    c0009ff0 <sendKeyToTerminal(unsigned char)+0x6e>
c000a015:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a01a:	83 e8 01             	sub    eax,0x1
c000a01d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000a022:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a027:	85 c0                	test   eax,eax
c000a029:	75 18                	jne    c000a043 <sendKeyToTerminal(unsigned char)+0xc1>
c000a02b:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c000a030:	85 c0                	test   eax,eax
c000a032:	74 0f                	je     c000a043 <sendKeyToTerminal(unsigned char)+0xc1>
c000a034:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000a03e:	e8 fd ce 00 00       	call   c0016f40 <schedule()>
c000a043:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a04b:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a050:	85 c0                	test   eax,eax
c000a052:	75 01                	jne    c000a055 <sendKeyToTerminal(unsigned char)+0xd3>
c000a054:	fb                   	sti    
c000a055:	90                   	nop
c000a056:	c9                   	leave  
c000a057:	c3                   	ret    

c000a058 <sendKeyboardToken(KeyboardToken)>:
c000a058:	55                   	push   ebp
c000a059:	89 e5                	mov    ebp,esp
c000a05b:	83 ec 18             	sub    esp,0x18
c000a05e:	e8 ca 66 00 00       	call   c001072d <KeUserIOReceived()>
c000a063:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a069:	0f b7 c0             	movzx  eax,ax
c000a06c:	83 f2 01             	xor    edx,0x1
c000a06f:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a075:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a07a:	85 c0                	test   eax,eax
c000a07c:	74 24                	je     c000a0a2 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a07e:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a084:	83 ec 04             	sub    esp,0x4
c000a087:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a08c:	83 ec 08             	sub    esp,0x8
c000a08f:	89 e0                	mov    eax,esp
c000a091:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a094:	89 08                	mov    DWORD PTR [eax],ecx
c000a096:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a099:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a09d:	ff d2                	call   edx
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0a6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0a9:	0f b6 c0             	movzx  eax,al
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	0f 84 da 00 00 00    	je     c000a18e <sendKeyboardToken(KeyboardToken)+0x136>
c000a0b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0b7:	0f b7 c0             	movzx  eax,ax
c000a0ba:	3d 18 03 00 00       	cmp    eax,0x318
c000a0bf:	75 06                	jne    c000a0c7 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0c1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ca:	0f b7 c0             	movzx  eax,ax
c000a0cd:	3d 19 03 00 00       	cmp    eax,0x319
c000a0d2:	75 06                	jne    c000a0da <sendKeyboardToken(KeyboardToken)+0x82>
c000a0d4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0dd:	0f b7 c0             	movzx  eax,ax
c000a0e0:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0e5:	75 06                	jne    c000a0ed <sendKeyboardToken(KeyboardToken)+0x95>
c000a0e7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	0f b7 c0             	movzx  eax,ax
c000a0f3:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0f8:	75 06                	jne    c000a100 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0fa:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a103:	0f b7 c0             	movzx  eax,ax
c000a106:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a10b:	75 06                	jne    c000a113 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a10d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a116:	0f b7 c0             	movzx  eax,ax
c000a119:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a11e:	75 06                	jne    c000a126 <sendKeyboardToken(KeyboardToken)+0xce>
c000a120:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a129:	0f b7 c0             	movzx  eax,ax
c000a12c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a131:	75 06                	jne    c000a139 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a133:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13c:	0f b7 c0             	movzx  eax,ax
c000a13f:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a144:	75 06                	jne    c000a14c <sendKeyboardToken(KeyboardToken)+0xf4>
c000a146:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a14c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14f:	0f b7 c0             	movzx  eax,ax
c000a152:	3d 20 03 00 00       	cmp    eax,0x320
c000a157:	75 06                	jne    c000a15f <sendKeyboardToken(KeyboardToken)+0x107>
c000a159:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a162:	0f b7 c0             	movzx  eax,ax
c000a165:	3d 21 03 00 00       	cmp    eax,0x321
c000a16a:	75 06                	jne    c000a172 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a16c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a175:	0f b7 c0             	movzx  eax,ax
c000a178:	3d 22 03 00 00       	cmp    eax,0x322
c000a17d:	0f 85 f1 00 00 00    	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a183:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a189:	e9 e6 00 00 00       	jmp    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a18e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a191:	0f b7 c0             	movzx  eax,ax
c000a194:	3d 18 03 00 00       	cmp    eax,0x318
c000a199:	75 0a                	jne    c000a1a5 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a19b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a8:	0f b7 c0             	movzx  eax,ax
c000a1ab:	3d 19 03 00 00       	cmp    eax,0x319
c000a1b0:	75 0a                	jne    c000a1bc <sendKeyboardToken(KeyboardToken)+0x164>
c000a1b2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1bf:	0f b7 c0             	movzx  eax,ax
c000a1c2:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1c7:	75 0a                	jne    c000a1d3 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1c9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d6:	0f b7 c0             	movzx  eax,ax
c000a1d9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1de:	75 0a                	jne    c000a1ea <sendKeyboardToken(KeyboardToken)+0x192>
c000a1e0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1f7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a20e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a225:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a23c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 20 03 00 00       	cmp    eax,0x320
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x205>
c000a253:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 21 03 00 00       	cmp    eax,0x321
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a26a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 00 02 00 00       	cmp    eax,0x200
c000a27f:	75 2f                	jne    c000a2b0 <sendKeyboardToken(KeyboardToken)+0x258>
c000a281:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a286:	83 f0 01             	xor    eax,0x1
c000a289:	0f b6 c0             	movzx  eax,al
c000a28c:	85 c0                	test   eax,eax
c000a28e:	74 20                	je     c000a2b0 <sendKeyboardToken(KeyboardToken)+0x258>
c000a290:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a295:	6a 01                	push   0x1
c000a297:	6a 00                	push   0x0
c000a299:	68 b8 9e 00 c0       	push   0xc0009eb8
c000a29e:	50                   	push   eax
c000a29f:	e8 f4 c9 00 00       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c000a2a4:	83 c4 10             	add    esp,0x10
c000a2a7:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ae:	eb 3a                	jmp    c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b3:	0f b7 c0             	movzx  eax,ax
c000a2b6:	3d 01 02 00 00       	cmp    eax,0x201
c000a2bb:	75 2d                	jne    c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2bd:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2c2:	83 f0 01             	xor    eax,0x1
c000a2c5:	0f b6 c0             	movzx  eax,al
c000a2c8:	85 c0                	test   eax,eax
c000a2ca:	74 1e                	je     c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2cc:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a2d1:	6a 01                	push   0x1
c000a2d3:	6a 00                	push   0x0
c000a2d5:	68 1d 9f 00 c0       	push   0xc0009f1d
c000a2da:	50                   	push   eax
c000a2db:	e8 b8 c9 00 00       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c000a2e0:	83 c4 10             	add    esp,0x10
c000a2e3:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ed:	0f b7 c0             	movzx  eax,ax
c000a2f0:	3d 25 03 00 00       	cmp    eax,0x325
c000a2f5:	75 06                	jne    c000a2fd <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2f7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a300:	0f b7 c0             	movzx  eax,ax
c000a303:	3d 24 03 00 00       	cmp    eax,0x324
c000a308:	75 06                	jne    c000a310 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a30a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a313:	0f b7 c0             	movzx  eax,ax
c000a316:	3d 23 03 00 00       	cmp    eax,0x323
c000a31b:	75 06                	jne    c000a323 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a31d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a326:	0f b7 c0             	movzx  eax,ax
c000a329:	3d 26 03 00 00       	cmp    eax,0x326
c000a32e:	75 06                	jne    c000a336 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a330:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a339:	0f b7 c0             	movzx  eax,ax
c000a33c:	3d 27 03 00 00       	cmp    eax,0x327
c000a341:	75 06                	jne    c000a349 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a343:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a34c:	0f b7 c0             	movzx  eax,ax
c000a34f:	3d 22 03 00 00       	cmp    eax,0x322
c000a354:	75 06                	jne    c000a35c <sendKeyboardToken(KeyboardToken)+0x304>
c000a356:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a35c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a360:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a363:	83 f0 01             	xor    eax,0x1
c000a366:	0f b6 c0             	movzx  eax,al
c000a369:	85 c0                	test   eax,eax
c000a36b:	74 7c                	je     c000a3e9 <sendKeyboardToken(KeyboardToken)+0x391>
c000a36d:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a372:	0f b6 c0             	movzx  eax,al
c000a375:	85 c0                	test   eax,eax
c000a377:	74 43                	je     c000a3bc <sendKeyboardToken(KeyboardToken)+0x364>
c000a379:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a37d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a381:	85 c0                	test   eax,eax
c000a383:	74 2b                	je     c000a3b0 <sendKeyboardToken(KeyboardToken)+0x358>
c000a385:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a38b:	89 d0                	mov    eax,edx
c000a38d:	c1 e0 02             	shl    eax,0x2
c000a390:	01 d0                	add    eax,edx
c000a392:	d1 e0                	shl    eax,1
c000a394:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a39c:	0f b7 c0             	movzx  eax,ax
c000a39f:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3a2:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3a7:	01 d0                	add    eax,edx
c000a3a9:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3ae:	eb 71                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b0:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3ba:	eb 65                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3bc:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3c1:	85 c0                	test   eax,eax
c000a3c3:	74 18                	je     c000a3dd <sendKeyboardToken(KeyboardToken)+0x385>
c000a3c5:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ca:	0f b6 c0             	movzx  eax,al
c000a3cd:	83 ec 0c             	sub    esp,0xc
c000a3d0:	50                   	push   eax
c000a3d1:	e8 ac fb ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3dd:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3e7:	eb 38                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3ec:	0f b7 c0             	movzx  eax,ax
c000a3ef:	3d 01 01 00 00       	cmp    eax,0x101
c000a3f4:	75 2b                	jne    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3f6:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3fb:	85 c0                	test   eax,eax
c000a3fd:	74 18                	je     c000a417 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3ff:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a404:	0f b6 c0             	movzx  eax,al
c000a407:	83 ec 0c             	sub    esp,0xc
c000a40a:	50                   	push   eax
c000a40b:	e8 72 fb ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a410:	83 c4 10             	add    esp,0x10
c000a413:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a417:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a421:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a424:	83 f0 01             	xor    eax,0x1
c000a427:	0f b6 c0             	movzx  eax,al
c000a42a:	85 c0                	test   eax,eax
c000a42c:	74 5a                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a42e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a431:	83 f0 01             	xor    eax,0x1
c000a434:	0f b6 c0             	movzx  eax,al
c000a437:	85 c0                	test   eax,eax
c000a439:	74 4d                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a43b:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a440:	83 f0 01             	xor    eax,0x1
c000a443:	0f b6 c0             	movzx  eax,al
c000a446:	85 c0                	test   eax,eax
c000a448:	74 3e                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a44d:	0f b7 c0             	movzx  eax,ax
c000a450:	83 f8 1f             	cmp    eax,0x1f
c000a453:	76 0b                	jbe    c000a460 <sendKeyboardToken(KeyboardToken)+0x408>
c000a455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a458:	0f b7 c0             	movzx  eax,ax
c000a45b:	83 f8 7e             	cmp    eax,0x7e
c000a45e:	76 16                	jbe    c000a476 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a463:	0f b7 c0             	movzx  eax,ax
c000a466:	83 f8 0a             	cmp    eax,0xa
c000a469:	74 0b                	je     c000a476 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a46e:	0f b7 c0             	movzx  eax,ax
c000a471:	83 f8 08             	cmp    eax,0x8
c000a474:	75 12                	jne    c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a479:	0f b6 c0             	movzx  eax,al
c000a47c:	83 ec 0c             	sub    esp,0xc
c000a47f:	50                   	push   eax
c000a480:	e8 fd fa ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a485:	83 c4 10             	add    esp,0x10
c000a488:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a48b:	83 f0 01             	xor    eax,0x1
c000a48e:	0f b6 c0             	movzx  eax,al
c000a491:	85 c0                	test   eax,eax
c000a493:	74 5d                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a495:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a498:	83 f0 01             	xor    eax,0x1
c000a49b:	0f b6 c0             	movzx  eax,al
c000a49e:	85 c0                	test   eax,eax
c000a4a0:	74 50                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a2:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a4a7:	0f b6 c0             	movzx  eax,al
c000a4aa:	85 c0                	test   eax,eax
c000a4ac:	74 44                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b1:	0f b7 c0             	movzx  eax,ax
c000a4b4:	83 f8 3f             	cmp    eax,0x3f
c000a4b7:	76 39                	jbe    c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bc:	0f b7 c0             	movzx  eax,ax
c000a4bf:	83 f8 7f             	cmp    eax,0x7f
c000a4c2:	77 2e                	ja     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c7:	88 c2                	mov    dl,al
c000a4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4cc:	0f b7 c0             	movzx  eax,ax
c000a4cf:	83 f8 5f             	cmp    eax,0x5f
c000a4d2:	76 04                	jbe    c000a4d8 <sendKeyboardToken(KeyboardToken)+0x480>
c000a4d4:	b0 20                	mov    al,0x20
c000a4d6:	eb 02                	jmp    c000a4da <sendKeyboardToken(KeyboardToken)+0x482>
c000a4d8:	b0 00                	mov    al,0x0
c000a4da:	89 d1                	mov    ecx,edx
c000a4dc:	29 c1                	sub    ecx,eax
c000a4de:	89 c8                	mov    eax,ecx
c000a4e0:	83 e8 40             	sub    eax,0x40
c000a4e3:	0f b6 c0             	movzx  eax,al
c000a4e6:	83 ec 0c             	sub    esp,0xc
c000a4e9:	50                   	push   eax
c000a4ea:	e8 93 fa ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a4ef:	83 c4 10             	add    esp,0x10
c000a4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f5:	0f b7 c0             	movzx  eax,ax
c000a4f8:	3d 00 03 00 00       	cmp    eax,0x300
c000a4fd:	75 12                	jne    c000a511 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4ff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a502:	83 f0 01             	xor    eax,0x1
c000a505:	0f b6 c0             	movzx  eax,al
c000a508:	85 c0                	test   eax,eax
c000a50a:	74 05                	je     c000a511 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a50c:	e8 2c 7d 00 00       	call   c001223d <doTerminalCycle()>
c000a511:	90                   	nop
c000a512:	c9                   	leave  
c000a513:	c3                   	ret    

c000a514 <clearInternalKeybuffer(VgaText*)>:
c000a514:	55                   	push   ebp
c000a515:	89 e5                	mov    ebp,esp
c000a517:	83 ec 08             	sub    esp,0x8
c000a51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a51d:	05 02 01 00 00       	add    eax,0x102
c000a522:	83 ec 0c             	sub    esp,0xc
c000a525:	50                   	push   eax
c000a526:	e8 55 60 ff ff       	call   c0000580 <strlen>
c000a52b:	83 c4 10             	add    esp,0x10
c000a52e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a531:	81 c2 02 01 00 00    	add    edx,0x102
c000a537:	83 ec 04             	sub    esp,0x4
c000a53a:	50                   	push   eax
c000a53b:	6a 00                	push   0x0
c000a53d:	52                   	push   edx
c000a53e:	e8 ad 5f ff ff       	call   c00004f0 <memset>
c000a543:	83 c4 10             	add    esp,0x10
c000a546:	90                   	nop
c000a547:	c9                   	leave  
c000a548:	c3                   	ret    

c000a549 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a549:	55                   	push   ebp
c000a54a:	89 e5                	mov    ebp,esp
c000a54c:	83 ec 18             	sub    esp,0x18
c000a54f:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a554:	85 c0                	test   eax,eax
c000a556:	74 2a                	je     c000a582 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a558:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a55e:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a564:	83 ec 04             	sub    esp,0x4
c000a567:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 e0                	mov    eax,esp
c000a571:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a574:	89 08                	mov    DWORD PTR [eax],ecx
c000a576:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a579:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a57d:	ff d2                	call   edx
c000a57f:	83 c4 10             	add    esp,0x10
c000a582:	fb                   	sti    
c000a583:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a58a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a58e:	0f 84 08 01 00 00    	je     c000a69c <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a597:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a59d:	0f be c0             	movsx  eax,al
c000a5a0:	85 c0                	test   eax,eax
c000a5a2:	75 27                	jne    c000a5cb <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5a4:	fa                   	cli    
c000a5a5:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5aa:	83 c0 01             	add    eax,0x1
c000a5ad:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000a5b2:	e8 89 c9 00 00       	call   c0016f40 <schedule()>
c000a5b7:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a5bf:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5c4:	85 c0                	test   eax,eax
c000a5c6:	75 cc                	jne    c000a594 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5c8:	fb                   	sti    
c000a5c9:	eb c9                	jmp    c000a594 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5ce:	8d 50 01             	lea    edx,[eax+0x1]
c000a5d1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5d7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5dd:	88 10                	mov    BYTE PTR [eax],dl
c000a5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5e8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5eb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5ef:	83 f8 03             	cmp    eax,0x3
c000a5f2:	75 1e                	jne    c000a612 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5fe:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a604:	83 ec 08             	sub    esp,0x8
c000a607:	6a 02                	push   0x2
c000a609:	50                   	push   eax
c000a60a:	e8 b0 6a 00 00       	call   c00110bf <KeRaiseSignal(SigHandlerBlock*, int)>
c000a60f:	83 c4 10             	add    esp,0x10
c000a612:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a616:	83 f8 1c             	cmp    eax,0x1c
c000a619:	75 1e                	jne    c000a639 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a61b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a620:	8b 00                	mov    eax,DWORD PTR [eax]
c000a622:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a625:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a62b:	83 ec 08             	sub    esp,0x8
c000a62e:	6a 09                	push   0x9
c000a630:	50                   	push   eax
c000a631:	e8 89 6a 00 00       	call   c00110bf <KeRaiseSignal(SigHandlerBlock*, int)>
c000a636:	83 c4 10             	add    esp,0x10
c000a639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63c:	05 02 01 00 00       	add    eax,0x102
c000a641:	83 ec 0c             	sub    esp,0xc
c000a644:	50                   	push   eax
c000a645:	e8 36 5f ff ff       	call   c0000580 <strlen>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a650:	81 c2 02 01 00 00    	add    edx,0x102
c000a656:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a659:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a65c:	81 c2 02 01 00 00    	add    edx,0x102
c000a662:	83 ec 04             	sub    esp,0x4
c000a665:	50                   	push   eax
c000a666:	51                   	push   ecx
c000a667:	52                   	push   edx
c000a668:	e8 63 5d ff ff       	call   c00003d0 <memmove>
c000a66d:	83 c4 10             	add    esp,0x10
c000a670:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a674:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a678:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a67c:	83 f8 0a             	cmp    eax,0xa
c000a67f:	74 16                	je     c000a697 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a681:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a685:	83 f8 03             	cmp    eax,0x3
c000a688:	74 0d                	je     c000a697 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a68a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a68e:	83 f8 1c             	cmp    eax,0x1c
c000a691:	0f 85 f3 fe ff ff    	jne    c000a58a <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a697:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69a:	eb 03                	jmp    c000a69f <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a69c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69f:	c9                   	leave  
c000a6a0:	c3                   	ret    
c000a6a1:	90                   	nop

c000a6a2 <Keyboard::Keyboard(char const*)>:
c000a6a2:	83 ec 0c             	sub    esp,0xc
c000a6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a9:	83 ec 08             	sub    esp,0x8
c000a6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b0:	50                   	push   eax
c000a6b1:	e8 a2 f4 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	ba 60 38 02 c0       	mov    edx,0xc0023860
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	89 10                	mov    DWORD PTR [eax],edx
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6d2:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a6d9:	90                   	nop
c000a6da:	83 c4 0c             	add    esp,0xc
c000a6dd:	c3                   	ret    

c000a6de <Keyboard::~Keyboard()>:
c000a6de:	83 ec 0c             	sub    esp,0xc
c000a6e1:	ba 60 38 02 c0       	mov    edx,0xc0023860
c000a6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ea:	89 10                	mov    DWORD PTR [eax],edx
c000a6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f0:	83 ec 0c             	sub    esp,0xc
c000a6f3:	50                   	push   eax
c000a6f4:	e8 ff f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a6f9:	83 c4 10             	add    esp,0x10
c000a6fc:	90                   	nop
c000a6fd:	83 c4 0c             	add    esp,0xc
c000a700:	c3                   	ret    
c000a701:	90                   	nop

c000a702 <Keyboard::~Keyboard()>:
c000a702:	83 ec 0c             	sub    esp,0xc
c000a705:	83 ec 0c             	sub    esp,0xc
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	e8 cd ff ff ff       	call   c000a6de <Keyboard::~Keyboard()>
c000a711:	83 c4 10             	add    esp,0x10
c000a714:	83 ec 08             	sub    esp,0x8
c000a717:	68 5c 01 00 00       	push   0x15c
c000a71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a720:	e8 d0 2b 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000a725:	83 c4 10             	add    esp,0x10
c000a728:	83 c4 0c             	add    esp,0xc
c000a72b:	c3                   	ret    

c000a72c <LogicalDisk::close(int, int, void*)>:
c000a72c:	83 c8 ff             	or     eax,0xffffffff
c000a72f:	c3                   	ret    

c000a730 <LogicalDisk::~LogicalDisk()>:
c000a730:	83 ec 0c             	sub    esp,0xc
c000a733:	ba d8 38 02 c0       	mov    edx,0xc00238d8
c000a738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73c:	89 10                	mov    DWORD PTR [eax],edx
c000a73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	50                   	push   eax
c000a746:	e8 ad f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a74b:	83 c4 10             	add    esp,0x10
c000a74e:	90                   	nop
c000a74f:	83 c4 0c             	add    esp,0xc
c000a752:	c3                   	ret    
c000a753:	90                   	nop

c000a754 <LogicalDisk::~LogicalDisk()>:
c000a754:	83 ec 0c             	sub    esp,0xc
c000a757:	83 ec 0c             	sub    esp,0xc
c000a75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a75e:	e8 cd ff ff ff       	call   c000a730 <LogicalDisk::~LogicalDisk()>
c000a763:	83 c4 10             	add    esp,0x10
c000a766:	83 ec 08             	sub    esp,0x8
c000a769:	68 78 01 00 00       	push   0x178
c000a76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a772:	e8 7e 2b 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000a777:	83 c4 10             	add    esp,0x10
c000a77a:	83 c4 0c             	add    esp,0xc
c000a77d:	c3                   	ret    

c000a77e <LogicalDisk::open(int, int, void*)>:
c000a77e:	83 ec 18             	sub    esp,0x18
c000a781:	68 8c 38 02 c0       	push   0xc002388c
c000a786:	e8 77 56 00 00       	call   c000fe02 <KePanic(char const*)>
c000a78b:	83 c8 ff             	or     eax,0xffffffff
c000a78e:	83 c4 1c             	add    esp,0x1c
c000a791:	c3                   	ret    

c000a792 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a792:	53                   	push   ebx
c000a793:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a79b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a79f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7a5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7ab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7b1:	77 10                	ja     c000a7c3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7b3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7b9:	89 d3                	mov    ebx,edx
c000a7bb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7c1:	72 05                	jb     c000a7c8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7c3:	83 c8 ff             	or     eax,0xffffffff
c000a7c6:	89 c2                	mov    edx,eax
c000a7c8:	5b                   	pop    ebx
c000a7c9:	c3                   	ret    

c000a7ca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7ca:	56                   	push   esi
c000a7cb:	83 c8 ff             	or     eax,0xffffffff
c000a7ce:	53                   	push   ebx
c000a7cf:	89 c2                	mov    edx,eax
c000a7d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7e3:	77 27                	ja     c000a80c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7e5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7eb:	89 d8                	mov    eax,ebx
c000a7ed:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7f8:	89 c2                	mov    edx,eax
c000a7fa:	73 10                	jae    c000a80c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7fc:	89 c8                	mov    eax,ecx
c000a7fe:	89 da                	mov    edx,ebx
c000a800:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a806:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a80c:	5b                   	pop    ebx
c000a80d:	5e                   	pop    esi
c000a80e:	c3                   	ret    
c000a80f:	90                   	nop

c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a810:	83 ec 1c             	sub    esp,0x1c
c000a813:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a81f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a823:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a827:	89 04 24             	mov    DWORD PTR [esp],eax
c000a82a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a82e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a836:	83 ec 08             	sub    esp,0x8
c000a839:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a83d:	50                   	push   eax
c000a83e:	e8 15 f3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	ba d8 38 02 c0       	mov    edx,0xc00238d8
c000a84b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a84f:	89 10                	mov    DWORD PTR [eax],edx
c000a851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a855:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a860:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a876:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a880:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a88c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a892:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a898:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a89c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a89f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a3:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8a9:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8b7:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c1:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8cb:	90                   	nop
c000a8cc:	83 c4 1c             	add    esp,0x1c
c000a8cf:	c3                   	ret    

c000a8d0 <LogicalDisk::assignDriveLetter()>:
c000a8d0:	55                   	push   ebp
c000a8d1:	57                   	push   edi
c000a8d2:	56                   	push   esi
c000a8d3:	53                   	push   ebx
c000a8d4:	83 ec 14             	sub    esp,0x14
c000a8d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8db:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8e1:	b0 41                	mov    al,0x41
c000a8e3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8e9:	84 d2                	test   dl,dl
c000a8eb:	75 02                	jne    c000a8ef <LogicalDisk::assignDriveLetter()+0x1f>
c000a8ed:	b0 43                	mov    al,0x43
c000a8ef:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a8f5:	0f b6 ca             	movzx  ecx,dl
c000a8f8:	0f be e8             	movsx  ebp,al
c000a8fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8ff:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a903:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a909:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a90d:	3c 43                	cmp    al,0x43
c000a90f:	75 10                	jne    c000a921 <LogicalDisk::assignDriveLetter()+0x51>
c000a911:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a918:	75 5a                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a91a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a91f:	75 53                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a921:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a924:	ba 01 00 00 00       	mov    edx,0x1
c000a929:	89 34 24             	mov    DWORD PTR [esp],esi
c000a92c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a92f:	d3 e2                	shl    edx,cl
c000a931:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a935:	89 d7                	mov    edi,edx
c000a937:	89 d6                	mov    esi,edx
c000a939:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a93d:	c1 ff 1f             	sar    edi,0x1f
c000a940:	21 f9                	and    ecx,edi
c000a942:	09 d1                	or     ecx,edx
c000a944:	75 2e                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a946:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a94a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a94e:	09 f2                	or     edx,esi
c000a950:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a953:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a959:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a95d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a963:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a96a:	09 fa                	or     edx,edi
c000a96c:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a972:	eb 0d                	jmp    c000a981 <LogicalDisk::assignDriveLetter()+0xb1>
c000a974:	8d 50 01             	lea    edx,[eax+0x1]
c000a977:	45                   	inc    ebp
c000a978:	80 fa 5b             	cmp    dl,0x5b
c000a97b:	88 d0                	mov    al,dl
c000a97d:	75 8e                	jne    c000a90d <LogicalDisk::assignDriveLetter()+0x3d>
c000a97f:	31 c0                	xor    eax,eax
c000a981:	83 c4 14             	add    esp,0x14
c000a984:	5b                   	pop    ebx
c000a985:	5e                   	pop    esi
c000a986:	5f                   	pop    edi
c000a987:	5d                   	pop    ebp
c000a988:	c3                   	ret    
c000a989:	90                   	nop

c000a98a <LogicalDisk::mount()>:
c000a98a:	56                   	push   esi
c000a98b:	53                   	push   ebx
c000a98c:	53                   	push   ebx
c000a98d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a991:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a997:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9a1:	85 db                	test   ebx,ebx
c000a9a3:	74 27                	je     c000a9cc <LogicalDisk::mount()+0x42>
c000a9a5:	51                   	push   ecx
c000a9a6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9af:	83 e8 41             	sub    eax,0x41
c000a9b2:	50                   	push   eax
c000a9b3:	56                   	push   esi
c000a9b4:	53                   	push   ebx
c000a9b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9b8:	83 c4 10             	add    esp,0x10
c000a9bb:	84 c0                	test   al,al
c000a9bd:	74 08                	je     c000a9c7 <LogicalDisk::mount()+0x3d>
c000a9bf:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9c5:	eb 07                	jmp    c000a9ce <LogicalDisk::mount()+0x44>
c000a9c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9ca:	eb d5                	jmp    c000a9a1 <LogicalDisk::mount()+0x17>
c000a9cc:	31 c0                	xor    eax,eax
c000a9ce:	5a                   	pop    edx
c000a9cf:	5b                   	pop    ebx
c000a9d0:	5e                   	pop    esi
c000a9d1:	c3                   	ret    

c000a9d2 <LogicalDisk::unmount()>:
c000a9d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9d6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9e0:	c3                   	ret    
c000a9e1:	90                   	nop

c000a9e2 <LogicalDisk::eject()>:
c000a9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9f5:	90                   	nop

c000a9f6 <LogicalDisk::unassignDriveLetter()>:
c000a9f6:	57                   	push   edi
c000a9f7:	56                   	push   esi
c000a9f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9fc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa03:	85 c9                	test   ecx,ecx
c000aa05:	75 0f                	jne    c000aa16 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa07:	c7 44 24 0c b0 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc00238b0
c000aa0f:	5e                   	pop    esi
c000aa10:	5f                   	pop    edi
c000aa11:	e9 ec 53 00 00       	jmp    c000fe02 <KePanic(char const*)>
c000aa16:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa1d:	83 e9 41             	sub    ecx,0x41
c000aa20:	b8 01 00 00 00       	mov    eax,0x1
c000aa25:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa30:	d3 e0                	shl    eax,cl
c000aa32:	89 c7                	mov    edi,eax
c000aa34:	f7 d0                	not    eax
c000aa36:	c1 ff 1f             	sar    edi,0x1f
c000aa39:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa3f:	89 fe                	mov    esi,edi
c000aa41:	f7 d6                	not    esi
c000aa43:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aa49:	5e                   	pop    esi
c000aa4a:	5f                   	pop    edi
c000aa4b:	c3                   	ret    

c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa4c:	57                   	push   edi
c000aa4d:	56                   	push   esi
c000aa4e:	53                   	push   ebx
c000aa4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa65:	77 41                	ja     c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa67:	99                   	cdq    
c000aa68:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa6e:	01 c8                	add    eax,ecx
c000aa70:	11 da                	adc    edx,ebx
c000aa72:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa78:	19 d7                	sbb    edi,edx
c000aa7a:	72 33                	jb     c000aaaf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa7c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa82:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa8c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa90:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaa0:	5b                   	pop    ebx
c000aaa1:	5e                   	pop    esi
c000aaa2:	5f                   	pop    edi
c000aaa3:	e9 a2 0b 00 00       	jmp    c000b64a <VCache::read(unsigned long long, int, void*)>
c000aaa8:	b8 05 00 00 00       	mov    eax,0x5
c000aaad:	eb 05                	jmp    c000aab4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aaaf:	b8 07 00 00 00       	mov    eax,0x7
c000aab4:	5b                   	pop    ebx
c000aab5:	5e                   	pop    esi
c000aab6:	5f                   	pop    edi
c000aab7:	c3                   	ret    

c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aab8:	57                   	push   edi
c000aab9:	56                   	push   esi
c000aaba:	53                   	push   ebx
c000aabb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aabf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aac3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aacb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aad1:	77 41                	ja     c000ab14 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aad3:	99                   	cdq    
c000aad4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aada:	01 c8                	add    eax,ecx
c000aadc:	11 da                	adc    edx,ebx
c000aade:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aae4:	19 d7                	sbb    edi,edx
c000aae6:	72 33                	jb     c000ab1b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aae8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aaf8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aafc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab0c:	5b                   	pop    ebx
c000ab0d:	5e                   	pop    esi
c000ab0e:	5f                   	pop    edi
c000ab0f:	e9 68 09 00 00       	jmp    c000b47c <VCache::write(unsigned long long, int, void*)>
c000ab14:	b8 05 00 00 00       	mov    eax,0x5
c000ab19:	eb 05                	jmp    c000ab20 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab1b:	b8 07 00 00 00       	mov    eax,0x7
c000ab20:	5b                   	pop    ebx
c000ab21:	5e                   	pop    esi
c000ab22:	5f                   	pop    edi
c000ab23:	c3                   	ret    

c000ab24 <Mouse::Mouse(char const*)>:
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	50                   	push   eax
c000ab33:	e8 20 f0 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	ba 04 39 02 c0       	mov    edx,0xc0023904
c000ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab44:	89 10                	mov    DWORD PTR [eax],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab54:	90                   	nop
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	c3                   	ret    
c000ab59:	90                   	nop
c000ab5a:	66 90                	xchg   ax,ax

c000ab5c <Mouse::~Mouse()>:
c000ab5c:	83 ec 0c             	sub    esp,0xc
c000ab5f:	ba 04 39 02 c0       	mov    edx,0xc0023904
c000ab64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab68:	89 10                	mov    DWORD PTR [eax],edx
c000ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6e:	83 ec 0c             	sub    esp,0xc
c000ab71:	50                   	push   eax
c000ab72:	e8 81 ed ff ff       	call   c00098f8 <Device::~Device()>
c000ab77:	83 c4 10             	add    esp,0x10
c000ab7a:	90                   	nop
c000ab7b:	83 c4 0c             	add    esp,0xc
c000ab7e:	c3                   	ret    
c000ab7f:	90                   	nop

c000ab80 <Mouse::~Mouse()>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	83 ec 0c             	sub    esp,0xc
c000ab86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8a:	e8 cd ff ff ff       	call   c000ab5c <Mouse::~Mouse()>
c000ab8f:	83 c4 10             	add    esp,0x10
c000ab92:	83 ec 08             	sub    esp,0x8
c000ab95:	68 58 01 00 00       	push   0x158
c000ab9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9e:	e8 52 27 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000aba3:	83 c4 10             	add    esp,0x10
c000aba6:	83 c4 0c             	add    esp,0xc
c000aba9:	c3                   	ret    

c000abaa <NIC::getMAC()>:
c000abaa:	31 c0                	xor    eax,eax
c000abac:	31 d2                	xor    edx,edx
c000abae:	c3                   	ret    
c000abaf:	90                   	nop

c000abb0 <NIC::write(int, unsigned char*, int*)>:
c000abb0:	b8 01 00 00 00       	mov    eax,0x1
c000abb5:	c3                   	ret    

c000abb6 <NIC::NIC(char const*)>:
c000abb6:	83 ec 0c             	sub    esp,0xc
c000abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbd:	83 ec 08             	sub    esp,0x8
c000abc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc4:	50                   	push   eax
c000abc5:	e8 8e ef ff ff       	call   c0009b58 <Device::Device(char const*)>
c000abca:	83 c4 10             	add    esp,0x10
c000abcd:	ba 30 39 02 c0       	mov    edx,0xc0023930
c000abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd6:	89 10                	mov    DWORD PTR [eax],edx
c000abd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abdc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abe6:	90                   	nop
c000abe7:	83 c4 0c             	add    esp,0xc
c000abea:	c3                   	ret    
c000abeb:	90                   	nop

c000abec <NIC::~NIC()>:
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	ba 30 39 02 c0       	mov    edx,0xc0023930
c000abf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf8:	89 10                	mov    DWORD PTR [eax],edx
c000abfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfe:	83 ec 0c             	sub    esp,0xc
c000ac01:	50                   	push   eax
c000ac02:	e8 f1 ec ff ff       	call   c00098f8 <Device::~Device()>
c000ac07:	83 c4 10             	add    esp,0x10
c000ac0a:	90                   	nop
c000ac0b:	83 c4 0c             	add    esp,0xc
c000ac0e:	c3                   	ret    
c000ac0f:	90                   	nop

c000ac10 <NIC::~NIC()>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 0c             	sub    esp,0xc
c000ac16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1a:	e8 cd ff ff ff       	call   c000abec <NIC::~NIC()>
c000ac1f:	83 c4 10             	add    esp,0x10
c000ac22:	83 ec 08             	sub    esp,0x8
c000ac25:	68 58 01 00 00       	push   0x158
c000ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2e:	e8 c2 26 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	83 c4 0c             	add    esp,0xc
c000ac39:	c3                   	ret    

c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac3a:	55                   	push   ebp
c000ac3b:	57                   	push   edi
c000ac3c:	56                   	push   esi
c000ac3d:	53                   	push   ebx
c000ac3e:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac44:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000ac4b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000ac52:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000ac59:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac6f:	e8 e0 ef ff ff       	call   c0009c54 <Device::getName()>
c000ac74:	5a                   	pop    edx
c000ac75:	59                   	pop    ecx
c000ac76:	50                   	push   eax
c000ac77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac7b:	55                   	push   ebp
c000ac7c:	e8 cf 59 ff ff       	call   c0000650 <strcpy>
c000ac81:	5b                   	pop    ebx
c000ac82:	58                   	pop    eax
c000ac83:	68 5c 39 02 c0       	push   0xc002395c
c000ac88:	55                   	push   ebp
c000ac89:	e8 e2 5b ff ff       	call   c0000870 <strcat>
c000ac8e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac95:	e8 12 4d 00 00       	call   c000f9ac <malloc>
c000ac9a:	83 c4 0c             	add    esp,0xc
c000ac9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca5:	89 c3                	mov    ebx,eax
c000aca7:	57                   	push   edi
c000aca8:	56                   	push   esi
c000aca9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acb0:	55                   	push   ebp
c000acb1:	50                   	push   eax
c000acb2:	e8 59 fb ff ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acb7:	83 c4 14             	add    esp,0x14
c000acba:	53                   	push   ebx
c000acbb:	e8 10 fc ff ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c000acc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acc3:	e8 c2 fc ff ff       	call   c000a98a <LogicalDisk::mount()>
c000acc8:	58                   	pop    eax
c000acc9:	5a                   	pop    edx
c000acca:	53                   	push   ebx
c000accb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acd2:	e8 1f ed ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000acd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000acdd:	5b                   	pop    ebx
c000acde:	5e                   	pop    esi
c000acdf:	5f                   	pop    edi
c000ace0:	5d                   	pop    ebp
c000ace1:	c3                   	ret    

c000ace2 <createPartitionsForDisk(PhysicalDisk*)>:
c000ace2:	55                   	push   ebp
c000ace3:	57                   	push   edi
c000ace4:	56                   	push   esi
c000ace5:	53                   	push   ebx
c000ace6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acf3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acf9:	3d 00 02 00 00       	cmp    eax,0x200
c000acfe:	74 27                	je     c000ad27 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad00:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad06:	83 ec 10             	sub    esp,0x10
c000ad09:	99                   	cdq    
c000ad0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad10:	52                   	push   edx
c000ad11:	50                   	push   eax
c000ad12:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad16:	c1 e6 0a             	shl    esi,0xa
c000ad19:	89 fd                	mov    ebp,edi
c000ad1b:	55                   	push   ebp
c000ad1c:	56                   	push   esi
c000ad1d:	e8 92 6d 01 00       	call   c0021ab4 <__udivdi3>
c000ad22:	e9 b9 00 00 00       	jmp    c000ade0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad27:	83 ec 0c             	sub    esp,0xc
c000ad2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad2c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad30:	56                   	push   esi
c000ad31:	6a 01                	push   0x1
c000ad33:	6a 00                	push   0x0
c000ad35:	6a 00                	push   0x0
c000ad37:	53                   	push   ebx
c000ad38:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad3b:	83 c4 20             	add    esp,0x20
c000ad3e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad46:	75 0a                	jne    c000ad52 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad48:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad50:	74 2c                	je     c000ad7e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad52:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad58:	83 ec 10             	sub    esp,0x10
c000ad5b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad61:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad67:	89 f7                	mov    edi,esi
c000ad69:	c1 ff 1f             	sar    edi,0x1f
c000ad6c:	57                   	push   edi
c000ad6d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad71:	56                   	push   esi
c000ad72:	c1 e0 0a             	shl    eax,0xa
c000ad75:	52                   	push   edx
c000ad76:	50                   	push   eax
c000ad77:	e8 38 6d 01 00       	call   c0021ab4 <__udivdi3>
c000ad7c:	eb 62                	jmp    c000ade0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad7e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad85:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad8c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad93:	89 cf                	mov    edi,ecx
c000ad95:	83 e2 7f             	and    edx,0x7f
c000ad98:	83 e7 7f             	and    edi,0x7f
c000ad9b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad9e:	83 e0 7f             	and    eax,0x7f
c000ada1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ada4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000adab:	83 e0 7f             	and    eax,0x7f
c000adae:	01 d0                	add    eax,edx
c000adb0:	84 c0                	test   al,al
c000adb2:	89 c5                	mov    ebp,eax
c000adb4:	74 41                	je     c000adf7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adb6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adbc:	83 ec 10             	sub    esp,0x10
c000adbf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adc5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adcb:	89 f7                	mov    edi,esi
c000adcd:	c1 ff 1f             	sar    edi,0x1f
c000add0:	57                   	push   edi
c000add1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000add5:	56                   	push   esi
c000add6:	c1 e0 0a             	shl    eax,0xa
c000add9:	52                   	push   edx
c000adda:	50                   	push   eax
c000addb:	e8 d4 6c 01 00       	call   c0021ab4 <__udivdi3>
c000ade0:	83 c4 14             	add    esp,0x14
c000ade3:	52                   	push   edx
c000ade4:	50                   	push   eax
c000ade5:	6a 00                	push   0x0
c000ade7:	6a 00                	push   0x0
c000ade9:	53                   	push   ebx
c000adea:	e8 4b fe ff ff       	call   c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adef:	83 c4 20             	add    esp,0x20
c000adf2:	e9 73 01 00 00       	jmp    c000af6a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adf7:	89 f0                	mov    eax,esi
c000adf9:	31 c9                	xor    ecx,ecx
c000adfb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae02:	75 02                	jne    c000ae06 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae04:	89 cd                	mov    ebp,ecx
c000ae06:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae0e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae15:	83 c0 10             	add    eax,0x10
c000ae18:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae20:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ae27:	c1 e2 08             	shl    edx,0x8
c000ae2a:	c1 e6 10             	shl    esi,0x10
c000ae2d:	09 f2                	or     edx,esi
c000ae2f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ae36:	09 f2                	or     edx,esi
c000ae38:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae3f:	c1 e6 18             	shl    esi,0x18
c000ae42:	09 f2                	or     edx,esi
c000ae44:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae4b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae4f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae56:	c1 e6 10             	shl    esi,0x10
c000ae59:	c1 e2 08             	shl    edx,0x8
c000ae5c:	09 f2                	or     edx,esi
c000ae5e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae65:	09 f2                	or     edx,esi
c000ae67:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae6e:	c1 e6 18             	shl    esi,0x18
c000ae71:	09 f2                	or     edx,esi
c000ae73:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae77:	41                   	inc    ecx
c000ae78:	83 f9 04             	cmp    ecx,0x4
c000ae7b:	0f 85 7a ff ff ff    	jne    c000adfb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae85:	83 f0 01             	xor    eax,0x1
c000ae88:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae8c:	75 4f                	jne    c000aedd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae92:	83 f0 01             	xor    eax,0x1
c000ae95:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae99:	75 42                	jne    c000aedd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae9b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aea1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aea9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aeaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aeb7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aebd:	89 f7                	mov    edi,esi
c000aebf:	c1 ff 1f             	sar    edi,0x1f
c000aec2:	57                   	push   edi
c000aec3:	56                   	push   esi
c000aec4:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aec8:	52                   	push   edx
c000aec9:	c1 e0 0a             	shl    eax,0xa
c000aecc:	50                   	push   eax
c000aecd:	e8 e2 6b 01 00       	call   c0021ab4 <__udivdi3>
c000aed2:	83 c4 10             	add    esp,0x10
c000aed5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aed9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aedd:	89 e8                	mov    eax,ebp
c000aedf:	0f b6 e8             	movzx  ebp,al
c000aee2:	85 ed                	test   ebp,ebp
c000aee4:	74 50                	je     c000af36 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aeee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aef6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aefa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aefe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af02:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af16:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af1a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af1e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af26:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af2a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af2e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af32:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af36:	31 ed                	xor    ebp,ebp
c000af38:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af3c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af40:	89 f8                	mov    eax,edi
c000af42:	09 f0                	or     eax,esi
c000af44:	74 1e                	je     c000af64 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af46:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af4e:	89 d1                	mov    ecx,edx
c000af50:	09 c1                	or     ecx,eax
c000af52:	74 10                	je     c000af64 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af54:	83 ec 0c             	sub    esp,0xc
c000af57:	57                   	push   edi
c000af58:	56                   	push   esi
c000af59:	52                   	push   edx
c000af5a:	50                   	push   eax
c000af5b:	53                   	push   ebx
c000af5c:	e8 d9 fc ff ff       	call   c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af61:	83 c4 20             	add    esp,0x20
c000af64:	45                   	inc    ebp
c000af65:	83 fd 04             	cmp    ebp,0x4
c000af68:	75 ce                	jne    c000af38 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af6a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af70:	5b                   	pop    ebx
c000af71:	5e                   	pop    esi
c000af72:	5f                   	pop    edi
c000af73:	5d                   	pop    ebp
c000af74:	c3                   	ret    
c000af75:	66 90                	xchg   ax,ax
c000af77:	90                   	nop

c000af78 <Serial::Serial(char const*)>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	83 ec 08             	sub    esp,0x8
c000af82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af86:	50                   	push   eax
c000af87:	e8 cc eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	ba 70 39 02 c0       	mov    edx,0xc0023970
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	89 10                	mov    DWORD PTR [eax],edx
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afa8:	90                   	nop
c000afa9:	83 c4 0c             	add    esp,0xc
c000afac:	c3                   	ret    
c000afad:	90                   	nop
c000afae:	66 90                	xchg   ax,ax

c000afb0 <Serial::~Serial()>:
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	ba 70 39 02 c0       	mov    edx,0xc0023970
c000afb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbc:	89 10                	mov    DWORD PTR [eax],edx
c000afbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 2d e9 ff ff       	call   c00098f8 <Device::~Device()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	90                   	nop
c000afcf:	83 c4 0c             	add    esp,0xc
c000afd2:	c3                   	ret    
c000afd3:	90                   	nop

c000afd4 <Serial::~Serial()>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	83 ec 0c             	sub    esp,0xc
c000afda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afde:	e8 cd ff ff ff       	call   c000afb0 <Serial::~Serial()>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	83 ec 08             	sub    esp,0x8
c000afe9:	68 58 01 00 00       	push   0x158
c000afee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aff2:	e8 fe 22 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	83 c4 0c             	add    esp,0xc
c000affd:	c3                   	ret    
c000affe:	66 90                	xchg   ax,ax

c000b000 <Timer::Timer(char const*)>:
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b007:	83 ec 08             	sub    esp,0x8
c000b00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00e:	50                   	push   eax
c000b00f:	e8 44 eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b014:	83 c4 10             	add    esp,0x10
c000b017:	ba 50 3a 02 c0       	mov    edx,0xc0023a50
c000b01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b020:	89 10                	mov    DWORD PTR [eax],edx
c000b022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b026:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b030:	90                   	nop
c000b031:	83 c4 0c             	add    esp,0xc
c000b034:	c3                   	ret    
c000b035:	90                   	nop
c000b036:	66 90                	xchg   ax,ax

c000b038 <Timer::~Timer()>:
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	ba 50 3a 02 c0       	mov    edx,0xc0023a50
c000b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b044:	89 10                	mov    DWORD PTR [eax],edx
c000b046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04a:	83 ec 0c             	sub    esp,0xc
c000b04d:	50                   	push   eax
c000b04e:	e8 a5 e8 ff ff       	call   c00098f8 <Device::~Device()>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	90                   	nop
c000b057:	83 c4 0c             	add    esp,0xc
c000b05a:	c3                   	ret    
c000b05b:	90                   	nop

c000b05c <Timer::~Timer()>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	83 ec 0c             	sub    esp,0xc
c000b062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b066:	e8 cd ff ff ff       	call   c000b038 <Timer::~Timer()>
c000b06b:	83 c4 10             	add    esp,0x10
c000b06e:	83 ec 08             	sub    esp,0x8
c000b071:	68 5c 01 00 00       	push   0x15c
c000b076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b07a:	e8 76 22 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	83 c4 0c             	add    esp,0xc
c000b085:	c3                   	ret    

c000b086 <Timer::read()>:
c000b086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b090:	c3                   	ret    

c000b091 <setupTimer(int)>:
c000b091:	53                   	push   ebx
c000b092:	83 ec 14             	sub    esp,0x14
c000b095:	68 5c 01 00 00       	push   0x15c
c000b09a:	e8 0d 49 00 00       	call   c000f9ac <malloc>
c000b09f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0a2:	89 c3                	mov    ebx,eax
c000b0a4:	e8 bb 62 01 00       	call   c0021364 <PIT::PIT()>
c000b0a9:	58                   	pop    eax
c000b0aa:	5a                   	pop    edx
c000b0ab:	53                   	push   ebx
c000b0ac:	ff 35 c8 c0 02 c0    	push   DWORD PTR ds:0xc002c0c8
c000b0b2:	e8 3f e9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000b0b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b9:	6a 00                	push   0x0
c000b0bb:	6a 00                	push   0x0
c000b0bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0c1:	53                   	push   ebx
c000b0c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c5:	83 c4 28             	add    esp,0x28
c000b0c8:	89 d8                	mov    eax,ebx
c000b0ca:	5b                   	pop    ebx
c000b0cb:	c3                   	ret    

c000b0cc <timerHandler(unsigned int)>:
c000b0cc:	57                   	push   edi
c000b0cd:	31 d2                	xor    edx,edx
c000b0cf:	56                   	push   esi
c000b0d0:	53                   	push   ebx
c000b0d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0d5:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b0db:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b0e1:	80 3d cd c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0cd,0x0
c000b0e8:	75 12                	jne    c000b0fc <timerHandler(unsigned int)+0x30>
c000b0ea:	c7 44 24 10 ff 39 02 c0 	mov    DWORD PTR [esp+0x10],0xc00239ff
c000b0f2:	5b                   	pop    ebx
c000b0f3:	5e                   	pop    esi
c000b0f4:	5f                   	pop    edi
c000b0f5:	e9 6c be ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000b0fa:	66 90                	xchg   ax,ax
c000b0fc:	fa                   	cli    
c000b0fd:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000b103:	83 ec 0c             	sub    esp,0xc
c000b106:	68 40 ea 02 c0       	push   0xc002ea40
c000b10b:	e8 3c 6d 01 00       	call   c0021e4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	84 c0                	test   al,al
c000b115:	0f 85 a9 00 00 00    	jne    c000b1c4 <timerHandler(unsigned int)+0xf8>
c000b11b:	83 ec 0c             	sub    esp,0xc
c000b11e:	68 40 ea 02 c0       	push   0xc002ea40
c000b123:	e8 40 6d 01 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b128:	83 c4 10             	add    esp,0x10
c000b12b:	89 c6                	mov    esi,eax
c000b12d:	8d 76 00             	lea    esi,[esi+0x0]
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	68 40 ea 02 c0       	push   0xc002ea40
c000b138:	e8 2b 6d 01 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b13d:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b144:	89 c7                	mov    edi,eax
c000b146:	e8 25 6d 01 00       	call   c0021e70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b14b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b14e:	83 c4 10             	add    esp,0x10
c000b151:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b154:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b159:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b15f:	19 c8                	sbb    eax,ecx
c000b161:	72 21                	jb     c000b184 <timerHandler(unsigned int)+0xb8>
c000b163:	83 ec 0c             	sub    esp,0xc
c000b166:	57                   	push   edi
c000b167:	e8 2c c1 00 00       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	39 fe                	cmp    esi,edi
c000b171:	75 25                	jne    c000b198 <timerHandler(unsigned int)+0xcc>
c000b173:	83 ec 0c             	sub    esp,0xc
c000b176:	68 40 ea 02 c0       	push   0xc002ea40
c000b17b:	e8 e8 6c 01 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b180:	89 c6                	mov    esi,eax
c000b182:	eb 10                	jmp    c000b194 <timerHandler(unsigned int)+0xc8>
c000b184:	51                   	push   ecx
c000b185:	51                   	push   ecx
c000b186:	57                   	push   edi
c000b187:	68 40 ea 02 c0       	push   0xc002ea40
c000b18c:	e8 9b 6d 01 00       	call   c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b191:	8d 76 00             	lea    esi,[esi+0x0]
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	90                   	nop
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	68 40 ea 02 c0       	push   0xc002ea40
c000b1a0:	e8 a7 6c 01 00       	call   c0021e4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	84 c0                	test   al,al
c000b1aa:	75 18                	jne    c000b1c4 <timerHandler(unsigned int)+0xf8>
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	68 40 ea 02 c0       	push   0xc002ea40
c000b1b4:	e8 af 6c 01 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	39 f0                	cmp    eax,esi
c000b1be:	0f 85 6c ff ff ff    	jne    c000b130 <timerHandler(unsigned int)+0x64>
c000b1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b1cc:	85 c0                	test   eax,eax
c000b1ce:	74 48                	je     c000b218 <timerHandler(unsigned int)+0x14c>
c000b1d0:	80 3d cc c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0cc,0x0
c000b1d7:	74 3f                	je     c000b218 <timerHandler(unsigned int)+0x14c>
c000b1d9:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1de:	76 1c                	jbe    c000b1fc <timerHandler(unsigned int)+0x130>
c000b1e0:	52                   	push   edx
c000b1e1:	52                   	push   edx
c000b1e2:	50                   	push   eax
c000b1e3:	68 15 3a 02 c0       	push   0xc0023a15
c000b1e8:	e8 79 bd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b1ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1f2:	83 c4 10             	add    esp,0x10
c000b1f5:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b1fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b202:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b205:	89 c1                	mov    ecx,eax
c000b207:	29 d9                	sub    ecx,ebx
c000b209:	39 d8                	cmp    eax,ebx
c000b20b:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b20e:	77 08                	ja     c000b218 <timerHandler(unsigned int)+0x14c>
c000b210:	e8 2b bd 00 00       	call   c0016f40 <schedule()>
c000b215:	8d 76 00             	lea    esi,[esi+0x0]
c000b218:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000b21f:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000b226:	75 04                	jne    c000b22c <timerHandler(unsigned int)+0x160>
c000b228:	fb                   	sti    
c000b229:	8d 76 00             	lea    esi,[esi+0x0]
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	c3                   	ret    

c000b230 <VCache::VCache(PhysicalDisk*)>:
c000b230:	53                   	push   ebx
c000b231:	83 ec 18             	sub    esp,0x18
c000b234:	ba c0 3a 02 c0       	mov    edx,0xc0023ac0
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	89 10                	mov    DWORD PTR [eax],edx
c000b23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b243:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b24e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b259:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b260:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b272:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b288:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b290:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b297:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2c9:	83 ec 0c             	sub    esp,0xc
c000b2cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2d0:	e8 d7 46 00 00       	call   c000f9ac <malloc>
c000b2d5:	83 c4 10             	add    esp,0x10
c000b2d8:	89 c3                	mov    ebx,eax
c000b2da:	83 ec 0c             	sub    esp,0xc
c000b2dd:	53                   	push   ebx
c000b2de:	e8 05 4b 00 00       	call   c000fde8 <Mutex::Mutex()>
c000b2e3:	83 c4 10             	add    esp,0x10
c000b2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b303:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b307:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b30d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b311:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b314:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b318:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b31e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b324:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b328:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b32b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b332:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b336:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b340:	05 00 01 00 00       	add    eax,0x100
c000b345:	c1 e0 04             	shl    eax,0x4
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	50                   	push   eax
c000b34c:	e8 5b 46 00 00       	call   c000f9ac <malloc>
c000b351:	83 c4 10             	add    esp,0x10
c000b354:	89 c2                	mov    edx,eax
c000b356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b35a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b361:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b37a:	89 d0                	mov    eax,edx
c000b37c:	c1 e0 02             	shl    eax,0x2
c000b37f:	01 d0                	add    eax,edx
c000b381:	c1 e0 04             	shl    eax,0x4
c000b384:	83 ec 0c             	sub    esp,0xc
c000b387:	50                   	push   eax
c000b388:	e8 1f 46 00 00       	call   c000f9ac <malloc>
c000b38d:	83 c4 10             	add    esp,0x10
c000b390:	89 c2                	mov    edx,eax
c000b392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b396:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b399:	90                   	nop
c000b39a:	83 c4 18             	add    esp,0x18
c000b39d:	5b                   	pop    ebx
c000b39e:	c3                   	ret    
c000b39f:	90                   	nop

c000b3a0 <VCache::invalidateReadBuffer()>:
c000b3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3ae:	c3                   	ret    
c000b3af:	90                   	nop

c000b3b0 <VCache::writeWriteBuffer()>:
c000b3b0:	53                   	push   ebx
c000b3b1:	83 ec 08             	sub    esp,0x8
c000b3b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3bc:	74 1e                	je     c000b3dc <VCache::writeWriteBuffer()+0x2c>
c000b3be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3c1:	83 ec 0c             	sub    esp,0xc
c000b3c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3d2:	50                   	push   eax
c000b3d3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3d6:	83 c4 20             	add    esp,0x20
c000b3d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b3dc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3e3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3ea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3ee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3f5:	83 c4 08             	add    esp,0x8
c000b3f8:	5b                   	pop    ebx
c000b3f9:	c3                   	ret    
c000b3fa:	66 90                	xchg   ax,ax

c000b3fc <VCache::~VCache()>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	ba c0 3a 02 c0       	mov    edx,0xc0023ac0
c000b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b408:	89 10                	mov    DWORD PTR [eax],edx
c000b40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b411:	0f b6 c0             	movzx  eax,al
c000b414:	85 c0                	test   eax,eax
c000b416:	74 10                	je     c000b428 <VCache::~VCache()+0x2c>
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41f:	e8 8c ff ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	90                   	nop
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b42f:	83 ec 0c             	sub    esp,0xc
c000b432:	50                   	push   eax
c000b433:	e8 84 45 00 00       	call   c000f9bc <free>
c000b438:	83 c4 10             	add    esp,0x10
c000b43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b442:	83 ec 0c             	sub    esp,0xc
c000b445:	50                   	push   eax
c000b446:	e8 71 45 00 00       	call   c000f9bc <free>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	90                   	nop
c000b44f:	83 c4 0c             	add    esp,0xc
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <VCache::~VCache()>:
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	83 ec 0c             	sub    esp,0xc
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 99 ff ff ff       	call   c000b3fc <VCache::~VCache()>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 ec 08             	sub    esp,0x8
c000b469:	6a 44                	push   0x44
c000b46b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46f:	e8 81 1e 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000b474:	83 c4 10             	add    esp,0x10
c000b477:	83 c4 0c             	add    esp,0xc
c000b47a:	c3                   	ret    
c000b47b:	90                   	nop

c000b47c <VCache::write(unsigned long long, int, void*)>:
c000b47c:	55                   	push   ebp
c000b47d:	57                   	push   edi
c000b47e:	56                   	push   esi
c000b47f:	53                   	push   ebx
c000b480:	83 ec 1c             	sub    esp,0x1c
c000b483:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b487:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b48b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b48f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b493:	e8 b8 b7 00 00       	call   c0016c50 <KeDisablePreemption()>
c000b498:	b9 00 10 00 00       	mov    ecx,0x1000
c000b49d:	50                   	push   eax
c000b49e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4a1:	0f af c3             	imul   eax,ebx
c000b4a4:	05 ff 0f 00 00       	add    eax,0xfff
c000b4a9:	99                   	cdq    
c000b4aa:	f7 f9                	idiv   ecx
c000b4ac:	50                   	push   eax
c000b4ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4b1:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4b7:	e8 92 8c 00 00       	call   c001414e <VAS::canLockPages(unsigned long, int)>
c000b4bc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4c8:	74 2a                	je     c000b4f4 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4ca:	50                   	push   eax
c000b4cb:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4d3:	0f af c3             	imul   eax,ebx
c000b4d6:	05 ff 0f 00 00       	add    eax,0xfff
c000b4db:	99                   	cdq    
c000b4dc:	f7 f9                	idiv   ecx
c000b4de:	50                   	push   eax
c000b4df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4e3:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4e9:	e8 ea 8e 00 00       	call   c00143d8 <VAS::lockPages(unsigned long, int)>
c000b4ee:	83 c4 10             	add    esp,0x10
c000b4f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f4:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4f8:	74 0e                	je     c000b508 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	55                   	push   ebp
c000b4fe:	e8 9d fe ff ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	66 90                	xchg   ax,ax
c000b508:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b50c:	74 72                	je     c000b580 <VCache::write(unsigned long long, int, void*)+0x104>
c000b50e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b511:	89 c8                	mov    eax,ecx
c000b513:	99                   	cdq    
c000b514:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b517:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b526:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b52a:	31 f0                	xor    eax,esi
c000b52c:	31 fa                	xor    edx,edi
c000b52e:	09 d0                	or     eax,edx
c000b530:	75 42                	jne    c000b574 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b532:	83 fb 01             	cmp    ebx,0x1
c000b535:	75 3d                	jne    c000b574 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b53a:	89 cf                	mov    edi,ecx
c000b53c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b540:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b546:	0f af f8             	imul   edi,eax
c000b549:	89 c1                	mov    ecx,eax
c000b54b:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b54e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b550:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b553:	40                   	inc    eax
c000b554:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b557:	83 f8 50             	cmp    eax,0x50
c000b55a:	0f 85 a8 00 00 00    	jne    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b560:	83 ec 0c             	sub    esp,0xc
c000b563:	55                   	push   ebp
c000b564:	e8 47 fe ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b569:	83 c4 10             	add    esp,0x10
c000b56c:	e9 97 00 00 00       	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b571:	8d 76 00             	lea    esi,[esi+0x0]
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	55                   	push   ebp
c000b578:	e8 33 fe ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b57d:	83 c4 10             	add    esp,0x10
c000b580:	83 fb 4f             	cmp    ebx,0x4f
c000b583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b586:	7f 20                	jg     c000b5a8 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b588:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b58b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b58f:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b592:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b595:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b598:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b59c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5a4:	eb 62                	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5a6:	66 90                	xchg   ax,ax
c000b5a8:	83 ec 0c             	sub    esp,0xc
c000b5ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5b1:	53                   	push   ebx
c000b5b2:	57                   	push   edi
c000b5b3:	56                   	push   esi
c000b5b4:	50                   	push   eax
c000b5b5:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5b8:	83 c4 20             	add    esp,0x20
c000b5bb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5c0:	89 c6                	mov    esi,eax
c000b5c2:	74 28                	je     c000b5ec <VCache::write(unsigned long long, int, void*)+0x170>
c000b5c4:	52                   	push   edx
c000b5c5:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5ca:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5ce:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5d4:	99                   	cdq    
c000b5d5:	f7 f9                	idiv   ecx
c000b5d7:	50                   	push   eax
c000b5d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5dc:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b5e2:	e8 a3 8b 00 00       	call   c001418a <VAS::unlockPages(unsigned long, int)>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	66 90                	xchg   ax,ax
c000b5ec:	e8 87 b6 00 00       	call   c0016c78 <KeRestorePreemption()>
c000b5f1:	85 f6                	test   esi,esi
c000b5f3:	74 4b                	je     c000b640 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5f5:	83 ec 0c             	sub    esp,0xc
c000b5f8:	68 78 3a 02 c0       	push   0xc0023a78
c000b5fd:	e8 64 b9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b602:	83 c4 10             	add    esp,0x10
c000b605:	eb 39                	jmp    c000b640 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b607:	90                   	nop
c000b608:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b60d:	74 29                	je     c000b638 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b60f:	50                   	push   eax
c000b610:	b9 00 10 00 00       	mov    ecx,0x1000
c000b615:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b619:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b61f:	99                   	cdq    
c000b620:	f7 f9                	idiv   ecx
c000b622:	50                   	push   eax
c000b623:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b627:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b62d:	e8 58 8b 00 00       	call   c001418a <VAS::unlockPages(unsigned long, int)>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8d 76 00             	lea    esi,[esi+0x0]
c000b638:	e8 3b b6 00 00       	call   c0016c78 <KeRestorePreemption()>
c000b63d:	31 f6                	xor    esi,esi
c000b63f:	90                   	nop
c000b640:	83 c4 1c             	add    esp,0x1c
c000b643:	89 f0                	mov    eax,esi
c000b645:	5b                   	pop    ebx
c000b646:	5e                   	pop    esi
c000b647:	5f                   	pop    edi
c000b648:	5d                   	pop    ebp
c000b649:	c3                   	ret    

c000b64a <VCache::read(unsigned long long, int, void*)>:
c000b64a:	55                   	push   ebp
c000b64b:	bd 00 10 00 00       	mov    ebp,0x1000
c000b650:	57                   	push   edi
c000b651:	56                   	push   esi
c000b652:	53                   	push   ebx
c000b653:	83 ec 2c             	sub    esp,0x2c
c000b656:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b65a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b65e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b662:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66e:	e8 dd b5 00 00       	call   c0016c50 <KeDisablePreemption()>
c000b673:	50                   	push   eax
c000b674:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b677:	0f af c6             	imul   eax,esi
c000b67a:	05 ff 0f 00 00       	add    eax,0xfff
c000b67f:	99                   	cdq    
c000b680:	f7 fd                	idiv   ebp
c000b682:	50                   	push   eax
c000b683:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b687:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b68d:	e8 bc 8a 00 00       	call   c001414e <VAS::canLockPages(unsigned long, int)>
c000b692:	83 c4 10             	add    esp,0x10
c000b695:	84 c0                	test   al,al
c000b697:	89 c7                	mov    edi,eax
c000b699:	74 25                	je     c000b6c0 <VCache::read(unsigned long long, int, void*)+0x76>
c000b69b:	50                   	push   eax
c000b69c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b69f:	0f af c6             	imul   eax,esi
c000b6a2:	05 ff 0f 00 00       	add    eax,0xfff
c000b6a7:	99                   	cdq    
c000b6a8:	f7 fd                	idiv   ebp
c000b6aa:	50                   	push   eax
c000b6ab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b6af:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b6b5:	e8 1e 8d 00 00       	call   c00143d8 <VAS::lockPages(unsigned long, int)>
c000b6ba:	83 c4 10             	add    esp,0x10
c000b6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b6c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6c4:	74 0e                	je     c000b6d4 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	53                   	push   ebx
c000b6ca:	e8 e1 fc ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	66 90                	xchg   ax,ax
c000b6d4:	83 fe 01             	cmp    esi,0x1
c000b6d7:	0f 85 fb 00 00 00    	jne    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6e0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b6e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6eb:	0f 85 e7 00 00 00    	jne    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6f1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b6f4:	89 ee                	mov    esi,ebp
c000b6f6:	f7 de                	neg    esi
c000b6f8:	89 f0                	mov    eax,esi
c000b6fa:	c1 f8 1f             	sar    eax,0x1f
c000b6fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b701:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b705:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b709:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b70d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b711:	89 ca                	mov    edx,ecx
c000b713:	89 f9                	mov    ecx,edi
c000b715:	0f b6 f9             	movzx  edi,cl
c000b718:	89 f0                	mov    eax,esi
c000b71a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b71e:	74 0c                	je     c000b72c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b720:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b723:	75 07                	jne    c000b72c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b725:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b728:	74 56                	je     c000b780 <VCache::read(unsigned long long, int, void*)+0x136>
c000b72a:	66 90                	xchg   ax,ax
c000b72c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b736:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b73a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b73d:	8b 37                	mov    esi,DWORD PTR [edi]
c000b73f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b742:	55                   	push   ebp
c000b743:	52                   	push   edx
c000b744:	50                   	push   eax
c000b745:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b749:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b74c:	83 c4 20             	add    esp,0x20
c000b74f:	85 c0                	test   eax,eax
c000b751:	89 c5                	mov    ebp,eax
c000b753:	74 2b                	je     c000b780 <VCache::read(unsigned long long, int, void*)+0x136>
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	68 90 3a 02 c0       	push   0xc0023a90
c000b75d:	e8 04 b8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b762:	83 c4 10             	add    esp,0x10
c000b765:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b76a:	0f 84 bc 00 00 00    	je     c000b82c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b770:	56                   	push   esi
c000b771:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b774:	05 ff 0f 00 00       	add    eax,0xfff
c000b779:	e9 92 00 00 00       	jmp    c000b810 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b77e:	66 90                	xchg   ax,ax
c000b780:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b783:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b787:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b78d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b790:	8d 70 ff             	lea    esi,[eax-0x1]
c000b793:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b797:	0f af f1             	imul   esi,ecx
c000b79a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b79d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b79f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b7a4:	74 26                	je     c000b7cc <VCache::read(unsigned long long, int, void*)+0x182>
c000b7a6:	51                   	push   ecx
c000b7a7:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7af:	05 ff 0f 00 00       	add    eax,0xfff
c000b7b4:	99                   	cdq    
c000b7b5:	f7 f9                	idiv   ecx
c000b7b7:	50                   	push   eax
c000b7b8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7bc:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b7c2:	e8 c3 89 00 00       	call   c001418a <VAS::unlockPages(unsigned long, int)>
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	66 90                	xchg   ax,ax
c000b7cc:	e8 a7 b4 00 00       	call   c0016c78 <KeRestorePreemption()>
c000b7d1:	31 ed                	xor    ebp,ebp
c000b7d3:	eb 5f                	jmp    c000b834 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b7d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	53                   	push   ebx
c000b7dc:	e8 bf fb ff ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c000b7e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7e4:	5a                   	pop    edx
c000b7e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b7eb:	56                   	push   esi
c000b7ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7f4:	50                   	push   eax
c000b7f5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7f8:	83 c4 20             	add    esp,0x20
c000b7fb:	89 c5                	mov    ebp,eax
c000b7fd:	89 f8                	mov    eax,edi
c000b7ff:	84 c0                	test   al,al
c000b801:	74 29                	je     c000b82c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b803:	50                   	push   eax
c000b804:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b808:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b80e:	66 90                	xchg   ax,ax
c000b810:	b9 00 10 00 00       	mov    ecx,0x1000
c000b815:	99                   	cdq    
c000b816:	f7 f9                	idiv   ecx
c000b818:	50                   	push   eax
c000b819:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b81d:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b823:	e8 62 89 00 00       	call   c001418a <VAS::unlockPages(unsigned long, int)>
c000b828:	83 c4 10             	add    esp,0x10
c000b82b:	90                   	nop
c000b82c:	e8 47 b4 00 00       	call   c0016c78 <KeRestorePreemption()>
c000b831:	8d 76 00             	lea    esi,[esi+0x0]
c000b834:	83 c4 2c             	add    esp,0x2c
c000b837:	89 e8                	mov    eax,ebp
c000b839:	5b                   	pop    ebx
c000b83a:	5e                   	pop    esi
c000b83b:	5f                   	pop    edi
c000b83c:	5d                   	pop    ebp
c000b83d:	c3                   	ret    

c000b83e <Video::putrect(int, int, int, int, unsigned int)>:
c000b83e:	55                   	push   ebp
c000b83f:	57                   	push   edi
c000b840:	56                   	push   esi
c000b841:	53                   	push   ebx
c000b842:	83 ec 1c             	sub    esp,0x1c
c000b845:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b849:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b84d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b851:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b855:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b85d:	01 df                	add    edi,ebx
c000b85f:	39 fb                	cmp    ebx,edi
c000b861:	7d 1f                	jge    c000b882 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b863:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b867:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b86b:	7d 12                	jge    c000b87f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b86d:	8b 16                	mov    edx,DWORD PTR [esi]
c000b86f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b873:	53                   	push   ebx
c000b874:	55                   	push   ebp
c000b875:	45                   	inc    ebp
c000b876:	56                   	push   esi
c000b877:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b87a:	83 c4 10             	add    esp,0x10
c000b87d:	eb e8                	jmp    c000b867 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b87f:	43                   	inc    ebx
c000b880:	eb dd                	jmp    c000b85f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b882:	83 c4 1c             	add    esp,0x1c
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	31 ff                	xor    edi,edi
c000b88e:	56                   	push   esi
c000b88f:	53                   	push   ebx
c000b890:	83 ec 1c             	sub    esp,0x1c
c000b893:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b897:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b89b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8a2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8af:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8b3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8b6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8ba:	01 f9                	add    ecx,edi
c000b8bc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8c0:	7d 2f                	jge    c000b8f1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8c2:	31 f6                	xor    esi,esi
c000b8c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8c8:	01 f2                	add    edx,esi
c000b8ca:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8ce:	7d 1a                	jge    c000b8ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8d3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8d6:	46                   	inc    esi
c000b8d7:	51                   	push   ecx
c000b8d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8dc:	52                   	push   edx
c000b8dd:	55                   	push   ebp
c000b8de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8e1:	83 c4 10             	add    esp,0x10
c000b8e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8e8:	eb da                	jmp    c000b8c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8ea:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8ee:	47                   	inc    edi
c000b8ef:	eb c5                	jmp    c000b8b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8f1:	83 c4 1c             	add    esp,0x1c
c000b8f4:	5b                   	pop    ebx
c000b8f5:	5e                   	pop    esi
c000b8f6:	5f                   	pop    edi
c000b8f7:	5d                   	pop    ebp
c000b8f8:	c3                   	ret    
c000b8f9:	90                   	nop

c000b8fa <Video::blit(unsigned int*, int, int, int, int)>:
c000b8fa:	55                   	push   ebp
c000b8fb:	ba 00 00 00 00       	mov    edx,0x0
c000b900:	57                   	push   edi
c000b901:	56                   	push   esi
c000b902:	53                   	push   ebx
c000b903:	83 ec 1c             	sub    esp,0x1c
c000b906:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b90a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b90e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b912:	85 c0                	test   eax,eax
c000b914:	0f 49 d0             	cmovns edx,eax
c000b917:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b91e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b922:	89 eb                	mov    ebx,ebp
c000b924:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b928:	01 ea                	add    edx,ebp
c000b92a:	39 da                	cmp    edx,ebx
c000b92c:	7e 54                	jle    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b92e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b934:	7c 4c                	jl     c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b936:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b93a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b93e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b942:	01 c1                	add    ecx,eax
c000b944:	39 f9                	cmp    ecx,edi
c000b946:	7e 2f                	jle    c000b977 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b948:	83 c2 04             	add    edx,0x4
c000b94b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b951:	7c 21                	jl     c000b974 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b953:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b957:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b959:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b95c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b960:	55                   	push   ebp
c000b961:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b965:	56                   	push   esi
c000b966:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b970:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b974:	47                   	inc    edi
c000b975:	eb c7                	jmp    c000b93e <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b977:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b97b:	43                   	inc    ebx
c000b97c:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b980:	eb a2                	jmp    c000b924 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b982:	83 c4 1c             	add    esp,0x1c
c000b985:	5b                   	pop    ebx
c000b986:	5e                   	pop    esi
c000b987:	5f                   	pop    edi
c000b988:	5d                   	pop    ebp
c000b989:	c3                   	ret    

c000b98a <Video::clearScreen(unsigned int)>:
c000b98a:	57                   	push   edi
c000b98b:	56                   	push   esi
c000b98c:	53                   	push   ebx
c000b98d:	31 db                	xor    ebx,ebx
c000b98f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b993:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b999:	7e 1f                	jle    c000b9ba <Video::clearScreen(unsigned int)+0x30>
c000b99b:	31 ff                	xor    edi,edi
c000b99d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9a3:	7e 12                	jle    c000b9b7 <Video::clearScreen(unsigned int)+0x2d>
c000b9a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ab:	53                   	push   ebx
c000b9ac:	57                   	push   edi
c000b9ad:	47                   	inc    edi
c000b9ae:	56                   	push   esi
c000b9af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9b2:	83 c4 10             	add    esp,0x10
c000b9b5:	eb e6                	jmp    c000b99d <Video::clearScreen(unsigned int)+0x13>
c000b9b7:	43                   	inc    ebx
c000b9b8:	eb d9                	jmp    c000b993 <Video::clearScreen(unsigned int)+0x9>
c000b9ba:	5b                   	pop    ebx
c000b9bb:	5e                   	pop    esi
c000b9bc:	5f                   	pop    edi
c000b9bd:	c3                   	ret    

c000b9be <Video::putpixel(int, int, unsigned int)>:
c000b9be:	c7 44 24 04 c8 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023ac8
c000b9c6:	e9 37 44 00 00       	jmp    c000fe02 <KePanic(char const*)>
c000b9cb:	90                   	nop

c000b9cc <Video::readPixelApprox(int, int)>:
c000b9cc:	83 ec 18             	sub    esp,0x18
c000b9cf:	68 e9 3a 02 c0       	push   0xc0023ae9
c000b9d4:	e8 29 44 00 00       	call   c000fe02 <KePanic(char const*)>
c000b9d9:	31 c0                	xor    eax,eax
c000b9db:	83 c4 1c             	add    esp,0x1c
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <Video::Video(char const*)>:
c000b9e0:	83 ec 0c             	sub    esp,0xc
c000b9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e7:	83 ec 08             	sub    esp,0x8
c000b9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ee:	50                   	push   eax
c000b9ef:	e8 64 e1 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b9f4:	83 c4 10             	add    esp,0x10
c000b9f7:	ba 8c 3b 02 c0       	mov    edx,0xc0023b8c
c000b9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba00:	89 10                	mov    DWORD PTR [eax],edx
c000ba02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba06:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba10:	90                   	nop
c000ba11:	83 c4 0c             	add    esp,0xc
c000ba14:	c3                   	ret    
c000ba15:	90                   	nop

c000ba16 <Video::~Video()>:
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	ba 8c 3b 02 c0       	mov    edx,0xc0023b8c
c000ba1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba22:	89 10                	mov    DWORD PTR [eax],edx
c000ba24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	50                   	push   eax
c000ba2c:	e8 c7 de ff ff       	call   c00098f8 <Device::~Device()>
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	90                   	nop
c000ba35:	83 c4 0c             	add    esp,0xc
c000ba38:	c3                   	ret    
c000ba39:	90                   	nop

c000ba3a <Video::~Video()>:
c000ba3a:	83 ec 0c             	sub    esp,0xc
c000ba3d:	83 ec 0c             	sub    esp,0xc
c000ba40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba44:	e8 cd ff ff ff       	call   c000ba16 <Video::~Video()>
c000ba49:	83 c4 10             	add    esp,0x10
c000ba4c:	83 ec 08             	sub    esp,0x8
c000ba4f:	68 64 01 00 00       	push   0x164
c000ba54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba58:	e8 98 18 00 00       	call   c000d2f5 <operator delete(void*, unsigned long)>
c000ba5d:	83 c4 10             	add    esp,0x10
c000ba60:	83 c4 0c             	add    esp,0xc
c000ba63:	c3                   	ret    

c000ba64 <Video::isMonochrome()>:
c000ba64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba68:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba6e:	c3                   	ret    
c000ba6f:	90                   	nop

c000ba70 <Video::getWidth()>:
c000ba70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba7a:	c3                   	ret    
c000ba7b:	90                   	nop

c000ba7c <Video::getHeight()>:
c000ba7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba86:	c3                   	ret    
c000ba87:	90                   	nop

c000ba88 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba88:	55                   	push   ebp
c000ba89:	57                   	push   edi
c000ba8a:	56                   	push   esi
c000ba8b:	53                   	push   ebx
c000ba8c:	83 ec 2c             	sub    esp,0x2c
c000ba8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba93:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ba97:	83 f8 01             	cmp    eax,0x1
c000ba9a:	19 c9                	sbb    ecx,ecx
c000ba9c:	31 db                	xor    ebx,ebx
c000ba9e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000baa2:	89 ce                	mov    esi,ecx
c000baa4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000baac:	f7 d6                	not    esi
c000baae:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000bab4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bab8:	01 d8                	add    eax,ebx
c000baba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000babe:	57                   	push   edi
c000babf:	e8 b8 ff ff ff       	call   c000ba7c <Video::getHeight()>
c000bac4:	59                   	pop    ecx
c000bac5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bac9:	7e 70                	jle    c000bb3b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bacb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bacf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000bad3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bad6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bada:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bade:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae9:	89 e8                	mov    eax,ebp
c000baeb:	83 c0 20             	add    eax,0x20
c000baee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000baf2:	57                   	push   edi
c000baf3:	e8 78 ff ff ff       	call   c000ba70 <Video::getWidth()>
c000baf8:	5a                   	pop    edx
c000baf9:	39 c5                	cmp    ebp,eax
c000bafb:	7d 34                	jge    c000bb31 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bafd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb02:	74 05                	je     c000bb09 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb04:	8b 07                	mov    eax,DWORD PTR [edi]
c000bb06:	56                   	push   esi
c000bb07:	eb 0d                	jmp    c000bb16 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb09:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb0e:	74 12                	je     c000bb22 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb10:	8b 07                	mov    eax,DWORD PTR [edi]
c000bb12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb1a:	55                   	push   ebp
c000bb1b:	57                   	push   edi
c000bb1c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb1f:	83 c4 10             	add    esp,0x10
c000bb22:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb26:	45                   	inc    ebp
c000bb27:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb2b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000bb2f:	75 c1                	jne    c000baf2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb31:	43                   	inc    ebx
c000bb32:	83 fb 20             	cmp    ebx,0x20
c000bb35:	0f 85 79 ff ff ff    	jne    c000bab4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb3b:	83 c4 2c             	add    esp,0x2c
c000bb3e:	5b                   	pop    ebx
c000bb3f:	5e                   	pop    esi
c000bb40:	5f                   	pop    edi
c000bb41:	5d                   	pop    ebp
c000bb42:	c3                   	ret    
c000bb43:	90                   	nop

c000bb44 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb44:	55                   	push   ebp
c000bb45:	57                   	push   edi
c000bb46:	56                   	push   esi
c000bb47:	53                   	push   ebx
c000bb48:	83 ec 48             	sub    esp,0x48
c000bb4b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb4f:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb53:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb57:	c1 e0 08             	shl    eax,0x8
c000bb5a:	01 d0                	add    eax,edx
c000bb5c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb64:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb68:	c1 e0 08             	shl    eax,0x8
c000bb6b:	01 d0                	add    eax,edx
c000bb6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb75:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb82:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb89:	50                   	push   eax
c000bb8a:	e8 1d 3e 00 00       	call   c000f9ac <malloc>
c000bb8f:	83 c4 10             	add    esp,0x10
c000bb92:	85 c0                	test   eax,eax
c000bb94:	89 c5                	mov    ebp,eax
c000bb96:	75 10                	jne    c000bba8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	68 14 3b 02 c0       	push   0xc0023b14
c000bba0:	e8 5d 42 00 00       	call   c000fe02 <KePanic(char const*)>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	52                   	push   edx
c000bba9:	bf 12 00 00 00       	mov    edi,0x12
c000bbae:	52                   	push   edx
c000bbaf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbb3:	50                   	push   eax
c000bbb4:	68 24 3b 02 c0       	push   0xc0023b24
c000bbb9:	e8 a8 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbbe:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbc1:	83 e0 20             	and    eax,0x20
c000bbc4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bbc8:	85 c0                	test   eax,eax
c000bbca:	59                   	pop    ecx
c000bbcb:	0f 94 c0             	sete   al
c000bbce:	0f b6 c0             	movzx  eax,al
c000bbd1:	5e                   	pop    esi
c000bbd2:	50                   	push   eax
c000bbd3:	68 2e 3b 02 c0       	push   0xc0023b2e
c000bbd8:	e8 89 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbdd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bbe1:	83 c4 10             	add    esp,0x10
c000bbe4:	85 c0                	test   eax,eax
c000bbe6:	89 c2                	mov    edx,eax
c000bbe8:	74 11                	je     c000bbfb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bbea:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bbee:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbf2:	c1 ff 03             	sar    edi,0x3
c000bbf5:	0f af f9             	imul   edi,ecx
c000bbf8:	83 c7 12             	add    edi,0x12
c000bbfb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bc00:	74 07                	je     c000bc09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bc02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc07:	75 12                	jne    c000bc1b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bc09:	83 ec 0c             	sub    esp,0xc
c000bc0c:	68 3c 3b 02 c0       	push   0xc0023b3c
c000bc11:	e8 50 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bc16:	e9 aa 02 00 00       	jmp    c000bec5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bc1b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc1f:	83 f9 02             	cmp    ecx,0x2
c000bc22:	74 0e                	je     c000bc32 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bc24:	83 f9 0a             	cmp    ecx,0xa
c000bc27:	0f 84 d1 00 00 00    	je     c000bcfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bc2d:	e9 7e 02 00 00       	jmp    c000beb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bc32:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc37:	75 0e                	jne    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc39:	84 d2                	test   dl,dl
c000bc3b:	75 0a                	jne    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc3d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc40:	83 e8 18             	sub    eax,0x18
c000bc43:	a8 f7                	test   al,0xf7
c000bc45:	74 0d                	je     c000bc54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bc47:	83 ec 0c             	sub    esp,0xc
c000bc4a:	68 51 3b 02 c0       	push   0xc0023b51
c000bc4f:	e9 64 02 00 00       	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc54:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc5c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc61:	31 c0                	xor    eax,eax
c000bc63:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc6f:	89 c6                	mov    esi,eax
c000bc71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc76:	75 15                	jne    c000bc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc78:	99                   	cdq    
c000bc79:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc7d:	85 d2                	test   edx,edx
c000bc7f:	75 0c                	jne    c000bc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc81:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc85:	29 c6                	sub    esi,eax
c000bc87:	4e                   	dec    esi
c000bc88:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc8d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc99:	75 0c                	jne    c000bca7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc9b:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bca0:	c1 e2 18             	shl    edx,0x18
c000bca3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bca7:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bcac:	8d 46 01             	lea    eax,[esi+0x1]
c000bcaf:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bcb3:	c1 e1 10             	shl    ecx,0x10
c000bcb6:	89 ca                	mov    edx,ecx
c000bcb8:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bcbd:	c1 e1 08             	shl    ecx,0x8
c000bcc0:	09 d1                	or     ecx,edx
c000bcc2:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bcc6:	09 d1                	or     ecx,edx
c000bcc8:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bccc:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bcd0:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcd4:	c1 fa 03             	sar    edx,0x3
c000bcd7:	01 d7                	add    edi,edx
c000bcd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcdd:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bce1:	7e 04                	jle    c000bce7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bce3:	89 c6                	mov    esi,eax
c000bce5:	eb 8a                	jmp    c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bce7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bceb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcef:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcf3:	0f 8f 6e ff ff ff    	jg     c000bc67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bcf9:	e9 ce 01 00 00       	jmp    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcfe:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd03:	75 0e                	jne    c000bd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bd05:	85 c0                	test   eax,eax
c000bd07:	75 0a                	jne    c000bd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bd09:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd0c:	83 e8 18             	sub    eax,0x18
c000bd0f:	a8 f7                	test   al,0xf7
c000bd11:	74 0d                	je     c000bd20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bd13:	83 ec 0c             	sub    esp,0xc
c000bd16:	68 5f 3b 02 c0       	push   0xc0023b5f
c000bd1b:	e9 98 01 00 00       	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bd20:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bd28:	31 c9                	xor    ecx,ecx
c000bd2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bd32:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bd36:	0f 8d 90 01 00 00    	jge    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd40:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bd44:	0f 8e 82 01 00 00    	jle    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd4a:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bd4e:	8d 77 01             	lea    esi,[edi+0x1]
c000bd51:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd55:	83 fa 7f             	cmp    edx,0x7f
c000bd58:	89 d0                	mov    eax,edx
c000bd5a:	0f 8e a3 00 00 00    	jle    c000be03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd60:	83 e0 7f             	and    eax,0x7f
c000bd63:	31 d2                	xor    edx,edx
c000bd65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd69:	40                   	inc    eax
c000bd6a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd72:	75 08                	jne    c000bd7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd74:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd79:	c1 e2 18             	shl    edx,0x18
c000bd7c:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd81:	c1 e0 10             	shl    eax,0x10
c000bd84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd88:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd8d:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd91:	c1 e0 08             	shl    eax,0x8
c000bd94:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd98:	09 f8                	or     eax,edi
c000bd9a:	31 ff                	xor    edi,edi
c000bd9c:	09 d0                	or     eax,edx
c000bd9e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bda2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bda7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdab:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bdb0:	75 1d                	jne    c000bdcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdb2:	89 c8                	mov    eax,ecx
c000bdb4:	99                   	cdq    
c000bdb5:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bdb9:	85 d2                	test   edx,edx
c000bdbb:	75 12                	jne    c000bdcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdc1:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bdc5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bdc9:	49                   	dec    ecx
c000bdca:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bdcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bdd3:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdd6:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bdda:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bdde:	8d 47 01             	lea    eax,[edi+0x1]
c000bde1:	7e 06                	jle    c000bde9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bde3:	89 c7                	mov    edi,eax
c000bde5:	89 d1                	mov    ecx,edx
c000bde7:	eb c2                	jmp    c000bdab <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bde9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bded:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bdf1:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bdf5:	c1 f8 03             	sar    eax,0x3
c000bdf8:	01 c6                	add    esi,eax
c000bdfa:	89 d1                	mov    ecx,edx
c000bdfc:	89 f7                	mov    edi,esi
c000bdfe:	e9 2f ff ff ff       	jmp    c000bd32 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000be03:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000be0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be0f:	40                   	inc    eax
c000be10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000be19:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be1d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be22:	75 1d                	jne    c000be41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be24:	89 c8                	mov    eax,ecx
c000be26:	99                   	cdq    
c000be27:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000be2b:	85 d2                	test   edx,edx
c000be2d:	75 12                	jne    c000be41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be33:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000be37:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000be3b:	49                   	dec    ecx
c000be3c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000be41:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be45:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be4d:	75 0c                	jne    c000be5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000be4f:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000be54:	c1 e7 18             	shl    edi,0x18
c000be57:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be5b:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be60:	8d 51 01             	lea    edx,[ecx+0x1]
c000be63:	c1 e0 10             	shl    eax,0x10
c000be66:	89 c7                	mov    edi,eax
c000be68:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be6d:	c1 e0 08             	shl    eax,0x8
c000be70:	09 f8                	or     eax,edi
c000be72:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be76:	09 f8                	or     eax,edi
c000be78:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be7c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be84:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be88:	c1 f8 03             	sar    eax,0x3
c000be8b:	01 c6                	add    esi,eax
c000be8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be91:	40                   	inc    eax
c000be92:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be96:	7e 0b                	jle    c000bea3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be9c:	89 d1                	mov    ecx,edx
c000be9e:	e9 7a ff ff ff       	jmp    c000be1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000bea3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000bea7:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000beab:	e9 4a ff ff ff       	jmp    c000bdfa <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000beb0:	50                   	push   eax
c000beb1:	50                   	push   eax
c000beb2:	51                   	push   ecx
c000beb3:	68 6e 3b 02 c0       	push   0xc0023b6e
c000beb8:	e8 a9 b0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bebd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bec0:	e8 f7 3a 00 00       	call   c000f9bc <free>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	31 ed                	xor    ebp,ebp
c000beca:	eb 14                	jmp    c000bee0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000becc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bed0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000bed4:	89 18                	mov    DWORD PTR [eax],ebx
c000bed6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beda:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bede:	89 18                	mov    DWORD PTR [eax],ebx
c000bee0:	83 c4 3c             	add    esp,0x3c
c000bee3:	89 e8                	mov    eax,ebp
c000bee5:	5b                   	pop    ebx
c000bee6:	5e                   	pop    esi
c000bee7:	5f                   	pop    edi
c000bee8:	5d                   	pop    ebp
c000bee9:	c3                   	ret    

c000beea <Video::putTGA(int, int, unsigned char*, int)>:
c000beea:	55                   	push   ebp
c000beeb:	57                   	push   edi
c000beec:	56                   	push   esi
c000beed:	53                   	push   ebx
c000beee:	83 ec 28             	sub    esp,0x28
c000bef1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bef5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000bef9:	50                   	push   eax
c000befa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000befe:	50                   	push   eax
c000beff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf07:	55                   	push   ebp
c000bf08:	e8 37 fc ff ff       	call   c000bb44 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf0d:	83 c4 20             	add    esp,0x20
c000bf10:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf14:	85 c0                	test   eax,eax
c000bf16:	74 3b                	je     c000bf53 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf18:	89 c6                	mov    esi,eax
c000bf1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf22:	39 d8                	cmp    eax,ebx
c000bf24:	7e 2d                	jle    c000bf53 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf26:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bf2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf2e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf32:	39 f8                	cmp    eax,edi
c000bf34:	7e 1a                	jle    c000bf50 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000bf36:	83 c6 04             	add    esi,0x4
c000bf39:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	79 0d                	jns    c000bf4d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bf40:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf43:	50                   	push   eax
c000bf44:	53                   	push   ebx
c000bf45:	57                   	push   edi
c000bf46:	55                   	push   ebp
c000bf47:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	47                   	inc    edi
c000bf4e:	eb da                	jmp    c000bf2a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf50:	43                   	inc    ebx
c000bf51:	eb c7                	jmp    c000bf1a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf53:	83 c4 1c             	add    esp,0x1c
c000bf56:	5b                   	pop    ebx
c000bf57:	5e                   	pop    esi
c000bf58:	5f                   	pop    edi
c000bf59:	5d                   	pop    ebp
c000bf5a:	c3                   	ret    
c000bf5b:	90                   	nop

c000bf5c <ACPI::close(int, int, void*)>:
c000bf5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf61:	c3                   	ret    
c000bf62:	66 90                	xchg   ax,ax

c000bf64 <loadACPITables(unsigned char*)>:
c000bf64:	57                   	push   edi
c000bf65:	56                   	push   esi
c000bf66:	53                   	push   ebx
c000bf67:	83 ec 60             	sub    esp,0x60
c000bf6a:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf6f:	0f 84 43 02 00 00    	je     c000c1b8 <loadACPITables(unsigned char*)+0x254>
c000bf75:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf7a:	0f b6 c0             	movzx  eax,al
c000bf7d:	85 c0                	test   eax,eax
c000bf7f:	74 7b                	je     c000bffc <loadACPITables(unsigned char*)+0x98>
c000bf81:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf90:	83 e8 24             	sub    eax,0x24
c000bf93:	c1 e8 03             	shr    eax,0x3
c000bf96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf9a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfa2:	66 90                	xchg   ax,ax
c000bfa4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfa8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfac:	0f 8d ba 00 00 00    	jge    c000c06c <loadACPITables(unsigned char*)+0x108>
c000bfb2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfb6:	83 c0 24             	add    eax,0x24
c000bfb9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfbd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfc5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfc9:	c1 e0 03             	shl    eax,0x3
c000bfcc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfd0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfd7:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfd9:	89 c1                	mov    ecx,eax
c000bfdb:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bfe0:	8d 50 01             	lea    edx,[eax+0x1]
c000bfe3:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bfe9:	89 ca                	mov    edx,ecx
c000bfeb:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bff2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bff7:	eb ab                	jmp    c000bfa4 <loadACPITables(unsigned char*)+0x40>
c000bff9:	8d 76 00             	lea    esi,[esi+0x0]
c000bffc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c000:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c004:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c00b:	83 e8 24             	sub    eax,0x24
c000c00e:	c1 e8 02             	shr    eax,0x2
c000c011:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c015:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c01d:	8d 76 00             	lea    esi,[esi+0x0]
c000c020:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c024:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c028:	7d 42                	jge    c000c06c <loadACPITables(unsigned char*)+0x108>
c000c02a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c02e:	83 c0 24             	add    eax,0x24
c000c031:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c035:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c039:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c03d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c041:	c1 e0 02             	shl    eax,0x2
c000c044:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c048:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c04c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c04e:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c053:	8d 50 01             	lea    edx,[eax+0x1]
c000c056:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c05c:	89 ca                	mov    edx,ecx
c000c05e:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c065:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c06a:	eb b4                	jmp    c000c020 <loadACPITables(unsigned char*)+0xbc>
c000c06c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c074:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c079:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c07d:	0f 8d 39 01 00 00    	jge    c000c1bc <loadACPITables(unsigned char*)+0x258>
c000c083:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c087:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c08e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c09a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c09e:	25 ff 0f 00 00       	and    eax,0xfff
c000c0a3:	89 c6                	mov    esi,eax
c000c0a5:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c0ab:	83 ec 0c             	sub    esp,0xc
c000c0ae:	6a 01                	push   0x1
c000c0b0:	e8 42 73 00 00       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	6a 01                	push   0x1
c000c0c7:	6a 01                	push   0x1
c000c0c9:	50                   	push   eax
c000c0ca:	52                   	push   edx
c000c0cb:	53                   	push   ebx
c000c0cc:	e8 f9 7b 00 00       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0d1:	83 c4 20             	add    esp,0x20
c000c0d4:	09 f0                	or     eax,esi
c000c0d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0de:	c1 e0 03             	shl    eax,0x3
c000c0e1:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c0e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0f2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c102:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c106:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c10a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c10e:	89 c6                	mov    esi,eax
c000c110:	89 d7                	mov    edi,edx
c000c112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c114:	89 c8                	mov    eax,ecx
c000c116:	89 fa                	mov    edx,edi
c000c118:	89 f3                	mov    ebx,esi
c000c11a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c11e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c12d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c131:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c135:	05 00 10 00 00       	add    eax,0x1000
c000c13a:	c1 e8 0c             	shr    eax,0xc
c000c13d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c145:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c14d:	25 ff 0f 00 00       	and    eax,0xfff
c000c152:	89 c6                	mov    esi,eax
c000c154:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c15a:	83 ec 0c             	sub    esp,0xc
c000c15d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c161:	e8 91 72 00 00       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c000c166:	83 c4 10             	add    esp,0x10
c000c169:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c16d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	6a 01                	push   0x1
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	50                   	push   eax
c000c17d:	52                   	push   edx
c000c17e:	53                   	push   ebx
c000c17f:	e8 46 7b 00 00       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c184:	83 c4 20             	add    esp,0x20
c000c187:	09 f0                	or     eax,esi
c000c189:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c18d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c191:	83 ec 0c             	sub    esp,0xc
c000c194:	50                   	push   eax
c000c195:	e8 5b 75 00 00       	call   c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1a5:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c1ac:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1b1:	e9 be fe ff ff       	jmp    c000c074 <loadACPITables(unsigned char*)+0x110>
c000c1b6:	66 90                	xchg   ax,ax
c000c1b8:	90                   	nop
c000c1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c1bc:	83 c4 60             	add    esp,0x60
c000c1bf:	5b                   	pop    ebx
c000c1c0:	5e                   	pop    esi
c000c1c1:	5f                   	pop    edi
c000c1c2:	c3                   	ret    
c000c1c3:	90                   	nop

c000c1c4 <findRSDT(unsigned char*)>:
c000c1c4:	57                   	push   edi
c000c1c5:	56                   	push   esi
c000c1c6:	53                   	push   ebx
c000c1c7:	83 ec 50             	sub    esp,0x50
c000c1ca:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c1cf:	85 c0                	test   eax,eax
c000c1d1:	75 0d                	jne    c000c1e0 <findRSDT(unsigned char*)+0x1c>
c000c1d3:	b8 00 00 00 00       	mov    eax,0x0
c000c1d8:	e9 2b 01 00 00       	jmp    c000c308 <findRSDT(unsigned char*)+0x144>
c000c1dd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1e0:	89 e0                	mov    eax,esp
c000c1e2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1e6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1ee:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c202:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c206:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c20a:	89 c6                	mov    esi,eax
c000c20c:	89 d7                	mov    edi,edx
c000c20e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c210:	89 c8                	mov    eax,ecx
c000c212:	89 fa                	mov    edx,edi
c000c214:	89 f3                	mov    ebx,esi
c000c216:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c21a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c21e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c222:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c226:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c22a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c232:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c236:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c23a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c242:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c246:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c24a:	25 ff 0f 00 00       	and    eax,0xfff
c000c24f:	89 c6                	mov    esi,eax
c000c251:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c257:	83 ec 0c             	sub    esp,0xc
c000c25a:	6a 02                	push   0x2
c000c25c:	e8 96 71 00 00       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c000c261:	83 c4 10             	add    esp,0x10
c000c264:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c268:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c26e:	83 ec 0c             	sub    esp,0xc
c000c271:	6a 01                	push   0x1
c000c273:	6a 02                	push   0x2
c000c275:	50                   	push   eax
c000c276:	52                   	push   edx
c000c277:	53                   	push   ebx
c000c278:	e8 4d 7a 00 00       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c27d:	83 c4 20             	add    esp,0x20
c000c280:	09 f0                	or     eax,esi
c000c282:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c286:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c28a:	25 ff 0f 00 00       	and    eax,0xfff
c000c28f:	89 c6                	mov    esi,eax
c000c291:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c297:	83 ec 0c             	sub    esp,0xc
c000c29a:	6a 02                	push   0x2
c000c29c:	e8 56 71 00 00       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ae:	83 ec 0c             	sub    esp,0xc
c000c2b1:	6a 01                	push   0x1
c000c2b3:	6a 02                	push   0x2
c000c2b5:	50                   	push   eax
c000c2b6:	52                   	push   edx
c000c2b7:	53                   	push   ebx
c000c2b8:	e8 0d 7a 00 00       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2bd:	83 c4 20             	add    esp,0x20
c000c2c0:	09 f0                	or     eax,esi
c000c2c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2c6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2cb:	85 c0                	test   eax,eax
c000c2cd:	75 11                	jne    c000c2e0 <findRSDT(unsigned char*)+0x11c>
c000c2cf:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c2d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2de:	eb 24                	jmp    c000c304 <findRSDT(unsigned char*)+0x140>
c000c2e0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2e5:	83 f8 02             	cmp    eax,0x2
c000c2e8:	75 12                	jne    c000c2fc <findRSDT(unsigned char*)+0x138>
c000c2ea:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c2f1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2f5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2f9:	eb 09                	jmp    c000c304 <findRSDT(unsigned char*)+0x140>
c000c2fb:	90                   	nop
c000c2fc:	b8 00 00 00 00       	mov    eax,0x0
c000c301:	eb 05                	jmp    c000c308 <findRSDT(unsigned char*)+0x144>
c000c303:	90                   	nop
c000c304:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c308:	83 c4 50             	add    esp,0x50
c000c30b:	5b                   	pop    ebx
c000c30c:	5e                   	pop    esi
c000c30d:	5f                   	pop    edi
c000c30e:	c3                   	ret    
c000c30f:	90                   	nop

c000c310 <findDataTable(unsigned char*, char*)>:
c000c310:	83 ec 1c             	sub    esp,0x1c
c000c313:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c318:	75 0a                	jne    c000c324 <findDataTable(unsigned char*, char*)+0x14>
c000c31a:	b8 00 00 00 00       	mov    eax,0x0
c000c31f:	eb 5f                	jmp    c000c380 <findDataTable(unsigned char*, char*)+0x70>
c000c321:	8d 76 00             	lea    esi,[esi+0x0]
c000c324:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c32c:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c331:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c335:	7d 41                	jge    c000c378 <findDataTable(unsigned char*, char*)+0x68>
c000c337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c33b:	c1 e0 03             	shl    eax,0x3
c000c33e:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c343:	83 ec 04             	sub    esp,0x4
c000c346:	6a 04                	push   0x4
c000c348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c34c:	50                   	push   eax
c000c34d:	e8 2e 40 ff ff       	call   c0000380 <memcmp>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	85 c0                	test   eax,eax
c000c357:	0f 94 c0             	sete   al
c000c35a:	0f b6 c0             	movzx  eax,al
c000c35d:	85 c0                	test   eax,eax
c000c35f:	74 0f                	je     c000c370 <findDataTable(unsigned char*, char*)+0x60>
c000c361:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c365:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c36c:	eb 12                	jmp    c000c380 <findDataTable(unsigned char*, char*)+0x70>
c000c36e:	66 90                	xchg   ax,ax
c000c370:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c375:	eb b5                	jmp    c000c32c <findDataTable(unsigned char*, char*)+0x1c>
c000c377:	90                   	nop
c000c378:	b8 00 00 00 00       	mov    eax,0x0
c000c37d:	8d 76 00             	lea    esi,[esi+0x0]
c000c380:	83 c4 1c             	add    esp,0x1c
c000c383:	c3                   	ret    

c000c384 <scanMADT()>:
c000c384:	53                   	push   ebx
c000c385:	83 ec 38             	sub    esp,0x38
c000c388:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c392:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	68 d0 3b 02 c0       	push   0xc0023bd0
c000c3a4:	e8 bd ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3a9:	83 c4 10             	add    esp,0x10
c000c3ac:	e8 ff d9 00 00       	call   c0019db0 <HalFindRSDP()>
c000c3b1:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c3b6:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3bb:	85 c0                	test   eax,eax
c000c3bd:	0f 84 59 04 00 00    	je     c000c81c <scanMADT()+0x498>
c000c3c3:	83 ec 0c             	sub    esp,0xc
c000c3c6:	68 de 3b 02 c0       	push   0xc0023bde
c000c3cb:	e8 96 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3d0:	83 c4 10             	add    esp,0x10
c000c3d3:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	50                   	push   eax
c000c3dc:	e8 e3 fd ff ff       	call   c000c1c4 <findRSDT(unsigned char*)>
c000c3e1:	83 c4 10             	add    esp,0x10
c000c3e4:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c3e9:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 84 2a 04 00 00    	je     c000c820 <scanMADT()+0x49c>
c000c3f6:	8b 15 84 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd84
c000c3fc:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c401:	83 ec 04             	sub    esp,0x4
c000c404:	52                   	push   edx
c000c405:	50                   	push   eax
c000c406:	68 88 3d 02 c0       	push   0xc0023d88
c000c40b:	e8 56 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c418:	83 ec 0c             	sub    esp,0xc
c000c41b:	50                   	push   eax
c000c41c:	e8 43 fb ff ff       	call   c000bf64 <loadACPITables(unsigned char*)>
c000c421:	83 c4 10             	add    esp,0x10
c000c424:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c429:	83 ec 08             	sub    esp,0x8
c000c42c:	68 ed 3b 02 c0       	push   0xc0023bed
c000c431:	50                   	push   eax
c000c432:	e8 d9 fe ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c43e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c443:	0f 84 db 03 00 00    	je     c000c824 <scanMADT()+0x4a0>
c000c449:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c451:	8d 76 00             	lea    esi,[esi+0x0]
c000c454:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c458:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c45b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c45f:	0f 87 c7 03 00 00    	ja     c000c82c <scanMADT()+0x4a8>
c000c465:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c46d:	0f 87 b9 03 00 00    	ja     c000c82c <scanMADT()+0x4a8>
c000c473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c477:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c47b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c47f:	8d 50 01             	lea    edx,[eax+0x1]
c000c482:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c486:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c48a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c48e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c492:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c496:	8d 50 01             	lea    edx,[eax+0x1]
c000c499:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c49d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4a5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4a9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ae:	83 f8 02             	cmp    eax,0x2
c000c4b1:	0f 86 71 03 00 00    	jbe    c000c828 <scanMADT()+0x4a4>
c000c4b7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4bc:	85 c0                	test   eax,eax
c000c4be:	75 58                	jne    c000c518 <scanMADT()+0x194>
c000c4c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4cb:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c4d1:	0f b6 d2             	movzx  edx,dl
c000c4d4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4d8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4dc:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c4e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4e6:	8d 50 01             	lea    edx,[eax+0x1]
c000c4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ed:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c4f3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c4f6:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c4fc:	0f b6 d2             	movzx  edx,dl
c000c4ff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c503:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c507:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c50d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c512:	e9 f1 02 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c517:	90                   	nop
c000c518:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c51d:	83 f8 01             	cmp    eax,0x1
c000c520:	0f 85 32 01 00 00    	jne    c000c658 <scanMADT()+0x2d4>
c000c526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c52a:	8d 50 01             	lea    edx,[eax+0x1]
c000c52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c531:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c537:	0f b6 d2             	movzx  edx,dl
c000c53a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c542:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c548:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c54d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c551:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c555:	01 d0                	add    eax,edx
c000c557:	83 c0 2c             	add    eax,0x2c
c000c55a:	8a 00                	mov    al,BYTE PTR [eax]
c000c55c:	0f b6 d0             	movzx  edx,al
c000c55f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c563:	8d 48 01             	lea    ecx,[eax+0x1]
c000c566:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c56a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c56e:	0f b6 c0             	movzx  eax,al
c000c571:	c1 e0 08             	shl    eax,0x8
c000c574:	89 d1                	mov    ecx,edx
c000c576:	09 c1                	or     ecx,eax
c000c578:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c57c:	8d 50 02             	lea    edx,[eax+0x2]
c000c57f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c583:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c587:	0f b6 c0             	movzx  eax,al
c000c58a:	c1 e0 10             	shl    eax,0x10
c000c58d:	09 c1                	or     ecx,eax
c000c58f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c593:	8d 50 03             	lea    edx,[eax+0x3]
c000c596:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c59a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c59e:	0f b6 c0             	movzx  eax,al
c000c5a1:	c1 e0 18             	shl    eax,0x18
c000c5a4:	09 c1                	or     ecx,eax
c000c5a6:	89 ca                	mov    edx,ecx
c000c5a8:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5ad:	0f b6 c0             	movzx  eax,al
c000c5b0:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c5b7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5c4:	01 d0                	add    eax,edx
c000c5c6:	83 c0 2c             	add    eax,0x2c
c000c5c9:	8a 00                	mov    al,BYTE PTR [eax]
c000c5cb:	0f b6 d0             	movzx  edx,al
c000c5ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5d2:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5dd:	0f b6 c0             	movzx  eax,al
c000c5e0:	c1 e0 08             	shl    eax,0x8
c000c5e3:	89 d1                	mov    ecx,edx
c000c5e5:	09 c1                	or     ecx,eax
c000c5e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5eb:	8d 50 02             	lea    edx,[eax+0x2]
c000c5ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5f6:	0f b6 c0             	movzx  eax,al
c000c5f9:	c1 e0 10             	shl    eax,0x10
c000c5fc:	09 c1                	or     ecx,eax
c000c5fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c602:	8d 50 03             	lea    edx,[eax+0x3]
c000c605:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c609:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c60d:	0f b6 c0             	movzx  eax,al
c000c610:	c1 e0 18             	shl    eax,0x18
c000c613:	09 c1                	or     ecx,eax
c000c615:	89 ca                	mov    edx,ecx
c000c617:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c61c:	0f b6 c0             	movzx  eax,al
c000c61f:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c626:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c62b:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c630:	83 c0 01             	add    eax,0x1
c000c633:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c638:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c63d:	0f b6 c0             	movzx  eax,al
c000c640:	83 ec 08             	sub    esp,0x8
c000c643:	50                   	push   eax
c000c644:	68 f2 3b 02 c0       	push   0xc0023bf2
c000c649:	e8 18 a9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c64e:	83 c4 10             	add    esp,0x10
c000c651:	e9 b2 01 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c656:	66 90                	xchg   ax,ax
c000c658:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c65d:	83 f8 02             	cmp    eax,0x2
c000c660:	0f 85 ea 00 00 00    	jne    c000c750 <scanMADT()+0x3cc>
c000c666:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c66a:	8d 50 01             	lea    edx,[eax+0x1]
c000c66d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c671:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c675:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c679:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c67d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c681:	8d 50 01             	lea    edx,[eax+0x1]
c000c684:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c68c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c690:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c698:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69c:	01 d0                	add    eax,edx
c000c69e:	83 c0 2c             	add    eax,0x2c
c000c6a1:	8a 00                	mov    al,BYTE PTR [eax]
c000c6a3:	0f b6 d0             	movzx  edx,al
c000c6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6aa:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6b5:	0f b6 c0             	movzx  eax,al
c000c6b8:	c1 e0 08             	shl    eax,0x8
c000c6bb:	89 d1                	mov    ecx,edx
c000c6bd:	09 c1                	or     ecx,eax
c000c6bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6c3:	8d 50 02             	lea    edx,[eax+0x2]
c000c6c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6ce:	0f b6 c0             	movzx  eax,al
c000c6d1:	c1 e0 10             	shl    eax,0x10
c000c6d4:	09 c1                	or     ecx,eax
c000c6d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6da:	8d 50 03             	lea    edx,[eax+0x3]
c000c6dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6e5:	0f b6 c0             	movzx  eax,al
c000c6e8:	c1 e0 18             	shl    eax,0x18
c000c6eb:	09 c8                	or     eax,ecx
c000c6ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6fe:	01 d0                	add    eax,edx
c000c700:	83 c0 2c             	add    eax,0x2c
c000c703:	8a 00                	mov    al,BYTE PTR [eax]
c000c705:	0f b6 d0             	movzx  edx,al
c000c708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c70c:	8d 48 01             	lea    ecx,[eax+0x1]
c000c70f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c713:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c717:	0f b6 c0             	movzx  eax,al
c000c71a:	c1 e0 08             	shl    eax,0x8
c000c71d:	09 d0                	or     eax,edx
c000c71f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c724:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c729:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c72e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c732:	88 90 28 63 02 c0    	mov    BYTE PTR [eax-0x3ffd9cd8],dl
c000c738:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c73d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c742:	66 89 94 00 20 be 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd41e0],dx
c000c74a:	e9 b9 00 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c74f:	90                   	nop
c000c750:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c755:	83 f8 04             	cmp    eax,0x4
c000c758:	0f 85 9a 00 00 00    	jne    c000c7f8 <scanMADT()+0x474>
c000c75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c762:	8d 50 01             	lea    edx,[eax+0x1]
c000c765:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c769:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c76d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c771:	0f b6 c0             	movzx  eax,al
c000c774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c778:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c77c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c780:	01 d0                	add    eax,edx
c000c782:	83 c0 2c             	add    eax,0x2c
c000c785:	8a 00                	mov    al,BYTE PTR [eax]
c000c787:	0f b6 d0             	movzx  edx,al
c000c78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c78e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c791:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c795:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c799:	0f b6 c0             	movzx  eax,al
c000c79c:	c1 e0 08             	shl    eax,0x8
c000c79f:	09 d0                	or     eax,edx
c000c7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7a5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ae:	8d 50 01             	lea    edx,[eax+0x1]
c000c7b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7bd:	0f b6 c0             	movzx  eax,al
c000c7c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c8:	c1 e0 08             	shl    eax,0x8
c000c7cb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7cf:	89 c1                	mov    ecx,eax
c000c7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7d5:	c1 e0 18             	shl    eax,0x18
c000c7d8:	89 c3                	mov    ebx,eax
c000c7da:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c7df:	8d 50 01             	lea    edx,[eax+0x1]
c000c7e2:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c7e8:	09 d9                	or     ecx,ebx
c000c7ea:	89 ca                	mov    edx,ecx
c000c7ec:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c7f3:	eb 13                	jmp    c000c808 <scanMADT()+0x484>
c000c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7f8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7fd:	83 f8 05             	cmp    eax,0x5
c000c800:	75 06                	jne    c000c808 <scanMADT()+0x484>
c000c802:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c807:	90                   	nop
c000c808:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c80d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c811:	01 d0                	add    eax,edx
c000c813:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c817:	e9 38 fc ff ff       	jmp    c000c454 <scanMADT()+0xd0>
c000c81c:	90                   	nop
c000c81d:	eb 0d                	jmp    c000c82c <scanMADT()+0x4a8>
c000c81f:	90                   	nop
c000c820:	90                   	nop
c000c821:	eb 09                	jmp    c000c82c <scanMADT()+0x4a8>
c000c823:	90                   	nop
c000c824:	90                   	nop
c000c825:	eb 05                	jmp    c000c82c <scanMADT()+0x4a8>
c000c827:	90                   	nop
c000c828:	90                   	nop
c000c829:	8d 76 00             	lea    esi,[esi+0x0]
c000c82c:	83 c4 38             	add    esp,0x38
c000c82f:	5b                   	pop    ebx
c000c830:	c3                   	ret    
c000c831:	90                   	nop
c000c832:	66 90                	xchg   ax,ax

c000c834 <ACPI::ACPI()>:
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83b:	83 ec 08             	sub    esp,0x8
c000c83e:	68 0e 3c 02 c0       	push   0xc0023c0e
c000c843:	50                   	push   eax
c000c844:	e8 0f d3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	ba 2c 3e 02 c0       	mov    edx,0xc0023e2c
c000c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c855:	89 10                	mov    DWORD PTR [eax],edx
c000c857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c85b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c866:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c874:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c87e:	90                   	nop
c000c87f:	83 c4 0c             	add    esp,0xc
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c884:	83 ec 2c             	sub    esp,0x2c
c000c887:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c88b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c88f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c893:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c897:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c89c:	88 c8                	mov    al,cl
c000c89e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8af:	90                   	nop
c000c8b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8b4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8ba:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8be:	0f 8d b0 00 00 00    	jge    c000c974 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c8c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8cc:	83 c2 2a             	add    edx,0x2a
c000c8cf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8d8:	0f b7 c0             	movzx  eax,ax
c000c8db:	39 c2                	cmp    edx,eax
c000c8dd:	0f 85 85 00 00 00    	jne    c000c968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8eb:	83 c2 2a             	add    edx,0x2a
c000c8ee:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8f2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8f7:	0f b6 c0             	movzx  eax,al
c000c8fa:	39 c2                	cmp    edx,eax
c000c8fc:	75 6a                	jne    c000c968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8fe:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c903:	85 c0                	test   eax,eax
c000c905:	74 3d                	je     c000c944 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c907:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c90b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c90f:	83 c2 2a             	add    edx,0x2a
c000c912:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c91a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c91d:	39 c2                	cmp    edx,eax
c000c91f:	74 13                	je     c000c934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c921:	83 ec 0c             	sub    esp,0xc
c000c924:	68 ac 3d 02 c0       	push   0xc0023dac
c000c929:	e8 d4 34 00 00       	call   c000fe02 <KePanic(char const*)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	8d 76 00             	lea    esi,[esi+0x0]
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	68 13 3c 02 c0       	push   0xc0023c13
c000c93c:	e8 c1 34 00 00       	call   c000fe02 <KePanic(char const*)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c948:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c94c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c950:	83 c2 2a             	add    edx,0x2a
c000c953:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c957:	8b 02                	mov    eax,DWORD PTR [edx]
c000c959:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c95c:	89 01                	mov    DWORD PTR [ecx],eax
c000c95e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c961:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c966:	66 90                	xchg   ax,ax
c000c968:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c96d:	e9 3e ff ff ff       	jmp    c000c8b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c972:	66 90                	xchg   ax,ax
c000c974:	90                   	nop
c000c975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c979:	83 c4 2c             	add    esp,0x2c
c000c97c:	c2 04 00             	ret    0x4
c000c97f:	90                   	nop

c000c980 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c980:	83 ec 1c             	sub    esp,0x1c
c000c983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c987:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c98b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c98f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c994:	88 c8                	mov    al,cl
c000c996:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c99a:	88 d0                	mov    al,dl
c000c99c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ae:	83 c2 2a             	add    edx,0x2a
c000c9b1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c9b5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9bd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ce:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9dd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9e1:	83 c0 01             	add    eax,0x1
c000c9e4:	88 c1                	mov    cl,al
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	83 c2 2a             	add    edx,0x2a
c000c9ed:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ff:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca06:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca14:	8d 50 01             	lea    edx,[eax+0x1]
c000ca17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca25:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca2b:	3d 00 02 00 00       	cmp    eax,0x200
c000ca30:	75 12                	jne    c000ca44 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca32:	83 ec 0c             	sub    esp,0xc
c000ca35:	68 22 3c 02 c0       	push   0xc0023c22
c000ca3a:	e8 c3 33 00 00       	call   c000fe02 <KePanic(char const*)>
c000ca3f:	83 c4 10             	add    esp,0x10
c000ca42:	66 90                	xchg   ax,ax
c000ca44:	90                   	nop
c000ca45:	83 c4 1c             	add    esp,0x1c
c000ca48:	c3                   	ret    
c000ca49:	90                   	nop
c000ca4a:	66 90                	xchg   ax,ax

c000ca4c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca4c:	b8 00 00 00 00       	mov    eax,0x0
c000ca51:	c3                   	ret    
c000ca52:	66 90                	xchg   ax,ax

c000ca54 <ACPI::detectPCI()>:
c000ca54:	53                   	push   ebx
c000ca55:	83 ec 28             	sub    esp,0x28
c000ca58:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca5d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca62:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000ca67:	83 ec 08             	sub    esp,0x8
c000ca6a:	68 3f 3c 02 c0       	push   0xc0023c3f
c000ca6f:	50                   	push   eax
c000ca70:	e8 9b f8 ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca7c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca81:	74 0d                	je     c000ca90 <ACPI::detectPCI()+0x3c>
c000ca83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca88:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ca90:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca9e:	0f b6 c0             	movzx  eax,al
c000caa1:	83 f8 01             	cmp    eax,0x1
c000caa4:	75 0e                	jne    c000cab4 <ACPI::detectPCI()+0x60>
c000caa6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cab0:	eb 2e                	jmp    c000cae0 <ACPI::detectPCI()+0x8c>
c000cab2:	66 90                	xchg   ax,ax
c000cab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cab8:	8a 00                	mov    al,BYTE PTR [eax]
c000caba:	0f b6 c0             	movzx  eax,al
c000cabd:	83 f8 02             	cmp    eax,0x2
c000cac0:	75 1e                	jne    c000cae0 <ACPI::detectPCI()+0x8c>
c000cac2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cacc:	85 c0                	test   eax,eax
c000cace:	74 10                	je     c000cae0 <ACPI::detectPCI()+0x8c>
c000cad0:	83 ec 0c             	sub    esp,0xc
c000cad3:	68 dc 3d 02 c0       	push   0xc0023ddc
c000cad8:	e8 25 33 00 00       	call   c000fe02 <KePanic(char const*)>
c000cadd:	83 c4 10             	add    esp,0x10
c000cae0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cae4:	83 f0 01             	xor    eax,0x1
c000cae7:	0f b6 c0             	movzx  eax,al
c000caea:	85 c0                	test   eax,eax
c000caec:	74 46                	je     c000cb34 <ACPI::detectPCI()+0xe0>
c000caee:	e8 3d 36 ff ff       	call   c0000130 <manualPCIProbe>
c000caf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000caf7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cafc:	75 0e                	jne    c000cb0c <ACPI::detectPCI()+0xb8>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb08:	eb 2a                	jmp    c000cb34 <ACPI::detectPCI()+0xe0>
c000cb0a:	66 90                	xchg   ax,ax
c000cb0c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb11:	75 21                	jne    c000cb34 <ACPI::detectPCI()+0xe0>
c000cb13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb18:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb1d:	85 c0                	test   eax,eax
c000cb1f:	74 13                	je     c000cb34 <ACPI::detectPCI()+0xe0>
c000cb21:	83 ec 0c             	sub    esp,0xc
c000cb24:	68 dc 3d 02 c0       	push   0xc0023ddc
c000cb29:	e8 d4 32 00 00       	call   c000fe02 <KePanic(char const*)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	8d 76 00             	lea    esi,[esi+0x0]
c000cb34:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb39:	85 c0                	test   eax,eax
c000cb3b:	0f 84 87 00 00 00    	je     c000cbc8 <ACPI::detectPCI()+0x174>
c000cb41:	83 ec 0c             	sub    esp,0xc
c000cb44:	68 44 3c 02 c0       	push   0xc0023c44
c000cb49:	e8 e7 06 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cb4e:	83 c4 10             	add    esp,0x10
c000cb51:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb59:	83 ec 0c             	sub    esp,0xc
c000cb5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb60:	e8 47 2e 00 00       	call   c000f9ac <malloc>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	89 c3                	mov    ebx,eax
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	53                   	push   ebx
c000cb6e:	e8 43 10 01 00       	call   c001dbb6 <PCI::PCI()>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb7e:	83 ec 08             	sub    esp,0x8
c000cb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb85:	50                   	push   eax
c000cb86:	e8 6b ce ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cb8b:	83 c4 10             	add    esp,0x10
c000cb8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb92:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb94:	83 c0 08             	add    eax,0x8
c000cb97:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb99:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb9e:	85 d2                	test   edx,edx
c000cba0:	74 0a                	je     c000cbac <ACPI::detectPCI()+0x158>
c000cba2:	ba 01 00 00 00       	mov    edx,0x1
c000cba7:	eb 0b                	jmp    c000cbb4 <ACPI::detectPCI()+0x160>
c000cba9:	8d 76 00             	lea    esi,[esi+0x0]
c000cbac:	ba 02 00 00 00       	mov    edx,0x2
c000cbb1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbb4:	6a 00                	push   0x0
c000cbb6:	6a 00                	push   0x0
c000cbb8:	52                   	push   edx
c000cbb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbbd:	ff d0                	call   eax
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	e9 91 00 00 00       	jmp    c000cc58 <ACPI::detectPCI()+0x204>
c000cbc7:	90                   	nop
c000cbc8:	83 ec 0c             	sub    esp,0xc
c000cbcb:	68 5c 3c 02 c0       	push   0xc0023c5c
c000cbd0:	e8 60 06 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cbdf:	83 ec 0c             	sub    esp,0xc
c000cbe2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe6:	e8 c1 2d 00 00       	call   c000f9ac <malloc>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	89 c3                	mov    ebx,eax
c000cbf0:	83 ec 0c             	sub    esp,0xc
c000cbf3:	53                   	push   ebx
c000cbf4:	e8 c5 1b 01 00       	call   c001e7be <IDE::IDE()>
c000cbf9:	83 c4 10             	add    esp,0x10
c000cbfc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc04:	83 ec 08             	sub    esp,0x8
c000cc07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc0b:	50                   	push   eax
c000cc0c:	e8 e5 cd ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc18:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc26:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc33:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc42:	83 c0 08             	add    eax,0x8
c000cc45:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc47:	6a 00                	push   0x0
c000cc49:	6a 00                	push   0x0
c000cc4b:	6a 00                	push   0x0
c000cc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc51:	ff d0                	call   eax
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	66 90                	xchg   ax,ax
c000cc58:	90                   	nop
c000cc59:	83 c4 28             	add    esp,0x28
c000cc5c:	5b                   	pop    ebx
c000cc5d:	c3                   	ret    
c000cc5e:	66 90                	xchg   ax,ax

c000cc60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc60:	83 ec 0c             	sub    esp,0xc
c000cc63:	83 ec 0c             	sub    esp,0xc
c000cc66:	68 71 3c 02 c0       	push   0xc0023c71
c000cc6b:	e8 92 31 00 00       	call   c000fe02 <KePanic(char const*)>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	90                   	nop
c000cc74:	83 c4 0c             	add    esp,0xc
c000cc77:	c3                   	ret    

c000cc78 <ACPI::open(int, int, void*)>:
c000cc78:	55                   	push   ebp
c000cc79:	89 e5                	mov    ebp,esp
c000cc7b:	53                   	push   ebx
c000cc7c:	81 ec 74 01 00 00    	sub    esp,0x174
c000cc82:	83 ec 0c             	sub    esp,0xc
c000cc85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cc88:	e8 c7 fd ff ff       	call   c000ca54 <ACPI::detectPCI()>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	83 ec 0c             	sub    esp,0xc
c000cc93:	68 04 3e 02 c0       	push   0xc0023e04
c000cc98:	e8 98 05 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cc9d:	83 c4 10             	add    esp,0x10
c000cca0:	b8 4c 05 00 00       	mov    eax,0x54c
c000cca5:	8a 00                	mov    al,BYTE PTR [eax]
c000cca7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000ccaa:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000ccae:	83 f8 01             	cmp    eax,0x1
c000ccb1:	75 15                	jne    c000ccc8 <ACPI::open(int, int, void*)+0x50>
c000ccb3:	83 ec 0c             	sub    esp,0xc
c000ccb6:	68 82 3c 02 c0       	push   0xc0023c82
c000ccbb:	e8 3f 8c 00 00       	call   c00158ff <Thr::loadKernelSymbolTable(char const*)>
c000ccc0:	83 c4 10             	add    esp,0x10
c000ccc3:	eb 33                	jmp    c000ccf8 <ACPI::open(int, int, void*)+0x80>
c000ccc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ccc8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cccc:	3d bb 00 00 00       	cmp    eax,0xbb
c000ccd1:	75 15                	jne    c000cce8 <ACPI::open(int, int, void*)+0x70>
c000ccd3:	83 ec 0c             	sub    esp,0xc
c000ccd6:	68 a0 3c 02 c0       	push   0xc0023ca0
c000ccdb:	e8 1f 8c 00 00       	call   c00158ff <Thr::loadKernelSymbolTable(char const*)>
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	eb 13                	jmp    c000ccf8 <ACPI::open(int, int, void*)+0x80>
c000cce5:	8d 76 00             	lea    esi,[esi+0x0]
c000cce8:	83 ec 0c             	sub    esp,0xc
c000cceb:	68 be 3c 02 c0       	push   0xc0023cbe
c000ccf0:	e8 0d 31 00 00       	call   c000fe02 <KePanic(char const*)>
c000ccf5:	83 c4 10             	add    esp,0x10
c000ccf8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ccfc:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000cd09:	e8 9e 2c 00 00       	call   c000f9ac <malloc>
c000cd0e:	83 c4 10             	add    esp,0x10
c000cd11:	89 c3                	mov    ebx,eax
c000cd13:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cd18:	83 ec 04             	sub    esp,0x4
c000cd1b:	50                   	push   eax
c000cd1c:	68 d8 3c 02 c0       	push   0xc0023cd8
c000cd21:	53                   	push   ebx
c000cd22:	e8 61 b4 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cd27:	83 c4 10             	add    esp,0x10
c000cd2a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000cd2d:	83 ec 08             	sub    esp,0x8
c000cd30:	6a 01                	push   0x1
c000cd32:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd35:	e8 6c b4 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000cd3a:	83 c4 10             	add    esp,0x10
c000cd3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cd40:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cd44:	75 12                	jne    c000cd58 <ACPI::open(int, int, void*)+0xe0>
c000cd46:	83 ec 0c             	sub    esp,0xc
c000cd49:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd4c:	e8 b3 b4 ff ff       	call   c0008204 <File::close()>
c000cd51:	83 c4 10             	add    esp,0x10
c000cd54:	eb 06                	jmp    c000cd5c <ACPI::open(int, int, void*)+0xe4>
c000cd56:	66 90                	xchg   ax,ax
c000cd58:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cd5c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cd60:	74 16                	je     c000cd78 <ACPI::open(int, int, void*)+0x100>
c000cd62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd65:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd67:	83 c0 08             	add    eax,0x8
c000cd6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd6c:	83 ec 0c             	sub    esp,0xc
c000cd6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd72:	ff d0                	call   eax
c000cd74:	83 c4 10             	add    esp,0x10
c000cd77:	90                   	nop
c000cd78:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cd7b:	83 f0 01             	xor    eax,0x1
c000cd7e:	0f b6 c0             	movzx  eax,al
c000cd81:	85 c0                	test   eax,eax
c000cd83:	74 27                	je     c000cdac <ACPI::open(int, int, void*)+0x134>
c000cd85:	83 ec 0c             	sub    esp,0xc
c000cd88:	68 f6 3c 02 c0       	push   0xc0023cf6
c000cd8d:	e8 a3 04 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cd92:	83 c4 10             	add    esp,0x10
c000cd95:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000cd9c:	83 ec 0c             	sub    esp,0xc
c000cd9f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000cda2:	e8 75 68 00 00       	call   c001361c <Virt::setupPageSwapping(int)>
c000cda7:	83 c4 10             	add    esp,0x10
c000cdaa:	66 90                	xchg   ax,ax
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	68 11 3d 02 c0       	push   0xc0023d11
c000cdb4:	e8 7c 04 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdbf:	83 ec 08             	sub    esp,0x8
c000cdc2:	6a 13                	push   0x13
c000cdc4:	50                   	push   eax
c000cdc5:	e8 5a cf ff ff       	call   c0009d24 <getDevicesOfType(DeviceType)>
c000cdca:	83 c4 0c             	add    esp,0xc
c000cdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdd6:	50                   	push   eax
c000cdd7:	e8 80 52 01 00       	call   c002205c <LinkedList<Device>::isEmpty()>
c000cddc:	83 c4 10             	add    esp,0x10
c000cddf:	83 f0 01             	xor    eax,0x1
c000cde2:	0f b6 c0             	movzx  eax,al
c000cde5:	85 c0                	test   eax,eax
c000cde7:	0f 84 1f 01 00 00    	je     c000cf0c <ACPI::open(int, int, void*)+0x294>
c000cded:	83 ec 0c             	sub    esp,0xc
c000cdf0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdf3:	50                   	push   eax
c000cdf4:	e8 7f 52 01 00       	call   c0022078 <LinkedList<Device>::getFirstElement()>
c000cdf9:	83 c4 10             	add    esp,0x10
c000cdfc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cdff:	83 ec 0c             	sub    esp,0xc
c000ce02:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ce05:	50                   	push   eax
c000ce06:	e8 75 52 01 00       	call   c0022080 <LinkedList<Device>::removeFirst()>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ce11:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ce14:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ce17:	b8 24 00 00 00       	mov    eax,0x24
c000ce1c:	83 e0 fc             	and    eax,0xfffffffc
c000ce1f:	89 c3                	mov    ebx,eax
c000ce21:	b8 00 00 00 00       	mov    eax,0x0
c000ce26:	66 90                	xchg   ax,ax
c000ce28:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ce2f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ce36:	83 c0 04             	add    eax,0x4
c000ce39:	39 d8                	cmp    eax,ebx
c000ce3b:	72 eb                	jb     c000ce28 <ACPI::open(int, int, void*)+0x1b0>
c000ce3d:	83 ec 08             	sub    esp,0x8
c000ce40:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ce46:	50                   	push   eax
c000ce47:	83 ec 24             	sub    esp,0x24
c000ce4a:	89 e1                	mov    ecx,esp
c000ce4c:	b8 24 00 00 00       	mov    eax,0x24
c000ce51:	83 e0 fc             	and    eax,0xfffffffc
c000ce54:	89 c3                	mov    ebx,eax
c000ce56:	b8 00 00 00 00       	mov    eax,0x0
c000ce5b:	90                   	nop
c000ce5c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ce63:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ce66:	83 c0 04             	add    eax,0x4
c000ce69:	39 d8                	cmp    eax,ebx
c000ce6b:	72 ef                	jb     c000ce5c <ACPI::open(int, int, void*)+0x1e4>
c000ce6d:	e8 2c 12 01 00       	call   c001e09e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce72:	83 c4 30             	add    esp,0x30
c000ce75:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ce78:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ce7c:	0f 84 4e ff ff ff    	je     c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000ce82:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ce89:	83 ec 0c             	sub    esp,0xc
c000ce8c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ce8f:	e8 18 2b 00 00       	call   c000f9ac <malloc>
c000ce94:	83 c4 10             	add    esp,0x10
c000ce97:	89 c3                	mov    ebx,eax
c000ce99:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ce9e:	83 ec 04             	sub    esp,0x4
c000cea1:	50                   	push   eax
c000cea2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cea5:	53                   	push   ebx
c000cea6:	e8 dd b2 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ceb1:	83 ec 0c             	sub    esp,0xc
c000ceb4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ceb7:	e8 ae b5 ff ff       	call   c000846a <File::exists()>
c000cebc:	83 c4 10             	add    esp,0x10
c000cebf:	0f b6 c0             	movzx  eax,al
c000cec2:	85 c0                	test   eax,eax
c000cec4:	74 22                	je     c000cee8 <ACPI::open(int, int, void*)+0x270>
c000cec6:	83 ec 08             	sub    esp,0x8
c000cec9:	6a 01                	push   0x1
c000cecb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cece:	e8 d0 94 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c000ced3:	83 c4 10             	add    esp,0x10
c000ced6:	83 ec 08             	sub    esp,0x8
c000ced9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000cedc:	50                   	push   eax
c000cedd:	e8 22 97 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c000cee2:	83 c4 10             	add    esp,0x10
c000cee5:	8d 76 00             	lea    esi,[esi+0x0]
c000cee8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ceec:	0f 84 de fe ff ff    	je     c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000cef2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000cef5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cef7:	83 c0 08             	add    eax,0x8
c000cefa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefc:	83 ec 0c             	sub    esp,0xc
c000ceff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000cf02:	ff d0                	call   eax
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	e9 c4 fe ff ff       	jmp    c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000cf0c:	83 ec 0c             	sub    esp,0xc
c000cf0f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cf12:	50                   	push   eax
c000cf13:	e8 40 51 01 00       	call   c0022058 <LinkedList<Device>::~LinkedList()>
c000cf18:	83 c4 10             	add    esp,0x10
c000cf1b:	8b 1d c8 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0c8
c000cf21:	83 ec 08             	sub    esp,0x8
c000cf24:	6a 01                	push   0x1
c000cf26:	68 2b 3d 02 c0       	push   0xc0023d2b
c000cf2b:	e8 73 94 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c000cf30:	83 c4 10             	add    esp,0x10
c000cf33:	83 ec 08             	sub    esp,0x8
c000cf36:	53                   	push   ebx
c000cf37:	50                   	push   eax
c000cf38:	e8 c7 96 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c000cf3d:	83 c4 10             	add    esp,0x10
c000cf40:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf45:	85 c0                	test   eax,eax
c000cf47:	0f 84 ef 00 00 00    	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000cf4d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000cf52:	85 c0                	test   eax,eax
c000cf54:	0f 84 e2 00 00 00    	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000cf5a:	83 ec 0c             	sub    esp,0xc
c000cf5d:	68 48 3d 02 c0       	push   0xc0023d48
c000cf62:	e8 ce 02 00 00       	call   c000d235 <KeSetBootMessage(char const*)>
c000cf67:	83 c4 10             	add    esp,0x10
c000cf6a:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cf71:	83 ec 0c             	sub    esp,0xc
c000cf74:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cf77:	e8 30 2a 00 00       	call   c000f9ac <malloc>
c000cf7c:	83 c4 10             	add    esp,0x10
c000cf7f:	89 c3                	mov    ebx,eax
c000cf81:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cf86:	83 ec 04             	sub    esp,0x4
c000cf89:	50                   	push   eax
c000cf8a:	68 65 3d 02 c0       	push   0xc0023d65
c000cf8f:	53                   	push   ebx
c000cf90:	e8 f3 b1 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000cf9b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf9f:	74 1b                	je     c000cfbc <ACPI::open(int, int, void*)+0x344>
c000cfa1:	83 ec 0c             	sub    esp,0xc
c000cfa4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cfa7:	e8 be b4 ff ff       	call   c000846a <File::exists()>
c000cfac:	83 c4 10             	add    esp,0x10
c000cfaf:	0f b6 c0             	movzx  eax,al
c000cfb2:	85 c0                	test   eax,eax
c000cfb4:	74 06                	je     c000cfbc <ACPI::open(int, int, void*)+0x344>
c000cfb6:	b0 01                	mov    al,0x1
c000cfb8:	eb 06                	jmp    c000cfc0 <ACPI::open(int, int, void*)+0x348>
c000cfba:	66 90                	xchg   ax,ax
c000cfbc:	b0 00                	mov    al,0x0
c000cfbe:	66 90                	xchg   ax,ax
c000cfc0:	0f b6 c0             	movzx  eax,al
c000cfc3:	85 c0                	test   eax,eax
c000cfc5:	74 21                	je     c000cfe8 <ACPI::open(int, int, void*)+0x370>
c000cfc7:	83 ec 08             	sub    esp,0x8
c000cfca:	6a 01                	push   0x1
c000cfcc:	68 65 3d 02 c0       	push   0xc0023d65
c000cfd1:	e8 cd 93 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cfdf:	50                   	push   eax
c000cfe0:	e8 1f 96 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c000cfe5:	83 c4 10             	add    esp,0x10
c000cfe8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cfec:	74 1e                	je     c000d00c <ACPI::open(int, int, void*)+0x394>
c000cfee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cff2:	74 18                	je     c000d00c <ACPI::open(int, int, void*)+0x394>
c000cff4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cff7:	8b 00                	mov    eax,DWORD PTR [eax]
c000cff9:	83 c0 08             	add    eax,0x8
c000cffc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000d004:	ff d0                	call   eax
c000d006:	83 c4 10             	add    esp,0x10
c000d009:	8d 76 00             	lea    esi,[esi+0x0]
c000d00c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d011:	83 ec 08             	sub    esp,0x8
c000d014:	68 82 3d 02 c0       	push   0xc0023d82
c000d019:	50                   	push   eax
c000d01a:	e8 f1 f2 ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000d025:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000d029:	74 11                	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000d02b:	83 ec 08             	sub    esp,0x8
c000d02e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000d031:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d034:	e8 27 fc ff ff       	call   c000cc60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d039:	83 c4 10             	add    esp,0x10
c000d03c:	b8 00 00 00 00       	mov    eax,0x0
c000d041:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d044:	c9                   	leave  
c000d045:	c3                   	ret    
c000d046:	66 90                	xchg   ax,ax

c000d048 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d048:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d04e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d055:	89 c2                	mov    edx,eax
c000d057:	c1 fa 1f             	sar    edx,0x1f
c000d05a:	83 ec 04             	sub    esp,0x4
c000d05d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d061:	51                   	push   ecx
c000d062:	52                   	push   edx
c000d063:	50                   	push   eax
c000d064:	e8 3b 27 00 00       	call   c000f7a4 <KeItoa(long long, char*)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	83 ec 08             	sub    esp,0x8
c000d06f:	68 50 3e 02 c0       	push   0xc0023e50
c000d074:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d078:	50                   	push   eax
c000d079:	e8 d2 35 ff ff       	call   c0000650 <strcpy>
c000d07e:	83 c4 10             	add    esp,0x10
c000d081:	83 ec 08             	sub    esp,0x8
c000d084:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d08b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d08f:	50                   	push   eax
c000d090:	e8 db 37 ff ff       	call   c0000870 <strcat>
c000d095:	83 c4 10             	add    esp,0x10
c000d098:	83 ec 08             	sub    esp,0x8
c000d09b:	68 5e 3e 02 c0       	push   0xc0023e5e
c000d0a0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0a4:	50                   	push   eax
c000d0a5:	e8 c6 37 ff ff       	call   c0000870 <strcat>
c000d0aa:	83 c4 10             	add    esp,0x10
c000d0ad:	83 ec 08             	sub    esp,0x8
c000d0b0:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d0b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0bb:	50                   	push   eax
c000d0bc:	e8 af 37 ff ff       	call   c0000870 <strcat>
c000d0c1:	83 c4 10             	add    esp,0x10
c000d0c4:	83 ec 08             	sub    esp,0x8
c000d0c7:	68 61 3e 02 c0       	push   0xc0023e61
c000d0cc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0d0:	50                   	push   eax
c000d0d1:	e8 9a 37 ff ff       	call   c0000870 <strcat>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	83 ec 08             	sub    esp,0x8
c000d0dc:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d0e3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0e7:	50                   	push   eax
c000d0e8:	e8 83 37 ff ff       	call   c0000870 <strcat>
c000d0ed:	83 c4 10             	add    esp,0x10
c000d0f0:	83 ec 08             	sub    esp,0x8
c000d0f3:	68 61 3e 02 c0       	push   0xc0023e61
c000d0f8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0fc:	50                   	push   eax
c000d0fd:	e8 6e 37 ff ff       	call   c0000870 <strcat>
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	83 ec 08             	sub    esp,0x8
c000d108:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d10c:	50                   	push   eax
c000d10d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d111:	50                   	push   eax
c000d112:	e8 59 37 ff ff       	call   c0000870 <strcat>
c000d117:	83 c4 10             	add    esp,0x10
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d121:	50                   	push   eax
c000d122:	e8 db 2c 00 00       	call   c000fe02 <KePanic(char const*)>
c000d127:	83 c4 10             	add    esp,0x10
c000d12a:	90                   	nop
c000d12b:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d131:	c3                   	ret    

c000d132 <KeInitialiseAtexit()>:
c000d132:	83 ec 10             	sub    esp,0x10
c000d135:	6a 60                	push   0x60
c000d137:	6a 00                	push   0x0
c000d139:	68 60 c0 02 c0       	push   0xc002c060
c000d13e:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d148:	e8 a3 33 ff ff       	call   c00004f0 <memset>
c000d14d:	83 c4 1c             	add    esp,0x1c
c000d150:	c3                   	ret    

c000d151 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d151:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d156:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d15a:	89 14 85 60 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fa0],edx
c000d161:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d165:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d16c:	40                   	inc    eax
c000d16d:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d172:	83 f8 17             	cmp    eax,0x17
c000d175:	7e 0d                	jle    c000d184 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d177:	c7 44 24 04 63 3e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023e63
c000d17f:	e9 7e 2c 00 00       	jmp    c000fe02 <KePanic(char const*)>
c000d184:	c3                   	ret    

c000d185 <KeExecuteAtexit()>:
c000d185:	53                   	push   ebx
c000d186:	31 db                	xor    ebx,ebx
c000d188:	83 ec 08             	sub    esp,0x8
c000d18b:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d191:	7e 50                	jle    c000d1e3 <KeExecuteAtexit()+0x5e>
c000d193:	8b 04 9d 60 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3fa0]
c000d19a:	85 c0                	test   eax,eax
c000d19c:	74 42                	je     c000d1e0 <KeExecuteAtexit()+0x5b>
c000d19e:	51                   	push   ecx
c000d19f:	50                   	push   eax
c000d1a0:	53                   	push   ebx
c000d1a1:	68 7c 3e 02 c0       	push   0xc0023e7c
c000d1a6:	e8 bb 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d1ab:	58                   	pop    eax
c000d1ac:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d1b3:	ff 14 9d 60 c0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd3fa0]
c000d1ba:	c7 04 24 9e 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e9e
c000d1c1:	e8 a0 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d1c6:	c7 04 24 a8 45 02 c0 	mov    DWORD PTR [esp],0xc00245a8
c000d1cd:	c7 04 9d 60 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3fa0],0x0
c000d1d8:	e8 89 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d1dd:	83 c4 10             	add    esp,0x10
c000d1e0:	43                   	inc    ebx
c000d1e1:	eb a8                	jmp    c000d18b <KeExecuteAtexit()+0x6>
c000d1e3:	83 c4 08             	add    esp,0x8
c000d1e6:	5b                   	pop    ebx
c000d1e7:	c3                   	ret    

c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d1e8:	8b 15 c0 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0c0
c000d1ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1f2:	21 d0                	and    eax,edx
c000d1f4:	0f 95 c0             	setne  al
c000d1f7:	c3                   	ret    

c000d1f8 <KeInitialiseBootConfigurationFlags()>:
c000d1f8:	b8 00 05 00 00       	mov    eax,0x500
c000d1fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1ff:	a3 c0 c0 02 c0       	mov    ds:0xc002c0c0,eax
c000d204:	90                   	nop
c000d205:	c3                   	ret    

c000d206 <KeDisplaySplashScreen()>:
c000d206:	53                   	push   ebx
c000d207:	bb 01 00 00 00       	mov    ebx,0x1
c000d20c:	83 ec 08             	sub    esp,0x8
c000d20f:	43                   	inc    ebx
c000d210:	0f be 83 a1 3e 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc15f]
c000d217:	85 c0                	test   eax,eax
c000d219:	74 15                	je     c000d230 <KeDisplaySplashScreen()+0x2a>
c000d21b:	83 ec 0c             	sub    esp,0xc
c000d21e:	6a 01                	push   0x1
c000d220:	53                   	push   ebx
c000d221:	6a 00                	push   0x0
c000d223:	6a 0f                	push   0xf
c000d225:	50                   	push   eax
c000d226:	e8 3d e5 00 00       	call   c001b768 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d22b:	83 c4 20             	add    esp,0x20
c000d22e:	eb df                	jmp    c000d20f <KeDisplaySplashScreen()+0x9>
c000d230:	83 c4 08             	add    esp,0x8
c000d233:	5b                   	pop    ebx
c000d234:	c3                   	ret    

c000d235 <KeSetBootMessage(char const*)>:
c000d235:	57                   	push   edi
c000d236:	56                   	push   esi
c000d237:	53                   	push   ebx
c000d238:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d23e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d245:	68 9e 00 00 00       	push   0x9e
c000d24a:	6a 00                	push   0x0
c000d24c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d250:	56                   	push   esi
c000d251:	e8 9a 32 ff ff       	call   c00004f0 <memset>
c000d256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d259:	e8 22 33 ff ff       	call   c0000580 <strlen>
c000d25e:	ba 50 00 00 00       	mov    edx,0x50
c000d263:	83 c4 10             	add    esp,0x10
c000d266:	31 c9                	xor    ecx,ecx
c000d268:	29 c2                	sub    edx,eax
c000d26a:	83 e2 fe             	and    edx,0xfffffffe
c000d26d:	01 f2                	add    edx,esi
c000d26f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d274:	84 c0                	test   al,al
c000d276:	74 0a                	je     c000d282 <KeSetBootMessage(char const*)+0x4d>
c000d278:	80 cc 07             	or     ah,0x7
c000d27b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d27f:	41                   	inc    ecx
c000d280:	eb ed                	jmp    c000d26f <KeSetBootMessage(char const*)+0x3a>
c000d282:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d287:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d28c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d28e:	50                   	push   eax
c000d28f:	50                   	push   eax
c000d290:	53                   	push   ebx
c000d291:	68 b6 3e 02 c0       	push   0xc0023eb6
c000d296:	e8 cb 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d29b:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d2a1:	5b                   	pop    ebx
c000d2a2:	5e                   	pop    esi
c000d2a3:	5f                   	pop    edi
c000d2a4:	c3                   	ret    

c000d2a5 <__cxa_atexit>:
c000d2a5:	31 c0                	xor    eax,eax
c000d2a7:	c3                   	ret    

c000d2a8 <__cxa_finalize>:
c000d2a8:	c3                   	ret    

c000d2a9 <__stack_chk_fail>:
c000d2a9:	55                   	push   ebp
c000d2aa:	89 e5                	mov    ebp,esp
c000d2ac:	83 ec 10             	sub    esp,0x10
c000d2af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2b2:	68 c4 3e 02 c0       	push   0xc0023ec4
c000d2b7:	e8 aa 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d2bc:	58                   	pop    eax
c000d2bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c0:	5a                   	pop    edx
c000d2c1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d2c4:	68 c4 3e 02 c0       	push   0xc0023ec4
c000d2c9:	e8 98 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d2ce:	c7 04 24 cc 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ecc
c000d2d5:	e8 28 2b 00 00       	call   c000fe02 <KePanic(char const*)>
c000d2da:	83 c4 10             	add    esp,0x10
c000d2dd:	c9                   	leave  
c000d2de:	c3                   	ret    

c000d2df <__cxa_pure_virtual>:
c000d2df:	83 ec 18             	sub    esp,0x18
c000d2e2:	68 e4 3e 02 c0       	push   0xc0023ee4
c000d2e7:	e8 16 2b 00 00       	call   c000fe02 <KePanic(char const*)>
c000d2ec:	83 c4 1c             	add    esp,0x1c
c000d2ef:	c3                   	ret    

c000d2f0 <operator new[](unsigned long)>:
c000d2f0:	e9 b7 26 00 00       	jmp    c000f9ac <malloc>

c000d2f5 <operator delete(void*, unsigned long)>:
c000d2f5:	e9 d2 26 00 00       	jmp    c000f9cc <rfree>

c000d2fa <operator delete[](void*)>:
c000d2fa:	e9 cd 26 00 00       	jmp    c000f9cc <rfree>

c000d2ff <operator delete[](void*, unsigned long)>:
c000d2ff:	e9 c8 26 00 00       	jmp    c000f9cc <rfree>

c000d304 <CUnlockScheduler>:
c000d304:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000d30c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d311:	85 c0                	test   eax,eax
c000d313:	75 03                	jne    c000d318 <CUnlockScheduler+0x14>
c000d315:	fb                   	sti    
c000d316:	66 90                	xchg   ax,ax
c000d318:	90                   	nop
c000d319:	c3                   	ret    
c000d31a:	66 90                	xchg   ax,ax

c000d31c <CLockScheduler>:
c000d31c:	fa                   	cli    
c000d31d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d322:	83 c0 01             	add    eax,0x1
c000d325:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000d32a:	90                   	nop
c000d32b:	c3                   	ret    

c000d32c <CPrintf>:
c000d32c:	83 ec 0c             	sub    esp,0xc
c000d32f:	83 ec 08             	sub    esp,0x8
c000d332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d336:	68 f7 3e 02 c0       	push   0xc0023ef7
c000d33b:	e8 26 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d340:	83 c4 10             	add    esp,0x10
c000d343:	90                   	nop
c000d344:	83 c4 0c             	add    esp,0xc
c000d347:	c3                   	ret    

c000d348 <CmOpen(char const*)>:
c000d348:	57                   	push   edi
c000d349:	56                   	push   esi
c000d34a:	53                   	push   ebx
c000d34b:	83 ec 1c             	sub    esp,0x1c
c000d34e:	6a 30                	push   0x30
c000d350:	e8 57 26 00 00       	call   c000f9ac <malloc>
c000d355:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d35c:	89 c3                	mov    ebx,eax
c000d35e:	e8 49 26 00 00       	call   c000f9ac <malloc>
c000d363:	83 c4 0c             	add    esp,0xc
c000d366:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000d36c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d370:	89 c6                	mov    esi,eax
c000d372:	50                   	push   eax
c000d373:	e8 10 ae ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000d378:	83 c4 0c             	add    esp,0xc
c000d37b:	89 33                	mov    DWORD PTR [ebx],esi
c000d37d:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d381:	50                   	push   eax
c000d382:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d386:	50                   	push   eax
c000d387:	56                   	push   esi
c000d388:	e8 1b b1 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c000d38d:	5a                   	pop    edx
c000d38e:	59                   	pop    ecx
c000d38f:	6a 01                	push   0x1
c000d391:	ff 33                	push   DWORD PTR [ebx]
c000d393:	e8 0e ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d398:	5e                   	pop    esi
c000d399:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d39d:	e8 0a 26 00 00       	call   c000f9ac <malloc>
c000d3a2:	5a                   	pop    edx
c000d3a3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d3a7:	89 c7                	mov    edi,eax
c000d3a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3ad:	56                   	push   esi
c000d3ae:	57                   	push   edi
c000d3af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3b7:	50                   	push   eax
c000d3b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3bb:	83 c4 14             	add    esp,0x14
c000d3be:	ff 33                	push   DWORD PTR [ebx]
c000d3c0:	e8 3f ae ff ff       	call   c0008204 <File::close()>
c000d3c5:	59                   	pop    ecx
c000d3c6:	58                   	pop    eax
c000d3c7:	6a 13                	push   0x13
c000d3c9:	ff 33                	push   DWORD PTR [ebx]
c000d3cb:	e8 d6 ad ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d3d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d4:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3d7:	57                   	push   edi
c000d3d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3e0:	50                   	push   eax
c000d3e1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d3e4:	83 c4 14             	add    esp,0x14
c000d3e7:	57                   	push   edi
c000d3e8:	e8 cf 25 00 00       	call   c000f9bc <free>
c000d3ed:	83 c4 10             	add    esp,0x10
c000d3f0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d3f3:	75 10                	jne    c000d405 <CmOpen(char const*)+0xbd>
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	68 fa 3e 02 c0       	push   0xc0023efa
c000d3fd:	e8 00 2a 00 00       	call   c000fe02 <KePanic(char const*)>
c000d402:	83 c4 10             	add    esp,0x10
c000d405:	50                   	push   eax
c000d406:	6a 00                	push   0x0
c000d408:	6a 00                	push   0x0
c000d40a:	ff 33                	push   DWORD PTR [ebx]
c000d40c:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d40f:	e8 50 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d414:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d416:	8b 10                	mov    edx,DWORD PTR [eax]
c000d418:	89 34 24             	mov    DWORD PTR [esp],esi
c000d41b:	57                   	push   edi
c000d41c:	6a 00                	push   0x0
c000d41e:	6a 2b                	push   0x2b
c000d420:	50                   	push   eax
c000d421:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d424:	83 c4 1c             	add    esp,0x1c
c000d427:	6a 00                	push   0x0
c000d429:	6a 00                	push   0x0
c000d42b:	ff 33                	push   DWORD PTR [ebx]
c000d42d:	e8 32 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d432:	83 c4 0c             	add    esp,0xc
c000d435:	6a 08                	push   0x8
c000d437:	68 0b 3f 02 c0       	push   0xc0023f0b
c000d43c:	57                   	push   edi
c000d43d:	e8 3e 2f ff ff       	call   c0000380 <memcmp>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	85 c0                	test   eax,eax
c000d447:	74 10                	je     c000d459 <CmOpen(char const*)+0x111>
c000d449:	83 ec 0c             	sub    esp,0xc
c000d44c:	68 14 3f 02 c0       	push   0xc0023f14
c000d451:	e8 ac 29 00 00       	call   c000fe02 <KePanic(char const*)>
c000d456:	83 c4 10             	add    esp,0x10
c000d459:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	89 d8                	mov    eax,ebx
c000d462:	5b                   	pop    ebx
c000d463:	5e                   	pop    esi
c000d464:	5f                   	pop    edi
c000d465:	c3                   	ret    

c000d466 <CmClose(Reghive_Tag*)>:
c000d466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d46a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d46e:	74 0b                	je     c000d47b <CmClose(Reghive_Tag*)+0x15>
c000d470:	8b 00                	mov    eax,DWORD PTR [eax]
c000d472:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d476:	e9 89 ad ff ff       	jmp    c0008204 <File::close()>
c000d47b:	c3                   	ret    

c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d47c:	53                   	push   ebx
c000d47d:	83 ec 18             	sub    esp,0x18
c000d480:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d484:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d488:	74 29                	je     c000d4b3 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d48a:	50                   	push   eax
c000d48b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d490:	99                   	cdq    
c000d491:	52                   	push   edx
c000d492:	50                   	push   eax
c000d493:	ff 33                	push   DWORD PTR [ebx]
c000d495:	e8 ca ad ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d49a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49c:	5a                   	pop    edx
c000d49d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d4a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4a3:	51                   	push   ecx
c000d4a4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d4a8:	6a 00                	push   0x0
c000d4aa:	6a 2b                	push   0x2b
c000d4ac:	50                   	push   eax
c000d4ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4b0:	83 c4 20             	add    esp,0x20
c000d4b3:	83 c4 18             	add    esp,0x18
c000d4b6:	5b                   	pop    ebx
c000d4b7:	c3                   	ret    

c000d4b8 <CmGetString(Reghive_Tag*, int, char*)>:
c000d4b8:	55                   	push   ebp
c000d4b9:	57                   	push   edi
c000d4ba:	56                   	push   esi
c000d4bb:	53                   	push   ebx
c000d4bc:	31 db                	xor    ebx,ebx
c000d4be:	83 ec 70             	sub    esp,0x70
c000d4c1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d4c5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d4cc:	50                   	push   eax
c000d4cd:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d4d4:	55                   	push   ebp
c000d4d5:	e8 a2 ff ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4da:	83 c4 10             	add    esp,0x10
c000d4dd:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d4e2:	c1 e0 08             	shl    eax,0x8
c000d4e5:	89 c2                	mov    edx,eax
c000d4e7:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d4ec:	09 d0                	or     eax,edx
c000d4ee:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d4f3:	c1 e0 08             	shl    eax,0x8
c000d4f6:	09 d0                	or     eax,edx
c000d4f8:	74 25                	je     c000d51f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d4fa:	52                   	push   edx
c000d4fb:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d4ff:	52                   	push   edx
c000d500:	6b fb 0d             	imul   edi,ebx,0xd
c000d503:	50                   	push   eax
c000d504:	55                   	push   ebp
c000d505:	e8 72 ff ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d50a:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d50e:	b9 27 00 00 00       	mov    ecx,0x27
c000d513:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d51a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d51c:	83 c4 10             	add    esp,0x10
c000d51f:	83 c3 03             	add    ebx,0x3
c000d522:	83 fb 15             	cmp    ebx,0x15
c000d525:	75 b6                	jne    c000d4dd <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d527:	83 c4 6c             	add    esp,0x6c
c000d52a:	5b                   	pop    ebx
c000d52b:	5e                   	pop    esi
c000d52c:	5f                   	pop    edi
c000d52d:	5d                   	pop    ebp
c000d52e:	c3                   	ret    

c000d52f <CmEnterDirectory(Reghive_Tag*, int)>:
c000d52f:	83 ec 40             	sub    esp,0x40
c000d532:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d536:	50                   	push   eax
c000d537:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d53b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d53f:	e8 38 ff ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d544:	83 c4 10             	add    esp,0x10
c000d547:	83 c8 ff             	or     eax,0xffffffff
c000d54a:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d54f:	75 19                	jne    c000d56a <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d551:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d556:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d55b:	c1 e0 08             	shl    eax,0x8
c000d55e:	09 c2                	or     edx,eax
c000d560:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d565:	c1 e0 10             	shl    eax,0x10
c000d568:	09 d0                	or     eax,edx
c000d56a:	83 c4 3c             	add    esp,0x3c
c000d56d:	c3                   	ret    

c000d56e <CmGetNext(Reghive_Tag*, int)>:
c000d56e:	83 ec 40             	sub    esp,0x40
c000d571:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d575:	50                   	push   eax
c000d576:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57e:	e8 f9 fe ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d583:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d588:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d58d:	c1 e0 08             	shl    eax,0x8
c000d590:	09 c2                	or     edx,eax
c000d592:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d597:	83 c4 4c             	add    esp,0x4c
c000d59a:	c1 e0 10             	shl    eax,0x10
c000d59d:	09 d0                	or     eax,edx
c000d59f:	c3                   	ret    

c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d5a0:	53                   	push   ebx
c000d5a1:	83 ec 18             	sub    esp,0x18
c000d5a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d5a8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5ac:	74 29                	je     c000d5d7 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d5ae:	50                   	push   eax
c000d5af:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d5b4:	99                   	cdq    
c000d5b5:	52                   	push   edx
c000d5b6:	50                   	push   eax
c000d5b7:	ff 33                	push   DWORD PTR [ebx]
c000d5b9:	e8 a6 ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d5be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5c0:	5a                   	pop    edx
c000d5c1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d5c5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5c7:	51                   	push   ecx
c000d5c8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d5cc:	6a 00                	push   0x0
c000d5ce:	6a 2b                	push   0x2b
c000d5d0:	50                   	push   eax
c000d5d1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d5d4:	83 c4 20             	add    esp,0x20
c000d5d7:	83 c4 18             	add    esp,0x18
c000d5da:	5b                   	pop    ebx
c000d5db:	c3                   	ret    

c000d5dc <CmFreeExtent(Reghive_Tag*, int)>:
c000d5dc:	53                   	push   ebx
c000d5dd:	83 ec 3c             	sub    esp,0x3c
c000d5e0:	6a 2b                	push   0x2b
c000d5e2:	6a 00                	push   0x0
c000d5e4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d5e8:	53                   	push   ebx
c000d5e9:	e8 02 2f ff ff       	call   c00004f0 <memset>
c000d5ee:	83 c4 0c             	add    esp,0xc
c000d5f1:	53                   	push   ebx
c000d5f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5fa:	e8 a1 ff ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5ff:	83 c4 48             	add    esp,0x48
c000d602:	5b                   	pop    ebx
c000d603:	c3                   	ret    

c000d604 <CmUpdateHeader(Reghive_Tag*)>:
c000d604:	83 ec 0c             	sub    esp,0xc
c000d607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d60f:	74 10                	je     c000d621 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d611:	52                   	push   edx
c000d612:	8d 50 05             	lea    edx,[eax+0x5]
c000d615:	52                   	push   edx
c000d616:	6a 00                	push   0x0
c000d618:	50                   	push   eax
c000d619:	e8 82 ff ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d61e:	83 c4 10             	add    esp,0x10
c000d621:	83 c4 0c             	add    esp,0xc
c000d624:	c3                   	ret    

c000d625 <CmExpand(Reghive_Tag*, int)>:
c000d625:	55                   	push   ebp
c000d626:	57                   	push   edi
c000d627:	83 cf ff             	or     edi,0xffffffff
c000d62a:	56                   	push   esi
c000d62b:	53                   	push   ebx
c000d62c:	83 ec 3c             	sub    esp,0x3c
c000d62f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d633:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d637:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d63b:	74 59                	je     c000d696 <CmExpand(Reghive_Tag*, int)+0x71>
c000d63d:	50                   	push   eax
c000d63e:	31 d2                	xor    edx,edx
c000d640:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d644:	31 ff                	xor    edi,edi
c000d646:	52                   	push   edx
c000d647:	50                   	push   eax
c000d648:	ff 33                	push   DWORD PTR [ebx]
c000d64a:	e8 15 ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d64f:	83 c4 0c             	add    esp,0xc
c000d652:	6a 2b                	push   0x2b
c000d654:	6a 00                	push   0x0
c000d656:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d65a:	55                   	push   ebp
c000d65b:	e8 90 2e ff ff       	call   c00004f0 <memset>
c000d660:	83 c4 10             	add    esp,0x10
c000d663:	39 f7                	cmp    edi,esi
c000d665:	7d 1b                	jge    c000d682 <CmExpand(Reghive_Tag*, int)+0x5d>
c000d667:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d669:	83 ec 0c             	sub    esp,0xc
c000d66c:	47                   	inc    edi
c000d66d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d671:	8b 10                	mov    edx,DWORD PTR [eax]
c000d673:	51                   	push   ecx
c000d674:	55                   	push   ebp
c000d675:	6a 00                	push   0x0
c000d677:	6a 2b                	push   0x2b
c000d679:	50                   	push   eax
c000d67a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d67d:	83 c4 20             	add    esp,0x20
c000d680:	eb e1                	jmp    c000d663 <CmExpand(Reghive_Tag*, int)+0x3e>
c000d682:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d685:	83 ec 0c             	sub    esp,0xc
c000d688:	01 fe                	add    esi,edi
c000d68a:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d68d:	53                   	push   ebx
c000d68e:	e8 71 ff ff ff       	call   c000d604 <CmUpdateHeader(Reghive_Tag*)>
c000d693:	83 c4 10             	add    esp,0x10
c000d696:	83 c4 3c             	add    esp,0x3c
c000d699:	89 f8                	mov    eax,edi
c000d69b:	5b                   	pop    ebx
c000d69c:	5e                   	pop    esi
c000d69d:	5f                   	pop    edi
c000d69e:	5d                   	pop    ebp
c000d69f:	c3                   	ret    

c000d6a0 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d6a0:	55                   	push   ebp
c000d6a1:	57                   	push   edi
c000d6a2:	56                   	push   esi
c000d6a3:	53                   	push   ebx
c000d6a4:	83 cb ff             	or     ebx,0xffffffff
c000d6a7:	83 ec 1c             	sub    esp,0x1c
c000d6aa:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6ae:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d6b2:	74 68                	je     c000d71c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6b4:	51                   	push   ecx
c000d6b5:	be 2b 00 00 00       	mov    esi,0x2b
c000d6ba:	6a 00                	push   0x0
c000d6bc:	31 ff                	xor    edi,edi
c000d6be:	6a 00                	push   0x0
c000d6c0:	31 db                	xor    ebx,ebx
c000d6c2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6c5:	e8 9a ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d6ca:	83 c4 10             	add    esp,0x10
c000d6cd:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d6d0:	76 3b                	jbe    c000d70d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d6d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d6d5:	83 ec 0c             	sub    esp,0xc
c000d6d8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d6dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6de:	51                   	push   ecx
c000d6df:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d6e3:	51                   	push   ecx
c000d6e4:	6a 00                	push   0x0
c000d6e6:	6a 01                	push   0x1
c000d6e8:	50                   	push   eax
c000d6e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d6ec:	83 c4 20             	add    esp,0x20
c000d6ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d6f4:	74 26                	je     c000d71c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6f6:	52                   	push   edx
c000d6f7:	43                   	inc    ebx
c000d6f8:	57                   	push   edi
c000d6f9:	56                   	push   esi
c000d6fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6fd:	e8 62 ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d702:	83 c6 2b             	add    esi,0x2b
c000d705:	83 d7 00             	adc    edi,0x0
c000d708:	83 c4 10             	add    esp,0x10
c000d70b:	eb c0                	jmp    c000d6cd <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d70d:	50                   	push   eax
c000d70e:	50                   	push   eax
c000d70f:	6a 40                	push   0x40
c000d711:	55                   	push   ebp
c000d712:	e8 0e ff ff ff       	call   c000d625 <CmExpand(Reghive_Tag*, int)>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 c3                	mov    ebx,eax
c000d71c:	83 c4 1c             	add    esp,0x1c
c000d71f:	89 d8                	mov    eax,ebx
c000d721:	5b                   	pop    ebx
c000d722:	5e                   	pop    esi
c000d723:	5f                   	pop    edi
c000d724:	5d                   	pop    ebp
c000d725:	c3                   	ret    

c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d726:	55                   	push   ebp
c000d727:	57                   	push   edi
c000d728:	56                   	push   esi
c000d729:	53                   	push   ebx
c000d72a:	81 ec 88 00 00 00    	sub    esp,0x88
c000d730:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d737:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d73e:	e8 5d ff ff ff       	call   c000d6a0 <CmFindUnusedExtent(Reghive_Tag*)>
c000d743:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d747:	83 c4 0c             	add    esp,0xc
c000d74a:	6a 2b                	push   0x2b
c000d74c:	6a 00                	push   0x0
c000d74e:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d752:	55                   	push   ebp
c000d753:	e8 98 2d ff ff       	call   c00004f0 <memset>
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	85 db                	test   ebx,ebx
c000d75d:	74 12                	je     c000d771 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d75f:	51                   	push   ecx
c000d760:	55                   	push   ebp
c000d761:	53                   	push   ebx
c000d762:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d769:	e8 0e fd ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d76e:	83 c4 10             	add    esp,0x10
c000d771:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d775:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d77c:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d781:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d783:	85 db                	test   ebx,ebx
c000d785:	74 49                	je     c000d7d0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d787:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d78c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d795:	c1 e0 08             	shl    eax,0x8
c000d798:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d79e:	09 c8                	or     eax,ecx
c000d7a0:	74 11                	je     c000d7b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d7a2:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d7a6:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d7aa:	c1 e8 10             	shr    eax,0x10
c000d7ad:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d7b1:	eb 0f                	jmp    c000d7c2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d7b3:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d7b8:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7bd:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7c2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d7c6:	c1 ea 08             	shr    edx,0x8
c000d7c9:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d7ce:	eb 0f                	jmp    c000d7df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d7d0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d7d5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7da:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7df:	52                   	push   edx
c000d7e0:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d7e4:	50                   	push   eax
c000d7e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7f0:	e8 ab fd ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	85 db                	test   ebx,ebx
c000d7fa:	74 12                	je     c000d80e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d7fc:	50                   	push   eax
c000d7fd:	55                   	push   ebp
c000d7fe:	53                   	push   ebx
c000d7ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d806:	e8 95 fd ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d812:	83 c4 7c             	add    esp,0x7c
c000d815:	5b                   	pop    ebx
c000d816:	5e                   	pop    esi
c000d817:	5f                   	pop    edi
c000d818:	5d                   	pop    ebp
c000d819:	c3                   	ret    

c000d81a <CmSetString(Reghive_Tag*, int, char const*)>:
c000d81a:	55                   	push   ebp
c000d81b:	57                   	push   edi
c000d81c:	56                   	push   esi
c000d81d:	53                   	push   ebx
c000d81e:	bb 27 00 00 00       	mov    ebx,0x27
c000d823:	81 ec 88 00 00 00    	sub    esp,0x88
c000d829:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d830:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d837:	e8 44 2d ff ff       	call   c0000580 <strlen>
c000d83c:	8d 48 26             	lea    ecx,[eax+0x26]
c000d83f:	89 c8                	mov    eax,ecx
c000d841:	99                   	cdq    
c000d842:	f7 fb                	idiv   ebx
c000d844:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d851:	7e 10                	jle    c000d863 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d853:	83 ec 0c             	sub    esp,0xc
c000d856:	68 25 3f 02 c0       	push   0xc0023f25
c000d85b:	e8 a2 25 00 00       	call   c000fe02 <KePanic(char const*)>
c000d860:	83 c4 10             	add    esp,0x10
c000d863:	53                   	push   ebx
c000d864:	31 ed                	xor    ebp,ebp
c000d866:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d86a:	53                   	push   ebx
c000d86b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d872:	57                   	push   edi
c000d873:	e8 04 fc ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d878:	83 c4 10             	add    esp,0x10
c000d87b:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d87f:	89 f0                	mov    eax,esi
c000d881:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d885:	c1 e0 08             	shl    eax,0x8
c000d888:	09 c6                	or     esi,eax
c000d88a:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d88e:	c1 e6 08             	shl    esi,0x8
c000d891:	09 c6                	or     esi,eax
c000d893:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d897:	7e 72                	jle    c000d90b <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d899:	85 f6                	test   esi,esi
c000d89b:	75 25                	jne    c000d8c2 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d89d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d8a2:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d8a6:	50                   	push   eax
c000d8a7:	6a 00                	push   0x0
c000d8a9:	6a 00                	push   0x0
c000d8ab:	57                   	push   edi
c000d8ac:	e8 75 fe ff ff       	call   c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d8b1:	83 c4 10             	add    esp,0x10
c000d8b4:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d8b7:	89 c6                	mov    esi,eax
c000d8b9:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d8bc:	c1 f8 10             	sar    eax,0x10
c000d8bf:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d8c2:	51                   	push   ecx
c000d8c3:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d8c7:	52                   	push   edx
c000d8c8:	56                   	push   esi
c000d8c9:	57                   	push   edi
c000d8ca:	e8 ad fb ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8cf:	83 c4 0c             	add    esp,0xc
c000d8d2:	6a 27                	push   0x27
c000d8d4:	6a 00                	push   0x0
c000d8d6:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8da:	51                   	push   ecx
c000d8db:	e8 10 2c ff ff       	call   c00004f0 <memset>
c000d8e0:	6b c5 27             	imul   eax,ebp,0x27
c000d8e3:	83 c4 0c             	add    esp,0xc
c000d8e6:	6a 27                	push   0x27
c000d8e8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d8ef:	50                   	push   eax
c000d8f0:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8f4:	51                   	push   ecx
c000d8f5:	e8 96 2d ff ff       	call   c0000690 <strncpy>
c000d8fa:	83 c4 0c             	add    esp,0xc
c000d8fd:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d901:	52                   	push   edx
c000d902:	56                   	push   esi
c000d903:	57                   	push   edi
c000d904:	e8 97 fc ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d909:	eb 19                	jmp    c000d924 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d90b:	85 f6                	test   esi,esi
c000d90d:	74 18                	je     c000d927 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d90f:	52                   	push   edx
c000d910:	52                   	push   edx
c000d911:	56                   	push   esi
c000d912:	57                   	push   edi
c000d913:	e8 c4 fc ff ff       	call   c000d5dc <CmFreeExtent(Reghive_Tag*, int)>
c000d918:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d91c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d920:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d924:	83 c4 10             	add    esp,0x10
c000d927:	45                   	inc    ebp
c000d928:	83 c3 03             	add    ebx,0x3
c000d92b:	83 fd 07             	cmp    ebp,0x7
c000d92e:	0f 85 47 ff ff ff    	jne    c000d87b <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d934:	50                   	push   eax
c000d935:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d939:	50                   	push   eax
c000d93a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d941:	57                   	push   edi
c000d942:	e8 59 fc ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d947:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d94d:	5b                   	pop    ebx
c000d94e:	5e                   	pop    esi
c000d94f:	5f                   	pop    edi
c000d950:	5d                   	pop    ebp
c000d951:	c3                   	ret    

c000d952 <CmGetMatch(char*, char*, bool, bool*)>:
c000d952:	56                   	push   esi
c000d953:	53                   	push   ebx
c000d954:	50                   	push   eax
c000d955:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d95a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d95e:	74 25                	je     c000d985 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d960:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d963:	31 db                	xor    ebx,ebx
c000d965:	50                   	push   eax
c000d966:	50                   	push   eax
c000d967:	8d 04 9d 40 63 02 c0 	lea    eax,[ebx*4-0x3ffd9cc0]
c000d96e:	50                   	push   eax
c000d96f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d973:	e8 08 2e ff ff       	call   c0000780 <strcmp>
c000d978:	83 c4 10             	add    esp,0x10
c000d97b:	85 c0                	test   eax,eax
c000d97d:	74 2e                	je     c000d9ad <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d97f:	43                   	inc    ebx
c000d980:	83 fb 3f             	cmp    ebx,0x3f
c000d983:	75 e0                	jne    c000d965 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d985:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d988:	31 db                	xor    ebx,ebx
c000d98a:	51                   	push   ecx
c000d98b:	51                   	push   ecx
c000d98c:	8d 04 9d 40 63 02 c0 	lea    eax,[ebx*4-0x3ffd9cc0]
c000d993:	50                   	push   eax
c000d994:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d998:	e8 e3 2d ff ff       	call   c0000780 <strcmp>
c000d99d:	83 c4 10             	add    esp,0x10
c000d9a0:	85 c0                	test   eax,eax
c000d9a2:	74 09                	je     c000d9ad <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9a4:	43                   	inc    ebx
c000d9a5:	83 fb 3f             	cmp    ebx,0x3f
c000d9a8:	75 e0                	jne    c000d98a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d9aa:	83 cb ff             	or     ebx,0xffffffff
c000d9ad:	5a                   	pop    edx
c000d9ae:	89 d8                	mov    eax,ebx
c000d9b0:	5b                   	pop    ebx
c000d9b1:	5e                   	pop    esi
c000d9b2:	c3                   	ret    

c000d9b3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d9b3:	55                   	push   ebp
c000d9b4:	31 c0                	xor    eax,eax
c000d9b6:	57                   	push   edi
c000d9b7:	56                   	push   esi
c000d9b8:	53                   	push   ebx
c000d9b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d9c1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d9c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d9c9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d9cb:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d9ce:	83 fd 1f             	cmp    ebp,0x1f
c000d9d1:	7f 0b                	jg     c000d9de <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d9d3:	0f b6 c2             	movzx  eax,dl
c000d9d6:	d3 e0                	shl    eax,cl
c000d9d8:	09 07                	or     DWORD PTR [edi],eax
c000d9da:	b0 01                	mov    al,0x1
c000d9dc:	01 33                	add    DWORD PTR [ebx],esi
c000d9de:	5b                   	pop    ebx
c000d9df:	5e                   	pop    esi
c000d9e0:	5f                   	pop    edi
c000d9e1:	5d                   	pop    ebp
c000d9e2:	c3                   	ret    

c000d9e3 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d9e3:	57                   	push   edi
c000d9e4:	56                   	push   esi
c000d9e5:	53                   	push   ebx
c000d9e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d9ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9ee:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d9f2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9f6:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d9f8:	7c 17                	jl     c000da11 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d9fa:	8b 17                	mov    edx,DWORD PTR [edi]
c000d9fc:	b8 01 00 00 00       	mov    eax,0x1
c000da01:	d3 e0                	shl    eax,cl
c000da03:	48                   	dec    eax
c000da04:	21 d0                	and    eax,edx
c000da06:	d3 ea                	shr    edx,cl
c000da08:	89 17                	mov    DWORD PTR [edi],edx
c000da0a:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da0c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da0f:	eb 05                	jmp    c000da16 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da11:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da14:	31 c0                	xor    eax,eax
c000da16:	5b                   	pop    ebx
c000da17:	5e                   	pop    esi
c000da18:	5f                   	pop    edi
c000da19:	c3                   	ret    

c000da1a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000da1a:	83 ec 40             	sub    esp,0x40
c000da1d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da21:	50                   	push   eax
c000da22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da26:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da2a:	e8 4d fa ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000da33:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000da37:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000da3b:	89 10                	mov    DWORD PTR [eax],edx
c000da3d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000da40:	83 c4 4c             	add    esp,0x4c
c000da43:	c3                   	ret    

c000da44 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000da44:	55                   	push   ebp
c000da45:	57                   	push   edi
c000da46:	56                   	push   esi
c000da47:	53                   	push   ebx
c000da48:	83 ec 40             	sub    esp,0x40
c000da4b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000da4f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000da53:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000da57:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000da5b:	53                   	push   ebx
c000da5c:	56                   	push   esi
c000da5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da61:	e8 16 fa ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da66:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000da6a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000da6e:	83 c4 0c             	add    esp,0xc
c000da71:	53                   	push   ebx
c000da72:	56                   	push   esi
c000da73:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da77:	e8 24 fb ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da7c:	83 c4 4c             	add    esp,0x4c
c000da7f:	5b                   	pop    ebx
c000da80:	5e                   	pop    esi
c000da81:	5f                   	pop    edi
c000da82:	5d                   	pop    ebp
c000da83:	c3                   	ret    

c000da84 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000da84:	55                   	push   ebp
c000da85:	57                   	push   edi
c000da86:	56                   	push   esi
c000da87:	31 f6                	xor    esi,esi
c000da89:	53                   	push   ebx
c000da8a:	31 db                	xor    ebx,ebx
c000da8c:	83 ec 40             	sub    esp,0x40
c000da8f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da97:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da9f:	6a 12                	push   0x12
c000daa1:	68 ee 00 00 00       	push   0xee
c000daa6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000daaa:	e8 41 2a ff ff       	call   c00004f0 <memset>
c000daaf:	83 c4 10             	add    esp,0x10
c000dab2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000dab6:	6a 08                	push   0x8
c000dab8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dabc:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000dac0:	50                   	push   eax
c000dac1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dac5:	55                   	push   ebp
c000dac6:	57                   	push   edi
c000dac7:	e8 e7 fe ff ff       	call   c000d9b3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dacc:	83 c4 10             	add    esp,0x10
c000dacf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dad3:	50                   	push   eax
c000dad4:	6a 06                	push   0x6
c000dad6:	55                   	push   ebp
c000dad7:	57                   	push   edi
c000dad8:	e8 06 ff ff ff       	call   c000d9e3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dadd:	83 c4 10             	add    esp,0x10
c000dae0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dae5:	74 07                	je     c000daee <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000dae7:	46                   	inc    esi
c000dae8:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000daec:	eb e1                	jmp    c000dacf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000daee:	43                   	inc    ebx
c000daef:	83 fb 12             	cmp    ebx,0x12
c000daf2:	75 c2                	jne    c000dab6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000daf4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000daf8:	31 f6                	xor    esi,esi
c000dafa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dafd:	50                   	push   eax
c000dafe:	50                   	push   eax
c000daff:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000db04:	46                   	inc    esi
c000db05:	8d 04 85 40 63 02 c0 	lea    eax,[eax*4-0x3ffd9cc0]
c000db0c:	50                   	push   eax
c000db0d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db11:	e8 5a 2d ff ff       	call   c0000870 <strcat>
c000db16:	83 c4 10             	add    esp,0x10
c000db19:	83 fe 18             	cmp    esi,0x18
c000db1c:	75 df                	jne    c000dafd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000db1e:	83 c4 3c             	add    esp,0x3c
c000db21:	31 c0                	xor    eax,eax
c000db23:	5b                   	pop    ebx
c000db24:	5e                   	pop    esi
c000db25:	5f                   	pop    edi
c000db26:	5d                   	pop    ebp
c000db27:	c3                   	ret    

c000db28 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000db28:	83 ec 40             	sub    esp,0x40
c000db2b:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db2f:	50                   	push   eax
c000db30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db38:	e8 3f f9 ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db3d:	58                   	pop    eax
c000db3e:	5a                   	pop    edx
c000db3f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000db43:	8d 44 24 15          	lea    eax,[esp+0x15]
c000db47:	50                   	push   eax
c000db48:	e8 37 ff ff ff       	call   c000da84 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000db4d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000db52:	83 c4 4c             	add    esp,0x4c
c000db55:	c3                   	ret    

c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000db56:	55                   	push   ebp
c000db57:	57                   	push   edi
c000db58:	56                   	push   esi
c000db59:	53                   	push   ebx
c000db5a:	31 db                	xor    ebx,ebx
c000db5c:	83 ec 70             	sub    esp,0x70
c000db5f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000db66:	6a 30                	push   0x30
c000db68:	6a 00                	push   0x0
c000db6a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000db6e:	56                   	push   esi
c000db6f:	e8 7c 29 ff ff       	call   c00004f0 <memset>
c000db74:	83 c4 10             	add    esp,0x10
c000db77:	83 ec 0c             	sub    esp,0xc
c000db7a:	57                   	push   edi
c000db7b:	e8 00 2a ff ff       	call   c0000580 <strlen>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	39 d8                	cmp    eax,ebx
c000db85:	76 16                	jbe    c000db9d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000db87:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db8b:	83 ec 0c             	sub    esp,0xc
c000db8e:	50                   	push   eax
c000db8f:	e8 cc 2d ff ff       	call   c0000960 <toupper>
c000db94:	83 c4 10             	add    esp,0x10
c000db97:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db9a:	43                   	inc    ebx
c000db9b:	eb da                	jmp    c000db77 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db9d:	52                   	push   edx
c000db9e:	31 db                	xor    ebx,ebx
c000dba0:	6a 18                	push   0x18
c000dba2:	31 ff                	xor    edi,edi
c000dba4:	6a 3f                	push   0x3f
c000dba6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dbaa:	50                   	push   eax
c000dbab:	e8 40 29 ff ff       	call   c00004f0 <memset>
c000dbb0:	83 c4 10             	add    esp,0x10
c000dbb3:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000dbb7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dbbb:	84 c0                	test   al,al
c000dbbd:	0f 84 af 00 00 00    	je     c000dc72 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dbc3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dbc7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dbca:	83 ec 0c             	sub    esp,0xc
c000dbcd:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000dbd2:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dbd6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000dbda:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000dbdf:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dbe3:	56                   	push   esi
c000dbe4:	e8 97 29 ff ff       	call   c0000580 <strlen>
c000dbe9:	83 c4 10             	add    esp,0x10
c000dbec:	85 c0                	test   eax,eax
c000dbee:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbf2:	74 0b                	je     c000dbff <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dbf4:	50                   	push   eax
c000dbf5:	6a 01                	push   0x1
c000dbf7:	56                   	push   esi
c000dbf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dbfc:	50                   	push   eax
c000dbfd:	eb 0a                	jmp    c000dc09 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dbff:	50                   	push   eax
c000dc00:	6a 00                	push   0x0
c000dc02:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dc06:	50                   	push   eax
c000dc07:	6a 00                	push   0x0
c000dc09:	e8 44 fd ff ff       	call   c000d952 <CmGetMatch(char*, char*, bool, bool*)>
c000dc0e:	83 c4 10             	add    esp,0x10
c000dc11:	83 f8 ff             	cmp    eax,0xffffffff
c000dc14:	75 1a                	jne    c000dc30 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dc16:	83 ec 0c             	sub    esp,0xc
c000dc19:	68 3a 3f 02 c0       	push   0xc0023f3a
c000dc1e:	e8 df 21 00 00       	call   c000fe02 <KePanic(char const*)>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	b8 02 00 00 00       	mov    eax,0x2
c000dc2b:	e9 bb 00 00 00       	jmp    c000dceb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc30:	83 ff 18             	cmp    edi,0x18
c000dc33:	75 1a                	jne    c000dc4f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dc35:	83 ec 0c             	sub    esp,0xc
c000dc38:	68 4f 3f 02 c0       	push   0xc0023f4f
c000dc3d:	e8 c0 21 00 00       	call   c000fe02 <KePanic(char const*)>
c000dc42:	83 c4 10             	add    esp,0x10
c000dc45:	b8 01 00 00 00       	mov    eax,0x1
c000dc4a:	e9 9c 00 00 00       	jmp    c000dceb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc4f:	47                   	inc    edi
c000dc50:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc55:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dc59:	0f 45 dd             	cmovne ebx,ebp
c000dc5c:	83 ec 0c             	sub    esp,0xc
c000dc5f:	56                   	push   esi
c000dc60:	e8 1b 29 ff ff       	call   c0000580 <strlen>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	85 c0                	test   eax,eax
c000dc6a:	74 06                	je     c000dc72 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dc6c:	43                   	inc    ebx
c000dc6d:	e9 41 ff ff ff       	jmp    c000dbb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dc72:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dc7a:	31 db                	xor    ebx,ebx
c000dc7c:	31 ff                	xor    edi,edi
c000dc7e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dc86:	50                   	push   eax
c000dc87:	6a 12                	push   0x12
c000dc89:	68 ee 00 00 00       	push   0xee
c000dc8e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc95:	e8 56 28 ff ff       	call   c00004f0 <memset>
c000dc9a:	83 c4 10             	add    esp,0x10
c000dc9d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dca1:	83 fb 17             	cmp    ebx,0x17
c000dca4:	7e 26                	jle    c000dccc <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dca6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcaa:	50                   	push   eax
c000dcab:	6a 08                	push   0x8
c000dcad:	55                   	push   ebp
c000dcae:	56                   	push   esi
c000dcaf:	e8 2f fd ff ff       	call   c000d9e3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dcb4:	83 c4 10             	add    esp,0x10
c000dcb7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dcbc:	74 26                	je     c000dce4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dcbe:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dcc5:	4b                   	dec    ebx
c000dcc6:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dcc9:	47                   	inc    edi
c000dcca:	eb 1c                	jmp    c000dce8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dccc:	6a 06                	push   0x6
c000dcce:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dcd3:	50                   	push   eax
c000dcd4:	55                   	push   ebp
c000dcd5:	56                   	push   esi
c000dcd6:	e8 d8 fc ff ff       	call   c000d9b3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dcdb:	83 c4 10             	add    esp,0x10
c000dcde:	84 c0                	test   al,al
c000dce0:	75 06                	jne    c000dce8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dce2:	eb c2                	jmp    c000dca6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dce4:	31 c0                	xor    eax,eax
c000dce6:	eb 03                	jmp    c000dceb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dce8:	43                   	inc    ebx
c000dce9:	eb b2                	jmp    c000dc9d <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dceb:	83 c4 6c             	add    esp,0x6c
c000dcee:	5b                   	pop    ebx
c000dcef:	5e                   	pop    esi
c000dcf0:	5f                   	pop    edi
c000dcf1:	5d                   	pop    ebp
c000dcf2:	c3                   	ret    

c000dcf3 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dcf3:	53                   	push   ebx
c000dcf4:	83 ec 3c             	sub    esp,0x3c
c000dcf7:	6a 2b                	push   0x2b
c000dcf9:	6a 00                	push   0x0
c000dcfb:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dcff:	53                   	push   ebx
c000dd00:	e8 eb 27 ff ff       	call   c00004f0 <memset>
c000dd05:	58                   	pop    eax
c000dd06:	5a                   	pop    edx
c000dd07:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd0b:	50                   	push   eax
c000dd0c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd10:	e8 41 fe ff ff       	call   c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd15:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dd1a:	83 c4 0c             	add    esp,0xc
c000dd1d:	6a 15                	push   0x15
c000dd1f:	6a 00                	push   0x0
c000dd21:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dd25:	50                   	push   eax
c000dd26:	e8 c5 27 ff ff       	call   c00004f0 <memset>
c000dd2b:	53                   	push   ebx
c000dd2c:	6a 00                	push   0x0
c000dd2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd32:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd36:	e8 eb f9 ff ff       	call   c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd3b:	83 c4 58             	add    esp,0x58
c000dd3e:	5b                   	pop    ebx
c000dd3f:	c3                   	ret    

c000dd40 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dd40:	56                   	push   esi
c000dd41:	53                   	push   ebx
c000dd42:	83 ec 48             	sub    esp,0x48
c000dd45:	6a 12                	push   0x12
c000dd47:	68 ff 00 00 00       	push   0xff
c000dd4c:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dd50:	56                   	push   esi
c000dd51:	e8 9a 27 ff ff       	call   c00004f0 <memset>
c000dd56:	5a                   	pop    edx
c000dd57:	59                   	pop    ecx
c000dd58:	56                   	push   esi
c000dd59:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd5d:	e8 f4 fd ff ff       	call   c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd62:	83 c4 10             	add    esp,0x10
c000dd65:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd69:	85 db                	test   ebx,ebx
c000dd6b:	74 42                	je     c000ddaf <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dd6d:	50                   	push   eax
c000dd6e:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dd72:	50                   	push   eax
c000dd73:	53                   	push   ebx
c000dd74:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd78:	e8 ff f6 ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd7d:	83 c4 0c             	add    esp,0xc
c000dd80:	6a 12                	push   0x12
c000dd82:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dd86:	50                   	push   eax
c000dd87:	56                   	push   esi
c000dd88:	e8 f3 25 ff ff       	call   c0000380 <memcmp>
c000dd8d:	83 c4 10             	add    esp,0x10
c000dd90:	85 c0                	test   eax,eax
c000dd92:	74 1e                	je     c000ddb2 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd94:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd99:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd9e:	c1 e3 08             	shl    ebx,0x8
c000dda1:	09 d8                	or     eax,ebx
c000dda3:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dda8:	c1 e3 10             	shl    ebx,0x10
c000ddab:	09 c3                	or     ebx,eax
c000ddad:	eb ba                	jmp    c000dd69 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000ddaf:	83 cb ff             	or     ebx,0xffffffff
c000ddb2:	83 c4 44             	add    esp,0x44
c000ddb5:	89 d8                	mov    eax,ebx
c000ddb7:	5b                   	pop    ebx
c000ddb8:	5e                   	pop    esi
c000ddb9:	c3                   	ret    

c000ddba <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000ddba:	57                   	push   edi
c000ddbb:	56                   	push   esi
c000ddbc:	53                   	push   ebx
c000ddbd:	83 ec 34             	sub    esp,0x34
c000ddc0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000ddc4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000ddc8:	6a 2b                	push   0x2b
c000ddca:	6a 00                	push   0x0
c000ddcc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddd0:	53                   	push   ebx
c000ddd1:	e8 1a 27 ff ff       	call   c00004f0 <memset>
c000ddd6:	58                   	pop    eax
c000ddd7:	5a                   	pop    edx
c000ddd8:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dddc:	50                   	push   eax
c000dddd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dde1:	e8 70 fd ff ff       	call   c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dde6:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000ddea:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000ddee:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000ddf2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000ddf6:	53                   	push   ebx
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddfd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de01:	e8 20 f9 ff ff       	call   c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de06:	83 c4 50             	add    esp,0x50
c000de09:	5b                   	pop    ebx
c000de0a:	5e                   	pop    esi
c000de0b:	5f                   	pop    edi
c000de0c:	c3                   	ret    

c000de0d <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de0d:	55                   	push   ebp
c000de0e:	57                   	push   edi
c000de0f:	56                   	push   esi
c000de10:	53                   	push   ebx
c000de11:	83 ec 40             	sub    esp,0x40
c000de14:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000de18:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de1c:	6a 2b                	push   0x2b
c000de1e:	6a 00                	push   0x0
c000de20:	8d 74 24 11          	lea    esi,[esp+0x11]
c000de24:	56                   	push   esi
c000de25:	e8 c6 26 ff ff       	call   c00004f0 <memset>
c000de2a:	5f                   	pop    edi
c000de2b:	89 ef                	mov    edi,ebp
c000de2d:	58                   	pop    eax
c000de2e:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de32:	50                   	push   eax
c000de33:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de37:	e8 1a fd ff ff       	call   c000db56 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de3c:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000de41:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000de46:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000de4b:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	85 ed                	test   ebp,ebp
c000de55:	74 14                	je     c000de6b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de57:	51                   	push   ecx
c000de58:	51                   	push   ecx
c000de59:	57                   	push   edi
c000de5a:	53                   	push   ebx
c000de5b:	e8 0e f7 ff ff       	call   c000d56e <CmGetNext(Reghive_Tag*, int)>
c000de60:	83 c4 10             	add    esp,0x10
c000de63:	85 c0                	test   eax,eax
c000de65:	74 04                	je     c000de6b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de67:	89 c7                	mov    edi,eax
c000de69:	eb e8                	jmp    c000de53 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000de6b:	56                   	push   esi
c000de6c:	6a 00                	push   0x0
c000de6e:	57                   	push   edi
c000de6f:	53                   	push   ebx
c000de70:	e8 b1 f8 ff ff       	call   c000d726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de75:	83 c4 0c             	add    esp,0xc
c000de78:	56                   	push   esi
c000de79:	50                   	push   eax
c000de7a:	89 c7                	mov    edi,eax
c000de7c:	53                   	push   ebx
c000de7d:	e8 fa f5 ff ff       	call   c000d47c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de82:	58                   	pop    eax
c000de83:	5a                   	pop    edx
c000de84:	6a 6c                	push   0x6c
c000de86:	6a 00                	push   0x0
c000de88:	6a 00                	push   0x0
c000de8a:	68 60 3f 02 c0       	push   0xc0023f60
c000de8f:	57                   	push   edi
c000de90:	53                   	push   ebx
c000de91:	e8 24 ff ff ff       	call   c000ddba <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de96:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de9a:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de9e:	c1 e8 10             	shr    eax,0x10
c000dea1:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000dea5:	83 c4 1c             	add    esp,0x1c
c000dea8:	56                   	push   esi
c000dea9:	57                   	push   edi
c000deaa:	53                   	push   ebx
c000deab:	e8 f0 f6 ff ff       	call   c000d5a0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000deb0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000deb5:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000deba:	c1 e0 08             	shl    eax,0x8
c000debd:	09 c2                	or     edx,eax
c000debf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000dec4:	83 c4 4c             	add    esp,0x4c
c000dec7:	5b                   	pop    ebx
c000dec8:	5e                   	pop    esi
c000dec9:	c1 e0 10             	shl    eax,0x10
c000decc:	09 d0                	or     eax,edx
c000dece:	5f                   	pop    edi
c000decf:	5d                   	pop    ebp
c000ded0:	c3                   	ret    

c000ded1 <zStrtok(char*, char const*)>:
c000ded1:	55                   	push   ebp
c000ded2:	57                   	push   edi
c000ded3:	56                   	push   esi
c000ded4:	53                   	push   ebx
c000ded5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ded9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dedd:	85 db                	test   ebx,ebx
c000dedf:	74 2f                	je     c000df10 <zStrtok(char*, char const*)+0x3f>
c000dee1:	85 c0                	test   eax,eax
c000dee3:	75 09                	jne    c000deee <zStrtok(char*, char const*)+0x1d>
c000dee5:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c000deea:	85 c0                	test   eax,eax
c000deec:	74 50                	je     c000df3e <zStrtok(char*, char const*)+0x6d>
c000deee:	31 c9                	xor    ecx,ecx
c000def0:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000def4:	74 03                	je     c000def9 <zStrtok(char*, char const*)+0x28>
c000def6:	41                   	inc    ecx
c000def7:	eb f7                	jmp    c000def0 <zStrtok(char*, char const*)+0x1f>
c000def9:	31 d2                	xor    edx,edx
c000defb:	39 ca                	cmp    edx,ecx
c000defd:	74 15                	je     c000df14 <zStrtok(char*, char const*)+0x43>
c000deff:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000df03:	8d 3c 10             	lea    edi,[eax+edx*1]
c000df06:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000df09:	39 ee                	cmp    esi,ebp
c000df0b:	74 13                	je     c000df20 <zStrtok(char*, char const*)+0x4f>
c000df0d:	42                   	inc    edx
c000df0e:	eb eb                	jmp    c000defb <zStrtok(char*, char const*)+0x2a>
c000df10:	31 c0                	xor    eax,eax
c000df12:	eb 2a                	jmp    c000df3e <zStrtok(char*, char const*)+0x6d>
c000df14:	c7 05 c4 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0c4,0x0
c000df1e:	eb 1e                	jmp    c000df3e <zStrtok(char*, char const*)+0x6d>
c000df20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000df23:	39 ce                	cmp    esi,ecx
c000df25:	75 0a                	jne    c000df31 <zStrtok(char*, char const*)+0x60>
c000df27:	40                   	inc    eax
c000df28:	a3 c4 c0 02 c0       	mov    ds:0xc002c0c4,eax
c000df2d:	89 d8                	mov    eax,ebx
c000df2f:	eb 0d                	jmp    c000df3e <zStrtok(char*, char const*)+0x6d>
c000df31:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000df34:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000df38:	89 15 c4 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c4,edx
c000df3e:	5b                   	pop    ebx
c000df3f:	5e                   	pop    esi
c000df40:	5f                   	pop    edi
c000df41:	5d                   	pop    ebp
c000df42:	c3                   	ret    

c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000df43:	57                   	push   edi
c000df44:	56                   	push   esi
c000df45:	53                   	push   ebx
c000df46:	81 ec 08 01 00 00    	sub    esp,0x108
c000df4c:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000df53:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000df5a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000df5e:	53                   	push   ebx
c000df5f:	e8 ec 26 ff ff       	call   c0000650 <strcpy>
c000df64:	59                   	pop    ecx
c000df65:	5e                   	pop    esi
c000df66:	68 bd 4e 02 c0       	push   0xc0024ebd
c000df6b:	53                   	push   ebx
c000df6c:	bb 01 00 00 00       	mov    ebx,0x1
c000df71:	e8 5b ff ff ff       	call   c000ded1 <zStrtok(char*, char const*)>
c000df76:	83 c4 10             	add    esp,0x10
c000df79:	85 c0                	test   eax,eax
c000df7b:	74 3b                	je     c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df7d:	52                   	push   edx
c000df7e:	50                   	push   eax
c000df7f:	6a 01                	push   0x1
c000df81:	57                   	push   edi
c000df82:	e8 b9 fd ff ff       	call   c000dd40 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000df87:	59                   	pop    ecx
c000df88:	5e                   	pop    esi
c000df89:	89 c3                	mov    ebx,eax
c000df8b:	68 bd 4e 02 c0       	push   0xc0024ebd
c000df90:	6a 00                	push   0x0
c000df92:	e8 3a ff ff ff       	call   c000ded1 <zStrtok(char*, char const*)>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	85 c0                	test   eax,eax
c000df9c:	89 c6                	mov    esi,eax
c000df9e:	74 18                	je     c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfa0:	52                   	push   edx
c000dfa1:	52                   	push   edx
c000dfa2:	53                   	push   ebx
c000dfa3:	57                   	push   edi
c000dfa4:	e8 86 f5 ff ff       	call   c000d52f <CmEnterDirectory(Reghive_Tag*, int)>
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	83 f8 ff             	cmp    eax,0xffffffff
c000dfaf:	89 c3                	mov    ebx,eax
c000dfb1:	74 05                	je     c000dfb8 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfb3:	50                   	push   eax
c000dfb4:	56                   	push   esi
c000dfb5:	53                   	push   ebx
c000dfb6:	eb c9                	jmp    c000df81 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000dfb8:	81 c4 00 01 00 00    	add    esp,0x100
c000dfbe:	89 d8                	mov    eax,ebx
c000dfc0:	5b                   	pop    ebx
c000dfc1:	5e                   	pop    esi
c000dfc2:	5f                   	pop    edi
c000dfc3:	c3                   	ret    

c000dfc4 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000dfc4:	55                   	push   ebp
c000dfc5:	57                   	push   edi
c000dfc6:	56                   	push   esi
c000dfc7:	53                   	push   ebx
c000dfc8:	83 ec 5c             	sub    esp,0x5c
c000dfcb:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000dfcf:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000dfd3:	85 db                	test   ebx,ebx
c000dfd5:	0f 8e 84 00 00 00    	jle    c000e05f <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000dfdb:	57                   	push   edi
c000dfdc:	31 ed                	xor    ebp,ebp
c000dfde:	6a 32                	push   0x32
c000dfe0:	6a 00                	push   0x0
c000dfe2:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000dfe6:	57                   	push   edi
c000dfe7:	e8 04 25 ff ff       	call   c00004f0 <memset>
c000dfec:	83 c4 0c             	add    esp,0xc
c000dfef:	57                   	push   edi
c000dff0:	53                   	push   ebx
c000dff1:	56                   	push   esi
c000dff2:	e8 31 fb ff ff       	call   c000db28 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000dff7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e002:	7d 13                	jge    c000e017 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	45                   	inc    ebp
c000e008:	68 33 57 02 c0       	push   0xc0025733
c000e00d:	e8 54 8f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e012:	83 c4 10             	add    esp,0x10
c000e015:	eb e7                	jmp    c000dffe <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e017:	51                   	push   ecx
c000e018:	57                   	push   edi
c000e019:	53                   	push   ebx
c000e01a:	68 66 3f 02 c0       	push   0xc0023f66
c000e01f:	e8 42 8f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e024:	83 c4 10             	add    esp,0x10
c000e027:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e02c:	75 1e                	jne    c000e04c <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e02e:	52                   	push   edx
c000e02f:	52                   	push   edx
c000e030:	53                   	push   ebx
c000e031:	56                   	push   esi
c000e032:	e8 f8 f4 ff ff       	call   c000d52f <CmEnterDirectory(Reghive_Tag*, int)>
c000e037:	83 c4 0c             	add    esp,0xc
c000e03a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e03e:	8d 51 04             	lea    edx,[ecx+0x4]
c000e041:	52                   	push   edx
c000e042:	50                   	push   eax
c000e043:	56                   	push   esi
c000e044:	e8 7b ff ff ff       	call   c000dfc4 <CmDisplayTree(Reghive_Tag*, int, int)>
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	50                   	push   eax
c000e04d:	50                   	push   eax
c000e04e:	53                   	push   ebx
c000e04f:	56                   	push   esi
c000e050:	e8 19 f5 ff ff       	call   c000d56e <CmGetNext(Reghive_Tag*, int)>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	89 c3                	mov    ebx,eax
c000e05a:	e9 74 ff ff ff       	jmp    c000dfd3 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e05f:	83 c4 5c             	add    esp,0x5c
c000e062:	5b                   	pop    ebx
c000e063:	5e                   	pop    esi
c000e064:	5f                   	pop    edi
c000e065:	5d                   	pop    ebp
c000e066:	c3                   	ret    

c000e067 <CmSplitFinalSlashInPlace(char*)>:
c000e067:	53                   	push   ebx
c000e068:	83 ec 14             	sub    esp,0x14
c000e06b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e06f:	53                   	push   ebx
c000e070:	e8 0b 25 ff ff       	call   c0000580 <strlen>
c000e075:	83 c4 10             	add    esp,0x10
c000e078:	48                   	dec    eax
c000e079:	85 c0                	test   eax,eax
c000e07b:	74 15                	je     c000e092 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e07d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e081:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e084:	75 09                	jne    c000e08f <CmSplitFinalSlashInPlace(char*)+0x28>
c000e086:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e089:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e08d:	eb 05                	jmp    c000e094 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e08f:	48                   	dec    eax
c000e090:	eb e7                	jmp    c000e079 <CmSplitFinalSlashInPlace(char*)+0x12>
c000e092:	31 c0                	xor    eax,eax
c000e094:	83 c4 08             	add    esp,0x8
c000e097:	5b                   	pop    ebx
c000e098:	c3                   	ret    
c000e099:	66 90                	xchg   ax,ax
c000e09b:	90                   	nop

c000e09c <Krnl::handlePowerButton()>:
c000e09c:	83 ec 0c             	sub    esp,0xc
c000e09f:	e8 9c 27 00 00       	call   c0010840 <KeHandlePowerButton()>
c000e0a4:	90                   	nop
c000e0a5:	83 c4 0c             	add    esp,0xc
c000e0a8:	c3                   	ret    
c000e0a9:	8d 76 00             	lea    esi,[esi+0x0]

c000e0ac <Krnl::handleSleepButton()>:
c000e0ac:	83 ec 0c             	sub    esp,0xc
c000e0af:	e8 9e 27 00 00       	call   c0010852 <KeHandleSleepButton()>
c000e0b4:	90                   	nop
c000e0b5:	83 c4 0c             	add    esp,0xc
c000e0b8:	c3                   	ret    
c000e0b9:	90                   	nop

c000e0ba <Computer::close(int, int, void*)>:
c000e0ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e0bf:	c3                   	ret    

c000e0c0 <Computer::Computer()>:
c000e0c0:	83 ec 0c             	sub    esp,0xc
c000e0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c7:	83 ec 08             	sub    esp,0x8
c000e0ca:	68 70 3f 02 c0       	push   0xc0023f70
c000e0cf:	50                   	push   eax
c000e0d0:	e8 83 ba ff ff       	call   c0009b58 <Device::Device(char const*)>
c000e0d5:	83 c4 10             	add    esp,0x10
c000e0d8:	ba c8 3f 02 c0       	mov    edx,0xc0023fc8
c000e0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e1:	89 10                	mov    DWORD PTR [eax],edx
c000e0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0f5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e0ff:	90                   	nop
c000e100:	83 c4 0c             	add    esp,0xc
c000e103:	c3                   	ret    

c000e104 <Computer::open(int, int, void*)>:
c000e104:	56                   	push   esi
c000e105:	53                   	push   ebx
c000e106:	83 ec 04             	sub    esp,0x4
c000e109:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e10d:	39 1d c8 c0 02 c0    	cmp    DWORD PTR ds:0xc002c0c8,ebx
c000e113:	74 10                	je     c000e125 <Computer::open(int, int, void*)+0x21>
c000e115:	83 ec 0c             	sub    esp,0xc
c000e118:	68 94 3f 02 c0       	push   0xc0023f94
c000e11d:	e8 e0 1c 00 00       	call   c000fe02 <KePanic(char const*)>
c000e122:	83 c4 10             	add    esp,0x10
c000e125:	83 ec 0c             	sub    esp,0xc
c000e128:	68 78 11 00 00       	push   0x1178
c000e12d:	e8 7a 18 00 00       	call   c000f9ac <malloc>
c000e132:	89 04 24             	mov    DWORD PTR [esp],eax
c000e135:	89 c6                	mov    esi,eax
c000e137:	e8 08 c7 00 00       	call   c001a844 <CPU::CPU()>
c000e13c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e140:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e146:	50                   	push   eax
c000e147:	6a 00                	push   0x0
c000e149:	6a 00                	push   0x0
c000e14b:	56                   	push   esi
c000e14c:	e8 d5 c8 00 00       	call   c001aa26 <CPU::open(int, int, void*)>
c000e151:	83 c4 14             	add    esp,0x14
c000e154:	68 79 3f 02 c0       	push   0xc0023f79
c000e159:	e8 d7 f0 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000e15e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e165:	e8 42 18 00 00       	call   c000f9ac <malloc>
c000e16a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e16d:	89 c6                	mov    esi,eax
c000e16f:	e8 c0 e6 ff ff       	call   c000c834 <ACPI::ACPI()>
c000e174:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e17a:	5a                   	pop    edx
c000e17b:	59                   	pop    ecx
c000e17c:	56                   	push   esi
c000e17d:	53                   	push   ebx
c000e17e:	e8 73 b8 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e183:	5e                   	pop    esi
c000e184:	58                   	pop    eax
c000e185:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e18b:	50                   	push   eax
c000e18c:	53                   	push   ebx
c000e18d:	e8 64 b8 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e192:	83 c4 14             	add    esp,0x14
c000e195:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e19a:	5b                   	pop    ebx
c000e19b:	5e                   	pop    esi
c000e19c:	c3                   	ret    

c000e19d <KeCalculateCRC32(unsigned char*, int)>:
c000e19d:	53                   	push   ebx
c000e19e:	83 c8 ff             	or     eax,0xffffffff
c000e1a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e1a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1a9:	01 cb                	add    ebx,ecx
c000e1ab:	39 d9                	cmp    ecx,ebx
c000e1ad:	74 15                	je     c000e1c4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e1af:	41                   	inc    ecx
c000e1b0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e1b3:	31 c2                	xor    edx,eax
c000e1b5:	c1 e8 08             	shr    eax,0x8
c000e1b8:	0f b6 d2             	movzx  edx,dl
c000e1bb:	33 04 95 40 64 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9bc0]
c000e1c2:	eb e7                	jmp    c000e1ab <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e1c4:	5b                   	pop    ebx
c000e1c5:	f7 d0                	not    eax
c000e1c7:	c3                   	ret    

c000e1c8 <EnvVarContainer::getEnv(char const*)>:
c000e1c8:	57                   	push   edi
c000e1c9:	56                   	push   esi
c000e1ca:	53                   	push   ebx
c000e1cb:	31 db                	xor    ebx,ebx
c000e1cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1d1:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e1d3:	7e 2b                	jle    c000e200 <EnvVarContainer::getEnv(char const*)+0x38>
c000e1d5:	50                   	push   eax
c000e1d6:	50                   	push   eax
c000e1d7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e1da:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e1e1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e1e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1e8:	e8 93 25 ff ff       	call   c0000780 <strcmp>
c000e1ed:	83 c4 10             	add    esp,0x10
c000e1f0:	85 c0                	test   eax,eax
c000e1f2:	75 09                	jne    c000e1fd <EnvVarContainer::getEnv(char const*)+0x35>
c000e1f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e1f7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e1fb:	eb 05                	jmp    c000e202 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e1fd:	43                   	inc    ebx
c000e1fe:	eb d1                	jmp    c000e1d1 <EnvVarContainer::getEnv(char const*)+0x9>
c000e200:	31 c0                	xor    eax,eax
c000e202:	5b                   	pop    ebx
c000e203:	5e                   	pop    esi
c000e204:	5f                   	pop    edi
c000e205:	c3                   	ret    

c000e206 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e206:	55                   	push   ebp
c000e207:	57                   	push   edi
c000e208:	56                   	push   esi
c000e209:	53                   	push   ebx
c000e20a:	83 ec 28             	sub    esp,0x28
c000e20d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e211:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e215:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e219:	56                   	push   esi
c000e21a:	e8 61 23 ff ff       	call   c0000580 <strlen>
c000e21f:	40                   	inc    eax
c000e220:	89 04 24             	mov    DWORD PTR [esp],eax
c000e223:	e8 84 17 00 00       	call   c000f9ac <malloc>
c000e228:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	e8 4c 23 ff ff       	call   c0000580 <strlen>
c000e234:	40                   	inc    eax
c000e235:	89 04 24             	mov    DWORD PTR [esp],eax
c000e238:	e8 6f 17 00 00       	call   c000f9ac <malloc>
c000e23d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e240:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e244:	e8 37 23 ff ff       	call   c0000580 <strlen>
c000e249:	83 c4 0c             	add    esp,0xc
c000e24c:	40                   	inc    eax
c000e24d:	50                   	push   eax
c000e24e:	6a 00                	push   0x0
c000e250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e254:	e8 97 22 ff ff       	call   c00004f0 <memset>
c000e259:	89 34 24             	mov    DWORD PTR [esp],esi
c000e25c:	e8 1f 23 ff ff       	call   c0000580 <strlen>
c000e261:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e265:	8d 48 01             	lea    ecx,[eax+0x1]
c000e268:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e26a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e26d:	89 de                	mov    esi,ebx
c000e26f:	e8 0c 23 ff ff       	call   c0000580 <strlen>
c000e274:	83 c4 0c             	add    esp,0xc
c000e277:	40                   	inc    eax
c000e278:	50                   	push   eax
c000e279:	6a 00                	push   0x0
c000e27b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e27f:	e8 6c 22 ff ff       	call   c00004f0 <memset>
c000e284:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e287:	e8 f4 22 ff ff       	call   c0000580 <strlen>
c000e28c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e290:	8d 48 01             	lea    ecx,[eax+0x1]
c000e293:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e295:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e298:	40                   	inc    eax
c000e299:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e29c:	c1 e0 03             	shl    eax,0x3
c000e29f:	5a                   	pop    edx
c000e2a0:	59                   	pop    ecx
c000e2a1:	50                   	push   eax
c000e2a2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e2a5:	e8 ee 16 00 00       	call   c000f998 <realloc>
c000e2aa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e2ad:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e2b1:	b9 08 00 00 00       	mov    ecx,0x8
c000e2b6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e2b9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e2bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e2bf:	83 c4 2c             	add    esp,0x2c
c000e2c2:	5b                   	pop    ebx
c000e2c3:	5e                   	pop    esi
c000e2c4:	5f                   	pop    edi
c000e2c5:	5d                   	pop    ebp
c000e2c6:	c3                   	ret    
c000e2c7:	90                   	nop

c000e2c8 <EnvVarContainer::deleteEnv(char const*)>:
c000e2c8:	c3                   	ret    
c000e2c9:	90                   	nop

c000e2ca <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e2ca:	55                   	push   ebp
c000e2cb:	57                   	push   edi
c000e2cc:	56                   	push   esi
c000e2cd:	53                   	push   ebx
c000e2ce:	81 ec 38 01 00 00    	sub    esp,0x138
c000e2d4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e2db:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e2e2:	68 14 01 00 00       	push   0x114
c000e2e7:	e8 c0 16 00 00       	call   c000f9ac <malloc>
c000e2ec:	83 c4 0c             	add    esp,0xc
c000e2ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e2f2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e2f9:	89 c3                	mov    ebx,eax
c000e2fb:	50                   	push   eax
c000e2fc:	e8 87 9e ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000e301:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e304:	e8 61 a1 ff ff       	call   c000846a <File::exists()>
c000e309:	83 c4 10             	add    esp,0x10
c000e30c:	84 c0                	test   al,al
c000e30e:	75 31                	jne    c000e341 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e310:	50                   	push   eax
c000e311:	50                   	push   eax
c000e312:	6a 12                	push   0x12
c000e314:	53                   	push   ebx
c000e315:	e8 8c 9e ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e31a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e31c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e31f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e322:	e8 59 22 ff ff       	call   c0000580 <strlen>
c000e327:	5a                   	pop    edx
c000e328:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e32c:	52                   	push   edx
c000e32d:	31 d2                	xor    edx,edx
c000e32f:	56                   	push   esi
c000e330:	52                   	push   edx
c000e331:	50                   	push   eax
c000e332:	53                   	push   ebx
c000e333:	ff d7                	call   edi
c000e335:	83 c4 14             	add    esp,0x14
c000e338:	53                   	push   ebx
c000e339:	e8 c6 9e ff ff       	call   c0008204 <File::close()>
c000e33e:	83 c4 10             	add    esp,0x10
c000e341:	56                   	push   esi
c000e342:	31 f6                	xor    esi,esi
c000e344:	68 00 01 00 00       	push   0x100
c000e349:	6a 00                	push   0x0
c000e34b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e34f:	50                   	push   eax
c000e350:	e8 9b 21 ff ff       	call   c00004f0 <memset>
c000e355:	5f                   	pop    edi
c000e356:	58                   	pop    eax
c000e357:	6a 01                	push   0x1
c000e359:	53                   	push   ebx
c000e35a:	e8 47 9e ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e36a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e372:	83 ec 0c             	sub    esp,0xc
c000e375:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e379:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e37b:	52                   	push   edx
c000e37c:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e380:	51                   	push   ecx
c000e381:	6a 00                	push   0x0
c000e383:	6a 01                	push   0x1
c000e385:	53                   	push   ebx
c000e386:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e389:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e38e:	83 c4 20             	add    esp,0x20
c000e391:	85 c0                	test   eax,eax
c000e393:	89 c1                	mov    ecx,eax
c000e395:	0f 84 36 01 00 00    	je     c000e4d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e39b:	83 f8 0d             	cmp    eax,0xd
c000e39e:	0f 84 22 01 00 00    	je     c000e4c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e3a4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e3a9:	0f 84 f0 00 00 00    	je     c000e49f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e3af:	83 f8 0a             	cmp    eax,0xa
c000e3b2:	74 13                	je     c000e3c7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e3b4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e3b9:	74 0c                	je     c000e3c7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e3bb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e3c1:	0f 8e f6 00 00 00    	jle    c000e4bd <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e3c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3cb:	83 ec 0c             	sub    esp,0xc
c000e3ce:	8d 78 01             	lea    edi,[eax+0x1]
c000e3d1:	57                   	push   edi
c000e3d2:	e8 d5 15 00 00       	call   c000f9ac <malloc>
c000e3d7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e3db:	8d 56 04             	lea    edx,[esi+0x4]
c000e3de:	89 14 24             	mov    DWORD PTR [esp],edx
c000e3e1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e3e9:	e8 be 15 00 00       	call   c000f9ac <malloc>
c000e3ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e3f2:	83 c4 0c             	add    esp,0xc
c000e3f5:	57                   	push   edi
c000e3f6:	6a 00                	push   0x0
c000e3f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e3fc:	e8 ef 20 ff ff       	call   c00004f0 <memset>
c000e401:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e405:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e409:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e40d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e40f:	83 c4 0c             	add    esp,0xc
c000e412:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e416:	52                   	push   edx
c000e417:	6a 00                	push   0x0
c000e419:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e41d:	e8 ce 20 ff ff       	call   c00004f0 <memset>
c000e422:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e426:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e42a:	89 34 24             	mov    DWORD PTR [esp],esi
c000e42d:	e8 4e 21 ff ff       	call   c0000580 <strlen>
c000e432:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e436:	89 c1                	mov    ecx,eax
c000e438:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e43a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e43d:	83 c4 10             	add    esp,0x10
c000e440:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e443:	40                   	inc    eax
c000e444:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e447:	85 d2                	test   edx,edx
c000e449:	75 0c                	jne    c000e457 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e44b:	83 ec 0c             	sub    esp,0xc
c000e44e:	6a 08                	push   0x8
c000e450:	e8 57 15 00 00       	call   c000f9ac <malloc>
c000e455:	eb 0c                	jmp    c000e463 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e457:	51                   	push   ecx
c000e458:	51                   	push   ecx
c000e459:	c1 e0 03             	shl    eax,0x3
c000e45c:	50                   	push   eax
c000e45d:	52                   	push   edx
c000e45e:	e8 35 15 00 00       	call   c000f998 <realloc>
c000e463:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e466:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e469:	83 c4 10             	add    esp,0x10
c000e46c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e46f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e473:	b9 08 00 00 00       	mov    ecx,0x8
c000e478:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e47c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e47e:	50                   	push   eax
c000e47f:	31 f6                	xor    esi,esi
c000e481:	68 00 01 00 00       	push   0x100
c000e486:	6a 00                	push   0x0
c000e488:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e48c:	50                   	push   eax
c000e48d:	e8 5e 20 ff ff       	call   c00004f0 <memset>
c000e492:	83 c4 10             	add    esp,0x10
c000e495:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e49d:	eb 27                	jmp    c000e4c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e49f:	83 f8 3d             	cmp    eax,0x3d
c000e4a2:	74 1e                	je     c000e4c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e4a4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e4aa:	7f 07                	jg     c000e4b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e4ac:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e4b0:	46                   	inc    esi
c000e4b1:	eb 13                	jmp    c000e4c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e4b3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e4bb:	eb 09                	jmp    c000e4c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e4bd:	83 f8 3d             	cmp    eax,0x3d
c000e4c0:	75 ea                	jne    c000e4ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e4c2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e4c6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e4cb:	0f 85 99 fe ff ff    	jne    c000e36a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e4d1:	83 ec 0c             	sub    esp,0xc
c000e4d4:	53                   	push   ebx
c000e4d5:	e8 2a 9d ff ff       	call   c0008204 <File::close()>
c000e4da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e4e2:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e4e8:	5b                   	pop    ebx
c000e4e9:	5e                   	pop    esi
c000e4ea:	5f                   	pop    edi
c000e4eb:	5d                   	pop    ebp
c000e4ec:	c3                   	ret    
c000e4ed:	90                   	nop

c000e4ee <EnvVarContainer::__loadSystem()>:
c000e4ee:	83 ec 10             	sub    esp,0x10
c000e4f1:	68 40 68 02 c0       	push   0xc0026840
c000e4f6:	68 ec 3f 02 c0       	push   0xc0023fec
c000e4fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4ff:	e8 c6 fd ff ff       	call   c000e2ca <EnvVarContainer::loadFrom(char const*, char const*)>
c000e504:	83 c4 1c             	add    esp,0x1c
c000e507:	c3                   	ret    

c000e508 <EnvVarContainer::__loadUser()>:
c000e508:	c3                   	ret    
c000e509:	90                   	nop

c000e50a <EnvVarContainer::EnvVarContainer(Process*)>:
c000e50a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e50e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e51c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e51f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e523:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e52a:	90                   	nop
c000e52b:	c3                   	ret    

c000e52c <EnvVarContainer::~EnvVarContainer()>:
c000e52c:	83 ec 0c             	sub    esp,0xc
c000e52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e533:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e536:	85 c0                	test   eax,eax
c000e538:	74 1d                	je     c000e557 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e540:	85 c0                	test   eax,eax
c000e542:	74 13                	je     c000e557 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e54b:	83 ec 0c             	sub    esp,0xc
c000e54e:	50                   	push   eax
c000e54f:	e8 68 14 00 00       	call   c000f9bc <free>
c000e554:	83 c4 10             	add    esp,0x10
c000e557:	90                   	nop
c000e558:	83 c4 0c             	add    esp,0xc
c000e55b:	c3                   	ret    

c000e55c <KeGetEnv(Process*, char const*)>:
c000e55c:	53                   	push   ebx
c000e55d:	83 ec 08             	sub    esp,0x8
c000e560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e564:	39 05 58 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea58,eax
c000e56a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e56e:	74 04                	je     c000e574 <KeGetEnv(Process*, char const*)+0x18>
c000e570:	85 c0                	test   eax,eax
c000e572:	75 0b                	jne    c000e57f <KeGetEnv(Process*, char const*)+0x23>
c000e574:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e579:	85 c0                	test   eax,eax
c000e57b:	75 19                	jne    c000e596 <KeGetEnv(Process*, char const*)+0x3a>
c000e57d:	eb 27                	jmp    c000e5a6 <KeGetEnv(Process*, char const*)+0x4a>
c000e57f:	52                   	push   edx
c000e580:	52                   	push   edx
c000e581:	53                   	push   ebx
c000e582:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e588:	e8 3b fc ff ff       	call   c000e1c8 <EnvVarContainer::getEnv(char const*)>
c000e58d:	83 c4 10             	add    esp,0x10
c000e590:	85 c0                	test   eax,eax
c000e592:	75 28                	jne    c000e5bc <KeGetEnv(Process*, char const*)+0x60>
c000e594:	eb de                	jmp    c000e574 <KeGetEnv(Process*, char const*)+0x18>
c000e596:	52                   	push   edx
c000e597:	52                   	push   edx
c000e598:	53                   	push   ebx
c000e599:	50                   	push   eax
c000e59a:	e8 29 fc ff ff       	call   c000e1c8 <EnvVarContainer::getEnv(char const*)>
c000e59f:	83 c4 10             	add    esp,0x10
c000e5a2:	85 c0                	test   eax,eax
c000e5a4:	75 16                	jne    c000e5bc <KeGetEnv(Process*, char const*)+0x60>
c000e5a6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e5aa:	a1 d4 c0 02 c0       	mov    eax,ds:0xc002c0d4
c000e5af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5b3:	83 c4 08             	add    esp,0x8
c000e5b6:	5b                   	pop    ebx
c000e5b7:	e9 0c fc ff ff       	jmp    c000e1c8 <EnvVarContainer::getEnv(char const*)>
c000e5bc:	83 c4 08             	add    esp,0x8
c000e5bf:	5b                   	pop    ebx
c000e5c0:	c3                   	ret    

c000e5c1 <KeSetEnvSystem(char const*, char const*)>:
c000e5c1:	83 ec 10             	sub    esp,0x10
c000e5c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5cc:	ff 35 d4 c0 02 c0    	push   DWORD PTR ds:0xc002c0d4
c000e5d2:	e8 2f fc ff ff       	call   c000e206 <EnvVarContainer::setEnv(char const*, char const*)>
c000e5d7:	83 c4 1c             	add    esp,0x1c
c000e5da:	c3                   	ret    

c000e5db <KeSetEnvUser(char const*, char const*)>:
c000e5db:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e5e0:	85 c0                	test   eax,eax
c000e5e2:	74 15                	je     c000e5f9 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e5e4:	83 ec 10             	sub    esp,0x10
c000e5e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5ef:	50                   	push   eax
c000e5f0:	e8 11 fc ff ff       	call   c000e206 <EnvVarContainer::setEnv(char const*, char const*)>
c000e5f5:	83 c4 1c             	add    esp,0x1c
c000e5f8:	c3                   	ret    
c000e5f9:	c3                   	ret    

c000e5fa <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5fe:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e604:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e608:	e9 f9 fb ff ff       	jmp    c000e206 <EnvVarContainer::setEnv(char const*, char const*)>

c000e60d <KeDeleteEnvSystem(char const*)>:
c000e60d:	c3                   	ret    

c000e60e <KeDeleteEnvUser(char const*)>:
c000e60e:	c3                   	ret    

c000e60f <KeDeleteEnvProcess(Process*, char const*)>:
c000e60f:	c3                   	ret    

c000e610 <KeNewProcessEnv(Process*)>:
c000e610:	83 ec 28             	sub    esp,0x28
c000e613:	6a 0c                	push   0xc
c000e615:	e8 92 13 00 00       	call   c000f9ac <malloc>
c000e61a:	5a                   	pop    edx
c000e61b:	59                   	pop    ecx
c000e61c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e620:	50                   	push   eax
c000e621:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e625:	e8 e0 fe ff ff       	call   c000e50a <EnvVarContainer::EnvVarContainer(Process*)>
c000e62a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e62e:	83 c4 2c             	add    esp,0x2c
c000e631:	c3                   	ret    

c000e632 <KeCopyProcessEnv(Process*, Process*)>:
c000e632:	57                   	push   edi
c000e633:	56                   	push   esi
c000e634:	53                   	push   ebx
c000e635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e639:	83 ec 0c             	sub    esp,0xc
c000e63c:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e642:	6a 0c                	push   0xc
c000e644:	e8 63 13 00 00       	call   c000f9ac <malloc>
c000e649:	89 c3                	mov    ebx,eax
c000e64b:	58                   	pop    eax
c000e64c:	5a                   	pop    edx
c000e64d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e651:	53                   	push   ebx
c000e652:	e8 b3 fe ff ff       	call   c000e50a <EnvVarContainer::EnvVarContainer(Process*)>
c000e657:	8b 07                	mov    eax,DWORD PTR [edi]
c000e659:	89 03                	mov    DWORD PTR [ebx],eax
c000e65b:	c1 e0 03             	shl    eax,0x3
c000e65e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e661:	e8 46 13 00 00       	call   c000f9ac <malloc>
c000e666:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e669:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e66b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e66e:	89 c7                	mov    edi,eax
c000e670:	c1 e1 03             	shl    ecx,0x3
c000e673:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e675:	83 c4 10             	add    esp,0x10
c000e678:	89 d8                	mov    eax,ebx
c000e67a:	5b                   	pop    ebx
c000e67b:	5e                   	pop    esi
c000e67c:	5f                   	pop    edi
c000e67d:	c3                   	ret    

c000e67e <KeLoadSystemEnv()>:
c000e67e:	53                   	push   ebx
c000e67f:	83 ec 14             	sub    esp,0x14
c000e682:	6a 0c                	push   0xc
c000e684:	e8 23 13 00 00       	call   c000f9ac <malloc>
c000e689:	89 c3                	mov    ebx,eax
c000e68b:	58                   	pop    eax
c000e68c:	5a                   	pop    edx
c000e68d:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e693:	53                   	push   ebx
c000e694:	e8 71 fe ff ff       	call   c000e50a <EnvVarContainer::EnvVarContainer(Process*)>
c000e699:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e69c:	89 1d d4 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d4,ebx
c000e6a2:	e8 47 fe ff ff       	call   c000e4ee <EnvVarContainer::__loadSystem()>
c000e6a7:	83 c4 18             	add    esp,0x18
c000e6aa:	5b                   	pop    ebx
c000e6ab:	c3                   	ret    

c000e6ac <KeLoadUserEnv()>:
c000e6ac:	53                   	push   ebx
c000e6ad:	83 ec 14             	sub    esp,0x14
c000e6b0:	6a 0c                	push   0xc
c000e6b2:	e8 f5 12 00 00       	call   c000f9ac <malloc>
c000e6b7:	89 c3                	mov    ebx,eax
c000e6b9:	58                   	pop    eax
c000e6ba:	5a                   	pop    edx
c000e6bb:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e6c1:	53                   	push   ebx
c000e6c2:	e8 43 fe ff ff       	call   c000e50a <EnvVarContainer::EnvVarContainer(Process*)>
c000e6c7:	89 1d d0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d0,ebx
c000e6cd:	83 c4 18             	add    esp,0x18
c000e6d0:	5b                   	pop    ebx
c000e6d1:	c3                   	ret    

c000e6d2 <KeFlushEnv()>:
c000e6d2:	c3                   	ret    

c000e6d3 <KeGetProcessTotalEnvCount(Process*)>:
c000e6d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6d7:	8b 15 d0 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0d0
c000e6dd:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e6e3:	a1 d4 c0 02 c0       	mov    eax,ds:0xc002c0d4
c000e6e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6ea:	03 01                	add    eax,DWORD PTR [ecx]
c000e6ec:	85 d2                	test   edx,edx
c000e6ee:	74 02                	je     c000e6f2 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e6f0:	03 02                	add    eax,DWORD PTR [edx]
c000e6f2:	c3                   	ret    

c000e6f3 <KeGetProcessEnvPair(Process*, int)>:
c000e6f3:	57                   	push   edi
c000e6f4:	56                   	push   esi
c000e6f5:	8b 35 d0 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d0
c000e6fb:	53                   	push   ebx
c000e6fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e704:	85 f6                	test   esi,esi
c000e706:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e70a:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e710:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e712:	75 16                	jne    c000e72a <KeGetProcessEnvPair(Process*, int)+0x37>
c000e714:	39 c2                	cmp    edx,eax
c000e716:	7c 16                	jl     c000e72e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e718:	8b 0d d4 c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0d4
c000e71e:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e720:	01 c6                	add    esi,eax
c000e722:	39 d6                	cmp    esi,edx
c000e724:	7e 3c                	jle    c000e762 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e726:	29 c2                	sub    edx,eax
c000e728:	eb 04                	jmp    c000e72e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e72a:	39 c2                	cmp    edx,eax
c000e72c:	7d 05                	jge    c000e733 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e72e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e731:	eb 20                	jmp    c000e753 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e733:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e735:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e738:	39 d1                	cmp    ecx,edx
c000e73a:	7e 04                	jle    c000e740 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e73c:	29 c2                	sub    edx,eax
c000e73e:	eb 10                	jmp    c000e750 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e740:	8b 35 d4 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d4
c000e746:	03 0e                	add    ecx,DWORD PTR [esi]
c000e748:	39 d1                	cmp    ecx,edx
c000e74a:	7e 16                	jle    c000e762 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e74c:	29 c2                	sub    edx,eax
c000e74e:	29 fa                	sub    edx,edi
c000e750:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e753:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e756:	8b 02                	mov    eax,DWORD PTR [edx]
c000e758:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e75b:	89 03                	mov    DWORD PTR [ebx],eax
c000e75d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e760:	eb 1d                	jmp    c000e77f <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e762:	83 ec 0c             	sub    esp,0xc
c000e765:	68 0e 40 02 c0       	push   0xc002400e
c000e76a:	e8 93 16 00 00       	call   c000fe02 <KePanic(char const*)>
c000e76f:	83 c4 10             	add    esp,0x10
c000e772:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e778:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e77f:	89 d8                	mov    eax,ebx
c000e781:	5b                   	pop    ebx
c000e782:	5e                   	pop    esi
c000e783:	5f                   	pop    edi
c000e784:	c2 04 00             	ret    0x4
c000e787:	90                   	nop

c000e788 <KeSetupInterrupts()>:
c000e788:	83 ec 10             	sub    esp,0x10
c000e78b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e793:	90                   	nop
c000e794:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e79c:	7f 5a                	jg     c000e7f8 <KeSetupInterrupts()+0x70>
c000e79e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e7a6:	66 90                	xchg   ax,ax
c000e7a8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e7ad:	7f 41                	jg     c000e7f0 <KeSetupInterrupts()+0x68>
c000e7af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7b3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e7ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7be:	01 d0                	add    eax,edx
c000e7c0:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e7cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e7d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7da:	01 d0                	add    eax,edx
c000e7dc:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e7e7:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e7ec:	eb ba                	jmp    c000e7a8 <KeSetupInterrupts()+0x20>
c000e7ee:	66 90                	xchg   ax,ax
c000e7f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e7f5:	eb 9d                	jmp    c000e794 <KeSetupInterrupts()+0xc>
c000e7f7:	90                   	nop
c000e7f8:	90                   	nop
c000e7f9:	83 c4 10             	add    esp,0x10
c000e7fc:	c3                   	ret    
c000e7fd:	8d 76 00             	lea    esi,[esi+0x0]

c000e800 <int_handler>:
c000e800:	83 ec 2c             	sub    esp,0x2c
c000e803:	90                   	nop
c000e804:	a0 24 e1 02 c0       	mov    al,ds:0xc002e124
c000e809:	0f b6 c0             	movzx  eax,al
c000e80c:	85 c0                	test   eax,eax
c000e80e:	74 04                	je     c000e814 <int_handler+0x14>
c000e810:	fa                   	cli    
c000e811:	f4                   	hlt    
c000e812:	eb f0                	jmp    c000e804 <int_handler+0x4>
c000e814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e818:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e81b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e81f:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e824:	7e 1a                	jle    c000e840 <int_handler+0x40>
c000e826:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e82b:	7f 13                	jg     c000e840 <int_handler+0x40>
c000e82d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e831:	83 e8 20             	sub    eax,0x20
c000e834:	83 ec 0c             	sub    esp,0xc
c000e837:	50                   	push   eax
c000e838:	e8 db bf 00 00       	call   c001a818 <HalEndOfInterrupt(int)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e844:	c1 e0 04             	shl    eax,0x4
c000e847:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000e84c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e850:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e854:	c1 e0 04             	shl    eax,0x4
c000e857:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000e85c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e860:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e868:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e86d:	0f 8f ad 00 00 00    	jg     c000e920 <int_handler+0x120>
c000e873:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e877:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e87e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e882:	01 d0                	add    eax,edx
c000e884:	8b 00                	mov    eax,DWORD PTR [eax]
c000e886:	85 c0                	test   eax,eax
c000e888:	0f 84 86 00 00 00    	je     c000e914 <int_handler+0x114>
c000e88e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e892:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e895:	83 f8 60             	cmp    eax,0x60
c000e898:	75 46                	jne    c000e8e0 <int_handler+0xe0>
c000e89a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e89e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8a9:	01 d0                	add    eax,edx
c000e8ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8b1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e8bc:	01 ca                	add    edx,ecx
c000e8be:	8b 12                	mov    edx,DWORD PTR [edx]
c000e8c0:	83 ec 08             	sub    esp,0x8
c000e8c3:	52                   	push   edx
c000e8c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e8c8:	ff d0                	call   eax
c000e8ca:	83 c4 10             	add    esp,0x10
c000e8cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e8d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8dd:	eb 4d                	jmp    c000e92c <int_handler+0x12c>
c000e8df:	90                   	nop
c000e8e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8e4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8ef:	01 d0                	add    eax,edx
c000e8f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8f7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e902:	01 ca                	add    edx,ecx
c000e904:	8b 12                	mov    edx,DWORD PTR [edx]
c000e906:	83 ec 08             	sub    esp,0x8
c000e909:	52                   	push   edx
c000e90a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e90e:	ff d0                	call   eax
c000e910:	83 c4 10             	add    esp,0x10
c000e913:	90                   	nop
c000e914:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000e919:	e9 4a ff ff ff       	jmp    c000e868 <int_handler+0x68>
c000e91e:	66 90                	xchg   ax,ax
c000e920:	b8 00 00 00 00       	mov    eax,0x0
c000e925:	ba 00 00 00 00       	mov    edx,0x0
c000e92a:	66 90                	xchg   ax,ax
c000e92c:	83 c4 2c             	add    esp,0x2c
c000e92f:	c3                   	ret    

c000e930 <KeDisplayProgramFault(char const*)>:
c000e930:	83 ec 0c             	sub    esp,0xc
c000e933:	83 ec 0c             	sub    esp,0xc
c000e936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e93a:	e8 27 86 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e93f:	83 c4 10             	add    esp,0x10
c000e942:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e947:	8b 00                	mov    eax,DWORD PTR [eax]
c000e949:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e94c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e952:	85 c0                	test   eax,eax
c000e954:	74 22                	je     c000e978 <KeDisplayProgramFault(char const*)+0x48>
c000e956:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e95b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e95d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e960:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e966:	6a 04                	push   0x4
c000e968:	6a 0f                	push   0xf
c000e96a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e96e:	50                   	push   eax
c000e96f:	e8 ea 3e 00 00       	call   c001285e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e974:	83 c4 10             	add    esp,0x10
c000e977:	90                   	nop
c000e978:	90                   	nop
c000e979:	83 c4 0c             	add    esp,0xc
c000e97c:	c3                   	ret    
c000e97d:	8d 76 00             	lea    esi,[esi+0x0]

c000e980 <KeGeneralProtectionFault(void*, void*)>:
c000e980:	83 ec 0c             	sub    esp,0xc
c000e983:	83 ec 0c             	sub    esp,0xc
c000e986:	68 28 40 02 c0       	push   0xc0024028
c000e98b:	e8 d6 85 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e990:	83 c4 10             	add    esp,0x10
c000e993:	83 ec 08             	sub    esp,0x8
c000e996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e99e:	e8 f7 b3 00 00       	call   c0019d9a <HalHandleGeneralProtectionFault(void*, void*)>
c000e9a3:	83 c4 10             	add    esp,0x10
c000e9a6:	0f b6 c0             	movzx  eax,al
c000e9a9:	85 c0                	test   eax,eax
c000e9ab:	75 2f                	jne    c000e9dc <KeGeneralProtectionFault(void*, void*)+0x5c>
c000e9ad:	83 ec 0c             	sub    esp,0xc
c000e9b0:	68 33 40 02 c0       	push   0xc0024033
c000e9b5:	e8 76 ff ff ff       	call   c000e930 <KeDisplayProgramFault(char const*)>
c000e9ba:	83 c4 10             	add    esp,0x10
c000e9bd:	83 ec 0c             	sub    esp,0xc
c000e9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9c4:	e8 35 b5 00 00       	call   c0019efe <HalDisplayDebugInfo(void*)>
c000e9c9:	83 c4 10             	add    esp,0x10
c000e9cc:	83 ec 0c             	sub    esp,0xc
c000e9cf:	6a 7e                	push   0x7e
c000e9d1:	e8 5e 8d 00 00       	call   c0017734 <KeTerminateCurrentThread(int)>
c000e9d6:	83 c4 10             	add    esp,0x10
c000e9d9:	eb 05                	jmp    c000e9e0 <KeGeneralProtectionFault(void*, void*)+0x60>
c000e9db:	90                   	nop
c000e9dc:	90                   	nop
c000e9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e9e0:	83 c4 0c             	add    esp,0xc
c000e9e3:	c3                   	ret    

c000e9e4 <KePageFault(void*, void*)>:
c000e9e4:	83 ec 0c             	sub    esp,0xc
c000e9e7:	83 ec 0c             	sub    esp,0xc
c000e9ea:	68 4c 40 02 c0       	push   0xc002404c
c000e9ef:	e8 72 85 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e9f4:	83 c4 10             	add    esp,0x10
c000e9f7:	83 ec 08             	sub    esp,0x8
c000e9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea02:	e8 86 b4 00 00       	call   c0019e8d <HalHandlePageFault(void*, void*)>
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	0f b6 c0             	movzx  eax,al
c000ea0d:	85 c0                	test   eax,eax
c000ea0f:	75 2f                	jne    c000ea40 <KePageFault(void*, void*)+0x5c>
c000ea11:	83 ec 0c             	sub    esp,0xc
c000ea14:	68 59 40 02 c0       	push   0xc0024059
c000ea19:	e8 12 ff ff ff       	call   c000e930 <KeDisplayProgramFault(char const*)>
c000ea1e:	83 c4 10             	add    esp,0x10
c000ea21:	83 ec 0c             	sub    esp,0xc
c000ea24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea28:	e8 d1 b4 00 00       	call   c0019efe <HalDisplayDebugInfo(void*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	83 ec 0c             	sub    esp,0xc
c000ea33:	6a 7f                	push   0x7f
c000ea35:	e8 fa 8c 00 00       	call   c0017734 <KeTerminateCurrentThread(int)>
c000ea3a:	83 c4 10             	add    esp,0x10
c000ea3d:	eb 05                	jmp    c000ea44 <KePageFault(void*, void*)+0x60>
c000ea3f:	90                   	nop
c000ea40:	90                   	nop
c000ea41:	8d 76 00             	lea    esi,[esi+0x0]
c000ea44:	83 c4 0c             	add    esp,0xc
c000ea47:	c3                   	ret    

c000ea48 <KeNonMaskableInterrupt(void*, void*)>:
c000ea48:	83 ec 0c             	sub    esp,0xc
c000ea4b:	e8 3c b8 00 00       	call   c001a28c <HalReceivedNMI()>
c000ea50:	90                   	nop
c000ea51:	83 c4 0c             	add    esp,0xc
c000ea54:	c3                   	ret    
c000ea55:	8d 76 00             	lea    esi,[esi+0x0]

c000ea58 <KeOtherFault(void*, void*)>:
c000ea58:	83 ec 0c             	sub    esp,0xc
c000ea5b:	83 ec 0c             	sub    esp,0xc
c000ea5e:	68 64 40 02 c0       	push   0xc0024064
c000ea63:	e8 c8 fe ff ff       	call   c000e930 <KeDisplayProgramFault(char const*)>
c000ea68:	83 c4 10             	add    esp,0x10
c000ea6b:	83 ec 0c             	sub    esp,0xc
c000ea6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea72:	e8 87 b4 00 00       	call   c0019efe <HalDisplayDebugInfo(void*)>
c000ea77:	83 c4 10             	add    esp,0x10
c000ea7a:	83 ec 0c             	sub    esp,0xc
c000ea7d:	6a 7d                	push   0x7d
c000ea7f:	e8 b0 8c 00 00       	call   c0017734 <KeTerminateCurrentThread(int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	90                   	nop
c000ea88:	83 c4 0c             	add    esp,0xc
c000ea8b:	c3                   	ret    

c000ea8c <KeOpcodeFault(void*, void*)>:
c000ea8c:	55                   	push   ebp
c000ea8d:	89 e5                	mov    ebp,esp
c000ea8f:	83 ec 08             	sub    esp,0x8
c000ea92:	83 ec 08             	sub    esp,0x8
c000ea95:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ea98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ea9b:	e8 1c b4 00 00       	call   c0019ebc <HalHandleOpcodeFault(void*, void*)>
c000eaa0:	83 c4 10             	add    esp,0x10
c000eaa3:	0f b6 c0             	movzx  eax,al
c000eaa6:	85 c0                	test   eax,eax
c000eaa8:	75 2e                	jne    c000ead8 <KeOpcodeFault(void*, void*)+0x4c>
c000eaaa:	83 ec 0c             	sub    esp,0xc
c000eaad:	68 8c 40 02 c0       	push   0xc002408c
c000eab2:	e8 79 fe ff ff       	call   c000e930 <KeDisplayProgramFault(char const*)>
c000eab7:	83 c4 10             	add    esp,0x10
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eac0:	e8 39 b4 00 00       	call   c0019efe <HalDisplayDebugInfo(void*)>
c000eac5:	83 c4 10             	add    esp,0x10
c000eac8:	83 ec 0c             	sub    esp,0xc
c000eacb:	6a 7c                	push   0x7c
c000eacd:	e8 62 8c 00 00       	call   c0017734 <KeTerminateCurrentThread(int)>
c000ead2:	83 c4 10             	add    esp,0x10
c000ead5:	eb 05                	jmp    c000eadc <KeOpcodeFault(void*, void*)+0x50>
c000ead7:	90                   	nop
c000ead8:	90                   	nop
c000ead9:	8d 76 00             	lea    esi,[esi+0x0]
c000eadc:	c9                   	leave  
c000eadd:	c3                   	ret    
c000eade:	66 90                	xchg   ax,ax

c000eae0 <KeDoubleFault(void*, void*)>:
c000eae0:	55                   	push   ebp
c000eae1:	89 e5                	mov    ebp,esp
c000eae3:	83 ec 08             	sub    esp,0x8
c000eae6:	83 ec 0c             	sub    esp,0xc
c000eae9:	68 99 40 02 c0       	push   0xc0024099
c000eaee:	e8 0f 13 00 00       	call   c000fe02 <KePanic(char const*)>
c000eaf3:	83 c4 10             	add    esp,0x10
c000eaf6:	90                   	nop
c000eaf7:	c9                   	leave  
c000eaf8:	c3                   	ret    
c000eaf9:	90                   	nop

c000eafa <GDTEntry::setBase(unsigned int)>:
c000eafa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eafe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb02:	89 c1                	mov    ecx,eax
c000eb04:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eb08:	c1 e9 10             	shr    ecx,0x10
c000eb0b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eb0e:	c1 e8 18             	shr    eax,0x18
c000eb11:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eb14:	c3                   	ret    
c000eb15:	90                   	nop

c000eb16 <GDTEntry::setLimit(unsigned int)>:
c000eb16:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eb1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb1e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000eb21:	66 89 01             	mov    WORD PTR [ecx],ax
c000eb24:	c1 e8 10             	shr    eax,0x10
c000eb27:	83 e0 0f             	and    eax,0xf
c000eb2a:	83 e2 f0             	and    edx,0xfffffff0
c000eb2d:	09 d0                	or     eax,edx
c000eb2f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000eb32:	c3                   	ret    
c000eb33:	90                   	nop

c000eb34 <GDT::GDT()>:
c000eb34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eb48:	90                   	nop
c000eb49:	c3                   	ret    

c000eb4a <GDT::addEntry(GDTEntry)>:
c000eb4a:	53                   	push   ebx
c000eb4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb57:	8b 02                	mov    eax,DWORD PTR [edx]
c000eb59:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000eb5d:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb60:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000eb64:	c1 e0 03             	shl    eax,0x3
c000eb67:	89 0a                	mov    DWORD PTR [edx],ecx
c000eb69:	5b                   	pop    ebx
c000eb6a:	c3                   	ret    
c000eb6b:	90                   	nop

c000eb6c <GDT::getNumberOfEntries()>:
c000eb6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb70:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb72:	c3                   	ret    
c000eb73:	90                   	nop

c000eb74 <GDT::flush()>:
c000eb74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb78:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb7a:	83 c0 04             	add    eax,0x4
c000eb7d:	a3 e2 e0 02 c0       	mov    ds:0xc002e0e2,eax
c000eb82:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eb89:	66 89 15 e0 e0 02 c0 	mov    WORD PTR ds:0xc002e0e0,dx
c000eb90:	e9 c5 17 ff ff       	jmp    c000035a <loadGDT>
c000eb95:	90                   	nop

c000eb96 <GDT::setup()>:
c000eb96:	57                   	push   edi
c000eb97:	56                   	push   esi
c000eb98:	53                   	push   ebx
c000eb99:	83 ec 30             	sub    esp,0x30
c000eb9c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eba0:	6a 00                	push   0x0
c000eba2:	8d 74 24 14          	lea    esi,[esp+0x14]
c000eba6:	56                   	push   esi
c000eba7:	e8 4e ff ff ff       	call   c000eafa <GDTEntry::setBase(unsigned int)>
c000ebac:	6a 00                	push   0x0
c000ebae:	56                   	push   esi
c000ebaf:	e8 62 ff ff ff       	call   c000eb16 <GDTEntry::setLimit(unsigned int)>
c000ebb4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ebbc:	6a 00                	push   0x0
c000ebbe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ebc2:	56                   	push   esi
c000ebc3:	e8 32 ff ff ff       	call   c000eafa <GDTEntry::setBase(unsigned int)>
c000ebc8:	68 ff ff ff 00       	push   0xffffff
c000ebcd:	56                   	push   esi
c000ebce:	e8 43 ff ff ff       	call   c000eb16 <GDTEntry::setLimit(unsigned int)>
c000ebd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebd7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebdb:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ebe0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ebe4:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ebe9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ebed:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ebf1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ebf5:	89 f8                	mov    eax,edi
c000ebf7:	89 fa                	mov    edx,edi
c000ebf9:	80 e4 f7             	and    ah,0xf7
c000ebfc:	80 ce 60             	or     dh,0x60
c000ebff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ec03:	89 c7                	mov    edi,eax
c000ec05:	80 cc 60             	or     ah,0x60
c000ec08:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ec0c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ec10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec14:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ec18:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ec1c:	83 c4 20             	add    esp,0x20
c000ec1f:	6a 00                	push   0x0
c000ec21:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ec25:	50                   	push   eax
c000ec26:	e8 cf fe ff ff       	call   c000eafa <GDTEntry::setBase(unsigned int)>
c000ec2b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ec2f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ec33:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ec37:	83 e0 3f             	and    eax,0x3f
c000ec3a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ec3e:	6a 00                	push   0x0
c000ec40:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ec44:	50                   	push   eax
c000ec45:	e8 b0 fe ff ff       	call   c000eafa <GDTEntry::setBase(unsigned int)>
c000ec4a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ec4e:	83 e0 3f             	and    eax,0x3f
c000ec51:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ec55:	83 c4 0c             	add    esp,0xc
c000ec58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec60:	53                   	push   ebx
c000ec61:	e8 e4 fe ff ff       	call   c000eb4a <GDT::addEntry(GDTEntry)>
c000ec66:	83 c4 0c             	add    esp,0xc
c000ec69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec71:	53                   	push   ebx
c000ec72:	e8 d3 fe ff ff       	call   c000eb4a <GDT::addEntry(GDTEntry)>
c000ec77:	83 c4 0c             	add    esp,0xc
c000ec7a:	57                   	push   edi
c000ec7b:	56                   	push   esi
c000ec7c:	53                   	push   ebx
c000ec7d:	e8 c8 fe ff ff       	call   c000eb4a <GDT::addEntry(GDTEntry)>
c000ec82:	83 c4 0c             	add    esp,0xc
c000ec85:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ec89:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ec8d:	53                   	push   ebx
c000ec8e:	e8 b7 fe ff ff       	call   c000eb4a <GDT::addEntry(GDTEntry)>
c000ec93:	83 c4 0c             	add    esp,0xc
c000ec96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec9e:	53                   	push   ebx
c000ec9f:	e8 a6 fe ff ff       	call   c000eb4a <GDT::addEntry(GDTEntry)>
c000eca4:	83 c4 0c             	add    esp,0xc
c000eca7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ecab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ecaf:	53                   	push   ebx
c000ecb0:	e8 95 fe ff ff       	call   c000eb4a <GDT::addEntry(GDTEntry)>
c000ecb5:	83 c4 0c             	add    esp,0xc
c000ecb8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ecbc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ecc0:	53                   	push   ebx
c000ecc1:	e8 84 fe ff ff       	call   c000eb4a <GDT::addEntry(GDTEntry)>
c000ecc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecc9:	e8 a6 fe ff ff       	call   c000eb74 <GDT::flush()>
c000ecce:	83 c4 40             	add    esp,0x40
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	5f                   	pop    edi
c000ecd4:	c3                   	ret    

c000ecd5 <idleFunction(void*)>:
c000ecd5:	83 ec 0c             	sub    esp,0xc
c000ecd8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000ecdf:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000ece6:	75 01                	jne    c000ece9 <idleFunction(void*)+0x14>
c000ece8:	fb                   	sti    
c000ece9:	e8 39 b6 00 00       	call   c001a327 <HalSystemIdle()>
c000ecee:	e8 93 34 01 00       	call   c0022186 <idleCommon()>
c000ecf3:	eb f4                	jmp    c000ece9 <idleFunction(void*)+0x14>
c000ecf5:	66 90                	xchg   ax,ax
c000ecf7:	90                   	nop

c000ecf8 <IDTEntry::IDTEntry(bool)>:
c000ecf8:	53                   	push   ebx
c000ecf9:	83 ec 04             	sub    esp,0x4
c000ecfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed00:	88 04 24             	mov    BYTE PTR [esp],al
c000ed03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed07:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ed0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed11:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ed15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ed1c:	83 e2 f0             	and    edx,0xfffffff0
c000ed1f:	83 ca 0e             	or     edx,0xe
c000ed22:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ed25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed29:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ed2c:	83 e2 ef             	and    edx,0xffffffef
c000ed2f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ed32:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ed36:	85 c0                	test   eax,eax
c000ed38:	74 06                	je     c000ed40 <IDTEntry::IDTEntry(bool)+0x48>
c000ed3a:	b2 03                	mov    dl,0x3
c000ed3c:	eb 06                	jmp    c000ed44 <IDTEntry::IDTEntry(bool)+0x4c>
c000ed3e:	66 90                	xchg   ax,ax
c000ed40:	b2 00                	mov    dl,0x0
c000ed42:	66 90                	xchg   ax,ax
c000ed44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed48:	83 e2 03             	and    edx,0x3
c000ed4b:	89 d3                	mov    ebx,edx
c000ed4d:	c1 e3 05             	shl    ebx,0x5
c000ed50:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ed53:	83 e2 9f             	and    edx,0xffffff9f
c000ed56:	88 d1                	mov    cl,dl
c000ed58:	88 da                	mov    dl,bl
c000ed5a:	09 ca                	or     edx,ecx
c000ed5c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ed5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed63:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ed66:	83 ca 80             	or     edx,0xffffff80
c000ed69:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ed6c:	90                   	nop
c000ed6d:	83 c4 04             	add    esp,0x4
c000ed70:	5b                   	pop    ebx
c000ed71:	c3                   	ret    

c000ed72 <IDTEntry::setOffset(unsigned int)>:
c000ed72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed7a:	66 89 02             	mov    WORD PTR [edx],ax
c000ed7d:	c1 e8 10             	shr    eax,0x10
c000ed80:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ed84:	c3                   	ret    
c000ed85:	90                   	nop
c000ed86:	66 90                	xchg   ax,ax

c000ed88 <IDT::IDT()>:
c000ed88:	90                   	nop
c000ed89:	c3                   	ret    

c000ed8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ed8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed8e:	83 c0 30             	add    eax,0x30
c000ed91:	c3                   	ret    

c000ed92 <IDT::addEntry(IDTEntry, int)>:
c000ed92:	53                   	push   ebx
c000ed93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ed9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eda3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eda6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000edaa:	5b                   	pop    ebx
c000edab:	c3                   	ret    

c000edac <IDT::addEntry(int, void (*)(), bool)>:
c000edac:	53                   	push   ebx
c000edad:	83 ec 10             	sub    esp,0x10
c000edb0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000edb5:	50                   	push   eax
c000edb6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000edba:	53                   	push   ebx
c000edbb:	e8 38 ff ff ff       	call   c000ecf8 <IDTEntry::IDTEntry(bool)>
c000edc0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000edc4:	53                   	push   ebx
c000edc5:	e8 a8 ff ff ff       	call   c000ed72 <IDTEntry::setOffset(unsigned int)>
c000edca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000edce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000edda:	e8 b3 ff ff ff       	call   c000ed92 <IDT::addEntry(IDTEntry, int)>
c000eddf:	83 c4 30             	add    esp,0x30
c000ede2:	5b                   	pop    ebx
c000ede3:	c3                   	ret    

c000ede4 <IDT::flush()>:
c000ede4:	66 c7 05 e8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0e8,0x7ff
c000eded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf1:	a3 ea e0 02 c0       	mov    ds:0xc002e0ea,eax
c000edf6:	0f 01 1d e8 e0 02 c0 	lidtd  ds:0xc002e0e8
c000edfd:	c3                   	ret    

c000edfe <IDT::setup()>:
c000edfe:	57                   	push   edi
c000edff:	56                   	push   esi
c000ee00:	53                   	push   ebx
c000ee01:	83 ec 10             	sub    esp,0x10
c000ee04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ee08:	6a 00                	push   0x0
c000ee0a:	68 60 14 02 c0       	push   0xc0021460
c000ee0f:	6a 00                	push   0x0
c000ee11:	53                   	push   ebx
c000ee12:	e8 95 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee17:	6a 00                	push   0x0
c000ee19:	68 70 14 02 c0       	push   0xc0021470
c000ee1e:	6a 01                	push   0x1
c000ee20:	53                   	push   ebx
c000ee21:	e8 86 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee26:	83 c4 20             	add    esp,0x20
c000ee29:	6a 00                	push   0x0
c000ee2b:	68 7a 14 02 c0       	push   0xc002147a
c000ee30:	6a 02                	push   0x2
c000ee32:	53                   	push   ebx
c000ee33:	e8 74 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee38:	6a 00                	push   0x0
c000ee3a:	68 84 14 02 c0       	push   0xc0021484
c000ee3f:	6a 03                	push   0x3
c000ee41:	53                   	push   ebx
c000ee42:	e8 65 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee47:	83 c4 20             	add    esp,0x20
c000ee4a:	6a 00                	push   0x0
c000ee4c:	68 8e 14 02 c0       	push   0xc002148e
c000ee51:	6a 04                	push   0x4
c000ee53:	53                   	push   ebx
c000ee54:	e8 53 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee59:	6a 00                	push   0x0
c000ee5b:	68 98 14 02 c0       	push   0xc0021498
c000ee60:	6a 05                	push   0x5
c000ee62:	53                   	push   ebx
c000ee63:	e8 44 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee68:	83 c4 20             	add    esp,0x20
c000ee6b:	6a 00                	push   0x0
c000ee6d:	68 a2 14 02 c0       	push   0xc00214a2
c000ee72:	6a 06                	push   0x6
c000ee74:	53                   	push   ebx
c000ee75:	e8 32 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee7a:	6a 00                	push   0x0
c000ee7c:	68 ac 14 02 c0       	push   0xc00214ac
c000ee81:	6a 07                	push   0x7
c000ee83:	53                   	push   ebx
c000ee84:	e8 23 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee89:	83 c4 20             	add    esp,0x20
c000ee8c:	6a 00                	push   0x0
c000ee8e:	68 b6 14 02 c0       	push   0xc00214b6
c000ee93:	6a 08                	push   0x8
c000ee95:	53                   	push   ebx
c000ee96:	e8 11 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ee9b:	6a 00                	push   0x0
c000ee9d:	68 be 14 02 c0       	push   0xc00214be
c000eea2:	6a 09                	push   0x9
c000eea4:	53                   	push   ebx
c000eea5:	e8 02 ff ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000eeaa:	83 c4 20             	add    esp,0x20
c000eead:	6a 00                	push   0x0
c000eeaf:	68 c8 14 02 c0       	push   0xc00214c8
c000eeb4:	6a 0a                	push   0xa
c000eeb6:	53                   	push   ebx
c000eeb7:	e8 f0 fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000eebc:	6a 00                	push   0x0
c000eebe:	68 d0 14 02 c0       	push   0xc00214d0
c000eec3:	6a 0b                	push   0xb
c000eec5:	53                   	push   ebx
c000eec6:	e8 e1 fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000eecb:	83 c4 20             	add    esp,0x20
c000eece:	6a 00                	push   0x0
c000eed0:	68 d8 14 02 c0       	push   0xc00214d8
c000eed5:	6a 0c                	push   0xc
c000eed7:	53                   	push   ebx
c000eed8:	e8 cf fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000eedd:	6a 00                	push   0x0
c000eedf:	68 e0 14 02 c0       	push   0xc00214e0
c000eee4:	6a 0d                	push   0xd
c000eee6:	53                   	push   ebx
c000eee7:	e8 c0 fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000eeec:	83 c4 20             	add    esp,0x20
c000eeef:	6a 00                	push   0x0
c000eef1:	68 fa 14 02 c0       	push   0xc00214fa
c000eef6:	6a 0e                	push   0xe
c000eef8:	53                   	push   ebx
c000eef9:	e8 ae fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000eefe:	6a 00                	push   0x0
c000ef00:	68 02 15 02 c0       	push   0xc0021502
c000ef05:	6a 0f                	push   0xf
c000ef07:	53                   	push   ebx
c000ef08:	e8 9f fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef0d:	83 c4 20             	add    esp,0x20
c000ef10:	6a 00                	push   0x0
c000ef12:	68 0c 15 02 c0       	push   0xc002150c
c000ef17:	6a 10                	push   0x10
c000ef19:	53                   	push   ebx
c000ef1a:	e8 8d fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef1f:	6a 00                	push   0x0
c000ef21:	68 16 15 02 c0       	push   0xc0021516
c000ef26:	6a 11                	push   0x11
c000ef28:	53                   	push   ebx
c000ef29:	e8 7e fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef2e:	83 c4 20             	add    esp,0x20
c000ef31:	6a 00                	push   0x0
c000ef33:	68 20 15 02 c0       	push   0xc0021520
c000ef38:	6a 12                	push   0x12
c000ef3a:	53                   	push   ebx
c000ef3b:	e8 6c fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef40:	6a 01                	push   0x1
c000ef42:	68 ba 15 02 c0       	push   0xc00215ba
c000ef47:	6a 60                	push   0x60
c000ef49:	53                   	push   ebx
c000ef4a:	e8 5d fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef4f:	83 c4 20             	add    esp,0x20
c000ef52:	6a 00                	push   0x0
c000ef54:	68 c1 15 02 c0       	push   0xc00215c1
c000ef59:	6a 20                	push   0x20
c000ef5b:	53                   	push   ebx
c000ef5c:	e8 4b fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef61:	6a 00                	push   0x0
c000ef63:	68 ac 15 02 c0       	push   0xc00215ac
c000ef68:	6a 21                	push   0x21
c000ef6a:	53                   	push   ebx
c000ef6b:	e8 3c fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef70:	83 c4 20             	add    esp,0x20
c000ef73:	6a 00                	push   0x0
c000ef75:	68 b3 15 02 c0       	push   0xc00215b3
c000ef7a:	6a 22                	push   0x22
c000ef7c:	53                   	push   ebx
c000ef7d:	e8 2a fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef82:	6a 00                	push   0x0
c000ef84:	68 2a 15 02 c0       	push   0xc002152a
c000ef89:	6a 23                	push   0x23
c000ef8b:	53                   	push   ebx
c000ef8c:	e8 1b fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000ef91:	83 c4 20             	add    esp,0x20
c000ef94:	6a 00                	push   0x0
c000ef96:	68 34 15 02 c0       	push   0xc0021534
c000ef9b:	6a 24                	push   0x24
c000ef9d:	53                   	push   ebx
c000ef9e:	e8 09 fe ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000efa3:	6a 00                	push   0x0
c000efa5:	68 3e 15 02 c0       	push   0xc002153e
c000efaa:	6a 25                	push   0x25
c000efac:	53                   	push   ebx
c000efad:	e8 fa fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000efb2:	83 c4 20             	add    esp,0x20
c000efb5:	6a 00                	push   0x0
c000efb7:	68 48 15 02 c0       	push   0xc0021548
c000efbc:	6a 26                	push   0x26
c000efbe:	53                   	push   ebx
c000efbf:	e8 e8 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000efc4:	6a 00                	push   0x0
c000efc6:	68 52 15 02 c0       	push   0xc0021552
c000efcb:	6a 27                	push   0x27
c000efcd:	53                   	push   ebx
c000efce:	e8 d9 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000efd3:	83 c4 20             	add    esp,0x20
c000efd6:	6a 00                	push   0x0
c000efd8:	68 5c 15 02 c0       	push   0xc002155c
c000efdd:	6a 28                	push   0x28
c000efdf:	53                   	push   ebx
c000efe0:	e8 c7 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000efe5:	6a 00                	push   0x0
c000efe7:	68 66 15 02 c0       	push   0xc0021566
c000efec:	6a 29                	push   0x29
c000efee:	53                   	push   ebx
c000efef:	e8 b8 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000eff4:	83 c4 20             	add    esp,0x20
c000eff7:	6a 00                	push   0x0
c000eff9:	68 70 15 02 c0       	push   0xc0021570
c000effe:	6a 2a                	push   0x2a
c000f000:	53                   	push   ebx
c000f001:	e8 a6 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f006:	6a 00                	push   0x0
c000f008:	68 7a 15 02 c0       	push   0xc002157a
c000f00d:	6a 2b                	push   0x2b
c000f00f:	53                   	push   ebx
c000f010:	e8 97 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f015:	83 c4 20             	add    esp,0x20
c000f018:	6a 00                	push   0x0
c000f01a:	68 84 15 02 c0       	push   0xc0021584
c000f01f:	6a 2c                	push   0x2c
c000f021:	53                   	push   ebx
c000f022:	e8 85 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f027:	6a 00                	push   0x0
c000f029:	68 8e 15 02 c0       	push   0xc002158e
c000f02e:	6a 2d                	push   0x2d
c000f030:	53                   	push   ebx
c000f031:	e8 76 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f036:	83 c4 20             	add    esp,0x20
c000f039:	6a 00                	push   0x0
c000f03b:	68 98 15 02 c0       	push   0xc0021598
c000f040:	6a 2e                	push   0x2e
c000f042:	53                   	push   ebx
c000f043:	e8 64 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f048:	6a 00                	push   0x0
c000f04a:	68 a2 15 02 c0       	push   0xc00215a2
c000f04f:	6a 2f                	push   0x2f
c000f051:	53                   	push   ebx
c000f052:	e8 55 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f057:	83 c4 20             	add    esp,0x20
c000f05a:	6a 00                	push   0x0
c000f05c:	68 c4 16 02 c0       	push   0xc00216c4
c000f061:	6a 30                	push   0x30
c000f063:	53                   	push   ebx
c000f064:	e8 43 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f069:	6a 00                	push   0x0
c000f06b:	68 ce 16 02 c0       	push   0xc00216ce
c000f070:	6a 31                	push   0x31
c000f072:	53                   	push   ebx
c000f073:	e8 34 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f078:	83 c4 20             	add    esp,0x20
c000f07b:	6a 00                	push   0x0
c000f07d:	68 d8 16 02 c0       	push   0xc00216d8
c000f082:	6a 32                	push   0x32
c000f084:	53                   	push   ebx
c000f085:	e8 22 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f08a:	6a 00                	push   0x0
c000f08c:	68 e2 16 02 c0       	push   0xc00216e2
c000f091:	6a 33                	push   0x33
c000f093:	53                   	push   ebx
c000f094:	e8 13 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f099:	83 c4 20             	add    esp,0x20
c000f09c:	6a 00                	push   0x0
c000f09e:	68 ec 16 02 c0       	push   0xc00216ec
c000f0a3:	6a 34                	push   0x34
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 01 fd ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 f6 16 02 c0       	push   0xc00216f6
c000f0b2:	6a 35                	push   0x35
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 f2 fc ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 00 17 02 c0       	push   0xc0021700
c000f0c4:	6a 36                	push   0x36
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 e0 fc ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 0a 17 02 c0       	push   0xc002170a
c000f0d3:	6a 37                	push   0x37
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 d1 fc ff ff       	call   c000edac <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 1c             	add    esp,0x1c
c000f0de:	6a 03                	push   0x3
c000f0e0:	6a 02                	push   0x2
c000f0e2:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f0e8:	e8 eb 4a 00 00       	call   c0013bd8 <VAS::allocatePages(int, int)>
c000f0ed:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f0f4:	89 c6                	mov    esi,eax
c000f0f6:	e8 b1 08 00 00       	call   c000f9ac <malloc>
c000f0fb:	81 c6 00 20 00 00    	add    esi,0x2000
c000f101:	89 04 24             	mov    DWORD PTR [esp],eax
c000f104:	89 c7                	mov    edi,eax
c000f106:	e8 9d 3b 00 00       	call   c0012ca8 <TSS::TSS()>
c000f10b:	83 c4 0c             	add    esp,0xc
c000f10e:	68 b6 14 02 c0       	push   0xc00214b6
c000f113:	56                   	push   esi
c000f114:	57                   	push   edi
c000f115:	e8 d2 3b 00 00       	call   c0012cec <TSS::setup(unsigned long, unsigned long)>
c000f11a:	89 c6                	mov    esi,eax
c000f11c:	58                   	pop    eax
c000f11d:	5a                   	pop    edx
c000f11e:	6a 00                	push   0x0
c000f120:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f124:	50                   	push   eax
c000f125:	e8 ce fb ff ff       	call   c000ecf8 <IDTEntry::IDTEntry(bool)>
c000f12a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f12e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f133:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f13a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f13e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f144:	80 ce 05             	or     dh,0x5
c000f147:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f14b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f14e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f152:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f155:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f158:	e8 87 fc ff ff       	call   c000ede4 <IDT::flush()>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	5b                   	pop    ebx
c000f161:	5e                   	pop    esi
c000f162:	5f                   	pop    edi
c000f163:	c3                   	ret    

c000f164 <CPU::current()>:
c000f164:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000f169:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f16f:	c3                   	ret    

c000f170 <operator new(unsigned long)>:
c000f170:	e9 37 08 00 00       	jmp    c000f9ac <malloc>

c000f175 <operator delete(void*)>:
c000f175:	e9 52 08 00 00       	jmp    c000f9cc <rfree>

c000f17a <disableIRQs()>:
c000f17a:	fa                   	cli    
c000f17b:	c3                   	ret    

c000f17c <enableIRQs()>:
c000f17c:	fb                   	sti    
c000f17d:	c3                   	ret    

c000f17e <lockScheduler()>:
c000f17e:	fa                   	cli    
c000f17f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f185:	c3                   	ret    

c000f186 <unlockScheduler()>:
c000f186:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f18d:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f194:	75 01                	jne    c000f197 <unlockScheduler()+0x11>
c000f196:	fb                   	sti    
c000f197:	c3                   	ret    

c000f198 <lockStuff()>:
c000f198:	fa                   	cli    
c000f199:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f19f:	ff 05 2c ea 02 c0    	inc    DWORD PTR ds:0xc002ea2c
c000f1a5:	c3                   	ret    

c000f1a6 <unlockStuff()>:
c000f1a6:	83 ec 0c             	sub    esp,0xc
c000f1a9:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000f1ae:	48                   	dec    eax
c000f1af:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000f1b4:	75 18                	jne    c000f1ce <unlockStuff()+0x28>
c000f1b6:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c000f1bd:	74 0f                	je     c000f1ce <unlockStuff()+0x28>
c000f1bf:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000f1c9:	e8 72 7d 00 00       	call   c0016f40 <schedule()>
c000f1ce:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f1d5:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f1dc:	75 01                	jne    c000f1df <unlockStuff()+0x39>
c000f1de:	fb                   	sti    
c000f1df:	83 c4 0c             	add    esp,0xc
c000f1e2:	c3                   	ret    

c000f1e3 <Virt::getAKernelVAS()>:
c000f1e3:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000f1e8:	c3                   	ret    

c000f1e9 <__not_memcpy>:
c000f1e9:	57                   	push   edi
c000f1ea:	56                   	push   esi
c000f1eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f1f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f1f7:	89 c7                	mov    edi,eax
c000f1f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1fb:	5e                   	pop    esi
c000f1fc:	5f                   	pop    edi
c000f1fd:	c3                   	ret    

c000f1fe <KeFormatDate(char*, int, int, int, int, bool)>:
c000f1fe:	55                   	push   ebp
c000f1ff:	57                   	push   edi
c000f200:	56                   	push   esi
c000f201:	be e8 03 00 00       	mov    esi,0x3e8
c000f206:	53                   	push   ebx
c000f207:	bb 0a 00 00 00       	mov    ebx,0xa
c000f20c:	81 ec ac 00 00 00    	sub    esp,0xac
c000f212:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f217:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f21e:	89 c8                	mov    eax,ecx
c000f220:	99                   	cdq    
c000f221:	f7 fb                	idiv   ebx
c000f223:	89 d5                	mov    ebp,edx
c000f225:	99                   	cdq    
c000f226:	f7 fb                	idiv   ebx
c000f228:	8d 42 30             	lea    eax,[edx+0x30]
c000f22b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f22f:	8d 45 30             	lea    eax,[ebp+0x30]
c000f232:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f23a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f23e:	89 c8                	mov    eax,ecx
c000f240:	99                   	cdq    
c000f241:	f7 fe                	idiv   esi
c000f243:	be 64 00 00 00       	mov    esi,0x64
c000f248:	99                   	cdq    
c000f249:	f7 fb                	idiv   ebx
c000f24b:	8d 42 30             	lea    eax,[edx+0x30]
c000f24e:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f252:	89 c8                	mov    eax,ecx
c000f254:	99                   	cdq    
c000f255:	f7 fe                	idiv   esi
c000f257:	99                   	cdq    
c000f258:	f7 fb                	idiv   ebx
c000f25a:	31 db                	xor    ebx,ebx
c000f25c:	8d 42 30             	lea    eax,[edx+0x30]
c000f25f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f263:	0f be 8b 04 e1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd1efc]
c000f26a:	83 f9 59             	cmp    ecx,0x59
c000f26d:	0f 84 1f 01 00 00    	je     c000f392 <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f273:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f277:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f27e:	83 f9 4d             	cmp    ecx,0x4d
c000f281:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f289:	57                   	push   edi
c000f28a:	57                   	push   edi
c000f28b:	89 d7                	mov    edi,edx
c000f28d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f291:	c1 ff 1f             	sar    edi,0x1f
c000f294:	57                   	push   edi
c000f295:	52                   	push   edx
c000f296:	e8 6d 04 00 00       	call   c000f708 <KeGetDigitsInNumber(long long)>
c000f29b:	83 c4 10             	add    esp,0x10
c000f29e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2a2:	48                   	dec    eax
c000f2a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2a7:	75 1c                	jne    c000f2c5 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f2a9:	83 f9 44             	cmp    ecx,0x44
c000f2ac:	75 09                	jne    c000f2b7 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f2ae:	80 3d 20 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e120,0x0
c000f2b5:	eb 0c                	jmp    c000f2c3 <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f2b7:	83 f9 4d             	cmp    ecx,0x4d
c000f2ba:	75 60                	jne    c000f31c <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f2bc:	80 3d 21 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e121,0x0
c000f2c3:	74 57                	je     c000f31c <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f2c5:	89 d0                	mov    eax,edx
c000f2c7:	b9 0a 00 00 00       	mov    ecx,0xa
c000f2cc:	99                   	cdq    
c000f2cd:	f7 f9                	idiv   ecx
c000f2cf:	89 d6                	mov    esi,edx
c000f2d1:	99                   	cdq    
c000f2d2:	f7 f9                	idiv   ecx
c000f2d4:	83 c2 30             	add    edx,0x30
c000f2d7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f2db:	8d 56 30             	lea    edx,[esi+0x30]
c000f2de:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f2e2:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f2e7:	56                   	push   esi
c000f2e8:	56                   	push   esi
c000f2e9:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f2ed:	57                   	push   edi
c000f2ee:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f2f2:	56                   	push   esi
c000f2f3:	e8 78 15 ff ff       	call   c0000870 <strcat>
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	83 fb 02             	cmp    ebx,0x2
c000f2fe:	74 34                	je     c000f334 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f300:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f305:	a0 08 e1 02 c0       	mov    al,ds:0xc002e108
c000f30a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f30e:	51                   	push   ecx
c000f30f:	51                   	push   ecx
c000f310:	57                   	push   edi
c000f311:	56                   	push   esi
c000f312:	e8 59 15 ff ff       	call   c0000870 <strcat>
c000f317:	83 c4 10             	add    esp,0x10
c000f31a:	eb 18                	jmp    c000f334 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f31c:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f321:	89 d0                	mov    eax,edx
c000f323:	b9 0a 00 00 00       	mov    ecx,0xa
c000f328:	99                   	cdq    
c000f329:	f7 f9                	idiv   ecx
c000f32b:	83 c2 30             	add    edx,0x30
c000f32e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f332:	eb b3                	jmp    c000f2e7 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f334:	43                   	inc    ebx
c000f335:	83 fb 03             	cmp    ebx,0x3
c000f338:	0f 85 25 ff ff ff    	jne    c000f263 <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f33e:	52                   	push   edx
c000f33f:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f346:	6a 00                	push   0x0
c000f348:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f34f:	e8 9c 11 ff ff       	call   c00004f0 <memset>
c000f354:	89 34 24             	mov    DWORD PTR [esp],esi
c000f357:	e8 24 12 ff ff       	call   c0000580 <strlen>
c000f35c:	83 c4 10             	add    esp,0x10
c000f35f:	40                   	inc    eax
c000f360:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f367:	72 14                	jb     c000f37d <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f369:	50                   	push   eax
c000f36a:	50                   	push   eax
c000f36b:	56                   	push   esi
c000f36c:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f373:	e8 d8 12 ff ff       	call   c0000650 <strcpy>
c000f378:	83 c4 10             	add    esp,0x10
c000f37b:	eb 58                	jmp    c000f3d5 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f37d:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f384:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f38b:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f38e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f390:	eb 43                	jmp    c000f3d5 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f392:	85 ed                	test   ebp,ebp
c000f394:	74 2a                	je     c000f3c0 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f396:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f39b:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f39f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3a3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f3a7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f3ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f3af:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f3b3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f3b7:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f3bb:	e9 27 ff ff ff       	jmp    c000f2e7 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f3c0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f3c4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3c8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f3cc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f3d0:	e9 0d ff ff ff       	jmp    c000f2e2 <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f3d5:	81 c4 ac 00 00 00    	add    esp,0xac
c000f3db:	5b                   	pop    ebx
c000f3dc:	5e                   	pop    esi
c000f3dd:	5f                   	pop    edi
c000f3de:	5d                   	pop    ebp
c000f3df:	c3                   	ret    

c000f3e0 <KeFormatShortDate(char*, int, int, int, int)>:
c000f3e0:	83 ec 14             	sub    esp,0x14
c000f3e3:	6a 00                	push   0x0
c000f3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f9:	e8 00 fe ff ff       	call   c000f1fe <KeFormatDate(char*, int, int, int, int, bool)>
c000f3fe:	83 c4 2c             	add    esp,0x2c
c000f401:	c3                   	ret    

c000f402 <KeFormatLongDate(char*, int, int, int, int)>:
c000f402:	83 ec 14             	sub    esp,0x14
c000f405:	6a 01                	push   0x1
c000f407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f40f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f417:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f41b:	e8 de fd ff ff       	call   c000f1fe <KeFormatDate(char*, int, int, int, int, bool)>
c000f420:	83 c4 2c             	add    esp,0x2c
c000f423:	c3                   	ret    

c000f424 <KeSetLocale(klocale_t)>:
c000f424:	57                   	push   edi
c000f425:	b9 09 00 00 00       	mov    ecx,0x9
c000f42a:	56                   	push   esi
c000f42b:	bf 00 e1 02 c0       	mov    edi,0xc002e100
c000f430:	fc                   	cld    
c000f431:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f435:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f437:	5e                   	pop    esi
c000f438:	5f                   	pop    edi
c000f439:	c3                   	ret    

c000f43a <KeInitialiseLocale()>:
c000f43a:	57                   	push   edi
c000f43b:	56                   	push   esi
c000f43c:	83 ec 3c             	sub    esp,0x3c
c000f43f:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f447:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f44f:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f457:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f45f:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f466:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f46e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f476:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f47d:	68 a6 40 02 c0       	push   0xc00240a6
c000f482:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f486:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f48a:	50                   	push   eax
c000f48b:	e8 c0 11 ff ff       	call   c0000650 <strcpy>
c000f490:	83 ec 20             	sub    esp,0x20
c000f493:	b9 09 00 00 00       	mov    ecx,0x9
c000f498:	fc                   	cld    
c000f499:	89 e7                	mov    edi,esp
c000f49b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f49d:	e8 82 ff ff ff       	call   c000f424 <KeSetLocale(klocale_t)>
c000f4a2:	83 c4 64             	add    esp,0x64
c000f4a5:	5e                   	pop    esi
c000f4a6:	5f                   	pop    edi
c000f4a7:	c3                   	ret    

c000f4a8 <KeFormatCurrency(char*, int, long long, long long)>:
c000f4a8:	c3                   	ret    

c000f4a9 <KeFormatCurrency(char*, int, double)>:
c000f4a9:	c3                   	ret    

c000f4aa <KeFormatNumber(char*, long long, long long)>:
c000f4aa:	c3                   	ret    

c000f4ab <KeFormatNumber(char*, double)>:
c000f4ab:	c3                   	ret    

c000f4ac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f4ac:	55                   	push   ebp
c000f4ad:	57                   	push   edi
c000f4ae:	56                   	push   esi
c000f4af:	53                   	push   ebx
c000f4b0:	83 ec 4c             	sub    esp,0x4c
c000f4b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4bb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f4bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4c3:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f4cb:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f4d3:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f4db:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f4e3:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f4e8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f4ec:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f4f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4f8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f4fc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f500:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f505:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f509:	89 c2                	mov    edx,eax
c000f50b:	c1 fa 1f             	sar    edx,0x1f
c000f50e:	52                   	push   edx
c000f50f:	50                   	push   eax
c000f510:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f514:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f518:	e8 97 25 01 00       	call   c0021ab4 <__udivdi3>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f524:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f52c:	80 f4 00             	xor    ah,0x0
c000f52f:	89 c7                	mov    edi,eax
c000f531:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f535:	80 f4 00             	xor    ah,0x0
c000f538:	89 c5                	mov    ebp,eax
c000f53a:	89 e8                	mov    eax,ebp
c000f53c:	09 f8                	or     eax,edi
c000f53e:	74 04                	je     c000f544 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f540:	eb be                	jmp    c000f500 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f542:	66 90                	xchg   ax,ax
c000f544:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f548:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f54b:	90                   	nop
c000f54c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f550:	89 c7                	mov    edi,eax
c000f552:	89 c5                	mov    ebp,eax
c000f554:	c1 fd 1f             	sar    ebp,0x1f
c000f557:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f55b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f55f:	55                   	push   ebp
c000f560:	57                   	push   edi
c000f561:	52                   	push   edx
c000f562:	50                   	push   eax
c000f563:	e8 4c 26 01 00       	call   c0021bb4 <__umoddi3>
c000f568:	83 c4 10             	add    esp,0x10
c000f56b:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f570:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f574:	01 c8                	add    eax,ecx
c000f576:	8a 10                	mov    dl,BYTE PTR [eax]
c000f578:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f57c:	88 10                	mov    BYTE PTR [eax],dl
c000f57e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f582:	89 c2                	mov    edx,eax
c000f584:	c1 fa 1f             	sar    edx,0x1f
c000f587:	52                   	push   edx
c000f588:	50                   	push   eax
c000f589:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f58d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f591:	e8 1e 25 01 00       	call   c0021ab4 <__udivdi3>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f59d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f5a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5a5:	80 f4 00             	xor    ah,0x0
c000f5a8:	89 c3                	mov    ebx,eax
c000f5aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5ae:	80 f4 00             	xor    ah,0x0
c000f5b1:	89 c6                	mov    esi,eax
c000f5b3:	89 f0                	mov    eax,esi
c000f5b5:	09 d8                	or     eax,ebx
c000f5b7:	74 03                	je     c000f5bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f5b9:	eb 91                	jmp    c000f54c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f5bb:	90                   	nop
c000f5bc:	90                   	nop
c000f5bd:	83 c4 4c             	add    esp,0x4c
c000f5c0:	5b                   	pop    ebx
c000f5c1:	5e                   	pop    esi
c000f5c2:	5f                   	pop    edi
c000f5c3:	5d                   	pop    ebp
c000f5c4:	c3                   	ret    
c000f5c5:	8d 76 00             	lea    esi,[esi+0x0]

c000f5c8 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f5c8:	55                   	push   ebp
c000f5c9:	57                   	push   edi
c000f5ca:	56                   	push   esi
c000f5cb:	53                   	push   ebx
c000f5cc:	83 ec 4c             	sub    esp,0x4c
c000f5cf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5d7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f5db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5df:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f5e7:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f5ef:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f5f7:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f5ff:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f604:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f608:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f60c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f611:	79 1d                	jns    c000f630 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f613:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f617:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f61c:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f624:	8d 50 01             	lea    edx,[eax+0x1]
c000f627:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f62b:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f62e:	66 90                	xchg   ax,ax
c000f630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f638:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f63c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f640:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f645:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f649:	89 c2                	mov    edx,eax
c000f64b:	c1 fa 1f             	sar    edx,0x1f
c000f64e:	52                   	push   edx
c000f64f:	50                   	push   eax
c000f650:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f654:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f658:	e8 57 24 01 00       	call   c0021ab4 <__udivdi3>
c000f65d:	83 c4 10             	add    esp,0x10
c000f660:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f664:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f668:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f66c:	80 f4 00             	xor    ah,0x0
c000f66f:	89 c7                	mov    edi,eax
c000f671:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f675:	80 f4 00             	xor    ah,0x0
c000f678:	89 c5                	mov    ebp,eax
c000f67a:	89 e8                	mov    eax,ebp
c000f67c:	09 f8                	or     eax,edi
c000f67e:	74 04                	je     c000f684 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f680:	eb be                	jmp    c000f640 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f682:	66 90                	xchg   ax,ax
c000f684:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f688:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f68b:	90                   	nop
c000f68c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f690:	89 c7                	mov    edi,eax
c000f692:	89 c5                	mov    ebp,eax
c000f694:	c1 fd 1f             	sar    ebp,0x1f
c000f697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f69b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	52                   	push   edx
c000f6a2:	50                   	push   eax
c000f6a3:	e8 8c 22 01 00       	call   c0021934 <__moddi3>
c000f6a8:	83 c4 10             	add    esp,0x10
c000f6ab:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f6b0:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f6b4:	01 c8                	add    eax,ecx
c000f6b6:	8a 10                	mov    dl,BYTE PTR [eax]
c000f6b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6bc:	88 10                	mov    BYTE PTR [eax],dl
c000f6be:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f6c2:	89 c2                	mov    edx,eax
c000f6c4:	c1 fa 1f             	sar    edx,0x1f
c000f6c7:	52                   	push   edx
c000f6c8:	50                   	push   eax
c000f6c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6d1:	e8 12 21 01 00       	call   c00217e8 <__divdi3>
c000f6d6:	83 c4 10             	add    esp,0x10
c000f6d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f6dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6e5:	80 f4 00             	xor    ah,0x0
c000f6e8:	89 c3                	mov    ebx,eax
c000f6ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6ee:	80 f4 00             	xor    ah,0x0
c000f6f1:	89 c6                	mov    esi,eax
c000f6f3:	89 f0                	mov    eax,esi
c000f6f5:	09 d8                	or     eax,ebx
c000f6f7:	74 03                	je     c000f6fc <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f6f9:	eb 91                	jmp    c000f68c <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f6fb:	90                   	nop
c000f6fc:	90                   	nop
c000f6fd:	83 c4 4c             	add    esp,0x4c
c000f700:	5b                   	pop    ebx
c000f701:	5e                   	pop    esi
c000f702:	5f                   	pop    edi
c000f703:	5d                   	pop    ebp
c000f704:	c3                   	ret    
c000f705:	8d 76 00             	lea    esi,[esi+0x0]

c000f708 <KeGetDigitsInNumber(long long)>:
c000f708:	56                   	push   esi
c000f709:	53                   	push   ebx
c000f70a:	83 ec 24             	sub    esp,0x24
c000f70d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f711:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f715:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f719:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f71d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f725:	8d 76 00             	lea    esi,[esi+0x0]
c000f728:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f72c:	80 f4 00             	xor    ah,0x0
c000f72f:	89 c3                	mov    ebx,eax
c000f731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f735:	80 f4 00             	xor    ah,0x0
c000f738:	89 c6                	mov    esi,eax
c000f73a:	89 f0                	mov    eax,esi
c000f73c:	09 d8                	or     eax,ebx
c000f73e:	74 28                	je     c000f768 <KeGetDigitsInNumber(long long)+0x60>
c000f740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f744:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f748:	6a 00                	push   0x0
c000f74a:	6a 0a                	push   0xa
c000f74c:	52                   	push   edx
c000f74d:	50                   	push   eax
c000f74e:	e8 95 20 01 00       	call   c00217e8 <__divdi3>
c000f753:	83 c4 10             	add    esp,0x10
c000f756:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f75a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f75e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f763:	eb c3                	jmp    c000f728 <KeGetDigitsInNumber(long long)+0x20>
c000f765:	8d 76 00             	lea    esi,[esi+0x0]
c000f768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f76c:	83 c4 24             	add    esp,0x24
c000f76f:	5b                   	pop    ebx
c000f770:	5e                   	pop    esi
c000f771:	c3                   	ret    
c000f772:	66 90                	xchg   ax,ax

c000f774 <KeItoa(unsigned long long, char*)>:
c000f774:	83 ec 1c             	sub    esp,0x1c
c000f777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f77b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f77f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f787:	6a 0a                	push   0xa
c000f789:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f78d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f795:	e8 12 fd ff ff       	call   c000f4ac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	90                   	nop
c000f79e:	83 c4 1c             	add    esp,0x1c
c000f7a1:	c3                   	ret    
c000f7a2:	66 90                	xchg   ax,ax

c000f7a4 <KeItoa(long long, char*)>:
c000f7a4:	83 ec 1c             	sub    esp,0x1c
c000f7a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f7af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f7b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7b7:	6a 0a                	push   0xa
c000f7b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7c5:	e8 fe fd ff ff       	call   c000f5c8 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	90                   	nop
c000f7ce:	83 c4 1c             	add    esp,0x1c
c000f7d1:	c3                   	ret    
c000f7d2:	66 90                	xchg   ax,ax

c000f7d4 <KeXtoa(unsigned long long, char*)>:
c000f7d4:	83 ec 1c             	sub    esp,0x1c
c000f7d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f7df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f7e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7e7:	6a 10                	push   0x10
c000f7e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7f5:	e8 b2 fc ff ff       	call   c000f4ac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f7fa:	83 c4 10             	add    esp,0x10
c000f7fd:	90                   	nop
c000f7fe:	83 c4 1c             	add    esp,0x1c
c000f801:	c3                   	ret    

c000f802 <sbrk>:
c000f802:	55                   	push   ebp
c000f803:	57                   	push   edi
c000f804:	56                   	push   esi
c000f805:	53                   	push   ebx
c000f806:	83 ec 1c             	sub    esp,0x1c
c000f809:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f80d:	85 c0                	test   eax,eax
c000f80f:	74 66                	je     c000f877 <sbrk+0x75>
c000f811:	78 6b                	js     c000f87e <sbrk+0x7c>
c000f813:	8b 15 90 68 02 c0    	mov    edx,DWORD PTR ds:0xc0026890
c000f819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f81d:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f823:	05 ff 0f 00 00       	add    eax,0xfff
c000f828:	0f 49 e8             	cmovns ebp,eax
c000f82b:	c1 fd 0c             	sar    ebp,0xc
c000f82e:	bb 00 00 00 00       	mov    ebx,0x0
c000f833:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000f839:	8b 3d 90 68 02 c0    	mov    edi,DWORD PTR ds:0xc0026890
c000f83f:	e8 b8 07 00 00       	call   c000fffc <Phys::allocatePage()>
c000f844:	68 01 04 00 00       	push   0x401
c000f849:	57                   	push   edi
c000f84a:	50                   	push   eax
c000f84b:	56                   	push   esi
c000f84c:	e8 7f 42 00 00       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f851:	81 05 90 68 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026890,0x1000
c000f85b:	83 c3 01             	add    ebx,0x1
c000f85e:	83 c4 10             	add    esp,0x10
c000f861:	39 dd                	cmp    ebp,ebx
c000f863:	75 ce                	jne    c000f833 <sbrk+0x31>
c000f865:	0f 20 d8             	mov    eax,cr3
c000f868:	0f 22 d8             	mov    cr3,eax
c000f86b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    
c000f877:	a1 90 68 02 c0       	mov    eax,ds:0xc0026890
c000f87c:	eb f1                	jmp    c000f86f <sbrk+0x6d>
c000f87e:	83 ec 08             	sub    esp,0x8
c000f881:	50                   	push   eax
c000f882:	68 ac 40 02 c0       	push   0xc00240ac
c000f887:	e8 da 76 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f88c:	83 c4 10             	add    esp,0x10
c000f88f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f894:	eb d9                	jmp    c000f86f <sbrk+0x6d>

c000f896 <sbrk_thunk>:
c000f896:	83 ec 0c             	sub    esp,0xc
c000f899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f89d:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f8a2:	7f 10                	jg     c000f8b4 <sbrk_thunk+0x1e>
c000f8a4:	83 ec 0c             	sub    esp,0xc
c000f8a7:	50                   	push   eax
c000f8a8:	e8 55 ff ff ff       	call   c000f802 <sbrk>
c000f8ad:	83 c4 10             	add    esp,0x10
c000f8b0:	83 c4 0c             	add    esp,0xc
c000f8b3:	c3                   	ret    
c000f8b4:	83 ec 08             	sub    esp,0x8
c000f8b7:	50                   	push   eax
c000f8b8:	68 dc 40 02 c0       	push   0xc00240dc
c000f8bd:	e8 a4 76 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f8ca:	eb e4                	jmp    c000f8b0 <sbrk_thunk+0x1a>

c000f8cc <mmap>:
c000f8cc:	55                   	push   ebp
c000f8cd:	57                   	push   edi
c000f8ce:	56                   	push   esi
c000f8cf:	53                   	push   ebx
c000f8d0:	83 ec 18             	sub    esp,0x18
c000f8d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8d7:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f8dd:	89 fb                	mov    ebx,edi
c000f8df:	c1 eb 0c             	shr    ebx,0xc
c000f8e2:	53                   	push   ebx
c000f8e3:	e8 0f 3b 00 00       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c000f8e8:	89 c5                	mov    ebp,eax
c000f8ea:	83 c4 10             	add    esp,0x10
c000f8ed:	85 db                	test   ebx,ebx
c000f8ef:	7e 2f                	jle    c000f920 <mmap+0x54>
c000f8f1:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f8f7:	01 c7                	add    edi,eax
c000f8f9:	89 c3                	mov    ebx,eax
c000f8fb:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000f901:	e8 f6 06 00 00       	call   c000fffc <Phys::allocatePage()>
c000f906:	68 01 04 00 00       	push   0x401
c000f90b:	53                   	push   ebx
c000f90c:	50                   	push   eax
c000f90d:	56                   	push   esi
c000f90e:	e8 bd 41 00 00       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f913:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f919:	83 c4 10             	add    esp,0x10
c000f91c:	39 fb                	cmp    ebx,edi
c000f91e:	75 db                	jne    c000f8fb <mmap+0x2f>
c000f920:	89 e8                	mov    eax,ebp
c000f922:	83 c4 0c             	add    esp,0xc
c000f925:	5b                   	pop    ebx
c000f926:	5e                   	pop    esi
c000f927:	5f                   	pop    edi
c000f928:	5d                   	pop    ebp
c000f929:	c3                   	ret    

c000f92a <munmap>:
c000f92a:	83 ec 18             	sub    esp,0x18
c000f92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f931:	e8 bf 3d 00 00       	call   c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c000f936:	b8 00 00 00 00       	mov    eax,0x0
c000f93b:	83 c4 1c             	add    esp,0x1c
c000f93e:	c3                   	ret    

c000f93f <liballoc_lock()>:
c000f93f:	fa                   	cli    
c000f940:	83 05 30 ea 02 c0 01 	add    DWORD PTR ds:0xc002ea30,0x1
c000f947:	b8 00 00 00 00       	mov    eax,0x0
c000f94c:	c3                   	ret    

c000f94d <liballoc_unlock()>:
c000f94d:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000f955:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f95c:	75 01                	jne    c000f95f <liballoc_unlock()+0x12>
c000f95e:	fb                   	sti    
c000f95f:	b8 00 00 00 00       	mov    eax,0x0
c000f964:	c3                   	ret    

c000f965 <liballoc_alloc(int)>:
c000f965:	83 ec 10             	sub    esp,0x10
c000f968:	6a 01                	push   0x1
c000f96a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f96e:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f974:	e8 5f 42 00 00       	call   c0013bd8 <VAS::allocatePages(int, int)>
c000f979:	83 c4 1c             	add    esp,0x1c
c000f97c:	c3                   	ret    

c000f97d <liballoc_free(void*, int)>:
c000f97d:	83 ec 14             	sub    esp,0x14
c000f980:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f984:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f98a:	e8 a3 3e 00 00       	call   c0013832 <VAS::freeAllocatedPages(unsigned long)>
c000f98f:	b8 00 00 00 00       	mov    eax,0x0
c000f994:	83 c4 1c             	add    esp,0x1c
c000f997:	c3                   	ret    

c000f998 <realloc>:
c000f998:	83 ec 14             	sub    esp,0x14
c000f99b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f99f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9a3:	e8 dd 1d ff ff       	call   c0001785 <dlrealloc>
c000f9a8:	83 c4 1c             	add    esp,0x1c
c000f9ab:	c3                   	ret    

c000f9ac <malloc>:
c000f9ac:	83 ec 18             	sub    esp,0x18
c000f9af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9b3:	e8 90 18 ff ff       	call   c0001248 <dlmalloc>
c000f9b8:	83 c4 1c             	add    esp,0x1c
c000f9bb:	c3                   	ret    

c000f9bc <free>:
c000f9bc:	83 ec 18             	sub    esp,0x18
c000f9bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9c3:	e8 be 13 ff ff       	call   c0000d86 <dlfree>
c000f9c8:	83 c4 1c             	add    esp,0x1c
c000f9cb:	c3                   	ret    

c000f9cc <rfree>:
c000f9cc:	83 ec 18             	sub    esp,0x18
c000f9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9d3:	e8 ae 13 ff ff       	call   c0000d86 <dlfree>
c000f9d8:	83 c4 1c             	add    esp,0x1c
c000f9db:	c3                   	ret    

c000f9dc <calloc>:
c000f9dc:	56                   	push   esi
c000f9dd:	53                   	push   ebx
c000f9de:	83 ec 10             	sub    esp,0x10
c000f9e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f9e5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f9ea:	53                   	push   ebx
c000f9eb:	e8 bc ff ff ff       	call   c000f9ac <malloc>
c000f9f0:	89 c6                	mov    esi,eax
c000f9f2:	83 c4 0c             	add    esp,0xc
c000f9f5:	53                   	push   ebx
c000f9f6:	6a 00                	push   0x0
c000f9f8:	50                   	push   eax
c000f9f9:	e8 f2 0a ff ff       	call   c00004f0 <memset>
c000f9fe:	89 f0                	mov    eax,esi
c000fa00:	83 c4 14             	add    esp,0x14
c000fa03:	5b                   	pop    ebx
c000fa04:	5e                   	pop    esi
c000fa05:	c3                   	ret    
c000fa06:	66 90                	xchg   ax,ax

c000fa08 <KeMailboxTryPost(Mailbox*, void*)>:
c000fa08:	83 ec 10             	sub    esp,0x10
c000fa0b:	fa                   	cli    
c000fa0c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fa11:	83 c0 01             	add    eax,0x1
c000fa14:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fa19:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fa1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa25:	85 c0                	test   eax,eax
c000fa27:	75 23                	jne    c000fa4c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fa29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa31:	89 10                	mov    DWORD PTR [eax],edx
c000fa33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa3a:	8d 50 01             	lea    edx,[eax+0x1]
c000fa3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa41:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fa44:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fa49:	8d 76 00             	lea    esi,[esi+0x0]
c000fa4c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fa54:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fa59:	85 c0                	test   eax,eax
c000fa5b:	75 03                	jne    c000fa60 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fa5d:	fb                   	sti    
c000fa5e:	66 90                	xchg   ax,ax
c000fa60:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c3                   	ret    

c000fa68 <KeMailboxTryGet(Mailbox*, void**)>:
c000fa68:	83 ec 10             	sub    esp,0x10
c000fa6b:	fa                   	cli    
c000fa6c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fa71:	83 c0 01             	add    eax,0x1
c000fa74:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fa79:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fa7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa85:	83 f8 01             	cmp    eax,0x1
c000fa88:	75 22                	jne    c000faac <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fa8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa8e:	8b 10                	mov    edx,DWORD PTR [eax]
c000fa90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa94:	89 10                	mov    DWORD PTR [eax],edx
c000fa96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa9d:	8d 50 ff             	lea    edx,[eax-0x1]
c000faa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000faa4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000faa7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000faac:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fab4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fab9:	85 c0                	test   eax,eax
c000fabb:	75 03                	jne    c000fac0 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fabd:	fb                   	sti    
c000fabe:	66 90                	xchg   ax,ax
c000fac0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fac4:	83 c4 10             	add    esp,0x10
c000fac7:	c3                   	ret    

c000fac8 <KeMailboxCreate()>:
c000fac8:	83 ec 1c             	sub    esp,0x1c
c000facb:	83 ec 0c             	sub    esp,0xc
c000face:	6a 08                	push   0x8
c000fad0:	e8 d7 fe ff ff       	call   c000f9ac <malloc>
c000fad5:	83 c4 10             	add    esp,0x10
c000fad8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fadc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fae0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fae6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000faf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faf5:	83 c4 1c             	add    esp,0x1c
c000faf8:	c3                   	ret    
c000faf9:	8d 76 00             	lea    esi,[esi+0x0]

c000fafc <KeMailboxPost(Mailbox*, void*)>:
c000fafc:	83 ec 1c             	sub    esp,0x1c
c000faff:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb0c:	e8 f7 fe ff ff       	call   c000fa08 <KeMailboxTryPost(Mailbox*, void*)>
c000fb11:	83 c4 08             	add    esp,0x8
c000fb14:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fb18:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fb1c:	83 f0 01             	xor    eax,0x1
c000fb1f:	0f b6 c0             	movzx  eax,al
c000fb22:	85 c0                	test   eax,eax
c000fb24:	74 26                	je     c000fb4c <KeMailboxPost(Mailbox*, void*)+0x50>
c000fb26:	fa                   	cli    
c000fb27:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb2c:	83 c0 01             	add    eax,0x1
c000fb2f:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fb34:	e8 07 74 00 00       	call   c0016f40 <schedule()>
c000fb39:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fb41:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb46:	85 c0                	test   eax,eax
c000fb48:	75 02                	jne    c000fb4c <KeMailboxPost(Mailbox*, void*)+0x50>
c000fb4a:	fb                   	sti    
c000fb4b:	90                   	nop
c000fb4c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fb51:	85 c0                	test   eax,eax
c000fb53:	75 03                	jne    c000fb58 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fb55:	eb ad                	jmp    c000fb04 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fb57:	90                   	nop
c000fb58:	90                   	nop
c000fb59:	83 c4 1c             	add    esp,0x1c
c000fb5c:	c3                   	ret    
c000fb5d:	8d 76 00             	lea    esi,[esi+0x0]

c000fb60 <KeMailboxGet(Mailbox*, void**)>:
c000fb60:	83 ec 1c             	sub    esp,0x1c
c000fb63:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb70:	e8 f3 fe ff ff       	call   c000fa68 <KeMailboxTryGet(Mailbox*, void**)>
c000fb75:	83 c4 08             	add    esp,0x8
c000fb78:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fb7c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fb80:	83 f0 01             	xor    eax,0x1
c000fb83:	0f b6 c0             	movzx  eax,al
c000fb86:	85 c0                	test   eax,eax
c000fb88:	74 26                	je     c000fbb0 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fb8a:	fa                   	cli    
c000fb8b:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb90:	83 c0 01             	add    eax,0x1
c000fb93:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fb98:	e8 a3 73 00 00       	call   c0016f40 <schedule()>
c000fb9d:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fba5:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fbaa:	85 c0                	test   eax,eax
c000fbac:	75 02                	jne    c000fbb0 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fbae:	fb                   	sti    
c000fbaf:	90                   	nop
c000fbb0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	75 03                	jne    c000fbbc <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fbb9:	eb ad                	jmp    c000fb68 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fbbb:	90                   	nop
c000fbbc:	90                   	nop
c000fbbd:	83 c4 1c             	add    esp,0x1c
c000fbc0:	c3                   	ret    
c000fbc1:	8d 76 00             	lea    esi,[esi+0x0]

c000fbc4 <KeMailboxDestroy(Mailbox*)>:
c000fbc4:	83 ec 0c             	sub    esp,0xc
c000fbc7:	83 ec 0c             	sub    esp,0xc
c000fbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbce:	e8 e9 fd ff ff       	call   c000f9bc <free>
c000fbd3:	83 c4 10             	add    esp,0x10
c000fbd6:	90                   	nop
c000fbd7:	83 c4 0c             	add    esp,0xc
c000fbda:	c3                   	ret    

c000fbdb <KeFirstTask()>:
c000fbdb:	53                   	push   ebx
c000fbdc:	83 ec 08             	sub    esp,0x8
c000fbdf:	fb                   	sti    
c000fbe0:	e8 06 a1 00 00       	call   c0019ceb <HalEnableNMI()>
c000fbe5:	83 ec 0c             	sub    esp,0xc
c000fbe8:	68 eb 40 02 c0       	push   0xc00240eb
c000fbed:	e8 43 d6 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000fbf2:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000fbf9:	e8 ae fd ff ff       	call   c000f9ac <malloc>
c000fbfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000fc05:	89 c3                	mov    ebx,eax
c000fc07:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000fc0c:	50                   	push   eax
c000fc0d:	68 04 41 02 c0       	push   0xc0024104
c000fc12:	6a 01                	push   0x1
c000fc14:	53                   	push   ebx
c000fc15:	e8 3e 6e 00 00       	call   c0016a58 <Process::Process(bool, char const*, Process*, char**)>
c000fc1a:	83 c4 20             	add    esp,0x20
c000fc1d:	68 ff 00 00 00       	push   0xff
c000fc22:	6a 00                	push   0x0
c000fc24:	68 d5 ec 00 c0       	push   0xc000ecd5
c000fc29:	53                   	push   ebx
c000fc2a:	e8 69 70 00 00       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c000fc2f:	8b 15 58 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea58
c000fc35:	6a 7a                	push   0x7a
c000fc37:	6a 00                	push   0x0
c000fc39:	68 1c 76 01 c0       	push   0xc001761c
c000fc3e:	52                   	push   edx
c000fc3f:	e8 54 70 00 00       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c000fc44:	83 c4 14             	add    esp,0x14
c000fc47:	68 8c 41 02 c0       	push   0xc002418c
c000fc4c:	a3 10 ea 02 c0       	mov    ds:0xc002ea10,eax
c000fc51:	e8 df d5 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000fc56:	c6 05 cd c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0cd,0x1
c000fc5d:	e8 8f 0c 00 00       	call   c00108f1 <KeInitRand()>
c000fc62:	e8 83 7d 00 00       	call   c00179ea <Vm::initialise8086()>
c000fc67:	e8 c6 81 ff ff       	call   c0007e32 <Fs::initVFS()>
c000fc6c:	c7 04 24 11 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d11
c000fc73:	e8 bd d5 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000fc78:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000fc7d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fc83:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc85:	6a 00                	push   0x0
c000fc87:	6a 00                	push   0x0
c000fc89:	6a 00                	push   0x0
c000fc8b:	50                   	push   eax
c000fc8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fc8f:	83 c4 14             	add    esp,0x14
c000fc92:	68 8c 41 02 c0       	push   0xc002418c
c000fc97:	e8 99 d5 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000fc9c:	e8 76 79 ff ff       	call   c0007617 <KeInitialiseSymlinks()>
c000fca1:	e8 d8 e9 ff ff       	call   c000e67e <KeLoadSystemEnv()>
c000fca6:	e8 8d 0a 00 00       	call   c0010738 <KeSetupPowerManager()>
c000fcab:	c7 04 24 11 41 02 c0 	mov    DWORD PTR [esp],0xc0024111
c000fcb2:	e8 7e d5 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000fcb7:	8b 1d c8 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0c8
c000fcbd:	59                   	pop    ecx
c000fcbe:	58                   	pop    eax
c000fcbf:	6a 01                	push   0x1
c000fcc1:	68 22 41 02 c0       	push   0xc0024122
c000fcc6:	e8 d8 66 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c000fccb:	5a                   	pop    edx
c000fccc:	59                   	pop    ecx
c000fccd:	53                   	push   ebx
c000fcce:	50                   	push   eax
c000fccf:	e8 30 69 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c000fcd4:	83 c4 10             	add    esp,0x10
c000fcd7:	83 ec 0c             	sub    esp,0xc
c000fcda:	6a 02                	push   0x2
c000fcdc:	e8 1f 73 00 00       	call   c0017000 <blockTask(TaskState)>
c000fce1:	83 c4 10             	add    esp,0x10
c000fce4:	eb f1                	jmp    c000fcd7 <KeFirstTask()+0xfc>

c000fce6 <KeEntryPoint>:
c000fce6:	57                   	push   edi
c000fce7:	bf f9 03 00 00       	mov    edi,0x3f9
c000fcec:	56                   	push   esi
c000fced:	31 f6                	xor    esi,esi
c000fcef:	53                   	push   ebx
c000fcf0:	83 ec 20             	sub    esp,0x20
c000fcf3:	e8 00 d5 ff ff       	call   c000d1f8 <KeInitialiseBootConfigurationFlags()>
c000fcf8:	89 f0                	mov    eax,esi
c000fcfa:	89 fa                	mov    edx,edi
c000fcfc:	ee                   	out    dx,al
c000fcfd:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fd02:	b0 80                	mov    al,0x80
c000fd04:	89 da                	mov    edx,ebx
c000fd06:	ee                   	out    dx,al
c000fd07:	b1 03                	mov    cl,0x3
c000fd09:	ba f8 03 00 00       	mov    edx,0x3f8
c000fd0e:	88 c8                	mov    al,cl
c000fd10:	ee                   	out    dx,al
c000fd11:	89 f0                	mov    eax,esi
c000fd13:	89 fa                	mov    edx,edi
c000fd15:	ee                   	out    dx,al
c000fd16:	88 c8                	mov    al,cl
c000fd18:	89 da                	mov    edx,ebx
c000fd1a:	ee                   	out    dx,al
c000fd1b:	b0 c7                	mov    al,0xc7
c000fd1d:	ba fa 03 00 00       	mov    edx,0x3fa
c000fd22:	ee                   	out    dx,al
c000fd23:	b0 0b                	mov    al,0xb
c000fd25:	ba fc 03 00 00       	mov    edx,0x3fc
c000fd2a:	ee                   	out    dx,al
c000fd2b:	83 ec 0c             	sub    esp,0xc
c000fd2e:	68 3e 41 02 c0       	push   0xc002413e
c000fd33:	e8 2e 72 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fd38:	e8 c9 d4 ff ff       	call   c000d206 <KeDisplaySplashScreen()>
c000fd3d:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fd42:	05 ff 0f 00 00       	add    eax,0xfff
c000fd47:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd4c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd4f:	e8 39 04 00 00       	call   c001018d <Phys::physicalMemorySetup(unsigned int)>
c000fd54:	e8 72 38 00 00       	call   c00135cb <Virt::virtualMemorySetup()>
c000fd59:	e8 d4 d3 ff ff       	call   c000d132 <KeInitialiseAtexit()>
c000fd5e:	58                   	pop    eax
c000fd5f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd63:	53                   	push   ebx
c000fd64:	e8 49 3b 00 00       	call   c00138b2 <VAS::VAS()>
c000fd69:	89 1d 50 e2 02 c0    	mov    DWORD PTR ds:0xc002e250,ebx
c000fd6f:	e8 5a 1f 01 00       	call   c0021cce <_init>
c000fd74:	c7 04 24 55 41 02 c0 	mov    DWORD PTR [esp],0xc0024155
c000fd7b:	e8 b5 d4 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000fd80:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fd87:	e8 20 fc ff ff       	call   c000f9ac <malloc>
c000fd8c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd8f:	89 c6                	mov    esi,eax
c000fd91:	e8 2a e3 ff ff       	call   c000e0c0 <Computer::Computer()>
c000fd96:	8b 15 50 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e250
c000fd9c:	89 35 c8 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c8,esi
c000fda2:	52                   	push   edx
c000fda3:	6a 00                	push   0x0
c000fda5:	6a 00                	push   0x0
c000fda7:	56                   	push   esi
c000fda8:	e8 57 e3 ff ff       	call   c000e104 <Computer::open(int, int, void*)>
c000fdad:	83 c4 14             	add    esp,0x14
c000fdb0:	68 b0 41 02 c0       	push   0xc00241b0
c000fdb5:	e8 7b d4 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000fdba:	e8 8c a6 00 00       	call   c001a44b <HalInitialiseCoprocessor()>
c000fdbf:	c7 04 24 6f 41 02 c0 	mov    DWORD PTR [esp],0xc002416f
c000fdc6:	e8 6a d4 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c000fdcb:	c7 04 24 db fb 00 c0 	mov    DWORD PTR [esp],0xc000fbdb
c000fdd2:	e8 21 70 00 00       	call   c0016df8 <setupMultitasking(void (*)())>
c000fdd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdda:	e8 89 3b 00 00       	call   c0013968 <VAS::~VAS()>
c000fddf:	83 c4 30             	add    esp,0x30
c000fde2:	5b                   	pop    ebx
c000fde3:	5e                   	pop    esi
c000fde4:	5f                   	pop    edi
c000fde5:	c3                   	ret    
c000fde6:	66 90                	xchg   ax,ax

c000fde8 <Mutex::Mutex()>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdef:	83 ec 08             	sub    esp,0x8
c000fdf2:	6a 01                	push   0x1
c000fdf4:	50                   	push   eax
c000fdf5:	e8 96 0d 00 00       	call   c0010b90 <Semaphore::Semaphore(int)>
c000fdfa:	83 c4 10             	add    esp,0x10
c000fdfd:	90                   	nop
c000fdfe:	83 c4 0c             	add    esp,0xc
c000fe01:	c3                   	ret    

c000fe02 <KePanic(char const*)>:
c000fe02:	c6 05 24 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e124,0x1
c000fe09:	e9 c1 a6 00 00       	jmp    c001a4cf <HalPanic(char const*)>

c000fe0e <Phys::allocateDMA(unsigned long)>:
c000fe0e:	55                   	push   ebp
c000fe0f:	31 ed                	xor    ebp,ebp
c000fe11:	57                   	push   edi
c000fe12:	56                   	push   esi
c000fe13:	31 f6                	xor    esi,esi
c000fe15:	53                   	push   ebx
c000fe16:	31 db                	xor    ebx,ebx
c000fe18:	83 ec 1c             	sub    esp,0x1c
c000fe1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe1f:	05 ff 0f 00 00       	add    eax,0xfff
c000fe24:	c1 e8 0c             	shr    eax,0xc
c000fe27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe2b:	31 c0                	xor    eax,eax
c000fe2d:	eb 1b                	jmp    c000fe4a <Phys::allocateDMA(unsigned long)+0x3c>
c000fe2f:	8d 78 01             	lea    edi,[eax+0x1]
c000fe32:	85 c0                	test   eax,eax
c000fe34:	0f 44 eb             	cmove  ebp,ebx
c000fe37:	0f 44 f3             	cmove  esi,ebx
c000fe3a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fe3e:	74 37                	je     c000fe77 <Phys::allocateDMA(unsigned long)+0x69>
c000fe40:	89 f8                	mov    eax,edi
c000fe42:	83 c3 01             	add    ebx,0x1
c000fe45:	83 fb 0f             	cmp    ebx,0xf
c000fe48:	7f 13                	jg     c000fe5d <Phys::allocateDMA(unsigned long)+0x4f>
c000fe4a:	80 bb 40 e1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd1ec0],0x0
c000fe51:	74 dc                	je     c000fe2f <Phys::allocateDMA(unsigned long)+0x21>
c000fe53:	31 c0                	xor    eax,eax
c000fe55:	83 c3 01             	add    ebx,0x1
c000fe58:	83 fb 0f             	cmp    ebx,0xf
c000fe5b:	7e ed                	jle    c000fe4a <Phys::allocateDMA(unsigned long)+0x3c>
c000fe5d:	83 ec 0c             	sub    esp,0xc
c000fe60:	68 d4 41 02 c0       	push   0xc00241d4
c000fe65:	e8 98 ff ff ff       	call   c000fe02 <KePanic(char const*)>
c000fe6a:	83 c4 10             	add    esp,0x10
c000fe6d:	31 c0                	xor    eax,eax
c000fe6f:	83 c4 1c             	add    esp,0x1c
c000fe72:	5b                   	pop    ebx
c000fe73:	5e                   	pop    esi
c000fe74:	5f                   	pop    edi
c000fe75:	5d                   	pop    ebp
c000fe76:	c3                   	ret    
c000fe77:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe7b:	89 f2                	mov    edx,esi
c000fe7d:	c1 fa 04             	sar    edx,0x4
c000fe80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe84:	01 f1                	add    ecx,esi
c000fe86:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fe89:	83 e9 01             	sub    ecx,0x1
c000fe8c:	0f 48 ca             	cmovs  ecx,edx
c000fe8f:	c1 f9 04             	sar    ecx,0x4
c000fe92:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000fe96:	74 06                	je     c000fe9e <Phys::allocateDMA(unsigned long)+0x90>
c000fe98:	89 eb                	mov    ebx,ebp
c000fe9a:	31 c0                	xor    eax,eax
c000fe9c:	eb b7                	jmp    c000fe55 <Phys::allocateDMA(unsigned long)+0x47>
c000fe9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fea2:	85 d2                	test   edx,edx
c000fea4:	74 17                	je     c000febd <Phys::allocateDMA(unsigned long)+0xaf>
c000fea6:	8d 96 40 e1 02 c0    	lea    edx,[esi-0x3ffd1ec0]
c000feac:	8d 84 06 41 e1 02 c0 	lea    eax,[esi+eax*1-0x3ffd1ebf]
c000feb3:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000feb6:	83 c2 01             	add    edx,0x1
c000feb9:	39 d0                	cmp    eax,edx
c000febb:	75 f6                	jne    c000feb3 <Phys::allocateDMA(unsigned long)+0xa5>
c000febd:	8b 15 38 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e138
c000fec3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fecb:	01 c2                	add    edx,eax
c000fecd:	89 15 38 e1 02 c0    	mov    DWORD PTR ds:0xc002e138,edx
c000fed3:	85 c9                	test   ecx,ecx
c000fed5:	74 17                	je     c000feee <Phys::allocateDMA(unsigned long)+0xe0>
c000fed7:	83 ec 0c             	sub    esp,0xc
c000feda:	68 d4 41 02 c0       	push   0xc00241d4
c000fedf:	e8 1e ff ff ff       	call   c000fe02 <KePanic(char const*)>
c000fee4:	83 c4 10             	add    esp,0x10
c000fee7:	89 f8                	mov    eax,edi
c000fee9:	e9 54 ff ff ff       	jmp    c000fe42 <Phys::allocateDMA(unsigned long)+0x34>
c000feee:	c1 e6 0c             	shl    esi,0xc
c000fef1:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000fef7:	e9 73 ff ff ff       	jmp    c000fe6f <Phys::allocateDMA(unsigned long)+0x61>

c000fefc <Phys::freeDMA(unsigned long, unsigned long)>:
c000fefc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff00:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ff06:	a1 38 e1 02 c0       	mov    eax,ds:0xc002e138
c000ff0b:	c1 ea 0c             	shr    edx,0xc
c000ff0e:	29 d0                	sub    eax,edx
c000ff10:	a3 38 e1 02 c0       	mov    ds:0xc002e138,eax
c000ff15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff19:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ff1e:	c1 e8 0c             	shr    eax,0xc
c000ff21:	85 d2                	test   edx,edx
c000ff23:	74 11                	je     c000ff36 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ff25:	05 40 e1 02 c0       	add    eax,0xc002e140
c000ff2a:	01 c2                	add    edx,eax
c000ff2c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ff2f:	83 c0 01             	add    eax,0x1
c000ff32:	39 d0                	cmp    eax,edx
c000ff34:	75 f6                	jne    c000ff2c <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ff36:	c3                   	ret    

c000ff37 <Phys::setPageState(unsigned long, bool)>:
c000ff37:	57                   	push   edi
c000ff38:	56                   	push   esi
c000ff39:	8b 35 94 68 02 c0    	mov    esi,DWORD PTR ds:0xc0026894
c000ff3f:	53                   	push   ebx
c000ff40:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ff45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff4d:	89 ca                	mov    edx,ecx
c000ff4f:	83 e1 07             	and    ecx,0x7
c000ff52:	c1 ea 03             	shr    edx,0x3
c000ff55:	0f b6 c0             	movzx  eax,al
c000ff58:	d3 c3                	rol    ebx,cl
c000ff5a:	01 d6                	add    esi,edx
c000ff5c:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ff5f:	d3 e0                	shl    eax,cl
c000ff61:	21 fb                	and    ebx,edi
c000ff63:	88 1e                	mov    BYTE PTR [esi],bl
c000ff65:	8b 1d 94 68 02 c0    	mov    ebx,DWORD PTR ds:0xc0026894
c000ff6b:	01 da                	add    edx,ebx
c000ff6d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ff6f:	09 c8                	or     eax,ecx
c000ff71:	88 02                	mov    BYTE PTR [edx],al
c000ff73:	5b                   	pop    ebx
c000ff74:	5e                   	pop    esi
c000ff75:	5f                   	pop    edi
c000ff76:	c3                   	ret    

c000ff77 <Phys::getPageState(unsigned long)>:
c000ff77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff7b:	8b 15 94 68 02 c0    	mov    edx,DWORD PTR ds:0xc0026894
c000ff81:	89 c8                	mov    eax,ecx
c000ff83:	83 e1 07             	and    ecx,0x7
c000ff86:	c1 e8 03             	shr    eax,0x3
c000ff89:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ff8d:	d3 f8                	sar    eax,cl
c000ff8f:	83 e0 01             	and    eax,0x1
c000ff92:	c3                   	ret    

c000ff93 <Phys::freePage(unsigned long)>:
c000ff93:	53                   	push   ebx
c000ff94:	83 ec 08             	sub    esp,0x8
c000ff97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ffa1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ffa7:	76 41                	jbe    c000ffea <Phys::freePage(unsigned long)+0x57>
c000ffa9:	c1 e8 0c             	shr    eax,0xc
c000ffac:	50                   	push   eax
c000ffad:	89 c3                	mov    ebx,eax
c000ffaf:	e8 c3 ff ff ff       	call   c000ff77 <Phys::getPageState(unsigned long)>
c000ffb4:	5a                   	pop    edx
c000ffb5:	84 c0                	test   al,al
c000ffb7:	74 20                	je     c000ffd9 <Phys::freePage(unsigned long)+0x46>
c000ffb9:	a1 38 e1 02 c0       	mov    eax,ds:0xc002e138
c000ffbe:	83 ec 08             	sub    esp,0x8
c000ffc1:	6a 00                	push   0x0
c000ffc3:	53                   	push   ebx
c000ffc4:	83 e8 01             	sub    eax,0x1
c000ffc7:	a3 38 e1 02 c0       	mov    ds:0xc002e138,eax
c000ffcc:	e8 66 ff ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	83 c4 08             	add    esp,0x8
c000ffd7:	5b                   	pop    ebx
c000ffd8:	c3                   	ret    
c000ffd9:	c7 44 24 10 d9 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc00242d9
c000ffe1:	83 c4 08             	add    esp,0x8
c000ffe4:	5b                   	pop    ebx
c000ffe5:	e9 18 fe ff ff       	jmp    c000fe02 <KePanic(char const*)>
c000ffea:	68 00 10 00 00       	push   0x1000
c000ffef:	50                   	push   eax
c000fff0:	e8 07 ff ff ff       	call   c000fefc <Phys::freeDMA(unsigned long, unsigned long)>
c000fff5:	59                   	pop    ecx
c000fff6:	5b                   	pop    ebx
c000fff7:	83 c4 08             	add    esp,0x8
c000fffa:	5b                   	pop    ebx
c000fffb:	c3                   	ret    

c000fffc <Phys::allocatePage()>:
c000fffc:	56                   	push   esi
c000fffd:	53                   	push   ebx
c000fffe:	83 ec 14             	sub    esp,0x14
c0010001:	8b 35 2c e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e12c
c0010007:	89 f3                	mov    ebx,esi
c0010009:	eb 0a                	jmp    c0010015 <Phys::allocatePage()+0x19>
c001000b:	89 1d 2c e1 02 c0    	mov    DWORD PTR ds:0xc002e12c,ebx
c0010011:	39 de                	cmp    esi,ebx
c0010013:	74 26                	je     c001003b <Phys::allocatePage()+0x3f>
c0010015:	53                   	push   ebx
c0010016:	e8 5c ff ff ff       	call   c000ff77 <Phys::getPageState(unsigned long)>
c001001b:	59                   	pop    ecx
c001001c:	84 c0                	test   al,al
c001001e:	74 67                	je     c0010087 <Phys::allocatePage()+0x8b>
c0010020:	83 c3 01             	add    ebx,0x1
c0010023:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010029:	75 e0                	jne    c001000b <Phys::allocatePage()+0xf>
c001002b:	c7 05 2c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e12c,0x0
c0010035:	31 db                	xor    ebx,ebx
c0010037:	39 de                	cmp    esi,ebx
c0010039:	75 da                	jne    c0010015 <Phys::allocatePage()+0x19>
c001003b:	a0 50 e1 02 c0       	mov    al,ds:0xc002e150
c0010040:	83 ec 0c             	sub    esp,0xc
c0010043:	83 f0 01             	xor    eax,0x1
c0010046:	a2 50 e1 02 c0       	mov    ds:0xc002e150,al
c001004b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010050:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010053:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0010059:	51                   	push   ecx
c001005a:	e8 55 44 00 00       	call   c00144b4 <VAS::scanForEviction()>
c001005f:	83 c4 10             	add    esp,0x10
c0010062:	85 c0                	test   eax,eax
c0010064:	75 48                	jne    c00100ae <Phys::allocatePage()+0xb2>
c0010066:	83 ec 0c             	sub    esp,0xc
c0010069:	68 fc 41 02 c0       	push   0xc00241fc
c001006e:	e8 8f fd ff ff       	call   c000fe02 <KePanic(char const*)>
c0010073:	8b 1d 2c e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e12c
c0010079:	83 c4 10             	add    esp,0x10
c001007c:	53                   	push   ebx
c001007d:	e8 f5 fe ff ff       	call   c000ff77 <Phys::getPageState(unsigned long)>
c0010082:	59                   	pop    ecx
c0010083:	84 c0                	test   al,al
c0010085:	75 99                	jne    c0010020 <Phys::allocatePage()+0x24>
c0010087:	6a 01                	push   0x1
c0010089:	53                   	push   ebx
c001008a:	e8 a8 fe ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c001008f:	8b 1d 38 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e138
c0010095:	5e                   	pop    esi
c0010096:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c001009b:	5a                   	pop    edx
c001009c:	83 c3 01             	add    ebx,0x1
c001009f:	89 1d 38 e1 02 c0    	mov    DWORD PTR ds:0xc002e138,ebx
c00100a5:	c1 e0 0c             	shl    eax,0xc
c00100a8:	83 c4 14             	add    esp,0x14
c00100ab:	5b                   	pop    ebx
c00100ac:	5e                   	pop    esi
c00100ad:	c3                   	ret    
c00100ae:	8b 15 38 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e138
c00100b4:	83 ec 08             	sub    esp,0x8
c00100b7:	6a 01                	push   0x1
c00100b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100bd:	83 c2 01             	add    edx,0x1
c00100c0:	89 15 38 e1 02 c0    	mov    DWORD PTR ds:0xc002e138,edx
c00100c6:	89 c2                	mov    edx,eax
c00100c8:	c1 ea 0c             	shr    edx,0xc
c00100cb:	52                   	push   edx
c00100cc:	e8 66 fe ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100d8:	eb ce                	jmp    c00100a8 <Phys::allocatePage()+0xac>

c00100da <Phys::allocateContiguousPages(int)>:
c00100da:	57                   	push   edi
c00100db:	56                   	push   esi
c00100dc:	53                   	push   ebx
c00100dd:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00100e1:	fa                   	cli    
c00100e2:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00100e8:	83 ec 0c             	sub    esp,0xc
c00100eb:	31 db                	xor    ebx,ebx
c00100ed:	68 2c 42 02 c0       	push   0xc002422c
c00100f2:	83 c2 01             	add    edx,0x1
c00100f5:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c00100fb:	e8 66 6e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	85 db                	test   ebx,ebx
c0010105:	75 11                	jne    c0010118 <Phys::allocateContiguousPages(int)+0x3e>
c0010107:	e8 f0 fe ff ff       	call   c000fffc <Phys::allocatePage()>
c001010c:	83 ff 01             	cmp    edi,0x1
c001010f:	89 c6                	mov    esi,eax
c0010111:	74 21                	je     c0010134 <Phys::allocateContiguousPages(int)+0x5a>
c0010113:	bb 01 00 00 00       	mov    ebx,0x1
c0010118:	e8 df fe ff ff       	call   c000fffc <Phys::allocatePage()>
c001011d:	89 da                	mov    edx,ebx
c001011f:	c1 e2 0c             	shl    edx,0xc
c0010122:	01 f2                	add    edx,esi
c0010124:	39 c2                	cmp    edx,eax
c0010126:	74 24                	je     c001014c <Phys::allocateContiguousPages(int)+0x72>
c0010128:	83 ff 01             	cmp    edi,0x1
c001012b:	bb 01 00 00 00       	mov    ebx,0x1
c0010130:	89 c6                	mov    esi,eax
c0010132:	75 e4                	jne    c0010118 <Phys::allocateContiguousPages(int)+0x3e>
c0010134:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001013c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010141:	85 c0                	test   eax,eax
c0010143:	75 01                	jne    c0010146 <Phys::allocateContiguousPages(int)+0x6c>
c0010145:	fb                   	sti    
c0010146:	5b                   	pop    ebx
c0010147:	89 f0                	mov    eax,esi
c0010149:	5e                   	pop    esi
c001014a:	5f                   	pop    edi
c001014b:	c3                   	ret    
c001014c:	83 c3 01             	add    ebx,0x1
c001014f:	39 fb                	cmp    ebx,edi
c0010151:	75 b0                	jne    c0010103 <Phys::allocateContiguousPages(int)+0x29>
c0010153:	eb df                	jmp    c0010134 <Phys::allocateContiguousPages(int)+0x5a>

c0010155 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010155:	56                   	push   esi
c0010156:	53                   	push   ebx
c0010157:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001015b:	39 1d 30 e1 02 c0    	cmp    DWORD PTR ds:0xc002e130,ebx
c0010161:	73 06                	jae    c0010169 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010163:	89 1d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,ebx
c0010169:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001016d:	c1 eb 0c             	shr    ebx,0xc
c0010170:	c1 e8 0c             	shr    eax,0xc
c0010173:	39 d8                	cmp    eax,ebx
c0010175:	73 13                	jae    c001018a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010177:	6a 00                	push   0x0
c0010179:	50                   	push   eax
c001017a:	8d 70 01             	lea    esi,[eax+0x1]
c001017d:	e8 b5 fd ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c0010182:	39 f3                	cmp    ebx,esi
c0010184:	89 f0                	mov    eax,esi
c0010186:	5a                   	pop    edx
c0010187:	59                   	pop    ecx
c0010188:	75 ed                	jne    c0010177 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001018a:	5b                   	pop    ebx
c001018b:	5e                   	pop    esi
c001018c:	c3                   	ret    

c001018d <Phys::physicalMemorySetup(unsigned int)>:
c001018d:	55                   	push   ebp
c001018e:	57                   	push   edi
c001018f:	56                   	push   esi
c0010190:	53                   	push   ebx
c0010191:	31 db                	xor    ebx,ebx
c0010193:	83 ec 40             	sub    esp,0x40
c0010196:	6a 10                	push   0x10
c0010198:	6a 00                	push   0x0
c001019a:	68 40 e1 02 c0       	push   0xc002e140
c001019f:	e8 4c 03 ff ff       	call   c00004f0 <memset>
c00101a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00101a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00101ad:	05 00 10 00 00       	add    eax,0x1000
c00101b2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00101b6:	5a                   	pop    edx
c00101b7:	59                   	pop    ecx
c00101b8:	50                   	push   eax
c00101b9:	68 ef 42 02 c0       	push   0xc00242ef
c00101be:	e8 a3 6d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	83 ec 08             	sub    esp,0x8
c00101c9:	6a 01                	push   0x1
c00101cb:	53                   	push   ebx
c00101cc:	83 c3 01             	add    ebx,0x1
c00101cf:	e8 63 fd ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c00101d4:	83 c4 10             	add    esp,0x10
c00101d7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00101dd:	75 e7                	jne    c00101c6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00101df:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00101e6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00101ed:	c1 e0 08             	shl    eax,0x8
c00101f0:	09 c2                	or     edx,eax
c00101f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00101f6:	0f 84 43 01 00 00    	je     c001033f <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c00101fc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010204:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010209:	e9 82 00 00 00       	jmp    c0010290 <Phys::physicalMemorySetup(unsigned int)+0x103>
c001020e:	ba 00 00 08 00       	mov    edx,0x80000
c0010213:	89 c1                	mov    ecx,eax
c0010215:	39 f2                	cmp    edx,esi
c0010217:	19 f9                	sbb    ecx,edi
c0010219:	0f 82 c0 00 00 00    	jb     c00102df <Phys::physicalMemorySetup(unsigned int)+0x152>
c001021f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010223:	89 c5                	mov    ebp,eax
c0010225:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010229:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001022d:	19 cd                	sbb    ebp,ecx
c001022f:	0f 83 af 00 00 00    	jae    c00102e4 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0010235:	89 d6                	mov    esi,edx
c0010237:	ba 00 00 0a 00       	mov    edx,0xa0000
c001023c:	39 f2                	cmp    edx,esi
c001023e:	89 cf                	mov    edi,ecx
c0010240:	19 c8                	sbb    eax,ecx
c0010242:	73 07                	jae    c001024b <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0010244:	be 00 00 0a 00       	mov    esi,0xa0000
c0010249:	31 ff                	xor    edi,edi
c001024b:	89 f2                	mov    edx,esi
c001024d:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0010252:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0010258:	89 f9                	mov    ecx,edi
c001025a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001025e:	83 d1 ff             	adc    ecx,0xffffffff
c0010261:	39 d0                	cmp    eax,edx
c0010263:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0010267:	b8 00 00 00 00       	mov    eax,0x0
c001026c:	19 c8                	sbb    eax,ecx
c001026e:	0f 82 9d 01 00 00    	jb     c0010411 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0010274:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010278:	83 c3 18             	add    ebx,0x18
c001027b:	83 c6 01             	add    esi,0x1
c001027e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010282:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010286:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001028a:	0f 84 bf 00 00 00    	je     c001034f <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0010290:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010292:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010295:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010298:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001029b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001029f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00102a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102a6:	01 f0                	add    eax,esi
c00102a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102ac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00102b0:	55                   	push   ebp
c00102b1:	11 fa                	adc    edx,edi
c00102b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00102bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102bf:	50                   	push   eax
c00102c0:	56                   	push   esi
c00102c1:	68 8c 42 02 c0       	push   0xc002428c
c00102c6:	e8 9b 6c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00102cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102cf:	83 c4 10             	add    esp,0x10
c00102d2:	09 f8                	or     eax,edi
c00102d4:	75 79                	jne    c001034f <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00102d6:	83 fd 01             	cmp    ebp,0x1
c00102d9:	0f 84 2f ff ff ff    	je     c001020e <Phys::physicalMemorySetup(unsigned int)+0x81>
c00102df:	83 fd 01             	cmp    ebp,0x1
c00102e2:	75 90                	jne    c0010274 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00102e4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00102e8:	31 d2                	xor    edx,edx
c00102ea:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00102ee:	89 c8                	mov    eax,ecx
c00102f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102f4:	19 d1                	sbb    ecx,edx
c00102f6:	0f 82 78 ff ff ff    	jb     c0010274 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00102fc:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0010301:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0010305:	b9 00 00 00 00       	mov    ecx,0x0
c001030a:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c001030e:	0f 83 60 ff ff ff    	jae    c0010274 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010314:	39 c6                	cmp    esi,eax
c0010316:	19 d7                	sbb    edi,edx
c0010318:	0f 83 ff 00 00 00    	jae    c001041d <Phys::physicalMemorySetup(unsigned int)+0x290>
c001031e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010322:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010326:	29 c7                	sub    edi,eax
c0010328:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001032c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010330:	19 d5                	sbb    ebp,edx
c0010332:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001033a:	e9 de 00 00 00       	jmp    c001041d <Phys::physicalMemorySetup(unsigned int)+0x290>
c001033f:	83 ec 0c             	sub    esp,0xc
c0010342:	68 07 43 02 c0       	push   0xc0024307
c0010347:	e8 b6 fa ff ff       	call   c000fe02 <KePanic(char const*)>
c001034c:	83 c4 10             	add    esp,0x10
c001034f:	83 ec 08             	sub    esp,0x8
c0010352:	bb 60 00 00 00       	mov    ebx,0x60
c0010357:	6a 00                	push   0x0
c0010359:	6a 06                	push   0x6
c001035b:	e8 d7 fb ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c0010360:	58                   	pop    eax
c0010361:	5a                   	pop    edx
c0010362:	6a 00                	push   0x0
c0010364:	6a 07                	push   0x7
c0010366:	e8 cc fb ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c001036b:	8b 0d 3c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e13c
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	83 c1 02             	add    ecx,0x2
c0010377:	89 0d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ecx
c001037d:	83 ec 08             	sub    esp,0x8
c0010380:	6a 00                	push   0x0
c0010382:	53                   	push   ebx
c0010383:	83 c3 01             	add    ebx,0x1
c0010386:	e8 ac fb ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c001038b:	83 c4 10             	add    esp,0x10
c001038e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0010394:	75 e7                	jne    c001037d <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0010396:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c001039b:	bb 40 01 00 00       	mov    ebx,0x140
c00103a0:	83 c0 20             	add    eax,0x20
c00103a3:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00103a8:	eb 26                	jmp    c00103d0 <Phys::physicalMemorySetup(unsigned int)+0x243>
c00103aa:	83 ec 08             	sub    esp,0x8
c00103ad:	6a 00                	push   0x0
c00103af:	53                   	push   ebx
c00103b0:	83 c3 01             	add    ebx,0x1
c00103b3:	e8 7f fb ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c00103b8:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	83 c0 01             	add    eax,0x1
c00103c3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00103c9:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00103ce:	74 07                	je     c00103d7 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00103d0:	3d ff 03 00 00       	cmp    eax,0x3ff
c00103d5:	7e d3                	jle    c00103aa <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00103d7:	bb d0 01 00 00       	mov    ebx,0x1d0
c00103dc:	3d ff 07 00 00       	cmp    eax,0x7ff
c00103e1:	7f 26                	jg     c0010409 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00103e3:	83 ec 08             	sub    esp,0x8
c00103e6:	6a 00                	push   0x0
c00103e8:	53                   	push   ebx
c00103e9:	83 c3 01             	add    ebx,0x1
c00103ec:	e8 46 fb ff ff       	call   c000ff37 <Phys::setPageState(unsigned long, bool)>
c00103f1:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c00103f6:	83 c4 10             	add    esp,0x10
c00103f9:	83 c0 01             	add    eax,0x1
c00103fc:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0010402:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c0010407:	75 d3                	jne    c00103dc <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0010409:	83 c4 3c             	add    esp,0x3c
c001040c:	5b                   	pop    ebx
c001040d:	5e                   	pop    esi
c001040e:	5f                   	pop    edi
c001040f:	5d                   	pop    ebp
c0010410:	c3                   	ret    
c0010411:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010415:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c001041d:	83 ec 04             	sub    esp,0x4
c0010420:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010424:	56                   	push   esi
c0010425:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010429:	57                   	push   edi
c001042a:	68 b0 42 02 c0       	push   0xc00242b0
c001042f:	e8 32 6b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010434:	5d                   	pop    ebp
c0010435:	58                   	pop    eax
c0010436:	56                   	push   esi
c0010437:	57                   	push   edi
c0010438:	e8 18 fd ff ff       	call   c0010155 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001043d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010441:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010445:	83 c4 0c             	add    esp,0xc
c0010448:	8b 35 3c e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e13c
c001044e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010452:	01 f0                	add    eax,esi
c0010454:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c0010459:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010460:	52                   	push   edx
c0010461:	50                   	push   eax
c0010462:	68 15 43 02 c0       	push   0xc0024315
c0010467:	e8 fa 6a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001046c:	83 c4 10             	add    esp,0x10
c001046f:	e9 00 fe ff ff       	jmp    c0010274 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c0010474 <Pipe::isAtty()>:
c0010474:	31 c0                	xor    eax,eax
c0010476:	c3                   	ret    
c0010477:	90                   	nop

c0010478 <Pipe::~Pipe()>:
c0010478:	83 ec 0c             	sub    esp,0xc
c001047b:	ba 74 43 02 c0       	mov    edx,0xc0024374
c0010480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010484:	89 10                	mov    DWORD PTR [eax],edx
c0010486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048a:	83 ec 0c             	sub    esp,0xc
c001048d:	50                   	push   eax
c001048e:	e8 f7 2c 00 00       	call   c001318a <UnixFile::~UnixFile()>
c0010493:	83 c4 10             	add    esp,0x10
c0010496:	90                   	nop
c0010497:	83 c4 0c             	add    esp,0xc
c001049a:	c3                   	ret    
c001049b:	90                   	nop

c001049c <Pipe::~Pipe()>:
c001049c:	83 ec 0c             	sub    esp,0xc
c001049f:	83 ec 0c             	sub    esp,0xc
c00104a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a6:	e8 cd ff ff ff       	call   c0010478 <Pipe::~Pipe()>
c00104ab:	83 c4 10             	add    esp,0x10
c00104ae:	83 ec 08             	sub    esp,0x8
c00104b1:	6a 20                	push   0x20
c00104b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104b7:	e8 39 ce ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00104bc:	83 c4 10             	add    esp,0x10
c00104bf:	83 c4 0c             	add    esp,0xc
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <Pipe::write(unsigned long long, void*, int*)>:
c00104c4:	55                   	push   ebp
c00104c5:	57                   	push   edi
c00104c6:	56                   	push   esi
c00104c7:	53                   	push   ebx
c00104c8:	83 ec 1c             	sub    esp,0x1c
c00104cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104cf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00104d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00104d7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00104da:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104de:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00104e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00104e4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00104e8:	89 d8                	mov    eax,ebx
c00104ea:	89 d6                	mov    esi,edx
c00104ec:	89 d7                	mov    edi,edx
c00104ee:	c1 ff 1f             	sar    edi,0x1f
c00104f1:	03 34 24             	add    esi,DWORD PTR [esp]
c00104f4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00104f8:	c1 f8 1f             	sar    eax,0x1f
c00104fb:	39 f3                	cmp    ebx,esi
c00104fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010505:	19 f8                	sbb    eax,edi
c0010507:	b8 01 00 00 00       	mov    eax,0x1
c001050c:	72 72                	jb     c0010580 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c001050e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010511:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010515:	01 d0                	add    eax,edx
c0010517:	99                   	cdq    
c0010518:	f7 fb                	idiv   ebx
c001051a:	89 d8                	mov    eax,ebx
c001051c:	29 d0                	sub    eax,edx
c001051e:	89 d6                	mov    esi,edx
c0010520:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010523:	89 c3                	mov    ebx,eax
c0010525:	c1 fb 1f             	sar    ebx,0x1f
c0010528:	39 c2                	cmp    edx,eax
c001052a:	19 df                	sbb    edi,ebx
c001052c:	bb 00 00 00 00       	mov    ebx,0x0
c0010531:	72 04                	jb     c0010537 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0010533:	89 d3                	mov    ebx,edx
c0010535:	29 c3                	sub    ebx,eax
c0010537:	89 d0                	mov    eax,edx
c0010539:	29 d8                	sub    eax,ebx
c001053b:	74 0d                	je     c001054a <Pipe::write(unsigned long long, void*, int*)+0x86>
c001053d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010540:	89 c1                	mov    ecx,eax
c0010542:	01 f7                	add    edi,esi
c0010544:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010548:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001054a:	85 db                	test   ebx,ebx
c001054c:	74 0d                	je     c001055b <Pipe::write(unsigned long long, void*, int*)+0x97>
c001054e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010552:	89 d9                	mov    ecx,ebx
c0010554:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010557:	89 c6                	mov    esi,eax
c0010559:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001055b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001055e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010563:	75 10                	jne    c0010575 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010565:	83 ec 0c             	sub    esp,0xc
c0010568:	68 31 43 02 c0       	push   0xc0024331
c001056d:	e8 90 f8 ff ff       	call   c000fe02 <KePanic(char const*)>
c0010572:	83 c4 10             	add    esp,0x10
c0010575:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010579:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001057c:	89 08                	mov    DWORD PTR [eax],ecx
c001057e:	31 c0                	xor    eax,eax
c0010580:	83 c4 1c             	add    esp,0x1c
c0010583:	5b                   	pop    ebx
c0010584:	5e                   	pop    esi
c0010585:	5f                   	pop    edi
c0010586:	5d                   	pop    ebp
c0010587:	c3                   	ret    

c0010588 <Pipe::read(unsigned long long, void*, int*)>:
c0010588:	55                   	push   ebp
c0010589:	57                   	push   edi
c001058a:	56                   	push   esi
c001058b:	53                   	push   ebx
c001058c:	83 ec 1c             	sub    esp,0x1c
c001058f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010593:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010597:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001059b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001059e:	89 c8                	mov    eax,ecx
c00105a0:	99                   	cdq    
c00105a1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00105a5:	74 27                	je     c00105ce <Pipe::read(unsigned long long, void*, int*)+0x46>
c00105a7:	39 f9                	cmp    ecx,edi
c00105a9:	89 d1                	mov    ecx,edx
c00105ab:	19 f1                	sbb    ecx,esi
c00105ad:	73 1f                	jae    c00105ce <Pipe::read(unsigned long long, void*, int*)+0x46>
c00105af:	fa                   	cli    
c00105b0:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00105b6:	e8 85 69 00 00       	call   c0016f40 <schedule()>
c00105bb:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00105c2:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00105c9:	75 d0                	jne    c001059b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00105cb:	fb                   	sti    
c00105cc:	eb cd                	jmp    c001059b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00105ce:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00105d2:	39 f8                	cmp    eax,edi
c00105d4:	89 d1                	mov    ecx,edx
c00105d6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00105da:	19 f1                	sbb    ecx,esi
c00105dc:	73 08                	jae    c00105e6 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c00105de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105e6:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00105e9:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00105ec:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00105f0:	29 f7                	sub    edi,esi
c00105f2:	89 f8                	mov    eax,edi
c00105f4:	99                   	cdq    
c00105f5:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00105f9:	89 d0                	mov    eax,edx
c00105fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105ff:	19 c2                	sbb    edx,eax
c0010601:	89 f8                	mov    eax,edi
c0010603:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010608:	89 ea                	mov    edx,ebp
c001060a:	29 c2                	sub    edx,eax
c001060c:	85 c0                	test   eax,eax
c001060e:	74 0b                	je     c001061b <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010610:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010613:	89 c1                	mov    ecx,eax
c0010615:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010619:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001061b:	85 d2                	test   edx,edx
c001061d:	74 0d                	je     c001062c <Pipe::read(unsigned long long, void*, int*)+0xa4>
c001061f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010623:	89 d1                	mov    ecx,edx
c0010625:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010628:	89 c7                	mov    edi,eax
c001062a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001062c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001062f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010632:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010635:	99                   	cdq    
c0010636:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001063a:	89 f7                	mov    edi,esi
c001063c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010640:	c1 ff 1f             	sar    edi,0x1f
c0010643:	57                   	push   edi
c0010644:	56                   	push   esi
c0010645:	52                   	push   edx
c0010646:	50                   	push   eax
c0010647:	e8 68 15 01 00       	call   c0021bb4 <__umoddi3>
c001064c:	83 c4 10             	add    esp,0x10
c001064f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010654:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010657:	75 10                	jne    c0010669 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c0010659:	83 ec 0c             	sub    esp,0xc
c001065c:	68 4e 43 02 c0       	push   0xc002434e
c0010661:	e8 9c f7 ff ff       	call   c000fe02 <KePanic(char const*)>
c0010666:	83 c4 10             	add    esp,0x10
c0010669:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001066d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010671:	89 10                	mov    DWORD PTR [eax],edx
c0010673:	83 c4 1c             	add    esp,0x1c
c0010676:	31 c0                	xor    eax,eax
c0010678:	5b                   	pop    ebx
c0010679:	5e                   	pop    esi
c001067a:	5f                   	pop    edi
c001067b:	5d                   	pop    ebp
c001067c:	c3                   	ret    
c001067d:	90                   	nop

c001067e <Pipe::Pipe(int)>:
c001067e:	83 ec 0c             	sub    esp,0xc
c0010681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010685:	83 ec 08             	sub    esp,0x8
c0010688:	6a 00                	push   0x0
c001068a:	50                   	push   eax
c001068b:	e8 14 29 00 00       	call   c0012fa4 <UnixFile::UnixFile(int)>
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	ba 74 43 02 c0       	mov    edx,0xc0024374
c0010698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069c:	89 10                	mov    DWORD PTR [eax],edx
c001069e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00106a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00106a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00106b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00106bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106c3:	83 ec 0c             	sub    esp,0xc
c00106c6:	50                   	push   eax
c00106c7:	e8 e0 f2 ff ff       	call   c000f9ac <malloc>
c00106cc:	83 c4 10             	add    esp,0x10
c00106cf:	89 c2                	mov    edx,eax
c00106d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00106d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00106e0:	90                   	nop
c00106e1:	83 c4 0c             	add    esp,0xc
c00106e4:	c3                   	ret    

c00106e5 <KePowerThread(void*)>:
c00106e5:	83 ec 0c             	sub    esp,0xc
c00106e8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00106ef:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00106f6:	75 01                	jne    c00106f9 <KePowerThread(void*)+0x14>
c00106f8:	fb                   	sti    
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	6a 00                	push   0x0
c00106fd:	6a 0a                	push   0xa
c00106ff:	c6 05 6c e1 02 c0 00 	mov    BYTE PTR ds:0xc002e16c,0x0
c0010706:	e8 41 6a 00 00       	call   c001714c <sleep(unsigned long long)>
c001070b:	83 c4 10             	add    esp,0x10
c001070e:	83 05 a4 e1 02 c0 0a 	add    DWORD PTR ds:0xc002e1a4,0xa
c0010715:	eb e2                	jmp    c00106f9 <KePowerThread(void*)+0x14>

c0010717 <KeChangePowerSettings(PowerSettings)>:
c0010717:	57                   	push   edi
c0010718:	b9 09 00 00 00       	mov    ecx,0x9
c001071d:	56                   	push   esi
c001071e:	bf 80 e1 02 c0       	mov    edi,0xc002e180
c0010723:	fc                   	cld    
c0010724:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010728:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001072a:	5e                   	pop    esi
c001072b:	5f                   	pop    edi
c001072c:	c3                   	ret    

c001072d <KeUserIOReceived()>:
c001072d:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c0010737:	c3                   	ret    

c0010738 <KeSetupPowerManager()>:
c0010738:	83 ec 0c             	sub    esp,0xc
c001073b:	68 f0 00 00 00       	push   0xf0
c0010740:	6a 00                	push   0x0
c0010742:	68 e5 06 01 c0       	push   0xc00106e5
c0010747:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001074d:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c0010757:	c6 05 6c e1 02 c0 00 	mov    BYTE PTR ds:0xc002e16c,0x0
c001075e:	e8 35 65 00 00       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c0010763:	c7 05 80 e1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002e180,0x2
c001076d:	c7 05 84 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e184,0x1
c0010777:	c7 05 88 e1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002e188,0x3
c0010781:	c7 05 8c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e18c,0x0
c001078b:	c7 05 98 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e198,0x0
c0010795:	c7 05 90 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e190,0x0
c001079f:	c7 05 9c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e19c,0x0
c00107a9:	c7 05 94 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x3c
c00107b3:	c7 05 a0 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e1a0,0x3c
c00107bd:	83 c4 1c             	add    esp,0x1c
c00107c0:	c3                   	ret    

c00107c1 <KePrepareShutdown()>:
c00107c1:	83 ec 0c             	sub    esp,0xc
c00107c4:	e8 bc c9 ff ff       	call   c000d185 <KeExecuteAtexit()>
c00107c9:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c00107ce:	83 ec 0c             	sub    esp,0xc
c00107d1:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00107d7:	e8 82 94 ff ff       	call   c0009c5e <Device::closeAll()>
c00107dc:	83 c4 1c             	add    esp,0x1c
c00107df:	c3                   	ret    

c00107e0 <KeRegisterShutdownHandler(void (*)())>:
c00107e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e4:	a3 68 e1 02 c0       	mov    ds:0xc002e168,eax
c00107e9:	c3                   	ret    

c00107ea <KeRegisterRestartHandler(void (*)())>:
c00107ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ee:	a3 64 e1 02 c0       	mov    ds:0xc002e164,eax
c00107f3:	c3                   	ret    

c00107f4 <KeRegisterSleepHandler(void (*)())>:
c00107f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f8:	a3 60 e1 02 c0       	mov    ds:0xc002e160,eax
c00107fd:	c3                   	ret    

c00107fe <KeShutdown()>:
c00107fe:	83 ec 0c             	sub    esp,0xc
c0010801:	e8 bb ff ff ff       	call   c00107c1 <KePrepareShutdown()>
c0010806:	a1 68 e1 02 c0       	mov    eax,ds:0xc002e168
c001080b:	85 c0                	test   eax,eax
c001080d:	74 04                	je     c0010813 <KeShutdown()+0x15>
c001080f:	ff d0                	call   eax
c0010811:	eb 10                	jmp    c0010823 <KeShutdown()+0x25>
c0010813:	83 ec 0c             	sub    esp,0xc
c0010816:	68 88 43 02 c0       	push   0xc0024388
c001081b:	e8 e2 f5 ff ff       	call   c000fe02 <KePanic(char const*)>
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	83 ec 0c             	sub    esp,0xc
c0010826:	68 a9 43 02 c0       	push   0xc00243a9
c001082b:	e8 d2 f5 ff ff       	call   c000fe02 <KePanic(char const*)>
c0010830:	83 c4 1c             	add    esp,0x1c
c0010833:	c3                   	ret    

c0010834 <KeSleep()>:
c0010834:	a1 60 e1 02 c0       	mov    eax,ds:0xc002e160
c0010839:	85 c0                	test   eax,eax
c001083b:	74 02                	je     c001083f <KeSleep()+0xb>
c001083d:	ff e0                	jmp    eax
c001083f:	c3                   	ret    

c0010840 <KeHandlePowerButton()>:
c0010840:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c0010845:	83 f8 02             	cmp    eax,0x2
c0010848:	75 02                	jne    c001084c <KeHandlePowerButton()+0xc>
c001084a:	eb b2                	jmp    c00107fe <KeShutdown()>
c001084c:	48                   	dec    eax
c001084d:	75 02                	jne    c0010851 <KeHandlePowerButton()+0x11>
c001084f:	eb e3                	jmp    c0010834 <KeSleep()>
c0010851:	c3                   	ret    

c0010852 <KeHandleSleepButton()>:
c0010852:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c0010857:	83 f8 02             	cmp    eax,0x2
c001085a:	75 02                	jne    c001085e <KeHandleSleepButton()+0xc>
c001085c:	eb a0                	jmp    c00107fe <KeShutdown()>
c001085e:	48                   	dec    eax
c001085f:	75 02                	jne    c0010863 <KeHandleSleepButton()+0x11>
c0010861:	eb d1                	jmp    c0010834 <KeSleep()>
c0010863:	c3                   	ret    

c0010864 <KeRestart()>:
c0010864:	83 ec 0c             	sub    esp,0xc
c0010867:	e8 55 ff ff ff       	call   c00107c1 <KePrepareShutdown()>
c001086c:	a1 64 e1 02 c0       	mov    eax,ds:0xc002e164
c0010871:	85 c0                	test   eax,eax
c0010873:	74 02                	je     c0010877 <KeRestart()+0x13>
c0010875:	ff d0                	call   eax
c0010877:	83 ec 0c             	sub    esp,0xc
c001087a:	68 cd 43 02 c0       	push   0xc00243cd
c001087f:	e8 7e f5 ff ff       	call   c000fe02 <KePanic(char const*)>
c0010884:	83 c4 1c             	add    esp,0x1c
c0010887:	c3                   	ret    

c0010888 <KeRand()>:
c0010888:	69 05 a8 e1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002e1a8,0x2875
c0010892:	69 0d ac e1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002e1ac,0xa2e7b175
c001089c:	53                   	push   ebx
c001089d:	01 c1                	add    ecx,eax
c001089f:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00108a4:	f7 25 a8 e1 02 c0    	mul    DWORD PTR ds:0xc002e1a8
c00108aa:	01 ca                	add    edx,ecx
c00108ac:	05 ef 04 b5 00       	add    eax,0xb504ef
c00108b1:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c00108b6:	83 d2 00             	adc    edx,0x0
c00108b9:	0f b7 da             	movzx  ebx,dx
c00108bc:	89 1d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebx
c00108c2:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00108c6:	5b                   	pop    ebx
c00108c7:	c3                   	ret    

c00108c8 <KeSeedRand(unsigned int)>:
c00108c8:	53                   	push   ebx
c00108c9:	83 ec 08             	sub    esp,0x8
c00108cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108d0:	e8 40 9f 00 00       	call   c001a815 <HalGetRand()>
c00108d5:	c7 05 ac e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1ac,0x0
c00108df:	31 d8                	xor    eax,ebx
c00108e1:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c00108e6:	e8 9d ff ff ff       	call   c0010888 <KeRand()>
c00108eb:	83 c4 08             	add    esp,0x8
c00108ee:	5b                   	pop    ebx
c00108ef:	eb 97                	jmp    c0010888 <KeRand()>

c00108f1 <KeInitRand()>:
c00108f1:	83 ec 0c             	sub    esp,0xc
c00108f4:	e8 ea 9c 00 00       	call   c001a5e3 <HalQueryPerformanceCounter()>
c00108f9:	0f 20 da             	mov    edx,cr3
c00108fc:	0f 22 da             	mov    cr3,edx
c00108ff:	0f 20 da             	mov    edx,cr3
c0010902:	0f 22 da             	mov    cr3,edx
c0010905:	0f 20 da             	mov    edx,cr3
c0010908:	0f 22 da             	mov    cr3,edx
c001090b:	0f 20 da             	mov    edx,cr3
c001090e:	0f 22 da             	mov    cr3,edx
c0010911:	83 ec 0c             	sub    esp,0xc
c0010914:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010919:	50                   	push   eax
c001091a:	e8 a9 ff ff ff       	call   c00108c8 <KeSeedRand(unsigned int)>
c001091f:	83 c4 1c             	add    esp,0x1c
c0010922:	c3                   	ret    
c0010923:	90                   	nop

c0010924 <KeResolveCompatibilitySymbol(char*)>:
c0010924:	83 ec 0c             	sub    esp,0xc
c0010927:	83 ec 08             	sub    esp,0x8
c001092a:	68 dc 43 02 c0       	push   0xc00243dc
c001092f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010933:	e8 48 fe fe ff       	call   c0000780 <strcmp>
c0010938:	83 c4 10             	add    esp,0x10
c001093b:	85 c0                	test   eax,eax
c001093d:	0f 94 c0             	sete   al
c0010940:	0f b6 c0             	movzx  eax,al
c0010943:	85 c0                	test   eax,eax
c0010945:	74 0d                	je     c0010954 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010947:	b8 c8 c0 02 c0       	mov    eax,0xc002c0c8
c001094c:	e9 3b 02 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010951:	8d 76 00             	lea    esi,[esi+0x0]
c0010954:	83 ec 08             	sub    esp,0x8
c0010957:	68 e5 43 02 c0       	push   0xc00243e5
c001095c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010960:	e8 1b fe fe ff       	call   c0000780 <strcmp>
c0010965:	83 c4 10             	add    esp,0x10
c0010968:	85 c0                	test   eax,eax
c001096a:	0f 94 c0             	sete   al
c001096d:	0f b6 c0             	movzx  eax,al
c0010970:	85 c0                	test   eax,eax
c0010972:	74 0c                	je     c0010980 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010974:	b8 b4 1a 02 c0       	mov    eax,0xc0021ab4
c0010979:	e9 0e 02 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c001097e:	66 90                	xchg   ax,ax
c0010980:	83 ec 08             	sub    esp,0x8
c0010983:	68 ef 43 02 c0       	push   0xc00243ef
c0010988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001098c:	e8 ef fd fe ff       	call   c0000780 <strcmp>
c0010991:	83 c4 10             	add    esp,0x10
c0010994:	85 c0                	test   eax,eax
c0010996:	0f 94 c0             	sete   al
c0010999:	0f b6 c0             	movzx  eax,al
c001099c:	85 c0                	test   eax,eax
c001099e:	74 0c                	je     c00109ac <KeResolveCompatibilitySymbol(char*)+0x88>
c00109a0:	b8 c8 c0 02 c0       	mov    eax,0xc002c0c8
c00109a5:	e9 e2 01 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c00109aa:	66 90                	xchg   ax,ax
c00109ac:	83 ec 08             	sub    esp,0x8
c00109af:	68 02 44 02 c0       	push   0xc0024402
c00109b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b8:	e8 c3 fd fe ff       	call   c0000780 <strcmp>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	85 c0                	test   eax,eax
c00109c2:	0f 94 c0             	sete   al
c00109c5:	0f b6 c0             	movzx  eax,al
c00109c8:	85 c0                	test   eax,eax
c00109ca:	74 0c                	je     c00109d8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00109cc:	b8 e8 17 02 c0       	mov    eax,0xc00217e8
c00109d1:	e9 b6 01 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c00109d6:	66 90                	xchg   ax,ax
c00109d8:	83 ec 08             	sub    esp,0x8
c00109db:	68 0b 44 02 c0       	push   0xc002440b
c00109e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109e4:	e8 97 fd fe ff       	call   c0000780 <strcmp>
c00109e9:	83 c4 10             	add    esp,0x10
c00109ec:	85 c0                	test   eax,eax
c00109ee:	0f 94 c0             	sete   al
c00109f1:	0f b6 c0             	movzx  eax,al
c00109f4:	85 c0                	test   eax,eax
c00109f6:	74 0c                	je     c0010a04 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00109f8:	b8 02 fe 00 c0       	mov    eax,0xc000fe02
c00109fd:	e9 8a 01 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a02:	66 90                	xchg   ax,ax
c0010a04:	83 ec 08             	sub    esp,0x8
c0010a07:	68 1e 44 02 c0       	push   0xc002441e
c0010a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a10:	e8 6b fd fe ff       	call   c0000780 <strcmp>
c0010a15:	83 c4 10             	add    esp,0x10
c0010a18:	85 c0                	test   eax,eax
c0010a1a:	0f 94 c0             	sete   al
c0010a1d:	0f b6 c0             	movzx  eax,al
c0010a20:	85 c0                	test   eax,eax
c0010a22:	74 0c                	je     c0010a30 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010a24:	b8 35 d2 00 c0       	mov    eax,0xc000d235
c0010a29:	e9 5e 01 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a2e:	66 90                	xchg   ax,ax
c0010a30:	83 ec 08             	sub    esp,0x8
c0010a33:	68 3b 44 02 c0       	push   0xc002443b
c0010a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3c:	e8 3f fd fe ff       	call   c0000780 <strcmp>
c0010a41:	83 c4 10             	add    esp,0x10
c0010a44:	85 c0                	test   eax,eax
c0010a46:	0f 94 c0             	sete   al
c0010a49:	0f b6 c0             	movzx  eax,al
c0010a4c:	85 c0                	test   eax,eax
c0010a4e:	74 0c                	je     c0010a5c <KeResolveCompatibilitySymbol(char*)+0x138>
c0010a50:	b8 b4 1b 02 c0       	mov    eax,0xc0021bb4
c0010a55:	e9 32 01 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a5a:	66 90                	xchg   ax,ax
c0010a5c:	83 ec 08             	sub    esp,0x8
c0010a5f:	68 45 44 02 c0       	push   0xc0024445
c0010a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a68:	e8 13 fd fe ff       	call   c0000780 <strcmp>
c0010a6d:	83 c4 10             	add    esp,0x10
c0010a70:	85 c0                	test   eax,eax
c0010a72:	0f 94 c0             	sete   al
c0010a75:	0f b6 c0             	movzx  eax,al
c0010a78:	85 c0                	test   eax,eax
c0010a7a:	74 0c                	je     c0010a88 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010a7c:	b8 34 19 02 c0       	mov    eax,0xc0021934
c0010a81:	e9 06 01 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a86:	66 90                	xchg   ax,ax
c0010a88:	83 ec 08             	sub    esp,0x8
c0010a8b:	68 4e 44 02 c0       	push   0xc002444e
c0010a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a94:	e8 e7 fc fe ff       	call   c0000780 <strcmp>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	85 c0                	test   eax,eax
c0010a9e:	0f 94 c0             	sete   al
c0010aa1:	0f b6 c0             	movzx  eax,al
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	74 0c                	je     c0010ab4 <KeResolveCompatibilitySymbol(char*)+0x190>
c0010aa8:	b8 cc c0 02 c0       	mov    eax,0xc002c0cc
c0010aad:	e9 da 00 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010ab2:	66 90                	xchg   ax,ax
c0010ab4:	83 ec 08             	sub    esp,0x8
c0010ab7:	68 66 44 02 c0       	push   0xc0024466
c0010abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac0:	e8 bb fc fe ff       	call   c0000780 <strcmp>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	85 c0                	test   eax,eax
c0010aca:	0f 94 c0             	sete   al
c0010acd:	0f b6 c0             	movzx  eax,al
c0010ad0:	85 c0                	test   eax,eax
c0010ad2:	74 0c                	je     c0010ae0 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c0010ad4:	b8 cc c0 02 c0       	mov    eax,0xc002c0cc
c0010ad9:	e9 ae 00 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010ade:	66 90                	xchg   ax,ax
c0010ae0:	83 ec 08             	sub    esp,0x8
c0010ae3:	68 73 44 02 c0       	push   0xc0024473
c0010ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aec:	e8 8f fc fe ff       	call   c0000780 <strcmp>
c0010af1:	83 c4 10             	add    esp,0x10
c0010af4:	85 c0                	test   eax,eax
c0010af6:	0f 94 c0             	sete   al
c0010af9:	0f b6 c0             	movzx  eax,al
c0010afc:	85 c0                	test   eax,eax
c0010afe:	74 0c                	je     c0010b0c <KeResolveCompatibilitySymbol(char*)+0x1e8>
c0010b00:	b8 cd c0 02 c0       	mov    eax,0xc002c0cd
c0010b05:	e9 82 00 00 00       	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b0a:	66 90                	xchg   ax,ax
c0010b0c:	83 ec 08             	sub    esp,0x8
c0010b0f:	68 80 44 02 c0       	push   0xc0024480
c0010b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b18:	e8 63 fc fe ff       	call   c0000780 <strcmp>
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	85 c0                	test   eax,eax
c0010b22:	0f 94 c0             	sete   al
c0010b25:	0f b6 c0             	movzx  eax,al
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	74 08                	je     c0010b34 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010b2c:	b8 cc c0 02 c0       	mov    eax,0xc002c0cc
c0010b31:	eb 59                	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b33:	90                   	nop
c0010b34:	83 ec 08             	sub    esp,0x8
c0010b37:	68 91 44 02 c0       	push   0xc0024491
c0010b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b40:	e8 3b fc fe ff       	call   c0000780 <strcmp>
c0010b45:	83 c4 10             	add    esp,0x10
c0010b48:	85 c0                	test   eax,eax
c0010b4a:	0f 94 c0             	sete   al
c0010b4d:	0f b6 c0             	movzx  eax,al
c0010b50:	85 c0                	test   eax,eax
c0010b52:	74 08                	je     c0010b5c <KeResolveCompatibilitySymbol(char*)+0x238>
c0010b54:	b8 cd c0 02 c0       	mov    eax,0xc002c0cd
c0010b59:	eb 31                	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b5b:	90                   	nop
c0010b5c:	83 ec 08             	sub    esp,0x8
c0010b5f:	68 a2 44 02 c0       	push   0xc00244a2
c0010b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b68:	e8 13 fc fe ff       	call   c0000780 <strcmp>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	85 c0                	test   eax,eax
c0010b72:	0f 94 c0             	sete   al
c0010b75:	0f b6 c0             	movzx  eax,al
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	74 08                	je     c0010b84 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010b7c:	b8 34 77 01 c0       	mov    eax,0xc0017734
c0010b81:	eb 09                	jmp    c0010b8c <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b83:	90                   	nop
c0010b84:	b8 00 00 00 00       	mov    eax,0x0
c0010b89:	8d 76 00             	lea    esi,[esi+0x0]
c0010b8c:	83 c4 0c             	add    esp,0xc
c0010b8f:	c3                   	ret    

c0010b90 <Semaphore::Semaphore(int)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 10                	mov    DWORD PTR [eax],edx
c0010b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b9e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010bbb:	90                   	nop
c0010bbc:	c3                   	ret    
c0010bbd:	90                   	nop
c0010bbe:	66 90                	xchg   ax,ax

c0010bc0 <Semaphore::tryAcquire()>:
c0010bc0:	83 ec 0c             	sub    esp,0xc
c0010bc3:	fa                   	cli    
c0010bc4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010bc9:	83 c0 01             	add    eax,0x1
c0010bcc:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010bd1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010bd6:	83 c0 01             	add    eax,0x1
c0010bd9:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010beb:	39 c2                	cmp    edx,eax
c0010bed:	7d 59                	jge    c0010c48 <Semaphore::tryAcquire()+0x88>
c0010bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bf6:	8d 50 01             	lea    edx,[eax+0x1]
c0010bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bfd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c00:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c05:	83 e8 01             	sub    eax,0x1
c0010c08:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010c0d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c12:	85 c0                	test   eax,eax
c0010c14:	75 1a                	jne    c0010c30 <Semaphore::tryAcquire()+0x70>
c0010c16:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010c1b:	85 c0                	test   eax,eax
c0010c1d:	74 11                	je     c0010c30 <Semaphore::tryAcquire()+0x70>
c0010c1f:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010c29:	e8 12 63 00 00       	call   c0016f40 <schedule()>
c0010c2e:	66 90                	xchg   ax,ax
c0010c30:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010c38:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c3d:	85 c0                	test   eax,eax
c0010c3f:	75 03                	jne    c0010c44 <Semaphore::tryAcquire()+0x84>
c0010c41:	fb                   	sti    
c0010c42:	66 90                	xchg   ax,ax
c0010c44:	b0 01                	mov    al,0x1
c0010c46:	eb 48                	jmp    c0010c90 <Semaphore::tryAcquire()+0xd0>
c0010c48:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c4d:	83 e8 01             	sub    eax,0x1
c0010c50:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010c55:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c5a:	85 c0                	test   eax,eax
c0010c5c:	75 1a                	jne    c0010c78 <Semaphore::tryAcquire()+0xb8>
c0010c5e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010c63:	85 c0                	test   eax,eax
c0010c65:	74 11                	je     c0010c78 <Semaphore::tryAcquire()+0xb8>
c0010c67:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010c71:	e8 ca 62 00 00       	call   c0016f40 <schedule()>
c0010c76:	66 90                	xchg   ax,ax
c0010c78:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010c80:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c85:	85 c0                	test   eax,eax
c0010c87:	75 03                	jne    c0010c8c <Semaphore::tryAcquire()+0xcc>
c0010c89:	fb                   	sti    
c0010c8a:	66 90                	xchg   ax,ax
c0010c8c:	b0 00                	mov    al,0x0
c0010c8e:	66 90                	xchg   ax,ax
c0010c90:	83 c4 0c             	add    esp,0xc
c0010c93:	c3                   	ret    

c0010c94 <Semaphore::assertLocked(char const*)>:
c0010c94:	83 ec 0c             	sub    esp,0xc
c0010c97:	fa                   	cli    
c0010c98:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c9d:	83 c0 01             	add    eax,0x1
c0010ca0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010ca5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010caa:	83 c0 01             	add    eax,0x1
c0010cad:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cbf:	39 c2                	cmp    edx,eax
c0010cc1:	7d 11                	jge    c0010cd4 <Semaphore::assertLocked(char const*)+0x40>
c0010cc3:	83 ec 0c             	sub    esp,0xc
c0010cc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010cca:	e8 33 f1 ff ff       	call   c000fe02 <KePanic(char const*)>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	66 90                	xchg   ax,ax
c0010cd4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cd9:	83 e8 01             	sub    eax,0x1
c0010cdc:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ce1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ce6:	85 c0                	test   eax,eax
c0010ce8:	75 1a                	jne    c0010d04 <Semaphore::assertLocked(char const*)+0x70>
c0010cea:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010cef:	85 c0                	test   eax,eax
c0010cf1:	74 11                	je     c0010d04 <Semaphore::assertLocked(char const*)+0x70>
c0010cf3:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010cfd:	e8 3e 62 00 00       	call   c0016f40 <schedule()>
c0010d02:	66 90                	xchg   ax,ax
c0010d04:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010d0c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d11:	85 c0                	test   eax,eax
c0010d13:	75 03                	jne    c0010d18 <Semaphore::assertLocked(char const*)+0x84>
c0010d15:	fb                   	sti    
c0010d16:	66 90                	xchg   ax,ax
c0010d18:	90                   	nop
c0010d19:	83 c4 0c             	add    esp,0xc
c0010d1c:	c3                   	ret    
c0010d1d:	90                   	nop
c0010d1e:	66 90                	xchg   ax,ax

c0010d20 <Semaphore::acquire(int)>:
c0010d20:	83 ec 1c             	sub    esp,0x1c
c0010d23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010d28:	0f 84 ae 00 00 00    	je     c0010ddc <Semaphore::acquire(int)+0xbc>
c0010d2e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010d3b:	90                   	nop
c0010d3c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010d41:	85 c0                	test   eax,eax
c0010d43:	0f 84 87 00 00 00    	je     c0010dd0 <Semaphore::acquire(int)+0xb0>
c0010d49:	83 ec 0c             	sub    esp,0xc
c0010d4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d50:	e8 6b fe ff ff       	call   c0010bc0 <Semaphore::tryAcquire()>
c0010d55:	83 c4 10             	add    esp,0x10
c0010d58:	83 f0 01             	xor    eax,0x1
c0010d5b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010d5f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010d63:	83 f0 01             	xor    eax,0x1
c0010d66:	0f b6 c0             	movzx  eax,al
c0010d69:	85 c0                	test   eax,eax
c0010d6b:	75 5f                	jne    c0010dcc <Semaphore::acquire(int)+0xac>
c0010d6d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010d72:	7f 34                	jg     c0010da8 <Semaphore::acquire(int)+0x88>
c0010d74:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010d78:	89 d0                	mov    eax,edx
c0010d7a:	c1 e0 02             	shl    eax,0x2
c0010d7d:	01 d0                	add    eax,edx
c0010d7f:	d1 e0                	shl    eax,1
c0010d81:	89 c2                	mov    edx,eax
c0010d83:	c1 fa 1f             	sar    edx,0x1f
c0010d86:	83 ec 08             	sub    esp,0x8
c0010d89:	52                   	push   edx
c0010d8a:	50                   	push   eax
c0010d8b:	e8 a4 63 00 00       	call   c0017134 <milliTenthSleep(unsigned long long)>
c0010d90:	83 c4 10             	add    esp,0x10
c0010d93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d97:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010d9b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010da3:	eb 97                	jmp    c0010d3c <Semaphore::acquire(int)+0x1c>
c0010da5:	8d 76 00             	lea    esi,[esi+0x0]
c0010da8:	83 ec 08             	sub    esp,0x8
c0010dab:	6a 00                	push   0x0
c0010dad:	68 90 01 00 00       	push   0x190
c0010db2:	e8 7d 63 00 00       	call   c0017134 <milliTenthSleep(unsigned long long)>
c0010db7:	83 c4 10             	add    esp,0x10
c0010dba:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010dbf:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010dc4:	e9 73 ff ff ff       	jmp    c0010d3c <Semaphore::acquire(int)+0x1c>
c0010dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0010dcc:	90                   	nop
c0010dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0010dd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010dd4:	e9 fb 00 00 00       	jmp    c0010ed4 <Semaphore::acquire(int)+0x1b4>
c0010dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0010ddc:	fa                   	cli    
c0010ddd:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010de2:	83 c0 01             	add    eax,0x1
c0010de5:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010dea:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010def:	83 c0 01             	add    eax,0x1
c0010df2:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dfb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e04:	39 c2                	cmp    edx,eax
c0010e06:	7d 14                	jge    c0010e1c <Semaphore::acquire(int)+0xfc>
c0010e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e0f:	8d 50 01             	lea    edx,[eax+0x1]
c0010e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e16:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e19:	eb 6d                	jmp    c0010e88 <Semaphore::acquire(int)+0x168>
c0010e1b:	90                   	nop
c0010e1c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010e21:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e23:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e31:	85 c0                	test   eax,eax
c0010e33:	75 13                	jne    c0010e48 <Semaphore::acquire(int)+0x128>
c0010e35:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010e3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e43:	eb 17                	jmp    c0010e5c <Semaphore::acquire(int)+0x13c>
c0010e45:	8d 76 00             	lea    esi,[esi+0x0]
c0010e48:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010e54:	8b 12                	mov    edx,DWORD PTR [edx]
c0010e56:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010e59:	8d 76 00             	lea    esi,[esi+0x0]
c0010e5c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010e61:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e67:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e6a:	83 ec 0c             	sub    esp,0xc
c0010e6d:	68 b8 44 02 c0       	push   0xc00244b8
c0010e72:	e8 ef 60 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	83 ec 0c             	sub    esp,0xc
c0010e7d:	6a 05                	push   0x5
c0010e7f:	e8 7c 61 00 00       	call   c0017000 <blockTask(TaskState)>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	90                   	nop
c0010e88:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e8d:	83 e8 01             	sub    eax,0x1
c0010e90:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010e95:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e9a:	85 c0                	test   eax,eax
c0010e9c:	75 1a                	jne    c0010eb8 <Semaphore::acquire(int)+0x198>
c0010e9e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010ea3:	85 c0                	test   eax,eax
c0010ea5:	74 11                	je     c0010eb8 <Semaphore::acquire(int)+0x198>
c0010ea7:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010eb1:	e8 8a 60 00 00       	call   c0016f40 <schedule()>
c0010eb6:	66 90                	xchg   ax,ax
c0010eb8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010ec0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010ec5:	85 c0                	test   eax,eax
c0010ec7:	75 03                	jne    c0010ecc <Semaphore::acquire(int)+0x1ac>
c0010ec9:	fb                   	sti    
c0010eca:	66 90                	xchg   ax,ax
c0010ecc:	b8 00 00 00 00       	mov    eax,0x0
c0010ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ed4:	83 c4 1c             	add    esp,0x1c
c0010ed7:	c3                   	ret    

c0010ed8 <Semaphore::acquire()>:
c0010ed8:	83 ec 0c             	sub    esp,0xc
c0010edb:	83 ec 08             	sub    esp,0x8
c0010ede:	6a 00                	push   0x0
c0010ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee4:	e8 37 fe ff ff       	call   c0010d20 <Semaphore::acquire(int)>
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	90                   	nop
c0010eed:	83 c4 0c             	add    esp,0xc
c0010ef0:	c3                   	ret    
c0010ef1:	90                   	nop
c0010ef2:	66 90                	xchg   ax,ax

c0010ef4 <Semaphore::release()>:
c0010ef4:	83 ec 1c             	sub    esp,0x1c
c0010ef7:	fa                   	cli    
c0010ef8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010efd:	83 c0 01             	add    eax,0x1
c0010f00:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010f05:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f0a:	83 c0 01             	add    eax,0x1
c0010f0d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f19:	85 c0                	test   eax,eax
c0010f1b:	74 2b                	je     c0010f48 <Semaphore::release()+0x54>
c0010f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f2c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f36:	83 ec 0c             	sub    esp,0xc
c0010f39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f3d:	e8 56 63 00 00       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	eb 15                	jmp    c0010f5c <Semaphore::release()+0x68>
c0010f47:	90                   	nop
c0010f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f4f:	8d 50 ff             	lea    edx,[eax-0x1]
c0010f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f59:	8d 76 00             	lea    esi,[esi+0x0]
c0010f5c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f61:	83 e8 01             	sub    eax,0x1
c0010f64:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010f69:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f6e:	85 c0                	test   eax,eax
c0010f70:	75 1a                	jne    c0010f8c <Semaphore::release()+0x98>
c0010f72:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010f77:	85 c0                	test   eax,eax
c0010f79:	74 11                	je     c0010f8c <Semaphore::release()+0x98>
c0010f7b:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010f85:	e8 b6 5f 00 00       	call   c0016f40 <schedule()>
c0010f8a:	66 90                	xchg   ax,ax
c0010f8c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010f94:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010f99:	85 c0                	test   eax,eax
c0010f9b:	75 03                	jne    c0010fa0 <Semaphore::release()+0xac>
c0010f9d:	fb                   	sti    
c0010f9e:	66 90                	xchg   ax,ax
c0010fa0:	90                   	nop
c0010fa1:	83 c4 1c             	add    esp,0x1c
c0010fa4:	c3                   	ret    

c0010fa5 <KiSigKill(int)>:
c0010fa5:	83 ec 0c             	sub    esp,0xc
c0010fa8:	6a 00                	push   0x0
c0010faa:	6a 00                	push   0x0
c0010fac:	6a ff                	push   0xffffffff
c0010fae:	6a 01                	push   0x1
c0010fb0:	e8 9d 60 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010fb5:	83 c4 1c             	add    esp,0x1c
c0010fb8:	c3                   	ret    

c0010fb9 <KiDefaultSignalHandlerIgnore(int)>:
c0010fb9:	c3                   	ret    

c0010fba <KiDefaultSignalHandlerPause(int)>:
c0010fba:	57                   	push   edi
c0010fbb:	b9 07 00 00 00       	mov    ecx,0x7
c0010fc0:	56                   	push   esi
c0010fc1:	be 13 45 02 c0       	mov    esi,0xc0024513
c0010fc6:	83 ec 24             	sub    esp,0x24
c0010fc9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010fcd:	fc                   	cld    
c0010fce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fd0:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010fd4:	50                   	push   eax
c0010fd5:	6a 00                	push   0x0
c0010fd7:	6a 00                	push   0x0
c0010fd9:	6a 27                	push   0x27
c0010fdb:	e8 72 60 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010fe0:	83 c4 34             	add    esp,0x34
c0010fe3:	5e                   	pop    esi
c0010fe4:	5f                   	pop    edi
c0010fe5:	c3                   	ret    

c0010fe6 <KiDefaultSignalHandlerResume(int)>:
c0010fe6:	57                   	push   edi
c0010fe7:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010fec:	56                   	push   esi
c0010fed:	be 2f 45 02 c0       	mov    esi,0xc002452f
c0010ff2:	83 ec 24             	sub    esp,0x24
c0010ff5:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010ff9:	fc                   	cld    
c0010ffa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ffc:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011000:	50                   	push   eax
c0011001:	6a 00                	push   0x0
c0011003:	6a 00                	push   0x0
c0011005:	6a 27                	push   0x27
c0011007:	e8 46 60 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001100c:	83 c4 34             	add    esp,0x34
c001100f:	5e                   	pop    esi
c0011010:	5f                   	pop    edi
c0011011:	c3                   	ret    

c0011012 <KeDeinitSignals(SigHandlerBlock*)>:
c0011012:	e9 a5 e9 ff ff       	jmp    c000f9bc <free>

c0011017 <KeInitSignals()>:
c0011017:	53                   	push   ebx
c0011018:	83 ec 14             	sub    esp,0x14
c001101b:	68 c8 00 00 00       	push   0xc8
c0011020:	e8 87 e9 ff ff       	call   c000f9ac <malloc>
c0011025:	83 c4 0c             	add    esp,0xc
c0011028:	6a 04                	push   0x4
c001102a:	6a 00                	push   0x0
c001102c:	50                   	push   eax
c001102d:	89 c3                	mov    ebx,eax
c001102f:	e8 bc f4 fe ff       	call   c00004f0 <memset>
c0011034:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c001103a:	83 c4 0c             	add    esp,0xc
c001103d:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0011047:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0011051:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011058:	6a 20                	push   0x20
c001105a:	6a 00                	push   0x0
c001105c:	50                   	push   eax
c001105d:	e8 8e f4 fe ff       	call   c00004f0 <memset>
c0011062:	83 c4 0c             	add    esp,0xc
c0011065:	6a 44                	push   0x44
c0011067:	6a 00                	push   0x0
c0011069:	53                   	push   ebx
c001106a:	e8 81 f4 fe ff       	call   c00004f0 <memset>
c001106f:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011075:	83 c4 0c             	add    esp,0xc
c0011078:	6a 11                	push   0x11
c001107a:	6a 00                	push   0x0
c001107c:	50                   	push   eax
c001107d:	e8 6e f4 fe ff       	call   c00004f0 <memset>
c0011082:	83 c4 18             	add    esp,0x18
c0011085:	89 d8                	mov    eax,ebx
c0011087:	5b                   	pop    ebx
c0011088:	c3                   	ret    

c0011089 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011089:	53                   	push   ebx
c001108a:	b8 01 00 00 00       	mov    eax,0x1
c001108f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011093:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011097:	83 f9 10             	cmp    ecx,0x10
c001109a:	7f 21                	jg     c00110bd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001109c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00110a3:	89 03                	mov    DWORD PTR [ebx],eax
c00110a5:	b8 01 00 00 00       	mov    eax,0x1
c00110aa:	d3 e0                	shl    eax,cl
c00110ac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00110b0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00110b3:	31 c0                	xor    eax,eax
c00110b5:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00110bd:	5b                   	pop    ebx
c00110be:	c3                   	ret    

c00110bf <KeRaiseSignal(SigHandlerBlock*, int)>:
c00110bf:	55                   	push   ebp
c00110c0:	57                   	push   edi
c00110c1:	bf 08 00 00 00       	mov    edi,0x8
c00110c6:	56                   	push   esi
c00110c7:	53                   	push   ebx
c00110c8:	83 ec 14             	sub    esp,0x14
c00110cb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00110cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00110d3:	68 4c 45 02 c0       	push   0xc002454c
c00110d8:	e8 89 5e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00110dd:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00110e3:	83 c4 10             	add    esp,0x10
c00110e6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00110ed:	31 c9                	xor    ecx,ecx
c00110ef:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00110f3:	99                   	cdq    
c00110f4:	f7 ff                	idiv   edi
c00110f6:	8d 42 24             	lea    eax,[edx+0x24]
c00110f9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00110fd:	85 f6                	test   esi,esi
c00110ff:	75 1a                	jne    c001111b <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0011101:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011105:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011109:	50                   	push   eax
c001110a:	50                   	push   eax
c001110b:	52                   	push   edx
c001110c:	68 62 45 02 c0       	push   0xc0024562
c0011111:	e8 50 5e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011116:	83 c4 10             	add    esp,0x10
c0011119:	eb 1b                	jmp    c0011136 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c001111b:	41                   	inc    ecx
c001111c:	83 f9 08             	cmp    ecx,0x8
c001111f:	75 ce                	jne    c00110ef <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0011121:	83 ec 0c             	sub    esp,0xc
c0011124:	be 01 00 00 00       	mov    esi,0x1
c0011129:	68 83 45 02 c0       	push   0xc0024583
c001112e:	e8 33 5e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011133:	83 c4 10             	add    esp,0x10
c0011136:	83 c4 0c             	add    esp,0xc
c0011139:	89 f0                	mov    eax,esi
c001113b:	5b                   	pop    ebx
c001113c:	5e                   	pop    esi
c001113d:	5f                   	pop    edi
c001113e:	5d                   	pop    ebp
c001113f:	c3                   	ret    

c0011140 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011140:	55                   	push   ebp
c0011141:	57                   	push   edi
c0011142:	56                   	push   esi
c0011143:	53                   	push   ebx
c0011144:	83 ec 1c             	sub    esp,0x1c
c0011147:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001114b:	85 db                	test   ebx,ebx
c001114d:	0f 84 e0 00 00 00    	je     c0011233 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011153:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001115a:	0f 84 d3 00 00 00    	je     c0011233 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011160:	31 c9                	xor    ecx,ecx
c0011162:	bf 08 00 00 00       	mov    edi,0x8
c0011167:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001116d:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011170:	99                   	cdq    
c0011171:	f7 ff                	idiv   edi
c0011173:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001117a:	85 ed                	test   ebp,ebp
c001117c:	0f 84 d2 00 00 00    	je     c0011254 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0011182:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011188:	89 e9                	mov    ecx,ebp
c001118a:	bf 01 00 00 00       	mov    edi,0x1
c001118f:	d3 e7                	shl    edi,cl
c0011191:	31 c9                	xor    ecx,ecx
c0011193:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011197:	b8 01 00 00 00       	mov    eax,0x1
c001119c:	d3 e0                	shl    eax,cl
c001119e:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c00111a2:	74 0a                	je     c00111ae <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c00111a4:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00111a8:	0f 85 85 00 00 00    	jne    c0011233 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00111ae:	41                   	inc    ecx
c00111af:	83 f9 11             	cmp    ecx,0x11
c00111b2:	75 e3                	jne    c0011197 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00111b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111b8:	46                   	inc    esi
c00111b9:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00111bf:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00111ca:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00111d1:	09 f8                	or     eax,edi
c00111d3:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00111d9:	31 c0                	xor    eax,eax
c00111db:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00111e3:	74 09                	je     c00111ee <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c00111e5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00111ec:	eb 06                	jmp    c00111f4 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c00111ee:	40                   	inc    eax
c00111ef:	83 f8 08             	cmp    eax,0x8
c00111f2:	75 e7                	jne    c00111db <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00111f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00111f8:	83 fd 09             	cmp    ebp,0x9
c00111fb:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00111fe:	89 2a                	mov    DWORD PTR [edx],ebp
c0011200:	75 14                	jne    c0011216 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0011202:	83 ec 0c             	sub    esp,0xc
c0011205:	68 94 45 02 c0       	push   0xc0024594
c001120a:	e8 57 5d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001120f:	b8 a5 0f 01 c0       	mov    eax,0xc0010fa5
c0011214:	eb 39                	jmp    c001124f <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011216:	83 f8 01             	cmp    eax,0x1
c0011219:	75 1c                	jne    c0011237 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c001121b:	83 ec 0c             	sub    esp,0xc
c001121e:	f7 d7                	not    edi
c0011220:	68 9e 45 02 c0       	push   0xc002459e
c0011225:	e8 3c 5d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001122a:	83 c4 10             	add    esp,0x10
c001122d:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011233:	31 c0                	xor    eax,eax
c0011235:	eb 30                	jmp    c0011267 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011237:	85 c0                	test   eax,eax
c0011239:	75 2c                	jne    c0011267 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001123b:	83 ec 0c             	sub    esp,0xc
c001123e:	68 ab 45 02 c0       	push   0xc00245ab
c0011243:	e8 1e 5d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011248:	8b 04 ad a0 68 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9760]
c001124f:	83 c4 10             	add    esp,0x10
c0011252:	eb 13                	jmp    c0011267 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011254:	41                   	inc    ecx
c0011255:	46                   	inc    esi
c0011256:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001125c:	83 f9 08             	cmp    ecx,0x8
c001125f:	0f 85 02 ff ff ff    	jne    c0011167 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011265:	eb cc                	jmp    c0011233 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011267:	83 c4 1c             	add    esp,0x1c
c001126a:	5b                   	pop    ebx
c001126b:	5e                   	pop    esi
c001126c:	5f                   	pop    edi
c001126d:	5d                   	pop    ebp
c001126e:	c3                   	ret    

c001126f <KiCheckSignalZ>:
c001126f:	80 3d cc c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0cc,0x0
c0011276:	74 43                	je     c00112bb <KiCheckSignalZ+0x4c>
c0011278:	83 ec 24             	sub    esp,0x24
c001127b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001127f:	50                   	push   eax
c0011280:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011285:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011288:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001128e:	e8 ad fe ff ff       	call   c0011140 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	31 d2                	xor    edx,edx
c0011298:	85 c0                	test   eax,eax
c001129a:	74 19                	je     c00112b5 <KiCheckSignalZ+0x46>
c001129c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00112a2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00112a5:	89 02                	mov    DWORD PTR [edx],eax
c00112a7:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00112ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112b2:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00112b5:	89 d0                	mov    eax,edx
c00112b7:	83 c4 1c             	add    esp,0x1c
c00112ba:	c3                   	ret    
c00112bb:	31 d2                	xor    edx,edx
c00112bd:	89 d0                	mov    eax,edx
c00112bf:	c3                   	ret    

c00112c0 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00112c0:	56                   	push   esi
c00112c1:	53                   	push   ebx
c00112c2:	bb 01 00 00 00       	mov    ebx,0x1
c00112c7:	52                   	push   edx
c00112c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00112cc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112d0:	d3 e3                	shl    ebx,cl
c00112d2:	83 f9 10             	cmp    ecx,0x10
c00112d5:	7f 08                	jg     c00112df <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00112d7:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00112dd:	75 10                	jne    c00112ef <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00112df:	83 ec 0c             	sub    esp,0xc
c00112e2:	68 ce 45 02 c0       	push   0xc00245ce
c00112e7:	e8 16 eb ff ff       	call   c000fe02 <KePanic(char const*)>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	f7 d3                	not    ebx
c00112f1:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00112f7:	58                   	pop    eax
c00112f8:	5b                   	pop    ebx
c00112f9:	5e                   	pop    esi
c00112fa:	c3                   	ret    

c00112fb <KiFinishSignalZ>:
c00112fb:	53                   	push   ebx
c00112fc:	83 ec 08             	sub    esp,0x8
c00112ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011304:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011308:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001130b:	83 fa 08             	cmp    edx,0x8
c001130e:	75 0c                	jne    c001131c <KiFinishSignalZ+0x21>
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	50                   	push   eax
c0011314:	e8 7f 5f 00 00       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	50                   	push   eax
c001131d:	50                   	push   eax
c001131e:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011326:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011329:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001132f:	e8 8c ff ff ff       	call   c00112c0 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011334:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001133a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011341:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011348:	83 c4 18             	add    esp,0x18
c001134b:	5b                   	pop    ebx
c001134c:	c3                   	ret    

c001134d <SysSeekDir(regs*)>:
c001134d:	31 c0                	xor    eax,eax
c001134f:	31 d2                	xor    edx,edx
c0011351:	c3                   	ret    

c0011352 <SysTellDir(regs*)>:
c0011352:	31 c0                	xor    eax,eax
c0011354:	31 d2                	xor    edx,edx
c0011356:	c3                   	ret    

c0011357 <SysVerify(regs*)>:
c0011357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001135b:	31 d2                	xor    edx,edx
c001135d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011360:	c3                   	ret    

c0011361 <SysGetArgc(regs*)>:
c0011361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011366:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011369:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001136f:	89 c2                	mov    edx,eax
c0011371:	c1 fa 1f             	sar    edx,0x1f
c0011374:	c3                   	ret    

c0011375 <SysTTYName(regs*)>:
c0011375:	b8 01 00 00 00       	mov    eax,0x1
c001137a:	31 d2                	xor    edx,edx
c001137c:	c3                   	ret    

c001137d <SysFormatDisk(regs*)>:
c001137d:	56                   	push   esi
c001137e:	53                   	push   ebx
c001137f:	83 ec 04             	sub    esp,0x4
c0011382:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011386:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c001138c:	eb 2a                	jmp    c00113b8 <SysFormatDisk(regs*)+0x3b>
c001138e:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011391:	83 ec 0c             	sub    esp,0xc
c0011394:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011397:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011399:	51                   	push   ecx
c001139a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001139d:	51                   	push   ecx
c001139e:	50                   	push   eax
c001139f:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00113a6:	50                   	push   eax
c00113a7:	53                   	push   ebx
c00113a8:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00113ab:	83 c4 20             	add    esp,0x20
c00113ae:	83 f8 08             	cmp    eax,0x8
c00113b1:	89 c1                	mov    ecx,eax
c00113b3:	75 14                	jne    c00113c9 <SysFormatDisk(regs*)+0x4c>
c00113b5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00113b8:	85 db                	test   ebx,ebx
c00113ba:	75 d2                	jne    c001138e <SysFormatDisk(regs*)+0x11>
c00113bc:	b8 03 00 00 00       	mov    eax,0x3
c00113c1:	31 d2                	xor    edx,edx
c00113c3:	83 c4 04             	add    esp,0x4
c00113c6:	5b                   	pop    ebx
c00113c7:	5e                   	pop    esi
c00113c8:	c3                   	ret    
c00113c9:	85 c0                	test   eax,eax
c00113cb:	74 13                	je     c00113e0 <SysFormatDisk(regs*)+0x63>
c00113cd:	31 d2                	xor    edx,edx
c00113cf:	83 f9 09             	cmp    ecx,0x9
c00113d2:	b8 01 00 00 00       	mov    eax,0x1
c00113d7:	74 ea                	je     c00113c3 <SysFormatDisk(regs*)+0x46>
c00113d9:	b8 02 00 00 00       	mov    eax,0x2
c00113de:	eb e1                	jmp    c00113c1 <SysFormatDisk(regs*)+0x44>
c00113e0:	31 c0                	xor    eax,eax
c00113e2:	eb dd                	jmp    c00113c1 <SysFormatDisk(regs*)+0x44>

c00113e4 <SysSetDiskVolumeLabel(regs*)>:
c00113e4:	56                   	push   esi
c00113e5:	53                   	push   ebx
c00113e6:	83 ec 04             	sub    esp,0x4
c00113e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00113ed:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00113f0:	83 f8 19             	cmp    eax,0x19
c00113f3:	77 33                	ja     c0011428 <SysSetDiskVolumeLabel(regs*)+0x44>
c00113f5:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c00113fc:	85 c9                	test   ecx,ecx
c00113fe:	74 28                	je     c0011428 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011400:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011403:	85 db                	test   ebx,ebx
c0011405:	74 21                	je     c0011428 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011407:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001140d:	85 d2                	test   edx,edx
c001140f:	74 17                	je     c0011428 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011411:	8b 32                	mov    esi,DWORD PTR [edx]
c0011413:	53                   	push   ebx
c0011414:	50                   	push   eax
c0011415:	51                   	push   ecx
c0011416:	52                   	push   edx
c0011417:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	83 c4 04             	add    esp,0x4
c0011420:	5b                   	pop    ebx
c0011421:	5e                   	pop    esi
c0011422:	89 c2                	mov    edx,eax
c0011424:	c1 fa 1f             	sar    edx,0x1f
c0011427:	c3                   	ret    
c0011428:	83 c4 04             	add    esp,0x4
c001142b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011430:	5b                   	pop    ebx
c0011431:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011436:	5e                   	pop    esi
c0011437:	c3                   	ret    

c0011438 <SysGetDiskVolumeLabel(regs*)>:
c0011438:	57                   	push   edi
c0011439:	56                   	push   esi
c001143a:	53                   	push   ebx
c001143b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001143f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011442:	83 fa 19             	cmp    edx,0x19
c0011445:	77 3c                	ja     c0011483 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011447:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c001144e:	85 c9                	test   ecx,ecx
c0011450:	74 31                	je     c0011483 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011452:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011455:	85 db                	test   ebx,ebx
c0011457:	74 2a                	je     c0011483 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011459:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001145c:	85 f6                	test   esi,esi
c001145e:	74 23                	je     c0011483 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011460:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011466:	85 c0                	test   eax,eax
c0011468:	74 19                	je     c0011483 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001146a:	83 ec 0c             	sub    esp,0xc
c001146d:	8b 38                	mov    edi,DWORD PTR [eax]
c001146f:	56                   	push   esi
c0011470:	53                   	push   ebx
c0011471:	52                   	push   edx
c0011472:	51                   	push   ecx
c0011473:	50                   	push   eax
c0011474:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011477:	83 c4 20             	add    esp,0x20
c001147a:	5b                   	pop    ebx
c001147b:	5e                   	pop    esi
c001147c:	89 c2                	mov    edx,eax
c001147e:	c1 fa 1f             	sar    edx,0x1f
c0011481:	5f                   	pop    edi
c0011482:	c3                   	ret    
c0011483:	5b                   	pop    ebx
c0011484:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011489:	ba ff ff ff ff       	mov    edx,0xffffffff
c001148e:	5e                   	pop    esi
c001148f:	5f                   	pop    edi
c0011490:	c3                   	ret    

c0011491 <SysRealpath(regs*)>:
c0011491:	53                   	push   ebx
c0011492:	83 ec 08             	sub    esp,0x8
c0011495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011499:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001149c:	85 c9                	test   ecx,ecx
c001149e:	74 36                	je     c00114d6 <SysRealpath(regs*)+0x45>
c00114a0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00114a3:	31 d2                	xor    edx,edx
c00114a5:	b8 01 00 00 00       	mov    eax,0x1
c00114aa:	85 db                	test   ebx,ebx
c00114ac:	75 05                	jne    c00114b3 <SysRealpath(regs*)+0x22>
c00114ae:	83 c4 08             	add    esp,0x8
c00114b1:	5b                   	pop    ebx
c00114b2:	c3                   	ret    
c00114b3:	6a 00                	push   0x0
c00114b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114bd:	05 0c 01 00 00       	add    eax,0x10c
c00114c2:	50                   	push   eax
c00114c3:	51                   	push   ecx
c00114c4:	53                   	push   ebx
c00114c5:	e8 92 69 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00114ca:	83 c4 10             	add    esp,0x10
c00114cd:	31 c0                	xor    eax,eax
c00114cf:	31 d2                	xor    edx,edx
c00114d1:	83 c4 08             	add    esp,0x8
c00114d4:	5b                   	pop    ebx
c00114d5:	c3                   	ret    
c00114d6:	b8 01 00 00 00       	mov    eax,0x1
c00114db:	31 d2                	xor    edx,edx
c00114dd:	eb f2                	jmp    c00114d1 <SysRealpath(regs*)+0x40>

c00114df <SysReadDir(regs*)>:
c00114df:	53                   	push   ebx
c00114e0:	83 ec 18             	sub    esp,0x18
c00114e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114ea:	83 f8 02             	cmp    eax,0x2
c00114ed:	76 4f                	jbe    c001153e <SysReadDir(regs*)+0x5f>
c00114ef:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114f6:	77 52                	ja     c001154a <SysReadDir(regs*)+0x6b>
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	50                   	push   eax
c00114fc:	e8 98 1d 00 00       	call   c0013299 <KeGetFileFromDescriptor(int)>
c0011501:	83 c4 10             	add    esp,0x10
c0011504:	85 c0                	test   eax,eax
c0011506:	74 42                	je     c001154a <SysReadDir(regs*)+0x6b>
c0011508:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011510:	83 ec 0c             	sub    esp,0xc
c0011513:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011517:	8b 10                	mov    edx,DWORD PTR [eax]
c0011519:	51                   	push   ecx
c001151a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001151d:	51                   	push   ecx
c001151e:	6a 00                	push   0x0
c0011520:	68 10 01 00 00       	push   0x110
c0011525:	50                   	push   eax
c0011526:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011529:	83 c4 20             	add    esp,0x20
c001152c:	85 c0                	test   eax,eax
c001152e:	89 c1                	mov    ecx,eax
c0011530:	74 27                	je     c0011559 <SysReadDir(regs*)+0x7a>
c0011532:	31 d2                	xor    edx,edx
c0011534:	83 f9 07             	cmp    ecx,0x7
c0011537:	b8 02 00 00 00       	mov    eax,0x2
c001153c:	75 16                	jne    c0011554 <SysReadDir(regs*)+0x75>
c001153e:	b8 01 00 00 00       	mov    eax,0x1
c0011543:	31 d2                	xor    edx,edx
c0011545:	83 c4 18             	add    esp,0x18
c0011548:	5b                   	pop    ebx
c0011549:	c3                   	ret    
c001154a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001154f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011554:	83 c4 18             	add    esp,0x18
c0011557:	5b                   	pop    ebx
c0011558:	c3                   	ret    
c0011559:	31 c0                	xor    eax,eax
c001155b:	31 d2                	xor    edx,edx
c001155d:	eb e6                	jmp    c0011545 <SysReadDir(regs*)+0x66>

c001155f <SysIsATTY(regs*)>:
c001155f:	83 ec 0c             	sub    esp,0xc
c0011562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011566:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011569:	83 f8 02             	cmp    eax,0x2
c001156c:	76 07                	jbe    c0011575 <SysIsATTY(regs*)+0x16>
c001156e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011573:	75 26                	jne    c001159b <SysIsATTY(regs*)+0x3c>
c0011575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001157a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001157d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011583:	85 c0                	test   eax,eax
c0011585:	74 24                	je     c00115ab <SysIsATTY(regs*)+0x4c>
c0011587:	8b 10                	mov    edx,DWORD PTR [eax]
c0011589:	83 ec 0c             	sub    esp,0xc
c001158c:	50                   	push   eax
c001158d:	ff 12                	call   DWORD PTR [edx]
c001158f:	83 c4 10             	add    esp,0x10
c0011592:	31 d2                	xor    edx,edx
c0011594:	83 c4 0c             	add    esp,0xc
c0011597:	0f b6 c0             	movzx  eax,al
c001159a:	c3                   	ret    
c001159b:	83 ec 0c             	sub    esp,0xc
c001159e:	50                   	push   eax
c001159f:	e8 f5 1c 00 00       	call   c0013299 <KeGetFileFromDescriptor(int)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	85 c0                	test   eax,eax
c00115a9:	75 dc                	jne    c0011587 <SysIsATTY(regs*)+0x28>
c00115ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115b5:	83 c4 0c             	add    esp,0xc
c00115b8:	c3                   	ret    

c00115b9 <SysSeek(regs*)>:
c00115b9:	53                   	push   ebx
c00115ba:	83 ec 08             	sub    esp,0x8
c00115bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115c4:	8d 50 fd             	lea    edx,[eax-0x3]
c00115c7:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115cd:	77 39                	ja     c0011608 <SysSeek(regs*)+0x4f>
c00115cf:	83 ec 0c             	sub    esp,0xc
c00115d2:	50                   	push   eax
c00115d3:	e8 c1 1c 00 00       	call   c0013299 <KeGetFileFromDescriptor(int)>
c00115d8:	83 c4 10             	add    esp,0x10
c00115db:	85 c0                	test   eax,eax
c00115dd:	74 29                	je     c0011608 <SysSeek(regs*)+0x4f>
c00115df:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115e2:	83 ec 04             	sub    esp,0x4
c00115e5:	31 db                	xor    ebx,ebx
c00115e7:	53                   	push   ebx
c00115e8:	51                   	push   ecx
c00115e9:	50                   	push   eax
c00115ea:	e8 75 6c ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	85 c0                	test   eax,eax
c00115f4:	0f 95 c0             	setne  al
c00115f7:	31 d2                	xor    edx,edx
c00115f9:	0f b6 c0             	movzx  eax,al
c00115fc:	f7 d8                	neg    eax
c00115fe:	83 d2 00             	adc    edx,0x0
c0011601:	83 c4 08             	add    esp,0x8
c0011604:	5b                   	pop    ebx
c0011605:	f7 da                	neg    edx
c0011607:	c3                   	ret    
c0011608:	83 c4 08             	add    esp,0x8
c001160b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011610:	5b                   	pop    ebx
c0011611:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011616:	c3                   	ret    

c0011617 <SysTell(regs*)>:
c0011617:	53                   	push   ebx
c0011618:	83 ec 08             	sub    esp,0x8
c001161b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001161f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011622:	83 f8 02             	cmp    eax,0x2
c0011625:	76 56                	jbe    c001167d <SysTell(regs*)+0x66>
c0011627:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001162c:	76 19                	jbe    c0011647 <SysTell(regs*)+0x30>
c001162e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011631:	31 d2                	xor    edx,edx
c0011633:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011639:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011640:	83 c4 08             	add    esp,0x8
c0011643:	31 c0                	xor    eax,eax
c0011645:	5b                   	pop    ebx
c0011646:	c3                   	ret    
c0011647:	83 ec 0c             	sub    esp,0xc
c001164a:	50                   	push   eax
c001164b:	e8 49 1c 00 00       	call   c0013299 <KeGetFileFromDescriptor(int)>
c0011650:	83 c4 10             	add    esp,0x10
c0011653:	85 c0                	test   eax,eax
c0011655:	74 26                	je     c001167d <SysTell(regs*)+0x66>
c0011657:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001165a:	83 ec 08             	sub    esp,0x8
c001165d:	52                   	push   edx
c001165e:	50                   	push   eax
c001165f:	e8 ac 6c ff ff       	call   c0008310 <File::tell(unsigned long long*)>
c0011664:	83 c4 10             	add    esp,0x10
c0011667:	85 c0                	test   eax,eax
c0011669:	0f 95 c0             	setne  al
c001166c:	31 d2                	xor    edx,edx
c001166e:	0f b6 c0             	movzx  eax,al
c0011671:	f7 d8                	neg    eax
c0011673:	83 d2 00             	adc    edx,0x0
c0011676:	83 c4 08             	add    esp,0x8
c0011679:	5b                   	pop    ebx
c001167a:	f7 da                	neg    edx
c001167c:	c3                   	ret    
c001167d:	83 c4 08             	add    esp,0x8
c0011680:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011685:	5b                   	pop    ebx
c0011686:	ba ff ff ff ff       	mov    edx,0xffffffff
c001168b:	c3                   	ret    

c001168c <SysSize(regs*)>:
c001168c:	53                   	push   ebx
c001168d:	83 ec 18             	sub    esp,0x18
c0011690:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011694:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011697:	83 f8 02             	cmp    eax,0x2
c001169a:	76 5b                	jbe    c00116f7 <SysSize(regs*)+0x6b>
c001169c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116a1:	76 19                	jbe    c00116bc <SysSize(regs*)+0x30>
c00116a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00116a6:	31 d2                	xor    edx,edx
c00116a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116b5:	83 c4 18             	add    esp,0x18
c00116b8:	31 c0                	xor    eax,eax
c00116ba:	5b                   	pop    ebx
c00116bb:	c3                   	ret    
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	50                   	push   eax
c00116c0:	e8 d4 1b 00 00       	call   c0013299 <KeGetFileFromDescriptor(int)>
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	85 c0                	test   eax,eax
c00116ca:	74 2b                	je     c00116f7 <SysSize(regs*)+0x6b>
c00116cc:	83 ec 04             	sub    esp,0x4
c00116cf:	8d 54 24 13          	lea    edx,[esp+0x13]
c00116d3:	52                   	push   edx
c00116d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116d7:	52                   	push   edx
c00116d8:	50                   	push   eax
c00116d9:	e8 ca 6d ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00116de:	83 c4 10             	add    esp,0x10
c00116e1:	85 c0                	test   eax,eax
c00116e3:	0f 95 c0             	setne  al
c00116e6:	31 d2                	xor    edx,edx
c00116e8:	0f b6 c0             	movzx  eax,al
c00116eb:	f7 d8                	neg    eax
c00116ed:	83 d2 00             	adc    edx,0x0
c00116f0:	83 c4 18             	add    esp,0x18
c00116f3:	5b                   	pop    ebx
c00116f4:	f7 da                	neg    edx
c00116f6:	c3                   	ret    
c00116f7:	83 c4 18             	add    esp,0x18
c00116fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116ff:	5b                   	pop    ebx
c0011700:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011705:	c3                   	ret    

c0011706 <SysSizeFromFilename(regs*)>:
c0011706:	55                   	push   ebp
c0011707:	57                   	push   edi
c0011708:	56                   	push   esi
c0011709:	53                   	push   ebx
c001170a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011710:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011717:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001171a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001171d:	85 f6                	test   esi,esi
c001171f:	89 f8                	mov    eax,edi
c0011721:	74 09                	je     c001172c <SysSizeFromFilename(regs*)+0x26>
c0011723:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011729:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001172c:	83 f8 02             	cmp    eax,0x2
c001172f:	0f 86 c9 00 00 00    	jbe    c00117fe <SysSizeFromFilename(regs*)+0xf8>
c0011735:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001173a:	76 1f                	jbe    c001175b <SysSizeFromFilename(regs*)+0x55>
c001173c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001173f:	31 d2                	xor    edx,edx
c0011741:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011747:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001174e:	31 c0                	xor    eax,eax
c0011750:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011756:	5b                   	pop    ebx
c0011757:	5e                   	pop    esi
c0011758:	5f                   	pop    edi
c0011759:	5d                   	pop    ebp
c001175a:	c3                   	ret    
c001175b:	83 ec 0c             	sub    esp,0xc
c001175e:	68 14 01 00 00       	push   0x114
c0011763:	e8 44 e2 ff ff       	call   c000f9ac <malloc>
c0011768:	6a 01                	push   0x1
c001176a:	89 c5                	mov    ebp,eax
c001176c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011771:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011774:	50                   	push   eax
c0011775:	57                   	push   edi
c0011776:	55                   	push   ebp
c0011777:	e8 0e 69 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c001177c:	83 c4 20             	add    esp,0x20
c001177f:	85 ed                	test   ebp,ebp
c0011781:	74 7b                	je     c00117fe <SysSizeFromFilename(regs*)+0xf8>
c0011783:	83 ec 04             	sub    esp,0x4
c0011786:	8d 44 24 13          	lea    eax,[esp+0x13]
c001178a:	50                   	push   eax
c001178b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001178e:	51                   	push   ecx
c001178f:	55                   	push   ebp
c0011790:	e8 13 6d ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0011795:	89 c3                	mov    ebx,eax
c0011797:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001179a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001179d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117a0:	83 c4 10             	add    esp,0x10
c00117a3:	85 db                	test   ebx,ebx
c00117a5:	75 57                	jne    c00117fe <SysSizeFromFilename(regs*)+0xf8>
c00117a7:	6a 00                	push   0x0
c00117a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117b1:	05 0c 01 00 00       	add    eax,0x10c
c00117b6:	50                   	push   eax
c00117b7:	57                   	push   edi
c00117b8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00117bf:	53                   	push   ebx
c00117c0:	e8 97 66 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00117c5:	58                   	pop    eax
c00117c6:	5a                   	pop    edx
c00117c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00117cb:	50                   	push   eax
c00117cc:	53                   	push   ebx
c00117cd:	e8 11 61 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c00117d2:	83 c4 10             	add    esp,0x10
c00117d5:	ba 00 00 00 00       	mov    edx,0x0
c00117da:	83 f8 01             	cmp    eax,0x1
c00117dd:	b8 00 00 00 00       	mov    eax,0x0
c00117e2:	74 2f                	je     c0011813 <SysSizeFromFilename(regs*)+0x10d>
c00117e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117e9:	74 3b                	je     c0011826 <SysSizeFromFilename(regs*)+0x120>
c00117eb:	85 f6                	test   esi,esi
c00117ed:	0f 84 5d ff ff ff    	je     c0011750 <SysSizeFromFilename(regs*)+0x4a>
c00117f3:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00117f9:	e9 52 ff ff ff       	jmp    c0011750 <SysSizeFromFilename(regs*)+0x4a>
c00117fe:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011804:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011809:	5b                   	pop    ebx
c001180a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001180f:	5e                   	pop    esi
c0011810:	5f                   	pop    edi
c0011811:	5d                   	pop    ebp
c0011812:	c3                   	ret    
c0011813:	85 f6                	test   esi,esi
c0011815:	0f 84 35 ff ff ff    	je     c0011750 <SysSizeFromFilename(regs*)+0x4a>
c001181b:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011821:	e9 2a ff ff ff       	jmp    c0011750 <SysSizeFromFilename(regs*)+0x4a>
c0011826:	85 f6                	test   esi,esi
c0011828:	0f 84 22 ff ff ff    	je     c0011750 <SysSizeFromFilename(regs*)+0x4a>
c001182e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011834:	e9 17 ff ff ff       	jmp    c0011750 <SysSizeFromFilename(regs*)+0x4a>

c0011839 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011839:	55                   	push   ebp
c001183a:	57                   	push   edi
c001183b:	56                   	push   esi
c001183c:	53                   	push   ebx
c001183d:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011843:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001184a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001184d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011850:	85 f6                	test   esi,esi
c0011852:	89 f8                	mov    eax,edi
c0011854:	74 09                	je     c001185f <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011856:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001185c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001185f:	83 f8 02             	cmp    eax,0x2
c0011862:	0f 86 c9 00 00 00    	jbe    c0011931 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011868:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001186d:	76 1f                	jbe    c001188e <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001186f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011872:	31 d2                	xor    edx,edx
c0011874:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001187a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011881:	31 c0                	xor    eax,eax
c0011883:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011889:	5b                   	pop    ebx
c001188a:	5e                   	pop    esi
c001188b:	5f                   	pop    edi
c001188c:	5d                   	pop    ebp
c001188d:	c3                   	ret    
c001188e:	83 ec 0c             	sub    esp,0xc
c0011891:	68 14 01 00 00       	push   0x114
c0011896:	e8 11 e1 ff ff       	call   c000f9ac <malloc>
c001189b:	6a 00                	push   0x0
c001189d:	89 c5                	mov    ebp,eax
c001189f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118a7:	50                   	push   eax
c00118a8:	57                   	push   edi
c00118a9:	55                   	push   ebp
c00118aa:	e8 db 67 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00118af:	83 c4 20             	add    esp,0x20
c00118b2:	85 ed                	test   ebp,ebp
c00118b4:	74 7b                	je     c0011931 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00118b6:	83 ec 04             	sub    esp,0x4
c00118b9:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118bd:	50                   	push   eax
c00118be:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00118c1:	51                   	push   ecx
c00118c2:	55                   	push   ebp
c00118c3:	e8 e0 6b ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00118c8:	89 c3                	mov    ebx,eax
c00118ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00118cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00118d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118d3:	83 c4 10             	add    esp,0x10
c00118d6:	85 db                	test   ebx,ebx
c00118d8:	75 57                	jne    c0011931 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00118da:	6a 00                	push   0x0
c00118dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118e4:	05 0c 01 00 00       	add    eax,0x10c
c00118e9:	50                   	push   eax
c00118ea:	57                   	push   edi
c00118eb:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00118f2:	53                   	push   ebx
c00118f3:	e8 64 65 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00118f8:	58                   	pop    eax
c00118f9:	5a                   	pop    edx
c00118fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00118fe:	50                   	push   eax
c00118ff:	53                   	push   ebx
c0011900:	e8 de 5f ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	ba 00 00 00 00       	mov    edx,0x0
c001190d:	83 f8 01             	cmp    eax,0x1
c0011910:	b8 00 00 00 00       	mov    eax,0x0
c0011915:	74 2f                	je     c0011946 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0011917:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001191c:	74 3b                	je     c0011959 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c001191e:	85 f6                	test   esi,esi
c0011920:	0f 84 5d ff ff ff    	je     c0011883 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011926:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001192c:	e9 52 ff ff ff       	jmp    c0011883 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011931:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011937:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001193c:	5b                   	pop    ebx
c001193d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011942:	5e                   	pop    esi
c0011943:	5f                   	pop    edi
c0011944:	5d                   	pop    ebp
c0011945:	c3                   	ret    
c0011946:	85 f6                	test   esi,esi
c0011948:	0f 84 35 ff ff ff    	je     c0011883 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001194e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011954:	e9 2a ff ff ff       	jmp    c0011883 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011959:	85 f6                	test   esi,esi
c001195b:	0f 84 22 ff ff ff    	je     c0011883 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011961:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011967:	e9 17 ff ff ff       	jmp    c0011883 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001196c <SysClose(regs*)>:
c001196c:	57                   	push   edi
c001196d:	56                   	push   esi
c001196e:	53                   	push   ebx
c001196f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011973:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011976:	83 f8 02             	cmp    eax,0x2
c0011979:	76 44                	jbe    c00119bf <SysClose(regs*)+0x53>
c001197b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011981:	31 f6                	xor    esi,esi
c0011983:	31 ff                	xor    edi,edi
c0011985:	83 fa 01             	cmp    edx,0x1
c0011988:	76 2d                	jbe    c00119b7 <SysClose(regs*)+0x4b>
c001198a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001198f:	77 2e                	ja     c00119bf <SysClose(regs*)+0x53>
c0011991:	83 ec 0c             	sub    esp,0xc
c0011994:	50                   	push   eax
c0011995:	e8 ff 18 00 00       	call   c0013299 <KeGetFileFromDescriptor(int)>
c001199a:	83 c4 10             	add    esp,0x10
c001199d:	85 c0                	test   eax,eax
c001199f:	89 c3                	mov    ebx,eax
c00119a1:	74 1c                	je     c00119bf <SysClose(regs*)+0x53>
c00119a3:	83 ec 0c             	sub    esp,0xc
c00119a6:	50                   	push   eax
c00119a7:	e8 58 68 ff ff       	call   c0008204 <File::close()>
c00119ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	5b                   	pop    ebx
c00119b8:	89 f0                	mov    eax,esi
c00119ba:	89 fa                	mov    edx,edi
c00119bc:	5e                   	pop    esi
c00119bd:	5f                   	pop    edi
c00119be:	c3                   	ret    
c00119bf:	5b                   	pop    ebx
c00119c0:	be ff ff ff ff       	mov    esi,0xffffffff
c00119c5:	89 f0                	mov    eax,esi
c00119c7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00119cc:	89 fa                	mov    edx,edi
c00119ce:	5e                   	pop    esi
c00119cf:	5f                   	pop    edi
c00119d0:	c3                   	ret    

c00119d1 <SysOpenDir(regs*)>:
c00119d1:	56                   	push   esi
c00119d2:	53                   	push   ebx
c00119d3:	83 ec 04             	sub    esp,0x4
c00119d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119da:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00119dd:	85 c9                	test   ecx,ecx
c00119df:	74 5d                	je     c0011a3e <SysOpenDir(regs*)+0x6d>
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	68 14 01 00 00       	push   0x114
c00119e9:	e8 be df ff ff       	call   c000f9ac <malloc>
c00119ee:	83 c4 0c             	add    esp,0xc
c00119f1:	89 c6                	mov    esi,eax
c00119f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119fb:	50                   	push   eax
c00119fc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00119ff:	52                   	push   edx
c0011a00:	56                   	push   esi
c0011a01:	e8 62 6c ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c0011a06:	83 c4 10             	add    esp,0x10
c0011a09:	85 f6                	test   esi,esi
c0011a0b:	74 31                	je     c0011a3e <SysOpenDir(regs*)+0x6d>
c0011a0d:	83 ec 0c             	sub    esp,0xc
c0011a10:	56                   	push   esi
c0011a11:	e8 1a 6d ff ff       	call   c0008730 <Directory::open()>
c0011a16:	83 c4 10             	add    esp,0x10
c0011a19:	85 c0                	test   eax,eax
c0011a1b:	75 21                	jne    c0011a3e <SysOpenDir(regs*)+0x6d>
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	56                   	push   esi
c0011a21:	e8 76 15 00 00       	call   c0012f9c <UnixFile::getFileDescriptor()>
c0011a26:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	89 02                	mov    DWORD PTR [edx],eax
c0011a2e:	c1 f8 1f             	sar    eax,0x1f
c0011a31:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011a34:	83 c4 04             	add    esp,0x4
c0011a37:	31 c0                	xor    eax,eax
c0011a39:	5b                   	pop    ebx
c0011a3a:	31 d2                	xor    edx,edx
c0011a3c:	5e                   	pop    esi
c0011a3d:	c3                   	ret    
c0011a3e:	83 c4 04             	add    esp,0x4
c0011a41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a46:	5b                   	pop    ebx
c0011a47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a4c:	5e                   	pop    esi
c0011a4d:	c3                   	ret    

c0011a4e <SysMakeDir(regs*)>:
c0011a4e:	56                   	push   esi
c0011a4f:	53                   	push   ebx
c0011a50:	83 ec 10             	sub    esp,0x10
c0011a53:	68 14 01 00 00       	push   0x114
c0011a58:	e8 4f df ff ff       	call   c000f9ac <malloc>
c0011a5d:	83 c4 0c             	add    esp,0xc
c0011a60:	89 c3                	mov    ebx,eax
c0011a62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a6a:	50                   	push   eax
c0011a6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a6f:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011a72:	52                   	push   edx
c0011a73:	53                   	push   ebx
c0011a74:	e8 ef 6b ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c0011a79:	83 c4 10             	add    esp,0x10
c0011a7c:	85 db                	test   ebx,ebx
c0011a7e:	74 2c                	je     c0011aac <SysMakeDir(regs*)+0x5e>
c0011a80:	83 ec 0c             	sub    esp,0xc
c0011a83:	53                   	push   ebx
c0011a84:	e8 87 6e ff ff       	call   c0008910 <Directory::create()>
c0011a89:	89 c6                	mov    esi,eax
c0011a8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	31 c0                	xor    eax,eax
c0011a98:	85 f6                	test   esi,esi
c0011a9a:	0f 95 c0             	setne  al
c0011a9d:	31 d2                	xor    edx,edx
c0011a9f:	f7 d8                	neg    eax
c0011aa1:	83 d2 00             	adc    edx,0x0
c0011aa4:	83 c4 04             	add    esp,0x4
c0011aa7:	5b                   	pop    ebx
c0011aa8:	f7 da                	neg    edx
c0011aaa:	5e                   	pop    esi
c0011aab:	c3                   	ret    
c0011aac:	83 c4 04             	add    esp,0x4
c0011aaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ab4:	5b                   	pop    ebx
c0011ab5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011aba:	5e                   	pop    esi
c0011abb:	c3                   	ret    

c0011abc <SysCloseDir(regs*)>:
c0011abc:	53                   	push   ebx
c0011abd:	83 ec 08             	sub    esp,0x8
c0011ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ac4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ac7:	8d 50 fd             	lea    edx,[eax-0x3]
c0011aca:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011ad0:	77 2f                	ja     c0011b01 <SysCloseDir(regs*)+0x45>
c0011ad2:	83 ec 0c             	sub    esp,0xc
c0011ad5:	50                   	push   eax
c0011ad6:	e8 be 17 00 00       	call   c0013299 <KeGetFileFromDescriptor(int)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	85 c0                	test   eax,eax
c0011ae0:	89 c3                	mov    ebx,eax
c0011ae2:	74 1d                	je     c0011b01 <SysCloseDir(regs*)+0x45>
c0011ae4:	83 ec 0c             	sub    esp,0xc
c0011ae7:	50                   	push   eax
c0011ae8:	e8 9f 6c ff ff       	call   c000878c <Directory::close()>
c0011aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011af2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011af5:	83 c4 10             	add    esp,0x10
c0011af8:	31 c0                	xor    eax,eax
c0011afa:	83 c4 08             	add    esp,0x8
c0011afd:	31 d2                	xor    edx,edx
c0011aff:	5b                   	pop    ebx
c0011b00:	c3                   	ret    
c0011b01:	83 c4 08             	add    esp,0x8
c0011b04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b09:	5b                   	pop    ebx
c0011b0a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b0f:	c3                   	ret    

c0011b10 <SysWait(regs*)>:
c0011b10:	83 ec 10             	sub    esp,0x10
c0011b13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b17:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011b1a:	52                   	push   edx
c0011b1b:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011b1e:	51                   	push   ecx
c0011b1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b22:	50                   	push   eax
c0011b23:	e8 14 55 00 00       	call   c001703c <waitTask(int, int*, int)>
c0011b28:	83 c4 1c             	add    esp,0x1c
c0011b2b:	89 c2                	mov    edx,eax
c0011b2d:	c1 fa 1f             	sar    edx,0x1f
c0011b30:	c3                   	ret    

c0011b31 <SysNotImpl(regs*)>:
c0011b31:	83 ec 18             	sub    esp,0x18
c0011b34:	68 df 45 02 c0       	push   0xc00245df
c0011b39:	e8 c4 e2 ff ff       	call   c000fe02 <KePanic(char const*)>
c0011b3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b48:	83 c4 1c             	add    esp,0x1c
c0011b4b:	c3                   	ret    

c0011b4c <SysPanic(regs*)>:
c0011b4c:	83 ec 18             	sub    esp,0x18
c0011b4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b53:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011b56:	50                   	push   eax
c0011b57:	e8 a6 e2 ff ff       	call   c000fe02 <KePanic(char const*)>
c0011b5c:	b8 01 00 00 00       	mov    eax,0x1
c0011b61:	31 d2                	xor    edx,edx
c0011b63:	83 c4 1c             	add    esp,0x1c
c0011b66:	c3                   	ret    

c0011b67 <SysRmdir(regs*)>:
c0011b67:	56                   	push   esi
c0011b68:	53                   	push   ebx
c0011b69:	83 ec 10             	sub    esp,0x10
c0011b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b70:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011b73:	68 14 01 00 00       	push   0x114
c0011b78:	e8 2f de ff ff       	call   c000f9ac <malloc>
c0011b7d:	6a 00                	push   0x0
c0011b7f:	89 c3                	mov    ebx,eax
c0011b81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b86:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b89:	50                   	push   eax
c0011b8a:	56                   	push   esi
c0011b8b:	53                   	push   ebx
c0011b8c:	e8 f9 64 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011b91:	83 c4 14             	add    esp,0x14
c0011b94:	53                   	push   ebx
c0011b95:	e8 da 67 ff ff       	call   c0008374 <File::unlink()>
c0011b9a:	83 c4 10             	add    esp,0x10
c0011b9d:	85 db                	test   ebx,ebx
c0011b9f:	89 c6                	mov    esi,eax
c0011ba1:	74 0c                	je     c0011baf <SysRmdir(regs*)+0x48>
c0011ba3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ba5:	83 ec 0c             	sub    esp,0xc
c0011ba8:	53                   	push   ebx
c0011ba9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bac:	83 c4 10             	add    esp,0x10
c0011baf:	31 c0                	xor    eax,eax
c0011bb1:	85 f6                	test   esi,esi
c0011bb3:	0f 95 c0             	setne  al
c0011bb6:	31 d2                	xor    edx,edx
c0011bb8:	f7 d8                	neg    eax
c0011bba:	83 d2 00             	adc    edx,0x0
c0011bbd:	83 c4 04             	add    esp,0x4
c0011bc0:	5b                   	pop    ebx
c0011bc1:	f7 da                	neg    edx
c0011bc3:	5e                   	pop    esi
c0011bc4:	c3                   	ret    

c0011bc5 <SysUnlink(regs*)>:
c0011bc5:	56                   	push   esi
c0011bc6:	53                   	push   ebx
c0011bc7:	83 ec 10             	sub    esp,0x10
c0011bca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bce:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011bd1:	68 14 01 00 00       	push   0x114
c0011bd6:	e8 d1 dd ff ff       	call   c000f9ac <malloc>
c0011bdb:	6a 00                	push   0x0
c0011bdd:	89 c3                	mov    ebx,eax
c0011bdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011be7:	50                   	push   eax
c0011be8:	56                   	push   esi
c0011be9:	53                   	push   ebx
c0011bea:	e8 9b 64 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011bef:	83 c4 14             	add    esp,0x14
c0011bf2:	53                   	push   ebx
c0011bf3:	e8 7c 67 ff ff       	call   c0008374 <File::unlink()>
c0011bf8:	83 c4 10             	add    esp,0x10
c0011bfb:	85 db                	test   ebx,ebx
c0011bfd:	89 c6                	mov    esi,eax
c0011bff:	74 0c                	je     c0011c0d <SysUnlink(regs*)+0x48>
c0011c01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c03:	83 ec 0c             	sub    esp,0xc
c0011c06:	53                   	push   ebx
c0011c07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c0a:	83 c4 10             	add    esp,0x10
c0011c0d:	31 c0                	xor    eax,eax
c0011c0f:	85 f6                	test   esi,esi
c0011c11:	0f 95 c0             	setne  al
c0011c14:	31 d2                	xor    edx,edx
c0011c16:	f7 d8                	neg    eax
c0011c18:	83 d2 00             	adc    edx,0x0
c0011c1b:	83 c4 04             	add    esp,0x4
c0011c1e:	5b                   	pop    ebx
c0011c1f:	f7 da                	neg    edx
c0011c21:	5e                   	pop    esi
c0011c22:	c3                   	ret    

c0011c23 <SysGetArgv(regs*)>:
c0011c23:	83 ec 0c             	sub    esp,0xc
c0011c26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c2a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011c2d:	85 c0                	test   eax,eax
c0011c2f:	78 2c                	js     c0011c5d <SysGetArgv(regs*)+0x3a>
c0011c31:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011c37:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011c3a:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011c40:	7d 1b                	jge    c0011c5d <SysGetArgv(regs*)+0x3a>
c0011c42:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	74 18                	je     c0011c65 <SysGetArgv(regs*)+0x42>
c0011c4d:	83 ec 08             	sub    esp,0x8
c0011c50:	50                   	push   eax
c0011c51:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011c54:	50                   	push   eax
c0011c55:	e8 f6 e9 fe ff       	call   c0000650 <strcpy>
c0011c5a:	83 c4 10             	add    esp,0x10
c0011c5d:	31 c0                	xor    eax,eax
c0011c5f:	31 d2                	xor    edx,edx
c0011c61:	83 c4 0c             	add    esp,0xc
c0011c64:	c3                   	ret    
c0011c65:	b8 01 00 00 00       	mov    eax,0x1
c0011c6a:	31 d2                	xor    edx,edx
c0011c6c:	83 c4 0c             	add    esp,0xc
c0011c6f:	c3                   	ret    

c0011c70 <SysUSleep(regs*)>:
c0011c70:	83 ec 1c             	sub    esp,0x1c
c0011c73:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011c77:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011c7a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011c7d:	6a 00                	push   0x0
c0011c7f:	6a 64                	push   0x64
c0011c81:	52                   	push   edx
c0011c82:	50                   	push   eax
c0011c83:	e8 2c fe 00 00       	call   c0021ab4 <__udivdi3>
c0011c88:	83 c4 18             	add    esp,0x18
c0011c8b:	52                   	push   edx
c0011c8c:	50                   	push   eax
c0011c8d:	e8 a2 54 00 00       	call   c0017134 <milliTenthSleep(unsigned long long)>
c0011c92:	31 c0                	xor    eax,eax
c0011c94:	31 d2                	xor    edx,edx
c0011c96:	83 c4 1c             	add    esp,0x1c
c0011c99:	c3                   	ret    

c0011c9a <SysSpawn(regs*)>:
c0011c9a:	56                   	push   esi
c0011c9b:	53                   	push   ebx
c0011c9c:	83 ec 04             	sub    esp,0x4
c0011c9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ca3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011ca6:	85 f6                	test   esi,esi
c0011ca8:	75 0a                	jne    c0011cb4 <SysSpawn(regs*)+0x1a>
c0011caa:	83 c4 04             	add    esp,0x4
c0011cad:	31 c0                	xor    eax,eax
c0011caf:	5b                   	pop    ebx
c0011cb0:	31 d2                	xor    edx,edx
c0011cb2:	5e                   	pop    esi
c0011cb3:	c3                   	ret    
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	68 c4 07 00 00       	push   0x7c4
c0011cbc:	e8 eb dc ff ff       	call   c000f9ac <malloc>
c0011cc1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011cca:	89 c6                	mov    esi,eax
c0011ccc:	31 c0                	xor    eax,eax
c0011cce:	85 c9                	test   ecx,ecx
c0011cd0:	74 08                	je     c0011cda <SysSpawn(regs*)+0x40>
c0011cd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cda:	52                   	push   edx
c0011cdb:	50                   	push   eax
c0011cdc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011cdf:	50                   	push   eax
c0011ce0:	56                   	push   esi
c0011ce1:	e8 3a 4b 00 00       	call   c0016820 <Process::Process(char const*, Process*, char**)>
c0011ce6:	83 c4 10             	add    esp,0x10
c0011ce9:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011cf0:	75 b8                	jne    c0011caa <SysSpawn(regs*)+0x10>
c0011cf2:	83 ec 0c             	sub    esp,0xc
c0011cf5:	56                   	push   esi
c0011cf6:	e8 dd 50 00 00       	call   c0016dd8 <Process::createUserThread()>
c0011cfb:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	83 c4 04             	add    esp,0x4
c0011d03:	5b                   	pop    ebx
c0011d04:	89 c2                	mov    edx,eax
c0011d06:	c1 fa 1f             	sar    edx,0x1f
c0011d09:	5e                   	pop    esi
c0011d0a:	c3                   	ret    

c0011d0b <SysGetEnv(regs*)>:
c0011d0b:	57                   	push   edi
c0011d0c:	56                   	push   esi
c0011d0d:	53                   	push   ebx
c0011d0e:	83 ec 1c             	sub    esp,0x1c
c0011d11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d16:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011d1a:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011d1d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011d20:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011d23:	51                   	push   ecx
c0011d24:	e8 aa c9 ff ff       	call   c000e6d3 <KeGetProcessTotalEnvCount(Process*)>
c0011d29:	83 c4 10             	add    esp,0x10
c0011d2c:	39 c7                	cmp    edi,eax
c0011d2e:	7c 12                	jl     c0011d42 <SysGetEnv(regs*)+0x37>
c0011d30:	31 c0                	xor    eax,eax
c0011d32:	31 d2                	xor    edx,edx
c0011d34:	85 f6                	test   esi,esi
c0011d36:	74 03                	je     c0011d3b <SysGetEnv(regs*)+0x30>
c0011d38:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011d3b:	83 c4 10             	add    esp,0x10
c0011d3e:	5b                   	pop    ebx
c0011d3f:	5e                   	pop    esi
c0011d40:	5f                   	pop    edi
c0011d41:	c3                   	ret    
c0011d42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011d46:	83 ec 04             	sub    esp,0x4
c0011d49:	57                   	push   edi
c0011d4a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011d50:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011d53:	57                   	push   edi
c0011d54:	50                   	push   eax
c0011d55:	e8 99 c9 ff ff       	call   c000e6f3 <KeGetProcessEnvPair(Process*, int)>
c0011d5a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011d65:	83 c4 0c             	add    esp,0xc
c0011d68:	85 d2                	test   edx,edx
c0011d6a:	75 23                	jne    c0011d8f <SysGetEnv(regs*)+0x84>
c0011d6c:	83 ec 0c             	sub    esp,0xc
c0011d6f:	50                   	push   eax
c0011d70:	e8 0b e8 fe ff       	call   c0000580 <strlen>
c0011d75:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d78:	89 c3                	mov    ebx,eax
c0011d7a:	e8 01 e8 fe ff       	call   c0000580 <strlen>
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	31 d2                	xor    edx,edx
c0011d84:	83 c4 10             	add    esp,0x10
c0011d87:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011d8b:	5b                   	pop    ebx
c0011d8c:	5e                   	pop    esi
c0011d8d:	5f                   	pop    edi
c0011d8e:	c3                   	ret    
c0011d8f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011d92:	83 ec 08             	sub    esp,0x8
c0011d95:	50                   	push   eax
c0011d96:	56                   	push   esi
c0011d97:	e8 b4 e8 fe ff       	call   c0000650 <strcpy>
c0011d9c:	58                   	pop    eax
c0011d9d:	5a                   	pop    edx
c0011d9e:	68 f9 45 02 c0       	push   0xc00245f9
c0011da3:	56                   	push   esi
c0011da4:	e8 c7 ea fe ff       	call   c0000870 <strcat>
c0011da9:	59                   	pop    ecx
c0011daa:	5b                   	pop    ebx
c0011dab:	57                   	push   edi
c0011dac:	56                   	push   esi
c0011dad:	e8 be ea fe ff       	call   c0000870 <strcat>
c0011db2:	83 c4 10             	add    esp,0x10
c0011db5:	31 c0                	xor    eax,eax
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	31 d2                	xor    edx,edx
c0011dbc:	5b                   	pop    ebx
c0011dbd:	5e                   	pop    esi
c0011dbe:	5f                   	pop    edi
c0011dbf:	c3                   	ret    

c0011dc0 <SysSetFatAttrib(regs*)>:
c0011dc0:	57                   	push   edi
c0011dc1:	56                   	push   esi
c0011dc2:	53                   	push   ebx
c0011dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011dc7:	83 ec 0c             	sub    esp,0xc
c0011dca:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011dcd:	68 14 01 00 00       	push   0x114
c0011dd2:	e8 d5 db ff ff       	call   c000f9ac <malloc>
c0011dd7:	83 c4 0c             	add    esp,0xc
c0011dda:	89 c3                	mov    ebx,eax
c0011ddc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011de1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011de4:	50                   	push   eax
c0011de5:	57                   	push   edi
c0011de6:	53                   	push   ebx
c0011de7:	e8 9c 63 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011dec:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011def:	83 c4 0c             	add    esp,0xc
c0011df2:	0f b6 d4             	movzx  edx,ah
c0011df5:	0f b6 c0             	movzx  eax,al
c0011df8:	52                   	push   edx
c0011df9:	50                   	push   eax
c0011dfa:	53                   	push   ebx
c0011dfb:	e8 0e 66 ff ff       	call   c000840e <File::chfatattr(unsigned char, unsigned char)>
c0011e00:	83 c4 10             	add    esp,0x10
c0011e03:	85 db                	test   ebx,ebx
c0011e05:	89 c6                	mov    esi,eax
c0011e07:	74 0c                	je     c0011e15 <SysSetFatAttrib(regs*)+0x55>
c0011e09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e0b:	83 ec 0c             	sub    esp,0xc
c0011e0e:	53                   	push   ebx
c0011e0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	5b                   	pop    ebx
c0011e16:	31 c0                	xor    eax,eax
c0011e18:	85 f6                	test   esi,esi
c0011e1a:	0f 95 c0             	setne  al
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	5e                   	pop    esi
c0011e20:	f7 d8                	neg    eax
c0011e22:	83 d2 00             	adc    edx,0x0
c0011e25:	f7 da                	neg    edx
c0011e27:	5f                   	pop    edi
c0011e28:	c3                   	ret    

c0011e29 <SysShutdown(regs*)>:
c0011e29:	83 ec 1c             	sub    esp,0x1c
c0011e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e30:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011e33:	85 c9                	test   ecx,ecx
c0011e35:	74 18                	je     c0011e4f <SysShutdown(regs*)+0x26>
c0011e37:	83 f9 01             	cmp    ecx,0x1
c0011e3a:	74 26                	je     c0011e62 <SysShutdown(regs*)+0x39>
c0011e3c:	83 f9 02             	cmp    ecx,0x2
c0011e3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e44:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e49:	74 24                	je     c0011e6f <SysShutdown(regs*)+0x46>
c0011e4b:	83 c4 1c             	add    esp,0x1c
c0011e4e:	c3                   	ret    
c0011e4f:	e8 aa e9 ff ff       	call   c00107fe <KeShutdown()>
c0011e54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e59:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e5e:	83 c4 1c             	add    esp,0x1c
c0011e61:	c3                   	ret    
c0011e62:	e8 cd e9 ff ff       	call   c0010834 <KeSleep()>
c0011e67:	31 c0                	xor    eax,eax
c0011e69:	31 d2                	xor    edx,edx
c0011e6b:	83 c4 1c             	add    esp,0x1c
c0011e6e:	c3                   	ret    
c0011e6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e77:	e8 e8 e9 ff ff       	call   c0010864 <KeRestart()>
c0011e7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e84:	eb c5                	jmp    c0011e4b <SysShutdown(regs*)+0x22>

c0011e86 <SysPipe(regs*)>:
c0011e86:	57                   	push   edi
c0011e87:	56                   	push   esi
c0011e88:	53                   	push   ebx
c0011e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8d:	83 ec 0c             	sub    esp,0xc
c0011e90:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011e93:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e96:	6a 20                	push   0x20
c0011e98:	e8 0f db ff ff       	call   c000f9ac <malloc>
c0011e9d:	89 c3                	mov    ebx,eax
c0011e9f:	58                   	pop    eax
c0011ea0:	5a                   	pop    edx
c0011ea1:	68 00 50 00 00       	push   0x5000
c0011ea6:	53                   	push   ebx
c0011ea7:	e8 d2 e7 ff ff       	call   c001067e <Pipe::Pipe(int)>
c0011eac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011eaf:	e8 e8 10 00 00       	call   c0012f9c <UnixFile::getFileDescriptor()>
c0011eb4:	89 07                	mov    DWORD PTR [edi],eax
c0011eb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011eb9:	e8 de 10 00 00       	call   c0012f9c <UnixFile::getFileDescriptor()>
c0011ebe:	83 c4 10             	add    esp,0x10
c0011ec1:	31 d2                	xor    edx,edx
c0011ec3:	89 06                	mov    DWORD PTR [esi],eax
c0011ec5:	31 c0                	xor    eax,eax
c0011ec7:	5b                   	pop    ebx
c0011ec8:	5e                   	pop    esi
c0011ec9:	5f                   	pop    edi
c0011eca:	c3                   	ret    

c0011ecb <SysGetUnixTime(regs*)>:
c0011ecb:	53                   	push   ebx
c0011ecc:	83 ec 10             	sub    esp,0x10
c0011ecf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ed3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ed6:	52                   	push   edx
c0011ed7:	68 fb 45 02 c0       	push   0xc00245fb
c0011edc:	e8 85 50 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011ee1:	83 c4 10             	add    esp,0x10
c0011ee4:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011ee8:	74 3b                	je     c0011f25 <SysGetUnixTime(regs*)+0x5a>
c0011eea:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011ef8:	50                   	push   eax
c0011ef9:	e8 3c 72 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011efe:	83 c4 0c             	add    esp,0xc
c0011f01:	52                   	push   edx
c0011f02:	50                   	push   eax
c0011f03:	68 0f 46 02 c0       	push   0xc002460f
c0011f08:	e8 59 50 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011f0d:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0011f12:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011f18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011f1c:	83 c4 18             	add    esp,0x18
c0011f1f:	5b                   	pop    ebx
c0011f20:	e9 15 72 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011f25:	6b 0d 54 bb 02 c0 64 	imul   ecx,DWORD PTR ds:0xc002bb54,0x64
c0011f2c:	b8 64 00 00 00       	mov    eax,0x64
c0011f31:	f7 25 50 bb 02 c0    	mul    DWORD PTR ds:0xc002bb50
c0011f37:	83 c4 08             	add    esp,0x8
c0011f3a:	5b                   	pop    ebx
c0011f3b:	01 ca                	add    edx,ecx
c0011f3d:	c3                   	ret    

c0011f3e <string_ends_with(char const*, char const*)>:
c0011f3e:	57                   	push   edi
c0011f3f:	56                   	push   esi
c0011f40:	53                   	push   ebx
c0011f41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f45:	83 ec 0c             	sub    esp,0xc
c0011f48:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011f4c:	53                   	push   ebx
c0011f4d:	e8 2e e6 fe ff       	call   c0000580 <strlen>
c0011f52:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f55:	89 c6                	mov    esi,eax
c0011f57:	e8 24 e6 fe ff       	call   c0000580 <strlen>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	31 d2                	xor    edx,edx
c0011f61:	39 c6                	cmp    esi,eax
c0011f63:	7d 06                	jge    c0011f6b <string_ends_with(char const*, char const*)+0x2d>
c0011f65:	5b                   	pop    ebx
c0011f66:	89 d0                	mov    eax,edx
c0011f68:	5e                   	pop    esi
c0011f69:	5f                   	pop    edi
c0011f6a:	c3                   	ret    
c0011f6b:	83 ec 08             	sub    esp,0x8
c0011f6e:	29 c6                	sub    esi,eax
c0011f70:	57                   	push   edi
c0011f71:	01 f3                	add    ebx,esi
c0011f73:	53                   	push   ebx
c0011f74:	e8 07 e8 fe ff       	call   c0000780 <strcmp>
c0011f79:	83 c4 10             	add    esp,0x10
c0011f7c:	31 d2                	xor    edx,edx
c0011f7e:	5b                   	pop    ebx
c0011f7f:	5e                   	pop    esi
c0011f80:	85 c0                	test   eax,eax
c0011f82:	5f                   	pop    edi
c0011f83:	0f 94 c2             	sete   dl
c0011f86:	89 d0                	mov    eax,edx
c0011f88:	c3                   	ret    

c0011f89 <SysOpen(regs*)>:
c0011f89:	56                   	push   esi
c0011f8a:	53                   	push   ebx
c0011f8b:	81 ec 04 01 00 00    	sub    esp,0x104
c0011f91:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011f98:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f9b:	85 c0                	test   eax,eax
c0011f9d:	0f 84 c4 01 00 00    	je     c0012167 <SysOpen(regs*)+0x1de>
c0011fa3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011fa6:	85 c0                	test   eax,eax
c0011fa8:	0f 84 b9 01 00 00    	je     c0012167 <SysOpen(regs*)+0x1de>
c0011fae:	6a 00                	push   0x0
c0011fb0:	68 16 46 02 c0       	push   0xc0024616
c0011fb5:	50                   	push   eax
c0011fb6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011fba:	56                   	push   esi
c0011fbb:	e8 9c 5e ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011fc0:	89 34 24             	mov    DWORD PTR [esp],esi
c0011fc3:	e8 b8 e5 fe ff       	call   c0000580 <strlen>
c0011fc8:	83 c4 10             	add    esp,0x10
c0011fcb:	83 e8 01             	sub    eax,0x1
c0011fce:	74 29                	je     c0011ff9 <SysOpen(regs*)+0x70>
c0011fd0:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011fd4:	83 fa 2e             	cmp    edx,0x2e
c0011fd7:	74 1c                	je     c0011ff5 <SysOpen(regs*)+0x6c>
c0011fd9:	83 fa 3a             	cmp    edx,0x3a
c0011fdc:	74 17                	je     c0011ff5 <SysOpen(regs*)+0x6c>
c0011fde:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011fe2:	83 e8 01             	sub    eax,0x1
c0011fe5:	74 12                	je     c0011ff9 <SysOpen(regs*)+0x70>
c0011fe7:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011feb:	83 fa 3a             	cmp    edx,0x3a
c0011fee:	74 05                	je     c0011ff5 <SysOpen(regs*)+0x6c>
c0011ff0:	83 fa 2e             	cmp    edx,0x2e
c0011ff3:	75 e9                	jne    c0011fde <SysOpen(regs*)+0x55>
c0011ff5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011ff9:	83 ec 08             	sub    esp,0x8
c0011ffc:	68 1a 46 02 c0       	push   0xc002461a
c0012001:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012004:	50                   	push   eax
c0012005:	e8 34 ff ff ff       	call   c0011f3e <string_ends_with(char const*, char const*)>
c001200a:	83 c4 10             	add    esp,0x10
c001200d:	85 c0                	test   eax,eax
c001200f:	74 1d                	je     c001202e <SysOpen(regs*)+0xa5>
c0012011:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012014:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001201a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012021:	81 c4 04 01 00 00    	add    esp,0x104
c0012027:	31 c0                	xor    eax,eax
c0012029:	5b                   	pop    ebx
c001202a:	31 d2                	xor    edx,edx
c001202c:	5e                   	pop    esi
c001202d:	c3                   	ret    
c001202e:	83 ec 08             	sub    esp,0x8
c0012031:	68 1f 46 02 c0       	push   0xc002461f
c0012036:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012039:	50                   	push   eax
c001203a:	e8 ff fe ff ff       	call   c0011f3e <string_ends_with(char const*, char const*)>
c001203f:	83 c4 10             	add    esp,0x10
c0012042:	85 c0                	test   eax,eax
c0012044:	75 cb                	jne    c0012011 <SysOpen(regs*)+0x88>
c0012046:	83 ec 08             	sub    esp,0x8
c0012049:	68 1b 46 02 c0       	push   0xc002461b
c001204e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012051:	50                   	push   eax
c0012052:	e8 29 e7 fe ff       	call   c0000780 <strcmp>
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	85 c0                	test   eax,eax
c001205c:	74 b3                	je     c0012011 <SysOpen(regs*)+0x88>
c001205e:	83 ec 08             	sub    esp,0x8
c0012061:	68 1a 46 02 c0       	push   0xc002461a
c0012066:	56                   	push   esi
c0012067:	e8 d2 fe ff ff       	call   c0011f3e <string_ends_with(char const*, char const*)>
c001206c:	83 c4 10             	add    esp,0x10
c001206f:	85 c0                	test   eax,eax
c0012071:	75 9e                	jne    c0012011 <SysOpen(regs*)+0x88>
c0012073:	83 ec 08             	sub    esp,0x8
c0012076:	68 24 46 02 c0       	push   0xc0024624
c001207b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001207e:	50                   	push   eax
c001207f:	e8 ba fe ff ff       	call   c0011f3e <string_ends_with(char const*, char const*)>
c0012084:	83 c4 10             	add    esp,0x10
c0012087:	85 c0                	test   eax,eax
c0012089:	0f 85 eb 00 00 00    	jne    c001217a <SysOpen(regs*)+0x1f1>
c001208f:	83 ec 08             	sub    esp,0x8
c0012092:	68 29 46 02 c0       	push   0xc0024629
c0012097:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001209a:	50                   	push   eax
c001209b:	e8 9e fe ff ff       	call   c0011f3e <string_ends_with(char const*, char const*)>
c00120a0:	83 c4 10             	add    esp,0x10
c00120a3:	85 c0                	test   eax,eax
c00120a5:	0f 85 cf 00 00 00    	jne    c001217a <SysOpen(regs*)+0x1f1>
c00120ab:	83 ec 08             	sub    esp,0x8
c00120ae:	68 25 46 02 c0       	push   0xc0024625
c00120b3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00120b6:	51                   	push   ecx
c00120b7:	e8 c4 e6 fe ff       	call   c0000780 <strcmp>
c00120bc:	83 c4 10             	add    esp,0x10
c00120bf:	85 c0                	test   eax,eax
c00120c1:	0f 84 b3 00 00 00    	je     c001217a <SysOpen(regs*)+0x1f1>
c00120c7:	83 ec 08             	sub    esp,0x8
c00120ca:	68 24 46 02 c0       	push   0xc0024624
c00120cf:	56                   	push   esi
c00120d0:	e8 69 fe ff ff       	call   c0011f3e <string_ends_with(char const*, char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	85 c0                	test   eax,eax
c00120da:	0f 85 9a 00 00 00    	jne    c001217a <SysOpen(regs*)+0x1f1>
c00120e0:	83 ec 0c             	sub    esp,0xc
c00120e3:	68 14 01 00 00       	push   0x114
c00120e8:	e8 bf d8 ff ff       	call   c000f9ac <malloc>
c00120ed:	83 c4 0c             	add    esp,0xc
c00120f0:	89 c6                	mov    esi,eax
c00120f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120fa:	50                   	push   eax
c00120fb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00120fe:	52                   	push   edx
c00120ff:	56                   	push   esi
c0012100:	e8 83 60 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0012105:	83 c4 10             	add    esp,0x10
c0012108:	85 f6                	test   esi,esi
c001210a:	74 5b                	je     c0012167 <SysOpen(regs*)+0x1de>
c001210c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001210f:	0f b6 c2             	movzx  eax,dl
c0012112:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012115:	89 d0                	mov    eax,edx
c0012117:	83 e0 01             	and    eax,0x1
c001211a:	f6 c2 02             	test   dl,0x2
c001211d:	74 03                	je     c0012122 <SysOpen(regs*)+0x199>
c001211f:	83 c8 02             	or     eax,0x2
c0012122:	f6 c2 04             	test   dl,0x4
c0012125:	74 03                	je     c001212a <SysOpen(regs*)+0x1a1>
c0012127:	83 c8 04             	or     eax,0x4
c001212a:	f6 c2 08             	test   dl,0x8
c001212d:	74 03                	je     c0012132 <SysOpen(regs*)+0x1a9>
c001212f:	83 c8 0a             	or     eax,0xa
c0012132:	80 e2 10             	and    dl,0x10
c0012135:	74 03                	je     c001213a <SysOpen(regs*)+0x1b1>
c0012137:	83 c8 12             	or     eax,0x12
c001213a:	83 ec 08             	sub    esp,0x8
c001213d:	50                   	push   eax
c001213e:	56                   	push   esi
c001213f:	e8 62 60 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0012144:	83 c4 10             	add    esp,0x10
c0012147:	85 c0                	test   eax,eax
c0012149:	75 1c                	jne    c0012167 <SysOpen(regs*)+0x1de>
c001214b:	83 ec 0c             	sub    esp,0xc
c001214e:	56                   	push   esi
c001214f:	e8 48 0e 00 00       	call   c0012f9c <UnixFile::getFileDescriptor()>
c0012154:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012157:	83 c4 10             	add    esp,0x10
c001215a:	89 02                	mov    DWORD PTR [edx],eax
c001215c:	c1 f8 1f             	sar    eax,0x1f
c001215f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012162:	e9 ba fe ff ff       	jmp    c0012021 <SysOpen(regs*)+0x98>
c0012167:	81 c4 04 01 00 00    	add    esp,0x104
c001216d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012172:	5b                   	pop    ebx
c0012173:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012178:	5e                   	pop    esi
c0012179:	c3                   	ret    
c001217a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001217d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012183:	e9 92 fe ff ff       	jmp    c001201a <SysOpen(regs*)+0x91>

c0012188 <KeSystemCall(regs*, void*)>:
c0012188:	53                   	push   ebx
c0012189:	83 ec 08             	sub    esp,0x8
c001218c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012190:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012193:	83 f8 48             	cmp    eax,0x48
c0012196:	77 16                	ja     c00121ae <KeSystemCall(regs*, void*)+0x26>
c0012198:	8b 14 85 00 69 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9700]
c001219f:	85 d2                	test   edx,edx
c00121a1:	74 0b                	je     c00121ae <KeSystemCall(regs*, void*)+0x26>
c00121a3:	83 ec 0c             	sub    esp,0xc
c00121a6:	53                   	push   ebx
c00121a7:	ff d2                	call   edx
c00121a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00121ac:	eb 0d                	jmp    c00121bb <KeSystemCall(regs*, void*)+0x33>
c00121ae:	52                   	push   edx
c00121af:	52                   	push   edx
c00121b0:	50                   	push   eax
c00121b1:	68 2e 46 02 c0       	push   0xc002462e
c00121b6:	e8 ab 4d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00121c3:	83 c4 08             	add    esp,0x8
c00121c6:	31 d2                	xor    edx,edx
c00121c8:	5b                   	pop    ebx
c00121c9:	c3                   	ret    

c00121ca <VgaText::isAtty()>:
c00121ca:	b0 01                	mov    al,0x1
c00121cc:	c3                   	ret    
c00121cd:	90                   	nop

c00121ce <VgaText::~VgaText()>:
c00121ce:	83 ec 0c             	sub    esp,0xc
c00121d1:	ba a8 46 02 c0       	mov    edx,0xc00246a8
c00121d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121da:	89 10                	mov    DWORD PTR [eax],edx
c00121dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121e0:	83 ec 0c             	sub    esp,0xc
c00121e3:	50                   	push   eax
c00121e4:	e8 a1 0f 00 00       	call   c001318a <UnixFile::~UnixFile()>
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	90                   	nop
c00121ed:	83 c4 0c             	add    esp,0xc
c00121f0:	c3                   	ret    
c00121f1:	90                   	nop

c00121f2 <VgaText::~VgaText()>:
c00121f2:	83 ec 0c             	sub    esp,0xc
c00121f5:	83 ec 0c             	sub    esp,0xc
c00121f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121fc:	e8 cd ff ff ff       	call   c00121ce <VgaText::~VgaText()>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	83 ec 08             	sub    esp,0x8
c0012207:	68 84 01 00 00       	push   0x184
c001220c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012210:	e8 e0 b0 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0012215:	83 c4 10             	add    esp,0x10
c0012218:	83 c4 0c             	add    esp,0xc
c001221b:	c3                   	ret    

c001221c <VgaText::read(unsigned long long, void*, int*)>:
c001221c:	83 ec 10             	sub    esp,0x10
c001221f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012223:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001222b:	e8 19 83 ff ff       	call   c000a549 <readKeyboard(VgaText*, char*, unsigned long)>
c0012230:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012234:	89 02                	mov    DWORD PTR [edx],eax
c0012236:	31 c0                	xor    eax,eax
c0012238:	83 c4 1c             	add    esp,0x1c
c001223b:	c3                   	ret    

c001223c <setTerminalScrollLock(bool)>:
c001223c:	c3                   	ret    

c001223d <doTerminalCycle()>:
c001223d:	c3                   	ret    

c001223e <addToTerminalCycle(VgaText*)>:
c001223e:	c3                   	ret    

c001223f <scrollTerminalScrollLock(int)>:
c001223f:	c3                   	ret    

c0012240 <VgaText::updateTitle()>:
c0012240:	c3                   	ret    
c0012241:	90                   	nop

c0012242 <VgaText::load()>:
c0012242:	c3                   	ret    
c0012243:	90                   	nop

c0012244 <VgaText::updateCursor()>:
c0012244:	83 ec 14             	sub    esp,0x14
c0012247:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001224b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001224e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012251:	e8 76 95 00 00       	call   c001b7cc <HalConsoleCursorUpdate(int, int)>
c0012256:	83 c4 1c             	add    esp,0x1c
c0012259:	c3                   	ret    

c001225a <VgaText::doANSI_SGR(int)>:
c001225a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001225e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012262:	85 d2                	test   edx,edx
c0012264:	75 0b                	jne    c0012271 <VgaText::doANSI_SGR(int)+0x17>
c0012266:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012269:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001226c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001226f:	eb 59                	jmp    c00122ca <VgaText::doANSI_SGR(int)+0x70>
c0012271:	83 fa 07             	cmp    edx,0x7
c0012274:	75 0b                	jne    c0012281 <VgaText::doANSI_SGR(int)+0x27>
c0012276:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012279:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001227c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001227f:	eb 49                	jmp    c00122ca <VgaText::doANSI_SGR(int)+0x70>
c0012281:	83 fa 1b             	cmp    edx,0x1b
c0012284:	74 e0                	je     c0012266 <VgaText::doANSI_SGR(int)+0xc>
c0012286:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012289:	83 f9 07             	cmp    ecx,0x7
c001228c:	77 09                	ja     c0012297 <VgaText::doANSI_SGR(int)+0x3d>
c001228e:	8b 14 8d 60 6a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd95a0]
c0012295:	eb 20                	jmp    c00122b7 <VgaText::doANSI_SGR(int)+0x5d>
c0012297:	8d 4a d8             	lea    ecx,[edx-0x28]
c001229a:	83 f9 07             	cmp    ecx,0x7
c001229d:	77 09                	ja     c00122a8 <VgaText::doANSI_SGR(int)+0x4e>
c001229f:	8b 14 8d 60 6a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd95a0]
c00122a6:	eb 22                	jmp    c00122ca <VgaText::doANSI_SGR(int)+0x70>
c00122a8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00122ab:	83 f9 07             	cmp    ecx,0x7
c00122ae:	77 0b                	ja     c00122bb <VgaText::doANSI_SGR(int)+0x61>
c00122b0:	8b 14 95 18 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd96e8]
c00122b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00122ba:	c3                   	ret    
c00122bb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00122be:	83 f9 07             	cmp    ecx,0x7
c00122c1:	77 0a                	ja     c00122cd <VgaText::doANSI_SGR(int)+0x73>
c00122c3:	8b 14 95 f0 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9710]
c00122ca:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00122cd:	c3                   	ret    

c00122ce <VgaText::setDefaultBgColour(VgaColour)>:
c00122ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00122d9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00122dc:	c3                   	ret    
c00122dd:	90                   	nop

c00122de <VgaText::setDefaultFgColour(VgaColour)>:
c00122de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122e6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00122e9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00122ec:	c3                   	ret    
c00122ed:	90                   	nop

c00122ee <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00122ee:	53                   	push   ebx
c00122ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00122f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00122f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122fb:	51                   	push   ecx
c00122fc:	e8 cd ff ff ff       	call   c00122ce <VgaText::setDefaultBgColour(VgaColour)>
c0012301:	58                   	pop    eax
c0012302:	5a                   	pop    edx
c0012303:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012307:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001230b:	5b                   	pop    ebx
c001230c:	eb d0                	jmp    c00122de <VgaText::setDefaultFgColour(VgaColour)>

c001230e <VgaText::setTitleTextColour(VgaColour)>:
c001230e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012312:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012316:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012319:	c3                   	ret    

c001231a <VgaText::setTitleColour(VgaColour)>:
c001231a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001231e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012322:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012325:	c3                   	ret    

c0012326 <VgaText::setTitle(char*)>:
c0012326:	c3                   	ret    
c0012327:	90                   	nop

c0012328 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001232c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012331:	83 e0 0f             	and    eax,0xf
c0012334:	c1 e2 04             	shl    edx,0x4
c0012337:	09 d0                	or     eax,edx
c0012339:	c3                   	ret    

c001233a <VgaText::scrollScreen()>:
c001233a:	55                   	push   ebp
c001233b:	57                   	push   edi
c001233c:	56                   	push   esi
c001233d:	be 01 00 00 00       	mov    esi,0x1
c0012342:	53                   	push   ebx
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001234a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001234d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012353:	31 ff                	xor    edi,edi
c0012355:	01 e9                	add    ecx,ebp
c0012357:	8a 01                	mov    al,BYTE PTR [ecx]
c0012359:	83 fe 18             	cmp    esi,0x18
c001235c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012362:	75 20                	jne    c0012384 <VgaText::scrollScreen()+0x4a>
c0012364:	f7 c7 01 00 00 00    	test   edi,0x1
c001236a:	74 15                	je     c0012381 <VgaText::scrollScreen()+0x47>
c001236c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012370:	50                   	push   eax
c0012371:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012375:	50                   	push   eax
c0012376:	e8 ad ff ff ff       	call   c0012328 <VgaText::combineColours(unsigned char, unsigned char)>
c001237b:	5a                   	pop    edx
c001237c:	5a                   	pop    edx
c001237d:	88 01                	mov    BYTE PTR [ecx],al
c001237f:	eb 03                	jmp    c0012384 <VgaText::scrollScreen()+0x4a>
c0012381:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012384:	47                   	inc    edi
c0012385:	41                   	inc    ecx
c0012386:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001238c:	75 c9                	jne    c0012357 <VgaText::scrollScreen()+0x1d>
c001238e:	46                   	inc    esi
c001238f:	83 fe 19             	cmp    esi,0x19
c0012392:	75 b9                	jne    c001234d <VgaText::scrollScreen()+0x13>
c0012394:	39 1d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,ebx
c001239a:	75 1f                	jne    c00123bb <VgaText::scrollScreen()+0x81>
c001239c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00123a0:	74 05                	je     c00123a7 <VgaText::scrollScreen()+0x6d>
c00123a2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00123a5:	eb 14                	jmp    c00123bb <VgaText::scrollScreen()+0x81>
c00123a7:	50                   	push   eax
c00123a8:	50                   	push   eax
c00123a9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00123ad:	50                   	push   eax
c00123ae:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00123b2:	50                   	push   eax
c00123b3:	e8 a8 92 00 00       	call   c001b660 <HalConsoleScroll(int, int)>
c00123b8:	83 c4 10             	add    esp,0x10
c00123bb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00123bf:	83 c4 0c             	add    esp,0xc
c00123c2:	5b                   	pop    ebx
c00123c3:	5e                   	pop    esi
c00123c4:	5f                   	pop    edi
c00123c5:	5d                   	pop    ebp
c00123c6:	e9 79 fe ff ff       	jmp    c0012244 <VgaText::updateCursor()>
c00123cb:	90                   	nop

c00123cc <VgaText::combineCharAndColour(char, unsigned char)>:
c00123cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00123d1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00123d6:	c1 e0 08             	shl    eax,0x8
c00123d9:	09 d0                	or     eax,edx
c00123db:	c3                   	ret    

c00123dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00123dc:	55                   	push   ebp
c00123dd:	57                   	push   edi
c00123de:	56                   	push   esi
c00123df:	53                   	push   ebx
c00123e0:	83 ec 1c             	sub    esp,0x1c
c00123e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00123eb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00123ef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00123f3:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00123f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123fe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012402:	85 ed                	test   ebp,ebp
c0012404:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012408:	75 14                	jne    c001241e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001240a:	c7 44 24 30 42 46 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024642
c0012412:	83 c4 1c             	add    esp,0x1c
c0012415:	5b                   	pop    ebx
c0012416:	5e                   	pop    esi
c0012417:	5f                   	pop    edi
c0012418:	5d                   	pop    ebp
c0012419:	e9 e4 d9 ff ff       	jmp    c000fe02 <KePanic(char const*)>
c001241e:	50                   	push   eax
c001241f:	50                   	push   eax
c0012420:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012425:	50                   	push   eax
c0012426:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001242b:	50                   	push   eax
c001242c:	e8 f7 fe ff ff       	call   c0012328 <VgaText::combineColours(unsigned char, unsigned char)>
c0012431:	5a                   	pop    edx
c0012432:	5a                   	pop    edx
c0012433:	0f b6 c0             	movzx  eax,al
c0012436:	0f be c9             	movsx  ecx,cl
c0012439:	50                   	push   eax
c001243a:	51                   	push   ecx
c001243b:	e8 8c ff ff ff       	call   c00123cc <VgaText::combineCharAndColour(char, unsigned char)>
c0012440:	6b d6 50             	imul   edx,esi,0x50
c0012443:	83 c4 10             	add    esp,0x10
c0012446:	01 da                	add    edx,ebx
c0012448:	0f b7 d2             	movzx  edx,dx
c001244b:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012450:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c0012456:	75 28                	jne    c0012480 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012458:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001245c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012460:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012464:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012468:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001246c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012470:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012474:	83 c4 1c             	add    esp,0x1c
c0012477:	5b                   	pop    ebx
c0012478:	5e                   	pop    esi
c0012479:	5f                   	pop    edi
c001247a:	5d                   	pop    ebp
c001247b:	e9 e8 92 00 00       	jmp    c001b768 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012480:	83 c4 1c             	add    esp,0x1c
c0012483:	5b                   	pop    ebx
c0012484:	5e                   	pop    esi
c0012485:	5f                   	pop    edi
c0012486:	5d                   	pop    ebp
c0012487:	c3                   	ret    

c0012488 <VgaText::getCursorX()>:
c0012488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001248c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001248f:	c3                   	ret    

c0012490 <VgaText::getCursorY()>:
c0012490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012494:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012497:	c3                   	ret    

c0012498 <VgaText::setCursor(int, int)>:
c0012498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001249c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00124a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00124aa:	e9 95 fd ff ff       	jmp    c0012244 <VgaText::updateCursor()>

c00124af <setActiveTerminal(VgaText*)>:
c00124af:	53                   	push   ebx
c00124b0:	83 ec 08             	sub    esp,0x8
c00124b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124b7:	85 db                	test   ebx,ebx
c00124b9:	75 11                	jne    c00124cc <setActiveTerminal(VgaText*)+0x1d>
c00124bb:	c7 44 24 10 52 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024652
c00124c3:	83 c4 08             	add    esp,0x8
c00124c6:	5b                   	pop    ebx
c00124c7:	e9 36 d9 ff ff       	jmp    c000fe02 <KePanic(char const*)>
c00124cc:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c00124d1:	85 c0                	test   eax,eax
c00124d3:	74 0c                	je     c00124e1 <setActiveTerminal(VgaText*)+0x32>
c00124d5:	83 ec 0c             	sub    esp,0xc
c00124d8:	50                   	push   eax
c00124d9:	e8 66 fd ff ff       	call   c0012244 <VgaText::updateCursor()>
c00124de:	83 c4 10             	add    esp,0x10
c00124e1:	50                   	push   eax
c00124e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00124e5:	89 1d b4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b4,ebx
c00124eb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00124ee:	53                   	push   ebx
c00124ef:	e8 a4 ff ff ff       	call   c0012498 <VgaText::setCursor(int, int)>
c00124f4:	83 c4 18             	add    esp,0x18
c00124f7:	5b                   	pop    ebx
c00124f8:	c3                   	ret    
c00124f9:	90                   	nop

c00124fa <VgaText::clearScreen()>:
c00124fa:	57                   	push   edi
c00124fb:	56                   	push   esi
c00124fc:	31 f6                	xor    esi,esi
c00124fe:	53                   	push   ebx
c00124ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012503:	52                   	push   edx
c0012504:	6a 00                	push   0x0
c0012506:	6a 00                	push   0x0
c0012508:	53                   	push   ebx
c0012509:	e8 8a ff ff ff       	call   c0012498 <VgaText::setCursor(int, int)>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012518:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001251b:	7e 20                	jle    c001253d <VgaText::clearScreen()+0x43>
c001251d:	31 ff                	xor    edi,edi
c001251f:	50                   	push   eax
c0012520:	50                   	push   eax
c0012521:	56                   	push   esi
c0012522:	57                   	push   edi
c0012523:	47                   	inc    edi
c0012524:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012527:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001252a:	6a 20                	push   0x20
c001252c:	53                   	push   ebx
c001252d:	e8 aa fe ff ff       	call   c00123dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012532:	83 c4 20             	add    esp,0x20
c0012535:	83 ff 50             	cmp    edi,0x50
c0012538:	75 e5                	jne    c001251f <VgaText::clearScreen()+0x25>
c001253a:	46                   	inc    esi
c001253b:	eb db                	jmp    c0012518 <VgaText::clearScreen()+0x1e>
c001253d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012544:	5b                   	pop    ebx
c0012545:	5e                   	pop    esi
c0012546:	5f                   	pop    edi
c0012547:	c3                   	ret    

c0012548 <VgaText::setCursorX(int)>:
c0012548:	83 ec 10             	sub    esp,0x10
c001254b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001254f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012556:	50                   	push   eax
c0012557:	e8 3c ff ff ff       	call   c0012498 <VgaText::setCursor(int, int)>
c001255c:	83 c4 1c             	add    esp,0x1c
c001255f:	c3                   	ret    

c0012560 <VgaText::setCursorY(int)>:
c0012560:	83 ec 10             	sub    esp,0x10
c0012563:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012567:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001256b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001256e:	50                   	push   eax
c001256f:	e8 24 ff ff ff       	call   c0012498 <VgaText::setCursor(int, int)>
c0012574:	83 c4 1c             	add    esp,0x1c
c0012577:	c3                   	ret    

c0012578 <VgaText::incrementCursor(bool)>:
c0012578:	56                   	push   esi
c0012579:	53                   	push   ebx
c001257a:	51                   	push   ecx
c001257b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001257f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012583:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012586:	40                   	inc    eax
c0012587:	83 f8 50             	cmp    eax,0x50
c001258a:	74 05                	je     c0012591 <VgaText::incrementCursor(bool)+0x19>
c001258c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001258f:	eb 24                	jmp    c00125b5 <VgaText::incrementCursor(bool)+0x3d>
c0012591:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012598:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001259b:	8d 50 01             	lea    edx,[eax+0x1]
c001259e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00125a1:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00125a4:	75 0f                	jne    c00125b5 <VgaText::incrementCursor(bool)+0x3d>
c00125a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00125a9:	83 ec 0c             	sub    esp,0xc
c00125ac:	53                   	push   ebx
c00125ad:	e8 88 fd ff ff       	call   c001233a <VgaText::scrollScreen()>
c00125b2:	83 c4 10             	add    esp,0x10
c00125b5:	89 f0                	mov    eax,esi
c00125b7:	84 c0                	test   al,al
c00125b9:	74 0c                	je     c00125c7 <VgaText::incrementCursor(bool)+0x4f>
c00125bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00125bf:	5a                   	pop    edx
c00125c0:	5b                   	pop    ebx
c00125c1:	5e                   	pop    esi
c00125c2:	e9 7d fc ff ff       	jmp    c0012244 <VgaText::updateCursor()>
c00125c7:	58                   	pop    eax
c00125c8:	5b                   	pop    ebx
c00125c9:	5e                   	pop    esi
c00125ca:	c3                   	ret    
c00125cb:	90                   	nop

c00125cc <VgaText::decrementCursor(bool)>:
c00125cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125d4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00125d7:	85 c0                	test   eax,eax
c00125d9:	74 04                	je     c00125df <VgaText::decrementCursor(bool)+0x13>
c00125db:	48                   	dec    eax
c00125dc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00125df:	84 c9                	test   cl,cl
c00125e1:	74 09                	je     c00125ec <VgaText::decrementCursor(bool)+0x20>
c00125e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125e7:	e9 58 fc ff ff       	jmp    c0012244 <VgaText::updateCursor()>
c00125ec:	c3                   	ret    
c00125ed:	90                   	nop

c00125ee <VgaText::putchar(char, VgaColour, VgaColour)>:
c00125ee:	53                   	push   ebx
c00125ef:	83 ec 08             	sub    esp,0x8
c00125f2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00125f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012603:	83 f8 07             	cmp    eax,0x7
c0012606:	75 21                	jne    c0012629 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012608:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012610:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012618:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012620:	83 c4 08             	add    esp,0x8
c0012623:	5b                   	pop    ebx
c0012624:	e9 02 64 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012629:	83 f8 0d             	cmp    eax,0xd
c001262c:	75 09                	jne    c0012637 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001262e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012635:	eb 2d                	jmp    c0012664 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012637:	83 f8 0a             	cmp    eax,0xa
c001263a:	75 31                	jne    c001266d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001263c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012643:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012646:	8d 50 01             	lea    edx,[eax+0x1]
c0012649:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001264c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001264f:	75 0f                	jne    c0012660 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012651:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	53                   	push   ebx
c0012658:	e8 dd fc ff ff       	call   c001233a <VgaText::scrollScreen()>
c001265d:	83 c4 10             	add    esp,0x10
c0012660:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012664:	83 c4 08             	add    esp,0x8
c0012667:	5b                   	pop    ebx
c0012668:	e9 d7 fb ff ff       	jmp    c0012244 <VgaText::updateCursor()>
c001266d:	83 f8 08             	cmp    eax,0x8
c0012670:	75 25                	jne    c0012697 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012672:	50                   	push   eax
c0012673:	50                   	push   eax
c0012674:	6a 01                	push   0x1
c0012676:	53                   	push   ebx
c0012677:	e8 50 ff ff ff       	call   c00125cc <VgaText::decrementCursor(bool)>
c001267c:	5a                   	pop    edx
c001267d:	59                   	pop    ecx
c001267e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012681:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012684:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012687:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001268a:	6a 20                	push   0x20
c001268c:	53                   	push   ebx
c001268d:	e8 4a fd ff ff       	call   c00123dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012692:	83 c4 28             	add    esp,0x28
c0012695:	5b                   	pop    ebx
c0012696:	c3                   	ret    
c0012697:	83 ec 08             	sub    esp,0x8
c001269a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001269d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00126a0:	51                   	push   ecx
c00126a1:	52                   	push   edx
c00126a2:	50                   	push   eax
c00126a3:	53                   	push   ebx
c00126a4:	e8 33 fd ff ff       	call   c00123dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00126a9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00126ad:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00126b5:	83 c4 28             	add    esp,0x28
c00126b8:	5b                   	pop    ebx
c00126b9:	e9 ba fe ff ff       	jmp    c0012578 <VgaText::incrementCursor(bool)>

c00126be <VgaText::putchar(char)>:
c00126be:	57                   	push   edi
c00126bf:	56                   	push   esi
c00126c0:	53                   	push   ebx
c00126c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00126c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126c9:	0f be c2             	movsx  eax,dl
c00126cc:	83 f8 5b             	cmp    eax,0x5b
c00126cf:	75 18                	jne    c00126e9 <VgaText::putchar(char)+0x2b>
c00126d1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00126d5:	74 20                	je     c00126f7 <VgaText::putchar(char)+0x39>
c00126d7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00126dd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00126e4:	e9 b8 00 00 00       	jmp    c00127a1 <VgaText::putchar(char)+0xe3>
c00126e9:	83 f8 1b             	cmp    eax,0x1b
c00126ec:	75 09                	jne    c00126f7 <VgaText::putchar(char)+0x39>
c00126ee:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00126f2:	e9 aa 00 00 00       	jmp    c00127a1 <VgaText::putchar(char)+0xe3>
c00126f7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00126fb:	89 f9                	mov    ecx,edi
c00126fd:	84 c9                	test   cl,cl
c00126ff:	0f 84 8c 00 00 00    	je     c0012791 <VgaText::putchar(char)+0xd3>
c0012705:	8d 4a c0             	lea    ecx,[edx-0x40]
c0012708:	80 f9 3e             	cmp    cl,0x3e
c001270b:	77 70                	ja     c001277d <VgaText::putchar(char)+0xbf>
c001270d:	83 f8 6d             	cmp    eax,0x6d
c0012710:	75 3f                	jne    c0012751 <VgaText::putchar(char)+0x93>
c0012712:	31 f6                	xor    esi,esi
c0012714:	31 d2                	xor    edx,edx
c0012716:	31 c0                	xor    eax,eax
c0012718:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001271b:	7e 25                	jle    c0012742 <VgaText::putchar(char)+0x84>
c001271d:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012722:	83 fa 3b             	cmp    edx,0x3b
c0012725:	75 0f                	jne    c0012736 <VgaText::putchar(char)+0x78>
c0012727:	50                   	push   eax
c0012728:	53                   	push   ebx
c0012729:	e8 2c fb ff ff       	call   c001225a <VgaText::doANSI_SGR(int)>
c001272e:	31 d2                	xor    edx,edx
c0012730:	59                   	pop    ecx
c0012731:	58                   	pop    eax
c0012732:	31 c0                	xor    eax,eax
c0012734:	eb 09                	jmp    c001273f <VgaText::putchar(char)+0x81>
c0012736:	6b c0 0a             	imul   eax,eax,0xa
c0012739:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001273d:	89 fa                	mov    edx,edi
c001273f:	46                   	inc    esi
c0012740:	eb d6                	jmp    c0012718 <VgaText::putchar(char)+0x5a>
c0012742:	84 d2                	test   dl,dl
c0012744:	74 2f                	je     c0012775 <VgaText::putchar(char)+0xb7>
c0012746:	50                   	push   eax
c0012747:	53                   	push   ebx
c0012748:	e8 0d fb ff ff       	call   c001225a <VgaText::doANSI_SGR(int)>
c001274d:	58                   	pop    eax
c001274e:	5a                   	pop    edx
c001274f:	eb 24                	jmp    c0012775 <VgaText::putchar(char)+0xb7>
c0012751:	83 f8 4a             	cmp    eax,0x4a
c0012754:	75 1f                	jne    c0012775 <VgaText::putchar(char)+0xb7>
c0012756:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001275a:	75 19                	jne    c0012775 <VgaText::putchar(char)+0xb7>
c001275c:	83 ec 0c             	sub    esp,0xc
c001275f:	53                   	push   ebx
c0012760:	e8 95 fd ff ff       	call   c00124fa <VgaText::clearScreen()>
c0012765:	83 c4 0c             	add    esp,0xc
c0012768:	6a 00                	push   0x0
c001276a:	6a 00                	push   0x0
c001276c:	53                   	push   ebx
c001276d:	e8 26 fd ff ff       	call   c0012498 <VgaText::setCursor(int, int)>
c0012772:	83 c4 10             	add    esp,0x10
c0012775:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001277b:	eb 24                	jmp    c00127a1 <VgaText::putchar(char)+0xe3>
c001277d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012780:	83 f8 0e             	cmp    eax,0xe
c0012783:	7f 1c                	jg     c00127a1 <VgaText::putchar(char)+0xe3>
c0012785:	8d 48 01             	lea    ecx,[eax+0x1]
c0012788:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001278b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c001278f:	eb 10                	jmp    c00127a1 <VgaText::putchar(char)+0xe3>
c0012791:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012794:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012797:	50                   	push   eax
c0012798:	53                   	push   ebx
c0012799:	e8 50 fe ff ff       	call   c00125ee <VgaText::putchar(char, VgaColour, VgaColour)>
c001279e:	83 c4 10             	add    esp,0x10
c00127a1:	5b                   	pop    ebx
c00127a2:	5e                   	pop    esi
c00127a3:	5f                   	pop    edi
c00127a4:	c3                   	ret    
c00127a5:	90                   	nop

c00127a6 <VgaText::putx(unsigned int)>:
c00127a6:	57                   	push   edi
c00127a7:	b9 11 00 00 00       	mov    ecx,0x11
c00127ac:	56                   	push   esi
c00127ad:	be 60 46 02 c0       	mov    esi,0xc0024660
c00127b2:	53                   	push   ebx
c00127b3:	83 ec 20             	sub    esp,0x20
c00127b6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00127ba:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00127be:	fc                   	cld    
c00127bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127c1:	be 08 00 00 00       	mov    esi,0x8
c00127c6:	50                   	push   eax
c00127c7:	50                   	push   eax
c00127c8:	89 d8                	mov    eax,ebx
c00127ca:	c1 e8 1c             	shr    eax,0x1c
c00127cd:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00127d2:	c1 e3 04             	shl    ebx,0x4
c00127d5:	50                   	push   eax
c00127d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127da:	e8 df fe ff ff       	call   c00126be <VgaText::putchar(char)>
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	4e                   	dec    esi
c00127e3:	75 e1                	jne    c00127c6 <VgaText::putx(unsigned int)+0x20>
c00127e5:	83 c4 20             	add    esp,0x20
c00127e8:	5b                   	pop    ebx
c00127e9:	5e                   	pop    esi
c00127ea:	5f                   	pop    edi
c00127eb:	c3                   	ret    

c00127ec <VgaText::puts(char const*)>:
c00127ec:	53                   	push   ebx
c00127ed:	83 ec 08             	sub    esp,0x8
c00127f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00127f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00127f7:	85 c0                	test   eax,eax
c00127f9:	74 12                	je     c001280d <VgaText::puts(char const*)+0x21>
c00127fb:	51                   	push   ecx
c00127fc:	43                   	inc    ebx
c00127fd:	51                   	push   ecx
c00127fe:	50                   	push   eax
c00127ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012803:	e8 b6 fe ff ff       	call   c00126be <VgaText::putchar(char)>
c0012808:	83 c4 10             	add    esp,0x10
c001280b:	eb e7                	jmp    c00127f4 <VgaText::puts(char const*)+0x8>
c001280d:	83 c4 08             	add    esp,0x8
c0012810:	5b                   	pop    ebx
c0012811:	c3                   	ret    

c0012812 <VgaText::write(unsigned long long, void*, int*)>:
c0012812:	55                   	push   ebp
c0012813:	57                   	push   edi
c0012814:	56                   	push   esi
c0012815:	53                   	push   ebx
c0012816:	83 ec 0c             	sub    esp,0xc
c0012819:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001281d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012821:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012825:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001282c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001282f:	39 eb                	cmp    ebx,ebp
c0012831:	74 13                	je     c0012846 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012833:	50                   	push   eax
c0012834:	43                   	inc    ebx
c0012835:	50                   	push   eax
c0012836:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001283a:	50                   	push   eax
c001283b:	56                   	push   esi
c001283c:	e8 7d fe ff ff       	call   c00126be <VgaText::putchar(char)>
c0012841:	83 c4 10             	add    esp,0x10
c0012844:	eb e9                	jmp    c001282f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012846:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001284d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012851:	89 38                	mov    DWORD PTR [eax],edi
c0012853:	83 c4 0c             	add    esp,0xc
c0012856:	31 c0                	xor    eax,eax
c0012858:	5b                   	pop    ebx
c0012859:	5e                   	pop    esi
c001285a:	5f                   	pop    edi
c001285b:	5d                   	pop    ebp
c001285c:	c3                   	ret    
c001285d:	90                   	nop

c001285e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001285e:	55                   	push   ebp
c001285f:	57                   	push   edi
c0012860:	56                   	push   esi
c0012861:	53                   	push   ebx
c0012862:	83 ec 1c             	sub    esp,0x1c
c0012865:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012869:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001286d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012871:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012875:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012878:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001287c:	85 db                	test   ebx,ebx
c001287e:	75 14                	jne    c0012894 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0012880:	c7 44 24 30 71 46 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024671
c0012888:	83 c4 1c             	add    esp,0x1c
c001288b:	5b                   	pop    ebx
c001288c:	5e                   	pop    esi
c001288d:	5f                   	pop    edi
c001288e:	5d                   	pop    ebp
c001288f:	e9 6e d5 ff ff       	jmp    c000fe02 <KePanic(char const*)>
c0012894:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c001289b:	50                   	push   eax
c001289c:	50                   	push   eax
c001289d:	89 e8                	mov    eax,ebp
c001289f:	0f b6 c0             	movzx  eax,al
c00128a2:	50                   	push   eax
c00128a3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00128a8:	50                   	push   eax
c00128a9:	e8 7a fa ff ff       	call   c0012328 <VgaText::combineColours(unsigned char, unsigned char)>
c00128ae:	83 c4 10             	add    esp,0x10
c00128b1:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00128b5:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00128b8:	0f b6 c0             	movzx  eax,al
c00128bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128bf:	0f b7 c9             	movzx  ecx,cx
c00128c2:	01 c9                	add    ecx,ecx
c00128c4:	01 cb                	add    ebx,ecx
c00128c6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128c9:	85 c0                	test   eax,eax
c00128cb:	0f 84 ef 00 00 00    	je     c00129c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00128d1:	83 f8 0d             	cmp    eax,0xd
c00128d4:	75 0c                	jne    c00128e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00128d6:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00128dd:	e9 d8 00 00 00       	jmp    c00129ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00128e2:	83 f8 0a             	cmp    eax,0xa
c00128e5:	75 44                	jne    c001292b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00128e7:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00128ee:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00128f1:	8d 48 01             	lea    ecx,[eax+0x1]
c00128f4:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00128f7:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00128fa:	75 0f                	jne    c001290b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00128fc:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00128ff:	83 ec 0c             	sub    esp,0xc
c0012902:	57                   	push   edi
c0012903:	e8 32 fa ff ff       	call   c001233a <VgaText::scrollScreen()>
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	83 ec 0c             	sub    esp,0xc
c001290e:	57                   	push   edi
c001290f:	e8 30 f9 ff ff       	call   c0012244 <VgaText::updateCursor()>
c0012914:	83 c4 10             	add    esp,0x10
c0012917:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001291b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001291e:	0f b7 db             	movzx  ebx,bx
c0012921:	01 db                	add    ebx,ebx
c0012923:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012926:	e9 8f 00 00 00       	jmp    c00129ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001292b:	83 f8 08             	cmp    eax,0x8
c001292e:	75 34                	jne    c0012964 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012930:	51                   	push   ecx
c0012931:	51                   	push   ecx
c0012932:	6a 01                	push   0x1
c0012934:	57                   	push   edi
c0012935:	e8 92 fc ff ff       	call   c00125cc <VgaText::decrementCursor(bool)>
c001293a:	5b                   	pop    ebx
c001293b:	58                   	pop    eax
c001293c:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001293f:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012942:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012945:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012948:	6a 20                	push   0x20
c001294a:	57                   	push   edi
c001294b:	e8 8c fa ff ff       	call   c00123dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012950:	83 c4 20             	add    esp,0x20
c0012953:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012957:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001295a:	0f b7 db             	movzx  ebx,bx
c001295d:	01 db                	add    ebx,ebx
c001295f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012962:	eb 56                	jmp    c00129ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012964:	52                   	push   edx
c0012965:	52                   	push   edx
c0012966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001296a:	50                   	push   eax
c001296b:	e8 5c fa ff ff       	call   c00123cc <VgaText::combineCharAndColour(char, unsigned char)>
c0012970:	83 c4 10             	add    esp,0x10
c0012973:	66 89 03             	mov    WORD PTR [ebx],ax
c0012976:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c001297c:	75 1a                	jne    c0012998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001297e:	83 ec 0c             	sub    esp,0xc
c0012981:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012984:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012987:	55                   	push   ebp
c0012988:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001298c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001298f:	50                   	push   eax
c0012990:	e8 d3 8d 00 00       	call   c001b768 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012995:	83 c4 20             	add    esp,0x20
c0012998:	50                   	push   eax
c0012999:	83 c3 02             	add    ebx,0x2
c001299c:	50                   	push   eax
c001299d:	6a 00                	push   0x0
c001299f:	57                   	push   edi
c00129a0:	e8 d3 fb ff ff       	call   c0012578 <VgaText::incrementCursor(bool)>
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00129ac:	75 0c                	jne    c00129ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00129ae:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00129b2:	0f b7 db             	movzx  ebx,bx
c00129b5:	01 db                	add    ebx,ebx
c00129b7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00129ba:	46                   	inc    esi
c00129bb:	e9 06 ff ff ff       	jmp    c00128c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00129c0:	83 ec 0c             	sub    esp,0xc
c00129c3:	57                   	push   edi
c00129c4:	e8 7b f8 ff ff       	call   c0012244 <VgaText::updateCursor()>
c00129c9:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00129d0:	83 c4 2c             	add    esp,0x2c
c00129d3:	5b                   	pop    ebx
c00129d4:	5e                   	pop    esi
c00129d5:	5f                   	pop    edi
c00129d6:	5d                   	pop    ebp
c00129d7:	c3                   	ret    

c00129d8 <VgaText::VgaText(char const*)>:
c00129d8:	56                   	push   esi
c00129d9:	53                   	push   ebx
c00129da:	83 ec 04             	sub    esp,0x4
c00129dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129e1:	83 ec 08             	sub    esp,0x8
c00129e4:	6a 00                	push   0x0
c00129e6:	50                   	push   eax
c00129e7:	e8 b8 05 00 00       	call   c0012fa4 <UnixFile::UnixFile(int)>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	ba a8 46 02 c0       	mov    edx,0xc00246a8
c00129f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129f8:	89 10                	mov    DWORD PTR [eax],edx
c00129fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129fe:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a09:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a14:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a1c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a24:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a2f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a3a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a45:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012a4c:	83 ec 0c             	sub    esp,0xc
c0012a4f:	68 81 46 02 c0       	push   0xc0024681
c0012a54:	e8 0d 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012a59:	83 c4 10             	add    esp,0x10
c0012a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a60:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012a67:	83 ec 0c             	sub    esp,0xc
c0012a6a:	6a 01                	push   0x1
c0012a6c:	e8 86 09 00 00       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c0012a71:	83 c4 10             	add    esp,0x10
c0012a74:	89 c2                	mov    edx,eax
c0012a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a7a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012a7d:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0012a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a87:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a8a:	89 c6                	mov    esi,eax
c0012a8c:	e8 6b d5 ff ff       	call   c000fffc <Phys::allocatePage()>
c0012a91:	68 05 0c 00 00       	push   0xc05
c0012a96:	56                   	push   esi
c0012a97:	50                   	push   eax
c0012a98:	53                   	push   ebx
c0012a99:	e8 32 10 00 00       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a9e:	83 c4 10             	add    esp,0x10
c0012aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012aa8:	83 ec 04             	sub    esp,0x4
c0012aab:	68 a0 0f 00 00       	push   0xfa0
c0012ab0:	6a 00                	push   0x0
c0012ab2:	50                   	push   eax
c0012ab3:	e8 38 da fe ff       	call   c00004f0 <memset>
c0012ab8:	83 c4 10             	add    esp,0x10
c0012abb:	83 ec 04             	sub    esp,0x4
c0012abe:	6a 00                	push   0x0
c0012ac0:	6a 07                	push   0x7
c0012ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ac6:	e8 23 f8 ff ff       	call   c00122ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012acb:	83 c4 10             	add    esp,0x10
c0012ace:	83 ec 04             	sub    esp,0x4
c0012ad1:	6a 00                	push   0x0
c0012ad3:	6a 00                	push   0x0
c0012ad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad9:	e8 ba f9 ff ff       	call   c0012498 <VgaText::setCursor(int, int)>
c0012ade:	83 c4 10             	add    esp,0x10
c0012ae1:	83 ec 0c             	sub    esp,0xc
c0012ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae8:	e8 0d fa ff ff       	call   c00124fa <VgaText::clearScreen()>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af4:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012afc:	05 82 00 00 00       	add    eax,0x82
c0012b01:	83 ec 04             	sub    esp,0x4
c0012b04:	68 80 00 00 00       	push   0x80
c0012b09:	6a 00                	push   0x0
c0012b0b:	50                   	push   eax
c0012b0c:	e8 df d9 fe ff       	call   c00004f0 <memset>
c0012b11:	83 c4 10             	add    esp,0x10
c0012b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b18:	05 02 01 00 00       	add    eax,0x102
c0012b1d:	83 ec 04             	sub    esp,0x4
c0012b20:	68 80 00 00 00       	push   0x80
c0012b25:	6a 00                	push   0x0
c0012b27:	50                   	push   eax
c0012b28:	e8 c3 d9 fe ff       	call   c00004f0 <memset>
c0012b2d:	83 c4 10             	add    esp,0x10
c0012b30:	90                   	nop
c0012b31:	83 c4 04             	add    esp,0x4
c0012b34:	5b                   	pop    ebx
c0012b35:	5e                   	pop    esi
c0012b36:	c3                   	ret    
c0012b37:	90                   	nop

c0012b38 <VgaText::receiveKey(unsigned char)>:
c0012b38:	55                   	push   ebp
c0012b39:	57                   	push   edi
c0012b3a:	56                   	push   esi
c0012b3b:	53                   	push   ebx
c0012b3c:	83 ec 2c             	sub    esp,0x2c
c0012b3f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012b43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012b47:	89 fd                	mov    ebp,edi
c0012b49:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012b4f:	0f 84 48 01 00 00    	je     c0012c9d <VgaText::receiveKey(unsigned char)+0x165>
c0012b55:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012b5b:	83 fd 08             	cmp    ebp,0x8
c0012b5e:	75 6a                	jne    c0012bca <VgaText::receiveKey(unsigned char)+0x92>
c0012b60:	83 ec 0c             	sub    esp,0xc
c0012b63:	56                   	push   esi
c0012b64:	e8 17 da fe ff       	call   c0000580 <strlen>
c0012b69:	83 c4 10             	add    esp,0x10
c0012b6c:	85 c0                	test   eax,eax
c0012b6e:	0f 84 ef 00 00 00    	je     c0012c63 <VgaText::receiveKey(unsigned char)+0x12b>
c0012b74:	50                   	push   eax
c0012b75:	50                   	push   eax
c0012b76:	6a 08                	push   0x8
c0012b78:	53                   	push   ebx
c0012b79:	e8 40 fb ff ff       	call   c00126be <VgaText::putchar(char)>
c0012b7e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b81:	e8 fa d9 fe ff       	call   c0000580 <strlen>
c0012b86:	83 c4 10             	add    esp,0x10
c0012b89:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012b91:	83 fa 1f             	cmp    edx,0x1f
c0012b94:	89 d0                	mov    eax,edx
c0012b96:	7f 1c                	jg     c0012bb4 <VgaText::receiveKey(unsigned char)+0x7c>
c0012b98:	83 e8 08             	sub    eax,0x8
c0012b9b:	3c 02                	cmp    al,0x2
c0012b9d:	76 15                	jbe    c0012bb4 <VgaText::receiveKey(unsigned char)+0x7c>
c0012b9f:	83 fa 0d             	cmp    edx,0xd
c0012ba2:	74 10                	je     c0012bb4 <VgaText::receiveKey(unsigned char)+0x7c>
c0012ba4:	57                   	push   edi
c0012ba5:	57                   	push   edi
c0012ba6:	68 94 46 02 c0       	push   0xc0024694
c0012bab:	53                   	push   ebx
c0012bac:	e8 3b fc ff ff       	call   c00127ec <VgaText::puts(char const*)>
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	83 ec 0c             	sub    esp,0xc
c0012bb7:	56                   	push   esi
c0012bb8:	e8 c3 d9 fe ff       	call   c0000580 <strlen>
c0012bbd:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012bc5:	e9 96 00 00 00       	jmp    c0012c60 <VgaText::receiveKey(unsigned char)+0x128>
c0012bca:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	50                   	push   eax
c0012bd4:	e8 a7 d9 fe ff       	call   c0000580 <strlen>
c0012bd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012be0:	e8 9b d9 fe ff       	call   c0000580 <strlen>
c0012be5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012bf0:	3d 80 00 00 00       	cmp    eax,0x80
c0012bf5:	0f 87 a2 00 00 00    	ja     c0012c9d <VgaText::receiveKey(unsigned char)+0x165>
c0012bfb:	8d 47 ff             	lea    eax,[edi-0x1]
c0012bfe:	3c 1e                	cmp    al,0x1e
c0012c00:	77 35                	ja     c0012c37 <VgaText::receiveKey(unsigned char)+0xff>
c0012c02:	8d 47 f7             	lea    eax,[edi-0x9]
c0012c05:	3c 01                	cmp    al,0x1
c0012c07:	76 2e                	jbe    c0012c37 <VgaText::receiveKey(unsigned char)+0xff>
c0012c09:	83 fd 0d             	cmp    ebp,0xd
c0012c0c:	74 29                	je     c0012c37 <VgaText::receiveKey(unsigned char)+0xff>
c0012c0e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012c11:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012c14:	68 9a 46 02 c0       	push   0xc002469a
c0012c19:	53                   	push   ebx
c0012c1a:	e8 3f fc ff ff       	call   c001285e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012c1f:	8d 47 40             	lea    eax,[edi+0x40]
c0012c22:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012c25:	0f b6 c0             	movzx  eax,al
c0012c28:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012c2b:	50                   	push   eax
c0012c2c:	53                   	push   ebx
c0012c2d:	e8 bc f9 ff ff       	call   c00125ee <VgaText::putchar(char, VgaColour, VgaColour)>
c0012c32:	83 c4 20             	add    esp,0x20
c0012c35:	eb 11                	jmp    c0012c48 <VgaText::receiveKey(unsigned char)+0x110>
c0012c37:	51                   	push   ecx
c0012c38:	89 f8                	mov    eax,edi
c0012c3a:	51                   	push   ecx
c0012c3b:	0f be c0             	movsx  eax,al
c0012c3e:	50                   	push   eax
c0012c3f:	53                   	push   ebx
c0012c40:	e8 79 fa ff ff       	call   c00126be <VgaText::putchar(char)>
c0012c45:	83 c4 10             	add    esp,0x10
c0012c48:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012c4d:	89 f8                	mov    eax,edi
c0012c4f:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012c53:	52                   	push   edx
c0012c54:	52                   	push   edx
c0012c55:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012c59:	50                   	push   eax
c0012c5a:	56                   	push   esi
c0012c5b:	e8 10 dc fe ff       	call   c0000870 <strcat>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012c6a:	75 0f                	jne    c0012c7b <VgaText::receiveKey(unsigned char)+0x143>
c0012c6c:	83 fd 1c             	cmp    ebp,0x1c
c0012c6f:	77 2c                	ja     c0012c9d <VgaText::receiveKey(unsigned char)+0x165>
c0012c71:	b8 08 04 00 10       	mov    eax,0x10000408
c0012c76:	0f a3 e8             	bt     eax,ebp
c0012c79:	73 22                	jae    c0012c9d <VgaText::receiveKey(unsigned char)+0x165>
c0012c7b:	50                   	push   eax
c0012c7c:	81 c3 02 01 00 00    	add    ebx,0x102
c0012c82:	50                   	push   eax
c0012c83:	56                   	push   esi
c0012c84:	53                   	push   ebx
c0012c85:	e8 e6 db fe ff       	call   c0000870 <strcat>
c0012c8a:	83 c4 0c             	add    esp,0xc
c0012c8d:	68 80 00 00 00       	push   0x80
c0012c92:	6a 00                	push   0x0
c0012c94:	56                   	push   esi
c0012c95:	e8 56 d8 fe ff       	call   c00004f0 <memset>
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	83 c4 2c             	add    esp,0x2c
c0012ca0:	5b                   	pop    ebx
c0012ca1:	5e                   	pop    esi
c0012ca2:	5f                   	pop    edi
c0012ca3:	5d                   	pop    ebp
c0012ca4:	c3                   	ret    
c0012ca5:	90                   	nop

c0012ca6 <VgaText::doUpdate()>:
c0012ca6:	c3                   	ret    
c0012ca7:	90                   	nop

c0012ca8 <TSS::TSS()>:
c0012ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012cb3:	90                   	nop
c0012cb4:	c3                   	ret    
c0012cb5:	90                   	nop
c0012cb6:	66 90                	xchg   ax,ax

c0012cb8 <TSS::setESP(unsigned long)>:
c0012cb8:	55                   	push   ebp
c0012cb9:	89 e5                	mov    ebp,esp
c0012cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cc1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012cc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012cc7:	90                   	nop
c0012cc8:	5d                   	pop    ebp
c0012cc9:	c3                   	ret    
c0012cca:	66 90                	xchg   ax,ax

c0012ccc <TSS::flush()>:
c0012ccc:	55                   	push   ebp
c0012ccd:	89 e5                	mov    ebp,esp
c0012ccf:	83 ec 10             	sub    esp,0x10
c0012cd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cd7:	83 c8 03             	or     eax,0x3
c0012cda:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012cde:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012ce2:	66 89 d0             	mov    ax,dx
c0012ce5:	0f 00 d8             	ltr    ax
c0012ce8:	90                   	nop
c0012ce9:	c9                   	leave  
c0012cea:	c3                   	ret    
c0012ceb:	90                   	nop

c0012cec <TSS::setup(unsigned long, unsigned long)>:
c0012cec:	55                   	push   ebp
c0012ced:	89 e5                	mov    ebp,esp
c0012cef:	83 ec 18             	sub    esp,0x18
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	6a 68                	push   0x68
c0012cf7:	e8 b0 cc ff ff       	call   c000f9ac <malloc>
c0012cfc:	83 c4 10             	add    esp,0x10
c0012cff:	89 c2                	mov    edx,eax
c0012d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d0d:	83 ec 08             	sub    esp,0x8
c0012d10:	50                   	push   eax
c0012d11:	68 bc 46 02 c0       	push   0xc00246bc
c0012d16:	e8 4b 42 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d24:	83 ec 04             	sub    esp,0x4
c0012d27:	6a 68                	push   0x68
c0012d29:	6a 00                	push   0x0
c0012d2b:	50                   	push   eax
c0012d2c:	e8 bf d7 fe ff       	call   c00004f0 <memset>
c0012d31:	83 c4 10             	add    esp,0x10
c0012d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d3a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012d40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d46:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d52:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012d55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d5e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d6a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d76:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d82:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d8e:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d9a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012da3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012da6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012da9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012daf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012db2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012db5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dbe:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012dc5:	83 ec 0c             	sub    esp,0xc
c0012dc8:	68 d3 46 02 c0       	push   0xc00246d3
c0012dcd:	e8 94 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ddb:	0f 20 da             	mov    edx,cr3
c0012dde:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012de1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012de4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012de7:	83 ec 0c             	sub    esp,0xc
c0012dea:	68 d6 46 02 c0       	push   0xc00246d6
c0012def:	e8 72 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012df4:	83 c4 10             	add    esp,0x10
c0012df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dfd:	83 ec 08             	sub    esp,0x8
c0012e00:	50                   	push   eax
c0012e01:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012e04:	50                   	push   eax
c0012e05:	e8 f0 bc ff ff       	call   c000eafa <GDTEntry::setBase(unsigned int)>
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	83 ec 08             	sub    esp,0x8
c0012e10:	6a 68                	push   0x68
c0012e12:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012e15:	50                   	push   eax
c0012e16:	e8 fb bc ff ff       	call   c000eb16 <GDTEntry::setLimit(unsigned int)>
c0012e1b:	83 c4 10             	add    esp,0x10
c0012e1e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012e22:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012e25:	83 e0 0f             	and    eax,0xf
c0012e28:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012e2b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012e2e:	83 c8 40             	or     eax,0x40
c0012e31:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012e34:	83 ec 0c             	sub    esp,0xc
c0012e37:	68 d9 46 02 c0       	push   0xc00246d9
c0012e3c:	e8 25 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012e41:	83 c4 10             	add    esp,0x10
c0012e44:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0012e49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012e4f:	83 ec 08             	sub    esp,0x8
c0012e52:	50                   	push   eax
c0012e53:	68 dc 46 02 c0       	push   0xc00246dc
c0012e58:	e8 09 41 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0012e65:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012e6b:	05 64 01 00 00       	add    eax,0x164
c0012e70:	83 ec 04             	sub    esp,0x4
c0012e73:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012e76:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012e79:	50                   	push   eax
c0012e7a:	e8 cb bc ff ff       	call   c000eb4a <GDT::addEntry(GDTEntry)>
c0012e7f:	83 c4 10             	add    esp,0x10
c0012e82:	89 c2                	mov    edx,eax
c0012e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e87:	89 10                	mov    DWORD PTR [eax],edx
c0012e89:	83 ec 0c             	sub    esp,0xc
c0012e8c:	68 f1 46 02 c0       	push   0xc00246f1
c0012e91:	e8 d0 40 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0012e9e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ea4:	05 64 01 00 00       	add    eax,0x164
c0012ea9:	83 ec 0c             	sub    esp,0xc
c0012eac:	50                   	push   eax
c0012ead:	e8 c2 bc ff ff       	call   c000eb74 <GDT::flush()>
c0012eb2:	83 c4 10             	add    esp,0x10
c0012eb5:	83 ec 0c             	sub    esp,0xc
c0012eb8:	68 f4 46 02 c0       	push   0xc00246f4
c0012ebd:	e8 a4 40 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ec2:	83 c4 10             	add    esp,0x10
c0012ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ec8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eca:	c9                   	leave  
c0012ecb:	c3                   	ret    

c0012ecc <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ed0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012ed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ed7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012edc:	75 08                	jne    c0012ee6 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012ede:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012ee4:	eb 38                	jmp    c0012f1e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012ee6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012eeb:	75 17                	jne    c0012f04 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012eed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ef2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012ef5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012efb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012efd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f01:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012f04:	89 c1                	mov    ecx,eax
c0012f06:	83 e1 fd             	and    ecx,0xfffffffd
c0012f09:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012f0f:	74 cd                	je     c0012ede <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012f11:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012f16:	83 e0 ef             	and    eax,0xffffffef
c0012f19:	83 f8 08             	cmp    eax,0x8
c0012f1c:	76 c0                	jbe    c0012ede <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012f1e:	31 c0                	xor    eax,eax
c0012f20:	c3                   	ret    
c0012f21:	90                   	nop

c0012f22 <ReservedFilename::isAtty()>:
c0012f22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f26:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012f29:	31 c0                	xor    eax,eax
c0012f2b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012f31:	74 09                	je     c0012f3c <ReservedFilename::isAtty()+0x1a>
c0012f33:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012f39:	0f 94 c0             	sete   al
c0012f3c:	c3                   	ret    
c0012f3d:	90                   	nop

c0012f3e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012f3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012f46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f4d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012f52:	75 08                	jne    c0012f5c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012f54:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012f5a:	eb 3d                	jmp    c0012f99 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012f5c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012f61:	75 17                	jne    c0012f7a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012f63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012f6b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012f71:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f77:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012f7a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012f7f:	75 04                	jne    c0012f85 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012f81:	89 0a                	mov    DWORD PTR [edx],ecx
c0012f83:	eb 14                	jmp    c0012f99 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012f85:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012f8a:	74 c8                	je     c0012f54 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012f8c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012f91:	83 e0 ef             	and    eax,0xffffffef
c0012f94:	83 f8 08             	cmp    eax,0x8
c0012f97:	76 bb                	jbe    c0012f54 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012f99:	31 c0                	xor    eax,eax
c0012f9b:	c3                   	ret    

c0012f9c <UnixFile::getFileDescriptor()>:
c0012f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fa3:	c3                   	ret    

c0012fa4 <UnixFile::UnixFile(int)>:
c0012fa4:	53                   	push   ebx
c0012fa5:	83 ec 28             	sub    esp,0x28
c0012fa8:	ba 20 47 02 c0       	mov    edx,0xc0024720
c0012fad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fb1:	89 10                	mov    DWORD PTR [eax],edx
c0012fb3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012fbb:	0f 8f 90 01 00 00    	jg     c0013151 <UnixFile::UnixFile(int)+0x1ad>
c0012fc1:	a1 a0 6a 02 c0       	mov    eax,ds:0xc0026aa0
c0012fc6:	8d 50 01             	lea    edx,[eax+0x1]
c0012fc9:	89 15 a0 6a 02 c0    	mov    DWORD PTR ds:0xc0026aa0,edx
c0012fcf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012fd3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012fd6:	83 ec 08             	sub    esp,0x8
c0012fd9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012fdd:	68 38 e2 02 c0       	push   0xc002e238
c0012fe2:	e8 07 f2 00 00       	call   c00221ee <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c0012fef:	83 f0 01             	xor    eax,0x1
c0012ff2:	0f b6 c0             	movzx  eax,al
c0012ff5:	85 c0                	test   eax,eax
c0012ff7:	0f 84 55 01 00 00    	je     c0013152 <UnixFile::UnixFile(int)+0x1ae>
c0012ffd:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c0013004:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001300c:	83 ec 0c             	sub    esp,0xc
c001300f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013013:	e8 94 c9 ff ff       	call   c000f9ac <malloc>
c0013018:	83 c4 10             	add    esp,0x10
c001301b:	89 c3                	mov    ebx,eax
c001301d:	83 ec 08             	sub    esp,0x8
c0013020:	68 03 ff ff 0f       	push   0xfffff03
c0013025:	53                   	push   ebx
c0013026:	e8 2d 01 00 00       	call   c0013158 <ReservedFilename::ReservedFilename(int)>
c001302b:	83 c4 10             	add    esp,0x10
c001302e:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c0013034:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001303c:	83 ec 0c             	sub    esp,0xc
c001303f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013043:	e8 64 c9 ff ff       	call   c000f9ac <malloc>
c0013048:	83 c4 10             	add    esp,0x10
c001304b:	89 c3                	mov    ebx,eax
c001304d:	83 ec 08             	sub    esp,0x8
c0013050:	68 01 ff ff 0f       	push   0xfffff01
c0013055:	53                   	push   ebx
c0013056:	e8 fd 00 00 00       	call   c0013158 <ReservedFilename::ReservedFilename(int)>
c001305b:	83 c4 10             	add    esp,0x10
c001305e:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c0013064:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001306c:	83 ec 0c             	sub    esp,0xc
c001306f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013073:	e8 34 c9 ff ff       	call   c000f9ac <malloc>
c0013078:	83 c4 10             	add    esp,0x10
c001307b:	89 c3                	mov    ebx,eax
c001307d:	83 ec 08             	sub    esp,0x8
c0013080:	68 00 ff ff 0f       	push   0xfffff00
c0013085:	53                   	push   ebx
c0013086:	e8 cd 00 00 00       	call   c0013158 <ReservedFilename::ReservedFilename(int)>
c001308b:	83 c4 10             	add    esp,0x10
c001308e:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c0013094:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00130a3:	e8 04 c9 ff ff       	call   c000f9ac <malloc>
c00130a8:	83 c4 10             	add    esp,0x10
c00130ab:	89 c3                	mov    ebx,eax
c00130ad:	83 ec 08             	sub    esp,0x8
c00130b0:	68 02 ff ff 0f       	push   0xfffff02
c00130b5:	53                   	push   ebx
c00130b6:	e8 9d 00 00 00       	call   c0013158 <ReservedFilename::ReservedFilename(int)>
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c00130c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00130cc:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00130d1:	7f 7f                	jg     c0013152 <UnixFile::UnixFile(int)+0x1ae>
c00130d3:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00130db:	83 ec 0c             	sub    esp,0xc
c00130de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130e2:	e8 c5 c8 ff ff       	call   c000f9ac <malloc>
c00130e7:	83 c4 10             	add    esp,0x10
c00130ea:	89 c3                	mov    ebx,eax
c00130ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130f0:	05 10 ff ff 0f       	add    eax,0xfffff10
c00130f5:	83 ec 08             	sub    esp,0x8
c00130f8:	50                   	push   eax
c00130f9:	53                   	push   ebx
c00130fa:	e8 59 00 00 00       	call   c0013158 <ReservedFilename::ReservedFilename(int)>
c00130ff:	83 c4 10             	add    esp,0x10
c0013102:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013106:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c001310d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013115:	83 ec 0c             	sub    esp,0xc
c0013118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001311c:	e8 8b c8 ff ff       	call   c000f9ac <malloc>
c0013121:	83 c4 10             	add    esp,0x10
c0013124:	89 c3                	mov    ebx,eax
c0013126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001312a:	05 20 ff ff 0f       	add    eax,0xfffff20
c001312f:	83 ec 08             	sub    esp,0x8
c0013132:	50                   	push   eax
c0013133:	53                   	push   ebx
c0013134:	e8 1f 00 00 00       	call   c0013158 <ReservedFilename::ReservedFilename(int)>
c0013139:	83 c4 10             	add    esp,0x10
c001313c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013140:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c0013147:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001314c:	e9 7b ff ff ff       	jmp    c00130cc <UnixFile::UnixFile(int)+0x128>
c0013151:	90                   	nop
c0013152:	83 c4 28             	add    esp,0x28
c0013155:	5b                   	pop    ebx
c0013156:	c3                   	ret    
c0013157:	90                   	nop

c0013158 <ReservedFilename::ReservedFilename(int)>:
c0013158:	83 ec 0c             	sub    esp,0xc
c001315b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315f:	83 ec 08             	sub    esp,0x8
c0013162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013166:	50                   	push   eax
c0013167:	e8 38 fe ff ff       	call   c0012fa4 <UnixFile::UnixFile(int)>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	ba 3c 47 02 c0       	mov    edx,0xc002473c
c0013174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013178:	89 10                	mov    DWORD PTR [eax],edx
c001317a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001317e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013182:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013185:	90                   	nop
c0013186:	83 c4 0c             	add    esp,0xc
c0013189:	c3                   	ret    

c001318a <UnixFile::~UnixFile()>:
c001318a:	83 ec 1c             	sub    esp,0x1c
c001318d:	ba 20 47 02 c0       	mov    edx,0xc0024720
c0013192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013196:	89 10                	mov    DWORD PTR [eax],edx
c0013198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001319c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001319f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00131a4:	7f 76                	jg     c001321c <UnixFile::~UnixFile()+0x92>
c00131a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	68 38 e2 02 c0       	push   0xc002e238
c00131b6:	e8 07 f1 00 00       	call   c00222c2 <LinkedList<UnixFile>::getFirstElement()>
c00131bb:	83 c4 10             	add    esp,0x10
c00131be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	68 38 e2 02 c0       	push   0xc002e238
c00131ca:	e8 fb f0 00 00       	call   c00222ca <LinkedList<UnixFile>::removeFirst()>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00131d6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00131da:	74 43                	je     c001321f <UnixFile::~UnixFile()+0x95>
c00131dc:	83 ec 08             	sub    esp,0x8
c00131df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131e3:	68 38 e2 02 c0       	push   0xc002e238
c00131e8:	e8 01 f0 00 00       	call   c00221ee <LinkedList<UnixFile>::addElement(UnixFile*)>
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00131f4:	8d 50 01             	lea    edx,[eax+0x1]
c00131f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131fb:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013200:	0f 94 c0             	sete   al
c0013203:	0f b6 c0             	movzx  eax,al
c0013206:	85 c0                	test   eax,eax
c0013208:	74 a4                	je     c00131ae <UnixFile::~UnixFile()+0x24>
c001320a:	83 ec 0c             	sub    esp,0xc
c001320d:	68 f8 46 02 c0       	push   0xc00246f8
c0013212:	e8 eb cb ff ff       	call   c000fe02 <KePanic(char const*)>
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	eb 92                	jmp    c00131ae <UnixFile::~UnixFile()+0x24>
c001321c:	90                   	nop
c001321d:	eb 01                	jmp    c0013220 <UnixFile::~UnixFile()+0x96>
c001321f:	90                   	nop
c0013220:	90                   	nop
c0013221:	83 c4 1c             	add    esp,0x1c
c0013224:	c3                   	ret    
c0013225:	90                   	nop

c0013226 <UnixFile::~UnixFile()>:
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	83 ec 0c             	sub    esp,0xc
c001322c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013230:	e8 55 ff ff ff       	call   c001318a <UnixFile::~UnixFile()>
c0013235:	83 c4 10             	add    esp,0x10
c0013238:	83 ec 08             	sub    esp,0x8
c001323b:	6a 0c                	push   0xc
c001323d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013241:	e8 af a0 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0013246:	83 c4 10             	add    esp,0x10
c0013249:	83 c4 0c             	add    esp,0xc
c001324c:	c3                   	ret    
c001324d:	90                   	nop

c001324e <ReservedFilename::~ReservedFilename()>:
c001324e:	83 ec 0c             	sub    esp,0xc
c0013251:	ba 3c 47 02 c0       	mov    edx,0xc002473c
c0013256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001325a:	89 10                	mov    DWORD PTR [eax],edx
c001325c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013260:	83 ec 0c             	sub    esp,0xc
c0013263:	50                   	push   eax
c0013264:	e8 21 ff ff ff       	call   c001318a <UnixFile::~UnixFile()>
c0013269:	83 c4 10             	add    esp,0x10
c001326c:	90                   	nop
c001326d:	83 c4 0c             	add    esp,0xc
c0013270:	c3                   	ret    
c0013271:	90                   	nop

c0013272 <ReservedFilename::~ReservedFilename()>:
c0013272:	83 ec 0c             	sub    esp,0xc
c0013275:	83 ec 0c             	sub    esp,0xc
c0013278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001327c:	e8 cd ff ff ff       	call   c001324e <ReservedFilename::~ReservedFilename()>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	83 ec 08             	sub    esp,0x8
c0013287:	6a 0c                	push   0xc
c0013289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001328d:	e8 63 a0 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	83 c4 0c             	add    esp,0xc
c0013298:	c3                   	ret    

c0013299 <KeGetFileFromDescriptor(int)>:
c0013299:	53                   	push   ebx
c001329a:	83 ec 08             	sub    esp,0x8
c001329d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132a1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00132a7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00132ad:	7f 30                	jg     c00132df <KeGetFileFromDescriptor(int)+0x46>
c00132af:	83 ec 0c             	sub    esp,0xc
c00132b2:	68 38 e2 02 c0       	push   0xc002e238
c00132b7:	e8 06 f0 00 00       	call   c00222c2 <LinkedList<UnixFile>::getFirstElement()>
c00132bc:	8d 50 ff             	lea    edx,[eax-0x1]
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	83 fa fd             	cmp    edx,0xfffffffd
c00132c5:	76 04                	jbe    c00132cb <KeGetFileFromDescriptor(int)+0x32>
c00132c7:	31 c0                	xor    eax,eax
c00132c9:	eb 6e                	jmp    c0013339 <KeGetFileFromDescriptor(int)+0xa0>
c00132cb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00132ce:	74 69                	je     c0013339 <KeGetFileFromDescriptor(int)+0xa0>
c00132d0:	52                   	push   edx
c00132d1:	52                   	push   edx
c00132d2:	50                   	push   eax
c00132d3:	68 38 e2 02 c0       	push   0xc002e238
c00132d8:	e8 8f f0 00 00       	call   c002236c <LinkedList<UnixFile>::getNext(UnixFile*)>
c00132dd:	eb dd                	jmp    c00132bc <KeGetFileFromDescriptor(int)+0x23>
c00132df:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00132e5:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00132ea:	74 4d                	je     c0013339 <KeGetFileFromDescriptor(int)+0xa0>
c00132ec:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00132f2:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c00132f7:	74 40                	je     c0013339 <KeGetFileFromDescriptor(int)+0xa0>
c00132f9:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00132ff:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0013304:	74 33                	je     c0013339 <KeGetFileFromDescriptor(int)+0xa0>
c0013306:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001330c:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c0013311:	74 26                	je     c0013339 <KeGetFileFromDescriptor(int)+0xa0>
c0013313:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013319:	83 f8 08             	cmp    eax,0x8
c001331c:	77 09                	ja     c0013327 <KeGetFileFromDescriptor(int)+0x8e>
c001331e:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c0013325:	eb 12                	jmp    c0013339 <KeGetFileFromDescriptor(int)+0xa0>
c0013327:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001332d:	83 fb 08             	cmp    ebx,0x8
c0013330:	77 95                	ja     c00132c7 <KeGetFileFromDescriptor(int)+0x2e>
c0013332:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c0013339:	83 c4 08             	add    esp,0x8
c001333c:	5b                   	pop    ebx
c001333d:	c3                   	ret    

c001333e <__static_initialization_and_destruction_0(int, int)>:
c001333e:	83 ec 0c             	sub    esp,0xc
c0013341:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013346:	75 34                	jne    c001337c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013348:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013350:	75 2a                	jne    c001337c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	68 38 e2 02 c0       	push   0xc002e238
c001335a:	e8 4d ee 00 00       	call   c00221ac <LinkedList<UnixFile>::LinkedList()>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	83 ec 04             	sub    esp,0x4
c0013365:	68 fc 62 02 c0       	push   0xc00262fc
c001336a:	68 38 e2 02 c0       	push   0xc002e238
c001336f:	68 aa 21 02 c0       	push   0xc00221aa
c0013374:	e8 2c 9f ff ff       	call   c000d2a5 <__cxa_atexit>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	90                   	nop
c001337d:	83 c4 0c             	add    esp,0xc
c0013380:	c3                   	ret    

c0013381 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013381:	83 ec 0c             	sub    esp,0xc
c0013384:	83 ec 08             	sub    esp,0x8
c0013387:	68 ff ff 00 00       	push   0xffff
c001338c:	6a 01                	push   0x1
c001338e:	e8 ab ff ff ff       	call   c001333e <__static_initialization_and_destruction_0(int, int)>
c0013393:	83 c4 10             	add    esp,0x10
c0013396:	83 c4 0c             	add    esp,0xc
c0013399:	c3                   	ret    

c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001339a:	53                   	push   ebx
c001339b:	8b 15 a8 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026aa8
c00133a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00133a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00133a9:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00133af:	89 d8                	mov    eax,ebx
c00133b1:	d1 e8                	shr    eax,1
c00133b3:	01 d0                	add    eax,edx
c00133b5:	80 e3 01             	and    bl,0x1
c00133b8:	8a 10                	mov    dl,BYTE PTR [eax]
c00133ba:	75 09                	jne    c00133c5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00133bc:	83 e2 f0             	and    edx,0xfffffff0
c00133bf:	09 ca                	or     edx,ecx
c00133c1:	88 10                	mov    BYTE PTR [eax],dl
c00133c3:	5b                   	pop    ebx
c00133c4:	c3                   	ret    
c00133c5:	0f b6 c9             	movzx  ecx,cl
c00133c8:	83 e2 0f             	and    edx,0xf
c00133cb:	c1 e1 04             	shl    ecx,0x4
c00133ce:	09 ca                	or     edx,ecx
c00133d0:	88 10                	mov    BYTE PTR [eax],dl
c00133d2:	5b                   	pop    ebx
c00133d3:	c3                   	ret    

c00133d4 <Virt::getPageState(unsigned long)>:
c00133d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133d8:	8b 0d a8 6a 02 c0    	mov    ecx,DWORD PTR ds:0xc0026aa8
c00133de:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00133e4:	89 d0                	mov    eax,edx
c00133e6:	d1 e8                	shr    eax,1
c00133e8:	80 e2 01             	and    dl,0x1
c00133eb:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00133ee:	74 03                	je     c00133f3 <Virt::getPageState(unsigned long)+0x1f>
c00133f0:	c1 e8 04             	shr    eax,0x4
c00133f3:	83 e0 0f             	and    eax,0xf
c00133f6:	c3                   	ret    

c00133f7 <Virt::allocateKernelVirtualPages(int)>:
c00133f7:	55                   	push   ebp
c00133f8:	57                   	push   edi
c00133f9:	56                   	push   esi
c00133fa:	31 f6                	xor    esi,esi
c00133fc:	53                   	push   ebx
c00133fd:	31 db                	xor    ebx,ebx
c00133ff:	83 ec 1c             	sub    esp,0x1c
c0013402:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0013407:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001340b:	8b 2d a4 6a 02 c0    	mov    ebp,DWORD PTR ds:0xc0026aa4
c0013411:	55                   	push   ebp
c0013412:	e8 bd ff ff ff       	call   c00133d4 <Virt::getPageState(unsigned long)>
c0013417:	5a                   	pop    edx
c0013418:	84 c0                	test   al,al
c001341a:	75 3d                	jne    c0013459 <Virt::allocateKernelVirtualPages(int)+0x62>
c001341c:	85 db                	test   ebx,ebx
c001341e:	0f 44 f5             	cmove  esi,ebp
c0013421:	83 c3 01             	add    ebx,0x1
c0013424:	39 fb                	cmp    ebx,edi
c0013426:	74 5e                	je     c0013486 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0013428:	83 c5 01             	add    ebp,0x1
c001342b:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013431:	76 33                	jbe    c0013466 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0013433:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0013438:	c7 05 a4 6a 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026aa4,0xc8000
c0013442:	75 2a                	jne    c001346e <Virt::allocateKernelVirtualPages(int)+0x77>
c0013444:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0013449:	bd 00 80 0c 00       	mov    ebp,0xc8000
c001344e:	55                   	push   ebp
c001344f:	e8 80 ff ff ff       	call   c00133d4 <Virt::getPageState(unsigned long)>
c0013454:	5a                   	pop    edx
c0013455:	84 c0                	test   al,al
c0013457:	74 c3                	je     c001341c <Virt::allocateKernelVirtualPages(int)+0x25>
c0013459:	83 c5 01             	add    ebp,0x1
c001345c:	31 db                	xor    ebx,ebx
c001345e:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013464:	77 cd                	ja     c0013433 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0013466:	89 2d a4 6a 02 c0    	mov    DWORD PTR ds:0xc0026aa4,ebp
c001346c:	eb a3                	jmp    c0013411 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001346e:	83 ec 0c             	sub    esp,0xc
c0013471:	68 50 47 02 c0       	push   0xc0024750
c0013476:	e8 87 c9 ff ff       	call   c000fe02 <KePanic(char const*)>
c001347b:	8b 2d a4 6a 02 c0    	mov    ebp,DWORD PTR ds:0xc0026aa4
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	eb 8b                	jmp    c0013411 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013486:	89 35 a4 6a 02 c0    	mov    DWORD PTR ds:0xc0026aa4,esi
c001348c:	83 fb 01             	cmp    ebx,0x1
c001348f:	74 63                	je     c00134f4 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0013491:	85 ff                	test   edi,edi
c0013493:	74 41                	je     c00134d6 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013495:	89 f0                	mov    eax,esi
c0013497:	31 db                	xor    ebx,ebx
c0013499:	8d 6f ff             	lea    ebp,[edi-0x1]
c001349c:	eb 16                	jmp    c00134b4 <Virt::allocateKernelVirtualPages(int)+0xbd>
c001349e:	6a 01                	push   0x1
c00134a0:	83 c3 01             	add    ebx,0x1
c00134a3:	50                   	push   eax
c00134a4:	e8 f1 fe ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134a9:	39 fb                	cmp    ebx,edi
c00134ab:	58                   	pop    eax
c00134ac:	5a                   	pop    edx
c00134ad:	74 27                	je     c00134d6 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00134af:	a1 a4 6a 02 c0       	mov    eax,ds:0xc0026aa4
c00134b4:	8d 50 01             	lea    edx,[eax+0x1]
c00134b7:	85 db                	test   ebx,ebx
c00134b9:	89 15 a4 6a 02 c0    	mov    DWORD PTR ds:0xc0026aa4,edx
c00134bf:	74 22                	je     c00134e3 <Virt::allocateKernelVirtualPages(int)+0xec>
c00134c1:	39 dd                	cmp    ebp,ebx
c00134c3:	75 d9                	jne    c001349e <Virt::allocateKernelVirtualPages(int)+0xa7>
c00134c5:	6a 03                	push   0x3
c00134c7:	83 c3 01             	add    ebx,0x1
c00134ca:	50                   	push   eax
c00134cb:	e8 ca fe ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134d0:	39 fb                	cmp    ebx,edi
c00134d2:	59                   	pop    ecx
c00134d3:	58                   	pop    eax
c00134d4:	75 d9                	jne    c00134af <Virt::allocateKernelVirtualPages(int)+0xb8>
c00134d6:	83 c4 1c             	add    esp,0x1c
c00134d9:	89 f0                	mov    eax,esi
c00134db:	5b                   	pop    ebx
c00134dc:	c1 e0 0c             	shl    eax,0xc
c00134df:	5e                   	pop    esi
c00134e0:	5f                   	pop    edi
c00134e1:	5d                   	pop    ebp
c00134e2:	c3                   	ret    
c00134e3:	6a 02                	push   0x2
c00134e5:	bb 01 00 00 00       	mov    ebx,0x1
c00134ea:	50                   	push   eax
c00134eb:	e8 aa fe ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134f0:	58                   	pop    eax
c00134f1:	5a                   	pop    edx
c00134f2:	eb bb                	jmp    c00134af <Virt::allocateKernelVirtualPages(int)+0xb8>
c00134f4:	6a 04                	push   0x4
c00134f6:	56                   	push   esi
c00134f7:	8d 46 01             	lea    eax,[esi+0x1]
c00134fa:	a3 a4 6a 02 c0       	mov    ds:0xc0026aa4,eax
c00134ff:	e8 96 fe ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013504:	89 f0                	mov    eax,esi
c0013506:	59                   	pop    ecx
c0013507:	c1 e0 0c             	shl    eax,0xc
c001350a:	5b                   	pop    ebx
c001350b:	83 c4 1c             	add    esp,0x1c
c001350e:	5b                   	pop    ebx
c001350f:	5e                   	pop    esi
c0013510:	5f                   	pop    edi
c0013511:	5d                   	pop    ebp
c0013512:	c3                   	ret    

c0013513 <Virt::freeSwapfilePage(unsigned long)>:
c0013513:	53                   	push   ebx
c0013514:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c001351a:	b8 01 00 00 00       	mov    eax,0x1
c001351f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013523:	d3 e0                	shl    eax,cl
c0013525:	89 cb                	mov    ebx,ecx
c0013527:	c1 eb 05             	shr    ebx,0x5
c001352a:	f7 d0                	not    eax
c001352c:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001352f:	21 c1                	and    ecx,eax
c0013531:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013534:	5b                   	pop    ebx
c0013535:	c3                   	ret    

c0013536 <Virt::swapIDToSector(unsigned long)>:
c0013536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001353a:	8b 15 ac 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026aac
c0013540:	8b 0d b4 6a 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ab4
c0013546:	0f af c2             	imul   eax,edx
c0013549:	01 c8                	add    eax,ecx
c001354b:	c3                   	ret    

c001354c <Virt::allocateSwapfilePage()>:
c001354c:	55                   	push   ebp
c001354d:	31 d2                	xor    edx,edx
c001354f:	57                   	push   edi
c0013550:	56                   	push   esi
c0013551:	53                   	push   ebx
c0013552:	83 ec 0c             	sub    esp,0xc
c0013555:	8b 1d b0 6a 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ab0
c001355b:	8b 0d ac 6a 02 c0    	mov    ecx,DWORD PTR ds:0xc0026aac
c0013561:	89 d8                	mov    eax,ebx
c0013563:	f7 f1                	div    ecx
c0013565:	39 cb                	cmp    ebx,ecx
c0013567:	72 2f                	jb     c0013598 <Virt::allocateSwapfilePage()+0x4c>
c0013569:	8b 35 4c e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e24c
c001356f:	8b 16                	mov    edx,DWORD PTR [esi]
c0013571:	f6 c2 01             	test   dl,0x1
c0013574:	74 3e                	je     c00135b4 <Virt::allocateSwapfilePage()+0x68>
c0013576:	31 c9                	xor    ecx,ecx
c0013578:	bf 01 00 00 00       	mov    edi,0x1
c001357d:	eb 12                	jmp    c0013591 <Virt::allocateSwapfilePage()+0x45>
c001357f:	89 ca                	mov    edx,ecx
c0013581:	89 fd                	mov    ebp,edi
c0013583:	c1 ea 05             	shr    edx,0x5
c0013586:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013589:	8b 13                	mov    edx,DWORD PTR [ebx]
c001358b:	d3 e5                	shl    ebp,cl
c001358d:	85 ea                	test   edx,ebp
c001358f:	74 2c                	je     c00135bd <Virt::allocateSwapfilePage()+0x71>
c0013591:	83 c1 01             	add    ecx,0x1
c0013594:	39 c8                	cmp    eax,ecx
c0013596:	77 e7                	ja     c001357f <Virt::allocateSwapfilePage()+0x33>
c0013598:	83 ec 0c             	sub    esp,0xc
c001359b:	68 63 4a 02 c0       	push   0xc0024a63
c00135a0:	e8 5d c8 ff ff       	call   c000fe02 <KePanic(char const*)>
c00135a5:	83 c4 10             	add    esp,0x10
c00135a8:	31 c9                	xor    ecx,ecx
c00135aa:	83 c4 0c             	add    esp,0xc
c00135ad:	89 c8                	mov    eax,ecx
c00135af:	5b                   	pop    ebx
c00135b0:	5e                   	pop    esi
c00135b1:	5f                   	pop    edi
c00135b2:	5d                   	pop    ebp
c00135b3:	c3                   	ret    
c00135b4:	89 f3                	mov    ebx,esi
c00135b6:	bd 01 00 00 00       	mov    ebp,0x1
c00135bb:	31 c9                	xor    ecx,ecx
c00135bd:	09 ea                	or     edx,ebp
c00135bf:	89 c8                	mov    eax,ecx
c00135c1:	89 13                	mov    DWORD PTR [ebx],edx
c00135c3:	83 c4 0c             	add    esp,0xc
c00135c6:	5b                   	pop    ebx
c00135c7:	5e                   	pop    esi
c00135c8:	5f                   	pop    edi
c00135c9:	5d                   	pop    ebp
c00135ca:	c3                   	ret    

c00135cb <Virt::virtualMemorySetup()>:
c00135cb:	53                   	push   ebx
c00135cc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00135d1:	6a 0f                	push   0xf
c00135d3:	53                   	push   ebx
c00135d4:	83 c3 01             	add    ebx,0x1
c00135d7:	e8 be fd ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135dc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00135e2:	58                   	pop    eax
c00135e3:	5a                   	pop    edx
c00135e4:	75 eb                	jne    c00135d1 <Virt::virtualMemorySetup()+0x6>
c00135e6:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00135eb:	6a 00                	push   0x0
c00135ed:	53                   	push   ebx
c00135ee:	83 c3 01             	add    ebx,0x1
c00135f1:	e8 a4 fd ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135f6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00135fc:	59                   	pop    ecx
c00135fd:	58                   	pop    eax
c00135fe:	75 eb                	jne    c00135eb <Virt::virtualMemorySetup()+0x20>
c0013600:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013605:	6a 0f                	push   0xf
c0013607:	53                   	push   ebx
c0013608:	83 c3 01             	add    ebx,0x1
c001360b:	e8 8a fd ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013610:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013616:	58                   	pop    eax
c0013617:	5a                   	pop    edx
c0013618:	75 eb                	jne    c0013605 <Virt::virtualMemorySetup()+0x3a>
c001361a:	5b                   	pop    ebx
c001361b:	c3                   	ret    

c001361c <Virt::setupPageSwapping(int)>:
c001361c:	53                   	push   ebx
c001361d:	83 ec 0c             	sub    esp,0xc
c0013620:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013625:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013629:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001362f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013631:	53                   	push   ebx
c0013632:	68 7a 4a 02 c0       	push   0xc0024a7a
c0013637:	50                   	push   eax
c0013638:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001363b:	c1 e3 0b             	shl    ebx,0xb
c001363e:	89 1d b0 6a 02 c0    	mov    DWORD PTR ds:0xc0026ab0,ebx
c0013644:	c1 eb 08             	shr    ebx,0x8
c0013647:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001364a:	c6 05 b8 6a 02 c0 43 	mov    BYTE PTR ds:0xc0026ab8,0x43
c0013651:	c7 05 ac 6a 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026aac,0x8
c001365b:	a3 b4 6a 02 c0       	mov    ds:0xc0026ab4,eax
c0013660:	e8 47 c3 ff ff       	call   c000f9ac <malloc>
c0013665:	31 d2                	xor    edx,edx
c0013667:	83 c4 0c             	add    esp,0xc
c001366a:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c001366f:	89 c1                	mov    ecx,eax
c0013671:	a1 b0 6a 02 c0       	mov    eax,ds:0xc0026ab0
c0013676:	f7 35 ac 6a 02 c0    	div    DWORD PTR ds:0xc0026aac
c001367c:	c1 e8 05             	shr    eax,0x5
c001367f:	50                   	push   eax
c0013680:	6a 00                	push   0x0
c0013682:	51                   	push   ecx
c0013683:	e8 68 ce fe ff       	call   c00004f0 <memset>
c0013688:	83 c4 18             	add    esp,0x18
c001368b:	5b                   	pop    ebx
c001368c:	c3                   	ret    
c001368d:	90                   	nop

c001368e <VAS::setCPUSpecific(unsigned long)>:
c001368e:	c3                   	ret    
c001368f:	90                   	nop

c0013690 <VAS::VAS(VAS*)>:
c0013690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013694:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001369b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001369f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136a6:	90                   	nop
c00136a7:	c3                   	ret    

c00136a8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00136a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136ac:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00136b1:	89 c2                	mov    edx,eax
c00136b3:	c1 ea 16             	shr    edx,0x16
c00136b6:	c1 e8 0a             	shr    eax,0xa
c00136b9:	83 f9 01             	cmp    ecx,0x1
c00136bc:	19 c9                	sbb    ecx,ecx
c00136be:	25 fc 0f 00 00       	and    eax,0xffc
c00136c3:	c1 e2 0c             	shl    edx,0xc
c00136c6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00136cc:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00136d3:	01 d0                	add    eax,edx
c00136d5:	c3                   	ret    

c00136d6 <VAS::getPageTableEntry(unsigned long)>:
c00136d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00136da:	89 ca                	mov    edx,ecx
c00136dc:	c1 ea 16             	shr    edx,0x16
c00136df:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00136e5:	c1 e9 0a             	shr    ecx,0xa
c00136e8:	c1 e0 0c             	shl    eax,0xc
c00136eb:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00136f1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00136f4:	c3                   	ret    

c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00136f5:	55                   	push   ebp
c00136f6:	57                   	push   edi
c00136f7:	bf 01 00 00 00       	mov    edi,0x1
c00136fc:	56                   	push   esi
c00136fd:	53                   	push   ebx
c00136fe:	83 ec 1c             	sub    esp,0x1c
c0013701:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013705:	c1 ee 0c             	shr    esi,0xc
c0013708:	eb 48                	jmp    c0013752 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001370a:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001370f:	83 ec 08             	sub    esp,0x8
c0013712:	55                   	push   ebp
c0013713:	50                   	push   eax
c0013714:	e8 bd ff ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	8b 10                	mov    edx,DWORD PTR [eax]
c001371e:	f6 c6 04             	test   dh,0x4
c0013721:	75 70                	jne    c0013793 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013723:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013729:	83 fb 04             	cmp    ebx,0x4
c001372c:	0f 84 8a 00 00 00    	je     c00137bc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013732:	83 fb 02             	cmp    ebx,0x2
c0013735:	0f 84 9a 00 00 00    	je     c00137d5 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001373b:	83 fb 03             	cmp    ebx,0x3
c001373e:	0f 84 be 00 00 00    	je     c0013802 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013744:	83 fb 01             	cmp    ebx,0x1
c0013747:	0f 84 a2 00 00 00    	je     c00137ef <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001374d:	83 c6 01             	add    esi,0x1
c0013750:	31 ff                	xor    edi,edi
c0013752:	56                   	push   esi
c0013753:	89 f5                	mov    ebp,esi
c0013755:	e8 7a fc ff ff       	call   c00133d4 <Virt::getPageState(unsigned long)>
c001375a:	c1 e5 0c             	shl    ebp,0xc
c001375d:	5a                   	pop    edx
c001375e:	0f b6 d8             	movzx  ebx,al
c0013761:	85 db                	test   ebx,ebx
c0013763:	75 a5                	jne    c001370a <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013765:	83 ec 0c             	sub    esp,0xc
c0013768:	68 91 4a 02 c0       	push   0xc0024a91
c001376d:	e8 90 c6 ff ff       	call   c000fe02 <KePanic(char const*)>
c0013772:	5a                   	pop    edx
c0013773:	59                   	pop    ecx
c0013774:	55                   	push   ebp
c0013775:	8b 2d 50 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e250
c001377b:	55                   	push   ebp
c001377c:	e8 55 ff ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c0013781:	83 c4 10             	add    esp,0x10
c0013784:	8b 10                	mov    edx,DWORD PTR [eax]
c0013786:	f6 c6 04             	test   dh,0x4
c0013789:	75 08                	jne    c0013793 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001378b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013791:	eb ba                	jmp    c001374d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013797:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001379d:	83 ec 0c             	sub    esp,0xc
c00137a0:	52                   	push   edx
c00137a1:	e8 ed c7 ff ff       	call   c000ff93 <Phys::freePage(unsigned long)>
c00137a6:	83 c4 10             	add    esp,0x10
c00137a9:	83 fb 04             	cmp    ebx,0x4
c00137ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137b6:	0f 85 76 ff ff ff    	jne    c0013732 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00137bc:	83 e7 01             	and    edi,0x1
c00137bf:	75 46                	jne    c0013807 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00137c1:	c7 44 24 30 70 47 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024770
c00137c9:	83 c4 1c             	add    esp,0x1c
c00137cc:	5b                   	pop    ebx
c00137cd:	5e                   	pop    esi
c00137ce:	5f                   	pop    edi
c00137cf:	5d                   	pop    ebp
c00137d0:	e9 2d c6 ff ff       	jmp    c000fe02 <KePanic(char const*)>
c00137d5:	83 e7 01             	and    edi,0x1
c00137d8:	75 15                	jne    c00137ef <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00137da:	83 ec 0c             	sub    esp,0xc
c00137dd:	68 ad 4a 02 c0       	push   0xc0024aad
c00137e2:	e8 1b c6 ff ff       	call   c000fe02 <KePanic(char const*)>
c00137e7:	83 c4 10             	add    esp,0x10
c00137ea:	e9 5e ff ff ff       	jmp    c001374d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00137ef:	83 ec 08             	sub    esp,0x8
c00137f2:	6a 00                	push   0x0
c00137f4:	56                   	push   esi
c00137f5:	e8 a0 fb ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00137fa:	83 c4 10             	add    esp,0x10
c00137fd:	e9 4b ff ff ff       	jmp    c001374d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013802:	83 e7 01             	and    edi,0x1
c0013805:	75 16                	jne    c001381d <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013807:	83 ec 08             	sub    esp,0x8
c001380a:	6a 00                	push   0x0
c001380c:	56                   	push   esi
c001380d:	e8 88 fb ff ff       	call   c001339a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	83 c4 1c             	add    esp,0x1c
c0013818:	5b                   	pop    ebx
c0013819:	5e                   	pop    esi
c001381a:	5f                   	pop    edi
c001381b:	5d                   	pop    ebp
c001381c:	c3                   	ret    
c001381d:	c7 44 24 30 c9 4a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024ac9
c0013825:	83 c4 1c             	add    esp,0x1c
c0013828:	5b                   	pop    ebx
c0013829:	5e                   	pop    esi
c001382a:	5f                   	pop    edi
c001382b:	5d                   	pop    ebp
c001382c:	e9 d1 c5 ff ff       	jmp    c000fe02 <KePanic(char const*)>
c0013831:	90                   	nop

c0013832 <VAS::freeAllocatedPages(unsigned long)>:
c0013832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013836:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001383a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001383e:	74 09                	je     c0013849 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013840:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013844:	e9 ac fe ff ff       	jmp    c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013849:	c7 44 24 04 94 47 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024794
c0013851:	e9 10 37 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013856 <VAS::virtualToPhysical(unsigned long)>:
c0013856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001385a:	50                   	push   eax
c001385b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001385f:	52                   	push   edx
c0013860:	e8 71 fe ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c0013865:	59                   	pop    ecx
c0013866:	5a                   	pop    edx
c0013867:	8b 00                	mov    eax,DWORD PTR [eax]
c0013869:	25 00 f0 ff ff       	and    eax,0xfffff000
c001386e:	c3                   	ret    
c001386f:	90                   	nop

c0013870 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013870:	55                   	push   ebp
c0013871:	57                   	push   edi
c0013872:	56                   	push   esi
c0013873:	53                   	push   ebx
c0013874:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013878:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001387c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013880:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013884:	85 db                	test   ebx,ebx
c0013886:	7e 24                	jle    c00138ac <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013888:	c1 e3 0c             	shl    ebx,0xc
c001388b:	01 f3                	add    ebx,esi
c001388d:	56                   	push   esi
c001388e:	81 c6 00 10 00 00    	add    esi,0x1000
c0013894:	55                   	push   ebp
c0013895:	e8 3c fe ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c001389a:	5a                   	pop    edx
c001389b:	59                   	pop    ecx
c001389c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001389e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00138a2:	21 f9                	and    ecx,edi
c00138a4:	09 d1                	or     ecx,edx
c00138a6:	39 f3                	cmp    ebx,esi
c00138a8:	89 08                	mov    DWORD PTR [eax],ecx
c00138aa:	75 e1                	jne    c001388d <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00138ac:	5b                   	pop    ebx
c00138ad:	5e                   	pop    esi
c00138ae:	5f                   	pop    edi
c00138af:	5d                   	pop    ebp
c00138b0:	c3                   	ret    
c00138b1:	90                   	nop

c00138b2 <VAS::VAS()>:
c00138b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00138c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138cc:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c00138d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138d5:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00138d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138dd:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00138e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138e4:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00138eb:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c00138f0:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00138f5:	29 c2                	sub    edx,eax
c00138f7:	89 d0                	mov    eax,edx
c00138f9:	05 ff 0f 00 00       	add    eax,0xfff
c00138fe:	c1 e8 0c             	shr    eax,0xc
c0013901:	89 c2                	mov    edx,eax
c0013903:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013908:	6a 04                	push   0x4
c001390a:	6a ff                	push   0xffffffff
c001390c:	52                   	push   edx
c001390d:	50                   	push   eax
c001390e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013912:	e8 59 ff ff ff       	call   c0013870 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013917:	83 c4 14             	add    esp,0x14
c001391a:	90                   	nop
c001391b:	c3                   	ret    

c001391c <VAS::setToWriteCombining(unsigned long, int)>:
c001391c:	a1 24 eb 02 c0       	mov    eax,ds:0xc002eb24
c0013921:	50                   	push   eax
c0013922:	6a ff                	push   0xffffffff
c0013924:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013928:	52                   	push   edx
c0013929:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001392d:	51                   	push   ecx
c001392e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013932:	50                   	push   eax
c0013933:	e8 38 ff ff ff       	call   c0013870 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013938:	83 c4 14             	add    esp,0x14
c001393b:	c3                   	ret    

c001393c <VAS::mapOtherVASIn(bool, VAS*)>:
c001393c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013940:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013947:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001394a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001394f:	83 f8 01             	cmp    eax,0x1
c0013952:	19 c0                	sbb    eax,eax
c0013954:	83 ca 03             	or     edx,0x3
c0013957:	83 e0 fc             	and    eax,0xfffffffc
c001395a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013961:	0f 20 d8             	mov    eax,cr3
c0013964:	0f 22 d8             	mov    cr3,eax
c0013967:	c3                   	ret    

c0013968 <VAS::~VAS()>:
c0013968:	83 ec 2c             	sub    esp,0x2c
c001396b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013973:	fa                   	cli    
c0013974:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013979:	83 c0 01             	add    eax,0x1
c001397c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0013981:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013986:	8b 00                	mov    eax,DWORD PTR [eax]
c0013988:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001398b:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013991:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013995:	6a 01                	push   0x1
c0013997:	50                   	push   eax
c0013998:	e8 9f ff ff ff       	call   c001393c <VAS::mapOtherVASIn(bool, VAS*)>
c001399d:	83 c4 0c             	add    esp,0xc
c00139a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00139a8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00139b0:	0f 8f d8 00 00 00    	jg     c0013a8e <VAS::~VAS()+0x126>
c00139b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00139c1:	c1 e2 02             	shl    edx,0x2
c00139c4:	01 d0                	add    eax,edx
c00139c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00139c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00139cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d0:	83 e0 01             	and    eax,0x1
c00139d3:	0f 84 ab 00 00 00    	je     c0013a84 <VAS::~VAS()+0x11c>
c00139d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00139e1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00139e9:	7f 74                	jg     c0013a5f <VAS::~VAS()+0xf7>
c00139eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139ef:	c1 e0 0a             	shl    eax,0xa
c00139f2:	89 c2                	mov    edx,eax
c00139f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139f8:	01 d0                	add    eax,edx
c00139fa:	c1 e0 0c             	shl    eax,0xc
c00139fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a01:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013a06:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013a0b:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013a11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013a15:	6a 01                	push   0x1
c0013a17:	50                   	push   eax
c0013a18:	e8 8b fc ff ff       	call   c00136a8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013a1d:	83 c4 0c             	add    esp,0xc
c0013a20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a32:	25 01 04 00 00       	and    eax,0x401
c0013a37:	3d 01 04 00 00       	cmp    eax,0x401
c0013a3c:	75 1a                	jne    c0013a58 <VAS::~VAS()+0xf0>
c0013a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a47:	83 ec 0c             	sub    esp,0xc
c0013a4a:	50                   	push   eax
c0013a4b:	e8 43 c5 ff ff       	call   c000ff93 <Phys::freePage(unsigned long)>
c0013a50:	83 c4 10             	add    esp,0x10
c0013a53:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013a58:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013a5d:	eb 82                	jmp    c00139e1 <VAS::~VAS()+0x79>
c0013a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a63:	25 00 04 00 00       	and    eax,0x400
c0013a68:	74 1a                	je     c0013a84 <VAS::~VAS()+0x11c>
c0013a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a73:	83 ec 0c             	sub    esp,0xc
c0013a76:	50                   	push   eax
c0013a77:	e8 17 c5 ff ff       	call   c000ff93 <Phys::freePage(unsigned long)>
c0013a7c:	83 c4 10             	add    esp,0x10
c0013a7f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013a84:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013a89:	e9 1a ff ff ff       	jmp    c00139a8 <VAS::~VAS()+0x40>
c0013a8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013a95:	83 ec 0c             	sub    esp,0xc
c0013a98:	50                   	push   eax
c0013a99:	e8 57 fc ff ff       	call   c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a9e:	83 c4 10             	add    esp,0x10
c0013aa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013aa5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	50                   	push   eax
c0013aac:	e8 e2 c4 ff ff       	call   c000ff93 <Phys::freePage(unsigned long)>
c0013ab1:	83 c4 10             	add    esp,0x10
c0013ab4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013ab9:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0013ac1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013ac6:	85 c0                	test   eax,eax
c0013ac8:	75 01                	jne    c0013acb <VAS::~VAS()+0x163>
c0013aca:	fb                   	sti    
c0013acb:	90                   	nop
c0013acc:	83 c4 2c             	add    esp,0x2c
c0013acf:	c3                   	ret    

c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013ad0:	55                   	push   ebp
c0013ad1:	57                   	push   edi
c0013ad2:	56                   	push   esi
c0013ad3:	53                   	push   ebx
c0013ad4:	83 ec 1c             	sub    esp,0x1c
c0013ad7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013adb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013adf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013ae3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013ae9:	77 08                	ja     c0013af3 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0013aeb:	0f 20 d8             	mov    eax,cr3
c0013aee:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0013af1:	75 43                	jne    c0013b36 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0013af3:	89 d8                	mov    eax,ebx
c0013af5:	09 f8                	or     eax,edi
c0013af7:	a9 ff 0f 00 00       	test   eax,0xfff
c0013afc:	75 53                	jne    c0013b51 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0013afe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0013b01:	89 de                	mov    esi,ebx
c0013b03:	c1 ee 16             	shr    esi,0x16
c0013b06:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013b0d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013b11:	74 50                	je     c0013b63 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013b13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013b17:	c1 eb 0a             	shr    ebx,0xa
c0013b1a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013b20:	c1 e6 0c             	shl    esi,0xc
c0013b23:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013b29:	09 c7                	or     edi,eax
c0013b2b:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0013b2e:	83 c4 1c             	add    esp,0x1c
c0013b31:	5b                   	pop    ebx
c0013b32:	5e                   	pop    esi
c0013b33:	5f                   	pop    edi
c0013b34:	5d                   	pop    ebp
c0013b35:	c3                   	ret    
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	68 b8 47 02 c0       	push   0xc00247b8
c0013b3e:	e8 23 34 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013b43:	89 d8                	mov    eax,ebx
c0013b45:	83 c4 10             	add    esp,0x10
c0013b48:	09 f8                	or     eax,edi
c0013b4a:	a9 ff 0f 00 00       	test   eax,0xfff
c0013b4f:	74 ad                	je     c0013afe <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013b51:	83 ec 0c             	sub    esp,0xc
c0013b54:	68 20 48 02 c0       	push   0xc0024820
c0013b59:	e8 a4 c2 ff ff       	call   c000fe02 <KePanic(char const*)>
c0013b5e:	83 c4 10             	add    esp,0x10
c0013b61:	eb 9b                	jmp    c0013afe <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013b63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b67:	e8 90 c4 ff ff       	call   c000fffc <Phys::allocatePage()>
c0013b6c:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013b72:	83 ec 0c             	sub    esp,0xc
c0013b75:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013b79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013b7d:	6a 01                	push   0x1
c0013b7f:	e8 73 f8 ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c0013b84:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013b8b:	6a 01                	push   0x1
c0013b8d:	50                   	push   eax
c0013b8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b92:	52                   	push   edx
c0013b93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013b97:	51                   	push   ecx
c0013b98:	e8 2d 01 00 00       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013b9d:	83 c4 1c             	add    esp,0x1c
c0013ba0:	68 00 10 00 00       	push   0x1000
c0013ba5:	6a 00                	push   0x0
c0013ba7:	50                   	push   eax
c0013ba8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013bac:	e8 3f c9 fe ff       	call   c00004f0 <memset>
c0013bb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bb5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013bb8:	e8 38 fb ff ff       	call   c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013bbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013bcb:	0d 07 04 00 00       	or     eax,0x407
c0013bd0:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013bd3:	e9 3b ff ff ff       	jmp    c0013b13 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0013bd8 <VAS::allocatePages(int, int)>:
c0013bd8:	55                   	push   ebp
c0013bd9:	57                   	push   edi
c0013bda:	56                   	push   esi
c0013bdb:	53                   	push   ebx
c0013bdc:	83 ec 1c             	sub    esp,0x1c
c0013bdf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013be3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013be7:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013beb:	75 75                	jne    c0013c62 <VAS::allocatePages(int, int)+0x8a>
c0013bed:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013bf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bf4:	85 c0                	test   eax,eax
c0013bf6:	74 49                	je     c0013c41 <VAS::allocatePages(int, int)+0x69>
c0013bf8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013bfc:	89 d5                	mov    ebp,edx
c0013bfe:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013c02:	c1 e5 0c             	shl    ebp,0xc
c0013c05:	01 dd                	add    ebp,ebx
c0013c07:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013c0a:	81 cf 00 04 00 00    	or     edi,0x400
c0013c10:	85 d2                	test   edx,edx
c0013c12:	7e 1b                	jle    c0013c2f <VAS::allocatePages(int, int)+0x57>
c0013c14:	e8 e3 c3 ff ff       	call   c000fffc <Phys::allocatePage()>
c0013c19:	57                   	push   edi
c0013c1a:	53                   	push   ebx
c0013c1b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013c21:	50                   	push   eax
c0013c22:	56                   	push   esi
c0013c23:	e8 a8 fe ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c28:	83 c4 10             	add    esp,0x10
c0013c2b:	39 dd                	cmp    ebp,ebx
c0013c2d:	75 e5                	jne    c0013c14 <VAS::allocatePages(int, int)+0x3c>
c0013c2f:	0f 20 d8             	mov    eax,cr3
c0013c32:	0f 22 d8             	mov    cr3,eax
c0013c35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c39:	83 c4 1c             	add    esp,0x1c
c0013c3c:	5b                   	pop    ebx
c0013c3d:	5e                   	pop    esi
c0013c3e:	5f                   	pop    edi
c0013c3f:	5d                   	pop    ebp
c0013c40:	c3                   	ret    
c0013c41:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013c45:	83 ec 0c             	sub    esp,0xc
c0013c48:	68 44 48 02 c0       	push   0xc0024844
c0013c4d:	e8 b0 c1 ff ff       	call   c000fe02 <KePanic(char const*)>
c0013c52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013c55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013c59:	83 c4 10             	add    esp,0x10
c0013c5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013c60:	eb 96                	jmp    c0013bf8 <VAS::allocatePages(int, int)+0x20>
c0013c62:	83 ec 0c             	sub    esp,0xc
c0013c65:	52                   	push   edx
c0013c66:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013c6a:	e8 88 f7 ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c0013c6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013c73:	83 c4 10             	add    esp,0x10
c0013c76:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013c7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013c7f:	77 38                	ja     c0013cb9 <VAS::allocatePages(int, int)+0xe1>
c0013c81:	85 d2                	test   edx,edx
c0013c83:	7e aa                	jle    c0013c2f <VAS::allocatePages(int, int)+0x57>
c0013c85:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013c89:	c1 e2 0c             	shl    edx,0xc
c0013c8c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013c90:	81 cf 00 04 00 00    	or     edi,0x400
c0013c96:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0013c99:	e8 5e c3 ff ff       	call   c000fffc <Phys::allocatePage()>
c0013c9e:	57                   	push   edi
c0013c9f:	53                   	push   ebx
c0013ca0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013ca6:	50                   	push   eax
c0013ca7:	56                   	push   esi
c0013ca8:	e8 23 fe ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013cad:	83 c4 10             	add    esp,0x10
c0013cb0:	39 dd                	cmp    ebp,ebx
c0013cb2:	75 e5                	jne    c0013c99 <VAS::allocatePages(int, int)+0xc1>
c0013cb4:	e9 76 ff ff ff       	jmp    c0013c2f <VAS::allocatePages(int, int)+0x57>
c0013cb9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013cbd:	a1 28 eb 02 c0       	mov    eax,ds:0xc002eb28
c0013cc2:	09 c1                	or     ecx,eax
c0013cc4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013cc8:	eb b7                	jmp    c0013c81 <VAS::allocatePages(int, int)+0xa9>

c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013cca:	55                   	push   ebp
c0013ccb:	57                   	push   edi
c0013ccc:	56                   	push   esi
c0013ccd:	53                   	push   ebx
c0013cce:	83 ec 1c             	sub    esp,0x1c
c0013cd1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013cd5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013cd9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013cdd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013ce1:	85 db                	test   ebx,ebx
c0013ce3:	7e 2c                	jle    c0013d11 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013ce5:	c1 e3 0c             	shl    ebx,0xc
c0013ce8:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013ceb:	89 f3                	mov    ebx,esi
c0013ced:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cf1:	55                   	push   ebp
c0013cf2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013cf6:	29 f2                	sub    edx,esi
c0013cf8:	01 da                	add    edx,ebx
c0013cfa:	52                   	push   edx
c0013cfb:	53                   	push   ebx
c0013cfc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d02:	57                   	push   edi
c0013d03:	e8 c8 fd ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013d0f:	75 e0                	jne    c0013cf1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013d11:	0f 20 d8             	mov    eax,cr3
c0013d14:	0f 22 d8             	mov    cr3,eax
c0013d17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013d1b:	83 c4 1c             	add    esp,0x1c
c0013d1e:	5b                   	pop    ebx
c0013d1f:	5e                   	pop    esi
c0013d20:	5f                   	pop    edi
c0013d21:	5d                   	pop    ebp
c0013d22:	c3                   	ret    
c0013d23:	90                   	nop

c0013d24 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013d24:	55                   	push   ebp
c0013d25:	57                   	push   edi
c0013d26:	56                   	push   esi
c0013d27:	53                   	push   ebx
c0013d28:	83 ec 1c             	sub    esp,0x1c
c0013d2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d2f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013d33:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013d37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d3f:	09 d8                	or     eax,ebx
c0013d41:	a9 ff 0f 00 00       	test   eax,0xfff
c0013d46:	75 4b                	jne    c0013d93 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013d48:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013d4b:	89 de                	mov    esi,ebx
c0013d4d:	c1 ee 16             	shr    esi,0x16
c0013d50:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013d57:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013d5b:	74 48                	je     c0013da5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013d5d:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013d62:	c1 eb 0a             	shr    ebx,0xa
c0013d65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013d69:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013d6d:	83 ff 01             	cmp    edi,0x1
c0013d70:	19 c0                	sbb    eax,eax
c0013d72:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013d78:	c1 e6 0c             	shl    esi,0xc
c0013d7b:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013d80:	01 f3                	add    ebx,esi
c0013d82:	09 ca                	or     edx,ecx
c0013d84:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013d8b:	83 c4 1c             	add    esp,0x1c
c0013d8e:	5b                   	pop    ebx
c0013d8f:	5e                   	pop    esi
c0013d90:	5f                   	pop    edi
c0013d91:	5d                   	pop    ebp
c0013d92:	c3                   	ret    
c0013d93:	83 ec 0c             	sub    esp,0xc
c0013d96:	68 70 48 02 c0       	push   0xc0024870
c0013d9b:	e8 62 c0 ff ff       	call   c000fe02 <KePanic(char const*)>
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	eb a3                	jmp    c0013d48 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013da5:	e8 52 c2 ff ff       	call   c000fffc <Phys::allocatePage()>
c0013daa:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013db0:	83 ec 0c             	sub    esp,0xc
c0013db3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013db7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dbb:	6a 01                	push   0x1
c0013dbd:	e8 35 f6 ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c0013dc2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013dc9:	6a 01                	push   0x1
c0013dcb:	50                   	push   eax
c0013dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd0:	50                   	push   eax
c0013dd1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013dd5:	51                   	push   ecx
c0013dd6:	e8 ef fe ff ff       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013ddb:	83 c4 1c             	add    esp,0x1c
c0013dde:	68 00 10 00 00       	push   0x1000
c0013de3:	6a 00                	push   0x0
c0013de5:	50                   	push   eax
c0013de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dea:	e8 01 c7 fe ff       	call   c00004f0 <memset>
c0013def:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013df3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013df6:	e8 fa f8 ff ff       	call   c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013dfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013e05:	81 ca 07 04 00 00    	or     edx,0x407
c0013e0b:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013e0e:	e9 4a ff ff ff       	jmp    c0013d5d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013e13:	90                   	nop

c0013e14 <VAS::VAS(bool)>:
c0013e14:	53                   	push   ebx
c0013e15:	83 ec 28             	sub    esp,0x28
c0013e18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013e36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e3a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013e3e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013e41:	e8 b6 c1 ff ff       	call   c000fffc <Phys::allocatePage()>
c0013e46:	89 c2                	mov    edx,eax
c0013e48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013e4f:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0013e55:	83 ec 0c             	sub    esp,0xc
c0013e58:	6a 01                	push   0x1
c0013e5a:	e8 98 f5 ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c0013e5f:	83 c4 10             	add    esp,0x10
c0013e62:	89 c2                	mov    edx,eax
c0013e64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e6b:	83 ec 0c             	sub    esp,0xc
c0013e6e:	6a 03                	push   0x3
c0013e70:	6a 01                	push   0x1
c0013e72:	52                   	push   edx
c0013e73:	50                   	push   eax
c0013e74:	53                   	push   ebx
c0013e75:	e8 50 fe ff ff       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013e7a:	83 c4 20             	add    esp,0x20
c0013e7d:	89 c2                	mov    edx,eax
c0013e7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e83:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e86:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013e8e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013e96:	7f 1d                	jg     c0013eb5 <VAS::VAS(bool)+0xa1>
c0013e98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ea3:	c1 e2 02             	shl    edx,0x2
c0013ea6:	01 d0                	add    eax,edx
c0013ea8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013eae:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013eb3:	eb d9                	jmp    c0013e8e <VAS::VAS(bool)+0x7a>
c0013eb5:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013ebd:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013ec5:	7f 59                	jg     c0013f20 <VAS::VAS(bool)+0x10c>
c0013ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ecb:	2d 00 02 00 00       	sub    eax,0x200
c0013ed0:	c1 e0 0c             	shl    eax,0xc
c0013ed3:	89 c2                	mov    edx,eax
c0013ed5:	a1 28 eb 02 c0       	mov    eax,ds:0xc002eb28
c0013eda:	89 d1                	mov    ecx,edx
c0013edc:	09 c1                	or     ecx,eax
c0013ede:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ee2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ee5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ee9:	c1 e2 02             	shl    edx,0x2
c0013eec:	01 d0                	add    eax,edx
c0013eee:	83 c9 05             	or     ecx,0x5
c0013ef1:	89 ca                	mov    edx,ecx
c0013ef3:	89 10                	mov    DWORD PTR [eax],edx
c0013ef5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ef9:	2d 40 03 00 00       	sub    eax,0x340
c0013efe:	83 f8 7f             	cmp    eax,0x7f
c0013f01:	77 16                	ja     c0013f19 <VAS::VAS(bool)+0x105>
c0013f03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f0e:	c1 e2 02             	shl    edx,0x2
c0013f11:	01 d0                	add    eax,edx
c0013f13:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013f19:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013f1e:	eb 9d                	jmp    c0013ebd <VAS::VAS(bool)+0xa9>
c0013f20:	8b 15 28 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb28
c0013f26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f2d:	05 20 0c 00 00       	add    eax,0xc20
c0013f32:	81 ca 03 40 00 00    	or     edx,0x4003
c0013f38:	89 10                	mov    DWORD PTR [eax],edx
c0013f3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f3e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013f41:	a1 28 eb 02 c0       	mov    eax,ds:0xc002eb28
c0013f46:	09 c2                	or     edx,eax
c0013f48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f4f:	05 fc 0f 00 00       	add    eax,0xffc
c0013f54:	83 ca 03             	or     edx,0x3
c0013f57:	89 10                	mov    DWORD PTR [eax],edx
c0013f59:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0013f5e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	50                   	push   eax
c0013f68:	e8 e7 5c ff ff       	call   c0009c54 <Device::getName()>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	83 ec 08             	sub    esp,0x8
c0013f73:	68 e3 4a 02 c0       	push   0xc0024ae3
c0013f78:	50                   	push   eax
c0013f79:	e8 02 c8 fe ff       	call   c0000780 <strcmp>
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	85 c0                	test   eax,eax
c0013f83:	0f 94 c0             	sete   al
c0013f86:	0f b6 c0             	movzx  eax,al
c0013f89:	85 c0                	test   eax,eax
c0013f8b:	74 68                	je     c0013ff5 <VAS::VAS(bool)+0x1e1>
c0013f8d:	fa                   	cli    
c0013f8e:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0013f93:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013f99:	05 68 09 00 00       	add    eax,0x968
c0013f9e:	83 ec 0c             	sub    esp,0xc
c0013fa1:	50                   	push   eax
c0013fa2:	e8 e3 ad ff ff       	call   c000ed8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013fa7:	83 c4 10             	add    esp,0x10
c0013faa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013faf:	89 c3                	mov    ebx,eax
c0013fb1:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0013fb6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013fbc:	05 68 09 00 00       	add    eax,0x968
c0013fc1:	83 ec 0c             	sub    esp,0xc
c0013fc4:	50                   	push   eax
c0013fc5:	e8 c0 ad ff ff       	call   c000ed8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013fca:	83 c4 10             	add    esp,0x10
c0013fcd:	83 ec 08             	sub    esp,0x8
c0013fd0:	50                   	push   eax
c0013fd1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fd5:	e8 fc f6 ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c0013fda:	83 c4 10             	add    esp,0x10
c0013fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fdf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013fe4:	6a 11                	push   0x11
c0013fe6:	53                   	push   ebx
c0013fe7:	50                   	push   eax
c0013fe8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fec:	e8 df fa ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ff1:	83 c4 10             	add    esp,0x10
c0013ff4:	fb                   	sti    
c0013ff5:	90                   	nop
c0013ff6:	83 c4 28             	add    esp,0x28
c0013ff9:	5b                   	pop    ebx
c0013ffa:	c3                   	ret    
c0013ffb:	90                   	nop

c0013ffc <VAS::evict(unsigned long)>:
c0013ffc:	55                   	push   ebp
c0013ffd:	57                   	push   edi
c0013ffe:	56                   	push   esi
c0013fff:	53                   	push   ebx
c0014000:	83 ec 24             	sub    esp,0x24
c0014003:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014007:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001400b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001400f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014014:	50                   	push   eax
c0014015:	68 f1 4a 02 c0       	push   0xc0024af1
c001401a:	e8 47 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001401f:	e8 28 f5 ff ff       	call   c001354c <Virt::allocateSwapfilePage()>
c0014024:	83 c4 10             	add    esp,0x10
c0014027:	89 c7                	mov    edi,eax
c0014029:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c001402e:	85 c0                	test   eax,eax
c0014030:	7e 40                	jle    c0014072 <VAS::evict(unsigned long)+0x76>
c0014032:	89 ee                	mov    esi,ebp
c0014034:	31 db                	xor    ebx,ebx
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	57                   	push   edi
c001403a:	e8 f7 f4 ff ff       	call   c0013536 <Virt::swapIDToSector(unsigned long)>
c001403f:	31 d2                	xor    edx,edx
c0014041:	89 34 24             	mov    DWORD PTR [esp],esi
c0014044:	81 c6 00 02 00 00    	add    esi,0x200
c001404a:	6a 01                	push   0x1
c001404c:	52                   	push   edx
c001404d:	01 d8                	add    eax,ebx
c001404f:	83 c3 01             	add    ebx,0x1
c0014052:	50                   	push   eax
c0014053:	0f be 05 b8 6a 02 c0 	movsx  eax,BYTE PTR ds:0xc0026ab8
c001405a:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0014061:	50                   	push   eax
c0014062:	e8 51 6a ff ff       	call   c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>
c0014067:	83 c4 20             	add    esp,0x20
c001406a:	39 1d ac 6a 02 c0    	cmp    DWORD PTR ds:0xc0026aac,ebx
c0014070:	7f c4                	jg     c0014036 <VAS::evict(unsigned long)+0x3a>
c0014072:	c1 e7 0c             	shl    edi,0xc
c0014075:	83 ec 08             	sub    esp,0x8
c0014078:	55                   	push   ebp
c0014079:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001407d:	50                   	push   eax
c001407e:	e8 53 f6 ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c0014083:	8b 10                	mov    edx,DWORD PTR [eax]
c0014085:	89 d3                	mov    ebx,edx
c0014087:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001408d:	09 d7                	or     edi,edx
c001408f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014095:	89 38                	mov    DWORD PTR [eax],edi
c0014097:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001409a:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c00140a0:	83 c2 01             	add    edx,0x1
c00140a3:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c00140a9:	e8 e5 be ff ff       	call   c000ff93 <Phys::freePage(unsigned long)>
c00140ae:	0f 20 d8             	mov    eax,cr3
c00140b1:	0f 22 d8             	mov    cr3,eax
c00140b4:	8b 0d 48 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e248
c00140ba:	51                   	push   ecx
c00140bb:	55                   	push   ebp
c00140bc:	53                   	push   ebx
c00140bd:	68 94 48 02 c0       	push   0xc0024894
c00140c2:	e8 9f 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00140c7:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c00140cc:	83 c4 18             	add    esp,0x18
c00140cf:	50                   	push   eax
c00140d0:	68 06 4b 02 c0       	push   0xc0024b06
c00140d5:	8d 50 01             	lea    edx,[eax+0x1]
c00140d8:	89 15 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,edx
c00140de:	e8 83 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00140e3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00140e8:	c7 44 24 40 18 4b 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024b18
c00140f0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00140f4:	83 c4 2c             	add    esp,0x2c
c00140f7:	5b                   	pop    ebx
c00140f8:	5e                   	pop    esi
c00140f9:	5f                   	pop    edi
c00140fa:	5d                   	pop    ebp
c00140fb:	e9 66 2e ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0014100 <VAS::canLockPage(unsigned long)>:
c0014100:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014104:	50                   	push   eax
c0014105:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014109:	52                   	push   edx
c001410a:	e8 c7 f5 ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c001410f:	59                   	pop    ecx
c0014110:	5a                   	pop    edx
c0014111:	8b 00                	mov    eax,DWORD PTR [eax]
c0014113:	c1 e8 0b             	shr    eax,0xb
c0014116:	83 e0 01             	and    eax,0x1
c0014119:	c3                   	ret    

c001411a <VAS::unlockPage(unsigned long)>:
c001411a:	83 ec 0c             	sub    esp,0xc
c001411d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014121:	50                   	push   eax
c0014122:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014126:	52                   	push   edx
c0014127:	e8 aa f5 ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c001412c:	59                   	pop    ecx
c001412d:	5a                   	pop    edx
c001412e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014130:	f6 c6 08             	test   dh,0x8
c0014133:	75 09                	jne    c001413e <VAS::unlockPage(unsigned long)+0x24>
c0014135:	80 ce 08             	or     dh,0x8
c0014138:	89 10                	mov    DWORD PTR [eax],edx
c001413a:	83 c4 0c             	add    esp,0xc
c001413d:	c3                   	ret    
c001413e:	c7 44 24 10 c8 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc00248c8
c0014146:	83 c4 0c             	add    esp,0xc
c0014149:	e9 b4 bc ff ff       	jmp    c000fe02 <KePanic(char const*)>

c001414e <VAS::canLockPages(unsigned long, int)>:
c001414e:	55                   	push   ebp
c001414f:	57                   	push   edi
c0014150:	56                   	push   esi
c0014151:	53                   	push   ebx
c0014152:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014156:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001415a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001415e:	85 ff                	test   edi,edi
c0014160:	7e 23                	jle    c0014185 <VAS::canLockPages(unsigned long, int)+0x37>
c0014162:	31 f6                	xor    esi,esi
c0014164:	eb 0d                	jmp    c0014173 <VAS::canLockPages(unsigned long, int)+0x25>
c0014166:	83 c6 01             	add    esi,0x1
c0014169:	81 c3 00 10 00 00    	add    ebx,0x1000
c001416f:	39 f7                	cmp    edi,esi
c0014171:	74 0d                	je     c0014180 <VAS::canLockPages(unsigned long, int)+0x32>
c0014173:	53                   	push   ebx
c0014174:	55                   	push   ebp
c0014175:	e8 86 ff ff ff       	call   c0014100 <VAS::canLockPage(unsigned long)>
c001417a:	5a                   	pop    edx
c001417b:	59                   	pop    ecx
c001417c:	84 c0                	test   al,al
c001417e:	75 e6                	jne    c0014166 <VAS::canLockPages(unsigned long, int)+0x18>
c0014180:	5b                   	pop    ebx
c0014181:	5e                   	pop    esi
c0014182:	5f                   	pop    edi
c0014183:	5d                   	pop    ebp
c0014184:	c3                   	ret    
c0014185:	b0 01                	mov    al,0x1
c0014187:	eb f7                	jmp    c0014180 <VAS::canLockPages(unsigned long, int)+0x32>
c0014189:	90                   	nop

c001418a <VAS::unlockPages(unsigned long, int)>:
c001418a:	55                   	push   ebp
c001418b:	57                   	push   edi
c001418c:	56                   	push   esi
c001418d:	53                   	push   ebx
c001418e:	83 ec 0c             	sub    esp,0xc
c0014191:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014195:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014199:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001419d:	85 ff                	test   edi,edi
c001419f:	7e 1c                	jle    c00141bd <VAS::unlockPages(unsigned long, int)+0x33>
c00141a1:	31 f6                	xor    esi,esi
c00141a3:	83 ec 08             	sub    esp,0x8
c00141a6:	83 c6 01             	add    esi,0x1
c00141a9:	53                   	push   ebx
c00141aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c00141b0:	55                   	push   ebp
c00141b1:	e8 64 ff ff ff       	call   c001411a <VAS::unlockPage(unsigned long)>
c00141b6:	83 c4 10             	add    esp,0x10
c00141b9:	39 f7                	cmp    edi,esi
c00141bb:	75 e6                	jne    c00141a3 <VAS::unlockPages(unsigned long, int)+0x19>
c00141bd:	83 c4 0c             	add    esp,0xc
c00141c0:	5b                   	pop    ebx
c00141c1:	5e                   	pop    esi
c00141c2:	5f                   	pop    edi
c00141c3:	5d                   	pop    ebp
c00141c4:	c3                   	ret    
c00141c5:	90                   	nop

c00141c6 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00141c6:	55                   	push   ebp
c00141c7:	57                   	push   edi
c00141c8:	56                   	push   esi
c00141c9:	53                   	push   ebx
c00141ca:	81 ec 1c 10 00 00    	sub    esp,0x101c
c00141d0:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c00141d7:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00141dd:	77 6f                	ja     c001424e <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c00141df:	83 ec 08             	sub    esp,0x8
c00141e2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00141e8:	53                   	push   ebx
c00141e9:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c00141f0:	51                   	push   ecx
c00141f1:	e8 e0 f4 ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c00141f6:	83 c4 10             	add    esp,0x10
c00141f9:	85 c0                	test   eax,eax
c00141fb:	89 c5                	mov    ebp,eax
c00141fd:	0f 95 c0             	setne  al
c0014200:	85 db                	test   ebx,ebx
c0014202:	0f 95 c2             	setne  dl
c0014205:	21 d0                	and    eax,edx
c0014207:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001420b:	a8 01                	test   al,0x1
c001420d:	75 0f                	jne    c001421e <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c001420f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0014213:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014219:	5b                   	pop    ebx
c001421a:	5e                   	pop    esi
c001421b:	5f                   	pop    edi
c001421c:	5d                   	pop    ebp
c001421d:	c3                   	ret    
c001421e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014221:	f6 c4 02             	test   ah,0x2
c0014224:	75 3d                	jne    c0014263 <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c0014226:	89 c2                	mov    edx,eax
c0014228:	81 e2 01 04 00 00    	and    edx,0x401
c001422e:	81 fa 00 04 00 00    	cmp    edx,0x400
c0014234:	0f 84 89 00 00 00    	je     c00142c3 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c001423a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001423f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0014243:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014249:	5b                   	pop    ebx
c001424a:	5e                   	pop    esi
c001424b:	5f                   	pop    edi
c001424c:	5d                   	pop    ebp
c001424d:	c3                   	ret    
c001424e:	83 ec 0c             	sub    esp,0xc
c0014251:	68 2d 4b 02 c0       	push   0xc0024b2d
c0014256:	e8 a7 bb ff ff       	call   c000fe02 <KePanic(char const*)>
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	e9 7c ff ff ff       	jmp    c00141df <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0014263:	83 ec 0c             	sub    esp,0xc
c0014266:	68 f8 48 02 c0       	push   0xc00248f8
c001426b:	e8 f6 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014270:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0014273:	e8 84 bd ff ff       	call   c000fffc <Phys::allocatePage()>
c0014278:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001427b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0014281:	83 ca 01             	or     edx,0x1
c0014284:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0014287:	0f 20 da             	mov    edx,cr3
c001428a:	0f 22 da             	mov    cr3,edx
c001428d:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0014291:	ba 00 10 00 00       	mov    edx,0x1000
c0014296:	89 d1                	mov    ecx,edx
c0014298:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001429a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001429d:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00142a3:	09 c8                	or     eax,ecx
c00142a5:	83 c8 02             	or     eax,0x2
c00142a8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00142ab:	0f 20 d8             	mov    eax,cr3
c00142ae:	0f 22 d8             	mov    cr3,eax
c00142b1:	8d 74 24 20          	lea    esi,[esp+0x20]
c00142b5:	89 df                	mov    edi,ebx
c00142b7:	89 d1                	mov    ecx,edx
c00142b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142bb:	83 c4 10             	add    esp,0x10
c00142be:	e9 4c ff ff ff       	jmp    c001420f <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c00142c3:	c1 e8 0c             	shr    eax,0xc
c00142c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142ca:	e8 2d bd ff ff       	call   c000fffc <Phys::allocatePage()>
c00142cf:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00142d2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00142d8:	09 c2                	or     edx,eax
c00142da:	81 ca 01 08 00 00    	or     edx,0x801
c00142e0:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00142e3:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c00142e8:	85 c0                	test   eax,eax
c00142ea:	7e 44                	jle    c0014330 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>
c00142ec:	89 df                	mov    edi,ebx
c00142ee:	31 f6                	xor    esi,esi
c00142f0:	83 ec 0c             	sub    esp,0xc
c00142f3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00142f7:	51                   	push   ecx
c00142f8:	e8 39 f2 ff ff       	call   c0013536 <Virt::swapIDToSector(unsigned long)>
c00142fd:	31 d2                	xor    edx,edx
c00142ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014302:	81 c7 00 02 00 00    	add    edi,0x200
c0014308:	6a 01                	push   0x1
c001430a:	52                   	push   edx
c001430b:	01 f0                	add    eax,esi
c001430d:	83 c6 01             	add    esi,0x1
c0014310:	50                   	push   eax
c0014311:	0f be 05 b8 6a 02 c0 	movsx  eax,BYTE PTR ds:0xc0026ab8
c0014318:	8b 2c 85 dc b9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4624]
c001431f:	55                   	push   ebp
c0014320:	e8 27 67 ff ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c0014325:	83 c4 20             	add    esp,0x20
c0014328:	39 35 ac 6a 02 c0    	cmp    DWORD PTR ds:0xc0026aac,esi
c001432e:	7f c0                	jg     c00142f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x12a>
c0014330:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014335:	83 ec 04             	sub    esp,0x4
c0014338:	83 e8 01             	sub    eax,0x1
c001433b:	50                   	push   eax
c001433c:	53                   	push   ebx
c001433d:	68 3f 4b 02 c0       	push   0xc0024b3f
c0014342:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c0014347:	e8 1a 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001434c:	58                   	pop    eax
c001434d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014351:	52                   	push   edx
c0014352:	e8 bc f1 ff ff       	call   c0013513 <Virt::freeSwapfilePage(unsigned long)>
c0014357:	0f 20 d8             	mov    eax,cr3
c001435a:	0f 22 d8             	mov    cr3,eax
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	e9 aa fe ff ff       	jmp    c001420f <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c0014365:	90                   	nop

c0014366 <VAS::lockPage(unsigned long)>:
c0014366:	56                   	push   esi
c0014367:	53                   	push   ebx
c0014368:	83 ec 04             	sub    esp,0x4
c001436b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001436f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014373:	50                   	push   eax
c0014374:	56                   	push   esi
c0014375:	e8 5c f3 ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c001437a:	5a                   	pop    edx
c001437b:	59                   	pop    ecx
c001437c:	89 c3                	mov    ebx,eax
c001437e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014380:	a8 01                	test   al,0x1
c0014382:	74 10                	je     c0014394 <VAS::lockPage(unsigned long)+0x2e>
c0014384:	f6 c4 08             	test   ah,0x8
c0014387:	74 28                	je     c00143b1 <VAS::lockPage(unsigned long)+0x4b>
c0014389:	80 e4 f7             	and    ah,0xf7
c001438c:	89 03                	mov    DWORD PTR [ebx],eax
c001438e:	83 c4 04             	add    esp,0x4
c0014391:	5b                   	pop    ebx
c0014392:	5e                   	pop    esi
c0014393:	c3                   	ret    
c0014394:	83 ec 08             	sub    esp,0x8
c0014397:	25 00 f0 ff ff       	and    eax,0xfffff000
c001439c:	50                   	push   eax
c001439d:	56                   	push   esi
c001439e:	e8 23 fe ff ff       	call   c00141c6 <VAS::tryLoadBackOffDisk(unsigned long)>
c00143a3:	83 c4 10             	add    esp,0x10
c00143a6:	84 c0                	test   al,al
c00143a8:	74 19                	je     c00143c3 <VAS::lockPage(unsigned long)+0x5d>
c00143aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ac:	f6 c4 08             	test   ah,0x8
c00143af:	75 d8                	jne    c0014389 <VAS::lockPage(unsigned long)+0x23>
c00143b1:	c7 44 24 10 c8 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc00248c8
c00143b9:	83 c4 04             	add    esp,0x4
c00143bc:	5b                   	pop    ebx
c00143bd:	5e                   	pop    esi
c00143be:	e9 3f ba ff ff       	jmp    c000fe02 <KePanic(char const*)>
c00143c3:	83 ec 0c             	sub    esp,0xc
c00143c6:	68 18 49 02 c0       	push   0xc0024918
c00143cb:	e8 32 ba ff ff       	call   c000fe02 <KePanic(char const*)>
c00143d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143d2:	83 c4 10             	add    esp,0x10
c00143d5:	eb ad                	jmp    c0014384 <VAS::lockPage(unsigned long)+0x1e>
c00143d7:	90                   	nop

c00143d8 <VAS::lockPages(unsigned long, int)>:
c00143d8:	55                   	push   ebp
c00143d9:	57                   	push   edi
c00143da:	56                   	push   esi
c00143db:	53                   	push   ebx
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00143e3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00143e7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00143eb:	85 ff                	test   edi,edi
c00143ed:	7e 1c                	jle    c001440b <VAS::lockPages(unsigned long, int)+0x33>
c00143ef:	31 f6                	xor    esi,esi
c00143f1:	83 ec 08             	sub    esp,0x8
c00143f4:	83 c6 01             	add    esi,0x1
c00143f7:	53                   	push   ebx
c00143f8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00143fe:	55                   	push   ebp
c00143ff:	e8 62 ff ff ff       	call   c0014366 <VAS::lockPage(unsigned long)>
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	39 f7                	cmp    edi,esi
c0014409:	75 e6                	jne    c00143f1 <VAS::lockPages(unsigned long, int)+0x19>
c001440b:	83 c4 0c             	add    esp,0xc
c001440e:	5b                   	pop    ebx
c001440f:	5e                   	pop    esi
c0014410:	5f                   	pop    edi
c0014411:	5d                   	pop    ebp
c0014412:	c3                   	ret    
c0014413:	90                   	nop

c0014414 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014414:	55                   	push   ebp
c0014415:	57                   	push   edi
c0014416:	56                   	push   esi
c0014417:	53                   	push   ebx
c0014418:	83 ec 28             	sub    esp,0x28
c001441b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001441f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014423:	50                   	push   eax
c0014424:	e8 ce ef ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c0014429:	83 c4 0c             	add    esp,0xc
c001442c:	6a 07                	push   0x7
c001442e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014432:	52                   	push   edx
c0014433:	89 c5                	mov    ebp,eax
c0014435:	53                   	push   ebx
c0014436:	e8 9d f7 ff ff       	call   c0013bd8 <VAS::allocatePages(int, int)>
c001443b:	83 c4 10             	add    esp,0x10
c001443e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014442:	89 c7                	mov    edi,eax
c0014444:	85 c9                	test   ecx,ecx
c0014446:	74 2f                	je     c0014477 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014448:	31 f6                	xor    esi,esi
c001444a:	e8 ad bb ff ff       	call   c000fffc <Phys::allocatePage()>
c001444f:	83 c6 01             	add    esi,0x1
c0014452:	6a 03                	push   0x3
c0014454:	55                   	push   ebp
c0014455:	50                   	push   eax
c0014456:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001445a:	53                   	push   ebx
c001445b:	e8 70 f6 ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014460:	6a 07                	push   0x7
c0014462:	57                   	push   edi
c0014463:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014467:	50                   	push   eax
c0014468:	53                   	push   ebx
c0014469:	e8 62 f6 ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001446e:	83 c4 20             	add    esp,0x20
c0014471:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014475:	75 d3                	jne    c001444a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001447b:	89 28                	mov    DWORD PTR [eax],ebp
c001447d:	83 c4 1c             	add    esp,0x1c
c0014480:	89 f8                	mov    eax,edi
c0014482:	5b                   	pop    ebx
c0014483:	5e                   	pop    esi
c0014484:	5f                   	pop    edi
c0014485:	5d                   	pop    ebp
c0014486:	c3                   	ret    
c0014487:	90                   	nop

c0014488 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014488:	53                   	push   ebx
c0014489:	83 ec 14             	sub    esp,0x14
c001448c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014490:	68 48 49 02 c0       	push   0xc0024948
c0014495:	e8 cc 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001449a:	c7 04 24 a8 49 02 c0 	mov    DWORD PTR [esp],0xc00249a8
c00144a1:	e8 c0 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00144a6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00144aa:	83 c4 18             	add    esp,0x18
c00144ad:	5b                   	pop    ebx
c00144ae:	e9 42 f2 ff ff       	jmp    c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c00144b3:	90                   	nop

c00144b4 <VAS::scanForEviction()>:
c00144b4:	57                   	push   edi
c00144b5:	56                   	push   esi
c00144b6:	31 f6                	xor    esi,esi
c00144b8:	53                   	push   ebx
c00144b9:	83 ec 18             	sub    esp,0x18
c00144bc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00144c1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144c5:	50                   	push   eax
c00144c6:	68 24 4a 02 c0       	push   0xc0024a24
c00144cb:	e8 96 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00144d0:	c7 04 24 54 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b54
c00144d7:	e8 8a 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00144dc:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00144df:	83 c4 10             	add    esp,0x10
c00144e2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00144e8:	75 0e                	jne    c00144f8 <VAS::scanForEviction()+0x44>
c00144ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00144ed:	89 da                	mov    edx,ebx
c00144ef:	c1 ea 16             	shr    edx,0x16
c00144f2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00144f6:	74 5b                	je     c0014553 <VAS::scanForEviction()+0x9f>
c00144f8:	83 ec 08             	sub    esp,0x8
c00144fb:	53                   	push   ebx
c00144fc:	57                   	push   edi
c00144fd:	e8 d4 f1 ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c0014502:	83 c4 10             	add    esp,0x10
c0014505:	8b 10                	mov    edx,DWORD PTR [eax]
c0014507:	89 d1                	mov    ecx,edx
c0014509:	c1 e9 0c             	shr    ecx,0xc
c001450c:	74 10                	je     c001451e <VAS::scanForEviction()+0x6a>
c001450e:	89 d1                	mov    ecx,edx
c0014510:	81 e1 01 08 00 00    	and    ecx,0x801
c0014516:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001451c:	74 40                	je     c001455e <VAS::scanForEviction()+0xaa>
c001451e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014524:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001452a:	76 2d                	jbe    c0014559 <VAS::scanForEviction()+0xa5>
c001452c:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014533:	83 c6 01             	add    esi,0x1
c0014536:	83 fe 03             	cmp    esi,0x3
c0014539:	74 32                	je     c001456d <VAS::scanForEviction()+0xb9>
c001453b:	31 db                	xor    ebx,ebx
c001453d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014543:	75 b3                	jne    c00144f8 <VAS::scanForEviction()+0x44>
c0014545:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014548:	89 da                	mov    edx,ebx
c001454a:	c1 ea 16             	shr    edx,0x16
c001454d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014551:	75 a5                	jne    c00144f8 <VAS::scanForEviction()+0x44>
c0014553:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014559:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001455c:	eb 84                	jmp    c00144e2 <VAS::scanForEviction()+0x2e>
c001455e:	f6 c2 20             	test   dl,0x20
c0014561:	74 13                	je     c0014576 <VAS::scanForEviction()+0xc2>
c0014563:	83 e2 df             	and    edx,0xffffffdf
c0014566:	89 10                	mov    DWORD PTR [eax],edx
c0014568:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001456b:	eb b1                	jmp    c001451e <VAS::scanForEviction()+0x6a>
c001456d:	83 c4 10             	add    esp,0x10
c0014570:	31 c0                	xor    eax,eax
c0014572:	5b                   	pop    ebx
c0014573:	5e                   	pop    esi
c0014574:	5f                   	pop    edi
c0014575:	c3                   	ret    
c0014576:	89 d0                	mov    eax,edx
c0014578:	83 ec 08             	sub    esp,0x8
c001457b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014580:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014584:	53                   	push   ebx
c0014585:	68 70 4b 02 c0       	push   0xc0024b70
c001458a:	e8 d7 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001458f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014592:	58                   	pop    eax
c0014593:	5a                   	pop    edx
c0014594:	51                   	push   ecx
c0014595:	57                   	push   edi
c0014596:	e8 61 fa ff ff       	call   c0013ffc <VAS::evict(unsigned long)>
c001459b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001459e:	5b                   	pop    ebx
c001459f:	5e                   	pop    esi
c00145a0:	50                   	push   eax
c00145a1:	68 84 4b 02 c0       	push   0xc0024b84
c00145a6:	e8 bb 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00145ab:	58                   	pop    eax
c00145ac:	5a                   	pop    edx
c00145ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145b1:	50                   	push   eax
c00145b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145b6:	68 97 4b 02 c0       	push   0xc0024b97
c00145bb:	e8 a6 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00145c0:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00145c3:	81 c1 00 10 00 00    	add    ecx,0x1000
c00145c9:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00145cc:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c00145d2:	5b                   	pop    ebx
c00145d3:	5e                   	pop    esi
c00145d4:	57                   	push   edi
c00145d5:	68 44 4a 02 c0       	push   0xc0024a44
c00145da:	e8 87 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00145df:	83 c4 10             	add    esp,0x10
c00145e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145e6:	83 c4 10             	add    esp,0x10
c00145e9:	5b                   	pop    ebx
c00145ea:	5e                   	pop    esi
c00145eb:	5f                   	pop    edi
c00145ec:	c3                   	ret    

c00145ed <mapVASFirstTime>:
c00145ed:	55                   	push   ebp
c00145ee:	57                   	push   edi
c00145ef:	56                   	push   esi
c00145f0:	53                   	push   ebx
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145f9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00145fc:	83 fa 01             	cmp    edx,0x1
c00145ff:	0f 84 cb 00 00 00    	je     c00146d0 <mapVASFirstTime+0xe3>
c0014605:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014608:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001460d:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014612:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014615:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c001461b:	c1 e5 15             	shl    ebp,0x15
c001461e:	29 eb                	sub    ebx,ebp
c0014620:	29 ef                	sub    edi,ebp
c0014622:	e8 d5 b9 ff ff       	call   c000fffc <Phys::allocatePage()>
c0014627:	83 ec 0c             	sub    esp,0xc
c001462a:	68 03 04 00 00       	push   0x403
c001462f:	6a 01                	push   0x1
c0014631:	53                   	push   ebx
c0014632:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014638:	50                   	push   eax
c0014639:	56                   	push   esi
c001463a:	e8 8b f6 ff ff       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001463f:	83 c4 20             	add    esp,0x20
c0014642:	39 fb                	cmp    ebx,edi
c0014644:	75 dc                	jne    c0014622 <mapVASFirstTime+0x35>
c0014646:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001464b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014650:	29 eb                	sub    ebx,ebp
c0014652:	29 ef                	sub    edi,ebp
c0014654:	e8 a3 b9 ff ff       	call   c000fffc <Phys::allocatePage()>
c0014659:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001465d:	83 fa 01             	cmp    edx,0x1
c0014660:	19 d2                	sbb    edx,edx
c0014662:	83 ec 0c             	sub    esp,0xc
c0014665:	83 e2 04             	and    edx,0x4
c0014668:	81 c2 03 04 00 00    	add    edx,0x403
c001466e:	52                   	push   edx
c001466f:	6a 01                	push   0x1
c0014671:	53                   	push   ebx
c0014672:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014678:	50                   	push   eax
c0014679:	56                   	push   esi
c001467a:	e8 4b f6 ff ff       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001467f:	83 c4 20             	add    esp,0x20
c0014682:	39 df                	cmp    edi,ebx
c0014684:	75 ce                	jne    c0014654 <mapVASFirstTime+0x67>
c0014686:	83 ec 0c             	sub    esp,0xc
c0014689:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c001468e:	6a 04                	push   0x4
c0014690:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c0014696:	6a ff                	push   0xffffffff
c0014698:	c1 eb 0c             	shr    ebx,0xc
c001469b:	53                   	push   ebx
c001469c:	68 00 70 02 c0       	push   0xc0027000
c00146a1:	56                   	push   esi
c00146a2:	e8 c9 f1 ff ff       	call   c0013870 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00146a7:	83 c4 14             	add    esp,0x14
c00146aa:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c00146af:	6a 04                	push   0x4
c00146b1:	6a ff                	push   0xffffffff
c00146b3:	53                   	push   ebx
c00146b4:	68 00 70 02 c0       	push   0xc0027000
c00146b9:	50                   	push   eax
c00146ba:	e8 b1 f1 ff ff       	call   c0013870 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00146bf:	0f 20 d8             	mov    eax,cr3
c00146c2:	0f 22 d8             	mov    cr3,eax
c00146c5:	83 c4 20             	add    esp,0x20
c00146c8:	83 c4 0c             	add    esp,0xc
c00146cb:	5b                   	pop    ebx
c00146cc:	5e                   	pop    esi
c00146cd:	5f                   	pop    edi
c00146ce:	5d                   	pop    ebp
c00146cf:	c3                   	ret    
c00146d0:	83 ec 0c             	sub    esp,0xc
c00146d3:	68 a4 4b 02 c0       	push   0xc0024ba4
c00146d8:	e8 89 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00146dd:	83 c4 10             	add    esp,0x10
c00146e0:	83 c4 0c             	add    esp,0xc
c00146e3:	5b                   	pop    ebx
c00146e4:	5e                   	pop    esi
c00146e5:	5f                   	pop    edi
c00146e6:	5d                   	pop    ebp
c00146e7:	c3                   	ret    

c00146e8 <SysAlarm(regs*)>:
c00146e8:	53                   	push   ebx
c00146e9:	83 ec 10             	sub    esp,0x10
c00146ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00146f0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00146f3:	68 bd 4b 02 c0       	push   0xc0024bbd
c00146f8:	e8 69 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00146fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014700:	83 c4 0c             	add    esp,0xc
c0014703:	31 d2                	xor    edx,edx
c0014705:	52                   	push   edx
c0014706:	50                   	push   eax
c0014707:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001470d:	e8 d2 09 00 00       	call   c00150e4 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014712:	83 c4 18             	add    esp,0x18
c0014715:	5b                   	pop    ebx
c0014716:	c3                   	ret    

c0014717 <SysEject(regs*)>:
c0014717:	83 ec 0c             	sub    esp,0xc
c001471a:	83 ca ff             	or     edx,0xffffffff
c001471d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014721:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014724:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014729:	83 e9 41             	sub    ecx,0x41
c001472c:	83 f9 19             	cmp    ecx,0x19
c001472f:	77 18                	ja     c0014749 <SysEject(regs*)+0x32>
c0014731:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0014738:	85 c9                	test   ecx,ecx
c001473a:	74 0d                	je     c0014749 <SysEject(regs*)+0x32>
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	51                   	push   ecx
c0014740:	e8 9d 62 ff ff       	call   c000a9e2 <LogicalDisk::eject()>
c0014745:	83 c4 10             	add    esp,0x10
c0014748:	99                   	cdq    
c0014749:	83 c4 0c             	add    esp,0xc
c001474c:	c3                   	ret    

c001474d <SysExit(regs*)>:
c001474d:	83 ec 18             	sub    esp,0x18
c0014750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014754:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014757:	e8 d8 2f 00 00       	call   c0017734 <KeTerminateCurrentThread(int)>
c001475c:	83 c8 ff             	or     eax,0xffffffff
c001475f:	83 c4 1c             	add    esp,0x1c
c0014762:	89 c2                	mov    edx,eax
c0014764:	c3                   	ret    

c0014765 <SysGetCwd(regs*)>:
c0014765:	83 ec 10             	sub    esp,0x10
c0014768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001476c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001476f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014772:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014777:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001477a:	e8 89 36 ff ff       	call   c0007e08 <Fs::getcwd(Process*, char*, int)>
c001477f:	83 c4 1c             	add    esp,0x1c
c0014782:	99                   	cdq    
c0014783:	c3                   	ret    

c0014784 <SysGetPID(regs*)>:
c0014784:	83 ec 14             	sub    esp,0x14
c0014787:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001478c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001478f:	ff 30                	push   DWORD PTR [eax]
c0014791:	68 d2 4b 02 c0       	push   0xc0024bd2
c0014796:	e8 cb 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001479b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00147a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00147a5:	83 c4 1c             	add    esp,0x1c
c00147a8:	99                   	cdq    
c00147a9:	c3                   	ret    

c00147aa <SysGetRAMData(regs*)>:
c00147aa:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00147af:	03 05 38 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e138
c00147b5:	8b 0d 3c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e13c
c00147bb:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00147c1:	99                   	cdq    
c00147c2:	f7 f9                	idiv   ecx
c00147c4:	c1 e0 18             	shl    eax,0x18
c00147c7:	09 c8                	or     eax,ecx
c00147c9:	99                   	cdq    
c00147ca:	c3                   	ret    

c00147cb <SysGetVGAPtr(regs*)>:
c00147cb:	55                   	push   ebp
c00147cc:	57                   	push   edi
c00147cd:	56                   	push   esi
c00147ce:	53                   	push   ebx
c00147cf:	83 ec 1c             	sub    esp,0x1c
c00147d2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147d6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00147d9:	83 f8 ff             	cmp    eax,0xffffffff
c00147dc:	74 23                	je     c0014801 <SysGetVGAPtr(regs*)+0x36>
c00147de:	83 ec 0c             	sub    esp,0xc
c00147e1:	50                   	push   eax
c00147e2:	e8 05 2a 00 00       	call   c00171ec <KeProcessFromPID(int)>
c00147e7:	31 d2                	xor    edx,edx
c00147e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ed:	83 c4 10             	add    esp,0x10
c00147f0:	b8 01 00 00 00       	mov    eax,0x1
c00147f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147fa:	75 11                	jne    c001480d <SysGetVGAPtr(regs*)+0x42>
c00147fc:	e9 80 00 00 00       	jmp    c0014881 <SysGetVGAPtr(regs*)+0xb6>
c0014801:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014806:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014809:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014811:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014815:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c001481b:	74 0c                	je     c0014829 <SysGetVGAPtr(regs*)+0x5e>
c001481d:	83 ec 0c             	sub    esp,0xc
c0014820:	55                   	push   ebp
c0014821:	e8 89 dc ff ff       	call   c00124af <setActiveTerminal(VgaText*)>
c0014826:	83 c4 10             	add    esp,0x10
c0014829:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001482c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014831:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014834:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014836:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014839:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001483c:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014842:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014845:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014848:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c001484e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014852:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014855:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c001485c:	c1 e8 07             	shr    eax,0x7
c001485f:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014865:	50                   	push   eax
c0014866:	50                   	push   eax
c0014867:	68 e1 4b 02 c0       	push   0xc0024be1
c001486c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001486f:	05 ac 0f 00 00       	add    eax,0xfac
c0014874:	50                   	push   eax
c0014875:	e8 d6 bd fe ff       	call   c0000650 <strcpy>
c001487a:	83 c4 10             	add    esp,0x10
c001487d:	31 c0                	xor    eax,eax
c001487f:	31 d2                	xor    edx,edx
c0014881:	83 c4 1c             	add    esp,0x1c
c0014884:	5b                   	pop    ebx
c0014885:	5e                   	pop    esi
c0014886:	5f                   	pop    edi
c0014887:	5d                   	pop    ebp
c0014888:	c3                   	ret    
c0014889:	66 90                	xchg   ax,ax
c001488b:	90                   	nop

c001488c <SysKill(regs*)>:
c001488c:	53                   	push   ebx
c001488d:	83 ec 08             	sub    esp,0x8
c0014890:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014894:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014898:	75 16                	jne    c00148b0 <SysKill(regs*)+0x24>
c001489a:	83 ec 0c             	sub    esp,0xc
c001489d:	68 eb 4b 02 c0       	push   0xc0024beb
c00148a2:	e8 5b b5 ff ff       	call   c000fe02 <KePanic(char const*)>
c00148a7:	83 c4 10             	add    esp,0x10
c00148aa:	e9 89 00 00 00       	jmp    c0014938 <SysKill(regs*)+0xac>
c00148af:	90                   	nop
c00148b0:	83 ec 0c             	sub    esp,0xc
c00148b3:	68 4c ea 02 c0       	push   0xc002ea4c
c00148b8:	e8 ab d5 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00148bd:	8d 76 00             	lea    esi,[esi+0x0]
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	85 c0                	test   eax,eax
c00148c5:	74 19                	je     c00148e0 <SysKill(regs*)+0x54>
c00148c7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00148ca:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00148cd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00148cf:	74 33                	je     c0014904 <SysKill(regs*)+0x78>
c00148d1:	52                   	push   edx
c00148d2:	52                   	push   edx
c00148d3:	50                   	push   eax
c00148d4:	68 4c ea 02 c0       	push   0xc002ea4c
c00148d9:	e8 96 da 00 00       	call   c0022374 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00148de:	eb e0                	jmp    c00148c0 <SysKill(regs*)+0x34>
c00148e0:	83 ec 0c             	sub    esp,0xc
c00148e3:	68 40 ea 02 c0       	push   0xc002ea40
c00148e8:	e8 7b d5 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00148ed:	8d 76 00             	lea    esi,[esi+0x0]
c00148f0:	83 c4 10             	add    esp,0x10
c00148f3:	85 c0                	test   eax,eax
c00148f5:	74 41                	je     c0014938 <SysKill(regs*)+0xac>
c00148f7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00148fa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00148fd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00148ff:	75 27                	jne    c0014928 <SysKill(regs*)+0x9c>
c0014901:	8d 76 00             	lea    esi,[esi+0x0]
c0014904:	51                   	push   ecx
c0014905:	51                   	push   ecx
c0014906:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014909:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001490e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014911:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014917:	e8 a3 c7 ff ff       	call   c00110bf <KeRaiseSignal(SigHandlerBlock*, int)>
c001491c:	83 c4 10             	add    esp,0x10
c001491f:	31 c0                	xor    eax,eax
c0014921:	31 d2                	xor    edx,edx
c0014923:	eb 1b                	jmp    c0014940 <SysKill(regs*)+0xb4>
c0014925:	8d 76 00             	lea    esi,[esi+0x0]
c0014928:	52                   	push   edx
c0014929:	52                   	push   edx
c001492a:	50                   	push   eax
c001492b:	68 40 ea 02 c0       	push   0xc002ea40
c0014930:	e8 3f da 00 00       	call   c0022374 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014935:	eb b9                	jmp    c00148f0 <SysKill(regs*)+0x64>
c0014937:	90                   	nop
c0014938:	83 c8 ff             	or     eax,0xffffffff
c001493b:	89 c2                	mov    edx,eax
c001493d:	8d 76 00             	lea    esi,[esi+0x0]
c0014940:	83 c4 08             	add    esp,0x8
c0014943:	5b                   	pop    ebx
c0014944:	c3                   	ret    

c0014945 <SysLoadDLL(regs*)>:
c0014945:	56                   	push   esi
c0014946:	31 d2                	xor    edx,edx
c0014948:	53                   	push   ebx
c0014949:	b8 01 00 00 00       	mov    eax,0x1
c001494e:	51                   	push   ecx
c001494f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014953:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014957:	0f 84 8c 00 00 00    	je     c00149e9 <SysLoadDLL(regs*)+0xa4>
c001495d:	83 ec 0c             	sub    esp,0xc
c0014960:	68 14 01 00 00       	push   0x114
c0014965:	e8 42 b0 ff ff       	call   c000f9ac <malloc>
c001496a:	83 c4 0c             	add    esp,0xc
c001496d:	89 c3                	mov    ebx,eax
c001496f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014974:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014977:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001497a:	53                   	push   ebx
c001497b:	e8 08 38 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014980:	83 c4 10             	add    esp,0x10
c0014983:	31 d2                	xor    edx,edx
c0014985:	85 db                	test   ebx,ebx
c0014987:	b8 02 00 00 00       	mov    eax,0x2
c001498c:	74 5b                	je     c00149e9 <SysLoadDLL(regs*)+0xa4>
c001498e:	83 ec 0c             	sub    esp,0xc
c0014991:	53                   	push   ebx
c0014992:	e8 d3 3a ff ff       	call   c000846a <File::exists()>
c0014997:	83 c4 10             	add    esp,0x10
c001499a:	84 c0                	test   al,al
c001499c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001499e:	75 11                	jne    c00149b1 <SysLoadDLL(regs*)+0x6c>
c00149a0:	83 ec 0c             	sub    esp,0xc
c00149a3:	53                   	push   ebx
c00149a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149a7:	83 c4 10             	add    esp,0x10
c00149aa:	b8 03 00 00 00       	mov    eax,0x3
c00149af:	eb 36                	jmp    c00149e7 <SysLoadDLL(regs*)+0xa2>
c00149b1:	83 ec 0c             	sub    esp,0xc
c00149b4:	53                   	push   ebx
c00149b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149b8:	58                   	pop    eax
c00149b9:	5a                   	pop    edx
c00149ba:	6a 00                	push   0x0
c00149bc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00149bf:	e8 df 19 00 00       	call   c00163a3 <Thr::loadDLL(char const*, bool)>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	31 d2                	xor    edx,edx
c00149c9:	89 c1                	mov    ecx,eax
c00149cb:	b8 04 00 00 00       	mov    eax,0x4
c00149d0:	85 c9                	test   ecx,ecx
c00149d2:	74 15                	je     c00149e9 <SysLoadDLL(regs*)+0xa4>
c00149d4:	53                   	push   ebx
c00149d5:	53                   	push   ebx
c00149d6:	ff 35 c8 c0 02 c0    	push   DWORD PTR ds:0xc002c0c8
c00149dc:	51                   	push   ecx
c00149dd:	e8 22 1c 00 00       	call   c0016604 <Thr::executeDLL(unsigned long, void*)>
c00149e2:	83 c4 10             	add    esp,0x10
c00149e5:	31 c0                	xor    eax,eax
c00149e7:	31 d2                	xor    edx,edx
c00149e9:	59                   	pop    ecx
c00149ea:	5b                   	pop    ebx
c00149eb:	5e                   	pop    esi
c00149ec:	c3                   	ret    

c00149ed <SysPause(regs*)>:
c00149ed:	83 ec 18             	sub    esp,0x18
c00149f0:	6a 08                	push   0x8
c00149f2:	e8 09 26 00 00       	call   c0017000 <blockTask(TaskState)>
c00149f7:	31 c0                	xor    eax,eax
c00149f9:	31 d2                	xor    edx,edx
c00149fb:	83 c4 1c             	add    esp,0x1c
c00149fe:	c3                   	ret    

c00149ff <SysPthreadCreate(regs*)>:
c00149ff:	83 ec 18             	sub    esp,0x18
c0014a02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a07:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014a0a:	e8 c9 23 00 00       	call   c0016dd8 <Process::createUserThread()>
c0014a0f:	31 c0                	xor    eax,eax
c0014a11:	31 d2                	xor    edx,edx
c0014a13:	83 c4 1c             	add    esp,0x1c
c0014a16:	c3                   	ret    

c0014a17 <SysPthreadGetTID(regs*)>:
c0014a17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a1f:	99                   	cdq    
c0014a20:	c3                   	ret    

c0014a21 <SysInternalPthreadGetContext(regs*)>:
c0014a21:	31 c0                	xor    eax,eax
c0014a23:	31 d2                	xor    edx,edx
c0014a25:	c3                   	ret    

c0014a26 <SysInternalPthreadGetStartLocation(regs*)>:
c0014a26:	31 c0                	xor    eax,eax
c0014a28:	31 d2                	xor    edx,edx
c0014a2a:	c3                   	ret    

c0014a2b <SysPthreadJoin(regs*)>:
c0014a2b:	31 c0                	xor    eax,eax
c0014a2d:	31 d2                	xor    edx,edx
c0014a2f:	c3                   	ret    

c0014a30 <SysPthreadExit(regs*)>:
c0014a30:	83 ec 18             	sub    esp,0x18
c0014a33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a37:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a3a:	e8 f5 2c 00 00       	call   c0017734 <KeTerminateCurrentThread(int)>
c0014a3f:	83 c8 ff             	or     eax,0xffffffff
c0014a42:	83 c4 1c             	add    esp,0x1c
c0014a45:	89 c2                	mov    edx,eax
c0014a47:	c3                   	ret    

c0014a48 <SysRead(regs*)>:
c0014a48:	57                   	push   edi
c0014a49:	56                   	push   esi
c0014a4a:	53                   	push   ebx
c0014a4b:	83 ec 10             	sub    esp,0x10
c0014a4e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a55:	83 f8 02             	cmp    eax,0x2
c0014a58:	77 10                	ja     c0014a6a <SysRead(regs*)+0x22>
c0014a5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a5f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a62:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014a68:	eb 0e                	jmp    c0014a78 <SysRead(regs*)+0x30>
c0014a6a:	83 ec 0c             	sub    esp,0xc
c0014a6d:	50                   	push   eax
c0014a6e:	e8 26 e8 ff ff       	call   c0013299 <KeGetFileFromDescriptor(int)>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	89 c1                	mov    ecx,eax
c0014a78:	83 c8 ff             	or     eax,0xffffffff
c0014a7b:	85 c9                	test   ecx,ecx
c0014a7d:	89 c2                	mov    edx,eax
c0014a7f:	74 28                	je     c0014aa9 <SysRead(regs*)+0x61>
c0014a81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014a89:	83 ec 0c             	sub    esp,0xc
c0014a8c:	31 ff                	xor    edi,edi
c0014a8e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014a92:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014a94:	52                   	push   edx
c0014a95:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a98:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014a9b:	57                   	push   edi
c0014a9c:	56                   	push   esi
c0014a9d:	51                   	push   ecx
c0014a9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014aa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014aa5:	83 c4 20             	add    esp,0x20
c0014aa8:	99                   	cdq    
c0014aa9:	83 c4 10             	add    esp,0x10
c0014aac:	5b                   	pop    ebx
c0014aad:	5e                   	pop    esi
c0014aae:	5f                   	pop    edi
c0014aaf:	c3                   	ret    

c0014ab0 <SysRegisterSignal(regs*)>:
c0014ab0:	83 ec 18             	sub    esp,0x18
c0014ab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ab7:	6a 00                	push   0x0
c0014ab9:	6a 00                	push   0x0
c0014abb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014abe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ac6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ac9:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014acf:	e8 b5 c5 ff ff       	call   c0011089 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014ad4:	83 c4 2c             	add    esp,0x2c
c0014ad7:	99                   	cdq    
c0014ad8:	c3                   	ret    

c0014ad9 <SysRegistryGetTypeFromPath(regs*)>:
c0014ad9:	53                   	push   ebx
c0014ada:	81 ec 40 01 00 00    	sub    esp,0x140
c0014ae0:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014ae7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014aea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014aed:	e8 51 94 ff ff       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	85 c0                	test   eax,eax
c0014af7:	89 c1                	mov    ecx,eax
c0014af9:	74 15                	je     c0014b10 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014afb:	50                   	push   eax
c0014afc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014b00:	50                   	push   eax
c0014b01:	51                   	push   ecx
c0014b02:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b05:	e8 1e 90 ff ff       	call   c000db28 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	99                   	cdq    
c0014b0e:	eb 05                	jmp    c0014b15 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014b10:	83 c8 ff             	or     eax,0xffffffff
c0014b13:	89 c2                	mov    edx,eax
c0014b15:	81 c4 38 01 00 00    	add    esp,0x138
c0014b1b:	5b                   	pop    ebx
c0014b1c:	c3                   	ret    

c0014b1d <SysRegistryReadExtent(regs*)>:
c0014b1d:	83 ec 1c             	sub    esp,0x1c
c0014b20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b24:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014b27:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014b2a:	85 c0                	test   eax,eax
c0014b2c:	79 1f                	jns    c0014b4d <SysRegistryReadExtent(regs*)+0x30>
c0014b2e:	52                   	push   edx
c0014b2f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014b34:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014b38:	52                   	push   edx
c0014b39:	50                   	push   eax
c0014b3a:	51                   	push   ecx
c0014b3b:	e8 da 8e ff ff       	call   c000da1a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014b40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	eb 14                	jmp    c0014b61 <SysRegistryReadExtent(regs*)+0x44>
c0014b4d:	83 ec 04             	sub    esp,0x4
c0014b50:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014b53:	50                   	push   eax
c0014b54:	51                   	push   ecx
c0014b55:	e8 5e 89 ff ff       	call   c000d4b8 <CmGetString(Reghive_Tag*, int, char*)>
c0014b5a:	83 c4 10             	add    esp,0x10
c0014b5d:	31 c0                	xor    eax,eax
c0014b5f:	31 d2                	xor    edx,edx
c0014b61:	83 c4 1c             	add    esp,0x1c
c0014b64:	c3                   	ret    

c0014b65 <SysRegistryPathToExtentLookup(regs*)>:
c0014b65:	83 ec 14             	sub    esp,0x14
c0014b68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b6f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b72:	e8 cc 93 ff ff       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b77:	83 c4 1c             	add    esp,0x1c
c0014b7a:	99                   	cdq    
c0014b7b:	c3                   	ret    

c0014b7c <SysRegistryEnterDirectory(regs*)>:
c0014b7c:	83 ec 14             	sub    esp,0x14
c0014b7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b83:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014b86:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b89:	e8 a1 89 ff ff       	call   c000d52f <CmEnterDirectory(Reghive_Tag*, int)>
c0014b8e:	83 c4 1c             	add    esp,0x1c
c0014b91:	99                   	cdq    
c0014b92:	c3                   	ret    

c0014b93 <SysRegistryGetNext(regs*)>:
c0014b93:	83 ec 14             	sub    esp,0x14
c0014b96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014b9d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ba0:	e8 c9 89 ff ff       	call   c000d56e <CmGetNext(Reghive_Tag*, int)>
c0014ba5:	83 c4 1c             	add    esp,0x1c
c0014ba8:	99                   	cdq    
c0014ba9:	c3                   	ret    

c0014baa <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014baa:	57                   	push   edi
c0014bab:	56                   	push   esi
c0014bac:	53                   	push   ebx
c0014bad:	81 ec 34 01 00 00    	sub    esp,0x134
c0014bb3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014bba:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014bbe:	57                   	push   edi
c0014bbf:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014bc2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014bc5:	e8 5e 8f ff ff       	call   c000db28 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014bca:	89 c3                	mov    ebx,eax
c0014bcc:	58                   	pop    eax
c0014bcd:	5a                   	pop    edx
c0014bce:	57                   	push   edi
c0014bcf:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014bd2:	e8 79 ba fe ff       	call   c0000650 <strcpy>
c0014bd7:	81 c4 40 01 00 00    	add    esp,0x140
c0014bdd:	89 d8                	mov    eax,ebx
c0014bdf:	5b                   	pop    ebx
c0014be0:	99                   	cdq    
c0014be1:	5e                   	pop    esi
c0014be2:	5f                   	pop    edi
c0014be3:	c3                   	ret    

c0014be4 <SysRegistryOpen(regs*)>:
c0014be4:	83 ec 18             	sub    esp,0x18
c0014be7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014beb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014bee:	e8 55 87 ff ff       	call   c000d348 <CmOpen(char const*)>
c0014bf3:	83 c4 1c             	add    esp,0x1c
c0014bf6:	99                   	cdq    
c0014bf7:	c3                   	ret    

c0014bf8 <SysRegistryClose(regs*)>:
c0014bf8:	83 ec 18             	sub    esp,0x18
c0014bfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bff:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c02:	e8 5f 88 ff ff       	call   c000d466 <CmClose(Reghive_Tag*)>
c0014c07:	31 c0                	xor    eax,eax
c0014c09:	31 d2                	xor    edx,edx
c0014c0b:	83 c4 1c             	add    esp,0x1c
c0014c0e:	c3                   	ret    

c0014c0f <SysRegistryEasyReadString(regs*)>:
c0014c0f:	57                   	push   edi
c0014c10:	56                   	push   esi
c0014c11:	53                   	push   ebx
c0014c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c16:	83 ec 0c             	sub    esp,0xc
c0014c19:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c1c:	e8 27 87 ff ff       	call   c000d348 <CmOpen(char const*)>
c0014c21:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014c24:	5a                   	pop    edx
c0014c25:	59                   	pop    ecx
c0014c26:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c29:	89 c3                	mov    ebx,eax
c0014c2b:	50                   	push   eax
c0014c2c:	e8 12 93 ff ff       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c31:	83 c4 10             	add    esp,0x10
c0014c34:	89 c1                	mov    ecx,eax
c0014c36:	b8 01 00 00 00       	mov    eax,0x1
c0014c3b:	85 c9                	test   ecx,ecx
c0014c3d:	7e 16                	jle    c0014c55 <SysRegistryEasyReadString(regs*)+0x46>
c0014c3f:	50                   	push   eax
c0014c40:	57                   	push   edi
c0014c41:	51                   	push   ecx
c0014c42:	53                   	push   ebx
c0014c43:	e8 70 88 ff ff       	call   c000d4b8 <CmGetString(Reghive_Tag*, int, char*)>
c0014c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c4b:	e8 16 88 ff ff       	call   c000d466 <CmClose(Reghive_Tag*)>
c0014c50:	83 c4 10             	add    esp,0x10
c0014c53:	31 c0                	xor    eax,eax
c0014c55:	5b                   	pop    ebx
c0014c56:	31 d2                	xor    edx,edx
c0014c58:	5e                   	pop    esi
c0014c59:	5f                   	pop    edi
c0014c5a:	c3                   	ret    

c0014c5b <SysRegistryEasyReadInteger(regs*)>:
c0014c5b:	56                   	push   esi
c0014c5c:	53                   	push   ebx
c0014c5d:	83 ec 10             	sub    esp,0x10
c0014c60:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014c64:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c67:	e8 dc 86 ff ff       	call   c000d348 <CmOpen(char const*)>
c0014c6c:	5a                   	pop    edx
c0014c6d:	59                   	pop    ecx
c0014c6e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c71:	89 c3                	mov    ebx,eax
c0014c73:	50                   	push   eax
c0014c74:	e8 ca 92 ff ff       	call   c000df43 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c79:	83 c4 10             	add    esp,0x10
c0014c7c:	89 c1                	mov    ecx,eax
c0014c7e:	b8 01 00 00 00       	mov    eax,0x1
c0014c83:	85 c9                	test   ecx,ecx
c0014c85:	7e 18                	jle    c0014c9f <SysRegistryEasyReadInteger(regs*)+0x44>
c0014c87:	50                   	push   eax
c0014c88:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014c8b:	51                   	push   ecx
c0014c8c:	53                   	push   ebx
c0014c8d:	e8 88 8d ff ff       	call   c000da1a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014c92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c95:	e8 cc 87 ff ff       	call   c000d466 <CmClose(Reghive_Tag*)>
c0014c9a:	83 c4 10             	add    esp,0x10
c0014c9d:	31 c0                	xor    eax,eax
c0014c9f:	59                   	pop    ecx
c0014ca0:	31 d2                	xor    edx,edx
c0014ca2:	5b                   	pop    ebx
c0014ca3:	5e                   	pop    esi
c0014ca4:	c3                   	ret    

c0014ca5 <SysSbrk(regs*)>:
c0014ca5:	56                   	push   esi
c0014ca6:	53                   	push   ebx
c0014ca7:	50                   	push   eax
c0014ca8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014cb1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014cb4:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014cb7:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014cbd:	85 db                	test   ebx,ebx
c0014cbf:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014cc2:	74 02                	je     c0014cc6 <SysSbrk(regs*)+0x21>
c0014cc4:	79 06                	jns    c0014ccc <SysSbrk(regs*)+0x27>
c0014cc6:	89 f0                	mov    eax,esi
c0014cc8:	31 d2                	xor    edx,edx
c0014cca:	eb 2a                	jmp    c0014cf6 <SysSbrk(regs*)+0x51>
c0014ccc:	83 c8 ff             	or     eax,0xffffffff
c0014ccf:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014cd5:	89 c2                	mov    edx,eax
c0014cd7:	77 1d                	ja     c0014cf6 <SysSbrk(regs*)+0x51>
c0014cd9:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014cdf:	50                   	push   eax
c0014ce0:	68 07 0c 00 00       	push   0xc07
c0014ce5:	c1 ea 0c             	shr    edx,0xc
c0014ce8:	52                   	push   edx
c0014ce9:	51                   	push   ecx
c0014cea:	e8 e9 ee ff ff       	call   c0013bd8 <VAS::allocatePages(int, int)>
c0014cef:	89 f0                	mov    eax,esi
c0014cf1:	31 d2                	xor    edx,edx
c0014cf3:	83 c4 10             	add    esp,0x10
c0014cf6:	59                   	pop    ecx
c0014cf7:	5b                   	pop    ebx
c0014cf8:	5e                   	pop    esi
c0014cf9:	c3                   	ret    

c0014cfa <SysSetCwd(regs*)>:
c0014cfa:	83 ec 14             	sub    esp,0x14
c0014cfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d01:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d09:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014d0c:	e8 f8 37 ff ff       	call   c0008509 <Fs::setcwd(Process*, char*)>
c0014d11:	83 c4 1c             	add    esp,0x1c
c0014d14:	99                   	cdq    
c0014d15:	c3                   	ret    

c0014d16 <SysSetTime(regs*)>:
c0014d16:	55                   	push   ebp
c0014d17:	31 d2                	xor    edx,edx
c0014d19:	57                   	push   edi
c0014d1a:	56                   	push   esi
c0014d1b:	53                   	push   ebx
c0014d1c:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014d21:	83 ec 30             	sub    esp,0x30
c0014d24:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014d28:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014d2b:	89 f0                	mov    eax,esi
c0014d2d:	f7 f3                	div    ebx
c0014d2f:	89 d7                	mov    edi,edx
c0014d31:	31 d2                	xor    edx,edx
c0014d33:	f7 f3                	div    ebx
c0014d35:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014d3a:	89 f0                	mov    eax,esi
c0014d3c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014d40:	31 d2                	xor    edx,edx
c0014d42:	f7 f3                	div    ebx
c0014d44:	bb 18 00 00 00       	mov    ebx,0x18
c0014d49:	31 d2                	xor    edx,edx
c0014d4b:	f7 f3                	div    ebx
c0014d4d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014d50:	bb 0c 00 00 00       	mov    ebx,0xc
c0014d55:	89 c6                	mov    esi,eax
c0014d57:	c1 e8 05             	shr    eax,0x5
c0014d5a:	83 e6 1f             	and    esi,0x1f
c0014d5d:	46                   	inc    esi
c0014d5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d62:	31 d2                	xor    edx,edx
c0014d64:	f7 f3                	div    ebx
c0014d66:	31 db                	xor    ebx,ebx
c0014d68:	57                   	push   edi
c0014d69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d71:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014d75:	55                   	push   ebp
c0014d76:	52                   	push   edx
c0014d77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014d7b:	56                   	push   esi
c0014d7c:	68 0c 4c 02 c0       	push   0xc0024c0c
c0014d81:	e8 e0 21 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014d86:	83 c4 1c             	add    esp,0x1c
c0014d89:	57                   	push   edi
c0014d8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d92:	55                   	push   ebp
c0014d93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014d97:	52                   	push   edx
c0014d98:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d9c:	56                   	push   esi
c0014d9d:	68 2e 4c 02 c0       	push   0xc0024c2e
c0014da2:	e8 bf 21 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014da7:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0014dac:	31 c9                	xor    ecx,ecx
c0014dae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014db2:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014db6:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014dba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014dc0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014dc4:	89 f0                	mov    eax,esi
c0014dc6:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014dca:	88 c1                	mov    cl,al
c0014dcc:	89 e8                	mov    eax,ebp
c0014dce:	88 d5                	mov    ch,dl
c0014dd0:	83 c4 1c             	add    esp,0x1c
c0014dd3:	c1 e0 10             	shl    eax,0x10
c0014dd6:	0f b7 d1             	movzx  edx,cx
c0014dd9:	09 c2                	or     edx,eax
c0014ddb:	89 f8                	mov    eax,edi
c0014ddd:	c1 e0 10             	shl    eax,0x10
c0014de0:	89 d1                	mov    ecx,edx
c0014de2:	89 da                	mov    edx,ebx
c0014de4:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014dea:	09 c2                	or     edx,eax
c0014dec:	52                   	push   edx
c0014ded:	51                   	push   ecx
c0014dee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014df2:	e8 5b 47 ff ff       	call   c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014df7:	83 c4 3c             	add    esp,0x3c
c0014dfa:	31 d2                	xor    edx,edx
c0014dfc:	5b                   	pop    ebx
c0014dfd:	5e                   	pop    esi
c0014dfe:	83 f0 01             	xor    eax,0x1
c0014e01:	5f                   	pop    edi
c0014e02:	0f b6 c0             	movzx  eax,al
c0014e05:	5d                   	pop    ebp
c0014e06:	c3                   	ret    

c0014e07 <SysSymlink(regs*)>:
c0014e07:	56                   	push   esi
c0014e08:	83 c8 ff             	or     eax,0xffffffff
c0014e0b:	53                   	push   ebx
c0014e0c:	89 c2                	mov    edx,eax
c0014e0e:	81 ec 34 02 00 00    	sub    esp,0x234
c0014e14:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014e1b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014e1f:	74 50                	je     c0014e71 <SysSymlink(regs*)+0x6a>
c0014e21:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014e24:	85 c9                	test   ecx,ecx
c0014e26:	74 49                	je     c0014e71 <SysSymlink(regs*)+0x6a>
c0014e28:	6a 01                	push   0x1
c0014e2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e32:	05 0c 01 00 00       	add    eax,0x10c
c0014e37:	50                   	push   eax
c0014e38:	51                   	push   ecx
c0014e39:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014e3d:	56                   	push   esi
c0014e3e:	e8 19 30 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014e43:	6a 01                	push   0x1
c0014e45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e4d:	05 0c 01 00 00       	add    eax,0x10c
c0014e52:	50                   	push   eax
c0014e53:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e56:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014e5d:	53                   	push   ebx
c0014e5e:	e8 f9 2f ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014e63:	83 c4 18             	add    esp,0x18
c0014e66:	56                   	push   esi
c0014e67:	53                   	push   ebx
c0014e68:	e8 1d 2c ff ff       	call   c0007a8a <KeCreateSymlink(char const*, char const*)>
c0014e6d:	83 c4 10             	add    esp,0x10
c0014e70:	99                   	cdq    
c0014e71:	81 c4 34 02 00 00    	add    esp,0x234
c0014e77:	5b                   	pop    ebx
c0014e78:	5e                   	pop    esi
c0014e79:	c3                   	ret    

c0014e7a <SysTimezone(regs*)>:
c0014e7a:	83 ec 0c             	sub    esp,0xc
c0014e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e81:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014e85:	75 17                	jne    c0014e9e <SysTimezone(regs*)+0x24>
c0014e87:	83 ec 0c             	sub    esp,0xc
c0014e8a:	68 50 4c 02 c0       	push   0xc0024c50
c0014e8f:	e8 d2 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014e94:	83 c8 ff             	or     eax,0xffffffff
c0014e97:	83 c4 10             	add    esp,0x10
c0014e9a:	89 c2                	mov    edx,eax
c0014e9c:	eb 16                	jmp    c0014eb4 <SysTimezone(regs*)+0x3a>
c0014e9e:	83 ec 0c             	sub    esp,0xc
c0014ea1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ea4:	e8 60 41 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014ea9:	31 d2                	xor    edx,edx
c0014eab:	83 c4 10             	add    esp,0x10
c0014eae:	83 f0 01             	xor    eax,0x1
c0014eb1:	0f b6 c0             	movzx  eax,al
c0014eb4:	83 c4 0c             	add    esp,0xc
c0014eb7:	c3                   	ret    

c0014eb8 <SysTruncate(regs*)>:
c0014eb8:	55                   	push   ebp
c0014eb9:	57                   	push   edi
c0014eba:	31 ff                	xor    edi,edi
c0014ebc:	56                   	push   esi
c0014ebd:	53                   	push   ebx
c0014ebe:	83 ec 0c             	sub    esp,0xc
c0014ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014ec8:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014ecc:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014ecf:	89 ce                	mov    esi,ecx
c0014ed1:	0f 84 9a 00 00 00    	je     c0014f71 <SysTruncate(regs*)+0xb9>
c0014ed7:	83 ec 0c             	sub    esp,0xc
c0014eda:	68 14 01 00 00       	push   0x114
c0014edf:	e8 c8 aa ff ff       	call   c000f9ac <malloc>
c0014ee4:	83 c4 0c             	add    esp,0xc
c0014ee7:	89 c3                	mov    ebx,eax
c0014ee9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014ef1:	55                   	push   ebp
c0014ef2:	53                   	push   ebx
c0014ef3:	e8 90 32 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014ef8:	83 c4 10             	add    esp,0x10
c0014efb:	31 d2                	xor    edx,edx
c0014efd:	85 db                	test   ebx,ebx
c0014eff:	b8 03 00 00 00       	mov    eax,0x3
c0014f04:	0f 84 a2 00 00 00    	je     c0014fac <SysTruncate(regs*)+0xf4>
c0014f0a:	51                   	push   ecx
c0014f0b:	51                   	push   ecx
c0014f0c:	6a 02                	push   0x2
c0014f0e:	53                   	push   ebx
c0014f0f:	e8 92 32 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0014f14:	83 c4 10             	add    esp,0x10
c0014f17:	85 c0                	test   eax,eax
c0014f19:	74 13                	je     c0014f2e <SysTruncate(regs*)+0x76>
c0014f1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f1d:	83 ec 0c             	sub    esp,0xc
c0014f20:	53                   	push   ebx
c0014f21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	b8 04 00 00 00       	mov    eax,0x4
c0014f2c:	eb 7c                	jmp    c0014faa <SysTruncate(regs*)+0xf2>
c0014f2e:	52                   	push   edx
c0014f2f:	57                   	push   edi
c0014f30:	56                   	push   esi
c0014f31:	53                   	push   ebx
c0014f32:	e8 83 33 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014f37:	83 c4 10             	add    esp,0x10
c0014f3a:	85 c0                	test   eax,eax
c0014f3c:	74 1b                	je     c0014f59 <SysTruncate(regs*)+0xa1>
c0014f3e:	83 ec 0c             	sub    esp,0xc
c0014f41:	53                   	push   ebx
c0014f42:	e8 bd 32 ff ff       	call   c0008204 <File::close()>
c0014f47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f4f:	83 c4 10             	add    esp,0x10
c0014f52:	b8 05 00 00 00       	mov    eax,0x5
c0014f57:	eb 51                	jmp    c0014faa <SysTruncate(regs*)+0xf2>
c0014f59:	83 ec 0c             	sub    esp,0xc
c0014f5c:	53                   	push   ebx
c0014f5d:	e8 a2 32 ff ff       	call   c0008204 <File::close()>
c0014f62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f6a:	83 c4 10             	add    esp,0x10
c0014f6d:	31 c0                	xor    eax,eax
c0014f6f:	eb 39                	jmp    c0014faa <SysTruncate(regs*)+0xf2>
c0014f71:	31 d2                	xor    edx,edx
c0014f73:	83 fd 02             	cmp    ebp,0x2
c0014f76:	b8 01 00 00 00       	mov    eax,0x1
c0014f7b:	7e 2f                	jle    c0014fac <SysTruncate(regs*)+0xf4>
c0014f7d:	83 ec 0c             	sub    esp,0xc
c0014f80:	51                   	push   ecx
c0014f81:	e8 13 e3 ff ff       	call   c0013299 <KeGetFileFromDescriptor(int)>
c0014f86:	83 c4 10             	add    esp,0x10
c0014f89:	31 d2                	xor    edx,edx
c0014f8b:	89 c1                	mov    ecx,eax
c0014f8d:	b8 02 00 00 00       	mov    eax,0x2
c0014f92:	85 c9                	test   ecx,ecx
c0014f94:	74 16                	je     c0014fac <SysTruncate(regs*)+0xf4>
c0014f96:	50                   	push   eax
c0014f97:	57                   	push   edi
c0014f98:	56                   	push   esi
c0014f99:	51                   	push   ecx
c0014f9a:	e8 1b 33 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014f9f:	83 c4 10             	add    esp,0x10
c0014fa2:	85 c0                	test   eax,eax
c0014fa4:	0f 95 c0             	setne  al
c0014fa7:	0f b6 c0             	movzx  eax,al
c0014faa:	31 d2                	xor    edx,edx
c0014fac:	83 c4 0c             	add    esp,0xc
c0014faf:	5b                   	pop    ebx
c0014fb0:	5e                   	pop    esi
c0014fb1:	5f                   	pop    edi
c0014fb2:	5d                   	pop    ebp
c0014fb3:	c3                   	ret    

c0014fb4 <SysWrite(regs*)>:
c0014fb4:	57                   	push   edi
c0014fb5:	56                   	push   esi
c0014fb6:	53                   	push   ebx
c0014fb7:	83 ec 10             	sub    esp,0x10
c0014fba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014fbe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014fc1:	83 f8 02             	cmp    eax,0x2
c0014fc4:	77 10                	ja     c0014fd6 <SysWrite(regs*)+0x22>
c0014fc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fcb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fce:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014fd4:	eb 0e                	jmp    c0014fe4 <SysWrite(regs*)+0x30>
c0014fd6:	83 ec 0c             	sub    esp,0xc
c0014fd9:	50                   	push   eax
c0014fda:	e8 ba e2 ff ff       	call   c0013299 <KeGetFileFromDescriptor(int)>
c0014fdf:	83 c4 10             	add    esp,0x10
c0014fe2:	89 c1                	mov    ecx,eax
c0014fe4:	83 c8 ff             	or     eax,0xffffffff
c0014fe7:	85 c9                	test   ecx,ecx
c0014fe9:	89 c2                	mov    edx,eax
c0014feb:	74 28                	je     c0015015 <SysWrite(regs*)+0x61>
c0014fed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ff5:	83 ec 0c             	sub    esp,0xc
c0014ff8:	31 ff                	xor    edi,edi
c0014ffa:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014ffe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015000:	52                   	push   edx
c0015001:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015004:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015007:	57                   	push   edi
c0015008:	56                   	push   esi
c0015009:	51                   	push   ecx
c001500a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001500d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015011:	83 c4 20             	add    esp,0x20
c0015014:	99                   	cdq    
c0015015:	83 c4 10             	add    esp,0x10
c0015018:	5b                   	pop    ebx
c0015019:	5e                   	pop    esi
c001501a:	5f                   	pop    edi
c001501b:	c3                   	ret    

c001501c <SysWsbe(regs*)>:
c001501c:	55                   	push   ebp
c001501d:	57                   	push   edi
c001501e:	56                   	push   esi
c001501f:	53                   	push   ebx
c0015020:	83 ec 3c             	sub    esp,0x3c
c0015023:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015027:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c001502e:	75 2d                	jne    c001505d <SysWsbe(regs*)+0x41>
c0015030:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015037:	75 24                	jne    c001505d <SysWsbe(regs*)+0x41>
c0015039:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015040:	75 1b                	jne    c001505d <SysWsbe(regs*)+0x41>
c0015042:	6a 01                	push   0x1
c0015044:	6a 00                	push   0x0
c0015046:	68 1d 9f 00 c0       	push   0xc0009f1d
c001504b:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0015051:	e8 42 1c 00 00       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c0015056:	83 c4 10             	add    esp,0x10
c0015059:	31 c0                	xor    eax,eax
c001505b:	eb 52                	jmp    c00150af <SysWsbe(regs*)+0x93>
c001505d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015061:	be 65 4c 02 c0       	mov    esi,0xc0024c65
c0015066:	b9 0b 00 00 00       	mov    ecx,0xb
c001506b:	fc                   	cld    
c001506c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001506e:	83 ec 0c             	sub    esp,0xc
c0015071:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015075:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001507a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001507d:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015083:	8b 06                	mov    eax,DWORD PTR [esi]
c0015085:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015088:	57                   	push   edi
c0015089:	e8 f2 b4 fe ff       	call   c0000580 <strlen>
c001508e:	5a                   	pop    edx
c001508f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015093:	52                   	push   edx
c0015094:	31 d2                	xor    edx,edx
c0015096:	57                   	push   edi
c0015097:	52                   	push   edx
c0015098:	50                   	push   eax
c0015099:	56                   	push   esi
c001509a:	ff d5                	call   ebp
c001509c:	83 c4 14             	add    esp,0x14
c001509f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00150a2:	e8 8d 26 00 00       	call   c0017734 <KeTerminateCurrentThread(int)>
c00150a7:	83 c4 10             	add    esp,0x10
c00150aa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00150af:	83 c4 3c             	add    esp,0x3c
c00150b2:	31 d2                	xor    edx,edx
c00150b4:	5b                   	pop    ebx
c00150b5:	5e                   	pop    esi
c00150b6:	5f                   	pop    edi
c00150b7:	5d                   	pop    ebp
c00150b8:	c3                   	ret    

c00150b9 <SysYield(regs*)>:
c00150b9:	83 ec 0c             	sub    esp,0xc
c00150bc:	fa                   	cli    
c00150bd:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00150c3:	e8 78 1e 00 00       	call   c0016f40 <schedule()>
c00150c8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00150cf:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00150d6:	75 01                	jne    c00150d9 <SysYield(regs*)+0x20>
c00150d8:	fb                   	sti    
c00150d9:	31 c0                	xor    eax,eax
c00150db:	31 d2                	xor    edx,edx
c00150dd:	83 c4 0c             	add    esp,0xc
c00150e0:	c3                   	ret    
c00150e1:	66 90                	xchg   ax,ax
c00150e3:	90                   	nop

c00150e4 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00150e4:	55                   	push   ebp
c00150e5:	57                   	push   edi
c00150e6:	56                   	push   esi
c00150e7:	53                   	push   ebx
c00150e8:	83 ec 2c             	sub    esp,0x2c
c00150eb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00150ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00150f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150fb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00150ff:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0015102:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015106:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c001510a:	c1 e0 08             	shl    eax,0x8
c001510d:	09 c6                	or     esi,eax
c001510f:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015113:	c1 e0 10             	shl    eax,0x10
c0015116:	09 c6                	or     esi,eax
c0015118:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001511c:	83 e0 7f             	and    eax,0x7f
c001511f:	c1 e0 18             	shl    eax,0x18
c0015122:	09 f0                	or     eax,esi
c0015124:	89 c5                	mov    ebp,eax
c0015126:	89 f8                	mov    eax,edi
c0015128:	80 f4 00             	xor    ah,0x0
c001512b:	89 c1                	mov    ecx,eax
c001512d:	89 e8                	mov    eax,ebp
c001512f:	80 f4 00             	xor    ah,0x0
c0015132:	89 c3                	mov    ebx,eax
c0015134:	89 d8                	mov    eax,ebx
c0015136:	09 c8                	or     eax,ecx
c0015138:	74 42                	je     c001517c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c001513a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001513e:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015141:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015145:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015149:	c1 e0 08             	shl    eax,0x8
c001514c:	09 c6                	or     esi,eax
c001514e:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015152:	c1 e0 10             	shl    eax,0x10
c0015155:	09 c6                	or     esi,eax
c0015157:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001515b:	83 e0 7f             	and    eax,0x7f
c001515e:	c1 e0 18             	shl    eax,0x18
c0015161:	09 f0                	or     eax,esi
c0015163:	89 c3                	mov    ebx,eax
c0015165:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c001516a:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0015170:	29 c1                	sub    ecx,eax
c0015172:	19 d3                	sbb    ebx,edx
c0015174:	89 c8                	mov    eax,ecx
c0015176:	89 da                	mov    edx,ebx
c0015178:	eb 0e                	jmp    c0015188 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c001517a:	66 90                	xchg   ax,ax
c001517c:	b8 00 00 00 00       	mov    eax,0x0
c0015181:	ba 00 00 00 00       	mov    edx,0x0
c0015186:	66 90                	xchg   ax,ax
c0015188:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001518c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015194:	80 f4 00             	xor    ah,0x0
c0015197:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001519b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001519f:	80 f4 00             	xor    ah,0x0
c00151a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151a6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00151aa:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00151ae:	89 e8                	mov    eax,ebp
c00151b0:	09 f8                	or     eax,edi
c00151b2:	74 30                	je     c00151e4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00151b4:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c00151ba:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c00151c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00151c8:	01 c8                	add    eax,ecx
c00151ca:	11 da                	adc    edx,ebx
c00151cc:	89 c7                	mov    edi,eax
c00151ce:	83 e7 ff             	and    edi,0xffffffff
c00151d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00151d4:	89 d0                	mov    eax,edx
c00151d6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00151db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151df:	eb 13                	jmp    c00151f4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00151e1:	8d 76 00             	lea    esi,[esi+0x0]
c00151e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00151eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00151f3:	90                   	nop
c00151f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00151f8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00151fb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00151ff:	89 cf                	mov    edi,ecx
c0015201:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015204:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015207:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001520b:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0015210:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015213:	83 e2 00             	and    edx,0x0
c0015216:	88 d1                	mov    cl,dl
c0015218:	88 da                	mov    dl,bl
c001521a:	09 ca                	or     edx,ecx
c001521c:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001521f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015223:	c1 ea 08             	shr    edx,0x8
c0015226:	0f b6 da             	movzx  ebx,dl
c0015229:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c001522c:	83 e2 00             	and    edx,0x0
c001522f:	88 d1                	mov    cl,dl
c0015231:	88 da                	mov    dl,bl
c0015233:	09 ca                	or     edx,ecx
c0015235:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015238:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001523c:	c1 ea 10             	shr    edx,0x10
c001523f:	0f b6 da             	movzx  ebx,dl
c0015242:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015245:	83 e2 00             	and    edx,0x0
c0015248:	88 d1                	mov    cl,dl
c001524a:	88 da                	mov    dl,bl
c001524c:	09 ca                	or     edx,ecx
c001524e:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015251:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015255:	c1 ea 18             	shr    edx,0x18
c0015258:	83 e2 7f             	and    edx,0x7f
c001525b:	89 d3                	mov    ebx,edx
c001525d:	83 e3 7f             	and    ebx,0x7f
c0015260:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015263:	83 e2 80             	and    edx,0xffffff80
c0015266:	88 d1                	mov    cl,dl
c0015268:	88 da                	mov    dl,bl
c001526a:	09 ca                	or     edx,ecx
c001526c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001526f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015273:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015277:	83 c4 2c             	add    esp,0x2c
c001527a:	5b                   	pop    ebx
c001527b:	5e                   	pop    esi
c001527c:	5f                   	pop    edi
c001527d:	5d                   	pop    ebp
c001527e:	c3                   	ret    
c001527f:	90                   	nop

c0015280 <KeCheckAlarm(ThreadControlBlock*)>:
c0015280:	55                   	push   ebp
c0015281:	57                   	push   edi
c0015282:	56                   	push   esi
c0015283:	53                   	push   ebx
c0015284:	83 ec 0c             	sub    esp,0xc
c0015287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001528b:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c001528e:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015292:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015296:	c1 e5 08             	shl    ebp,0x8
c0015299:	09 fd                	or     ebp,edi
c001529b:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c001529f:	c1 e7 10             	shl    edi,0x10
c00152a2:	09 ef                	or     edi,ebp
c00152a4:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00152a8:	83 e0 7f             	and    eax,0x7f
c00152ab:	c1 e0 18             	shl    eax,0x18
c00152ae:	09 f8                	or     eax,edi
c00152b0:	89 c1                	mov    ecx,eax
c00152b2:	89 d0                	mov    eax,edx
c00152b4:	80 f4 00             	xor    ah,0x0
c00152b7:	89 c3                	mov    ebx,eax
c00152b9:	89 c8                	mov    eax,ecx
c00152bb:	80 f4 00             	xor    ah,0x0
c00152be:	89 c6                	mov    esi,eax
c00152c0:	89 f0                	mov    eax,esi
c00152c2:	09 d8                	or     eax,ebx
c00152c4:	0f 84 9e 00 00 00    	je     c0015368 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00152ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152ce:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c00152d1:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c00152d5:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c00152d9:	c1 e6 08             	shl    esi,0x8
c00152dc:	09 de                	or     esi,ebx
c00152de:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c00152e2:	c1 e3 10             	shl    ebx,0x10
c00152e5:	09 f3                	or     ebx,esi
c00152e7:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00152eb:	83 e0 7f             	and    eax,0x7f
c00152ee:	c1 e0 18             	shl    eax,0x18
c00152f1:	09 d8                	or     eax,ebx
c00152f3:	89 c1                	mov    ecx,eax
c00152f5:	89 cb                	mov    ebx,ecx
c00152f7:	89 d1                	mov    ecx,edx
c00152f9:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00152fe:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0015304:	39 c8                	cmp    eax,ecx
c0015306:	89 d0                	mov    eax,edx
c0015308:	19 d8                	sbb    eax,ebx
c001530a:	72 5c                	jb     c0015368 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c001530c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015310:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015317:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c001531a:	83 e2 00             	and    edx,0x0
c001531d:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015320:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015323:	83 e2 00             	and    edx,0x0
c0015326:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015329:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c001532c:	83 e2 00             	and    edx,0x0
c001532f:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015332:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015335:	83 e2 80             	and    edx,0xffffff80
c0015338:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001533b:	83 ec 0c             	sub    esp,0xc
c001533e:	68 91 4c 02 c0       	push   0xc0024c91
c0015343:	e8 1e 1c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015348:	83 c4 10             	add    esp,0x10
c001534b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001534f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015352:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015358:	83 ec 08             	sub    esp,0x8
c001535b:	6a 0e                	push   0xe
c001535d:	50                   	push   eax
c001535e:	e8 5c bd ff ff       	call   c00110bf <KeRaiseSignal(SigHandlerBlock*, int)>
c0015363:	83 c4 10             	add    esp,0x10
c0015366:	66 90                	xchg   ax,ax
c0015368:	90                   	nop
c0015369:	83 c4 0c             	add    esp,0xc
c001536c:	5b                   	pop    ebx
c001536d:	5e                   	pop    esi
c001536e:	5f                   	pop    edi
c001536f:	5d                   	pop    ebp
c0015370:	c3                   	ret    

c0015371 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015371:	55                   	push   ebp
c0015372:	57                   	push   edi
c0015373:	56                   	push   esi
c0015374:	53                   	push   ebx
c0015375:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001537b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015386:	74 3b                	je     c00153c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015388:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015390:	74 31                	je     c00153c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015392:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001539a:	75 27                	jne    c00153c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001539c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00153a3:	05 00 10 00 00       	add    eax,0x1000
c00153a8:	89 c2                	mov    edx,eax
c00153aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00153af:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00153b6:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00153bc:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00153c3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00153ca:	83 ec 0c             	sub    esp,0xc
c00153cd:	6a 01                	push   0x1
c00153cf:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00153d5:	e8 1d e0 ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c00153da:	83 c4 10             	add    esp,0x10
c00153dd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00153e3:	89 c3                	mov    ebx,eax
c00153e5:	0f 86 27 01 00 00    	jbe    c0015512 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00153eb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00153f3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00153fa:	c1 ee 0c             	shr    esi,0xc
c00153fd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015401:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015408:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001540f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015413:	29 ef                	sub    edi,ebp
c0015415:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0015419:	0f 83 fa 00 00 00    	jae    c0015519 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c001541f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015425:	b8 00 10 00 00       	mov    eax,0x1000
c001542a:	0f 47 f8             	cmova  edi,eax
c001542d:	83 ec 0c             	sub    esp,0xc
c0015430:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015437:	31 d2                	xor    edx,edx
c0015439:	8b 08                	mov    ecx,DWORD PTR [eax]
c001543b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001543f:	50                   	push   eax
c0015440:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015444:	56                   	push   esi
c0015445:	52                   	push   edx
c0015446:	57                   	push   edi
c0015447:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001544e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015451:	83 c4 20             	add    esp,0x20
c0015454:	85 c0                	test   eax,eax
c0015456:	75 06                	jne    c001545e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015458:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001545c:	74 13                	je     c0015471 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001545e:	83 ec 0c             	sub    esp,0xc
c0015461:	53                   	push   ebx
c0015462:	e8 8e e2 ff ff       	call   c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	31 c0                	xor    eax,eax
c001546c:	e9 80 01 00 00       	jmp    c00155f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0015471:	fa                   	cli    
c0015472:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015478:	e8 7f ab ff ff       	call   c000fffc <Phys::allocatePage()>
c001547d:	6a 07                	push   0x7
c001547f:	53                   	push   ebx
c0015480:	50                   	push   eax
c0015481:	89 c7                	mov    edi,eax
c0015483:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015488:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001548b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015491:	e8 3a e6 ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015496:	83 c4 0c             	add    esp,0xc
c0015499:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00154a0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154a6:	6a 00                	push   0x0
c00154a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154b0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154b6:	e8 81 e4 ff ff       	call   c001393c <VAS::mapOtherVASIn(bool, VAS*)>
c00154bb:	58                   	pop    eax
c00154bc:	5a                   	pop    edx
c00154bd:	68 07 0c 00 00       	push   0xc07
c00154c2:	55                   	push   ebp
c00154c3:	57                   	push   edi
c00154c4:	89 df                	mov    edi,ebx
c00154c6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00154cd:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154d3:	6a 00                	push   0x0
c00154d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154dd:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154e3:	e8 3c e8 ff ff       	call   c0013d24 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00154e8:	b9 00 10 00 00       	mov    ecx,0x1000
c00154ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00154ef:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00154f6:	83 c4 20             	add    esp,0x20
c00154f9:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0015500:	75 01                	jne    c0015503 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0015502:	fb                   	sti    
c0015503:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015507:	81 c5 00 10 00 00    	add    ebp,0x1000
c001550d:	e9 ef fe ff ff       	jmp    c0015401 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0015512:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015519:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015520:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015526:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001552c:	0f 86 b1 00 00 00    	jbe    c00155e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015532:	fa                   	cli    
c0015533:	51                   	push   ecx
c0015534:	31 ff                	xor    edi,edi
c0015536:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001553d:	c1 ee 0c             	shr    esi,0xc
c0015540:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015546:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001554c:	6a 00                	push   0x0
c001554e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015553:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015556:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001555c:	e8 db e3 ff ff       	call   c001393c <VAS::mapOtherVASIn(bool, VAS*)>
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	e8 93 aa ff ff       	call   c000fffc <Phys::allocatePage()>
c0015569:	47                   	inc    edi
c001556a:	6a 07                	push   0x7
c001556c:	53                   	push   ebx
c001556d:	50                   	push   eax
c001556e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015572:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015578:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001557b:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015581:	e8 4a e5 ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015586:	58                   	pop    eax
c0015587:	5a                   	pop    edx
c0015588:	68 07 0c 00 00       	push   0xc07
c001558d:	55                   	push   ebp
c001558e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015594:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015598:	50                   	push   eax
c0015599:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00155a0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155a6:	6a 00                	push   0x0
c00155a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155b0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00155b6:	e8 69 e7 ff ff       	call   c0013d24 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00155bb:	83 c4 1c             	add    esp,0x1c
c00155be:	68 00 10 00 00       	push   0x1000
c00155c3:	6a 00                	push   0x0
c00155c5:	53                   	push   ebx
c00155c6:	e8 25 af fe ff       	call   c00004f0 <memset>
c00155cb:	83 c4 10             	add    esp,0x10
c00155ce:	39 fe                	cmp    esi,edi
c00155d0:	77 92                	ja     c0015564 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c00155d2:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00155d9:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00155e0:	75 01                	jne    c00155e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00155e2:	fb                   	sti    
c00155e3:	83 ec 0c             	sub    esp,0xc
c00155e6:	53                   	push   ebx
c00155e7:	e8 09 e1 ff ff       	call   c00136f5 <Virt::freeKernelVirtualPages(unsigned long)>
c00155ec:	83 c4 10             	add    esp,0x10
c00155ef:	b0 01                	mov    al,0x1
c00155f1:	81 c4 2c 10 00 00    	add    esp,0x102c
c00155f7:	5b                   	pop    ebx
c00155f8:	5e                   	pop    esi
c00155f9:	5f                   	pop    edi
c00155fa:	5d                   	pop    ebp
c00155fb:	c3                   	ret    

c00155fc <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00155fc:	55                   	push   ebp
c00155fd:	57                   	push   edi
c00155fe:	56                   	push   esi
c00155ff:	53                   	push   ebx
c0015600:	83 ec 68             	sub    esp,0x68
c0015603:	68 14 01 00 00       	push   0x114
c0015608:	e8 9f a3 ff ff       	call   c000f9ac <malloc>
c001560d:	83 c4 0c             	add    esp,0xc
c0015610:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015614:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015618:	89 c3                	mov    ebx,eax
c001561a:	50                   	push   eax
c001561b:	e8 68 2b ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015620:	5e                   	pop    esi
c0015621:	5f                   	pop    edi
c0015622:	6a 01                	push   0x1
c0015624:	53                   	push   ebx
c0015625:	e8 7c 2b ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	85 c0                	test   eax,eax
c001562f:	0f 85 cb 01 00 00    	jne    c0015800 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015635:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001563d:	83 ec 0c             	sub    esp,0xc
c0015640:	6a 34                	push   0x34
c0015642:	e8 65 a3 ff ff       	call   c000f9ac <malloc>
c0015647:	59                   	pop    ecx
c0015648:	8d 74 24 34          	lea    esi,[esp+0x34]
c001564c:	89 c7                	mov    edi,eax
c001564e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015650:	56                   	push   esi
c0015651:	57                   	push   edi
c0015652:	6a 00                	push   0x0
c0015654:	6a 34                	push   0x34
c0015656:	53                   	push   ebx
c0015657:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001565a:	83 c4 20             	add    esp,0x20
c001565d:	85 c0                	test   eax,eax
c001565f:	0f 85 9b 01 00 00    	jne    c0015800 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015665:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001566b:	0f 85 8f 01 00 00    	jne    c0015800 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015671:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015674:	85 c0                	test   eax,eax
c0015676:	0f 84 84 01 00 00    	je     c0015800 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001567c:	52                   	push   edx
c001567d:	31 d2                	xor    edx,edx
c001567f:	52                   	push   edx
c0015680:	50                   	push   eax
c0015681:	53                   	push   ebx
c0015682:	e8 dd 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015687:	83 c4 10             	add    esp,0x10
c001568a:	85 c0                	test   eax,eax
c001568c:	0f 85 6e 01 00 00    	jne    c0015800 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015692:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015695:	83 ec 0c             	sub    esp,0xc
c0015698:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001569c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00156a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00156a4:	0f af c2             	imul   eax,edx
c00156a7:	50                   	push   eax
c00156a8:	e8 ff a2 ff ff       	call   c000f9ac <malloc>
c00156ad:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00156af:	89 34 24             	mov    DWORD PTR [esp],esi
c00156b2:	31 f6                	xor    esi,esi
c00156b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00156b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156bc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00156c0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00156c4:	0f af c2             	imul   eax,edx
c00156c7:	99                   	cdq    
c00156c8:	52                   	push   edx
c00156c9:	50                   	push   eax
c00156ca:	53                   	push   ebx
c00156cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00156ce:	83 c4 20             	add    esp,0x20
c00156d1:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c00156d5:	0f b7 c6             	movzx  eax,si
c00156d8:	73 71                	jae    c001574b <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00156da:	55                   	push   ebp
c00156db:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00156df:	6b c0 28             	imul   eax,eax,0x28
c00156e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00156e6:	6b d2 28             	imul   edx,edx,0x28
c00156e9:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00156ec:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00156f0:	31 d2                	xor    edx,edx
c00156f2:	52                   	push   edx
c00156f3:	50                   	push   eax
c00156f4:	53                   	push   ebx
c00156f5:	e8 6a 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00156fa:	83 c4 0c             	add    esp,0xc
c00156fd:	6a 20                	push   0x20
c00156ff:	6a 00                	push   0x0
c0015701:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015705:	55                   	push   ebp
c0015706:	e8 e5 ad fe ff       	call   c00004f0 <memset>
c001570b:	58                   	pop    eax
c001570c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001570e:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015712:	52                   	push   edx
c0015713:	55                   	push   ebp
c0015714:	6a 00                	push   0x0
c0015716:	6a 1f                	push   0x1f
c0015718:	53                   	push   ebx
c0015719:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001571c:	83 c4 18             	add    esp,0x18
c001571f:	55                   	push   ebp
c0015720:	68 a2 4c 02 c0       	push   0xc0024ca2
c0015725:	e8 56 b0 fe ff       	call   c0000780 <strcmp>
c001572a:	83 c4 10             	add    esp,0x10
c001572d:	85 c0                	test   eax,eax
c001572f:	75 17                	jne    c0015748 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015731:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015735:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015739:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c001573f:	83 c8 80             	or     eax,0xffffff80
c0015742:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c0015748:	46                   	inc    esi
c0015749:	eb 86                	jmp    c00156d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c001574b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001574e:	85 c0                	test   eax,eax
c0015750:	0f 84 aa 00 00 00    	je     c0015800 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015756:	31 d2                	xor    edx,edx
c0015758:	56                   	push   esi
c0015759:	52                   	push   edx
c001575a:	50                   	push   eax
c001575b:	53                   	push   ebx
c001575c:	e8 03 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015761:	83 c4 10             	add    esp,0x10
c0015764:	85 c0                	test   eax,eax
c0015766:	0f 85 94 00 00 00    	jne    c0015800 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001576c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015770:	83 ec 0c             	sub    esp,0xc
c0015773:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015777:	0f af c2             	imul   eax,edx
c001577a:	50                   	push   eax
c001577b:	e8 2c a2 ff ff       	call   c000f9ac <malloc>
c0015780:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015784:	59                   	pop    ecx
c0015785:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015787:	8d 44 24 34          	lea    eax,[esp+0x34]
c001578b:	50                   	push   eax
c001578c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015790:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015794:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015798:	0f af c2             	imul   eax,edx
c001579b:	99                   	cdq    
c001579c:	52                   	push   edx
c001579d:	50                   	push   eax
c001579e:	53                   	push   ebx
c001579f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157a2:	83 c4 20             	add    esp,0x20
c00157a5:	31 c9                	xor    ecx,ecx
c00157a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00157af:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c00157b3:	0f b7 e9             	movzx  ebp,cx
c00157b6:	0f 83 89 00 00 00    	jae    c0015845 <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c00157bc:	c1 e5 05             	shl    ebp,0x5
c00157bf:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00157c3:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00157c7:	75 76                	jne    c001583f <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c00157c9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00157cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00157d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00157d7:	52                   	push   edx
c00157d8:	31 d2                	xor    edx,edx
c00157da:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00157dd:	52                   	push   edx
c00157de:	50                   	push   eax
c00157df:	53                   	push   ebx
c00157e0:	e8 7f 2a ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00157e5:	83 c4 10             	add    esp,0x10
c00157e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00157ec:	85 c0                	test   eax,eax
c00157ee:	74 17                	je     c0015807 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c00157f0:	83 ec 0c             	sub    esp,0xc
c00157f3:	68 b1 4c 02 c0       	push   0xc0024cb1
c00157f8:	e8 69 17 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00157fd:	83 c4 10             	add    esp,0x10
c0015800:	31 c0                	xor    eax,eax
c0015802:	e9 8e 00 00 00       	jmp    c0015895 <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c0015807:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001580b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001580e:	83 ec 0c             	sub    esp,0xc
c0015811:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015814:	50                   	push   eax
c0015815:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015819:	56                   	push   esi
c001581a:	53                   	push   ebx
c001581b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015822:	e8 4a fb ff ff       	call   c0015371 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015827:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001582b:	83 c4 20             	add    esp,0x20
c001582e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0015832:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015836:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001583b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001583f:	41                   	inc    ecx
c0015840:	e9 6a ff ff ff       	jmp    c00157af <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015845:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015849:	83 ec 0c             	sub    esp,0xc
c001584c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015850:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015854:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c001585a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001585f:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c0015865:	05 00 10 00 00       	add    eax,0x1000
c001586a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001586d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015871:	e8 46 a1 ff ff       	call   c000f9bc <free>
c0015876:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015879:	e8 3e a1 ff ff       	call   c000f9bc <free>
c001587e:	58                   	pop    eax
c001587f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015883:	e8 34 a1 ff ff       	call   c000f9bc <free>
c0015888:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001588b:	e8 74 29 ff ff       	call   c0008204 <File::close()>
c0015890:	83 c4 10             	add    esp,0x10
c0015893:	b0 01                	mov    al,0x1
c0015895:	83 c4 5c             	add    esp,0x5c
c0015898:	5b                   	pop    ebx
c0015899:	5e                   	pop    esi
c001589a:	5f                   	pop    edi
c001589b:	5d                   	pop    ebp
c001589c:	c3                   	ret    

c001589d <Thr::runtimeReferenceHelper()>:
c001589d:	83 ec 18             	sub    esp,0x18
c00158a0:	68 b9 4c 02 c0       	push   0xc0024cb9
c00158a5:	e8 bc 16 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00158aa:	fa                   	cli    
c00158ab:	83 c4 10             	add    esp,0x10
c00158ae:	eb fe                	jmp    c00158ae <Thr::runtimeReferenceHelper()+0x11>

c00158b0 <Thr::getAddressOfKernelSymbol(char const*)>:
c00158b0:	57                   	push   edi
c00158b1:	56                   	push   esi
c00158b2:	53                   	push   ebx
c00158b3:	31 db                	xor    ebx,ebx
c00158b5:	39 1d 00 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea00,ebx
c00158bb:	7e 3c                	jle    c00158f9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00158bd:	8b 34 9d 80 e9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1680]
c00158c4:	31 ff                	xor    edi,edi
c00158c6:	39 3c 9d 80 e8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1780],edi
c00158cd:	7e 27                	jle    c00158f6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00158cf:	50                   	push   eax
c00158d0:	50                   	push   eax
c00158d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00158d7:	03 04 9d 00 e9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1700]
c00158de:	50                   	push   eax
c00158df:	e8 9c ae fe ff       	call   c0000780 <strcmp>
c00158e4:	83 c4 10             	add    esp,0x10
c00158e7:	85 c0                	test   eax,eax
c00158e9:	75 05                	jne    c00158f0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00158eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00158ee:	eb 0b                	jmp    c00158fb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00158f0:	83 c6 10             	add    esi,0x10
c00158f3:	47                   	inc    edi
c00158f4:	eb d0                	jmp    c00158c6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00158f6:	43                   	inc    ebx
c00158f7:	eb bc                	jmp    c00158b5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00158f9:	31 c0                	xor    eax,eax
c00158fb:	5b                   	pop    ebx
c00158fc:	5e                   	pop    esi
c00158fd:	5f                   	pop    edi
c00158fe:	c3                   	ret    

c00158ff <Thr::loadKernelSymbolTable(char const*)>:
c00158ff:	55                   	push   ebp
c0015900:	57                   	push   edi
c0015901:	56                   	push   esi
c0015902:	53                   	push   ebx
c0015903:	83 ec 68             	sub    esp,0x68
c0015906:	68 14 01 00 00       	push   0x114
c001590b:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c0015911:	e8 96 a0 ff ff       	call   c000f9ac <malloc>
c0015916:	83 c4 0c             	add    esp,0xc
c0015919:	56                   	push   esi
c001591a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001591e:	89 c3                	mov    ebx,eax
c0015920:	50                   	push   eax
c0015921:	e8 62 28 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015926:	5e                   	pop    esi
c0015927:	5f                   	pop    edi
c0015928:	6a 01                	push   0x1
c001592a:	53                   	push   ebx
c001592b:	e8 76 28 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	85 c0                	test   eax,eax
c0015935:	74 0a                	je     c0015941 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015937:	83 ec 0c             	sub    esp,0xc
c001593a:	68 db 4c 02 c0       	push   0xc0024cdb
c001593f:	eb 34                	jmp    c0015975 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015941:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015949:	83 ec 0c             	sub    esp,0xc
c001594c:	6a 34                	push   0x34
c001594e:	e8 59 a0 ff ff       	call   c000f9ac <malloc>
c0015953:	59                   	pop    ecx
c0015954:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015958:	89 c7                	mov    edi,eax
c001595a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001595c:	56                   	push   esi
c001595d:	57                   	push   edi
c001595e:	6a 00                	push   0x0
c0015960:	6a 34                	push   0x34
c0015962:	53                   	push   ebx
c0015963:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015966:	83 c4 20             	add    esp,0x20
c0015969:	85 c0                	test   eax,eax
c001596b:	74 17                	je     c0015984 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	68 f2 4c 02 c0       	push   0xc0024cf2
c0015975:	e8 88 a4 ff ff       	call   c000fe02 <KePanic(char const*)>
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	31 c0                	xor    eax,eax
c001597f:	e9 31 02 00 00       	jmp    c0015bb5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015984:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001598a:	75 e1                	jne    c001596d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001598c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001598f:	85 c0                	test   eax,eax
c0015991:	74 da                	je     c001596d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015993:	52                   	push   edx
c0015994:	31 d2                	xor    edx,edx
c0015996:	52                   	push   edx
c0015997:	50                   	push   eax
c0015998:	53                   	push   ebx
c0015999:	e8 c6 28 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	85 c0                	test   eax,eax
c00159a3:	75 c8                	jne    c001596d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00159a5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00159a9:	83 ec 0c             	sub    esp,0xc
c00159ac:	31 ed                	xor    ebp,ebp
c00159ae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00159b2:	0f af c2             	imul   eax,edx
c00159b5:	50                   	push   eax
c00159b6:	e8 f1 9f ff ff       	call   c000f9ac <malloc>
c00159bb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00159bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00159c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00159c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159c8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00159cc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00159d0:	0f af c2             	imul   eax,edx
c00159d3:	99                   	cdq    
c00159d4:	52                   	push   edx
c00159d5:	50                   	push   eax
c00159d6:	53                   	push   ebx
c00159d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159da:	83 c4 20             	add    esp,0x20
c00159dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00159e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00159ed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00159f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00159fd:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015a01:	0f b7 f5             	movzx  esi,bp
c0015a04:	0f 83 a7 00 00 00    	jae    c0015ab1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015a0a:	6b f6 28             	imul   esi,esi,0x28
c0015a0d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015a11:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015a14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a18:	50                   	push   eax
c0015a19:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015a1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a21:	8b 16                	mov    edx,DWORD PTR [esi]
c0015a23:	6b c0 28             	imul   eax,eax,0x28
c0015a26:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015a2a:	89 d0                	mov    eax,edx
c0015a2c:	31 d2                	xor    edx,edx
c0015a2e:	52                   	push   edx
c0015a2f:	50                   	push   eax
c0015a30:	53                   	push   ebx
c0015a31:	e8 2e 28 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015a36:	83 c4 0c             	add    esp,0xc
c0015a39:	6a 20                	push   0x20
c0015a3b:	6a 00                	push   0x0
c0015a3d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015a41:	52                   	push   edx
c0015a42:	e8 a9 aa fe ff       	call   c00004f0 <memset>
c0015a47:	58                   	pop    eax
c0015a48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a4a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015a4e:	51                   	push   ecx
c0015a4f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015a53:	52                   	push   edx
c0015a54:	6a 00                	push   0x0
c0015a56:	6a 1f                	push   0x1f
c0015a58:	53                   	push   ebx
c0015a59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a5c:	83 c4 18             	add    esp,0x18
c0015a5f:	68 09 4d 02 c0       	push   0xc0024d09
c0015a64:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015a68:	52                   	push   edx
c0015a69:	e8 12 ad fe ff       	call   c0000780 <strcmp>
c0015a6e:	83 c4 10             	add    esp,0x10
c0015a71:	85 c0                	test   eax,eax
c0015a73:	75 0f                	jne    c0015a84 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015a75:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a84:	50                   	push   eax
c0015a85:	50                   	push   eax
c0015a86:	68 11 4d 02 c0       	push   0xc0024d11
c0015a8b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015a8f:	50                   	push   eax
c0015a90:	e8 eb ac fe ff       	call   c0000780 <strcmp>
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	85 c0                	test   eax,eax
c0015a9a:	75 0f                	jne    c0015aab <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015a9c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015a9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015aa3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015aa7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015aab:	45                   	inc    ebp
c0015aac:	e9 4c ff ff ff       	jmp    c00159fd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015ab1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015ab6:	75 10                	jne    c0015ac8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015ab8:	83 ec 0c             	sub    esp,0xc
c0015abb:	68 19 4d 02 c0       	push   0xc0024d19
c0015ac0:	e8 3d a3 ff ff       	call   c000fe02 <KePanic(char const*)>
c0015ac5:	83 c4 10             	add    esp,0x10
c0015ac8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015acd:	75 10                	jne    c0015adf <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015acf:	83 ec 0c             	sub    esp,0xc
c0015ad2:	68 19 4d 02 c0       	push   0xc0024d19
c0015ad7:	e8 26 a3 ff ff       	call   c000fe02 <KePanic(char const*)>
c0015adc:	83 c4 10             	add    esp,0x10
c0015adf:	50                   	push   eax
c0015ae0:	31 d2                	xor    edx,edx
c0015ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae6:	52                   	push   edx
c0015ae7:	50                   	push   eax
c0015ae8:	53                   	push   ebx
c0015ae9:	e8 76 27 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015aee:	5a                   	pop    edx
c0015aef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015af3:	e8 b4 9e ff ff       	call   c000f9ac <malloc>
c0015af8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015afc:	31 c9                	xor    ecx,ecx
c0015afe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b04:	5e                   	pop    esi
c0015b05:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015b09:	55                   	push   ebp
c0015b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b0e:	51                   	push   ecx
c0015b0f:	52                   	push   edx
c0015b10:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015b14:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015b18:	53                   	push   ebx
c0015b19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b1c:	83 c4 14             	add    esp,0x14
c0015b1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015b23:	e8 84 9e ff ff       	call   c000f9ac <malloc>
c0015b28:	89 c6                	mov    esi,eax
c0015b2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b2c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015b2f:	56                   	push   esi
c0015b30:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015b34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b38:	51                   	push   ecx
c0015b39:	52                   	push   edx
c0015b3a:	53                   	push   ebx
c0015b3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015b42:	83 c4 1c             	add    esp,0x1c
c0015b45:	8b 15 00 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea00
c0015b4b:	c1 e8 04             	shr    eax,0x4
c0015b4e:	89 04 95 80 e8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1780],eax
c0015b55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b59:	31 d2                	xor    edx,edx
c0015b5b:	52                   	push   edx
c0015b5c:	50                   	push   eax
c0015b5d:	53                   	push   ebx
c0015b5e:	e8 01 27 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015b63:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b65:	31 d2                	xor    edx,edx
c0015b67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015b6a:	56                   	push   esi
c0015b6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015b6f:	52                   	push   edx
c0015b70:	50                   	push   eax
c0015b71:	53                   	push   ebx
c0015b72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b75:	83 c4 14             	add    esp,0x14
c0015b78:	53                   	push   ebx
c0015b79:	e8 86 26 ff ff       	call   c0008204 <File::close()>
c0015b7e:	5d                   	pop    ebp
c0015b7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b83:	e8 34 9e ff ff       	call   c000f9bc <free>
c0015b88:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015b8b:	e8 2c 9e ff ff       	call   c000f9bc <free>
c0015b90:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c0015b95:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015b99:	83 c4 10             	add    esp,0x10
c0015b9c:	89 34 85 00 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1700],esi
c0015ba3:	8d 50 01             	lea    edx,[eax+0x1]
c0015ba6:	89 0c 85 80 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1680],ecx
c0015bad:	b0 01                	mov    al,0x1
c0015baf:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c0015bb5:	83 c4 5c             	add    esp,0x5c
c0015bb8:	5b                   	pop    ebx
c0015bb9:	5e                   	pop    esi
c0015bba:	5f                   	pop    edi
c0015bbb:	5d                   	pop    ebp
c0015bbc:	c3                   	ret    

c0015bbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015bbd:	55                   	push   ebp
c0015bbe:	57                   	push   edi
c0015bbf:	56                   	push   esi
c0015bc0:	53                   	push   ebx
c0015bc1:	81 ec 68 03 00 00    	sub    esp,0x368
c0015bc7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015bce:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c0015bd4:	88 44 24 4a          	mov    BYTE PTR [esp+0x4a],al
c0015bd8:	68 14 01 00 00       	push   0x114
c0015bdd:	e8 ca 9d ff ff       	call   c000f9ac <malloc>
c0015be2:	83 c4 0c             	add    esp,0xc
c0015be5:	56                   	push   esi
c0015be6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015bed:	50                   	push   eax
c0015bee:	89 c3                	mov    ebx,eax
c0015bf0:	e8 93 25 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015bf5:	5f                   	pop    edi
c0015bf6:	5d                   	pop    ebp
c0015bf7:	6a 01                	push   0x1
c0015bf9:	53                   	push   ebx
c0015bfa:	e8 a7 25 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	85 c0                	test   eax,eax
c0015c04:	0f 85 d5 06 00 00    	jne    c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015c0a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015c12:	83 ec 0c             	sub    esp,0xc
c0015c15:	6a 34                	push   0x34
c0015c17:	e8 90 9d ff ff       	call   c000f9ac <malloc>
c0015c1c:	5e                   	pop    esi
c0015c1d:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015c21:	89 c5                	mov    ebp,eax
c0015c23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c25:	56                   	push   esi
c0015c26:	55                   	push   ebp
c0015c27:	6a 00                	push   0x0
c0015c29:	6a 34                	push   0x34
c0015c2b:	53                   	push   ebx
c0015c2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c2f:	83 c4 20             	add    esp,0x20
c0015c32:	85 c0                	test   eax,eax
c0015c34:	0f 85 a5 06 00 00    	jne    c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015c3a:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0015c41:	0f 85 98 06 00 00    	jne    c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015c47:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015c4a:	85 c0                	test   eax,eax
c0015c4c:	0f 84 8d 06 00 00    	je     c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015c52:	31 d2                	xor    edx,edx
c0015c54:	51                   	push   ecx
c0015c55:	52                   	push   edx
c0015c56:	50                   	push   eax
c0015c57:	53                   	push   ebx
c0015c58:	e8 07 26 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015c5d:	83 c4 10             	add    esp,0x10
c0015c60:	85 c0                	test   eax,eax
c0015c62:	0f 85 77 06 00 00    	jne    c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015c68:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0015c6b:	83 ec 0c             	sub    esp,0xc
c0015c6e:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015c72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015c76:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015c7a:	0f af c2             	imul   eax,edx
c0015c7d:	50                   	push   eax
c0015c7e:	e8 29 9d ff ff       	call   c000f9ac <malloc>
c0015c83:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015c85:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015c8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015c90:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015c94:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015c98:	0f af c2             	imul   eax,edx
c0015c9b:	99                   	cdq    
c0015c9c:	52                   	push   edx
c0015c9d:	50                   	push   eax
c0015c9e:	53                   	push   ebx
c0015c9f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ca2:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0015ca5:	83 c4 20             	add    esp,0x20
c0015ca8:	85 c0                	test   eax,eax
c0015caa:	0f 84 2f 06 00 00    	je     c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015cb0:	52                   	push   edx
c0015cb1:	31 d2                	xor    edx,edx
c0015cb3:	52                   	push   edx
c0015cb4:	50                   	push   eax
c0015cb5:	53                   	push   ebx
c0015cb6:	e8 a9 25 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015cbb:	83 c4 10             	add    esp,0x10
c0015cbe:	85 c0                	test   eax,eax
c0015cc0:	0f 85 19 06 00 00    	jne    c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015cc6:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015cca:	83 ec 0c             	sub    esp,0xc
c0015ccd:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015cd1:	0f af c2             	imul   eax,edx
c0015cd4:	50                   	push   eax
c0015cd5:	e8 d2 9c ff ff       	call   c000f9ac <malloc>
c0015cda:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015cdc:	89 34 24             	mov    DWORD PTR [esp],esi
c0015cdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ce7:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015ceb:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015cef:	0f af c2             	imul   eax,edx
c0015cf2:	99                   	cdq    
c0015cf3:	52                   	push   edx
c0015cf4:	50                   	push   eax
c0015cf5:	53                   	push   ebx
c0015cf6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015cf9:	83 c4 20             	add    esp,0x20
c0015cfc:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015d02:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d05:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0015d09:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015d0d:	73 78                	jae    c0015d87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015d0f:	c1 e7 05             	shl    edi,0x5
c0015d12:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0015d16:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015d19:	75 63                	jne    c0015d7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0015d1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015d1e:	31 d2                	xor    edx,edx
c0015d20:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015d23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d27:	50                   	push   eax
c0015d28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015d2b:	52                   	push   edx
c0015d2c:	50                   	push   eax
c0015d2d:	53                   	push   ebx
c0015d2e:	e8 31 25 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015d33:	83 c4 10             	add    esp,0x10
c0015d36:	85 c0                	test   eax,eax
c0015d38:	0f 85 a1 05 00 00    	jne    c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015d3e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015d45:	83 ec 0c             	sub    esp,0xc
c0015d48:	31 d2                	xor    edx,edx
c0015d4a:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015d4e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d50:	01 c6                	add    esi,eax
c0015d52:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d59:	50                   	push   eax
c0015d5a:	56                   	push   esi
c0015d5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d5f:	52                   	push   edx
c0015d60:	50                   	push   eax
c0015d61:	53                   	push   ebx
c0015d62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d65:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015d68:	83 c4 1c             	add    esp,0x1c
c0015d6b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015d6e:	50                   	push   eax
c0015d6f:	6a 00                	push   0x0
c0015d71:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0015d75:	56                   	push   esi
c0015d76:	e8 75 a7 fe ff       	call   c00004f0 <memset>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	66 ff 04 24          	inc    WORD PTR [esp]
c0015d82:	e9 7b ff ff ff       	jmp    c0015d02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0015d87:	56                   	push   esi
c0015d88:	68 00 01 00 00       	push   0x100
c0015d8d:	6a 00                	push   0x0
c0015d8f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015d93:	50                   	push   eax
c0015d94:	e8 57 a7 fe ff       	call   c00004f0 <memset>
c0015d99:	83 c4 0c             	add    esp,0xc
c0015d9c:	68 00 01 00 00       	push   0x100
c0015da1:	6a 00                	push   0x0
c0015da3:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015daa:	50                   	push   eax
c0015dab:	e8 40 a7 fe ff       	call   c00004f0 <memset>
c0015db0:	83 c4 10             	add    esp,0x10
c0015db3:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015dba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015dc1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015dc9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015dd1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015dd9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015de1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015de5:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015de9:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015dee:	0f 83 16 01 00 00    	jae    c0015f0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015df4:	6b ff 28             	imul   edi,edi,0x28
c0015df7:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015dfb:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015dfe:	52                   	push   edx
c0015dff:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015e03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e07:	8b 07                	mov    eax,DWORD PTR [edi]
c0015e09:	6b d2 28             	imul   edx,edx,0x28
c0015e0c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015e10:	31 d2                	xor    edx,edx
c0015e12:	52                   	push   edx
c0015e13:	50                   	push   eax
c0015e14:	53                   	push   ebx
c0015e15:	e8 4a 24 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015e1a:	83 c4 0c             	add    esp,0xc
c0015e1d:	6a 20                	push   0x20
c0015e1f:	6a 00                	push   0x0
c0015e21:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015e28:	51                   	push   ecx
c0015e29:	e8 c2 a6 fe ff       	call   c00004f0 <memset>
c0015e2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e30:	59                   	pop    ecx
c0015e31:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015e35:	52                   	push   edx
c0015e36:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015e3d:	51                   	push   ecx
c0015e3e:	6a 00                	push   0x0
c0015e40:	6a 1f                	push   0x1f
c0015e42:	53                   	push   ebx
c0015e43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e46:	83 c4 1c             	add    esp,0x1c
c0015e49:	6a 09                	push   0x9
c0015e4b:	68 33 4d 02 c0       	push   0xc0024d33
c0015e50:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015e57:	51                   	push   ecx
c0015e58:	e8 23 a5 fe ff       	call   c0000380 <memcmp>
c0015e5d:	83 c4 10             	add    esp,0x10
c0015e60:	85 c0                	test   eax,eax
c0015e62:	75 1a                	jne    c0015e7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015e64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e67:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015e6a:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015e6e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015e71:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015e78:	89 c8                	mov    eax,ecx
c0015e7a:	40                   	inc    eax
c0015e7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e7e:	50                   	push   eax
c0015e7f:	6a 09                	push   0x9
c0015e81:	68 3d 4d 02 c0       	push   0xc0024d3d
c0015e86:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015e8d:	50                   	push   eax
c0015e8e:	e8 ed a4 fe ff       	call   c0000380 <memcmp>
c0015e93:	83 c4 10             	add    esp,0x10
c0015e96:	85 c0                	test   eax,eax
c0015e98:	75 1a                	jne    c0015eb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0015e9a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e9d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015ea0:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015ea4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015ea7:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015eae:	89 c8                	mov    eax,ecx
c0015eb0:	40                   	inc    eax
c0015eb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015eb4:	50                   	push   eax
c0015eb5:	50                   	push   eax
c0015eb6:	68 09 4d 02 c0       	push   0xc0024d09
c0015ebb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015ec2:	50                   	push   eax
c0015ec3:	e8 b8 a8 fe ff       	call   c0000780 <strcmp>
c0015ec8:	83 c4 10             	add    esp,0x10
c0015ecb:	85 c0                	test   eax,eax
c0015ecd:	75 0b                	jne    c0015eda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015ecf:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015ed3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015eda:	50                   	push   eax
c0015edb:	50                   	push   eax
c0015edc:	68 11 4d 02 c0       	push   0xc0024d11
c0015ee1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015ee8:	50                   	push   eax
c0015ee9:	e8 92 a8 fe ff       	call   c0000780 <strcmp>
c0015eee:	83 c4 10             	add    esp,0x10
c0015ef1:	85 c0                	test   eax,eax
c0015ef3:	75 0b                	jne    c0015f00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015ef5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ef9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015efc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f00:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015f05:	e9 d7 fe ff ff       	jmp    c0015de1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015f0a:	50                   	push   eax
c0015f0b:	31 d2                	xor    edx,edx
c0015f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f11:	52                   	push   edx
c0015f12:	50                   	push   eax
c0015f13:	53                   	push   ebx
c0015f14:	e8 4b 23 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015f19:	58                   	pop    eax
c0015f1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f1e:	e8 89 9a ff ff       	call   c000f9ac <malloc>
c0015f23:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015f25:	31 d2                	xor    edx,edx
c0015f27:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015f2b:	58                   	pop    eax
c0015f2c:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015f30:	56                   	push   esi
c0015f31:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015f35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f39:	52                   	push   edx
c0015f3a:	50                   	push   eax
c0015f3b:	53                   	push   ebx
c0015f3c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f3f:	83 c4 14             	add    esp,0x14
c0015f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f46:	e8 61 9a ff ff       	call   c000f9ac <malloc>
c0015f4b:	31 d2                	xor    edx,edx
c0015f4d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015f51:	83 c4 0c             	add    esp,0xc
c0015f54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f58:	52                   	push   edx
c0015f59:	50                   	push   eax
c0015f5a:	53                   	push   ebx
c0015f5b:	e8 04 23 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015f60:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015f62:	31 d2                	xor    edx,edx
c0015f64:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015f6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f6f:	52                   	push   edx
c0015f70:	50                   	push   eax
c0015f71:	53                   	push   ebx
c0015f72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f75:	83 c4 20             	add    esp,0x20
c0015f78:	0f b6 44 24 3e       	movzx  eax,BYTE PTR [esp+0x3e]
c0015f7d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015f85:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015f89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f8d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0015f90:	0f 84 4d 03 00 00    	je     c00162e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x726>
c0015f96:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0015f9d:	31 d2                	xor    edx,edx
c0015f9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fa3:	c1 e8 03             	shr    eax,0x3
c0015fa6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015faa:	51                   	push   ecx
c0015fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015faf:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015fb3:	52                   	push   edx
c0015fb4:	50                   	push   eax
c0015fb5:	53                   	push   ebx
c0015fb6:	e8 a9 22 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015fbb:	5e                   	pop    esi
c0015fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fc0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015fc7:	e8 e0 99 ff ff       	call   c000f9ac <malloc>
c0015fcc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015fce:	31 d2                	xor    edx,edx
c0015fd0:	5f                   	pop    edi
c0015fd1:	89 c6                	mov    esi,eax
c0015fd3:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015fd7:	50                   	push   eax
c0015fd8:	56                   	push   esi
c0015fd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fdd:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015fe4:	52                   	push   edx
c0015fe5:	50                   	push   eax
c0015fe6:	53                   	push   ebx
c0015fe7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fea:	83 c4 20             	add    esp,0x20
c0015fed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015ff5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015ff9:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0015ffd:	0f 8d c7 02 00 00    	jge    c00162ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c0016003:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016007:	31 d2                	xor    edx,edx
c0016009:	8b 04 c6             	mov    eax,DWORD PTR [esi+eax*8]
c001600c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016010:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016014:	8b 7c c6 04          	mov    edi,DWORD PTR [esi+eax*8+0x4]
c0016018:	89 f8                	mov    eax,edi
c001601a:	c1 e8 08             	shr    eax,0x8
c001601d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016021:	c1 e0 04             	shl    eax,0x4
c0016024:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0016028:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001602c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001602f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016033:	85 c0                	test   eax,eax
c0016035:	0f 85 ca 00 00 00    	jne    c0016105 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c001603b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001603f:	83 ec 0c             	sub    esp,0xc
c0016042:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016046:	03 08                	add    ecx,DWORD PTR [eax]
c0016048:	51                   	push   ecx
c0016049:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c001604d:	e8 5e f8 ff ff       	call   c00158b0 <Thr::getAddressOfKernelSymbol(char const*)>
c0016052:	b2 01                	mov    dl,0x1
c0016054:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016058:	83 c4 10             	add    esp,0x10
c001605b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0016060:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016064:	0f 85 9b 00 00 00    	jne    c0016105 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c001606a:	88 54 24 3f          	mov    BYTE PTR [esp+0x3f],dl
c001606e:	83 ec 0c             	sub    esp,0xc
c0016071:	51                   	push   ecx
c0016072:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0016076:	e8 a9 a8 ff ff       	call   c0010924 <KeResolveCompatibilitySymbol(char*)>
c001607b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001607f:	83 c4 10             	add    esp,0x10
c0016082:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0016087:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001608b:	8a 54 24 3f          	mov    dl,BYTE PTR [esp+0x3f]
c001608f:	75 74                	jne    c0016105 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c0016091:	50                   	push   eax
c0016092:	50                   	push   eax
c0016093:	51                   	push   ecx
c0016094:	68 47 4d 02 c0       	push   0xc0024d47
c0016099:	e8 c8 0e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001609e:	58                   	pop    eax
c001609f:	5a                   	pop    edx
c00160a0:	68 61 4d 02 c0       	push   0xc0024d61
c00160a5:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00160ac:	52                   	push   edx
c00160ad:	e8 9e a5 fe ff       	call   c0000650 <strcpy>
c00160b2:	59                   	pop    ecx
c00160b3:	58                   	pop    eax
c00160b4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00160b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00160bc:	03 01                	add    eax,DWORD PTR [ecx]
c00160be:	50                   	push   eax
c00160bf:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00160c6:	52                   	push   edx
c00160c7:	e8 a4 a7 fe ff       	call   c0000870 <strcat>
c00160cc:	58                   	pop    eax
c00160cd:	5a                   	pop    edx
c00160ce:	68 fb 4d 02 c0       	push   0xc0024dfb
c00160d3:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00160da:	52                   	push   edx
c00160db:	e8 90 a7 fe ff       	call   c0000870 <strcat>
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00160e8:	0f 84 99 01 00 00    	je     c0016287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00160ee:	83 ec 0c             	sub    esp,0xc
c00160f1:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00160f8:	52                   	push   edx
c00160f9:	e8 04 9d ff ff       	call   c000fe02 <KePanic(char const*)>
c00160fe:	83 c4 10             	add    esp,0x10
c0016101:	8a 54 24 3e          	mov    dl,BYTE PTR [esp+0x3e]
c0016105:	89 f8                	mov    eax,edi
c0016107:	0f b6 c0             	movzx  eax,al
c001610a:	83 f8 01             	cmp    eax,0x1
c001610d:	0f 85 b2 00 00 00    	jne    c00161c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x608>
c0016113:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016117:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001611e:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0016122:	01 c8                	add    eax,ecx
c0016124:	81 ff 01 01 00 00    	cmp    edi,0x101
c001612a:	0f 94 44 24 28       	sete   BYTE PTR [esp+0x28]
c001612f:	81 ff 01 04 00 00    	cmp    edi,0x401
c0016135:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016139:	0f 94 c0             	sete   al
c001613c:	89 c7                	mov    edi,eax
c001613e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016142:	0b 7c 24 28          	or     edi,DWORD PTR [esp+0x28]
c0016146:	84 d2                	test   dl,dl
c0016148:	89 fa                	mov    edx,edi
c001614a:	8b 00                	mov    eax,DWORD PTR [eax]
c001614c:	0f b6 fa             	movzx  edi,dl
c001614f:	74 42                	je     c0016193 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d6>
c0016151:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016155:	85 ff                	test   edi,edi
c0016157:	75 15                	jne    c001616e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b1>
c0016159:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c001615d:	66 83 fa 0c          	cmp    dx,0xc
c0016161:	76 05                	jbe    c0016168 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0016163:	ba 0c 00 00 00       	mov    edx,0xc
c0016168:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001616c:	76 4c                	jbe    c00161ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5fd>
c001616e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016173:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016177:	0f 84 0a 01 00 00    	je     c0016287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001617d:	83 ec 0c             	sub    esp,0xc
c0016180:	68 78 4d 02 c0       	push   0xc0024d78
c0016185:	e8 78 9c ff ff       	call   c000fe02 <KePanic(char const*)>
c001618a:	83 c4 10             	add    esp,0x10
c001618d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016191:	eb 27                	jmp    c00161ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5fd>
c0016193:	01 c8                	add    eax,ecx
c0016195:	85 ff                	test   edi,edi
c0016197:	89 c2                	mov    edx,eax
c0016199:	75 10                	jne    c00161ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ee>
c001619b:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001619f:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c00161a3:	77 06                	ja     c00161ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ee>
c00161a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00161a9:	01 c2                	add    edx,eax
c00161ab:	8d 8a 00 00 00 28    	lea    ecx,[edx+0x28000000]
c00161b1:	81 f9 00 00 00 01    	cmp    ecx,0x1000000
c00161b7:	0f 43 c2             	cmovae eax,edx
c00161ba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00161be:	89 07                	mov    DWORD PTR [edi],eax
c00161c0:	e9 fc 00 00 00       	jmp    c00162c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00161c5:	83 f8 02             	cmp    eax,0x2
c00161c8:	0f 85 90 00 00 00    	jne    c001625e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a1>
c00161ce:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00161d5:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00161d9:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00161dd:	81 ff 01 01 00 00    	cmp    edi,0x101
c00161e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00161e7:	74 1f                	je     c0016208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c00161e9:	81 ff 01 04 00 00    	cmp    edi,0x401
c00161ef:	74 17                	je     c0016208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c00161f1:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00161f5:	b8 0a 00 00 00       	mov    eax,0xa
c00161fa:	83 f9 0e             	cmp    ecx,0xe
c00161fd:	77 03                	ja     c0016202 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x645>
c00161ff:	8d 41 fc             	lea    eax,[ecx-0x4]
c0016202:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0016206:	76 1f                	jbe    c0016227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0016208:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001620d:	88 54 24 20          	mov    BYTE PTR [esp+0x20],dl
c0016211:	74 74                	je     c0016287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0016213:	83 ec 0c             	sub    esp,0xc
c0016216:	68 94 4d 02 c0       	push   0xc0024d94
c001621b:	e8 e2 9b ff ff       	call   c000fe02 <KePanic(char const*)>
c0016220:	83 c4 10             	add    esp,0x10
c0016223:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
c0016227:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001622b:	84 d2                	test   dl,dl
c001622d:	8b 00                	mov    eax,DWORD PTR [eax]
c001622f:	74 13                	je     c0016244 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x687>
c0016231:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016235:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001623c:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c0016240:	01 c2                	add    edx,eax
c0016242:	eb 06                	jmp    c001624a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68d>
c0016244:	89 c2                	mov    edx,eax
c0016246:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c001624a:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c001624e:	3d fe ff 0f 00       	cmp    eax,0xffffe
c0016253:	0f 46 d0             	cmovbe edx,eax
c0016256:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001625a:	89 10                	mov    DWORD PTR [eax],edx
c001625c:	eb 63                	jmp    c00162c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001625e:	57                   	push   edi
c001625f:	57                   	push   edi
c0016260:	50                   	push   eax
c0016261:	68 b0 4d 02 c0       	push   0xc0024db0
c0016266:	e8 fb 0c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001626b:	83 c4 10             	add    esp,0x10
c001626e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016273:	74 12                	je     c0016287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0016275:	83 ec 0c             	sub    esp,0xc
c0016278:	68 bb 4d 02 c0       	push   0xc0024dbb
c001627d:	e8 80 9b ff ff       	call   c000fe02 <KePanic(char const*)>
c0016282:	83 c4 10             	add    esp,0x10
c0016285:	eb 3a                	jmp    c00162c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0016287:	83 ec 0c             	sub    esp,0xc
c001628a:	53                   	push   ebx
c001628b:	e8 74 1f ff ff       	call   c0008204 <File::close()>
c0016290:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016292:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016295:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016298:	89 34 24             	mov    DWORD PTR [esp],esi
c001629b:	e8 1c 97 ff ff       	call   c000f9bc <free>
c00162a0:	59                   	pop    ecx
c00162a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00162a5:	e8 12 97 ff ff       	call   c000f9bc <free>
c00162aa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00162ad:	e8 0a 97 ff ff       	call   c000f9bc <free>
c00162b2:	5b                   	pop    ebx
c00162b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162b7:	e8 00 97 ff ff       	call   c000f9bc <free>
c00162bc:	83 c4 10             	add    esp,0x10
c00162bf:	eb 1e                	jmp    c00162df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c00162c1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00162c5:	e9 2b fd ff ff       	jmp    c0015ff5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00162ca:	83 ec 0c             	sub    esp,0xc
c00162cd:	56                   	push   esi
c00162ce:	e8 e9 96 ff ff       	call   c000f9bc <free>
c00162d3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00162d7:	83 c4 10             	add    esp,0x10
c00162da:	e9 aa fc ff ff       	jmp    c0015f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00162df:	31 c0                	xor    eax,eax
c00162e1:	eb 32                	jmp    c0016315 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x758>
c00162e3:	83 ec 0c             	sub    esp,0xc
c00162e6:	53                   	push   ebx
c00162e7:	e8 18 1f ff ff       	call   c0008204 <File::close()>
c00162ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162f4:	58                   	pop    eax
c00162f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00162f9:	e8 be 96 ff ff       	call   c000f9bc <free>
c00162fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016301:	e8 b6 96 ff ff       	call   c000f9bc <free>
c0016306:	5a                   	pop    edx
c0016307:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001630b:	e8 ac 96 ff ff       	call   c000f9bc <free>
c0016310:	83 c4 10             	add    esp,0x10
c0016313:	b0 01                	mov    al,0x1
c0016315:	81 c4 5c 03 00 00    	add    esp,0x35c
c001631b:	5b                   	pop    ebx
c001631c:	5e                   	pop    esi
c001631d:	5f                   	pop    edi
c001631e:	5d                   	pop    ebp
c001631f:	c3                   	ret    

c0016320 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016320:	56                   	push   esi
c0016321:	31 d2                	xor    edx,edx
c0016323:	53                   	push   ebx
c0016324:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c001632a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001632e:	39 d3                	cmp    ebx,edx
c0016330:	7e 1b                	jle    c001634d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016332:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0016339:	39 c8                	cmp    eax,ecx
c001633b:	77 0d                	ja     c001634a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001633d:	8b 34 95 80 e2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1d80]
c0016344:	01 c6                	add    esi,eax
c0016346:	39 ce                	cmp    esi,ecx
c0016348:	77 05                	ja     c001634f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001634a:	42                   	inc    edx
c001634b:	eb e1                	jmp    c001632e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001634d:	31 c0                	xor    eax,eax
c001634f:	5b                   	pop    ebx
c0016350:	5e                   	pop    esi
c0016351:	c3                   	ret    

c0016352 <Thr::getDriverNameFromAddress(unsigned long)>:
c0016352:	53                   	push   ebx
c0016353:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0016359:	31 c0                	xor    eax,eax
c001635b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001635f:	39 c3                	cmp    ebx,eax
c0016361:	7e 22                	jle    c0016385 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0016363:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c001636a:	39 ca                	cmp    edx,ecx
c001636c:	77 14                	ja     c0016382 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001636e:	03 14 85 80 e2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1d80]
c0016375:	39 ca                	cmp    edx,ecx
c0016377:	76 09                	jbe    c0016382 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016379:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c0016380:	eb 05                	jmp    c0016387 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016382:	40                   	inc    eax
c0016383:	eb da                	jmp    c001635f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016385:	31 c0                	xor    eax,eax
c0016387:	5b                   	pop    ebx
c0016388:	c3                   	ret    

c0016389 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016389:	53                   	push   ebx
c001638a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001638e:	53                   	push   ebx
c001638f:	e8 8c ff ff ff       	call   c0016320 <Thr::getDriverBaseFromAddress(unsigned long)>
c0016394:	5a                   	pop    edx
c0016395:	31 d2                	xor    edx,edx
c0016397:	85 c0                	test   eax,eax
c0016399:	74 04                	je     c001639f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001639b:	89 da                	mov    edx,ebx
c001639d:	29 c2                	sub    edx,eax
c001639f:	5b                   	pop    ebx
c00163a0:	89 d0                	mov    eax,edx
c00163a2:	c3                   	ret    

c00163a3 <Thr::loadDLL(char const*, bool)>:
c00163a3:	55                   	push   ebp
c00163a4:	57                   	push   edi
c00163a5:	56                   	push   esi
c00163a6:	53                   	push   ebx
c00163a7:	81 ec 34 01 00 00    	sub    esp,0x134
c00163ad:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00163b4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00163bb:	56                   	push   esi
c00163bc:	68 d3 4d 02 c0       	push   0xc0024dd3
c00163c1:	e8 a0 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00163c6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00163cd:	e8 da 95 ff ff       	call   c000f9ac <malloc>
c00163d2:	83 c4 0c             	add    esp,0xc
c00163d5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00163db:	56                   	push   esi
c00163dc:	50                   	push   eax
c00163dd:	89 c3                	mov    ebx,eax
c00163df:	e8 a4 1d ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00163e4:	83 c4 10             	add    esp,0x10
c00163e7:	85 db                	test   ebx,ebx
c00163e9:	75 3c                	jne    c0016427 <Thr::loadDLL(char const*, bool)+0x84>
c00163eb:	89 e8                	mov    eax,ebp
c00163ed:	84 c0                	test   al,al
c00163ef:	0f 84 02 02 00 00    	je     c00165f7 <Thr::loadDLL(char const*, bool)+0x254>
c00163f5:	50                   	push   eax
c00163f6:	50                   	push   eax
c00163f7:	68 e4 4d 02 c0       	push   0xc0024de4
c00163fc:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0016400:	57                   	push   edi
c0016401:	e8 4a a2 fe ff       	call   c0000650 <strcpy>
c0016406:	58                   	pop    eax
c0016407:	5a                   	pop    edx
c0016408:	56                   	push   esi
c0016409:	57                   	push   edi
c001640a:	e8 61 a4 fe ff       	call   c0000870 <strcat>
c001640f:	59                   	pop    ecx
c0016410:	58                   	pop    eax
c0016411:	68 fb 4d 02 c0       	push   0xc0024dfb
c0016416:	57                   	push   edi
c0016417:	e8 54 a4 fe ff       	call   c0000870 <strcat>
c001641c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001641f:	e8 de 99 ff ff       	call   c000fe02 <KePanic(char const*)>
c0016424:	83 c4 10             	add    esp,0x10
c0016427:	50                   	push   eax
c0016428:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001642c:	50                   	push   eax
c001642d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016431:	50                   	push   eax
c0016432:	53                   	push   ebx
c0016433:	e8 70 20 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0016438:	83 c4 10             	add    esp,0x10
c001643b:	85 db                	test   ebx,ebx
c001643d:	89 c7                	mov    edi,eax
c001643f:	74 0c                	je     c001644d <Thr::loadDLL(char const*, bool)+0xaa>
c0016441:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016443:	83 ec 0c             	sub    esp,0xc
c0016446:	53                   	push   ebx
c0016447:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001644a:	83 c4 10             	add    esp,0x10
c001644d:	83 ec 0c             	sub    esp,0xc
c0016450:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0016455:	50                   	push   eax
c0016456:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001645a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001645e:	57                   	push   edi
c001645f:	68 fd 4d 02 c0       	push   0xc0024dfd
c0016464:	e8 fd 0a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016469:	83 c4 20             	add    esp,0x20
c001646c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016471:	75 0a                	jne    c001647d <Thr::loadDLL(char const*, bool)+0xda>
c0016473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016477:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001647b:	75 3e                	jne    c00164bb <Thr::loadDLL(char const*, bool)+0x118>
c001647d:	89 e8                	mov    eax,ebp
c001647f:	31 db                	xor    ebx,ebx
c0016481:	84 c0                	test   al,al
c0016483:	0f 84 6e 01 00 00    	je     c00165f7 <Thr::loadDLL(char const*, bool)+0x254>
c0016489:	50                   	push   eax
c001648a:	50                   	push   eax
c001648b:	68 1e 4e 02 c0       	push   0xc0024e1e
c0016490:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016494:	53                   	push   ebx
c0016495:	e8 b6 a1 fe ff       	call   c0000650 <strcpy>
c001649a:	58                   	pop    eax
c001649b:	5a                   	pop    edx
c001649c:	56                   	push   esi
c001649d:	53                   	push   ebx
c001649e:	e8 cd a3 fe ff       	call   c0000870 <strcat>
c00164a3:	59                   	pop    ecx
c00164a4:	5f                   	pop    edi
c00164a5:	68 fb 4d 02 c0       	push   0xc0024dfb
c00164aa:	53                   	push   ebx
c00164ab:	e8 c0 a3 fe ff       	call   c0000870 <strcat>
c00164b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b3:	e8 4a 99 ff ff       	call   c000fe02 <KePanic(char const*)>
c00164b8:	83 c4 10             	add    esp,0x10
c00164bb:	53                   	push   ebx
c00164bc:	6a 03                	push   0x3
c00164be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164c2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00164c6:	05 ff 0f 00 00       	add    eax,0xfff
c00164cb:	83 d2 00             	adc    edx,0x0
c00164ce:	0f ac d0 0c          	shrd   eax,edx,0xc
c00164d2:	50                   	push   eax
c00164d3:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00164d9:	e8 fa d6 ff ff       	call   c0013bd8 <VAS::allocatePages(int, int)>
c00164de:	89 c3                	mov    ebx,eax
c00164e0:	58                   	pop    eax
c00164e1:	5a                   	pop    edx
c00164e2:	53                   	push   ebx
c00164e3:	68 fa 42 02 c0       	push   0xc00242fa
c00164e8:	e8 79 0a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00164ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00164f0:	e8 8b a0 fe ff       	call   c0000580 <strlen>
c00164f5:	8b 3d 60 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e260
c00164fb:	40                   	inc    eax
c00164fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00164ff:	e8 a8 94 ff ff       	call   c000f9ac <malloc>
c0016504:	59                   	pop    ecx
c0016505:	89 04 bd 80 e6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1980],eax
c001650c:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0016511:	5f                   	pop    edi
c0016512:	56                   	push   esi
c0016513:	ff 34 85 80 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1980]
c001651a:	e8 31 a1 fe ff       	call   c0000650 <strcpy>
c001651f:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0016524:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c001652b:	8d 50 01             	lea    edx,[eax+0x1]
c001652e:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c0016534:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016538:	83 c4 0c             	add    esp,0xc
c001653b:	6a 01                	push   0x1
c001653d:	53                   	push   ebx
c001653e:	56                   	push   esi
c001653f:	89 14 85 80 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d80],edx
c0016546:	e8 72 f6 ff ff       	call   c0015bbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001654b:	83 c4 10             	add    esp,0x10
c001654e:	89 c7                	mov    edi,eax
c0016550:	89 f8                	mov    eax,edi
c0016552:	83 f0 01             	xor    eax,0x1
c0016555:	84 c0                	test   al,al
c0016557:	74 18                	je     c0016571 <Thr::loadDLL(char const*, bool)+0x1ce>
c0016559:	89 e8                	mov    eax,ebp
c001655b:	84 c0                	test   al,al
c001655d:	74 12                	je     c0016571 <Thr::loadDLL(char const*, bool)+0x1ce>
c001655f:	83 ec 0c             	sub    esp,0xc
c0016562:	68 37 4e 02 c0       	push   0xc0024e37
c0016567:	e8 96 98 ff ff       	call   c000fe02 <KePanic(char const*)>
c001656c:	83 c4 10             	add    esp,0x10
c001656f:	eb 06                	jmp    c0016577 <Thr::loadDLL(char const*, bool)+0x1d4>
c0016571:	89 f8                	mov    eax,edi
c0016573:	84 c0                	test   al,al
c0016575:	75 10                	jne    c0016587 <Thr::loadDLL(char const*, bool)+0x1e4>
c0016577:	83 ec 0c             	sub    esp,0xc
c001657a:	68 56 4e 02 c0       	push   0xc0024e56
c001657f:	e8 7e 98 ff ff       	call   c000fe02 <KePanic(char const*)>
c0016584:	83 c4 10             	add    esp,0x10
c0016587:	31 f6                	xor    esi,esi
c0016589:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001658d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016591:	05 ff 0f 00 00       	add    eax,0xfff
c0016596:	83 d2 00             	adc    edx,0x0
c0016599:	0f ac d0 0c          	shrd   eax,edx,0xc
c001659d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165a1:	c1 ea 0c             	shr    edx,0xc
c00165a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00165a8:	ba 00 00 00 00       	mov    edx,0x0
c00165ad:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00165b1:	89 d0                	mov    eax,edx
c00165b3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00165b7:	73 32                	jae    c00165eb <Thr::loadDLL(char const*, bool)+0x248>
c00165b9:	50                   	push   eax
c00165ba:	50                   	push   eax
c00165bb:	89 f0                	mov    eax,esi
c00165bd:	c1 e0 0c             	shl    eax,0xc
c00165c0:	01 d8                	add    eax,ebx
c00165c2:	50                   	push   eax
c00165c3:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00165c9:	e8 08 d1 ff ff       	call   c00136d6 <VAS::getPageTableEntry(unsigned long)>
c00165ce:	83 c4 10             	add    esp,0x10
c00165d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00165d3:	a8 60                	test   al,0x60
c00165d5:	75 11                	jne    c00165e8 <Thr::loadDLL(char const*, bool)+0x245>
c00165d7:	83 ec 0c             	sub    esp,0xc
c00165da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00165df:	50                   	push   eax
c00165e0:	e8 ae 99 ff ff       	call   c000ff93 <Phys::freePage(unsigned long)>
c00165e5:	83 c4 10             	add    esp,0x10
c00165e8:	46                   	inc    esi
c00165e9:	eb 9e                	jmp    c0016589 <Thr::loadDLL(char const*, bool)+0x1e6>
c00165eb:	89 f8                	mov    eax,edi
c00165ed:	84 c0                	test   al,al
c00165ef:	b8 00 00 00 00       	mov    eax,0x0
c00165f4:	0f 44 d8             	cmove  ebx,eax
c00165f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00165fd:	89 d8                	mov    eax,ebx
c00165ff:	5b                   	pop    ebx
c0016600:	5e                   	pop    esi
c0016601:	5f                   	pop    edi
c0016602:	5d                   	pop    ebp
c0016603:	c3                   	ret    

c0016604 <Thr::executeDLL(unsigned long, void*)>:
c0016604:	56                   	push   esi
c0016605:	53                   	push   ebx
c0016606:	52                   	push   edx
c0016607:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001660b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001660f:	85 db                	test   ebx,ebx
c0016611:	75 10                	jne    c0016623 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016613:	83 ec 0c             	sub    esp,0xc
c0016616:	68 72 4e 02 c0       	push   0xc0024e72
c001661b:	e8 e2 97 ff ff       	call   c000fe02 <KePanic(char const*)>
c0016620:	83 c4 10             	add    esp,0x10
c0016623:	50                   	push   eax
c0016624:	50                   	push   eax
c0016625:	53                   	push   ebx
c0016626:	68 9c 4e 02 c0       	push   0xc0024e9c
c001662b:	e8 36 09 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016630:	89 d8                	mov    eax,ebx
c0016632:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016636:	83 c4 14             	add    esp,0x14
c0016639:	5b                   	pop    ebx
c001663a:	5e                   	pop    esi
c001663b:	ff e0                	jmp    eax

c001663d <KeProcessExec(Process*, char const*)>:
c001663d:	56                   	push   esi
c001663e:	53                   	push   ebx
c001663f:	83 ec 04             	sub    esp,0x4
c0016642:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016646:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c001664c:	85 f6                	test   esi,esi
c001664e:	74 16                	je     c0016666 <KeProcessExec(Process*, char const*)+0x29>
c0016650:	83 ec 0c             	sub    esp,0xc
c0016653:	56                   	push   esi
c0016654:	e8 0f d3 ff ff       	call   c0013968 <VAS::~VAS()>
c0016659:	58                   	pop    eax
c001665a:	5a                   	pop    edx
c001665b:	6a 14                	push   0x14
c001665d:	56                   	push   esi
c001665e:	e8 92 6c ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0016663:	83 c4 10             	add    esp,0x10
c0016666:	83 ec 0c             	sub    esp,0xc
c0016669:	6a 14                	push   0x14
c001666b:	e8 3c 93 ff ff       	call   c000f9ac <malloc>
c0016670:	89 c6                	mov    esi,eax
c0016672:	58                   	pop    eax
c0016673:	5a                   	pop    edx
c0016674:	6a 00                	push   0x0
c0016676:	56                   	push   esi
c0016677:	e8 98 d7 ff ff       	call   c0013e14 <VAS::VAS(bool)>
c001667c:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016682:	59                   	pop    ecx
c0016683:	5e                   	pop    esi
c0016684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016688:	50                   	push   eax
c0016689:	53                   	push   ebx
c001668a:	e8 6d ef ff ff       	call   c00155fc <Thr::loadProgramIntoMemory(Process*, char const*)>
c001668f:	83 c4 14             	add    esp,0x14
c0016692:	31 c0                	xor    eax,eax
c0016694:	5b                   	pop    ebx
c0016695:	5e                   	pop    esi
c0016696:	c3                   	ret    
c0016697:	90                   	nop

c0016698 <userModeEntryPoint(void*)>:
c0016698:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00166a0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00166a5:	85 c0                	test   eax,eax
c00166a7:	75 03                	jne    c00166ac <userModeEntryPoint(void*)+0x14>
c00166a9:	fb                   	sti    
c00166aa:	66 90                	xchg   ax,ax
c00166ac:	fb                   	sti    
c00166ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166b5:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c00166bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166bf:	e9 7b 9b fe ff       	jmp    c000023f <goToUsermode>

c00166c4 <changeTSS>:
c00166c4:	83 ec 14             	sub    esp,0x14
c00166c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166cc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00166cf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00166d4:	c1 e2 15             	shl    edx,0x15
c00166d7:	29 d0                	sub    eax,edx
c00166d9:	50                   	push   eax
c00166da:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c00166df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166e5:	05 68 11 00 00       	add    eax,0x1168
c00166ea:	50                   	push   eax
c00166eb:	e8 c8 c5 ff ff       	call   c0012cb8 <TSS::setESP(unsigned long)>
c00166f0:	83 c4 1c             	add    esp,0x1c
c00166f3:	c3                   	ret    

c00166f4 <switchToThread(ThreadControlBlock*)>:
c00166f4:	57                   	push   edi
c00166f5:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c00166fb:	56                   	push   esi
c00166fc:	53                   	push   ebx
c00166fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016701:	85 c9                	test   ecx,ecx
c0016703:	0f 85 9b 00 00 00    	jne    c00167a4 <switchToThread(ThreadControlBlock*)+0xb0>
c0016709:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c001670d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016713:	0f 84 87 00 00 00    	je     c00167a0 <switchToThread(ThreadControlBlock*)+0xac>
c0016719:	b8 00 04 00 00       	mov    eax,0x400
c001671e:	29 d0                	sub    eax,edx
c0016720:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016723:	d1 f8                	sar    eax,1
c0016725:	01 d0                	add    eax,edx
c0016727:	90                   	nop
c0016728:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001672b:	e8 b3 3e 00 00       	call   c001a5e3 <HalQueryPerformanceCounter()>
c0016730:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c0016735:	89 c6                	mov    esi,eax
c0016737:	89 d7                	mov    edi,edx
c0016739:	2b 35 60 ea 02 c0    	sub    esi,DWORD PTR ds:0xc002ea60
c001673f:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0016744:	1b 3d 64 ea 02 c0    	sbb    edi,DWORD PTR ds:0xc002ea64
c001674a:	89 35 68 ea 02 c0    	mov    DWORD PTR ds:0xc002ea68,esi
c0016750:	89 15 74 ea 02 c0    	mov    DWORD PTR ds:0xc002ea74,edx
c0016756:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001675c:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c0016762:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c0016768:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001676b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001676e:	01 c6                	add    esi,eax
c0016770:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016773:	11 d7                	adc    edi,edx
c0016775:	83 ec 0c             	sub    esp,0xc
c0016778:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001677b:	53                   	push   ebx
c001677c:	e8 f6 9a fe ff       	call   c0000277 <switchToThreadASM>
c0016781:	0f 20 c0             	mov    eax,cr0
c0016784:	83 c8 08             	or     eax,0x8
c0016787:	0f 22 c0             	mov    cr0,eax
c001678a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016796:	5b                   	pop    ebx
c0016797:	5e                   	pop    esi
c0016798:	5f                   	pop    edi
c0016799:	e9 e2 ea ff ff       	jmp    c0015280 <KeCheckAlarm(ThreadControlBlock*)>
c001679e:	66 90                	xchg   ax,ax
c00167a0:	31 c0                	xor    eax,eax
c00167a2:	eb 84                	jmp    c0016728 <switchToThread(ThreadControlBlock*)+0x34>
c00167a4:	5b                   	pop    ebx
c00167a5:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c00167af:	5e                   	pop    esi
c00167b0:	5f                   	pop    edi
c00167b1:	c3                   	ret    
c00167b2:	66 90                	xchg   ax,ax

c00167b4 <Process::addArgs(char**)>:
c00167b4:	57                   	push   edi
c00167b5:	56                   	push   esi
c00167b6:	53                   	push   ebx
c00167b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00167bb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00167bf:	85 f6                	test   esi,esi
c00167c1:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c00167cb:	74 4f                	je     c001681c <Process::addArgs(char**)+0x68>
c00167cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00167cf:	85 c0                	test   eax,eax
c00167d1:	74 49                	je     c001681c <Process::addArgs(char**)+0x68>
c00167d3:	31 db                	xor    ebx,ebx
c00167d5:	8d 76 00             	lea    esi,[esi+0x0]
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	50                   	push   eax
c00167dc:	e8 9f 9d fe ff       	call   c0000580 <strlen>
c00167e1:	83 c0 01             	add    eax,0x1
c00167e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00167e7:	e8 c0 91 ff ff       	call   c000f9ac <malloc>
c00167ec:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c00167f3:	5a                   	pop    edx
c00167f4:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00167f7:	83 c3 01             	add    ebx,0x1
c00167fa:	59                   	pop    ecx
c00167fb:	52                   	push   edx
c00167fc:	50                   	push   eax
c00167fd:	e8 4e 9e fe ff       	call   c0000650 <strcpy>
c0016802:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c0016808:	83 c4 10             	add    esp,0x10
c001680b:	83 c1 01             	add    ecx,0x1
c001680e:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c0016814:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0016817:	85 c0                	test   eax,eax
c0016819:	75 bd                	jne    c00167d8 <Process::addArgs(char**)+0x24>
c001681b:	90                   	nop
c001681c:	5b                   	pop    ebx
c001681d:	5e                   	pop    esi
c001681e:	5f                   	pop    edi
c001681f:	c3                   	ret    

c0016820 <Process::Process(char const*, Process*, char**)>:
c0016820:	56                   	push   esi
c0016821:	53                   	push   ebx
c0016822:	83 ec 14             	sub    esp,0x14
c0016825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016829:	05 0c 02 00 00       	add    eax,0x20c
c001682e:	bb 07 00 00 00       	mov    ebx,0x7
c0016833:	89 c6                	mov    esi,eax
c0016835:	8d 76 00             	lea    esi,[esi+0x0]
c0016838:	85 db                	test   ebx,ebx
c001683a:	78 14                	js     c0016850 <Process::Process(char const*, Process*, char**)+0x30>
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	56                   	push   esi
c0016840:	e8 3b bb 00 00       	call   c0022380 <ThreadControlBlock::ThreadControlBlock()>
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	83 c6 73             	add    esi,0x73
c001684b:	83 eb 01             	sub    ebx,0x1
c001684e:	eb e8                	jmp    c0016838 <Process::Process(char const*, Process*, char**)+0x18>
c0016850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016854:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001685b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001685f:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016866:	83 ec 0c             	sub    esp,0xc
c0016869:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001686d:	e8 9e 7d ff ff       	call   c000e610 <KeNewProcessEnv(Process*)>
c0016872:	83 c4 10             	add    esp,0x10
c0016875:	89 c2                	mov    edx,eax
c0016877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687b:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016885:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c001688e:	a1 bc 6a 02 c0       	mov    eax,ds:0xc0026abc
c0016893:	8d 50 01             	lea    edx,[eax+0x1]
c0016896:	89 15 bc 6a 02 c0    	mov    DWORD PTR ds:0xc0026abc,edx
c001689c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00168a0:	89 02                	mov    DWORD PTR [edx],eax
c00168a2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00168b1:	e8 f6 90 ff ff       	call   c000f9ac <malloc>
c00168b6:	83 c4 10             	add    esp,0x10
c00168b9:	89 c3                	mov    ebx,eax
c00168bb:	83 ec 08             	sub    esp,0x8
c00168be:	6a 00                	push   0x0
c00168c0:	53                   	push   ebx
c00168c1:	e8 4e d5 ff ff       	call   c0013e14 <VAS::VAS(bool)>
c00168c6:	83 c4 10             	add    esp,0x10
c00168c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168cd:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00168d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d7:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00168e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168e9:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00168ef:	e8 23 a7 ff ff       	call   c0011017 <KeInitSignals()>
c00168f4:	89 c2                	mov    edx,eax
c00168f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fa:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016904:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001690a:	85 c0                	test   eax,eax
c001690c:	74 42                	je     c0016950 <Process::Process(char const*, Process*, char**)+0x130>
c001690e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016912:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016918:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001691e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016922:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016932:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001693c:	05 0c 01 00 00       	add    eax,0x10c
c0016941:	83 ec 08             	sub    esp,0x8
c0016944:	52                   	push   edx
c0016945:	50                   	push   eax
c0016946:	e8 05 9d fe ff       	call   c0000650 <strcpy>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	eb 7c                	jmp    c00169cc <Process::Process(char const*, Process*, char**)+0x1ac>
c0016950:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016958:	83 ec 0c             	sub    esp,0xc
c001695b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001695f:	e8 48 90 ff ff       	call   c000f9ac <malloc>
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	89 c3                	mov    ebx,eax
c0016969:	83 ec 08             	sub    esp,0x8
c001696c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016970:	53                   	push   ebx
c0016971:	e8 62 c0 ff ff       	call   c00129d8 <VgaText::VgaText(char const*)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001697d:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016987:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001698d:	83 ec 0c             	sub    esp,0xc
c0016990:	50                   	push   eax
c0016991:	e8 a8 b8 ff ff       	call   c001223e <addToTerminalCycle(VgaText*)>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001699d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00169a3:	83 ec 0c             	sub    esp,0xc
c00169a6:	50                   	push   eax
c00169a7:	e8 03 bb ff ff       	call   c00124af <setActiveTerminal(VgaText*)>
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b3:	05 0c 01 00 00       	add    eax,0x10c
c00169b8:	83 ec 08             	sub    esp,0x8
c00169bb:	68 bb 4e 02 c0       	push   0xc0024ebb
c00169c0:	50                   	push   eax
c00169c1:	e8 8a 9c fe ff       	call   c0000650 <strcpy>
c00169c6:	83 c4 10             	add    esp,0x10
c00169c9:	8d 76 00             	lea    esi,[esi+0x0]
c00169cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d0:	83 c0 0c             	add    eax,0xc
c00169d3:	83 ec 08             	sub    esp,0x8
c00169d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169da:	50                   	push   eax
c00169db:	e8 70 9c fe ff       	call   c0000650 <strcpy>
c00169e0:	83 c4 10             	add    esp,0x10
c00169e3:	83 ec 08             	sub    esp,0x8
c00169e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00169ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169ee:	e8 c1 fd ff ff       	call   c00167b4 <Process::addArgs(char**)>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fa:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016a00:	83 e2 7f             	and    edx,0x7f
c0016a03:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016a09:	83 ec 08             	sub    esp,0x8
c0016a0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a14:	e8 e3 eb ff ff       	call   c00155fc <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016a19:	83 c4 10             	add    esp,0x10
c0016a1c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016a20:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016a24:	83 f0 01             	xor    eax,0x1
c0016a27:	88 c2                	mov    dl,al
c0016a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a2d:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a37:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a39:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016a3e:	52                   	push   edx
c0016a3f:	50                   	push   eax
c0016a40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a44:	68 14 4f 02 c0       	push   0xc0024f14
c0016a49:	e8 18 05 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016a4e:	83 c4 10             	add    esp,0x10
c0016a51:	90                   	nop
c0016a52:	83 c4 14             	add    esp,0x14
c0016a55:	5b                   	pop    ebx
c0016a56:	5e                   	pop    esi
c0016a57:	c3                   	ret    

c0016a58 <Process::Process(bool, char const*, Process*, char**)>:
c0016a58:	56                   	push   esi
c0016a59:	53                   	push   ebx
c0016a5a:	83 ec 24             	sub    esp,0x24
c0016a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a61:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016a65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a69:	05 0c 02 00 00       	add    eax,0x20c
c0016a6e:	bb 07 00 00 00       	mov    ebx,0x7
c0016a73:	89 c6                	mov    esi,eax
c0016a75:	8d 76 00             	lea    esi,[esi+0x0]
c0016a78:	85 db                	test   ebx,ebx
c0016a7a:	78 14                	js     c0016a90 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	56                   	push   esi
c0016a80:	e8 fb b8 00 00       	call   c0022380 <ThreadControlBlock::ThreadControlBlock()>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	83 c6 73             	add    esi,0x73
c0016a8b:	83 eb 01             	sub    ebx,0x1
c0016a8e:	eb e8                	jmp    c0016a78 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016a90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a94:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016a9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a9f:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016aa6:	83 ec 0c             	sub    esp,0xc
c0016aa9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016aad:	e8 5e 7b ff ff       	call   c000e610 <KeNewProcessEnv(Process*)>
c0016ab2:	83 c4 10             	add    esp,0x10
c0016ab5:	89 c2                	mov    edx,eax
c0016ab7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016abb:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016ac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ac5:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016ace:	a1 bc 6a 02 c0       	mov    eax,ds:0xc0026abc
c0016ad3:	8d 50 01             	lea    edx,[eax+0x1]
c0016ad6:	89 15 bc 6a 02 c0    	mov    DWORD PTR ds:0xc0026abc,edx
c0016adc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ae0:	89 02                	mov    DWORD PTR [edx],eax
c0016ae2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016aea:	83 ec 0c             	sub    esp,0xc
c0016aed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016af1:	e8 b6 8e ff ff       	call   c000f9ac <malloc>
c0016af6:	83 c4 10             	add    esp,0x10
c0016af9:	89 c3                	mov    ebx,eax
c0016afb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016b00:	83 ec 08             	sub    esp,0x8
c0016b03:	50                   	push   eax
c0016b04:	53                   	push   ebx
c0016b05:	e8 0a d3 ff ff       	call   c0013e14 <VAS::VAS(bool)>
c0016b0a:	83 c4 10             	add    esp,0x10
c0016b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b11:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016b17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b1b:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b29:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016b2d:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016b33:	e8 df a4 ff ff       	call   c0011017 <KeInitSignals()>
c0016b38:	89 c2                	mov    edx,eax
c0016b3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b3e:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016b44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b48:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016b4e:	85 c0                	test   eax,eax
c0016b50:	74 42                	je     c0016b94 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016b52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b56:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016b5c:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016b62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b66:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b70:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016b76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b80:	05 0c 01 00 00       	add    eax,0x10c
c0016b85:	83 ec 08             	sub    esp,0x8
c0016b88:	52                   	push   edx
c0016b89:	50                   	push   eax
c0016b8a:	e8 c1 9a fe ff       	call   c0000650 <strcpy>
c0016b8f:	83 c4 10             	add    esp,0x10
c0016b92:	eb 7c                	jmp    c0016c10 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016b94:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016b9c:	83 ec 0c             	sub    esp,0xc
c0016b9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ba3:	e8 04 8e ff ff       	call   c000f9ac <malloc>
c0016ba8:	83 c4 10             	add    esp,0x10
c0016bab:	89 c3                	mov    ebx,eax
c0016bad:	83 ec 08             	sub    esp,0x8
c0016bb0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bb4:	53                   	push   ebx
c0016bb5:	e8 1e be ff ff       	call   c00129d8 <VgaText::VgaText(char const*)>
c0016bba:	83 c4 10             	add    esp,0x10
c0016bbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bc1:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016bc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bcb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016bd1:	83 ec 0c             	sub    esp,0xc
c0016bd4:	50                   	push   eax
c0016bd5:	e8 64 b6 ff ff       	call   c001223e <addToTerminalCycle(VgaText*)>
c0016bda:	83 c4 10             	add    esp,0x10
c0016bdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016be1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016be7:	83 ec 0c             	sub    esp,0xc
c0016bea:	50                   	push   eax
c0016beb:	e8 bf b8 ff ff       	call   c00124af <setActiveTerminal(VgaText*)>
c0016bf0:	83 c4 10             	add    esp,0x10
c0016bf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bf7:	05 0c 01 00 00       	add    eax,0x10c
c0016bfc:	83 ec 08             	sub    esp,0x8
c0016bff:	68 bb 4e 02 c0       	push   0xc0024ebb
c0016c04:	50                   	push   eax
c0016c05:	e8 46 9a fe ff       	call   c0000650 <strcpy>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c14:	83 c0 0c             	add    eax,0xc
c0016c17:	83 ec 08             	sub    esp,0x8
c0016c1a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c1e:	50                   	push   eax
c0016c1f:	e8 2c 9a fe ff       	call   c0000650 <strcpy>
c0016c24:	83 c4 10             	add    esp,0x10
c0016c27:	83 ec 08             	sub    esp,0x8
c0016c2a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016c32:	e8 7d fb ff ff       	call   c00167b4 <Process::addArgs(char**)>
c0016c37:	83 c4 10             	add    esp,0x10
c0016c3a:	90                   	nop
c0016c3b:	83 c4 24             	add    esp,0x24
c0016c3e:	5b                   	pop    ebx
c0016c3f:	5e                   	pop    esi
c0016c40:	c3                   	ret    
c0016c41:	8d 76 00             	lea    esi,[esi+0x0]

c0016c44 <taskStartupFunction>:
c0016c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c49:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016c4c:	c3                   	ret    
c0016c4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016c50 <KeDisablePreemption()>:
c0016c50:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016c55:	85 c0                	test   eax,eax
c0016c57:	75 13                	jne    c0016c6c <KeDisablePreemption()+0x1c>
c0016c59:	8a 15 cc c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c0cc
c0016c5f:	c6 05 cc c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0cc,0x0
c0016c66:	88 15 08 ea 02 c0    	mov    BYTE PTR ds:0xc002ea08,dl
c0016c6c:	83 c0 01             	add    eax,0x1
c0016c6f:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016c74:	c3                   	ret    
c0016c75:	8d 76 00             	lea    esi,[esi+0x0]

c0016c78 <KeRestorePreemption()>:
c0016c78:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016c7d:	83 e8 01             	sub    eax,0x1
c0016c80:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016c85:	75 0d                	jne    c0016c94 <KeRestorePreemption()+0x1c>
c0016c87:	a0 08 ea 02 c0       	mov    al,ds:0xc002ea08
c0016c8c:	a2 cc c0 02 c0       	mov    ds:0xc002c0cc,al
c0016c91:	8d 76 00             	lea    esi,[esi+0x0]
c0016c94:	c3                   	ret    
c0016c95:	90                   	nop
c0016c96:	66 90                	xchg   ax,ax

c0016c98 <Process::createThread(void (*)(void*), void*, int)>:
c0016c98:	55                   	push   ebp
c0016c99:	31 c9                	xor    ecx,ecx
c0016c9b:	57                   	push   edi
c0016c9c:	56                   	push   esi
c0016c9d:	53                   	push   ebx
c0016c9e:	83 ec 0c             	sub    esp,0xc
c0016ca1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016ca5:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016cac:	89 f2                	mov    edx,esi
c0016cae:	66 90                	xchg   ax,ax
c0016cb0:	0f b7 c2             	movzx  eax,dx
c0016cb3:	80 e2 01             	and    dl,0x1
c0016cb6:	74 18                	je     c0016cd0 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016cb8:	d1 f8                	sar    eax,1
c0016cba:	83 c1 01             	add    ecx,0x1
c0016cbd:	83 f9 10             	cmp    ecx,0x10
c0016cc0:	89 c2                	mov    edx,eax
c0016cc2:	75 ec                	jne    c0016cb0 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016cc4:	83 c4 0c             	add    esp,0xc
c0016cc7:	31 db                	xor    ebx,ebx
c0016cc9:	89 d8                	mov    eax,ebx
c0016ccb:	5b                   	pop    ebx
c0016ccc:	5e                   	pop    esi
c0016ccd:	5f                   	pop    edi
c0016cce:	5d                   	pop    ebp
c0016ccf:	c3                   	ret    
c0016cd0:	b8 01 00 00 00       	mov    eax,0x1
c0016cd5:	d3 e0                	shl    eax,cl
c0016cd7:	09 c6                	or     esi,eax
c0016cd9:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016ce0:	6b c1 73             	imul   eax,ecx,0x73
c0016ce3:	01 d8                	add    eax,ebx
c0016ce5:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016cec:	75 0a                	jne    c0016cf8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016cee:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016cf8:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016cfe:	6b f9 73             	imul   edi,ecx,0x73
c0016d01:	83 ec 0c             	sub    esp,0xc
c0016d04:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016d07:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016d0a:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016d10:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016d16:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016d1c:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016d23:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016d2d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016d33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016d37:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016d41:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016d48:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016d4f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016d55:	89 ca                	mov    edx,ecx
c0016d57:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016d5b:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016d62:	f7 da                	neg    edx
c0016d64:	c1 e2 15             	shl    edx,0x15
c0016d67:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016d6d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016d73:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016d77:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016d81:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016d87:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016d91:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016d97:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016d9d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016da7:	83 e2 80             	and    edx,0xffffff80
c0016daa:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016db0:	68 00 01 00 00       	push   0x100
c0016db5:	e8 f2 8b ff ff       	call   c000f9ac <malloc>
c0016dba:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016dbd:	58                   	pop    eax
c0016dbe:	5a                   	pop    edx
c0016dbf:	53                   	push   ebx
c0016dc0:	68 4c ea 02 c0       	push   0xc002ea4c
c0016dc5:	e8 62 b1 00 00       	call   c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016dca:	83 c4 10             	add    esp,0x10
c0016dcd:	89 d8                	mov    eax,ebx
c0016dcf:	83 c4 0c             	add    esp,0xc
c0016dd2:	5b                   	pop    ebx
c0016dd3:	5e                   	pop    esi
c0016dd4:	5f                   	pop    edi
c0016dd5:	5d                   	pop    ebp
c0016dd6:	c3                   	ret    
c0016dd7:	90                   	nop

c0016dd8 <Process::createUserThread()>:
c0016dd8:	83 ec 0c             	sub    esp,0xc
c0016ddb:	68 80 00 00 00       	push   0x80
c0016de0:	6a 00                	push   0x0
c0016de2:	68 98 66 01 c0       	push   0xc0016698
c0016de7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016deb:	50                   	push   eax
c0016dec:	e8 a7 fe ff ff       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c0016df1:	83 c4 1c             	add    esp,0x1c
c0016df4:	c3                   	ret    
c0016df5:	8d 76 00             	lea    esi,[esi+0x0]

c0016df8 <setupMultitasking(void (*)())>:
c0016df8:	56                   	push   esi
c0016df9:	53                   	push   ebx
c0016dfa:	83 ec 04             	sub    esp,0x4
c0016dfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e01:	eb 11                	jmp    c0016e14 <setupMultitasking(void (*)())+0x1c>
c0016e03:	90                   	nop
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e0c:	e8 5f b0 00 00       	call   c0021e70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e11:	83 c4 10             	add    esp,0x10
c0016e14:	83 ec 0c             	sub    esp,0xc
c0016e17:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e1c:	e8 2b b0 00 00       	call   c0021e4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e21:	83 c4 10             	add    esp,0x10
c0016e24:	84 c0                	test   al,al
c0016e26:	74 dc                	je     c0016e04 <setupMultitasking(void (*)())+0xc>
c0016e28:	83 ec 0c             	sub    esp,0xc
c0016e2b:	68 c4 07 00 00       	push   0x7c4
c0016e30:	e8 77 8b ff ff       	call   c000f9ac <malloc>
c0016e35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016e3c:	6a 00                	push   0x0
c0016e3e:	68 bf 4e 02 c0       	push   0xc0024ebf
c0016e43:	6a 01                	push   0x1
c0016e45:	50                   	push   eax
c0016e46:	89 c3                	mov    ebx,eax
c0016e48:	e8 0b fc ff ff       	call   c0016a58 <Process::Process(bool, char const*, Process*, char**)>
c0016e4d:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016e53:	83 c4 14             	add    esp,0x14
c0016e56:	89 1d 58 ea 02 c0    	mov    DWORD PTR ds:0xc002ea58,ebx
c0016e5c:	50                   	push   eax
c0016e5d:	e8 4d b6 ff ff       	call   c00124af <setActiveTerminal(VgaText*)>
c0016e62:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016e69:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016e73:	83 c8 01             	or     eax,0x1
c0016e76:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016e7d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016e83:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016e86:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016e90:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016e96:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016ea0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016ea6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016eb0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016eba:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016ec0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016ec6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016ed0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016eda:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016ee1:	e8 c6 8a ff ff       	call   c000f9ac <malloc>
c0016ee6:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016ef0:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016ef7:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016efe:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016f05:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016f0c:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016f12:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016f18:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016f1e:	5a                   	pop    edx
c0016f1f:	59                   	pop    ecx
c0016f20:	68 bb 4e 02 c0       	push   0xc0024ebb
c0016f25:	50                   	push   eax
c0016f26:	e8 25 97 fe ff       	call   c0000650 <strcpy>
c0016f2b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016f32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016f36:	83 c4 14             	add    esp,0x14
c0016f39:	5b                   	pop    ebx
c0016f3a:	5e                   	pop    esi
c0016f3b:	e9 29 93 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016f40 <schedule()>:
c0016f40:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016f46:	85 d2                	test   edx,edx
c0016f48:	74 0e                	je     c0016f58 <schedule()+0x18>
c0016f4a:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016f54:	c3                   	ret    
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	53                   	push   ebx
c0016f59:	83 ec 14             	sub    esp,0x14
c0016f5c:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f61:	e8 e6 ae 00 00       	call   c0021e4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	84 c0                	test   al,al
c0016f6b:	75 3f                	jne    c0016fac <schedule()+0x6c>
c0016f6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016f75:	83 fa 01             	cmp    edx,0x1
c0016f78:	74 3a                	je     c0016fb4 <schedule()+0x74>
c0016f7a:	66 90                	xchg   ax,ax
c0016f7c:	83 ec 0c             	sub    esp,0xc
c0016f7f:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f84:	e8 df ae 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f89:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016f90:	89 c3                	mov    ebx,eax
c0016f92:	e8 d9 ae 00 00       	call   c0021e70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f97:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016f9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fa1:	e8 4e f7 ff ff       	call   c00166f4 <switchToThread(ThreadControlBlock*)>
c0016fa6:	83 c4 10             	add    esp,0x10
c0016fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fac:	83 c4 08             	add    esp,0x8
c0016faf:	5b                   	pop    ebx
c0016fb0:	c3                   	ret    
c0016fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fb4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fbb:	83 ec 08             	sub    esp,0x8
c0016fbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fc3:	50                   	push   eax
c0016fc4:	68 4c ea 02 c0       	push   0xc002ea4c
c0016fc9:	e8 5e af 00 00       	call   c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016fce:	83 c4 10             	add    esp,0x10
c0016fd1:	eb a9                	jmp    c0016f7c <schedule()+0x3c>
c0016fd3:	90                   	nop

c0016fd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016fd4:	83 ec 0c             	sub    esp,0xc
c0016fd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fe0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016fe3:	e8 58 ff ff ff       	call   c0016f40 <schedule()>
c0016fe8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016ff0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016ff5:	85 c0                	test   eax,eax
c0016ff7:	75 03                	jne    c0016ffc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016ff9:	fb                   	sti    
c0016ffa:	66 90                	xchg   ax,ax
c0016ffc:	83 c4 0c             	add    esp,0xc
c0016fff:	c3                   	ret    

c0017000 <blockTask(TaskState)>:
c0017000:	83 ec 0c             	sub    esp,0xc
c0017003:	fa                   	cli    
c0017004:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017009:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001700d:	83 c0 01             	add    eax,0x1
c0017010:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001701a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001701d:	e8 1e ff ff ff       	call   c0016f40 <schedule()>
c0017022:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001702a:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017030:	85 d2                	test   edx,edx
c0017032:	75 04                	jne    c0017038 <blockTask(TaskState)+0x38>
c0017034:	fb                   	sti    
c0017035:	8d 76 00             	lea    esi,[esi+0x0]
c0017038:	83 c4 0c             	add    esp,0xc
c001703b:	c3                   	ret    

c001703c <waitTask(int, int*, int)>:
c001703c:	83 ec 18             	sub    esp,0x18
c001703f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017044:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017048:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001704b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001704f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017054:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017057:	6a 07                	push   0x7
c0017059:	e8 a2 ff ff ff       	call   c0017000 <blockTask(TaskState)>
c001705e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017069:	85 d2                	test   edx,edx
c001706b:	74 0b                	je     c0017078 <waitTask(int, int*, int)+0x3c>
c001706d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017070:	89 02                	mov    DWORD PTR [edx],eax
c0017072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017077:	90                   	nop
c0017078:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001707b:	83 c4 0c             	add    esp,0xc
c001707e:	c3                   	ret    
c001707f:	90                   	nop

c0017080 <milliTenthSleepUntil(unsigned long long)>:
c0017080:	83 ec 0c             	sub    esp,0xc
c0017083:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001708b:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c0017091:	89 d1                	mov    ecx,edx
c0017093:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0017099:	73 05                	jae    c00170a0 <milliTenthSleepUntil(unsigned long long)+0x20>
c001709b:	90                   	nop
c001709c:	83 c4 0c             	add    esp,0xc
c001709f:	c3                   	ret    
c00170a0:	fa                   	cli    
c00170a1:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00170a7:	83 ec 08             	sub    esp,0x8
c00170aa:	83 c1 01             	add    ecx,0x1
c00170ad:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c00170b3:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c00170b9:	83 c1 01             	add    ecx,0x1
c00170bc:	89 0d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ecx
c00170c2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00170c8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00170cb:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00170ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170d3:	50                   	push   eax
c00170d4:	68 40 ea 02 c0       	push   0xc002ea40
c00170d9:	e8 4e ae 00 00       	call   c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00170de:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00170e5:	e8 16 ff ff ff       	call   c0017000 <blockTask(TaskState)>
c00170ea:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00170ef:	83 c4 10             	add    esp,0x10
c00170f2:	83 e8 01             	sub    eax,0x1
c00170f5:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00170fa:	85 c0                	test   eax,eax
c00170fc:	75 0a                	jne    c0017108 <milliTenthSleepUntil(unsigned long long)+0x88>
c00170fe:	8b 15 28 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea28
c0017104:	85 d2                	test   edx,edx
c0017106:	75 18                	jne    c0017120 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0017108:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017110:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017115:	85 c0                	test   eax,eax
c0017117:	75 83                	jne    c001709c <milliTenthSleepUntil(unsigned long long)+0x1c>
c0017119:	fb                   	sti    
c001711a:	83 c4 0c             	add    esp,0xc
c001711d:	c3                   	ret    
c001711e:	66 90                	xchg   ax,ax
c0017120:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001712a:	e8 11 fe ff ff       	call   c0016f40 <schedule()>
c001712f:	eb d7                	jmp    c0017108 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017131:	8d 76 00             	lea    esi,[esi+0x0]

c0017134 <milliTenthSleep(unsigned long long)>:
c0017134:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0017139:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001713d:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0017143:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017147:	e9 34 ff ff ff       	jmp    c0017080 <milliTenthSleepUntil(unsigned long long)>

c001714c <sleep(unsigned long long)>:
c001714c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017154:	b8 10 27 00 00       	mov    eax,0x2710
c0017159:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001715d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017161:	01 ca                	add    edx,ecx
c0017163:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017167:	eb cb                	jmp    c0017134 <milliTenthSleep(unsigned long long)>
c0017169:	8d 76 00             	lea    esi,[esi+0x0]

c001716c <sleep(unsigned int)>:
c001716c:	83 ec 14             	sub    esp,0x14
c001716f:	b8 10 27 00 00       	mov    eax,0x2710
c0017174:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017178:	52                   	push   edx
c0017179:	50                   	push   eax
c001717a:	e8 b5 ff ff ff       	call   c0017134 <milliTenthSleep(unsigned long long)>
c001717f:	83 c4 1c             	add    esp,0x1c
c0017182:	c3                   	ret    
c0017183:	90                   	nop

c0017184 <milliTenthSleep(unsigned int)>:
c0017184:	83 ec 14             	sub    esp,0x14
c0017187:	31 d2                	xor    edx,edx
c0017189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001718d:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c0017193:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0017199:	52                   	push   edx
c001719a:	50                   	push   eax
c001719b:	e8 e0 fe ff ff       	call   c0017080 <milliTenthSleepUntil(unsigned long long)>
c00171a0:	83 c4 1c             	add    esp,0x1c
c00171a3:	c3                   	ret    

c00171a4 <taskReturned>:
c00171a4:	83 ec 18             	sub    esp,0x18
c00171a7:	68 48 4f 02 c0       	push   0xc0024f48
c00171ac:	e8 51 8c ff ff       	call   c000fe02 <KePanic(char const*)>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	83 ec 0c             	sub    esp,0xc
c00171b7:	6a 02                	push   0x2
c00171b9:	e8 42 fe ff ff       	call   c0017000 <blockTask(TaskState)>
c00171be:	fa                   	cli    
c00171bf:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00171c4:	83 c0 01             	add    eax,0x1
c00171c7:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00171cc:	e8 6f fd ff ff       	call   c0016f40 <schedule()>
c00171d1:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00171d9:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	85 d2                	test   edx,edx
c00171e4:	75 ce                	jne    c00171b4 <taskReturned+0x10>
c00171e6:	fb                   	sti    
c00171e7:	eb cb                	jmp    c00171b4 <taskReturned+0x10>
c00171e9:	8d 76 00             	lea    esi,[esi+0x0]

c00171ec <KeProcessFromPID(int)>:
c00171ec:	57                   	push   edi
c00171ed:	56                   	push   esi
c00171ee:	53                   	push   ebx
c00171ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00171f3:	fa                   	cli    
c00171f4:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00171fa:	83 ec 0c             	sub    esp,0xc
c00171fd:	68 4c ea 02 c0       	push   0xc002ea4c
c0017202:	83 c1 01             	add    ecx,0x1
c0017205:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c001720b:	e8 58 ac 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017210:	83 c4 10             	add    esp,0x10
c0017213:	89 c7                	mov    edi,eax
c0017215:	eb 15                	jmp    c001722c <KeProcessFromPID(int)+0x40>
c0017217:	90                   	nop
c0017218:	83 ec 0c             	sub    esp,0xc
c001721b:	68 4c ea 02 c0       	push   0xc002ea4c
c0017220:	e8 43 ac 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017225:	83 c4 10             	add    esp,0x10
c0017228:	39 f8                	cmp    eax,edi
c001722a:	74 50                	je     c001727c <KeProcessFromPID(int)+0x90>
c001722c:	83 ec 0c             	sub    esp,0xc
c001722f:	68 4c ea 02 c0       	push   0xc002ea4c
c0017234:	e8 2f ac 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017239:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017240:	89 c3                	mov    ebx,eax
c0017242:	e8 29 ac 00 00       	call   c0021e70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017247:	58                   	pop    eax
c0017248:	5a                   	pop    edx
c0017249:	53                   	push   ebx
c001724a:	68 4c ea 02 c0       	push   0xc002ea4c
c001724f:	e8 d8 ac 00 00       	call   c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017254:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017257:	83 c4 10             	add    esp,0x10
c001725a:	39 30                	cmp    DWORD PTR [eax],esi
c001725c:	75 ba                	jne    c0017218 <KeProcessFromPID(int)+0x2c>
c001725e:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017266:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001726c:	85 c9                	test   ecx,ecx
c001726e:	74 08                	je     c0017278 <KeProcessFromPID(int)+0x8c>
c0017270:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017273:	90                   	nop
c0017274:	5b                   	pop    ebx
c0017275:	5e                   	pop    esi
c0017276:	5f                   	pop    edi
c0017277:	c3                   	ret    
c0017278:	fb                   	sti    
c0017279:	eb f5                	jmp    c0017270 <KeProcessFromPID(int)+0x84>
c001727b:	90                   	nop
c001727c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017284:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001728a:	31 c0                	xor    eax,eax
c001728c:	85 d2                	test   edx,edx
c001728e:	75 e4                	jne    c0017274 <KeProcessFromPID(int)+0x88>
c0017290:	fb                   	sti    
c0017291:	5b                   	pop    ebx
c0017292:	5e                   	pop    esi
c0017293:	5f                   	pop    edi
c0017294:	c3                   	ret    
c0017295:	8d 76 00             	lea    esi,[esi+0x0]

c0017298 <unblockTask(ThreadControlBlock*)>:
c0017298:	53                   	push   ebx
c0017299:	83 ec 08             	sub    esp,0x8
c001729c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172a0:	fa                   	cli    
c00172a1:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00172a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00172aa:	83 c2 01             	add    edx,0x1
c00172ad:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c00172b3:	85 c0                	test   eax,eax
c00172b5:	74 6d                	je     c0017324 <unblockTask(ThreadControlBlock*)+0x8c>
c00172b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00172ba:	83 f8 01             	cmp    eax,0x1
c00172bd:	74 39                	je     c00172f8 <unblockTask(ThreadControlBlock*)+0x60>
c00172bf:	83 ec 0c             	sub    esp,0xc
c00172c2:	68 4c ea 02 c0       	push   0xc002ea4c
c00172c7:	e8 9c ab 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172cc:	83 c4 10             	add    esp,0x10
c00172cf:	85 c0                	test   eax,eax
c00172d1:	75 1d                	jne    c00172f0 <unblockTask(ThreadControlBlock*)+0x58>
c00172d3:	eb 63                	jmp    c0017338 <unblockTask(ThreadControlBlock*)+0xa0>
c00172d5:	8d 76 00             	lea    esi,[esi+0x0]
c00172d8:	83 ec 08             	sub    esp,0x8
c00172db:	50                   	push   eax
c00172dc:	68 4c ea 02 c0       	push   0xc002ea4c
c00172e1:	e8 8e b0 00 00       	call   c0022374 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00172e6:	83 c4 10             	add    esp,0x10
c00172e9:	85 c0                	test   eax,eax
c00172eb:	74 4b                	je     c0017338 <unblockTask(ThreadControlBlock*)+0xa0>
c00172ed:	8d 76 00             	lea    esi,[esi+0x0]
c00172f0:	39 c3                	cmp    ebx,eax
c00172f2:	75 e4                	jne    c00172d8 <unblockTask(ThreadControlBlock*)+0x40>
c00172f4:	eb 12                	jmp    c0017308 <unblockTask(ThreadControlBlock*)+0x70>
c00172f6:	66 90                	xchg   ax,ax
c00172f8:	83 ec 0c             	sub    esp,0xc
c00172fb:	68 dd 4e 02 c0       	push   0xc0024edd
c0017300:	e8 61 fc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017305:	83 c4 10             	add    esp,0x10
c0017308:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017310:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017315:	85 c0                	test   eax,eax
c0017317:	75 03                	jne    c001731c <unblockTask(ThreadControlBlock*)+0x84>
c0017319:	fb                   	sti    
c001731a:	66 90                	xchg   ax,ax
c001731c:	83 c4 08             	add    esp,0x8
c001731f:	5b                   	pop    ebx
c0017320:	c3                   	ret    
c0017321:	8d 76 00             	lea    esi,[esi+0x0]
c0017324:	83 ec 0c             	sub    esp,0xc
c0017327:	68 c6 4e 02 c0       	push   0xc0024ec6
c001732c:	e8 35 fc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017331:	83 c4 10             	add    esp,0x10
c0017334:	eb d2                	jmp    c0017308 <unblockTask(ThreadControlBlock*)+0x70>
c0017336:	66 90                	xchg   ax,ax
c0017338:	83 ec 08             	sub    esp,0x8
c001733b:	53                   	push   ebx
c001733c:	68 4c ea 02 c0       	push   0xc002ea4c
c0017341:	e8 e6 ab 00 00       	call   c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	eb bd                	jmp    c0017308 <unblockTask(ThreadControlBlock*)+0x70>
c001734b:	90                   	nop

c001734c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001734c:	55                   	push   ebp
c001734d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017352:	57                   	push   edi
c0017353:	56                   	push   esi
c0017354:	53                   	push   ebx
c0017355:	83 ec 1c             	sub    esp,0x1c
c0017358:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001735c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001735f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017362:	d3 c0                	rol    eax,cl
c0017364:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001736b:	21 c8                	and    eax,ecx
c001736d:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017374:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017377:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c001737f:	0f 85 af 01 00 00    	jne    c0017534 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017385:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001738b:	85 ed                	test   ebp,ebp
c001738d:	7e 29                	jle    c00173b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c001738f:	31 f6                	xor    esi,esi
c0017391:	8d 76 00             	lea    esi,[esi+0x0]
c0017394:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c001739b:	83 ec 0c             	sub    esp,0xc
c001739e:	83 c6 01             	add    esi,0x1
c00173a1:	57                   	push   edi
c00173a2:	e8 15 86 ff ff       	call   c000f9bc <free>
c00173a7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173aa:	83 c4 10             	add    esp,0x10
c00173ad:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c00173b3:	7f df                	jg     c0017394 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c00173b5:	8d 76 00             	lea    esi,[esi+0x0]
c00173b8:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00173c2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00173c5:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00173cb:	89 f7                	mov    edi,esi
c00173cd:	85 ed                	test   ebp,ebp
c00173cf:	74 1b                	je     c00173ec <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00173d1:	83 ec 0c             	sub    esp,0xc
c00173d4:	55                   	push   ebp
c00173d5:	e8 52 71 ff ff       	call   c000e52c <EnvVarContainer::~EnvVarContainer()>
c00173da:	59                   	pop    ecx
c00173db:	5e                   	pop    esi
c00173dc:	6a 0c                	push   0xc
c00173de:	55                   	push   ebp
c00173df:	e8 11 5f ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00173e4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00173e7:	83 c4 10             	add    esp,0x10
c00173ea:	89 f7                	mov    edi,esi
c00173ec:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00173f2:	85 c0                	test   eax,eax
c00173f4:	0f 84 ae 00 00 00    	je     c00174a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00173fa:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00173fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017401:	31 c9                	xor    ecx,ecx
c0017403:	eb 17                	jmp    c001741c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017405:	8d 76 00             	lea    esi,[esi+0x0]
c0017408:	83 c1 01             	add    ecx,0x1
c001740b:	83 f9 10             	cmp    ecx,0x10
c001740e:	0f 84 94 00 00 00    	je     c00174a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0017414:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001741a:	66 90                	xchg   ax,ax
c001741c:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017423:	d3 fa                	sar    edx,cl
c0017425:	80 e2 01             	and    dl,0x1
c0017428:	74 de                	je     c0017408 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001742a:	6b d1 73             	imul   edx,ecx,0x73
c001742d:	01 d0                	add    eax,edx
c001742f:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017435:	83 fd 07             	cmp    ebp,0x7
c0017438:	75 ce                	jne    c0017408 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001743a:	05 40 02 00 00       	add    eax,0x240
c001743f:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017442:	83 fd ff             	cmp    ebp,0xffffffff
c0017445:	0f 8c f1 00 00 00    	jl     c001753c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001744b:	0f 84 af 01 00 00    	je     c0017600 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0017451:	85 ed                	test   ebp,ebp
c0017453:	0f 84 93 01 00 00    	je     c00175ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c0017459:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001745b:	75 ab                	jne    c0017408 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001745d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017461:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017467:	01 d0                	add    eax,edx
c0017469:	8d 76 00             	lea    esi,[esi+0x0]
c001746c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017470:	83 ec 0c             	sub    esp,0xc
c0017473:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017479:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001747c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017482:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017489:	50                   	push   eax
c001748a:	e8 09 fe ff ff       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c001748f:	83 c4 10             	add    esp,0x10
c0017492:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017495:	89 f7                	mov    edi,esi
c0017497:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001749b:	83 c1 01             	add    ecx,0x1
c001749e:	83 f9 10             	cmp    ecx,0x10
c00174a1:	0f 85 6d ff ff ff    	jne    c0017414 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00174a7:	90                   	nop
c00174a8:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c00174ae:	85 c0                	test   eax,eax
c00174b0:	74 62                	je     c0017514 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00174b2:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c00174b8:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00174be:	74 54                	je     c0017514 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00174c0:	83 ec 0c             	sub    esp,0xc
c00174c3:	68 4c ea 02 c0       	push   0xc002ea4c
c00174c8:	e8 9b a9 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174cd:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00174d4:	89 c7                	mov    edi,eax
c00174d6:	e8 71 a9 00 00       	call   c0021e4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00174db:	83 c4 10             	add    esp,0x10
c00174de:	84 c0                	test   al,al
c00174e0:	0f 84 ce 00 00 00    	je     c00175b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c00174e6:	66 90                	xchg   ax,ax
c00174e8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174eb:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00174f1:	85 d2                	test   edx,edx
c00174f3:	74 0f                	je     c0017504 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00174f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00174f7:	83 ec 0c             	sub    esp,0xc
c00174fa:	52                   	push   edx
c00174fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174fe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017501:	83 c4 10             	add    esp,0x10
c0017504:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c001750e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017511:	8d 76 00             	lea    esi,[esi+0x0]
c0017514:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c001751a:	85 db                	test   ebx,ebx
c001751c:	74 16                	je     c0017534 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001751e:	83 ec 0c             	sub    esp,0xc
c0017521:	53                   	push   ebx
c0017522:	e8 41 c4 ff ff       	call   c0013968 <VAS::~VAS()>
c0017527:	58                   	pop    eax
c0017528:	5a                   	pop    edx
c0017529:	6a 14                	push   0x14
c001752b:	53                   	push   ebx
c001752c:	e8 c4 5d ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0017531:	83 c4 10             	add    esp,0x10
c0017534:	83 c4 1c             	add    esp,0x1c
c0017537:	5b                   	pop    ebx
c0017538:	5e                   	pop    esi
c0017539:	5f                   	pop    edi
c001753a:	5d                   	pop    ebp
c001753b:	c3                   	ret    
c001753c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017540:	83 ec 0c             	sub    esp,0xc
c0017543:	68 7c 4f 02 c0       	push   0xc0024f7c
c0017548:	e8 b5 88 ff ff       	call   c000fe02 <KePanic(char const*)>
c001754d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017550:	83 c4 10             	add    esp,0x10
c0017553:	89 f7                	mov    edi,esi
c0017555:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017559:	e9 aa fe ff ff       	jmp    c0017408 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001755e:	66 90                	xchg   ax,ax
c0017560:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017566:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c001756c:	75 1e                	jne    c001758c <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c001756e:	83 ec 0c             	sub    esp,0xc
c0017571:	68 e4 4f 02 c0       	push   0xc0024fe4
c0017576:	e8 eb f9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001757b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017582:	e8 79 fa ff ff       	call   c0017000 <blockTask(TaskState)>
c0017587:	83 c4 10             	add    esp,0x10
c001758a:	66 90                	xchg   ax,ax
c001758c:	83 ec 08             	sub    esp,0x8
c001758f:	56                   	push   esi
c0017590:	68 4c ea 02 c0       	push   0xc002ea4c
c0017595:	e8 92 a9 00 00       	call   c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001759a:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00175a1:	e8 c2 a8 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175a6:	83 c4 10             	add    esp,0x10
c00175a9:	39 f8                	cmp    eax,edi
c00175ab:	0f 84 37 ff ff ff    	je     c00174e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c00175b1:	8d 76 00             	lea    esi,[esi+0x0]
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	68 4c ea 02 c0       	push   0xc002ea4c
c00175bc:	e8 a7 a8 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175c1:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00175c8:	89 c6                	mov    esi,eax
c00175ca:	e8 a1 a8 00 00       	call   c0021e70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	39 f3                	cmp    ebx,esi
c00175d4:	74 b6                	je     c001758c <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00175d6:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00175d9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00175dc:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00175e2:	75 a8                	jne    c001758c <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00175e4:	e9 77 ff ff ff       	jmp    c0017560 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c00175e9:	8d 76 00             	lea    esi,[esi+0x0]
c00175ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00175f0:	83 ec 0c             	sub    esp,0xc
c00175f3:	68 b0 4f 02 c0       	push   0xc0024fb0
c00175f8:	e9 4b ff ff ff       	jmp    c0017548 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c00175fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017600:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017604:	8b 36                	mov    esi,DWORD PTR [esi]
c0017606:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017609:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001760c:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017612:	01 d7                	add    edi,edx
c0017614:	89 f8                	mov    eax,edi
c0017616:	e9 51 fe ff ff       	jmp    c001746c <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c001761b:	90                   	nop

c001761c <cleanerTaskFunction(void*)>:
c001761c:	53                   	push   ebx
c001761d:	83 ec 08             	sub    esp,0x8
c0017620:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017628:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001762d:	85 c0                	test   eax,eax
c001762f:	75 03                	jne    c0017634 <cleanerTaskFunction(void*)+0x18>
c0017631:	fb                   	sti    
c0017632:	66 90                	xchg   ax,ax
c0017634:	fa                   	cli    
c0017635:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001763a:	83 c0 01             	add    eax,0x1
c001763d:	80 3d 14 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea14,0x0
c0017644:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017649:	0f 85 c9 00 00 00    	jne    c0017718 <cleanerTaskFunction(void*)+0xfc>
c001764f:	83 ec 0c             	sub    esp,0xc
c0017652:	6a 02                	push   0x2
c0017654:	e8 7b f9 ff ff       	call   c0016fd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017659:	83 c4 10             	add    esp,0x10
c001765c:	c6 05 14 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea14,0x0
c0017663:	fa                   	cli    
c0017664:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001766a:	8b 1d 2c ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea2c
c0017670:	83 c1 01             	add    ecx,0x1
c0017673:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0017679:	83 c3 01             	add    ebx,0x1
c001767c:	89 1d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ebx
c0017682:	fa                   	cli    
c0017683:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017688:	83 c0 01             	add    eax,0x1
c001768b:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017690:	eb 2a                	jmp    c00176bc <cleanerTaskFunction(void*)+0xa0>
c0017692:	66 90                	xchg   ax,ax
c0017694:	83 ec 0c             	sub    esp,0xc
c0017697:	68 34 ea 02 c0       	push   0xc002ea34
c001769c:	e8 c7 a7 00 00       	call   c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00176a1:	c7 04 24 34 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea34
c00176a8:	89 c3                	mov    ebx,eax
c00176aa:	e8 c1 a7 00 00       	call   c0021e70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00176af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176b2:	e8 95 fc ff ff       	call   c001734c <cleanupTerminatedTask(ThreadControlBlock*)>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	66 90                	xchg   ax,ax
c00176bc:	83 ec 0c             	sub    esp,0xc
c00176bf:	68 34 ea 02 c0       	push   0xc002ea34
c00176c4:	e8 83 a7 00 00       	call   c0021e4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00176c9:	83 c4 10             	add    esp,0x10
c00176cc:	84 c0                	test   al,al
c00176ce:	74 c4                	je     c0017694 <cleanerTaskFunction(void*)+0x78>
c00176d0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00176d8:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00176de:	85 d2                	test   edx,edx
c00176e0:	75 02                	jne    c00176e4 <cleanerTaskFunction(void*)+0xc8>
c00176e2:	fb                   	sti    
c00176e3:	90                   	nop
c00176e4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00176e9:	83 e8 01             	sub    eax,0x1
c00176ec:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00176f1:	0f 85 29 ff ff ff    	jne    c0017620 <cleanerTaskFunction(void*)+0x4>
c00176f7:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c00176fc:	85 c0                	test   eax,eax
c00176fe:	0f 84 1c ff ff ff    	je     c0017620 <cleanerTaskFunction(void*)+0x4>
c0017704:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001770e:	e8 2d f8 ff ff       	call   c0016f40 <schedule()>
c0017713:	e9 08 ff ff ff       	jmp    c0017620 <cleanerTaskFunction(void*)+0x4>
c0017718:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017720:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017725:	85 c0                	test   eax,eax
c0017727:	0f 85 2f ff ff ff    	jne    c001765c <cleanerTaskFunction(void*)+0x40>
c001772d:	fb                   	sti    
c001772e:	e9 29 ff ff ff       	jmp    c001765c <cleanerTaskFunction(void*)+0x40>
c0017733:	90                   	nop

c0017734 <KeTerminateCurrentThread(int)>:
c0017734:	83 ec 14             	sub    esp,0x14
c0017737:	fa                   	cli    
c0017738:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001773d:	83 c0 01             	add    eax,0x1
c0017740:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017745:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001774a:	83 c0 01             	add    eax,0x1
c001774d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017752:	fa                   	cli    
c0017753:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017758:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001775c:	83 c0 01             	add    eax,0x1
c001775f:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017769:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001776c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017771:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017774:	50                   	push   eax
c0017775:	68 34 ea 02 c0       	push   0xc002ea34
c001777a:	e8 ad a7 00 00       	call   c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001777f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017784:	83 c4 10             	add    esp,0x10
c0017787:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001778e:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c0017793:	85 c0                	test   eax,eax
c0017795:	0f 84 81 00 00 00    	je     c001781c <KeTerminateCurrentThread(int)+0xe8>
c001779b:	c6 05 14 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea14,0x1
c00177a2:	83 ec 0c             	sub    esp,0xc
c00177a5:	50                   	push   eax
c00177a6:	e8 ed fa ff ff       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	66 90                	xchg   ax,ax
c00177b0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00177b8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00177bd:	85 c0                	test   eax,eax
c00177bf:	75 03                	jne    c00177c4 <KeTerminateCurrentThread(int)+0x90>
c00177c1:	fb                   	sti    
c00177c2:	66 90                	xchg   ax,ax
c00177c4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00177c9:	83 e8 01             	sub    eax,0x1
c00177cc:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00177d1:	75 09                	jne    c00177dc <KeTerminateCurrentThread(int)+0xa8>
c00177d3:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c00177da:	75 54                	jne    c0017830 <KeTerminateCurrentThread(int)+0xfc>
c00177dc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00177e4:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00177ea:	85 c9                	test   ecx,ecx
c00177ec:	75 06                	jne    c00177f4 <KeTerminateCurrentThread(int)+0xc0>
c00177ee:	66 90                	xchg   ax,ax
c00177f0:	fb                   	sti    
c00177f1:	8d 76 00             	lea    esi,[esi+0x0]
c00177f4:	fa                   	cli    
c00177f5:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00177fa:	83 c0 01             	add    eax,0x1
c00177fd:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017802:	e8 39 f7 ff ff       	call   c0016f40 <schedule()>
c0017807:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001780f:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017815:	85 d2                	test   edx,edx
c0017817:	75 db                	jne    c00177f4 <KeTerminateCurrentThread(int)+0xc0>
c0017819:	eb d5                	jmp    c00177f0 <KeTerminateCurrentThread(int)+0xbc>
c001781b:	90                   	nop
c001781c:	83 ec 0c             	sub    esp,0xc
c001781f:	68 f4 4e 02 c0       	push   0xc0024ef4
c0017824:	e8 3d f7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017829:	83 c4 10             	add    esp,0x10
c001782c:	eb 82                	jmp    c00177b0 <KeTerminateCurrentThread(int)+0x7c>
c001782e:	66 90                	xchg   ax,ax
c0017830:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001783a:	e8 01 f7 ff ff       	call   c0016f40 <schedule()>
c001783f:	eb 9b                	jmp    c00177dc <KeTerminateCurrentThread(int)+0xa8>
c0017841:	8d 76 00             	lea    esi,[esi+0x0]

c0017844 <__static_initialization_and_destruction_0(int, int)>:
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001784c:	0f 85 8e 00 00 00    	jne    c00178e0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017852:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001785a:	0f 85 80 00 00 00    	jne    c00178e0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017860:	83 ec 0c             	sub    esp,0xc
c0017863:	68 4c ea 02 c0       	push   0xc002ea4c
c0017868:	e8 5f ab 00 00       	call   c00223cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001786d:	83 c4 10             	add    esp,0x10
c0017870:	83 ec 04             	sub    esp,0x4
c0017873:	68 fc 62 02 c0       	push   0xc00262fc
c0017878:	68 4c ea 02 c0       	push   0xc002ea4c
c001787d:	68 7c 23 02 c0       	push   0xc002237c
c0017882:	e8 1e 5a ff ff       	call   c000d2a5 <__cxa_atexit>
c0017887:	83 c4 10             	add    esp,0x10
c001788a:	83 ec 0c             	sub    esp,0xc
c001788d:	68 40 ea 02 c0       	push   0xc002ea40
c0017892:	e8 35 ab 00 00       	call   c00223cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017897:	83 c4 10             	add    esp,0x10
c001789a:	83 ec 04             	sub    esp,0x4
c001789d:	68 fc 62 02 c0       	push   0xc00262fc
c00178a2:	68 40 ea 02 c0       	push   0xc002ea40
c00178a7:	68 7c 23 02 c0       	push   0xc002237c
c00178ac:	e8 f4 59 ff ff       	call   c000d2a5 <__cxa_atexit>
c00178b1:	83 c4 10             	add    esp,0x10
c00178b4:	83 ec 0c             	sub    esp,0xc
c00178b7:	68 34 ea 02 c0       	push   0xc002ea34
c00178bc:	e8 0b ab 00 00       	call   c00223cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	83 ec 04             	sub    esp,0x4
c00178c7:	68 fc 62 02 c0       	push   0xc00262fc
c00178cc:	68 34 ea 02 c0       	push   0xc002ea34
c00178d1:	68 7c 23 02 c0       	push   0xc002237c
c00178d6:	e8 ca 59 ff ff       	call   c000d2a5 <__cxa_atexit>
c00178db:	83 c4 10             	add    esp,0x10
c00178de:	66 90                	xchg   ax,ax
c00178e0:	90                   	nop
c00178e1:	83 c4 0c             	add    esp,0xc
c00178e4:	c3                   	ret    
c00178e5:	8d 76 00             	lea    esi,[esi+0x0]

c00178e8 <_GLOBAL__sub_I_keNextPID>:
c00178e8:	83 ec 0c             	sub    esp,0xc
c00178eb:	83 ec 08             	sub    esp,0x8
c00178ee:	68 ff ff 00 00       	push   0xffff
c00178f3:	6a 01                	push   0x1
c00178f5:	e8 4a ff ff ff       	call   c0017844 <__static_initialization_and_destruction_0(int, int)>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	83 c4 0c             	add    esp,0xc
c0017900:	c3                   	ret    

c0017901 <Vm::inbv(unsigned short)>:
c0017901:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017905:	66 81 fa fe fe       	cmp    dx,0xfefe
c001790a:	74 02                	je     c001790e <Vm::inbv(unsigned short)+0xd>
c001790c:	ec                   	in     al,dx
c001790d:	c3                   	ret    
c001790e:	a0 90 ea 02 c0       	mov    al,ds:0xc002ea90
c0017913:	c3                   	ret    

c0017914 <Vm::outbv(unsigned short, unsigned char)>:
c0017914:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001791c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017921:	74 02                	je     c0017925 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017923:	ee                   	out    dx,al
c0017924:	c3                   	ret    
c0017925:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c001792b:	88 81 a0 ea 02 c0    	mov    BYTE PTR [ecx-0x3ffd1560],al
c0017931:	8d 51 01             	lea    edx,[ecx+0x1]
c0017934:	b8 1f 00 00 00       	mov    eax,0x1f
c0017939:	83 fa 20             	cmp    edx,0x20
c001793c:	0f 44 d0             	cmove  edx,eax
c001793f:	89 15 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edx
c0017945:	c3                   	ret    

c0017946 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017946:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001794b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017950:	c1 e0 04             	shl    eax,0x4
c0017953:	01 d0                	add    eax,edx
c0017955:	c3                   	ret    

c0017956 <Vm::getSegment(unsigned int)>:
c0017956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001795a:	c1 e8 10             	shr    eax,0x10
c001795d:	c3                   	ret    

c001795e <Vm::getOffset(unsigned int)>:
c001795e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017962:	c3                   	ret    

c0017963 <Vm::mainloop2()>:
c0017963:	83 ec 18             	sub    esp,0x18
c0017966:	fa                   	cli    
c0017967:	6a 02                	push   0x2
c0017969:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001796e:	c6 05 89 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea89,0x1
c0017975:	83 c0 01             	add    eax,0x1
c0017978:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001797d:	e8 52 f6 ff ff       	call   c0016fd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017982:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017987:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001798b:	52                   	push   edx
c001798c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017990:	52                   	push   edx
c0017991:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017995:	52                   	push   edx
c0017996:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001799a:	50                   	push   eax
c001799b:	e8 6f 88 fe ff       	call   c000020f <goToVM86>
c00179a0:	83 c4 2c             	add    esp,0x2c
c00179a3:	c3                   	ret    

c00179a4 <Vm::mainVm8086Loop(void*)>:
c00179a4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00179ac:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00179b1:	85 c0                	test   eax,eax
c00179b3:	75 01                	jne    c00179b6 <Vm::mainVm8086Loop(void*)+0x12>
c00179b5:	fb                   	sti    
c00179b6:	eb ab                	jmp    c0017963 <Vm::mainloop2()>

c00179b8 <Vm::mainloop3(unsigned long)>:
c00179b8:	83 ec 18             	sub    esp,0x18
c00179bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179bf:	fa                   	cli    
c00179c0:	6a 02                	push   0x2
c00179c2:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00179c8:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c00179cf:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c00179d4:	83 c2 01             	add    edx,0x1
c00179d7:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c00179dd:	e8 f2 f5 ff ff       	call   c0016fd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00179e2:	83 c4 1c             	add    esp,0x1c
c00179e5:	e9 79 ff ff ff       	jmp    c0017963 <Vm::mainloop2()>

c00179ea <Vm::initialise8086()>:
c00179ea:	83 ec 0c             	sub    esp,0xc
c00179ed:	68 80 00 00 00       	push   0x80
c00179f2:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00179f7:	6a 00                	push   0x0
c00179f9:	68 a4 79 01 c0       	push   0xc00179a4
c00179fe:	50                   	push   eax
c00179ff:	e8 94 f2 ff ff       	call   c0016c98 <Process::createThread(void (*)(void*), void*, int)>
c0017a04:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017a0b:	68 10 01 00 00       	push   0x110
c0017a10:	6a 00                	push   0x0
c0017a12:	6a 00                	push   0x0
c0017a14:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c0017a19:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017a1e:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017a24:	52                   	push   edx
c0017a25:	e8 a0 c2 ff ff       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a2a:	83 c4 2c             	add    esp,0x2c
c0017a2d:	c3                   	ret    

c0017a2e <Vm::resetConventionalMemory8086()>:
c0017a2e:	c3                   	ret    

c0017a2f <Vm::finish8086()>:
c0017a2f:	53                   	push   ebx
c0017a30:	83 ec 08             	sub    esp,0x8
c0017a33:	eb 17                	jmp    c0017a4c <Vm::finish8086()+0x1d>
c0017a35:	e8 06 f5 ff ff       	call   c0016f40 <schedule()>
c0017a3a:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017a42:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0017a48:	85 c9                	test   ecx,ecx
c0017a4a:	74 51                	je     c0017a9d <Vm::finish8086()+0x6e>
c0017a4c:	fa                   	cli    
c0017a4d:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c0017a53:	83 c3 01             	add    ebx,0x1
c0017a56:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c0017a5d:	89 1d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ebx
c0017a63:	74 d0                	je     c0017a35 <Vm::finish8086()+0x6>
c0017a65:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017a6a:	83 ec 0c             	sub    esp,0xc
c0017a6d:	c6 05 88 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea88,0x0
c0017a74:	8b 1d 84 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea84
c0017a7a:	50                   	push   eax
c0017a7b:	e8 18 f8 ff ff       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c0017a80:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017a88:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	85 d2                	test   edx,edx
c0017a93:	75 01                	jne    c0017a96 <Vm::finish8086()+0x67>
c0017a95:	fb                   	sti    
c0017a96:	83 c4 08             	add    esp,0x8
c0017a99:	89 d8                	mov    eax,ebx
c0017a9b:	5b                   	pop    ebx
c0017a9c:	c3                   	ret    
c0017a9d:	fb                   	sti    
c0017a9e:	eb ac                	jmp    c0017a4c <Vm::finish8086()+0x1d>

c0017aa0 <Vm::getOutput8086(unsigned char*)>:
c0017aa0:	57                   	push   edi
c0017aa1:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017aa7:	56                   	push   esi
c0017aa8:	be a0 ea 02 c0       	mov    esi,0xc002eaa0
c0017aad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017ab1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ab3:	5e                   	pop    esi
c0017ab4:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c0017ab9:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017ac3:	5f                   	pop    edi
c0017ac4:	c3                   	ret    

c0017ac5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017ac5:	55                   	push   ebp
c0017ac6:	57                   	push   edi
c0017ac7:	56                   	push   esi
c0017ac8:	53                   	push   ebx
c0017ac9:	83 ec 2c             	sub    esp,0x2c
c0017acc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017ad0:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017ad7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017adb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017adf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ae3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017ae7:	75 20                	jne    c0017b09 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0017ae9:	e9 c0 00 00 00       	jmp    c0017bae <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe9>
c0017aee:	e8 4d f4 ff ff       	call   c0016f40 <schedule()>
c0017af3:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017afb:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c0017b01:	85 ff                	test   edi,edi
c0017b03:	0f 84 9f 00 00 00    	je     c0017ba8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe3>
c0017b09:	fa                   	cli    
c0017b0a:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017b0f:	83 c0 01             	add    eax,0x1
c0017b12:	80 3d 89 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea89,0x0
c0017b19:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017b1e:	74 ce                	je     c0017aee <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x29>
c0017b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b24:	83 ec 04             	sub    esp,0x4
c0017b27:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017b31:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017b36:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017b3a:	0f b7 f6             	movzx  esi,si
c0017b3d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017b41:	0f b7 db             	movzx  ebx,bx
c0017b44:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017b48:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017b4c:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017b50:	6a 20                	push   0x20
c0017b52:	6a 00                	push   0x0
c0017b54:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017b59:	e8 92 89 fe ff       	call   c00004f0 <memset>
c0017b5e:	5a                   	pop    edx
c0017b5f:	59                   	pop    ecx
c0017b60:	56                   	push   esi
c0017b61:	53                   	push   ebx
c0017b62:	e8 df fd ff ff       	call   c0017946 <Vm::realToLinear(unsigned short, unsigned short)>
c0017b67:	83 c4 10             	add    esp,0x10
c0017b6a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017b6e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017b72:	89 c7                	mov    edi,eax
c0017b74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017b76:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017b7d:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017b85:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c0017b8b:	85 db                	test   ebx,ebx
c0017b8d:	75 01                	jne    c0017b90 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xcb>
c0017b8f:	fb                   	sti    
c0017b90:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017b95:	83 ec 0c             	sub    esp,0xc
c0017b98:	50                   	push   eax
c0017b99:	e8 fa f6 ff ff       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c0017b9e:	83 c4 3c             	add    esp,0x3c
c0017ba1:	b0 01                	mov    al,0x1
c0017ba3:	5b                   	pop    ebx
c0017ba4:	5e                   	pop    esi
c0017ba5:	5f                   	pop    edi
c0017ba6:	5d                   	pop    ebp
c0017ba7:	c3                   	ret    
c0017ba8:	fb                   	sti    
c0017ba9:	e9 5b ff ff ff       	jmp    c0017b09 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0017bae:	83 ec 0c             	sub    esp,0xc
c0017bb1:	68 14 01 00 00       	push   0x114
c0017bb6:	e8 f1 7d ff ff       	call   c000f9ac <malloc>
c0017bbb:	83 c4 0c             	add    esp,0xc
c0017bbe:	89 c7                	mov    edi,eax
c0017bc0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017bc5:	50                   	push   eax
c0017bc6:	68 0c 50 02 c0       	push   0xc002500c
c0017bcb:	57                   	push   edi
c0017bcc:	e8 b7 05 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017bd1:	58                   	pop    eax
c0017bd2:	5a                   	pop    edx
c0017bd3:	6a 12                	push   0x12
c0017bd5:	57                   	push   edi
c0017bd6:	e8 cb 05 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0017bdd:	59                   	pop    ecx
c0017bde:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017be2:	51                   	push   ecx
c0017be3:	6a 00                	push   0x0
c0017be5:	6a 00                	push   0x0
c0017be7:	68 00 00 11 00       	push   0x110000
c0017bec:	57                   	push   edi
c0017bed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017bf0:	83 c4 14             	add    esp,0x14
c0017bf3:	57                   	push   edi
c0017bf4:	e8 0b 06 ff ff       	call   c0008204 <File::close()>
c0017bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0017bfb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017bfe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c01:	83 c4 10             	add    esp,0x10
c0017c04:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017c0b:	e9 f9 fe ff ff       	jmp    c0017b09 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>

c0017c10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017c10:	55                   	push   ebp
c0017c11:	57                   	push   edi
c0017c12:	56                   	push   esi
c0017c13:	53                   	push   ebx
c0017c14:	83 ec 2c             	sub    esp,0x2c
c0017c17:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017c1b:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017c22:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017c26:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c2e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017c32:	0f 84 5a 01 00 00    	je     c0017d92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x182>
c0017c38:	83 ec 08             	sub    esp,0x8
c0017c3b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017c3f:	51                   	push   ecx
c0017c40:	68 70 50 02 c0       	push   0xc0025070
c0017c45:	e8 1c f3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017c4a:	83 c4 10             	add    esp,0x10
c0017c4d:	eb 1a                	jmp    c0017c69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017c4f:	e8 ec f2 ff ff       	call   c0016f40 <schedule()>
c0017c54:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017c5c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017c61:	85 c0                	test   eax,eax
c0017c63:	0f 84 23 01 00 00    	je     c0017d8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c0017c69:	fa                   	cli    
c0017c6a:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017c70:	8a 1d 89 ea 02 c0    	mov    bl,BYTE PTR ds:0xc002ea89
c0017c76:	83 c2 01             	add    edx,0x1
c0017c79:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0017c7f:	84 db                	test   bl,bl
c0017c81:	74 cc                	je     c0017c4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017c83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c87:	83 ec 04             	sub    esp,0x4
c0017c8a:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017c94:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017c99:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017c9d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017ca1:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017ca5:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017ca9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017cad:	6a 20                	push   0x20
c0017caf:	6a 00                	push   0x0
c0017cb1:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017cb6:	e8 35 88 fe ff       	call   c00004f0 <memset>
c0017cbb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017cc2:	e8 e5 7c ff ff       	call   c000f9ac <malloc>
c0017cc7:	83 c4 0c             	add    esp,0xc
c0017cca:	89 c7                	mov    edi,eax
c0017ccc:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017cd1:	50                   	push   eax
c0017cd2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017cd6:	50                   	push   eax
c0017cd7:	57                   	push   edi
c0017cd8:	e8 ab 04 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017cdd:	83 c4 10             	add    esp,0x10
c0017ce0:	85 ff                	test   edi,edi
c0017ce2:	0f 84 63 01 00 00    	je     c0017e4b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23b>
c0017ce8:	83 ec 04             	sub    esp,0x4
c0017ceb:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017cef:	50                   	push   eax
c0017cf0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017cf4:	50                   	push   eax
c0017cf5:	57                   	push   edi
c0017cf6:	e8 ad 07 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0017cfb:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c0017d00:	83 c4 10             	add    esp,0x10
c0017d03:	89 e8                	mov    eax,ebp
c0017d05:	84 c0                	test   al,al
c0017d07:	0f 85 e7 00 00 00    	jne    c0017df4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e4>
c0017d0d:	83 ec 08             	sub    esp,0x8
c0017d10:	6a 01                	push   0x1
c0017d12:	57                   	push   edi
c0017d13:	e8 8e 04 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017d18:	83 c4 10             	add    esp,0x10
c0017d1b:	85 c0                	test   eax,eax
c0017d1d:	0f 85 ff 00 00 00    	jne    c0017e22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x212>
c0017d23:	83 ec 08             	sub    esp,0x8
c0017d26:	0f b7 f6             	movzx  esi,si
c0017d29:	56                   	push   esi
c0017d2a:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0017d2f:	50                   	push   eax
c0017d30:	e8 11 fc ff ff       	call   c0017946 <Vm::realToLinear(unsigned short, unsigned short)>
c0017d35:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d37:	5a                   	pop    edx
c0017d38:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017d3c:	52                   	push   edx
c0017d3d:	50                   	push   eax
c0017d3e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017d42:	56                   	push   esi
c0017d43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017d47:	55                   	push   ebp
c0017d48:	57                   	push   edi
c0017d49:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d4c:	83 c4 14             	add    esp,0x14
c0017d4f:	57                   	push   edi
c0017d50:	e8 af 04 ff ff       	call   c0008204 <File::close()>
c0017d55:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017d5c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017d64:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017d69:	83 c4 10             	add    esp,0x10
c0017d6c:	85 c0                	test   eax,eax
c0017d6e:	75 01                	jne    c0017d71 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x161>
c0017d70:	fb                   	sti    
c0017d71:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017d76:	83 ec 0c             	sub    esp,0xc
c0017d79:	50                   	push   eax
c0017d7a:	e8 19 f5 ff ff       	call   c0017298 <unblockTask(ThreadControlBlock*)>
c0017d7f:	83 c4 10             	add    esp,0x10
c0017d82:	83 c4 2c             	add    esp,0x2c
c0017d85:	88 d8                	mov    al,bl
c0017d87:	5b                   	pop    ebx
c0017d88:	5e                   	pop    esi
c0017d89:	5f                   	pop    edi
c0017d8a:	5d                   	pop    ebp
c0017d8b:	c3                   	ret    
c0017d8c:	fb                   	sti    
c0017d8d:	e9 d7 fe ff ff       	jmp    c0017c69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017d92:	83 ec 0c             	sub    esp,0xc
c0017d95:	68 14 01 00 00       	push   0x114
c0017d9a:	e8 0d 7c ff ff       	call   c000f9ac <malloc>
c0017d9f:	83 c4 0c             	add    esp,0xc
c0017da2:	89 c3                	mov    ebx,eax
c0017da4:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017da9:	50                   	push   eax
c0017daa:	68 0c 50 02 c0       	push   0xc002500c
c0017daf:	53                   	push   ebx
c0017db0:	e8 d3 03 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017db5:	58                   	pop    eax
c0017db6:	5a                   	pop    edx
c0017db7:	6a 12                	push   0x12
c0017db9:	53                   	push   ebx
c0017dba:	e8 e7 03 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017dbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017dc1:	59                   	pop    ecx
c0017dc2:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c0017dc6:	51                   	push   ecx
c0017dc7:	6a 00                	push   0x0
c0017dc9:	6a 00                	push   0x0
c0017dcb:	68 00 00 11 00       	push   0x110000
c0017dd0:	53                   	push   ebx
c0017dd1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017dd4:	83 c4 14             	add    esp,0x14
c0017dd7:	53                   	push   ebx
c0017dd8:	e8 27 04 ff ff       	call   c0008204 <File::close()>
c0017ddd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ddf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017de2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017de5:	83 c4 10             	add    esp,0x10
c0017de8:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017def:	e9 44 fe ff ff       	jmp    c0017c38 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c0017df4:	83 ec 0c             	sub    esp,0xc
c0017df7:	68 3b 50 02 c0       	push   0xc002503b
c0017dfc:	e8 01 80 ff ff       	call   c000fe02 <KePanic(char const*)>
c0017e01:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017e09:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	85 c0                	test   eax,eax
c0017e13:	75 01                	jne    c0017e16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017e15:	fb                   	sti    
c0017e16:	83 c4 2c             	add    esp,0x2c
c0017e19:	31 db                	xor    ebx,ebx
c0017e1b:	88 d8                	mov    al,bl
c0017e1d:	5b                   	pop    ebx
c0017e1e:	5e                   	pop    esi
c0017e1f:	5f                   	pop    edi
c0017e20:	5d                   	pop    ebp
c0017e21:	c3                   	ret    
c0017e22:	83 ec 0c             	sub    esp,0xc
c0017e25:	68 54 50 02 c0       	push   0xc0025054
c0017e2a:	e8 d3 7f ff ff       	call   c000fe02 <KePanic(char const*)>
c0017e2f:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017e37:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017e3c:	83 c4 10             	add    esp,0x10
c0017e3f:	85 c0                	test   eax,eax
c0017e41:	75 d3                	jne    c0017e16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017e43:	fb                   	sti    
c0017e44:	89 eb                	mov    ebx,ebp
c0017e46:	e9 37 ff ff ff       	jmp    c0017d82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0017e4b:	83 ec 0c             	sub    esp,0xc
c0017e4e:	68 27 50 02 c0       	push   0xc0025027
c0017e53:	eb a7                	jmp    c0017dfc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ec>

c0017e55 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017e55:	57                   	push   edi
c0017e56:	56                   	push   esi
c0017e57:	53                   	push   ebx
c0017e58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017e60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017e64:	83 e8 06             	sub    eax,0x6
c0017e67:	0f b7 c0             	movzx  eax,ax
c0017e6a:	50                   	push   eax
c0017e6b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017e70:	50                   	push   eax
c0017e71:	e8 d0 fa ff ff       	call   c0017946 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e76:	5a                   	pop    edx
c0017e77:	5e                   	pop    esi
c0017e78:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0017e7b:	8d 56 fa             	lea    edx,[esi-0x6]
c0017e7e:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0017e81:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017e87:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0017e8a:	8d 56 02             	lea    edx,[esi+0x2]
c0017e8d:	66 89 10             	mov    WORD PTR [eax],dx
c0017e90:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c0017e94:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017e98:	66 8b 79 40          	mov    di,WORD PTR [ecx+0x40]
c0017e9c:	8b 71 40             	mov    esi,DWORD PTR [ecx+0x40]
c0017e9f:	66 89 78 04          	mov    WORD PTR [eax+0x4],di
c0017ea3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0017ea9:	89 f2                	mov    edx,esi
c0017eab:	0f b6 d6             	movzx  edx,dh
c0017eae:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0017eb2:	89 d7                	mov    edi,edx
c0017eb4:	74 36                	je     c0017eec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x97>
c0017eb6:	c1 e7 08             	shl    edi,0x8
c0017eb9:	89 f2                	mov    edx,esi
c0017ebb:	0f b6 f2             	movzx  esi,dl
c0017ebe:	09 f7                	or     edi,esi
c0017ec0:	89 fa                	mov    edx,edi
c0017ec2:	80 ce 02             	or     dh,0x2
c0017ec5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017ec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ece:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017ed2:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0017eda:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0017edd:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0017ee5:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0017ee8:	5b                   	pop    ebx
c0017ee9:	5e                   	pop    esi
c0017eea:	5f                   	pop    edi
c0017eeb:	c3                   	ret    
c0017eec:	c1 e7 08             	shl    edi,0x8
c0017eef:	89 f2                	mov    edx,esi
c0017ef1:	0f b6 f2             	movzx  esi,dl
c0017ef4:	09 f7                	or     edi,esi
c0017ef6:	89 fa                	mov    edx,edi
c0017ef8:	80 e6 fd             	and    dh,0xfd
c0017efb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017eff:	eb c8                	jmp    c0017ec9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x74>

c0017f01 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017f01:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f06:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f0b:	c1 e0 04             	shl    eax,0x4
c0017f0e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017f11:	c3                   	ret    

c0017f12 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017f12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f1c:	c1 e0 04             	shl    eax,0x4
c0017f1f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017f23:	c3                   	ret    

c0017f24 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017f24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f2e:	c1 e0 04             	shl    eax,0x4
c0017f31:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017f34:	c3                   	ret    

c0017f35 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017f35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f3f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017f43:	c1 e0 04             	shl    eax,0x4
c0017f46:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017f49:	c3                   	ret    

c0017f4a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017f4a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f58:	c1 e0 04             	shl    eax,0x4
c0017f5b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017f5f:	c3                   	ret    

c0017f60 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017f60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f65:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f6e:	c1 e0 04             	shl    eax,0x4
c0017f71:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017f74:	c3                   	ret    

c0017f75 <Vm::faultHandler(regs*)>:
c0017f75:	55                   	push   ebp
c0017f76:	57                   	push   edi
c0017f77:	56                   	push   esi
c0017f78:	53                   	push   ebx
c0017f79:	83 ec 1c             	sub    esp,0x1c
c0017f7c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017f80:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017f84:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017f87:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0017f8c:	0f b7 c0             	movzx  eax,ax
c0017f8f:	52                   	push   edx
c0017f90:	50                   	push   eax
c0017f91:	e8 b0 f9 ff ff       	call   c0017946 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f96:	59                   	pop    ecx
c0017f97:	5e                   	pop    esi
c0017f98:	89 c1                	mov    ecx,eax
c0017f9a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017f9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017fa1:	0f b7 e8             	movzx  ebp,ax
c0017fa4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017fa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fab:	0f b7 f8             	movzx  edi,ax
c0017fae:	55                   	push   ebp
c0017faf:	57                   	push   edi
c0017fb0:	e8 91 f9 ff ff       	call   c0017946 <Vm::realToLinear(unsigned short, unsigned short)>
c0017fb5:	5a                   	pop    edx
c0017fb6:	5e                   	pop    esi
c0017fb7:	c6 44 24 04 06       	mov    BYTE PTR [esp+0x4],0x6
c0017fbc:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c0017fc1:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0017fc6:	0f b6 31             	movzx  esi,BYTE PTR [ecx]
c0017fc9:	8d 56 da             	lea    edx,[esi-0x26]
c0017fcc:	0f b6 d2             	movzx  edx,dl
c0017fcf:	81 fa d5 00 00 00    	cmp    edx,0xd5
c0017fd5:	0f 87 00 04 00 00    	ja     c00183db <Vm::faultHandler(regs*)+0x466>
c0017fdb:	ff 24 95 f4 50 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdaf0c]
c0017fe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fe7:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0017feb:	b0 01                	mov    al,0x1
c0017fed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017ff0:	83 c5 01             	add    ebp,0x1
c0017ff3:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0017ff6:	83 c4 1c             	add    esp,0x1c
c0017ff9:	5b                   	pop    ebx
c0017ffa:	5e                   	pop    esi
c0017ffb:	5f                   	pop    edi
c0017ffc:	5d                   	pop    ebp
c0017ffd:	c3                   	ret    
c0017ffe:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c0018003:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018006:	83 c2 01             	add    edx,0x1
c0018009:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001800c:	83 c1 01             	add    ecx,0x1
c001800f:	eb b5                	jmp    c0017fc6 <Vm::faultHandler(regs*)+0x51>
c0018011:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0018016:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018019:	83 c6 01             	add    esi,0x1
c001801c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c001801f:	eb eb                	jmp    c001800c <Vm::faultHandler(regs*)+0x97>
c0018021:	c6 44 24 04 05       	mov    BYTE PTR [esp+0x4],0x5
c0018026:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018029:	83 c6 01             	add    esi,0x1
c001802c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c001802f:	eb db                	jmp    c001800c <Vm::faultHandler(regs*)+0x97>
c0018031:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c0018036:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018039:	83 c2 01             	add    edx,0x1
c001803c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001803f:	eb cb                	jmp    c001800c <Vm::faultHandler(regs*)+0x97>
c0018041:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c0018046:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018049:	83 c6 01             	add    esi,0x1
c001804c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c001804f:	eb bb                	jmp    c001800c <Vm::faultHandler(regs*)+0x97>
c0018051:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0018056:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018059:	83 c2 01             	add    edx,0x1
c001805c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001805f:	eb ab                	jmp    c001800c <Vm::faultHandler(regs*)+0x97>
c0018061:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018066:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018069:	83 c2 01             	add    edx,0x1
c001806c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001806f:	eb 9b                	jmp    c001800c <Vm::faultHandler(regs*)+0x97>
c0018071:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0018076:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0018079:	83 c6 01             	add    esi,0x1
c001807c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c001807f:	eb 8b                	jmp    c001800c <Vm::faultHandler(regs*)+0x97>
c0018081:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018086:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018089:	74 0d                	je     c0018098 <Vm::faultHandler(regs*)+0x123>
c001808b:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018092:	0f 87 be 06 00 00    	ja     c0018756 <Vm::faultHandler(regs*)+0x7e1>
c0018098:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001809c:	83 ec 0c             	sub    esp,0xc
c001809f:	0f b7 f6             	movzx  esi,si
c00180a2:	50                   	push   eax
c00180a3:	e8 59 f8 ff ff       	call   c0017901 <Vm::inbv(unsigned short)>
c00180a8:	83 c4 0c             	add    esp,0xc
c00180ab:	0f b6 c0             	movzx  eax,al
c00180ae:	50                   	push   eax
c00180af:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00180b3:	50                   	push   eax
c00180b4:	56                   	push   esi
c00180b5:	e8 7b fe ff ff       	call   c0017f35 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00180ba:	83 c4 10             	add    esp,0x10
c00180bd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00180c0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00180c4:	0f 84 0a 06 00 00    	je     c00186d4 <Vm::faultHandler(regs*)+0x75f>
c00180ca:	83 e8 01             	sub    eax,0x1
c00180cd:	0f b7 c0             	movzx  eax,ax
c00180d0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00180d3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00180d6:	83 c0 01             	add    eax,0x1
c00180d9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00180dc:	83 c4 1c             	add    esp,0x1c
c00180df:	b0 01                	mov    al,0x1
c00180e1:	5b                   	pop    ebx
c00180e2:	5e                   	pop    esi
c00180e3:	5f                   	pop    edi
c00180e4:	5d                   	pop    ebp
c00180e5:	c3                   	ret    
c00180e6:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00180eb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00180ee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00180f1:	0f 85 a0 04 00 00    	jne    c0018597 <Vm::faultHandler(regs*)+0x622>
c00180f7:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00180fc:	0f b7 c8             	movzx  ecx,ax
c00180ff:	0f b7 f6             	movzx  esi,si
c0018102:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018105:	0f 84 69 05 00 00    	je     c0018674 <Vm::faultHandler(regs*)+0x6ff>
c001810b:	ed                   	in     eax,dx
c001810c:	83 ec 04             	sub    esp,0x4
c001810f:	50                   	push   eax
c0018110:	51                   	push   ecx
c0018111:	56                   	push   esi
c0018112:	e8 49 fe ff ff       	call   c0017f60 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018117:	83 c4 10             	add    esp,0x10
c001811a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001811d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018121:	0f 84 d1 05 00 00    	je     c00186f8 <Vm::faultHandler(regs*)+0x783>
c0018127:	83 e8 04             	sub    eax,0x4
c001812a:	25 ff ff 00 00       	and    eax,0xffff
c001812f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018132:	eb 9f                	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c0018134:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018139:	83 f8 06             	cmp    eax,0x6
c001813c:	0f 87 66 03 00 00    	ja     c00184a8 <Vm::faultHandler(regs*)+0x533>
c0018142:	ff 24 85 4c 54 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdabb4]
c0018149:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001814e:	83 f8 06             	cmp    eax,0x6
c0018151:	0f 87 f5 02 00 00    	ja     c001844c <Vm::faultHandler(regs*)+0x4d7>
c0018157:	ff 24 85 68 54 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdab98]
c001815e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018162:	83 ec 08             	sub    esp,0x8
c0018165:	50                   	push   eax
c0018166:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001816a:	50                   	push   eax
c001816b:	e8 a4 f7 ff ff       	call   c0017914 <Vm::outbv(unsigned short, unsigned char)>
c0018170:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018173:	83 c4 10             	add    esp,0x10
c0018176:	83 c0 02             	add    eax,0x2
c0018179:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001817c:	b0 01                	mov    al,0x1
c001817e:	e9 73 fe ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c0018183:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018187:	3d ee 00 00 00       	cmp    eax,0xee
c001818c:	0f 84 62 04 00 00    	je     c00185f4 <Vm::faultHandler(regs*)+0x67f>
c0018192:	83 ec 0c             	sub    esp,0xc
c0018195:	55                   	push   ebp
c0018196:	57                   	push   edi
c0018197:	51                   	push   ecx
c0018198:	50                   	push   eax
c0018199:	53                   	push   ebx
c001819a:	e8 b6 fc ff ff       	call   c0017e55 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001819f:	83 c4 20             	add    esp,0x20
c00181a2:	b0 01                	mov    al,0x1
c00181a4:	e9 4d fe ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c00181a9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00181ad:	89 d1                	mov    ecx,edx
c00181af:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00181b2:	c1 e1 08             	shl    ecx,0x8
c00181b5:	09 ca                	or     edx,ecx
c00181b7:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00181ba:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00181be:	89 d1                	mov    ecx,edx
c00181c0:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00181c4:	c1 e1 08             	shl    ecx,0x8
c00181c7:	09 ca                	or     edx,ecx
c00181c9:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00181cc:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00181d0:	89 d1                	mov    ecx,edx
c00181d2:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00181d6:	c1 e1 08             	shl    ecx,0x8
c00181d9:	09 ca                	or     edx,ecx
c00181db:	81 ca 00 02 02 00    	or     edx,0x20200
c00181e1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00181e4:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00181e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00181ee:	d1 e8                	shr    eax,1
c00181f0:	83 e0 01             	and    eax,0x1
c00181f3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00181f6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00181f9:	83 c0 06             	add    eax,0x6
c00181fc:	25 ff ff 00 00       	and    eax,0xffff
c0018201:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018204:	b0 01                	mov    al,0x1
c0018206:	e9 eb fd ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c001820b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001820e:	83 ec 0c             	sub    esp,0xc
c0018211:	b0 00                	mov    al,0x0
c0018213:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018216:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001821a:	50                   	push   eax
c001821b:	e8 e1 f6 ff ff       	call   c0017901 <Vm::inbv(unsigned short)>
c0018220:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018229:	83 c1 02             	add    ecx,0x2
c001822c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c001822f:	0f b6 c0             	movzx  eax,al
c0018232:	09 c2                	or     edx,eax
c0018234:	b0 01                	mov    al,0x1
c0018236:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018239:	e9 b8 fd ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c001823e:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018243:	0f 85 8a 03 00 00    	jne    c00185d3 <Vm::faultHandler(regs*)+0x65e>
c0018249:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001824c:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018252:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018255:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018259:	66 ed                	in     ax,dx
c001825b:	0f b7 c0             	movzx  eax,ax
c001825e:	09 f0                	or     eax,esi
c0018260:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018263:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018266:	83 c0 02             	add    eax,0x2
c0018269:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001826c:	83 c4 1c             	add    esp,0x1c
c001826f:	b0 01                	mov    al,0x1
c0018271:	5b                   	pop    ebx
c0018272:	5e                   	pop    esi
c0018273:	5f                   	pop    edi
c0018274:	5d                   	pop    ebp
c0018275:	c3                   	ret    
c0018276:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001827b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001827e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018282:	0f 84 e3 02 00 00    	je     c001856b <Vm::faultHandler(regs*)+0x5f6>
c0018288:	83 ea 04             	sub    edx,0x4
c001828b:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018291:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018297:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001829a:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c001829d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182a3:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c00182a7:	0f 84 26 fe ff ff    	je     c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00182ad:	80 cd 02             	or     ch,0x2
c00182b0:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c00182b3:	e9 1b fe ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00182b8:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00182bd:	0f 84 77 02 00 00    	je     c001853a <Vm::faultHandler(regs*)+0x5c5>
c00182c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00182c5:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00182cb:	81 ca 00 02 02 00    	or     edx,0x20200
c00182d1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00182d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00182d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182dc:	c1 e8 09             	shr    eax,0x9
c00182df:	83 e0 01             	and    eax,0x1
c00182e2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00182e5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00182e8:	83 c0 04             	add    eax,0x4
c00182eb:	25 ff ff 00 00       	and    eax,0xffff
c00182f0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00182f3:	e9 db fd ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00182f8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00182fc:	83 ec 08             	sub    esp,0x8
c00182ff:	50                   	push   eax
c0018300:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018304:	50                   	push   eax
c0018305:	e8 0a f6 ff ff       	call   c0017914 <Vm::outbv(unsigned short, unsigned char)>
c001830a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001830d:	83 c4 10             	add    esp,0x10
c0018310:	b0 01                	mov    al,0x1
c0018312:	83 c2 01             	add    edx,0x1
c0018315:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018318:	e9 d9 fc ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c001831d:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018322:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018325:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018328:	0f 84 b8 02 00 00    	je     c00185e6 <Vm::faultHandler(regs*)+0x671>
c001832e:	ef                   	out    dx,eax
c001832f:	e9 9f fd ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c0018334:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018337:	83 c2 01             	add    edx,0x1
c001833a:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001833d:	e9 ca fc ff ff       	jmp    c001800c <Vm::faultHandler(regs*)+0x97>
c0018342:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018347:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001834b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001834e:	83 c0 01             	add    eax,0x1
c0018351:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018354:	b0 01                	mov    al,0x1
c0018356:	e9 9b fc ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c001835b:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001835e:	83 ec 0c             	sub    esp,0xc
c0018361:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018365:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c001836b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001836e:	50                   	push   eax
c001836f:	e8 8d f5 ff ff       	call   c0017901 <Vm::inbv(unsigned short)>
c0018374:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018377:	83 c4 10             	add    esp,0x10
c001837a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001837d:	83 c5 01             	add    ebp,0x1
c0018380:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018383:	0f b6 c0             	movzx  eax,al
c0018386:	09 c7                	or     edi,eax
c0018388:	b0 01                	mov    al,0x1
c001838a:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c001838d:	e9 64 fc ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c0018392:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018397:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001839a:	0f 85 40 02 00 00    	jne    c00185e0 <Vm::faultHandler(regs*)+0x66b>
c00183a0:	66 ed                	in     ax,dx
c00183a2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00183a5:	0f b7 c0             	movzx  eax,ax
c00183a8:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c00183ae:	09 d0                	or     eax,edx
c00183b0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00183b3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00183b6:	b0 01                	mov    al,0x1
c00183b8:	83 c1 01             	add    ecx,0x1
c00183bb:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00183be:	e9 33 fc ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c00183c3:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00183c8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00183cb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00183cf:	0f 84 18 02 00 00    	je     c00185ed <Vm::faultHandler(regs*)+0x678>
c00183d5:	ef                   	out    dx,eax
c00183d6:	e9 88 fe ff ff       	jmp    c0018263 <Vm::faultHandler(regs*)+0x2ee>
c00183db:	89 f0                	mov    eax,esi
c00183dd:	0f b6 f0             	movzx  esi,al
c00183e0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00183e4:	50                   	push   eax
c00183e5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00183e9:	50                   	push   eax
c00183ea:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00183ee:	50                   	push   eax
c00183ef:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00183f3:	50                   	push   eax
c00183f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00183f8:	50                   	push   eax
c00183f9:	56                   	push   esi
c00183fa:	56                   	push   esi
c00183fb:	68 c4 50 02 c0       	push   0xc00250c4
c0018400:	e8 61 eb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018405:	83 c4 20             	add    esp,0x20
c0018408:	83 ec 0c             	sub    esp,0xc
c001840b:	6a 60                	push   0x60
c001840d:	e8 ef f4 ff ff       	call   c0017901 <Vm::inbv(unsigned short)>
c0018412:	83 c4 10             	add    esp,0x10
c0018415:	0f b6 c0             	movzx  eax,al
c0018418:	83 f8 1c             	cmp    eax,0x1c
c001841b:	74 17                	je     c0018434 <Vm::faultHandler(regs*)+0x4bf>
c001841d:	83 f8 5a             	cmp    eax,0x5a
c0018420:	75 e6                	jne    c0018408 <Vm::faultHandler(regs*)+0x493>
c0018422:	eb 10                	jmp    c0018434 <Vm::faultHandler(regs*)+0x4bf>
c0018424:	83 ec 0c             	sub    esp,0xc
c0018427:	6a 60                	push   0x60
c0018429:	e8 d3 f4 ff ff       	call   c0017901 <Vm::inbv(unsigned short)>
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	0f b6 c0             	movzx  eax,al
c0018434:	83 f8 1c             	cmp    eax,0x1c
c0018437:	74 eb                	je     c0018424 <Vm::faultHandler(regs*)+0x4af>
c0018439:	83 f8 5a             	cmp    eax,0x5a
c001843c:	74 e6                	je     c0018424 <Vm::faultHandler(regs*)+0x4af>
c001843e:	31 c0                	xor    eax,eax
c0018440:	e9 b1 fb ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c0018445:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018447:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001844c:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018451:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018454:	0f 85 a3 00 00 00    	jne    c00184fd <Vm::faultHandler(regs*)+0x588>
c001845a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001845d:	0f b7 c6             	movzx  eax,si
c0018460:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0018465:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018468:	81 e1 00 04 00 00    	and    ecx,0x400
c001846e:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018473:	0f 84 2b 02 00 00    	je     c00186a4 <Vm::faultHandler(regs*)+0x72f>
c0018479:	83 ec 08             	sub    esp,0x8
c001847c:	50                   	push   eax
c001847d:	52                   	push   edx
c001847e:	e8 a1 fa ff ff       	call   c0017f24 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018483:	83 c4 10             	add    esp,0x10
c0018486:	89 fa                	mov    edx,edi
c0018488:	ef                   	out    dx,eax
c0018489:	85 c9                	test   ecx,ecx
c001848b:	0f 84 77 02 00 00    	je     c0018708 <Vm::faultHandler(regs*)+0x793>
c0018491:	8d 46 fc             	lea    eax,[esi-0x4]
c0018494:	25 ff ff 00 00       	and    eax,0xffff
c0018499:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001849c:	e9 32 fc ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00184a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184a3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00184a8:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00184ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00184b0:	74 0b                	je     c00184bd <Vm::faultHandler(regs*)+0x548>
c00184b2:	3d ff ff 00 00       	cmp    eax,0xffff
c00184b7:	0f 87 68 02 00 00    	ja     c0018725 <Vm::faultHandler(regs*)+0x7b0>
c00184bd:	83 ec 08             	sub    esp,0x8
c00184c0:	0f b7 c0             	movzx  eax,ax
c00184c3:	50                   	push   eax
c00184c4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00184c9:	50                   	push   eax
c00184ca:	e8 32 fa ff ff       	call   c0017f01 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00184cf:	5e                   	pop    esi
c00184d0:	5f                   	pop    edi
c00184d1:	0f b6 c0             	movzx  eax,al
c00184d4:	50                   	push   eax
c00184d5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00184d9:	50                   	push   eax
c00184da:	e8 35 f4 ff ff       	call   c0017914 <Vm::outbv(unsigned short, unsigned char)>
c00184df:	83 c4 10             	add    esp,0x10
c00184e2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00184e5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00184e9:	0f 84 da 01 00 00    	je     c00186c9 <Vm::faultHandler(regs*)+0x754>
c00184ef:	83 e8 01             	sub    eax,0x1
c00184f2:	0f b7 c0             	movzx  eax,ax
c00184f5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00184f8:	e9 d6 fb ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00184fd:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0018503:	0f 86 51 ff ff ff    	jbe    c001845a <Vm::faultHandler(regs*)+0x4e5>
c0018509:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001850d:	50                   	push   eax
c001850e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018512:	50                   	push   eax
c0018513:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018517:	50                   	push   eax
c0018518:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001851c:	50                   	push   eax
c001851d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018521:	50                   	push   eax
c0018522:	6a 6f                	push   0x6f
c0018524:	6a 6f                	push   0x6f
c0018526:	68 94 50 02 c0       	push   0xc0025094
c001852b:	e8 36 ea fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018530:	83 c4 20             	add    esp,0x20
c0018533:	31 c0                	xor    eax,eax
c0018535:	e9 bc fa ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c001853a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001853d:	81 ca 00 02 02 00    	or     edx,0x20200
c0018543:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018546:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0018549:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001854f:	c1 e8 09             	shr    eax,0x9
c0018552:	83 e0 01             	and    eax,0x1
c0018555:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018558:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001855b:	83 c0 02             	add    eax,0x2
c001855e:	25 ff ff 00 00       	and    eax,0xffff
c0018563:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018566:	e9 68 fb ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c001856b:	83 ea 02             	sub    edx,0x2
c001856e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018574:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0018577:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c001857b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018581:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0018585:	0f 84 54 01 00 00    	je     c00186df <Vm::faultHandler(regs*)+0x76a>
c001858b:	80 cd 02             	or     ch,0x2
c001858e:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c0018592:	e9 3c fb ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c0018597:	3d ff ff 00 00       	cmp    eax,0xffff
c001859c:	0f 86 55 fb ff ff    	jbe    c00180f7 <Vm::faultHandler(regs*)+0x182>
c00185a2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00185a6:	50                   	push   eax
c00185a7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00185ab:	50                   	push   eax
c00185ac:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00185b0:	50                   	push   eax
c00185b1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00185b5:	50                   	push   eax
c00185b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00185ba:	50                   	push   eax
c00185bb:	6a 6d                	push   0x6d
c00185bd:	6a 6d                	push   0x6d
c00185bf:	68 94 50 02 c0       	push   0xc0025094
c00185c4:	e8 9d e9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00185c9:	83 c4 20             	add    esp,0x20
c00185cc:	31 c0                	xor    eax,eax
c00185ce:	e9 23 fa ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c00185d3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00185d7:	ed                   	in     eax,dx
c00185d8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00185db:	e9 83 fc ff ff       	jmp    c0018263 <Vm::faultHandler(regs*)+0x2ee>
c00185e0:	ed                   	in     eax,dx
c00185e1:	e9 ca fd ff ff       	jmp    c00183b0 <Vm::faultHandler(regs*)+0x43b>
c00185e6:	66 ef                	out    dx,ax
c00185e8:	e9 e6 fa ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00185ed:	66 ef                	out    dx,ax
c00185ef:	e9 6f fc ff ff       	jmp    c0018263 <Vm::faultHandler(regs*)+0x2ee>
c00185f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00185f7:	83 ec 0c             	sub    esp,0xc
c00185fa:	50                   	push   eax
c00185fb:	e8 b8 f3 ff ff       	call   c00179b8 <Vm::mainloop3(unsigned long)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	b0 01                	mov    al,0x1
c0018605:	e9 ec f9 ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c001860a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001860d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018612:	e9 35 fe ff ff       	jmp    c001844c <Vm::faultHandler(regs*)+0x4d7>
c0018617:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001861a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001861f:	e9 28 fe ff ff       	jmp    c001844c <Vm::faultHandler(regs*)+0x4d7>
c0018624:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018627:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001862c:	e9 1b fe ff ff       	jmp    c001844c <Vm::faultHandler(regs*)+0x4d7>
c0018631:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001863a:	e9 0d fe ff ff       	jmp    c001844c <Vm::faultHandler(regs*)+0x4d7>
c001863f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0018642:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018647:	e9 5c fe ff ff       	jmp    c00184a8 <Vm::faultHandler(regs*)+0x533>
c001864c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001864f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018654:	e9 4f fe ff ff       	jmp    c00184a8 <Vm::faultHandler(regs*)+0x533>
c0018659:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001865c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018661:	e9 42 fe ff ff       	jmp    c00184a8 <Vm::faultHandler(regs*)+0x533>
c0018666:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001866a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001866f:	e9 34 fe ff ff       	jmp    c00184a8 <Vm::faultHandler(regs*)+0x533>
c0018674:	66 ed                	in     ax,dx
c0018676:	83 ec 04             	sub    esp,0x4
c0018679:	0f b7 c0             	movzx  eax,ax
c001867c:	50                   	push   eax
c001867d:	51                   	push   ecx
c001867e:	56                   	push   esi
c001867f:	e8 c6 f8 ff ff       	call   c0017f4a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018684:	83 c4 10             	add    esp,0x10
c0018687:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001868a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001868e:	0f 84 84 00 00 00    	je     c0018718 <Vm::faultHandler(regs*)+0x7a3>
c0018694:	83 e8 02             	sub    eax,0x2
c0018697:	25 ff ff 00 00       	and    eax,0xffff
c001869c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001869f:	e9 2f fa ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00186a4:	83 ec 08             	sub    esp,0x8
c00186a7:	50                   	push   eax
c00186a8:	52                   	push   edx
c00186a9:	e8 64 f8 ff ff       	call   c0017f12 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00186ae:	83 c4 10             	add    esp,0x10
c00186b1:	89 fa                	mov    edx,edi
c00186b3:	66 ef                	out    dx,ax
c00186b5:	85 c9                	test   ecx,ecx
c00186b7:	74 32                	je     c00186eb <Vm::faultHandler(regs*)+0x776>
c00186b9:	8d 46 fe             	lea    eax,[esi-0x2]
c00186bc:	25 ff ff 00 00       	and    eax,0xffff
c00186c1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00186c4:	e9 0a fa ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00186c9:	83 c0 01             	add    eax,0x1
c00186cc:	0f b7 c0             	movzx  eax,ax
c00186cf:	e9 21 fe ff ff       	jmp    c00184f5 <Vm::faultHandler(regs*)+0x580>
c00186d4:	83 c0 01             	add    eax,0x1
c00186d7:	0f b7 c0             	movzx  eax,ax
c00186da:	e9 f1 f9 ff ff       	jmp    c00180d0 <Vm::faultHandler(regs*)+0x15b>
c00186df:	80 e5 fd             	and    ch,0xfd
c00186e2:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c00186e6:	e9 e8 f9 ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c00186eb:	8d 46 02             	lea    eax,[esi+0x2]
c00186ee:	25 ff ff 00 00       	and    eax,0xffff
c00186f3:	e9 fd fd ff ff       	jmp    c00184f5 <Vm::faultHandler(regs*)+0x580>
c00186f8:	83 c0 04             	add    eax,0x4
c00186fb:	25 ff ff 00 00       	and    eax,0xffff
c0018700:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018703:	e9 cb f9 ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c0018708:	8d 46 04             	lea    eax,[esi+0x4]
c001870b:	25 ff ff 00 00       	and    eax,0xffff
c0018710:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018713:	e9 bb f9 ff ff       	jmp    c00180d3 <Vm::faultHandler(regs*)+0x15e>
c0018718:	83 c0 02             	add    eax,0x2
c001871b:	25 ff ff 00 00       	and    eax,0xffff
c0018720:	e9 ab f9 ff ff       	jmp    c00180d0 <Vm::faultHandler(regs*)+0x15b>
c0018725:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018729:	50                   	push   eax
c001872a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001872e:	50                   	push   eax
c001872f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018733:	50                   	push   eax
c0018734:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018738:	50                   	push   eax
c0018739:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001873d:	50                   	push   eax
c001873e:	6a 6e                	push   0x6e
c0018740:	6a 6e                	push   0x6e
c0018742:	68 94 50 02 c0       	push   0xc0025094
c0018747:	e8 1a e8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001874c:	83 c4 20             	add    esp,0x20
c001874f:	31 c0                	xor    eax,eax
c0018751:	e9 a0 f8 ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c0018756:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001875a:	50                   	push   eax
c001875b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001875f:	50                   	push   eax
c0018760:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018764:	50                   	push   eax
c0018765:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018769:	50                   	push   eax
c001876a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001876e:	50                   	push   eax
c001876f:	6a 6c                	push   0x6c
c0018771:	6a 6c                	push   0x6c
c0018773:	68 94 50 02 c0       	push   0xc0025094
c0018778:	e8 e9 e7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001877d:	83 c4 20             	add    esp,0x20
c0018780:	31 c0                	xor    eax,eax
c0018782:	e9 6f f8 ff ff       	jmp    c0017ff6 <Vm::faultHandler(regs*)+0x81>
c0018787:	90                   	nop

c0018788 <IOAPIC::close(int, int, void*)>:
c0018788:	b8 00 00 00 00       	mov    eax,0x0
c001878d:	c3                   	ret    

c001878e <apicGetBase()>:
c001878e:	55                   	push   ebp
c001878f:	89 e5                	mov    ebp,esp
c0018791:	83 ec 18             	sub    esp,0x18
c0018794:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0018799:	83 e0 08             	and    eax,0x8
c001879c:	0f b6 c0             	movzx  eax,al
c001879f:	85 c0                	test   eax,eax
c00187a1:	75 07                	jne    c00187aa <apicGetBase()+0x1c>
c00187a3:	b8 00 00 00 00       	mov    eax,0x0
c00187a8:	eb 1b                	jmp    c00187c5 <apicGetBase()+0x37>
c00187aa:	83 ec 0c             	sub    esp,0xc
c00187ad:	6a 1b                	push   0x1b
c00187af:	e8 63 15 00 00       	call   c0019d17 <x86rdmsr(unsigned int)>
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00187ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00187bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00187c0:	25 00 00 ff ff       	and    eax,0xffff0000
c00187c5:	c9                   	leave  
c00187c6:	c3                   	ret    
c00187c7:	90                   	nop

c00187c8 <IOAPIC::IOAPIC()>:
c00187c8:	83 ec 0c             	sub    esp,0xc
c00187cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187cf:	83 ec 08             	sub    esp,0x8
c00187d2:	68 84 54 02 c0       	push   0xc0025484
c00187d7:	50                   	push   eax
c00187d8:	e8 7b 13 ff ff       	call   c0009b58 <Device::Device(char const*)>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	ba a4 54 02 c0       	mov    edx,0xc00254a4
c00187e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187e9:	89 10                	mov    DWORD PTR [eax],edx
c00187eb:	90                   	nop
c00187ec:	83 c4 0c             	add    esp,0xc
c00187ef:	c3                   	ret    

c00187f0 <apicOpen()>:
c00187f0:	55                   	push   ebp
c00187f1:	89 e5                	mov    ebp,esp
c00187f3:	53                   	push   ebx
c00187f4:	83 ec 34             	sub    esp,0x34
c00187f7:	83 ec 0c             	sub    esp,0xc
c00187fa:	68 8c 54 02 c0       	push   0xc002548c
c00187ff:	e8 62 e7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018804:	83 c4 10             	add    esp,0x10
c0018807:	a0 00 eb 02 c0       	mov    al,ds:0xc002eb00
c001880c:	83 f0 01             	xor    eax,0x1
c001880f:	0f b6 c0             	movzx  eax,al
c0018812:	85 c0                	test   eax,eax
c0018814:	0f 84 a3 00 00 00    	je     c00188bd <apicOpen()+0xcd>
c001881a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001881e:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c0018823:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018827:	0f b6 c0             	movzx  eax,al
c001882a:	39 c2                	cmp    edx,eax
c001882c:	0f 83 84 00 00 00    	jae    c00188b6 <apicOpen()+0xc6>
c0018832:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018839:	83 ec 0c             	sub    esp,0xc
c001883c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001883f:	e8 68 71 ff ff       	call   c000f9ac <malloc>
c0018844:	83 c4 10             	add    esp,0x10
c0018847:	89 c3                	mov    ebx,eax
c0018849:	83 ec 0c             	sub    esp,0xc
c001884c:	53                   	push   ebx
c001884d:	e8 76 ff ff ff       	call   c00187c8 <IOAPIC::IOAPIC()>
c0018852:	83 c4 10             	add    esp,0x10
c0018855:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018858:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001885c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001885f:	89 14 85 e0 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1520],edx
c0018866:	a1 c0 ea 02 c0       	mov    eax,ds:0xc002eac0
c001886b:	83 c0 01             	add    eax,0x1
c001886e:	a3 c0 ea 02 c0       	mov    ds:0xc002eac0,eax
c0018873:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c0018878:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001887e:	83 ec 08             	sub    esp,0x8
c0018881:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018884:	50                   	push   eax
c0018885:	e8 6c 11 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c001888a:	83 c4 10             	add    esp,0x10
c001888d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018890:	8b 00                	mov    eax,DWORD PTR [eax]
c0018892:	83 c0 08             	add    eax,0x8
c0018895:	8b 00                	mov    eax,DWORD PTR [eax]
c0018897:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001889b:	6a 00                	push   0x0
c001889d:	6a 00                	push   0x0
c001889f:	52                   	push   edx
c00188a0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00188a3:	ff d0                	call   eax
c00188a5:	83 c4 10             	add    esp,0x10
c00188a8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c00188ab:	83 c0 01             	add    eax,0x1
c00188ae:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c00188b1:	e9 68 ff ff ff       	jmp    c001881e <apicOpen()+0x2e>
c00188b6:	c6 05 00 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb00,0x1
c00188bd:	e8 cc fe ff ff       	call   c001878e <apicGetBase()>
c00188c2:	05 f0 00 00 00       	add    eax,0xf0
c00188c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00188ca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00188cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00188cf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00188d2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00188d9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00188e0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00188e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00188e6:	89 10                	mov    DWORD PTR [eax],edx
c00188e8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00188ef:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00188f4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00188f7:	7d 7c                	jge    c0018975 <apicOpen()+0x185>
c00188f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00188fc:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0018903:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018906:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018909:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0018910:	c1 e8 08             	shr    eax,0x8
c0018913:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018917:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001891a:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0018921:	c1 e8 18             	shr    eax,0x18
c0018924:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018927:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001892b:	3d ff 00 00 00       	cmp    eax,0xff
c0018930:	75 3a                	jne    c001896c <apicOpen()+0x17c>
c0018932:	e8 57 fe ff ff       	call   c001878e <apicGetBase()>
c0018937:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001893b:	83 fa 01             	cmp    edx,0x1
c001893e:	75 07                	jne    c0018947 <apicOpen()+0x157>
c0018940:	ba 60 03 00 00       	mov    edx,0x360
c0018945:	eb 05                	jmp    c001894c <apicOpen()+0x15c>
c0018947:	ba 50 03 00 00       	mov    edx,0x350
c001894c:	01 d0                	add    eax,edx
c001894e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018951:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018954:	8b 00                	mov    eax,DWORD PTR [eax]
c0018956:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018959:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018960:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018964:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018967:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001896a:	89 10                	mov    DWORD PTR [eax],edx
c001896c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018970:	e9 7a ff ff ff       	jmp    c00188ef <apicOpen()+0xff>
c0018975:	90                   	nop
c0018976:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018979:	c9                   	leave  
c001897a:	c3                   	ret    
c001897b:	90                   	nop

c001897c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001897c:	55                   	push   ebp
c001897d:	89 e5                	mov    ebp,esp
c001897f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018982:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018988:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001898b:	72 1d                	jb     c00189aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001898d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018990:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018999:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001899f:	01 d0                	add    eax,edx
c00189a1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00189a4:	73 04                	jae    c00189aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00189a6:	b0 01                	mov    al,0x1
c00189a8:	eb 02                	jmp    c00189ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00189aa:	b0 00                	mov    al,0x0
c00189ac:	5d                   	pop    ebp
c00189ad:	c3                   	ret    

c00189ae <IOAPIC::read(int)>:
c00189ae:	55                   	push   ebp
c00189af:	89 e5                	mov    ebp,esp
c00189b1:	83 ec 10             	sub    esp,0x10
c00189b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189b7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00189bd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00189c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00189c3:	0f b6 d0             	movzx  edx,al
c00189c6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00189c9:	89 10                	mov    DWORD PTR [eax],edx
c00189cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00189ce:	83 c0 10             	add    eax,0x10
c00189d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00189d3:	c9                   	leave  
c00189d4:	c3                   	ret    
c00189d5:	90                   	nop

c00189d6 <IOAPIC::open(int, int, void*)>:
c00189d6:	55                   	push   ebp
c00189d7:	89 e5                	mov    ebp,esp
c00189d9:	57                   	push   edi
c00189da:	56                   	push   esi
c00189db:	53                   	push   ebx
c00189dc:	83 ec 04             	sub    esp,0x4
c00189df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00189e5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00189eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00189f4:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c00189fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189fe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018a0d:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c0018a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a17:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a20:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a29:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018a2f:	0f b6 f0             	movzx  esi,al
c0018a32:	89 d0                	mov    eax,edx
c0018a34:	ba 00 00 00 00       	mov    edx,0x0
c0018a39:	89 c7                	mov    edi,eax
c0018a3b:	83 e7 ff             	and    edi,0xffffffff
c0018a3e:	89 f9                	mov    ecx,edi
c0018a40:	0f b6 da             	movzx  ebx,dl
c0018a43:	89 c8                	mov    eax,ecx
c0018a45:	89 da                	mov    edx,ebx
c0018a47:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018a4a:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018a4d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018a51:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018a55:	83 e0 00             	and    eax,0x0
c0018a58:	09 d0                	or     eax,edx
c0018a5a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a61:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018a67:	8d 50 01             	lea    edx,[eax+0x1]
c0018a6a:	88 d1                	mov    cl,dl
c0018a6c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018a6f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018a75:	0f b6 d0             	movzx  edx,al
c0018a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a7b:	83 c2 08             	add    edx,0x8
c0018a7e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018a82:	0f b6 c9             	movzx  ecx,cl
c0018a85:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018a8b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018a8f:	6a 01                	push   0x1
c0018a91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018a94:	e8 15 ff ff ff       	call   c00189ae <IOAPIC::read(int)>
c0018a99:	83 c4 08             	add    esp,0x8
c0018a9c:	c1 f8 10             	sar    eax,0x10
c0018a9f:	0f b6 c0             	movzx  eax,al
c0018aa2:	8d 50 01             	lea    edx,[eax+0x1]
c0018aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018aa8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018aae:	b8 00 00 00 00       	mov    eax,0x0
c0018ab3:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018ab6:	5b                   	pop    ebx
c0018ab7:	5e                   	pop    esi
c0018ab8:	5f                   	pop    edi
c0018ab9:	5d                   	pop    ebp
c0018aba:	c3                   	ret    
c0018abb:	90                   	nop

c0018abc <IOAPIC::write(int, int)>:
c0018abc:	55                   	push   ebp
c0018abd:	89 e5                	mov    ebp,esp
c0018abf:	83 ec 10             	sub    esp,0x10
c0018ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ac5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018acb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018ace:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018ad1:	0f b6 d0             	movzx  edx,al
c0018ad4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018ad7:	89 10                	mov    DWORD PTR [eax],edx
c0018ad9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018adc:	8d 50 10             	lea    edx,[eax+0x10]
c0018adf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018ae2:	89 02                	mov    DWORD PTR [edx],eax
c0018ae4:	90                   	nop
c0018ae5:	c9                   	leave  
c0018ae6:	c3                   	ret    
c0018ae7:	90                   	nop

c0018ae8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018ae8:	55                   	push   ebp
c0018ae9:	89 e5                	mov    ebp,esp
c0018aeb:	53                   	push   ebx
c0018aec:	83 ec 2c             	sub    esp,0x2c
c0018aef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018af2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018af5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018af8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018afb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018afe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018b01:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018b04:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018b07:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018b0a:	88 d8                	mov    al,bl
c0018b0c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018b0f:	88 c8                	mov    al,cl
c0018b11:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018b14:	88 d0                	mov    al,dl
c0018b16:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018b19:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018b1d:	83 c0 08             	add    eax,0x8
c0018b20:	d1 e0                	shl    eax,1
c0018b22:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018b25:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018b29:	83 c0 08             	add    eax,0x8
c0018b2c:	d1 e0                	shl    eax,1
c0018b2e:	83 c0 01             	add    eax,0x1
c0018b31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018b34:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018b37:	50                   	push   eax
c0018b38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018b3b:	e8 6e fe ff ff       	call   c00189ae <IOAPIC::read(int)>
c0018b40:	83 c4 08             	add    esp,0x8
c0018b43:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018b46:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018b4d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018b50:	c1 e0 18             	shl    eax,0x18
c0018b53:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018b56:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018b59:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018b5c:	52                   	push   edx
c0018b5d:	50                   	push   eax
c0018b5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018b61:	e8 56 ff ff ff       	call   c0018abc <IOAPIC::write(int, int)>
c0018b66:	83 c4 0c             	add    esp,0xc
c0018b69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018b6c:	50                   	push   eax
c0018b6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018b70:	e8 39 fe ff ff       	call   c00189ae <IOAPIC::read(int)>
c0018b75:	83 c4 08             	add    esp,0x8
c0018b78:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018b7b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018b82:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018b89:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018b90:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018b94:	85 c0                	test   eax,eax
c0018b96:	74 09                	je     c0018ba1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018b98:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018b9f:	eb 07                	jmp    c0018ba8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018ba1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018ba8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018bac:	85 c0                	test   eax,eax
c0018bae:	74 09                	je     c0018bb9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018bb0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018bb7:	eb 07                	jmp    c0018bc0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018bb9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018bc0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018bc7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018bcb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018bce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018bd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018bd4:	52                   	push   edx
c0018bd5:	50                   	push   eax
c0018bd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018bd9:	e8 de fe ff ff       	call   c0018abc <IOAPIC::write(int, int)>
c0018bde:	83 c4 0c             	add    esp,0xc
c0018be1:	90                   	nop
c0018be2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018be5:	c9                   	leave  
c0018be6:	c3                   	ret    
c0018be7:	90                   	nop

c0018be8 <noCopro(unsigned long)>:
c0018be8:	c3                   	ret    

c0018be9 <HalRestart()>:
c0018be9:	e4 64                	in     al,0x64
c0018beb:	a8 02                	test   al,0x2
c0018bed:	75 fa                	jne    c0018be9 <HalRestart()>
c0018bef:	b0 fe                	mov    al,0xfe
c0018bf1:	e6 64                	out    0x64,al
c0018bf3:	c3                   	ret    

c0018bf4 <HalShutdown()>:
c0018bf4:	c3                   	ret    

c0018bf5 <HalSleep()>:
c0018bf5:	c3                   	ret    

c0018bf6 <CPU::close(int, int, void*)>:
c0018bf6:	31 c0                	xor    eax,eax
c0018bf8:	c3                   	ret    

c0018bf9 <x86ReadCMOS(unsigned char)>:
c0018bf9:	83 ec 14             	sub    esp,0x14
c0018bfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c00:	88 04 24             	mov    BYTE PTR [esp],al
c0018c03:	a0 2c eb 02 c0       	mov    al,ds:0xc002eb2c
c0018c08:	0f b6 c0             	movzx  eax,al
c0018c0b:	85 c0                	test   eax,eax
c0018c0d:	74 04                	je     c0018c13 <x86ReadCMOS(unsigned char)+0x1a>
c0018c0f:	b2 00                	mov    dl,0x0
c0018c11:	eb 02                	jmp    c0018c15 <x86ReadCMOS(unsigned char)+0x1c>
c0018c13:	b2 80                	mov    dl,0x80
c0018c15:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018c18:	09 d0                	or     eax,edx
c0018c1a:	0f b6 c0             	movzx  eax,al
c0018c1d:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018c24:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018c28:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c2c:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018c31:	ee                   	out    dx,al
c0018c32:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018c39:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018c3e:	89 c2                	mov    edx,eax
c0018c40:	ec                   	in     al,dx
c0018c41:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c45:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c49:	83 c4 14             	add    esp,0x14
c0018c4c:	c3                   	ret    

c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>:
c0018c4d:	83 ec 18             	sub    esp,0x18
c0018c50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c58:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018c5c:	88 d0                	mov    al,dl
c0018c5e:	88 04 24             	mov    BYTE PTR [esp],al
c0018c61:	a0 2c eb 02 c0       	mov    al,ds:0xc002eb2c
c0018c66:	0f b6 c0             	movzx  eax,al
c0018c69:	85 c0                	test   eax,eax
c0018c6b:	74 04                	je     c0018c71 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018c6d:	b2 00                	mov    dl,0x0
c0018c6f:	eb 02                	jmp    c0018c73 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0018c71:	b2 80                	mov    dl,0x80
c0018c73:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018c77:	09 d0                	or     eax,edx
c0018c79:	0f b6 c0             	movzx  eax,al
c0018c7c:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018c83:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c87:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c8b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018c90:	ee                   	out    dx,al
c0018c91:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018c95:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018c9c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018ca0:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018ca4:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018ca9:	ee                   	out    dx,al
c0018caa:	90                   	nop
c0018cab:	83 c4 18             	add    esp,0x18
c0018cae:	c3                   	ret    

c0018caf <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018caf:	60                   	pusha  
c0018cb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cb8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cbc:	9c                   	pushf  
c0018cbd:	fa                   	cli    
c0018cbe:	0f 09                	wbinvd 
c0018cc0:	0f 30                	wrmsr  
c0018cc2:	9d                   	popf   
c0018cc3:	89 c2                	mov    edx,eax
c0018cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cc9:	89 10                	mov    DWORD PTR [eax],edx
c0018ccb:	61                   	popa   
c0018ccc:	90                   	nop
c0018ccd:	c3                   	ret    

c0018cce <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018cce:	60                   	pusha  
c0018ccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cd3:	89 c1                	mov    ecx,eax
c0018cd5:	9c                   	pushf  
c0018cd6:	fa                   	cli    
c0018cd7:	0f 09                	wbinvd 
c0018cd9:	31 c0                	xor    eax,eax
c0018cdb:	31 d2                	xor    edx,edx
c0018cdd:	0f 32                	rdmsr  
c0018cdf:	9d                   	popf   
c0018ce0:	89 c2                	mov    edx,eax
c0018ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ce6:	89 10                	mov    DWORD PTR [eax],edx
c0018ce8:	61                   	popa   
c0018ce9:	90                   	nop
c0018cea:	c3                   	ret    

c0018ceb <AMD_K6_writeback(int, int, int)>:
c0018ceb:	83 ec 20             	sub    esp,0x20
c0018cee:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c0018cf3:	c1 e8 14             	shr    eax,0x14
c0018cf6:	c1 e8 02             	shr    eax,0x2
c0018cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018cfd:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018d02:	0f 85 9e 00 00 00    	jne    c0018da6 <AMD_K6_writeback(int, int, int)+0xbb>
c0018d08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d10:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018d15:	75 19                	jne    c0018d30 <AMD_K6_writeback(int, int, int)+0x45>
c0018d17:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018d1c:	7f 0a                	jg     c0018d28 <AMD_K6_writeback(int, int, int)+0x3d>
c0018d1e:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018d26:	eb 08                	jmp    c0018d30 <AMD_K6_writeback(int, int, int)+0x45>
c0018d28:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018d30:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018d35:	7c 6e                	jl     c0018da5 <AMD_K6_writeback(int, int, int)+0xba>
c0018d37:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018d3c:	7e 09                	jle    c0018d47 <AMD_K6_writeback(int, int, int)+0x5c>
c0018d3e:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018d43:	74 36                	je     c0018d7b <AMD_K6_writeback(int, int, int)+0x90>
c0018d45:	eb 5e                	jmp    c0018da5 <AMD_K6_writeback(int, int, int)+0xba>
c0018d47:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d4b:	50                   	push   eax
c0018d4c:	68 82 00 00 c0       	push   0xc0000082
c0018d51:	e8 78 ff ff ff       	call   c0018cce <AMD_K6_read_msr(unsigned int, REGS*)>
c0018d56:	83 c4 08             	add    esp,0x8
c0018d59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d5d:	d1 e0                	shl    eax,1
c0018d5f:	83 e0 7f             	and    eax,0x7f
c0018d62:	89 c2                	mov    edx,eax
c0018d64:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d68:	50                   	push   eax
c0018d69:	6a 00                	push   0x0
c0018d6b:	52                   	push   edx
c0018d6c:	68 82 00 00 c0       	push   0xc0000082
c0018d71:	e8 39 ff ff ff       	call   c0018caf <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018d76:	83 c4 10             	add    esp,0x10
c0018d79:	eb 2b                	jmp    c0018da6 <AMD_K6_writeback(int, int, int)+0xbb>
c0018d7b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d7f:	50                   	push   eax
c0018d80:	68 82 00 00 c0       	push   0xc0000082
c0018d85:	e8 44 ff ff ff       	call   c0018cce <AMD_K6_read_msr(unsigned int, REGS*)>
c0018d8a:	83 c4 08             	add    esp,0x8
c0018d8d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d91:	50                   	push   eax
c0018d92:	6a 00                	push   0x0
c0018d94:	6a 00                	push   0x0
c0018d96:	68 82 00 00 c0       	push   0xc0000082
c0018d9b:	e8 0f ff ff ff       	call   c0018caf <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018da0:	83 c4 10             	add    esp,0x10
c0018da3:	eb 01                	jmp    c0018da6 <AMD_K6_writeback(int, int, int)+0xbb>
c0018da5:	90                   	nop
c0018da6:	90                   	nop
c0018da7:	83 c4 20             	add    esp,0x20
c0018daa:	c3                   	ret    

c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018dab:	56                   	push   esi
c0018dac:	53                   	push   ebx
c0018dad:	a1 60 6d 02 c0       	mov    eax,ds:0xc0026d60
c0018db2:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018db6:	75 32                	jne    c0018dea <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018db8:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c0018dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc2:	89 10                	mov    DWORD PTR [eax],edx
c0018dc4:	8b 15 1c eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb1c
c0018dca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dce:	89 10                	mov    DWORD PTR [eax],edx
c0018dd0:	8b 15 18 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb18
c0018dd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dda:	89 10                	mov    DWORD PTR [eax],edx
c0018ddc:	8b 15 14 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb14
c0018de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018de6:	89 10                	mov    DWORD PTR [eax],edx
c0018de8:	eb 5c                	jmp    c0018e46 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018dea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018dee:	ba 00 00 00 00       	mov    edx,0x0
c0018df3:	89 d1                	mov    ecx,edx
c0018df5:	0f a2                	cpuid  
c0018df7:	89 c6                	mov    esi,eax
c0018df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dfd:	89 30                	mov    DWORD PTR [eax],esi
c0018dff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e03:	89 18                	mov    DWORD PTR [eax],ebx
c0018e05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e09:	89 08                	mov    DWORD PTR [eax],ecx
c0018e0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e0f:	89 10                	mov    DWORD PTR [eax],edx
c0018e11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e15:	a3 60 6d 02 c0       	mov    ds:0xc0026d60,eax
c0018e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e20:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c0018e25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e2b:	a3 1c eb 02 c0       	mov    ds:0xc002eb1c,eax
c0018e30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e36:	a3 18 eb 02 c0       	mov    ds:0xc002eb18,eax
c0018e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e41:	a3 14 eb 02 c0       	mov    ds:0xc002eb14,eax
c0018e46:	5b                   	pop    ebx
c0018e47:	5e                   	pop    esi
c0018e48:	c3                   	ret    

c0018e49 <cpuidCheckEDX(unsigned int)>:
c0018e49:	83 ec 10             	sub    esp,0x10
c0018e4c:	89 e0                	mov    eax,esp
c0018e4e:	50                   	push   eax
c0018e4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e53:	50                   	push   eax
c0018e54:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018e58:	50                   	push   eax
c0018e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e5d:	50                   	push   eax
c0018e5e:	6a 01                	push   0x1
c0018e60:	e8 46 ff ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e65:	83 c4 14             	add    esp,0x14
c0018e68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018e6b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018e6f:	0f 95 c0             	setne  al
c0018e72:	83 c4 10             	add    esp,0x10
c0018e75:	c3                   	ret    

c0018e76 <cpuidCheckECX(unsigned int)>:
c0018e76:	83 ec 10             	sub    esp,0x10
c0018e79:	89 e0                	mov    eax,esp
c0018e7b:	50                   	push   eax
c0018e7c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e80:	50                   	push   eax
c0018e81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018e85:	50                   	push   eax
c0018e86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e8a:	50                   	push   eax
c0018e8b:	6a 01                	push   0x1
c0018e8d:	e8 19 ff ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e92:	83 c4 14             	add    esp,0x14
c0018e95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e99:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018e9d:	0f 95 c0             	setne  al
c0018ea0:	83 c4 10             	add    esp,0x10
c0018ea3:	c3                   	ret    

c0018ea4 <cpuidCheckExtendedEBX(unsigned int)>:
c0018ea4:	83 ec 10             	sub    esp,0x10
c0018ea7:	89 e0                	mov    eax,esp
c0018ea9:	50                   	push   eax
c0018eaa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018eae:	50                   	push   eax
c0018eaf:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018eb3:	50                   	push   eax
c0018eb4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018eb8:	50                   	push   eax
c0018eb9:	6a 07                	push   0x7
c0018ebb:	e8 eb fe ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ec0:	83 c4 14             	add    esp,0x14
c0018ec3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ec7:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018ecb:	0f 95 c0             	setne  al
c0018ece:	83 c4 10             	add    esp,0x10
c0018ed1:	c3                   	ret    

c0018ed2 <cpuidCheckExtendedECX(unsigned int)>:
c0018ed2:	83 ec 10             	sub    esp,0x10
c0018ed5:	89 e0                	mov    eax,esp
c0018ed7:	50                   	push   eax
c0018ed8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018edc:	50                   	push   eax
c0018edd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018ee1:	50                   	push   eax
c0018ee2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ee6:	50                   	push   eax
c0018ee7:	6a 07                	push   0x7
c0018ee9:	e8 bd fe ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018eee:	83 c4 14             	add    esp,0x14
c0018ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ef5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018ef9:	0f 95 c0             	setne  al
c0018efc:	83 c4 10             	add    esp,0x10
c0018eff:	c3                   	ret    

c0018f00 <HalDetectFeatures()>:
c0018f00:	57                   	push   edi
c0018f01:	56                   	push   esi
c0018f02:	53                   	push   ebx
c0018f03:	81 ec 90 00 00 00    	sub    esp,0x90
c0018f09:	83 ec 04             	sub    esp,0x4
c0018f0c:	6a 08                	push   0x8
c0018f0e:	6a 00                	push   0x0
c0018f10:	68 4c eb 02 c0       	push   0xc002eb4c
c0018f15:	e8 d6 75 fe ff       	call   c00004f0 <memset>
c0018f1a:	83 c4 10             	add    esp,0x10
c0018f1d:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0018f22:	83 c8 04             	or     eax,0x4
c0018f25:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0018f2a:	83 ec 0c             	sub    esp,0xc
c0018f2d:	68 c8 54 02 c0       	push   0xc00254c8
c0018f32:	e8 2f e0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	e8 ba 72 fe ff       	call   c00001f9 <detectCPUID>
c0018f3f:	85 c0                	test   eax,eax
c0018f41:	0f 95 c0             	setne  al
c0018f44:	83 e0 01             	and    eax,0x1
c0018f47:	83 e0 01             	and    eax,0x1
c0018f4a:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018f4d:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0018f52:	83 e0 fd             	and    eax,0xfffffffd
c0018f55:	88 c2                	mov    dl,al
c0018f57:	88 c8                	mov    al,cl
c0018f59:	09 d0                	or     eax,edx
c0018f5b:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0018f60:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0018f65:	83 e0 02             	and    eax,0x2
c0018f68:	0f b6 c0             	movzx  eax,al
c0018f6b:	85 c0                	test   eax,eax
c0018f6d:	0f 84 84 02 00 00    	je     c00191f7 <HalDetectFeatures()+0x2f7>
c0018f73:	83 ec 0c             	sub    esp,0xc
c0018f76:	6a 20                	push   0x20
c0018f78:	e8 cc fe ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c0018f7d:	83 c4 10             	add    esp,0x10
c0018f80:	83 e0 01             	and    eax,0x1
c0018f83:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018f8a:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0018f8f:	83 e0 f7             	and    eax,0xfffffff7
c0018f92:	88 c2                	mov    dl,al
c0018f94:	88 c8                	mov    al,cl
c0018f96:	09 d0                	or     eax,edx
c0018f98:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0018f9d:	83 ec 0c             	sub    esp,0xc
c0018fa0:	68 00 00 00 04       	push   0x4000000
c0018fa5:	e8 9f fe ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c0018faa:	83 c4 10             	add    esp,0x10
c0018fad:	89 c1                	mov    ecx,eax
c0018faf:	83 e1 01             	and    ecx,0x1
c0018fb2:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0018fb7:	83 e0 fe             	and    eax,0xfffffffe
c0018fba:	88 c2                	mov    dl,al
c0018fbc:	88 c8                	mov    al,cl
c0018fbe:	09 d0                	or     eax,edx
c0018fc0:	a2 4d eb 02 c0       	mov    ds:0xc002eb4d,al
c0018fc5:	83 ec 0c             	sub    esp,0xc
c0018fc8:	68 80 00 00 00       	push   0x80
c0018fcd:	e8 77 fe ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c0018fd2:	83 c4 10             	add    esp,0x10
c0018fd5:	89 c1                	mov    ecx,eax
c0018fd7:	c1 e1 07             	shl    ecx,0x7
c0018fda:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0018fdf:	83 e0 7f             	and    eax,0x7f
c0018fe2:	88 c2                	mov    dl,al
c0018fe4:	88 c8                	mov    al,cl
c0018fe6:	09 d0                	or     eax,edx
c0018fe8:	a2 4d eb 02 c0       	mov    ds:0xc002eb4d,al
c0018fed:	83 ec 0c             	sub    esp,0xc
c0018ff0:	68 00 00 80 00       	push   0x800000
c0018ff5:	e8 4f fe ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	83 e0 01             	and    eax,0x1
c0019000:	89 c1                	mov    ecx,eax
c0019002:	c1 e1 05             	shl    ecx,0x5
c0019005:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c001900a:	83 e0 df             	and    eax,0xffffffdf
c001900d:	88 c2                	mov    dl,al
c001900f:	88 c8                	mov    al,cl
c0019011:	09 d0                	or     eax,edx
c0019013:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0019018:	83 ec 0c             	sub    esp,0xc
c001901b:	6a 01                	push   0x1
c001901d:	e8 c6 41 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	0f b6 c0             	movzx  eax,al
c0019028:	85 c0                	test   eax,eax
c001902a:	75 17                	jne    c0019043 <HalDetectFeatures()+0x143>
c001902c:	83 ec 0c             	sub    esp,0xc
c001902f:	68 00 04 00 00       	push   0x400
c0019034:	e8 af 41 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019039:	83 c4 10             	add    esp,0x10
c001903c:	0f b6 c0             	movzx  eax,al
c001903f:	85 c0                	test   eax,eax
c0019041:	74 04                	je     c0019047 <HalDetectFeatures()+0x147>
c0019043:	b0 01                	mov    al,0x1
c0019045:	eb 02                	jmp    c0019049 <HalDetectFeatures()+0x149>
c0019047:	b0 00                	mov    al,0x0
c0019049:	0f b6 c0             	movzx  eax,al
c001904c:	85 c0                	test   eax,eax
c001904e:	74 0f                	je     c001905f <HalDetectFeatures()+0x15f>
c0019050:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019055:	83 e0 fe             	and    eax,0xfffffffe
c0019058:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c001905d:	eb 28                	jmp    c0019087 <HalDetectFeatures()+0x187>
c001905f:	83 ec 0c             	sub    esp,0xc
c0019062:	68 00 02 00 00       	push   0x200
c0019067:	e8 dd fd ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c001906c:	83 c4 10             	add    esp,0x10
c001906f:	89 c1                	mov    ecx,eax
c0019071:	83 e1 01             	and    ecx,0x1
c0019074:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019079:	83 e0 fe             	and    eax,0xfffffffe
c001907c:	88 c2                	mov    dl,al
c001907e:	88 c8                	mov    al,cl
c0019080:	09 d0                	or     eax,edx
c0019082:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0019087:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c001908c:	83 e0 01             	and    eax,0x1
c001908f:	0f b6 c0             	movzx  eax,al
c0019092:	85 c0                	test   eax,eax
c0019094:	74 1c                	je     c00190b2 <HalDetectFeatures()+0x1b2>
c0019096:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c001909b:	83 e0 08             	and    eax,0x8
c001909e:	0f b6 c0             	movzx  eax,al
c00190a1:	85 c0                	test   eax,eax
c00190a3:	75 0d                	jne    c00190b2 <HalDetectFeatures()+0x1b2>
c00190a5:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c00190aa:	83 e0 fe             	and    eax,0xfffffffe
c00190ad:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c00190b2:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c00190ba:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c00190c2:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00190ca:	85 c0                	test   eax,eax
c00190cc:	0f 84 ab 00 00 00    	je     c001917d <HalDetectFeatures()+0x27d>
c00190d2:	83 ec 0c             	sub    esp,0xc
c00190d5:	6a 01                	push   0x1
c00190d7:	e8 9a fd ff ff       	call   c0018e76 <cpuidCheckECX(unsigned int)>
c00190dc:	83 c4 10             	add    esp,0x10
c00190df:	83 e0 01             	and    eax,0x1
c00190e2:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00190e5:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c00190ea:	83 e0 fd             	and    eax,0xfffffffd
c00190ed:	88 c2                	mov    dl,al
c00190ef:	88 c8                	mov    al,cl
c00190f1:	09 d0                	or     eax,edx
c00190f3:	a2 4d eb 02 c0       	mov    ds:0xc002eb4d,al
c00190f8:	83 ec 0c             	sub    esp,0xc
c00190fb:	68 00 02 00 00       	push   0x200
c0019100:	e8 71 fd ff ff       	call   c0018e76 <cpuidCheckECX(unsigned int)>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	83 e0 01             	and    eax,0x1
c001910b:	89 c1                	mov    ecx,eax
c001910d:	c1 e1 04             	shl    ecx,0x4
c0019110:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0019115:	83 e0 ef             	and    eax,0xffffffef
c0019118:	88 c2                	mov    dl,al
c001911a:	88 c8                	mov    al,cl
c001911c:	09 d0                	or     eax,edx
c001911e:	a2 4d eb 02 c0       	mov    ds:0xc002eb4d,al
c0019123:	83 ec 0c             	sub    esp,0xc
c0019126:	68 00 00 08 00       	push   0x80000
c001912b:	e8 46 fd ff ff       	call   c0018e76 <cpuidCheckECX(unsigned int)>
c0019130:	83 c4 10             	add    esp,0x10
c0019133:	83 e0 01             	and    eax,0x1
c0019136:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001913d:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0019142:	83 e0 fb             	and    eax,0xfffffffb
c0019145:	88 c2                	mov    dl,al
c0019147:	88 c8                	mov    al,cl
c0019149:	09 d0                	or     eax,edx
c001914b:	a2 4d eb 02 c0       	mov    ds:0xc002eb4d,al
c0019150:	83 ec 0c             	sub    esp,0xc
c0019153:	68 00 00 10 00       	push   0x100000
c0019158:	e8 19 fd ff ff       	call   c0018e76 <cpuidCheckECX(unsigned int)>
c001915d:	83 c4 10             	add    esp,0x10
c0019160:	83 e0 01             	and    eax,0x1
c0019163:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001916a:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c001916f:	83 e0 f7             	and    eax,0xfffffff7
c0019172:	88 c2                	mov    dl,al
c0019174:	88 c8                	mov    al,cl
c0019176:	09 d0                	or     eax,edx
c0019178:	a2 4d eb 02 c0       	mov    ds:0xc002eb4d,al
c001917d:	83 ec 0c             	sub    esp,0xc
c0019180:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019184:	50                   	push   eax
c0019185:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019189:	50                   	push   eax
c001918a:	8d 44 24 34          	lea    eax,[esp+0x34]
c001918e:	50                   	push   eax
c001918f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019193:	50                   	push   eax
c0019194:	68 00 00 00 80       	push   0x80000000
c0019199:	e8 0d fc ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001919e:	83 c4 20             	add    esp,0x20
c00191a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00191a5:	3d 00 00 00 80       	cmp    eax,0x80000000
c00191aa:	76 4b                	jbe    c00191f7 <HalDetectFeatures()+0x2f7>
c00191ac:	83 ec 0c             	sub    esp,0xc
c00191af:	8d 44 24 24          	lea    eax,[esp+0x24]
c00191b3:	50                   	push   eax
c00191b4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00191b8:	50                   	push   eax
c00191b9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00191bd:	50                   	push   eax
c00191be:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00191c2:	50                   	push   eax
c00191c3:	68 01 00 00 80       	push   0x80000001
c00191c8:	e8 de fb ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191cd:	83 c4 20             	add    esp,0x20
c00191d0:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c00191d5:	83 e0 bf             	and    eax,0xffffffbf
c00191d8:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c00191dd:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c00191e2:	83 e0 fd             	and    eax,0xfffffffd
c00191e5:	a2 4e eb 02 c0       	mov    ds:0xc002eb4e,al
c00191ea:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c00191ef:	83 e0 fe             	and    eax,0xfffffffe
c00191f2:	a2 4e eb 02 c0       	mov    ds:0xc002eb4e,al
c00191f7:	83 ec 0c             	sub    esp,0xc
c00191fa:	68 00 04 00 00       	push   0x400
c00191ff:	e8 e4 3f ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019204:	83 c4 10             	add    esp,0x10
c0019207:	0f b6 c0             	movzx  eax,al
c001920a:	85 c0                	test   eax,eax
c001920c:	74 0d                	je     c001921b <HalDetectFeatures()+0x31b>
c001920e:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019213:	83 e0 fb             	and    eax,0xfffffffb
c0019216:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c001921b:	c6 05 48 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb48,0x1
c0019222:	83 ec 04             	sub    esp,0x4
c0019225:	6a 0d                	push   0xd
c0019227:	6a 00                	push   0x0
c0019229:	68 30 eb 02 c0       	push   0xc002eb30
c001922e:	e8 bd 72 fe ff       	call   c00004f0 <memset>
c0019233:	83 c4 10             	add    esp,0x10
c0019236:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c001923b:	83 e0 02             	and    eax,0x2
c001923e:	0f b6 c0             	movzx  eax,al
c0019241:	85 c0                	test   eax,eax
c0019243:	0f 84 16 08 00 00    	je     c0019a5f <HalDetectFeatures()+0xb5f>
c0019249:	83 ec 0c             	sub    esp,0xc
c001924c:	6a 10                	push   0x10
c001924e:	e8 f6 fb ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	83 e0 01             	and    eax,0x1
c0019259:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019260:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c0019265:	83 e0 f7             	and    eax,0xfffffff7
c0019268:	88 c2                	mov    dl,al
c001926a:	88 c8                	mov    al,cl
c001926c:	09 d0                	or     eax,edx
c001926e:	a2 4e eb 02 c0       	mov    ds:0xc002eb4e,al
c0019273:	83 ec 0c             	sub    esp,0xc
c0019276:	6a 40                	push   0x40
c0019278:	e8 cc fb ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c001927d:	83 c4 10             	add    esp,0x10
c0019280:	83 e0 01             	and    eax,0x1
c0019283:	89 c1                	mov    ecx,eax
c0019285:	c1 e1 04             	shl    ecx,0x4
c0019288:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c001928d:	83 e0 ef             	and    eax,0xffffffef
c0019290:	88 c2                	mov    dl,al
c0019292:	88 c8                	mov    al,cl
c0019294:	09 d0                	or     eax,edx
c0019296:	a2 4e eb 02 c0       	mov    ds:0xc002eb4e,al
c001929b:	83 ec 0c             	sub    esp,0xc
c001929e:	6a 08                	push   0x8
c00192a0:	e8 a4 fb ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c00192a5:	83 c4 10             	add    esp,0x10
c00192a8:	83 e0 01             	and    eax,0x1
c00192ab:	89 c1                	mov    ecx,eax
c00192ad:	c1 e1 05             	shl    ecx,0x5
c00192b0:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c00192b5:	83 e0 df             	and    eax,0xffffffdf
c00192b8:	88 c2                	mov    dl,al
c00192ba:	88 c8                	mov    al,cl
c00192bc:	09 d0                	or     eax,edx
c00192be:	a2 4e eb 02 c0       	mov    ds:0xc002eb4e,al
c00192c3:	83 ec 0c             	sub    esp,0xc
c00192c6:	68 00 20 00 00       	push   0x2000
c00192cb:	e8 79 fb ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c00192d0:	83 c4 10             	add    esp,0x10
c00192d3:	83 e0 01             	and    eax,0x1
c00192d6:	89 c1                	mov    ecx,eax
c00192d8:	c1 e1 06             	shl    ecx,0x6
c00192db:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c00192e0:	83 e0 bf             	and    eax,0xffffffbf
c00192e3:	88 c2                	mov    dl,al
c00192e5:	88 c8                	mov    al,cl
c00192e7:	09 d0                	or     eax,edx
c00192e9:	a2 4e eb 02 c0       	mov    ds:0xc002eb4e,al
c00192ee:	83 ec 0c             	sub    esp,0xc
c00192f1:	68 00 00 01 00       	push   0x10000
c00192f6:	e8 4e fb ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	89 c1                	mov    ecx,eax
c0019300:	c1 e1 07             	shl    ecx,0x7
c0019303:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c0019308:	83 e0 7f             	and    eax,0x7f
c001930b:	88 c2                	mov    dl,al
c001930d:	88 c8                	mov    al,cl
c001930f:	09 d0                	or     eax,edx
c0019311:	a2 4e eb 02 c0       	mov    ds:0xc002eb4e,al
c0019316:	83 ec 0c             	sub    esp,0xc
c0019319:	6a 01                	push   0x1
c001931b:	e8 29 fb ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c0019320:	83 c4 10             	add    esp,0x10
c0019323:	83 e0 01             	and    eax,0x1
c0019326:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001932d:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019332:	83 e0 f7             	and    eax,0xfffffff7
c0019335:	88 c2                	mov    dl,al
c0019337:	88 c8                	mov    al,cl
c0019339:	09 d0                	or     eax,edx
c001933b:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019340:	83 ec 0c             	sub    esp,0xc
c0019343:	68 00 08 00 00       	push   0x800
c0019348:	e8 fc fa ff ff       	call   c0018e49 <cpuidCheckEDX(unsigned int)>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	89 c1                	mov    ecx,eax
c0019352:	83 e1 01             	and    ecx,0x1
c0019355:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c001935a:	83 e0 fe             	and    eax,0xfffffffe
c001935d:	88 c2                	mov    dl,al
c001935f:	88 c8                	mov    al,cl
c0019361:	09 d0                	or     eax,edx
c0019363:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019368:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c001936d:	83 e0 40             	and    eax,0x40
c0019370:	0f b6 c0             	movzx  eax,al
c0019373:	85 c0                	test   eax,eax
c0019375:	74 0a                	je     c0019381 <HalDetectFeatures()+0x481>
c0019377:	c7 05 28 eb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002eb28,0x100
c0019381:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c0019386:	83 e0 80             	and    eax,0xffffff80
c0019389:	0f b6 c0             	movzx  eax,al
c001938c:	85 c0                	test   eax,eax
c001938e:	74 0a                	je     c001939a <HalDetectFeatures()+0x49a>
c0019390:	c7 05 24 eb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002eb24,0x80
c001939a:	83 ec 0c             	sub    esp,0xc
c001939d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193a1:	50                   	push   eax
c00193a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00193a6:	50                   	push   eax
c00193a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00193ab:	50                   	push   eax
c00193ac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00193b0:	50                   	push   eax
c00193b1:	6a 00                	push   0x0
c00193b3:	e8 f3 f9 ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193b8:	83 c4 20             	add    esp,0x20
c00193bb:	c7 44 24 48 30 eb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002eb30
c00193c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00193c7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00193cb:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00193d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00193d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00193db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00193df:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00193e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00193e7:	89 c6                	mov    esi,eax
c00193e9:	89 d7                	mov    edi,edx
c00193eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00193ed:	89 c8                	mov    eax,ecx
c00193ef:	89 fa                	mov    edx,edi
c00193f1:	89 f3                	mov    ebx,esi
c00193f3:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00193f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00193fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00193ff:	b8 34 eb 02 c0       	mov    eax,0xc002eb34
c0019404:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019408:	8d 44 24 08          	lea    eax,[esp+0x8]
c001940c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019410:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0019418:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001941c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019420:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019424:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0019428:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001942c:	89 c6                	mov    esi,eax
c001942e:	89 d7                	mov    edi,edx
c0019430:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019432:	89 c8                	mov    eax,ecx
c0019434:	89 fa                	mov    edx,edi
c0019436:	89 f3                	mov    ebx,esi
c0019438:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c001943c:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019440:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019444:	b8 38 eb 02 c0       	mov    eax,0xc002eb38
c0019449:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019450:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019454:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0019458:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019460:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019467:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001946b:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001946f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019476:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001947a:	89 c6                	mov    esi,eax
c001947c:	89 d7                	mov    edi,edx
c001947e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019480:	89 c8                	mov    eax,ecx
c0019482:	89 fa                	mov    edx,edi
c0019484:	89 f3                	mov    ebx,esi
c0019486:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001948a:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001948e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019492:	83 ec 08             	sub    esp,0x8
c0019495:	68 dd 54 02 c0       	push   0xc00254dd
c001949a:	68 30 eb 02 c0       	push   0xc002eb30
c001949f:	e8 dc 72 fe ff       	call   c0000780 <strcmp>
c00194a4:	83 c4 10             	add    esp,0x10
c00194a7:	85 c0                	test   eax,eax
c00194a9:	74 19                	je     c00194c4 <HalDetectFeatures()+0x5c4>
c00194ab:	83 ec 08             	sub    esp,0x8
c00194ae:	68 ea 54 02 c0       	push   0xc00254ea
c00194b3:	68 30 eb 02 c0       	push   0xc002eb30
c00194b8:	e8 c3 72 fe ff       	call   c0000780 <strcmp>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	85 c0                	test   eax,eax
c00194c2:	75 04                	jne    c00194c8 <HalDetectFeatures()+0x5c8>
c00194c4:	b0 01                	mov    al,0x1
c00194c6:	eb 02                	jmp    c00194ca <HalDetectFeatures()+0x5ca>
c00194c8:	b0 00                	mov    al,0x0
c00194ca:	0f b6 c0             	movzx  eax,al
c00194cd:	85 c0                	test   eax,eax
c00194cf:	74 0f                	je     c00194e0 <HalDetectFeatures()+0x5e0>
c00194d1:	c7 05 44 eb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x2
c00194db:	e9 0d 03 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c00194e0:	83 ec 08             	sub    esp,0x8
c00194e3:	68 f7 54 02 c0       	push   0xc00254f7
c00194e8:	68 30 eb 02 c0       	push   0xc002eb30
c00194ed:	e8 8e 72 fe ff       	call   c0000780 <strcmp>
c00194f2:	83 c4 10             	add    esp,0x10
c00194f5:	85 c0                	test   eax,eax
c00194f7:	74 19                	je     c0019512 <HalDetectFeatures()+0x612>
c00194f9:	83 ec 08             	sub    esp,0x8
c00194fc:	68 04 55 02 c0       	push   0xc0025504
c0019501:	68 30 eb 02 c0       	push   0xc002eb30
c0019506:	e8 75 72 fe ff       	call   c0000780 <strcmp>
c001950b:	83 c4 10             	add    esp,0x10
c001950e:	85 c0                	test   eax,eax
c0019510:	75 04                	jne    c0019516 <HalDetectFeatures()+0x616>
c0019512:	b0 01                	mov    al,0x1
c0019514:	eb 02                	jmp    c0019518 <HalDetectFeatures()+0x618>
c0019516:	b0 00                	mov    al,0x0
c0019518:	0f b6 c0             	movzx  eax,al
c001951b:	85 c0                	test   eax,eax
c001951d:	74 0f                	je     c001952e <HalDetectFeatures()+0x62e>
c001951f:	c7 05 44 eb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x4
c0019529:	e9 bf 02 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c001952e:	83 ec 08             	sub    esp,0x8
c0019531:	68 11 55 02 c0       	push   0xc0025511
c0019536:	68 30 eb 02 c0       	push   0xc002eb30
c001953b:	e8 40 72 fe ff       	call   c0000780 <strcmp>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	85 c0                	test   eax,eax
c0019545:	74 19                	je     c0019560 <HalDetectFeatures()+0x660>
c0019547:	83 ec 08             	sub    esp,0x8
c001954a:	68 1e 55 02 c0       	push   0xc002551e
c001954f:	68 30 eb 02 c0       	push   0xc002eb30
c0019554:	e8 27 72 fe ff       	call   c0000780 <strcmp>
c0019559:	83 c4 10             	add    esp,0x10
c001955c:	85 c0                	test   eax,eax
c001955e:	75 04                	jne    c0019564 <HalDetectFeatures()+0x664>
c0019560:	b0 01                	mov    al,0x1
c0019562:	eb 02                	jmp    c0019566 <HalDetectFeatures()+0x666>
c0019564:	b0 00                	mov    al,0x0
c0019566:	0f b6 c0             	movzx  eax,al
c0019569:	85 c0                	test   eax,eax
c001956b:	74 0f                	je     c001957c <HalDetectFeatures()+0x67c>
c001956d:	c7 05 44 eb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x5
c0019577:	e9 71 02 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c001957c:	83 ec 08             	sub    esp,0x8
c001957f:	68 2b 55 02 c0       	push   0xc002552b
c0019584:	68 30 eb 02 c0       	push   0xc002eb30
c0019589:	e8 f2 71 fe ff       	call   c0000780 <strcmp>
c001958e:	83 c4 10             	add    esp,0x10
c0019591:	85 c0                	test   eax,eax
c0019593:	0f 94 c0             	sete   al
c0019596:	0f b6 c0             	movzx  eax,al
c0019599:	85 c0                	test   eax,eax
c001959b:	74 0f                	je     c00195ac <HalDetectFeatures()+0x6ac>
c001959d:	c7 05 44 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x1
c00195a7:	e9 41 02 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c00195ac:	83 ec 08             	sub    esp,0x8
c00195af:	68 38 55 02 c0       	push   0xc0025538
c00195b4:	68 30 eb 02 c0       	push   0xc002eb30
c00195b9:	e8 c2 71 fe ff       	call   c0000780 <strcmp>
c00195be:	83 c4 10             	add    esp,0x10
c00195c1:	85 c0                	test   eax,eax
c00195c3:	0f 94 c0             	sete   al
c00195c6:	0f b6 c0             	movzx  eax,al
c00195c9:	85 c0                	test   eax,eax
c00195cb:	74 0f                	je     c00195dc <HalDetectFeatures()+0x6dc>
c00195cd:	c7 05 44 eb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x3
c00195d7:	e9 11 02 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c00195dc:	83 ec 08             	sub    esp,0x8
c00195df:	68 f7 54 02 c0       	push   0xc00254f7
c00195e4:	68 30 eb 02 c0       	push   0xc002eb30
c00195e9:	e8 92 71 fe ff       	call   c0000780 <strcmp>
c00195ee:	83 c4 10             	add    esp,0x10
c00195f1:	85 c0                	test   eax,eax
c00195f3:	0f 94 c0             	sete   al
c00195f6:	0f b6 c0             	movzx  eax,al
c00195f9:	85 c0                	test   eax,eax
c00195fb:	74 0f                	je     c001960c <HalDetectFeatures()+0x70c>
c00195fd:	c7 05 44 eb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x6
c0019607:	e9 e1 01 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c001960c:	83 ec 08             	sub    esp,0x8
c001960f:	68 45 55 02 c0       	push   0xc0025545
c0019614:	68 30 eb 02 c0       	push   0xc002eb30
c0019619:	e8 62 71 fe ff       	call   c0000780 <strcmp>
c001961e:	83 c4 10             	add    esp,0x10
c0019621:	85 c0                	test   eax,eax
c0019623:	0f 94 c0             	sete   al
c0019626:	0f b6 c0             	movzx  eax,al
c0019629:	85 c0                	test   eax,eax
c001962b:	74 0f                	je     c001963c <HalDetectFeatures()+0x73c>
c001962d:	c7 05 44 eb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x7
c0019637:	e9 b1 01 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c001963c:	83 ec 08             	sub    esp,0x8
c001963f:	68 52 55 02 c0       	push   0xc0025552
c0019644:	68 30 eb 02 c0       	push   0xc002eb30
c0019649:	e8 32 71 fe ff       	call   c0000780 <strcmp>
c001964e:	83 c4 10             	add    esp,0x10
c0019651:	85 c0                	test   eax,eax
c0019653:	0f 94 c0             	sete   al
c0019656:	0f b6 c0             	movzx  eax,al
c0019659:	85 c0                	test   eax,eax
c001965b:	74 0f                	je     c001966c <HalDetectFeatures()+0x76c>
c001965d:	c7 05 44 eb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x8
c0019667:	e9 81 01 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c001966c:	83 ec 08             	sub    esp,0x8
c001966f:	68 5f 55 02 c0       	push   0xc002555f
c0019674:	68 30 eb 02 c0       	push   0xc002eb30
c0019679:	e8 02 71 fe ff       	call   c0000780 <strcmp>
c001967e:	83 c4 10             	add    esp,0x10
c0019681:	85 c0                	test   eax,eax
c0019683:	0f 94 c0             	sete   al
c0019686:	0f b6 c0             	movzx  eax,al
c0019689:	85 c0                	test   eax,eax
c001968b:	74 0f                	je     c001969c <HalDetectFeatures()+0x79c>
c001968d:	c7 05 44 eb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x9
c0019697:	e9 51 01 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c001969c:	83 ec 08             	sub    esp,0x8
c001969f:	68 6c 55 02 c0       	push   0xc002556c
c00196a4:	68 30 eb 02 c0       	push   0xc002eb30
c00196a9:	e8 d2 70 fe ff       	call   c0000780 <strcmp>
c00196ae:	83 c4 10             	add    esp,0x10
c00196b1:	85 c0                	test   eax,eax
c00196b3:	0f 94 c0             	sete   al
c00196b6:	0f b6 c0             	movzx  eax,al
c00196b9:	85 c0                	test   eax,eax
c00196bb:	74 0f                	je     c00196cc <HalDetectFeatures()+0x7cc>
c00196bd:	c7 05 44 eb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0xa
c00196c7:	e9 21 01 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c00196cc:	83 ec 08             	sub    esp,0x8
c00196cf:	68 79 55 02 c0       	push   0xc0025579
c00196d4:	68 30 eb 02 c0       	push   0xc002eb30
c00196d9:	e8 a2 70 fe ff       	call   c0000780 <strcmp>
c00196de:	83 c4 10             	add    esp,0x10
c00196e1:	85 c0                	test   eax,eax
c00196e3:	0f 94 c0             	sete   al
c00196e6:	0f b6 c0             	movzx  eax,al
c00196e9:	85 c0                	test   eax,eax
c00196eb:	74 0f                	je     c00196fc <HalDetectFeatures()+0x7fc>
c00196ed:	c7 05 44 eb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0xb
c00196f7:	e9 f1 00 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c00196fc:	83 ec 08             	sub    esp,0x8
c00196ff:	68 86 55 02 c0       	push   0xc0025586
c0019704:	68 30 eb 02 c0       	push   0xc002eb30
c0019709:	e8 72 70 fe ff       	call   c0000780 <strcmp>
c001970e:	83 c4 10             	add    esp,0x10
c0019711:	85 c0                	test   eax,eax
c0019713:	0f 94 c0             	sete   al
c0019716:	0f b6 c0             	movzx  eax,al
c0019719:	85 c0                	test   eax,eax
c001971b:	74 0f                	je     c001972c <HalDetectFeatures()+0x82c>
c001971d:	c7 05 44 eb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0xc
c0019727:	e9 c1 00 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c001972c:	83 ec 08             	sub    esp,0x8
c001972f:	68 93 55 02 c0       	push   0xc0025593
c0019734:	68 30 eb 02 c0       	push   0xc002eb30
c0019739:	e8 42 70 fe ff       	call   c0000780 <strcmp>
c001973e:	83 c4 10             	add    esp,0x10
c0019741:	85 c0                	test   eax,eax
c0019743:	0f 94 c0             	sete   al
c0019746:	0f b6 c0             	movzx  eax,al
c0019749:	85 c0                	test   eax,eax
c001974b:	74 0f                	je     c001975c <HalDetectFeatures()+0x85c>
c001974d:	c7 05 44 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0xd
c0019757:	e9 91 00 00 00       	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c001975c:	83 ec 08             	sub    esp,0x8
c001975f:	68 a0 55 02 c0       	push   0xc00255a0
c0019764:	68 30 eb 02 c0       	push   0xc002eb30
c0019769:	e8 12 70 fe ff       	call   c0000780 <strcmp>
c001976e:	83 c4 10             	add    esp,0x10
c0019771:	85 c0                	test   eax,eax
c0019773:	0f 94 c0             	sete   al
c0019776:	0f b6 c0             	movzx  eax,al
c0019779:	85 c0                	test   eax,eax
c001977b:	74 0c                	je     c0019789 <HalDetectFeatures()+0x889>
c001977d:	c7 05 44 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0xd
c0019787:	eb 64                	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c0019789:	83 ec 08             	sub    esp,0x8
c001978c:	68 ad 55 02 c0       	push   0xc00255ad
c0019791:	68 30 eb 02 c0       	push   0xc002eb30
c0019796:	e8 e5 6f fe ff       	call   c0000780 <strcmp>
c001979b:	83 c4 10             	add    esp,0x10
c001979e:	85 c0                	test   eax,eax
c00197a0:	0f 94 c0             	sete   al
c00197a3:	0f b6 c0             	movzx  eax,al
c00197a6:	85 c0                	test   eax,eax
c00197a8:	74 0c                	je     c00197b6 <HalDetectFeatures()+0x8b6>
c00197aa:	c7 05 44 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0xd
c00197b4:	eb 37                	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c00197b6:	83 ec 08             	sub    esp,0x8
c00197b9:	68 ba 55 02 c0       	push   0xc00255ba
c00197be:	68 30 eb 02 c0       	push   0xc002eb30
c00197c3:	e8 b8 6f fe ff       	call   c0000780 <strcmp>
c00197c8:	83 c4 10             	add    esp,0x10
c00197cb:	85 c0                	test   eax,eax
c00197cd:	0f 94 c0             	sete   al
c00197d0:	0f b6 c0             	movzx  eax,al
c00197d3:	85 c0                	test   eax,eax
c00197d5:	74 0c                	je     c00197e3 <HalDetectFeatures()+0x8e3>
c00197d7:	c7 05 44 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0xd
c00197e1:	eb 0a                	jmp    c00197ed <HalDetectFeatures()+0x8ed>
c00197e3:	c7 05 44 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x0
c00197ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197f1:	83 f8 06             	cmp    eax,0x6
c00197f4:	0f 86 cc 00 00 00    	jbe    c00198c6 <HalDetectFeatures()+0x9c6>
c00197fa:	83 ec 0c             	sub    esp,0xc
c00197fd:	68 80 00 00 00       	push   0x80
c0019802:	e8 9d f6 ff ff       	call   c0018ea4 <cpuidCheckExtendedEBX(unsigned int)>
c0019807:	83 c4 10             	add    esp,0x10
c001980a:	89 c1                	mov    ecx,eax
c001980c:	83 e1 01             	and    ecx,0x1
c001980f:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019814:	83 e0 fe             	and    eax,0xfffffffe
c0019817:	88 c2                	mov    dl,al
c0019819:	88 c8                	mov    al,cl
c001981b:	09 d0                	or     eax,edx
c001981d:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019822:	83 ec 0c             	sub    esp,0xc
c0019825:	68 00 00 10 00       	push   0x100000
c001982a:	e8 75 f6 ff ff       	call   c0018ea4 <cpuidCheckExtendedEBX(unsigned int)>
c001982f:	83 c4 10             	add    esp,0x10
c0019832:	83 e0 01             	and    eax,0x1
c0019835:	89 c1                	mov    ecx,eax
c0019837:	c1 e1 06             	shl    ecx,0x6
c001983a:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c001983f:	83 e0 bf             	and    eax,0xffffffbf
c0019842:	88 c2                	mov    dl,al
c0019844:	88 c8                	mov    al,cl
c0019846:	09 d0                	or     eax,edx
c0019848:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c001984d:	83 ec 0c             	sub    esp,0xc
c0019850:	68 00 00 04 00       	push   0x40000
c0019855:	e8 4a f6 ff ff       	call   c0018ea4 <cpuidCheckExtendedEBX(unsigned int)>
c001985a:	83 c4 10             	add    esp,0x10
c001985d:	83 e0 01             	and    eax,0x1
c0019860:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019863:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019868:	83 e0 fd             	and    eax,0xfffffffd
c001986b:	88 c2                	mov    dl,al
c001986d:	88 c8                	mov    al,cl
c001986f:	09 d0                	or     eax,edx
c0019871:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019876:	83 ec 0c             	sub    esp,0xc
c0019879:	6a 04                	push   0x4
c001987b:	e8 52 f6 ff ff       	call   c0018ed2 <cpuidCheckExtendedECX(unsigned int)>
c0019880:	83 c4 10             	add    esp,0x10
c0019883:	83 e0 01             	and    eax,0x1
c0019886:	89 c1                	mov    ecx,eax
c0019888:	c1 e1 05             	shl    ecx,0x5
c001988b:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019890:	83 e0 df             	and    eax,0xffffffdf
c0019893:	88 c2                	mov    dl,al
c0019895:	88 c8                	mov    al,cl
c0019897:	09 d0                	or     eax,edx
c0019899:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c001989e:	83 ec 0c             	sub    esp,0xc
c00198a1:	6a 20                	push   0x20
c00198a3:	e8 2a f6 ff ff       	call   c0018ed2 <cpuidCheckExtendedECX(unsigned int)>
c00198a8:	83 c4 10             	add    esp,0x10
c00198ab:	83 e0 01             	and    eax,0x1
c00198ae:	89 c1                	mov    ecx,eax
c00198b0:	c1 e1 04             	shl    ecx,0x4
c00198b3:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c00198b8:	83 e0 ef             	and    eax,0xffffffef
c00198bb:	88 c2                	mov    dl,al
c00198bd:	88 c8                	mov    al,cl
c00198bf:	09 d0                	or     eax,edx
c00198c1:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c00198c6:	83 ec 0c             	sub    esp,0xc
c00198c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198cd:	50                   	push   eax
c00198ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00198d2:	50                   	push   eax
c00198d3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00198d7:	50                   	push   eax
c00198d8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00198dc:	50                   	push   eax
c00198dd:	6a 01                	push   0x1
c00198df:	e8 c7 f4 ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198e4:	83 c4 20             	add    esp,0x20
c00198e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198eb:	83 e0 0f             	and    eax,0xf
c00198ee:	a2 40 eb 02 c0       	mov    ds:0xc002eb40,al
c00198f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198f7:	c1 e8 04             	shr    eax,0x4
c00198fa:	83 e0 0f             	and    eax,0xf
c00198fd:	a2 3e eb 02 c0       	mov    ds:0xc002eb3e,al
c0019902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019906:	c1 e8 08             	shr    eax,0x8
c0019909:	83 e0 0f             	and    eax,0xf
c001990c:	a2 3d eb 02 c0       	mov    ds:0xc002eb3d,al
c0019911:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019915:	c1 e8 0c             	shr    eax,0xc
c0019918:	83 e0 03             	and    eax,0x3
c001991b:	a2 3f eb 02 c0       	mov    ds:0xc002eb3f,al
c0019920:	a0 3d eb 02 c0       	mov    al,ds:0xc002eb3d
c0019925:	0f b6 c0             	movzx  eax,al
c0019928:	83 f8 06             	cmp    eax,0x6
c001992b:	74 0d                	je     c001993a <HalDetectFeatures()+0xa3a>
c001992d:	a0 3d eb 02 c0       	mov    al,ds:0xc002eb3d
c0019932:	0f b6 c0             	movzx  eax,al
c0019935:	83 f8 0f             	cmp    eax,0xf
c0019938:	75 18                	jne    c0019952 <HalDetectFeatures()+0xa52>
c001993a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001993e:	c1 e8 10             	shr    eax,0x10
c0019941:	c1 e0 04             	shl    eax,0x4
c0019944:	88 c2                	mov    dl,al
c0019946:	a0 3e eb 02 c0       	mov    al,ds:0xc002eb3e
c001994b:	09 d0                	or     eax,edx
c001994d:	a2 3e eb 02 c0       	mov    ds:0xc002eb3e,al
c0019952:	a0 3d eb 02 c0       	mov    al,ds:0xc002eb3d
c0019957:	0f b6 c0             	movzx  eax,al
c001995a:	83 f8 0f             	cmp    eax,0xf
c001995d:	75 15                	jne    c0019974 <HalDetectFeatures()+0xa74>
c001995f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019963:	c1 e8 14             	shr    eax,0x14
c0019966:	88 c2                	mov    dl,al
c0019968:	a0 3d eb 02 c0       	mov    al,ds:0xc002eb3d
c001996d:	01 d0                	add    eax,edx
c001996f:	a2 3d eb 02 c0       	mov    ds:0xc002eb3d,al
c0019974:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001997c:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019984:	85 c0                	test   eax,eax
c0019986:	74 2d                	je     c00199b5 <HalDetectFeatures()+0xab5>
c0019988:	83 ec 0c             	sub    esp,0xc
c001998b:	68 00 00 00 40       	push   0x40000000
c0019990:	e8 e1 f4 ff ff       	call   c0018e76 <cpuidCheckECX(unsigned int)>
c0019995:	83 c4 10             	add    esp,0x10
c0019998:	83 e0 01             	and    eax,0x1
c001999b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00199a2:	a0 4e eb 02 c0       	mov    al,ds:0xc002eb4e
c00199a7:	83 e0 fb             	and    eax,0xfffffffb
c00199aa:	88 c2                	mov    dl,al
c00199ac:	88 c8                	mov    al,cl
c00199ae:	09 d0                	or     eax,edx
c00199b0:	a2 4e eb 02 c0       	mov    ds:0xc002eb4e,al
c00199b5:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c00199ba:	83 c8 04             	or     eax,0x4
c00199bd:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c00199c2:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c00199c7:	83 c8 08             	or     eax,0x8
c00199ca:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c00199cf:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c00199d4:	83 c8 10             	or     eax,0x10
c00199d7:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c00199dc:	83 ec 0c             	sub    esp,0xc
c00199df:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199e3:	50                   	push   eax
c00199e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00199e8:	50                   	push   eax
c00199e9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00199ed:	50                   	push   eax
c00199ee:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00199f2:	50                   	push   eax
c00199f3:	68 00 00 00 80       	push   0x80000000
c00199f8:	e8 ae f3 ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199fd:	83 c4 20             	add    esp,0x20
c0019a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a04:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019a09:	0f 86 96 01 00 00    	jbe    c0019ba5 <HalDetectFeatures()+0xca5>
c0019a0f:	83 ec 0c             	sub    esp,0xc
c0019a12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a16:	50                   	push   eax
c0019a17:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019a1b:	50                   	push   eax
c0019a1c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a20:	50                   	push   eax
c0019a21:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a25:	50                   	push   eax
c0019a26:	68 01 00 00 80       	push   0x80000001
c0019a2b:	e8 7b f3 ff ff       	call   c0018dab <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a30:	83 c4 20             	add    esp,0x20
c0019a33:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019a38:	83 e0 7f             	and    eax,0x7f
c0019a3b:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019a40:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019a45:	83 e0 fb             	and    eax,0xfffffffb
c0019a48:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019a4d:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019a52:	83 e0 fd             	and    eax,0xfffffffd
c0019a55:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019a5a:	e9 46 01 00 00       	jmp    c0019ba5 <HalDetectFeatures()+0xca5>
c0019a5f:	83 ec 08             	sub    esp,0x8
c0019a62:	68 2b 55 02 c0       	push   0xc002552b
c0019a67:	68 30 eb 02 c0       	push   0xc002eb30
c0019a6c:	e8 df 6b fe ff       	call   c0000650 <strcpy>
c0019a71:	83 c4 10             	add    esp,0x10
c0019a74:	c7 05 44 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x1
c0019a7e:	e8 40 67 fe ff       	call   c00001c3 <is486>
c0019a83:	85 c0                	test   eax,eax
c0019a85:	0f 95 c0             	setne  al
c0019a88:	0f b6 c0             	movzx  eax,al
c0019a8b:	85 c0                	test   eax,eax
c0019a8d:	0f 84 8d 00 00 00    	je     c0019b20 <HalDetectFeatures()+0xc20>
c0019a93:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019a98:	83 c8 04             	or     eax,0x4
c0019a9b:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019aa0:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019aa5:	83 c8 08             	or     eax,0x8
c0019aa8:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019aad:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019ab2:	83 c8 10             	or     eax,0x10
c0019ab5:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019aba:	0f 20 c0             	mov    eax,cr0
c0019abd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ac1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019ac5:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019acc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019ad3:	83 e0 04             	and    eax,0x4
c0019ad6:	74 1e                	je     c0019af6 <HalDetectFeatures()+0xbf6>
c0019ad8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019adf:	83 e0 10             	and    eax,0x10
c0019ae2:	75 12                	jne    c0019af6 <HalDetectFeatures()+0xbf6>
c0019ae4:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019ae9:	83 e0 f7             	and    eax,0xfffffff7
c0019aec:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019af1:	e9 af 00 00 00       	jmp    c0019ba5 <HalDetectFeatures()+0xca5>
c0019af6:	e8 a3 66 fe ff       	call   c000019e <hasLegacyFPU>
c0019afb:	83 e0 01             	and    eax,0x1
c0019afe:	83 e0 01             	and    eax,0x1
c0019b01:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019b08:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019b0d:	83 e0 f7             	and    eax,0xfffffff7
c0019b10:	88 c2                	mov    dl,al
c0019b12:	88 c8                	mov    al,cl
c0019b14:	09 d0                	or     eax,edx
c0019b16:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019b1b:	e9 85 00 00 00       	jmp    c0019ba5 <HalDetectFeatures()+0xca5>
c0019b20:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019b25:	83 e0 fb             	and    eax,0xfffffffb
c0019b28:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019b2d:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019b32:	83 e0 f7             	and    eax,0xfffffff7
c0019b35:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019b3a:	a0 4f eb 02 c0       	mov    al,ds:0xc002eb4f
c0019b3f:	83 e0 ef             	and    eax,0xffffffef
c0019b42:	a2 4f eb 02 c0       	mov    ds:0xc002eb4f,al
c0019b47:	0f 20 c0             	mov    eax,cr0
c0019b4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019b4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b52:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019b59:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019b60:	83 e0 04             	and    eax,0x4
c0019b63:	74 1b                	je     c0019b80 <HalDetectFeatures()+0xc80>
c0019b65:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019b6c:	83 e0 10             	and    eax,0x10
c0019b6f:	75 0f                	jne    c0019b80 <HalDetectFeatures()+0xc80>
c0019b71:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019b76:	83 e0 f7             	and    eax,0xfffffff7
c0019b79:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019b7e:	eb 25                	jmp    c0019ba5 <HalDetectFeatures()+0xca5>
c0019b80:	e8 19 66 fe ff       	call   c000019e <hasLegacyFPU>
c0019b85:	83 e0 01             	and    eax,0x1
c0019b88:	83 e0 01             	and    eax,0x1
c0019b8b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019b92:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019b97:	83 e0 f7             	and    eax,0xfffffff7
c0019b9a:	88 c2                	mov    dl,al
c0019b9c:	88 c8                	mov    al,cl
c0019b9e:	09 d0                	or     eax,edx
c0019ba0:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019ba5:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019baa:	83 e0 08             	and    eax,0x8
c0019bad:	0f b6 c0             	movzx  eax,al
c0019bb0:	85 c0                	test   eax,eax
c0019bb2:	75 25                	jne    c0019bd9 <HalDetectFeatures()+0xcd9>
c0019bb4:	e8 e5 65 fe ff       	call   c000019e <hasLegacyFPU>
c0019bb9:	83 e0 01             	and    eax,0x1
c0019bbc:	83 e0 01             	and    eax,0x1
c0019bbf:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019bc6:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019bcb:	83 e0 f7             	and    eax,0xfffffff7
c0019bce:	88 c2                	mov    dl,al
c0019bd0:	88 c8                	mov    al,cl
c0019bd2:	09 d0                	or     eax,edx
c0019bd4:	a2 50 eb 02 c0       	mov    ds:0xc002eb50,al
c0019bd9:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c0019bde:	83 e0 08             	and    eax,0x8
c0019be1:	0f b6 c0             	movzx  eax,al
c0019be4:	85 c0                	test   eax,eax
c0019be6:	74 0d                	je     c0019bf5 <HalDetectFeatures()+0xcf5>
c0019be8:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019bed:	83 c8 10             	or     eax,0x10
c0019bf0:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0019bf5:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019bfa:	83 e0 10             	and    eax,0x10
c0019bfd:	0f b6 c0             	movzx  eax,al
c0019c00:	85 c0                	test   eax,eax
c0019c02:	75 23                	jne    c0019c27 <HalDetectFeatures()+0xd27>
c0019c04:	e8 6d 7b 00 00       	call   c0021776 <x87Detect>
c0019c09:	83 e0 01             	and    eax,0x1
c0019c0c:	83 e0 01             	and    eax,0x1
c0019c0f:	89 c1                	mov    ecx,eax
c0019c11:	c1 e1 04             	shl    ecx,0x4
c0019c14:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019c19:	83 e0 ef             	and    eax,0xffffffef
c0019c1c:	88 c2                	mov    dl,al
c0019c1e:	88 c8                	mov    al,cl
c0019c20:	09 d0                	or     eax,edx
c0019c22:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0019c27:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0019c2c:	83 e0 01             	and    eax,0x1
c0019c2f:	0f b6 c0             	movzx  eax,al
c0019c32:	85 c0                	test   eax,eax
c0019c34:	75 2d                	jne    c0019c63 <HalDetectFeatures()+0xd63>
c0019c36:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0019c3b:	83 e0 02             	and    eax,0x2
c0019c3e:	0f b6 c0             	movzx  eax,al
c0019c41:	85 c0                	test   eax,eax
c0019c43:	75 1e                	jne    c0019c63 <HalDetectFeatures()+0xd63>
c0019c45:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0019c4a:	83 e0 04             	and    eax,0x4
c0019c4d:	0f b6 c0             	movzx  eax,al
c0019c50:	85 c0                	test   eax,eax
c0019c52:	75 0f                	jne    c0019c63 <HalDetectFeatures()+0xd63>
c0019c54:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0019c59:	83 e0 08             	and    eax,0x8
c0019c5c:	0f b6 c0             	movzx  eax,al
c0019c5f:	85 c0                	test   eax,eax
c0019c61:	74 0d                	je     c0019c70 <HalDetectFeatures()+0xd70>
c0019c63:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019c68:	83 c8 80             	or     eax,0xffffff80
c0019c6b:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0019c70:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019c75:	83 e0 10             	and    eax,0x10
c0019c78:	0f b6 c0             	movzx  eax,al
c0019c7b:	85 c0                	test   eax,eax
c0019c7d:	74 2f                	je     c0019cae <HalDetectFeatures()+0xdae>
c0019c7f:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019c84:	83 e0 80             	and    eax,0xffffff80
c0019c87:	0f b6 c0             	movzx  eax,al
c0019c8a:	85 c0                	test   eax,eax
c0019c8c:	75 20                	jne    c0019cae <HalDetectFeatures()+0xdae>
c0019c8e:	e8 9d 7a 00 00       	call   c0021730 <sseDetect>
c0019c93:	83 e0 01             	and    eax,0x1
c0019c96:	89 c1                	mov    ecx,eax
c0019c98:	c1 e1 07             	shl    ecx,0x7
c0019c9b:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019ca0:	83 e0 7f             	and    eax,0x7f
c0019ca3:	88 c2                	mov    dl,al
c0019ca5:	88 c8                	mov    al,cl
c0019ca7:	09 d0                	or     eax,edx
c0019ca9:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0019cae:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019cb3:	83 e0 80             	and    eax,0xffffff80
c0019cb6:	0f b6 c0             	movzx  eax,al
c0019cb9:	85 c0                	test   eax,eax
c0019cbb:	74 1c                	je     c0019cd9 <HalDetectFeatures()+0xdd9>
c0019cbd:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0019cc2:	83 e0 20             	and    eax,0x20
c0019cc5:	0f b6 c0             	movzx  eax,al
c0019cc8:	85 c0                	test   eax,eax
c0019cca:	75 0d                	jne    c0019cd9 <HalDetectFeatures()+0xdd9>
c0019ccc:	a0 4d eb 02 c0       	mov    al,ds:0xc002eb4d
c0019cd1:	83 e0 df             	and    eax,0xffffffdf
c0019cd4:	a2 4d eb 02 c0       	mov    ds:0xc002eb4d,al
c0019cd9:	c6 05 48 eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb48,0x0
c0019ce0:	90                   	nop
c0019ce1:	81 c4 90 00 00 00    	add    esp,0x90
c0019ce7:	5b                   	pop    ebx
c0019ce8:	5e                   	pop    esi
c0019ce9:	5f                   	pop    edi
c0019cea:	c3                   	ret    

c0019ceb <HalEnableNMI()>:
c0019ceb:	c6 05 2c eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb2c,0x1
c0019cf2:	6a 10                	push   0x10
c0019cf4:	e8 00 ef ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c0019cf9:	83 c4 04             	add    esp,0x4
c0019cfc:	90                   	nop
c0019cfd:	c3                   	ret    

c0019cfe <HalDisableNMI()>:
c0019cfe:	c6 05 2c eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb2c,0x0
c0019d05:	6a 10                	push   0x10
c0019d07:	e8 ed ee ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c0019d0c:	83 c4 04             	add    esp,0x4
c0019d0f:	90                   	nop
c0019d10:	c3                   	ret    

c0019d11 <HalGetNMIState()>:
c0019d11:	a0 2c eb 02 c0       	mov    al,ds:0xc002eb2c
c0019d16:	c3                   	ret    

c0019d17 <x86rdmsr(unsigned int)>:
c0019d17:	83 ec 1c             	sub    esp,0x1c
c0019d1a:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019d1f:	83 e0 08             	and    eax,0x8
c0019d22:	0f b6 c0             	movzx  eax,al
c0019d25:	85 c0                	test   eax,eax
c0019d27:	75 10                	jne    c0019d39 <x86rdmsr(unsigned int)+0x22>
c0019d29:	83 ec 0c             	sub    esp,0xc
c0019d2c:	68 c6 55 02 c0       	push   0xc00255c6
c0019d31:	e8 cc 60 ff ff       	call   c000fe02 <KePanic(char const*)>
c0019d36:	83 c4 10             	add    esp,0x10
c0019d39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d3d:	89 c1                	mov    ecx,eax
c0019d3f:	0f 32                	rdmsr  
c0019d41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d51:	83 c4 1c             	add    esp,0x1c
c0019d54:	c3                   	ret    

c0019d55 <x86wrmsr(unsigned int, unsigned long long)>:
c0019d55:	83 ec 1c             	sub    esp,0x1c
c0019d58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019d64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d68:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019d6d:	83 e0 08             	and    eax,0x8
c0019d70:	0f b6 c0             	movzx  eax,al
c0019d73:	85 c0                	test   eax,eax
c0019d75:	75 10                	jne    c0019d87 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019d77:	83 ec 0c             	sub    esp,0xc
c0019d7a:	68 cc 55 02 c0       	push   0xc00255cc
c0019d7f:	e8 7e 60 ff ff       	call   c000fe02 <KePanic(char const*)>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019d8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d93:	0f 30                	wrmsr  
c0019d95:	90                   	nop
c0019d96:	83 c4 1c             	add    esp,0x1c
c0019d99:	c3                   	ret    

c0019d9a <HalHandleGeneralProtectionFault(void*, void*)>:
c0019d9a:	83 ec 0c             	sub    esp,0xc
c0019d9d:	83 ec 0c             	sub    esp,0xc
c0019da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019da4:	e8 cc e1 ff ff       	call   c0017f75 <Vm::faultHandler(regs*)>
c0019da9:	83 c4 10             	add    esp,0x10
c0019dac:	83 c4 0c             	add    esp,0xc
c0019daf:	c3                   	ret    

c0019db0 <HalFindRSDP()>:
c0019db0:	83 ec 1c             	sub    esp,0x1c
c0019db3:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c0019db8:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019dbd:	7e 17                	jle    c0019dd6 <HalFindRSDP()+0x26>
c0019dbf:	83 ec 0c             	sub    esp,0xc
c0019dc2:	68 00 04 00 00       	push   0x400
c0019dc7:	e8 1c 34 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019dcc:	83 c4 10             	add    esp,0x10
c0019dcf:	0f b6 c0             	movzx  eax,al
c0019dd2:	85 c0                	test   eax,eax
c0019dd4:	74 04                	je     c0019dda <HalFindRSDP()+0x2a>
c0019dd6:	b0 01                	mov    al,0x1
c0019dd8:	eb 02                	jmp    c0019ddc <HalFindRSDP()+0x2c>
c0019dda:	b0 00                	mov    al,0x0
c0019ddc:	0f b6 c0             	movzx  eax,al
c0019ddf:	85 c0                	test   eax,eax
c0019de1:	74 1d                	je     c0019e00 <HalFindRSDP()+0x50>
c0019de3:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019de8:	83 e0 fb             	and    eax,0xfffffffb
c0019deb:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0019df0:	83 ec 0c             	sub    esp,0xc
c0019df3:	68 d2 55 02 c0       	push   0xc00255d2
c0019df8:	e8 69 d1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019dfd:	83 c4 10             	add    esp,0x10
c0019e00:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019e05:	83 e0 04             	and    eax,0x4
c0019e08:	0f b6 c0             	movzx  eax,al
c0019e0b:	85 c0                	test   eax,eax
c0019e0d:	75 17                	jne    c0019e26 <HalFindRSDP()+0x76>
c0019e0f:	83 ec 0c             	sub    esp,0xc
c0019e12:	68 e1 55 02 c0       	push   0xc00255e1
c0019e17:	e8 4a d1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	b8 00 00 00 00       	mov    eax,0x0
c0019e24:	eb 63                	jmp    c0019e89 <HalFindRSDP()+0xd9>
c0019e26:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019e2e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019e36:	77 2f                	ja     c0019e67 <HalFindRSDP()+0xb7>
c0019e38:	83 ec 04             	sub    esp,0x4
c0019e3b:	6a 08                	push   0x8
c0019e3d:	68 eb 55 02 c0       	push   0xc00255eb
c0019e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e46:	e8 35 65 fe ff       	call   c0000380 <memcmp>
c0019e4b:	83 c4 10             	add    esp,0x10
c0019e4e:	85 c0                	test   eax,eax
c0019e50:	0f 94 c0             	sete   al
c0019e53:	0f b6 c0             	movzx  eax,al
c0019e56:	85 c0                	test   eax,eax
c0019e58:	74 06                	je     c0019e60 <HalFindRSDP()+0xb0>
c0019e5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e5e:	eb 29                	jmp    c0019e89 <HalFindRSDP()+0xd9>
c0019e60:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019e65:	eb c7                	jmp    c0019e2e <HalFindRSDP()+0x7e>
c0019e67:	83 ec 0c             	sub    esp,0xc
c0019e6a:	68 f4 55 02 c0       	push   0xc00255f4
c0019e6f:	e8 f2 d0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019e74:	83 c4 10             	add    esp,0x10
c0019e77:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c0019e7c:	83 e0 fb             	and    eax,0xfffffffb
c0019e7f:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c0019e84:	b8 00 00 00 00       	mov    eax,0x0
c0019e89:	83 c4 1c             	add    esp,0x1c
c0019e8c:	c3                   	ret    

c0019e8d <HalHandlePageFault(void*, void*)>:
c0019e8d:	83 ec 1c             	sub    esp,0x1c
c0019e90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019e95:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e9a:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019ea0:	0f 20 d2             	mov    edx,cr2
c0019ea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ea7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019eab:	83 ec 08             	sub    esp,0x8
c0019eae:	52                   	push   edx
c0019eaf:	50                   	push   eax
c0019eb0:	e8 11 a3 ff ff       	call   c00141c6 <VAS::tryLoadBackOffDisk(unsigned long)>
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	83 c4 1c             	add    esp,0x1c
c0019ebb:	c3                   	ret    

c0019ebc <HalHandleOpcodeFault(void*, void*)>:
c0019ebc:	83 ec 1c             	sub    esp,0x1c
c0019ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ec3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ec7:	a0 48 eb 02 c0       	mov    al,ds:0xc002eb48
c0019ecc:	0f b6 c0             	movzx  eax,al
c0019ecf:	85 c0                	test   eax,eax
c0019ed1:	74 25                	je     c0019ef8 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019ed3:	83 ec 0c             	sub    esp,0xc
c0019ed6:	68 ec 57 02 c0       	push   0xc00257ec
c0019edb:	e8 86 d0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019ee0:	83 c4 10             	add    esp,0x10
c0019ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ee7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019eea:	8d 50 19             	lea    edx,[eax+0x19]
c0019eed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ef1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019ef4:	b0 01                	mov    al,0x1
c0019ef6:	eb 02                	jmp    c0019efa <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019ef8:	b0 00                	mov    al,0x0
c0019efa:	83 c4 1c             	add    esp,0x1c
c0019efd:	c3                   	ret    

c0019efe <HalDisplayDebugInfo(void*)>:
c0019efe:	83 ec 2c             	sub    esp,0x2c
c0019f01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f09:	0f 20 c0             	mov    eax,cr0
c0019f0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f10:	0f 20 d0             	mov    eax,cr2
c0019f13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f17:	0f 20 d8             	mov    eax,cr3
c0019f1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f1e:	0f 20 e0             	mov    eax,cr4
c0019f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f29:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019f2c:	83 ec 08             	sub    esp,0x8
c0019f2f:	50                   	push   eax
c0019f30:	68 0e 56 02 c0       	push   0xc002560e
c0019f35:	e8 2c d0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019f3a:	83 c4 10             	add    esp,0x10
c0019f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f41:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019f44:	83 ec 08             	sub    esp,0x8
c0019f47:	50                   	push   eax
c0019f48:	68 ff 55 02 c0       	push   0xc00255ff
c0019f4d:	e8 14 d0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019f52:	83 c4 10             	add    esp,0x10
c0019f55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f59:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019f5c:	83 ec 08             	sub    esp,0x8
c0019f5f:	50                   	push   eax
c0019f60:	68 0a 56 02 c0       	push   0xc002560a
c0019f65:	e8 fc cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019f6a:	83 c4 10             	add    esp,0x10
c0019f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019f74:	83 ec 08             	sub    esp,0x8
c0019f77:	50                   	push   eax
c0019f78:	68 19 56 02 c0       	push   0xc0025619
c0019f7d:	e8 e4 cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019f82:	83 c4 10             	add    esp,0x10
c0019f85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f89:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019f8c:	83 ec 08             	sub    esp,0x8
c0019f8f:	50                   	push   eax
c0019f90:	68 24 56 02 c0       	push   0xc0025624
c0019f95:	e8 cc cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019f9a:	83 c4 10             	add    esp,0x10
c0019f9d:	83 ec 08             	sub    esp,0x8
c0019fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fa4:	68 2f 56 02 c0       	push   0xc002562f
c0019fa9:	e8 b8 cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019fae:	83 c4 10             	add    esp,0x10
c0019fb1:	83 ec 08             	sub    esp,0x8
c0019fb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fb8:	68 3a 56 02 c0       	push   0xc002563a
c0019fbd:	e8 a4 cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019fc2:	83 c4 10             	add    esp,0x10
c0019fc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fc9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019fcc:	c1 e0 05             	shl    eax,0x5
c0019fcf:	8d 90 c0 6a 02 c0    	lea    edx,[eax-0x3ffd9540]
c0019fd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fd9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019fdc:	83 ec 04             	sub    esp,0x4
c0019fdf:	52                   	push   edx
c0019fe0:	50                   	push   eax
c0019fe1:	68 45 56 02 c0       	push   0xc0025645
c0019fe6:	e8 7b cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019feb:	83 c4 10             	add    esp,0x10
c0019fee:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019ff3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ff9:	83 ec 0c             	sub    esp,0xc
c0019ffc:	50                   	push   eax
c0019ffd:	e8 ad 84 ff ff       	call   c00124af <setActiveTerminal(VgaText*)>
c001a002:	83 c4 10             	add    esp,0x10
c001a005:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a00a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a010:	83 ec 08             	sub    esp,0x8
c001a013:	68 54 56 02 c0       	push   0xc0025654
c001a018:	50                   	push   eax
c001a019:	e8 ce 87 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a01e:	83 c4 10             	add    esp,0x10
c001a021:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a026:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a02c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a030:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a033:	83 ec 08             	sub    esp,0x8
c001a036:	52                   	push   edx
c001a037:	50                   	push   eax
c001a038:	e8 69 87 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a03d:	83 c4 10             	add    esp,0x10
c001a040:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a045:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a04b:	83 ec 08             	sub    esp,0x8
c001a04e:	68 62 56 02 c0       	push   0xc0025662
c001a053:	50                   	push   eax
c001a054:	e8 93 87 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a061:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a067:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a06c:	8b 12                	mov    edx,DWORD PTR [edx]
c001a06e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a071:	83 c2 0c             	add    edx,0xc
c001a074:	83 ec 08             	sub    esp,0x8
c001a077:	52                   	push   edx
c001a078:	50                   	push   eax
c001a079:	e8 6e 87 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a07e:	83 c4 10             	add    esp,0x10
c001a081:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a086:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a08c:	83 ec 08             	sub    esp,0x8
c001a08f:	68 6b 56 02 c0       	push   0xc002566b
c001a094:	50                   	push   eax
c001a095:	e8 52 87 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a09a:	83 c4 10             	add    esp,0x10
c001a09d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a0a2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a0ac:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a0af:	83 ec 08             	sub    esp,0x8
c001a0b2:	52                   	push   edx
c001a0b3:	50                   	push   eax
c001a0b4:	e8 ed 86 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a0b9:	83 c4 10             	add    esp,0x10
c001a0bc:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a0c1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0c7:	83 ec 08             	sub    esp,0x8
c001a0ca:	68 73 56 02 c0       	push   0xc0025673
c001a0cf:	50                   	push   eax
c001a0d0:	e8 17 87 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a0d5:	83 c4 10             	add    esp,0x10
c001a0d8:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a0dd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a0e7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a0ea:	83 ec 08             	sub    esp,0x8
c001a0ed:	52                   	push   edx
c001a0ee:	50                   	push   eax
c001a0ef:	e8 b2 86 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a0f4:	83 c4 10             	add    esp,0x10
c001a0f7:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a0fc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a102:	83 ec 08             	sub    esp,0x8
c001a105:	68 7b 56 02 c0       	push   0xc002567b
c001a10a:	50                   	push   eax
c001a10b:	e8 dc 86 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a110:	83 c4 10             	add    esp,0x10
c001a113:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a118:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a11e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a122:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a125:	83 ec 08             	sub    esp,0x8
c001a128:	52                   	push   edx
c001a129:	50                   	push   eax
c001a12a:	e8 77 86 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a12f:	83 c4 10             	add    esp,0x10
c001a132:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a137:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a13d:	83 ec 08             	sub    esp,0x8
c001a140:	68 83 56 02 c0       	push   0xc0025683
c001a145:	50                   	push   eax
c001a146:	e8 a1 86 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a14b:	83 c4 10             	add    esp,0x10
c001a14e:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a153:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a159:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a15d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a160:	83 ec 08             	sub    esp,0x8
c001a163:	52                   	push   edx
c001a164:	50                   	push   eax
c001a165:	e8 3c 86 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a16a:	83 c4 10             	add    esp,0x10
c001a16d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a172:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a178:	83 ec 08             	sub    esp,0x8
c001a17b:	68 8b 56 02 c0       	push   0xc002568b
c001a180:	50                   	push   eax
c001a181:	e8 66 86 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a186:	83 c4 10             	add    esp,0x10
c001a189:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a18e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a194:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a198:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a19b:	83 ec 08             	sub    esp,0x8
c001a19e:	52                   	push   edx
c001a19f:	50                   	push   eax
c001a1a0:	e8 01 86 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a1a5:	83 c4 10             	add    esp,0x10
c001a1a8:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a1ad:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1b3:	83 ec 08             	sub    esp,0x8
c001a1b6:	68 93 56 02 c0       	push   0xc0025693
c001a1bb:	50                   	push   eax
c001a1bc:	e8 2b 86 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a1c1:	83 c4 10             	add    esp,0x10
c001a1c4:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a1c9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a1d3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a1d6:	83 ec 08             	sub    esp,0x8
c001a1d9:	52                   	push   edx
c001a1da:	50                   	push   eax
c001a1db:	e8 c6 85 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a1e0:	83 c4 10             	add    esp,0x10
c001a1e3:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a1e8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1ee:	83 ec 08             	sub    esp,0x8
c001a1f1:	68 9b 56 02 c0       	push   0xc002569b
c001a1f6:	50                   	push   eax
c001a1f7:	e8 f0 85 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a1fc:	83 c4 10             	add    esp,0x10
c001a1ff:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a204:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a20a:	83 ec 08             	sub    esp,0x8
c001a20d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a211:	50                   	push   eax
c001a212:	e8 8f 85 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a21f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a225:	83 ec 08             	sub    esp,0x8
c001a228:	68 a4 56 02 c0       	push   0xc00256a4
c001a22d:	50                   	push   eax
c001a22e:	e8 b9 85 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a233:	83 c4 10             	add    esp,0x10
c001a236:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a23b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a241:	83 ec 08             	sub    esp,0x8
c001a244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a248:	50                   	push   eax
c001a249:	e8 58 85 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a24e:	83 c4 10             	add    esp,0x10
c001a251:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a256:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a25c:	83 ec 08             	sub    esp,0x8
c001a25f:	68 ac 56 02 c0       	push   0xc00256ac
c001a264:	50                   	push   eax
c001a265:	e8 82 85 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a26a:	83 c4 10             	add    esp,0x10
c001a26d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001a272:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a278:	83 ec 08             	sub    esp,0x8
c001a27b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a27f:	50                   	push   eax
c001a280:	e8 21 85 ff ff       	call   c00127a6 <VgaText::putx(unsigned int)>
c001a285:	83 c4 10             	add    esp,0x10
c001a288:	fa                   	cli    
c001a289:	f4                   	hlt    
c001a28a:	eb fe                	jmp    c001a28a <HalDisplayDebugInfo(void*)+0x38c>

c001a28c <HalReceivedNMI()>:
c001a28c:	83 ec 1c             	sub    esp,0x1c
c001a28f:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a29a:	89 c2                	mov    edx,eax
c001a29c:	ec                   	in     al,dx
c001a29d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a2a1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a2a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a2a9:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a2b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a2b4:	89 c2                	mov    edx,eax
c001a2b6:	ec                   	in     al,dx
c001a2b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a2bb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a2bf:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a2c3:	83 ec 0c             	sub    esp,0xc
c001a2c6:	68 b4 56 02 c0       	push   0xc00256b4
c001a2cb:	e8 96 cc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a2d0:	83 c4 10             	add    esp,0x10
c001a2d3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a2d8:	83 e0 10             	and    eax,0x10
c001a2db:	74 10                	je     c001a2ed <HalReceivedNMI()+0x61>
c001a2dd:	83 ec 0c             	sub    esp,0xc
c001a2e0:	68 c5 56 02 c0       	push   0xc00256c5
c001a2e5:	e8 18 5b ff ff       	call   c000fe02 <KePanic(char const*)>
c001a2ea:	83 c4 10             	add    esp,0x10
c001a2ed:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a2f2:	83 e0 40             	and    eax,0x40
c001a2f5:	74 10                	je     c001a307 <HalReceivedNMI()+0x7b>
c001a2f7:	83 ec 0c             	sub    esp,0xc
c001a2fa:	68 d2 56 02 c0       	push   0xc00256d2
c001a2ff:	e8 fe 5a ff ff       	call   c000fe02 <KePanic(char const*)>
c001a304:	83 c4 10             	add    esp,0x10
c001a307:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a30b:	0f be c0             	movsx  eax,al
c001a30e:	85 c0                	test   eax,eax
c001a310:	79 10                	jns    c001a322 <HalReceivedNMI()+0x96>
c001a312:	83 ec 0c             	sub    esp,0xc
c001a315:	68 dc 56 02 c0       	push   0xc00256dc
c001a31a:	e8 e3 5a ff ff       	call   c000fe02 <KePanic(char const*)>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	90                   	nop
c001a323:	83 c4 1c             	add    esp,0x1c
c001a326:	c3                   	ret    

c001a327 <HalSystemIdle()>:
c001a327:	56                   	push   esi
c001a328:	53                   	push   ebx
c001a329:	83 ec 14             	sub    esp,0x14
c001a32c:	a0 50 eb 02 c0       	mov    al,ds:0xc002eb50
c001a331:	83 e0 10             	and    eax,0x10
c001a334:	0f b6 c0             	movzx  eax,al
c001a337:	85 c0                	test   eax,eax
c001a339:	74 43                	je     c001a37e <HalSystemIdle()+0x57>
c001a33b:	83 ec 0c             	sub    esp,0xc
c001a33e:	68 e1 00 00 00       	push   0xe1
c001a343:	e8 cf f9 ff ff       	call   c0019d17 <x86rdmsr(unsigned int)>
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a34f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a353:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a357:	83 e0 02             	and    eax,0x2
c001a35a:	89 c3                	mov    ebx,eax
c001a35c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a360:	83 e0 00             	and    eax,0x0
c001a363:	89 c6                	mov    esi,eax
c001a365:	83 ec 04             	sub    esp,0x4
c001a368:	56                   	push   esi
c001a369:	53                   	push   ebx
c001a36a:	68 e1 00 00 00       	push   0xe1
c001a36f:	e8 e1 f9 ff ff       	call   c0019d55 <x86wrmsr(unsigned int, unsigned long long)>
c001a374:	83 c4 10             	add    esp,0x10
c001a377:	e8 18 5e fe ff       	call   c0000194 <doTPAUSE>
c001a37c:	eb 01                	jmp    c001a37f <HalSystemIdle()+0x58>
c001a37e:	f4                   	hlt    
c001a37f:	90                   	nop
c001a380:	83 c4 14             	add    esp,0x14
c001a383:	5b                   	pop    ebx
c001a384:	5e                   	pop    esi
c001a385:	c3                   	ret    

c001a386 <i386SaveCoprocessor(void*)>:
c001a386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a38a:	83 c0 3f             	add    eax,0x3f
c001a38d:	83 e0 c0             	and    eax,0xffffffc0
c001a390:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a394:	ff 25 10 eb 02 c0    	jmp    DWORD PTR ds:0xc002eb10

c001a39a <i386LoadCoprocessor(void*)>:
c001a39a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a39e:	83 c0 3f             	add    eax,0x3f
c001a3a1:	83 e0 c0             	and    eax,0xffffffc0
c001a3a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3a8:	ff 25 0c eb 02 c0    	jmp    DWORD PTR ds:0xc002eb0c

c001a3ae <x87EmulHandler(regs*, void*)>:
c001a3ae:	53                   	push   ebx
c001a3af:	83 ec 08             	sub    esp,0x8
c001a3b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3b7:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a3bb:	74 10                	je     c001a3cd <x87EmulHandler(regs*, void*)+0x1f>
c001a3bd:	83 ec 0c             	sub    esp,0xc
c001a3c0:	68 e9 56 02 c0       	push   0xc00256e9
c001a3c5:	e8 38 5a ff ff       	call   c000fe02 <KePanic(char const*)>
c001a3ca:	83 c4 10             	add    esp,0x10
c001a3cd:	0f 20 c0             	mov    eax,cr0
c001a3d0:	a8 08                	test   al,0x8
c001a3d2:	74 59                	je     c001a42d <x87EmulHandler(regs*, void*)+0x7f>
c001a3d4:	0f 06                	clts   
c001a3d6:	a1 08 eb 02 c0       	mov    eax,ds:0xc002eb08
c001a3db:	85 c0                	test   eax,eax
c001a3dd:	74 0e                	je     c001a3ed <x87EmulHandler(regs*, void*)+0x3f>
c001a3df:	83 ec 0c             	sub    esp,0xc
c001a3e2:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a3e5:	e8 9c ff ff ff       	call   c001a386 <i386SaveCoprocessor(void*)>
c001a3ea:	83 c4 10             	add    esp,0x10
c001a3ed:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a3f3:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a3f7:	75 12                	jne    c001a40b <x87EmulHandler(regs*, void*)+0x5d>
c001a3f9:	83 ec 0c             	sub    esp,0xc
c001a3fc:	68 40 02 00 00       	push   0x240
c001a401:	e8 a6 55 ff ff       	call   c000f9ac <malloc>
c001a406:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a409:	eb 10                	jmp    c001a41b <x87EmulHandler(regs*, void*)+0x6d>
c001a40b:	a1 08 eb 02 c0       	mov    eax,ds:0xc002eb08
c001a410:	83 ec 0c             	sub    esp,0xc
c001a413:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a416:	e8 7f ff ff ff       	call   c001a39a <i386LoadCoprocessor(void*)>
c001a41b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	a3 08 eb 02 c0       	mov    ds:0xc002eb08,eax
c001a428:	83 c4 08             	add    esp,0x8
c001a42b:	5b                   	pop    ebx
c001a42c:	c3                   	ret    
c001a42d:	83 ec 0c             	sub    esp,0xc
c001a430:	68 fd 56 02 c0       	push   0xc00256fd
c001a435:	e8 2c cb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a43a:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a442:	83 c4 18             	add    esp,0x18
c001a445:	5b                   	pop    ebx
c001a446:	e9 e9 d2 ff ff       	jmp    c0017734 <KeTerminateCurrentThread(int)>

c001a44b <HalInitialiseCoprocessor()>:
c001a44b:	83 ec 10             	sub    esp,0x10
c001a44e:	6a 00                	push   0x0
c001a450:	68 ae a3 01 c0       	push   0xc001a3ae
c001a455:	6a 07                	push   0x7
c001a457:	c7 05 08 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb08,0x0
c001a461:	e8 ff 06 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a466:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c001a46b:	83 c4 10             	add    esp,0x10
c001a46e:	a8 80                	test   al,0x80
c001a470:	74 1c                	je     c001a48e <HalInitialiseCoprocessor()+0x43>
c001a472:	c7 05 10 eb 02 c0 48 17 02 c0 	mov    DWORD PTR ds:0xc002eb10,0xc0021748
c001a47c:	c7 05 0c eb 02 c0 50 17 02 c0 	mov    DWORD PTR ds:0xc002eb0c,0xc0021750
c001a486:	83 c4 0c             	add    esp,0xc
c001a489:	e9 ca 72 00 00       	jmp    c0021758 <sseInit>
c001a48e:	a8 10                	test   al,0x10
c001a490:	74 1c                	je     c001a4ae <HalInitialiseCoprocessor()+0x63>
c001a492:	c7 05 10 eb 02 c0 97 17 02 c0 	mov    DWORD PTR ds:0xc002eb10,0xc0021797
c001a49c:	c7 05 0c eb 02 c0 9e 17 02 c0 	mov    DWORD PTR ds:0xc002eb0c,0xc002179e
c001a4a6:	83 c4 0c             	add    esp,0xc
c001a4a9:	e9 f7 72 00 00       	jmp    c00217a5 <x87Init>
c001a4ae:	c7 05 10 eb 02 c0 e8 8b 01 c0 	mov    DWORD PTR ds:0xc002eb10,0xc0018be8
c001a4b8:	c7 05 0c eb 02 c0 e8 8b 01 c0 	mov    DWORD PTR ds:0xc002eb0c,0xc0018be8
c001a4c2:	0f 20 c0             	mov    eax,cr0
c001a4c5:	83 c8 04             	or     eax,0x4
c001a4c8:	0f 22 c0             	mov    cr0,eax
c001a4cb:	83 c4 0c             	add    esp,0xc
c001a4ce:	c3                   	ret    

c001a4cf <HalPanic(char const*)>:
c001a4cf:	53                   	push   ebx
c001a4d0:	83 ec 10             	sub    esp,0x10
c001a4d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4d7:	fa                   	cli    
c001a4d8:	53                   	push   ebx
c001a4d9:	68 13 57 02 c0       	push   0xc0025713
c001a4de:	e8 83 ca fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a4e3:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c001a4e8:	83 c4 10             	add    esp,0x10
c001a4eb:	85 c0                	test   eax,eax
c001a4ed:	74 09                	je     c001a4f8 <HalPanic(char const*)+0x29>
c001a4ef:	83 ec 0c             	sub    esp,0xc
c001a4f2:	53                   	push   ebx
c001a4f3:	ff d0                	call   eax
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c001a4fd:	85 c0                	test   eax,eax
c001a4ff:	0f 84 dc 00 00 00    	je     c001a5e1 <HalPanic(char const*)+0x112>
c001a505:	52                   	push   edx
c001a506:	6a 01                	push   0x1
c001a508:	6a 0f                	push   0xf
c001a50a:	50                   	push   eax
c001a50b:	e8 de 7d ff ff       	call   c00122ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a510:	59                   	pop    ecx
c001a511:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a517:	e8 de 7f ff ff       	call   c00124fa <VgaText::clearScreen()>
c001a51c:	58                   	pop    eax
c001a51d:	5a                   	pop    edx
c001a51e:	68 99 46 02 c0       	push   0xc0024699
c001a523:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a529:	e8 f8 7d ff ff       	call   c0012326 <VgaText::setTitle(char*)>
c001a52e:	83 c4 0c             	add    esp,0xc
c001a531:	6a 01                	push   0x1
c001a533:	6a 0f                	push   0xf
c001a535:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a53b:	e8 ae 7d ff ff       	call   c00122ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a540:	59                   	pop    ecx
c001a541:	58                   	pop    eax
c001a542:	68 2c 57 02 c0       	push   0xc002572c
c001a547:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a54d:	e8 9a 82 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a552:	83 c4 0c             	add    esp,0xc
c001a555:	6a 0f                	push   0xf
c001a557:	6a 01                	push   0x1
c001a559:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a55f:	e8 8a 7d ff ff       	call   c00122ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a564:	58                   	pop    eax
c001a565:	5a                   	pop    edx
c001a566:	68 35 57 02 c0       	push   0xc0025735
c001a56b:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a571:	e8 76 82 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a576:	83 c4 0c             	add    esp,0xc
c001a579:	6a 01                	push   0x1
c001a57b:	6a 0f                	push   0xf
c001a57d:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a583:	e8 66 7d ff ff       	call   c00122ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a588:	59                   	pop    ecx
c001a589:	58                   	pop    eax
c001a58a:	68 79 57 02 c0       	push   0xc0025779
c001a58f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a595:	e8 52 82 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a59a:	58                   	pop    eax
c001a59b:	5a                   	pop    edx
c001a59c:	68 42 57 02 c0       	push   0xc0025742
c001a5a1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a5a7:	e8 40 82 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a5ac:	59                   	pop    ecx
c001a5ad:	58                   	pop    eax
c001a5ae:	68 7c 57 02 c0       	push   0xc002577c
c001a5b3:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a5b9:	e8 2e 82 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a5be:	58                   	pop    eax
c001a5bf:	5a                   	pop    edx
c001a5c0:	53                   	push   ebx
c001a5c1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a5c7:	e8 20 82 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a5cc:	59                   	pop    ecx
c001a5cd:	5b                   	pop    ebx
c001a5ce:	68 79 57 02 c0       	push   0xc0025779
c001a5d3:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a5d9:	e8 0e 82 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001a5de:	83 c4 10             	add    esp,0x10
c001a5e1:	eb fe                	jmp    c001a5e1 <HalPanic(char const*)+0x112>

c001a5e3 <HalQueryPerformanceCounter()>:
c001a5e3:	31 c0                	xor    eax,eax
c001a5e5:	31 d2                	xor    edx,edx
c001a5e7:	f6 05 4e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb4e,0x8
c001a5ee:	75 02                	jne    c001a5f2 <HalQueryPerformanceCounter()+0xf>
c001a5f0:	0f 31                	rdtsc  
c001a5f2:	c3                   	ret    

c001a5f3 <HalInitialise()>:
c001a5f3:	53                   	push   ebx
c001a5f4:	83 ec 08             	sub    esp,0x8
c001a5f7:	e8 04 e9 ff ff       	call   c0018f00 <HalDetectFeatures()>
c001a5fc:	83 ec 0c             	sub    esp,0xc
c001a5ff:	68 e9 8b 01 c0       	push   0xc0018be9
c001a604:	e8 e1 61 ff ff       	call   c00107ea <KeRegisterRestartHandler(void (*)())>
c001a609:	c7 04 24 f4 8b 01 c0 	mov    DWORD PTR [esp],0xc0018bf4
c001a610:	e8 cb 61 ff ff       	call   c00107e0 <KeRegisterShutdownHandler(void (*)())>
c001a615:	c7 04 24 f5 8b 01 c0 	mov    DWORD PTR [esp],0xc0018bf5
c001a61c:	e8 d3 61 ff ff       	call   c00107f4 <KeRegisterSleepHandler(void (*)())>
c001a621:	e8 5e 1d ff ff       	call   c000c384 <scanMADT()>
c001a626:	83 c4 10             	add    esp,0x10
c001a629:	80 3d 40 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be40,0x0
c001a630:	75 0d                	jne    c001a63f <HalInitialise()+0x4c>
c001a632:	a0 4c eb 02 c0       	mov    al,ds:0xc002eb4c
c001a637:	83 e0 fe             	and    eax,0xfffffffe
c001a63a:	a2 4c eb 02 c0       	mov    ds:0xc002eb4c,al
c001a63f:	e8 08 08 00 00       	call   c001ae4c <picOpen()>
c001a644:	f6 05 4c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb4c,0x1
c001a64b:	74 0a                	je     c001a657 <HalInitialise()+0x64>
c001a64d:	e8 4a 07 00 00       	call   c001ad9c <picDisable()>
c001a652:	e8 99 e1 ff ff       	call   c00187f0 <apicOpen()>
c001a657:	50                   	push   eax
c001a658:	bb 0f 00 00 00       	mov    ebx,0xf
c001a65d:	6a 00                	push   0x0
c001a65f:	68 48 ea 00 c0       	push   0xc000ea48
c001a664:	6a 02                	push   0x2
c001a666:	e8 fa 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a66b:	83 c4 0c             	add    esp,0xc
c001a66e:	6a 00                	push   0x0
c001a670:	68 8c ea 00 c0       	push   0xc000ea8c
c001a675:	6a 06                	push   0x6
c001a677:	e8 e9 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a67c:	83 c4 0c             	add    esp,0xc
c001a67f:	6a 00                	push   0x0
c001a681:	68 e0 ea 00 c0       	push   0xc000eae0
c001a686:	6a 08                	push   0x8
c001a688:	e8 d8 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a68d:	83 c4 0c             	add    esp,0xc
c001a690:	6a 00                	push   0x0
c001a692:	68 80 e9 00 c0       	push   0xc000e980
c001a697:	6a 0d                	push   0xd
c001a699:	e8 c7 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a69e:	83 c4 0c             	add    esp,0xc
c001a6a1:	6a 00                	push   0x0
c001a6a3:	68 e4 e9 00 c0       	push   0xc000e9e4
c001a6a8:	6a 0e                	push   0xe
c001a6aa:	e8 b6 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a6af:	83 c4 0c             	add    esp,0xc
c001a6b2:	6a 00                	push   0x0
c001a6b4:	68 58 ea 00 c0       	push   0xc000ea58
c001a6b9:	6a 00                	push   0x0
c001a6bb:	e8 a5 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a6c0:	83 c4 0c             	add    esp,0xc
c001a6c3:	6a 00                	push   0x0
c001a6c5:	68 58 ea 00 c0       	push   0xc000ea58
c001a6ca:	6a 01                	push   0x1
c001a6cc:	e8 94 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a6d1:	83 c4 0c             	add    esp,0xc
c001a6d4:	6a 00                	push   0x0
c001a6d6:	68 58 ea 00 c0       	push   0xc000ea58
c001a6db:	6a 03                	push   0x3
c001a6dd:	e8 83 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a6e2:	83 c4 0c             	add    esp,0xc
c001a6e5:	6a 00                	push   0x0
c001a6e7:	68 58 ea 00 c0       	push   0xc000ea58
c001a6ec:	6a 04                	push   0x4
c001a6ee:	e8 72 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a6f3:	83 c4 0c             	add    esp,0xc
c001a6f6:	6a 00                	push   0x0
c001a6f8:	68 58 ea 00 c0       	push   0xc000ea58
c001a6fd:	6a 05                	push   0x5
c001a6ff:	e8 61 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a704:	83 c4 0c             	add    esp,0xc
c001a707:	6a 00                	push   0x0
c001a709:	68 58 ea 00 c0       	push   0xc000ea58
c001a70e:	6a 00                	push   0x0
c001a710:	e8 50 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a715:	83 c4 0c             	add    esp,0xc
c001a718:	6a 00                	push   0x0
c001a71a:	68 58 ea 00 c0       	push   0xc000ea58
c001a71f:	6a 01                	push   0x1
c001a721:	e8 3f 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a726:	83 c4 0c             	add    esp,0xc
c001a729:	6a 00                	push   0x0
c001a72b:	68 58 ea 00 c0       	push   0xc000ea58
c001a730:	6a 09                	push   0x9
c001a732:	e8 2e 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a737:	83 c4 0c             	add    esp,0xc
c001a73a:	6a 00                	push   0x0
c001a73c:	68 58 ea 00 c0       	push   0xc000ea58
c001a741:	6a 0a                	push   0xa
c001a743:	e8 1d 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a748:	83 c4 0c             	add    esp,0xc
c001a74b:	6a 00                	push   0x0
c001a74d:	68 58 ea 00 c0       	push   0xc000ea58
c001a752:	6a 0b                	push   0xb
c001a754:	e8 0c 04 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a759:	83 c4 10             	add    esp,0x10
c001a75c:	50                   	push   eax
c001a75d:	6a 00                	push   0x0
c001a75f:	68 58 ea 00 c0       	push   0xc000ea58
c001a764:	53                   	push   ebx
c001a765:	43                   	inc    ebx
c001a766:	e8 fa 03 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a76b:	83 c4 10             	add    esp,0x10
c001a76e:	83 fb 1e             	cmp    ebx,0x1e
c001a771:	75 e9                	jne    c001a75c <HalInitialise()+0x169>
c001a773:	50                   	push   eax
c001a774:	6a 00                	push   0x0
c001a776:	68 88 21 01 c0       	push   0xc0012188
c001a77b:	6a 60                	push   0x60
c001a77d:	e8 e3 03 00 00       	call   c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a782:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c001a787:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a791:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a798:	e8 0f 52 ff ff       	call   c000f9ac <malloc>
c001a79d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7a0:	89 c3                	mov    ebx,eax
c001a7a2:	e8 0d 0e 00 00       	call   c001b5b4 <RTC::RTC()>
c001a7a7:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a7b1:	5a                   	pop    edx
c001a7b2:	59                   	pop    ecx
c001a7b3:	53                   	push   ebx
c001a7b4:	ff 35 c8 c0 02 c0    	push   DWORD PTR ds:0xc002c0c8
c001a7ba:	e8 37 f2 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001a7bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7c1:	6a 00                	push   0x0
c001a7c3:	6a 00                	push   0x0
c001a7c5:	6a 00                	push   0x0
c001a7c7:	53                   	push   ebx
c001a7c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7cb:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c001a7d0:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001a7d6:	83 c4 28             	add    esp,0x28
c001a7d9:	5b                   	pop    ebx
c001a7da:	c3                   	ret    

c001a7db <HalMakeBeep(int)>:
c001a7db:	53                   	push   ebx
c001a7dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a7e0:	85 db                	test   ebx,ebx
c001a7e2:	75 07                	jne    c001a7eb <HalMakeBeep(int)+0x10>
c001a7e4:	e4 61                	in     al,0x61
c001a7e6:	83 e0 fc             	and    eax,0xfffffffc
c001a7e9:	eb 26                	jmp    c001a811 <HalMakeBeep(int)+0x36>
c001a7eb:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a7f0:	99                   	cdq    
c001a7f1:	f7 fb                	idiv   ebx
c001a7f3:	89 c1                	mov    ecx,eax
c001a7f5:	b0 b6                	mov    al,0xb6
c001a7f7:	e6 43                	out    0x43,al
c001a7f9:	88 c8                	mov    al,cl
c001a7fb:	e6 42                	out    0x42,al
c001a7fd:	89 c8                	mov    eax,ecx
c001a7ff:	c1 e8 08             	shr    eax,0x8
c001a802:	e6 42                	out    0x42,al
c001a804:	e4 61                	in     al,0x61
c001a806:	89 c2                	mov    edx,eax
c001a808:	83 ca 03             	or     edx,0x3
c001a80b:	38 d0                	cmp    al,dl
c001a80d:	74 04                	je     c001a813 <HalMakeBeep(int)+0x38>
c001a80f:	88 d0                	mov    al,dl
c001a811:	e6 61                	out    0x61,al
c001a813:	5b                   	pop    ebx
c001a814:	c3                   	ret    

c001a815 <HalGetRand()>:
c001a815:	31 c0                	xor    eax,eax
c001a817:	c3                   	ret    

c001a818 <HalEndOfInterrupt(int)>:
c001a818:	f6 05 4c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb4c,0x1
c001a81f:	74 1d                	je     c001a83e <HalEndOfInterrupt(int)+0x26>
c001a821:	83 ec 18             	sub    esp,0x18
c001a824:	6a 1b                	push   0x1b
c001a826:	e8 ec f4 ff ff       	call   c0019d17 <x86rdmsr(unsigned int)>
c001a82b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a830:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a83a:	83 c4 1c             	add    esp,0x1c
c001a83d:	c3                   	ret    
c001a83e:	e9 8d 07 00 00       	jmp    c001afd0 <picEOI(int)>
c001a843:	90                   	nop

c001a844 <CPU::CPU()>:
c001a844:	83 ec 0c             	sub    esp,0xc
c001a847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a84b:	83 ec 08             	sub    esp,0x8
c001a84e:	68 1a 55 02 c0       	push   0xc002551a
c001a853:	50                   	push   eax
c001a854:	e8 ff f2 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001a859:	83 c4 10             	add    esp,0x10
c001a85c:	ba 18 58 02 c0       	mov    edx,0xc0025818
c001a861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a865:	89 10                	mov    DWORD PTR [eax],edx
c001a867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a879:	05 64 01 00 00       	add    eax,0x164
c001a87e:	83 ec 0c             	sub    esp,0xc
c001a881:	50                   	push   eax
c001a882:	e8 ad 42 ff ff       	call   c000eb34 <GDT::GDT()>
c001a887:	83 c4 10             	add    esp,0x10
c001a88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a88e:	05 68 09 00 00       	add    eax,0x968
c001a893:	83 ec 0c             	sub    esp,0xc
c001a896:	50                   	push   eax
c001a897:	e8 ec 44 ff ff       	call   c000ed88 <IDT::IDT()>
c001a89c:	83 c4 10             	add    esp,0x10
c001a89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a3:	05 68 11 00 00       	add    eax,0x1168
c001a8a8:	83 ec 0c             	sub    esp,0xc
c001a8ab:	50                   	push   eax
c001a8ac:	e8 f7 83 ff ff       	call   c0012ca8 <TSS::TSS()>
c001a8b1:	83 c4 10             	add    esp,0x10
c001a8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b8:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a8c2:	90                   	nop
c001a8c3:	83 c4 0c             	add    esp,0xc
c001a8c6:	c3                   	ret    
c001a8c7:	90                   	nop

c001a8c8 <CPU::setupSMEP()>:
c001a8c8:	0f 20 e0             	mov    eax,cr4
c001a8cb:	0d 00 00 10 00       	or     eax,0x100000
c001a8d0:	0f 22 e0             	mov    cr4,eax
c001a8d3:	c3                   	ret    

c001a8d4 <CPU::setupUMIP()>:
c001a8d4:	0f 20 e0             	mov    eax,cr4
c001a8d7:	80 cc 08             	or     ah,0x8
c001a8da:	0f 22 e0             	mov    cr4,eax
c001a8dd:	c3                   	ret    

c001a8de <CPU::setupTSC()>:
c001a8de:	0f 20 e0             	mov    eax,cr4
c001a8e1:	83 c8 04             	or     eax,0x4
c001a8e4:	0f 22 e0             	mov    cr4,eax
c001a8e7:	c3                   	ret    

c001a8e8 <CPU::setupLargePages()>:
c001a8e8:	0f 20 e0             	mov    eax,cr4
c001a8eb:	83 c8 10             	or     eax,0x10
c001a8ee:	0f 22 e0             	mov    cr4,eax
c001a8f1:	c3                   	ret    

c001a8f2 <CPU::setupPAT()>:
c001a8f2:	f6 05 4c eb 02 c0 08 	test   BYTE PTR ds:0xc002eb4c,0x8
c001a8f9:	74 28                	je     c001a923 <CPU::setupPAT()+0x31>
c001a8fb:	53                   	push   ebx
c001a8fc:	83 ec 14             	sub    esp,0x14
c001a8ff:	68 77 02 00 00       	push   0x277
c001a904:	e8 0e f4 ff ff       	call   c0019d17 <x86rdmsr(unsigned int)>
c001a909:	83 c4 0c             	add    esp,0xc
c001a90c:	83 e2 f8             	and    edx,0xfffffff8
c001a90f:	83 ca 01             	or     edx,0x1
c001a912:	52                   	push   edx
c001a913:	50                   	push   eax
c001a914:	68 77 02 00 00       	push   0x277
c001a919:	e8 37 f4 ff ff       	call   c0019d55 <x86wrmsr(unsigned int, unsigned long long)>
c001a91e:	83 c4 18             	add    esp,0x18
c001a921:	5b                   	pop    ebx
c001a922:	c3                   	ret    
c001a923:	c3                   	ret    

c001a924 <CPU::setupMTRR()>:
c001a924:	c3                   	ret    
c001a925:	90                   	nop

c001a926 <CPU::setupGlobalPages()>:
c001a926:	0f 20 e0             	mov    eax,cr4
c001a929:	0c 80                	or     al,0x80
c001a92b:	0f 22 e0             	mov    cr4,eax
c001a92e:	c3                   	ret    
c001a92f:	90                   	nop

c001a930 <CPU::allowUsermodeDataAccess()>:
c001a930:	f6 05 4f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb4f,0x40
c001a937:	74 03                	je     c001a93c <CPU::allowUsermodeDataAccess()+0xc>
c001a939:	0f 01 cb             	stac   
c001a93c:	c3                   	ret    
c001a93d:	90                   	nop

c001a93e <CPU::prohibitUsermodeDataAccess()>:
c001a93e:	f6 05 4f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb4f,0x40
c001a945:	74 03                	je     c001a94a <CPU::prohibitUsermodeDataAccess()+0xc>
c001a947:	0f 01 ca             	clac   
c001a94a:	c3                   	ret    
c001a94b:	90                   	nop

c001a94c <CPU::setupSMAP()>:
c001a94c:	0f 20 e0             	mov    eax,cr4
c001a94f:	0d 00 00 20 00       	or     eax,0x200000
c001a954:	0f 22 e0             	mov    cr4,eax
c001a957:	eb e5                	jmp    c001a93e <CPU::prohibitUsermodeDataAccess()>
c001a959:	90                   	nop

c001a95a <CPU::setupFeatures()>:
c001a95a:	53                   	push   ebx
c001a95b:	83 ec 08             	sub    esp,0x8
c001a95e:	f6 05 4f eb 02 c0 20 	test   BYTE PTR ds:0xc002eb4f,0x20
c001a965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a969:	74 18                	je     c001a983 <CPU::setupFeatures()+0x29>
c001a96b:	83 ec 0c             	sub    esp,0xc
c001a96e:	68 87 57 02 c0       	push   0xc0025787
c001a973:	e8 ee c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a978:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a97b:	e8 54 ff ff ff       	call   c001a8d4 <CPU::setupUMIP()>
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	f6 05 4e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb4e,0x8
c001a98a:	74 18                	je     c001a9a4 <CPU::setupFeatures()+0x4a>
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	68 91 57 02 c0       	push   0xc0025791
c001a994:	e8 cd c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a99c:	e8 3d ff ff ff       	call   c001a8de <CPU::setupTSC()>
c001a9a1:	83 c4 10             	add    esp,0x10
c001a9a4:	f6 05 4e eb 02 c0 20 	test   BYTE PTR ds:0xc002eb4e,0x20
c001a9ab:	74 18                	je     c001a9c5 <CPU::setupFeatures()+0x6b>
c001a9ad:	83 ec 0c             	sub    esp,0xc
c001a9b0:	68 9a 57 02 c0       	push   0xc002579a
c001a9b5:	e8 ac c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a9ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9bd:	e8 26 ff ff ff       	call   c001a8e8 <CPU::setupLargePages()>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	f6 05 4e eb 02 c0 40 	test   BYTE PTR ds:0xc002eb4e,0x40
c001a9cc:	74 18                	je     c001a9e6 <CPU::setupFeatures()+0x8c>
c001a9ce:	83 ec 0c             	sub    esp,0xc
c001a9d1:	68 a3 57 02 c0       	push   0xc00257a3
c001a9d6:	e8 8b c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a9db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9de:	e8 43 ff ff ff       	call   c001a926 <CPU::setupGlobalPages()>
c001a9e3:	83 c4 10             	add    esp,0x10
c001a9e6:	f6 05 4e eb 02 c0 80 	test   BYTE PTR ds:0xc002eb4e,0x80
c001a9ed:	74 18                	je     c001aa07 <CPU::setupFeatures()+0xad>
c001a9ef:	83 ec 0c             	sub    esp,0xc
c001a9f2:	68 b5 57 02 c0       	push   0xc00257b5
c001a9f7:	e8 6a c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a9fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9ff:	e8 ee fe ff ff       	call   c001a8f2 <CPU::setupPAT()>
c001aa04:	83 c4 10             	add    esp,0x10
c001aa07:	f6 05 50 eb 02 c0 04 	test   BYTE PTR ds:0xc002eb50,0x4
c001aa0e:	74 11                	je     c001aa21 <CPU::setupFeatures()+0xc7>
c001aa10:	c7 44 24 10 be 57 02 c0 	mov    DWORD PTR [esp+0x10],0xc00257be
c001aa18:	83 c4 08             	add    esp,0x8
c001aa1b:	5b                   	pop    ebx
c001aa1c:	e9 45 c5 fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001aa21:	83 c4 08             	add    esp,0x8
c001aa24:	5b                   	pop    ebx
c001aa25:	c3                   	ret    

c001aa26 <CPU::open(int, int, void*)>:
c001aa26:	55                   	push   ebp
c001aa27:	57                   	push   edi
c001aa28:	56                   	push   esi
c001aa29:	53                   	push   ebx
c001aa2a:	83 ec 18             	sub    esp,0x18
c001aa2d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa31:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aa35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001aa39:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001aa3f:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001aa45:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001aa4b:	50                   	push   eax
c001aa4c:	e8 45 41 ff ff       	call   c000eb96 <GDT::setup()>
c001aa51:	83 c4 0c             	add    esp,0xc
c001aa54:	6a 00                	push   0x0
c001aa56:	68 ef be ad de       	push   0xdeadbeef
c001aa5b:	55                   	push   ebp
c001aa5c:	e8 8b 82 ff ff       	call   c0012cec <TSS::setup(unsigned long, unsigned long)>
c001aa61:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aa64:	e8 63 82 ff ff       	call   c0012ccc <TSS::flush()>
c001aa69:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001aa6f:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa72:	e8 87 43 ff ff       	call   c000edfe <IDT::setup()>
c001aa77:	b8 00 04 00 00       	mov    eax,0x400
c001aa7c:	0f 23 f8             	mov    dr7,eax
c001aa7f:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001aa89:	e8 6e 55 ff ff       	call   c000fffc <Phys::allocatePage()>
c001aa8e:	83 c4 10             	add    esp,0x10
c001aa91:	85 f6                	test   esi,esi
c001aa93:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001aa99:	89 38                	mov    DWORD PTR [eax],edi
c001aa9b:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001aaa1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001aaa4:	74 10                	je     c001aab6 <CPU::open(int, int, void*)+0x90>
c001aaa6:	50                   	push   eax
c001aaa7:	50                   	push   eax
c001aaa8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001aaae:	56                   	push   esi
c001aaaf:	e8 da 8b ff ff       	call   c001368e <VAS::setCPUSpecific(unsigned long)>
c001aab4:	eb 0d                	jmp    c001aac3 <CPU::open(int, int, void*)+0x9d>
c001aab6:	83 ec 0c             	sub    esp,0xc
c001aab9:	68 c8 57 02 c0       	push   0xc00257c8
c001aabe:	e8 3f 53 ff ff       	call   c000fe02 <KePanic(char const*)>
c001aac3:	83 c4 10             	add    esp,0x10
c001aac6:	83 ec 0c             	sub    esp,0xc
c001aac9:	68 d6 57 02 c0       	push   0xc00257d6
c001aace:	e8 62 27 ff ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001aad3:	e8 1b fb ff ff       	call   c001a5f3 <HalInitialise()>
c001aad8:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001aadf:	e8 04 27 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001aae4:	0f b6 c0             	movzx  eax,al
c001aae7:	83 f8 01             	cmp    eax,0x1
c001aaea:	19 c0                	sbb    eax,eax
c001aaec:	83 e0 46             	and    eax,0x46
c001aaef:	83 c0 1e             	add    eax,0x1e
c001aaf2:	89 04 24             	mov    DWORD PTR [esp],eax
c001aaf5:	e8 97 05 ff ff       	call   c000b091 <setupTimer(int)>
c001aafa:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001ab00:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001ab07:	e8 dc 26 ff ff       	call   c000d1e8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ab0c:	83 c4 10             	add    esp,0x10
c001ab0f:	84 c0                	test   al,al
c001ab11:	74 0c                	je     c001ab1f <CPU::open(int, int, void*)+0xf9>
c001ab13:	83 ec 0c             	sub    esp,0xc
c001ab16:	53                   	push   ebx
c001ab17:	e8 3e fe ff ff       	call   c001a95a <CPU::setupFeatures()>
c001ab1c:	83 c4 10             	add    esp,0x10
c001ab1f:	83 c4 0c             	add    esp,0xc
c001ab22:	31 c0                	xor    eax,eax
c001ab24:	5b                   	pop    ebx
c001ab25:	5e                   	pop    esi
c001ab26:	5f                   	pop    edi
c001ab27:	5d                   	pop    ebp
c001ab28:	c3                   	ret    

c001ab29 <convertLegacyIRQNumber(int)>:
c001ab29:	83 ec 0c             	sub    esp,0xc
c001ab2c:	f6 05 4c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb4c,0x1
c001ab33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab37:	74 0c                	je     c001ab45 <convertLegacyIRQNumber(int)+0x1c>
c001ab39:	83 f8 0f             	cmp    eax,0xf
c001ab3c:	7f 0b                	jg     c001ab49 <convertLegacyIRQNumber(int)+0x20>
c001ab3e:	0f b6 80 28 63 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9cd8]
c001ab45:	83 c4 0c             	add    esp,0xc
c001ab48:	c3                   	ret    
c001ab49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab4d:	83 ec 0c             	sub    esp,0xc
c001ab50:	68 3c 58 02 c0       	push   0xc002583c
c001ab55:	e8 a8 52 ff ff       	call   c000fe02 <KePanic(char const*)>
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab61:	83 c4 0c             	add    esp,0xc
c001ab64:	c3                   	ret    

c001ab65 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001ab65:	56                   	push   esi
c001ab66:	31 c0                	xor    eax,eax
c001ab68:	53                   	push   ebx
c001ab69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ab6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab75:	89 ca                	mov    edx,ecx
c001ab77:	c1 e2 04             	shl    edx,0x4
c001ab7a:	83 bc 82 e0 d0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2f20],0x0
c001ab82:	74 17                	je     c001ab9b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ab84:	83 c0 01             	add    eax,0x1
c001ab87:	83 f8 04             	cmp    eax,0x4
c001ab8a:	75 ee                	jne    c001ab7a <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ab8c:	c7 44 24 0c 9d 58 02 c0 	mov    DWORD PTR [esp+0xc],0xc002589d
c001ab94:	5b                   	pop    ebx
c001ab95:	5e                   	pop    esi
c001ab96:	e9 67 52 ff ff       	jmp    c000fe02 <KePanic(char const*)>
c001ab9b:	8d 04 88             	lea    eax,[eax+ecx*4]
c001ab9e:	89 1c 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],ebx
c001aba5:	5b                   	pop    ebx
c001aba6:	89 34 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],esi
c001abad:	5e                   	pop    esi
c001abae:	c3                   	ret    

c001abaf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001abaf:	55                   	push   ebp
c001abb0:	57                   	push   edi
c001abb1:	56                   	push   esi
c001abb2:	53                   	push   ebx
c001abb3:	83 ec 0c             	sub    esp,0xc
c001abb6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001abba:	f6 05 4c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb4c,0x1
c001abc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001abc5:	8d 6e 20             	lea    ebp,[esi+0x20]
c001abc8:	74 57                	je     c001ac21 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001abca:	84 c0                	test   al,al
c001abcc:	89 c7                	mov    edi,eax
c001abce:	74 1d                	je     c001abed <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001abd0:	83 fe 0f             	cmp    esi,0xf
c001abd3:	0f 8f d9 00 00 00    	jg     c001acb2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001abd9:	0f b6 b6 28 63 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9cd8]
c001abe0:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001abe8:	d1 ef                	shr    edi,1
c001abea:	83 e7 01             	and    edi,0x1
c001abed:	a1 c0 ea 02 c0       	mov    eax,ds:0xc002eac0
c001abf2:	83 ec 08             	sub    esp,0x8
c001abf5:	31 db                	xor    ebx,ebx
c001abf7:	50                   	push   eax
c001abf8:	68 aa 58 02 c0       	push   0xc00258aa
c001abfd:	e8 64 c3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ac02:	a1 c0 ea 02 c0       	mov    eax,ds:0xc002eac0
c001ac07:	83 c4 10             	add    esp,0x10
c001ac0a:	85 c0                	test   eax,eax
c001ac0c:	7f 59                	jg     c001ac67 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001ac0e:	8d 6e 20             	lea    ebp,[esi+0x20]
c001ac11:	83 ec 0c             	sub    esp,0xc
c001ac14:	68 c1 58 02 c0       	push   0xc00258c1
c001ac19:	e8 e4 51 ff ff       	call   c000fe02 <KePanic(char const*)>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	89 e8                	mov    eax,ebp
c001ac23:	31 d2                	xor    edx,edx
c001ac25:	c1 e0 04             	shl    eax,0x4
c001ac28:	8b 8c 90 e0 d0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2f20]
c001ac2f:	85 c9                	test   ecx,ecx
c001ac31:	0f 84 92 00 00 00    	je     c001acc9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001ac37:	83 c2 01             	add    edx,0x1
c001ac3a:	83 fa 04             	cmp    edx,0x4
c001ac3d:	75 e9                	jne    c001ac28 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001ac3f:	83 ec 0c             	sub    esp,0xc
c001ac42:	68 78 58 02 c0       	push   0xc0025878
c001ac47:	e8 b6 51 ff ff       	call   c000fe02 <KePanic(char const*)>
c001ac4c:	83 c4 10             	add    esp,0x10
c001ac4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac54:	83 c4 0c             	add    esp,0xc
c001ac57:	5b                   	pop    ebx
c001ac58:	5e                   	pop    esi
c001ac59:	5f                   	pop    edi
c001ac5a:	5d                   	pop    ebp
c001ac5b:	c3                   	ret    
c001ac5c:	83 c3 01             	add    ebx,0x1
c001ac5f:	39 1d c0 ea 02 c0    	cmp    DWORD PTR ds:0xc002eac0,ebx
c001ac65:	7e a7                	jle    c001ac0e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001ac67:	8b 2c 9d e0 ea 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd1520]
c001ac6e:	83 ec 08             	sub    esp,0x8
c001ac71:	56                   	push   esi
c001ac72:	55                   	push   ebp
c001ac73:	e8 04 dd ff ff       	call   c001897c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001ac78:	83 c4 10             	add    esp,0x10
c001ac7b:	84 c0                	test   al,al
c001ac7d:	74 dd                	je     c001ac5c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001ac7f:	89 f8                	mov    eax,edi
c001ac81:	83 ec 04             	sub    esp,0x4
c001ac84:	8b 1c 9d e0 ea 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1520]
c001ac8b:	8d 6e 20             	lea    ebp,[esi+0x20]
c001ac8e:	0f b6 f8             	movzx  edi,al
c001ac91:	57                   	push   edi
c001ac92:	89 e8                	mov    eax,ebp
c001ac94:	6a 00                	push   0x0
c001ac96:	0f b6 c0             	movzx  eax,al
c001ac99:	50                   	push   eax
c001ac9a:	89 f0                	mov    eax,esi
c001ac9c:	6a 00                	push   0x0
c001ac9e:	0f b6 c0             	movzx  eax,al
c001aca1:	6a 00                	push   0x0
c001aca3:	50                   	push   eax
c001aca4:	53                   	push   ebx
c001aca5:	e8 3e de ff ff       	call   c0018ae8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001acaa:	83 c4 20             	add    esp,0x20
c001acad:	e9 6f ff ff ff       	jmp    c001ac21 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001acb2:	83 ec 0c             	sub    esp,0xc
c001acb5:	31 ff                	xor    edi,edi
c001acb7:	68 3c 58 02 c0       	push   0xc002583c
c001acbc:	e8 41 51 ff ff       	call   c000fe02 <KePanic(char const*)>
c001acc1:	83 c4 10             	add    esp,0x10
c001acc4:	e9 24 ff ff ff       	jmp    c001abed <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001acc9:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001accc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001acd0:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001acd7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001acdb:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c001ace2:	83 c4 0c             	add    esp,0xc
c001ace5:	89 f0                	mov    eax,esi
c001ace7:	5b                   	pop    ebx
c001ace8:	5e                   	pop    esi
c001ace9:	5f                   	pop    edi
c001acea:	5d                   	pop    ebp
c001aceb:	c3                   	ret    

c001acec <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001acec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001acf4:	c1 e0 04             	shl    eax,0x4
c001acf7:	8d 50 10             	lea    edx,[eax+0x10]
c001acfa:	39 88 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ecx
c001ad00:	74 08                	je     c001ad0a <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001ad02:	83 c0 04             	add    eax,0x4
c001ad05:	39 d0                	cmp    eax,edx
c001ad07:	75 f1                	jne    c001acfa <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001ad09:	c3                   	ret    
c001ad0a:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001ad14:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001ad1e:	eb e2                	jmp    c001ad02 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001ad20 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001ad20:	56                   	push   esi
c001ad21:	53                   	push   ebx
c001ad22:	83 ec 04             	sub    esp,0x4
c001ad25:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ad2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad2e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad32:	74 09                	je     c001ad3d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ad34:	f6 05 4c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb4c,0x1
c001ad3b:	75 34                	jne    c001ad71 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001ad3d:	8d 43 20             	lea    eax,[ebx+0x20]
c001ad40:	c1 e0 04             	shl    eax,0x4
c001ad43:	8d 50 10             	lea    edx,[eax+0x10]
c001ad46:	39 b0 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],esi
c001ad4c:	74 0d                	je     c001ad5b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001ad4e:	83 c0 04             	add    eax,0x4
c001ad51:	39 d0                	cmp    eax,edx
c001ad53:	75 f1                	jne    c001ad46 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001ad55:	83 c4 04             	add    esp,0x4
c001ad58:	5b                   	pop    ebx
c001ad59:	5e                   	pop    esi
c001ad5a:	c3                   	ret    
c001ad5b:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001ad65:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001ad6f:	eb dd                	jmp    c001ad4e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001ad71:	83 fb 0f             	cmp    ebx,0xf
c001ad74:	7f 09                	jg     c001ad7f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001ad76:	0f b6 9b 28 63 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd9cd8]
c001ad7d:	eb be                	jmp    c001ad3d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ad7f:	83 ec 0c             	sub    esp,0xc
c001ad82:	68 ce 58 02 c0       	push   0xc00258ce
c001ad87:	e8 76 50 ff ff       	call   c000fe02 <KePanic(char const*)>
c001ad8c:	83 c4 10             	add    esp,0x10
c001ad8f:	eb ac                	jmp    c001ad3d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ad91:	66 90                	xchg   ax,ax
c001ad93:	90                   	nop

c001ad94 <picIoWait()>:
c001ad94:	eb 00                	jmp    c001ad96 <picIoWait()+0x2>
c001ad96:	eb 00                	jmp    c001ad98 <picIoWait()+0x4>
c001ad98:	90                   	nop
c001ad99:	c3                   	ret    
c001ad9a:	66 90                	xchg   ax,ax

c001ad9c <picDisable()>:
c001ad9c:	83 ec 10             	sub    esp,0x10
c001ad9f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ada6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001adab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001adaf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001adb4:	ee                   	out    dx,al
c001adb5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001adbc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001adc1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001adc5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001adca:	ee                   	out    dx,al
c001adcb:	90                   	nop
c001adcc:	83 c4 10             	add    esp,0x10
c001adcf:	c3                   	ret    

c001add0 <picGetIRQReg(int)>:
c001add0:	83 ec 10             	sub    esp,0x10
c001add3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001add7:	0f b6 c0             	movzx  eax,al
c001adda:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ade1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001ade5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ade9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001adee:	ee                   	out    dx,al
c001adef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adf3:	0f b6 c0             	movzx  eax,al
c001adf6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001adfd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ae01:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ae05:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ae0a:	ee                   	out    dx,al
c001ae0b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001ae12:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001ae17:	89 c2                	mov    edx,eax
c001ae19:	ec                   	in     al,dx
c001ae1a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ae1e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae22:	0f b6 c0             	movzx  eax,al
c001ae25:	c1 e0 08             	shl    eax,0x8
c001ae28:	89 c1                	mov    ecx,eax
c001ae2a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001ae31:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001ae36:	89 c2                	mov    edx,eax
c001ae38:	ec                   	in     al,dx
c001ae39:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ae3d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ae41:	0f b6 c0             	movzx  eax,al
c001ae44:	09 c8                	or     eax,ecx
c001ae46:	83 c4 10             	add    esp,0x10
c001ae49:	c3                   	ret    
c001ae4a:	66 90                	xchg   ax,ax

c001ae4c <picOpen()>:
c001ae4c:	83 ec 50             	sub    esp,0x50
c001ae4f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001ae56:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ae5b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae63:	ee                   	out    dx,al
c001ae64:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001ae6b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ae70:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ae74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae78:	ee                   	out    dx,al
c001ae79:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001ae81:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001ae89:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001ae90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae94:	89 c2                	mov    edx,eax
c001ae96:	ec                   	in     al,dx
c001ae97:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ae9b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ae9f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001aea3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001aeaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aeae:	89 c2                	mov    edx,eax
c001aeb0:	ec                   	in     al,dx
c001aeb1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001aeb5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001aeb9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001aebd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001aec4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001aec9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001aecd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aed1:	ee                   	out    dx,al
c001aed2:	e8 bd fe ff ff       	call   c001ad94 <picIoWait()>
c001aed7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001aede:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001aee3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001aee7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aeeb:	ee                   	out    dx,al
c001aeec:	e8 a3 fe ff ff       	call   c001ad94 <picIoWait()>
c001aef1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aef5:	0f b6 c0             	movzx  eax,al
c001aef8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001aeff:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001af03:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001af07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af0b:	ee                   	out    dx,al
c001af0c:	e8 83 fe ff ff       	call   c001ad94 <picIoWait()>
c001af11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001af15:	0f b6 c0             	movzx  eax,al
c001af18:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001af1f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001af23:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001af27:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af2b:	ee                   	out    dx,al
c001af2c:	e8 63 fe ff ff       	call   c001ad94 <picIoWait()>
c001af31:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001af38:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001af3d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001af41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001af45:	ee                   	out    dx,al
c001af46:	e8 49 fe ff ff       	call   c001ad94 <picIoWait()>
c001af4b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001af52:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001af57:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001af5b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001af5f:	ee                   	out    dx,al
c001af60:	e8 2f fe ff ff       	call   c001ad94 <picIoWait()>
c001af65:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001af6c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001af71:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001af75:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af79:	ee                   	out    dx,al
c001af7a:	e8 15 fe ff ff       	call   c001ad94 <picIoWait()>
c001af7f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001af86:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001af8b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001af8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001af93:	ee                   	out    dx,al
c001af94:	e8 fb fd ff ff       	call   c001ad94 <picIoWait()>
c001af99:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001af9e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001afa5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001afa9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001afad:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001afb1:	ee                   	out    dx,al
c001afb2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001afb7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001afbe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001afc2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001afc6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001afca:	ee                   	out    dx,al
c001afcb:	90                   	nop
c001afcc:	83 c4 50             	add    esp,0x50
c001afcf:	c3                   	ret    

c001afd0 <picEOI(int)>:
c001afd0:	83 ec 10             	sub    esp,0x10
c001afd3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001afd8:	75 1e                	jne    c001aff8 <picEOI(int)+0x28>
c001afda:	6a 0b                	push   0xb
c001afdc:	e8 ef fd ff ff       	call   c001add0 <picGetIRQReg(int)>
c001afe1:	83 c4 04             	add    esp,0x4
c001afe4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001afe9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001afee:	25 80 00 00 00       	and    eax,0x80
c001aff3:	74 73                	je     c001b068 <picEOI(int)+0x98>
c001aff5:	8d 76 00             	lea    esi,[esi+0x0]
c001aff8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001affd:	75 31                	jne    c001b030 <picEOI(int)+0x60>
c001afff:	6a 0b                	push   0xb
c001b001:	e8 ca fd ff ff       	call   c001add0 <picGetIRQReg(int)>
c001b006:	83 c4 04             	add    esp,0x4
c001b009:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b00e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b012:	98                   	cwde   
c001b013:	85 c0                	test   eax,eax
c001b015:	78 19                	js     c001b030 <picEOI(int)+0x60>
c001b017:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b01e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b023:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b027:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b02c:	ee                   	out    dx,al
c001b02d:	eb 3d                	jmp    c001b06c <picEOI(int)+0x9c>
c001b02f:	90                   	nop
c001b030:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b035:	7e 19                	jle    c001b050 <picEOI(int)+0x80>
c001b037:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b03e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b043:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b047:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b04c:	ee                   	out    dx,al
c001b04d:	8d 76 00             	lea    esi,[esi+0x0]
c001b050:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b057:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b05c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b060:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b065:	ee                   	out    dx,al
c001b066:	eb 04                	jmp    c001b06c <picEOI(int)+0x9c>
c001b068:	90                   	nop
c001b069:	8d 76 00             	lea    esi,[esi+0x0]
c001b06c:	83 c4 10             	add    esp,0x10
c001b06f:	c3                   	ret    

c001b070 <RTC::open(int, int, void*)>:
c001b070:	31 c0                	xor    eax,eax
c001b072:	c3                   	ret    
c001b073:	90                   	nop

c001b074 <RTC::close(int, int, void*)>:
c001b074:	31 c0                	xor    eax,eax
c001b076:	c3                   	ret    
c001b077:	90                   	nop

c001b078 <RTC::timeInSecondsUTC()>:
c001b078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b07c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b082:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b088:	c3                   	ret    
c001b089:	90                   	nop

c001b08a <RTC::timeInDatetimeUTC()>:
c001b08a:	53                   	push   ebx
c001b08b:	83 ec 14             	sub    esp,0x14
c001b08e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b092:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b096:	8b 10                	mov    edx,DWORD PTR [eax]
c001b098:	50                   	push   eax
c001b099:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b09c:	83 c4 0c             	add    esp,0xc
c001b09f:	52                   	push   edx
c001b0a0:	50                   	push   eax
c001b0a1:	53                   	push   ebx
c001b0a2:	e8 6d e5 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001b0a7:	89 d8                	mov    eax,ebx
c001b0a9:	83 c4 14             	add    esp,0x14
c001b0ac:	5b                   	pop    ebx
c001b0ad:	c2 04 00             	ret    0x4

c001b0b0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b0b0:	56                   	push   esi
c001b0b1:	53                   	push   ebx
c001b0b2:	83 ec 14             	sub    esp,0x14
c001b0b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0bb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b0be:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0c2:	52                   	push   edx
c001b0c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0cb:	50                   	push   eax
c001b0cc:	e8 43 e5 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001b0d1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b0d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b0dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b0e1:	89 f0                	mov    eax,esi
c001b0e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b0e7:	83 c4 20             	add    esp,0x20
c001b0ea:	5b                   	pop    ebx
c001b0eb:	5e                   	pop    esi
c001b0ec:	ff e0                	jmp    eax

c001b0ee <RTC::~RTC()>:
c001b0ee:	83 ec 0c             	sub    esp,0xc
c001b0f1:	ba f8 58 02 c0       	mov    edx,0xc00258f8
c001b0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0fa:	89 10                	mov    DWORD PTR [eax],edx
c001b0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b100:	83 ec 0c             	sub    esp,0xc
c001b103:	50                   	push   eax
c001b104:	e8 e3 df fe ff       	call   c00090ec <Clock::~Clock()>
c001b109:	83 c4 10             	add    esp,0x10
c001b10c:	90                   	nop
c001b10d:	83 c4 0c             	add    esp,0xc
c001b110:	c3                   	ret    
c001b111:	90                   	nop

c001b112 <RTC::~RTC()>:
c001b112:	83 ec 0c             	sub    esp,0xc
c001b115:	83 ec 0c             	sub    esp,0xc
c001b118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b11c:	e8 cd ff ff ff       	call   c001b0ee <RTC::~RTC()>
c001b121:	83 c4 10             	add    esp,0x10
c001b124:	83 ec 08             	sub    esp,0x8
c001b127:	68 60 01 00 00       	push   0x160
c001b12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b130:	e8 c0 21 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001b135:	83 c4 10             	add    esp,0x10
c001b138:	83 c4 0c             	add    esp,0xc
c001b13b:	c3                   	ret    

c001b13c <RTC::get_update_in_progress_flag()>:
c001b13c:	83 ec 18             	sub    esp,0x18
c001b13f:	6a 0a                	push   0xa
c001b141:	e8 b3 da ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b146:	83 c4 1c             	add    esp,0x1c
c001b149:	0f b6 c0             	movzx  eax,al
c001b14c:	c1 e8 07             	shr    eax,0x7
c001b14f:	c3                   	ret    

c001b150 <RTC::completeRTCRefresh()>:
c001b150:	55                   	push   ebp
c001b151:	57                   	push   edi
c001b152:	56                   	push   esi
c001b153:	53                   	push   ebx
c001b154:	83 ec 3c             	sub    esp,0x3c
c001b157:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b164:	e8 d3 ff ff ff       	call   c001b13c <RTC::get_update_in_progress_flag()>
c001b169:	83 c4 10             	add    esp,0x10
c001b16c:	84 c0                	test   al,al
c001b16e:	74 0e                	je     c001b17e <RTC::completeRTCRefresh()+0x2e>
c001b170:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b176:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001b17c:	73 df                	jae    c001b15d <RTC::completeRTCRefresh()+0xd>
c001b17e:	83 ec 0c             	sub    esp,0xc
c001b181:	6a 00                	push   0x0
c001b183:	e8 71 da ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b188:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b18f:	89 c7                	mov    edi,eax
c001b191:	e8 63 da ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b196:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b19d:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b1a1:	e8 53 da ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b1a6:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b1ad:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b1b1:	e8 43 da ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b1b6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b1bd:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b1c1:	e8 33 da ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b1c6:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b1cd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b1d1:	e8 23 da ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b1d6:	0f b6 c0             	movzx  eax,al
c001b1d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b1dd:	83 c4 10             	add    esp,0x10
c001b1e0:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001b1e6:	83 ec 0c             	sub    esp,0xc
c001b1e9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b1ed:	e8 4a ff ff ff       	call   c001b13c <RTC::get_update_in_progress_flag()>
c001b1f2:	83 c4 10             	add    esp,0x10
c001b1f5:	84 c0                	test   al,al
c001b1f7:	74 0e                	je     c001b207 <RTC::completeRTCRefresh()+0xb7>
c001b1f9:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b1ff:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001b205:	73 df                	jae    c001b1e6 <RTC::completeRTCRefresh()+0x96>
c001b207:	83 ec 0c             	sub    esp,0xc
c001b20a:	6a 00                	push   0x0
c001b20c:	e8 e8 d9 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b211:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b218:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b21c:	e8 d8 d9 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b221:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b228:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b22c:	e8 c8 d9 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b231:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b238:	88 c3                	mov    bl,al
c001b23a:	e8 ba d9 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b23f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b246:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b24a:	e8 aa d9 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b24f:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b256:	89 c6                	mov    esi,eax
c001b258:	e8 9c d9 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b25d:	89 f9                	mov    ecx,edi
c001b25f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b263:	83 c4 10             	add    esp,0x10
c001b266:	0f b6 e8             	movzx  ebp,al
c001b269:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b26e:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b272:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b276:	74 27                	je     c001b29f <RTC::completeRTCRefresh()+0x14f>
c001b278:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001b27c:	89 f0                	mov    eax,esi
c001b27e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001b282:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b286:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b28a:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b28e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b292:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b296:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b29a:	e9 41 ff ff ff       	jmp    c001b1e0 <RTC::completeRTCRefresh()+0x90>
c001b29f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b2a4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b2a8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b2ac:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001b2b0:	75 c6                	jne    c001b278 <RTC::completeRTCRefresh()+0x128>
c001b2b2:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b2b7:	89 f1                	mov    ecx,esi
c001b2b9:	0f b6 fb             	movzx  edi,bl
c001b2bc:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b2c0:	0f b6 c9             	movzx  ecx,cl
c001b2c3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b2c7:	89 f1                	mov    ecx,esi
c001b2c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b2cd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b2d1:	0f 94 c2             	sete   dl
c001b2d4:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b2d8:	0f 94 c0             	sete   al
c001b2db:	21 d0                	and    eax,edx
c001b2dd:	31 d2                	xor    edx,edx
c001b2df:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b2e3:	0f 94 c2             	sete   dl
c001b2e6:	85 c2                	test   edx,eax
c001b2e8:	74 8e                	je     c001b278 <RTC::completeRTCRefresh()+0x128>
c001b2ea:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001b2ee:	75 88                	jne    c001b278 <RTC::completeRTCRefresh()+0x128>
c001b2f0:	83 ec 0c             	sub    esp,0xc
c001b2f3:	6a 0b                	push   0xb
c001b2f5:	e8 ff d8 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	a8 04                	test   al,0x4
c001b2ff:	75 7a                	jne    c001b37b <RTC::completeRTCRefresh()+0x22b>
c001b301:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b305:	c1 ef 04             	shr    edi,0x4
c001b308:	83 e6 0f             	and    esi,0xf
c001b30b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b30f:	c1 ed 04             	shr    ebp,0x4
c001b312:	6b ed 0a             	imul   ebp,ebp,0xa
c001b315:	c1 ea 04             	shr    edx,0x4
c001b318:	6b d2 0a             	imul   edx,edx,0xa
c001b31b:	83 e1 0f             	and    ecx,0xf
c001b31e:	01 d1                	add    ecx,edx
c001b320:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b324:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b328:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b32c:	c1 ea 04             	shr    edx,0x4
c001b32f:	6b d2 0a             	imul   edx,edx,0xa
c001b332:	83 e1 0f             	and    ecx,0xf
c001b335:	01 d1                	add    ecx,edx
c001b337:	89 fa                	mov    edx,edi
c001b339:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b33d:	83 e2 07             	and    edx,0x7
c001b340:	89 d9                	mov    ecx,ebx
c001b342:	6b d2 0a             	imul   edx,edx,0xa
c001b345:	83 e1 0f             	and    ecx,0xf
c001b348:	83 e3 80             	and    ebx,0xffffff80
c001b34b:	01 d1                	add    ecx,edx
c001b34d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b351:	09 cb                	or     ebx,ecx
c001b353:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b357:	c1 ea 04             	shr    edx,0x4
c001b35a:	6b d2 0a             	imul   edx,edx,0xa
c001b35d:	83 e1 0f             	and    ecx,0xf
c001b360:	01 d1                	add    ecx,edx
c001b362:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b366:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b36a:	c1 ea 04             	shr    edx,0x4
c001b36d:	6b d2 0a             	imul   edx,edx,0xa
c001b370:	01 d6                	add    esi,edx
c001b372:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b376:	83 e2 0f             	and    edx,0xf
c001b379:	01 d5                	add    ebp,edx
c001b37b:	a8 02                	test   al,0x2
c001b37d:	75 15                	jne    c001b394 <RTC::completeRTCRefresh()+0x244>
c001b37f:	f6 c3 80             	test   bl,0x80
c001b382:	74 10                	je     c001b394 <RTC::completeRTCRefresh()+0x244>
c001b384:	83 e3 7f             	and    ebx,0x7f
c001b387:	b9 18 00 00 00       	mov    ecx,0x18
c001b38c:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b38f:	99                   	cdq    
c001b390:	f7 f9                	idiv   ecx
c001b392:	88 d3                	mov    bl,dl
c001b394:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001b39a:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001b3a0:	77 06                	ja     c001b3a8 <RTC::completeRTCRefresh()+0x258>
c001b3a2:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001b3a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b3ad:	31 c9                	xor    ecx,ecx
c001b3af:	31 d2                	xor    edx,edx
c001b3b1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b3b5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b3b9:	89 cd                	mov    ebp,ecx
c001b3bb:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001b3bf:	c1 e7 10             	shl    edi,0x10
c001b3c2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b3c8:	c1 e0 10             	shl    eax,0x10
c001b3cb:	09 c5                	or     ebp,eax
c001b3cd:	89 e9                	mov    ecx,ebp
c001b3cf:	0f b7 c2             	movzx  eax,dx
c001b3d2:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b3d6:	09 f8                	or     eax,edi
c001b3d8:	89 c2                	mov    edx,eax
c001b3da:	50                   	push   eax
c001b3db:	50                   	push   eax
c001b3dc:	88 d9                	mov    cl,bl
c001b3de:	51                   	push   ecx
c001b3df:	52                   	push   edx
c001b3e0:	e8 3f de fe ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c001b3e5:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b3e9:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b3ef:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b3f5:	83 c4 4c             	add    esp,0x4c
c001b3f8:	5b                   	pop    ebx
c001b3f9:	5e                   	pop    esi
c001b3fa:	5f                   	pop    edi
c001b3fb:	5d                   	pop    ebp
c001b3fc:	c3                   	ret    
c001b3fd:	90                   	nop

c001b3fe <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b3fe:	55                   	push   ebp
c001b3ff:	57                   	push   edi
c001b400:	56                   	push   esi
c001b401:	53                   	push   ebx
c001b402:	83 ec 34             	sub    esp,0x34
c001b405:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b409:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b40d:	6a 00                	push   0x0
c001b40f:	6a 00                	push   0x0
c001b411:	e8 37 d8 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b416:	5d                   	pop    ebp
c001b417:	89 fb                	mov    ebx,edi
c001b419:	58                   	pop    eax
c001b41a:	6a 00                	push   0x0
c001b41c:	6a 02                	push   0x2
c001b41e:	e8 2a d8 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b423:	89 f8                	mov    eax,edi
c001b425:	89 f9                	mov    ecx,edi
c001b427:	0f b6 c4             	movzx  eax,ah
c001b42a:	31 d2                	xor    edx,edx
c001b42c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b430:	c1 e9 10             	shr    ecx,0x10
c001b433:	89 f0                	mov    eax,esi
c001b435:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b439:	89 f0                	mov    eax,esi
c001b43b:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b43f:	0f b6 c4             	movzx  eax,ah
c001b442:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b446:	89 f0                	mov    eax,esi
c001b448:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b44c:	c1 e8 10             	shr    eax,0x10
c001b44f:	b9 64 00 00 00       	mov    ecx,0x64
c001b454:	f7 f1                	div    ecx
c001b456:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b45d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b461:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b465:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b469:	e8 8b d7 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b46e:	83 c4 10             	add    esp,0x10
c001b471:	a8 04                	test   al,0x4
c001b473:	89 c5                	mov    ebp,eax
c001b475:	75 6e                	jne    c001b4e5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b477:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b47b:	31 d2                	xor    edx,edx
c001b47d:	0f b6 c1             	movzx  eax,cl
c001b480:	b9 0a 00 00 00       	mov    ecx,0xa
c001b485:	f7 f1                	div    ecx
c001b487:	c1 e0 04             	shl    eax,0x4
c001b48a:	09 d0                	or     eax,edx
c001b48c:	31 d2                	xor    edx,edx
c001b48e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b492:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b497:	f7 f1                	div    ecx
c001b499:	c1 e0 04             	shl    eax,0x4
c001b49c:	09 d0                	or     eax,edx
c001b49e:	31 d2                	xor    edx,edx
c001b4a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4a4:	0f b6 c3             	movzx  eax,bl
c001b4a7:	f7 f1                	div    ecx
c001b4a9:	c1 e0 04             	shl    eax,0x4
c001b4ac:	09 d0                	or     eax,edx
c001b4ae:	31 d2                	xor    edx,edx
c001b4b0:	89 c3                	mov    ebx,eax
c001b4b2:	89 f0                	mov    eax,esi
c001b4b4:	0f b6 c0             	movzx  eax,al
c001b4b7:	f7 f1                	div    ecx
c001b4b9:	c1 e0 04             	shl    eax,0x4
c001b4bc:	09 d0                	or     eax,edx
c001b4be:	31 d2                	xor    edx,edx
c001b4c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b4c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b4c9:	f7 f1                	div    ecx
c001b4cb:	c1 e0 04             	shl    eax,0x4
c001b4ce:	09 d0                	or     eax,edx
c001b4d0:	31 d2                	xor    edx,edx
c001b4d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4da:	f7 f1                	div    ecx
c001b4dc:	c1 e0 04             	shl    eax,0x4
c001b4df:	09 d0                	or     eax,edx
c001b4e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b4e5:	83 e5 02             	and    ebp,0x2
c001b4e8:	75 1e                	jne    c001b508 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b4ea:	0f b6 c3             	movzx  eax,bl
c001b4ed:	83 f8 0b             	cmp    eax,0xb
c001b4f0:	76 10                	jbe    c001b502 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b4f2:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b4f5:	84 d2                	test   dl,dl
c001b4f7:	88 d3                	mov    bl,dl
c001b4f9:	75 02                	jne    c001b4fd <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b4fb:	b3 0c                	mov    bl,0xc
c001b4fd:	83 cb 80             	or     ebx,0xffffff80
c001b500:	eb 06                	jmp    c001b508 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b502:	85 c0                	test   eax,eax
c001b504:	75 02                	jne    c001b508 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b506:	b3 0c                	mov    bl,0xc
c001b508:	50                   	push   eax
c001b509:	0f b6 db             	movzx  ebx,bl
c001b50c:	50                   	push   eax
c001b50d:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b512:	52                   	push   edx
c001b513:	6a 00                	push   0x0
c001b515:	e8 33 d7 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b51a:	5a                   	pop    edx
c001b51b:	59                   	pop    ecx
c001b51c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b521:	50                   	push   eax
c001b522:	6a 02                	push   0x2
c001b524:	e8 24 d7 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b529:	5e                   	pop    esi
c001b52a:	5f                   	pop    edi
c001b52b:	53                   	push   ebx
c001b52c:	6a 04                	push   0x4
c001b52e:	e8 1a d7 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b533:	5d                   	pop    ebp
c001b534:	58                   	pop    eax
c001b535:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b53a:	52                   	push   edx
c001b53b:	6a 07                	push   0x7
c001b53d:	e8 0b d7 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b542:	58                   	pop    eax
c001b543:	5a                   	pop    edx
c001b544:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b549:	50                   	push   eax
c001b54a:	6a 08                	push   0x8
c001b54c:	e8 fc d6 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b551:	59                   	pop    ecx
c001b552:	5b                   	pop    ebx
c001b553:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b558:	55                   	push   ebp
c001b559:	6a 09                	push   0x9
c001b55b:	e8 ed d6 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b560:	5e                   	pop    esi
c001b561:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b565:	e8 e6 fb ff ff       	call   c001b150 <RTC::completeRTCRefresh()>
c001b56a:	83 c4 3c             	add    esp,0x3c
c001b56d:	b0 01                	mov    al,0x1
c001b56f:	5b                   	pop    ebx
c001b570:	5e                   	pop    esi
c001b571:	5f                   	pop    edi
c001b572:	5d                   	pop    ebp
c001b573:	c3                   	ret    

c001b574 <rtcIRQHandler(regs*, void*)>:
c001b574:	53                   	push   ebx
c001b575:	83 ec 14             	sub    esp,0x14
c001b578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b57c:	6a 0c                	push   0xc
c001b57e:	e8 76 d6 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b583:	83 c4 10             	add    esp,0x10
c001b586:	a8 80                	test   al,0x80
c001b588:	74 24                	je     c001b5ae <rtcIRQHandler(regs*, void*)+0x3a>
c001b58a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b591:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b598:	66 ff 05 54 eb 02 c0 	inc    WORD PTR ds:0xc002eb54
c001b59f:	75 0d                	jne    c001b5ae <rtcIRQHandler(regs*, void*)+0x3a>
c001b5a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b5a5:	83 c4 08             	add    esp,0x8
c001b5a8:	5b                   	pop    ebx
c001b5a9:	e9 a2 fb ff ff       	jmp    c001b150 <RTC::completeRTCRefresh()>
c001b5ae:	83 c4 08             	add    esp,0x8
c001b5b1:	5b                   	pop    ebx
c001b5b2:	c3                   	ret    
c001b5b3:	90                   	nop

c001b5b4 <RTC::RTC()>:
c001b5b4:	83 ec 1c             	sub    esp,0x1c
c001b5b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5bb:	83 ec 08             	sub    esp,0x8
c001b5be:	68 db 58 02 c0       	push   0xc00258db
c001b5c3:	50                   	push   eax
c001b5c4:	e8 ed da fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b5c9:	83 c4 10             	add    esp,0x10
c001b5cc:	ba f8 58 02 c0       	mov    edx,0xc00258f8
c001b5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5d5:	89 10                	mov    DWORD PTR [eax],edx
c001b5d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5db:	83 ec 0c             	sub    esp,0xc
c001b5de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5e2:	6a 01                	push   0x1
c001b5e4:	68 74 b5 01 c0       	push   0xc001b574
c001b5e9:	6a 08                	push   0x8
c001b5eb:	50                   	push   eax
c001b5ec:	e8 b1 e3 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5f1:	83 c4 20             	add    esp,0x20
c001b5f4:	89 c2                	mov    edx,eax
c001b5f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5fa:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b600:	fa                   	cli    
c001b601:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001b606:	83 c0 01             	add    eax,0x1
c001b609:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001b60e:	83 ec 0c             	sub    esp,0xc
c001b611:	6a 0b                	push   0xb
c001b613:	e8 e1 d5 ff ff       	call   c0018bf9 <x86ReadCMOS(unsigned char)>
c001b618:	83 c4 10             	add    esp,0x10
c001b61b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b61f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b623:	83 c8 10             	or     eax,0x10
c001b626:	0f b6 c0             	movzx  eax,al
c001b629:	83 ec 08             	sub    esp,0x8
c001b62c:	50                   	push   eax
c001b62d:	6a 0b                	push   0xb
c001b62f:	e8 19 d6 ff ff       	call   c0018c4d <x86WriteCMOS(unsigned char, unsigned char)>
c001b634:	83 c4 10             	add    esp,0x10
c001b637:	83 ec 0c             	sub    esp,0xc
c001b63a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b63e:	e8 0d fb ff ff       	call   c001b150 <RTC::completeRTCRefresh()>
c001b643:	83 c4 10             	add    esp,0x10
c001b646:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001b64e:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001b653:	85 c0                	test   eax,eax
c001b655:	75 01                	jne    c001b658 <RTC::RTC()+0xa4>
c001b657:	fb                   	sti    
c001b658:	90                   	nop
c001b659:	83 c4 1c             	add    esp,0x1c
c001b65c:	c3                   	ret    
c001b65d:	66 90                	xchg   ax,ax
c001b65f:	90                   	nop

c001b660 <HalConsoleScroll(int, int)>:
c001b660:	83 ec 10             	sub    esp,0x10
c001b663:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b66b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b673:	90                   	nop
c001b674:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b679:	0f 8f e1 00 00 00    	jg     c001b760 <HalConsoleScroll(int, int)+0x100>
c001b67f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b687:	90                   	nop
c001b688:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b690:	0f 8f be 00 00 00    	jg     c001b754 <HalConsoleScroll(int, int)+0xf4>
c001b696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b69a:	89 d0                	mov    eax,edx
c001b69c:	c1 e0 02             	shl    eax,0x2
c001b69f:	01 d0                	add    eax,edx
c001b6a1:	c1 e0 05             	shl    eax,0x5
c001b6a4:	89 c2                	mov    edx,eax
c001b6a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6aa:	01 d0                	add    eax,edx
c001b6ac:	89 c2                	mov    edx,eax
c001b6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6b2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b6b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b6b9:	89 d0                	mov    eax,edx
c001b6bb:	c1 e0 02             	shl    eax,0x2
c001b6be:	01 d0                	add    eax,edx
c001b6c0:	c1 e0 05             	shl    eax,0x5
c001b6c3:	89 c2                	mov    edx,eax
c001b6c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6c9:	01 d0                	add    eax,edx
c001b6cb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b6d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6d5:	01 d0                	add    eax,edx
c001b6d7:	8a 11                	mov    dl,BYTE PTR [ecx]
c001b6d9:	88 10                	mov    BYTE PTR [eax],dl
c001b6db:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b6e0:	75 66                	jne    c001b748 <HalConsoleScroll(int, int)+0xe8>
c001b6e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6e6:	83 e0 01             	and    eax,0x1
c001b6e9:	74 39                	je     c001b724 <HalConsoleScroll(int, int)+0xc4>
c001b6eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6ef:	83 e0 0f             	and    eax,0xf
c001b6f2:	88 c2                	mov    dl,al
c001b6f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6f8:	c1 e0 04             	shl    eax,0x4
c001b6fb:	09 d0                	or     eax,edx
c001b6fd:	88 c1                	mov    cl,al
c001b6ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b703:	89 d0                	mov    eax,edx
c001b705:	c1 e0 02             	shl    eax,0x2
c001b708:	01 d0                	add    eax,edx
c001b70a:	c1 e0 05             	shl    eax,0x5
c001b70d:	89 c2                	mov    edx,eax
c001b70f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b713:	01 d0                	add    eax,edx
c001b715:	89 c2                	mov    edx,eax
c001b717:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b71b:	01 d0                	add    eax,edx
c001b71d:	88 ca                	mov    dl,cl
c001b71f:	88 10                	mov    BYTE PTR [eax],dl
c001b721:	eb 25                	jmp    c001b748 <HalConsoleScroll(int, int)+0xe8>
c001b723:	90                   	nop
c001b724:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b728:	89 d0                	mov    eax,edx
c001b72a:	c1 e0 02             	shl    eax,0x2
c001b72d:	01 d0                	add    eax,edx
c001b72f:	c1 e0 05             	shl    eax,0x5
c001b732:	89 c2                	mov    edx,eax
c001b734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b738:	01 d0                	add    eax,edx
c001b73a:	89 c2                	mov    edx,eax
c001b73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b740:	01 d0                	add    eax,edx
c001b742:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b745:	8d 76 00             	lea    esi,[esi+0x0]
c001b748:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b74d:	e9 36 ff ff ff       	jmp    c001b688 <HalConsoleScroll(int, int)+0x28>
c001b752:	66 90                	xchg   ax,ax
c001b754:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b759:	e9 16 ff ff ff       	jmp    c001b674 <HalConsoleScroll(int, int)+0x14>
c001b75e:	66 90                	xchg   ax,ax
c001b760:	90                   	nop
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	c3                   	ret    
c001b765:	8d 76 00             	lea    esi,[esi+0x0]

c001b768 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b768:	83 ec 14             	sub    esp,0x14
c001b76b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b76f:	88 04 24             	mov    BYTE PTR [esp],al
c001b772:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b775:	0f b6 c0             	movzx  eax,al
c001b778:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b77c:	89 d1                	mov    ecx,edx
c001b77e:	83 e1 0f             	and    ecx,0xf
c001b781:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b785:	c1 e2 04             	shl    edx,0x4
c001b788:	0f b6 d2             	movzx  edx,dl
c001b78b:	09 ca                	or     edx,ecx
c001b78d:	c1 e2 08             	shl    edx,0x8
c001b790:	09 d0                	or     eax,edx
c001b792:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b797:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b79f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b7a3:	89 d0                	mov    eax,edx
c001b7a5:	c1 e0 02             	shl    eax,0x2
c001b7a8:	01 d0                	add    eax,edx
c001b7aa:	c1 e0 04             	shl    eax,0x4
c001b7ad:	89 c2                	mov    edx,eax
c001b7af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7b3:	01 d0                	add    eax,edx
c001b7b5:	d1 e0                	shl    eax,1
c001b7b7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b7bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7bf:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001b7c4:	66 89 10             	mov    WORD PTR [eax],dx
c001b7c7:	90                   	nop
c001b7c8:	83 c4 14             	add    esp,0x14
c001b7cb:	c3                   	ret    

c001b7cc <HalConsoleCursorUpdate(int, int)>:
c001b7cc:	83 ec 20             	sub    esp,0x20
c001b7cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7d3:	89 c2                	mov    edx,eax
c001b7d5:	c1 e2 02             	shl    edx,0x2
c001b7d8:	01 d0                	add    eax,edx
c001b7da:	c1 e0 04             	shl    eax,0x4
c001b7dd:	89 c2                	mov    edx,eax
c001b7df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7e3:	01 d0                	add    eax,edx
c001b7e5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b7ea:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b7f1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b7f6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b7fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7fe:	ee                   	out    dx,al
c001b7ff:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b804:	0f b6 c0             	movzx  eax,al
c001b807:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b80e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b812:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b81a:	ee                   	out    dx,al
c001b81b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b822:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b827:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b82b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b82f:	ee                   	out    dx,al
c001b830:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b835:	c1 e8 08             	shr    eax,0x8
c001b838:	0f b6 c0             	movzx  eax,al
c001b83b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b842:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b846:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b84a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b84e:	ee                   	out    dx,al
c001b84f:	90                   	nop
c001b850:	83 c4 20             	add    esp,0x20
c001b853:	c3                   	ret    

c001b854 <FAT::getName()>:
c001b854:	b8 2c 59 02 c0       	mov    eax,0xc002592c
c001b859:	c3                   	ret    
c001b85a:	66 90                	xchg   ax,ax

c001b85c <FAT::tell(void*, unsigned long long*)>:
c001b85c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b861:	75 09                	jne    c001b86c <FAT::tell(void*, unsigned long long*)+0x10>
c001b863:	b8 04 00 00 00       	mov    eax,0x4
c001b868:	c3                   	ret    
c001b869:	8d 76 00             	lea    esi,[esi+0x0]
c001b86c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b871:	75 09                	jne    c001b87c <FAT::tell(void*, unsigned long long*)+0x20>
c001b873:	b8 04 00 00 00       	mov    eax,0x4
c001b878:	c3                   	ret    
c001b879:	8d 76 00             	lea    esi,[esi+0x0]
c001b87c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b880:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b883:	ba 00 00 00 00       	mov    edx,0x0
c001b888:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b88c:	89 01                	mov    DWORD PTR [ecx],eax
c001b88e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b891:	b8 00 00 00 00       	mov    eax,0x0
c001b896:	c3                   	ret    
c001b897:	90                   	nop

c001b898 <FAT::stat(void*, unsigned long long*)>:
c001b898:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b89d:	75 09                	jne    c001b8a8 <FAT::stat(void*, unsigned long long*)+0x10>
c001b89f:	b8 04 00 00 00       	mov    eax,0x4
c001b8a4:	c3                   	ret    
c001b8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b8ad:	75 09                	jne    c001b8b8 <FAT::stat(void*, unsigned long long*)+0x20>
c001b8af:	b8 04 00 00 00       	mov    eax,0x4
c001b8b4:	c3                   	ret    
c001b8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b8bf:	ba 00 00 00 00       	mov    edx,0x0
c001b8c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b8c8:	89 01                	mov    DWORD PTR [ecx],eax
c001b8ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b8cd:	b8 00 00 00 00       	mov    eax,0x0
c001b8d2:	c3                   	ret    
c001b8d3:	90                   	nop

c001b8d4 <FAT::~FAT()>:
c001b8d4:	83 ec 0c             	sub    esp,0xc
c001b8d7:	ba 78 59 02 c0       	mov    edx,0xc0025978
c001b8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e0:	89 10                	mov    DWORD PTR [eax],edx
c001b8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e6:	83 ec 0c             	sub    esp,0xc
c001b8e9:	50                   	push   eax
c001b8ea:	e8 e7 c4 fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001b8ef:	83 c4 10             	add    esp,0x10
c001b8f2:	90                   	nop
c001b8f3:	83 c4 0c             	add    esp,0xc
c001b8f6:	c3                   	ret    
c001b8f7:	90                   	nop

c001b8f8 <FAT::~FAT()>:
c001b8f8:	83 ec 0c             	sub    esp,0xc
c001b8fb:	83 ec 0c             	sub    esp,0xc
c001b8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b902:	e8 cd ff ff ff       	call   c001b8d4 <FAT::~FAT()>
c001b907:	83 c4 10             	add    esp,0x10
c001b90a:	83 ec 08             	sub    esp,0x8
c001b90d:	6a 08                	push   0x8
c001b90f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b913:	e8 dd 19 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001b918:	83 c4 10             	add    esp,0x10
c001b91b:	83 c4 0c             	add    esp,0xc
c001b91e:	c3                   	ret    
c001b91f:	90                   	nop

c001b920 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b920:	83 ec 1c             	sub    esp,0x1c
c001b923:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b92a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b92f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b933:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001b93a:	83 f8 ff             	cmp    eax,0xffffffff
c001b93d:	75 35                	jne    c001b974 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b93f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b943:	88 c2                	mov    dl,al
c001b945:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001b94a:	01 d0                	add    eax,edx
c001b94c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b950:	8b 15 60 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb60
c001b956:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b95a:	89 14 85 80 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1480],edx
c001b961:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001b966:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b96a:	89 14 85 00 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1400],edx
c001b971:	eb 19                	jmp    c001b98c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b973:	90                   	nop
c001b974:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b978:	88 c2                	mov    dl,al
c001b97a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b97e:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001b985:	01 d0                	add    eax,edx
c001b987:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b98b:	90                   	nop
c001b98c:	83 ec 04             	sub    esp,0x4
c001b98f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b997:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b99b:	50                   	push   eax
c001b99c:	e8 33 98 fe ff       	call   c00051d4 <f_getlabel>
c001b9a1:	83 c4 10             	add    esp,0x10
c001b9a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b9ad:	75 09                	jne    c001b9b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b9af:	b8 00 00 00 00       	mov    eax,0x0
c001b9b4:	eb 0a                	jmp    c001b9c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b9b6:	66 90                	xchg   ax,ax
c001b9b8:	b8 01 00 00 00       	mov    eax,0x1
c001b9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b9c0:	83 c4 1c             	add    esp,0x1c
c001b9c3:	c3                   	ret    

c001b9c4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b9c4:	53                   	push   ebx
c001b9c5:	83 ec 58             	sub    esp,0x58
c001b9c8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b9d0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b9d4:	b9 00 00 00 00       	mov    ecx,0x0
c001b9d9:	b8 3c 00 00 00       	mov    eax,0x3c
c001b9de:	83 e0 f8             	and    eax,0xfffffff8
c001b9e1:	89 c3                	mov    ebx,eax
c001b9e3:	b8 00 00 00 00       	mov    eax,0x0
c001b9e8:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001b9ec:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001b9f0:	83 c0 08             	add    eax,0x8
c001b9f3:	39 d8                	cmp    eax,ebx
c001b9f5:	72 f1                	jb     c001b9e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001b9f7:	01 c2                	add    edx,eax
c001b9f9:	89 0a                	mov    DWORD PTR [edx],ecx
c001b9fb:	83 c2 04             	add    edx,0x4
c001b9fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ba02:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001ba09:	83 f8 ff             	cmp    eax,0xffffffff
c001ba0c:	75 36                	jne    c001ba44 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001ba0e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ba12:	88 c2                	mov    dl,al
c001ba14:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001ba19:	01 d0                	add    eax,edx
c001ba1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ba1f:	8b 15 60 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb60
c001ba25:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ba29:	89 14 85 80 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1480],edx
c001ba30:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001ba35:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ba39:	89 14 85 00 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1400],edx
c001ba40:	eb 1a                	jmp    c001ba5c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001ba42:	66 90                	xchg   ax,ax
c001ba44:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ba48:	88 c2                	mov    dl,al
c001ba4a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ba4e:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001ba55:	01 d0                	add    eax,edx
c001ba57:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ba5b:	90                   	nop
c001ba5c:	83 ec 08             	sub    esp,0x8
c001ba5f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ba63:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba67:	50                   	push   eax
c001ba68:	e8 03 4e fe ff       	call   c0000870 <strcat>
c001ba6d:	83 c4 10             	add    esp,0x10
c001ba70:	83 ec 0c             	sub    esp,0xc
c001ba73:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba77:	50                   	push   eax
c001ba78:	e8 ab 98 fe ff       	call   c0005328 <f_setlabel>
c001ba7d:	83 c4 10             	add    esp,0x10
c001ba80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ba84:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ba89:	75 09                	jne    c001ba94 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001ba8b:	b8 00 00 00 00       	mov    eax,0x0
c001ba90:	eb 0a                	jmp    c001ba9c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001ba92:	66 90                	xchg   ax,ax
c001ba94:	b8 01 00 00 00       	mov    eax,0x1
c001ba99:	8d 76 00             	lea    esi,[esi+0x0]
c001ba9c:	83 c4 58             	add    esp,0x58
c001ba9f:	5b                   	pop    ebx
c001baa0:	c3                   	ret    
c001baa1:	90                   	nop
c001baa2:	66 90                	xchg   ax,ax

c001baa4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001baa4:	83 ec 2c             	sub    esp,0x2c
c001baa7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001baaf:	83 ec 08             	sub    esp,0x8
c001bab2:	68 50 59 02 c0       	push   0xc0025950
c001bab7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001babb:	e8 c0 4c fe ff       	call   c0000780 <strcmp>
c001bac0:	83 c4 10             	add    esp,0x10
c001bac3:	85 c0                	test   eax,eax
c001bac5:	0f 94 c0             	sete   al
c001bac8:	0f b6 c0             	movzx  eax,al
c001bacb:	85 c0                	test   eax,eax
c001bacd:	74 0d                	je     c001badc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001bacf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bad7:	e9 c0 00 00 00       	jmp    c001bb9c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001badc:	83 ec 08             	sub    esp,0x8
c001badf:	68 42 59 02 c0       	push   0xc0025942
c001bae4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bae8:	e8 93 4c fe ff       	call   c0000780 <strcmp>
c001baed:	83 c4 10             	add    esp,0x10
c001baf0:	85 c0                	test   eax,eax
c001baf2:	0f 94 c0             	sete   al
c001baf5:	0f b6 c0             	movzx  eax,al
c001baf8:	85 c0                	test   eax,eax
c001bafa:	74 10                	je     c001bb0c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001bafc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bb04:	e9 93 00 00 00       	jmp    c001bb9c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bb09:	8d 76 00             	lea    esi,[esi+0x0]
c001bb0c:	83 ec 08             	sub    esp,0x8
c001bb0f:	68 48 59 02 c0       	push   0xc0025948
c001bb14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bb18:	e8 63 4c fe ff       	call   c0000780 <strcmp>
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	85 c0                	test   eax,eax
c001bb22:	0f 94 c0             	sete   al
c001bb25:	0f b6 c0             	movzx  eax,al
c001bb28:	85 c0                	test   eax,eax
c001bb2a:	74 0c                	je     c001bb38 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001bb2c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bb34:	eb 66                	jmp    c001bb9c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bb36:	66 90                	xchg   ax,ax
c001bb38:	83 ec 08             	sub    esp,0x8
c001bb3b:	68 bc 28 02 c0       	push   0xc00228bc
c001bb40:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bb44:	e8 37 4c fe ff       	call   c0000780 <strcmp>
c001bb49:	83 c4 10             	add    esp,0x10
c001bb4c:	85 c0                	test   eax,eax
c001bb4e:	0f 94 c0             	sete   al
c001bb51:	0f b6 c0             	movzx  eax,al
c001bb54:	85 c0                	test   eax,eax
c001bb56:	74 0c                	je     c001bb64 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bb58:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001bb60:	eb 3a                	jmp    c001bb9c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bb62:	66 90                	xchg   ax,ax
c001bb64:	83 ec 08             	sub    esp,0x8
c001bb67:	68 4e 59 02 c0       	push   0xc002594e
c001bb6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bb70:	e8 0b 4c fe ff       	call   c0000780 <strcmp>
c001bb75:	83 c4 10             	add    esp,0x10
c001bb78:	85 c0                	test   eax,eax
c001bb7a:	0f 94 c0             	sete   al
c001bb7d:	0f b6 c0             	movzx  eax,al
c001bb80:	85 c0                	test   eax,eax
c001bb82:	74 0c                	je     c001bb90 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001bb84:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001bb8c:	eb 0e                	jmp    c001bb9c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bb8e:	66 90                	xchg   ax,ax
c001bb90:	b8 08 00 00 00       	mov    eax,0x8
c001bb95:	e9 ea 00 00 00       	jmp    c001bc84 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bb9a:	66 90                	xchg   ax,ax
c001bb9c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001bba3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bba8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbac:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001bbb3:	83 f8 ff             	cmp    eax,0xffffffff
c001bbb6:	75 34                	jne    c001bbec <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bbb8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bbbc:	88 c2                	mov    dl,al
c001bbbe:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001bbc3:	01 d0                	add    eax,edx
c001bbc5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bbc9:	8b 15 60 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb60
c001bbcf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbd3:	89 14 85 80 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1480],edx
c001bbda:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001bbdf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bbe3:	89 14 85 00 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1400],edx
c001bbea:	eb 18                	jmp    c001bc04 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bbec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bbf0:	88 c2                	mov    dl,al
c001bbf2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbf6:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001bbfd:	01 d0                	add    eax,edx
c001bbff:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bc03:	90                   	nop
c001bc04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc08:	88 04 24             	mov    BYTE PTR [esp],al
c001bc0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bc0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc13:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bc1b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bc20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	68 00 20 00 00       	push   0x2000
c001bc30:	e8 77 3d ff ff       	call   c000f9ac <malloc>
c001bc35:	83 c4 10             	add    esp,0x10
c001bc38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc3c:	68 00 20 00 00       	push   0x2000
c001bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc45:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc49:	50                   	push   eax
c001bc4a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bc4e:	50                   	push   eax
c001bc4f:	e8 d1 99 fe ff       	call   c0005625 <f_mkfs>
c001bc54:	83 c4 10             	add    esp,0x10
c001bc57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bc5b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bc60:	75 0a                	jne    c001bc6c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bc62:	b8 00 00 00 00       	mov    eax,0x0
c001bc67:	eb 1b                	jmp    c001bc84 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bc69:	8d 76 00             	lea    esi,[esi+0x0]
c001bc6c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001bc71:	75 09                	jne    c001bc7c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001bc73:	b8 09 00 00 00       	mov    eax,0x9
c001bc78:	eb 0a                	jmp    c001bc84 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bc7a:	66 90                	xchg   ax,ax
c001bc7c:	b8 01 00 00 00       	mov    eax,0x1
c001bc81:	8d 76 00             	lea    esi,[esi+0x0]
c001bc84:	83 c4 2c             	add    esp,0x2c
c001bc87:	c3                   	ret    

c001bc88 <FAT::tryMount(LogicalDisk*, int)>:
c001bc88:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001bc8e:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001bc93:	83 f8 14             	cmp    eax,0x14
c001bc96:	75 18                	jne    c001bcb0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001bc98:	83 ec 0c             	sub    esp,0xc
c001bc9b:	68 54 59 02 c0       	push   0xc0025954
c001bca0:	e8 5d 41 ff ff       	call   c000fe02 <KePanic(char const*)>
c001bca5:	83 c4 10             	add    esp,0x10
c001bca8:	b0 00                	mov    al,0x0
c001bcaa:	e9 ed 01 00 00       	jmp    c001be9c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bcaf:	90                   	nop
c001bcb0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bcb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bcbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bcc3:	3d 00 02 00 00       	cmp    eax,0x200
c001bcc8:	74 0a                	je     c001bcd4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001bcca:	b0 00                	mov    al,0x0
c001bccc:	e9 cb 01 00 00       	jmp    c001be9c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bcd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcd4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001bcdc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bce3:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001bcea:	83 f8 ff             	cmp    eax,0xffffffff
c001bced:	74 09                	je     c001bcf8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001bcef:	b0 01                	mov    al,0x1
c001bcf1:	e9 a6 01 00 00       	jmp    c001be9c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bcf6:	66 90                	xchg   ax,ax
c001bcf8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001bd02:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001bd0a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001bd11:	88 c2                	mov    dl,al
c001bd13:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001bd18:	01 d0                	add    eax,edx
c001bd1a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001bd21:	8b 15 60 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb60
c001bd27:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bd2e:	89 14 85 80 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1480],edx
c001bd35:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001bd3a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bd41:	89 14 85 00 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1400],edx
c001bd48:	83 ec 0c             	sub    esp,0xc
c001bd4b:	68 34 02 00 00       	push   0x234
c001bd50:	e8 57 3c ff ff       	call   c000f9ac <malloc>
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001bd5f:	83 ec 04             	sub    esp,0x4
c001bd62:	6a 00                	push   0x0
c001bd64:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bd6b:	50                   	push   eax
c001bd6c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bd73:	e8 a7 80 fe ff       	call   c0003e1f <f_mount>
c001bd78:	83 c4 10             	add    esp,0x10
c001bd7b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bd82:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bd8a:	74 1c                	je     c001bda8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bd8c:	83 ec 0c             	sub    esp,0xc
c001bd8f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bd96:	e8 31 3c ff ff       	call   c000f9cc <rfree>
c001bd9b:	83 c4 10             	add    esp,0x10
c001bd9e:	b0 00                	mov    al,0x0
c001bda0:	e9 f7 00 00 00       	jmp    c001be9c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bda5:	8d 76 00             	lea    esi,[esi+0x0]
c001bda8:	83 ec 04             	sub    esp,0x4
c001bdab:	68 00 01 00 00       	push   0x100
c001bdb0:	6a 00                	push   0x0
c001bdb2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bdb9:	50                   	push   eax
c001bdba:	e8 31 47 fe ff       	call   c00004f0 <memset>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	83 ec 08             	sub    esp,0x8
c001bdc5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bdcc:	50                   	push   eax
c001bdcd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bdd4:	50                   	push   eax
c001bdd5:	e8 96 4a fe ff       	call   c0000870 <strcat>
c001bdda:	83 c4 10             	add    esp,0x10
c001bddd:	83 ec 08             	sub    esp,0x8
c001bde0:	68 62 59 02 c0       	push   0xc0025962
c001bde5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bdec:	50                   	push   eax
c001bded:	e8 7e 4a fe ff       	call   c0000870 <strcat>
c001bdf2:	83 c4 10             	add    esp,0x10
c001bdf5:	83 ec 04             	sub    esp,0x4
c001bdf8:	6a 01                	push   0x1
c001bdfa:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001be01:	50                   	push   eax
c001be02:	8d 44 24 14          	lea    eax,[esp+0x14]
c001be06:	50                   	push   eax
c001be07:	e8 75 80 fe ff       	call   c0003e81 <f_open>
c001be0c:	83 c4 10             	add    esp,0x10
c001be0f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001be16:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001be1d:	85 c0                	test   eax,eax
c001be1f:	74 0b                	je     c001be2c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001be21:	78 31                	js     c001be54 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001be23:	83 e8 04             	sub    eax,0x4
c001be26:	83 f8 01             	cmp    eax,0x1
c001be29:	77 29                	ja     c001be54 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001be2b:	90                   	nop
c001be2c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001be34:	83 ec 0c             	sub    esp,0xc
c001be37:	8d 44 24 14          	lea    eax,[esp+0x14]
c001be3b:	50                   	push   eax
c001be3c:	e8 f0 87 fe ff       	call   c0004631 <f_close>
c001be41:	83 c4 10             	add    esp,0x10
c001be44:	90                   	nop
c001be45:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001be4d:	85 c0                	test   eax,eax
c001be4f:	74 43                	je     c001be94 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001be51:	eb 31                	jmp    c001be84 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001be53:	90                   	nop
c001be54:	83 ec 0c             	sub    esp,0xc
c001be57:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001be5e:	e8 69 3b ff ff       	call   c000f9cc <rfree>
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	83 ec 04             	sub    esp,0x4
c001be69:	6a 00                	push   0x0
c001be6b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001be72:	50                   	push   eax
c001be73:	6a 00                	push   0x0
c001be75:	e8 a5 7f fe ff       	call   c0003e1f <f_mount>
c001be7a:	83 c4 10             	add    esp,0x10
c001be7d:	b0 00                	mov    al,0x0
c001be7f:	eb 1b                	jmp    c001be9c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001be81:	8d 76 00             	lea    esi,[esi+0x0]
c001be84:	a1 60 eb 02 c0       	mov    eax,ds:0xc002eb60
c001be89:	83 c0 01             	add    eax,0x1
c001be8c:	a3 60 eb 02 c0       	mov    ds:0xc002eb60,eax
c001be91:	8d 76 00             	lea    esi,[esi+0x0]
c001be94:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001be9b:	90                   	nop
c001be9c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001bea2:	c3                   	ret    
c001bea3:	90                   	nop

c001bea4 <FAT::allocateSwapfile(char const*, int)>:
c001bea4:	55                   	push   ebp
c001bea5:	57                   	push   edi
c001bea6:	56                   	push   esi
c001bea7:	53                   	push   ebx
c001bea8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001beae:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001beb9:	83 ec 0c             	sub    esp,0xc
c001bebc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bec3:	e8 e4 3a ff ff       	call   c000f9ac <malloc>
c001bec8:	83 c4 10             	add    esp,0x10
c001becb:	89 c7                	mov    edi,eax
c001becd:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001bed2:	83 ec 04             	sub    esp,0x4
c001bed5:	50                   	push   eax
c001bed6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bedd:	57                   	push   edi
c001bede:	e8 a5 c2 fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001bee3:	83 c4 10             	add    esp,0x10
c001bee6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001beed:	83 ec 04             	sub    esp,0x4
c001bef0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bef4:	50                   	push   eax
c001bef5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bef9:	50                   	push   eax
c001befa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bf01:	e8 a2 c5 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001bf06:	83 c4 10             	add    esp,0x10
c001bf09:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bf10:	c1 e0 14             	shl    eax,0x14
c001bf13:	89 c7                	mov    edi,eax
c001bf15:	89 c5                	mov    ebp,eax
c001bf17:	c1 fd 1f             	sar    ebp,0x1f
c001bf1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf22:	89 f9                	mov    ecx,edi
c001bf24:	31 c1                	xor    ecx,eax
c001bf26:	89 cb                	mov    ebx,ecx
c001bf28:	89 e9                	mov    ecx,ebp
c001bf2a:	31 d1                	xor    ecx,edx
c001bf2c:	89 ce                	mov    esi,ecx
c001bf2e:	89 f0                	mov    eax,esi
c001bf30:	09 d8                	or     eax,ebx
c001bf32:	0f 84 9c 00 00 00    	je     c001bfd4 <FAT::allocateSwapfile(char const*, int)+0x130>
c001bf38:	83 ec 0c             	sub    esp,0xc
c001bf3b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bf42:	e8 2d c4 fe ff       	call   c0008374 <File::unlink()>
c001bf47:	83 c4 10             	add    esp,0x10
c001bf4a:	83 ec 08             	sub    esp,0x8
c001bf4d:	6a 12                	push   0x12
c001bf4f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bf56:	e8 4b c2 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bf65:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bf6b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bf72:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bf79:	c1 e0 14             	shl    eax,0x14
c001bf7c:	83 ec 04             	sub    esp,0x4
c001bf7f:	6a 01                	push   0x1
c001bf81:	50                   	push   eax
c001bf82:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bf89:	e8 2a 95 fe ff       	call   c00054b8 <f_expand>
c001bf8e:	83 c4 10             	add    esp,0x10
c001bf91:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bf98:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf9a:	83 c0 10             	add    eax,0x10
c001bf9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf9f:	83 ec 0c             	sub    esp,0xc
c001bfa2:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bfa6:	52                   	push   edx
c001bfa7:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bfab:	52                   	push   edx
c001bfac:	6a 00                	push   0x0
c001bfae:	68 00 04 00 00       	push   0x400
c001bfb3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bfba:	ff d0                	call   eax
c001bfbc:	83 c4 20             	add    esp,0x20
c001bfbf:	83 ec 0c             	sub    esp,0xc
c001bfc2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bfc9:	e8 36 c2 fe ff       	call   c0008204 <File::close()>
c001bfce:	83 c4 10             	add    esp,0x10
c001bfd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd4:	83 ec 08             	sub    esp,0x8
c001bfd7:	6a 01                	push   0x1
c001bfd9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bfe0:	e8 c1 c1 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001bfe5:	83 c4 10             	add    esp,0x10
c001bfe8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bfef:	8b 00                	mov    eax,DWORD PTR [eax]
c001bff1:	83 c0 0c             	add    eax,0xc
c001bff4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bff6:	83 ec 0c             	sub    esp,0xc
c001bff9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bffd:	52                   	push   edx
c001bffe:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c002:	52                   	push   edx
c001c003:	6a 00                	push   0x0
c001c005:	6a 04                	push   0x4
c001c007:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c00e:	ff d0                	call   eax
c001c010:	83 c4 20             	add    esp,0x20
c001c013:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c01a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c020:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c027:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c02e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c031:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c038:	83 ec 0c             	sub    esp,0xc
c001c03b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c042:	e8 bd c1 fe ff       	call   c0008204 <File::close()>
c001c047:	83 c4 10             	add    esp,0x10
c001c04a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c051:	ba 00 00 00 00       	mov    edx,0x0
c001c056:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c05c:	5b                   	pop    ebx
c001c05d:	5e                   	pop    esi
c001c05e:	5f                   	pop    edi
c001c05f:	5d                   	pop    ebp
c001c060:	c3                   	ret    
c001c061:	90                   	nop
c001c062:	66 90                	xchg   ax,ax

c001c064 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c064:	57                   	push   edi
c001c065:	56                   	push   esi
c001c066:	53                   	push   ebx
c001c067:	81 ec 50 02 00 00    	sub    esp,0x250
c001c06d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c075:	74 0d                	je     c001c084 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c077:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c07f:	75 0f                	jne    c001c090 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c081:	8d 76 00             	lea    esi,[esi+0x0]
c001c084:	b8 04 00 00 00       	mov    eax,0x4
c001c089:	e9 3a 01 00 00       	jmp    c001c1c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c08e:	66 90                	xchg   ax,ax
c001c090:	83 ec 08             	sub    esp,0x8
c001c093:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c09a:	50                   	push   eax
c001c09b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c0a2:	e8 56 88 fe ff       	call   c00048fd <f_readdir>
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c0b1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c0b8:	83 ec 0c             	sub    esp,0xc
c001c0bb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c0c2:	83 c0 16             	add    eax,0x16
c001c0c5:	50                   	push   eax
c001c0c6:	e8 b5 44 fe ff       	call   c0000580 <strlen>
c001c0cb:	83 c4 10             	add    esp,0x10
c001c0ce:	ba 00 00 00 00       	mov    edx,0x0
c001c0d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0d7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c0db:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c0e2:	0f b6 c0             	movzx  eax,al
c001c0e5:	83 e0 10             	and    eax,0x10
c001c0e8:	74 0a                	je     c001c0f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c0ea:	b8 02 00 00 00       	mov    eax,0x2
c001c0ef:	eb 0b                	jmp    c001c0fc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0f4:	b8 01 00 00 00       	mov    eax,0x1
c001c0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c100:	83 ec 08             	sub    esp,0x8
c001c103:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c10a:	83 c0 16             	add    eax,0x16
c001c10d:	50                   	push   eax
c001c10e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c112:	83 c0 10             	add    eax,0x10
c001c115:	50                   	push   eax
c001c116:	e8 35 45 fe ff       	call   c0000650 <strcpy>
c001c11b:	83 c4 10             	add    esp,0x10
c001c11e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c125:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c12c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c130:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c137:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c13e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c145:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c14c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c153:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c15a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c161:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c168:	89 c6                	mov    esi,eax
c001c16a:	89 d7                	mov    edi,edx
c001c16c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c16e:	89 c8                	mov    eax,ecx
c001c170:	89 fa                	mov    edx,edi
c001c172:	89 f3                	mov    ebx,esi
c001c174:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c17b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c182:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c189:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c190:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c196:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c19d:	0f be c0             	movsx  eax,al
c001c1a0:	85 c0                	test   eax,eax
c001c1a2:	75 08                	jne    c001c1ac <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c1a4:	b8 07 00 00 00       	mov    eax,0x7
c001c1a9:	eb 1d                	jmp    c001c1c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c1ab:	90                   	nop
c001c1ac:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c1b3:	85 c0                	test   eax,eax
c001c1b5:	75 09                	jne    c001c1c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c1b7:	b8 00 00 00 00       	mov    eax,0x0
c001c1bc:	eb 0a                	jmp    c001c1c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c1be:	66 90                	xchg   ax,ax
c001c1c0:	b8 01 00 00 00       	mov    eax,0x1
c001c1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1c8:	81 c4 50 02 00 00    	add    esp,0x250
c001c1ce:	5b                   	pop    ebx
c001c1cf:	5e                   	pop    esi
c001c1d0:	5f                   	pop    edi
c001c1d1:	c3                   	ret    
c001c1d2:	66 90                	xchg   ax,ax

c001c1d4 <FAT::read(void*, unsigned long, void*, int*)>:
c001c1d4:	83 ec 1c             	sub    esp,0x1c
c001c1d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c1dc:	74 0a                	je     c001c1e8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c1de:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c1e3:	75 0b                	jne    c001c1f0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e8:	b8 04 00 00 00       	mov    eax,0x4
c001c1ed:	eb 41                	jmp    c001c230 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c1ef:	90                   	nop
c001c1f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c1f4:	50                   	push   eax
c001c1f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c1f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c1fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c201:	e8 3e 7f fe ff       	call   c0004144 <f_read>
c001c206:	83 c4 10             	add    esp,0x10
c001c209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c20d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c211:	89 c2                	mov    edx,eax
c001c213:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c217:	89 10                	mov    DWORD PTR [eax],edx
c001c219:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c21d:	85 c0                	test   eax,eax
c001c21f:	75 07                	jne    c001c228 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c221:	b8 00 00 00 00       	mov    eax,0x0
c001c226:	eb 08                	jmp    c001c230 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c228:	b8 01 00 00 00       	mov    eax,0x1
c001c22d:	8d 76 00             	lea    esi,[esi+0x0]
c001c230:	83 c4 1c             	add    esp,0x1c
c001c233:	c3                   	ret    

c001c234 <FAT::write(void*, unsigned long, void*, int*)>:
c001c234:	83 ec 1c             	sub    esp,0x1c
c001c237:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c23c:	74 0a                	je     c001c248 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c23e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c243:	75 0b                	jne    c001c250 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c245:	8d 76 00             	lea    esi,[esi+0x0]
c001c248:	b8 04 00 00 00       	mov    eax,0x4
c001c24d:	eb 41                	jmp    c001c290 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c24f:	90                   	nop
c001c250:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c254:	50                   	push   eax
c001c255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c259:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c25d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c261:	e8 bf 80 fe ff       	call   c0004325 <f_write>
c001c266:	83 c4 10             	add    esp,0x10
c001c269:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c26d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c271:	89 c2                	mov    edx,eax
c001c273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c277:	89 10                	mov    DWORD PTR [eax],edx
c001c279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c27d:	85 c0                	test   eax,eax
c001c27f:	75 07                	jne    c001c288 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c281:	b8 00 00 00 00       	mov    eax,0x0
c001c286:	eb 08                	jmp    c001c290 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c288:	b8 01 00 00 00       	mov    eax,0x1
c001c28d:	8d 76 00             	lea    esi,[esi+0x0]
c001c290:	83 c4 1c             	add    esp,0x1c
c001c293:	c3                   	ret    

c001c294 <FAT::close(void*)>:
c001c294:	83 ec 1c             	sub    esp,0x1c
c001c297:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c29c:	75 0a                	jne    c001c2a8 <FAT::close(void*)+0x14>
c001c29e:	b8 04 00 00 00       	mov    eax,0x4
c001c2a3:	eb 3f                	jmp    c001c2e4 <FAT::close(void*)+0x50>
c001c2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2a8:	83 ec 0c             	sub    esp,0xc
c001c2ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c2af:	e8 7d 83 fe ff       	call   c0004631 <f_close>
c001c2b4:	83 c4 10             	add    esp,0x10
c001c2b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c2c2:	e8 f5 36 ff ff       	call   c000f9bc <free>
c001c2c7:	83 c4 10             	add    esp,0x10
c001c2ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2ce:	85 c0                	test   eax,eax
c001c2d0:	75 0a                	jne    c001c2dc <FAT::close(void*)+0x48>
c001c2d2:	b8 00 00 00 00       	mov    eax,0x0
c001c2d7:	eb 0b                	jmp    c001c2e4 <FAT::close(void*)+0x50>
c001c2d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c2dc:	b8 01 00 00 00       	mov    eax,0x1
c001c2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e4:	83 c4 1c             	add    esp,0x1c
c001c2e7:	c3                   	ret    

c001c2e8 <FAT::closeDir(void*)>:
c001c2e8:	83 ec 1c             	sub    esp,0x1c
c001c2eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c2f0:	75 0a                	jne    c001c2fc <FAT::closeDir(void*)+0x14>
c001c2f2:	b8 04 00 00 00       	mov    eax,0x4
c001c2f7:	eb 3f                	jmp    c001c338 <FAT::closeDir(void*)+0x50>
c001c2f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c2fc:	83 ec 0c             	sub    esp,0xc
c001c2ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c303:	e8 d3 85 fe ff       	call   c00048db <f_closedir>
c001c308:	83 c4 10             	add    esp,0x10
c001c30b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c30f:	83 ec 0c             	sub    esp,0xc
c001c312:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c316:	e8 a1 36 ff ff       	call   c000f9bc <free>
c001c31b:	83 c4 10             	add    esp,0x10
c001c31e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c322:	85 c0                	test   eax,eax
c001c324:	75 0a                	jne    c001c330 <FAT::closeDir(void*)+0x48>
c001c326:	b8 00 00 00 00       	mov    eax,0x0
c001c32b:	eb 0b                	jmp    c001c338 <FAT::closeDir(void*)+0x50>
c001c32d:	8d 76 00             	lea    esi,[esi+0x0]
c001c330:	b8 01 00 00 00       	mov    eax,0x1
c001c335:	8d 76 00             	lea    esi,[esi+0x0]
c001c338:	83 c4 1c             	add    esp,0x1c
c001c33b:	c3                   	ret    

c001c33c <FAT::truncate(void*, unsigned long long)>:
c001c33c:	83 ec 2c             	sub    esp,0x2c
c001c33f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c343:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c347:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c34b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c34f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c354:	75 0a                	jne    c001c360 <FAT::truncate(void*, unsigned long long)+0x24>
c001c356:	b8 04 00 00 00       	mov    eax,0x4
c001c35b:	eb 47                	jmp    c001c3a4 <FAT::truncate(void*, unsigned long long)+0x68>
c001c35d:	8d 76 00             	lea    esi,[esi+0x0]
c001c360:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c364:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c367:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c36b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c373:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c377:	83 ec 08             	sub    esp,0x8
c001c37a:	50                   	push   eax
c001c37b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c37f:	e8 dc 82 fe ff       	call   c0004660 <f_lseek>
c001c384:	83 c4 10             	add    esp,0x10
c001c387:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c38b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c38f:	85 c0                	test   eax,eax
c001c391:	75 09                	jne    c001c39c <FAT::truncate(void*, unsigned long long)+0x60>
c001c393:	b8 00 00 00 00       	mov    eax,0x0
c001c398:	eb 0a                	jmp    c001c3a4 <FAT::truncate(void*, unsigned long long)+0x68>
c001c39a:	66 90                	xchg   ax,ax
c001c39c:	b8 01 00 00 00       	mov    eax,0x1
c001c3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3a4:	83 c4 2c             	add    esp,0x2c
c001c3a7:	c3                   	ret    

c001c3a8 <FAT::seek(void*, unsigned long long)>:
c001c3a8:	83 ec 2c             	sub    esp,0x2c
c001c3ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3bb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c3c0:	75 0a                	jne    c001c3cc <FAT::seek(void*, unsigned long long)+0x24>
c001c3c2:	b8 04 00 00 00       	mov    eax,0x4
c001c3c7:	eb 33                	jmp    c001c3fc <FAT::seek(void*, unsigned long long)+0x54>
c001c3c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3d0:	83 ec 08             	sub    esp,0x8
c001c3d3:	50                   	push   eax
c001c3d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c3d8:	e8 83 82 fe ff       	call   c0004660 <f_lseek>
c001c3dd:	83 c4 10             	add    esp,0x10
c001c3e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3e8:	85 c0                	test   eax,eax
c001c3ea:	75 08                	jne    c001c3f4 <FAT::seek(void*, unsigned long long)+0x4c>
c001c3ec:	b8 00 00 00 00       	mov    eax,0x0
c001c3f1:	eb 09                	jmp    c001c3fc <FAT::seek(void*, unsigned long long)+0x54>
c001c3f3:	90                   	nop
c001c3f4:	b8 01 00 00 00       	mov    eax,0x1
c001c3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3fc:	83 c4 2c             	add    esp,0x2c
c001c3ff:	c3                   	ret    

c001c400 <fatWrapperReadDisk>:
c001c400:	53                   	push   ebx
c001c401:	83 ec 18             	sub    esp,0x18
c001c404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c408:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c40c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c411:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c418:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c41c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c420:	ba 00 00 00 00       	mov    edx,0x0
c001c425:	83 ec 0c             	sub    esp,0xc
c001c428:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c42c:	53                   	push   ebx
c001c42d:	52                   	push   edx
c001c42e:	50                   	push   eax
c001c42f:	51                   	push   ecx
c001c430:	e8 17 e6 fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001c435:	83 c4 20             	add    esp,0x20
c001c438:	83 c4 18             	add    esp,0x18
c001c43b:	5b                   	pop    ebx
c001c43c:	c3                   	ret    
c001c43d:	8d 76 00             	lea    esi,[esi+0x0]

c001c440 <fatWrapperWriteDisk>:
c001c440:	53                   	push   ebx
c001c441:	83 ec 18             	sub    esp,0x18
c001c444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c448:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c44c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c451:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c458:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c45c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c460:	ba 00 00 00 00       	mov    edx,0x0
c001c465:	83 ec 0c             	sub    esp,0xc
c001c468:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c46c:	53                   	push   ebx
c001c46d:	52                   	push   edx
c001c46e:	50                   	push   eax
c001c46f:	51                   	push   ecx
c001c470:	e8 43 e6 fe ff       	call   c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>
c001c475:	83 c4 20             	add    esp,0x20
c001c478:	83 c4 18             	add    esp,0x18
c001c47b:	5b                   	pop    ebx
c001c47c:	c3                   	ret    
c001c47d:	8d 76 00             	lea    esi,[esi+0x0]

c001c480 <fatWrapperIoctl>:
c001c480:	53                   	push   ebx
c001c481:	83 ec 28             	sub    esp,0x28
c001c484:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c488:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c48c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c490:	88 d0                	mov    al,dl
c001c492:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c496:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c49b:	83 f8 02             	cmp    eax,0x2
c001c49e:	75 34                	jne    c001c4d4 <fatWrapperIoctl+0x54>
c001c4a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c4a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4ad:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c4b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c4ba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c4c0:	89 c2                	mov    edx,eax
c001c4c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4c6:	66 89 10             	mov    WORD PTR [eax],dx
c001c4c9:	b8 00 00 00 00       	mov    eax,0x0
c001c4ce:	e9 c5 00 00 00       	jmp    c001c598 <fatWrapperIoctl+0x118>
c001c4d3:	90                   	nop
c001c4d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4d9:	83 f8 01             	cmp    eax,0x1
c001c4dc:	75 6a                	jne    c001c548 <fatWrapperIoctl+0xc8>
c001c4de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4eb:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c4f2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c4f8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c4fe:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c504:	89 c8                	mov    eax,ecx
c001c506:	89 da                	mov    edx,ebx
c001c508:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c50c:	c1 e0 0a             	shl    eax,0xa
c001c50f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c514:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001c51b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c521:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c527:	89 cb                	mov    ebx,ecx
c001c529:	c1 fb 1f             	sar    ebx,0x1f
c001c52c:	53                   	push   ebx
c001c52d:	51                   	push   ecx
c001c52e:	52                   	push   edx
c001c52f:	50                   	push   eax
c001c530:	e8 7f 55 00 00       	call   c0021ab4 <__udivdi3>
c001c535:	83 c4 10             	add    esp,0x10
c001c538:	89 c2                	mov    edx,eax
c001c53a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c53e:	89 10                	mov    DWORD PTR [eax],edx
c001c540:	b8 00 00 00 00       	mov    eax,0x0
c001c545:	eb 51                	jmp    c001c598 <fatWrapperIoctl+0x118>
c001c547:	90                   	nop
c001c548:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c54d:	85 c0                	test   eax,eax
c001c54f:	75 07                	jne    c001c558 <fatWrapperIoctl+0xd8>
c001c551:	b8 00 00 00 00       	mov    eax,0x0
c001c556:	eb 40                	jmp    c001c598 <fatWrapperIoctl+0x118>
c001c558:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c55d:	83 f8 03             	cmp    eax,0x3
c001c560:	75 1a                	jne    c001c57c <fatWrapperIoctl+0xfc>
c001c562:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c566:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c56a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c56e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c574:	b8 00 00 00 00       	mov    eax,0x0
c001c579:	eb 1d                	jmp    c001c598 <fatWrapperIoctl+0x118>
c001c57b:	90                   	nop
c001c57c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c581:	83 f8 04             	cmp    eax,0x4
c001c584:	75 0a                	jne    c001c590 <fatWrapperIoctl+0x110>
c001c586:	b8 00 00 00 00       	mov    eax,0x0
c001c58b:	eb 0b                	jmp    c001c598 <fatWrapperIoctl+0x118>
c001c58d:	8d 76 00             	lea    esi,[esi+0x0]
c001c590:	b8 04 00 00 00       	mov    eax,0x4
c001c595:	8d 76 00             	lea    esi,[esi+0x0]
c001c598:	83 c4 28             	add    esp,0x28
c001c59b:	5b                   	pop    ebx
c001c59c:	c3                   	ret    
c001c59d:	90                   	nop
c001c59e:	66 90                	xchg   ax,ax

c001c5a0 <FAT::FAT()>:
c001c5a0:	83 ec 1c             	sub    esp,0x1c
c001c5a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5a7:	83 ec 0c             	sub    esp,0xc
c001c5aa:	50                   	push   eax
c001c5ab:	e8 02 b8 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001c5b0:	83 c4 10             	add    esp,0x10
c001c5b3:	ba 78 59 02 c0       	mov    edx,0xc0025978
c001c5b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5bc:	89 10                	mov    DWORD PTR [eax],edx
c001c5be:	c7 05 60 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb60,0x0
c001c5c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c5d0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c5d5:	7f 19                	jg     c001c5f0 <FAT::FAT()+0x50>
c001c5d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5db:	c7 04 85 80 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1480],0xffffffff
c001c5e6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c5eb:	eb e3                	jmp    c001c5d0 <FAT::FAT()+0x30>
c001c5ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c5f0:	90                   	nop
c001c5f1:	83 c4 1c             	add    esp,0x1c
c001c5f4:	c3                   	ret    
c001c5f5:	90                   	nop
c001c5f6:	66 90                	xchg   ax,ax

c001c5f8 <FAT::fixFilepath(char*)>:
c001c5f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5fc:	8a 00                	mov    al,BYTE PTR [eax]
c001c5fe:	0f be c0             	movsx  eax,al
c001c601:	83 f8 40             	cmp    eax,0x40
c001c604:	7e 2e                	jle    c001c634 <FAT::fixFilepath(char*)+0x3c>
c001c606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c60a:	8a 00                	mov    al,BYTE PTR [eax]
c001c60c:	83 e8 41             	sub    eax,0x41
c001c60f:	88 c2                	mov    dl,al
c001c611:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c615:	88 10                	mov    BYTE PTR [eax],dl
c001c617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c61b:	8a 00                	mov    al,BYTE PTR [eax]
c001c61d:	0f be c0             	movsx  eax,al
c001c620:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001c627:	83 c0 30             	add    eax,0x30
c001c62a:	88 c2                	mov    dl,al
c001c62c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c630:	88 10                	mov    BYTE PTR [eax],dl
c001c632:	66 90                	xchg   ax,ax
c001c634:	90                   	nop
c001c635:	c3                   	ret    
c001c636:	66 90                	xchg   ax,ax

c001c638 <FAT::open(char const*, void**, FileOpenMode)>:
c001c638:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c63e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c646:	74 0c                	je     c001c654 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c648:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c650:	75 0e                	jne    c001c660 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c652:	66 90                	xchg   ax,ax
c001c654:	b8 04 00 00 00       	mov    eax,0x4
c001c659:	e9 46 01 00 00       	jmp    c001c7a4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c65e:	66 90                	xchg   ax,ax
c001c660:	83 ec 08             	sub    esp,0x8
c001c663:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c66a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c66e:	50                   	push   eax
c001c66f:	e8 dc 3f fe ff       	call   c0000650 <strcpy>
c001c674:	83 c4 10             	add    esp,0x10
c001c677:	83 ec 08             	sub    esp,0x8
c001c67a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c67e:	50                   	push   eax
c001c67f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c686:	e8 6d ff ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001c68b:	83 c4 10             	add    esp,0x10
c001c68e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c696:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c69d:	83 e0 01             	and    eax,0x1
c001c6a0:	74 12                	je     c001c6b4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c6a2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c6a9:	83 c8 01             	or     eax,0x1
c001c6ac:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c6b3:	90                   	nop
c001c6b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c6bb:	83 e0 04             	and    eax,0x4
c001c6be:	74 24                	je     c001c6e4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c6c0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c6c7:	83 c8 30             	or     eax,0x30
c001c6ca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c6d1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c6d8:	83 c8 02             	or     eax,0x2
c001c6db:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c6e2:	66 90                	xchg   ax,ax
c001c6e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c6eb:	83 e0 02             	and    eax,0x2
c001c6ee:	74 14                	je     c001c704 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c6f0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c6f7:	83 c8 02             	or     eax,0x2
c001c6fa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c701:	8d 76 00             	lea    esi,[esi+0x0]
c001c704:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c70b:	83 e0 08             	and    eax,0x8
c001c70e:	74 14                	je     c001c724 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c710:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c717:	83 c8 04             	or     eax,0x4
c001c71a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c721:	8d 76 00             	lea    esi,[esi+0x0]
c001c724:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c72b:	83 e0 10             	and    eax,0x10
c001c72e:	74 14                	je     c001c744 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c730:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c737:	83 c8 08             	or     eax,0x8
c001c73a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c741:	8d 76 00             	lea    esi,[esi+0x0]
c001c744:	83 ec 0c             	sub    esp,0xc
c001c747:	68 28 02 00 00       	push   0x228
c001c74c:	e8 5b 32 ff ff       	call   c000f9ac <malloc>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	89 c2                	mov    edx,eax
c001c756:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c75d:	89 10                	mov    DWORD PTR [eax],edx
c001c75f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c767:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c76e:	8b 00                	mov    eax,DWORD PTR [eax]
c001c770:	83 ec 04             	sub    esp,0x4
c001c773:	52                   	push   edx
c001c774:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c778:	52                   	push   edx
c001c779:	50                   	push   eax
c001c77a:	e8 02 77 fe ff       	call   c0003e81 <f_open>
c001c77f:	83 c4 10             	add    esp,0x10
c001c782:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c789:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c791:	74 09                	je     c001c79c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c793:	b8 01 00 00 00       	mov    eax,0x1
c001c798:	eb 0a                	jmp    c001c7a4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c79a:	66 90                	xchg   ax,ax
c001c79c:	b8 00 00 00 00       	mov    eax,0x0
c001c7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c7aa:	c3                   	ret    
c001c7ab:	90                   	nop

c001c7ac <FAT::openDir(char const*, void**)>:
c001c7ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c7b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c7ba:	74 0c                	je     c001c7c8 <FAT::openDir(char const*, void**)+0x1c>
c001c7bc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c7c4:	75 0e                	jne    c001c7d4 <FAT::openDir(char const*, void**)+0x28>
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	b8 04 00 00 00       	mov    eax,0x4
c001c7cd:	e9 82 00 00 00       	jmp    c001c854 <FAT::openDir(char const*, void**)+0xa8>
c001c7d2:	66 90                	xchg   ax,ax
c001c7d4:	83 ec 08             	sub    esp,0x8
c001c7d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c7de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c7e2:	50                   	push   eax
c001c7e3:	e8 68 3e fe ff       	call   c0000650 <strcpy>
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	83 ec 08             	sub    esp,0x8
c001c7ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c7f2:	50                   	push   eax
c001c7f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c7fa:	e8 f9 fd ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	83 ec 0c             	sub    esp,0xc
c001c805:	6a 30                	push   0x30
c001c807:	e8 a0 31 ff ff       	call   c000f9ac <malloc>
c001c80c:	83 c4 10             	add    esp,0x10
c001c80f:	89 c2                	mov    edx,eax
c001c811:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c818:	89 10                	mov    DWORD PTR [eax],edx
c001c81a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c821:	8b 00                	mov    eax,DWORD PTR [eax]
c001c823:	83 ec 08             	sub    esp,0x8
c001c826:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c82a:	52                   	push   edx
c001c82b:	50                   	push   eax
c001c82c:	e8 df 7f fe ff       	call   c0004810 <f_opendir>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c83b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c843:	74 07                	je     c001c84c <FAT::openDir(char const*, void**)+0xa0>
c001c845:	b8 01 00 00 00       	mov    eax,0x1
c001c84a:	eb 08                	jmp    c001c854 <FAT::openDir(char const*, void**)+0xa8>
c001c84c:	b8 00 00 00 00       	mov    eax,0x0
c001c851:	8d 76 00             	lea    esi,[esi+0x0]
c001c854:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c85a:	c3                   	ret    
c001c85b:	90                   	nop

c001c85c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c85c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c862:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c86a:	75 0c                	jne    c001c878 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c86c:	b8 04 00 00 00       	mov    eax,0x4
c001c871:	e9 d6 00 00 00       	jmp    c001c94c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c876:	66 90                	xchg   ax,ax
c001c878:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c880:	75 0a                	jne    c001c88c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c882:	b8 04 00 00 00       	mov    eax,0x4
c001c887:	e9 c0 00 00 00       	jmp    c001c94c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c88c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c894:	75 0a                	jne    c001c8a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c896:	b8 04 00 00 00       	mov    eax,0x4
c001c89b:	e9 ac 00 00 00       	jmp    c001c94c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c8a0:	83 ec 08             	sub    esp,0x8
c001c8a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c8aa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c8b1:	50                   	push   eax
c001c8b2:	e8 99 3d fe ff       	call   c0000650 <strcpy>
c001c8b7:	83 c4 10             	add    esp,0x10
c001c8ba:	83 ec 08             	sub    esp,0x8
c001c8bd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c8c4:	50                   	push   eax
c001c8c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c8cc:	e8 27 fd ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001c8d1:	83 c4 10             	add    esp,0x10
c001c8d4:	83 ec 08             	sub    esp,0x8
c001c8d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c8db:	50                   	push   eax
c001c8dc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c8e3:	50                   	push   eax
c001c8e4:	e8 a6 80 fe ff       	call   c000498f <f_stat>
c001c8e9:	83 c4 10             	add    esp,0x10
c001c8ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c8f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c8fa:	85 c0                	test   eax,eax
c001c8fc:	74 0a                	je     c001c908 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c8fe:	83 f8 04             	cmp    eax,0x4
c001c901:	74 39                	je     c001c93c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c903:	eb 3f                	jmp    c001c944 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c905:	8d 76 00             	lea    esi,[esi+0x0]
c001c908:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c90c:	0f b6 c0             	movzx  eax,al
c001c90f:	83 e0 10             	and    eax,0x10
c001c912:	0f 95 c2             	setne  dl
c001c915:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c91c:	88 10                	mov    BYTE PTR [eax],dl
c001c91e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c922:	ba 00 00 00 00       	mov    edx,0x0
c001c927:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c92e:	89 01                	mov    DWORD PTR [ecx],eax
c001c930:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c933:	b8 00 00 00 00       	mov    eax,0x0
c001c938:	eb 12                	jmp    c001c94c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c93a:	66 90                	xchg   ax,ax
c001c93c:	b8 02 00 00 00       	mov    eax,0x2
c001c941:	eb 09                	jmp    c001c94c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c943:	90                   	nop
c001c944:	b8 01 00 00 00       	mov    eax,0x1
c001c949:	8d 76 00             	lea    esi,[esi+0x0]
c001c94c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c952:	c3                   	ret    
c001c953:	90                   	nop

c001c954 <FAT::unlink(char const*)>:
c001c954:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c95a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c962:	75 08                	jne    c001c96c <FAT::unlink(char const*)+0x18>
c001c964:	b8 04 00 00 00       	mov    eax,0x4
c001c969:	eb 61                	jmp    c001c9cc <FAT::unlink(char const*)+0x78>
c001c96b:	90                   	nop
c001c96c:	83 ec 08             	sub    esp,0x8
c001c96f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c976:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c97a:	50                   	push   eax
c001c97b:	e8 d0 3c fe ff       	call   c0000650 <strcpy>
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	83 ec 08             	sub    esp,0x8
c001c986:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c98a:	50                   	push   eax
c001c98b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c992:	e8 61 fc ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001c997:	83 c4 10             	add    esp,0x10
c001c99a:	83 ec 0c             	sub    esp,0xc
c001c99d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c9a1:	50                   	push   eax
c001c9a2:	e8 5a 82 fe ff       	call   c0004c01 <f_unlink>
c001c9a7:	83 c4 10             	add    esp,0x10
c001c9aa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c9b1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c9b8:	85 c0                	test   eax,eax
c001c9ba:	75 08                	jne    c001c9c4 <FAT::unlink(char const*)+0x70>
c001c9bc:	b8 00 00 00 00       	mov    eax,0x0
c001c9c1:	eb 09                	jmp    c001c9cc <FAT::unlink(char const*)+0x78>
c001c9c3:	90                   	nop
c001c9c4:	b8 01 00 00 00       	mov    eax,0x1
c001c9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c9d2:	c3                   	ret    
c001c9d3:	90                   	nop

c001c9d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c9d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c9da:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001c9e1:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001c9e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c9ec:	88 d0                	mov    al,dl
c001c9ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c9f2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c9fa:	75 0c                	jne    c001ca08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001c9fc:	b8 04 00 00 00       	mov    eax,0x4
c001ca01:	e9 7e 01 00 00       	jmp    c001cb84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001ca06:	66 90                	xchg   ax,ax
c001ca08:	83 ec 08             	sub    esp,0x8
c001ca0b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ca12:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ca16:	50                   	push   eax
c001ca17:	e8 34 3c fe ff       	call   c0000650 <strcpy>
c001ca1c:	83 c4 10             	add    esp,0x10
c001ca1f:	83 ec 08             	sub    esp,0x8
c001ca22:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ca26:	50                   	push   eax
c001ca27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ca2e:	e8 c5 fb ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001ca33:	83 c4 10             	add    esp,0x10
c001ca36:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ca3e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ca46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca4b:	83 e0 01             	and    eax,0x1
c001ca4e:	74 14                	je     c001ca64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001ca50:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ca57:	83 c8 01             	or     eax,0x1
c001ca5a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ca61:	8d 76 00             	lea    esi,[esi+0x0]
c001ca64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca69:	83 e0 02             	and    eax,0x2
c001ca6c:	74 12                	je     c001ca80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001ca6e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ca75:	83 c8 20             	or     eax,0x20
c001ca78:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ca7f:	90                   	nop
c001ca80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca85:	83 e0 04             	and    eax,0x4
c001ca88:	74 12                	je     c001ca9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ca8a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ca91:	83 c8 04             	or     eax,0x4
c001ca94:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ca9b:	90                   	nop
c001ca9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001caa1:	83 e0 08             	and    eax,0x8
c001caa4:	74 12                	je     c001cab8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001caa6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001caad:	83 c8 02             	or     eax,0x2
c001cab0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cab7:	90                   	nop
c001cab8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cabd:	83 e0 01             	and    eax,0x1
c001cac0:	74 12                	je     c001cad4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001cac2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cac9:	83 c8 01             	or     eax,0x1
c001cacc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cad3:	90                   	nop
c001cad4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cad9:	83 e0 02             	and    eax,0x2
c001cadc:	74 12                	je     c001caf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001cade:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cae5:	83 c8 20             	or     eax,0x20
c001cae8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001caef:	90                   	nop
c001caf0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001caf5:	83 e0 04             	and    eax,0x4
c001caf8:	74 12                	je     c001cb0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001cafa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cb01:	83 c8 04             	or     eax,0x4
c001cb04:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cb0b:	90                   	nop
c001cb0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cb11:	83 e0 08             	and    eax,0x8
c001cb14:	74 12                	je     c001cb28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001cb16:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cb1d:	83 c8 02             	or     eax,0x2
c001cb20:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cb27:	90                   	nop
c001cb28:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001cb2f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cb36:	09 d0                	or     eax,edx
c001cb38:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cb3f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001cb47:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001cb4f:	83 ec 04             	sub    esp,0x4
c001cb52:	52                   	push   edx
c001cb53:	50                   	push   eax
c001cb54:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cb58:	50                   	push   eax
c001cb59:	e8 16 85 fe ff       	call   c0005074 <f_chmod>
c001cb5e:	83 c4 10             	add    esp,0x10
c001cb61:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001cb68:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001cb6f:	85 c0                	test   eax,eax
c001cb71:	75 09                	jne    c001cb7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001cb73:	b8 00 00 00 00       	mov    eax,0x0
c001cb78:	eb 0a                	jmp    c001cb84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001cb7a:	66 90                	xchg   ax,ax
c001cb7c:	b8 01 00 00 00       	mov    eax,0x1
c001cb81:	8d 76 00             	lea    esi,[esi+0x0]
c001cb84:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cb8a:	c3                   	ret    
c001cb8b:	90                   	nop

c001cb8c <FAT::rename(char const*, char const*)>:
c001cb8c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cb92:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001cb9a:	74 0c                	je     c001cba8 <FAT::rename(char const*, char const*)+0x1c>
c001cb9c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001cba4:	75 0e                	jne    c001cbb4 <FAT::rename(char const*, char const*)+0x28>
c001cba6:	66 90                	xchg   ax,ax
c001cba8:	b8 04 00 00 00       	mov    eax,0x4
c001cbad:	e9 9e 00 00 00       	jmp    c001cc50 <FAT::rename(char const*, char const*)+0xc4>
c001cbb2:	66 90                	xchg   ax,ax
c001cbb4:	83 ec 08             	sub    esp,0x8
c001cbb7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cbbe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cbc5:	50                   	push   eax
c001cbc6:	e8 85 3a fe ff       	call   c0000650 <strcpy>
c001cbcb:	83 c4 10             	add    esp,0x10
c001cbce:	83 ec 08             	sub    esp,0x8
c001cbd1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cbd8:	50                   	push   eax
c001cbd9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cbe0:	e8 13 fa ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001cbe5:	83 c4 10             	add    esp,0x10
c001cbe8:	83 ec 08             	sub    esp,0x8
c001cbeb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cbf2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cbf6:	50                   	push   eax
c001cbf7:	e8 54 3a fe ff       	call   c0000650 <strcpy>
c001cbfc:	83 c4 10             	add    esp,0x10
c001cbff:	83 ec 08             	sub    esp,0x8
c001cc02:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc06:	50                   	push   eax
c001cc07:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cc0e:	e8 e5 f9 ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001cc13:	83 c4 10             	add    esp,0x10
c001cc16:	83 ec 08             	sub    esp,0x8
c001cc19:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc1d:	50                   	push   eax
c001cc1e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cc25:	50                   	push   eax
c001cc26:	e8 91 82 fe ff       	call   c0004ebc <f_rename>
c001cc2b:	83 c4 10             	add    esp,0x10
c001cc2e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001cc35:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001cc3c:	85 c0                	test   eax,eax
c001cc3e:	75 08                	jne    c001cc48 <FAT::rename(char const*, char const*)+0xbc>
c001cc40:	b8 00 00 00 00       	mov    eax,0x0
c001cc45:	eb 09                	jmp    c001cc50 <FAT::rename(char const*, char const*)+0xc4>
c001cc47:	90                   	nop
c001cc48:	b8 01 00 00 00       	mov    eax,0x1
c001cc4d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc50:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cc56:	c3                   	ret    
c001cc57:	90                   	nop

c001cc58 <FAT::mkdir(char const*)>:
c001cc58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cc5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cc66:	75 08                	jne    c001cc70 <FAT::mkdir(char const*)+0x18>
c001cc68:	b8 04 00 00 00       	mov    eax,0x4
c001cc6d:	eb 61                	jmp    c001ccd0 <FAT::mkdir(char const*)+0x78>
c001cc6f:	90                   	nop
c001cc70:	83 ec 08             	sub    esp,0x8
c001cc73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cc7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc7e:	50                   	push   eax
c001cc7f:	e8 cc 39 fe ff       	call   c0000650 <strcpy>
c001cc84:	83 c4 10             	add    esp,0x10
c001cc87:	83 ec 08             	sub    esp,0x8
c001cc8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc8e:	50                   	push   eax
c001cc8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cc96:	e8 5d f9 ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cca5:	50                   	push   eax
c001cca6:	e8 76 80 fe ff       	call   c0004d21 <f_mkdir>
c001ccab:	83 c4 10             	add    esp,0x10
c001ccae:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ccb5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ccbc:	85 c0                	test   eax,eax
c001ccbe:	75 08                	jne    c001ccc8 <FAT::mkdir(char const*)+0x70>
c001ccc0:	b8 00 00 00 00       	mov    eax,0x0
c001ccc5:	eb 09                	jmp    c001ccd0 <FAT::mkdir(char const*)+0x78>
c001ccc7:	90                   	nop
c001ccc8:	b8 01 00 00 00       	mov    eax,0x1
c001cccd:	8d 76 00             	lea    esi,[esi+0x0]
c001ccd0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ccd6:	c3                   	ret    
c001ccd7:	90                   	nop

c001ccd8 <FAT::exists(char const*)>:
c001ccd8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ccde:	83 ec 08             	sub    esp,0x8
c001cce1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cce8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ccec:	50                   	push   eax
c001cced:	e8 5e 39 fe ff       	call   c0000650 <strcpy>
c001ccf2:	83 c4 10             	add    esp,0x10
c001ccf5:	83 ec 08             	sub    esp,0x8
c001ccf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ccfc:	50                   	push   eax
c001ccfd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cd04:	e8 ef f8 ff ff       	call   c001c5f8 <FAT::fixFilepath(char*)>
c001cd09:	83 c4 10             	add    esp,0x10
c001cd0c:	83 ec 08             	sub    esp,0x8
c001cd0f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001cd16:	50                   	push   eax
c001cd17:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cd1b:	50                   	push   eax
c001cd1c:	e8 6e 7c fe ff       	call   c000498f <f_stat>
c001cd21:	83 c4 10             	add    esp,0x10
c001cd24:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cd2b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cd32:	85 c0                	test   eax,eax
c001cd34:	75 06                	jne    c001cd3c <FAT::exists(char const*)+0x64>
c001cd36:	b0 01                	mov    al,0x1
c001cd38:	eb 06                	jmp    c001cd40 <FAT::exists(char const*)+0x68>
c001cd3a:	66 90                	xchg   ax,ax
c001cd3c:	b0 00                	mov    al,0x0
c001cd3e:	66 90                	xchg   ax,ax
c001cd40:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cd46:	c3                   	ret    
c001cd47:	90                   	nop

c001cd48 <isoReadDiscSectorHelper>:
c001cd48:	83 ec 2c             	sub    esp,0x2c
c001cd4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cd4f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cd53:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cd58:	83 e8 41             	sub    eax,0x41
c001cd5b:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001cd62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cd66:	ba 00 00 00 00       	mov    edx,0x0
c001cd6b:	83 ec 0c             	sub    esp,0xc
c001cd6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd72:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cd76:	52                   	push   edx
c001cd77:	50                   	push   eax
c001cd78:	51                   	push   ecx
c001cd79:	e8 ce dc fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001cd7e:	83 c4 20             	add    esp,0x20
c001cd81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd85:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cd8a:	74 0c                	je     c001cd98 <isoReadDiscSectorHelper+0x50>
c001cd8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cd90:	c1 e0 0b             	shl    eax,0xb
c001cd93:	eb 0b                	jmp    c001cda0 <isoReadDiscSectorHelper+0x58>
c001cd95:	8d 76 00             	lea    esi,[esi+0x0]
c001cd98:	b8 00 00 00 00       	mov    eax,0x0
c001cd9d:	8d 76 00             	lea    esi,[esi+0x0]
c001cda0:	83 c4 2c             	add    esp,0x2c
c001cda3:	c3                   	ret    

c001cda4 <iso_kprintf>:
c001cda4:	83 ec 0c             	sub    esp,0xc
c001cda7:	83 ec 08             	sub    esp,0x8
c001cdaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdae:	68 50 56 02 c0       	push   0xc0025650
c001cdb3:	e8 ae a1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cdb8:	83 c4 10             	add    esp,0x10
c001cdbb:	90                   	nop
c001cdbc:	83 c4 0c             	add    esp,0xc
c001cdbf:	c3                   	ret    

c001cdc0 <iso_kprintfd>:
c001cdc0:	83 ec 0c             	sub    esp,0xc
c001cdc3:	83 ec 08             	sub    esp,0x8
c001cdc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdca:	68 91 4b 02 c0       	push   0xc0024b91
c001cdcf:	e8 92 a1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cdd4:	83 c4 10             	add    esp,0x10
c001cdd7:	90                   	nop
c001cdd8:	83 c4 0c             	add    esp,0xc
c001cddb:	c3                   	ret    

c001cddc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cddc:	b8 08 00 00 00       	mov    eax,0x8
c001cde1:	c3                   	ret    

c001cde2 <ISO9660::truncate(void*, unsigned long long)>:
c001cde2:	b8 01 00 00 00       	mov    eax,0x1
c001cde7:	c3                   	ret    

c001cde8 <ISO9660::getName()>:
c001cde8:	b8 dc 59 02 c0       	mov    eax,0xc00259dc
c001cded:	c3                   	ret    

c001cdee <ISO9660::closeDir(void*)>:
c001cdee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdf2:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdf4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001cdf7:	90                   	nop

c001cdf8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001cdf8:	b8 01 00 00 00       	mov    eax,0x1
c001cdfd:	c3                   	ret    

c001cdfe <ISO9660::unlink(char const*)>:
c001cdfe:	b8 01 00 00 00       	mov    eax,0x1
c001ce03:	c3                   	ret    

c001ce04 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ce04:	b8 03 00 00 00       	mov    eax,0x3
c001ce09:	c3                   	ret    

c001ce0a <ISO9660::rename(char const*, char const*)>:
c001ce0a:	b8 01 00 00 00       	mov    eax,0x1
c001ce0f:	c3                   	ret    

c001ce10 <ISO9660::mkdir(char const*)>:
c001ce10:	b8 01 00 00 00       	mov    eax,0x1
c001ce15:	c3                   	ret    

c001ce16 <ISO9660::~ISO9660()>:
c001ce16:	83 ec 0c             	sub    esp,0xc
c001ce19:	ba 1c 5b 02 c0       	mov    edx,0xc0025b1c
c001ce1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce22:	89 10                	mov    DWORD PTR [eax],edx
c001ce24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce28:	83 ec 0c             	sub    esp,0xc
c001ce2b:	50                   	push   eax
c001ce2c:	e8 a5 af fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001ce31:	83 c4 10             	add    esp,0x10
c001ce34:	90                   	nop
c001ce35:	83 c4 0c             	add    esp,0xc
c001ce38:	c3                   	ret    
c001ce39:	90                   	nop

c001ce3a <ISO9660::~ISO9660()>:
c001ce3a:	83 ec 0c             	sub    esp,0xc
c001ce3d:	83 ec 0c             	sub    esp,0xc
c001ce40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce44:	e8 cd ff ff ff       	call   c001ce16 <ISO9660::~ISO9660()>
c001ce49:	83 c4 10             	add    esp,0x10
c001ce4c:	83 ec 08             	sub    esp,0x8
c001ce4f:	6a 08                	push   0x8
c001ce51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce55:	e8 9b 04 ff ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001ce5a:	83 c4 10             	add    esp,0x10
c001ce5d:	83 c4 0c             	add    esp,0xc
c001ce60:	c3                   	ret    
c001ce61:	90                   	nop

c001ce62 <ISO9660::exists(char const*)>:
c001ce62:	83 ec 18             	sub    esp,0x18
c001ce65:	68 f7 59 02 c0       	push   0xc00259f7
c001ce6a:	e8 93 2f ff ff       	call   c000fe02 <KePanic(char const*)>
c001ce6f:	31 c0                	xor    eax,eax
c001ce71:	83 c4 1c             	add    esp,0x1c
c001ce74:	c3                   	ret    
c001ce75:	90                   	nop

c001ce76 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ce76:	56                   	push   esi
c001ce77:	53                   	push   ebx
c001ce78:	53                   	push   ebx
c001ce79:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ce7d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ce81:	85 db                	test   ebx,ebx
c001ce83:	0f 84 ca 00 00 00    	je     c001cf53 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ce89:	85 f6                	test   esi,esi
c001ce8b:	0f 84 c2 00 00 00    	je     c001cf53 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ce91:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ce96:	b8 03 00 00 00       	mov    eax,0x3
c001ce9b:	0f 85 b7 00 00 00    	jne    c001cf58 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cea1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cea3:	38 0d 60 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec60,cl
c001cea9:	0f be 05 60 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec60
c001ceb0:	74 1b                	je     c001cecd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ceb2:	85 c0                	test   eax,eax
c001ceb4:	74 10                	je     c001cec6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ceb6:	83 ec 0c             	sub    esp,0xc
c001ceb9:	68 15 5a 02 c0       	push   0xc0025a15
c001cebe:	e8 3f 2f ff ff       	call   c000fe02 <KePanic(char const*)>
c001cec3:	83 c4 10             	add    esp,0x10
c001cec6:	8a 03                	mov    al,BYTE PTR [ebx]
c001cec8:	a2 60 ec 02 c0       	mov    ds:0xc002ec60,al
c001cecd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ced0:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ced7:	85 c0                	test   eax,eax
c001ced9:	74 09                	je     c001cee4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001cedb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cee2:	74 48                	je     c001cf2c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001cee4:	83 ec 0c             	sub    esp,0xc
c001cee7:	68 25 5a 02 c0       	push   0xc0025a25
c001ceec:	e8 75 a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cef1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cef4:	83 c4 10             	add    esp,0x10
c001cef7:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cefe:	85 c0                	test   eax,eax
c001cf00:	74 17                	je     c001cf19 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001cf02:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cf09:	83 ec 0c             	sub    esp,0xc
c001cf0c:	68 45 5a 02 c0       	push   0xc0025a45
c001cf11:	e8 50 a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cf16:	83 c4 10             	add    esp,0x10
c001cf19:	0f be 05 60 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec60
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	50                   	push   eax
c001cf24:	e8 1e 9d fe ff       	call   c0006c47 <init_percd>
c001cf29:	83 c4 10             	add    esp,0x10
c001cf2c:	51                   	push   ecx
c001cf2d:	83 c3 03             	add    ebx,0x3
c001cf30:	51                   	push   ecx
c001cf31:	6a 00                	push   0x0
c001cf33:	53                   	push   ebx
c001cf34:	e8 d1 97 fe ff       	call   c000670a <iso_open>
c001cf39:	83 c4 10             	add    esp,0x10
c001cf3c:	89 c2                	mov    edx,eax
c001cf3e:	b8 01 00 00 00       	mov    eax,0x1
c001cf43:	83 fa ff             	cmp    edx,0xffffffff
c001cf46:	74 10                	je     c001cf58 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cf48:	83 c2 32             	add    edx,0x32
c001cf4b:	31 c0                	xor    eax,eax
c001cf4d:	01 d2                	add    edx,edx
c001cf4f:	89 16                	mov    DWORD PTR [esi],edx
c001cf51:	eb 05                	jmp    c001cf58 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cf53:	b8 04 00 00 00       	mov    eax,0x4
c001cf58:	5a                   	pop    edx
c001cf59:	5b                   	pop    ebx
c001cf5a:	5e                   	pop    esi
c001cf5b:	c3                   	ret    

c001cf5c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cf5c:	53                   	push   ebx
c001cf5d:	83 ec 08             	sub    esp,0x8
c001cf60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cf68:	85 c0                	test   eax,eax
c001cf6a:	74 2d                	je     c001cf99 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cf6c:	85 db                	test   ebx,ebx
c001cf6e:	74 29                	je     c001cf99 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cf70:	52                   	push   edx
c001cf71:	b9 02 00 00 00       	mov    ecx,0x2
c001cf76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf7a:	99                   	cdq    
c001cf7b:	f7 f9                	idiv   ecx
c001cf7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf81:	83 e8 32             	sub    eax,0x32
c001cf84:	50                   	push   eax
c001cf85:	e8 28 98 fe ff       	call   c00067b2 <iso_read>
c001cf8a:	83 c4 10             	add    esp,0x10
c001cf8d:	89 03                	mov    DWORD PTR [ebx],eax
c001cf8f:	09 d0                	or     eax,edx
c001cf91:	0f 94 c0             	sete   al
c001cf94:	0f b6 c0             	movzx  eax,al
c001cf97:	eb 05                	jmp    c001cf9e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001cf99:	b8 04 00 00 00       	mov    eax,0x4
c001cf9e:	83 c4 08             	add    esp,0x8
c001cfa1:	5b                   	pop    ebx
c001cfa2:	c3                   	ret    
c001cfa3:	90                   	nop

c001cfa4 <ISO9660::seek(void*, unsigned long long)>:
c001cfa4:	57                   	push   edi
c001cfa5:	b8 04 00 00 00       	mov    eax,0x4
c001cfaa:	56                   	push   esi
c001cfab:	51                   	push   ecx
c001cfac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfb0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cfb4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cfb8:	85 d2                	test   edx,edx
c001cfba:	74 26                	je     c001cfe2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001cfbc:	89 d0                	mov    eax,edx
c001cfbe:	b9 02 00 00 00       	mov    ecx,0x2
c001cfc3:	6a 00                	push   0x0
c001cfc5:	99                   	cdq    
c001cfc6:	f7 f9                	idiv   ecx
c001cfc8:	57                   	push   edi
c001cfc9:	56                   	push   esi
c001cfca:	83 e8 32             	sub    eax,0x32
c001cfcd:	50                   	push   eax
c001cfce:	e8 f5 98 fe ff       	call   c00068c8 <iso_seek>
c001cfd3:	83 c4 10             	add    esp,0x10
c001cfd6:	31 f0                	xor    eax,esi
c001cfd8:	31 fa                	xor    edx,edi
c001cfda:	09 d0                	or     eax,edx
c001cfdc:	0f 95 c0             	setne  al
c001cfdf:	0f b6 c0             	movzx  eax,al
c001cfe2:	5a                   	pop    edx
c001cfe3:	5e                   	pop    esi
c001cfe4:	5f                   	pop    edi
c001cfe5:	c3                   	ret    

c001cfe6 <ISO9660::tell(void*, unsigned long long*)>:
c001cfe6:	53                   	push   ebx
c001cfe7:	83 ec 08             	sub    esp,0x8
c001cfea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cff2:	85 c0                	test   eax,eax
c001cff4:	74 24                	je     c001d01a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cff6:	85 db                	test   ebx,ebx
c001cff8:	74 20                	je     c001d01a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cffa:	b9 02 00 00 00       	mov    ecx,0x2
c001cfff:	99                   	cdq    
c001d000:	f7 f9                	idiv   ecx
c001d002:	83 ec 0c             	sub    esp,0xc
c001d005:	83 e8 32             	sub    eax,0x32
c001d008:	50                   	push   eax
c001d009:	e8 3e 99 fe ff       	call   c000694c <iso_tell>
c001d00e:	83 c4 10             	add    esp,0x10
c001d011:	89 03                	mov    DWORD PTR [ebx],eax
c001d013:	31 c0                	xor    eax,eax
c001d015:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d018:	eb 05                	jmp    c001d01f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d01a:	b8 04 00 00 00       	mov    eax,0x4
c001d01f:	83 c4 08             	add    esp,0x8
c001d022:	5b                   	pop    ebx
c001d023:	c3                   	ret    

c001d024 <ISO9660::stat(void*, unsigned long long*)>:
c001d024:	56                   	push   esi
c001d025:	53                   	push   ebx
c001d026:	83 ec 10             	sub    esp,0x10
c001d029:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d02d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d031:	68 69 5a 02 c0       	push   0xc0025a69
c001d036:	e8 2b 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	85 db                	test   ebx,ebx
c001d040:	74 2a                	je     c001d06c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d042:	85 f6                	test   esi,esi
c001d044:	74 26                	je     c001d06c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d046:	89 d8                	mov    eax,ebx
c001d048:	b9 02 00 00 00       	mov    ecx,0x2
c001d04d:	99                   	cdq    
c001d04e:	83 ec 0c             	sub    esp,0xc
c001d051:	f7 f9                	idiv   ecx
c001d053:	83 e8 32             	sub    eax,0x32
c001d056:	50                   	push   eax
c001d057:	e8 21 99 fe ff       	call   c000697d <iso_total>
c001d05c:	83 c4 10             	add    esp,0x10
c001d05f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001d066:	89 06                	mov    DWORD PTR [esi],eax
c001d068:	31 c0                	xor    eax,eax
c001d06a:	eb 05                	jmp    c001d071 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d06c:	b8 04 00 00 00       	mov    eax,0x4
c001d071:	5a                   	pop    edx
c001d072:	5b                   	pop    ebx
c001d073:	5e                   	pop    esi
c001d074:	c3                   	ret    
c001d075:	90                   	nop

c001d076 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d076:	55                   	push   ebp
c001d077:	57                   	push   edi
c001d078:	56                   	push   esi
c001d079:	53                   	push   ebx
c001d07a:	83 ec 18             	sub    esp,0x18
c001d07d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d081:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d089:	68 71 5a 02 c0       	push   0xc0025a71
c001d08e:	e8 d3 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d093:	83 c4 10             	add    esp,0x10
c001d096:	85 ff                	test   edi,edi
c001d098:	0f 94 c0             	sete   al
c001d09b:	85 f6                	test   esi,esi
c001d09d:	0f 94 c2             	sete   dl
c001d0a0:	09 d0                	or     eax,edx
c001d0a2:	a8 01                	test   al,0x1
c001d0a4:	0f 85 dd 00 00 00    	jne    c001d187 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d0aa:	85 db                	test   ebx,ebx
c001d0ac:	0f 84 d5 00 00 00    	je     c001d187 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d0b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d0b5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d0bb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d0c2:	0f be 05 60 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec60
c001d0c9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d0cb:	38 0d 60 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec60,cl
c001d0d1:	74 1b                	je     c001d0ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d0d3:	85 c0                	test   eax,eax
c001d0d5:	74 10                	je     c001d0e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d0d7:	83 ec 0c             	sub    esp,0xc
c001d0da:	68 15 5a 02 c0       	push   0xc0025a15
c001d0df:	e8 1e 2d ff ff       	call   c000fe02 <KePanic(char const*)>
c001d0e4:	83 c4 10             	add    esp,0x10
c001d0e7:	8a 03                	mov    al,BYTE PTR [ebx]
c001d0e9:	a2 60 ec 02 c0       	mov    ds:0xc002ec60,al
c001d0ee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d0f1:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d0f8:	85 c0                	test   eax,eax
c001d0fa:	74 09                	je     c001d105 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d0fc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d103:	74 51                	je     c001d156 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d105:	83 ec 0c             	sub    esp,0xc
c001d108:	68 79 5a 02 c0       	push   0xc0025a79
c001d10d:	e8 54 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d112:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d115:	83 c4 10             	add    esp,0x10
c001d118:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001d120:	74 21                	je     c001d143 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d122:	83 ec 0c             	sub    esp,0xc
c001d125:	68 99 5a 02 c0       	push   0xc0025a99
c001d12a:	e8 37 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d12f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d13c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d143:	0f be 05 60 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec60
c001d14a:	83 ec 0c             	sub    esp,0xc
c001d14d:	50                   	push   eax
c001d14e:	e8 f4 9a fe ff       	call   c0006c47 <init_percd>
c001d153:	83 c4 10             	add    esp,0x10
c001d156:	52                   	push   edx
c001d157:	83 c3 03             	add    ebx,0x3
c001d15a:	52                   	push   edx
c001d15b:	6a 00                	push   0x0
c001d15d:	53                   	push   ebx
c001d15e:	e8 a7 95 fe ff       	call   c000670a <iso_open>
c001d163:	83 c4 10             	add    esp,0x10
c001d166:	83 f8 ff             	cmp    eax,0xffffffff
c001d169:	89 c5                	mov    ebp,eax
c001d16b:	75 21                	jne    c001d18e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d16d:	50                   	push   eax
c001d16e:	50                   	push   eax
c001d16f:	6a 01                	push   0x1
c001d171:	53                   	push   ebx
c001d172:	e8 93 95 fe ff       	call   c000670a <iso_open>
c001d177:	83 c4 10             	add    esp,0x10
c001d17a:	ba 02 00 00 00       	mov    edx,0x2
c001d17f:	40                   	inc    eax
c001d180:	74 2b                	je     c001d1ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d182:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d185:	eb 24                	jmp    c001d1ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d187:	ba 04 00 00 00       	mov    edx,0x4
c001d18c:	eb 1f                	jmp    c001d1ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d18e:	83 ec 0c             	sub    esp,0xc
c001d191:	50                   	push   eax
c001d192:	e8 e6 97 fe ff       	call   c000697d <iso_total>
c001d197:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d19e:	89 07                	mov    DWORD PTR [edi],eax
c001d1a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d1a3:	e8 ec 95 fe ff       	call   c0006794 <iso_close>
c001d1a8:	83 c4 10             	add    esp,0x10
c001d1ab:	31 d2                	xor    edx,edx
c001d1ad:	83 c4 0c             	add    esp,0xc
c001d1b0:	89 d0                	mov    eax,edx
c001d1b2:	5b                   	pop    ebx
c001d1b3:	5e                   	pop    esi
c001d1b4:	5f                   	pop    edi
c001d1b5:	5d                   	pop    ebp
c001d1b6:	c3                   	ret    
c001d1b7:	90                   	nop

c001d1b8 <ISO9660::close(void*)>:
c001d1b8:	83 ec 0c             	sub    esp,0xc
c001d1bb:	b8 04 00 00 00       	mov    eax,0x4
c001d1c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1c4:	85 d2                	test   edx,edx
c001d1c6:	74 1b                	je     c001d1e3 <ISO9660::close(void*)+0x2b>
c001d1c8:	89 d0                	mov    eax,edx
c001d1ca:	b9 02 00 00 00       	mov    ecx,0x2
c001d1cf:	99                   	cdq    
c001d1d0:	83 ec 0c             	sub    esp,0xc
c001d1d3:	f7 f9                	idiv   ecx
c001d1d5:	83 e8 32             	sub    eax,0x32
c001d1d8:	50                   	push   eax
c001d1d9:	e8 b6 95 fe ff       	call   c0006794 <iso_close>
c001d1de:	83 c4 10             	add    esp,0x10
c001d1e1:	31 c0                	xor    eax,eax
c001d1e3:	83 c4 0c             	add    esp,0xc
c001d1e6:	c3                   	ret    
c001d1e7:	90                   	nop

c001d1e8 <ISO9660::openDir(char const*, void**)>:
c001d1e8:	56                   	push   esi
c001d1e9:	53                   	push   ebx
c001d1ea:	50                   	push   eax
c001d1eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d1f3:	85 db                	test   ebx,ebx
c001d1f5:	0f 84 bd 00 00 00    	je     c001d2b8 <ISO9660::openDir(char const*, void**)+0xd0>
c001d1fb:	85 f6                	test   esi,esi
c001d1fd:	0f 84 b5 00 00 00    	je     c001d2b8 <ISO9660::openDir(char const*, void**)+0xd0>
c001d203:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d205:	38 15 60 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec60,dl
c001d20b:	0f be 05 60 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec60
c001d212:	74 1b                	je     c001d22f <ISO9660::openDir(char const*, void**)+0x47>
c001d214:	85 c0                	test   eax,eax
c001d216:	74 10                	je     c001d228 <ISO9660::openDir(char const*, void**)+0x40>
c001d218:	83 ec 0c             	sub    esp,0xc
c001d21b:	68 15 5a 02 c0       	push   0xc0025a15
c001d220:	e8 dd 2b ff ff       	call   c000fe02 <KePanic(char const*)>
c001d225:	83 c4 10             	add    esp,0x10
c001d228:	8a 03                	mov    al,BYTE PTR [ebx]
c001d22a:	a2 60 ec 02 c0       	mov    ds:0xc002ec60,al
c001d22f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d232:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d239:	85 c0                	test   eax,eax
c001d23b:	74 10                	je     c001d24d <ISO9660::openDir(char const*, void**)+0x65>
c001d23d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d244:	74 1a                	je     c001d260 <ISO9660::openDir(char const*, void**)+0x78>
c001d246:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d24d:	0f be 05 60 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec60
c001d254:	83 ec 0c             	sub    esp,0xc
c001d257:	50                   	push   eax
c001d258:	e8 ea 99 fe ff       	call   c0006c47 <init_percd>
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	50                   	push   eax
c001d261:	83 c3 03             	add    ebx,0x3
c001d264:	50                   	push   eax
c001d265:	6a 01                	push   0x1
c001d267:	53                   	push   ebx
c001d268:	e8 9d 94 fe ff       	call   c000670a <iso_open>
c001d26d:	83 c4 10             	add    esp,0x10
c001d270:	83 f8 ff             	cmp    eax,0xffffffff
c001d273:	89 c3                	mov    ebx,eax
c001d275:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001d27a:	75 1c                	jne    c001d298 <ISO9660::openDir(char const*, void**)+0xb0>
c001d27c:	53                   	push   ebx
c001d27d:	53                   	push   ebx
c001d27e:	68 bd 5a 02 c0       	push   0xc0025abd
c001d283:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d289:	e8 5e 55 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001d28e:	83 c4 10             	add    esp,0x10
c001d291:	b8 01 00 00 00       	mov    eax,0x1
c001d296:	eb 25                	jmp    c001d2bd <ISO9660::openDir(char const*, void**)+0xd5>
c001d298:	51                   	push   ecx
c001d299:	01 db                	add    ebx,ebx
c001d29b:	51                   	push   ecx
c001d29c:	83 c3 65             	add    ebx,0x65
c001d29f:	68 d0 5a 02 c0       	push   0xc0025ad0
c001d2a4:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d2aa:	e8 3d 55 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001d2af:	83 c4 10             	add    esp,0x10
c001d2b2:	31 c0                	xor    eax,eax
c001d2b4:	89 1e                	mov    DWORD PTR [esi],ebx
c001d2b6:	eb 05                	jmp    c001d2bd <ISO9660::openDir(char const*, void**)+0xd5>
c001d2b8:	b8 04 00 00 00       	mov    eax,0x4
c001d2bd:	5a                   	pop    edx
c001d2be:	5b                   	pop    ebx
c001d2bf:	5e                   	pop    esi
c001d2c0:	c3                   	ret    
c001d2c1:	90                   	nop

c001d2c2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d2c2:	55                   	push   ebp
c001d2c3:	57                   	push   edi
c001d2c4:	56                   	push   esi
c001d2c5:	53                   	push   ebx
c001d2c6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d2cc:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001d2d3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d2da:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001d2e1:	85 db                	test   ebx,ebx
c001d2e3:	0f 84 e4 00 00 00    	je     c001d3cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d2e9:	85 ed                	test   ebp,ebp
c001d2eb:	0f 84 dc 00 00 00    	je     c001d3cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d2f1:	83 ec 0c             	sub    esp,0xc
c001d2f4:	68 e3 5a 02 c0       	push   0xc0025ae3
c001d2f9:	e8 68 9c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d2fe:	89 d8                	mov    eax,ebx
c001d300:	b9 02 00 00 00       	mov    ecx,0x2
c001d305:	99                   	cdq    
c001d306:	f7 f9                	idiv   ecx
c001d308:	83 e8 32             	sub    eax,0x32
c001d30b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d30e:	e8 bc 96 fe ff       	call   c00069cf <iso_readdir>
c001d313:	83 c4 10             	add    esp,0x10
c001d316:	85 c0                	test   eax,eax
c001d318:	89 c3                	mov    ebx,eax
c001d31a:	75 38                	jne    c001d354 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001d31c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001d321:	53                   	push   ebx
c001d322:	53                   	push   ebx
c001d323:	68 ee 5a 02 c0       	push   0xc0025aee
c001d328:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d32e:	e8 b9 54 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001d333:	83 c4 0c             	add    esp,0xc
c001d336:	68 10 01 00 00       	push   0x110
c001d33b:	6a 00                	push   0x0
c001d33d:	57                   	push   edi
c001d33e:	e8 ad 31 fe ff       	call   c00004f0 <memset>
c001d343:	83 c4 10             	add    esp,0x10
c001d346:	b8 01 00 00 00       	mov    eax,0x1
c001d34b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001d352:	eb 7e                	jmp    c001d3d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d354:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d35a:	8d 70 08             	lea    esi,[eax+0x8]
c001d35d:	83 ec 0c             	sub    esp,0xc
c001d360:	56                   	push   esi
c001d361:	e8 1a 32 fe ff       	call   c0000580 <strlen>
c001d366:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d36e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d372:	83 c4 10             	add    esp,0x10
c001d375:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001d379:	75 0a                	jne    c001d385 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001d37b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001d37e:	b8 02 00 00 00       	mov    eax,0x2
c001d383:	74 05                	je     c001d38a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001d385:	b8 01 00 00 00       	mov    eax,0x1
c001d38a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d38e:	50                   	push   eax
c001d38f:	50                   	push   eax
c001d390:	56                   	push   esi
c001d391:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d395:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d399:	50                   	push   eax
c001d39a:	e8 b1 32 fe ff       	call   c0000650 <strcpy>
c001d39f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d3a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3a8:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001d3af:	5a                   	pop    edx
c001d3b0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001d3b5:	59                   	pop    ecx
c001d3b6:	68 01 5b 02 c0       	push   0xc0025b01
c001d3bb:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d3c1:	e8 26 54 ff ff       	call   c00127ec <VgaText::puts(char const*)>
c001d3c6:	83 c4 10             	add    esp,0x10
c001d3c9:	31 c0                	xor    eax,eax
c001d3cb:	eb 05                	jmp    c001d3d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d3cd:	b8 04 00 00 00       	mov    eax,0x4
c001d3d2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d3d8:	5b                   	pop    ebx
c001d3d9:	5e                   	pop    esi
c001d3da:	5f                   	pop    edi
c001d3db:	5d                   	pop    ebp
c001d3dc:	c3                   	ret    

c001d3dd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d3dd:	57                   	push   edi
c001d3de:	56                   	push   esi
c001d3df:	53                   	push   ebx
c001d3e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d3e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d3e8:	39 35 64 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec64,esi
c001d3ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d3f2:	0f be cb             	movsx  ecx,bl
c001d3f5:	75 0b                	jne    c001d402 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d3f7:	0f be 05 64 6d 02 c0 	movsx  eax,BYTE PTR ds:0xc0026d64
c001d3fe:	39 c8                	cmp    eax,ecx
c001d400:	74 47                	je     c001d449 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d402:	83 ec 0c             	sub    esp,0xc
c001d405:	31 d2                	xor    edx,edx
c001d407:	68 80 ec 02 c0       	push   0xc002ec80
c001d40c:	6a 01                	push   0x1
c001d40e:	52                   	push   edx
c001d40f:	56                   	push   esi
c001d410:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001d417:	e8 30 d6 fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001d41c:	83 c4 20             	add    esp,0x20
c001d41f:	85 c0                	test   eax,eax
c001d421:	75 0e                	jne    c001d431 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d423:	89 35 64 ec 02 c0    	mov    DWORD PTR ds:0xc002ec64,esi
c001d429:	88 1d 64 6d 02 c0    	mov    BYTE PTR ds:0xc0026d64,bl
c001d42f:	eb 18                	jmp    c001d449 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d431:	50                   	push   eax
c001d432:	68 00 08 00 00       	push   0x800
c001d437:	6a 00                	push   0x0
c001d439:	57                   	push   edi
c001d43a:	e8 b1 30 fe ff       	call   c00004f0 <memset>
c001d43f:	83 c4 10             	add    esp,0x10
c001d442:	b8 01 00 00 00       	mov    eax,0x1
c001d447:	eb 0e                	jmp    c001d457 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d449:	be 80 ec 02 c0       	mov    esi,0xc002ec80
c001d44e:	b9 00 08 00 00       	mov    ecx,0x800
c001d453:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d455:	31 c0                	xor    eax,eax
c001d457:	5b                   	pop    ebx
c001d458:	5e                   	pop    esi
c001d459:	5f                   	pop    edi
c001d45a:	c3                   	ret    
c001d45b:	90                   	nop

c001d45c <ISO9660::tryMount(LogicalDisk*, int)>:
c001d45c:	53                   	push   ebx
c001d45d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d463:	c7 05 64 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ec64,0xdeadbeef
c001d46d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d474:	8d 58 41             	lea    ebx,[eax+0x41]
c001d477:	0f be db             	movsx  ebx,bl
c001d47a:	53                   	push   ebx
c001d47b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d47f:	50                   	push   eax
c001d480:	6a 10                	push   0x10
c001d482:	e8 56 ff ff ff       	call   c001d3dd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d487:	83 c4 10             	add    esp,0x10
c001d48a:	31 d2                	xor    edx,edx
c001d48c:	85 c0                	test   eax,eax
c001d48e:	75 33                	jne    c001d4c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d490:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d495:	75 2c                	jne    c001d4c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d497:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d49c:	75 25                	jne    c001d4c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d49e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d4a3:	75 1e                	jne    c001d4c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d4a5:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d4aa:	75 17                	jne    c001d4c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d4ac:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d4b1:	75 10                	jne    c001d4c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d4b3:	83 ec 0c             	sub    esp,0xc
c001d4b6:	53                   	push   ebx
c001d4b7:	e8 8b 97 fe ff       	call   c0006c47 <init_percd>
c001d4bc:	83 c4 10             	add    esp,0x10
c001d4bf:	40                   	inc    eax
c001d4c0:	0f 95 c2             	setne  dl
c001d4c3:	81 c4 08 08 00 00    	add    esp,0x808
c001d4c9:	88 d0                	mov    al,dl
c001d4cb:	5b                   	pop    ebx
c001d4cc:	c3                   	ret    
c001d4cd:	90                   	nop

c001d4ce <ISO9660::ISO9660()>:
c001d4ce:	83 ec 0c             	sub    esp,0xc
c001d4d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d5:	83 ec 0c             	sub    esp,0xc
c001d4d8:	50                   	push   eax
c001d4d9:	e8 d4 a8 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001d4de:	83 c4 10             	add    esp,0x10
c001d4e1:	ba 1c 5b 02 c0       	mov    edx,0xc0025b1c
c001d4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ea:	89 10                	mov    DWORD PTR [eax],edx
c001d4ec:	e8 68 98 fe ff       	call   c0006d59 <fs_iso9660_init>
c001d4f1:	90                   	nop
c001d4f2:	83 c4 0c             	add    esp,0xc
c001d4f5:	c3                   	ret    

c001d4f6 <SoundCard::beginPlayback()>:
c001d4f6:	c7 44 24 04 80 5b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025b80
c001d4fe:	e9 ff 28 ff ff       	jmp    c000fe02 <KePanic(char const*)>
c001d503:	90                   	nop

c001d504 <SoundCard::stopPlayback()>:
c001d504:	c7 44 24 04 80 5b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025b80
c001d50c:	e9 f1 28 ff ff       	jmp    c000fe02 <KePanic(char const*)>
c001d511:	90                   	nop

c001d512 <SoundCard::SoundCard(char const*)>:
c001d512:	83 ec 1c             	sub    esp,0x1c
c001d515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d519:	83 ec 08             	sub    esp,0x8
c001d51c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d520:	50                   	push   eax
c001d521:	e8 32 c6 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	ba cc 5b 02 c0       	mov    edx,0xc0025bcc
c001d52e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d532:	89 10                	mov    DWORD PTR [eax],edx
c001d534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d538:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d53f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d543:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d54d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d551:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d55f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d56d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d577:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d57f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d584:	7f 1a                	jg     c001d5a0 <SoundCard::SoundCard(char const*)+0x8e>
c001d586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d58a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d58e:	83 c2 54             	add    edx,0x54
c001d591:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d599:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d59e:	eb df                	jmp    c001d57f <SoundCard::SoundCard(char const*)+0x6d>
c001d5a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5a4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d5ab:	90                   	nop
c001d5ac:	83 c4 1c             	add    esp,0x1c
c001d5af:	c3                   	ret    

c001d5b0 <SoundCard::~SoundCard()>:
c001d5b0:	83 ec 0c             	sub    esp,0xc
c001d5b3:	ba cc 5b 02 c0       	mov    edx,0xc0025bcc
c001d5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5bc:	89 10                	mov    DWORD PTR [eax],edx
c001d5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c2:	83 ec 0c             	sub    esp,0xc
c001d5c5:	50                   	push   eax
c001d5c6:	e8 2d c3 fe ff       	call   c00098f8 <Device::~Device()>
c001d5cb:	83 c4 10             	add    esp,0x10
c001d5ce:	90                   	nop
c001d5cf:	83 c4 0c             	add    esp,0xc
c001d5d2:	c3                   	ret    
c001d5d3:	90                   	nop

c001d5d4 <SoundCard::~SoundCard()>:
c001d5d4:	83 ec 0c             	sub    esp,0xc
c001d5d7:	83 ec 0c             	sub    esp,0xc
c001d5da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5de:	e8 cd ff ff ff       	call   c001d5b0 <SoundCard::~SoundCard()>
c001d5e3:	83 c4 10             	add    esp,0x10
c001d5e6:	83 ec 08             	sub    esp,0x8
c001d5e9:	68 e8 01 00 00       	push   0x1e8
c001d5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5f2:	e8 fe fc fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c001d5f7:	83 c4 10             	add    esp,0x10
c001d5fa:	83 c4 0c             	add    esp,0xc
c001d5fd:	c3                   	ret    

c001d5fe <SoundCard::configureRates(int, int, int)>:
c001d5fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d602:	31 c0                	xor    eax,eax
c001d604:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d60b:	75 20                	jne    c001d62d <SoundCard::configureRates(int, int, int)+0x2f>
c001d60d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d611:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d617:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d61b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d625:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d62b:	b0 01                	mov    al,0x1
c001d62d:	c3                   	ret    

c001d62e <SoundCard::getSamples16(int, short*)>:
c001d62e:	55                   	push   ebp
c001d62f:	57                   	push   edi
c001d630:	31 ff                	xor    edi,edi
c001d632:	56                   	push   esi
c001d633:	53                   	push   ebx
c001d634:	31 db                	xor    ebx,ebx
c001d636:	83 ec 10             	sub    esp,0x10
c001d639:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d63d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d641:	8d 04 36             	lea    eax,[esi+esi*1]
c001d644:	50                   	push   eax
c001d645:	6a 00                	push   0x0
c001d647:	55                   	push   ebp
c001d648:	e8 a3 2e fe ff       	call   c00004f0 <memset>
c001d64d:	83 c4 10             	add    esp,0x10
c001d650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d654:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001d65b:	85 c0                	test   eax,eax
c001d65d:	74 1a                	je     c001d679 <SoundCard::getSamples16(int, short*)+0x4b>
c001d65f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d663:	75 14                	jne    c001d679 <SoundCard::getSamples16(int, short*)+0x4b>
c001d665:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d669:	55                   	push   ebp
c001d66a:	56                   	push   esi
c001d66b:	50                   	push   eax
c001d66c:	e8 8f 03 00 00       	call   c001da00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d671:	83 c4 10             	add    esp,0x10
c001d674:	39 c3                	cmp    ebx,eax
c001d676:	0f 4c d8             	cmovl  ebx,eax
c001d679:	47                   	inc    edi
c001d67a:	83 ff 20             	cmp    edi,0x20
c001d67d:	75 d1                	jne    c001d650 <SoundCard::getSamples16(int, short*)+0x22>
c001d67f:	83 c4 0c             	add    esp,0xc
c001d682:	89 d8                	mov    eax,ebx
c001d684:	5b                   	pop    ebx
c001d685:	5e                   	pop    esi
c001d686:	5f                   	pop    edi
c001d687:	5d                   	pop    ebp
c001d688:	c3                   	ret    
c001d689:	90                   	nop

c001d68a <SoundCard::getSamples32(int, int*)>:
c001d68a:	55                   	push   ebp
c001d68b:	57                   	push   edi
c001d68c:	31 ff                	xor    edi,edi
c001d68e:	56                   	push   esi
c001d68f:	31 f6                	xor    esi,esi
c001d691:	53                   	push   ebx
c001d692:	83 ec 10             	sub    esp,0x10
c001d695:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d699:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d69d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6a1:	c1 e0 02             	shl    eax,0x2
c001d6a4:	50                   	push   eax
c001d6a5:	6a 00                	push   0x0
c001d6a7:	55                   	push   ebp
c001d6a8:	e8 43 2e fe ff       	call   c00004f0 <memset>
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d6b7:	85 c0                	test   eax,eax
c001d6b9:	74 1a                	je     c001d6d5 <SoundCard::getSamples32(int, int*)+0x4b>
c001d6bb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d6bf:	75 14                	jne    c001d6d5 <SoundCard::getSamples32(int, int*)+0x4b>
c001d6c1:	53                   	push   ebx
c001d6c2:	55                   	push   ebp
c001d6c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6c7:	50                   	push   eax
c001d6c8:	e8 03 04 00 00       	call   c001dad0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	39 c6                	cmp    esi,eax
c001d6d2:	0f 4c f0             	cmovl  esi,eax
c001d6d5:	47                   	inc    edi
c001d6d6:	83 ff 20             	cmp    edi,0x20
c001d6d9:	75 d5                	jne    c001d6b0 <SoundCard::getSamples32(int, int*)+0x26>
c001d6db:	85 f6                	test   esi,esi
c001d6dd:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d6e4:	75 0f                	jne    c001d6f5 <SoundCard::getSamples32(int, int*)+0x6b>
c001d6e6:	85 c0                	test   eax,eax
c001d6e8:	74 1b                	je     c001d705 <SoundCard::getSamples32(int, int*)+0x7b>
c001d6ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d6ec:	83 ec 0c             	sub    esp,0xc
c001d6ef:	53                   	push   ebx
c001d6f0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d6f3:	eb 0d                	jmp    c001d702 <SoundCard::getSamples32(int, int*)+0x78>
c001d6f5:	85 c0                	test   eax,eax
c001d6f7:	75 0c                	jne    c001d705 <SoundCard::getSamples32(int, int*)+0x7b>
c001d6f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d6fb:	83 ec 0c             	sub    esp,0xc
c001d6fe:	53                   	push   ebx
c001d6ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d702:	83 c4 10             	add    esp,0x10
c001d705:	83 c4 0c             	add    esp,0xc
c001d708:	89 f0                	mov    eax,esi
c001d70a:	5b                   	pop    ebx
c001d70b:	5e                   	pop    esi
c001d70c:	5f                   	pop    edi
c001d70d:	5d                   	pop    ebp
c001d70e:	c3                   	ret    
c001d70f:	90                   	nop

c001d710 <SoundCard::addChannel(SoundPort*)>:
c001d710:	83 ec 0c             	sub    esp,0xc
c001d713:	31 c0                	xor    eax,eax
c001d715:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d719:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d721:	74 1b                	je     c001d73e <SoundCard::addChannel(SoundPort*)+0x2e>
c001d723:	40                   	inc    eax
c001d724:	83 f8 20             	cmp    eax,0x20
c001d727:	75 f0                	jne    c001d719 <SoundCard::addChannel(SoundPort*)+0x9>
c001d729:	83 ec 0c             	sub    esp,0xc
c001d72c:	68 a5 5b 02 c0       	push   0xc0025ba5
c001d731:	e8 cc 26 ff ff       	call   c000fe02 <KePanic(char const*)>
c001d736:	83 c4 10             	add    esp,0x10
c001d739:	83 c8 ff             	or     eax,0xffffffff
c001d73c:	eb 0b                	jmp    c001d749 <SoundCard::addChannel(SoundPort*)+0x39>
c001d73e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d742:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d749:	83 c4 0c             	add    esp,0xc
c001d74c:	c3                   	ret    
c001d74d:	90                   	nop

c001d74e <SoundCard::removeChannel(int)>:
c001d74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d752:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d756:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d761:	c3                   	ret    
c001d762:	66 90                	xchg   ax,ax

c001d764 <SoundPort::SoundPort(int, int, int, int)>:
c001d764:	83 ec 0c             	sub    esp,0xc
c001d767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d76b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d776:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d77e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d782:	89 10                	mov    DWORD PTR [eax],edx
c001d784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d788:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d78c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d793:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d797:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d79a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d79f:	75 13                	jne    c001d7b4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7a7:	05 a0 0f 00 00       	add    eax,0xfa0
c001d7ac:	d1 e0                	shl    eax,1
c001d7ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d7b2:	66 90                	xchg   ax,ax
c001d7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d7d1:	c1 e0 02             	shl    eax,0x2
c001d7d4:	83 ec 0c             	sub    esp,0xc
c001d7d7:	50                   	push   eax
c001d7d8:	e8 cf 21 ff ff       	call   c000f9ac <malloc>
c001d7dd:	83 c4 10             	add    esp,0x10
c001d7e0:	89 c2                	mov    edx,eax
c001d7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d7e9:	90                   	nop
c001d7ea:	83 c4 0c             	add    esp,0xc
c001d7ed:	c3                   	ret    
c001d7ee:	66 90                	xchg   ax,ax

c001d7f0 <SoundPort::~SoundPort()>:
c001d7f0:	83 ec 0c             	sub    esp,0xc
c001d7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d7fa:	85 c0                	test   eax,eax
c001d7fc:	74 1e                	je     c001d81c <SoundPort::~SoundPort()+0x2c>
c001d7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d802:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d805:	83 ec 0c             	sub    esp,0xc
c001d808:	50                   	push   eax
c001d809:	e8 ae 21 ff ff       	call   c000f9bc <free>
c001d80e:	83 c4 10             	add    esp,0x10
c001d811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d815:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d81c:	90                   	nop
c001d81d:	83 c4 0c             	add    esp,0xc
c001d820:	c3                   	ret    
c001d821:	90                   	nop
c001d822:	66 90                	xchg   ax,ax

c001d824 <SoundPort::unpause()>:
c001d824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d828:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d82c:	c3                   	ret    
c001d82d:	90                   	nop
c001d82e:	66 90                	xchg   ax,ax

c001d830 <SoundPort::pause()>:
c001d830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d834:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d838:	c3                   	ret    
c001d839:	90                   	nop
c001d83a:	66 90                	xchg   ax,ax

c001d83c <SoundPort::getBufferUsed()>:
c001d83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d840:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d843:	c3                   	ret    

c001d844 <SoundPort::getBufferSize()>:
c001d844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d84b:	c3                   	ret    

c001d84c <SoundPort::buffer8(signed char*, int)>:
c001d84c:	55                   	push   ebp
c001d84d:	57                   	push   edi
c001d84e:	56                   	push   esi
c001d84f:	53                   	push   ebx
c001d850:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d854:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d858:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d85b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d85e:	74 70                	je     c001d8d0 <SoundPort::buffer8(signed char*, int)+0x84>
c001d860:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d864:	85 c9                	test   ecx,ecx
c001d866:	7e 68                	jle    c001d8d0 <SoundPort::buffer8(signed char*, int)+0x84>
c001d868:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d86c:	8d 48 01             	lea    ecx,[eax+0x1]
c001d86f:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d872:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d875:	89 f1                	mov    ecx,esi
c001d877:	c1 e1 18             	shl    ecx,0x18
c001d87a:	29 f1                	sub    ecx,esi
c001d87c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d87f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d882:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d885:	74 51                	je     c001d8d8 <SoundPort::buffer8(signed char*, int)+0x8c>
c001d887:	31 ff                	xor    edi,edi
c001d889:	eb 25                	jmp    c001d8b0 <SoundPort::buffer8(signed char*, int)+0x64>
c001d88b:	90                   	nop
c001d88c:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d891:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d894:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d897:	89 f3                	mov    ebx,esi
c001d899:	c1 e3 18             	shl    ebx,0x18
c001d89c:	29 f3                	sub    ebx,esi
c001d89e:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d8a1:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d8a4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8a7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8aa:	74 1c                	je     c001d8c8 <SoundPort::buffer8(signed char*, int)+0x7c>
c001d8ac:	89 c7                	mov    edi,eax
c001d8ae:	66 90                	xchg   ax,ax
c001d8b0:	8d 47 01             	lea    eax,[edi+0x1]
c001d8b3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d8b7:	75 d3                	jne    c001d88c <SoundPort::buffer8(signed char*, int)+0x40>
c001d8b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001d8c0:	5b                   	pop    ebx
c001d8c1:	5e                   	pop    esi
c001d8c2:	5f                   	pop    edi
c001d8c3:	5d                   	pop    ebp
c001d8c4:	c3                   	ret    
c001d8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8c8:	5b                   	pop    ebx
c001d8c9:	8d 47 02             	lea    eax,[edi+0x2]
c001d8cc:	5e                   	pop    esi
c001d8cd:	5f                   	pop    edi
c001d8ce:	5d                   	pop    ebp
c001d8cf:	c3                   	ret    
c001d8d0:	5b                   	pop    ebx
c001d8d1:	31 c0                	xor    eax,eax
c001d8d3:	5e                   	pop    esi
c001d8d4:	5f                   	pop    edi
c001d8d5:	5d                   	pop    ebp
c001d8d6:	c3                   	ret    
c001d8d7:	90                   	nop
c001d8d8:	b8 01 00 00 00       	mov    eax,0x1
c001d8dd:	eb e1                	jmp    c001d8c0 <SoundPort::buffer8(signed char*, int)+0x74>
c001d8df:	90                   	nop

c001d8e0 <SoundPort::buffer16(short*, int)>:
c001d8e0:	55                   	push   ebp
c001d8e1:	57                   	push   edi
c001d8e2:	56                   	push   esi
c001d8e3:	53                   	push   ebx
c001d8e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8e8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d8ec:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d8ef:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d8f2:	74 70                	je     c001d964 <SoundPort::buffer16(short*, int)+0x84>
c001d8f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d8f8:	85 c9                	test   ecx,ecx
c001d8fa:	7e 68                	jle    c001d964 <SoundPort::buffer16(short*, int)+0x84>
c001d8fc:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d900:	8d 48 01             	lea    ecx,[eax+0x1]
c001d903:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d906:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d909:	89 f1                	mov    ecx,esi
c001d90b:	c1 e1 10             	shl    ecx,0x10
c001d90e:	29 f1                	sub    ecx,esi
c001d910:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d913:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d916:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d919:	74 51                	je     c001d96c <SoundPort::buffer16(short*, int)+0x8c>
c001d91b:	31 ff                	xor    edi,edi
c001d91d:	eb 25                	jmp    c001d944 <SoundPort::buffer16(short*, int)+0x64>
c001d91f:	90                   	nop
c001d920:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d925:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d928:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d92b:	89 f3                	mov    ebx,esi
c001d92d:	c1 e3 10             	shl    ebx,0x10
c001d930:	29 f3                	sub    ebx,esi
c001d932:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d935:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d938:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d93b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d93e:	74 1c                	je     c001d95c <SoundPort::buffer16(short*, int)+0x7c>
c001d940:	89 c7                	mov    edi,eax
c001d942:	66 90                	xchg   ax,ax
c001d944:	8d 47 01             	lea    eax,[edi+0x1]
c001d947:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d94b:	75 d3                	jne    c001d920 <SoundPort::buffer16(short*, int)+0x40>
c001d94d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d951:	8d 76 00             	lea    esi,[esi+0x0]
c001d954:	5b                   	pop    ebx
c001d955:	5e                   	pop    esi
c001d956:	5f                   	pop    edi
c001d957:	5d                   	pop    ebp
c001d958:	c3                   	ret    
c001d959:	8d 76 00             	lea    esi,[esi+0x0]
c001d95c:	5b                   	pop    ebx
c001d95d:	8d 47 02             	lea    eax,[edi+0x2]
c001d960:	5e                   	pop    esi
c001d961:	5f                   	pop    edi
c001d962:	5d                   	pop    ebp
c001d963:	c3                   	ret    
c001d964:	5b                   	pop    ebx
c001d965:	31 c0                	xor    eax,eax
c001d967:	5e                   	pop    esi
c001d968:	5f                   	pop    edi
c001d969:	5d                   	pop    ebp
c001d96a:	c3                   	ret    
c001d96b:	90                   	nop
c001d96c:	b8 01 00 00 00       	mov    eax,0x1
c001d971:	eb e1                	jmp    c001d954 <SoundPort::buffer16(short*, int)+0x74>
c001d973:	90                   	nop

c001d974 <SoundPort::buffer32(int*, int)>:
c001d974:	55                   	push   ebp
c001d975:	57                   	push   edi
c001d976:	56                   	push   esi
c001d977:	53                   	push   ebx
c001d978:	83 ec 04             	sub    esp,0x4
c001d97b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d983:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d987:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d98a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d98d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d990:	74 5a                	je     c001d9ec <SoundPort::buffer32(int*, int)+0x78>
c001d992:	85 c0                	test   eax,eax
c001d994:	7e 56                	jle    c001d9ec <SoundPort::buffer32(int*, int)+0x78>
c001d996:	8d 71 01             	lea    esi,[ecx+0x1]
c001d999:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d99c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d99f:	8b 37                	mov    esi,DWORD PTR [edi]
c001d9a1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d9a4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9a7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9aa:	74 4c                	je     c001d9f8 <SoundPort::buffer32(int*, int)+0x84>
c001d9ac:	31 f6                	xor    esi,esi
c001d9ae:	eb 1c                	jmp    c001d9cc <SoundPort::buffer32(int*, int)+0x58>
c001d9b0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d9b3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d9b6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d9b9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9bc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d9c0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9c3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9c6:	74 18                	je     c001d9e0 <SoundPort::buffer32(int*, int)+0x6c>
c001d9c8:	89 de                	mov    esi,ebx
c001d9ca:	66 90                	xchg   ax,ax
c001d9cc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d9cf:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d9d2:	75 dc                	jne    c001d9b0 <SoundPort::buffer32(int*, int)+0x3c>
c001d9d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d9d7:	90                   	nop
c001d9d8:	83 c4 04             	add    esp,0x4
c001d9db:	5b                   	pop    ebx
c001d9dc:	5e                   	pop    esi
c001d9dd:	5f                   	pop    edi
c001d9de:	5d                   	pop    ebp
c001d9df:	c3                   	ret    
c001d9e0:	8d 46 02             	lea    eax,[esi+0x2]
c001d9e3:	83 c4 04             	add    esp,0x4
c001d9e6:	5b                   	pop    ebx
c001d9e7:	5e                   	pop    esi
c001d9e8:	5f                   	pop    edi
c001d9e9:	5d                   	pop    ebp
c001d9ea:	c3                   	ret    
c001d9eb:	90                   	nop
c001d9ec:	83 c4 04             	add    esp,0x4
c001d9ef:	31 c0                	xor    eax,eax
c001d9f1:	5b                   	pop    ebx
c001d9f2:	5e                   	pop    esi
c001d9f3:	5f                   	pop    edi
c001d9f4:	5d                   	pop    ebp
c001d9f5:	c3                   	ret    
c001d9f6:	66 90                	xchg   ax,ax
c001d9f8:	b8 01 00 00 00       	mov    eax,0x1
c001d9fd:	eb d9                	jmp    c001d9d8 <SoundPort::buffer32(int*, int)+0x64>
c001d9ff:	90                   	nop

c001da00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001da00:	55                   	push   ebp
c001da01:	57                   	push   edi
c001da02:	56                   	push   esi
c001da03:	53                   	push   ebx
c001da04:	83 ec 0c             	sub    esp,0xc
c001da07:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001da0b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001da0f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001da13:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001da17:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001da1d:	39 03                	cmp    DWORD PTR [ebx],eax
c001da1f:	74 13                	je     c001da34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001da21:	83 ec 0c             	sub    esp,0xc
c001da24:	68 f8 5b 02 c0       	push   0xc0025bf8
c001da29:	e8 d4 23 ff ff       	call   c000fe02 <KePanic(char const*)>
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	8d 76 00             	lea    esi,[esi+0x0]
c001da34:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001da3a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001da3d:	74 11                	je     c001da50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001da3f:	83 ec 0c             	sub    esp,0xc
c001da42:	68 37 5c 02 c0       	push   0xc0025c37
c001da47:	e8 b6 23 ff ff       	call   c000fe02 <KePanic(char const*)>
c001da4c:	83 c4 10             	add    esp,0x10
c001da4f:	90                   	nop
c001da50:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001da56:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001da59:	74 11                	je     c001da6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001da5b:	83 ec 0c             	sub    esp,0xc
c001da5e:	68 37 5c 02 c0       	push   0xc0025c37
c001da63:	e8 9a 23 ff ff       	call   c000fe02 <KePanic(char const*)>
c001da68:	83 c4 10             	add    esp,0x10
c001da6b:	90                   	nop
c001da6c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001da6f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001da73:	85 f6                	test   esi,esi
c001da75:	7e 2d                	jle    c001daa4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001da77:	31 c0                	xor    eax,eax
c001da79:	8d 76 00             	lea    esi,[esi+0x0]
c001da7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001da7f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001da82:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001da88:	85 c9                	test   ecx,ecx
c001da8a:	0f 49 d1             	cmovns edx,ecx
c001da8d:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001da91:	c1 fa 0f             	sar    edx,0xf
c001da94:	01 d1                	add    ecx,edx
c001da96:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001da9a:	83 c0 01             	add    eax,0x1
c001da9d:	39 f0                	cmp    eax,esi
c001da9f:	75 db                	jne    c001da7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001daa1:	8d 76 00             	lea    esi,[esi+0x0]
c001daa4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001daa7:	83 ec 04             	sub    esp,0x4
c001daaa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001daad:	29 f0                	sub    eax,esi
c001daaf:	c1 e0 02             	shl    eax,0x2
c001dab2:	50                   	push   eax
c001dab3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001dab6:	50                   	push   eax
c001dab7:	52                   	push   edx
c001dab8:	e8 13 29 fe ff       	call   c00003d0 <memmove>
c001dabd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dac0:	29 f0                	sub    eax,esi
c001dac2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001dac5:	83 c4 1c             	add    esp,0x1c
c001dac8:	89 f0                	mov    eax,esi
c001daca:	5b                   	pop    ebx
c001dacb:	5e                   	pop    esi
c001dacc:	5f                   	pop    edi
c001dacd:	5d                   	pop    ebp
c001dace:	c3                   	ret    
c001dacf:	90                   	nop

c001dad0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001dad0:	55                   	push   ebp
c001dad1:	57                   	push   edi
c001dad2:	56                   	push   esi
c001dad3:	53                   	push   ebx
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dadb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dadf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001dae3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dae7:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001daed:	39 03                	cmp    DWORD PTR [ebx],eax
c001daef:	74 13                	je     c001db04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001daf1:	83 ec 0c             	sub    esp,0xc
c001daf4:	68 18 5c 02 c0       	push   0xc0025c18
c001daf9:	e8 04 23 ff ff       	call   c000fe02 <KePanic(char const*)>
c001dafe:	83 c4 10             	add    esp,0x10
c001db01:	8d 76 00             	lea    esi,[esi+0x0]
c001db04:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001db0a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001db0d:	74 11                	je     c001db20 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001db0f:	83 ec 0c             	sub    esp,0xc
c001db12:	68 53 5c 02 c0       	push   0xc0025c53
c001db17:	e8 e6 22 ff ff       	call   c000fe02 <KePanic(char const*)>
c001db1c:	83 c4 10             	add    esp,0x10
c001db1f:	90                   	nop
c001db20:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001db26:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001db29:	74 11                	je     c001db3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001db2b:	83 ec 0c             	sub    esp,0xc
c001db2e:	68 53 5c 02 c0       	push   0xc0025c53
c001db33:	e8 ca 22 ff ff       	call   c000fe02 <KePanic(char const*)>
c001db38:	83 c4 10             	add    esp,0x10
c001db3b:	90                   	nop
c001db3c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001db3f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001db43:	85 ff                	test   edi,edi
c001db45:	7e 21                	jle    c001db68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001db47:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001db4e:	31 c0                	xor    eax,eax
c001db50:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001db53:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001db56:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001db59:	01 d5                	add    ebp,edx
c001db5b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001db5e:	83 c0 04             	add    eax,0x4
c001db61:	39 c1                	cmp    ecx,eax
c001db63:	75 eb                	jne    c001db50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001db65:	8d 76 00             	lea    esi,[esi+0x0]
c001db68:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001db6b:	83 ec 04             	sub    esp,0x4
c001db6e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001db71:	29 f8                	sub    eax,edi
c001db73:	c1 e0 02             	shl    eax,0x2
c001db76:	50                   	push   eax
c001db77:	8d 04 ba             	lea    eax,[edx+edi*4]
c001db7a:	50                   	push   eax
c001db7b:	52                   	push   edx
c001db7c:	e8 4f 28 fe ff       	call   c00003d0 <memmove>
c001db81:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001db84:	29 f8                	sub    eax,edi
c001db86:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001db89:	83 c4 1c             	add    esp,0x1c
c001db8c:	89 f8                	mov    eax,edi
c001db8e:	5b                   	pop    ebx
c001db8f:	5e                   	pop    esi
c001db90:	5f                   	pop    edi
c001db91:	5d                   	pop    ebp
c001db92:	c3                   	ret    
c001db93:	90                   	nop

c001db94 <PCI::open(int, int, void*)>:
c001db94:	83 ec 18             	sub    esp,0x18
c001db97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db9f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dba5:	8b 10                	mov    edx,DWORD PTR [eax]
c001dba7:	50                   	push   eax
c001dba8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dbab:	31 c0                	xor    eax,eax
c001dbad:	83 c4 1c             	add    esp,0x1c
c001dbb0:	c3                   	ret    
c001dbb1:	90                   	nop

c001dbb2 <PCI::close(int, int, void*)>:
c001dbb2:	31 c0                	xor    eax,eax
c001dbb4:	c3                   	ret    
c001dbb5:	90                   	nop

c001dbb6 <PCI::PCI()>:
c001dbb6:	83 ec 0c             	sub    esp,0xc
c001dbb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbd:	83 ec 08             	sub    esp,0x8
c001dbc0:	68 6f 5c 02 c0       	push   0xc0025c6f
c001dbc5:	50                   	push   eax
c001dbc6:	e8 99 ad fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001dbcb:	83 c4 10             	add    esp,0x10
c001dbce:	ba 7c 5d 02 c0       	mov    edx,0xc0025d7c
c001dbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbd7:	89 10                	mov    DWORD PTR [eax],edx
c001dbd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbdd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbeb:	a3 80 f4 02 c0       	mov    ds:0xc002f480,eax
c001dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbfa:	0f b6 d0             	movzx  edx,al
c001dbfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc01:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc12:	0f b6 d0             	movzx  edx,al
c001dc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc19:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc22:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc28:	8d 50 01             	lea    edx,[eax+0x1]
c001dc2b:	88 d1                	mov    cl,dl
c001dc2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc31:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dc37:	0f b6 d0             	movzx  edx,al
c001dc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc42:	83 c9 c0             	or     ecx,0xffffffc0
c001dc45:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc49:	90                   	nop
c001dc4a:	83 c4 0c             	add    esp,0xc
c001dc4d:	c3                   	ret    

c001dc4e <PCI::readBAR8(unsigned int, int)>:
c001dc4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc56:	f6 c2 01             	test   dl,0x1
c001dc59:	74 07                	je     c001dc62 <PCI::readBAR8(unsigned int, int)+0x14>
c001dc5b:	83 e2 fc             	and    edx,0xfffffffc
c001dc5e:	01 c2                	add    edx,eax
c001dc60:	ec                   	in     al,dx
c001dc61:	c3                   	ret    
c001dc62:	83 e2 f0             	and    edx,0xfffffff0
c001dc65:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dc68:	c3                   	ret    
c001dc69:	90                   	nop

c001dc6a <PCI::readBAR16(unsigned int, int)>:
c001dc6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc72:	f6 c2 01             	test   dl,0x1
c001dc75:	74 08                	je     c001dc7f <PCI::readBAR16(unsigned int, int)+0x15>
c001dc77:	83 e2 fc             	and    edx,0xfffffffc
c001dc7a:	01 c2                	add    edx,eax
c001dc7c:	66 ed                	in     ax,dx
c001dc7e:	c3                   	ret    
c001dc7f:	83 e2 f0             	and    edx,0xfffffff0
c001dc82:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dc86:	c3                   	ret    
c001dc87:	90                   	nop

c001dc88 <PCI::readBAR32(unsigned int, int)>:
c001dc88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc90:	f6 c2 01             	test   dl,0x1
c001dc93:	74 07                	je     c001dc9c <PCI::readBAR32(unsigned int, int)+0x14>
c001dc95:	83 e2 fc             	and    edx,0xfffffffc
c001dc98:	01 c2                	add    edx,eax
c001dc9a:	ed                   	in     eax,dx
c001dc9b:	c3                   	ret    
c001dc9c:	83 e2 f0             	and    edx,0xfffffff0
c001dc9f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dca2:	c3                   	ret    
c001dca3:	90                   	nop

c001dca4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dca8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcb0:	f6 c2 01             	test   dl,0x1
c001dcb3:	74 07                	je     c001dcbc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dcb5:	83 e2 fc             	and    edx,0xfffffffc
c001dcb8:	01 ca                	add    edx,ecx
c001dcba:	ee                   	out    dx,al
c001dcbb:	c3                   	ret    
c001dcbc:	83 e2 f0             	and    edx,0xfffffff0
c001dcbf:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dcc2:	c3                   	ret    
c001dcc3:	90                   	nop

c001dcc4 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dcc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dccc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcd0:	f6 c2 01             	test   dl,0x1
c001dcd3:	74 08                	je     c001dcdd <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dcd5:	83 e2 fc             	and    edx,0xfffffffc
c001dcd8:	01 ca                	add    edx,ecx
c001dcda:	66 ef                	out    dx,ax
c001dcdc:	c3                   	ret    
c001dcdd:	83 e2 f0             	and    edx,0xfffffff0
c001dce0:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dce4:	c3                   	ret    
c001dce5:	90                   	nop

c001dce6 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dce6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcf2:	f6 c2 01             	test   dl,0x1
c001dcf5:	74 07                	je     c001dcfe <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dcf7:	83 e2 fc             	and    edx,0xfffffffc
c001dcfa:	01 ca                	add    edx,ecx
c001dcfc:	ef                   	out    dx,eax
c001dcfd:	c3                   	ret    
c001dcfe:	83 e2 f0             	and    edx,0xfffffff0
c001dd01:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dd04:	c3                   	ret    
c001dd05:	90                   	nop

c001dd06 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd06:	55                   	push   ebp
c001dd07:	57                   	push   edi
c001dd08:	56                   	push   esi
c001dd09:	53                   	push   ebx
c001dd0a:	83 ec 0c             	sub    esp,0xc
c001dd0d:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001dd12:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dd16:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dd1a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd1e:	83 fe 07             	cmp    esi,0x7
c001dd21:	76 10                	jbe    c001dd33 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dd23:	83 ec 0c             	sub    esp,0xc
c001dd26:	68 77 5c 02 c0       	push   0xc0025c77
c001dd2b:	e8 d2 20 ff ff       	call   c000fe02 <KePanic(char const*)>
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	0f b6 db             	movzx  ebx,bl
c001dd36:	83 fb 0f             	cmp    ebx,0xf
c001dd39:	76 10                	jbe    c001dd4b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001dd3b:	83 ec 0c             	sub    esp,0xc
c001dd3e:	68 a7 5c 02 c0       	push   0xc0025ca7
c001dd43:	e8 ba 20 ff ff       	call   c000fe02 <KePanic(char const*)>
c001dd48:	83 c4 10             	add    esp,0x10
c001dd4b:	8d 04 36             	lea    eax,[esi+esi*1]
c001dd4e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dd53:	83 c8 f0             	or     eax,0xfffffff0
c001dd56:	ee                   	out    dx,al
c001dd57:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dd5c:	89 e8                	mov    eax,ebp
c001dd5e:	ee                   	out    dx,al
c001dd5f:	89 f9                	mov    ecx,edi
c001dd61:	89 d8                	mov    eax,ebx
c001dd63:	0f b6 d9             	movzx  ebx,cl
c001dd66:	83 c4 0c             	add    esp,0xc
c001dd69:	c1 e0 08             	shl    eax,0x8
c001dd6c:	83 e3 fc             	and    ebx,0xfffffffc
c001dd6f:	09 d8                	or     eax,ebx
c001dd71:	5b                   	pop    ebx
c001dd72:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001dd77:	5e                   	pop    esi
c001dd78:	5f                   	pop    edi
c001dd79:	5d                   	pop    ebp
c001dd7a:	c3                   	ret    
c001dd7b:	90                   	nop

c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd7c:	57                   	push   edi
c001dd7d:	56                   	push   esi
c001dd7e:	53                   	push   ebx
c001dd7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd8b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd8f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dd95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd99:	83 ff 01             	cmp    edi,0x1
c001dd9c:	75 3f                	jne    c001dddd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001dd9e:	89 de                	mov    esi,ebx
c001dda0:	0f b6 c0             	movzx  eax,al
c001dda3:	c1 e0 10             	shl    eax,0x10
c001dda6:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ddac:	0f b6 c9             	movzx  ecx,cl
c001ddaf:	09 f0                	or     eax,esi
c001ddb1:	c1 e1 08             	shl    ecx,0x8
c001ddb4:	0f b6 d2             	movzx  edx,dl
c001ddb7:	c1 e2 0b             	shl    edx,0xb
c001ddba:	09 c8                	or     eax,ecx
c001ddbc:	09 d0                	or     eax,edx
c001ddbe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddc3:	0d 00 00 00 80       	or     eax,0x80000000
c001ddc8:	ef                   	out    dx,eax
c001ddc9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ddce:	ed                   	in     eax,dx
c001ddcf:	83 e3 02             	and    ebx,0x2
c001ddd2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ddd9:	d3 e8                	shr    eax,cl
c001dddb:	eb 44                	jmp    c001de21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dddd:	83 ff 02             	cmp    edi,0x2
c001dde0:	75 2d                	jne    c001de0f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001dde2:	83 ec 0c             	sub    esp,0xc
c001dde5:	0f b6 fb             	movzx  edi,bl
c001dde8:	57                   	push   edi
c001dde9:	0f b6 c9             	movzx  ecx,cl
c001ddec:	51                   	push   ecx
c001dded:	0f b6 d2             	movzx  edx,dl
c001ddf0:	52                   	push   edx
c001ddf1:	0f b6 c0             	movzx  eax,al
c001ddf4:	50                   	push   eax
c001ddf5:	56                   	push   esi
c001ddf6:	e8 0b ff ff ff       	call   c001dd06 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddfb:	89 c2                	mov    edx,eax
c001ddfd:	ed                   	in     eax,dx
c001ddfe:	83 e3 02             	and    ebx,0x2
c001de01:	83 c4 20             	add    esp,0x20
c001de04:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001de0b:	d3 e8                	shr    eax,cl
c001de0d:	eb 12                	jmp    c001de21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001de0f:	83 ec 0c             	sub    esp,0xc
c001de12:	68 d7 5c 02 c0       	push   0xc0025cd7
c001de17:	e8 e6 1f ff ff       	call   c000fe02 <KePanic(char const*)>
c001de1c:	83 c4 10             	add    esp,0x10
c001de1f:	31 c0                	xor    eax,eax
c001de21:	5b                   	pop    ebx
c001de22:	5e                   	pop    esi
c001de23:	5f                   	pop    edi
c001de24:	c3                   	ret    
c001de25:	90                   	nop

c001de26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001de26:	83 ec 18             	sub    esp,0x18
c001de29:	6a 00                	push   0x0
c001de2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de30:	50                   	push   eax
c001de31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de36:	50                   	push   eax
c001de37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de3c:	50                   	push   eax
c001de3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de41:	e8 36 ff ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de46:	83 c4 2c             	add    esp,0x2c
c001de49:	c3                   	ret    

c001de4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001de4a:	83 ec 18             	sub    esp,0x18
c001de4d:	6a 0e                	push   0xe
c001de4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de54:	50                   	push   eax
c001de55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de5a:	50                   	push   eax
c001de5b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de60:	50                   	push   eax
c001de61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de65:	e8 12 ff ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de6a:	83 c4 2c             	add    esp,0x2c
c001de6d:	0f b6 c0             	movzx  eax,al
c001de70:	c3                   	ret    
c001de71:	90                   	nop

c001de72 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001de72:	55                   	push   ebp
c001de73:	57                   	push   edi
c001de74:	56                   	push   esi
c001de75:	53                   	push   ebx
c001de76:	83 ec 18             	sub    esp,0x18
c001de79:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001de7e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001de83:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001de88:	6a 0a                	push   0xa
c001de8a:	56                   	push   esi
c001de8b:	55                   	push   ebp
c001de8c:	57                   	push   edi
c001de8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de91:	e8 e6 fe ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de96:	83 c4 14             	add    esp,0x14
c001de99:	6a 0a                	push   0xa
c001de9b:	56                   	push   esi
c001de9c:	55                   	push   ebp
c001de9d:	57                   	push   edi
c001de9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dea2:	89 c3                	mov    ebx,eax
c001dea4:	0f b6 db             	movzx  ebx,bl
c001dea7:	e8 d0 fe ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001deac:	83 c4 2c             	add    esp,0x2c
c001deaf:	25 00 ff 00 00       	and    eax,0xff00
c001deb4:	09 d8                	or     eax,ebx
c001deb6:	5b                   	pop    ebx
c001deb7:	5e                   	pop    esi
c001deb8:	5f                   	pop    edi
c001deb9:	5d                   	pop    ebp
c001deba:	c3                   	ret    
c001debb:	90                   	nop

c001debc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001debc:	83 ec 18             	sub    esp,0x18
c001debf:	6a 08                	push   0x8
c001dec1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dec6:	50                   	push   eax
c001dec7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001decc:	50                   	push   eax
c001decd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ded2:	50                   	push   eax
c001ded3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ded7:	e8 a0 fe ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dedc:	83 c4 2c             	add    esp,0x2c
c001dedf:	0f b6 c4             	movzx  eax,ah
c001dee2:	c3                   	ret    
c001dee3:	90                   	nop

c001dee4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dee4:	83 ec 18             	sub    esp,0x18
c001dee7:	6a 08                	push   0x8
c001dee9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deee:	50                   	push   eax
c001deef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001def4:	50                   	push   eax
c001def5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001defa:	50                   	push   eax
c001defb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001deff:	e8 78 fe ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df04:	83 c4 2c             	add    esp,0x2c
c001df07:	c3                   	ret    

c001df08 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001df08:	83 ec 18             	sub    esp,0x18
c001df0b:	6a 3c                	push   0x3c
c001df0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df12:	50                   	push   eax
c001df13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df18:	50                   	push   eax
c001df19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df1e:	50                   	push   eax
c001df1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df23:	e8 54 fe ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df28:	83 c4 2c             	add    esp,0x2c
c001df2b:	c3                   	ret    

c001df2c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001df2c:	83 ec 18             	sub    esp,0x18
c001df2f:	6a 18                	push   0x18
c001df31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df36:	50                   	push   eax
c001df37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df3c:	50                   	push   eax
c001df3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df42:	50                   	push   eax
c001df43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df47:	e8 30 fe ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df4c:	83 c4 2c             	add    esp,0x2c
c001df4f:	0f b6 c4             	movzx  eax,ah
c001df52:	c3                   	ret    
c001df53:	90                   	nop

c001df54 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001df54:	55                   	push   ebp
c001df55:	57                   	push   edi
c001df56:	56                   	push   esi
c001df57:	53                   	push   ebx
c001df58:	83 ec 28             	sub    esp,0x28
c001df5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df5f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001df64:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001df69:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001df6e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001df75:	8d 43 12             	lea    eax,[ebx+0x12]
c001df78:	83 c3 10             	add    ebx,0x10
c001df7b:	0f b6 c0             	movzx  eax,al
c001df7e:	0f b6 db             	movzx  ebx,bl
c001df81:	50                   	push   eax
c001df82:	51                   	push   ecx
c001df83:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001df87:	57                   	push   edi
c001df88:	55                   	push   ebp
c001df89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df8d:	e8 ea fd ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df92:	83 c4 14             	add    esp,0x14
c001df95:	53                   	push   ebx
c001df96:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df9a:	51                   	push   ecx
c001df9b:	89 c6                	mov    esi,eax
c001df9d:	57                   	push   edi
c001df9e:	55                   	push   ebp
c001df9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dfa3:	c1 e6 10             	shl    esi,0x10
c001dfa6:	e8 d1 fd ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfab:	83 c4 3c             	add    esp,0x3c
c001dfae:	5b                   	pop    ebx
c001dfaf:	0f b7 c0             	movzx  eax,ax
c001dfb2:	09 f0                	or     eax,esi
c001dfb4:	5e                   	pop    esi
c001dfb5:	5f                   	pop    edi
c001dfb6:	5d                   	pop    ebp
c001dfb7:	c3                   	ret    

c001dfb8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dfb8:	55                   	push   ebp
c001dfb9:	57                   	push   edi
c001dfba:	56                   	push   esi
c001dfbb:	53                   	push   ebx
c001dfbc:	83 ec 0c             	sub    esp,0xc
c001dfbf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001dfc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dfc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfcb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001dfcf:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001dfd5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dfd9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dfdd:	83 f9 01             	cmp    ecx,0x1
c001dfe0:	75 5d                	jne    c001e03f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001dfe2:	0f b6 c8             	movzx  ecx,al
c001dfe5:	89 f0                	mov    eax,esi
c001dfe7:	25 fc 00 00 00       	and    eax,0xfc
c001dfec:	0f b6 d2             	movzx  edx,dl
c001dfef:	c1 e1 10             	shl    ecx,0x10
c001dff2:	c1 e2 0b             	shl    edx,0xb
c001dff5:	09 c1                	or     ecx,eax
c001dff7:	89 f8                	mov    eax,edi
c001dff9:	0f b6 f8             	movzx  edi,al
c001dffc:	c1 e7 08             	shl    edi,0x8
c001dfff:	09 f9                	or     ecx,edi
c001e001:	09 d1                	or     ecx,edx
c001e003:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e008:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e00e:	89 c8                	mov    eax,ecx
c001e010:	ef                   	out    dx,eax
c001e011:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e016:	ed                   	in     eax,dx
c001e017:	83 e6 02             	and    esi,0x2
c001e01a:	0f b7 db             	movzx  ebx,bx
c001e01d:	74 0a                	je     c001e029 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001e01f:	c1 e3 10             	shl    ebx,0x10
c001e022:	0f b7 d0             	movzx  edx,ax
c001e025:	09 d3                	or     ebx,edx
c001e027:	eb 05                	jmp    c001e02e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001e029:	66 31 c0             	xor    ax,ax
c001e02c:	09 c3                	or     ebx,eax
c001e02e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e033:	89 c8                	mov    eax,ecx
c001e035:	ef                   	out    dx,eax
c001e036:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e03b:	89 d8                	mov    eax,ebx
c001e03d:	eb 41                	jmp    c001e080 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e03f:	83 f9 02             	cmp    ecx,0x2
c001e042:	75 45                	jne    c001e089 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001e044:	89 f1                	mov    ecx,esi
c001e046:	83 ec 0c             	sub    esp,0xc
c001e049:	0f b6 f1             	movzx  esi,cl
c001e04c:	89 f9                	mov    ecx,edi
c001e04e:	56                   	push   esi
c001e04f:	0f b6 f9             	movzx  edi,cl
c001e052:	57                   	push   edi
c001e053:	0f b6 d2             	movzx  edx,dl
c001e056:	52                   	push   edx
c001e057:	0f b6 c0             	movzx  eax,al
c001e05a:	50                   	push   eax
c001e05b:	55                   	push   ebp
c001e05c:	e8 a5 fc ff ff       	call   c001dd06 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e061:	89 c2                	mov    edx,eax
c001e063:	ed                   	in     eax,dx
c001e064:	83 c4 20             	add    esp,0x20
c001e067:	f6 c2 02             	test   dl,0x2
c001e06a:	0f b7 db             	movzx  ebx,bx
c001e06d:	74 0c                	je     c001e07b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001e06f:	0f b7 c8             	movzx  ecx,ax
c001e072:	89 d8                	mov    eax,ebx
c001e074:	c1 e0 10             	shl    eax,0x10
c001e077:	09 c8                	or     eax,ecx
c001e079:	eb 05                	jmp    c001e080 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e07b:	66 31 c0             	xor    ax,ax
c001e07e:	09 d8                	or     eax,ebx
c001e080:	ef                   	out    dx,eax
c001e081:	83 c4 0c             	add    esp,0xc
c001e084:	5b                   	pop    ebx
c001e085:	5e                   	pop    esi
c001e086:	5f                   	pop    edi
c001e087:	5d                   	pop    ebp
c001e088:	c3                   	ret    
c001e089:	c7 44 24 20 d7 5c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025cd7
c001e091:	83 c4 0c             	add    esp,0xc
c001e094:	5b                   	pop    ebx
c001e095:	5e                   	pop    esi
c001e096:	5f                   	pop    edi
c001e097:	5d                   	pop    ebp
c001e098:	e9 65 1d ff ff       	jmp    c000fe02 <KePanic(char const*)>
c001e09d:	90                   	nop

c001e09e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e09e:	55                   	push   ebp
c001e09f:	57                   	push   edi
c001e0a0:	56                   	push   esi
c001e0a1:	53                   	push   ebx
c001e0a2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e0a8:	80 3d 8c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f48c,0x0
c001e0af:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001e0b6:	0f 85 bd 00 00 00    	jne    c001e179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e0bc:	83 ec 0c             	sub    esp,0xc
c001e0bf:	68 14 01 00 00       	push   0x114
c001e0c4:	e8 e3 18 ff ff       	call   c000f9ac <malloc>
c001e0c9:	83 c4 0c             	add    esp,0xc
c001e0cc:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001e0d2:	68 dd 5c 02 c0       	push   0xc0025cdd
c001e0d7:	50                   	push   eax
c001e0d8:	89 c3                	mov    ebx,eax
c001e0da:	e8 a9 a0 fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001e0df:	83 c4 10             	add    esp,0x10
c001e0e2:	85 db                	test   ebx,ebx
c001e0e4:	0f 84 6b 02 00 00    	je     c001e355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e0ea:	57                   	push   edi
c001e0eb:	57                   	push   edi
c001e0ec:	6a 01                	push   0x1
c001e0ee:	53                   	push   ebx
c001e0ef:	e8 b2 a0 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001e0f4:	83 c4 10             	add    esp,0x10
c001e0f7:	85 c0                	test   eax,eax
c001e0f9:	0f 85 56 02 00 00    	jne    c001e355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e0ff:	52                   	push   edx
c001e100:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e104:	50                   	push   eax
c001e105:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e109:	50                   	push   eax
c001e10a:	53                   	push   ebx
c001e10b:	e8 98 a3 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001e110:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e114:	40                   	inc    eax
c001e115:	89 04 24             	mov    DWORD PTR [esp],eax
c001e118:	e8 8f 18 ff ff       	call   c000f9ac <malloc>
c001e11d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e121:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e125:	59                   	pop    ecx
c001e126:	a3 88 f4 02 c0       	mov    ds:0xc002f488,eax
c001e12b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e12d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e131:	51                   	push   ecx
c001e132:	50                   	push   eax
c001e133:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e137:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e13b:	53                   	push   ebx
c001e13c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e13f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e143:	83 c4 20             	add    esp,0x20
c001e146:	89 c8                	mov    eax,ecx
c001e148:	99                   	cdq    
c001e149:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e14d:	0f 85 02 02 00 00    	jne    c001e355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e153:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e157:	0f 85 f8 01 00 00    	jne    c001e355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e15d:	83 ec 0c             	sub    esp,0xc
c001e160:	53                   	push   ebx
c001e161:	e8 9e a0 fe ff       	call   c0008204 <File::close()>
c001e166:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e16a:	83 c4 10             	add    esp,0x10
c001e16d:	c6 05 8c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f48c,0x1
c001e174:	a3 84 f4 02 c0       	mov    ds:0xc002f484,eax
c001e179:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e181:	31 c9                	xor    ecx,ecx
c001e183:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001e18a:	8b 2d 84 f4 02 c0    	mov    ebp,DWORD PTR ds:0xc002f484
c001e190:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e197:	8b 15 88 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f488
c001e19d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e1a2:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e1aa:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e1af:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e1b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e1bb:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e1c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e1c7:	39 cd                	cmp    ebp,ecx
c001e1c9:	0f 8e 86 01 00 00    	jle    c001e355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e1cf:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001e1d2:	d4 40                	aam    0x40
c001e1d4:	d5 39                	aad    0x39
c001e1d6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e1da:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001e1de:	d4 40                	aam    0x40
c001e1e0:	d5 39                	aad    0x39
c001e1e2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e1e6:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001e1ea:	d4 40                	aam    0x40
c001e1ec:	d5 39                	aad    0x39
c001e1ee:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e1f2:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001e1f6:	d4 40                	aam    0x40
c001e1f8:	d5 39                	aad    0x39
c001e1fa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e1fe:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001e202:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e206:	3c 56                	cmp    al,0x56
c001e208:	74 47                	je     c001e251 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001e20a:	d4 40                	aam    0x40
c001e20c:	d5 39                	aad    0x39
c001e20e:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e211:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001e215:	0f b6 db             	movzx  ebx,bl
c001e218:	c1 e3 04             	shl    ebx,0x4
c001e21b:	d4 40                	aam    0x40
c001e21d:	d5 39                	aad    0x39
c001e21f:	83 e8 30             	sub    eax,0x30
c001e222:	0f b6 c0             	movzx  eax,al
c001e225:	09 c3                	or     ebx,eax
c001e227:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001e22b:	c1 e3 04             	shl    ebx,0x4
c001e22e:	d4 40                	aam    0x40
c001e230:	d5 39                	aad    0x39
c001e232:	83 e8 30             	sub    eax,0x30
c001e235:	0f b6 c0             	movzx  eax,al
c001e238:	09 c3                	or     ebx,eax
c001e23a:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001e23e:	c1 e3 04             	shl    ebx,0x4
c001e241:	d4 40                	aam    0x40
c001e243:	d5 39                	aad    0x39
c001e245:	83 e8 30             	sub    eax,0x30
c001e248:	0f b6 c0             	movzx  eax,al
c001e24b:	09 c3                	or     ebx,eax
c001e24d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e251:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001e255:	80 fb 58             	cmp    bl,0x58
c001e258:	74 49                	je     c001e2a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001e25a:	88 d8                	mov    al,bl
c001e25c:	d4 40                	aam    0x40
c001e25e:	d5 39                	aad    0x39
c001e260:	83 e8 30             	sub    eax,0x30
c001e263:	0f b6 f8             	movzx  edi,al
c001e266:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001e26a:	c1 e7 04             	shl    edi,0x4
c001e26d:	d4 40                	aam    0x40
c001e26f:	d5 39                	aad    0x39
c001e271:	83 e8 30             	sub    eax,0x30
c001e274:	0f b6 c0             	movzx  eax,al
c001e277:	09 c7                	or     edi,eax
c001e279:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001e27d:	c1 e7 04             	shl    edi,0x4
c001e280:	d4 40                	aam    0x40
c001e282:	d5 39                	aad    0x39
c001e284:	83 e8 30             	sub    eax,0x30
c001e287:	0f b6 c0             	movzx  eax,al
c001e28a:	09 c7                	or     edi,eax
c001e28c:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001e290:	c1 e7 04             	shl    edi,0x4
c001e293:	d4 40                	aam    0x40
c001e295:	d5 39                	aad    0x39
c001e297:	83 e8 30             	sub    eax,0x30
c001e29a:	0f b6 c0             	movzx  eax,al
c001e29d:	09 c7                	or     edi,eax
c001e29f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001e2a3:	8d 41 10             	lea    eax,[ecx+0x10]
c001e2a6:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e2aa:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001e2ae:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e2b2:	83 f9 0a             	cmp    ecx,0xa
c001e2b5:	74 07                	je     c001e2be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001e2b7:	47                   	inc    edi
c001e2b8:	39 c5                	cmp    ebp,eax
c001e2ba:	75 16                	jne    c001e2d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001e2bc:	89 e8                	mov    eax,ebp
c001e2be:	83 f9 0a             	cmp    ecx,0xa
c001e2c1:	0f 94 c1             	sete   cl
c001e2c4:	0f b6 c9             	movzx  ecx,cl
c001e2c7:	01 c1                	add    ecx,eax
c001e2c9:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e2ce:	75 0f                	jne    c001e2df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001e2d0:	eb 1c                	jmp    c001e2ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001e2d2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e2d5:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001e2d9:	40                   	inc    eax
c001e2da:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001e2dd:	eb cb                	jmp    c001e2aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001e2df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e2e3:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e2e8:	0f 85 d9 fe ff ff    	jne    c001e1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e2ee:	80 fb 58             	cmp    bl,0x58
c001e2f1:	74 10                	je     c001e303 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001e2f3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e2f8:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001e2fd:	0f 85 c4 fe ff ff    	jne    c001e1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e303:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e307:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e30b:	83 e8 30             	sub    eax,0x30
c001e30e:	c1 e0 04             	shl    eax,0x4
c001e311:	83 eb 30             	sub    ebx,0x30
c001e314:	09 d8                	or     eax,ebx
c001e316:	0f b6 c0             	movzx  eax,al
c001e319:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e31d:	0f 85 a4 fe ff ff    	jne    c001e1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e327:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001e32b:	83 e8 30             	sub    eax,0x30
c001e32e:	c1 e0 04             	shl    eax,0x4
c001e331:	83 eb 30             	sub    ebx,0x30
c001e334:	09 d8                	or     eax,ebx
c001e336:	0f b6 c0             	movzx  eax,al
c001e339:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e33d:	0f 85 84 fe ff ff    	jne    c001e1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e343:	50                   	push   eax
c001e344:	50                   	push   eax
c001e345:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e349:	50                   	push   eax
c001e34a:	56                   	push   esi
c001e34b:	e8 00 23 fe ff       	call   c0000650 <strcpy>
c001e350:	83 c4 10             	add    esp,0x10
c001e353:	eb 05                	jmp    c001e35a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001e355:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e358:	31 f6                	xor    esi,esi
c001e35a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e360:	89 f0                	mov    eax,esi
c001e362:	5b                   	pop    ebx
c001e363:	5e                   	pop    esi
c001e364:	5f                   	pop    edi
c001e365:	5d                   	pop    ebp
c001e366:	c3                   	ret    
c001e367:	90                   	nop

c001e368 <PCI::checkBus(unsigned char)>:
c001e368:	56                   	push   esi
c001e369:	53                   	push   ebx
c001e36a:	31 db                	xor    ebx,ebx
c001e36c:	51                   	push   ecx
c001e36d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e372:	52                   	push   edx
c001e373:	53                   	push   ebx
c001e374:	43                   	inc    ebx
c001e375:	56                   	push   esi
c001e376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e37a:	e8 6f 03 00 00       	call   c001e6ee <PCI::checkDevice(unsigned char, unsigned char)>
c001e37f:	83 c4 10             	add    esp,0x10
c001e382:	83 fb 20             	cmp    ebx,0x20
c001e385:	75 eb                	jne    c001e372 <PCI::checkBus(unsigned char)+0xa>
c001e387:	58                   	pop    eax
c001e388:	5b                   	pop    ebx
c001e389:	5e                   	pop    esi
c001e38a:	c3                   	ret    
c001e38b:	90                   	nop

c001e38c <PCI::foundDevice(PCIDeviceInfo)>:
c001e38c:	55                   	push   ebp
c001e38d:	57                   	push   edi
c001e38e:	56                   	push   esi
c001e38f:	53                   	push   ebx
c001e390:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e396:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e39e:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001e3a5:	3d ff ff 00 00       	cmp    eax,0xffff
c001e3aa:	0f 84 b6 01 00 00    	je     c001e566 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e3b0:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001e3b8:	66 81 fd 06 04       	cmp    bp,0x406
c001e3bd:	75 32                	jne    c001e3f1 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e3bf:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e3c7:	50                   	push   eax
c001e3c8:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e3d0:	50                   	push   eax
c001e3d1:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e3d9:	50                   	push   eax
c001e3da:	53                   	push   ebx
c001e3db:	e8 4c fb ff ff       	call   c001df2c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e3e0:	59                   	pop    ecx
c001e3e1:	5e                   	pop    esi
c001e3e2:	0f b6 c0             	movzx  eax,al
c001e3e5:	50                   	push   eax
c001e3e6:	53                   	push   ebx
c001e3e7:	e8 7c ff ff ff       	call   c001e368 <PCI::checkBus(unsigned char)>
c001e3ec:	e9 15 01 00 00       	jmp    c001e506 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001e3f1:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001e3f9:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e3ff:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001e406:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e40d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e411:	85 c0                	test   eax,eax
c001e413:	74 34                	je     c001e449 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001e415:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e418:	85 d2                	test   edx,edx
c001e41a:	74 29                	je     c001e445 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e41c:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e422:	31 cf                	xor    edi,ecx
c001e424:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e42a:	75 19                	jne    c001e445 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e42c:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e432:	75 11                	jne    c001e445 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e434:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e43b:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001e43f:	0f 84 21 01 00 00    	je     c001e566 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e445:	8b 00                	mov    eax,DWORD PTR [eax]
c001e447:	eb c8                	jmp    c001e411 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e449:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e44d:	be 10 5d 02 c0       	mov    esi,0xc0025d10
c001e452:	b9 07 00 00 00       	mov    ecx,0x7
c001e457:	fc                   	cld    
c001e458:	31 d2                	xor    edx,edx
c001e45a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e45c:	b9 12 00 00 00       	mov    ecx,0x12
c001e461:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e468:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e46c:	83 ec 0c             	sub    esp,0xc
c001e46f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e471:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e479:	b9 0a 00 00 00       	mov    ecx,0xa
c001e47e:	f7 f1                	div    ecx
c001e480:	83 c0 30             	add    eax,0x30
c001e483:	83 c2 30             	add    edx,0x30
c001e486:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e48a:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e492:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e496:	31 d2                	xor    edx,edx
c001e498:	f7 f1                	div    ecx
c001e49a:	83 c0 30             	add    eax,0x30
c001e49d:	83 c2 30             	add    edx,0x30
c001e4a0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e4a4:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e4a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e4ac:	50                   	push   eax
c001e4ad:	e8 83 ed fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001e4b2:	83 c4 10             	add    esp,0x10
c001e4b5:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001e4bb:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e4c2:	75 47                	jne    c001e50b <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001e4c4:	83 ec 0c             	sub    esp,0xc
c001e4c7:	68 64 01 00 00       	push   0x164
c001e4cc:	e8 db 14 ff ff       	call   c000f9ac <malloc>
c001e4d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4d4:	89 c5                	mov    ebp,eax
c001e4d6:	e8 37 11 00 00       	call   c001f612 <SATABus::SATABus()>
c001e4db:	58                   	pop    eax
c001e4dc:	5a                   	pop    edx
c001e4dd:	55                   	push   ebp
c001e4de:	53                   	push   ebx
c001e4df:	e8 12 b5 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e4e4:	83 ec 1c             	sub    esp,0x1c
c001e4e7:	b9 09 00 00 00       	mov    ecx,0x9
c001e4ec:	89 e7                	mov    edi,esp
c001e4ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4f0:	55                   	push   ebp
c001e4f1:	e8 46 b4 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e4f6:	83 c4 30             	add    esp,0x30
c001e4f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e4fc:	6a 00                	push   0x0
c001e4fe:	6a 00                	push   0x0
c001e500:	6a 00                	push   0x0
c001e502:	55                   	push   ebp
c001e503:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e506:	83 c4 10             	add    esp,0x10
c001e509:	eb 5b                	jmp    c001e566 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e50b:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001e511:	75 19                	jne    c001e52c <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001e513:	83 ec 0c             	sub    esp,0xc
c001e516:	68 70 02 00 00       	push   0x270
c001e51b:	e8 8c 14 ff ff       	call   c000f9ac <malloc>
c001e520:	89 04 24             	mov    DWORD PTR [esp],eax
c001e523:	89 c5                	mov    ebp,eax
c001e525:	e8 94 02 00 00       	call   c001e7be <IDE::IDE()>
c001e52a:	eb af                	jmp    c001e4db <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001e52c:	83 ec 0c             	sub    esp,0xc
c001e52f:	68 58 01 00 00       	push   0x158
c001e534:	e8 73 14 ff ff       	call   c000f9ac <malloc>
c001e539:	89 c5                	mov    ebp,eax
c001e53b:	58                   	pop    eax
c001e53c:	5a                   	pop    edx
c001e53d:	68 f6 5c 02 c0       	push   0xc0025cf6
c001e542:	55                   	push   ebp
c001e543:	e8 62 b7 fe ff       	call   c0009caa <DriverlessDevice::DriverlessDevice(char const*)>
c001e548:	59                   	pop    ecx
c001e549:	5f                   	pop    edi
c001e54a:	55                   	push   ebp
c001e54b:	53                   	push   ebx
c001e54c:	e8 a5 b4 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e551:	83 ec 1c             	sub    esp,0x1c
c001e554:	b9 09 00 00 00       	mov    ecx,0x9
c001e559:	89 e7                	mov    edi,esp
c001e55b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e55d:	55                   	push   ebp
c001e55e:	e8 d9 b3 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e563:	83 c4 30             	add    esp,0x30
c001e566:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e56c:	5b                   	pop    ebx
c001e56d:	5e                   	pop    esi
c001e56e:	5f                   	pop    edi
c001e56f:	5d                   	pop    ebp
c001e570:	c3                   	ret    
c001e571:	90                   	nop

c001e572 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e572:	55                   	push   ebp
c001e573:	57                   	push   edi
c001e574:	56                   	push   esi
c001e575:	53                   	push   ebx
c001e576:	83 ec 68             	sub    esp,0x68
c001e579:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e580:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e584:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e588:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e58f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e594:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e598:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e59f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e5a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e5a8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e5ad:	6a 0c                	push   0xc
c001e5af:	57                   	push   edi
c001e5b0:	53                   	push   ebx
c001e5b1:	56                   	push   esi
c001e5b2:	55                   	push   ebp
c001e5b3:	e8 c4 f7 ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5b8:	83 c4 20             	add    esp,0x20
c001e5bb:	57                   	push   edi
c001e5bc:	53                   	push   ebx
c001e5bd:	56                   	push   esi
c001e5be:	55                   	push   ebp
c001e5bf:	e8 ae f8 ff ff       	call   c001de72 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e5c4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e5c9:	57                   	push   edi
c001e5ca:	53                   	push   ebx
c001e5cb:	56                   	push   esi
c001e5cc:	55                   	push   ebp
c001e5cd:	e8 36 f9 ff ff       	call   c001df08 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e5d2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e5d6:	83 c4 14             	add    esp,0x14
c001e5d9:	6a 3c                	push   0x3c
c001e5db:	57                   	push   edi
c001e5dc:	53                   	push   ebx
c001e5dd:	56                   	push   esi
c001e5de:	55                   	push   ebp
c001e5df:	e8 98 f7 ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5e4:	0f b6 c4             	movzx  eax,ah
c001e5e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e5eb:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e5ef:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e5f3:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c001e5f8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e5fe:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e604:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e608:	83 c4 20             	add    esp,0x20
c001e60b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e610:	74 30                	je     c001e642 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e612:	31 c0                	xor    eax,eax
c001e614:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e618:	7e 28                	jle    c001e642 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e61a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e622:	39 cb                	cmp    ebx,ecx
c001e624:	75 19                	jne    c001e63f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e626:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e62e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e632:	75 0b                	jne    c001e63f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e634:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e63b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e63f:	40                   	inc    eax
c001e640:	eb d2                	jmp    c001e614 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e642:	31 d2                	xor    edx,edx
c001e644:	83 ec 0c             	sub    esp,0xc
c001e647:	57                   	push   edi
c001e648:	53                   	push   ebx
c001e649:	56                   	push   esi
c001e64a:	52                   	push   edx
c001e64b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e64f:	55                   	push   ebp
c001e650:	e8 ff f8 ff ff       	call   c001df54 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e655:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e659:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e65d:	42                   	inc    edx
c001e65e:	83 c4 20             	add    esp,0x20
c001e661:	83 fa 06             	cmp    edx,0x6
c001e664:	75 de                	jne    c001e644 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e666:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e66a:	83 ec 0c             	sub    esp,0xc
c001e66d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e671:	c1 e2 08             	shl    edx,0x8
c001e674:	0f b6 c4             	movzx  eax,ah
c001e677:	09 d0                	or     eax,edx
c001e679:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e67e:	6a 02                	push   0x2
c001e680:	57                   	push   edi
c001e681:	53                   	push   ebx
c001e682:	56                   	push   esi
c001e683:	55                   	push   ebp
c001e684:	e8 f3 f6 ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e689:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e68e:	83 c4 20             	add    esp,0x20
c001e691:	57                   	push   edi
c001e692:	53                   	push   ebx
c001e693:	56                   	push   esi
c001e694:	55                   	push   ebp
c001e695:	e8 22 f8 ff ff       	call   c001debc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e69a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e69e:	57                   	push   edi
c001e69f:	53                   	push   ebx
c001e6a0:	56                   	push   esi
c001e6a1:	55                   	push   ebp
c001e6a2:	e8 7f f7 ff ff       	call   c001de26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e6a7:	b9 09 00 00 00       	mov    ecx,0x9
c001e6ac:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e6b1:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e6b5:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e6b9:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e6bd:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e6c1:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e6c5:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e6c9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e6cd:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e6d1:	83 ec 0c             	sub    esp,0xc
c001e6d4:	fc                   	cld    
c001e6d5:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e6d9:	89 e7                	mov    edi,esp
c001e6db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6dd:	55                   	push   ebp
c001e6de:	e8 a9 fc ff ff       	call   c001e38c <PCI::foundDevice(PCIDeviceInfo)>
c001e6e3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e6e9:	5b                   	pop    ebx
c001e6ea:	5e                   	pop    esi
c001e6eb:	5f                   	pop    edi
c001e6ec:	5d                   	pop    ebp
c001e6ed:	c3                   	ret    

c001e6ee <PCI::checkDevice(unsigned char, unsigned char)>:
c001e6ee:	55                   	push   ebp
c001e6ef:	57                   	push   edi
c001e6f0:	56                   	push   esi
c001e6f1:	53                   	push   ebx
c001e6f2:	83 ec 0c             	sub    esp,0xc
c001e6f5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e6fa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e6ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e703:	6a 00                	push   0x0
c001e705:	56                   	push   esi
c001e706:	57                   	push   edi
c001e707:	55                   	push   ebp
c001e708:	e8 19 f7 ff ff       	call   c001de26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e70d:	6a 00                	push   0x0
c001e70f:	56                   	push   esi
c001e710:	57                   	push   edi
c001e711:	55                   	push   ebp
c001e712:	e8 5b fe ff ff       	call   c001e572 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e717:	83 c4 20             	add    esp,0x20
c001e71a:	6a 00                	push   0x0
c001e71c:	56                   	push   esi
c001e71d:	57                   	push   edi
c001e71e:	55                   	push   ebp
c001e71f:	e8 26 f7 ff ff       	call   c001de4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e724:	83 c4 10             	add    esp,0x10
c001e727:	a8 80                	test   al,0x80
c001e729:	74 2d                	je     c001e758 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e72b:	bb 01 00 00 00       	mov    ebx,0x1
c001e730:	53                   	push   ebx
c001e731:	56                   	push   esi
c001e732:	57                   	push   edi
c001e733:	55                   	push   ebp
c001e734:	e8 ed f6 ff ff       	call   c001de26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e739:	83 c4 10             	add    esp,0x10
c001e73c:	0f b7 c0             	movzx  eax,ax
c001e73f:	3d ff ff 00 00       	cmp    eax,0xffff
c001e744:	74 0c                	je     c001e752 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e746:	53                   	push   ebx
c001e747:	56                   	push   esi
c001e748:	57                   	push   edi
c001e749:	55                   	push   ebp
c001e74a:	e8 23 fe ff ff       	call   c001e572 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e74f:	83 c4 10             	add    esp,0x10
c001e752:	43                   	inc    ebx
c001e753:	83 fb 08             	cmp    ebx,0x8
c001e756:	75 d8                	jne    c001e730 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e758:	83 c4 0c             	add    esp,0xc
c001e75b:	5b                   	pop    ebx
c001e75c:	5e                   	pop    esi
c001e75d:	5f                   	pop    edi
c001e75e:	5d                   	pop    ebp
c001e75f:	c3                   	ret    

c001e760 <PCI::detect()>:
c001e760:	56                   	push   esi
c001e761:	53                   	push   ebx
c001e762:	53                   	push   ebx
c001e763:	31 db                	xor    ebx,ebx
c001e765:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e769:	6a 00                	push   0x0
c001e76b:	6a 00                	push   0x0
c001e76d:	6a 00                	push   0x0
c001e76f:	56                   	push   esi
c001e770:	e8 d5 f6 ff ff       	call   c001de4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e775:	83 c4 10             	add    esp,0x10
c001e778:	a8 80                	test   al,0x80
c001e77a:	75 21                	jne    c001e79d <PCI::detect()+0x3d>
c001e77c:	51                   	push   ecx
c001e77d:	51                   	push   ecx
c001e77e:	6a 00                	push   0x0
c001e780:	56                   	push   esi
c001e781:	e8 e2 fb ff ff       	call   c001e368 <PCI::checkBus(unsigned char)>
c001e786:	83 c4 10             	add    esp,0x10
c001e789:	eb 2a                	jmp    c001e7b5 <PCI::detect()+0x55>
c001e78b:	52                   	push   edx
c001e78c:	52                   	push   edx
c001e78d:	53                   	push   ebx
c001e78e:	43                   	inc    ebx
c001e78f:	56                   	push   esi
c001e790:	e8 d3 fb ff ff       	call   c001e368 <PCI::checkBus(unsigned char)>
c001e795:	83 c4 10             	add    esp,0x10
c001e798:	83 fb 08             	cmp    ebx,0x8
c001e79b:	74 18                	je     c001e7b5 <PCI::detect()+0x55>
c001e79d:	53                   	push   ebx
c001e79e:	6a 00                	push   0x0
c001e7a0:	6a 00                	push   0x0
c001e7a2:	56                   	push   esi
c001e7a3:	e8 7e f6 ff ff       	call   c001de26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e7a8:	83 c4 10             	add    esp,0x10
c001e7ab:	0f b7 c0             	movzx  eax,ax
c001e7ae:	3d ff ff 00 00       	cmp    eax,0xffff
c001e7b3:	74 d6                	je     c001e78b <PCI::detect()+0x2b>
c001e7b5:	58                   	pop    eax
c001e7b6:	5b                   	pop    ebx
c001e7b7:	5e                   	pop    esi
c001e7b8:	c3                   	ret    
c001e7b9:	90                   	nop

c001e7ba <IDE::close(int, int, void*)>:
c001e7ba:	83 c8 ff             	or     eax,0xffffffff
c001e7bd:	c3                   	ret    

c001e7be <IDE::IDE()>:
c001e7be:	83 ec 0c             	sub    esp,0xc
c001e7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c5:	83 ec 08             	sub    esp,0x8
c001e7c8:	68 a0 5d 02 c0       	push   0xc0025da0
c001e7cd:	50                   	push   eax
c001e7ce:	e8 7d b5 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001e7d3:	83 c4 10             	add    esp,0x10
c001e7d6:	ba cc 5e 02 c0       	mov    edx,0xc0025ecc
c001e7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7df:	89 10                	mov    DWORD PTR [eax],edx
c001e7e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7e5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e7ec:	90                   	nop
c001e7ed:	83 c4 0c             	add    esp,0xc
c001e7f0:	c3                   	ret    
c001e7f1:	90                   	nop

c001e7f2 <IDE::prepareInterrupt(unsigned char)>:
c001e7f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e7f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7fb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e803:	c3                   	ret    

c001e804 <selectDrive(unsigned char, unsigned char)>:
c001e804:	c3                   	ret    
c001e805:	90                   	nop

c001e806 <IDE::getBase(unsigned char)>:
c001e806:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e80b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e80f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e817:	c3                   	ret    

c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e818:	55                   	push   ebp
c001e819:	57                   	push   edi
c001e81a:	56                   	push   esi
c001e81b:	53                   	push   ebx
c001e81c:	83 ec 1c             	sub    esp,0x1c
c001e81f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e823:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e827:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e82b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e82f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e832:	80 f9 03             	cmp    cl,0x3
c001e835:	77 4f                	ja     c001e886 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e83b:	0f b6 f2             	movzx  esi,dl
c001e83e:	0f b6 db             	movzx  ebx,bl
c001e841:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e844:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e849:	80 ca 80             	or     dl,0x80
c001e84c:	52                   	push   edx
c001e84d:	6a 0c                	push   0xc
c001e84f:	56                   	push   esi
c001e850:	57                   	push   edi
c001e851:	e8 c2 ff ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e856:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e85b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e85f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e863:	ee                   	out    dx,al
c001e864:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e869:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e86d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e871:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e879:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e87d:	83 c4 2c             	add    esp,0x2c
c001e880:	5b                   	pop    ebx
c001e881:	5e                   	pop    esi
c001e882:	5f                   	pop    edi
c001e883:	5d                   	pop    ebp
c001e884:	eb 92                	jmp    c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e886:	0f b6 cb             	movzx  ecx,bl
c001e889:	83 f9 07             	cmp    ecx,0x7
c001e88c:	77 12                	ja     c001e8a0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e88e:	0f b6 d2             	movzx  edx,dl
c001e891:	0f b6 db             	movzx  ebx,bl
c001e894:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001e89c:	01 da                	add    edx,ebx
c001e89e:	eb 2f                	jmp    c001e8cf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e8a0:	83 f9 0d             	cmp    ecx,0xd
c001e8a3:	77 13                	ja     c001e8b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e8a5:	0f b6 d2             	movzx  edx,dl
c001e8a8:	0f b6 db             	movzx  ebx,bl
c001e8ab:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e8b2:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e8b6:	eb 17                	jmp    c001e8cf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e8b8:	83 f9 15             	cmp    ecx,0x15
c001e8bb:	77 13                	ja     c001e8d0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e8bd:	0f b6 d2             	movzx  edx,dl
c001e8c0:	0f b6 db             	movzx  ebx,bl
c001e8c3:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e8cb:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e8cf:	ee                   	out    dx,al
c001e8d0:	83 c4 1c             	add    esp,0x1c
c001e8d3:	5b                   	pop    ebx
c001e8d4:	5e                   	pop    esi
c001e8d5:	5f                   	pop    edi
c001e8d6:	5d                   	pop    ebp
c001e8d7:	c3                   	ret    

c001e8d8 <IDE::read(unsigned char, unsigned char)>:
c001e8d8:	57                   	push   edi
c001e8d9:	56                   	push   esi
c001e8da:	53                   	push   ebx
c001e8db:	83 ec 10             	sub    esp,0x10
c001e8de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e8e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e8e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e8ea:	8d 42 f8             	lea    eax,[edx-0x8]
c001e8ed:	3c 03                	cmp    al,0x3
c001e8ef:	77 48                	ja     c001e939 <IDE::read(unsigned char, unsigned char)+0x61>
c001e8f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e8f5:	0f b6 f1             	movzx  esi,cl
c001e8f8:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001e8fb:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001e900:	0c 80                	or     al,0x80
c001e902:	50                   	push   eax
c001e903:	6a 0c                	push   0xc
c001e905:	56                   	push   esi
c001e906:	53                   	push   ebx
c001e907:	e8 0c ff ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e90c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e910:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001e915:	0f b6 d2             	movzx  edx,dl
c001e918:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e91c:	ec                   	in     al,dx
c001e91d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e921:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001e926:	52                   	push   edx
c001e927:	6a 0c                	push   0xc
c001e929:	56                   	push   esi
c001e92a:	53                   	push   ebx
c001e92b:	e8 e8 fe ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e930:	83 c4 20             	add    esp,0x20
c001e933:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e937:	eb 4c                	jmp    c001e985 <IDE::read(unsigned char, unsigned char)+0xad>
c001e939:	0f b6 f2             	movzx  esi,dl
c001e93c:	83 fe 07             	cmp    esi,0x7
c001e93f:	77 12                	ja     c001e953 <IDE::read(unsigned char, unsigned char)+0x7b>
c001e941:	0f b6 c9             	movzx  ecx,cl
c001e944:	0f b6 d2             	movzx  edx,dl
c001e947:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001e94f:	01 c2                	add    edx,eax
c001e951:	eb 31                	jmp    c001e984 <IDE::read(unsigned char, unsigned char)+0xac>
c001e953:	83 fe 0d             	cmp    esi,0xd
c001e956:	77 13                	ja     c001e96b <IDE::read(unsigned char, unsigned char)+0x93>
c001e958:	0f b6 c9             	movzx  ecx,cl
c001e95b:	0f b6 d2             	movzx  edx,dl
c001e95e:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001e965:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e969:	eb 19                	jmp    c001e984 <IDE::read(unsigned char, unsigned char)+0xac>
c001e96b:	31 c0                	xor    eax,eax
c001e96d:	83 fe 15             	cmp    esi,0x15
c001e970:	77 13                	ja     c001e985 <IDE::read(unsigned char, unsigned char)+0xad>
c001e972:	0f b6 c9             	movzx  ecx,cl
c001e975:	0f b6 d2             	movzx  edx,dl
c001e978:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001e980:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e984:	ec                   	in     al,dx
c001e985:	83 c4 10             	add    esp,0x10
c001e988:	5b                   	pop    ebx
c001e989:	5e                   	pop    esi
c001e98a:	5f                   	pop    edi
c001e98b:	c3                   	ret    

c001e98c <IDE::waitInterrupt(unsigned char)>:
c001e98c:	55                   	push   ebp
c001e98d:	57                   	push   edi
c001e98e:	56                   	push   esi
c001e98f:	53                   	push   ebx
c001e990:	31 db                	xor    ebx,ebx
c001e992:	83 ec 0c             	sub    esp,0xc
c001e995:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e999:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e99e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e9a6:	89 e8                	mov    eax,ebp
c001e9a8:	84 c0                	test   al,al
c001e9aa:	75 31                	jne    c001e9dd <IDE::waitInterrupt(unsigned char)+0x51>
c001e9ac:	52                   	push   edx
c001e9ad:	6a 0c                	push   0xc
c001e9af:	56                   	push   esi
c001e9b0:	57                   	push   edi
c001e9b1:	e8 22 ff ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001e9b6:	83 c4 10             	add    esp,0x10
c001e9b9:	a8 01                	test   al,0x1
c001e9bb:	75 28                	jne    c001e9e5 <IDE::waitInterrupt(unsigned char)+0x59>
c001e9bd:	f6 c3 04             	test   bl,0x4
c001e9c0:	75 13                	jne    c001e9d5 <IDE::waitInterrupt(unsigned char)+0x49>
c001e9c2:	83 fb 32             	cmp    ebx,0x32
c001e9c5:	7e 0e                	jle    c001e9d5 <IDE::waitInterrupt(unsigned char)+0x49>
c001e9c7:	50                   	push   eax
c001e9c8:	50                   	push   eax
c001e9c9:	6a 00                	push   0x0
c001e9cb:	6a 64                	push   0x64
c001e9cd:	e8 62 87 ff ff       	call   c0017134 <milliTenthSleep(unsigned long long)>
c001e9d2:	83 c4 10             	add    esp,0x10
c001e9d5:	83 fb 3c             	cmp    ebx,0x3c
c001e9d8:	74 0b                	je     c001e9e5 <IDE::waitInterrupt(unsigned char)+0x59>
c001e9da:	43                   	inc    ebx
c001e9db:	eb c1                	jmp    c001e99e <IDE::waitInterrupt(unsigned char)+0x12>
c001e9dd:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e9e5:	83 c4 0c             	add    esp,0xc
c001e9e8:	89 e8                	mov    eax,ebp
c001e9ea:	5b                   	pop    ebx
c001e9eb:	5e                   	pop    esi
c001e9ec:	5f                   	pop    edi
c001e9ed:	5d                   	pop    ebp
c001e9ee:	c3                   	ret    

c001e9ef <ideChannel0IRQHandler(regs*, void*)>:
c001e9ef:	83 ec 10             	sub    esp,0x10
c001e9f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e9f6:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e9fd:	6a 07                	push   0x7
c001e9ff:	6a 00                	push   0x0
c001ea01:	50                   	push   eax
c001ea02:	e8 d1 fe ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001ea07:	83 c4 1c             	add    esp,0x1c
c001ea0a:	c3                   	ret    

c001ea0b <ideChannel1IRQHandler(regs*, void*)>:
c001ea0b:	83 ec 10             	sub    esp,0x10
c001ea0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea12:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ea19:	6a 07                	push   0x7
c001ea1b:	6a 01                	push   0x1
c001ea1d:	50                   	push   eax
c001ea1e:	e8 b5 fe ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001ea23:	83 c4 1c             	add    esp,0x1c
c001ea26:	c3                   	ret    
c001ea27:	90                   	nop

c001ea28 <IDE::enableIRQs(unsigned char, bool)>:
c001ea28:	57                   	push   edi
c001ea29:	b8 02 00 00 00       	mov    eax,0x2
c001ea2e:	56                   	push   esi
c001ea2f:	53                   	push   ebx
c001ea30:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ea35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ea39:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea3d:	74 02                	je     c001ea41 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ea3f:	31 c0                	xor    eax,eax
c001ea41:	0f b6 db             	movzx  ebx,bl
c001ea44:	bf 04 00 00 00       	mov    edi,0x4
c001ea49:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ea50:	50                   	push   eax
c001ea51:	6a 0c                	push   0xc
c001ea53:	53                   	push   ebx
c001ea54:	56                   	push   esi
c001ea55:	e8 be fd ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea5a:	83 c4 10             	add    esp,0x10
c001ea5d:	50                   	push   eax
c001ea5e:	6a 0c                	push   0xc
c001ea60:	53                   	push   ebx
c001ea61:	56                   	push   esi
c001ea62:	e8 71 fe ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	4f                   	dec    edi
c001ea6b:	75 f0                	jne    c001ea5d <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ea6d:	5b                   	pop    ebx
c001ea6e:	5e                   	pop    esi
c001ea6f:	5f                   	pop    edi
c001ea70:	c3                   	ret    
c001ea71:	90                   	nop

c001ea72 <IDE::open(int, int, void*)>:
c001ea72:	55                   	push   ebp
c001ea73:	57                   	push   edi
c001ea74:	56                   	push   esi
c001ea75:	53                   	push   ebx
c001ea76:	83 ec 1c             	sub    esp,0x1c
c001ea79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea7d:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ea84:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ea8d:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ea96:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ea9d:	0f 85 80 02 00 00    	jne    c001ed23 <IDE::open(int, int, void*)+0x2b1>
c001eaa3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001eaa9:	a8 70                	test   al,0x70
c001eaab:	75 44                	jne    c001eaf1 <IDE::open(int, int, void*)+0x7f>
c001eaad:	ba 20 84 00 00       	mov    edx,0x8420
c001eab2:	0f a3 c2             	bt     edx,eax
c001eab5:	73 3a                	jae    c001eaf1 <IDE::open(int, int, void*)+0x7f>
c001eab7:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001eabd:	83 ec 0c             	sub    esp,0xc
c001eac0:	83 e0 fc             	and    eax,0xfffffffc
c001eac3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eaca:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ead0:	83 e0 fc             	and    eax,0xfffffffc
c001ead3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eada:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001eae0:	83 e0 fc             	and    eax,0xfffffffc
c001eae3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eaea:	68 9d 33 02 c0       	push   0xc002339d
c001eaef:	eb 60                	jmp    c001eb51 <IDE::open(int, int, void*)+0xdf>
c001eaf1:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001eafb:	be 64 00 00 00       	mov    esi,0x64
c001eb00:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001eb0a:	57                   	push   edi
c001eb0b:	57                   	push   edi
c001eb0c:	68 b8 5d 02 c0       	push   0xc0025db8
c001eb11:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001eb15:	57                   	push   edi
c001eb16:	e8 35 1b fe ff       	call   c0000650 <strcpy>
c001eb1b:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001eb22:	31 d2                	xor    edx,edx
c001eb24:	89 3c 24             	mov    DWORD PTR [esp],edi
c001eb27:	89 c8                	mov    eax,ecx
c001eb29:	f7 f6                	div    esi
c001eb2b:	be 0a 00 00 00       	mov    esi,0xa
c001eb30:	31 d2                	xor    edx,edx
c001eb32:	83 c0 30             	add    eax,0x30
c001eb35:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001eb39:	89 c8                	mov    eax,ecx
c001eb3b:	f7 f6                	div    esi
c001eb3d:	89 d1                	mov    ecx,edx
c001eb3f:	31 d2                	xor    edx,edx
c001eb41:	f7 f6                	div    esi
c001eb43:	83 c1 30             	add    ecx,0x30
c001eb46:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001eb4a:	83 c2 30             	add    edx,0x30
c001eb4d:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001eb51:	e8 df e6 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001eb56:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eb5d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001eb62:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eb69:	83 c4 10             	add    esp,0x10
c001eb6c:	89 fa                	mov    edx,edi
c001eb6e:	c1 e1 10             	shl    ecx,0x10
c001eb71:	c1 e0 0b             	shl    eax,0xb
c001eb74:	09 c1                	or     ecx,eax
c001eb76:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eb7d:	c1 e0 08             	shl    eax,0x8
c001eb80:	09 c1                	or     ecx,eax
c001eb82:	89 c8                	mov    eax,ecx
c001eb84:	0d 08 00 00 80       	or     eax,0x80000008
c001eb89:	ef                   	out    dx,eax
c001eb8a:	be fc 0c 00 00       	mov    esi,0xcfc
c001eb8f:	89 f2                	mov    edx,esi
c001eb91:	ed                   	in     eax,dx
c001eb92:	c1 e8 10             	shr    eax,0x10
c001eb95:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb9a:	0f 84 e1 00 00 00    	je     c001ec81 <IDE::open(int, int, void*)+0x20f>
c001eba0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eba6:	89 fa                	mov    edx,edi
c001eba8:	89 c8                	mov    eax,ecx
c001ebaa:	ef                   	out    dx,eax
c001ebab:	b0 fe                	mov    al,0xfe
c001ebad:	89 f2                	mov    edx,esi
c001ebaf:	ee                   	out    dx,al
c001ebb0:	89 c8                	mov    eax,ecx
c001ebb2:	89 fa                	mov    edx,edi
c001ebb4:	ef                   	out    dx,eax
c001ebb5:	89 f2                	mov    edx,esi
c001ebb7:	ed                   	in     eax,dx
c001ebb8:	3c fe                	cmp    al,0xfe
c001ebba:	0f 85 83 00 00 00    	jne    c001ec43 <IDE::open(int, int, void*)+0x1d1>
c001ebc0:	83 ec 0c             	sub    esp,0xc
c001ebc3:	68 d3 33 02 c0       	push   0xc00233d3
c001ebc8:	e8 68 e6 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ebcd:	c7 04 24 be 5d 02 c0 	mov    DWORD PTR [esp],0xc0025dbe
c001ebd4:	e8 8d 83 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ebd9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ebe3:	c7 04 24 c8 36 02 c0 	mov    DWORD PTR [esp],0xc00236c8
c001ebea:	e8 46 e6 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ebef:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ebf6:	89 fa                	mov    edx,edi
c001ebf8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ebff:	c1 e1 10             	shl    ecx,0x10
c001ec02:	c1 e0 08             	shl    eax,0x8
c001ec05:	09 c1                	or     ecx,eax
c001ec07:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ec0e:	c1 e0 0b             	shl    eax,0xb
c001ec11:	09 c1                	or     ecx,eax
c001ec13:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ec19:	89 c8                	mov    eax,ecx
c001ec1b:	ef                   	out    dx,eax
c001ec1c:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001ec22:	89 f2                	mov    edx,esi
c001ec24:	89 e8                	mov    eax,ebp
c001ec26:	ee                   	out    dx,al
c001ec27:	89 c8                	mov    eax,ecx
c001ec29:	89 fa                	mov    edx,edi
c001ec2b:	ef                   	out    dx,eax
c001ec2c:	89 f2                	mov    edx,esi
c001ec2e:	ed                   	in     eax,dx
c001ec2f:	0f b6 c0             	movzx  eax,al
c001ec32:	83 c4 10             	add    esp,0x10
c001ec35:	39 e8                	cmp    eax,ebp
c001ec37:	74 58                	je     c001ec91 <IDE::open(int, int, void*)+0x21f>
c001ec39:	83 ec 0c             	sub    esp,0xc
c001ec3c:	68 d3 5d 02 c0       	push   0xc0025dd3
c001ec41:	eb 46                	jmp    c001ec89 <IDE::open(int, int, void*)+0x217>
c001ec43:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ec4c:	75 29                	jne    c001ec77 <IDE::open(int, int, void*)+0x205>
c001ec4e:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ec55:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ec5a:	74 05                	je     c001ec61 <IDE::open(int, int, void*)+0x1ef>
c001ec5c:	83 c0 80             	add    eax,0xffffff80
c001ec5f:	75 16                	jne    c001ec77 <IDE::open(int, int, void*)+0x205>
c001ec61:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	68 6f 46 02 c0       	push   0xc002466f
c001ec70:	e8 c0 e5 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ec75:	eb 17                	jmp    c001ec8e <IDE::open(int, int, void*)+0x21c>
c001ec77:	83 ec 0c             	sub    esp,0xc
c001ec7a:	68 db 5d 02 c0       	push   0xc0025ddb
c001ec7f:	eb 08                	jmp    c001ec89 <IDE::open(int, int, void*)+0x217>
c001ec81:	83 ec 0c             	sub    esp,0xc
c001ec84:	68 0c 5e 02 c0       	push   0xc0025e0c
c001ec89:	e8 74 11 ff ff       	call   c000fe02 <KePanic(char const*)>
c001ec8e:	83 c4 10             	add    esp,0x10
c001ec91:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ec98:	0f 84 bf 00 00 00    	je     c001ed5d <IDE::open(int, int, void*)+0x2eb>
c001ec9e:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	83 e0 fc             	and    eax,0xfffffffc
c001ecaa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ecb1:	83 c0 08             	add    eax,0x8
c001ecb4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ecbb:	68 36 5e 02 c0       	push   0xc0025e36
c001ecc0:	e8 a1 82 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ecc5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001eccc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ecd3:	50                   	push   eax
c001ecd4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ecdb:	50                   	push   eax
c001ecdc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ece3:	50                   	push   eax
c001ece4:	ff 35 80 f4 02 c0    	push   DWORD PTR ds:0xc002f480
c001ecea:	e8 8d f0 ff ff       	call   c001dd7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ecef:	83 c4 18             	add    esp,0x18
c001ecf2:	83 c8 07             	or     eax,0x7
c001ecf5:	0f b7 c0             	movzx  eax,ax
c001ecf8:	50                   	push   eax
c001ecf9:	6a 04                	push   0x4
c001ecfb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ed02:	50                   	push   eax
c001ed03:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ed0a:	50                   	push   eax
c001ed0b:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ed12:	50                   	push   eax
c001ed13:	ff 35 80 f4 02 c0    	push   DWORD PTR ds:0xc002f480
c001ed19:	e8 9a f2 ff ff       	call   c001dfb8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ed1e:	83 c4 20             	add    esp,0x20
c001ed21:	eb 3a                	jmp    c001ed5d <IDE::open(int, int, void*)+0x2eb>
c001ed23:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ed2a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ed30:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ed37:	05 06 02 00 00       	add    eax,0x206
c001ed3c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ed43:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ed4a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ed51:	05 06 02 00 00       	add    eax,0x206
c001ed56:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ed5d:	83 ec 0c             	sub    esp,0xc
c001ed60:	68 80 3c 02 c0       	push   0xc0023c80
c001ed65:	e8 cb e4 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ed6a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ed70:	83 c4 10             	add    esp,0x10
c001ed73:	89 c2                	mov    edx,eax
c001ed75:	83 e2 0f             	and    edx,0xf
c001ed78:	83 fa 08             	cmp    edx,0x8
c001ed7b:	75 0a                	jne    c001ed87 <IDE::open(int, int, void*)+0x315>
c001ed7d:	83 e8 02             	sub    eax,0x2
c001ed80:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ed87:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ed8d:	89 c2                	mov    edx,eax
c001ed8f:	83 e2 0f             	and    edx,0xf
c001ed92:	83 fa 08             	cmp    edx,0x8
c001ed95:	75 0a                	jne    c001eda1 <IDE::open(int, int, void*)+0x32f>
c001ed97:	83 e8 02             	sub    eax,0x2
c001ed9a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eda1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001eda8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001edaf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001edb2:	89 d0                	mov    eax,edx
c001edb4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001edb8:	8d 7a 01             	lea    edi,[edx+0x1]
c001edbb:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001edbf:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001edc3:	83 e1 3f             	and    ecx,0x3f
c001edc6:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001edca:	89 f9                	mov    ecx,edi
c001edcc:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001edd3:	8d 78 02             	lea    edi,[eax+0x2]
c001edd6:	0f b6 c9             	movzx  ecx,cl
c001edd9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001eddc:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ede0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ede4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ede8:	83 e2 3f             	and    edx,0x3f
c001edeb:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001edef:	89 f9                	mov    ecx,edi
c001edf1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001edf7:	8d 78 03             	lea    edi,[eax+0x3]
c001edfa:	0f b6 d1             	movzx  edx,cl
c001edfd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ee00:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ee04:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ee08:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ee0c:	83 e1 3f             	and    ecx,0x3f
c001ee0f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ee13:	89 fa                	mov    edx,edi
c001ee15:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ee1b:	8d 78 04             	lea    edi,[eax+0x4]
c001ee1e:	0f b6 ca             	movzx  ecx,dl
c001ee21:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ee24:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ee28:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ee2c:	89 fa                	mov    edx,edi
c001ee2e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ee34:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ee38:	83 e2 3f             	and    edx,0x3f
c001ee3b:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ee3f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ee46:	66 85 f6             	test   si,si
c001ee49:	74 24                	je     c001ee6f <IDE::open(int, int, void*)+0x3fd>
c001ee4b:	89 f9                	mov    ecx,edi
c001ee4d:	83 c0 05             	add    eax,0x5
c001ee50:	0f b6 d1             	movzx  edx,cl
c001ee53:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ee56:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ee5a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ee5e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ee64:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001ee68:	83 e0 3f             	and    eax,0x3f
c001ee6b:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001ee6f:	83 ec 0c             	sub    esp,0xc
c001ee72:	68 4e 5e 02 c0       	push   0xc0025e4e
c001ee77:	e8 b9 e3 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ee7c:	58                   	pop    eax
c001ee7d:	5a                   	pop    edx
c001ee7e:	6a 00                	push   0x0
c001ee80:	53                   	push   ebx
c001ee81:	e8 6c f9 ff ff       	call   c001e7f2 <IDE::prepareInterrupt(unsigned char)>
c001ee86:	59                   	pop    ecx
c001ee87:	5e                   	pop    esi
c001ee88:	6a 01                	push   0x1
c001ee8a:	53                   	push   ebx
c001ee8b:	e8 62 f9 ff ff       	call   c001e7f2 <IDE::prepareInterrupt(unsigned char)>
c001ee90:	c7 04 24 d0 56 02 c0 	mov    DWORD PTR [esp],0xc00256d0
c001ee97:	e8 99 e3 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ee9c:	83 c4 0c             	add    esp,0xc
c001ee9f:	6a 00                	push   0x0
c001eea1:	6a 00                	push   0x0
c001eea3:	53                   	push   ebx
c001eea4:	e8 7f fb ff ff       	call   c001ea28 <IDE::enableIRQs(unsigned char, bool)>
c001eea9:	83 c4 0c             	add    esp,0xc
c001eeac:	6a 00                	push   0x0
c001eeae:	6a 01                	push   0x1
c001eeb0:	53                   	push   ebx
c001eeb1:	e8 72 fb ff ff       	call   c001ea28 <IDE::enableIRQs(unsigned char, bool)>
c001eeb6:	c7 04 24 50 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e50
c001eebd:	e8 73 e3 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001eec2:	83 c4 10             	add    esp,0x10
c001eec5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001eecc:	74 3c                	je     c001ef0a <IDE::open(int, int, void*)+0x498>
c001eece:	83 ec 0c             	sub    esp,0xc
c001eed1:	53                   	push   ebx
c001eed2:	6a 01                	push   0x1
c001eed4:	68 ef e9 01 c0       	push   0xc001e9ef
c001eed9:	6a 0e                	push   0xe
c001eedb:	53                   	push   ebx
c001eedc:	e8 c1 aa fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eee1:	83 c4 14             	add    esp,0x14
c001eee4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eeea:	53                   	push   ebx
c001eeeb:	6a 01                	push   0x1
c001eeed:	68 0b ea 01 c0       	push   0xc001ea0b
c001eef2:	6a 0f                	push   0xf
c001eef4:	53                   	push   ebx
c001eef5:	e8 a8 aa fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eefa:	83 c4 14             	add    esp,0x14
c001eefd:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ef03:	68 ce 38 02 c0       	push   0xc00238ce
c001ef08:	eb 40                	jmp    c001ef4a <IDE::open(int, int, void*)+0x4d8>
c001ef0a:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ef14:	83 ec 0c             	sub    esp,0xc
c001ef17:	53                   	push   ebx
c001ef18:	6a 00                	push   0x0
c001ef1a:	68 ef e9 01 c0       	push   0xc001e9ef
c001ef1f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ef25:	53                   	push   ebx
c001ef26:	e8 77 aa fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef2b:	83 c4 14             	add    esp,0x14
c001ef2e:	53                   	push   ebx
c001ef2f:	6a 00                	push   0x0
c001ef31:	68 0b ea 01 c0       	push   0xc001ea0b
c001ef36:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ef3c:	53                   	push   ebx
c001ef3d:	e8 60 aa fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef42:	83 c4 14             	add    esp,0x14
c001ef45:	68 5e 46 02 c0       	push   0xc002465e
c001ef4a:	e8 e6 e2 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ef4f:	83 c4 10             	add    esp,0x10
c001ef52:	83 ec 0c             	sub    esp,0xc
c001ef55:	68 52 5e 02 c0       	push   0xc0025e52
c001ef5a:	e8 d6 e2 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ef5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ef61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef64:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ef67:	c7 04 24 e1 4a 02 c0 	mov    DWORD PTR [esp],0xc0024ae1
c001ef6e:	e8 c2 e2 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ef73:	83 c4 0c             	add    esp,0xc
c001ef76:	6a 07                	push   0x7
c001ef78:	6a 00                	push   0x0
c001ef7a:	53                   	push   ebx
c001ef7b:	e8 58 f9 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001ef80:	83 c4 0c             	add    esp,0xc
c001ef83:	6a 07                	push   0x7
c001ef85:	6a 01                	push   0x1
c001ef87:	53                   	push   ebx
c001ef88:	e8 4b f9 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001ef8d:	c7 04 24 68 43 02 c0 	mov    DWORD PTR [esp],0xc0024368
c001ef94:	e8 9c e2 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001ef99:	83 c4 0c             	add    esp,0xc
c001ef9c:	6a 01                	push   0x1
c001ef9e:	6a 00                	push   0x0
c001efa0:	53                   	push   ebx
c001efa1:	e8 82 fa ff ff       	call   c001ea28 <IDE::enableIRQs(unsigned char, bool)>
c001efa6:	83 c4 0c             	add    esp,0xc
c001efa9:	6a 01                	push   0x1
c001efab:	6a 01                	push   0x1
c001efad:	53                   	push   ebx
c001efae:	e8 75 fa ff ff       	call   c001ea28 <IDE::enableIRQs(unsigned char, bool)>
c001efb3:	c7 04 24 55 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e55
c001efba:	e8 76 e2 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001efbf:	83 c4 2c             	add    esp,0x2c
c001efc2:	31 c0                	xor    eax,eax
c001efc4:	5b                   	pop    ebx
c001efc5:	5e                   	pop    esi
c001efc6:	5f                   	pop    edi
c001efc7:	5d                   	pop    ebp
c001efc8:	c3                   	ret    
c001efc9:	90                   	nop

c001efca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001efca:	55                   	push   ebp
c001efcb:	57                   	push   edi
c001efcc:	56                   	push   esi
c001efcd:	53                   	push   ebx
c001efce:	83 ec 1c             	sub    esp,0x1c
c001efd1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001efd5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001efd9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001efdd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001efe1:	8d 42 f8             	lea    eax,[edx-0x8]
c001efe4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001efe8:	3c 03                	cmp    al,0x3
c001efea:	77 5a                	ja     c001f046 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001efec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eff0:	0f b6 db             	movzx  ebx,bl
c001eff3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001eff7:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001effa:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001efff:	0c 80                	or     al,0x80
c001f001:	50                   	push   eax
c001f002:	6a 0c                	push   0xc
c001f004:	53                   	push   ebx
c001f005:	56                   	push   esi
c001f006:	e8 0d f8 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f00b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f00f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f014:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f018:	0f b6 d2             	movzx  edx,dl
c001f01b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f01f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f021:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f026:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f02a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f02e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f036:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f03a:	83 c4 2c             	add    esp,0x2c
c001f03d:	5b                   	pop    ebx
c001f03e:	5e                   	pop    esi
c001f03f:	5f                   	pop    edi
c001f040:	5d                   	pop    ebp
c001f041:	e9 d2 f7 ff ff       	jmp    c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f046:	0f b6 c2             	movzx  eax,dl
c001f049:	83 f8 07             	cmp    eax,0x7
c001f04c:	77 12                	ja     c001f060 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f04e:	0f b6 db             	movzx  ebx,bl
c001f051:	0f b6 c2             	movzx  eax,dl
c001f054:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f05c:	01 c2                	add    edx,eax
c001f05e:	eb 2f                	jmp    c001f08f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f060:	83 f8 0d             	cmp    eax,0xd
c001f063:	77 13                	ja     c001f078 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f065:	0f b6 db             	movzx  ebx,bl
c001f068:	0f b6 d2             	movzx  edx,dl
c001f06b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f072:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f076:	eb 17                	jmp    c001f08f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f078:	83 f8 15             	cmp    eax,0x15
c001f07b:	77 14                	ja     c001f091 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f07d:	0f b6 db             	movzx  ebx,bl
c001f080:	0f b6 d2             	movzx  edx,dl
c001f083:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f08b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f08f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f091:	83 c4 1c             	add    esp,0x1c
c001f094:	5b                   	pop    ebx
c001f095:	5e                   	pop    esi
c001f096:	5f                   	pop    edi
c001f097:	5d                   	pop    ebp
c001f098:	c3                   	ret    
c001f099:	90                   	nop

c001f09a <IDE::detect()>:
c001f09a:	55                   	push   ebp
c001f09b:	57                   	push   edi
c001f09c:	56                   	push   esi
c001f09d:	53                   	push   ebx
c001f09e:	81 ec 28 02 00 00    	sub    esp,0x228
c001f0a4:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f0ab:	68 57 5e 02 c0       	push   0xc0025e57
c001f0b0:	e8 80 e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f0b5:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f0bb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f0bf:	83 c4 10             	add    esp,0x10
c001f0c2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f0c7:	0f 85 26 04 00 00    	jne    c001f4f3 <IDE::detect()+0x459>
c001f0cd:	83 ec 0c             	sub    esp,0xc
c001f0d0:	31 f6                	xor    esi,esi
c001f0d2:	68 5a 5e 02 c0       	push   0xc0025e5a
c001f0d7:	31 ff                	xor    edi,edi
c001f0d9:	e8 57 e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f0de:	83 c4 10             	add    esp,0x10
c001f0e1:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f0e8:	83 ec 0c             	sub    esp,0xc
c001f0eb:	68 5d 5e 02 c0       	push   0xc0025e5d
c001f0f0:	e8 40 e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f0f5:	83 c4 10             	add    esp,0x10
c001f0f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0ff:	83 ec 0c             	sub    esp,0xc
c001f102:	31 ed                	xor    ebp,ebp
c001f104:	68 60 5e 02 c0       	push   0xc0025e60
c001f109:	e8 27 e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f10e:	89 f8                	mov    eax,edi
c001f110:	c1 e0 06             	shl    eax,0x6
c001f113:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f11b:	c7 04 24 63 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e63
c001f122:	e8 0e e1 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f127:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f12b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f12f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f133:	c1 e0 04             	shl    eax,0x4
c001f136:	83 c8 a0             	or     eax,0xffffffa0
c001f139:	0f b6 c0             	movzx  eax,al
c001f13c:	50                   	push   eax
c001f13d:	6a 06                	push   0x6
c001f13f:	56                   	push   esi
c001f140:	53                   	push   ebx
c001f141:	e8 d2 f6 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f146:	83 c4 1c             	add    esp,0x1c
c001f149:	6a 0c                	push   0xc
c001f14b:	56                   	push   esi
c001f14c:	53                   	push   ebx
c001f14d:	e8 86 f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f152:	83 c4 0c             	add    esp,0xc
c001f155:	6a 0c                	push   0xc
c001f157:	56                   	push   esi
c001f158:	53                   	push   ebx
c001f159:	e8 7a f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f15e:	83 c4 0c             	add    esp,0xc
c001f161:	6a 0c                	push   0xc
c001f163:	56                   	push   esi
c001f164:	53                   	push   ebx
c001f165:	e8 6e f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f16a:	83 c4 0c             	add    esp,0xc
c001f16d:	6a 0c                	push   0xc
c001f16f:	56                   	push   esi
c001f170:	53                   	push   ebx
c001f171:	e8 62 f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f176:	c7 04 24 66 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e66
c001f17d:	e8 b3 e0 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f182:	68 ec 00 00 00       	push   0xec
c001f187:	6a 07                	push   0x7
c001f189:	56                   	push   esi
c001f18a:	53                   	push   ebx
c001f18b:	e8 88 f6 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f190:	83 c4 1c             	add    esp,0x1c
c001f193:	6a 0c                	push   0xc
c001f195:	56                   	push   esi
c001f196:	53                   	push   ebx
c001f197:	e8 3c f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f19c:	83 c4 0c             	add    esp,0xc
c001f19f:	6a 0c                	push   0xc
c001f1a1:	56                   	push   esi
c001f1a2:	53                   	push   ebx
c001f1a3:	e8 30 f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f1a8:	83 c4 0c             	add    esp,0xc
c001f1ab:	6a 0c                	push   0xc
c001f1ad:	56                   	push   esi
c001f1ae:	53                   	push   ebx
c001f1af:	e8 24 f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f1b4:	83 c4 0c             	add    esp,0xc
c001f1b7:	6a 0c                	push   0xc
c001f1b9:	56                   	push   esi
c001f1ba:	53                   	push   ebx
c001f1bb:	e8 18 f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f1c0:	c7 04 24 69 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e69
c001f1c7:	e8 69 e0 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f1cc:	83 c4 0c             	add    esp,0xc
c001f1cf:	6a 0c                	push   0xc
c001f1d1:	56                   	push   esi
c001f1d2:	53                   	push   ebx
c001f1d3:	e8 00 f7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f1d8:	83 c4 10             	add    esp,0x10
c001f1db:	84 c0                	test   al,al
c001f1dd:	75 1f                	jne    c001f1fe <IDE::detect()+0x164>
c001f1df:	83 ec 0c             	sub    esp,0xc
c001f1e2:	68 6c 5e 02 c0       	push   0xc0025e6c
c001f1e7:	e8 49 e0 fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f1ec:	e9 e0 02 00 00       	jmp    c001f4d1 <IDE::detect()+0x437>
c001f1f1:	a8 80                	test   al,0x80
c001f1f3:	74 21                	je     c001f216 <IDE::detect()+0x17c>
c001f1f5:	45                   	inc    ebp
c001f1f6:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f1fc:	7f 1e                	jg     c001f21c <IDE::detect()+0x182>
c001f1fe:	50                   	push   eax
c001f1ff:	6a 0c                	push   0xc
c001f201:	56                   	push   esi
c001f202:	53                   	push   ebx
c001f203:	e8 d0 f6 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f208:	83 c4 10             	add    esp,0x10
c001f20b:	a8 01                	test   al,0x1
c001f20d:	74 e2                	je     c001f1f1 <IDE::detect()+0x157>
c001f20f:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f214:	eb 23                	jmp    c001f239 <IDE::detect()+0x19f>
c001f216:	a8 08                	test   al,0x8
c001f218:	74 db                	je     c001f1f5 <IDE::detect()+0x15b>
c001f21a:	eb 18                	jmp    c001f234 <IDE::detect()+0x19a>
c001f21c:	50                   	push   eax
c001f21d:	50                   	push   eax
c001f21e:	6a 00                	push   0x0
c001f220:	6a 32                	push   0x32
c001f222:	e8 0d 7f ff ff       	call   c0017134 <milliTenthSleep(unsigned long long)>
c001f227:	83 c4 10             	add    esp,0x10
c001f22a:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f230:	75 cc                	jne    c001f1fe <IDE::detect()+0x164>
c001f232:	eb db                	jmp    c001f20f <IDE::detect()+0x175>
c001f234:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f239:	83 ec 0c             	sub    esp,0xc
c001f23c:	68 6f 5e 02 c0       	push   0xc0025e6f
c001f241:	e8 ef df fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f246:	83 c4 10             	add    esp,0x10
c001f249:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f24e:	74 56                	je     c001f2a6 <IDE::detect()+0x20c>
c001f250:	51                   	push   ecx
c001f251:	6a 04                	push   0x4
c001f253:	56                   	push   esi
c001f254:	53                   	push   ebx
c001f255:	e8 7e f6 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f25a:	83 c4 0c             	add    esp,0xc
c001f25d:	6a 05                	push   0x5
c001f25f:	56                   	push   esi
c001f260:	53                   	push   ebx
c001f261:	89 c5                	mov    ebp,eax
c001f263:	e8 70 f6 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f268:	89 e9                	mov    ecx,ebp
c001f26a:	83 c4 10             	add    esp,0x10
c001f26d:	0f b6 e9             	movzx  ebp,cl
c001f270:	83 fd 14             	cmp    ebp,0x14
c001f273:	75 04                	jne    c001f279 <IDE::detect()+0x1df>
c001f275:	3c eb                	cmp    al,0xeb
c001f277:	74 11                	je     c001f28a <IDE::detect()+0x1f0>
c001f279:	83 fd 69             	cmp    ebp,0x69
c001f27c:	0f 85 52 02 00 00    	jne    c001f4d4 <IDE::detect()+0x43a>
c001f282:	3c 96                	cmp    al,0x96
c001f284:	0f 85 4a 02 00 00    	jne    c001f4d4 <IDE::detect()+0x43a>
c001f28a:	68 a1 00 00 00       	push   0xa1
c001f28f:	6a 07                	push   0x7
c001f291:	56                   	push   esi
c001f292:	53                   	push   ebx
c001f293:	e8 80 f5 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f298:	58                   	pop    eax
c001f299:	5a                   	pop    edx
c001f29a:	6a 00                	push   0x0
c001f29c:	6a 0a                	push   0xa
c001f29e:	e8 91 7e ff ff       	call   c0017134 <milliTenthSleep(unsigned long long)>
c001f2a3:	83 c4 10             	add    esp,0x10
c001f2a6:	83 ec 0c             	sub    esp,0xc
c001f2a9:	89 fd                	mov    ebp,edi
c001f2ab:	68 72 5e 02 c0       	push   0xc0025e72
c001f2b0:	e8 80 df fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f2b5:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f2b9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f2c0:	c1 e5 06             	shl    ebp,0x6
c001f2c3:	52                   	push   edx
c001f2c4:	01 dd                	add    ebp,ebx
c001f2c6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f2ca:	6a 00                	push   0x0
c001f2cc:	56                   	push   esi
c001f2cd:	53                   	push   ebx
c001f2ce:	e8 f7 fc ff ff       	call   c001efca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f2d3:	83 c4 14             	add    esp,0x14
c001f2d6:	68 76 5e 02 c0       	push   0xc0025e76
c001f2db:	e8 55 df fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f2e0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f2e5:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f2ec:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f2f3:	89 f0                	mov    eax,esi
c001f2f5:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f2fb:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f2ff:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f309:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f310:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f318:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f31f:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f327:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f32d:	c7 04 24 7a 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e7a
c001f334:	e8 fc de fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f339:	83 c4 10             	add    esp,0x10
c001f33c:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f343:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f347:	74 09                	je     c001f352 <IDE::detect()+0x2b8>
c001f349:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f350:	eb 07                	jmp    c001f359 <IDE::detect()+0x2bf>
c001f352:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f359:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f35d:	89 f8                	mov    eax,edi
c001f35f:	83 ec 0c             	sub    esp,0xc
c001f362:	c1 e0 06             	shl    eax,0x6
c001f365:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f368:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f36e:	68 7e 5e 02 c0       	push   0xc0025e7e
c001f373:	e8 bd de fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f378:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f37c:	89 e8                	mov    eax,ebp
c001f37e:	83 c4 10             	add    esp,0x10
c001f381:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f384:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f387:	83 c2 02             	add    edx,0x2
c001f38a:	83 c0 02             	add    eax,0x2
c001f38d:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f393:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f396:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f39c:	39 d5                	cmp    ebp,edx
c001f39e:	75 e4                	jne    c001f384 <IDE::detect()+0x2ea>
c001f3a0:	89 f8                	mov    eax,edi
c001f3a2:	c1 e0 06             	shl    eax,0x6
c001f3a5:	01 d8                	add    eax,ebx
c001f3a7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f3ae:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f3b5:	c1 ea 09             	shr    edx,0x9
c001f3b8:	83 e2 01             	and    edx,0x1
c001f3bb:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f3c2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f3c8:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f3cc:	74 0c                	je     c001f3da <IDE::detect()+0x340>
c001f3ce:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f3d7:	0f 95 c2             	setne  dl
c001f3da:	89 fd                	mov    ebp,edi
c001f3dc:	83 ec 0c             	sub    esp,0xc
c001f3df:	c1 e5 06             	shl    ebp,0x6
c001f3e2:	01 dd                	add    ebp,ebx
c001f3e4:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f3ea:	68 82 5e 02 c0       	push   0xc0025e82
c001f3ef:	e8 41 de fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f3f4:	83 c4 10             	add    esp,0x10
c001f3f7:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f3fc:	75 66                	jne    c001f464 <IDE::detect()+0x3ca>
c001f3fe:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f405:	0f 84 b8 00 00 00    	je     c001f4c3 <IDE::detect()+0x429>
c001f40b:	83 ec 0c             	sub    esp,0xc
c001f40e:	68 86 5e 02 c0       	push   0xc0025e86
c001f413:	e8 1d de fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f418:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f41f:	e8 88 05 ff ff       	call   c000f9ac <malloc>
c001f424:	89 04 24             	mov    DWORD PTR [esp],eax
c001f427:	89 c5                	mov    ebp,eax
c001f429:	e8 44 05 00 00       	call   c001f972 <ATA::ATA()>
c001f42e:	c7 04 24 8a 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e8a
c001f435:	e8 fb dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f43a:	59                   	pop    ecx
c001f43b:	58                   	pop    eax
c001f43c:	55                   	push   ebp
c001f43d:	53                   	push   ebx
c001f43e:	e8 b3 a5 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f443:	c7 04 24 8f 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e8f
c001f44a:	e8 e6 dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f44f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f452:	53                   	push   ebx
c001f453:	57                   	push   edi
c001f454:	6a 00                	push   0x0
c001f456:	55                   	push   ebp
c001f457:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f45a:	83 c4 14             	add    esp,0x14
c001f45d:	68 94 5e 02 c0       	push   0xc0025e94
c001f462:	eb 57                	jmp    c001f4bb <IDE::detect()+0x421>
c001f464:	83 ec 0c             	sub    esp,0xc
c001f467:	68 99 5e 02 c0       	push   0xc0025e99
c001f46c:	e8 c4 dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f471:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f478:	e8 2f 05 ff ff       	call   c000f9ac <malloc>
c001f47d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f480:	89 c5                	mov    ebp,eax
c001f482:	e8 b1 0c 00 00       	call   c0020138 <ATAPI::ATAPI()>
c001f487:	c7 04 24 9f 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e9f
c001f48e:	e8 a2 dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f493:	58                   	pop    eax
c001f494:	5a                   	pop    edx
c001f495:	55                   	push   ebp
c001f496:	53                   	push   ebx
c001f497:	e8 5a a5 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f49c:	c7 04 24 a6 5e 02 c0 	mov    DWORD PTR [esp],0xc0025ea6
c001f4a3:	e8 8d dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f4a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f4ab:	53                   	push   ebx
c001f4ac:	57                   	push   edi
c001f4ad:	6a 00                	push   0x0
c001f4af:	55                   	push   ebp
c001f4b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f4b3:	83 c4 14             	add    esp,0x14
c001f4b6:	68 ad 5e 02 c0       	push   0xc0025ead
c001f4bb:	e8 75 dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f4c0:	83 c4 10             	add    esp,0x10
c001f4c3:	83 ec 0c             	sub    esp,0xc
c001f4c6:	47                   	inc    edi
c001f4c7:	68 b4 5e 02 c0       	push   0xc0025eb4
c001f4cc:	e8 64 dd fe ff       	call   c000d235 <KeSetBootMessage(char const*)>
c001f4d1:	83 c4 10             	add    esp,0x10
c001f4d4:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f4d8:	74 0c                	je     c001f4e6 <IDE::detect()+0x44c>
c001f4da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f4e1:	e9 19 fc ff ff       	jmp    c001f0ff <IDE::detect()+0x65>
c001f4e6:	4e                   	dec    esi
c001f4e7:	74 0a                	je     c001f4f3 <IDE::detect()+0x459>
c001f4e9:	be 01 00 00 00       	mov    esi,0x1
c001f4ee:	e9 f5 fb ff ff       	jmp    c001f0e8 <IDE::detect()+0x4e>
c001f4f3:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f4f9:	5b                   	pop    ebx
c001f4fa:	5e                   	pop    esi
c001f4fb:	5f                   	pop    edi
c001f4fc:	5d                   	pop    ebp
c001f4fd:	c3                   	ret    

c001f4fe <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f4fe:	55                   	push   ebp
c001f4ff:	57                   	push   edi
c001f500:	56                   	push   esi
c001f501:	53                   	push   ebx
c001f502:	83 ec 1c             	sub    esp,0x1c
c001f505:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f509:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f50d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f515:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f519:	88 c3                	mov    bl,al
c001f51b:	25 ff 00 00 00       	and    eax,0xff
c001f520:	0f 84 88 00 00 00    	je     c001f5ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f526:	83 ec 0c             	sub    esp,0xc
c001f529:	89 c7                	mov    edi,eax
c001f52b:	68 b8 5e 02 c0       	push   0xc0025eb8
c001f530:	e8 31 7a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f535:	83 c4 10             	add    esp,0x10
c001f538:	83 ff 01             	cmp    edi,0x1
c001f53b:	74 6b                	je     c001f5a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f53d:	83 ff 02             	cmp    edi,0x2
c001f540:	75 58                	jne    c001f59a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f542:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f547:	50                   	push   eax
c001f548:	6a 01                	push   0x1
c001f54a:	01 ff                	add    edi,edi
c001f54c:	09 fe                	or     esi,edi
c001f54e:	89 f0                	mov    eax,esi
c001f550:	0f b6 f0             	movzx  esi,al
c001f553:	c1 e6 06             	shl    esi,0x6
c001f556:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f55e:	50                   	push   eax
c001f55f:	55                   	push   ebp
c001f560:	e8 73 f3 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f565:	83 c4 10             	add    esp,0x10
c001f568:	a8 01                	test   al,0x1
c001f56a:	74 02                	je     c001f56e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f56c:	b3 07                	mov    bl,0x7
c001f56e:	a8 02                	test   al,0x2
c001f570:	74 02                	je     c001f574 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f572:	b3 03                	mov    bl,0x3
c001f574:	a8 04                	test   al,0x4
c001f576:	74 02                	je     c001f57a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f578:	b3 14                	mov    bl,0x14
c001f57a:	a8 08                	test   al,0x8
c001f57c:	74 02                	je     c001f580 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f57e:	b3 03                	mov    bl,0x3
c001f580:	a8 10                	test   al,0x10
c001f582:	74 02                	je     c001f586 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f584:	b3 15                	mov    bl,0x15
c001f586:	a8 20                	test   al,0x20
c001f588:	74 02                	je     c001f58c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f58a:	b3 03                	mov    bl,0x3
c001f58c:	a8 40                	test   al,0x40
c001f58e:	74 02                	je     c001f592 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f590:	b3 16                	mov    bl,0x16
c001f592:	a8 80                	test   al,0x80
c001f594:	74 18                	je     c001f5ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f596:	b3 0d                	mov    bl,0xd
c001f598:	eb 14                	jmp    c001f5ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f59a:	83 ff 03             	cmp    edi,0x3
c001f59d:	74 0d                	je     c001f5ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f59f:	83 ff 04             	cmp    edi,0x4
c001f5a2:	75 0a                	jne    c001f5ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f5a4:	b3 08                	mov    bl,0x8
c001f5a6:	eb 06                	jmp    c001f5ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f5a8:	b3 13                	mov    bl,0x13
c001f5aa:	eb 02                	jmp    c001f5ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f5ac:	b3 17                	mov    bl,0x17
c001f5ae:	83 c4 1c             	add    esp,0x1c
c001f5b1:	88 d8                	mov    al,bl
c001f5b3:	5b                   	pop    ebx
c001f5b4:	5e                   	pop    esi
c001f5b5:	5f                   	pop    edi
c001f5b6:	5d                   	pop    ebp
c001f5b7:	c3                   	ret    

c001f5b8 <IDE::polling(unsigned char, unsigned int)>:
c001f5b8:	57                   	push   edi
c001f5b9:	56                   	push   esi
c001f5ba:	53                   	push   ebx
c001f5bb:	bb 04 00 00 00       	mov    ebx,0x4
c001f5c0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f5c4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f5c9:	52                   	push   edx
c001f5ca:	6a 0c                	push   0xc
c001f5cc:	56                   	push   esi
c001f5cd:	57                   	push   edi
c001f5ce:	e8 05 f3 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f5d3:	83 c4 10             	add    esp,0x10
c001f5d6:	4b                   	dec    ebx
c001f5d7:	75 f0                	jne    c001f5c9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f5d9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f5de:	50                   	push   eax
c001f5df:	6a 0c                	push   0xc
c001f5e1:	56                   	push   esi
c001f5e2:	57                   	push   edi
c001f5e3:	e8 f0 f2 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001f5e8:	83 c4 10             	add    esp,0x10
c001f5eb:	a8 01                	test   al,0x1
c001f5ed:	75 17                	jne    c001f606 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f5ef:	a8 20                	test   al,0x20
c001f5f1:	75 0f                	jne    c001f602 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f5f3:	4b                   	dec    ebx
c001f5f4:	74 10                	je     c001f606 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f5f6:	a8 80                	test   al,0x80
c001f5f8:	75 e4                	jne    c001f5de <IDE::polling(unsigned char, unsigned int)+0x26>
c001f5fa:	a8 08                	test   al,0x8
c001f5fc:	74 e0                	je     c001f5de <IDE::polling(unsigned char, unsigned int)+0x26>
c001f5fe:	31 c0                	xor    eax,eax
c001f600:	eb 06                	jmp    c001f608 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f602:	b0 01                	mov    al,0x1
c001f604:	eb 02                	jmp    c001f608 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f606:	b0 02                	mov    al,0x2
c001f608:	5b                   	pop    ebx
c001f609:	5e                   	pop    esi
c001f60a:	5f                   	pop    edi
c001f60b:	c3                   	ret    

c001f60c <SATABus::close(int, int, void*)>:
c001f60c:	31 c0                	xor    eax,eax
c001f60e:	c3                   	ret    
c001f60f:	90                   	nop

c001f610 <SATABus::detect()>:
c001f610:	c3                   	ret    
c001f611:	90                   	nop

c001f612 <SATABus::SATABus()>:
c001f612:	83 ec 0c             	sub    esp,0xc
c001f615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f619:	83 ec 08             	sub    esp,0x8
c001f61c:	68 f0 5e 02 c0       	push   0xc0025ef0
c001f621:	50                   	push   eax
c001f622:	e8 29 a7 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001f627:	83 c4 10             	add    esp,0x10
c001f62a:	ba 1c 5f 02 c0       	mov    edx,0xc0025f1c
c001f62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f633:	89 10                	mov    DWORD PTR [eax],edx
c001f635:	83 ec 0c             	sub    esp,0xc
c001f638:	6a 50                	push   0x50
c001f63a:	e8 9b 0a ff ff       	call   c00100da <Phys::allocateContiguousPages(int)>
c001f63f:	83 c4 10             	add    esp,0x10
c001f642:	89 c2                	mov    edx,eax
c001f644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f648:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f64e:	83 ec 0c             	sub    esp,0xc
c001f651:	6a 50                	push   0x50
c001f653:	e8 9f 3d ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c001f658:	83 c4 10             	add    esp,0x10
c001f65b:	89 c2                	mov    edx,eax
c001f65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f661:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f667:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001f66c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f670:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f676:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f67a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f680:	83 ec 0c             	sub    esp,0xc
c001f683:	6a 03                	push   0x3
c001f685:	6a 50                	push   0x50
c001f687:	51                   	push   ecx
c001f688:	52                   	push   edx
c001f689:	50                   	push   eax
c001f68a:	e8 3b 46 ff ff       	call   c0013cca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f68f:	83 c4 20             	add    esp,0x20
c001f692:	90                   	nop
c001f693:	83 c4 0c             	add    esp,0xc
c001f696:	c3                   	ret    
c001f697:	90                   	nop

c001f698 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f69c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f69f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f6a2:	09 c2                	or     edx,eax
c001f6a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f6ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f6b0:	31 c0                	xor    eax,eax
c001f6b2:	c1 e9 08             	shr    ecx,0x8
c001f6b5:	83 e1 0f             	and    ecx,0xf
c001f6b8:	39 c8                	cmp    eax,ecx
c001f6ba:	74 0a                	je     c001f6c6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f6bc:	f6 c2 01             	test   dl,0x1
c001f6bf:	74 08                	je     c001f6c9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f6c1:	d1 ea                	shr    edx,1
c001f6c3:	40                   	inc    eax
c001f6c4:	eb f2                	jmp    c001f6b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f6c6:	83 c8 ff             	or     eax,0xffffffff
c001f6c9:	c3                   	ret    

c001f6ca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f6ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6ce:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f6d1:	89 c2                	mov    edx,eax
c001f6d3:	c1 ea 08             	shr    edx,0x8
c001f6d6:	83 e2 0f             	and    edx,0xf
c001f6d9:	4a                   	dec    edx
c001f6da:	75 32                	jne    c001f70e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f6dc:	83 e0 0f             	and    eax,0xf
c001f6df:	83 f8 03             	cmp    eax,0x3
c001f6e2:	75 2a                	jne    c001f70e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f6e4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f6e7:	b8 02 00 00 00       	mov    eax,0x2
c001f6ec:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f6f2:	74 1c                	je     c001f710 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f6f4:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f6fa:	b8 04 00 00 00       	mov    eax,0x4
c001f6ff:	74 0f                	je     c001f710 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f701:	31 c0                	xor    eax,eax
c001f703:	83 fa 03             	cmp    edx,0x3
c001f706:	0f 94 c0             	sete   al
c001f709:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f70d:	c3                   	ret    
c001f70e:	31 c0                	xor    eax,eax
c001f710:	c3                   	ret    
c001f711:	90                   	nop

c001f712 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f712:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f716:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f719:	0f ba e2 0f          	bt     edx,0xf
c001f71d:	72 f7                	jb     c001f716 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f71f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f722:	83 ca 10             	or     edx,0x10
c001f725:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f728:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f72b:	83 ca 01             	or     edx,0x1
c001f72e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f731:	c3                   	ret    

c001f732 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f732:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f736:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f739:	83 e2 fe             	and    edx,0xfffffffe
c001f73c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f73f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f742:	83 e2 ef             	and    edx,0xffffffef
c001f745:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f748:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f74b:	0f ba e2 0e          	bt     edx,0xe
c001f74f:	72 f7                	jb     c001f748 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f751:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f754:	0f ba e2 0f          	bt     edx,0xf
c001f758:	72 ee                	jb     c001f748 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f75a:	c3                   	ret    
c001f75b:	90                   	nop

c001f75c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f75c:	55                   	push   ebp
c001f75d:	57                   	push   edi
c001f75e:	56                   	push   esi
c001f75f:	53                   	push   ebx
c001f760:	83 ec 1c             	sub    esp,0x1c
c001f763:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f767:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f76b:	53                   	push   ebx
c001f76c:	57                   	push   edi
c001f76d:	e8 c0 ff ff ff       	call   c001f732 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f772:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f776:	83 ec 0c             	sub    esp,0xc
c001f779:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f77f:	c1 e5 0a             	shl    ebp,0xa
c001f782:	01 e8                	add    eax,ebp
c001f784:	89 03                	mov    DWORD PTR [ebx],eax
c001f786:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f788:	68 00 04 00 00       	push   0x400
c001f78d:	6a 00                	push   0x0
c001f78f:	50                   	push   eax
c001f790:	e8 5b 0d fe ff       	call   c00004f0 <memset>
c001f795:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f79b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001f79f:	83 c4 1c             	add    esp,0x1c
c001f7a2:	01 e8                	add    eax,ebp
c001f7a4:	89 03                	mov    DWORD PTR [ebx],eax
c001f7a6:	c1 e6 08             	shl    esi,0x8
c001f7a9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f7b0:	81 c6 00 80 00 00    	add    esi,0x8000
c001f7b6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f7bc:	01 f0                	add    eax,esi
c001f7be:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f7c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f7c4:	68 00 01 00 00       	push   0x100
c001f7c9:	6a 00                	push   0x0
c001f7cb:	50                   	push   eax
c001f7cc:	e8 1f 0d fe ff       	call   c00004f0 <memset>
c001f7d1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f7d7:	31 d2                	xor    edx,edx
c001f7d9:	01 f0                	add    eax,esi
c001f7db:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f7de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f7e5:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001f7eb:	01 ee                	add    esi,ebp
c001f7ed:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f7f1:	83 c4 10             	add    esp,0x10
c001f7f4:	c1 e5 0d             	shl    ebp,0xd
c001f7f7:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001f7fd:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001f803:	83 c6 20             	add    esi,0x20
c001f806:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f80a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f810:	01 e8                	add    eax,ebp
c001f812:	01 d0                	add    eax,edx
c001f814:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f817:	52                   	push   edx
c001f818:	68 00 01 00 00       	push   0x100
c001f81d:	6a 00                	push   0x0
c001f81f:	50                   	push   eax
c001f820:	e8 cb 0c fe ff       	call   c00004f0 <memset>
c001f825:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f82b:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001f832:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f836:	83 c4 10             	add    esp,0x10
c001f839:	01 e8                	add    eax,ebp
c001f83b:	01 d0                	add    eax,edx
c001f83d:	81 c2 00 01 00 00    	add    edx,0x100
c001f843:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f846:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001f84c:	75 af                	jne    c001f7fd <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001f84e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f855:	50                   	push   eax
c001f856:	50                   	push   eax
c001f857:	53                   	push   ebx
c001f858:	57                   	push   edi
c001f859:	e8 b4 fe ff ff       	call   c001f712 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f85e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f865:	83 c4 2c             	add    esp,0x2c
c001f868:	5b                   	pop    ebx
c001f869:	5e                   	pop    esi
c001f86a:	5f                   	pop    edi
c001f86b:	5d                   	pop    ebp
c001f86c:	c3                   	ret    
c001f86d:	90                   	nop

c001f86e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f86e:	55                   	push   ebp
c001f86f:	57                   	push   edi
c001f870:	56                   	push   esi
c001f871:	53                   	push   ebx
c001f872:	31 db                	xor    ebx,ebx
c001f874:	83 ec 0c             	sub    esp,0xc
c001f877:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f87b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f87f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f882:	f7 c7 01 00 00 00    	test   edi,0x1
c001f888:	74 7a                	je     c001f904 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f88a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f88e:	89 d8                	mov    eax,ebx
c001f890:	c1 e0 07             	shl    eax,0x7
c001f893:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f89a:	55                   	push   ebp
c001f89b:	56                   	push   esi
c001f89c:	e8 29 fe ff ff       	call   c001f6ca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f8a1:	5a                   	pop    edx
c001f8a2:	59                   	pop    ecx
c001f8a3:	83 f8 01             	cmp    eax,0x1
c001f8a6:	75 21                	jne    c001f8c9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f8a8:	50                   	push   eax
c001f8a9:	53                   	push   ebx
c001f8aa:	55                   	push   ebp
c001f8ab:	56                   	push   esi
c001f8ac:	e8 ab fe ff ff       	call   c001f75c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f8b1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f8b8:	e8 ef 00 ff ff       	call   c000f9ac <malloc>
c001f8bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8c0:	89 c5                	mov    ebp,eax
c001f8c2:	e8 37 0f 00 00       	call   c00207fe <SATA::SATA()>
c001f8c7:	eb 24                	jmp    c001f8ed <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f8c9:	83 f8 04             	cmp    eax,0x4
c001f8cc:	75 36                	jne    c001f904 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f8ce:	51                   	push   ecx
c001f8cf:	53                   	push   ebx
c001f8d0:	55                   	push   ebp
c001f8d1:	56                   	push   esi
c001f8d2:	e8 85 fe ff ff       	call   c001f75c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f8d7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f8de:	e8 c9 00 ff ff       	call   c000f9ac <malloc>
c001f8e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8e6:	89 c5                	mov    ebp,eax
c001f8e8:	e8 a7 12 00 00       	call   c0020b94 <SATAPI::SATAPI()>
c001f8ed:	58                   	pop    eax
c001f8ee:	5a                   	pop    edx
c001f8ef:	55                   	push   ebp
c001f8f0:	56                   	push   esi
c001f8f1:	e8 00 a1 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f8f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f8f9:	56                   	push   esi
c001f8fa:	6a 00                	push   0x0
c001f8fc:	53                   	push   ebx
c001f8fd:	55                   	push   ebp
c001f8fe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f901:	83 c4 20             	add    esp,0x20
c001f904:	d1 ef                	shr    edi,1
c001f906:	43                   	inc    ebx
c001f907:	83 fb 20             	cmp    ebx,0x20
c001f90a:	0f 85 72 ff ff ff    	jne    c001f882 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f910:	83 c4 0c             	add    esp,0xc
c001f913:	5b                   	pop    ebx
c001f914:	5e                   	pop    esi
c001f915:	5f                   	pop    edi
c001f916:	5d                   	pop    ebp
c001f917:	c3                   	ret    

c001f918 <SATABus::open(int, int, void*)>:
c001f918:	53                   	push   ebx
c001f919:	83 ec 08             	sub    esp,0x8
c001f91c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f920:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f926:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f92c:	e8 1f 73 ff ff       	call   c0016c50 <KeDisablePreemption()>
c001f931:	52                   	push   edx
c001f932:	52                   	push   edx
c001f933:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f939:	53                   	push   ebx
c001f93a:	e8 2f ff ff ff       	call   c001f86e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f93f:	e8 34 73 ff ff       	call   c0016c78 <KeRestorePreemption()>
c001f944:	83 c4 18             	add    esp,0x18
c001f947:	31 c0                	xor    eax,eax
c001f949:	5b                   	pop    ebx
c001f94a:	c3                   	ret    
c001f94b:	90                   	nop

c001f94c <ATA::close(int, int, void*)>:
c001f94c:	83 ec 0c             	sub    esp,0xc
c001f94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f953:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f959:	85 c0                	test   eax,eax
c001f95b:	74 0c                	je     c001f969 <ATA::close(int, int, void*)+0x1d>
c001f95d:	8b 10                	mov    edx,DWORD PTR [eax]
c001f95f:	83 ec 0c             	sub    esp,0xc
c001f962:	50                   	push   eax
c001f963:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f966:	83 c4 10             	add    esp,0x10
c001f969:	31 c0                	xor    eax,eax
c001f96b:	83 c4 0c             	add    esp,0xc
c001f96e:	c3                   	ret    
c001f96f:	90                   	nop

c001f970 <ATA::powerSaving(PowerSavingLevel)>:
c001f970:	c3                   	ret    
c001f971:	90                   	nop

c001f972 <ATA::ATA()>:
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f979:	83 ec 04             	sub    esp,0x4
c001f97c:	68 00 02 00 00       	push   0x200
c001f981:	68 9d 60 02 c0       	push   0xc002609d
c001f986:	50                   	push   eax
c001f987:	e8 4e a4 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f98c:	83 c4 10             	add    esp,0x10
c001f98f:	ba 04 60 02 c0       	mov    edx,0xc0026004
c001f994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f998:	89 10                	mov    DWORD PTR [eax],edx
c001f99a:	90                   	nop
c001f99b:	83 c4 0c             	add    esp,0xc
c001f99e:	c3                   	ret    
c001f99f:	90                   	nop

c001f9a0 <ATA::flush(bool)>:
c001f9a0:	53                   	push   ebx
c001f9a1:	83 ec 08             	sub    esp,0x8
c001f9a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f9a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f9ad:	83 f8 01             	cmp    eax,0x1
c001f9b0:	19 c0                	sbb    eax,eax
c001f9b2:	83 e0 fd             	and    eax,0xfffffffd
c001f9b5:	05 ea 00 00 00       	add    eax,0xea
c001f9ba:	50                   	push   eax
c001f9bb:	6a 07                	push   0x7
c001f9bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9c4:	50                   	push   eax
c001f9c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9cb:	e8 48 ee ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9d0:	83 c4 0c             	add    esp,0xc
c001f9d3:	6a 00                	push   0x0
c001f9d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9dc:	50                   	push   eax
c001f9dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9e3:	e8 d0 fb ff ff       	call   c001f5b8 <IDE::polling(unsigned char, unsigned int)>
c001f9e8:	83 c4 18             	add    esp,0x18
c001f9eb:	5b                   	pop    ebx
c001f9ec:	c3                   	ret    
c001f9ed:	90                   	nop

c001f9ee <ATA::readyForCommand()>:
c001f9ee:	56                   	push   esi
c001f9ef:	53                   	push   ebx
c001f9f0:	31 db                	xor    ebx,ebx
c001f9f2:	50                   	push   eax
c001f9f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f9f7:	50                   	push   eax
c001f9f8:	6a 0c                	push   0xc
c001f9fa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fa01:	50                   	push   eax
c001fa02:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fa08:	e8 cb ee ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c001fa0d:	83 c4 10             	add    esp,0x10
c001fa10:	a8 88                	test   al,0x88
c001fa12:	74 20                	je     c001fa34 <ATA::readyForCommand()+0x46>
c001fa14:	43                   	inc    ebx
c001fa15:	83 fb 63             	cmp    ebx,0x63
c001fa18:	7e dd                	jle    c001f9f7 <ATA::readyForCommand()+0x9>
c001fa1a:	51                   	push   ecx
c001fa1b:	51                   	push   ecx
c001fa1c:	6a 00                	push   0x0
c001fa1e:	6a 0a                	push   0xa
c001fa20:	e8 0f 77 ff ff       	call   c0017134 <milliTenthSleep(unsigned long long)>
c001fa25:	83 c4 10             	add    esp,0x10
c001fa28:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fa2e:	75 c7                	jne    c001f9f7 <ATA::readyForCommand()+0x9>
c001fa30:	31 c0                	xor    eax,eax
c001fa32:	eb 02                	jmp    c001fa36 <ATA::readyForCommand()+0x48>
c001fa34:	b0 01                	mov    al,0x1
c001fa36:	5a                   	pop    edx
c001fa37:	5b                   	pop    ebx
c001fa38:	5e                   	pop    esi
c001fa39:	c3                   	ret    

c001fa3a <ATA::access(unsigned long long, int, void*, bool)>:
c001fa3a:	55                   	push   ebp
c001fa3b:	57                   	push   edi
c001fa3c:	56                   	push   esi
c001fa3d:	53                   	push   ebx
c001fa3e:	83 ec 2c             	sub    esp,0x2c
c001fa41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fa45:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fa49:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fa4d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fa51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fa55:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fa59:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001fa5d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fa63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fa67:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fa6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa71:	c1 e0 06             	shl    eax,0x6
c001fa74:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fa7c:	74 5b                	je     c001fad9 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001fa7e:	89 fa                	mov    edx,edi
c001fa80:	89 f0                	mov    eax,esi
c001fa82:	c1 ea 1c             	shr    edx,0x1c
c001fa85:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001fa89:	89 d1                	mov    ecx,edx
c001fa8b:	09 c1                	or     ecx,eax
c001fa8d:	74 25                	je     c001fab4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001fa8f:	31 ed                	xor    ebp,ebp
c001fa91:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fa98:	89 fa                	mov    edx,edi
c001fa9a:	89 f0                	mov    eax,esi
c001fa9c:	0f ad d0             	shrd   eax,edx,cl
c001fa9f:	d3 ea                	shr    edx,cl
c001faa1:	f6 c1 20             	test   cl,0x20
c001faa4:	74 02                	je     c001faa8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001faa6:	89 d0                	mov    eax,edx
c001faa8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001faac:	45                   	inc    ebp
c001faad:	83 fd 06             	cmp    ebp,0x6
c001fab0:	75 df                	jne    c001fa91 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fab2:	eb 71                	jmp    c001fb25 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001fab4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fab9:	89 f0                	mov    eax,esi
c001fabb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fac2:	0f ac f8 10          	shrd   eax,edi,0x10
c001fac6:	bf 01 00 00 00       	mov    edi,0x1
c001facb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001facf:	c1 ee 18             	shr    esi,0x18
c001fad2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fad7:	eb 53                	jmp    c001fb2c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001fad9:	6a 00                	push   0x0
c001fadb:	6a 3f                	push   0x3f
c001fadd:	57                   	push   edi
c001fade:	56                   	push   esi
c001fadf:	e8 d0 20 00 00       	call   c0021bb4 <__umoddi3>
c001fae4:	83 c4 10             	add    esp,0x10
c001fae7:	40                   	inc    eax
c001fae8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001faec:	6a 00                	push   0x0
c001faee:	68 f0 03 00 00       	push   0x3f0
c001faf3:	57                   	push   edi
c001faf4:	56                   	push   esi
c001faf5:	e8 ba 1f 00 00       	call   c0021ab4 <__udivdi3>
c001fafa:	83 c4 10             	add    esp,0x10
c001fafd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fb02:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fb09:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fb0e:	6a 00                	push   0x0
c001fb10:	6a 3f                	push   0x3f
c001fb12:	57                   	push   edi
c001fb13:	31 ff                	xor    edi,edi
c001fb15:	56                   	push   esi
c001fb16:	e8 99 1f 00 00       	call   c0021ab4 <__udivdi3>
c001fb1b:	83 c4 10             	add    esp,0x10
c001fb1e:	83 e0 0f             	and    eax,0xf
c001fb21:	89 c6                	mov    esi,eax
c001fb23:	eb 07                	jmp    c001fb2c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001fb25:	31 f6                	xor    esi,esi
c001fb27:	bf 02 00 00 00       	mov    edi,0x2
c001fb2c:	55                   	push   ebp
c001fb2d:	6a 00                	push   0x0
c001fb2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb36:	50                   	push   eax
c001fb37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fb3b:	e8 e8 ee ff ff       	call   c001ea28 <IDE::enableIRQs(unsigned char, bool)>
c001fb40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb43:	e8 a6 fe ff ff       	call   c001f9ee <ATA::readyForCommand()>
c001fb48:	83 c4 10             	add    esp,0x10
c001fb4b:	84 c0                	test   al,al
c001fb4d:	75 0a                	jne    c001fb59 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001fb4f:	be 01 00 00 00       	mov    esi,0x1
c001fb54:	e9 df 02 00 00       	jmp    c001fe38 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fb59:	fa                   	cli    
c001fb5a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001fb60:	f7 c7 03 00 00 00    	test   edi,0x3
c001fb66:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fb6c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fb72:	75 0a                	jne    c001fb7e <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001fb74:	c1 e0 04             	shl    eax,0x4
c001fb77:	09 c6                	or     esi,eax
c001fb79:	83 ce a0             	or     esi,0xffffffa0
c001fb7c:	eb 08                	jmp    c001fb86 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001fb7e:	c1 e0 04             	shl    eax,0x4
c001fb81:	09 c6                	or     esi,eax
c001fb83:	83 ce e0             	or     esi,0xffffffe0
c001fb86:	89 f0                	mov    eax,esi
c001fb88:	0f b6 d2             	movzx  edx,dl
c001fb8b:	0f b6 f0             	movzx  esi,al
c001fb8e:	56                   	push   esi
c001fb8f:	6a 06                	push   0x6
c001fb91:	52                   	push   edx
c001fb92:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb98:	e8 7b ec ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb9d:	83 c4 10             	add    esp,0x10
c001fba0:	6a 00                	push   0x0
c001fba2:	6a 01                	push   0x1
c001fba4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbab:	50                   	push   eax
c001fbac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbb2:	e8 61 ec ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbb7:	89 f8                	mov    eax,edi
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	0f b6 f0             	movzx  esi,al
c001fbbf:	83 fe 02             	cmp    esi,0x2
c001fbc2:	75 6e                	jne    c001fc32 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fbc4:	6a 00                	push   0x0
c001fbc6:	6a 08                	push   0x8
c001fbc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbcf:	50                   	push   eax
c001fbd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbd6:	e8 3d ec ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbdb:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fbe0:	50                   	push   eax
c001fbe1:	6a 09                	push   0x9
c001fbe3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbea:	50                   	push   eax
c001fbeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbf1:	e8 22 ec ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbf6:	83 c4 20             	add    esp,0x20
c001fbf9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fbfe:	50                   	push   eax
c001fbff:	6a 0a                	push   0xa
c001fc01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc08:	50                   	push   eax
c001fc09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc0f:	e8 04 ec ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc14:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fc19:	50                   	push   eax
c001fc1a:	6a 0b                	push   0xb
c001fc1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc23:	50                   	push   eax
c001fc24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc2a:	e8 e9 eb ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc2f:	83 c4 20             	add    esp,0x20
c001fc32:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fc37:	50                   	push   eax
c001fc38:	6a 02                	push   0x2
c001fc3a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc41:	50                   	push   eax
c001fc42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc48:	e8 cb eb ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc4d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fc52:	50                   	push   eax
c001fc53:	6a 03                	push   0x3
c001fc55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc5c:	50                   	push   eax
c001fc5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc63:	e8 b0 eb ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc68:	83 c4 20             	add    esp,0x20
c001fc6b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fc70:	50                   	push   eax
c001fc71:	6a 04                	push   0x4
c001fc73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc7a:	50                   	push   eax
c001fc7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc81:	e8 92 eb ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc86:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fc8b:	50                   	push   eax
c001fc8c:	6a 05                	push   0x5
c001fc8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc95:	50                   	push   eax
c001fc96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc9c:	e8 77 eb ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fca1:	83 c4 20             	add    esp,0x20
c001fca4:	83 fe 02             	cmp    esi,0x2
c001fca7:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001fcac:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001fcb1:	85 c9                	test   ecx,ecx
c001fcb3:	74 07                	je     c001fcbc <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fcb5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fcba:	75 45                	jne    c001fd01 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001fcbc:	89 f8                	mov    eax,edi
c001fcbe:	0f b6 f8             	movzx  edi,al
c001fcc1:	31 c0                	xor    eax,eax
c001fcc3:	4f                   	dec    edi
c001fcc4:	0f 94 c0             	sete   al
c001fcc7:	89 c6                	mov    esi,eax
c001fcc9:	75 0c                	jne    c001fcd7 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001fccb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fcd0:	b8 30 00 00 00       	mov    eax,0x30
c001fcd5:	75 2f                	jne    c001fd06 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fcd7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fcdb:	83 f2 01             	xor    edx,0x1
c001fcde:	85 c9                	test   ecx,ecx
c001fce0:	74 09                	je     c001fceb <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001fce2:	84 d2                	test   dl,dl
c001fce4:	b8 24 00 00 00       	mov    eax,0x24
c001fce9:	75 1b                	jne    c001fd06 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fceb:	85 f6                	test   esi,esi
c001fced:	0f 84 5c fe ff ff    	je     c001fb4f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001fcf3:	84 d2                	test   dl,dl
c001fcf5:	b8 20 00 00 00       	mov    eax,0x20
c001fcfa:	75 0a                	jne    c001fd06 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fcfc:	e9 4e fe ff ff       	jmp    c001fb4f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001fd01:	b8 34 00 00 00       	mov    eax,0x34
c001fd06:	50                   	push   eax
c001fd07:	6a 07                	push   0x7
c001fd09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd10:	50                   	push   eax
c001fd11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd17:	e8 fc ea ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd1c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001fd2d:	75 01                	jne    c001fd30 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001fd2f:	fb                   	sti    
c001fd30:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fd34:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001fd39:	85 f6                	test   esi,esi
c001fd3b:	0f 84 dd 00 00 00    	je     c001fe1e <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fd41:	57                   	push   edi
c001fd42:	6a 01                	push   0x1
c001fd44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd4b:	50                   	push   eax
c001fd4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd52:	e8 61 f8 ff ff       	call   c001f5b8 <IDE::polling(unsigned char, unsigned int)>
c001fd57:	83 c4 10             	add    esp,0x10
c001fd5a:	0f b6 c0             	movzx  eax,al
c001fd5d:	85 c0                	test   eax,eax
c001fd5f:	74 23                	je     c001fd84 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001fd61:	50                   	push   eax
c001fd62:	89 c6                	mov    esi,eax
c001fd64:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fd6b:	50                   	push   eax
c001fd6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd73:	50                   	push   eax
c001fd74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd7a:	e8 7f f7 ff ff       	call   c001f4fe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fd7f:	e9 b1 00 00 00       	jmp    c001fe35 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001fd84:	85 ed                	test   ebp,ebp
c001fd86:	74 49                	je     c001fdd1 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001fd88:	fa                   	cli    
c001fd89:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001fd8f:	31 ff                	xor    edi,edi
c001fd91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fd95:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001fd99:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001fd9e:	51                   	push   ecx
c001fd9f:	51                   	push   ecx
c001fda0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fda7:	50                   	push   eax
c001fda8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdae:	e8 53 ea ff ff       	call   c001e806 <IDE::getBase(unsigned char)>
c001fdb3:	89 c2                	mov    edx,eax
c001fdb5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001fdba:	66 ef                	out    dx,ax
c001fdbc:	47                   	inc    edi
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	81 ff 00 01 00 00    	cmp    edi,0x100
c001fdc6:	75 c9                	jne    c001fd91 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001fdc8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001fdcf:	eb 35                	jmp    c001fe06 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001fdd1:	fa                   	cli    
c001fdd2:	52                   	push   edx
c001fdd3:	52                   	push   edx
c001fdd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fddb:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001fde1:	50                   	push   eax
c001fde2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fde8:	e8 19 ea ff ff       	call   c001e806 <IDE::getBase(unsigned char)>
c001fded:	b9 00 01 00 00       	mov    ecx,0x100
c001fdf2:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fdf6:	89 c2                	mov    edx,eax
c001fdf8:	fc                   	cld    
c001fdf9:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fdfc:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001fe0d:	75 01                	jne    c001fe10 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001fe0f:	fb                   	sti    
c001fe10:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fe18:	4e                   	dec    esi
c001fe19:	e9 1b ff ff ff       	jmp    c001fd39 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001fe1e:	31 f6                	xor    esi,esi
c001fe20:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe25:	74 11                	je     c001fe38 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fe27:	50                   	push   eax
c001fe28:	50                   	push   eax
c001fe29:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001fe2e:	50                   	push   eax
c001fe2f:	53                   	push   ebx
c001fe30:	e8 6b fb ff ff       	call   c001f9a0 <ATA::flush(bool)>
c001fe35:	83 c4 10             	add    esp,0x10
c001fe38:	83 c4 2c             	add    esp,0x2c
c001fe3b:	89 f0                	mov    eax,esi
c001fe3d:	5b                   	pop    ebx
c001fe3e:	5e                   	pop    esi
c001fe3f:	5f                   	pop    edi
c001fe40:	5d                   	pop    ebp
c001fe41:	c3                   	ret    

c001fe42 <ATA::read(unsigned long long, int, void*)>:
c001fe42:	57                   	push   edi
c001fe43:	b8 04 00 00 00       	mov    eax,0x4
c001fe48:	56                   	push   esi
c001fe49:	53                   	push   ebx
c001fe4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fe52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fe56:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fe5a:	8d 7a ff             	lea    edi,[edx-0x1]
c001fe5d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fe63:	77 25                	ja     c001fe8a <ATA::read(unsigned long long, int, void*)+0x48>
c001fe65:	85 f6                	test   esi,esi
c001fe67:	b8 06 00 00 00       	mov    eax,0x6
c001fe6c:	74 1c                	je     c001fe8a <ATA::read(unsigned long long, int, void*)+0x48>
c001fe6e:	50                   	push   eax
c001fe6f:	50                   	push   eax
c001fe70:	6a 00                	push   0x0
c001fe72:	56                   	push   esi
c001fe73:	52                   	push   edx
c001fe74:	53                   	push   ebx
c001fe75:	51                   	push   ecx
c001fe76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fe7a:	e8 bb fb ff ff       	call   c001fa3a <ATA::access(unsigned long long, int, void*, bool)>
c001fe7f:	83 c4 20             	add    esp,0x20
c001fe82:	85 c0                	test   eax,eax
c001fe84:	0f 95 c0             	setne  al
c001fe87:	0f b6 c0             	movzx  eax,al
c001fe8a:	5b                   	pop    ebx
c001fe8b:	5e                   	pop    esi
c001fe8c:	5f                   	pop    edi
c001fe8d:	c3                   	ret    

c001fe8e <ATA::write(unsigned long long, int, void*)>:
c001fe8e:	57                   	push   edi
c001fe8f:	b8 04 00 00 00       	mov    eax,0x4
c001fe94:	56                   	push   esi
c001fe95:	53                   	push   ebx
c001fe96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe9a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fe9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fea2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fea6:	8d 7a ff             	lea    edi,[edx-0x1]
c001fea9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001feaf:	77 25                	ja     c001fed6 <ATA::write(unsigned long long, int, void*)+0x48>
c001feb1:	85 f6                	test   esi,esi
c001feb3:	b8 06 00 00 00       	mov    eax,0x6
c001feb8:	74 1c                	je     c001fed6 <ATA::write(unsigned long long, int, void*)+0x48>
c001feba:	50                   	push   eax
c001febb:	50                   	push   eax
c001febc:	6a 01                	push   0x1
c001febe:	56                   	push   esi
c001febf:	52                   	push   edx
c001fec0:	53                   	push   ebx
c001fec1:	51                   	push   ecx
c001fec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fec6:	e8 6f fb ff ff       	call   c001fa3a <ATA::access(unsigned long long, int, void*, bool)>
c001fecb:	83 c4 20             	add    esp,0x20
c001fece:	85 c0                	test   eax,eax
c001fed0:	0f 95 c0             	setne  al
c001fed3:	0f b6 c0             	movzx  eax,al
c001fed6:	5b                   	pop    ebx
c001fed7:	5e                   	pop    esi
c001fed8:	5f                   	pop    edi
c001fed9:	c3                   	ret    

c001feda <ATA::detectCHS()>:
c001feda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fede:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fee4:	c1 e0 06             	shl    eax,0x6
c001fee7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001feed:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fef7:	c7 44 24 04 40 5f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025f40
c001feff:	e9 fe fe fe ff       	jmp    c000fe02 <KePanic(char const*)>

c001ff04 <ATA::open(int, int, void*)>:
c001ff04:	53                   	push   ebx
c001ff05:	83 ec 08             	sub    esp,0x8
c001ff08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ff10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff14:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ff1a:	c1 e0 06             	shl    eax,0x6
c001ff1d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ff23:	01 d0                	add    eax,edx
c001ff25:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ff2c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ff32:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ff39:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ff43:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ff4a:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ff50:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ff57:	75 0c                	jne    c001ff65 <ATA::open(int, int, void*)+0x61>
c001ff59:	83 ec 0c             	sub    esp,0xc
c001ff5c:	53                   	push   ebx
c001ff5d:	e8 78 ff ff ff       	call   c001feda <ATA::detectCHS()>
c001ff62:	83 c4 10             	add    esp,0x10
c001ff65:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ff6b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ff71:	c1 e0 06             	shl    eax,0x6
c001ff74:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ff7b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ff85:	d1 e8                	shr    eax,1
c001ff87:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ff8d:	6a 04                	push   0x4
c001ff8f:	6a 0c                	push   0xc
c001ff91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff98:	50                   	push   eax
c001ff99:	52                   	push   edx
c001ff9a:	e8 79 e8 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff9f:	90                   	nop
c001ffa0:	90                   	nop
c001ffa1:	6a 00                	push   0x0
c001ffa3:	6a 0c                	push   0xc
c001ffa5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffac:	50                   	push   eax
c001ffad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffb3:	e8 60 e8 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffb8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ffbe:	83 c4 20             	add    esp,0x20
c001ffc1:	c1 e0 06             	shl    eax,0x6
c001ffc4:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001ffca:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001ffd1:	0f 84 00 01 00 00    	je     c00200d7 <ATA::open(int, int, void*)+0x1d3>
c001ffd7:	83 ec 0c             	sub    esp,0xc
c001ffda:	6a 08                	push   0x8
c001ffdc:	e8 f9 00 ff ff       	call   c00100da <Phys::allocateContiguousPages(int)>
c001ffe1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ffe7:	c7 04 24 52 5f 02 c0 	mov    DWORD PTR [esp],0xc0025f52
c001ffee:	e8 73 6f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001fff3:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001fffa:	e8 f8 33 ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c001ffff:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020005:	6a 03                	push   0x3
c0020007:	50                   	push   eax
c0020008:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002000e:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0020014:	e8 b7 3a ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020019:	83 c4 20             	add    esp,0x20
c002001c:	e8 db ff fe ff       	call   c000fffc <Phys::allocatePage()>
c0020021:	83 ec 0c             	sub    esp,0xc
c0020024:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c002002a:	6a 01                	push   0x1
c002002c:	e8 c6 33 ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c0020031:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c0020037:	6a 03                	push   0x3
c0020039:	50                   	push   eax
c002003a:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0020040:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0020046:	e8 85 3a ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c002004b:	83 c4 14             	add    esp,0x14
c002004e:	68 8b 5f 02 c0       	push   0xc0025f8b
c0020053:	e8 0e 6f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020058:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c002005f:	50                   	push   eax
c0020060:	6a 12                	push   0x12
c0020062:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020069:	50                   	push   eax
c002006a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020070:	e8 a3 e7 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020075:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c002007b:	83 c4 20             	add    esp,0x20
c002007e:	0f b6 c4             	movzx  eax,ah
c0020081:	50                   	push   eax
c0020082:	6a 13                	push   0x13
c0020084:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002008b:	50                   	push   eax
c002008c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020092:	e8 81 e7 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020097:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c002009e:	50                   	push   eax
c002009f:	6a 14                	push   0x14
c00200a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200a8:	50                   	push   eax
c00200a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200af:	e8 64 e7 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200b4:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c00200bb:	83 c4 20             	add    esp,0x20
c00200be:	50                   	push   eax
c00200bf:	6a 15                	push   0x15
c00200c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200c8:	50                   	push   eax
c00200c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200cf:	e8 44 e7 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200d4:	83 c4 10             	add    esp,0x10
c00200d7:	83 ec 0c             	sub    esp,0xc
c00200da:	53                   	push   ebx
c00200db:	e8 62 9d fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c00200e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200e3:	e8 fa ab fe ff       	call   c000ace2 <createPartitionsForDisk(PhysicalDisk*)>
c00200e8:	83 c4 18             	add    esp,0x18
c00200eb:	31 c0                	xor    eax,eax
c00200ed:	5b                   	pop    ebx
c00200ee:	c3                   	ret    

c00200ef <combineCharAndColour(char, unsigned char)>:
c00200ef:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00200f4:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c00200fa:	c1 e0 08             	shl    eax,0x8
c00200fd:	09 d0                	or     eax,edx
c00200ff:	c3                   	ret    

c0020100 <combineColours(unsigned char, unsigned char)>:
c0020100:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020105:	c1 e0 04             	shl    eax,0x4
c0020108:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002010c:	c3                   	ret    
c002010d:	90                   	nop

c002010e <ATAPI::write(unsigned long long, int, void*)>:
c002010e:	b8 03 00 00 00       	mov    eax,0x3
c0020113:	c3                   	ret    

c0020114 <ATAPI::close(int, int, void*)>:
c0020114:	83 ec 0c             	sub    esp,0xc
c0020117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020121:	85 c0                	test   eax,eax
c0020123:	74 0c                	je     c0020131 <ATAPI::close(int, int, void*)+0x1d>
c0020125:	8b 10                	mov    edx,DWORD PTR [eax]
c0020127:	83 ec 0c             	sub    esp,0xc
c002012a:	50                   	push   eax
c002012b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002012e:	83 c4 10             	add    esp,0x10
c0020131:	31 c0                	xor    eax,eax
c0020133:	83 c4 0c             	add    esp,0xc
c0020136:	c3                   	ret    
c0020137:	90                   	nop

c0020138 <ATAPI::ATAPI()>:
c0020138:	83 ec 0c             	sub    esp,0xc
c002013b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013f:	83 ec 04             	sub    esp,0x4
c0020142:	68 00 08 00 00       	push   0x800
c0020147:	68 3d 61 02 c0       	push   0xc002613d
c002014c:	50                   	push   eax
c002014d:	e8 88 9c fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020152:	83 c4 10             	add    esp,0x10
c0020155:	ba 4c 60 02 c0       	mov    edx,0xc002604c
c002015a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002015e:	89 10                	mov    DWORD PTR [eax],edx
c0020160:	90                   	nop
c0020161:	83 c4 0c             	add    esp,0xc
c0020164:	c3                   	ret    
c0020165:	90                   	nop

c0020166 <ATAPI::readyForCommand()>:
c0020166:	56                   	push   esi
c0020167:	53                   	push   ebx
c0020168:	31 db                	xor    ebx,ebx
c002016a:	50                   	push   eax
c002016b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002016f:	50                   	push   eax
c0020170:	6a 0c                	push   0xc
c0020172:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020179:	50                   	push   eax
c002017a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020180:	e8 53 e7 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c0020185:	83 c4 10             	add    esp,0x10
c0020188:	a8 88                	test   al,0x88
c002018a:	74 26                	je     c00201b2 <ATAPI::readyForCommand()+0x4c>
c002018c:	43                   	inc    ebx
c002018d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0020193:	7e da                	jle    c002016f <ATAPI::readyForCommand()+0x9>
c0020195:	51                   	push   ecx
c0020196:	51                   	push   ecx
c0020197:	6a 00                	push   0x0
c0020199:	68 5e 01 00 00       	push   0x15e
c002019e:	e8 91 6f ff ff       	call   c0017134 <milliTenthSleep(unsigned long long)>
c00201a3:	83 c4 10             	add    esp,0x10
c00201a6:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00201ac:	75 c1                	jne    c002016f <ATAPI::readyForCommand()+0x9>
c00201ae:	31 c0                	xor    eax,eax
c00201b0:	eb 02                	jmp    c00201b4 <ATAPI::readyForCommand()+0x4e>
c00201b2:	b0 01                	mov    al,0x1
c00201b4:	5a                   	pop    edx
c00201b5:	5b                   	pop    ebx
c00201b6:	5e                   	pop    esi
c00201b7:	c3                   	ret    

c00201b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00201b8:	55                   	push   ebp
c00201b9:	57                   	push   edi
c00201ba:	56                   	push   esi
c00201bb:	53                   	push   ebx
c00201bc:	83 ec 20             	sub    esp,0x20
c00201bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00201c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00201c7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00201cb:	6a 01                	push   0x1
c00201cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201d4:	50                   	push   eax
c00201d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201db:	e8 48 e8 ff ff       	call   c001ea28 <IDE::enableIRQs(unsigned char, bool)>
c00201e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201e7:	59                   	pop    ecx
c00201e8:	5e                   	pop    esi
c00201e9:	50                   	push   eax
c00201ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201f0:	e8 fd e5 ff ff       	call   c001e7f2 <IDE::prepareInterrupt(unsigned char)>
c00201f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00201f8:	e8 69 ff ff ff       	call   c0020166 <ATAPI::readyForCommand()>
c00201fd:	83 c4 10             	add    esp,0x10
c0020200:	84 c0                	test   al,al
c0020202:	75 0a                	jne    c002020e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c0020204:	bb 01 00 00 00       	mov    ebx,0x1
c0020209:	e9 5f 02 00 00       	jmp    c002046d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002020e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020214:	c1 e0 04             	shl    eax,0x4
c0020217:	0f b6 c0             	movzx  eax,al
c002021a:	50                   	push   eax
c002021b:	6a 06                	push   0x6
c002021d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020224:	50                   	push   eax
c0020225:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002022b:	e8 e8 e5 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020230:	6a 00                	push   0x0
c0020232:	6a 01                	push   0x1
c0020234:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002023b:	50                   	push   eax
c002023c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020242:	e8 d1 e5 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020247:	83 c4 20             	add    esp,0x20
c002024a:	0f b6 c3             	movzx  eax,bl
c002024d:	50                   	push   eax
c002024e:	0f b6 df             	movzx  ebx,bh
c0020251:	6a 04                	push   0x4
c0020253:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002025a:	50                   	push   eax
c002025b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020261:	e8 b2 e5 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020266:	53                   	push   ebx
c0020267:	6a 05                	push   0x5
c0020269:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020270:	50                   	push   eax
c0020271:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020277:	e8 9c e5 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002027c:	83 c4 20             	add    esp,0x20
c002027f:	68 a0 00 00 00       	push   0xa0
c0020284:	6a 07                	push   0x7
c0020286:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002028d:	50                   	push   eax
c002028e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020294:	e8 7f e5 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020299:	83 c4 0c             	add    esp,0xc
c002029c:	6a 01                	push   0x1
c002029e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202a5:	50                   	push   eax
c00202a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202ac:	e8 07 f3 ff ff       	call   c001f5b8 <IDE::polling(unsigned char, unsigned int)>
c00202b1:	83 c4 10             	add    esp,0x10
c00202b4:	0f b6 d8             	movzx  ebx,al
c00202b7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c00202bd:	85 db                	test   ebx,ebx
c00202bf:	74 20                	je     c00202e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c00202c1:	53                   	push   ebx
c00202c2:	0f b6 c0             	movzx  eax,al
c00202c5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c00202cc:	52                   	push   edx
c00202cd:	50                   	push   eax
c00202ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202d4:	e8 25 f2 ff ff       	call   c001f4fe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00202d9:	83 c4 10             	add    esp,0x10
c00202dc:	e9 8c 01 00 00       	jmp    c002046d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00202e1:	52                   	push   edx
c00202e2:	0f b6 c0             	movzx  eax,al
c00202e5:	52                   	push   edx
c00202e6:	50                   	push   eax
c00202e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202ed:	e8 14 e5 ff ff       	call   c001e806 <IDE::getBase(unsigned char)>
c00202f2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00202f6:	b9 06 00 00 00       	mov    ecx,0x6
c00202fb:	89 c2                	mov    edx,eax
c00202fd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020300:	89 e8                	mov    eax,ebp
c0020302:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020306:	83 c4 10             	add    esp,0x10
c0020309:	0f b6 c0             	movzx  eax,al
c002030c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020310:	85 db                	test   ebx,ebx
c0020312:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020318:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002031f:	0f 84 eb 00 00 00    	je     c0020410 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020325:	55                   	push   ebp
c0020326:	55                   	push   ebp
c0020327:	52                   	push   edx
c0020328:	50                   	push   eax
c0020329:	e8 5e e6 ff ff       	call   c001e98c <IDE::waitInterrupt(unsigned char)>
c002032e:	83 c4 10             	add    esp,0x10
c0020331:	84 c0                	test   al,al
c0020333:	0f 84 cb fe ff ff    	je     c0020204 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020339:	56                   	push   esi
c002033a:	56                   	push   esi
c002033b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020342:	50                   	push   eax
c0020343:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020349:	e8 a4 e4 ff ff       	call   c001e7f2 <IDE::prepareInterrupt(unsigned char)>
c002034e:	83 c4 0c             	add    esp,0xc
c0020351:	6a 04                	push   0x4
c0020353:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002035a:	50                   	push   eax
c002035b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020361:	e8 72 e5 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c0020366:	83 c4 0c             	add    esp,0xc
c0020369:	6a 05                	push   0x5
c002036b:	89 c6                	mov    esi,eax
c002036d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020374:	50                   	push   eax
c0020375:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002037b:	e8 58 e5 ff ff       	call   c001e8d8 <IDE::read(unsigned char, unsigned char)>
c0020380:	83 c4 10             	add    esp,0x10
c0020383:	0f b6 e8             	movzx  ebp,al
c0020386:	89 f0                	mov    eax,esi
c0020388:	c1 e5 08             	shl    ebp,0x8
c002038b:	0f b6 f0             	movzx  esi,al
c002038e:	09 f5                	or     ebp,esi
c0020390:	31 f6                	xor    esi,esi
c0020392:	d1 fd                	sar    ebp,1
c0020394:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020399:	74 5c                	je     c00203f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002039b:	39 ee                	cmp    esi,ebp
c002039d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00203a3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00203aa:	75 0d                	jne    c00203b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c00203ac:	8d 0c 36             	lea    ecx,[esi+esi*1]
c00203af:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c00203b3:	4b                   	dec    ebx
c00203b4:	e9 57 ff ff ff       	jmp    c0020310 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c00203b9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00203bd:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c00203c1:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c00203c6:	51                   	push   ecx
c00203c7:	51                   	push   ecx
c00203c8:	52                   	push   edx
c00203c9:	50                   	push   eax
c00203ca:	e8 37 e4 ff ff       	call   c001e806 <IDE::getBase(unsigned char)>
c00203cf:	89 c2                	mov    edx,eax
c00203d1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00203d6:	66 ef                	out    dx,ax
c00203d8:	46                   	inc    esi
c00203d9:	83 c4 10             	add    esp,0x10
c00203dc:	eb bd                	jmp    c002039b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c00203de:	51                   	push   ecx
c00203df:	51                   	push   ecx
c00203e0:	52                   	push   edx
c00203e1:	50                   	push   eax
c00203e2:	e8 1f e4 ff ff       	call   c001e806 <IDE::getBase(unsigned char)>
c00203e7:	89 c2                	mov    edx,eax
c00203e9:	66 ed                	in     ax,dx
c00203eb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00203ef:	83 c4 10             	add    esp,0x10
c00203f2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c00203f6:	46                   	inc    esi
c00203f7:	39 ee                	cmp    esi,ebp
c00203f9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00203ff:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020406:	75 d6                	jne    c00203de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c0020408:	01 f6                	add    esi,esi
c002040a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002040e:	eb a3                	jmp    c00203b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c0020410:	51                   	push   ecx
c0020411:	51                   	push   ecx
c0020412:	52                   	push   edx
c0020413:	50                   	push   eax
c0020414:	e8 73 e5 ff ff       	call   c001e98c <IDE::waitInterrupt(unsigned char)>
c0020419:	83 c4 10             	add    esp,0x10
c002041c:	84 c0                	test   al,al
c002041e:	0f 84 e0 fd ff ff    	je     c0020204 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020424:	52                   	push   edx
c0020425:	bb a0 86 01 00       	mov    ebx,0x186a0
c002042a:	52                   	push   edx
c002042b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020432:	50                   	push   eax
c0020433:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020439:	e8 b4 e3 ff ff       	call   c001e7f2 <IDE::prepareInterrupt(unsigned char)>
c002043e:	83 c4 10             	add    esp,0x10
c0020441:	50                   	push   eax
c0020442:	50                   	push   eax
c0020443:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002044a:	50                   	push   eax
c002044b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020451:	e8 b0 e3 ff ff       	call   c001e806 <IDE::getBase(unsigned char)>
c0020456:	8d 50 07             	lea    edx,[eax+0x7]
c0020459:	ec                   	in     al,dx
c002045a:	83 c4 10             	add    esp,0x10
c002045d:	a8 88                	test   al,0x88
c002045f:	74 0a                	je     c002046b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020461:	4b                   	dec    ebx
c0020462:	75 dd                	jne    c0020441 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020464:	bb 02 00 00 00       	mov    ebx,0x2
c0020469:	eb 02                	jmp    c002046d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002046b:	31 db                	xor    ebx,ebx
c002046d:	83 c4 1c             	add    esp,0x1c
c0020470:	89 d8                	mov    eax,ebx
c0020472:	5b                   	pop    ebx
c0020473:	5e                   	pop    esi
c0020474:	5f                   	pop    edi
c0020475:	5d                   	pop    ebp
c0020476:	c3                   	ret    
c0020477:	90                   	nop

c0020478 <ATAPI::diskRemoved()>:
c0020478:	53                   	push   ebx
c0020479:	83 ec 14             	sub    esp,0x14
c002047c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020480:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020487:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002048d:	e8 40 a5 fe ff       	call   c000a9d2 <LogicalDisk::unmount()>
c0020492:	58                   	pop    eax
c0020493:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020499:	e8 12 af fe ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c002049e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00204a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00204a8:	83 c4 18             	add    esp,0x18
c00204ab:	5b                   	pop    ebx
c00204ac:	e9 ef ae fe ff       	jmp    c000b3a0 <VCache::invalidateReadBuffer()>
c00204b1:	90                   	nop

c00204b2 <ATAPI::eject()>:
c00204b2:	57                   	push   edi
c00204b3:	b9 03 00 00 00       	mov    ecx,0x3
c00204b8:	53                   	push   ebx
c00204b9:	83 ec 14             	sub    esp,0x14
c00204bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00204c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00204c4:	fc                   	cld    
c00204c5:	31 c0                	xor    eax,eax
c00204c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00204c9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00204ce:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00204d3:	50                   	push   eax
c00204d4:	50                   	push   eax
c00204d5:	6a 00                	push   0x0
c00204d7:	6a 00                	push   0x0
c00204d9:	6a 00                	push   0x0
c00204db:	6a 02                	push   0x2
c00204dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204e1:	50                   	push   eax
c00204e2:	53                   	push   ebx
c00204e3:	e8 d0 fc ff ff       	call   c00201b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00204e8:	83 c4 14             	add    esp,0x14
c00204eb:	53                   	push   ebx
c00204ec:	e8 87 ff ff ff       	call   c0020478 <ATAPI::diskRemoved()>
c00204f1:	83 c4 24             	add    esp,0x24
c00204f4:	31 c0                	xor    eax,eax
c00204f6:	5b                   	pop    ebx
c00204f7:	5f                   	pop    edi
c00204f8:	c3                   	ret    
c00204f9:	90                   	nop

c00204fa <ATAPI::diskInserted()>:
c00204fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204fe:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020505:	c3                   	ret    

c0020506 <ATAPI::detectMedia()>:
c0020506:	56                   	push   esi
c0020507:	53                   	push   ebx
c0020508:	83 ec 28             	sub    esp,0x28
c002050b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002050f:	6a 0c                	push   0xc
c0020511:	6a 00                	push   0x0
c0020513:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020517:	56                   	push   esi
c0020518:	e8 d3 ff fd ff       	call   c00004f0 <memset>
c002051d:	58                   	pop    eax
c002051e:	5a                   	pop    edx
c002051f:	6a 00                	push   0x0
c0020521:	6a 00                	push   0x0
c0020523:	6a 00                	push   0x0
c0020525:	6a 00                	push   0x0
c0020527:	56                   	push   esi
c0020528:	53                   	push   ebx
c0020529:	e8 8a fc ff ff       	call   c00201b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002052e:	83 c4 1c             	add    esp,0x1c
c0020531:	6a 0c                	push   0xc
c0020533:	6a 00                	push   0x0
c0020535:	56                   	push   esi
c0020536:	e8 b5 ff fd ff       	call   c00004f0 <memset>
c002053b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020540:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020545:	59                   	pop    ecx
c0020546:	58                   	pop    eax
c0020547:	6a 01                	push   0x1
c0020549:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002054d:	50                   	push   eax
c002054e:	6a 00                	push   0x0
c0020550:	6a 12                	push   0x12
c0020552:	56                   	push   esi
c0020553:	53                   	push   ebx
c0020554:	e8 5f fc ff ff       	call   c00201b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020559:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002055d:	83 c4 20             	add    esp,0x20
c0020560:	83 e0 7f             	and    eax,0x7f
c0020563:	83 f8 70             	cmp    eax,0x70
c0020566:	74 15                	je     c002057d <ATAPI::detectMedia()+0x77>
c0020568:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002056f:	75 0c                	jne    c002057d <ATAPI::detectMedia()+0x77>
c0020571:	83 ec 0c             	sub    esp,0xc
c0020574:	53                   	push   ebx
c0020575:	e8 80 ff ff ff       	call   c00204fa <ATAPI::diskInserted()>
c002057a:	83 c4 10             	add    esp,0x10
c002057d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020581:	83 e0 0f             	and    eax,0xf
c0020584:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020589:	0f b6 c0             	movzx  eax,al
c002058c:	75 19                	jne    c00205a7 <ATAPI::detectMedia()+0xa1>
c002058e:	83 f8 02             	cmp    eax,0x2
c0020591:	75 14                	jne    c00205a7 <ATAPI::detectMedia()+0xa1>
c0020593:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002059a:	74 24                	je     c00205c0 <ATAPI::detectMedia()+0xba>
c002059c:	83 ec 0c             	sub    esp,0xc
c002059f:	53                   	push   ebx
c00205a0:	e8 d3 fe ff ff       	call   c0020478 <ATAPI::diskRemoved()>
c00205a5:	eb 16                	jmp    c00205bd <ATAPI::detectMedia()+0xb7>
c00205a7:	85 c0                	test   eax,eax
c00205a9:	75 15                	jne    c00205c0 <ATAPI::detectMedia()+0xba>
c00205ab:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205b2:	75 0c                	jne    c00205c0 <ATAPI::detectMedia()+0xba>
c00205b4:	83 ec 0c             	sub    esp,0xc
c00205b7:	53                   	push   ebx
c00205b8:	e8 3d ff ff ff       	call   c00204fa <ATAPI::diskInserted()>
c00205bd:	83 c4 10             	add    esp,0x10
c00205c0:	83 c4 24             	add    esp,0x24
c00205c3:	5b                   	pop    ebx
c00205c4:	5e                   	pop    esi
c00205c5:	c3                   	ret    

c00205c6 <ATAPI::open(int, int, void*)>:
c00205c6:	56                   	push   esi
c00205c7:	53                   	push   ebx
c00205c8:	50                   	push   eax
c00205c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00205cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00205d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00205d5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00205db:	c1 e0 06             	shl    eax,0x6
c00205de:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00205e4:	01 d0                	add    eax,edx
c00205e6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00205ed:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00205f3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00205fa:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020604:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002060b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020611:	6a 04                	push   0x4
c0020613:	6a 0c                	push   0xc
c0020615:	51                   	push   ecx
c0020616:	52                   	push   edx
c0020617:	e8 fc e1 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002061c:	90                   	nop
c002061d:	90                   	nop
c002061e:	6a 00                	push   0x0
c0020620:	6a 0c                	push   0xc
c0020622:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020629:	50                   	push   eax
c002062a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020630:	e8 e3 e1 ff ff       	call   c001e818 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020635:	83 c4 14             	add    esp,0x14
c0020638:	68 78 01 00 00       	push   0x178
c002063d:	e8 6a f3 fe ff       	call   c000f9ac <malloc>
c0020642:	83 c4 0c             	add    esp,0xc
c0020645:	6a 00                	push   0x0
c0020647:	68 ff ff ff 7f       	push   0x7fffffff
c002064c:	6a 00                	push   0x0
c002064e:	6a 00                	push   0x0
c0020650:	53                   	push   ebx
c0020651:	68 ef 61 02 c0       	push   0xc00261ef
c0020656:	89 c6                	mov    esi,eax
c0020658:	50                   	push   eax
c0020659:	e8 b2 a1 fe ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002065e:	83 c4 14             	add    esp,0x14
c0020661:	56                   	push   esi
c0020662:	e8 69 a2 fe ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c0020667:	5a                   	pop    edx
c0020668:	59                   	pop    ecx
c0020669:	0f be c0             	movsx  eax,al
c002066c:	50                   	push   eax
c002066d:	68 34 60 02 c0       	push   0xc0026034
c0020672:	e8 ef 68 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020677:	58                   	pop    eax
c0020678:	5a                   	pop    edx
c0020679:	56                   	push   esi
c002067a:	53                   	push   ebx
c002067b:	e8 76 93 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c0020680:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020686:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020689:	e8 b4 97 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c002068e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020695:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020698:	e8 69 fe ff ff       	call   c0020506 <ATAPI::detectMedia()>
c002069d:	83 c4 14             	add    esp,0x14
c00206a0:	31 c0                	xor    eax,eax
c00206a2:	5b                   	pop    ebx
c00206a3:	5e                   	pop    esi
c00206a4:	c3                   	ret    
c00206a5:	90                   	nop

c00206a6 <ATAPI::read(unsigned long long, int, void*)>:
c00206a6:	55                   	push   ebp
c00206a7:	57                   	push   edi
c00206a8:	56                   	push   esi
c00206a9:	53                   	push   ebx
c00206aa:	83 ec 1c             	sub    esp,0x1c
c00206ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00206b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00206b5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00206b9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00206c0:	74 3c                	je     c00206fe <ATAPI::read(unsigned long long, int, void*)+0x58>
c00206c2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00206c6:	b9 03 00 00 00       	mov    ecx,0x3
c00206cb:	fc                   	cld    
c00206cc:	31 c0                	xor    eax,eax
c00206ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206d0:	89 e8                	mov    eax,ebp
c00206d2:	0f ce                	bswap  esi
c00206d4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00206d8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00206dd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c00206e1:	50                   	push   eax
c00206e2:	50                   	push   eax
c00206e3:	55                   	push   ebp
c00206e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00206e8:	c1 e5 0b             	shl    ebp,0xb
c00206eb:	6a 00                	push   0x0
c00206ed:	55                   	push   ebp
c00206ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00206f2:	50                   	push   eax
c00206f3:	53                   	push   ebx
c00206f4:	e8 bf fa ff ff       	call   c00201b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00206f9:	83 c4 20             	add    esp,0x20
c00206fc:	eb 1a                	jmp    c0020718 <ATAPI::read(unsigned long long, int, void*)+0x72>
c00206fe:	83 ec 0c             	sub    esp,0xc
c0020701:	53                   	push   ebx
c0020702:	e8 ff fd ff ff       	call   c0020506 <ATAPI::detectMedia()>
c0020707:	83 c4 10             	add    esp,0x10
c002070a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020711:	75 af                	jne    c00206c2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020713:	b8 02 00 00 00       	mov    eax,0x2
c0020718:	83 c4 1c             	add    esp,0x1c
c002071b:	5b                   	pop    ebx
c002071c:	5e                   	pop    esi
c002071d:	5f                   	pop    edi
c002071e:	5d                   	pop    ebp
c002071f:	c3                   	ret    

c0020720 <SATA::close(int, int, void*)>:
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020727:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002072d:	85 c0                	test   eax,eax
c002072f:	74 0c                	je     c002073d <SATA::close(int, int, void*)+0x1d>
c0020731:	8b 10                	mov    edx,DWORD PTR [eax]
c0020733:	83 ec 0c             	sub    esp,0xc
c0020736:	50                   	push   eax
c0020737:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002073a:	83 c4 10             	add    esp,0x10
c002073d:	31 c0                	xor    eax,eax
c002073f:	83 c4 0c             	add    esp,0xc
c0020742:	c3                   	ret    
c0020743:	90                   	nop

c0020744 <SATA::powerSaving(PowerSavingLevel)>:
c0020744:	c3                   	ret    
c0020745:	90                   	nop

c0020746 <SATA::open(int, int, void*)>:
c0020746:	56                   	push   esi
c0020747:	53                   	push   ebx
c0020748:	83 ec 10             	sub    esp,0x10
c002074b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002074f:	68 7c 60 02 c0       	push   0xc002607c
c0020754:	e8 0d 68 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020759:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002075d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020767:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020771:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020777:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002077b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020785:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002078c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020792:	e8 65 f8 fe ff       	call   c000fffc <Phys::allocatePage()>
c0020797:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002079d:	89 c6                	mov    esi,eax
c002079f:	e8 58 f8 fe ff       	call   c000fffc <Phys::allocatePage()>
c00207a4:	81 c6 00 10 00 00    	add    esi,0x1000
c00207aa:	83 c4 10             	add    esp,0x10
c00207ad:	39 c6                	cmp    esi,eax
c00207af:	74 10                	je     c00207c1 <SATA::open(int, int, void*)+0x7b>
c00207b1:	83 ec 0c             	sub    esp,0xc
c00207b4:	68 88 60 02 c0       	push   0xc0026088
c00207b9:	e8 44 f6 fe ff       	call   c000fe02 <KePanic(char const*)>
c00207be:	83 c4 10             	add    esp,0x10
c00207c1:	83 ec 0c             	sub    esp,0xc
c00207c4:	6a 02                	push   0x2
c00207c6:	e8 2c 2c ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c00207cb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00207d1:	6a 03                	push   0x3
c00207d3:	50                   	push   eax
c00207d4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00207da:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00207e0:	e8 eb 32 ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00207e5:	83 c4 14             	add    esp,0x14
c00207e8:	53                   	push   ebx
c00207e9:	e8 54 96 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c00207ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00207f1:	e8 ec a4 fe ff       	call   c000ace2 <createPartitionsForDisk(PhysicalDisk*)>
c00207f6:	83 c4 14             	add    esp,0x14
c00207f9:	31 c0                	xor    eax,eax
c00207fb:	5b                   	pop    ebx
c00207fc:	5e                   	pop    esi
c00207fd:	c3                   	ret    

c00207fe <SATA::SATA()>:
c00207fe:	83 ec 0c             	sub    esp,0xc
c0020801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020805:	83 ec 04             	sub    esp,0x4
c0020808:	68 00 02 00 00       	push   0x200
c002080d:	68 9c 60 02 c0       	push   0xc002609c
c0020812:	50                   	push   eax
c0020813:	e8 c2 95 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020818:	83 c4 10             	add    esp,0x10
c002081b:	ba 0c 61 02 c0       	mov    edx,0xc002610c
c0020820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020824:	89 10                	mov    DWORD PTR [eax],edx
c0020826:	90                   	nop
c0020827:	83 c4 0c             	add    esp,0xc
c002082a:	c3                   	ret    
c002082b:	90                   	nop

c002082c <SATA::access(unsigned long long, int, void*, bool)>:
c002082c:	55                   	push   ebp
c002082d:	57                   	push   edi
c002082e:	56                   	push   esi
c002082f:	53                   	push   ebx
c0020830:	83 ec 2c             	sub    esp,0x2c
c0020833:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020837:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002083b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002083f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020843:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020847:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002084b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002084f:	fa                   	cli    
c0020850:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0020856:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002085b:	7e 10                	jle    c002086d <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002085d:	83 ec 0c             	sub    esp,0xc
c0020860:	68 ac 60 02 c0       	push   0xc00260ac
c0020865:	e8 98 f5 fe ff       	call   c000fe02 <KePanic(char const*)>
c002086a:	83 c4 10             	add    esp,0x10
c002086d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020873:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020879:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002087f:	89 e8                	mov    eax,ebp
c0020881:	c1 e0 07             	shl    eax,0x7
c0020884:	01 d0                	add    eax,edx
c0020886:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020890:	8d 45 02             	lea    eax,[ebp+0x2]
c0020893:	51                   	push   ecx
c0020894:	c1 e0 07             	shl    eax,0x7
c0020897:	51                   	push   ecx
c0020898:	01 d0                	add    eax,edx
c002089a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002089e:	50                   	push   eax
c002089f:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00208a5:	e8 ee ed ff ff       	call   c001f698 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00208aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00208ae:	83 c4 10             	add    esp,0x10
c00208b1:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c00208b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00208ba:	0f 84 a6 01 00 00    	je     c0020a66 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c00208c0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00208c4:	c1 e0 09             	shl    eax,0x9
c00208c7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00208cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00208d0:	74 0e                	je     c00208e0 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c00208d2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00208d8:	89 c1                	mov    ecx,eax
c00208da:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00208de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00208e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00208e4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00208ea:	8d 45 02             	lea    eax,[ebp+0x2]
c00208ed:	c1 e0 07             	shl    eax,0x7
c00208f0:	01 d0                	add    eax,edx
c00208f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00208f4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00208fa:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020900:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020904:	c1 e1 05             	shl    ecx,0x5
c0020907:	01 c8                	add    eax,ecx
c0020909:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002090d:	83 e1 01             	and    ecx,0x1
c0020910:	89 ce                	mov    esi,ecx
c0020912:	8a 08                	mov    cl,BYTE PTR [eax]
c0020914:	c1 e6 06             	shl    esi,0x6
c0020917:	83 e1 bf             	and    ecx,0xffffffbf
c002091a:	09 f1                	or     ecx,esi
c002091c:	88 08                	mov    BYTE PTR [eax],cl
c002091e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020920:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020926:	81 c9 05 00 01 00    	or     ecx,0x10005
c002092c:	89 08                	mov    DWORD PTR [eax],ecx
c002092e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020934:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002093a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020940:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020943:	50                   	push   eax
c0020944:	68 90 00 00 00       	push   0x90
c0020949:	6a 00                	push   0x0
c002094b:	56                   	push   esi
c002094c:	e8 9f fb fd ff       	call   c00004f0 <memset>
c0020951:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020957:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002095d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020961:	83 c4 10             	add    esp,0x10
c0020964:	48                   	dec    eax
c0020965:	25 ff ff 3f 00       	and    eax,0x3fffff
c002096a:	89 c1                	mov    ecx,eax
c002096c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020972:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020977:	09 c8                	or     eax,ecx
c0020979:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002097f:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020985:	83 c8 80             	or     eax,0xffffff80
c0020988:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002098e:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020991:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020995:	25 00 7f 00 00       	and    eax,0x7f00
c002099a:	0d 27 80 ff ff       	or     eax,0xffff8027
c002099f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00209a4:	66 89 06             	mov    WORD PTR [esi],ax
c00209a7:	b0 35                	mov    al,0x35
c00209a9:	75 02                	jne    c00209ad <SATA::access(unsigned long long, int, void*, bool)+0x181>
c00209ab:	b0 25                	mov    al,0x25
c00209ad:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00209b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209b4:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00209b8:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00209bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209c0:	c1 e8 10             	shr    eax,0x10
c00209c3:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00209c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209ca:	c1 e8 18             	shr    eax,0x18
c00209cd:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00209d0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00209d4:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00209d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209db:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00209de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00209e2:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00209e6:	89 ee                	mov    esi,ebp
c00209e8:	31 c0                	xor    eax,eax
c00209ea:	c1 e6 07             	shl    esi,0x7
c00209ed:	01 d6                	add    esi,edx
c00209ef:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00209f5:	80 e1 88             	and    cl,0x88
c00209f8:	74 0a                	je     c0020a04 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c00209fa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00209ff:	74 0a                	je     c0020a0b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020a01:	40                   	inc    eax
c0020a02:	eb eb                	jmp    c00209ef <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020a04:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020a09:	75 0a                	jne    c0020a15 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020a0b:	83 ec 0c             	sub    esp,0xc
c0020a0e:	68 e5 60 02 c0       	push   0xc00260e5
c0020a13:	eb 34                	jmp    c0020a49 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020a15:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0020a19:	c1 e5 07             	shl    ebp,0x7
c0020a1c:	b8 01 00 00 00       	mov    eax,0x1
c0020a21:	01 ea                	add    edx,ebp
c0020a23:	d3 e0                	shl    eax,cl
c0020a25:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020a2b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020a31:	85 c8                	test   eax,ecx
c0020a33:	74 25                	je     c0020a5a <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0020a35:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020a3b:	0f ba e1 1e          	bt     ecx,0x1e
c0020a3f:	73 ea                	jae    c0020a2b <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0020a41:	83 ec 0c             	sub    esp,0xc
c0020a44:	68 f3 60 02 c0       	push   0xc00260f3
c0020a49:	e8 18 65 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020a4e:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020a55:	83 c4 10             	add    esp,0x10
c0020a58:	eb 13                	jmp    c0020a6d <SATA::access(unsigned long long, int, void*, bool)+0x241>
c0020a5a:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020a60:	0f ba e0 1e          	bt     eax,0x1e
c0020a64:	73 18                	jae    c0020a7e <SATA::access(unsigned long long, int, void*, bool)+0x252>
c0020a66:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020a6d:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0020a74:	75 01                	jne    c0020a77 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c0020a76:	fb                   	sti    
c0020a77:	b8 01 00 00 00       	mov    eax,0x1
c0020a7c:	eb 2c                	jmp    c0020aaa <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020a7e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020a83:	75 10                	jne    c0020a95 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0020a85:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020a8b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020a8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a95:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020a9c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0020aa1:	85 c0                	test   eax,eax
c0020aa3:	75 03                	jne    c0020aa8 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020aa5:	fb                   	sti    
c0020aa6:	eb 02                	jmp    c0020aaa <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020aa8:	31 c0                	xor    eax,eax
c0020aaa:	83 c4 2c             	add    esp,0x2c
c0020aad:	5b                   	pop    ebx
c0020aae:	5e                   	pop    esi
c0020aaf:	5f                   	pop    edi
c0020ab0:	5d                   	pop    ebp
c0020ab1:	c3                   	ret    

c0020ab2 <SATA::read(unsigned long long, int, void*)>:
c0020ab2:	57                   	push   edi
c0020ab3:	b8 04 00 00 00       	mov    eax,0x4
c0020ab8:	56                   	push   esi
c0020ab9:	53                   	push   ebx
c0020aba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020abe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020ac2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ac6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020aca:	8d 7a ff             	lea    edi,[edx-0x1]
c0020acd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020ad3:	77 25                	ja     c0020afa <SATA::read(unsigned long long, int, void*)+0x48>
c0020ad5:	85 f6                	test   esi,esi
c0020ad7:	b8 06 00 00 00       	mov    eax,0x6
c0020adc:	74 1c                	je     c0020afa <SATA::read(unsigned long long, int, void*)+0x48>
c0020ade:	50                   	push   eax
c0020adf:	50                   	push   eax
c0020ae0:	6a 00                	push   0x0
c0020ae2:	56                   	push   esi
c0020ae3:	52                   	push   edx
c0020ae4:	53                   	push   ebx
c0020ae5:	51                   	push   ecx
c0020ae6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020aea:	e8 3d fd ff ff       	call   c002082c <SATA::access(unsigned long long, int, void*, bool)>
c0020aef:	83 c4 20             	add    esp,0x20
c0020af2:	85 c0                	test   eax,eax
c0020af4:	0f 95 c0             	setne  al
c0020af7:	0f b6 c0             	movzx  eax,al
c0020afa:	5b                   	pop    ebx
c0020afb:	5e                   	pop    esi
c0020afc:	5f                   	pop    edi
c0020afd:	c3                   	ret    

c0020afe <SATA::write(unsigned long long, int, void*)>:
c0020afe:	55                   	push   ebp
c0020aff:	b8 04 00 00 00       	mov    eax,0x4
c0020b04:	57                   	push   edi
c0020b05:	56                   	push   esi
c0020b06:	53                   	push   ebx
c0020b07:	83 ec 0c             	sub    esp,0xc
c0020b0a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020b0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020b12:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020b16:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020b1a:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020b1d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020b23:	77 3d                	ja     c0020b62 <SATA::write(unsigned long long, int, void*)+0x64>
c0020b25:	85 ed                	test   ebp,ebp
c0020b27:	b8 06 00 00 00       	mov    eax,0x6
c0020b2c:	74 34                	je     c0020b62 <SATA::write(unsigned long long, int, void*)+0x64>
c0020b2e:	c1 e3 09             	shl    ebx,0x9
c0020b31:	01 eb                	add    ebx,ebp
c0020b33:	50                   	push   eax
c0020b34:	89 d6                	mov    esi,edx
c0020b36:	50                   	push   eax
c0020b37:	83 c6 01             	add    esi,0x1
c0020b3a:	6a 01                	push   0x1
c0020b3c:	89 cf                	mov    edi,ecx
c0020b3e:	55                   	push   ebp
c0020b3f:	83 d7 00             	adc    edi,0x0
c0020b42:	6a 01                	push   0x1
c0020b44:	81 c5 00 02 00 00    	add    ebp,0x200
c0020b4a:	51                   	push   ecx
c0020b4b:	52                   	push   edx
c0020b4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020b50:	e8 d7 fc ff ff       	call   c002082c <SATA::access(unsigned long long, int, void*, bool)>
c0020b55:	83 c4 20             	add    esp,0x20
c0020b58:	39 dd                	cmp    ebp,ebx
c0020b5a:	89 f2                	mov    edx,esi
c0020b5c:	89 f9                	mov    ecx,edi
c0020b5e:	75 d3                	jne    c0020b33 <SATA::write(unsigned long long, int, void*)+0x35>
c0020b60:	31 c0                	xor    eax,eax
c0020b62:	83 c4 0c             	add    esp,0xc
c0020b65:	5b                   	pop    ebx
c0020b66:	5e                   	pop    esi
c0020b67:	5f                   	pop    edi
c0020b68:	5d                   	pop    ebp
c0020b69:	c3                   	ret    

c0020b6a <SATAPI::write(unsigned long long, int, void*)>:
c0020b6a:	b8 03 00 00 00       	mov    eax,0x3
c0020b6f:	c3                   	ret    

c0020b70 <SATAPI::close(int, int, void*)>:
c0020b70:	83 ec 0c             	sub    esp,0xc
c0020b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b77:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b7d:	85 c0                	test   eax,eax
c0020b7f:	74 0c                	je     c0020b8d <SATAPI::close(int, int, void*)+0x1d>
c0020b81:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b83:	83 ec 0c             	sub    esp,0xc
c0020b86:	50                   	push   eax
c0020b87:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020b8a:	83 c4 10             	add    esp,0x10
c0020b8d:	31 c0                	xor    eax,eax
c0020b8f:	83 c4 0c             	add    esp,0xc
c0020b92:	c3                   	ret    
c0020b93:	90                   	nop

c0020b94 <SATAPI::SATAPI()>:
c0020b94:	83 ec 0c             	sub    esp,0xc
c0020b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9b:	83 ec 04             	sub    esp,0x4
c0020b9e:	68 00 08 00 00       	push   0x800
c0020ba3:	68 3c 61 02 c0       	push   0xc002613c
c0020ba8:	50                   	push   eax
c0020ba9:	e8 2c 92 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020bae:	83 c4 10             	add    esp,0x10
c0020bb1:	ba 30 62 02 c0       	mov    edx,0xc0026230
c0020bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bba:	89 10                	mov    DWORD PTR [eax],edx
c0020bbc:	90                   	nop
c0020bbd:	83 c4 0c             	add    esp,0xc
c0020bc0:	c3                   	ret    
c0020bc1:	90                   	nop

c0020bc2 <SATAPI::diskRemoved()>:
c0020bc2:	c3                   	ret    
c0020bc3:	90                   	nop

c0020bc4 <SATAPI::diskInserted()>:
c0020bc4:	83 ec 18             	sub    esp,0x18
c0020bc7:	68 48 61 02 c0       	push   0xc0026148
c0020bcc:	e8 95 63 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bd5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020bdc:	83 c4 1c             	add    esp,0x1c
c0020bdf:	c3                   	ret    

c0020be0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020be0:	55                   	push   ebp
c0020be1:	57                   	push   edi
c0020be2:	56                   	push   esi
c0020be3:	53                   	push   ebx
c0020be4:	83 ec 34             	sub    esp,0x34
c0020be7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020beb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020bef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020bf3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020bf7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020bfb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020c01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020c07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020c0b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020c11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c15:	83 c0 02             	add    eax,0x2
c0020c18:	c1 e0 07             	shl    eax,0x7
c0020c1b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020c1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c27:	c1 e0 07             	shl    eax,0x7
c0020c2a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020c2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c32:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020c3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020c40:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020c46:	e8 4d ea ff ff       	call   c001f698 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020c4b:	83 c4 10             	add    esp,0x10
c0020c4e:	89 c2                	mov    edx,eax
c0020c50:	b8 01 00 00 00       	mov    eax,0x1
c0020c55:	83 fa ff             	cmp    edx,0xffffffff
c0020c58:	0f 84 63 02 00 00    	je     c0020ec1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020c5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c66:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c6e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020c74:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020c7a:	89 d1                	mov    ecx,edx
c0020c7c:	c1 e1 05             	shl    ecx,0x5
c0020c7f:	01 c8                	add    eax,ecx
c0020c81:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020c83:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020c89:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020c8f:	89 08                	mov    DWORD PTR [eax],ecx
c0020c91:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020c97:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020c9d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020ca3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020ca6:	50                   	push   eax
c0020ca7:	68 90 00 00 00       	push   0x90
c0020cac:	6a 00                	push   0x0
c0020cae:	53                   	push   ebx
c0020caf:	e8 3c f8 fd ff       	call   c00004f0 <memset>
c0020cb4:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020cb7:	b9 0c 00 00 00       	mov    ecx,0xc
c0020cbc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020cc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020cc2:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020cc8:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020ccc:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020cd0:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020cd6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020cda:	48                   	dec    eax
c0020cdb:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020ce0:	89 c1                	mov    ecx,eax
c0020ce2:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020ce8:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020ced:	09 c8                	or     eax,ecx
c0020cef:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020cf5:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020cfb:	83 c8 80             	or     eax,0xffffff80
c0020cfe:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020d04:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020d07:	25 00 7f 00 00       	and    eax,0x7f00
c0020d0c:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020d11:	66 89 03             	mov    WORD PTR [ebx],ax
c0020d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d18:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0020d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d20:	c1 e8 10             	shr    eax,0x10
c0020d23:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d2a:	c1 e8 18             	shr    eax,0x18
c0020d2d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0020d30:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020d34:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020d37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d3b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020d3e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d42:	83 c4 10             	add    esp,0x10
c0020d45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d49:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020d4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020d51:	31 c0                	xor    eax,eax
c0020d53:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020d59:	80 e1 88             	and    cl,0x88
c0020d5c:	74 0a                	je     c0020d68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020d5e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d63:	74 0a                	je     c0020d6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0020d65:	40                   	inc    eax
c0020d66:	eb eb                	jmp    c0020d53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0020d68:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d6d:	75 43                	jne    c0020db2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0020d6f:	83 ec 0c             	sub    esp,0xc
c0020d72:	68 60 61 02 c0       	push   0xc0026160
c0020d77:	e8 ea 61 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020d7c:	58                   	pop    eax
c0020d7d:	5a                   	pop    edx
c0020d7e:	68 75 61 02 c0       	push   0xc0026175
c0020d83:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0020d89:	e8 5e 1a ff ff       	call   c00127ec <VgaText::puts(char const*)>
c0020d8e:	59                   	pop    ecx
c0020d8f:	5b                   	pop    ebx
c0020d90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020d94:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020d9a:	e8 93 e9 ff ff       	call   c001f732 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020d9f:	5e                   	pop    esi
c0020da0:	5f                   	pop    edi
c0020da1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020da5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020dab:	e8 62 e9 ff ff       	call   c001f712 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020db0:	eb 48                	jmp    c0020dfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c0020db2:	b8 01 00 00 00       	mov    eax,0x1
c0020db7:	88 d1                	mov    cl,dl
c0020db9:	d3 e0                	shl    eax,cl
c0020dbb:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c0020dc0:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0020dc6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020dca:	89 c7                	mov    edi,eax
c0020dcc:	c1 e3 07             	shl    ebx,0x7
c0020dcf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0020dd3:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0020dd9:	85 c7                	test   edi,eax
c0020ddb:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0020de1:	0f 84 a7 00 00 00    	je     c0020e8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c0020de7:	0f ba e0 1e          	bt     eax,0x1e
c0020deb:	73 1a                	jae    c0020e07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0020ded:	83 ec 0c             	sub    esp,0xc
c0020df0:	68 87 61 02 c0       	push   0xc0026187
c0020df5:	e8 6c 61 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020dfa:	83 c4 10             	add    esp,0x10
c0020dfd:	b8 01 00 00 00       	mov    eax,0x1
c0020e02:	e9 ba 00 00 00       	jmp    c0020ec1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020e07:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0020e0d:	83 f8 0d             	cmp    eax,0xd
c0020e10:	77 0b                	ja     c0020e1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0020e12:	50                   	push   eax
c0020e13:	50                   	push   eax
c0020e14:	6a 00                	push   0x0
c0020e16:	68 c8 00 00 00       	push   0xc8
c0020e1b:	eb 2a                	jmp    c0020e47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020e1d:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0020e23:	83 f8 0d             	cmp    eax,0xd
c0020e26:	77 0b                	ja     c0020e33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020e28:	51                   	push   ecx
c0020e29:	51                   	push   ecx
c0020e2a:	6a 00                	push   0x0
c0020e2c:	68 58 02 00 00       	push   0x258
c0020e31:	eb 14                	jmp    c0020e47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020e33:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0020e39:	83 f8 06             	cmp    eax,0x6
c0020e3c:	77 11                	ja     c0020e4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0020e3e:	52                   	push   edx
c0020e3f:	52                   	push   edx
c0020e40:	6a 00                	push   0x0
c0020e42:	68 dc 05 00 00       	push   0x5dc
c0020e47:	e8 e8 62 ff ff       	call   c0017134 <milliTenthSleep(unsigned long long)>
c0020e4c:	83 c4 10             	add    esp,0x10
c0020e4f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020e53:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020e56:	75 06                	jne    c0020e5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0020e58:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020e5c:	74 16                	je     c0020e74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020e5e:	83 fe 06             	cmp    esi,0x6
c0020e61:	77 11                	ja     c0020e74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020e63:	50                   	push   eax
c0020e64:	50                   	push   eax
c0020e65:	6a 00                	push   0x0
c0020e67:	68 c4 09 00 00       	push   0x9c4
c0020e6c:	e8 c3 62 ff ff       	call   c0017134 <milliTenthSleep(unsigned long long)>
c0020e71:	83 c4 10             	add    esp,0x10
c0020e74:	46                   	inc    esi
c0020e75:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0020e7b:	0f 85 52 ff ff ff    	jne    c0020dd3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c0020e81:	83 ec 0c             	sub    esp,0xc
c0020e84:	68 9a 61 02 c0       	push   0xc002619a
c0020e89:	e9 67 ff ff ff       	jmp    c0020df5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020e8e:	0f ba e0 1e          	bt     eax,0x1e
c0020e92:	73 0d                	jae    c0020ea1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c0020e94:	83 ec 0c             	sub    esp,0xc
c0020e97:	68 ae 61 02 c0       	push   0xc00261ae
c0020e9c:	e9 54 ff ff ff       	jmp    c0020df5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020ea1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020ea6:	74 17                	je     c0020ebf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020ea8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020ead:	74 10                	je     c0020ebf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020eaf:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020eb5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020eb9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020ebd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ebf:	31 c0                	xor    eax,eax
c0020ec1:	83 c4 2c             	add    esp,0x2c
c0020ec4:	5b                   	pop    ebx
c0020ec5:	5e                   	pop    esi
c0020ec6:	5f                   	pop    edi
c0020ec7:	5d                   	pop    ebp
c0020ec8:	c3                   	ret    
c0020ec9:	90                   	nop

c0020eca <SATAPI::eject()>:
c0020eca:	57                   	push   edi
c0020ecb:	b9 03 00 00 00       	mov    ecx,0x3
c0020ed0:	83 ec 18             	sub    esp,0x18
c0020ed3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020ed7:	fc                   	cld    
c0020ed8:	31 c0                	xor    eax,eax
c0020eda:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020edc:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020ee1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020ee6:	50                   	push   eax
c0020ee7:	6a 00                	push   0x0
c0020ee9:	6a 00                	push   0x0
c0020eeb:	6a 00                	push   0x0
c0020eed:	6a 00                	push   0x0
c0020eef:	6a 02                	push   0x2
c0020ef1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ef5:	50                   	push   eax
c0020ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020efa:	e8 e1 fc ff ff       	call   c0020be0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020eff:	83 c4 38             	add    esp,0x38
c0020f02:	31 c0                	xor    eax,eax
c0020f04:	5f                   	pop    edi
c0020f05:	c3                   	ret    

c0020f06 <SATAPI::detectMedia()>:
c0020f06:	53                   	push   ebx
c0020f07:	83 ec 14             	sub    esp,0x14
c0020f0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020f0e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020f14:	e8 97 a4 fe ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c0020f19:	59                   	pop    ecx
c0020f1a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020f20:	e8 7b a4 fe ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c0020f25:	c7 04 24 c3 61 02 c0 	mov    DWORD PTR [esp],0xc00261c3
c0020f2c:	e8 35 60 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020f31:	83 c4 10             	add    esp,0x10
c0020f34:	31 c0                	xor    eax,eax
c0020f36:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c0020f3d:	85 d2                	test   edx,edx
c0020f3f:	74 0f                	je     c0020f50 <SATAPI::detectMedia()+0x4a>
c0020f41:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020f47:	75 07                	jne    c0020f50 <SATAPI::detectMedia()+0x4a>
c0020f49:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020f50:	40                   	inc    eax
c0020f51:	83 f8 1a             	cmp    eax,0x1a
c0020f54:	75 e0                	jne    c0020f36 <SATAPI::detectMedia()+0x30>
c0020f56:	83 c4 08             	add    esp,0x8
c0020f59:	5b                   	pop    ebx
c0020f5a:	c3                   	ret    
c0020f5b:	90                   	nop

c0020f5c <SATAPI::open(int, int, void*)>:
c0020f5c:	56                   	push   esi
c0020f5d:	53                   	push   ebx
c0020f5e:	51                   	push   ecx
c0020f5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f67:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020f71:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020f77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f7b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020f85:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020f8f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020f96:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020f9c:	e8 5b f0 fe ff       	call   c000fffc <Phys::allocatePage()>
c0020fa1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020fa7:	89 c6                	mov    esi,eax
c0020fa9:	e8 4e f0 fe ff       	call   c000fffc <Phys::allocatePage()>
c0020fae:	81 c6 00 10 00 00    	add    esi,0x1000
c0020fb4:	39 c6                	cmp    esi,eax
c0020fb6:	74 10                	je     c0020fc8 <SATAPI::open(int, int, void*)+0x6c>
c0020fb8:	83 ec 0c             	sub    esp,0xc
c0020fbb:	68 d8 61 02 c0       	push   0xc00261d8
c0020fc0:	e8 3d ee fe ff       	call   c000fe02 <KePanic(char const*)>
c0020fc5:	83 c4 10             	add    esp,0x10
c0020fc8:	83 ec 0c             	sub    esp,0xc
c0020fcb:	6a 02                	push   0x2
c0020fcd:	e8 25 24 ff ff       	call   c00133f7 <Virt::allocateKernelVirtualPages(int)>
c0020fd2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020fd8:	6a 03                	push   0x3
c0020fda:	50                   	push   eax
c0020fdb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020fe1:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0020fe7:	e8 e4 2a ff ff       	call   c0013ad0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020fec:	83 c4 14             	add    esp,0x14
c0020fef:	68 78 01 00 00       	push   0x178
c0020ff4:	e8 b3 e9 fe ff       	call   c000f9ac <malloc>
c0020ff9:	83 c4 0c             	add    esp,0xc
c0020ffc:	6a 00                	push   0x0
c0020ffe:	68 ff ff ff 7f       	push   0x7fffffff
c0021003:	6a 00                	push   0x0
c0021005:	6a 00                	push   0x0
c0021007:	53                   	push   ebx
c0021008:	68 ee 61 02 c0       	push   0xc00261ee
c002100d:	89 c6                	mov    esi,eax
c002100f:	50                   	push   eax
c0021010:	e8 fb 97 fe ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021015:	83 c4 14             	add    esp,0x14
c0021018:	56                   	push   esi
c0021019:	e8 b2 98 fe ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c002101e:	5a                   	pop    edx
c002101f:	59                   	pop    ecx
c0021020:	0f be c0             	movsx  eax,al
c0021023:	50                   	push   eax
c0021024:	68 34 60 02 c0       	push   0xc0026034
c0021029:	e8 38 5f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002102e:	58                   	pop    eax
c002102f:	5a                   	pop    edx
c0021030:	56                   	push   esi
c0021031:	53                   	push   ebx
c0021032:	e8 bf 89 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c0021037:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002103d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021040:	e8 fd 8d fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0021045:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002104c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002104f:	e8 b2 fe ff ff       	call   c0020f06 <SATAPI::detectMedia()>
c0021054:	83 c4 14             	add    esp,0x14
c0021057:	31 c0                	xor    eax,eax
c0021059:	5b                   	pop    ebx
c002105a:	5e                   	pop    esi
c002105b:	c3                   	ret    

c002105c <SATAPI::read(unsigned long long, int, void*)>:
c002105c:	55                   	push   ebp
c002105d:	57                   	push   edi
c002105e:	56                   	push   esi
c002105f:	53                   	push   ebx
c0021060:	83 ec 3c             	sub    esp,0x3c
c0021063:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0021067:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002106b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002106f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0021073:	83 fd 04             	cmp    ebp,0x4
c0021076:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002107a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002107e:	7e 10                	jle    c0021090 <SATAPI::read(unsigned long long, int, void*)+0x34>
c0021080:	83 ec 0c             	sub    esp,0xc
c0021083:	68 fc 61 02 c0       	push   0xc00261fc
c0021088:	e8 75 ed fe ff       	call   c000fe02 <KePanic(char const*)>
c002108d:	83 c4 10             	add    esp,0x10
c0021090:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021096:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002109c:	51                   	push   ecx
c002109d:	50                   	push   eax
c002109e:	83 c0 02             	add    eax,0x2
c00210a1:	c1 e0 07             	shl    eax,0x7
c00210a4:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00210aa:	50                   	push   eax
c00210ab:	52                   	push   edx
c00210ac:	e8 ab e6 ff ff       	call   c001f75c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00210b1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00210b5:	b9 03 00 00 00       	mov    ecx,0x3
c00210ba:	fc                   	cld    
c00210bb:	31 c0                	xor    eax,eax
c00210bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00210bf:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c00210c4:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00210c9:	83 c4 0c             	add    esp,0xc
c00210cc:	6a 00                	push   0x0
c00210ce:	6a 00                	push   0x0
c00210d0:	6a 00                	push   0x0
c00210d2:	6a 00                	push   0x0
c00210d4:	6a 02                	push   0x2
c00210d6:	8d 44 24 30          	lea    eax,[esp+0x30]
c00210da:	50                   	push   eax
c00210db:	53                   	push   ebx
c00210dc:	e8 ff fa ff ff       	call   c0020be0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00210e1:	83 c4 20             	add    esp,0x20
c00210e4:	85 c0                	test   eax,eax
c00210e6:	89 c6                	mov    esi,eax
c00210e8:	75 46                	jne    c0021130 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c00210ea:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00210ee:	b9 03 00 00 00       	mov    ecx,0x3
c00210f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00210f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210f9:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c00210fe:	0f c8                	bswap  eax
c0021100:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021104:	89 e8                	mov    eax,ebp
c0021106:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002110a:	50                   	push   eax
c002110b:	55                   	push   ebp
c002110c:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021110:	c1 e5 0b             	shl    ebp,0xb
c0021113:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021117:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002111b:	55                   	push   ebp
c002111c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021120:	50                   	push   eax
c0021121:	53                   	push   ebx
c0021122:	e8 b9 fa ff ff       	call   c0020be0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021127:	83 c4 20             	add    esp,0x20
c002112a:	85 c0                	test   eax,eax
c002112c:	89 c6                	mov    esi,eax
c002112e:	74 0c                	je     c002113c <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0021130:	83 ec 0c             	sub    esp,0xc
c0021133:	53                   	push   ebx
c0021134:	e8 cd fd ff ff       	call   c0020f06 <SATAPI::detectMedia()>
c0021139:	83 c4 10             	add    esp,0x10
c002113c:	83 c4 3c             	add    esp,0x3c
c002113f:	89 f0                	mov    eax,esi
c0021141:	5b                   	pop    ebx
c0021142:	5e                   	pop    esi
c0021143:	5f                   	pop    edi
c0021144:	5d                   	pop    ebp
c0021145:	c3                   	ret    
c0021146:	66 90                	xchg   ax,ax

c0021148 <APICTimer::close(int, int, void*)>:
c0021148:	b8 00 00 00 00       	mov    eax,0x0
c002114d:	c3                   	ret    
c002114e:	66 90                	xchg   ax,ax

c0021150 <apicTimerHandler(regs*, void*)>:
c0021150:	83 ec 0c             	sub    esp,0xc
c0021153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021157:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021159:	b8 10 27 00 00       	mov    eax,0x2710
c002115e:	ba 00 00 00 00       	mov    edx,0x0
c0021163:	f7 f1                	div    ecx
c0021165:	83 ec 0c             	sub    esp,0xc
c0021168:	50                   	push   eax
c0021169:	e8 5e 9f fe ff       	call   c000b0cc <timerHandler(unsigned int)>
c002116e:	83 c4 10             	add    esp,0x10
c0021171:	90                   	nop
c0021172:	83 c4 0c             	add    esp,0xc
c0021175:	c3                   	ret    
c0021176:	66 90                	xchg   ax,ax

c0021178 <APICTimer::open(int, int, void*)>:
c0021178:	83 ec 0c             	sub    esp,0xc
c002117b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021181:	83 c0 24             	add    eax,0x24
c0021184:	8b 00                	mov    eax,DWORD PTR [eax]
c0021186:	83 ec 08             	sub    esp,0x8
c0021189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002118d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021191:	ff d0                	call   eax
c0021193:	83 c4 10             	add    esp,0x10
c0021196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002119a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002119e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00211a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211ac:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00211b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211b6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00211bc:	83 ec 0c             	sub    esp,0xc
c00211bf:	51                   	push   ecx
c00211c0:	6a 01                	push   0x1
c00211c2:	68 50 11 02 c0       	push   0xc0021150
c00211c7:	52                   	push   edx
c00211c8:	50                   	push   eax
c00211c9:	e8 d4 87 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00211ce:	83 c4 20             	add    esp,0x20
c00211d1:	89 c2                	mov    edx,eax
c00211d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00211dd:	b8 00 00 00 00       	mov    eax,0x0
c00211e2:	83 c4 0c             	add    esp,0xc
c00211e5:	c3                   	ret    
c00211e6:	66 90                	xchg   ax,ax

c00211e8 <APICTimer::write(int)>:
c00211e8:	83 ec 0c             	sub    esp,0xc
c00211eb:	83 ec 0c             	sub    esp,0xc
c00211ee:	68 60 62 02 c0       	push   0xc0026260
c00211f3:	e8 0a ec fe ff       	call   c000fe02 <KePanic(char const*)>
c00211f8:	83 c4 10             	add    esp,0x10
c00211fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021203:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021209:	90                   	nop
c002120a:	83 c4 0c             	add    esp,0xc
c002120d:	c3                   	ret    
c002120e:	66 90                	xchg   ax,ax

c0021210 <APICTimer::APICTimer()>:
c0021210:	83 ec 0c             	sub    esp,0xc
c0021213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021217:	83 ec 08             	sub    esp,0x8
c002121a:	68 70 62 02 c0       	push   0xc0026270
c002121f:	50                   	push   eax
c0021220:	e8 db 9d fe ff       	call   c000b000 <Timer::Timer(char const*)>
c0021225:	83 c4 10             	add    esp,0x10
c0021228:	ba 84 62 02 c0       	mov    edx,0xc0026284
c002122d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021231:	89 10                	mov    DWORD PTR [eax],edx
c0021233:	90                   	nop
c0021234:	83 c4 0c             	add    esp,0xc
c0021237:	c3                   	ret    

c0021238 <PIT::write(int)>:
c0021238:	83 ec 10             	sub    esp,0x10
c002123b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002123f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021243:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021249:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002124d:	a3 98 f4 02 c0       	mov    ds:0xc002f498,eax
c0021252:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021257:	89 c2                	mov    edx,eax
c0021259:	c1 fa 1f             	sar    edx,0x1f
c002125c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021260:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021264:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002126b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021270:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021274:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021279:	ee                   	out    dx,al
c002127a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002127e:	0f b6 c0             	movzx  eax,al
c0021281:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021288:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002128c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021290:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021295:	ee                   	out    dx,al
c0021296:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002129a:	c1 f8 08             	sar    eax,0x8
c002129d:	0f b6 c0             	movzx  eax,al
c00212a0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00212a7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00212ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00212af:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00212b4:	ee                   	out    dx,al
c00212b5:	90                   	nop
c00212b6:	83 c4 10             	add    esp,0x10
c00212b9:	c3                   	ret    
c00212ba:	66 90                	xchg   ax,ax

c00212bc <pitHandler(regs*, void*)>:
c00212bc:	83 ec 0c             	sub    esp,0xc
c00212bf:	8b 0d 98 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f498
c00212c5:	b8 10 27 00 00       	mov    eax,0x2710
c00212ca:	89 c2                	mov    edx,eax
c00212cc:	c1 fa 1f             	sar    edx,0x1f
c00212cf:	f7 f9                	idiv   ecx
c00212d1:	83 ec 0c             	sub    esp,0xc
c00212d4:	50                   	push   eax
c00212d5:	e8 f2 9d fe ff       	call   c000b0cc <timerHandler(unsigned int)>
c00212da:	83 c4 10             	add    esp,0x10
c00212dd:	90                   	nop
c00212de:	83 c4 0c             	add    esp,0xc
c00212e1:	c3                   	ret    
c00212e2:	66 90                	xchg   ax,ax

c00212e4 <PIT::open(int, int, void*)>:
c00212e4:	83 ec 0c             	sub    esp,0xc
c00212e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ed:	83 c0 24             	add    eax,0x24
c00212f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00212f2:	83 ec 08             	sub    esp,0x8
c00212f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212fd:	ff d0                	call   eax
c00212ff:	83 c4 10             	add    esp,0x10
c0021302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021306:	83 ec 0c             	sub    esp,0xc
c0021309:	6a 00                	push   0x0
c002130b:	6a 01                	push   0x1
c002130d:	68 bc 12 02 c0       	push   0xc00212bc
c0021312:	6a 00                	push   0x0
c0021314:	50                   	push   eax
c0021315:	e8 88 86 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002131a:	83 c4 20             	add    esp,0x20
c002131d:	89 c2                	mov    edx,eax
c002131f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021323:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021329:	b8 00 00 00 00       	mov    eax,0x0
c002132e:	83 c4 0c             	add    esp,0xc
c0021331:	c3                   	ret    
c0021332:	66 90                	xchg   ax,ax

c0021334 <PIT::close(int, int, void*)>:
c0021334:	83 ec 0c             	sub    esp,0xc
c0021337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002133b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021349:	6a 01                	push   0x1
c002134b:	68 bc 12 02 c0       	push   0xc00212bc
c0021350:	6a 00                	push   0x0
c0021352:	50                   	push   eax
c0021353:	e8 80 86 fe ff       	call   c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021358:	83 c4 10             	add    esp,0x10
c002135b:	b8 00 00 00 00       	mov    eax,0x0
c0021360:	83 c4 0c             	add    esp,0xc
c0021363:	c3                   	ret    

c0021364 <PIT::PIT()>:
c0021364:	83 ec 0c             	sub    esp,0xc
c0021367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136b:	83 ec 08             	sub    esp,0x8
c002136e:	68 ac 62 02 c0       	push   0xc00262ac
c0021373:	50                   	push   eax
c0021374:	e8 87 9c fe ff       	call   c000b000 <Timer::Timer(char const*)>
c0021379:	83 c4 10             	add    esp,0x10
c002137c:	ba d4 62 02 c0       	mov    edx,0xc00262d4
c0021381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021385:	89 10                	mov    DWORD PTR [eax],edx
c0021387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002138b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021391:	0f b6 d0             	movzx  edx,al
c0021394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021398:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002139f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00213a9:	0f b6 d0             	movzx  edx,al
c00213ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00213b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00213bf:	8d 50 01             	lea    edx,[eax+0x1]
c00213c2:	88 d1                	mov    cl,dl
c00213c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00213c8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00213ce:	0f b6 d0             	movzx  edx,al
c00213d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00213d9:	83 e1 3f             	and    ecx,0x3f
c00213dc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00213e0:	90                   	nop
c00213e1:	83 c4 0c             	add    esp,0xc
c00213e4:	c3                   	ret    
c00213e5:	66 90                	xchg   ax,ax
c00213e7:	66 90                	xchg   ax,ax
c00213e9:	66 90                	xchg   ax,ax
c00213eb:	66 90                	xchg   ax,ax
c00213ed:	66 90                	xchg   ax,ax
c00213ef:	90                   	nop

c00213f0 <avxDetect>:
c00213f0:	b8 01 00 00 00       	mov    eax,0x1
c00213f5:	0f a2                	cpuid  
c00213f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00213fd:	74 15                	je     c0021414 <avxDetect.noAVX>
c00213ff:	b8 01 00 00 00       	mov    eax,0x1
c0021404:	0f a2                	cpuid  
c0021406:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002140c:	74 06                	je     c0021414 <avxDetect.noAVX>
c002140e:	b8 01 00 00 00       	mov    eax,0x1
c0021413:	c3                   	ret    

c0021414 <avxDetect.noAVX>:
c0021414:	b8 00 00 00 00       	mov    eax,0x0
c0021419:	c3                   	ret    

c002141a <avxSave>:
c002141a:	53                   	push   ebx
c002141b:	52                   	push   edx
c002141c:	31 c0                	xor    eax,eax
c002141e:	48                   	dec    eax
c002141f:	89 c2                	mov    edx,eax
c0021421:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021425:	0f ae 23             	xsave  [ebx]
c0021428:	5a                   	pop    edx
c0021429:	5b                   	pop    ebx
c002142a:	c3                   	ret    

c002142b <avxLoad>:
c002142b:	53                   	push   ebx
c002142c:	52                   	push   edx
c002142d:	31 c0                	xor    eax,eax
c002142f:	48                   	dec    eax
c0021430:	89 c2                	mov    edx,eax
c0021432:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021436:	0f ae 2b             	xrstor [ebx]
c0021439:	5a                   	pop    edx
c002143a:	5b                   	pop    ebx
c002143b:	c3                   	ret    

c002143c <avxInit>:
c002143c:	e8 17 03 00 00       	call   c0021758 <sseInit>
c0021441:	50                   	push   eax
c0021442:	51                   	push   ecx
c0021443:	0f 20 e0             	mov    eax,cr4
c0021446:	0d 00 00 04 00       	or     eax,0x40000
c002144b:	0f 22 e0             	mov    cr4,eax
c002144e:	31 c9                	xor    ecx,ecx
c0021450:	0f 01 d0             	xgetbv 
c0021453:	0d 07 00 00 00       	or     eax,0x7
c0021458:	0f 01 d1             	xsetbv 
c002145b:	59                   	pop    ecx
c002145c:	58                   	pop    eax
c002145d:	c3                   	ret    

c002145e <avxClose>:
c002145e:	c3                   	ret    
c002145f:	90                   	nop

c0021460 <isr0>:
c0021460:	fa                   	cli    
c0021461:	68 00 00 00 00       	push   0x0
c0021466:	68 00 00 00 00       	push   0x0
c002146b:	e9 56 01 00 00       	jmp    c00215c6 <int_common_stub>

c0021470 <isr1>:
c0021470:	fa                   	cli    
c0021471:	6a 00                	push   0x0
c0021473:	6a 01                	push   0x1
c0021475:	e9 4c 01 00 00       	jmp    c00215c6 <int_common_stub>

c002147a <isr2>:
c002147a:	fa                   	cli    
c002147b:	6a 00                	push   0x0
c002147d:	6a 02                	push   0x2
c002147f:	e9 42 01 00 00       	jmp    c00215c6 <int_common_stub>

c0021484 <isr3>:
c0021484:	fa                   	cli    
c0021485:	6a 00                	push   0x0
c0021487:	6a 03                	push   0x3
c0021489:	e9 38 01 00 00       	jmp    c00215c6 <int_common_stub>

c002148e <isr4>:
c002148e:	fa                   	cli    
c002148f:	6a 00                	push   0x0
c0021491:	6a 04                	push   0x4
c0021493:	e9 2e 01 00 00       	jmp    c00215c6 <int_common_stub>

c0021498 <isr5>:
c0021498:	fa                   	cli    
c0021499:	6a 00                	push   0x0
c002149b:	6a 05                	push   0x5
c002149d:	e9 24 01 00 00       	jmp    c00215c6 <int_common_stub>

c00214a2 <isr6>:
c00214a2:	fa                   	cli    
c00214a3:	6a 00                	push   0x0
c00214a5:	6a 06                	push   0x6
c00214a7:	e9 1a 01 00 00       	jmp    c00215c6 <int_common_stub>

c00214ac <isr7>:
c00214ac:	fa                   	cli    
c00214ad:	6a 00                	push   0x0
c00214af:	6a 07                	push   0x7
c00214b1:	e9 10 01 00 00       	jmp    c00215c6 <int_common_stub>

c00214b6 <isr8>:
c00214b6:	fa                   	cli    
c00214b7:	6a 08                	push   0x8
c00214b9:	e9 08 01 00 00       	jmp    c00215c6 <int_common_stub>

c00214be <isr9>:
c00214be:	fa                   	cli    
c00214bf:	6a 00                	push   0x0
c00214c1:	6a 09                	push   0x9
c00214c3:	e9 fe 00 00 00       	jmp    c00215c6 <int_common_stub>

c00214c8 <isr10>:
c00214c8:	fa                   	cli    
c00214c9:	6a 0a                	push   0xa
c00214cb:	e9 f6 00 00 00       	jmp    c00215c6 <int_common_stub>

c00214d0 <isr11>:
c00214d0:	fa                   	cli    
c00214d1:	6a 0b                	push   0xb
c00214d3:	e9 ee 00 00 00       	jmp    c00215c6 <int_common_stub>

c00214d8 <isr12>:
c00214d8:	fa                   	cli    
c00214d9:	6a 0c                	push   0xc
c00214db:	e9 e6 00 00 00       	jmp    c00215c6 <int_common_stub>

c00214e0 <isr13>:
c00214e0:	fa                   	cli    
c00214e1:	6a 0d                	push   0xd
c00214e3:	53                   	push   ebx
c00214e4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00214e8:	81 fb 85 16 02 c0    	cmp    ebx,0xc0021685
c00214ee:	5b                   	pop    ebx
c00214ef:	0f 84 92 01 00 00    	je     c0021687 <finishSignal2>
c00214f5:	e9 cc 00 00 00       	jmp    c00215c6 <int_common_stub>

c00214fa <isr14>:
c00214fa:	fa                   	cli    
c00214fb:	6a 0e                	push   0xe
c00214fd:	e9 c4 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021502 <isr15>:
c0021502:	fa                   	cli    
c0021503:	6a 00                	push   0x0
c0021505:	6a 0f                	push   0xf
c0021507:	e9 ba 00 00 00       	jmp    c00215c6 <int_common_stub>

c002150c <isr16>:
c002150c:	fa                   	cli    
c002150d:	6a 00                	push   0x0
c002150f:	6a 10                	push   0x10
c0021511:	e9 b0 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021516 <isr17>:
c0021516:	fa                   	cli    
c0021517:	6a 00                	push   0x0
c0021519:	6a 11                	push   0x11
c002151b:	e9 a6 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021520 <isr18>:
c0021520:	fa                   	cli    
c0021521:	6a 00                	push   0x0
c0021523:	6a 12                	push   0x12
c0021525:	e9 9c 00 00 00       	jmp    c00215c6 <int_common_stub>

c002152a <irq3>:
c002152a:	fa                   	cli    
c002152b:	6a 00                	push   0x0
c002152d:	6a 23                	push   0x23
c002152f:	e9 92 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021534 <irq4>:
c0021534:	fa                   	cli    
c0021535:	6a 00                	push   0x0
c0021537:	6a 24                	push   0x24
c0021539:	e9 88 00 00 00       	jmp    c00215c6 <int_common_stub>

c002153e <irq5>:
c002153e:	fa                   	cli    
c002153f:	6a 00                	push   0x0
c0021541:	6a 25                	push   0x25
c0021543:	e9 7e 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021548 <irq6>:
c0021548:	fa                   	cli    
c0021549:	6a 00                	push   0x0
c002154b:	6a 26                	push   0x26
c002154d:	e9 74 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021552 <irq7>:
c0021552:	fa                   	cli    
c0021553:	6a 00                	push   0x0
c0021555:	6a 27                	push   0x27
c0021557:	e9 6a 00 00 00       	jmp    c00215c6 <int_common_stub>

c002155c <irq8>:
c002155c:	fa                   	cli    
c002155d:	6a 00                	push   0x0
c002155f:	6a 28                	push   0x28
c0021561:	e9 60 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021566 <irq9>:
c0021566:	fa                   	cli    
c0021567:	6a 00                	push   0x0
c0021569:	6a 29                	push   0x29
c002156b:	e9 56 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021570 <irq10>:
c0021570:	fa                   	cli    
c0021571:	6a 00                	push   0x0
c0021573:	6a 2a                	push   0x2a
c0021575:	e9 4c 00 00 00       	jmp    c00215c6 <int_common_stub>

c002157a <irq11>:
c002157a:	fa                   	cli    
c002157b:	6a 00                	push   0x0
c002157d:	6a 2b                	push   0x2b
c002157f:	e9 42 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021584 <irq12>:
c0021584:	fa                   	cli    
c0021585:	6a 00                	push   0x0
c0021587:	6a 2c                	push   0x2c
c0021589:	e9 38 00 00 00       	jmp    c00215c6 <int_common_stub>

c002158e <irq13>:
c002158e:	fa                   	cli    
c002158f:	6a 00                	push   0x0
c0021591:	6a 2d                	push   0x2d
c0021593:	e9 2e 00 00 00       	jmp    c00215c6 <int_common_stub>

c0021598 <irq14>:
c0021598:	fa                   	cli    
c0021599:	6a 00                	push   0x0
c002159b:	6a 2e                	push   0x2e
c002159d:	e9 24 00 00 00       	jmp    c00215c6 <int_common_stub>

c00215a2 <irq15>:
c00215a2:	fa                   	cli    
c00215a3:	6a 00                	push   0x0
c00215a5:	6a 2f                	push   0x2f
c00215a7:	e9 1a 00 00 00       	jmp    c00215c6 <int_common_stub>

c00215ac <irq1>:
c00215ac:	fa                   	cli    
c00215ad:	6a 00                	push   0x0
c00215af:	6a 21                	push   0x21
c00215b1:	eb 13                	jmp    c00215c6 <int_common_stub>

c00215b3 <irq2>:
c00215b3:	fa                   	cli    
c00215b4:	6a 00                	push   0x0
c00215b6:	6a 22                	push   0x22
c00215b8:	eb 0c                	jmp    c00215c6 <int_common_stub>

c00215ba <isr96>:
c00215ba:	6a 00                	push   0x0
c00215bc:	6a 60                	push   0x60
c00215be:	fb                   	sti    
c00215bf:	eb 05                	jmp    c00215c6 <int_common_stub>

c00215c1 <irq0>:
c00215c1:	fa                   	cli    
c00215c2:	6a 00                	push   0x0
c00215c4:	6a 20                	push   0x20

c00215c6 <int_common_stub>:
c00215c6:	60                   	pusha  
c00215c7:	1e                   	push   ds
c00215c8:	06                   	push   es
c00215c9:	0f a0                	push   fs
c00215cb:	0f a8                	push   gs
c00215cd:	66 b8 10 00          	mov    ax,0x10
c00215d1:	66 8e d8             	mov    ds,ax
c00215d4:	66 8e c0             	mov    es,ax
c00215d7:	66 8e e0             	mov    fs,ax
c00215da:	66 8e e8             	mov    gs,ax
c00215dd:	54                   	push   esp
c00215de:	fc                   	cld    
c00215df:	e8 1c d2 fe ff       	call   c000e800 <int_handler>
c00215e4:	81 c4 04 00 00 00    	add    esp,0x4
c00215ea:	0f a9                	pop    gs
c00215ec:	0f a1                	pop    fs
c00215ee:	07                   	pop    es
c00215ef:	1f                   	pop    ds
c00215f0:	e8 7a fc fe ff       	call   c001126f <KiCheckSignalZ>
c00215f5:	85 c0                	test   eax,eax
c00215f7:	75 08                	jne    c0021601 <doSignals>
c00215f9:	61                   	popa   
c00215fa:	81 c4 08 00 00 00    	add    esp,0x8
c0021600:	cf                   	iret   

c0021601 <doSignals>:
c0021601:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021606:	61                   	popa   
c0021607:	53                   	push   ebx
c0021608:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002160e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021611:	5b                   	pop    ebx
c0021612:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021617:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002161a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002161d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021620:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021623:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021626:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021629:	81 c4 08 00 00 00    	add    esp,0x8
c002162f:	5e                   	pop    esi
c0021630:	5b                   	pop    ebx
c0021631:	59                   	pop    ecx
c0021632:	5a                   	pop    edx
c0021633:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021636:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021639:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002163c:	52                   	push   edx
c002163d:	51                   	push   ecx
c002163e:	53                   	push   ebx
c002163f:	56                   	push   esi
c0021640:	81 ec 08 00 00 00    	sub    esp,0x8
c0021646:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021649:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002164c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002164f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021652:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021655:	60                   	pusha  
c0021656:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002165c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002165f:	89 e3                	mov    ebx,esp
c0021661:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021664:	52                   	push   edx
c0021665:	68 85 16 02 c0       	push   0xc0021685
c002166a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002166d:	89 dc                	mov    esp,ebx
c002166f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021672:	68 23 00 00 00       	push   0x23
c0021677:	51                   	push   ecx
c0021678:	68 02 02 00 00       	push   0x202
c002167d:	68 1b 00 00 00       	push   0x1b
c0021682:	ff 36                	push   DWORD PTR [esi]
c0021684:	cf                   	iret   

c0021685 <finishSignal>:
c0021685:	cd 0f                	int    0xf

c0021687 <finishSignal2>:
c0021687:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002168d:	e8 69 fc fe ff       	call   c00112fb <KiFinishSignalZ>
c0021692:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021698:	68 23 00 00 00       	push   0x23
c002169d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00216a0:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00216a3:	68 1b 00 00 00       	push   0x1b
c00216a8:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00216ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00216ae:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00216b1:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00216b4:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00216b7:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00216ba:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00216bd:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00216c0:	cf                   	iret   
c00216c1:	90                   	nop
c00216c2:	90                   	nop
c00216c3:	90                   	nop

c00216c4 <irq16>:
c00216c4:	fa                   	cli    
c00216c5:	6a 00                	push   0x0
c00216c7:	6a 30                	push   0x30
c00216c9:	e9 f8 fe ff ff       	jmp    c00215c6 <int_common_stub>

c00216ce <irq17>:
c00216ce:	fa                   	cli    
c00216cf:	6a 00                	push   0x0
c00216d1:	6a 31                	push   0x31
c00216d3:	e9 ee fe ff ff       	jmp    c00215c6 <int_common_stub>

c00216d8 <irq18>:
c00216d8:	fa                   	cli    
c00216d9:	6a 00                	push   0x0
c00216db:	6a 32                	push   0x32
c00216dd:	e9 e4 fe ff ff       	jmp    c00215c6 <int_common_stub>

c00216e2 <irq19>:
c00216e2:	fa                   	cli    
c00216e3:	6a 00                	push   0x0
c00216e5:	6a 33                	push   0x33
c00216e7:	e9 da fe ff ff       	jmp    c00215c6 <int_common_stub>

c00216ec <irq20>:
c00216ec:	fa                   	cli    
c00216ed:	6a 00                	push   0x0
c00216ef:	6a 34                	push   0x34
c00216f1:	e9 d0 fe ff ff       	jmp    c00215c6 <int_common_stub>

c00216f6 <irq21>:
c00216f6:	fa                   	cli    
c00216f7:	6a 00                	push   0x0
c00216f9:	6a 35                	push   0x35
c00216fb:	e9 c6 fe ff ff       	jmp    c00215c6 <int_common_stub>

c0021700 <irq22>:
c0021700:	fa                   	cli    
c0021701:	6a 00                	push   0x0
c0021703:	6a 36                	push   0x36
c0021705:	e9 bc fe ff ff       	jmp    c00215c6 <int_common_stub>

c002170a <irq23>:
c002170a:	fa                   	cli    
c002170b:	6a 00                	push   0x0
c002170d:	6a 37                	push   0x37
c002170f:	e9 b2 fe ff ff       	jmp    c00215c6 <int_common_stub>
c0021714:	66 90                	xchg   ax,ax
c0021716:	66 90                	xchg   ax,ax
c0021718:	66 90                	xchg   ax,ax
c002171a:	66 90                	xchg   ax,ax
c002171c:	66 90                	xchg   ax,ax
c002171e:	66 90                	xchg   ax,ax

c0021720 <i386GetRDRAND>:
c0021720:	b9 64 00 00 00       	mov    ecx,0x64

c0021725 <retry>:
c0021725:	0f c7 f0             	rdrand eax
c0021728:	72 05                	jb     c002172f <retry.done>
c002172a:	e2 f9                	loop   c0021725 <retry>

c002172c <retry.fail>:
c002172c:	31 c0                	xor    eax,eax
c002172e:	c3                   	ret    

c002172f <retry.done>:
c002172f:	c3                   	ret    

c0021730 <sseDetect>:
c0021730:	b8 01 00 00 00       	mov    eax,0x1
c0021735:	0f a2                	cpuid  
c0021737:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002173d:	74 06                	je     c0021745 <sseDetect.noSSE>
c002173f:	b8 01 00 00 00       	mov    eax,0x1
c0021744:	c3                   	ret    

c0021745 <sseDetect.noSSE>:
c0021745:	31 c0                	xor    eax,eax
c0021747:	c3                   	ret    

c0021748 <sseSave>:
c0021748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002174c:	0f ae 00             	fxsave [eax]
c002174f:	c3                   	ret    

c0021750 <sseLoad>:
c0021750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021754:	0f ae 08             	fxrstor [eax]
c0021757:	c3                   	ret    

c0021758 <sseInit>:
c0021758:	e8 48 00 00 00       	call   c00217a5 <x87Init>
c002175d:	0f 20 e0             	mov    eax,cr4
c0021760:	66 0d 00 06          	or     ax,0x600
c0021764:	0f 22 e0             	mov    cr4,eax
c0021767:	c3                   	ret    

c0021768 <sseClose>:
c0021768:	c3                   	ret    
c0021769:	66 90                	xchg   ax,ax
c002176b:	66 90                	xchg   ax,ax
c002176d:	66 90                	xchg   ax,ax
c002176f:	90                   	nop

c0021770 <value_37F>:
c0021770:	7f 03                	jg     c0021775 <value_37A+0x1>

c0021772 <value_37E>:
c0021772:	7e 03                	jle    c0021777 <x87Detect+0x1>

c0021774 <value_37A>:
c0021774:	7a 03                	jp     c0021779 <x87Detect+0x3>

c0021776 <x87Detect>:
c0021776:	53                   	push   ebx
c0021777:	51                   	push   ecx
c0021778:	52                   	push   edx
c0021779:	b8 01 00 00 00       	mov    eax,0x1
c002177e:	0f a2                	cpuid  
c0021780:	f7 c2 01 00 00 00    	test   edx,0x1
c0021786:	74 06                	je     c002178e <x87Detect.nox87>
c0021788:	b8 01 00 00 00       	mov    eax,0x1
c002178d:	c3                   	ret    

c002178e <x87Detect.nox87>:
c002178e:	b8 00 00 00 00       	mov    eax,0x0
c0021793:	5a                   	pop    edx
c0021794:	59                   	pop    ecx
c0021795:	5b                   	pop    ebx
c0021796:	c3                   	ret    

c0021797 <x87Save>:
c0021797:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002179b:	dd 30                	fnsave [eax]
c002179d:	c3                   	ret    

c002179e <x87Load>:
c002179e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217a2:	dd 20                	frstor [eax]
c00217a4:	c3                   	ret    

c00217a5 <x87Init>:
c00217a5:	0f 20 c0             	mov    eax,cr0
c00217a8:	66 25 fb ff          	and    ax,0xfffb
c00217ac:	66 0d 22 00          	or     ax,0x22
c00217b0:	0f 22 c0             	mov    cr0,eax
c00217b3:	db e3                	fninit 
c00217b5:	0f 06                	clts   
c00217b7:	d9 2d 74 17 02 c0    	fldcw  WORD PTR ds:0xc0021774
c00217bd:	c3                   	ret    

c00217be <x87Close>:
c00217be:	c3                   	ret    
c00217bf:	90                   	nop

c00217c0 <__do_global_ctors_aux>:
c00217c0:	a1 74 27 02 c0       	mov    eax,ds:0xc0022774
c00217c5:	83 f8 ff             	cmp    eax,0xffffffff
c00217c8:	74 1a                	je     c00217e4 <__do_global_ctors_aux+0x24>
c00217ca:	55                   	push   ebp
c00217cb:	89 e5                	mov    ebp,esp
c00217cd:	53                   	push   ebx
c00217ce:	52                   	push   edx
c00217cf:	bb 74 27 02 c0       	mov    ebx,0xc0022774
c00217d4:	ff d0                	call   eax
c00217d6:	83 eb 04             	sub    ebx,0x4
c00217d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00217db:	83 f8 ff             	cmp    eax,0xffffffff
c00217de:	75 f4                	jne    c00217d4 <__do_global_ctors_aux+0x14>
c00217e0:	58                   	pop    eax
c00217e1:	5b                   	pop    ebx
c00217e2:	5d                   	pop    ebp
c00217e3:	c3                   	ret    
c00217e4:	c3                   	ret    
c00217e5:	66 90                	xchg   ax,ax
c00217e7:	90                   	nop

c00217e8 <__divdi3>:
c00217e8:	55                   	push   ebp
c00217e9:	57                   	push   edi
c00217ea:	56                   	push   esi
c00217eb:	53                   	push   ebx
c00217ec:	83 ec 1c             	sub    esp,0x1c
c00217ef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00217f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00217f7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00217fa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00217fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021802:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021806:	85 db                	test   ebx,ebx
c0021808:	0f 88 8e 00 00 00    	js     c002189c <__divdi3+0xb4>
c002180e:	89 dd                	mov    ebp,ebx
c0021810:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021818:	89 d3                	mov    ebx,edx
c002181a:	85 d2                	test   edx,edx
c002181c:	79 0d                	jns    c002182b <__divdi3+0x43>
c002181e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021822:	f7 d8                	neg    eax
c0021824:	83 d2 00             	adc    edx,0x0
c0021827:	f7 da                	neg    edx
c0021829:	89 d3                	mov    ebx,edx
c002182b:	89 c7                	mov    edi,eax
c002182d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021830:	85 db                	test   ebx,ebx
c0021832:	75 48                	jne    c002187c <__divdi3+0x94>
c0021834:	39 ef                	cmp    edi,ebp
c0021836:	76 24                	jbe    c002185c <__divdi3+0x74>
c0021838:	89 ea                	mov    edx,ebp
c002183a:	f7 f7                	div    edi
c002183c:	89 c1                	mov    ecx,eax
c002183e:	31 f6                	xor    esi,esi
c0021840:	89 c8                	mov    eax,ecx
c0021842:	89 f2                	mov    edx,esi
c0021844:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021848:	85 c9                	test   ecx,ecx
c002184a:	74 07                	je     c0021853 <__divdi3+0x6b>
c002184c:	f7 d8                	neg    eax
c002184e:	83 d2 00             	adc    edx,0x0
c0021851:	f7 da                	neg    edx
c0021853:	83 c4 1c             	add    esp,0x1c
c0021856:	5b                   	pop    ebx
c0021857:	5e                   	pop    esi
c0021858:	5f                   	pop    edi
c0021859:	5d                   	pop    ebp
c002185a:	c3                   	ret    
c002185b:	90                   	nop
c002185c:	85 ff                	test   edi,edi
c002185e:	75 0b                	jne    c002186b <__divdi3+0x83>
c0021860:	b8 01 00 00 00       	mov    eax,0x1
c0021865:	31 d2                	xor    edx,edx
c0021867:	f7 f3                	div    ebx
c0021869:	89 c7                	mov    edi,eax
c002186b:	31 d2                	xor    edx,edx
c002186d:	89 e8                	mov    eax,ebp
c002186f:	f7 f7                	div    edi
c0021871:	89 c6                	mov    esi,eax
c0021873:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021876:	f7 f7                	div    edi
c0021878:	89 c1                	mov    ecx,eax
c002187a:	eb c4                	jmp    c0021840 <__divdi3+0x58>
c002187c:	39 eb                	cmp    ebx,ebp
c002187e:	77 3c                	ja     c00218bc <__divdi3+0xd4>
c0021880:	0f bd f3             	bsr    esi,ebx
c0021883:	83 f6 1f             	xor    esi,0x1f
c0021886:	75 40                	jne    c00218c8 <__divdi3+0xe0>
c0021888:	39 eb                	cmp    ebx,ebp
c002188a:	72 09                	jb     c0021895 <__divdi3+0xad>
c002188c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002188f:	0f 87 97 00 00 00    	ja     c002192c <__divdi3+0x144>
c0021895:	b9 01 00 00 00       	mov    ecx,0x1
c002189a:	eb a4                	jmp    c0021840 <__divdi3+0x58>
c002189c:	f7 d9                	neg    ecx
c002189e:	83 d3 00             	adc    ebx,0x0
c00218a1:	f7 db                	neg    ebx
c00218a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00218a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00218aa:	89 dd                	mov    ebp,ebx
c00218ac:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00218b4:	e9 5f ff ff ff       	jmp    c0021818 <__divdi3+0x30>
c00218b9:	8d 76 00             	lea    esi,[esi+0x0]
c00218bc:	31 f6                	xor    esi,esi
c00218be:	31 c9                	xor    ecx,ecx
c00218c0:	e9 7b ff ff ff       	jmp    c0021840 <__divdi3+0x58>
c00218c5:	8d 76 00             	lea    esi,[esi+0x0]
c00218c8:	b8 20 00 00 00       	mov    eax,0x20
c00218cd:	29 f0                	sub    eax,esi
c00218cf:	89 f1                	mov    ecx,esi
c00218d1:	d3 e3                	shl    ebx,cl
c00218d3:	89 fa                	mov    edx,edi
c00218d5:	88 c1                	mov    cl,al
c00218d7:	d3 ea                	shr    edx,cl
c00218d9:	09 da                	or     edx,ebx
c00218db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218df:	89 f1                	mov    ecx,esi
c00218e1:	d3 e7                	shl    edi,cl
c00218e3:	89 eb                	mov    ebx,ebp
c00218e5:	88 c1                	mov    cl,al
c00218e7:	d3 eb                	shr    ebx,cl
c00218e9:	89 f1                	mov    ecx,esi
c00218eb:	d3 e5                	shl    ebp,cl
c00218ed:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00218f0:	88 c1                	mov    cl,al
c00218f2:	d3 ea                	shr    edx,cl
c00218f4:	09 d5                	or     ebp,edx
c00218f6:	89 e8                	mov    eax,ebp
c00218f8:	89 da                	mov    edx,ebx
c00218fa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00218fe:	89 d3                	mov    ebx,edx
c0021900:	89 c5                	mov    ebp,eax
c0021902:	f7 e7                	mul    edi
c0021904:	39 d3                	cmp    ebx,edx
c0021906:	72 18                	jb     c0021920 <__divdi3+0x138>
c0021908:	74 0a                	je     c0021914 <__divdi3+0x12c>
c002190a:	89 e9                	mov    ecx,ebp
c002190c:	31 f6                	xor    esi,esi
c002190e:	e9 2d ff ff ff       	jmp    c0021840 <__divdi3+0x58>
c0021913:	90                   	nop
c0021914:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021917:	89 f1                	mov    ecx,esi
c0021919:	d3 e7                	shl    edi,cl
c002191b:	39 c7                	cmp    edi,eax
c002191d:	73 eb                	jae    c002190a <__divdi3+0x122>
c002191f:	90                   	nop
c0021920:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021923:	31 f6                	xor    esi,esi
c0021925:	e9 16 ff ff ff       	jmp    c0021840 <__divdi3+0x58>
c002192a:	66 90                	xchg   ax,ax
c002192c:	31 c9                	xor    ecx,ecx
c002192e:	e9 0d ff ff ff       	jmp    c0021840 <__divdi3+0x58>
c0021933:	90                   	nop

c0021934 <__moddi3>:
c0021934:	55                   	push   ebp
c0021935:	57                   	push   edi
c0021936:	56                   	push   esi
c0021937:	53                   	push   ebx
c0021938:	83 ec 2c             	sub    esp,0x2c
c002193b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002193f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021943:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021947:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002194b:	85 db                	test   ebx,ebx
c002194d:	0f 88 85 00 00 00    	js     c00219d8 <__moddi3+0xa4>
c0021953:	89 de                	mov    esi,ebx
c0021955:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002195d:	89 d7                	mov    edi,edx
c002195f:	85 d2                	test   edx,edx
c0021961:	79 09                	jns    c002196c <__moddi3+0x38>
c0021963:	f7 d8                	neg    eax
c0021965:	83 d2 00             	adc    edx,0x0
c0021968:	f7 da                	neg    edx
c002196a:	89 d7                	mov    edi,edx
c002196c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021970:	89 cd                	mov    ebp,ecx
c0021972:	85 ff                	test   edi,edi
c0021974:	75 52                	jne    c00219c8 <__moddi3+0x94>
c0021976:	89 c3                	mov    ebx,eax
c0021978:	39 f0                	cmp    eax,esi
c002197a:	76 24                	jbe    c00219a0 <__moddi3+0x6c>
c002197c:	89 c8                	mov    eax,ecx
c002197e:	89 f2                	mov    edx,esi
c0021980:	f7 f3                	div    ebx
c0021982:	89 d6                	mov    esi,edx
c0021984:	89 f0                	mov    eax,esi
c0021986:	31 d2                	xor    edx,edx
c0021988:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002198c:	85 c9                	test   ecx,ecx
c002198e:	74 07                	je     c0021997 <__moddi3+0x63>
c0021990:	f7 d8                	neg    eax
c0021992:	83 d2 00             	adc    edx,0x0
c0021995:	f7 da                	neg    edx
c0021997:	83 c4 2c             	add    esp,0x2c
c002199a:	5b                   	pop    ebx
c002199b:	5e                   	pop    esi
c002199c:	5f                   	pop    edi
c002199d:	5d                   	pop    ebp
c002199e:	c3                   	ret    
c002199f:	90                   	nop
c00219a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00219a4:	85 db                	test   ebx,ebx
c00219a6:	75 0d                	jne    c00219b5 <__moddi3+0x81>
c00219a8:	b8 01 00 00 00       	mov    eax,0x1
c00219ad:	31 d2                	xor    edx,edx
c00219af:	f7 f7                	div    edi
c00219b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00219b5:	89 f0                	mov    eax,esi
c00219b7:	31 d2                	xor    edx,edx
c00219b9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00219bd:	f7 f7                	div    edi
c00219bf:	89 e8                	mov    eax,ebp
c00219c1:	f7 f7                	div    edi
c00219c3:	89 d6                	mov    esi,edx
c00219c5:	eb bd                	jmp    c0021984 <__moddi3+0x50>
c00219c7:	90                   	nop
c00219c8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00219cc:	39 f7                	cmp    edi,esi
c00219ce:	76 20                	jbe    c00219f0 <__moddi3+0xbc>
c00219d0:	89 c8                	mov    eax,ecx
c00219d2:	89 f2                	mov    edx,esi
c00219d4:	eb b2                	jmp    c0021988 <__moddi3+0x54>
c00219d6:	66 90                	xchg   ax,ax
c00219d8:	f7 d9                	neg    ecx
c00219da:	83 d3 00             	adc    ebx,0x0
c00219dd:	f7 db                	neg    ebx
c00219df:	89 de                	mov    esi,ebx
c00219e1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00219e9:	e9 6f ff ff ff       	jmp    c002195d <__moddi3+0x29>
c00219ee:	66 90                	xchg   ax,ax
c00219f0:	0f bd c7             	bsr    eax,edi
c00219f3:	83 f0 1f             	xor    eax,0x1f
c00219f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00219fa:	75 24                	jne    c0021a20 <__moddi3+0xec>
c00219fc:	39 f7                	cmp    edi,esi
c00219fe:	72 06                	jb     c0021a06 <__moddi3+0xd2>
c0021a00:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021a04:	77 0c                	ja     c0021a12 <__moddi3+0xde>
c0021a06:	89 e9                	mov    ecx,ebp
c0021a08:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021a0c:	19 fe                	sbb    esi,edi
c0021a0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021a12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a16:	89 f2                	mov    edx,esi
c0021a18:	e9 6b ff ff ff       	jmp    c0021988 <__moddi3+0x54>
c0021a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0021a20:	b8 20 00 00 00       	mov    eax,0x20
c0021a25:	89 c2                	mov    edx,eax
c0021a27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021a2b:	29 da                	sub    edx,ebx
c0021a2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021a31:	88 d9                	mov    cl,bl
c0021a33:	d3 e7                	shl    edi,cl
c0021a35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a39:	88 d1                	mov    cl,dl
c0021a3b:	d3 e8                	shr    eax,cl
c0021a3d:	09 c7                	or     edi,eax
c0021a3f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021a47:	89 d8                	mov    eax,ebx
c0021a49:	88 d9                	mov    cl,bl
c0021a4b:	d3 e7                	shl    edi,cl
c0021a4d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021a51:	89 f3                	mov    ebx,esi
c0021a53:	88 d1                	mov    cl,dl
c0021a55:	d3 eb                	shr    ebx,cl
c0021a57:	89 c7                	mov    edi,eax
c0021a59:	88 c1                	mov    cl,al
c0021a5b:	d3 e6                	shl    esi,cl
c0021a5d:	89 e8                	mov    eax,ebp
c0021a5f:	88 d1                	mov    cl,dl
c0021a61:	d3 e8                	shr    eax,cl
c0021a63:	09 f0                	or     eax,esi
c0021a65:	89 f9                	mov    ecx,edi
c0021a67:	d3 e5                	shl    ebp,cl
c0021a69:	89 da                	mov    edx,ebx
c0021a6b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021a6f:	89 d3                	mov    ebx,edx
c0021a71:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021a75:	89 c6                	mov    esi,eax
c0021a77:	89 d1                	mov    ecx,edx
c0021a79:	39 d3                	cmp    ebx,edx
c0021a7b:	72 27                	jb     c0021aa4 <__moddi3+0x170>
c0021a7d:	74 21                	je     c0021aa0 <__moddi3+0x16c>
c0021a7f:	29 f5                	sub    ebp,esi
c0021a81:	19 cb                	sbb    ebx,ecx
c0021a83:	89 de                	mov    esi,ebx
c0021a85:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021a89:	d3 e6                	shl    esi,cl
c0021a8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021a8f:	89 f9                	mov    ecx,edi
c0021a91:	d3 ed                	shr    ebp,cl
c0021a93:	09 ee                	or     esi,ebp
c0021a95:	89 f0                	mov    eax,esi
c0021a97:	d3 eb                	shr    ebx,cl
c0021a99:	89 da                	mov    edx,ebx
c0021a9b:	e9 e8 fe ff ff       	jmp    c0021988 <__moddi3+0x54>
c0021aa0:	39 c5                	cmp    ebp,eax
c0021aa2:	73 db                	jae    c0021a7f <__moddi3+0x14b>
c0021aa4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021aa8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021aac:	89 d1                	mov    ecx,edx
c0021aae:	89 c6                	mov    esi,eax
c0021ab0:	eb cd                	jmp    c0021a7f <__moddi3+0x14b>
c0021ab2:	66 90                	xchg   ax,ax

c0021ab4 <__udivdi3>:
c0021ab4:	55                   	push   ebp
c0021ab5:	57                   	push   edi
c0021ab6:	56                   	push   esi
c0021ab7:	53                   	push   ebx
c0021ab8:	83 ec 1c             	sub    esp,0x1c
c0021abb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021abf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021ac3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021ac7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021acb:	85 d2                	test   edx,edx
c0021acd:	75 41                	jne    c0021b10 <__udivdi3+0x5c>
c0021acf:	39 f7                	cmp    edi,esi
c0021ad1:	76 15                	jbe    c0021ae8 <__udivdi3+0x34>
c0021ad3:	89 e8                	mov    eax,ebp
c0021ad5:	89 f2                	mov    edx,esi
c0021ad7:	f7 f7                	div    edi
c0021ad9:	31 db                	xor    ebx,ebx
c0021adb:	89 da                	mov    edx,ebx
c0021add:	83 c4 1c             	add    esp,0x1c
c0021ae0:	5b                   	pop    ebx
c0021ae1:	5e                   	pop    esi
c0021ae2:	5f                   	pop    edi
c0021ae3:	5d                   	pop    ebp
c0021ae4:	c3                   	ret    
c0021ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ae8:	89 f9                	mov    ecx,edi
c0021aea:	85 ff                	test   edi,edi
c0021aec:	75 0b                	jne    c0021af9 <__udivdi3+0x45>
c0021aee:	b8 01 00 00 00       	mov    eax,0x1
c0021af3:	31 d2                	xor    edx,edx
c0021af5:	f7 f7                	div    edi
c0021af7:	89 c1                	mov    ecx,eax
c0021af9:	31 d2                	xor    edx,edx
c0021afb:	89 f0                	mov    eax,esi
c0021afd:	f7 f1                	div    ecx
c0021aff:	89 c3                	mov    ebx,eax
c0021b01:	89 e8                	mov    eax,ebp
c0021b03:	f7 f1                	div    ecx
c0021b05:	89 da                	mov    edx,ebx
c0021b07:	83 c4 1c             	add    esp,0x1c
c0021b0a:	5b                   	pop    ebx
c0021b0b:	5e                   	pop    esi
c0021b0c:	5f                   	pop    edi
c0021b0d:	5d                   	pop    ebp
c0021b0e:	c3                   	ret    
c0021b0f:	90                   	nop
c0021b10:	39 f2                	cmp    edx,esi
c0021b12:	77 1c                	ja     c0021b30 <__udivdi3+0x7c>
c0021b14:	0f bd da             	bsr    ebx,edx
c0021b17:	83 f3 1f             	xor    ebx,0x1f
c0021b1a:	75 24                	jne    c0021b40 <__udivdi3+0x8c>
c0021b1c:	39 f2                	cmp    edx,esi
c0021b1e:	72 08                	jb     c0021b28 <__udivdi3+0x74>
c0021b20:	39 ef                	cmp    edi,ebp
c0021b22:	0f 87 84 00 00 00    	ja     c0021bac <__udivdi3+0xf8>
c0021b28:	b8 01 00 00 00       	mov    eax,0x1
c0021b2d:	eb ac                	jmp    c0021adb <__udivdi3+0x27>
c0021b2f:	90                   	nop
c0021b30:	31 db                	xor    ebx,ebx
c0021b32:	31 c0                	xor    eax,eax
c0021b34:	89 da                	mov    edx,ebx
c0021b36:	83 c4 1c             	add    esp,0x1c
c0021b39:	5b                   	pop    ebx
c0021b3a:	5e                   	pop    esi
c0021b3b:	5f                   	pop    edi
c0021b3c:	5d                   	pop    ebp
c0021b3d:	c3                   	ret    
c0021b3e:	66 90                	xchg   ax,ax
c0021b40:	b8 20 00 00 00       	mov    eax,0x20
c0021b45:	29 d8                	sub    eax,ebx
c0021b47:	88 d9                	mov    cl,bl
c0021b49:	d3 e2                	shl    edx,cl
c0021b4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021b4f:	89 fa                	mov    edx,edi
c0021b51:	88 c1                	mov    cl,al
c0021b53:	d3 ea                	shr    edx,cl
c0021b55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021b59:	09 d1                	or     ecx,edx
c0021b5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021b5f:	88 d9                	mov    cl,bl
c0021b61:	d3 e7                	shl    edi,cl
c0021b63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021b67:	89 f7                	mov    edi,esi
c0021b69:	88 c1                	mov    cl,al
c0021b6b:	d3 ef                	shr    edi,cl
c0021b6d:	88 d9                	mov    cl,bl
c0021b6f:	d3 e6                	shl    esi,cl
c0021b71:	89 ea                	mov    edx,ebp
c0021b73:	88 c1                	mov    cl,al
c0021b75:	d3 ea                	shr    edx,cl
c0021b77:	09 d6                	or     esi,edx
c0021b79:	89 f0                	mov    eax,esi
c0021b7b:	89 fa                	mov    edx,edi
c0021b7d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021b81:	89 d7                	mov    edi,edx
c0021b83:	89 c6                	mov    esi,eax
c0021b85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021b89:	39 d7                	cmp    edi,edx
c0021b8b:	72 13                	jb     c0021ba0 <__udivdi3+0xec>
c0021b8d:	74 09                	je     c0021b98 <__udivdi3+0xe4>
c0021b8f:	89 f0                	mov    eax,esi
c0021b91:	31 db                	xor    ebx,ebx
c0021b93:	e9 43 ff ff ff       	jmp    c0021adb <__udivdi3+0x27>
c0021b98:	88 d9                	mov    cl,bl
c0021b9a:	d3 e5                	shl    ebp,cl
c0021b9c:	39 c5                	cmp    ebp,eax
c0021b9e:	73 ef                	jae    c0021b8f <__udivdi3+0xdb>
c0021ba0:	8d 46 ff             	lea    eax,[esi-0x1]
c0021ba3:	31 db                	xor    ebx,ebx
c0021ba5:	e9 31 ff ff ff       	jmp    c0021adb <__udivdi3+0x27>
c0021baa:	66 90                	xchg   ax,ax
c0021bac:	31 c0                	xor    eax,eax
c0021bae:	e9 28 ff ff ff       	jmp    c0021adb <__udivdi3+0x27>
c0021bb3:	90                   	nop

c0021bb4 <__umoddi3>:
c0021bb4:	55                   	push   ebp
c0021bb5:	57                   	push   edi
c0021bb6:	56                   	push   esi
c0021bb7:	53                   	push   ebx
c0021bb8:	83 ec 1c             	sub    esp,0x1c
c0021bbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021bbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021bc3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021bc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021bcb:	89 da                	mov    edx,ebx
c0021bcd:	85 c0                	test   eax,eax
c0021bcf:	75 37                	jne    c0021c08 <__umoddi3+0x54>
c0021bd1:	39 df                	cmp    edi,ebx
c0021bd3:	76 13                	jbe    c0021be8 <__umoddi3+0x34>
c0021bd5:	89 f0                	mov    eax,esi
c0021bd7:	f7 f7                	div    edi
c0021bd9:	89 d0                	mov    eax,edx
c0021bdb:	31 d2                	xor    edx,edx
c0021bdd:	83 c4 1c             	add    esp,0x1c
c0021be0:	5b                   	pop    ebx
c0021be1:	5e                   	pop    esi
c0021be2:	5f                   	pop    edi
c0021be3:	5d                   	pop    ebp
c0021be4:	c3                   	ret    
c0021be5:	8d 76 00             	lea    esi,[esi+0x0]
c0021be8:	89 fd                	mov    ebp,edi
c0021bea:	85 ff                	test   edi,edi
c0021bec:	75 0b                	jne    c0021bf9 <__umoddi3+0x45>
c0021bee:	b8 01 00 00 00       	mov    eax,0x1
c0021bf3:	31 d2                	xor    edx,edx
c0021bf5:	f7 f7                	div    edi
c0021bf7:	89 c5                	mov    ebp,eax
c0021bf9:	89 d8                	mov    eax,ebx
c0021bfb:	31 d2                	xor    edx,edx
c0021bfd:	f7 f5                	div    ebp
c0021bff:	89 f0                	mov    eax,esi
c0021c01:	f7 f5                	div    ebp
c0021c03:	89 d0                	mov    eax,edx
c0021c05:	eb d4                	jmp    c0021bdb <__umoddi3+0x27>
c0021c07:	90                   	nop
c0021c08:	89 f1                	mov    ecx,esi
c0021c0a:	39 d8                	cmp    eax,ebx
c0021c0c:	76 0a                	jbe    c0021c18 <__umoddi3+0x64>
c0021c0e:	89 f0                	mov    eax,esi
c0021c10:	83 c4 1c             	add    esp,0x1c
c0021c13:	5b                   	pop    ebx
c0021c14:	5e                   	pop    esi
c0021c15:	5f                   	pop    edi
c0021c16:	5d                   	pop    ebp
c0021c17:	c3                   	ret    
c0021c18:	0f bd e8             	bsr    ebp,eax
c0021c1b:	83 f5 1f             	xor    ebp,0x1f
c0021c1e:	75 1c                	jne    c0021c3c <__umoddi3+0x88>
c0021c20:	39 d8                	cmp    eax,ebx
c0021c22:	72 04                	jb     c0021c28 <__umoddi3+0x74>
c0021c24:	39 f7                	cmp    edi,esi
c0021c26:	77 08                	ja     c0021c30 <__umoddi3+0x7c>
c0021c28:	89 da                	mov    edx,ebx
c0021c2a:	29 fe                	sub    esi,edi
c0021c2c:	19 c2                	sbb    edx,eax
c0021c2e:	89 f1                	mov    ecx,esi
c0021c30:	89 c8                	mov    eax,ecx
c0021c32:	83 c4 1c             	add    esp,0x1c
c0021c35:	5b                   	pop    ebx
c0021c36:	5e                   	pop    esi
c0021c37:	5f                   	pop    edi
c0021c38:	5d                   	pop    ebp
c0021c39:	c3                   	ret    
c0021c3a:	66 90                	xchg   ax,ax
c0021c3c:	ba 20 00 00 00       	mov    edx,0x20
c0021c41:	29 ea                	sub    edx,ebp
c0021c43:	89 e9                	mov    ecx,ebp
c0021c45:	d3 e0                	shl    eax,cl
c0021c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c4b:	89 f8                	mov    eax,edi
c0021c4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021c51:	88 d1                	mov    cl,dl
c0021c53:	d3 e8                	shr    eax,cl
c0021c55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c59:	09 c1                	or     ecx,eax
c0021c5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021c5f:	89 e9                	mov    ecx,ebp
c0021c61:	d3 e7                	shl    edi,cl
c0021c63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021c67:	89 d8                	mov    eax,ebx
c0021c69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021c6d:	88 d1                	mov    cl,dl
c0021c6f:	d3 e8                	shr    eax,cl
c0021c71:	89 c7                	mov    edi,eax
c0021c73:	89 e9                	mov    ecx,ebp
c0021c75:	d3 e3                	shl    ebx,cl
c0021c77:	89 f0                	mov    eax,esi
c0021c79:	88 d1                	mov    cl,dl
c0021c7b:	d3 e8                	shr    eax,cl
c0021c7d:	09 d8                	or     eax,ebx
c0021c7f:	89 e9                	mov    ecx,ebp
c0021c81:	d3 e6                	shl    esi,cl
c0021c83:	89 f3                	mov    ebx,esi
c0021c85:	89 fa                	mov    edx,edi
c0021c87:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021c8b:	89 d1                	mov    ecx,edx
c0021c8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021c91:	89 c6                	mov    esi,eax
c0021c93:	89 d7                	mov    edi,edx
c0021c95:	39 d1                	cmp    ecx,edx
c0021c97:	72 27                	jb     c0021cc0 <__umoddi3+0x10c>
c0021c99:	74 21                	je     c0021cbc <__umoddi3+0x108>
c0021c9b:	89 ca                	mov    edx,ecx
c0021c9d:	29 f3                	sub    ebx,esi
c0021c9f:	19 fa                	sbb    edx,edi
c0021ca1:	89 d0                	mov    eax,edx
c0021ca3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021ca7:	d3 e0                	shl    eax,cl
c0021ca9:	89 e9                	mov    ecx,ebp
c0021cab:	d3 eb                	shr    ebx,cl
c0021cad:	09 d8                	or     eax,ebx
c0021caf:	d3 ea                	shr    edx,cl
c0021cb1:	83 c4 1c             	add    esp,0x1c
c0021cb4:	5b                   	pop    ebx
c0021cb5:	5e                   	pop    esi
c0021cb6:	5f                   	pop    edi
c0021cb7:	5d                   	pop    ebp
c0021cb8:	c3                   	ret    
c0021cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0021cbc:	39 c3                	cmp    ebx,eax
c0021cbe:	73 db                	jae    c0021c9b <__umoddi3+0xe7>
c0021cc0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021cc4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021cc8:	89 d7                	mov    edi,edx
c0021cca:	89 c6                	mov    esi,eax
c0021ccc:	eb cd                	jmp    c0021c9b <__umoddi3+0xe7>

Disassembly of section .init:

c0021cce <_init>:
c0021cce:	55                   	push   ebp
c0021ccf:	89 e5                	mov    ebp,esp
c0021cd1:	e8 1e e4 fd ff       	call   c00000f4 <frame_dummy>
c0021cd6:	e8 e5 fa ff ff       	call   c00217c0 <__do_global_ctors_aux>
c0021cdb:	5d                   	pop    ebp
c0021cdc:	c3                   	ret    

Disassembly of section .fini:

c0021cdd <_fini>:
c0021cdd:	55                   	push   ebp
c0021cde:	89 e5                	mov    ebp,esp
c0021ce0:	e8 9f e3 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021ce5:	5d                   	pop    ebp
c0021ce6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021ce8 <DriverlessDevice::~DriverlessDevice()>:
c0021ce8:	ba 7c 37 02 c0       	mov    edx,0xc002377c
c0021ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf1:	89 10                	mov    DWORD PTR [eax],edx
c0021cf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf7:	50                   	push   eax
c0021cf8:	e8 fb 7b fe ff       	call   c00098f8 <Device::~Device()>
c0021cfd:	83 c4 04             	add    esp,0x4
c0021d00:	90                   	nop
c0021d01:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021d02 <DriverlessDevice::~DriverlessDevice()>:
c0021d02:	83 ec 0c             	sub    esp,0xc
c0021d05:	83 ec 0c             	sub    esp,0xc
c0021d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d0c:	e8 d7 ff ff ff       	call   c0021ce8 <DriverlessDevice::~DriverlessDevice()>
c0021d11:	83 c4 10             	add    esp,0x10
c0021d14:	83 ec 08             	sub    esp,0x8
c0021d17:	68 58 01 00 00       	push   0x158
c0021d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d20:	e8 d0 b5 fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0021d25:	83 c4 10             	add    esp,0x10
c0021d28:	83 c4 0c             	add    esp,0xc
c0021d2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021d2c <LinkedList<Device>::addElement(Device*)>:
c0021d2c:	83 ec 0c             	sub    esp,0xc
c0021d2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021d34:	75 10                	jne    c0021d46 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021d36:	83 ec 0c             	sub    esp,0xc
c0021d39:	68 10 37 02 c0       	push   0xc0023710
c0021d3e:	e8 bf e0 fe ff       	call   c000fe02 <KePanic(char const*)>
c0021d43:	83 c4 10             	add    esp,0x10
c0021d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d4c:	85 c0                	test   eax,eax
c0021d4e:	74 3a                	je     c0021d8a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d57:	85 c0                	test   eax,eax
c0021d59:	74 2f                	je     c0021d8a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d66:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d7e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021d88:	eb 68                	jmp    c0021df2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d90:	85 c0                	test   eax,eax
c0021d92:	75 4e                	jne    c0021de2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d9b:	85 c0                	test   eax,eax
c0021d9d:	75 43                	jne    c0021de2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021da7:	89 10                	mov    DWORD PTR [eax],edx
c0021da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021db1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021db8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021dbb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dc9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021dcc:	85 c0                	test   eax,eax
c0021dce:	74 22                	je     c0021df2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021dd0:	83 ec 0c             	sub    esp,0xc
c0021dd3:	68 32 37 02 c0       	push   0xc0023732
c0021dd8:	e8 25 e0 fe ff       	call   c000fe02 <KePanic(char const*)>
c0021ddd:	83 c4 10             	add    esp,0x10
c0021de0:	eb 10                	jmp    c0021df2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021de2:	83 ec 0c             	sub    esp,0xc
c0021de5:	68 3c 37 02 c0       	push   0xc002373c
c0021dea:	e8 13 e0 fe ff       	call   c000fe02 <KePanic(char const*)>
c0021def:	83 c4 10             	add    esp,0x10
c0021df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021df6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021df9:	8d 50 01             	lea    edx,[eax+0x1]
c0021dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e00:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021e03:	90                   	nop
c0021e04:	83 c4 0c             	add    esp,0xc
c0021e07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021e08 <LinkedList<Device>::LinkedList()>:
c0021e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e48:	90                   	nop
c0021e49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021e4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e50:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e52:	85 c0                	test   eax,eax
c0021e54:	75 0e                	jne    c0021e64 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e5d:	85 c0                	test   eax,eax
c0021e5f:	75 03                	jne    c0021e64 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021e61:	b0 01                	mov    al,0x1
c0021e63:	c3                   	ret    
c0021e64:	b0 00                	mov    al,0x0
c0021e66:	90                   	nop
c0021e67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021e68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e6e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021e70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021e70:	83 ec 0c             	sub    esp,0xc
c0021e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e79:	85 c0                	test   eax,eax
c0021e7b:	75 17                	jne    c0021e94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021e7d:	83 ec 0c             	sub    esp,0xc
c0021e80:	68 ac 39 02 c0       	push   0xc00239ac
c0021e85:	e8 78 df fe ff       	call   c000fe02 <KePanic(char const*)>
c0021e8a:	83 c4 10             	add    esp,0x10
c0021e8d:	e9 96 00 00 00       	jmp    c0021f28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021e92:	66 90                	xchg   ax,ax
c0021e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021e9e:	85 c0                	test   eax,eax
c0021ea0:	0f 95 c0             	setne  al
c0021ea3:	0f b6 c0             	movzx  eax,al
c0021ea6:	85 c0                	test   eax,eax
c0021ea8:	74 12                	je     c0021ebc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021eaa:	83 ec 0c             	sub    esp,0xc
c0021ead:	68 f7 39 02 c0       	push   0xc00239f7
c0021eb2:	e8 4b df fe ff       	call   c000fe02 <KePanic(char const*)>
c0021eb7:	83 c4 10             	add    esp,0x10
c0021eba:	66 90                	xchg   ax,ax
c0021ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ec2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021ec5:	85 c0                	test   eax,eax
c0021ec7:	0f 94 c0             	sete   al
c0021eca:	0f b6 c0             	movzx  eax,al
c0021ecd:	85 c0                	test   eax,eax
c0021ecf:	74 33                	je     c0021f04 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021edf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021eed:	83 f8 01             	cmp    eax,0x1
c0021ef0:	74 22                	je     c0021f14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021ef2:	83 ec 0c             	sub    esp,0xc
c0021ef5:	68 d0 39 02 c0       	push   0xc00239d0
c0021efa:	e8 03 df fe ff       	call   c000fe02 <KePanic(char const*)>
c0021eff:	83 c4 10             	add    esp,0x10
c0021f02:	eb 10                	jmp    c0021f14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f08:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f0a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f11:	89 10                	mov    DWORD PTR [eax],edx
c0021f13:	90                   	nop
c0021f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f1b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f25:	8d 76 00             	lea    esi,[esi+0x0]
c0021f28:	83 c4 0c             	add    esp,0xc
c0021f2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021f2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021f2c:	83 ec 0c             	sub    esp,0xc
c0021f2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021f34:	75 12                	jne    c0021f48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021f36:	83 ec 0c             	sub    esp,0xc
c0021f39:	68 10 37 02 c0       	push   0xc0023710
c0021f3e:	e8 bf de fe ff       	call   c000fe02 <KePanic(char const*)>
c0021f43:	83 c4 10             	add    esp,0x10
c0021f46:	66 90                	xchg   ax,ax
c0021f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f4e:	85 c0                	test   eax,eax
c0021f50:	74 36                	je     c0021f88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f59:	85 c0                	test   eax,eax
c0021f5b:	74 2b                	je     c0021f88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f68:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021f84:	eb 6a                	jmp    c0021ff0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021f86:	66 90                	xchg   ax,ax
c0021f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f8e:	85 c0                	test   eax,eax
c0021f90:	75 4e                	jne    c0021fe0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f99:	85 c0                	test   eax,eax
c0021f9b:	75 43                	jne    c0021fe0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fa1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fa5:	89 10                	mov    DWORD PTR [eax],edx
c0021fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021faf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fb9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021fc7:	85 c0                	test   eax,eax
c0021fc9:	74 25                	je     c0021ff0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021fcb:	83 ec 0c             	sub    esp,0xc
c0021fce:	68 32 37 02 c0       	push   0xc0023732
c0021fd3:	e8 2a de fe ff       	call   c000fe02 <KePanic(char const*)>
c0021fd8:	83 c4 10             	add    esp,0x10
c0021fdb:	eb 13                	jmp    c0021ff0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0021fe0:	83 ec 0c             	sub    esp,0xc
c0021fe3:	68 3c 37 02 c0       	push   0xc002373c
c0021fe8:	e8 15 de fe ff       	call   c000fe02 <KePanic(char const*)>
c0021fed:	83 c4 10             	add    esp,0x10
c0021ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ff7:	8d 50 01             	lea    edx,[eax+0x1]
c0021ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ffe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022001:	90                   	nop
c0022002:	83 c4 0c             	add    esp,0xc
c0022005:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022008 <ACPI::~ACPI()>:
c0022008:	83 ec 0c             	sub    esp,0xc
c002200b:	ba 2c 3e 02 c0       	mov    edx,0xc0023e2c
c0022010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022014:	89 10                	mov    DWORD PTR [eax],edx
c0022016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201a:	83 ec 0c             	sub    esp,0xc
c002201d:	50                   	push   eax
c002201e:	e8 d5 78 fe ff       	call   c00098f8 <Device::~Device()>
c0022023:	83 c4 10             	add    esp,0x10
c0022026:	90                   	nop
c0022027:	83 c4 0c             	add    esp,0xc
c002202a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002202c <ACPI::~ACPI()>:
c002202c:	83 ec 0c             	sub    esp,0xc
c002202f:	83 ec 0c             	sub    esp,0xc
c0022032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022036:	e8 cd ff ff ff       	call   c0022008 <ACPI::~ACPI()>
c002203b:	83 c4 10             	add    esp,0x10
c002203e:	83 ec 08             	sub    esp,0x8
c0022041:	68 64 12 00 00       	push   0x1264
c0022046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002204a:	e8 a6 b2 fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c002204f:	83 c4 10             	add    esp,0x10
c0022052:	83 c4 0c             	add    esp,0xc
c0022055:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022058 <LinkedList<Device>::~LinkedList()>:
c0022058:	90                   	nop
c0022059:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002205c <LinkedList<Device>::isEmpty()>:
c002205c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022060:	8b 00                	mov    eax,DWORD PTR [eax]
c0022062:	85 c0                	test   eax,eax
c0022064:	75 0e                	jne    c0022074 <LinkedList<Device>::isEmpty()+0x18>
c0022066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002206a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002206d:	85 c0                	test   eax,eax
c002206f:	75 03                	jne    c0022074 <LinkedList<Device>::isEmpty()+0x18>
c0022071:	b0 01                	mov    al,0x1
c0022073:	c3                   	ret    
c0022074:	b0 00                	mov    al,0x0
c0022076:	90                   	nop
c0022077:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022078 <LinkedList<Device>::getFirstElement()>:
c0022078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002207c:	8b 00                	mov    eax,DWORD PTR [eax]
c002207e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022080 <LinkedList<Device>::removeFirst()>:
c0022080:	83 ec 0c             	sub    esp,0xc
c0022083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022087:	8b 00                	mov    eax,DWORD PTR [eax]
c0022089:	85 c0                	test   eax,eax
c002208b:	75 17                	jne    c00220a4 <LinkedList<Device>::removeFirst()+0x24>
c002208d:	83 ec 0c             	sub    esp,0xc
c0022090:	68 ac 39 02 c0       	push   0xc00239ac
c0022095:	e8 68 dd fe ff       	call   c000fe02 <KePanic(char const*)>
c002209a:	83 c4 10             	add    esp,0x10
c002209d:	e9 92 00 00 00       	jmp    c0022134 <LinkedList<Device>::removeFirst()+0xb4>
c00220a2:	66 90                	xchg   ax,ax
c00220a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220ab:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00220b1:	85 c0                	test   eax,eax
c00220b3:	74 13                	je     c00220c8 <LinkedList<Device>::removeFirst()+0x48>
c00220b5:	83 ec 0c             	sub    esp,0xc
c00220b8:	68 f7 39 02 c0       	push   0xc00239f7
c00220bd:	e8 40 dd fe ff       	call   c000fe02 <KePanic(char const*)>
c00220c2:	83 c4 10             	add    esp,0x10
c00220c5:	8d 76 00             	lea    esi,[esi+0x0]
c00220c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ce:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00220d4:	85 c0                	test   eax,eax
c00220d6:	75 34                	jne    c002210c <LinkedList<Device>::removeFirst()+0x8c>
c00220d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220f4:	83 f8 01             	cmp    eax,0x1
c00220f7:	74 27                	je     c0022120 <LinkedList<Device>::removeFirst()+0xa0>
c00220f9:	83 ec 0c             	sub    esp,0xc
c00220fc:	68 d0 39 02 c0       	push   0xc00239d0
c0022101:	e8 fc dc fe ff       	call   c000fe02 <KePanic(char const*)>
c0022106:	83 c4 10             	add    esp,0x10
c0022109:	eb 15                	jmp    c0022120 <LinkedList<Device>::removeFirst()+0xa0>
c002210b:	90                   	nop
c002210c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022110:	8b 00                	mov    eax,DWORD PTR [eax]
c0022112:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211c:	89 10                	mov    DWORD PTR [eax],edx
c002211e:	66 90                	xchg   ax,ax
c0022120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022124:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022127:	8d 50 ff             	lea    edx,[eax-0x1]
c002212a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002212e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022131:	8d 76 00             	lea    esi,[esi+0x0]
c0022134:	83 c4 0c             	add    esp,0xc
c0022137:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022138 <Computer::~Computer()>:
c0022138:	83 ec 0c             	sub    esp,0xc
c002213b:	ba c8 3f 02 c0       	mov    edx,0xc0023fc8
c0022140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022144:	89 10                	mov    DWORD PTR [eax],edx
c0022146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214a:	83 ec 0c             	sub    esp,0xc
c002214d:	50                   	push   eax
c002214e:	e8 a5 77 fe ff       	call   c00098f8 <Device::~Device()>
c0022153:	83 c4 10             	add    esp,0x10
c0022156:	90                   	nop
c0022157:	83 c4 0c             	add    esp,0xc
c002215a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002215c <Computer::~Computer()>:
c002215c:	83 ec 0c             	sub    esp,0xc
c002215f:	83 ec 0c             	sub    esp,0xc
c0022162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022166:	e8 cd ff ff ff       	call   c0022138 <Computer::~Computer()>
c002216b:	83 c4 10             	add    esp,0x10
c002216e:	83 ec 08             	sub    esp,0x8
c0022171:	68 68 01 00 00       	push   0x168
c0022176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002217a:	e8 76 b1 fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c002217f:	83 c4 10             	add    esp,0x10
c0022182:	83 c4 0c             	add    esp,0xc
c0022185:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022186 <idleCommon()>:
c0022186:	83 ec 0c             	sub    esp,0xc
c0022189:	fa                   	cli    
c002218a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0022190:	e8 ab 4d ff ff       	call   c0016f40 <schedule()>
c0022195:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c002219c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00221a3:	75 01                	jne    c00221a6 <idleCommon()+0x20>
c00221a5:	fb                   	sti    
c00221a6:	83 c4 0c             	add    esp,0xc
c00221a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00221aa <LinkedList<UnixFile>::~LinkedList()>:
c00221aa:	90                   	nop
c00221ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00221ac <LinkedList<UnixFile>::LinkedList()>:
c00221ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221ec:	90                   	nop
c00221ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00221ee <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00221ee:	83 ec 0c             	sub    esp,0xc
c00221f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00221f6:	75 10                	jne    c0022208 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00221f8:	83 ec 0c             	sub    esp,0xc
c00221fb:	68 10 37 02 c0       	push   0xc0023710
c0022200:	e8 fd db fe ff       	call   c000fe02 <KePanic(char const*)>
c0022205:	83 c4 10             	add    esp,0x10
c0022208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220c:	8b 00                	mov    eax,DWORD PTR [eax]
c002220e:	85 c0                	test   eax,eax
c0022210:	74 34                	je     c0022246 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022216:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022219:	85 c0                	test   eax,eax
c002221b:	74 29                	je     c0022246 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002221d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022221:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022224:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022228:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002222b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022233:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002223d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022244:	eb 65                	jmp    c00222ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224a:	8b 00                	mov    eax,DWORD PTR [eax]
c002224c:	85 c0                	test   eax,eax
c002224e:	75 4b                	jne    c002229b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022257:	85 c0                	test   eax,eax
c0022259:	75 40                	jne    c002229b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002225b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022263:	89 10                	mov    DWORD PTR [eax],edx
c0022265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022269:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002226d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022277:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002227e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022282:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022285:	85 c0                	test   eax,eax
c0022287:	74 22                	je     c00222ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022289:	83 ec 0c             	sub    esp,0xc
c002228c:	68 32 37 02 c0       	push   0xc0023732
c0022291:	e8 6c db fe ff       	call   c000fe02 <KePanic(char const*)>
c0022296:	83 c4 10             	add    esp,0x10
c0022299:	eb 10                	jmp    c00222ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002229b:	83 ec 0c             	sub    esp,0xc
c002229e:	68 3c 37 02 c0       	push   0xc002373c
c00222a3:	e8 5a db fe ff       	call   c000fe02 <KePanic(char const*)>
c00222a8:	83 c4 10             	add    esp,0x10
c00222ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222b2:	8d 50 01             	lea    edx,[eax+0x1]
c00222b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222bc:	90                   	nop
c00222bd:	83 c4 0c             	add    esp,0xc
c00222c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00222c2 <LinkedList<UnixFile>::getFirstElement()>:
c00222c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00222c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00222ca <LinkedList<UnixFile>::removeFirst()>:
c00222ca:	83 ec 0c             	sub    esp,0xc
c00222cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00222d3:	85 c0                	test   eax,eax
c00222d5:	75 12                	jne    c00222e9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00222d7:	83 ec 0c             	sub    esp,0xc
c00222da:	68 ac 39 02 c0       	push   0xc00239ac
c00222df:	e8 1e db fe ff       	call   c000fe02 <KePanic(char const*)>
c00222e4:	83 c4 10             	add    esp,0x10
c00222e7:	eb 7e                	jmp    c0022367 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00222e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222f3:	85 c0                	test   eax,eax
c00222f5:	74 10                	je     c0022307 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00222f7:	83 ec 0c             	sub    esp,0xc
c00222fa:	68 f7 39 02 c0       	push   0xc00239f7
c00222ff:	e8 fe da fe ff       	call   c000fe02 <KePanic(char const*)>
c0022304:	83 c4 10             	add    esp,0x10
c0022307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230b:	8b 00                	mov    eax,DWORD PTR [eax]
c002230d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022310:	85 c0                	test   eax,eax
c0022312:	75 33                	jne    c0022347 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022318:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002231e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022322:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002232d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022330:	83 f8 01             	cmp    eax,0x1
c0022333:	74 21                	je     c0022356 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022335:	83 ec 0c             	sub    esp,0xc
c0022338:	68 d0 39 02 c0       	push   0xc00239d0
c002233d:	e8 c0 da fe ff       	call   c000fe02 <KePanic(char const*)>
c0022342:	83 c4 10             	add    esp,0x10
c0022345:	eb 0f                	jmp    c0022356 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234b:	8b 00                	mov    eax,DWORD PTR [eax]
c002234d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022354:	89 10                	mov    DWORD PTR [eax],edx
c0022356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002235d:	8d 50 ff             	lea    edx,[eax-0x1]
c0022360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022364:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022367:	83 c4 0c             	add    esp,0xc
c002236a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002236c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002236c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022370:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022373:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022374 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022378:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002237b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002237c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002237c:	90                   	nop
c002237d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022380 <ThreadControlBlock::ThreadControlBlock()>:
c0022380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022384:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002238b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002239a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00223a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00223ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b0:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00223b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223bb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00223bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c3:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00223c7:	90                   	nop
c00223c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00223cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00223cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00223d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00223e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00223ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00223f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022405:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002240c:	90                   	nop
c002240d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002240e <IOAPIC::~IOAPIC()>:
c002240e:	83 ec 0c             	sub    esp,0xc
c0022411:	ba a4 54 02 c0       	mov    edx,0xc00254a4
c0022416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241a:	89 10                	mov    DWORD PTR [eax],edx
c002241c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022420:	83 ec 0c             	sub    esp,0xc
c0022423:	50                   	push   eax
c0022424:	e8 cf 74 fe ff       	call   c00098f8 <Device::~Device()>
c0022429:	83 c4 10             	add    esp,0x10
c002242c:	90                   	nop
c002242d:	83 c4 0c             	add    esp,0xc
c0022430:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022432 <IOAPIC::~IOAPIC()>:
c0022432:	83 ec 0c             	sub    esp,0xc
c0022435:	83 ec 0c             	sub    esp,0xc
c0022438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002243c:	e8 cd ff ff ff       	call   c002240e <IOAPIC::~IOAPIC()>
c0022441:	83 c4 10             	add    esp,0x10
c0022444:	83 ec 08             	sub    esp,0x8
c0022447:	68 68 01 00 00       	push   0x168
c002244c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022450:	e8 a0 ae fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022455:	83 c4 10             	add    esp,0x10
c0022458:	83 c4 0c             	add    esp,0xc
c002245b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002245c <CPU::~CPU()>:
c002245c:	83 ec 0c             	sub    esp,0xc
c002245f:	ba 18 58 02 c0       	mov    edx,0xc0025818
c0022464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022468:	89 10                	mov    DWORD PTR [eax],edx
c002246a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002246e:	83 ec 0c             	sub    esp,0xc
c0022471:	50                   	push   eax
c0022472:	e8 81 74 fe ff       	call   c00098f8 <Device::~Device()>
c0022477:	83 c4 10             	add    esp,0x10
c002247a:	90                   	nop
c002247b:	83 c4 0c             	add    esp,0xc
c002247e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022480 <CPU::~CPU()>:
c0022480:	83 ec 0c             	sub    esp,0xc
c0022483:	83 ec 0c             	sub    esp,0xc
c0022486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002248a:	e8 cd ff ff ff       	call   c002245c <CPU::~CPU()>
c002248f:	83 c4 10             	add    esp,0x10
c0022492:	83 ec 08             	sub    esp,0x8
c0022495:	68 78 11 00 00       	push   0x1178
c002249a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002249e:	e8 52 ae fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00224a3:	83 c4 10             	add    esp,0x10
c00224a6:	83 c4 0c             	add    esp,0xc
c00224a9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00224aa <PCI::~PCI()>:
c00224aa:	83 ec 0c             	sub    esp,0xc
c00224ad:	ba 7c 5d 02 c0       	mov    edx,0xc0025d7c
c00224b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b6:	89 10                	mov    DWORD PTR [eax],edx
c00224b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224bc:	83 ec 0c             	sub    esp,0xc
c00224bf:	50                   	push   eax
c00224c0:	e8 d7 64 fe ff       	call   c000899c <Bus::~Bus()>
c00224c5:	83 c4 10             	add    esp,0x10
c00224c8:	90                   	nop
c00224c9:	83 c4 0c             	add    esp,0xc
c00224cc:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00224ce <PCI::~PCI()>:
c00224ce:	83 ec 0c             	sub    esp,0xc
c00224d1:	83 ec 0c             	sub    esp,0xc
c00224d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224d8:	e8 cd ff ff ff       	call   c00224aa <PCI::~PCI()>
c00224dd:	83 c4 10             	add    esp,0x10
c00224e0:	83 ec 08             	sub    esp,0x8
c00224e3:	68 5c 01 00 00       	push   0x15c
c00224e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224ec:	e8 04 ae fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00224f1:	83 c4 10             	add    esp,0x10
c00224f4:	83 c4 0c             	add    esp,0xc
c00224f7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00224f8 <IDE::~IDE()>:
c00224f8:	83 ec 0c             	sub    esp,0xc
c00224fb:	ba cc 5e 02 c0       	mov    edx,0xc0025ecc
c0022500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022504:	89 10                	mov    DWORD PTR [eax],edx
c0022506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002250a:	83 ec 0c             	sub    esp,0xc
c002250d:	50                   	push   eax
c002250e:	e8 75 78 fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0022513:	83 c4 10             	add    esp,0x10
c0022516:	90                   	nop
c0022517:	83 c4 0c             	add    esp,0xc
c002251a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002251c <IDE::~IDE()>:
c002251c:	83 ec 0c             	sub    esp,0xc
c002251f:	83 ec 0c             	sub    esp,0xc
c0022522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022526:	e8 cd ff ff ff       	call   c00224f8 <IDE::~IDE()>
c002252b:	83 c4 10             	add    esp,0x10
c002252e:	83 ec 08             	sub    esp,0x8
c0022531:	68 70 02 00 00       	push   0x270
c0022536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002253a:	e8 b6 ad fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c002253f:	83 c4 10             	add    esp,0x10
c0022542:	83 c4 0c             	add    esp,0xc
c0022545:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022546 <SATABus::~SATABus()>:
c0022546:	83 ec 0c             	sub    esp,0xc
c0022549:	ba 1c 5f 02 c0       	mov    edx,0xc0025f1c
c002254e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022552:	89 10                	mov    DWORD PTR [eax],edx
c0022554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022558:	83 ec 0c             	sub    esp,0xc
c002255b:	50                   	push   eax
c002255c:	e8 27 78 fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0022561:	83 c4 10             	add    esp,0x10
c0022564:	90                   	nop
c0022565:	83 c4 0c             	add    esp,0xc
c0022568:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002256a <SATABus::~SATABus()>:
c002256a:	83 ec 0c             	sub    esp,0xc
c002256d:	83 ec 0c             	sub    esp,0xc
c0022570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022574:	e8 cd ff ff ff       	call   c0022546 <SATABus::~SATABus()>
c0022579:	83 c4 10             	add    esp,0x10
c002257c:	83 ec 08             	sub    esp,0x8
c002257f:	68 64 01 00 00       	push   0x164
c0022584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022588:	e8 68 ad fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c002258d:	83 c4 10             	add    esp,0x10
c0022590:	83 c4 0c             	add    esp,0xc
c0022593:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022594 <ATA::~ATA()>:
c0022594:	83 ec 0c             	sub    esp,0xc
c0022597:	ba 04 60 02 c0       	mov    edx,0xc0026004
c002259c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a0:	89 10                	mov    DWORD PTR [eax],edx
c00225a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a6:	83 ec 0c             	sub    esp,0xc
c00225a9:	50                   	push   eax
c00225aa:	e8 bb 78 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c00225af:	83 c4 10             	add    esp,0x10
c00225b2:	90                   	nop
c00225b3:	83 c4 0c             	add    esp,0xc
c00225b6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00225b8 <ATA::~ATA()>:
c00225b8:	83 ec 0c             	sub    esp,0xc
c00225bb:	83 ec 0c             	sub    esp,0xc
c00225be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225c2:	e8 cd ff ff ff       	call   c0022594 <ATA::~ATA()>
c00225c7:	83 c4 10             	add    esp,0x10
c00225ca:	83 ec 08             	sub    esp,0x8
c00225cd:	68 8c 01 00 00       	push   0x18c
c00225d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225d6:	e8 1a ad fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00225db:	83 c4 10             	add    esp,0x10
c00225de:	83 c4 0c             	add    esp,0xc
c00225e1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00225e2 <ATAPI::~ATAPI()>:
c00225e2:	83 ec 0c             	sub    esp,0xc
c00225e5:	ba 4c 60 02 c0       	mov    edx,0xc002604c
c00225ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ee:	89 10                	mov    DWORD PTR [eax],edx
c00225f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225f4:	83 ec 0c             	sub    esp,0xc
c00225f7:	50                   	push   eax
c00225f8:	e8 6d 78 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c00225fd:	83 c4 10             	add    esp,0x10
c0022600:	90                   	nop
c0022601:	83 c4 0c             	add    esp,0xc
c0022604:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022606 <ATAPI::~ATAPI()>:
c0022606:	83 ec 0c             	sub    esp,0xc
c0022609:	83 ec 0c             	sub    esp,0xc
c002260c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022610:	e8 cd ff ff ff       	call   c00225e2 <ATAPI::~ATAPI()>
c0022615:	83 c4 10             	add    esp,0x10
c0022618:	83 ec 08             	sub    esp,0x8
c002261b:	68 84 01 00 00       	push   0x184
c0022620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022624:	e8 cc ac fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022629:	83 c4 10             	add    esp,0x10
c002262c:	83 c4 0c             	add    esp,0xc
c002262f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022630 <SATA::~SATA()>:
c0022630:	83 ec 0c             	sub    esp,0xc
c0022633:	ba 0c 61 02 c0       	mov    edx,0xc002610c
c0022638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002263c:	89 10                	mov    DWORD PTR [eax],edx
c002263e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022642:	83 ec 0c             	sub    esp,0xc
c0022645:	50                   	push   eax
c0022646:	e8 1f 78 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002264b:	83 c4 10             	add    esp,0x10
c002264e:	90                   	nop
c002264f:	83 c4 0c             	add    esp,0xc
c0022652:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022654 <SATA::~SATA()>:
c0022654:	83 ec 0c             	sub    esp,0xc
c0022657:	83 ec 0c             	sub    esp,0xc
c002265a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002265e:	e8 cd ff ff ff       	call   c0022630 <SATA::~SATA()>
c0022663:	83 c4 10             	add    esp,0x10
c0022666:	83 ec 08             	sub    esp,0x8
c0022669:	68 7c 01 00 00       	push   0x17c
c002266e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022672:	e8 7e ac fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022677:	83 c4 10             	add    esp,0x10
c002267a:	83 c4 0c             	add    esp,0xc
c002267d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002267e <SATAPI::~SATAPI()>:
c002267e:	83 ec 0c             	sub    esp,0xc
c0022681:	ba 30 62 02 c0       	mov    edx,0xc0026230
c0022686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002268a:	89 10                	mov    DWORD PTR [eax],edx
c002268c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022690:	83 ec 0c             	sub    esp,0xc
c0022693:	50                   	push   eax
c0022694:	e8 d1 77 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0022699:	83 c4 10             	add    esp,0x10
c002269c:	90                   	nop
c002269d:	83 c4 0c             	add    esp,0xc
c00226a0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00226a2 <SATAPI::~SATAPI()>:
c00226a2:	83 ec 0c             	sub    esp,0xc
c00226a5:	83 ec 0c             	sub    esp,0xc
c00226a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226ac:	e8 cd ff ff ff       	call   c002267e <SATAPI::~SATAPI()>
c00226b1:	83 c4 10             	add    esp,0x10
c00226b4:	83 ec 08             	sub    esp,0x8
c00226b7:	68 84 01 00 00       	push   0x184
c00226bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226c0:	e8 30 ac fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c00226c5:	83 c4 10             	add    esp,0x10
c00226c8:	83 c4 0c             	add    esp,0xc
c00226cb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00226cc <APICTimer::~APICTimer()>:
c00226cc:	83 ec 0c             	sub    esp,0xc
c00226cf:	ba 84 62 02 c0       	mov    edx,0xc0026284
c00226d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d8:	89 10                	mov    DWORD PTR [eax],edx
c00226da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226de:	83 ec 0c             	sub    esp,0xc
c00226e1:	50                   	push   eax
c00226e2:	e8 51 89 fe ff       	call   c000b038 <Timer::~Timer()>
c00226e7:	83 c4 10             	add    esp,0x10
c00226ea:	90                   	nop
c00226eb:	83 c4 0c             	add    esp,0xc
c00226ee:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00226f0 <APICTimer::~APICTimer()>:
c00226f0:	83 ec 0c             	sub    esp,0xc
c00226f3:	83 ec 0c             	sub    esp,0xc
c00226f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226fa:	e8 cd ff ff ff       	call   c00226cc <APICTimer::~APICTimer()>
c00226ff:	83 c4 10             	add    esp,0x10
c0022702:	83 ec 08             	sub    esp,0x8
c0022705:	68 60 01 00 00       	push   0x160
c002270a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002270e:	e8 e2 ab fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022713:	83 c4 10             	add    esp,0x10
c0022716:	83 c4 0c             	add    esp,0xc
c0022719:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002271c <PIT::~PIT()>:
c002271c:	83 ec 0c             	sub    esp,0xc
c002271f:	ba d4 62 02 c0       	mov    edx,0xc00262d4
c0022724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022728:	89 10                	mov    DWORD PTR [eax],edx
c002272a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002272e:	83 ec 0c             	sub    esp,0xc
c0022731:	50                   	push   eax
c0022732:	e8 01 89 fe ff       	call   c000b038 <Timer::~Timer()>
c0022737:	83 c4 10             	add    esp,0x10
c002273a:	90                   	nop
c002273b:	83 c4 0c             	add    esp,0xc
c002273e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022740 <PIT::~PIT()>:
c0022740:	83 ec 0c             	sub    esp,0xc
c0022743:	83 ec 0c             	sub    esp,0xc
c0022746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002274a:	e8 cd ff ff ff       	call   c002271c <PIT::~PIT()>
c002274f:	83 c4 10             	add    esp,0x10
c0022752:	83 ec 08             	sub    esp,0x8
c0022755:	68 5c 01 00 00       	push   0x15c
c002275a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002275e:	e8 92 ab fe ff       	call   c000d2f5 <operator delete(void*, unsigned long)>
c0022763:	83 c4 10             	add    esp,0x10
c0022766:	83 c4 0c             	add    esp,0xc
c0022769:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be d7 44 02 c0       	mov    esi,0xc00244d7
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be f3 44 02 c0       	mov    esi,0xc00244f3
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
