
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a7 f5 00 00       	call   c000f5c7 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 5c 02 c0       	mov    eax,0xc0025c88
c0000025:	3d 88 5c 02 c0       	cmp    eax,0xc0025c88
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 5c 02 c0       	push   0xc0025c88
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 5c 02 c0       	mov    eax,0xc0025c88
c0000051:	2d 88 5c 02 c0       	sub    eax,0xc0025c88
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 5c 02 c0       	push   0xc0025c88
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 40 19 02 c0       	mov    ebx,0xc0021940
c0000097:	81 eb 3c 19 02 c0    	sub    ebx,0xc002193c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 3c 19 02 c0       	mov    esi,0xc002193c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 5c 02 c0       	push   0xc0025c88
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 88 5c 02 c0       	push   0xc0025c88
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 47 58 01 00       	call   c0015af4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 3e 3b 01 00       	call   c0013e03 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 25 58 01 00       	call   c0015af4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 66 5d 01 00       	call   c0016054 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 15 62 01 00       	call   c001650c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 d0 02 c0 	lgdtd  ds:0xc002d0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 56 e8 00 00       	jmp    c000ebd5 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 19 02 c0 02 	test   BYTE PTR [edx-0x3ffde6a0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 19 02 c0 01 	test   BYTE PTR [edx-0x3ffde6a0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 19 02 c0 08 	test   BYTE PTR [edx-0x3ffde6a0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 19 02 c0 08 	test   BYTE PTR [edx-0x3ffde6a0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 19 02 c0 04 	test   BYTE PTR [ecx-0x3ffde6a0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 19 02 c0 01 	test   BYTE PTR [edx-0x3ffde6a0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000e2a:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e8e:	e8 83 e4 00 00       	call   c000f316 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 90 e3 00 00       	call   c000f2b8 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 6b e2 00 00       	call   c000f282 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 66 e2 00 00       	call   c000f2b8 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 5c e1 00 00       	call   c000f282 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 77 e0 00 00       	call   c000f282 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 61 e0 00 00       	call   c000f282 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c0001313:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000136a:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c00013b3:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013ce:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c0001488:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c000148e:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001495:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000155b:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001561:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c0001568:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 71 02 c0       	mov    edx,0xc0027100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c00016b6:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 64 1a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde59c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 c0 db 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2440]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 99 91 01 00       	jmp    c001b154 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 c0 db 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2440]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 c3 91 01 00       	jmp    c001b194 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 c0 db 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2440]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 e4 91 01 00       	jmp    c001b1d4 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 c0 1b 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffde440]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 c0 1b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde440]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 34 48 02 c0       	mov    edx,0xc0024834
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 7c 1a 02 c0       	mov    edx,0xc0021a7c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 82 1a 02 c0       	mov    eax,0xc0021a82
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 40 1b 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffde4c0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 8b 1a 02 c0       	mov    eax,0xc0021a8b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 c0 1b 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffde440]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 10 1b 02 c0       	mov    eax,0xc0021b10
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 00 1b 02 c0       	mov    ebx,0xc0021b00
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 e0 1a 02 c0       	mov    eax,0xc0021ae0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 f0 1a 02 c0       	mov    eax,0xc0021af0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 92 1a 02 c0       	mov    edx,0xc0021a92
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 9e 1a 02 c0       	mov    edx,0xc0021a9e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba b2 1a 02 c0       	mov    edx,0xc0021ab2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 55 95 00 00       	call   c000f398 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 4d 95 00 00       	call   c000f3a8 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c e0 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ee0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 e0 1e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021ee0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 e0 1c 02 c0       	mov    eax,0xc0021ce0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 20 1c 02 c0       	mov    eax,0xc0021c20
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 e0 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde420]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 e0 1f 02 c0       	push   0xc0021fe0
c0006327:	e8 cc 57 01 00       	call   c001baf8 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ee 1f 02 c0       	push   0xc0021fee
c000635f:	e8 94 57 01 00       	call   c001baf8 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 fd 56 01 00       	call   c001ba9c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 70 02 c0       	mov    eax,0xc0027080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 70 02 c0       	mov    eax,0xc0027020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 fd 1f 02 c0       	push   0xc0021ffd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c000675b:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006765:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c000677d:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067f6:	8b 9d 4c 75 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd8ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c000688d:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068ef:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c000692c:	05 40 75 02 c0       	add    eax,0xc0027540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069ec:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 00 20 02 c0       	push   0xc0022000
c0006a0f:	e8 e4 50 01 00       	call   c001baf8 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 f2 50 01 00       	call   c001bb14 <iso_kprintfd>
c0006a22:	c7 04 24 05 20 02 c0 	mov    DWORD PTR [esp],0xc0022005
c0006a29:	e8 ca 50 01 00       	call   c001baf8 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a35:	e8 da 50 01 00       	call   c001bb14 <iso_kprintfd>
c0006a3a:	c7 04 24 0b 20 02 c0 	mov    DWORD PTR [esp],0xc002200b
c0006a41:	e8 b2 50 01 00       	call   c001baf8 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a4d:	e8 c2 50 01 00       	call   c001bb14 <iso_kprintfd>
c0006a52:	c7 04 24 11 20 02 c0 	mov    DWORD PTR [esp],0xc0022011
c0006a59:	e8 9a 50 01 00       	call   c001baf8 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a65:	e8 aa 50 01 00       	call   c001bb14 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006acb:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 75 02 c0    	lea    ebp,[edi-0x3ffd8aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 75 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd8aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 fd 1f 02 c0       	push   0xc0021ffd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006c0a:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006c10:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 75 02 c0    	lea    eax,[edi-0x3ffd8ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 1a 20 02 c0       	push   0xc002201a
c0006c32:	e8 c1 4e 01 00       	call   c001baf8 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c67:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 25 20 02 c0       	push   0xc0022025
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 2c 20 02 c0       	push   0xc002202c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006d05:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d28:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 33 20 02 c0       	push   0xc0022033
c0006d49:	e8 aa 4d 01 00       	call   c001baf8 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 3e 20 02 c0       	push   0xc002203e
c0006d64:	e8 8f 4d 01 00       	call   c001baf8 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 75 02 c0       	push   0xc0027540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 05 86 00 00       	call   c000f398 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d9f:	e8 f4 85 00 00       	call   c000f398 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 df 85 00 00       	call   c000f398 <malloc>
c0006db9:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 c6 85 00 00       	call   c000f398 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006dff:	e8 a4 85 00 00       	call   c000f3a8 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 96 85 00 00       	call   c000f3a8 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 7c 85 00 00       	call   c000f3a8 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 67 85 00 00       	call   c000f3a8 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 24 d1 02 c0 10 	test   BYTE PTR ds:0xc002d124,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 24 d1 02 c0 10 	test   BYTE PTR ds:0xc002d124,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 50 20 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddfb0]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 a0 21 02 c0       	push   0xc00221a0
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 b4 21 02 c0       	push   0xc00221b4
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 be 21 02 c0       	push   0xc00221be
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 c8 21 02 c0       	push   0xc00221c8
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 0c 23 02 c0       	push   0xc002230c
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 d2 21 02 c0       	push   0xc00221d2
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 2c 23 02 c0       	push   0xc002232c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 e7 21 02 c0       	push   0xc00221e7
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 01 22 02 c0       	push   0xc0022201
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 54 23 02 c0       	push   0xc0022354
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 0c 23 02 c0       	push   0xc002230c
c00071bc:	e8 1d 85 00 00       	call   c000f6de <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 9c 23 02 c0       	push   0xc002239c
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 9c 23 02 c0       	push   0xc002239c
c00071eb:	e8 ee 84 00 00       	call   c000f6de <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 0c 22 02 c0       	push   0xc002220c
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 0c 22 02 c0       	push   0xc002220c
c0007217:	e8 c2 84 00 00       	call   c000f6de <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 29 22 02 c0       	push   0xc0022229
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 29 22 02 c0       	push   0xc0022229
c0007243:	e8 96 84 00 00       	call   c000f6de <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 bc 23 02 c0       	push   0xc00223bc
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 bc 23 02 c0       	push   0xc00223bc
c000726f:	e8 6a 84 00 00       	call   c000f6de <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 e0 23 02 c0       	push   0xc00223e0
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 e0 23 02 c0       	push   0xc00223e0
c000729b:	e8 3e 84 00 00       	call   c000f6de <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 45 22 02 c0       	push   0xc0022245
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 45 22 02 c0       	push   0xc0022245
c00072c7:	e8 12 84 00 00       	call   c000f6de <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 61 22 02 c0       	push   0xc0022261
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 61 22 02 c0       	push   0xc0022261
c00072f3:	e8 e6 83 00 00       	call   c000f6de <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 00 24 02 c0       	push   0xc0022400
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 00 24 02 c0       	push   0xc0022400
c000731f:	e8 ba 83 00 00       	call   c000f6de <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 24 24 02 c0       	push   0xc0022424
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 24 24 02 c0       	push   0xc0022424
c000734b:	e8 8e 83 00 00       	call   c000f6de <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 e6 7f 00 00       	call   c000f398 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c00073bb:	68 43 24 02 c0       	push   0xc0022443
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 64 0d 00 00       	call   c000812c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 61 24 02 c0       	push   0xc0022461
c00073d7:	e8 02 83 00 00       	call   c000f6de <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 61 0d 00 00       	call   c000814a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 7b 24 02 c0       	push   0xc002247b
c00073f8:	e8 e1 82 00 00       	call   c000f6de <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 95 24 02 c0       	push   0xc0022495
c000743f:	e8 9a 82 00 00       	call   c000f6de <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 af 24 02 c0       	push   0xc00224af
c000746f:	e8 6a 82 00 00       	call   c000f6de <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 25 0d 00 00       	call   c00081a8 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 d8 66 00 00       	call   c000db99 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 f1 8b 00 00       	call   c00100cc <KeRand()>
c00074db:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 c9 24 02 c0       	push   0xc00224c9
c0007510:	e8 c9 81 00 00       	call   c000f6de <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c000755b:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 83 02 c0       	push   0xc0028300
c00075d0:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075da:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 92 53 00 00       	call   c000c989 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 95 7d 00 00       	call   c000f398 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c000760c:	68 43 24 02 c0       	push   0xc0022443
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 13 0b 00 00       	call   c000812c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 d2 24 02 c0       	push   0xc00224d2
c0007628:	e8 b1 80 00 00       	call   c000f6de <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 d5 0d 00 00       	call   c000840e <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 00 0b 00 00       	call   c000814a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 ef 24 02 c0       	push   0xc00224ef
c0007659:	e8 80 80 00 00       	call   c000f6de <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 3e 0b 00 00       	call   c00081a8 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 c6 0a 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 0c 25 02 c0       	push   0xc002250c
c0007693:	e8 46 80 00 00       	call   c000f6de <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 a4 0a 00 00       	call   c00081a8 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007776:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 06 7c 00 00       	call   c000f398 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c000779b:	68 43 24 02 c0       	push   0xc0022443
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 84 09 00 00       	call   c000812c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 27 25 02 c0       	push   0xc0022527
c00077b7:	e8 22 7f 00 00       	call   c000f6de <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 44 0c 00 00       	call   c000840e <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 6f 09 00 00       	call   c000814a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 42 25 02 c0       	push   0xc0022542
c00077ea:	e8 ef 7e 00 00       	call   c000f6de <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 59 09 00 00       	call   c00081a8 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 3b 09 00 00       	call   c00081a8 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 df 7a 00 00       	call   c000f398 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 61 08 00 00       	call   c000812c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 6a 08 00 00       	call   c000814a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 d1 0a 00 00       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 ab 07 00 00       	call   c00081a8 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 92 07 00 00       	call   c00081a8 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 55 79 00 00       	call   c000f398 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 d9 06 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 5d 25 02 c0       	mov    esi,0xc002255d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 6e 06 00 00       	call   c00081a8 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 56 06 00 00       	call   c00081a8 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 34 26 02 c0       	mov    edx,0xc0022634
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 4d ab 00 00       	call   c0012822 <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 0e 4e 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 50 26 02 c0       	mov    edx,0xc0022650
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 ff aa 00 00       	call   c0012822 <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 c0 4d 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba c8 25 02 c0       	mov    edx,0xc00225c8
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba c8 25 02 c0       	mov    edx,0xc00225c8
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 6a 4d 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 b8 75 00 00       	call   c000f398 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 0c 35 01 00       	call   c001b2f4 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 a4 75 00 00       	call   c000f398 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 26 44 01 00       	call   c001c222 <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 f3 40 02 c0       	push   0xc00240f3
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 66 25 02 c0       	push   0xc0022566
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 81 25 02 c0       	push   0xc0022581
c0008018:	e8 c1 76 00 00       	call   c000f6de <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 f4 a5 00 00       	call   c001263c <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 34 26 02 c0       	mov    edx,0xc0022634
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000809e:	83 c2 0d             	add    edx,0xd
c00080a1:	83 ec 04             	sub    esp,0x4
c00080a4:	50                   	push   eax
c00080a5:	52                   	push   edx
c00080a6:	68 a7 25 02 c0       	push   0xc00225a7
c00080ab:	e8 9e ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080b0:	83 c4 10             	add    esp,0x10
c00080b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080ba:	83 e8 41             	sub    eax,0x41
c00080bd:	88 c2                	mov    dl,al
c00080bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080db:	0f b6 c0             	movzx  eax,al
c00080de:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 3e                	je     c0008127 <File::File(char const*, Process*, bool)+0xf9>
c00080e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f3:	0f b6 c0             	movzx  eax,al
c00080f6:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c00080fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008103:	85 c0                	test   eax,eax
c0008105:	75 20                	jne    c0008127 <File::File(char const*, Process*, bool)+0xf9>
c0008107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008111:	0f b6 c0             	movzx  eax,al
c0008114:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	50                   	push   eax
c000811f:	e8 1e 21 00 00       	call   c000a242 <LogicalDisk::mount()>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	90                   	nop
c0008128:	83 c4 1c             	add    esp,0x1c
c000812b:	c3                   	ret    

c000812c <File::File(char const*, Process*)>:
c000812c:	83 ec 0c             	sub    esp,0xc
c000812f:	6a 01                	push   0x1
c0008131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813d:	e8 ec fe ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	90                   	nop
c0008146:	83 c4 0c             	add    esp,0xc
c0008149:	c3                   	ret    

c000814a <File::open(FileOpenMode)>:
c000814a:	53                   	push   ebx
c000814b:	b8 0b 00 00 00       	mov    eax,0xb
c0008150:	83 ec 08             	sub    esp,0x8
c0008153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008157:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000815e:	83 fa 19             	cmp    edx,0x19
c0008161:	77 40                	ja     c00081a3 <File::open(FileOpenMode)+0x59>
c0008163:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c000816a:	85 d2                	test   edx,edx
c000816c:	74 35                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c000816e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008174:	85 d2                	test   edx,edx
c0008176:	74 2b                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c0008178:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000817c:	b8 06 00 00 00       	mov    eax,0x6
c0008181:	75 20                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c0008183:	8b 02                	mov    eax,DWORD PTR [edx]
c0008185:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000818b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000818f:	51                   	push   ecx
c0008190:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008193:	51                   	push   ecx
c0008194:	52                   	push   edx
c0008195:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	75 04                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c000819f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a3:	83 c4 08             	add    esp,0x8
c00081a6:	5b                   	pop    ebx
c00081a7:	c3                   	ret    

c00081a8 <File::close()>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081bc:	83 f9 19             	cmp    ecx,0x19
c00081bf:	77 41                	ja     c0008202 <File::close()+0x5a>
c00081c1:	8b 1c 8d e0 aa 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5520]
c00081c8:	85 db                	test   ebx,ebx
c00081ca:	74 36                	je     c0008202 <File::close()+0x5a>
c00081cc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d3:	74 2d                	je     c0008202 <File::close()+0x5a>
c00081d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081d9:	b8 05 00 00 00       	mov    eax,0x5
c00081de:	74 22                	je     c0008202 <File::close()+0x5a>
c00081e0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081e4:	8b 04 8d e0 aa 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5520]
c00081eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f1:	53                   	push   ebx
c00081f2:	53                   	push   ebx
c00081f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081fb:	50                   	push   eax
c00081fc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <File::seek(unsigned long long)>:
c0008208:	56                   	push   esi
c0008209:	b8 0b 00 00 00       	mov    eax,0xb
c000820e:	53                   	push   ebx
c000820f:	51                   	push   ecx
c0008210:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008218:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000821c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008223:	83 fa 19             	cmp    edx,0x19
c0008226:	77 31                	ja     c0008259 <File::seek(unsigned long long)+0x51>
c0008228:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c000822f:	85 d2                	test   edx,edx
c0008231:	74 26                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008233:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008239:	85 d2                	test   edx,edx
c000823b:	74 1c                	je     c0008259 <File::seek(unsigned long long)+0x51>
c000823d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008241:	b8 05 00 00 00       	mov    eax,0x5
c0008246:	74 11                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008248:	8b 02                	mov    eax,DWORD PTR [edx]
c000824a:	53                   	push   ebx
c000824b:	51                   	push   ecx
c000824c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008252:	52                   	push   edx
c0008253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	5a                   	pop    edx
c000825a:	5b                   	pop    ebx
c000825b:	5e                   	pop    esi
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <File::truncate(unsigned long long)>:
c000825e:	56                   	push   esi
c000825f:	b8 0b 00 00 00       	mov    eax,0xb
c0008264:	53                   	push   ebx
c0008265:	51                   	push   ecx
c0008266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000826a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008272:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008279:	83 fa 19             	cmp    edx,0x19
c000827c:	77 31                	ja     c00082af <File::truncate(unsigned long long)+0x51>
c000827e:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0008285:	85 d2                	test   edx,edx
c0008287:	74 26                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008289:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000828f:	85 d2                	test   edx,edx
c0008291:	74 1c                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008293:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008297:	b8 05 00 00 00       	mov    eax,0x5
c000829c:	74 11                	je     c00082af <File::truncate(unsigned long long)+0x51>
c000829e:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a0:	53                   	push   ebx
c00082a1:	51                   	push   ecx
c00082a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082a8:	52                   	push   edx
c00082a9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	5a                   	pop    edx
c00082b0:	5b                   	pop    ebx
c00082b1:	5e                   	pop    esi
c00082b2:	c3                   	ret    
c00082b3:	90                   	nop

c00082b4 <File::tell(unsigned long long*)>:
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	b8 0b 00 00 00       	mov    eax,0xb
c00082bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082c7:	83 fa 19             	cmp    edx,0x19
c00082ca:	77 34                	ja     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082cc:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c00082d3:	85 d2                	test   edx,edx
c00082d5:	74 29                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082dd:	85 d2                	test   edx,edx
c00082df:	74 1f                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082e1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082e5:	b8 05 00 00 00       	mov    eax,0x5
c00082ea:	74 14                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082ec:	50                   	push   eax
c00082ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00082ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082f9:	52                   	push   edx
c00082fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	83 c4 0c             	add    esp,0xc
c0008303:	c3                   	ret    

c0008304 <File::rewind()>:
c0008304:	83 ec 10             	sub    esp,0x10
c0008307:	6a 00                	push   0x0
c0008309:	6a 00                	push   0x0
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 f4 fe ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0008314:	83 c4 1c             	add    esp,0x1c
c0008317:	c3                   	ret    

c0008318 <File::unlink()>:
c0008318:	83 ec 0c             	sub    esp,0xc
c000831b:	b8 0b 00 00 00       	mov    eax,0xb
c0008320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000832b:	83 f9 19             	cmp    ecx,0x19
c000832e:	77 2f                	ja     c000835f <File::unlink()+0x47>
c0008330:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008337:	85 c9                	test   ecx,ecx
c0008339:	74 24                	je     c000835f <File::unlink()+0x47>
c000833b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008341:	85 c9                	test   ecx,ecx
c0008343:	74 1a                	je     c000835f <File::unlink()+0x47>
c0008345:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008349:	b8 06 00 00 00       	mov    eax,0x6
c000834e:	75 0f                	jne    c000835f <File::unlink()+0x47>
c0008350:	50                   	push   eax
c0008351:	83 c2 0d             	add    edx,0xd
c0008354:	50                   	push   eax
c0008355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008357:	52                   	push   edx
c0008358:	51                   	push   ecx
c0008359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	83 c4 0c             	add    esp,0xc
c0008362:	c3                   	ret    
c0008363:	90                   	nop

c0008364 <File::rename(char const*)>:
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	b8 0b 00 00 00       	mov    eax,0xb
c000836c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008377:	83 f9 19             	cmp    ecx,0x19
c000837a:	77 32                	ja     c00083ae <File::rename(char const*)+0x4a>
c000837c:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008383:	85 c9                	test   ecx,ecx
c0008385:	74 27                	je     c00083ae <File::rename(char const*)+0x4a>
c0008387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000838d:	85 c9                	test   ecx,ecx
c000838f:	74 1d                	je     c00083ae <File::rename(char const*)+0x4a>
c0008391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008395:	b8 06 00 00 00       	mov    eax,0x6
c000839a:	75 12                	jne    c00083ae <File::rename(char const*)+0x4a>
c000839c:	50                   	push   eax
c000839d:	83 c2 0d             	add    edx,0xd
c00083a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083a6:	52                   	push   edx
c00083a7:	51                   	push   ecx
c00083a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	83 c4 0c             	add    esp,0xc
c00083b1:	c3                   	ret    

c00083b2 <File::chfatattr(unsigned char, unsigned char)>:
c00083b2:	57                   	push   edi
c00083b3:	b8 0b 00 00 00       	mov    eax,0xb
c00083b8:	56                   	push   esi
c00083b9:	53                   	push   ebx
c00083ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cd:	83 f9 19             	cmp    ecx,0x19
c00083d0:	77 37                	ja     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00083d9:	85 c9                	test   ecx,ecx
c00083db:	74 2c                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e3:	85 c9                	test   ecx,ecx
c00083e5:	74 22                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083eb:	b8 06 00 00 00       	mov    eax,0x6
c00083f0:	75 17                	jne    c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f2:	89 f0                	mov    eax,esi
c00083f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083f6:	0f b6 db             	movzx  ebx,bl
c00083f9:	0f b6 f0             	movzx  esi,al
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	56                   	push   esi
c0008400:	53                   	push   ebx
c0008401:	52                   	push   edx
c0008402:	51                   	push   ecx
c0008403:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	5b                   	pop    ebx
c000840a:	5e                   	pop    esi
c000840b:	5f                   	pop    edi
c000840c:	c3                   	ret    
c000840d:	90                   	nop

c000840e <File::exists()>:
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	31 c0                	xor    eax,eax
c0008413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000841e:	83 f9 19             	cmp    ecx,0x19
c0008421:	77 24                	ja     c0008447 <File::exists()+0x39>
c0008423:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c000842a:	85 c9                	test   ecx,ecx
c000842c:	74 19                	je     c0008447 <File::exists()+0x39>
c000842e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008434:	85 c9                	test   ecx,ecx
c0008436:	74 0f                	je     c0008447 <File::exists()+0x39>
c0008438:	50                   	push   eax
c0008439:	83 c2 0d             	add    edx,0xd
c000843c:	50                   	push   eax
c000843d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000843f:	52                   	push   edx
c0008440:	51                   	push   ecx
c0008441:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008444:	83 c4 10             	add    esp,0x10
c0008447:	83 c4 0c             	add    esp,0xc
c000844a:	c3                   	ret    
c000844b:	90                   	nop

c000844c <File::stat(unsigned long long*, bool*)>:
c000844c:	56                   	push   esi
c000844d:	53                   	push   ebx
c000844e:	50                   	push   eax
c000844f:	b8 0b 00 00 00       	mov    eax,0xb
c0008454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008458:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000845c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008460:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008467:	83 f9 19             	cmp    ecx,0x19
c000846a:	77 3d                	ja     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000846c:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008473:	85 c9                	test   ecx,ecx
c0008475:	74 32                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008477:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000847d:	85 c9                	test   ecx,ecx
c000847f:	74 28                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008481:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008485:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008487:	74 13                	je     c000849c <File::stat(unsigned long long*, bool*)+0x50>
c0008489:	83 ec 04             	sub    esp,0x4
c000848c:	56                   	push   esi
c000848d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008493:	51                   	push   ecx
c0008494:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008497:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000849a:	eb 0a                	jmp    c00084a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000849c:	53                   	push   ebx
c000849d:	83 c2 0d             	add    edx,0xd
c00084a0:	56                   	push   esi
c00084a1:	52                   	push   edx
c00084a2:	51                   	push   ecx
c00084a3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	5a                   	pop    edx
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	c3                   	ret    

c00084ad <Fs::setcwd(Process*, char*)>:
c00084ad:	55                   	push   ebp
c00084ae:	57                   	push   edi
c00084af:	56                   	push   esi
c00084b0:	53                   	push   ebx
c00084b1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084b7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084be:	6a 00                	push   0x0
c00084c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084c6:	57                   	push   edi
c00084c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d2:	56                   	push   esi
c00084d3:	e8 28 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084db:	e8 a0 80 ff ff       	call   c0000580 <strlen>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 f8 02             	cmp    eax,0x2
c00084e6:	77 15                	ja     c00084fd <Fs::setcwd(Process*, char*)+0x50>
c00084e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084ed:	83 eb 41             	sub    ebx,0x41
c00084f0:	8b 04 9d e0 aa 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5520]
c00084f7:	85 c0                	test   eax,eax
c00084f9:	75 1c                	jne    c0008517 <Fs::setcwd(Process*, char*)+0x6a>
c00084fb:	eb 2f                	jmp    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	56                   	push   esi
c0008501:	e8 7a 80 ff ff       	call   c0000580 <strlen>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	83 f8 03             	cmp    eax,0x3
c000850c:	75 57                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c000850e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008513:	75 50                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c0008515:	eb d1                	jmp    c00084e8 <Fs::setcwd(Process*, char*)+0x3b>
c0008517:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000851e:	75 0c                	jne    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	50                   	push   eax
c0008524:	e8 19 1d 00 00       	call   c000a242 <LogicalDisk::mount()>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	83 fb 19             	cmp    ebx,0x19
c000852f:	b8 03 00 00 00       	mov    eax,0x3
c0008534:	0f 87 c6 00 00 00    	ja     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000853a:	8b 14 9d e0 aa 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5520]
c0008541:	b8 05 00 00 00       	mov    eax,0x5
c0008546:	85 d2                	test   edx,edx
c0008548:	0f 84 b2 00 00 00    	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000854e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008555:	b8 06 00 00 00       	mov    eax,0x6
c000855a:	0f 85 92 00 00 00    	jne    c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c0008560:	e9 9b 00 00 00       	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c0008565:	83 ec 0c             	sub    esp,0xc
c0008568:	68 14 01 00 00       	push   0x114
c000856d:	e8 26 6e 00 00       	call   c000f398 <malloc>
c0008572:	83 c4 0c             	add    esp,0xc
c0008575:	55                   	push   ebp
c0008576:	56                   	push   esi
c0008577:	50                   	push   eax
c0008578:	89 c3                	mov    ebx,eax
c000857a:	e8 ad fb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000857f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008584:	83 c4 0c             	add    esp,0xc
c0008587:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000858b:	50                   	push   eax
c000858c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008590:	50                   	push   eax
c0008591:	53                   	push   ebx
c0008592:	e8 b5 fe ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 f8 02             	cmp    eax,0x2
c000859d:	74 27                	je     c00085c6 <Fs::setcwd(Process*, char*)+0x119>
c000859f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085a4:	75 1c                	jne    c00085c2 <Fs::setcwd(Process*, char*)+0x115>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 02 00 00 00       	mov    eax,0x2
c00085ad:	74 51                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 02 00 00 00       	mov    eax,0x2
c00085c0:	eb 3e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 c0                	test   eax,eax
c00085c4:	74 1c                	je     c00085e2 <Fs::setcwd(Process*, char*)+0x135>
c00085c6:	85 db                	test   ebx,ebx
c00085c8:	b8 01 00 00 00       	mov    eax,0x1
c00085cd:	74 31                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	83 ec 0c             	sub    esp,0xc
c00085d4:	53                   	push   ebx
c00085d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	b8 01 00 00 00       	mov    eax,0x1
c00085e0:	eb 1e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085e2:	85 db                	test   ebx,ebx
c00085e4:	74 0c                	je     c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c00085e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	53                   	push   ebx
c00085ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085ef:	83 c4 10             	add    esp,0x10
c00085f2:	50                   	push   eax
c00085f3:	50                   	push   eax
c00085f4:	56                   	push   esi
c00085f5:	57                   	push   edi
c00085f6:	e8 55 80 ff ff       	call   c0000650 <strcpy>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	31 c0                	xor    eax,eax
c0008600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008606:	5b                   	pop    ebx
c0008607:	5e                   	pop    esi
c0008608:	5f                   	pop    edi
c0008609:	5d                   	pop    ebp
c000860a:	c3                   	ret    
c000860b:	90                   	nop

c000860c <Directory::Directory(char const*, Process*)>:
c000860c:	83 ec 0c             	sub    esp,0xc
c000860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008613:	83 ec 08             	sub    esp,0x8
c0008616:	6a 00                	push   0x0
c0008618:	50                   	push   eax
c0008619:	e8 1e a0 00 00       	call   c001263c <UnixFile::UnixFile(int)>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	ba 50 26 02 c0       	mov    edx,0xc0022650
c0008626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000862a:	89 10                	mov    DWORD PTR [eax],edx
c000862c:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0008631:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008635:	0f 95 c0             	setne  al
c0008638:	0f b6 c0             	movzx  eax,al
c000863b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000863f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008649:	83 c2 0d             	add    edx,0xd
c000864c:	50                   	push   eax
c000864d:	51                   	push   ecx
c000864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008652:	52                   	push   edx
c0008653:	e8 a8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008662:	83 e8 41             	sub    eax,0x41
c0008665:	88 c2                	mov    dl,al
c0008667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008683:	0f b6 c0             	movzx  eax,al
c0008686:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c000868d:	85 c0                	test   eax,eax
c000868f:	74 3e                	je     c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c0008691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008695:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869b:	0f b6 c0             	movzx  eax,al
c000869e:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c00086a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086ab:	85 c0                	test   eax,eax
c00086ad:	75 20                	jne    c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c00086af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086b9:	0f b6 c0             	movzx  eax,al
c00086bc:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c00086c3:	83 ec 0c             	sub    esp,0xc
c00086c6:	50                   	push   eax
c00086c7:	e8 76 1b 00 00       	call   c000a242 <LogicalDisk::mount()>
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	90                   	nop
c00086d0:	83 c4 0c             	add    esp,0xc
c00086d3:	c3                   	ret    

c00086d4 <Directory::open()>:
c00086d4:	53                   	push   ebx
c00086d5:	b8 0b 00 00 00       	mov    eax,0xb
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086e8:	83 fa 19             	cmp    edx,0x19
c00086eb:	77 3d                	ja     c000872a <Directory::open()+0x56>
c00086ed:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c00086f4:	85 d2                	test   edx,edx
c00086f6:	74 32                	je     c000872a <Directory::open()+0x56>
c00086f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086fe:	85 d2                	test   edx,edx
c0008700:	74 28                	je     c000872a <Directory::open()+0x56>
c0008702:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008706:	b8 06 00 00 00       	mov    eax,0x6
c000870b:	75 1d                	jne    c000872a <Directory::open()+0x56>
c000870d:	50                   	push   eax
c000870e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008710:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008716:	51                   	push   ecx
c0008717:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	75 04                	jne    c000872a <Directory::open()+0x56>
c0008726:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000872a:	83 c4 08             	add    esp,0x8
c000872d:	5b                   	pop    ebx
c000872e:	c3                   	ret    
c000872f:	90                   	nop

c0008730 <Directory::close()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000873d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008744:	83 f9 19             	cmp    ecx,0x19
c0008747:	77 41                	ja     c000878a <Directory::close()+0x5a>
c0008749:	8b 1c 8d e0 aa 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5520]
c0008750:	85 db                	test   ebx,ebx
c0008752:	74 36                	je     c000878a <Directory::close()+0x5a>
c0008754:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000875b:	74 2d                	je     c000878a <Directory::close()+0x5a>
c000875d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008761:	b8 05 00 00 00       	mov    eax,0x5
c0008766:	74 22                	je     c000878a <Directory::close()+0x5a>
c0008768:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000876c:	8b 04 8d e0 aa 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5520]
c0008773:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008779:	53                   	push   ebx
c000877a:	53                   	push   ebx
c000877b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000877d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008783:	50                   	push   eax
c0008784:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 08             	add    esp,0x8
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <Directory::unlink()>:
c0008790:	83 ec 0c             	sub    esp,0xc
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a3:	83 f9 19             	cmp    ecx,0x19
c00087a6:	77 2f                	ja     c00087d7 <Directory::unlink()+0x47>
c00087a8:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00087af:	85 c9                	test   ecx,ecx
c00087b1:	74 24                	je     c00087d7 <Directory::unlink()+0x47>
c00087b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087b9:	85 c9                	test   ecx,ecx
c00087bb:	74 1a                	je     c00087d7 <Directory::unlink()+0x47>
c00087bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c1:	b8 06 00 00 00       	mov    eax,0x6
c00087c6:	75 0f                	jne    c00087d7 <Directory::unlink()+0x47>
c00087c8:	50                   	push   eax
c00087c9:	83 c2 0d             	add    edx,0xd
c00087cc:	50                   	push   eax
c00087cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087cf:	52                   	push   edx
c00087d0:	51                   	push   ecx
c00087d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	83 c4 0c             	add    esp,0xc
c00087da:	c3                   	ret    
c00087db:	90                   	nop

c00087dc <Directory::rename(char const*)>:
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	b8 0b 00 00 00       	mov    eax,0xb
c00087e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ef:	83 f9 19             	cmp    ecx,0x19
c00087f2:	77 32                	ja     c0008826 <Directory::rename(char const*)+0x4a>
c00087f4:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00087fb:	85 c9                	test   ecx,ecx
c00087fd:	74 27                	je     c0008826 <Directory::rename(char const*)+0x4a>
c00087ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008805:	85 c9                	test   ecx,ecx
c0008807:	74 1d                	je     c0008826 <Directory::rename(char const*)+0x4a>
c0008809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000880d:	b8 06 00 00 00       	mov    eax,0x6
c0008812:	75 12                	jne    c0008826 <Directory::rename(char const*)+0x4a>
c0008814:	50                   	push   eax
c0008815:	83 c2 0d             	add    edx,0xd
c0008818:	8b 01                	mov    eax,DWORD PTR [ecx]
c000881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881e:	52                   	push   edx
c000881f:	51                   	push   ecx
c0008820:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 c4 0c             	add    esp,0xc
c0008829:	c3                   	ret    

c000882a <Directory::exists()>:
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	31 c0                	xor    eax,eax
c000882f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000883a:	83 f9 19             	cmp    ecx,0x19
c000883d:	77 24                	ja     c0008863 <Directory::exists()+0x39>
c000883f:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008846:	85 c9                	test   ecx,ecx
c0008848:	74 19                	je     c0008863 <Directory::exists()+0x39>
c000884a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008850:	85 c9                	test   ecx,ecx
c0008852:	74 0f                	je     c0008863 <Directory::exists()+0x39>
c0008854:	50                   	push   eax
c0008855:	83 c2 0d             	add    edx,0xd
c0008858:	50                   	push   eax
c0008859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000885b:	52                   	push   edx
c000885c:	51                   	push   ecx
c000885d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	83 c4 0c             	add    esp,0xc
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <Directory::read(dirent*)>:
c0008868:	83 ec 1c             	sub    esp,0x1c
c000886b:	b8 0b 00 00 00       	mov    eax,0xb
c0008870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000887b:	83 f9 19             	cmp    ecx,0x19
c000887e:	77 30                	ja     c00088b0 <Directory::read(dirent*)+0x48>
c0008880:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 25                	je     c00088b0 <Directory::read(dirent*)+0x48>
c000888b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008892:	74 1c                	je     c00088b0 <Directory::read(dirent*)+0x48>
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	8b 02                	mov    eax,DWORD PTR [edx]
c0008899:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000889d:	51                   	push   ecx
c000889e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a2:	6a 00                	push   0x0
c00088a4:	68 10 01 00 00       	push   0x110
c00088a9:	52                   	push   edx
c00088aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088ad:	83 c4 20             	add    esp,0x20
c00088b0:	83 c4 1c             	add    esp,0x1c
c00088b3:	c3                   	ret    

c00088b4 <Directory::create()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	b8 0b 00 00 00       	mov    eax,0xb
c00088bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088c7:	83 f9 19             	cmp    ecx,0x19
c00088ca:	77 2f                	ja     c00088fb <Directory::create()+0x47>
c00088cc:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00088d3:	85 c9                	test   ecx,ecx
c00088d5:	74 24                	je     c00088fb <Directory::create()+0x47>
c00088d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088dd:	85 c9                	test   ecx,ecx
c00088df:	74 1a                	je     c00088fb <Directory::create()+0x47>
c00088e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088e5:	b8 06 00 00 00       	mov    eax,0x6
c00088ea:	75 0f                	jne    c00088fb <Directory::create()+0x47>
c00088ec:	50                   	push   eax
c00088ed:	83 c2 0d             	add    edx,0xd
c00088f0:	50                   	push   eax
c00088f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f3:	52                   	push   edx
c00088f4:	51                   	push   ecx
c00088f5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088f8:	83 c4 10             	add    esp,0x10
c00088fb:	83 c4 0c             	add    esp,0xc
c00088fe:	c3                   	ret    
c00088ff:	90                   	nop

c0008900 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008900:	b8 0a 00 00 00       	mov    eax,0xa
c0008905:	c3                   	ret    
c0008906:	66 90                	xchg   ax,ax

c0008908 <Bus::Bus(char const*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008916:	50                   	push   eax
c0008917:	e8 f4 0a 00 00       	call   c0009410 <Device::Device(char const*)>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	ba 6c 26 02 c0       	mov    edx,0xc002266c
c0008924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008928:	89 10                	mov    DWORD PTR [eax],edx
c000892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008938:	90                   	nop
c0008939:	83 c4 0c             	add    esp,0xc
c000893c:	c3                   	ret    
c000893d:	90                   	nop
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::~Bus()>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	ba 6c 26 02 c0       	mov    edx,0xc002266c
c0008948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894c:	89 10                	mov    DWORD PTR [eax],edx
c000894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	50                   	push   eax
c0008956:	e8 55 08 00 00       	call   c00091b0 <Device::~Device()>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	90                   	nop
c000895f:	83 c4 0c             	add    esp,0xc
c0008962:	c3                   	ret    
c0008963:	90                   	nop

c0008964 <Bus::~Bus()>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000896e:	e8 cd ff ff ff       	call   c0008940 <Bus::~Bus()>
c0008973:	83 c4 10             	add    esp,0x10
c0008976:	83 ec 08             	sub    esp,0x8
c0008979:	68 58 01 00 00       	push   0x158
c000897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008982:	e8 88 41 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 c4 0c             	add    esp,0xc
c000898d:	c3                   	ret    

c000898e <KeBeepThread(void*)>:
c000898e:	83 ec 0c             	sub    esp,0xc
c0008991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008995:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000899c:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00089a3:	75 01                	jne    c00089a6 <KeBeepThread(void*)+0x18>
c00089a5:	fb                   	sti    
c00089a6:	6b c0 0a             	imul   eax,eax,0xa
c00089a9:	83 ec 0c             	sub    esp,0xc
c00089ac:	50                   	push   eax
c00089ad:	e8 36 db 00 00       	call   c00164e8 <milliTenthSleep(unsigned int)>
c00089b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089b9:	e8 7f 0b 01 00       	call   c001953d <HalMakeBeep(int)>
c00089be:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089c6:	83 c4 1c             	add    esp,0x1c
c00089c9:	e9 f2 d9 00 00       	jmp    c00163c0 <blockTask(TaskState)>

c00089ce <KeBeep(int, int, bool)>:
c00089ce:	56                   	push   esi
c00089cf:	53                   	push   ebx
c00089d0:	83 ec 10             	sub    esp,0x10
c00089d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089df:	e8 59 0b 01 00       	call   c001953d <HalMakeBeep(int)>
c00089e4:	89 f0                	mov    eax,esi
c00089e6:	83 c4 10             	add    esp,0x10
c00089e9:	84 c0                	test   al,al
c00089eb:	74 1e                	je     c0008a0b <KeBeep(int, int, bool)+0x3d>
c00089ed:	6b db 0a             	imul   ebx,ebx,0xa
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 ef da 00 00       	call   c00164e8 <milliTenthSleep(unsigned int)>
c00089f9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	e9 32 0b 01 00       	jmp    c001953d <HalMakeBeep(int)>
c0008a0b:	68 e6 00 00 00       	push   0xe6
c0008a10:	53                   	push   ebx
c0008a11:	68 8e 89 00 c0       	push   0xc000898e
c0008a16:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0008a1c:	e8 87 d6 00 00       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c0008a21:	83 c4 14             	add    esp,0x14
c0008a24:	5b                   	pop    ebx
c0008a25:	5e                   	pop    esi
c0008a26:	c3                   	ret    
c0008a27:	90                   	nop

c0008a28 <KeLoadTimezoneStrings()>:
c0008a28:	55                   	push   ebp
c0008a29:	57                   	push   edi
c0008a2a:	56                   	push   esi
c0008a2b:	53                   	push   ebx
c0008a2c:	83 ec 28             	sub    esp,0x28
c0008a2f:	68 14 01 00 00       	push   0x114
c0008a34:	c6 05 20 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a320,0x1
c0008a3b:	e8 58 69 00 00       	call   c000f398 <malloc>
c0008a40:	83 c4 0c             	add    esp,0xc
c0008a43:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0008a49:	68 90 26 02 c0       	push   0xc0022690
c0008a4e:	50                   	push   eax
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	e8 d6 f6 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0008a56:	5e                   	pop    esi
c0008a57:	5f                   	pop    edi
c0008a58:	6a 01                	push   0x1
c0008a5a:	53                   	push   ebx
c0008a5b:	e8 ea f6 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0008a60:	83 c4 0c             	add    esp,0xc
c0008a63:	8d 44 24 05          	lea    eax,[esp+0x5]
c0008a67:	50                   	push   eax
c0008a68:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a6c:	50                   	push   eax
c0008a6d:	53                   	push   ebx
c0008a6e:	e8 d9 f9 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008a73:	5d                   	pop    ebp
c0008a74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a78:	e8 1b 69 00 00       	call   c000f398 <malloc>
c0008a7d:	83 c4 0c             	add    esp,0xc
c0008a80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a84:	6a 00                	push   0x0
c0008a86:	50                   	push   eax
c0008a87:	89 c5                	mov    ebp,eax
c0008a89:	e8 62 7a ff ff       	call   c00004f0 <memset>
c0008a8e:	58                   	pop    eax
c0008a8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008a91:	8d 54 24 10          	lea    edx,[esp+0x10]
c0008a95:	52                   	push   edx
c0008a96:	55                   	push   ebp
c0008a97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a9f:	53                   	push   ebx
c0008aa0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008aa3:	83 c4 14             	add    esp,0x14
c0008aa6:	53                   	push   ebx
c0008aa7:	31 db                	xor    ebx,ebx
c0008aa9:	e8 fa f6 ff ff       	call   c00081a8 <File::close()>
c0008aae:	83 c4 10             	add    esp,0x10
c0008ab1:	83 ec 0c             	sub    esp,0xc
c0008ab4:	6a 78                	push   0x78
c0008ab6:	e8 dd 68 00 00       	call   c000f398 <malloc>
c0008abb:	5a                   	pop    edx
c0008abc:	59                   	pop    ecx
c0008abd:	89 04 9d 40 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5cc0],eax
c0008ac4:	43                   	inc    ebx
c0008ac5:	68 e4 45 02 c0       	push   0xc00245e4
c0008aca:	50                   	push   eax
c0008acb:	e8 80 7b ff ff       	call   c0000650 <strcpy>
c0008ad0:	83 c4 10             	add    esp,0x10
c0008ad3:	81 fb c8 00 00 00    	cmp    ebx,0xc8
c0008ad9:	75 d6                	jne    c0008ab1 <KeLoadTimezoneStrings()+0x89>
c0008adb:	be 01 00 00 00       	mov    esi,0x1
c0008ae0:	31 ff                	xor    edi,edi
c0008ae2:	31 db                	xor    ebx,ebx
c0008ae4:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0008ae8:	0f be 40 ff          	movsx  eax,BYTE PTR [eax-0x1]
c0008aec:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0008af1:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c0008af5:	83 f8 0d             	cmp    eax,0xd
c0008af8:	75 08                	jne    c0008b02 <KeLoadTimezoneStrings()+0xda>
c0008afa:	83 c6 01             	add    esi,0x1
c0008afd:	83 d7 00             	adc    edi,0x0
c0008b00:	eb e2                	jmp    c0008ae4 <KeLoadTimezoneStrings()+0xbc>
c0008b02:	83 f8 09             	cmp    eax,0x9
c0008b05:	75 2f                	jne    c0008b36 <KeLoadTimezoneStrings()+0x10e>
c0008b07:	83 ec 0c             	sub    esp,0xc
c0008b0a:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b11:	e8 6a 7a ff ff       	call   c0000580 <strlen>
c0008b16:	83 c4 10             	add    esp,0x10
c0008b19:	83 f8 08             	cmp    eax,0x8
c0008b1c:	77 dc                	ja     c0008afa <KeLoadTimezoneStrings()+0xd2>
c0008b1e:	50                   	push   eax
c0008b1f:	50                   	push   eax
c0008b20:	68 e4 45 02 c0       	push   0xc00245e4
c0008b25:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b2c:	e8 3f 7d ff ff       	call   c0000870 <strcat>
c0008b31:	83 c4 10             	add    esp,0x10
c0008b34:	eb d1                	jmp    c0008b07 <KeLoadTimezoneStrings()+0xdf>
c0008b36:	83 f8 0a             	cmp    eax,0xa
c0008b39:	75 4b                	jne    c0008b86 <KeLoadTimezoneStrings()+0x15e>
c0008b3b:	83 ec 0c             	sub    esp,0xc
c0008b3e:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b45:	e8 36 7a ff ff       	call   c0000580 <strlen>
c0008b4a:	83 c4 10             	add    esp,0x10
c0008b4d:	83 f8 35             	cmp    eax,0x35
c0008b50:	77 18                	ja     c0008b6a <KeLoadTimezoneStrings()+0x142>
c0008b52:	51                   	push   ecx
c0008b53:	51                   	push   ecx
c0008b54:	68 e4 45 02 c0       	push   0xc00245e4
c0008b59:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b60:	e8 0b 7d ff ff       	call   c0000870 <strcat>
c0008b65:	83 c4 10             	add    esp,0x10
c0008b68:	eb d1                	jmp    c0008b3b <KeLoadTimezoneStrings()+0x113>
c0008b6a:	43                   	inc    ebx
c0008b6b:	89 f8                	mov    eax,edi
c0008b6d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0008b71:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0008b75:	72 83                	jb     c0008afa <KeLoadTimezoneStrings()+0xd2>
c0008b77:	83 ec 0c             	sub    esp,0xc
c0008b7a:	55                   	push   ebp
c0008b7b:	e8 28 68 00 00       	call   c000f3a8 <free>
c0008b80:	89 1d 24 a3 02 c0    	mov    DWORD PTR ds:0xc002a324,ebx
c0008b86:	83 ec 0c             	sub    esp,0xc
c0008b89:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b90:	e8 eb 79 ff ff       	call   c0000580 <strlen>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 f8 31             	cmp    eax,0x31
c0008b9b:	77 09                	ja     c0008ba6 <KeLoadTimezoneStrings()+0x17e>
c0008b9d:	52                   	push   edx
c0008b9e:	52                   	push   edx
c0008b9f:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0008ba3:	50                   	push   eax
c0008ba4:	eb 22                	jmp    c0008bc8 <KeLoadTimezoneStrings()+0x1a0>
c0008ba6:	83 ec 0c             	sub    esp,0xc
c0008ba9:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008bb0:	e8 cb 79 ff ff       	call   c0000580 <strlen>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	83 f8 32             	cmp    eax,0x32
c0008bbb:	0f 85 39 ff ff ff    	jne    c0008afa <KeLoadTimezoneStrings()+0xd2>
c0008bc1:	50                   	push   eax
c0008bc2:	50                   	push   eax
c0008bc3:	68 af 26 02 c0       	push   0xc00226af
c0008bc8:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008bcf:	e8 9c 7c ff ff       	call   c0000870 <strcat>
c0008bd4:	83 c4 10             	add    esp,0x10
c0008bd7:	e9 1e ff ff ff       	jmp    c0008afa <KeLoadTimezoneStrings()+0xd2>

c0008bdc <KeGetTimezoneStringFromID(int)>:
c0008bdc:	83 ec 0c             	sub    esp,0xc
c0008bdf:	80 3d 20 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a320,0x0
c0008be6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bea:	75 05                	jne    c0008bf1 <KeGetTimezoneStringFromID(int)+0x15>
c0008bec:	e8 37 fe ff ff       	call   c0008a28 <KeLoadTimezoneStrings()>
c0008bf1:	31 c0                	xor    eax,eax
c0008bf3:	39 15 24 a3 02 c0    	cmp    DWORD PTR ds:0xc002a324,edx
c0008bf9:	7e 08                	jle    c0008c03 <KeGetTimezoneStringFromID(int)+0x27>
c0008bfb:	8b 04 95 40 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5cc0]
c0008c02:	40                   	inc    eax
c0008c03:	83 c4 0c             	add    esp,0xc
c0008c06:	c3                   	ret    

c0008c07 <KeUpdateTimezone(char const*)>:
c0008c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c0b:	8a 10                	mov    dl,BYTE PTR [eax]
c0008c0d:	c6 05 60 a6 02 c0 00 	mov    BYTE PTR ds:0xc002a660,0x0
c0008c14:	83 ea 2b             	sub    edx,0x2b
c0008c17:	80 e2 fd             	and    dl,0xfd
c0008c1a:	75 5b                	jne    c0008c77 <KeUpdateTimezone(char const*)+0x70>
c0008c1c:	80 78 02 2e          	cmp    BYTE PTR [eax+0x2],0x2e
c0008c20:	0f be 48 03          	movsx  ecx,BYTE PTR [eax+0x3]
c0008c24:	75 07                	jne    c0008c2d <KeUpdateTimezone(char const*)+0x26>
c0008c26:	83 f9 35             	cmp    ecx,0x35
c0008c29:	b2 01                	mov    dl,0x1
c0008c2b:	74 0e                	je     c0008c3b <KeUpdateTimezone(char const*)+0x34>
c0008c2d:	31 d2                	xor    edx,edx
c0008c2f:	83 f9 2e             	cmp    ecx,0x2e
c0008c32:	75 07                	jne    c0008c3b <KeUpdateTimezone(char const*)+0x34>
c0008c34:	80 78 04 35          	cmp    BYTE PTR [eax+0x4],0x35
c0008c38:	0f 94 c2             	sete   dl
c0008c3b:	88 15 61 a6 02 c0    	mov    BYTE PTR ds:0xc002a661,dl
c0008c41:	0f be 50 01          	movsx  edx,BYTE PTR [eax+0x1]
c0008c45:	83 ea 30             	sub    edx,0x30
c0008c48:	89 15 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,edx
c0008c4e:	80 78 03 2e          	cmp    BYTE PTR [eax+0x3],0x2e
c0008c52:	75 17                	jne    c0008c6b <KeUpdateTimezone(char const*)+0x64>
c0008c54:	6b d2 0a             	imul   edx,edx,0xa
c0008c57:	89 15 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,edx
c0008c5d:	0f be 48 02          	movsx  ecx,BYTE PTR [eax+0x2]
c0008c61:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0008c65:	89 15 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,edx
c0008c6b:	80 38 2d             	cmp    BYTE PTR [eax],0x2d
c0008c6e:	75 18                	jne    c0008c88 <KeUpdateTimezone(char const*)+0x81>
c0008c70:	f7 1d 64 a6 02 c0    	neg    DWORD PTR ds:0xc002a664
c0008c76:	c3                   	ret    
c0008c77:	c6 05 61 a6 02 c0 00 	mov    BYTE PTR ds:0xc002a661,0x0
c0008c7e:	c7 05 64 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a664,0x0
c0008c88:	c3                   	ret    

c0008c89 <KeSetTimezone(char const*)>:
c0008c89:	56                   	push   esi
c0008c8a:	53                   	push   ebx
c0008c8b:	83 ec 10             	sub    esp,0x10
c0008c8e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0008c92:	68 b4 26 02 c0       	push   0xc00226b4
c0008c97:	e8 c8 3e 00 00       	call   c000cb64 <CmOpen(char const*)>
c0008c9c:	89 c3                	mov    ebx,eax
c0008c9e:	58                   	pop    eax
c0008c9f:	5a                   	pop    edx
c0008ca0:	68 d9 26 02 c0       	push   0xc00226d9
c0008ca5:	53                   	push   ebx
c0008ca6:	e8 b4 4a 00 00       	call   c000d75f <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008cab:	83 c4 0c             	add    esp,0xc
c0008cae:	56                   	push   esi
c0008caf:	50                   	push   eax
c0008cb0:	53                   	push   ebx
c0008cb1:	e8 80 43 00 00       	call   c000d036 <CmSetString(Reghive_Tag*, int, char const*)>
c0008cb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008cb9:	e8 c4 3f 00 00       	call   c000cc82 <CmClose(Reghive_Tag*)>
c0008cbe:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008cc2:	83 c4 14             	add    esp,0x14
c0008cc5:	5b                   	pop    ebx
c0008cc6:	5e                   	pop    esi
c0008cc7:	e9 3b ff ff ff       	jmp    c0008c07 <KeUpdateTimezone(char const*)>

c0008ccc <KeSetTimezone(int)>:
c0008ccc:	83 ec 18             	sub    esp,0x18
c0008ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cd3:	e8 04 ff ff ff       	call   c0008bdc <KeGetTimezoneStringFromID(int)>
c0008cd8:	83 c4 10             	add    esp,0x10
c0008cdb:	31 d2                	xor    edx,edx
c0008cdd:	85 c0                	test   eax,eax
c0008cdf:	74 0e                	je     c0008cef <KeSetTimezone(int)+0x23>
c0008ce1:	83 ec 0c             	sub    esp,0xc
c0008ce4:	50                   	push   eax
c0008ce5:	e8 9f ff ff ff       	call   c0008c89 <KeSetTimezone(char const*)>
c0008cea:	83 c4 10             	add    esp,0x10
c0008ced:	b2 01                	mov    dl,0x1
c0008cef:	88 d0                	mov    al,dl
c0008cf1:	83 c4 0c             	add    esp,0xc
c0008cf4:	c3                   	ret    

c0008cf5 <KeLoadTimezone()>:
c0008cf5:	56                   	push   esi
c0008cf6:	53                   	push   ebx
c0008cf7:	81 ec 70 02 00 00    	sub    esp,0x270
c0008cfd:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008d02:	68 b4 26 02 c0       	push   0xc00226b4
c0008d07:	e8 58 3e 00 00       	call   c000cb64 <CmOpen(char const*)>
c0008d0c:	59                   	pop    ecx
c0008d0d:	5e                   	pop    esi
c0008d0e:	89 c3                	mov    ebx,eax
c0008d10:	68 d9 26 02 c0       	push   0xc00226d9
c0008d15:	50                   	push   eax
c0008d16:	e8 44 4a 00 00       	call   c000d75f <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008d1b:	83 c4 10             	add    esp,0x10
c0008d1e:	8d 74 24 08          	lea    esi,[esp+0x8]
c0008d22:	85 c0                	test   eax,eax
c0008d24:	7e 0c                	jle    c0008d32 <KeLoadTimezone()+0x3d>
c0008d26:	52                   	push   edx
c0008d27:	56                   	push   esi
c0008d28:	50                   	push   eax
c0008d29:	53                   	push   ebx
c0008d2a:	e8 a5 3f 00 00       	call   c000ccd4 <CmGetString(Reghive_Tag*, int, char*)>
c0008d2f:	83 c4 10             	add    esp,0x10
c0008d32:	83 ec 0c             	sub    esp,0xc
c0008d35:	53                   	push   ebx
c0008d36:	e8 47 3f 00 00       	call   c000cc82 <CmClose(Reghive_Tag*)>
c0008d3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0008d3e:	e8 c4 fe ff ff       	call   c0008c07 <KeUpdateTimezone(char const*)>
c0008d43:	81 c4 74 02 00 00    	add    esp,0x274
c0008d49:	5b                   	pop    ebx
c0008d4a:	5e                   	pop    esi
c0008d4b:	c3                   	ret    

c0008d4c <Clock::Clock(char const*)>:
c0008d4c:	83 ec 0c             	sub    esp,0xc
c0008d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d53:	83 ec 08             	sub    esp,0x8
c0008d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5a:	50                   	push   eax
c0008d5b:	e8 b0 06 00 00       	call   c0009410 <Device::Device(char const*)>
c0008d60:	83 c4 10             	add    esp,0x10
c0008d63:	ba 08 27 02 c0       	mov    edx,0xc0022708
c0008d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6c:	89 10                	mov    DWORD PTR [eax],edx
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008d7c:	90                   	nop
c0008d7d:	83 c4 0c             	add    esp,0xc
c0008d80:	c3                   	ret    
c0008d81:	90                   	nop

c0008d82 <Clock::~Clock()>:
c0008d82:	83 ec 0c             	sub    esp,0xc
c0008d85:	ba 08 27 02 c0       	mov    edx,0xc0022708
c0008d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d8e:	89 10                	mov    DWORD PTR [eax],edx
c0008d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	50                   	push   eax
c0008d98:	e8 13 04 00 00       	call   c00091b0 <Device::~Device()>
c0008d9d:	83 c4 10             	add    esp,0x10
c0008da0:	90                   	nop
c0008da1:	83 c4 0c             	add    esp,0xc
c0008da4:	c3                   	ret    
c0008da5:	90                   	nop

c0008da6 <Clock::~Clock()>:
c0008da6:	83 ec 0c             	sub    esp,0xc
c0008da9:	83 ec 0c             	sub    esp,0xc
c0008dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008db0:	e8 cd ff ff ff       	call   c0008d82 <Clock::~Clock()>
c0008db5:	83 c4 10             	add    esp,0x10
c0008db8:	83 ec 08             	sub    esp,0x8
c0008dbb:	68 58 01 00 00       	push   0x158
c0008dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008dc4:	e8 46 3d 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c0008dc9:	83 c4 10             	add    esp,0x10
c0008dcc:	83 c4 0c             	add    esp,0xc
c0008dcf:	c3                   	ret    

c0008dd0 <Clock::timeInSecondsLocal()>:
c0008dd0:	53                   	push   ebx
c0008dd1:	83 ec 14             	sub    esp,0x14
c0008dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dda:	50                   	push   eax
c0008ddb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008dde:	0f b6 0d 60 a6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a660
c0008de5:	03 0d 64 a6 02 c0    	add    ecx,DWORD PTR ds:0xc002a664
c0008deb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008df1:	89 cb                	mov    ebx,ecx
c0008df3:	c1 fb 1f             	sar    ebx,0x1f
c0008df6:	01 c8                	add    eax,ecx
c0008df8:	11 da                	adc    edx,ebx
c0008dfa:	83 c4 10             	add    esp,0x10
c0008dfd:	31 c9                	xor    ecx,ecx
c0008dff:	80 3d 61 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a661,0x0
c0008e06:	74 05                	je     c0008e0d <Clock::timeInSecondsLocal()+0x3d>
c0008e08:	b9 08 07 00 00       	mov    ecx,0x708
c0008e0d:	31 db                	xor    ebx,ebx
c0008e0f:	01 c8                	add    eax,ecx
c0008e11:	11 da                	adc    edx,ebx
c0008e13:	83 c4 08             	add    esp,0x8
c0008e16:	5b                   	pop    ebx
c0008e17:	c3                   	ret    

c0008e18 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008e18:	57                   	push   edi
c0008e19:	56                   	push   esi
c0008e1a:	53                   	push   ebx
c0008e1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e1f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008e23:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008e27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008e29:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008e2c:	0f b6 05 60 a6 02 c0 	movzx  eax,BYTE PTR ds:0xc002a660
c0008e33:	03 05 64 a6 02 c0    	add    eax,DWORD PTR ds:0xc002a664
c0008e39:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008e3f:	99                   	cdq    
c0008e40:	29 c6                	sub    esi,eax
c0008e42:	19 d7                	sbb    edi,edx
c0008e44:	89 f0                	mov    eax,esi
c0008e46:	31 f6                	xor    esi,esi
c0008e48:	89 fa                	mov    edx,edi
c0008e4a:	80 3d 61 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a661,0x0
c0008e51:	74 05                	je     c0008e58 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008e53:	be 08 07 00 00       	mov    esi,0x708
c0008e58:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e5c:	31 ff                	xor    edi,edi
c0008e5e:	29 f0                	sub    eax,esi
c0008e60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008e64:	19 fa                	sbb    edx,edi
c0008e66:	89 d8                	mov    eax,ebx
c0008e68:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008e6c:	5b                   	pop    ebx
c0008e6d:	5e                   	pop    esi
c0008e6e:	5f                   	pop    edi
c0008e6f:	ff e0                	jmp    eax

c0008e71 <KeDatetimeToSeconds(datetime_t)>:
c0008e71:	55                   	push   ebp
c0008e72:	57                   	push   edi
c0008e73:	56                   	push   esi
c0008e74:	53                   	push   ebx
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008e80:	89 f7                	mov    edi,esi
c0008e82:	89 f0                	mov    eax,esi
c0008e84:	0f b6 cf             	movzx  ecx,bh
c0008e87:	0f b6 c4             	movzx  eax,ah
c0008e8a:	c1 ef 10             	shr    edi,0x10
c0008e8d:	89 da                	mov    edx,ebx
c0008e8f:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008e92:	89 f9                	mov    ecx,edi
c0008e94:	0f b6 f9             	movzx  edi,cl
c0008e97:	89 f1                	mov    ecx,esi
c0008e99:	6b c0 3c             	imul   eax,eax,0x3c
c0008e9c:	0f b6 f1             	movzx  esi,cl
c0008e9f:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008ea5:	0f b6 db             	movzx  ebx,bl
c0008ea8:	c1 ea 10             	shr    edx,0x10
c0008eab:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008eb1:	01 f8                	add    eax,edi
c0008eb3:	01 f0                	add    eax,esi
c0008eb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0008eb8:	c1 f8 1f             	sar    eax,0x1f
c0008ebb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ebf:	89 e8                	mov    eax,ebp
c0008ec1:	0f b6 c0             	movzx  eax,al
c0008ec4:	8b 0c 85 40 27 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd8c0]
c0008ecb:	83 f8 01             	cmp    eax,0x1
c0008ece:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008ed2:	0f b7 da             	movzx  ebx,dx
c0008ed5:	76 27                	jbe    c0008efe <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008ed7:	80 e2 03             	and    dl,0x3
c0008eda:	75 22                	jne    c0008efe <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008edc:	31 d2                	xor    edx,edx
c0008ede:	be 64 00 00 00       	mov    esi,0x64
c0008ee3:	89 d8                	mov    eax,ebx
c0008ee5:	f7 f6                	div    esi
c0008ee7:	85 d2                	test   edx,edx
c0008ee9:	75 12                	jne    c0008efd <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008eeb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008ef1:	be 90 01 00 00       	mov    esi,0x190
c0008ef6:	99                   	cdq    
c0008ef7:	f7 fe                	idiv   esi
c0008ef9:	85 d2                	test   edx,edx
c0008efb:	75 01                	jne    c0008efe <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008efd:	41                   	inc    ecx
c0008efe:	83 fb 46             	cmp    ebx,0x46
c0008f01:	76 48                	jbe    c0008f4b <KeDatetimeToSeconds(datetime_t)+0xda>
c0008f03:	be 46 00 00 00       	mov    esi,0x46
c0008f08:	bf 64 00 00 00       	mov    edi,0x64
c0008f0d:	bd 90 01 00 00       	mov    ebp,0x190
c0008f12:	f7 c6 03 00 00 00    	test   esi,0x3
c0008f18:	b8 6d 01 00 00       	mov    eax,0x16d
c0008f1d:	75 23                	jne    c0008f42 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008f1f:	89 f0                	mov    eax,esi
c0008f21:	99                   	cdq    
c0008f22:	f7 ff                	idiv   edi
c0008f24:	b8 6e 01 00 00       	mov    eax,0x16e
c0008f29:	85 d2                	test   edx,edx
c0008f2b:	75 15                	jne    c0008f42 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008f2d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008f33:	99                   	cdq    
c0008f34:	f7 fd                	idiv   ebp
c0008f36:	83 fa 01             	cmp    edx,0x1
c0008f39:	19 c0                	sbb    eax,eax
c0008f3b:	f7 d0                	not    eax
c0008f3d:	05 6e 01 00 00       	add    eax,0x16e
c0008f42:	46                   	inc    esi
c0008f43:	01 c1                	add    ecx,eax
c0008f45:	39 de                	cmp    esi,ebx
c0008f47:	7c c9                	jl     c0008f12 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008f49:	eb 34                	jmp    c0008f7f <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008f4b:	74 32                	je     c0008f7f <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008f4d:	b8 45 00 00 00       	mov    eax,0x45
c0008f52:	89 c2                	mov    edx,eax
c0008f54:	83 e2 03             	and    edx,0x3
c0008f57:	39 d8                	cmp    eax,ebx
c0008f59:	7e 0f                	jle    c0008f6a <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008f5b:	83 fa 01             	cmp    edx,0x1
c0008f5e:	19 d2                	sbb    edx,edx
c0008f60:	48                   	dec    eax
c0008f61:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008f68:	eb e8                	jmp    c0008f52 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008f6a:	85 d2                	test   edx,edx
c0008f6c:	b8 6d 01 00 00       	mov    eax,0x16d
c0008f71:	75 0a                	jne    c0008f7d <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008f73:	83 fb 01             	cmp    ebx,0x1
c0008f76:	19 c0                	sbb    eax,eax
c0008f78:	05 6e 01 00 00       	add    eax,0x16e
c0008f7d:	29 c1                	sub    ecx,eax
c0008f7f:	b8 80 51 01 00       	mov    eax,0x15180
c0008f84:	f7 e9                	imul   ecx
c0008f86:	03 04 24             	add    eax,DWORD PTR [esp]
c0008f89:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008f8d:	83 c4 0c             	add    esp,0xc
c0008f90:	5b                   	pop    ebx
c0008f91:	5e                   	pop    esi
c0008f92:	5f                   	pop    edi
c0008f93:	5d                   	pop    ebp
c0008f94:	c3                   	ret    
c0008f95:	90                   	nop

c0008f96 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008f96:	57                   	push   edi
c0008f97:	56                   	push   esi
c0008f98:	53                   	push   ebx
c0008f99:	83 ec 10             	sub    esp,0x10
c0008f9c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008fa0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008fa4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008fa8:	e8 c4 fe ff ff       	call   c0008e71 <KeDatetimeToSeconds(datetime_t)>
c0008fad:	5e                   	pop    esi
c0008fae:	0f b6 35 60 a6 02 c0 	movzx  esi,BYTE PTR ds:0xc002a660
c0008fb5:	5f                   	pop    edi
c0008fb6:	03 35 64 a6 02 c0    	add    esi,DWORD PTR ds:0xc002a664
c0008fbc:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008fc2:	89 f7                	mov    edi,esi
c0008fc4:	c1 ff 1f             	sar    edi,0x1f
c0008fc7:	29 f0                	sub    eax,esi
c0008fc9:	19 fa                	sbb    edx,edi
c0008fcb:	31 f6                	xor    esi,esi
c0008fcd:	80 3d 61 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a661,0x0
c0008fd4:	74 05                	je     c0008fdb <Clock::setTimeInDatetimeLocal(datetime_t)+0x45>
c0008fd6:	be 08 07 00 00       	mov    esi,0x708
c0008fdb:	31 ff                	xor    edi,edi
c0008fdd:	29 f0                	sub    eax,esi
c0008fdf:	19 fa                	sbb    edx,edi
c0008fe1:	83 ec 0c             	sub    esp,0xc
c0008fe4:	31 ff                	xor    edi,edi
c0008fe6:	57                   	push   edi
c0008fe7:	31 ff                	xor    edi,edi
c0008fe9:	52                   	push   edx
c0008fea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fee:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008ff2:	57                   	push   edi
c0008ff3:	50                   	push   eax
c0008ff4:	68 ee 26 02 c0       	push   0xc00226ee
c0008ff9:	e8 50 df ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008ffe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009002:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009006:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0009008:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000900c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009010:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009014:	8b 41 2c             	mov    eax,DWORD PTR [ecx+0x2c]
c0009017:	83 c4 30             	add    esp,0x30
c000901a:	5b                   	pop    ebx
c000901b:	5e                   	pop    esi
c000901c:	5f                   	pop    edi
c000901d:	ff e0                	jmp    eax

c000901f <KeSecondsToDatetime(unsigned long long)>:
c000901f:	55                   	push   ebp
c0009020:	57                   	push   edi
c0009021:	56                   	push   esi
c0009022:	53                   	push   ebx
c0009023:	83 ec 1c             	sub    esp,0x1c
c0009026:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000902a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000902e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009032:	6a 00                	push   0x0
c0009034:	68 80 51 01 00       	push   0x15180
c0009039:	55                   	push   ebp
c000903a:	57                   	push   edi
c000903b:	e8 34 7c 01 00       	call   c0020c74 <__udivdi3>
c0009040:	83 c4 10             	add    esp,0x10
c0009043:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009047:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000904d:	6a 00                	push   0x0
c000904f:	68 80 51 01 00       	push   0x15180
c0009054:	55                   	push   ebp
c0009055:	57                   	push   edi
c0009056:	bf 10 0e 00 00       	mov    edi,0xe10
c000905b:	e8 14 7d 01 00       	call   c0020d74 <__umoddi3>
c0009060:	83 c4 10             	add    esp,0x10
c0009063:	99                   	cdq    
c0009064:	f7 ff                	idiv   edi
c0009066:	bf 3c 00 00 00       	mov    edi,0x3c
c000906b:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000906e:	89 d0                	mov    eax,edx
c0009070:	99                   	cdq    
c0009071:	f7 ff                	idiv   edi
c0009073:	85 db                	test   ebx,ebx
c0009075:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0009078:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000907b:	79 11                	jns    c000908e <KeSecondsToDatetime(unsigned long long)+0x6f>
c000907d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009081:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0009087:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000908c:	eb 07                	jmp    c0009095 <KeSecondsToDatetime(unsigned long long)+0x76>
c000908e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0009093:	89 d8                	mov    eax,ebx
c0009095:	99                   	cdq    
c0009096:	bf b4 05 00 00       	mov    edi,0x5b4
c000909b:	f7 f9                	idiv   ecx
c000909d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00090a2:	31 d2                	xor    edx,edx
c00090a4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00090a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090ad:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00090b5:	01 c3                	add    ebx,eax
c00090b7:	89 d8                	mov    eax,ebx
c00090b9:	f7 f1                	div    ecx
c00090bb:	31 d2                	xor    edx,edx
c00090bd:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00090c0:	89 d8                	mov    eax,ebx
c00090c2:	f7 f7                	div    edi
c00090c4:	31 d2                	xor    edx,edx
c00090c6:	29 c1                	sub    ecx,eax
c00090c8:	89 d8                	mov    eax,ebx
c00090ca:	f7 f5                	div    ebp
c00090cc:	bd 6d 01 00 00       	mov    ebp,0x16d
c00090d1:	31 d2                	xor    edx,edx
c00090d3:	29 c1                	sub    ecx,eax
c00090d5:	89 c8                	mov    eax,ecx
c00090d7:	f7 f5                	div    ebp
c00090d9:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00090de:	31 d2                	xor    edx,edx
c00090e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00090e4:	89 c8                	mov    eax,ecx
c00090e6:	f7 f5                	div    ebp
c00090e8:	31 d2                	xor    edx,edx
c00090ea:	01 c3                	add    ebx,eax
c00090ec:	89 c8                	mov    eax,ecx
c00090ee:	f7 f7                	div    edi
c00090f0:	bf 99 00 00 00       	mov    edi,0x99
c00090f5:	31 d2                	xor    edx,edx
c00090f7:	29 c3                	sub    ebx,eax
c00090f9:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0009101:	29 c3                	sub    ebx,eax
c0009103:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0009106:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0009109:	83 c1 02             	add    ecx,0x2
c000910c:	89 c8                	mov    eax,ecx
c000910e:	bb 05 00 00 00       	mov    ebx,0x5
c0009113:	f7 f7                	div    edi
c0009115:	31 d2                	xor    edx,edx
c0009117:	89 c7                	mov    edi,eax
c0009119:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000911f:	83 c0 02             	add    eax,0x2
c0009122:	f7 f3                	div    ebx
c0009124:	89 eb                	mov    ebx,ebp
c0009126:	29 c3                	sub    ebx,eax
c0009128:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000912e:	88 1e                	mov    BYTE PTR [esi],bl
c0009130:	19 c0                	sbb    eax,eax
c0009132:	31 c9                	xor    ecx,ecx
c0009134:	83 e0 0c             	and    eax,0xc
c0009137:	8d 54 38 f6          	lea    edx,[eax+edi*1-0xa]
c000913b:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0009143:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0009147:	83 fa 01             	cmp    edx,0x1
c000914a:	0f 96 c1             	setbe  cl
c000914d:	42                   	inc    edx
c000914e:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0009151:	8d 44 08 46          	lea    eax,[eax+ecx*1+0x46]
c0009155:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0009159:	83 c4 1c             	add    esp,0x1c
c000915c:	89 f0                	mov    eax,esi
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	5f                   	pop    edi
c0009161:	5d                   	pop    ebp
c0009162:	c2 04 00             	ret    0x4
c0009165:	90                   	nop

c0009166 <Clock::timeInDatetimeLocal()>:
c0009166:	53                   	push   ebx
c0009167:	83 ec 14             	sub    esp,0x14
c000916a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000916e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009172:	e8 59 fc ff ff       	call   c0008dd0 <Clock::timeInSecondsLocal()>
c0009177:	83 c4 0c             	add    esp,0xc
c000917a:	52                   	push   edx
c000917b:	50                   	push   eax
c000917c:	53                   	push   ebx
c000917d:	e8 9d fe ff ff       	call   c000901f <KeSecondsToDatetime(unsigned long long)>
c0009182:	89 d8                	mov    eax,ebx
c0009184:	83 c4 14             	add    esp,0x14
c0009187:	5b                   	pop    ebx
c0009188:	c2 04 00             	ret    0x4
c000918b:	90                   	nop

c000918c <Device::hibernate()>:
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Device::wake()>:
c000918e:	c3                   	ret    
c000918f:	90                   	nop

c0009190 <Device::detect()>:
c0009190:	c3                   	ret    
c0009191:	90                   	nop

c0009192 <Device::disableLegacy()>:
c0009192:	c3                   	ret    
c0009193:	90                   	nop

c0009194 <Device::powerSaving(PowerSavingLevel)>:
c0009194:	c3                   	ret    
c0009195:	90                   	nop

c0009196 <DriverlessDevice::close(int, int, void*)>:
c0009196:	31 c0                	xor    eax,eax
c0009198:	c3                   	ret    
c0009199:	90                   	nop

c000919a <DriverlessDevice::detect()>:
c000919a:	c3                   	ret    
c000919b:	90                   	nop

c000919c <DriverlessDevice::open(int, int, void*)>:
c000919c:	83 ec 18             	sub    esp,0x18
c000919f:	68 70 27 02 c0       	push   0xc0022770
c00091a4:	e8 35 65 00 00       	call   c000f6de <KePanic(char const*)>
c00091a9:	83 c8 ff             	or     eax,0xffffffff
c00091ac:	83 c4 1c             	add    esp,0x1c
c00091af:	c3                   	ret    

c00091b0 <Device::~Device()>:
c00091b0:	ba 14 28 02 c0       	mov    edx,0xc0022814
c00091b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b9:	89 10                	mov    DWORD PTR [eax],edx
c00091bb:	90                   	nop
c00091bc:	c3                   	ret    
c00091bd:	90                   	nop

c00091be <Device::~Device()>:
c00091be:	83 ec 0c             	sub    esp,0xc
c00091c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091c5:	e8 e6 ff ff ff       	call   c00091b0 <Device::~Device()>
c00091ca:	83 c4 04             	add    esp,0x4
c00091cd:	83 ec 08             	sub    esp,0x8
c00091d0:	68 58 01 00 00       	push   0x158
c00091d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091d9:	e8 31 39 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c00091de:	83 c4 10             	add    esp,0x10
c00091e1:	83 c4 0c             	add    esp,0xc
c00091e4:	c3                   	ret    
c00091e5:	90                   	nop

c00091e6 <Device::findAndLoadDriver()>:
c00091e6:	c7 44 24 04 8e 27 02 c0 	mov    DWORD PTR [esp+0x4],0xc002278e
c00091ee:	e9 5b dd ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c00091f3:	90                   	nop

c00091f4 <Device::preOpenPCI(PCIDeviceInfo)>:
c00091f4:	57                   	push   edi
c00091f5:	b9 09 00 00 00       	mov    ecx,0x9
c00091fa:	56                   	push   esi
c00091fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00091ff:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009203:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000920d:	81 c7 18 01 00 00    	add    edi,0x118
c0009213:	fc                   	cld    
c0009214:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009216:	5e                   	pop    esi
c0009217:	5f                   	pop    edi
c0009218:	c3                   	ret    
c0009219:	90                   	nop

c000921a <Device::preOpenACPI(void*, char*, char*)>:
c000921a:	57                   	push   edi
c000921b:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009220:	56                   	push   esi
c0009221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009225:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009229:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000922d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009237:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000923d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009243:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009245:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000924b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000924f:	b9 0e 00 00 00       	mov    ecx,0xe
c0009254:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009256:	5e                   	pop    esi
c0009257:	5f                   	pop    edi
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000925a:	53                   	push   ebx
c000925b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000925f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009263:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009267:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000926b:	0f b6 c0             	movzx  eax,al
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009276:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000927a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000927e:	5b                   	pop    ebx
c000927f:	e9 81 06 01 00       	jmp    c0019905 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009284 <Device::getParent()>:
c0009284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009288:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000928e:	c3                   	ret    
c000928f:	90                   	nop

c0009290 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009294:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009298:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000929d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092a1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00092a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00092a9:	e9 c8 07 01 00       	jmp    c0019a76 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00092ae <Device::addChild(Device*)>:
c00092ae:	53                   	push   ebx
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00092b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00092ba:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00092c0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00092c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00092c8:	85 d2                	test   edx,edx
c00092ca:	74 04                	je     c00092d0 <Device::addChild(Device*)+0x22>
c00092cc:	89 d3                	mov    ebx,edx
c00092ce:	eb f6                	jmp    c00092c6 <Device::addChild(Device*)+0x18>
c00092d0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00092d3:	83 ec 0c             	sub    esp,0xc
c00092d6:	6a 08                	push   0x8
c00092d8:	e8 bb 60 00 00       	call   c000f398 <malloc>
c00092dd:	89 03                	mov    DWORD PTR [ebx],eax
c00092df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092ec:	83 c4 18             	add    esp,0x18
c00092ef:	5b                   	pop    ebx
c00092f0:	c3                   	ret    
c00092f1:	90                   	nop

c00092f2 <Device::removeAllChildren()>:
c00092f2:	56                   	push   esi
c00092f3:	53                   	push   ebx
c00092f4:	52                   	push   edx
c00092f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00092f9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00092ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009302:	74 17                	je     c000931b <Device::removeAllChildren()+0x29>
c0009304:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009307:	85 c0                	test   eax,eax
c0009309:	74 0c                	je     c0009317 <Device::removeAllChildren()+0x25>
c000930b:	8b 10                	mov    edx,DWORD PTR [eax]
c000930d:	83 ec 0c             	sub    esp,0xc
c0009310:	50                   	push   eax
c0009311:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009314:	83 c4 10             	add    esp,0x10
c0009317:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009319:	eb e4                	jmp    c00092ff <Device::removeAllChildren()+0xd>
c000931b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009321:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009327:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000932d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009334:	58                   	pop    eax
c0009335:	5b                   	pop    ebx
c0009336:	5e                   	pop    esi
c0009337:	c3                   	ret    

c0009338 <Device::hibernateAll()>:
c0009338:	53                   	push   ebx
c0009339:	83 ec 14             	sub    esp,0x14
c000933c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009340:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009342:	53                   	push   ebx
c0009343:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009346:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009352:	74 0f                	je     c0009363 <Device::hibernateAll()+0x2b>
c0009354:	83 ec 0c             	sub    esp,0xc
c0009357:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000935a:	e8 d9 ff ff ff       	call   c0009338 <Device::hibernateAll()>
c000935f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009361:	eb e9                	jmp    c000934c <Device::hibernateAll()+0x14>
c0009363:	83 c4 08             	add    esp,0x8
c0009366:	5b                   	pop    ebx
c0009367:	c3                   	ret    

c0009368 <Device::wakeAll()>:
c0009368:	53                   	push   ebx
c0009369:	83 ec 14             	sub    esp,0x14
c000936c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009370:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009372:	53                   	push   ebx
c0009373:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009376:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009382:	74 0f                	je     c0009393 <Device::wakeAll()+0x2b>
c0009384:	83 ec 0c             	sub    esp,0xc
c0009387:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000938a:	e8 d9 ff ff ff       	call   c0009368 <Device::wakeAll()>
c000938f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009391:	eb e9                	jmp    c000937c <Device::wakeAll()+0x14>
c0009393:	83 c4 08             	add    esp,0x8
c0009396:	5b                   	pop    ebx
c0009397:	c3                   	ret    

c0009398 <Device::detectAll()>:
c0009398:	53                   	push   ebx
c0009399:	83 ec 14             	sub    esp,0x14
c000939c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00093a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00093a2:	53                   	push   ebx
c00093a3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00093a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00093ac:	83 c4 10             	add    esp,0x10
c00093af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00093b2:	74 0f                	je     c00093c3 <Device::detectAll()+0x2b>
c00093b4:	83 ec 0c             	sub    esp,0xc
c00093b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00093ba:	e8 d9 ff ff ff       	call   c0009398 <Device::detectAll()>
c00093bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00093c1:	eb e9                	jmp    c00093ac <Device::detectAll()+0x14>
c00093c3:	83 c4 08             	add    esp,0x8
c00093c6:	5b                   	pop    ebx
c00093c7:	c3                   	ret    

c00093c8 <Device::disableLegacyAll()>:
c00093c8:	c3                   	ret    
c00093c9:	90                   	nop

c00093ca <Device::loadDriversForAll()>:
c00093ca:	c3                   	ret    
c00093cb:	90                   	nop

c00093cc <Device::powerSavingAll(PowerSavingLevel)>:
c00093cc:	56                   	push   esi
c00093cd:	53                   	push   ebx
c00093ce:	83 ec 0c             	sub    esp,0xc
c00093d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00093d5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00093d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00093db:	56                   	push   esi
c00093dc:	53                   	push   ebx
c00093dd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00093e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00093e6:	83 c4 10             	add    esp,0x10
c00093e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00093ec:	74 0f                	je     c00093fd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	56                   	push   esi
c00093f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00093f4:	e8 d3 ff ff ff       	call   c00093cc <Device::powerSavingAll(PowerSavingLevel)>
c00093f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00093fb:	eb e9                	jmp    c00093e6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00093fd:	58                   	pop    eax
c00093fe:	5b                   	pop    ebx
c00093ff:	5e                   	pop    esi
c0009400:	c3                   	ret    
c0009401:	90                   	nop

c0009402 <Device::setName(char const*)>:
c0009402:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000940a:	e9 41 72 ff ff       	jmp    c0000650 <strcpy>
c000940f:	90                   	nop

c0009410 <Device::Device(char const*)>:
c0009410:	83 ec 1c             	sub    esp,0x1c
c0009413:	ba 14 28 02 c0       	mov    edx,0xc0022814
c0009418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000941c:	89 10                	mov    DWORD PTR [eax],edx
c000941e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009422:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000942c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009430:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000943a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000943e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000944c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009456:	83 ec 08             	sub    esp,0x8
c0009459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000945d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009461:	e8 9c ff ff ff       	call   c0009402 <Device::setName(char const*)>
c0009466:	83 c4 10             	add    esp,0x10
c0009469:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009471:	83 ec 0c             	sub    esp,0xc
c0009474:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009478:	e8 1b 5f 00 00       	call   c000f398 <malloc>
c000947d:	83 c4 10             	add    esp,0x10
c0009480:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009486:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000948d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009491:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000949b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00094a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00094a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094ab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00094b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094bc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00094c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094c7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00094ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00094dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00094ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094ee:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00094f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094fc:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009506:	90                   	nop
c0009507:	83 c4 1c             	add    esp,0x1c
c000950a:	c3                   	ret    
c000950b:	90                   	nop

c000950c <Device::getName()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	05 d0 00 00 00       	add    eax,0xd0
c0009515:	c3                   	ret    

c0009516 <Device::closeAll()>:
c0009516:	53                   	push   ebx
c0009517:	83 ec 08             	sub    esp,0x8
c000951a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000951e:	53                   	push   ebx
c000951f:	e8 e8 ff ff ff       	call   c000950c <Device::getName()>
c0009524:	52                   	push   edx
c0009525:	50                   	push   eax
c0009526:	68 c8 27 02 c0       	push   0xc00227c8
c000952b:	e8 1e da ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009530:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009532:	6a 00                	push   0x0
c0009534:	6a 00                	push   0x0
c0009536:	6a 00                	push   0x0
c0009538:	53                   	push   ebx
c0009539:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000953c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009542:	83 c4 20             	add    esp,0x20
c0009545:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009548:	74 12                	je     c000955c <Device::closeAll()+0x46>
c000954a:	83 ec 0c             	sub    esp,0xc
c000954d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009550:	e8 c1 ff ff ff       	call   c0009516 <Device::closeAll()>
c0009555:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009557:	83 c4 10             	add    esp,0x10
c000955a:	eb e9                	jmp    c0009545 <Device::closeAll()+0x2f>
c000955c:	83 c4 08             	add    esp,0x8
c000955f:	5b                   	pop    ebx
c0009560:	c3                   	ret    
c0009561:	90                   	nop

c0009562 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009562:	83 ec 0c             	sub    esp,0xc
c0009565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009569:	83 ec 08             	sub    esp,0x8
c000956c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009570:	50                   	push   eax
c0009571:	e8 9a fe ff ff       	call   c0009410 <Device::Device(char const*)>
c0009576:	83 c4 10             	add    esp,0x10
c0009579:	ba 40 28 02 c0       	mov    edx,0xc0022840
c000957e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009582:	89 10                	mov    DWORD PTR [eax],edx
c0009584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009588:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    
c0009597:	90                   	nop

c0009598 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009598:	57                   	push   edi
c0009599:	56                   	push   esi
c000959a:	53                   	push   ebx
c000959b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000959f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00095a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00095a7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00095ad:	75 0c                	jne    c00095bb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00095af:	52                   	push   edx
c00095b0:	52                   	push   edx
c00095b1:	53                   	push   ebx
c00095b2:	56                   	push   esi
c00095b3:	e8 34 79 01 00       	call   c0020eec <LinkedList<Device>::addElement(Device*)>
c00095b8:	83 c4 10             	add    esp,0x10
c00095bb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00095c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00095c4:	74 12                	je     c00095d8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00095c6:	50                   	push   eax
c00095c7:	57                   	push   edi
c00095c8:	56                   	push   esi
c00095c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00095cc:	e8 c7 ff ff ff       	call   c0009598 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00095d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00095d3:	83 c4 10             	add    esp,0x10
c00095d6:	eb e9                	jmp    c00095c1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00095d8:	5b                   	pop    ebx
c00095d9:	5e                   	pop    esi
c00095da:	5f                   	pop    edi
c00095db:	c3                   	ret    

c00095dc <getDevicesOfType(DeviceType)>:
c00095dc:	53                   	push   ebx
c00095dd:	83 ec 14             	sub    esp,0x14
c00095e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00095e4:	53                   	push   ebx
c00095e5:	e8 de 79 01 00       	call   c0020fc8 <LinkedList<Device>::LinkedList()>
c00095ea:	83 c4 0c             	add    esp,0xc
c00095ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095f1:	53                   	push   ebx
c00095f2:	ff 35 d0 b0 02 c0    	push   DWORD PTR ds:0xc002b0d0
c00095f8:	e8 9b ff ff ff       	call   c0009598 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00095fd:	83 c4 18             	add    esp,0x18
c0009600:	89 d8                	mov    eax,ebx
c0009602:	5b                   	pop    ebx
c0009603:	c2 04 00             	ret    0x4
c0009606:	66 90                	xchg   ax,ax

c0009608 <HardDiskController::HardDiskController(char const*)>:
c0009608:	83 ec 0c             	sub    esp,0xc
c000960b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000960f:	83 ec 08             	sub    esp,0x8
c0009612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009616:	50                   	push   eax
c0009617:	e8 f4 fd ff ff       	call   c0009410 <Device::Device(char const*)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	ba 6c 28 02 c0       	mov    edx,0xc002286c
c0009624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009628:	89 10                	mov    DWORD PTR [eax],edx
c000962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000962e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009638:	90                   	nop
c0009639:	83 c4 0c             	add    esp,0xc
c000963c:	c3                   	ret    
c000963d:	90                   	nop
c000963e:	66 90                	xchg   ax,ax

c0009640 <HardDiskController::~HardDiskController()>:
c0009640:	83 ec 0c             	sub    esp,0xc
c0009643:	ba 6c 28 02 c0       	mov    edx,0xc002286c
c0009648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000964c:	89 10                	mov    DWORD PTR [eax],edx
c000964e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009652:	83 ec 0c             	sub    esp,0xc
c0009655:	50                   	push   eax
c0009656:	e8 55 fb ff ff       	call   c00091b0 <Device::~Device()>
c000965b:	83 c4 10             	add    esp,0x10
c000965e:	90                   	nop
c000965f:	83 c4 0c             	add    esp,0xc
c0009662:	c3                   	ret    
c0009663:	90                   	nop

c0009664 <HardDiskController::~HardDiskController()>:
c0009664:	83 ec 0c             	sub    esp,0xc
c0009667:	83 ec 0c             	sub    esp,0xc
c000966a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000966e:	e8 cd ff ff ff       	call   c0009640 <HardDiskController::~HardDiskController()>
c0009673:	83 c4 10             	add    esp,0x10
c0009676:	83 ec 08             	sub    esp,0x8
c0009679:	68 58 01 00 00       	push   0x158
c000967e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009682:	e8 88 34 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c0009687:	83 c4 10             	add    esp,0x10
c000968a:	83 c4 0c             	add    esp,0xc
c000968d:	c3                   	ret    

c000968e <PhysicalDisk::eject()>:
c000968e:	83 c8 ff             	or     eax,0xffffffff
c0009691:	c3                   	ret    

c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009699:	83 ec 08             	sub    esp,0x8
c000969c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096a0:	50                   	push   eax
c00096a1:	e8 6a fd ff ff       	call   c0009410 <Device::Device(char const*)>
c00096a6:	83 c4 10             	add    esp,0x10
c00096a9:	ba 98 28 02 c0       	mov    edx,0xc0022898
c00096ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096b2:	89 10                	mov    DWORD PTR [eax],edx
c00096b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096b8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00096bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096c3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00096ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096ce:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00096d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00096e0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00096e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096ea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00096f4:	90                   	nop
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	c3                   	ret    
c00096f9:	90                   	nop

c00096fa <PhysicalDisk::startCache()>:
c00096fa:	56                   	push   esi
c00096fb:	53                   	push   ebx
c00096fc:	83 ec 10             	sub    esp,0x10
c00096ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009703:	6a 44                	push   0x44
c0009705:	e8 8e 5c 00 00       	call   c000f398 <malloc>
c000970a:	89 c6                	mov    esi,eax
c000970c:	58                   	pop    eax
c000970d:	5a                   	pop    edx
c000970e:	53                   	push   ebx
c000970f:	56                   	push   esi
c0009710:	e8 a7 13 00 00       	call   c000aabc <VCache::VCache(PhysicalDisk*)>
c0009715:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000971b:	83 c4 14             	add    esp,0x14
c000971e:	5b                   	pop    ebx
c000971f:	5e                   	pop    esi
c0009720:	c3                   	ret    
c0009721:	90                   	nop

c0009722 <PhysicalDisk::~PhysicalDisk()>:
c0009722:	83 ec 0c             	sub    esp,0xc
c0009725:	ba 98 28 02 c0       	mov    edx,0xc0022898
c000972a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000972e:	89 10                	mov    DWORD PTR [eax],edx
c0009730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009734:	83 ec 0c             	sub    esp,0xc
c0009737:	50                   	push   eax
c0009738:	e8 73 fa ff ff       	call   c00091b0 <Device::~Device()>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	90                   	nop
c0009741:	83 c4 0c             	add    esp,0xc
c0009744:	c3                   	ret    
c0009745:	90                   	nop

c0009746 <PhysicalDisk::~PhysicalDisk()>:
c0009746:	83 ec 0c             	sub    esp,0xc
c0009749:	83 ec 0c             	sub    esp,0xc
c000974c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009750:	e8 cd ff ff ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c0009755:	83 c4 10             	add    esp,0x10
c0009758:	83 ec 08             	sub    esp,0x8
c000975b:	68 6c 01 00 00       	push   0x16c
c0009760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009764:	e8 a6 33 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c0009769:	83 c4 10             	add    esp,0x10
c000976c:	83 c4 0c             	add    esp,0xc
c000976f:	c3                   	ret    

c0009770 <startGUI(void*)>:
c0009770:	55                   	push   ebp
c0009771:	89 e5                	mov    ebp,esp
c0009773:	53                   	push   ebx
c0009774:	83 ec 04             	sub    esp,0x4
c0009777:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000977f:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009784:	85 c0                	test   eax,eax
c0009786:	75 01                	jne    c0009789 <startGUI(void*)+0x19>
c0009788:	fb                   	sti    
c0009789:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c000978f:	83 ec 08             	sub    esp,0x8
c0009792:	6a 01                	push   0x1
c0009794:	68 c8 28 02 c0       	push   0xc00228c8
c0009799:	e8 36 c0 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c000979e:	83 c4 10             	add    esp,0x10
c00097a1:	83 ec 08             	sub    esp,0x8
c00097a4:	53                   	push   ebx
c00097a5:	50                   	push   eax
c00097a6:	e8 8a c2 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c00097ab:	83 c4 10             	add    esp,0x10
c00097ae:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c00097b4:	83 ec 08             	sub    esp,0x8
c00097b7:	6a 01                	push   0x1
c00097b9:	68 e2 28 02 c0       	push   0xc00228e2
c00097be:	e8 11 c0 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	83 ec 08             	sub    esp,0x8
c00097c9:	53                   	push   ebx
c00097ca:	50                   	push   eax
c00097cb:	e8 65 c2 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c00097d0:	83 c4 10             	add    esp,0x10
c00097d3:	eb fe                	jmp    c00097d3 <startGUI(void*)+0x63>

c00097d5 <startGUIVESA(void*)>:
c00097d5:	55                   	push   ebp
c00097d6:	89 e5                	mov    ebp,esp
c00097d8:	53                   	push   ebx
c00097d9:	83 ec 04             	sub    esp,0x4
c00097dc:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00097e4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00097e9:	85 c0                	test   eax,eax
c00097eb:	75 01                	jne    c00097ee <startGUIVESA(void*)+0x19>
c00097ed:	fb                   	sti    
c00097ee:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c00097f4:	83 ec 08             	sub    esp,0x8
c00097f7:	6a 01                	push   0x1
c00097f9:	68 00 29 02 c0       	push   0xc0022900
c00097fe:	e8 d1 bf 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c0009803:	83 c4 10             	add    esp,0x10
c0009806:	83 ec 08             	sub    esp,0x8
c0009809:	53                   	push   ebx
c000980a:	50                   	push   eax
c000980b:	e8 25 c2 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c0009810:	83 c4 10             	add    esp,0x10
c0009813:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c0009819:	83 ec 08             	sub    esp,0x8
c000981c:	6a 01                	push   0x1
c000981e:	68 e2 28 02 c0       	push   0xc00228e2
c0009823:	e8 ac bf 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c0009828:	83 c4 10             	add    esp,0x10
c000982b:	83 ec 08             	sub    esp,0x8
c000982e:	53                   	push   ebx
c000982f:	50                   	push   eax
c0009830:	e8 00 c2 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c0009835:	83 c4 10             	add    esp,0x10
c0009838:	eb fe                	jmp    c0009838 <startGUIVESA(void*)+0x63>

c000983a <sendKeyToTerminal(unsigned char)>:
c000983a:	55                   	push   ebp
c000983b:	89 e5                	mov    ebp,esp
c000983d:	83 ec 28             	sub    esp,0x28
c0009840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009843:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009846:	a1 b4 d1 02 c0       	mov    eax,ds:0xc002d1b4
c000984b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000984f:	83 ec 08             	sub    esp,0x8
c0009852:	52                   	push   edx
c0009853:	50                   	push   eax
c0009854:	e8 77 89 00 00       	call   c00121d0 <VgaText::receiveKey(unsigned char)>
c0009859:	83 c4 10             	add    esp,0x10
c000985c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009860:	83 f8 0a             	cmp    eax,0xa
c0009863:	74 16                	je     c000987b <sendKeyToTerminal(unsigned char)+0x41>
c0009865:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009869:	83 f8 03             	cmp    eax,0x3
c000986c:	74 0d                	je     c000987b <sendKeyToTerminal(unsigned char)+0x41>
c000986e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009872:	83 f8 1c             	cmp    eax,0x1c
c0009875:	0f 85 92 00 00 00    	jne    c000990d <sendKeyToTerminal(unsigned char)+0xd3>
c000987b:	fa                   	cli    
c000987c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009881:	83 c0 01             	add    eax,0x1
c0009884:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0009889:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c000988e:	83 c0 01             	add    eax,0x1
c0009891:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0009896:	a1 80 a6 02 c0       	mov    eax,ds:0xc002a680
c000989b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000989e:	c7 05 80 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a680,0x0
c00098a8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00098ac:	74 1f                	je     c00098cd <sendKeyToTerminal(unsigned char)+0x93>
c00098ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00098b1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00098b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00098b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00098ba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00098c3:	e8 38 cd 00 00       	call   c0016600 <unblockTask(ThreadControlBlock*)>
c00098c8:	83 c4 10             	add    esp,0x10
c00098cb:	eb db                	jmp    c00098a8 <sendKeyToTerminal(unsigned char)+0x6e>
c00098cd:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00098d2:	83 e8 01             	sub    eax,0x1
c00098d5:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c00098da:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00098df:	85 c0                	test   eax,eax
c00098e1:	75 18                	jne    c00098fb <sendKeyToTerminal(unsigned char)+0xc1>
c00098e3:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c00098e8:	85 c0                	test   eax,eax
c00098ea:	74 0f                	je     c00098fb <sendKeyToTerminal(unsigned char)+0xc1>
c00098ec:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c00098f6:	e8 05 ca 00 00       	call   c0016300 <schedule()>
c00098fb:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0009903:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009908:	85 c0                	test   eax,eax
c000990a:	75 01                	jne    c000990d <sendKeyToTerminal(unsigned char)+0xd3>
c000990c:	fb                   	sti    
c000990d:	90                   	nop
c000990e:	c9                   	leave  
c000990f:	c3                   	ret    

c0009910 <sendKeyboardToken(KeyboardToken)>:
c0009910:	55                   	push   ebp
c0009911:	89 e5                	mov    ebp,esp
c0009913:	83 ec 18             	sub    esp,0x18
c0009916:	e8 ed 66 00 00       	call   c0010008 <KeUserIOReceived()>
c000991b:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000991e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009921:	0f b7 c0             	movzx  eax,ax
c0009924:	83 f2 01             	xor    edx,0x1
c0009927:	88 90 a0 a6 02 c0    	mov    BYTE PTR [eax-0x3ffd5960],dl
c000992d:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0009932:	85 c0                	test   eax,eax
c0009934:	74 24                	je     c000995a <sendKeyboardToken(KeyboardToken)+0x4a>
c0009936:	8b 15 88 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a688
c000993c:	83 ec 04             	sub    esp,0x4
c000993f:	68 a0 a6 02 c0       	push   0xc002a6a0
c0009944:	83 ec 08             	sub    esp,0x8
c0009947:	89 e0                	mov    eax,esp
c0009949:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000994c:	89 08                	mov    DWORD PTR [eax],ecx
c000994e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009951:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009955:	ff d2                	call   edx
c0009957:	83 c4 10             	add    esp,0x10
c000995a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000995e:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009961:	0f b6 c0             	movzx  eax,al
c0009964:	85 c0                	test   eax,eax
c0009966:	0f 84 da 00 00 00    	je     c0009a46 <sendKeyboardToken(KeyboardToken)+0x136>
c000996c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000996f:	0f b7 c0             	movzx  eax,ax
c0009972:	3d 18 03 00 00       	cmp    eax,0x318
c0009977:	75 06                	jne    c000997f <sendKeyboardToken(KeyboardToken)+0x6f>
c0009979:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000997f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009982:	0f b7 c0             	movzx  eax,ax
c0009985:	3d 19 03 00 00       	cmp    eax,0x319
c000998a:	75 06                	jne    c0009992 <sendKeyboardToken(KeyboardToken)+0x82>
c000998c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009995:	0f b7 c0             	movzx  eax,ax
c0009998:	3d 1a 03 00 00       	cmp    eax,0x31a
c000999d:	75 06                	jne    c00099a5 <sendKeyboardToken(KeyboardToken)+0x95>
c000999f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00099a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a8:	0f b7 c0             	movzx  eax,ax
c00099ab:	3d 1b 03 00 00       	cmp    eax,0x31b
c00099b0:	75 06                	jne    c00099b8 <sendKeyboardToken(KeyboardToken)+0xa8>
c00099b2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00099b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099bb:	0f b7 c0             	movzx  eax,ax
c00099be:	3d 1c 03 00 00       	cmp    eax,0x31c
c00099c3:	75 06                	jne    c00099cb <sendKeyboardToken(KeyboardToken)+0xbb>
c00099c5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00099cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099ce:	0f b7 c0             	movzx  eax,ax
c00099d1:	3d 1d 03 00 00       	cmp    eax,0x31d
c00099d6:	75 06                	jne    c00099de <sendKeyboardToken(KeyboardToken)+0xce>
c00099d8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00099de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099e1:	0f b7 c0             	movzx  eax,ax
c00099e4:	3d 1e 03 00 00       	cmp    eax,0x31e
c00099e9:	75 06                	jne    c00099f1 <sendKeyboardToken(KeyboardToken)+0xe1>
c00099eb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00099f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099f4:	0f b7 c0             	movzx  eax,ax
c00099f7:	3d 1f 03 00 00       	cmp    eax,0x31f
c00099fc:	75 06                	jne    c0009a04 <sendKeyboardToken(KeyboardToken)+0xf4>
c00099fe:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0009a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a07:	0f b7 c0             	movzx  eax,ax
c0009a0a:	3d 20 03 00 00       	cmp    eax,0x320
c0009a0f:	75 06                	jne    c0009a17 <sendKeyboardToken(KeyboardToken)+0x107>
c0009a11:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0009a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a1a:	0f b7 c0             	movzx  eax,ax
c0009a1d:	3d 21 03 00 00       	cmp    eax,0x321
c0009a22:	75 06                	jne    c0009a2a <sendKeyboardToken(KeyboardToken)+0x11a>
c0009a24:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0009a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a2d:	0f b7 c0             	movzx  eax,ax
c0009a30:	3d 22 03 00 00       	cmp    eax,0x322
c0009a35:	0f 85 f1 00 00 00    	jne    c0009b2c <sendKeyboardToken(KeyboardToken)+0x21c>
c0009a3b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0009a41:	e9 e6 00 00 00       	jmp    c0009b2c <sendKeyboardToken(KeyboardToken)+0x21c>
c0009a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a49:	0f b7 c0             	movzx  eax,ax
c0009a4c:	3d 18 03 00 00       	cmp    eax,0x318
c0009a51:	75 0a                	jne    c0009a5d <sendKeyboardToken(KeyboardToken)+0x14d>
c0009a53:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0009a59:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a60:	0f b7 c0             	movzx  eax,ax
c0009a63:	3d 19 03 00 00       	cmp    eax,0x319
c0009a68:	75 0a                	jne    c0009a74 <sendKeyboardToken(KeyboardToken)+0x164>
c0009a6a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009a70:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a77:	0f b7 c0             	movzx  eax,ax
c0009a7a:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009a7f:	75 0a                	jne    c0009a8b <sendKeyboardToken(KeyboardToken)+0x17b>
c0009a81:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0009a87:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a8e:	0f b7 c0             	movzx  eax,ax
c0009a91:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009a96:	75 0a                	jne    c0009aa2 <sendKeyboardToken(KeyboardToken)+0x192>
c0009a98:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009a9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa5:	0f b7 c0             	movzx  eax,ax
c0009aa8:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009aad:	75 0a                	jne    c0009ab9 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009aaf:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009ab5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abc:	0f b7 c0             	movzx  eax,ax
c0009abf:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009ac4:	75 0a                	jne    c0009ad0 <sendKeyboardToken(KeyboardToken)+0x1c0>
c0009ac6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009acc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ad3:	0f b7 c0             	movzx  eax,ax
c0009ad6:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009adb:	75 0a                	jne    c0009ae7 <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009add:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009ae3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aea:	0f b7 c0             	movzx  eax,ax
c0009aed:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009af2:	75 0a                	jne    c0009afe <sendKeyboardToken(KeyboardToken)+0x1ee>
c0009af4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0009afa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b01:	0f b7 c0             	movzx  eax,ax
c0009b04:	3d 20 03 00 00       	cmp    eax,0x320
c0009b09:	75 0a                	jne    c0009b15 <sendKeyboardToken(KeyboardToken)+0x205>
c0009b0b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0009b11:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b18:	0f b7 c0             	movzx  eax,ax
c0009b1b:	3d 21 03 00 00       	cmp    eax,0x321
c0009b20:	75 0a                	jne    c0009b2c <sendKeyboardToken(KeyboardToken)+0x21c>
c0009b22:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0009b28:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b2f:	0f b7 c0             	movzx  eax,ax
c0009b32:	3d 00 02 00 00       	cmp    eax,0x200
c0009b37:	75 2f                	jne    c0009b68 <sendKeyboardToken(KeyboardToken)+0x258>
c0009b39:	a0 a0 aa 02 c0       	mov    al,ds:0xc002aaa0
c0009b3e:	83 f0 01             	xor    eax,0x1
c0009b41:	0f b6 c0             	movzx  eax,al
c0009b44:	85 c0                	test   eax,eax
c0009b46:	74 20                	je     c0009b68 <sendKeyboardToken(KeyboardToken)+0x258>
c0009b48:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0009b4d:	6a 01                	push   0x1
c0009b4f:	6a 00                	push   0x0
c0009b51:	68 70 97 00 c0       	push   0xc0009770
c0009b56:	50                   	push   eax
c0009b57:	e8 4c c5 00 00       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c0009b5c:	83 c4 10             	add    esp,0x10
c0009b5f:	c6 05 a0 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aaa0,0x1
c0009b66:	eb 3a                	jmp    c0009ba2 <sendKeyboardToken(KeyboardToken)+0x292>
c0009b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b6b:	0f b7 c0             	movzx  eax,ax
c0009b6e:	3d 01 02 00 00       	cmp    eax,0x201
c0009b73:	75 2d                	jne    c0009ba2 <sendKeyboardToken(KeyboardToken)+0x292>
c0009b75:	a0 a0 aa 02 c0       	mov    al,ds:0xc002aaa0
c0009b7a:	83 f0 01             	xor    eax,0x1
c0009b7d:	0f b6 c0             	movzx  eax,al
c0009b80:	85 c0                	test   eax,eax
c0009b82:	74 1e                	je     c0009ba2 <sendKeyboardToken(KeyboardToken)+0x292>
c0009b84:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0009b89:	6a 01                	push   0x1
c0009b8b:	6a 00                	push   0x0
c0009b8d:	68 d5 97 00 c0       	push   0xc00097d5
c0009b92:	50                   	push   eax
c0009b93:	e8 10 c5 00 00       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c0009b98:	83 c4 10             	add    esp,0x10
c0009b9b:	c6 05 a0 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aaa0,0x1
c0009ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ba5:	0f b7 c0             	movzx  eax,ax
c0009ba8:	3d 25 03 00 00       	cmp    eax,0x325
c0009bad:	75 06                	jne    c0009bb5 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009baf:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bb8:	0f b7 c0             	movzx  eax,ax
c0009bbb:	3d 24 03 00 00       	cmp    eax,0x324
c0009bc0:	75 06                	jne    c0009bc8 <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009bc2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bcb:	0f b7 c0             	movzx  eax,ax
c0009bce:	3d 23 03 00 00       	cmp    eax,0x323
c0009bd3:	75 06                	jne    c0009bdb <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009bd5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0009bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bde:	0f b7 c0             	movzx  eax,ax
c0009be1:	3d 26 03 00 00       	cmp    eax,0x326
c0009be6:	75 06                	jne    c0009bee <sendKeyboardToken(KeyboardToken)+0x2de>
c0009be8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bf1:	0f b7 c0             	movzx  eax,ax
c0009bf4:	3d 27 03 00 00       	cmp    eax,0x327
c0009bf9:	75 06                	jne    c0009c01 <sendKeyboardToken(KeyboardToken)+0x2f1>
c0009bfb:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0009c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c04:	0f b7 c0             	movzx  eax,ax
c0009c07:	3d 22 03 00 00       	cmp    eax,0x322
c0009c0c:	75 06                	jne    c0009c14 <sendKeyboardToken(KeyboardToken)+0x304>
c0009c0e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0009c14:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0009c18:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009c1b:	83 f0 01             	xor    eax,0x1
c0009c1e:	0f b6 c0             	movzx  eax,al
c0009c21:	85 c0                	test   eax,eax
c0009c23:	74 7c                	je     c0009ca1 <sendKeyboardToken(KeyboardToken)+0x391>
c0009c25:	a0 a1 a7 02 c0       	mov    al,ds:0xc002a7a1
c0009c2a:	0f b6 c0             	movzx  eax,al
c0009c2d:	85 c0                	test   eax,eax
c0009c2f:	74 43                	je     c0009c74 <sendKeyboardToken(KeyboardToken)+0x364>
c0009c31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009c35:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0009c39:	85 c0                	test   eax,eax
c0009c3b:	74 2b                	je     c0009c68 <sendKeyboardToken(KeyboardToken)+0x358>
c0009c3d:	8b 15 a4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aaa4
c0009c43:	89 d0                	mov    eax,edx
c0009c45:	c1 e0 02             	shl    eax,0x2
c0009c48:	01 d0                	add    eax,edx
c0009c4a:	d1 e0                	shl    eax,1
c0009c4c:	a3 a4 aa 02 c0       	mov    ds:0xc002aaa4,eax
c0009c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c54:	0f b7 c0             	movzx  eax,ax
c0009c57:	8d 50 d0             	lea    edx,[eax-0x30]
c0009c5a:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009c5f:	01 d0                	add    eax,edx
c0009c61:	a3 a4 aa 02 c0       	mov    ds:0xc002aaa4,eax
c0009c66:	eb 71                	jmp    c0009cd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009c68:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c0009c72:	eb 65                	jmp    c0009cd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009c74:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009c79:	85 c0                	test   eax,eax
c0009c7b:	74 18                	je     c0009c95 <sendKeyboardToken(KeyboardToken)+0x385>
c0009c7d:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009c82:	0f b6 c0             	movzx  eax,al
c0009c85:	83 ec 0c             	sub    esp,0xc
c0009c88:	50                   	push   eax
c0009c89:	e8 ac fb ff ff       	call   c000983a <sendKeyToTerminal(unsigned char)>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009c95:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c0009c9f:	eb 38                	jmp    c0009cd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ca4:	0f b7 c0             	movzx  eax,ax
c0009ca7:	3d 01 01 00 00       	cmp    eax,0x101
c0009cac:	75 2b                	jne    c0009cd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009cae:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009cb3:	85 c0                	test   eax,eax
c0009cb5:	74 18                	je     c0009ccf <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009cb7:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009cbc:	0f b6 c0             	movzx  eax,al
c0009cbf:	83 ec 0c             	sub    esp,0xc
c0009cc2:	50                   	push   eax
c0009cc3:	e8 72 fb ff ff       	call   c000983a <sendKeyToTerminal(unsigned char)>
c0009cc8:	83 c4 10             	add    esp,0x10
c0009ccb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009ccf:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c0009cd9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009cdc:	83 f0 01             	xor    eax,0x1
c0009cdf:	0f b6 c0             	movzx  eax,al
c0009ce2:	85 c0                	test   eax,eax
c0009ce4:	74 5a                	je     c0009d40 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ce6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009ce9:	83 f0 01             	xor    eax,0x1
c0009cec:	0f b6 c0             	movzx  eax,al
c0009cef:	85 c0                	test   eax,eax
c0009cf1:	74 4d                	je     c0009d40 <sendKeyboardToken(KeyboardToken)+0x430>
c0009cf3:	a0 a0 a7 02 c0       	mov    al,ds:0xc002a7a0
c0009cf8:	83 f0 01             	xor    eax,0x1
c0009cfb:	0f b6 c0             	movzx  eax,al
c0009cfe:	85 c0                	test   eax,eax
c0009d00:	74 3e                	je     c0009d40 <sendKeyboardToken(KeyboardToken)+0x430>
c0009d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d05:	0f b7 c0             	movzx  eax,ax
c0009d08:	83 f8 1f             	cmp    eax,0x1f
c0009d0b:	76 0b                	jbe    c0009d18 <sendKeyboardToken(KeyboardToken)+0x408>
c0009d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d10:	0f b7 c0             	movzx  eax,ax
c0009d13:	83 f8 7e             	cmp    eax,0x7e
c0009d16:	76 16                	jbe    c0009d2e <sendKeyboardToken(KeyboardToken)+0x41e>
c0009d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d1b:	0f b7 c0             	movzx  eax,ax
c0009d1e:	83 f8 0a             	cmp    eax,0xa
c0009d21:	74 0b                	je     c0009d2e <sendKeyboardToken(KeyboardToken)+0x41e>
c0009d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d26:	0f b7 c0             	movzx  eax,ax
c0009d29:	83 f8 08             	cmp    eax,0x8
c0009d2c:	75 12                	jne    c0009d40 <sendKeyboardToken(KeyboardToken)+0x430>
c0009d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d31:	0f b6 c0             	movzx  eax,al
c0009d34:	83 ec 0c             	sub    esp,0xc
c0009d37:	50                   	push   eax
c0009d38:	e8 fd fa ff ff       	call   c000983a <sendKeyToTerminal(unsigned char)>
c0009d3d:	83 c4 10             	add    esp,0x10
c0009d40:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009d43:	83 f0 01             	xor    eax,0x1
c0009d46:	0f b6 c0             	movzx  eax,al
c0009d49:	85 c0                	test   eax,eax
c0009d4b:	74 5d                	je     c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d4d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009d50:	83 f0 01             	xor    eax,0x1
c0009d53:	0f b6 c0             	movzx  eax,al
c0009d56:	85 c0                	test   eax,eax
c0009d58:	74 50                	je     c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d5a:	a0 a0 a7 02 c0       	mov    al,ds:0xc002a7a0
c0009d5f:	0f b6 c0             	movzx  eax,al
c0009d62:	85 c0                	test   eax,eax
c0009d64:	74 44                	je     c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d69:	0f b7 c0             	movzx  eax,ax
c0009d6c:	83 f8 3f             	cmp    eax,0x3f
c0009d6f:	76 39                	jbe    c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d74:	0f b7 c0             	movzx  eax,ax
c0009d77:	83 f8 7f             	cmp    eax,0x7f
c0009d7a:	77 2e                	ja     c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d7f:	88 c2                	mov    dl,al
c0009d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d84:	0f b7 c0             	movzx  eax,ax
c0009d87:	83 f8 5f             	cmp    eax,0x5f
c0009d8a:	76 04                	jbe    c0009d90 <sendKeyboardToken(KeyboardToken)+0x480>
c0009d8c:	b0 20                	mov    al,0x20
c0009d8e:	eb 02                	jmp    c0009d92 <sendKeyboardToken(KeyboardToken)+0x482>
c0009d90:	b0 00                	mov    al,0x0
c0009d92:	89 d1                	mov    ecx,edx
c0009d94:	29 c1                	sub    ecx,eax
c0009d96:	89 c8                	mov    eax,ecx
c0009d98:	83 e8 40             	sub    eax,0x40
c0009d9b:	0f b6 c0             	movzx  eax,al
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	50                   	push   eax
c0009da2:	e8 93 fa ff ff       	call   c000983a <sendKeyToTerminal(unsigned char)>
c0009da7:	83 c4 10             	add    esp,0x10
c0009daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009dad:	0f b7 c0             	movzx  eax,ax
c0009db0:	3d 00 03 00 00       	cmp    eax,0x300
c0009db5:	75 12                	jne    c0009dc9 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009db7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009dba:	83 f0 01             	xor    eax,0x1
c0009dbd:	0f b6 c0             	movzx  eax,al
c0009dc0:	85 c0                	test   eax,eax
c0009dc2:	74 05                	je     c0009dc9 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009dc4:	e8 0c 7b 00 00       	call   c00118d5 <doTerminalCycle()>
c0009dc9:	90                   	nop
c0009dca:	c9                   	leave  
c0009dcb:	c3                   	ret    

c0009dcc <clearInternalKeybuffer(VgaText*)>:
c0009dcc:	55                   	push   ebp
c0009dcd:	89 e5                	mov    ebp,esp
c0009dcf:	83 ec 08             	sub    esp,0x8
c0009dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009dd5:	05 02 01 00 00       	add    eax,0x102
c0009dda:	83 ec 0c             	sub    esp,0xc
c0009ddd:	50                   	push   eax
c0009dde:	e8 9d 67 ff ff       	call   c0000580 <strlen>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009de9:	81 c2 02 01 00 00    	add    edx,0x102
c0009def:	83 ec 04             	sub    esp,0x4
c0009df2:	50                   	push   eax
c0009df3:	6a 00                	push   0x0
c0009df5:	52                   	push   edx
c0009df6:	e8 f5 66 ff ff       	call   c00004f0 <memset>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	90                   	nop
c0009dff:	c9                   	leave  
c0009e00:	c3                   	ret    

c0009e01 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009e01:	55                   	push   ebp
c0009e02:	89 e5                	mov    ebp,esp
c0009e04:	83 ec 18             	sub    esp,0x18
c0009e07:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0009e0c:	85 c0                	test   eax,eax
c0009e0e:	74 2a                	je     c0009e3a <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009e10:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009e16:	8b 15 88 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a688
c0009e1c:	83 ec 04             	sub    esp,0x4
c0009e1f:	68 a0 a6 02 c0       	push   0xc002a6a0
c0009e24:	83 ec 08             	sub    esp,0x8
c0009e27:	89 e0                	mov    eax,esp
c0009e29:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009e2c:	89 08                	mov    DWORD PTR [eax],ecx
c0009e2e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009e31:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009e35:	ff d2                	call   edx
c0009e37:	83 c4 10             	add    esp,0x10
c0009e3a:	fb                   	sti    
c0009e3b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009e42:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009e46:	0f 84 08 01 00 00    	je     c0009f54 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e4f:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009e55:	0f be c0             	movsx  eax,al
c0009e58:	85 c0                	test   eax,eax
c0009e5a:	75 27                	jne    c0009e83 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009e5c:	fa                   	cli    
c0009e5d:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009e62:	83 c0 01             	add    eax,0x1
c0009e65:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0009e6a:	e8 91 c4 00 00       	call   c0016300 <schedule()>
c0009e6f:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0009e77:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009e7c:	85 c0                	test   eax,eax
c0009e7e:	75 cc                	jne    c0009e4c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009e80:	fb                   	sti    
c0009e81:	eb c9                	jmp    c0009e4c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009e83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009e86:	8d 50 01             	lea    edx,[eax+0x1]
c0009e89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009e8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009e8f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009e95:	88 10                	mov    BYTE PTR [eax],dl
c0009e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e9a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009ea0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009ea3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009ea7:	83 f8 03             	cmp    eax,0x3
c0009eaa:	75 1e                	jne    c0009eca <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009eac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009eb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eb3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009eb6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ebc:	83 ec 08             	sub    esp,0x8
c0009ebf:	6a 02                	push   0x2
c0009ec1:	50                   	push   eax
c0009ec2:	e8 55 69 00 00       	call   c001081c <KeRaiseSignal(SigHandlerBlock*, int)>
c0009ec7:	83 c4 10             	add    esp,0x10
c0009eca:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009ece:	83 f8 1c             	cmp    eax,0x1c
c0009ed1:	75 1e                	jne    c0009ef1 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009ed3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ed8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009edd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ee3:	83 ec 08             	sub    esp,0x8
c0009ee6:	6a 09                	push   0x9
c0009ee8:	50                   	push   eax
c0009ee9:	e8 2e 69 00 00       	call   c001081c <KeRaiseSignal(SigHandlerBlock*, int)>
c0009eee:	83 c4 10             	add    esp,0x10
c0009ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ef4:	05 02 01 00 00       	add    eax,0x102
c0009ef9:	83 ec 0c             	sub    esp,0xc
c0009efc:	50                   	push   eax
c0009efd:	e8 7e 66 ff ff       	call   c0000580 <strlen>
c0009f02:	83 c4 10             	add    esp,0x10
c0009f05:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009f08:	81 c2 02 01 00 00    	add    edx,0x102
c0009f0e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009f11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009f14:	81 c2 02 01 00 00    	add    edx,0x102
c0009f1a:	83 ec 04             	sub    esp,0x4
c0009f1d:	50                   	push   eax
c0009f1e:	51                   	push   ecx
c0009f1f:	52                   	push   edx
c0009f20:	e8 ab 64 ff ff       	call   c00003d0 <memmove>
c0009f25:	83 c4 10             	add    esp,0x10
c0009f28:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009f2c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009f30:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009f34:	83 f8 0a             	cmp    eax,0xa
c0009f37:	74 16                	je     c0009f4f <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009f39:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009f3d:	83 f8 03             	cmp    eax,0x3
c0009f40:	74 0d                	je     c0009f4f <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009f42:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009f46:	83 f8 1c             	cmp    eax,0x1c
c0009f49:	0f 85 f3 fe ff ff    	jne    c0009e42 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009f4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f52:	eb 03                	jmp    c0009f57 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009f54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f57:	c9                   	leave  
c0009f58:	c3                   	ret    
c0009f59:	90                   	nop

c0009f5a <Keyboard::Keyboard(char const*)>:
c0009f5a:	83 ec 0c             	sub    esp,0xc
c0009f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f68:	50                   	push   eax
c0009f69:	e8 a2 f4 ff ff       	call   c0009410 <Device::Device(char const*)>
c0009f6e:	83 c4 10             	add    esp,0x10
c0009f71:	ba 24 29 02 c0       	mov    edx,0xc0022924
c0009f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f7a:	89 10                	mov    DWORD PTR [eax],edx
c0009f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f80:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009f8a:	c6 05 84 a6 02 c0 01 	mov    BYTE PTR ds:0xc002a684,0x1
c0009f91:	90                   	nop
c0009f92:	83 c4 0c             	add    esp,0xc
c0009f95:	c3                   	ret    

c0009f96 <Keyboard::~Keyboard()>:
c0009f96:	83 ec 0c             	sub    esp,0xc
c0009f99:	ba 24 29 02 c0       	mov    edx,0xc0022924
c0009f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fa2:	89 10                	mov    DWORD PTR [eax],edx
c0009fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fa8:	83 ec 0c             	sub    esp,0xc
c0009fab:	50                   	push   eax
c0009fac:	e8 ff f1 ff ff       	call   c00091b0 <Device::~Device()>
c0009fb1:	83 c4 10             	add    esp,0x10
c0009fb4:	90                   	nop
c0009fb5:	83 c4 0c             	add    esp,0xc
c0009fb8:	c3                   	ret    
c0009fb9:	90                   	nop

c0009fba <Keyboard::~Keyboard()>:
c0009fba:	83 ec 0c             	sub    esp,0xc
c0009fbd:	83 ec 0c             	sub    esp,0xc
c0009fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fc4:	e8 cd ff ff ff       	call   c0009f96 <Keyboard::~Keyboard()>
c0009fc9:	83 c4 10             	add    esp,0x10
c0009fcc:	83 ec 08             	sub    esp,0x8
c0009fcf:	68 5c 01 00 00       	push   0x15c
c0009fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fd8:	e8 32 2b 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	83 c4 0c             	add    esp,0xc
c0009fe3:	c3                   	ret    

c0009fe4 <LogicalDisk::close(int, int, void*)>:
c0009fe4:	83 c8 ff             	or     eax,0xffffffff
c0009fe7:	c3                   	ret    

c0009fe8 <LogicalDisk::~LogicalDisk()>:
c0009fe8:	83 ec 0c             	sub    esp,0xc
c0009feb:	ba 9c 29 02 c0       	mov    edx,0xc002299c
c0009ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ff4:	89 10                	mov    DWORD PTR [eax],edx
c0009ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	50                   	push   eax
c0009ffe:	e8 ad f1 ff ff       	call   c00091b0 <Device::~Device()>
c000a003:	83 c4 10             	add    esp,0x10
c000a006:	90                   	nop
c000a007:	83 c4 0c             	add    esp,0xc
c000a00a:	c3                   	ret    
c000a00b:	90                   	nop

c000a00c <LogicalDisk::~LogicalDisk()>:
c000a00c:	83 ec 0c             	sub    esp,0xc
c000a00f:	83 ec 0c             	sub    esp,0xc
c000a012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a016:	e8 cd ff ff ff       	call   c0009fe8 <LogicalDisk::~LogicalDisk()>
c000a01b:	83 c4 10             	add    esp,0x10
c000a01e:	83 ec 08             	sub    esp,0x8
c000a021:	68 78 01 00 00       	push   0x178
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	e8 e0 2a 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c000a02f:	83 c4 10             	add    esp,0x10
c000a032:	83 c4 0c             	add    esp,0xc
c000a035:	c3                   	ret    

c000a036 <LogicalDisk::open(int, int, void*)>:
c000a036:	83 ec 18             	sub    esp,0x18
c000a039:	68 50 29 02 c0       	push   0xc0022950
c000a03e:	e8 9b 56 00 00       	call   c000f6de <KePanic(char const*)>
c000a043:	83 c8 ff             	or     eax,0xffffffff
c000a046:	83 c4 1c             	add    esp,0x1c
c000a049:	c3                   	ret    

c000a04a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a04a:	53                   	push   ebx
c000a04b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a04f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a053:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a057:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a05d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a063:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a069:	77 10                	ja     c000a07b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a06b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a071:	89 d3                	mov    ebx,edx
c000a073:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a079:	72 05                	jb     c000a080 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a07b:	83 c8 ff             	or     eax,0xffffffff
c000a07e:	89 c2                	mov    edx,eax
c000a080:	5b                   	pop    ebx
c000a081:	c3                   	ret    

c000a082 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a082:	56                   	push   esi
c000a083:	83 c8 ff             	or     eax,0xffffffff
c000a086:	53                   	push   ebx
c000a087:	89 c2                	mov    edx,eax
c000a089:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a08d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a091:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a095:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a09b:	77 27                	ja     c000a0c4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a09d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a0a3:	89 d8                	mov    eax,ebx
c000a0a5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a0ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a0b0:	89 c2                	mov    edx,eax
c000a0b2:	73 10                	jae    c000a0c4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a0b4:	89 c8                	mov    eax,ecx
c000a0b6:	89 da                	mov    edx,ebx
c000a0b8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a0be:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a0c4:	5b                   	pop    ebx
c000a0c5:	5e                   	pop    esi
c000a0c6:	c3                   	ret    
c000a0c7:	90                   	nop

c000a0c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a0c8:	83 ec 1c             	sub    esp,0x1c
c000a0cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a0cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0df:	89 04 24             	mov    DWORD PTR [esp],eax
c000a0e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0ee:	83 ec 08             	sub    esp,0x8
c000a0f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f5:	50                   	push   eax
c000a0f6:	e8 15 f3 ff ff       	call   c0009410 <Device::Device(char const*)>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	ba 9c 29 02 c0       	mov    edx,0xc002299c
c000a103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a107:	89 10                	mov    DWORD PTR [eax],edx
c000a109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a10d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a118:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a11f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a123:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a12a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a12e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a138:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a13c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a140:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a144:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a14a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a150:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a157:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a15b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a161:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a16b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a16f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a179:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a183:	90                   	nop
c000a184:	83 c4 1c             	add    esp,0x1c
c000a187:	c3                   	ret    

c000a188 <LogicalDisk::assignDriveLetter()>:
c000a188:	55                   	push   ebp
c000a189:	57                   	push   edi
c000a18a:	56                   	push   esi
c000a18b:	53                   	push   ebx
c000a18c:	83 ec 14             	sub    esp,0x14
c000a18f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a193:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a199:	b0 41                	mov    al,0x41
c000a19b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a1a1:	84 d2                	test   dl,dl
c000a1a3:	75 02                	jne    c000a1a7 <LogicalDisk::assignDriveLetter()+0x1f>
c000a1a5:	b0 43                	mov    al,0x43
c000a1a7:	8b 3d c0 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aac0
c000a1ad:	0f b6 ca             	movzx  ecx,dl
c000a1b0:	0f be e8             	movsx  ebp,al
c000a1b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a1b7:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a1bb:	8b 3d c4 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aac4
c000a1c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a1c5:	3c 43                	cmp    al,0x43
c000a1c7:	75 10                	jne    c000a1d9 <LogicalDisk::assignDriveLetter()+0x51>
c000a1c9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a1d0:	75 5a                	jne    c000a22c <LogicalDisk::assignDriveLetter()+0xa4>
c000a1d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a1d7:	75 53                	jne    c000a22c <LogicalDisk::assignDriveLetter()+0xa4>
c000a1d9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a1dc:	ba 01 00 00 00       	mov    edx,0x1
c000a1e1:	89 34 24             	mov    DWORD PTR [esp],esi
c000a1e4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a1e7:	d3 e2                	shl    edx,cl
c000a1e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ed:	89 d7                	mov    edi,edx
c000a1ef:	89 d6                	mov    esi,edx
c000a1f1:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a1f5:	c1 ff 1f             	sar    edi,0x1f
c000a1f8:	21 f9                	and    ecx,edi
c000a1fa:	09 d1                	or     ecx,edx
c000a1fc:	75 2e                	jne    c000a22c <LogicalDisk::assignDriveLetter()+0xa4>
c000a1fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a202:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a206:	09 f2                	or     edx,esi
c000a208:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a20b:	89 15 c0 aa 02 c0    	mov    DWORD PTR ds:0xc002aac0,edx
c000a211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a215:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a21b:	89 1c b5 e0 aa 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5520],ebx
c000a222:	09 fa                	or     edx,edi
c000a224:	89 15 c4 aa 02 c0    	mov    DWORD PTR ds:0xc002aac4,edx
c000a22a:	eb 0d                	jmp    c000a239 <LogicalDisk::assignDriveLetter()+0xb1>
c000a22c:	8d 50 01             	lea    edx,[eax+0x1]
c000a22f:	45                   	inc    ebp
c000a230:	80 fa 5b             	cmp    dl,0x5b
c000a233:	88 d0                	mov    al,dl
c000a235:	75 8e                	jne    c000a1c5 <LogicalDisk::assignDriveLetter()+0x3d>
c000a237:	31 c0                	xor    eax,eax
c000a239:	83 c4 14             	add    esp,0x14
c000a23c:	5b                   	pop    ebx
c000a23d:	5e                   	pop    esi
c000a23e:	5f                   	pop    edi
c000a23f:	5d                   	pop    ebp
c000a240:	c3                   	ret    
c000a241:	90                   	nop

c000a242 <LogicalDisk::mount()>:
c000a242:	56                   	push   esi
c000a243:	53                   	push   ebx
c000a244:	53                   	push   ebx
c000a245:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a249:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a24f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a259:	85 db                	test   ebx,ebx
c000a25b:	74 27                	je     c000a284 <LogicalDisk::mount()+0x42>
c000a25d:	51                   	push   ecx
c000a25e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a265:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a267:	83 e8 41             	sub    eax,0x41
c000a26a:	50                   	push   eax
c000a26b:	56                   	push   esi
c000a26c:	53                   	push   ebx
c000a26d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	84 c0                	test   al,al
c000a275:	74 08                	je     c000a27f <LogicalDisk::mount()+0x3d>
c000a277:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a27d:	eb 07                	jmp    c000a286 <LogicalDisk::mount()+0x44>
c000a27f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a282:	eb d5                	jmp    c000a259 <LogicalDisk::mount()+0x17>
c000a284:	31 c0                	xor    eax,eax
c000a286:	5a                   	pop    edx
c000a287:	5b                   	pop    ebx
c000a288:	5e                   	pop    esi
c000a289:	c3                   	ret    

c000a28a <LogicalDisk::unmount()>:
c000a28a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a28e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a298:	c3                   	ret    
c000a299:	90                   	nop

c000a29a <LogicalDisk::eject()>:
c000a29a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a29e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a2a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000a2a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a2aa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a2ad:	90                   	nop

c000a2ae <LogicalDisk::unassignDriveLetter()>:
c000a2ae:	57                   	push   edi
c000a2af:	56                   	push   esi
c000a2b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2b4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a2bb:	85 c9                	test   ecx,ecx
c000a2bd:	75 0f                	jne    c000a2ce <LogicalDisk::unassignDriveLetter()+0x20>
c000a2bf:	c7 44 24 0c 74 29 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022974
c000a2c7:	5e                   	pop    esi
c000a2c8:	5f                   	pop    edi
c000a2c9:	e9 10 54 00 00       	jmp    c000f6de <KePanic(char const*)>
c000a2ce:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a2d5:	83 e9 41             	sub    ecx,0x41
c000a2d8:	b8 01 00 00 00       	mov    eax,0x1
c000a2dd:	c7 04 8d e0 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5520],0x0
c000a2e8:	d3 e0                	shl    eax,cl
c000a2ea:	89 c7                	mov    edi,eax
c000a2ec:	f7 d0                	not    eax
c000a2ee:	c1 ff 1f             	sar    edi,0x1f
c000a2f1:	21 05 c0 aa 02 c0    	and    DWORD PTR ds:0xc002aac0,eax
c000a2f7:	89 fe                	mov    esi,edi
c000a2f9:	f7 d6                	not    esi
c000a2fb:	21 35 c4 aa 02 c0    	and    DWORD PTR ds:0xc002aac4,esi
c000a301:	5e                   	pop    esi
c000a302:	5f                   	pop    edi
c000a303:	c3                   	ret    

c000a304 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a304:	57                   	push   edi
c000a305:	56                   	push   esi
c000a306:	53                   	push   ebx
c000a307:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a30b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a30f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a313:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a317:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a31d:	77 41                	ja     c000a360 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a31f:	99                   	cdq    
c000a320:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a326:	01 c8                	add    eax,ecx
c000a328:	11 da                	adc    edx,ebx
c000a32a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a330:	19 d7                	sbb    edi,edx
c000a332:	72 33                	jb     c000a367 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a334:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a33a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a340:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a344:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a348:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a34e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a354:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a358:	5b                   	pop    ebx
c000a359:	5e                   	pop    esi
c000a35a:	5f                   	pop    edi
c000a35b:	e9 76 0b 00 00       	jmp    c000aed6 <VCache::read(unsigned long long, int, void*)>
c000a360:	b8 05 00 00 00       	mov    eax,0x5
c000a365:	eb 05                	jmp    c000a36c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a367:	b8 07 00 00 00       	mov    eax,0x7
c000a36c:	5b                   	pop    ebx
c000a36d:	5e                   	pop    esi
c000a36e:	5f                   	pop    edi
c000a36f:	c3                   	ret    

c000a370 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a370:	57                   	push   edi
c000a371:	56                   	push   esi
c000a372:	53                   	push   ebx
c000a373:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a37b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a37f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a383:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a389:	77 41                	ja     c000a3cc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a38b:	99                   	cdq    
c000a38c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a392:	01 c8                	add    eax,ecx
c000a394:	11 da                	adc    edx,ebx
c000a396:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a39c:	19 d7                	sbb    edi,edx
c000a39e:	72 33                	jb     c000a3d3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a3a0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a3a6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a3ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a3b0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a3b4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a3ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a3c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3c4:	5b                   	pop    ebx
c000a3c5:	5e                   	pop    esi
c000a3c6:	5f                   	pop    edi
c000a3c7:	e9 3c 09 00 00       	jmp    c000ad08 <VCache::write(unsigned long long, int, void*)>
c000a3cc:	b8 05 00 00 00       	mov    eax,0x5
c000a3d1:	eb 05                	jmp    c000a3d8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a3d3:	b8 07 00 00 00       	mov    eax,0x7
c000a3d8:	5b                   	pop    ebx
c000a3d9:	5e                   	pop    esi
c000a3da:	5f                   	pop    edi
c000a3db:	c3                   	ret    

c000a3dc <Mouse::Mouse(char const*)>:
c000a3dc:	83 ec 0c             	sub    esp,0xc
c000a3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3e3:	83 ec 08             	sub    esp,0x8
c000a3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3ea:	50                   	push   eax
c000a3eb:	e8 20 f0 ff ff       	call   c0009410 <Device::Device(char const*)>
c000a3f0:	83 c4 10             	add    esp,0x10
c000a3f3:	ba c8 29 02 c0       	mov    edx,0xc00229c8
c000a3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3fc:	89 10                	mov    DWORD PTR [eax],edx
c000a3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a402:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a40c:	90                   	nop
c000a40d:	83 c4 0c             	add    esp,0xc
c000a410:	c3                   	ret    
c000a411:	90                   	nop
c000a412:	66 90                	xchg   ax,ax

c000a414 <Mouse::~Mouse()>:
c000a414:	83 ec 0c             	sub    esp,0xc
c000a417:	ba c8 29 02 c0       	mov    edx,0xc00229c8
c000a41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a420:	89 10                	mov    DWORD PTR [eax],edx
c000a422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a426:	83 ec 0c             	sub    esp,0xc
c000a429:	50                   	push   eax
c000a42a:	e8 81 ed ff ff       	call   c00091b0 <Device::~Device()>
c000a42f:	83 c4 10             	add    esp,0x10
c000a432:	90                   	nop
c000a433:	83 c4 0c             	add    esp,0xc
c000a436:	c3                   	ret    
c000a437:	90                   	nop

c000a438 <Mouse::~Mouse()>:
c000a438:	83 ec 0c             	sub    esp,0xc
c000a43b:	83 ec 0c             	sub    esp,0xc
c000a43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a442:	e8 cd ff ff ff       	call   c000a414 <Mouse::~Mouse()>
c000a447:	83 c4 10             	add    esp,0x10
c000a44a:	83 ec 08             	sub    esp,0x8
c000a44d:	68 58 01 00 00       	push   0x158
c000a452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a456:	e8 b4 26 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c000a45b:	83 c4 10             	add    esp,0x10
c000a45e:	83 c4 0c             	add    esp,0xc
c000a461:	c3                   	ret    

c000a462 <NIC::getMAC()>:
c000a462:	31 c0                	xor    eax,eax
c000a464:	31 d2                	xor    edx,edx
c000a466:	c3                   	ret    
c000a467:	90                   	nop

c000a468 <NIC::write(int, unsigned char*, int*)>:
c000a468:	b8 01 00 00 00       	mov    eax,0x1
c000a46d:	c3                   	ret    

c000a46e <NIC::NIC(char const*)>:
c000a46e:	83 ec 0c             	sub    esp,0xc
c000a471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a475:	83 ec 08             	sub    esp,0x8
c000a478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a47c:	50                   	push   eax
c000a47d:	e8 8e ef ff ff       	call   c0009410 <Device::Device(char const*)>
c000a482:	83 c4 10             	add    esp,0x10
c000a485:	ba f4 29 02 c0       	mov    edx,0xc00229f4
c000a48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a48e:	89 10                	mov    DWORD PTR [eax],edx
c000a490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a494:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a49e:	90                   	nop
c000a49f:	83 c4 0c             	add    esp,0xc
c000a4a2:	c3                   	ret    
c000a4a3:	90                   	nop

c000a4a4 <NIC::~NIC()>:
c000a4a4:	83 ec 0c             	sub    esp,0xc
c000a4a7:	ba f4 29 02 c0       	mov    edx,0xc00229f4
c000a4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4b0:	89 10                	mov    DWORD PTR [eax],edx
c000a4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4b6:	83 ec 0c             	sub    esp,0xc
c000a4b9:	50                   	push   eax
c000a4ba:	e8 f1 ec ff ff       	call   c00091b0 <Device::~Device()>
c000a4bf:	83 c4 10             	add    esp,0x10
c000a4c2:	90                   	nop
c000a4c3:	83 c4 0c             	add    esp,0xc
c000a4c6:	c3                   	ret    
c000a4c7:	90                   	nop

c000a4c8 <NIC::~NIC()>:
c000a4c8:	83 ec 0c             	sub    esp,0xc
c000a4cb:	83 ec 0c             	sub    esp,0xc
c000a4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4d2:	e8 cd ff ff ff       	call   c000a4a4 <NIC::~NIC()>
c000a4d7:	83 c4 10             	add    esp,0x10
c000a4da:	83 ec 08             	sub    esp,0x8
c000a4dd:	68 58 01 00 00       	push   0x158
c000a4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4e6:	e8 24 26 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c000a4eb:	83 c4 10             	add    esp,0x10
c000a4ee:	83 c4 0c             	add    esp,0xc
c000a4f1:	c3                   	ret    

c000a4f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a4f2:	55                   	push   ebp
c000a4f3:	57                   	push   edi
c000a4f4:	56                   	push   esi
c000a4f5:	53                   	push   ebx
c000a4f6:	81 ec 28 01 00 00    	sub    esp,0x128
c000a4fc:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a503:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a50a:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a511:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a518:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a51c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a520:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a527:	e8 e0 ef ff ff       	call   c000950c <Device::getName()>
c000a52c:	5a                   	pop    edx
c000a52d:	59                   	pop    ecx
c000a52e:	50                   	push   eax
c000a52f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a533:	55                   	push   ebp
c000a534:	e8 17 61 ff ff       	call   c0000650 <strcpy>
c000a539:	5b                   	pop    ebx
c000a53a:	58                   	pop    eax
c000a53b:	68 20 2a 02 c0       	push   0xc0022a20
c000a540:	55                   	push   ebp
c000a541:	e8 2a 63 ff ff       	call   c0000870 <strcat>
c000a546:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a54d:	e8 46 4e 00 00       	call   c000f398 <malloc>
c000a552:	83 c4 0c             	add    esp,0xc
c000a555:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a559:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a55d:	89 c3                	mov    ebx,eax
c000a55f:	57                   	push   edi
c000a560:	56                   	push   esi
c000a561:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a568:	55                   	push   ebp
c000a569:	50                   	push   eax
c000a56a:	e8 59 fb ff ff       	call   c000a0c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a56f:	83 c4 14             	add    esp,0x14
c000a572:	53                   	push   ebx
c000a573:	e8 10 fc ff ff       	call   c000a188 <LogicalDisk::assignDriveLetter()>
c000a578:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a57b:	e8 c2 fc ff ff       	call   c000a242 <LogicalDisk::mount()>
c000a580:	58                   	pop    eax
c000a581:	5a                   	pop    edx
c000a582:	53                   	push   ebx
c000a583:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a58a:	e8 1f ed ff ff       	call   c00092ae <Device::addChild(Device*)>
c000a58f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a595:	5b                   	pop    ebx
c000a596:	5e                   	pop    esi
c000a597:	5f                   	pop    edi
c000a598:	5d                   	pop    ebp
c000a599:	c3                   	ret    

c000a59a <createPartitionsForDisk(PhysicalDisk*)>:
c000a59a:	55                   	push   ebp
c000a59b:	57                   	push   edi
c000a59c:	56                   	push   esi
c000a59d:	53                   	push   ebx
c000a59e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a5a4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a5ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a5b1:	3d 00 02 00 00       	cmp    eax,0x200
c000a5b6:	74 27                	je     c000a5df <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a5b8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a5be:	83 ec 10             	sub    esp,0x10
c000a5c1:	99                   	cdq    
c000a5c2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a5c8:	52                   	push   edx
c000a5c9:	50                   	push   eax
c000a5ca:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a5ce:	c1 e6 0a             	shl    esi,0xa
c000a5d1:	89 fd                	mov    ebp,edi
c000a5d3:	55                   	push   ebp
c000a5d4:	56                   	push   esi
c000a5d5:	e8 9a 66 01 00       	call   c0020c74 <__udivdi3>
c000a5da:	e9 b9 00 00 00       	jmp    c000a698 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a5df:	83 ec 0c             	sub    esp,0xc
c000a5e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a5e4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a5e8:	56                   	push   esi
c000a5e9:	6a 01                	push   0x1
c000a5eb:	6a 00                	push   0x0
c000a5ed:	6a 00                	push   0x0
c000a5ef:	53                   	push   ebx
c000a5f0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a5f3:	83 c4 20             	add    esp,0x20
c000a5f6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a5fe:	75 0a                	jne    c000a60a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a600:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a608:	74 2c                	je     c000a636 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a60a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a610:	83 ec 10             	sub    esp,0x10
c000a613:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a619:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a61f:	89 f7                	mov    edi,esi
c000a621:	c1 ff 1f             	sar    edi,0x1f
c000a624:	57                   	push   edi
c000a625:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a629:	56                   	push   esi
c000a62a:	c1 e0 0a             	shl    eax,0xa
c000a62d:	52                   	push   edx
c000a62e:	50                   	push   eax
c000a62f:	e8 40 66 01 00       	call   c0020c74 <__udivdi3>
c000a634:	eb 62                	jmp    c000a698 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a636:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a63d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a644:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a64b:	89 cf                	mov    edi,ecx
c000a64d:	83 e2 7f             	and    edx,0x7f
c000a650:	83 e7 7f             	and    edi,0x7f
c000a653:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a656:	83 e0 7f             	and    eax,0x7f
c000a659:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a65c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a663:	83 e0 7f             	and    eax,0x7f
c000a666:	01 d0                	add    eax,edx
c000a668:	84 c0                	test   al,al
c000a66a:	89 c5                	mov    ebp,eax
c000a66c:	74 41                	je     c000a6af <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a66e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a674:	83 ec 10             	sub    esp,0x10
c000a677:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a67d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a683:	89 f7                	mov    edi,esi
c000a685:	c1 ff 1f             	sar    edi,0x1f
c000a688:	57                   	push   edi
c000a689:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a68d:	56                   	push   esi
c000a68e:	c1 e0 0a             	shl    eax,0xa
c000a691:	52                   	push   edx
c000a692:	50                   	push   eax
c000a693:	e8 dc 65 01 00       	call   c0020c74 <__udivdi3>
c000a698:	83 c4 14             	add    esp,0x14
c000a69b:	52                   	push   edx
c000a69c:	50                   	push   eax
c000a69d:	6a 00                	push   0x0
c000a69f:	6a 00                	push   0x0
c000a6a1:	53                   	push   ebx
c000a6a2:	e8 4b fe ff ff       	call   c000a4f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a6a7:	83 c4 20             	add    esp,0x20
c000a6aa:	e9 73 01 00 00       	jmp    c000a822 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a6af:	89 f0                	mov    eax,esi
c000a6b1:	31 c9                	xor    ecx,ecx
c000a6b3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a6ba:	75 02                	jne    c000a6be <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a6bc:	89 cd                	mov    ebp,ecx
c000a6be:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a6c6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a6cd:	83 c0 10             	add    eax,0x10
c000a6d0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a6d8:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a6df:	c1 e2 08             	shl    edx,0x8
c000a6e2:	c1 e6 10             	shl    esi,0x10
c000a6e5:	09 f2                	or     edx,esi
c000a6e7:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a6ee:	09 f2                	or     edx,esi
c000a6f0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a6f7:	c1 e6 18             	shl    esi,0x18
c000a6fa:	09 f2                	or     edx,esi
c000a6fc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a703:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a707:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a70e:	c1 e6 10             	shl    esi,0x10
c000a711:	c1 e2 08             	shl    edx,0x8
c000a714:	09 f2                	or     edx,esi
c000a716:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a71d:	09 f2                	or     edx,esi
c000a71f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a726:	c1 e6 18             	shl    esi,0x18
c000a729:	09 f2                	or     edx,esi
c000a72b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a72f:	41                   	inc    ecx
c000a730:	83 f9 04             	cmp    ecx,0x4
c000a733:	0f 85 7a ff ff ff    	jne    c000a6b3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73d:	83 f0 01             	xor    eax,0x1
c000a740:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a744:	75 4f                	jne    c000a795 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a74a:	83 f0 01             	xor    eax,0x1
c000a74d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a751:	75 42                	jne    c000a795 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a753:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a759:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a761:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a767:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a76f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a775:	89 f7                	mov    edi,esi
c000a777:	c1 ff 1f             	sar    edi,0x1f
c000a77a:	57                   	push   edi
c000a77b:	56                   	push   esi
c000a77c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a780:	52                   	push   edx
c000a781:	c1 e0 0a             	shl    eax,0xa
c000a784:	50                   	push   eax
c000a785:	e8 ea 64 01 00       	call   c0020c74 <__udivdi3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a795:	89 e8                	mov    eax,ebp
c000a797:	0f b6 e8             	movzx  ebp,al
c000a79a:	85 ed                	test   ebp,ebp
c000a79c:	74 50                	je     c000a7ee <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a79e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a7a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a7a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a7aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a7ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7b2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a7b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7ba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a7be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a7c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7ce:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a7d2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a7d6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a7da:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a7de:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a7e2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a7e6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a7ea:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a7ee:	31 ed                	xor    ebp,ebp
c000a7f0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a7f4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a7f8:	89 f8                	mov    eax,edi
c000a7fa:	09 f0                	or     eax,esi
c000a7fc:	74 1e                	je     c000a81c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a7fe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a802:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a806:	89 d1                	mov    ecx,edx
c000a808:	09 c1                	or     ecx,eax
c000a80a:	74 10                	je     c000a81c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a80c:	83 ec 0c             	sub    esp,0xc
c000a80f:	57                   	push   edi
c000a810:	56                   	push   esi
c000a811:	52                   	push   edx
c000a812:	50                   	push   eax
c000a813:	53                   	push   ebx
c000a814:	e8 d9 fc ff ff       	call   c000a4f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a819:	83 c4 20             	add    esp,0x20
c000a81c:	45                   	inc    ebp
c000a81d:	83 fd 04             	cmp    ebp,0x4
c000a820:	75 ce                	jne    c000a7f0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a822:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a828:	5b                   	pop    ebx
c000a829:	5e                   	pop    esi
c000a82a:	5f                   	pop    edi
c000a82b:	5d                   	pop    ebp
c000a82c:	c3                   	ret    
c000a82d:	66 90                	xchg   ax,ax
c000a82f:	90                   	nop

c000a830 <Serial::Serial(char const*)>:
c000a830:	83 ec 0c             	sub    esp,0xc
c000a833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a837:	83 ec 08             	sub    esp,0x8
c000a83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a83e:	50                   	push   eax
c000a83f:	e8 cc eb ff ff       	call   c0009410 <Device::Device(char const*)>
c000a844:	83 c4 10             	add    esp,0x10
c000a847:	ba 34 2a 02 c0       	mov    edx,0xc0022a34
c000a84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a850:	89 10                	mov    DWORD PTR [eax],edx
c000a852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a856:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a860:	90                   	nop
c000a861:	83 c4 0c             	add    esp,0xc
c000a864:	c3                   	ret    
c000a865:	90                   	nop
c000a866:	66 90                	xchg   ax,ax

c000a868 <Serial::~Serial()>:
c000a868:	83 ec 0c             	sub    esp,0xc
c000a86b:	ba 34 2a 02 c0       	mov    edx,0xc0022a34
c000a870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a874:	89 10                	mov    DWORD PTR [eax],edx
c000a876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a87a:	83 ec 0c             	sub    esp,0xc
c000a87d:	50                   	push   eax
c000a87e:	e8 2d e9 ff ff       	call   c00091b0 <Device::~Device()>
c000a883:	83 c4 10             	add    esp,0x10
c000a886:	90                   	nop
c000a887:	83 c4 0c             	add    esp,0xc
c000a88a:	c3                   	ret    
c000a88b:	90                   	nop

c000a88c <Serial::~Serial()>:
c000a88c:	83 ec 0c             	sub    esp,0xc
c000a88f:	83 ec 0c             	sub    esp,0xc
c000a892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a896:	e8 cd ff ff ff       	call   c000a868 <Serial::~Serial()>
c000a89b:	83 c4 10             	add    esp,0x10
c000a89e:	83 ec 08             	sub    esp,0x8
c000a8a1:	68 58 01 00 00       	push   0x158
c000a8a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8aa:	e8 60 22 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c000a8af:	83 c4 10             	add    esp,0x10
c000a8b2:	83 c4 0c             	add    esp,0xc
c000a8b5:	c3                   	ret    
c000a8b6:	66 90                	xchg   ax,ax

c000a8b8 <Timer::Timer(char const*)>:
c000a8b8:	83 ec 0c             	sub    esp,0xc
c000a8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8bf:	83 ec 08             	sub    esp,0x8
c000a8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c6:	50                   	push   eax
c000a8c7:	e8 44 eb ff ff       	call   c0009410 <Device::Device(char const*)>
c000a8cc:	83 c4 10             	add    esp,0x10
c000a8cf:	ba ec 2a 02 c0       	mov    edx,0xc0022aec
c000a8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8d8:	89 10                	mov    DWORD PTR [eax],edx
c000a8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8de:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a8e8:	90                   	nop
c000a8e9:	83 c4 0c             	add    esp,0xc
c000a8ec:	c3                   	ret    
c000a8ed:	90                   	nop
c000a8ee:	66 90                	xchg   ax,ax

c000a8f0 <Timer::~Timer()>:
c000a8f0:	83 ec 0c             	sub    esp,0xc
c000a8f3:	ba ec 2a 02 c0       	mov    edx,0xc0022aec
c000a8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8fc:	89 10                	mov    DWORD PTR [eax],edx
c000a8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a902:	83 ec 0c             	sub    esp,0xc
c000a905:	50                   	push   eax
c000a906:	e8 a5 e8 ff ff       	call   c00091b0 <Device::~Device()>
c000a90b:	83 c4 10             	add    esp,0x10
c000a90e:	90                   	nop
c000a90f:	83 c4 0c             	add    esp,0xc
c000a912:	c3                   	ret    
c000a913:	90                   	nop

c000a914 <Timer::~Timer()>:
c000a914:	83 ec 0c             	sub    esp,0xc
c000a917:	83 ec 0c             	sub    esp,0xc
c000a91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a91e:	e8 cd ff ff ff       	call   c000a8f0 <Timer::~Timer()>
c000a923:	83 c4 10             	add    esp,0x10
c000a926:	83 ec 08             	sub    esp,0x8
c000a929:	68 5c 01 00 00       	push   0x15c
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 d8 21 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c000a937:	83 c4 10             	add    esp,0x10
c000a93a:	83 c4 0c             	add    esp,0xc
c000a93d:	c3                   	ret    

c000a93e <Timer::read()>:
c000a93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a942:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a948:	c3                   	ret    

c000a949 <setupTimer(int)>:
c000a949:	53                   	push   ebx
c000a94a:	83 ec 14             	sub    esp,0x14
c000a94d:	68 5c 01 00 00       	push   0x15c
c000a952:	e8 41 4a 00 00       	call   c000f398 <malloc>
c000a957:	89 04 24             	mov    DWORD PTR [esp],eax
c000a95a:	89 c3                	mov    ebx,eax
c000a95c:	e8 93 5b 01 00       	call   c00204f4 <PIT::PIT()>
c000a961:	58                   	pop    eax
c000a962:	5a                   	pop    edx
c000a963:	53                   	push   ebx
c000a964:	ff 35 d0 b0 02 c0    	push   DWORD PTR ds:0xc002b0d0
c000a96a:	e8 3f e9 ff ff       	call   c00092ae <Device::addChild(Device*)>
c000a96f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a971:	6a 00                	push   0x0
c000a973:	6a 00                	push   0x0
c000a975:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a979:	53                   	push   ebx
c000a97a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a97d:	83 c4 28             	add    esp,0x28
c000a980:	89 d8                	mov    eax,ebx
c000a982:	5b                   	pop    ebx
c000a983:	c3                   	ret    

c000a984 <timerHandler(unsigned int)>:
c000a984:	57                   	push   edi
c000a985:	56                   	push   esi
c000a986:	53                   	push   ebx
c000a987:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	68 c3 2a 02 c0       	push   0xc0022ac3
c000a993:	01 35 4c ab 02 c0    	add    DWORD PTR ds:0xc002ab4c,esi
c000a999:	e8 b0 c5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000a99e:	83 c4 10             	add    esp,0x10
c000a9a1:	80 3d d5 b0 02 c0 00 	cmp    BYTE PTR ds:0xc002b0d5,0x0
c000a9a8:	75 12                	jne    c000a9bc <timerHandler(unsigned int)+0x38>
c000a9aa:	c7 44 24 10 cb 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022acb
c000a9b2:	5b                   	pop    ebx
c000a9b3:	5e                   	pop    esi
c000a9b4:	5f                   	pop    edi
c000a9b5:	e9 94 c5 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c000a9ba:	66 90                	xchg   ax,ax
c000a9bc:	fa                   	cli    
c000a9bd:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c000a9c3:	83 ec 0c             	sub    esp,0xc
c000a9c6:	68 40 da 02 c0       	push   0xc002da40
c000a9cb:	e8 3c 66 01 00       	call   c002100c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a9d0:	83 c4 10             	add    esp,0x10
c000a9d3:	84 c0                	test   al,al
c000a9d5:	0f 85 a1 00 00 00    	jne    c000aa7c <timerHandler(unsigned int)+0xf8>
c000a9db:	83 ec 0c             	sub    esp,0xc
c000a9de:	68 40 da 02 c0       	push   0xc002da40
c000a9e3:	e8 40 66 01 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a9e8:	83 c4 10             	add    esp,0x10
c000a9eb:	89 c7                	mov    edi,eax
c000a9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000a9f0:	83 ec 0c             	sub    esp,0xc
c000a9f3:	68 40 da 02 c0       	push   0xc002da40
c000a9f8:	e8 2b 66 01 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a9fd:	c7 04 24 40 da 02 c0 	mov    DWORD PTR [esp],0xc002da40
c000aa04:	89 c3                	mov    ebx,eax
c000aa06:	e8 25 66 01 00       	call   c0021030 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000aa0b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000aa0e:	83 c4 10             	add    esp,0x10
c000aa11:	3b 05 4c ab 02 c0    	cmp    eax,DWORD PTR ds:0xc002ab4c
c000aa17:	77 23                	ja     c000aa3c <timerHandler(unsigned int)+0xb8>
c000aa19:	83 ec 0c             	sub    esp,0xc
c000aa1c:	53                   	push   ebx
c000aa1d:	e8 de bb 00 00       	call   c0016600 <unblockTask(ThreadControlBlock*)>
c000aa22:	83 c4 10             	add    esp,0x10
c000aa25:	39 df                	cmp    edi,ebx
c000aa27:	75 27                	jne    c000aa50 <timerHandler(unsigned int)+0xcc>
c000aa29:	83 ec 0c             	sub    esp,0xc
c000aa2c:	68 40 da 02 c0       	push   0xc002da40
c000aa31:	e8 f2 65 01 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000aa36:	89 c7                	mov    edi,eax
c000aa38:	eb 12                	jmp    c000aa4c <timerHandler(unsigned int)+0xc8>
c000aa3a:	66 90                	xchg   ax,ax
c000aa3c:	50                   	push   eax
c000aa3d:	50                   	push   eax
c000aa3e:	53                   	push   ebx
c000aa3f:	68 40 da 02 c0       	push   0xc002da40
c000aa44:	e8 a3 66 01 00       	call   c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000aa49:	8d 76 00             	lea    esi,[esi+0x0]
c000aa4c:	83 c4 10             	add    esp,0x10
c000aa4f:	90                   	nop
c000aa50:	83 ec 0c             	sub    esp,0xc
c000aa53:	68 40 da 02 c0       	push   0xc002da40
c000aa58:	e8 af 65 01 00       	call   c002100c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000aa5d:	83 c4 10             	add    esp,0x10
c000aa60:	84 c0                	test   al,al
c000aa62:	75 18                	jne    c000aa7c <timerHandler(unsigned int)+0xf8>
c000aa64:	83 ec 0c             	sub    esp,0xc
c000aa67:	68 40 da 02 c0       	push   0xc002da40
c000aa6c:	e8 b7 65 01 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000aa71:	83 c4 10             	add    esp,0x10
c000aa74:	39 f8                	cmp    eax,edi
c000aa76:	0f 85 74 ff ff ff    	jne    c000a9f0 <timerHandler(unsigned int)+0x6c>
c000aa7c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000aa82:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000aa85:	85 c0                	test   eax,eax
c000aa87:	74 1b                	je     c000aaa4 <timerHandler(unsigned int)+0x120>
c000aa89:	80 3d d4 b0 02 c0 00 	cmp    BYTE PTR ds:0xc002b0d4,0x0
c000aa90:	74 12                	je     c000aaa4 <timerHandler(unsigned int)+0x120>
c000aa92:	89 c1                	mov    ecx,eax
c000aa94:	29 f1                	sub    ecx,esi
c000aa96:	39 f0                	cmp    eax,esi
c000aa98:	89 4a 34             	mov    DWORD PTR [edx+0x34],ecx
c000aa9b:	77 07                	ja     c000aaa4 <timerHandler(unsigned int)+0x120>
c000aa9d:	e8 5e b8 00 00       	call   c0016300 <schedule()>
c000aaa2:	66 90                	xchg   ax,ax
c000aaa4:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000aaab:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000aab2:	75 04                	jne    c000aab8 <timerHandler(unsigned int)+0x134>
c000aab4:	fb                   	sti    
c000aab5:	8d 76 00             	lea    esi,[esi+0x0]
c000aab8:	5b                   	pop    ebx
c000aab9:	5e                   	pop    esi
c000aaba:	5f                   	pop    edi
c000aabb:	c3                   	ret    

c000aabc <VCache::VCache(PhysicalDisk*)>:
c000aabc:	53                   	push   ebx
c000aabd:	83 ec 18             	sub    esp,0x18
c000aac0:	ba 5c 2b 02 c0       	mov    edx,0xc0022b5c
c000aac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aac9:	89 10                	mov    DWORD PTR [eax],edx
c000aacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aacf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000aad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aada:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000aae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aae5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000aaec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000aaf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aaf7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000aafe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000ab05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab09:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000ab10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab14:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000ab18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab1c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000ab23:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000ab2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab2e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000ab32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab36:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000ab3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab3e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ab42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab46:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000ab4d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000ab55:	83 ec 0c             	sub    esp,0xc
c000ab58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab5c:	e8 37 48 00 00       	call   c000f398 <malloc>
c000ab61:	83 c4 10             	add    esp,0x10
c000ab64:	89 c3                	mov    ebx,eax
c000ab66:	83 ec 0c             	sub    esp,0xc
c000ab69:	53                   	push   ebx
c000ab6a:	e8 55 4b 00 00       	call   c000f6c4 <Mutex::Mutex()>
c000ab6f:	83 c4 10             	add    esp,0x10
c000ab72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab76:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ab79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab7d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ab81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ab84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab88:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000ab8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ab93:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000ab99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab9d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aba0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aba4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000abaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000abb0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000abb4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000abb7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000abba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000abbe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000abc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000abcc:	05 00 01 00 00       	add    eax,0x100
c000abd1:	c1 e0 04             	shl    eax,0x4
c000abd4:	83 ec 0c             	sub    esp,0xc
c000abd7:	50                   	push   eax
c000abd8:	e8 bb 47 00 00       	call   c000f398 <malloc>
c000abdd:	83 c4 10             	add    esp,0x10
c000abe0:	89 c2                	mov    edx,eax
c000abe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000abe6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000abe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000abed:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000abf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000abf8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000abfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac00:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000ac06:	89 d0                	mov    eax,edx
c000ac08:	c1 e0 02             	shl    eax,0x2
c000ac0b:	01 d0                	add    eax,edx
c000ac0d:	c1 e0 04             	shl    eax,0x4
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	50                   	push   eax
c000ac14:	e8 7f 47 00 00       	call   c000f398 <malloc>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	89 c2                	mov    edx,eax
c000ac1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ac22:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac25:	90                   	nop
c000ac26:	83 c4 18             	add    esp,0x18
c000ac29:	5b                   	pop    ebx
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VCache::invalidateReadBuffer()>:
c000ac2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac30:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000ac36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ac3a:	c3                   	ret    
c000ac3b:	90                   	nop

c000ac3c <VCache::writeWriteBuffer()>:
c000ac3c:	53                   	push   ebx
c000ac3d:	83 ec 08             	sub    esp,0x8
c000ac40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac48:	74 1e                	je     c000ac68 <VCache::writeWriteBuffer()+0x2c>
c000ac4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac4d:	83 ec 0c             	sub    esp,0xc
c000ac50:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ac55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ac58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ac5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ac5e:	50                   	push   eax
c000ac5f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ac62:	83 c4 20             	add    esp,0x20
c000ac65:	8d 76 00             	lea    esi,[esi+0x0]
c000ac68:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ac6f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000ac76:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000ac7a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000ac81:	83 c4 08             	add    esp,0x8
c000ac84:	5b                   	pop    ebx
c000ac85:	c3                   	ret    
c000ac86:	66 90                	xchg   ax,ax

c000ac88 <VCache::~VCache()>:
c000ac88:	83 ec 0c             	sub    esp,0xc
c000ac8b:	ba 5c 2b 02 c0       	mov    edx,0xc0022b5c
c000ac90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac94:	89 10                	mov    DWORD PTR [eax],edx
c000ac96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac9a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000ac9d:	0f b6 c0             	movzx  eax,al
c000aca0:	85 c0                	test   eax,eax
c000aca2:	74 10                	je     c000acb4 <VCache::~VCache()+0x2c>
c000aca4:	83 ec 0c             	sub    esp,0xc
c000aca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acab:	e8 8c ff ff ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c000acb0:	83 c4 10             	add    esp,0x10
c000acb3:	90                   	nop
c000acb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acb8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000acbb:	83 ec 0c             	sub    esp,0xc
c000acbe:	50                   	push   eax
c000acbf:	e8 e4 46 00 00       	call   c000f3a8 <free>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000accb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000acce:	83 ec 0c             	sub    esp,0xc
c000acd1:	50                   	push   eax
c000acd2:	e8 d1 46 00 00       	call   c000f3a8 <free>
c000acd7:	83 c4 10             	add    esp,0x10
c000acda:	90                   	nop
c000acdb:	83 c4 0c             	add    esp,0xc
c000acde:	c3                   	ret    
c000acdf:	90                   	nop

c000ace0 <VCache::~VCache()>:
c000ace0:	83 ec 0c             	sub    esp,0xc
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acea:	e8 99 ff ff ff       	call   c000ac88 <VCache::~VCache()>
c000acef:	83 c4 10             	add    esp,0x10
c000acf2:	83 ec 08             	sub    esp,0x8
c000acf5:	6a 44                	push   0x44
c000acf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acfb:	e8 0f 1e 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 c4 0c             	add    esp,0xc
c000ad06:	c3                   	ret    
c000ad07:	90                   	nop

c000ad08 <VCache::write(unsigned long long, int, void*)>:
c000ad08:	55                   	push   ebp
c000ad09:	57                   	push   edi
c000ad0a:	56                   	push   esi
c000ad0b:	53                   	push   ebx
c000ad0c:	83 ec 1c             	sub    esp,0x1c
c000ad0f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad13:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ad17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ad1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ad1f:	e8 3c b3 00 00       	call   c0016060 <KeDisablePreemption()>
c000ad24:	b9 00 10 00 00       	mov    ecx,0x1000
c000ad29:	50                   	push   eax
c000ad2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ad2d:	0f af c3             	imul   eax,ebx
c000ad30:	05 ff 0f 00 00       	add    eax,0xfff
c000ad35:	99                   	cdq    
c000ad36:	f7 f9                	idiv   ecx
c000ad38:	50                   	push   eax
c000ad39:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ad3d:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000ad43:	e8 ac 8a 00 00       	call   c00137f4 <VAS::canLockPages(unsigned long, int)>
c000ad48:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000ad4c:	83 c4 10             	add    esp,0x10
c000ad4f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ad54:	74 2a                	je     c000ad80 <VCache::write(unsigned long long, int, void*)+0x78>
c000ad56:	50                   	push   eax
c000ad57:	b9 00 10 00 00       	mov    ecx,0x1000
c000ad5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ad5f:	0f af c3             	imul   eax,ebx
c000ad62:	05 ff 0f 00 00       	add    eax,0xfff
c000ad67:	99                   	cdq    
c000ad68:	f7 f9                	idiv   ecx
c000ad6a:	50                   	push   eax
c000ad6b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ad6f:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000ad75:	e8 74 8e 00 00       	call   c0013bee <VAS::lockPages(unsigned long, int)>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad80:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000ad84:	74 0e                	je     c000ad94 <VCache::write(unsigned long long, int, void*)+0x8c>
c000ad86:	83 ec 0c             	sub    esp,0xc
c000ad89:	55                   	push   ebp
c000ad8a:	e8 9d fe ff ff       	call   c000ac2c <VCache::invalidateReadBuffer()>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	66 90                	xchg   ax,ax
c000ad94:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000ad98:	74 72                	je     c000ae0c <VCache::write(unsigned long long, int, void*)+0x104>
c000ad9a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000ad9d:	89 c8                	mov    eax,ecx
c000ad9f:	99                   	cdq    
c000ada0:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000ada3:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000ada6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb6:	31 f0                	xor    eax,esi
c000adb8:	31 fa                	xor    edx,edi
c000adba:	09 d0                	or     eax,edx
c000adbc:	75 42                	jne    c000ae00 <VCache::write(unsigned long long, int, void*)+0xf8>
c000adbe:	83 fb 01             	cmp    ebx,0x1
c000adc1:	75 3d                	jne    c000ae00 <VCache::write(unsigned long long, int, void*)+0xf8>
c000adc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adc6:	89 cf                	mov    edi,ecx
c000adc8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000adcc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000add2:	0f af f8             	imul   edi,eax
c000add5:	89 c1                	mov    ecx,eax
c000add7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000adda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000addc:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000addf:	40                   	inc    eax
c000ade0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000ade3:	83 f8 50             	cmp    eax,0x50
c000ade6:	0f 85 a8 00 00 00    	jne    c000ae94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000adec:	83 ec 0c             	sub    esp,0xc
c000adef:	55                   	push   ebp
c000adf0:	e8 47 fe ff ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	e9 97 00 00 00       	jmp    c000ae94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	83 ec 0c             	sub    esp,0xc
c000ae03:	55                   	push   ebp
c000ae04:	e8 33 fe ff ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c000ae09:	83 c4 10             	add    esp,0x10
c000ae0c:	83 fb 4f             	cmp    ebx,0x4f
c000ae0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae12:	7f 20                	jg     c000ae34 <VCache::write(unsigned long long, int, void*)+0x12c>
c000ae14:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000ae17:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ae1b:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000ae1e:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000ae21:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000ae24:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000ae28:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ae2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ae30:	eb 62                	jmp    c000ae94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ae32:	66 90                	xchg   ax,ax
c000ae34:	83 ec 0c             	sub    esp,0xc
c000ae37:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae39:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae3d:	53                   	push   ebx
c000ae3e:	57                   	push   edi
c000ae3f:	56                   	push   esi
c000ae40:	50                   	push   eax
c000ae41:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ae4c:	89 c6                	mov    esi,eax
c000ae4e:	74 28                	je     c000ae78 <VCache::write(unsigned long long, int, void*)+0x170>
c000ae50:	52                   	push   edx
c000ae51:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae56:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ae5a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ae60:	99                   	cdq    
c000ae61:	f7 f9                	idiv   ecx
c000ae63:	50                   	push   eax
c000ae64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ae68:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000ae6e:	e8 bd 89 00 00       	call   c0013830 <VAS::unlockPages(unsigned long, int)>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	66 90                	xchg   ax,ax
c000ae78:	e8 0b b2 00 00       	call   c0016088 <KeRestorePreemption()>
c000ae7d:	85 f6                	test   esi,esi
c000ae7f:	74 4b                	je     c000aecc <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ae81:	83 ec 0c             	sub    esp,0xc
c000ae84:	68 14 2b 02 c0       	push   0xc0022b14
c000ae89:	e8 c0 c0 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ae8e:	83 c4 10             	add    esp,0x10
c000ae91:	eb 39                	jmp    c000aecc <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ae93:	90                   	nop
c000ae94:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ae99:	74 29                	je     c000aec4 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000ae9b:	50                   	push   eax
c000ae9c:	b9 00 10 00 00       	mov    ecx,0x1000
c000aea1:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000aea5:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	50                   	push   eax
c000aeaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000aeb3:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000aeb9:	e8 72 89 00 00       	call   c0013830 <VAS::unlockPages(unsigned long, int)>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	8d 76 00             	lea    esi,[esi+0x0]
c000aec4:	e8 bf b1 00 00       	call   c0016088 <KeRestorePreemption()>
c000aec9:	31 f6                	xor    esi,esi
c000aecb:	90                   	nop
c000aecc:	83 c4 1c             	add    esp,0x1c
c000aecf:	89 f0                	mov    eax,esi
c000aed1:	5b                   	pop    ebx
c000aed2:	5e                   	pop    esi
c000aed3:	5f                   	pop    edi
c000aed4:	5d                   	pop    ebp
c000aed5:	c3                   	ret    

c000aed6 <VCache::read(unsigned long long, int, void*)>:
c000aed6:	55                   	push   ebp
c000aed7:	bd 00 10 00 00       	mov    ebp,0x1000
c000aedc:	57                   	push   edi
c000aedd:	56                   	push   esi
c000aede:	53                   	push   ebx
c000aedf:	83 ec 2c             	sub    esp,0x2c
c000aee2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000aee6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000aeea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000aeee:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000aef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefa:	e8 61 b1 00 00       	call   c0016060 <KeDisablePreemption()>
c000aeff:	50                   	push   eax
c000af00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000af03:	0f af c6             	imul   eax,esi
c000af06:	05 ff 0f 00 00       	add    eax,0xfff
c000af0b:	99                   	cdq    
c000af0c:	f7 fd                	idiv   ebp
c000af0e:	50                   	push   eax
c000af0f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000af13:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000af19:	e8 d6 88 00 00       	call   c00137f4 <VAS::canLockPages(unsigned long, int)>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	84 c0                	test   al,al
c000af23:	89 c7                	mov    edi,eax
c000af25:	74 25                	je     c000af4c <VCache::read(unsigned long long, int, void*)+0x76>
c000af27:	50                   	push   eax
c000af28:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000af2b:	0f af c6             	imul   eax,esi
c000af2e:	05 ff 0f 00 00       	add    eax,0xfff
c000af33:	99                   	cdq    
c000af34:	f7 fd                	idiv   ebp
c000af36:	50                   	push   eax
c000af37:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000af3b:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000af41:	e8 a8 8c 00 00       	call   c0013bee <VAS::lockPages(unsigned long, int)>
c000af46:	83 c4 10             	add    esp,0x10
c000af49:	8d 76 00             	lea    esi,[esi+0x0]
c000af4c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000af50:	74 0e                	je     c000af60 <VCache::read(unsigned long long, int, void*)+0x8a>
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	53                   	push   ebx
c000af56:	e8 e1 fc ff ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	66 90                	xchg   ax,ax
c000af60:	83 fe 01             	cmp    esi,0x1
c000af63:	0f 85 fb 00 00 00    	jne    c000b064 <VCache::read(unsigned long long, int, void*)+0x18e>
c000af69:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000af6c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000af73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af77:	0f 85 e7 00 00 00    	jne    c000b064 <VCache::read(unsigned long long, int, void*)+0x18e>
c000af7d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000af80:	89 ee                	mov    esi,ebp
c000af82:	f7 de                	neg    esi
c000af84:	89 f0                	mov    eax,esi
c000af86:	c1 f8 1f             	sar    eax,0x1f
c000af89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af8d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af91:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000af95:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000af99:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000af9d:	89 ca                	mov    edx,ecx
c000af9f:	89 f9                	mov    ecx,edi
c000afa1:	0f b6 f9             	movzx  edi,cl
c000afa4:	89 f0                	mov    eax,esi
c000afa6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000afaa:	74 0c                	je     c000afb8 <VCache::read(unsigned long long, int, void*)+0xe2>
c000afac:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000afaf:	75 07                	jne    c000afb8 <VCache::read(unsigned long long, int, void*)+0xe2>
c000afb1:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000afb4:	74 56                	je     c000b00c <VCache::read(unsigned long long, int, void*)+0x136>
c000afb6:	66 90                	xchg   ax,ax
c000afb8:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000afbc:	83 ec 0c             	sub    esp,0xc
c000afbf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000afc2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000afc6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000afc9:	8b 37                	mov    esi,DWORD PTR [edi]
c000afcb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000afce:	55                   	push   ebp
c000afcf:	52                   	push   edx
c000afd0:	50                   	push   eax
c000afd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000afd5:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000afd8:	83 c4 20             	add    esp,0x20
c000afdb:	85 c0                	test   eax,eax
c000afdd:	89 c5                	mov    ebp,eax
c000afdf:	74 2b                	je     c000b00c <VCache::read(unsigned long long, int, void*)+0x136>
c000afe1:	83 ec 0c             	sub    esp,0xc
c000afe4:	68 2c 2b 02 c0       	push   0xc0022b2c
c000afe9:	e8 60 bf ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aff6:	0f 84 bc 00 00 00    	je     c000b0b8 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000affc:	56                   	push   esi
c000affd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b000:	05 ff 0f 00 00       	add    eax,0xfff
c000b005:	e9 92 00 00 00       	jmp    c000b09c <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b00a:	66 90                	xchg   ax,ax
c000b00c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b00f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b013:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b019:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b01c:	8d 70 ff             	lea    esi,[eax-0x1]
c000b01f:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b023:	0f af f1             	imul   esi,ecx
c000b026:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b029:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b02b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b030:	74 26                	je     c000b058 <VCache::read(unsigned long long, int, void*)+0x182>
c000b032:	51                   	push   ecx
c000b033:	b9 00 10 00 00       	mov    ecx,0x1000
c000b038:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b03b:	05 ff 0f 00 00       	add    eax,0xfff
c000b040:	99                   	cdq    
c000b041:	f7 f9                	idiv   ecx
c000b043:	50                   	push   eax
c000b044:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b048:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000b04e:	e8 dd 87 00 00       	call   c0013830 <VAS::unlockPages(unsigned long, int)>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	66 90                	xchg   ax,ax
c000b058:	e8 2b b0 00 00       	call   c0016088 <KeRestorePreemption()>
c000b05d:	31 ed                	xor    ebp,ebp
c000b05f:	eb 5f                	jmp    c000b0c0 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b061:	8d 76 00             	lea    esi,[esi+0x0]
c000b064:	83 ec 0c             	sub    esp,0xc
c000b067:	53                   	push   ebx
c000b068:	e8 bf fb ff ff       	call   c000ac2c <VCache::invalidateReadBuffer()>
c000b06d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b070:	5a                   	pop    edx
c000b071:	8b 10                	mov    edx,DWORD PTR [eax]
c000b073:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b077:	56                   	push   esi
c000b078:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b07c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b080:	50                   	push   eax
c000b081:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b084:	83 c4 20             	add    esp,0x20
c000b087:	89 c5                	mov    ebp,eax
c000b089:	89 f8                	mov    eax,edi
c000b08b:	84 c0                	test   al,al
c000b08d:	74 29                	je     c000b0b8 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b08f:	50                   	push   eax
c000b090:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b094:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b09a:	66 90                	xchg   ax,ax
c000b09c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b0a1:	99                   	cdq    
c000b0a2:	f7 f9                	idiv   ecx
c000b0a4:	50                   	push   eax
c000b0a5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b0a9:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000b0af:	e8 7c 87 00 00       	call   c0013830 <VAS::unlockPages(unsigned long, int)>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	90                   	nop
c000b0b8:	e8 cb af 00 00       	call   c0016088 <KeRestorePreemption()>
c000b0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c0:	83 c4 2c             	add    esp,0x2c
c000b0c3:	89 e8                	mov    eax,ebp
c000b0c5:	5b                   	pop    ebx
c000b0c6:	5e                   	pop    esi
c000b0c7:	5f                   	pop    edi
c000b0c8:	5d                   	pop    ebp
c000b0c9:	c3                   	ret    

c000b0ca <Video::putrect(int, int, int, int, unsigned int)>:
c000b0ca:	55                   	push   ebp
c000b0cb:	57                   	push   edi
c000b0cc:	56                   	push   esi
c000b0cd:	53                   	push   ebx
c000b0ce:	83 ec 1c             	sub    esp,0x1c
c000b0d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b0d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b0d9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b0dd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b0e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b0e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0e9:	01 df                	add    edi,ebx
c000b0eb:	39 fb                	cmp    ebx,edi
c000b0ed:	7d 1f                	jge    c000b10e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b0ef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b0f3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b0f7:	7d 12                	jge    c000b10b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b0f9:	8b 16                	mov    edx,DWORD PTR [esi]
c000b0fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ff:	53                   	push   ebx
c000b100:	55                   	push   ebp
c000b101:	45                   	inc    ebp
c000b102:	56                   	push   esi
c000b103:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b106:	83 c4 10             	add    esp,0x10
c000b109:	eb e8                	jmp    c000b0f3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b10b:	43                   	inc    ebx
c000b10c:	eb dd                	jmp    c000b0eb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b10e:	83 c4 1c             	add    esp,0x1c
c000b111:	5b                   	pop    ebx
c000b112:	5e                   	pop    esi
c000b113:	5f                   	pop    edi
c000b114:	5d                   	pop    ebp
c000b115:	c3                   	ret    

c000b116 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b116:	55                   	push   ebp
c000b117:	57                   	push   edi
c000b118:	31 ff                	xor    edi,edi
c000b11a:	56                   	push   esi
c000b11b:	53                   	push   ebx
c000b11c:	83 ec 1c             	sub    esp,0x1c
c000b11f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b123:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b127:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b12e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b137:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b13b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b13f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b142:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b146:	01 f9                	add    ecx,edi
c000b148:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b14c:	7d 2f                	jge    c000b17d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b14e:	31 f6                	xor    esi,esi
c000b150:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b154:	01 f2                	add    edx,esi
c000b156:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b15a:	7d 1a                	jge    c000b176 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b15c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b15f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b162:	46                   	inc    esi
c000b163:	51                   	push   ecx
c000b164:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b168:	52                   	push   edx
c000b169:	55                   	push   ebp
c000b16a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b16d:	83 c4 10             	add    esp,0x10
c000b170:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b174:	eb da                	jmp    c000b150 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b176:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b17a:	47                   	inc    edi
c000b17b:	eb c5                	jmp    c000b142 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b17d:	83 c4 1c             	add    esp,0x1c
c000b180:	5b                   	pop    ebx
c000b181:	5e                   	pop    esi
c000b182:	5f                   	pop    edi
c000b183:	5d                   	pop    ebp
c000b184:	c3                   	ret    
c000b185:	90                   	nop

c000b186 <Video::blit(unsigned int*, int, int, int, int)>:
c000b186:	55                   	push   ebp
c000b187:	ba 00 00 00 00       	mov    edx,0x0
c000b18c:	57                   	push   edi
c000b18d:	56                   	push   esi
c000b18e:	53                   	push   ebx
c000b18f:	83 ec 1c             	sub    esp,0x1c
c000b192:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b196:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b19a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b19e:	85 c0                	test   eax,eax
c000b1a0:	0f 49 d0             	cmovns edx,eax
c000b1a3:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b1aa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b1ae:	89 eb                	mov    ebx,ebp
c000b1b0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b1b4:	01 ea                	add    edx,ebp
c000b1b6:	39 da                	cmp    edx,ebx
c000b1b8:	7e 54                	jle    c000b20e <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b1ba:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b1c0:	7c 4c                	jl     c000b20e <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b1c2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b1c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b1ca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b1ce:	01 c1                	add    ecx,eax
c000b1d0:	39 f9                	cmp    ecx,edi
c000b1d2:	7e 2f                	jle    c000b203 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b1d4:	83 c2 04             	add    edx,0x4
c000b1d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b1dd:	7c 21                	jl     c000b200 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b1df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b1e3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b1e5:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b1e8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b1f1:	56                   	push   esi
c000b1f2:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b1f5:	83 c4 10             	add    esp,0x10
c000b1f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b1fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b200:	47                   	inc    edi
c000b201:	eb c7                	jmp    c000b1ca <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b203:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b207:	43                   	inc    ebx
c000b208:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b20c:	eb a2                	jmp    c000b1b0 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b20e:	83 c4 1c             	add    esp,0x1c
c000b211:	5b                   	pop    ebx
c000b212:	5e                   	pop    esi
c000b213:	5f                   	pop    edi
c000b214:	5d                   	pop    ebp
c000b215:	c3                   	ret    

c000b216 <Video::clearScreen(unsigned int)>:
c000b216:	57                   	push   edi
c000b217:	56                   	push   esi
c000b218:	53                   	push   ebx
c000b219:	31 db                	xor    ebx,ebx
c000b21b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b21f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b225:	7e 1f                	jle    c000b246 <Video::clearScreen(unsigned int)+0x30>
c000b227:	31 ff                	xor    edi,edi
c000b229:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b22f:	7e 12                	jle    c000b243 <Video::clearScreen(unsigned int)+0x2d>
c000b231:	8b 06                	mov    eax,DWORD PTR [esi]
c000b233:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b237:	53                   	push   ebx
c000b238:	57                   	push   edi
c000b239:	47                   	inc    edi
c000b23a:	56                   	push   esi
c000b23b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b23e:	83 c4 10             	add    esp,0x10
c000b241:	eb e6                	jmp    c000b229 <Video::clearScreen(unsigned int)+0x13>
c000b243:	43                   	inc    ebx
c000b244:	eb d9                	jmp    c000b21f <Video::clearScreen(unsigned int)+0x9>
c000b246:	5b                   	pop    ebx
c000b247:	5e                   	pop    esi
c000b248:	5f                   	pop    edi
c000b249:	c3                   	ret    

c000b24a <Video::putpixel(int, int, unsigned int)>:
c000b24a:	c7 44 24 04 64 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b64
c000b252:	e9 87 44 00 00       	jmp    c000f6de <KePanic(char const*)>
c000b257:	90                   	nop

c000b258 <Video::readPixelApprox(int, int)>:
c000b258:	83 ec 18             	sub    esp,0x18
c000b25b:	68 85 2b 02 c0       	push   0xc0022b85
c000b260:	e8 79 44 00 00       	call   c000f6de <KePanic(char const*)>
c000b265:	31 c0                	xor    eax,eax
c000b267:	83 c4 1c             	add    esp,0x1c
c000b26a:	c3                   	ret    
c000b26b:	90                   	nop

c000b26c <Video::Video(char const*)>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	83 ec 08             	sub    esp,0x8
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	50                   	push   eax
c000b27b:	e8 90 e1 ff ff       	call   c0009410 <Device::Device(char const*)>
c000b280:	83 c4 10             	add    esp,0x10
c000b283:	ba 28 2c 02 c0       	mov    edx,0xc0022c28
c000b288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28c:	89 10                	mov    DWORD PTR [eax],edx
c000b28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b292:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b29c:	90                   	nop
c000b29d:	83 c4 0c             	add    esp,0xc
c000b2a0:	c3                   	ret    
c000b2a1:	90                   	nop

c000b2a2 <Video::~Video()>:
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	ba 28 2c 02 c0       	mov    edx,0xc0022c28
c000b2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ae:	89 10                	mov    DWORD PTR [eax],edx
c000b2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b4:	83 ec 0c             	sub    esp,0xc
c000b2b7:	50                   	push   eax
c000b2b8:	e8 f3 de ff ff       	call   c00091b0 <Device::~Device()>
c000b2bd:	83 c4 10             	add    esp,0x10
c000b2c0:	90                   	nop
c000b2c1:	83 c4 0c             	add    esp,0xc
c000b2c4:	c3                   	ret    
c000b2c5:	90                   	nop

c000b2c6 <Video::~Video()>:
c000b2c6:	83 ec 0c             	sub    esp,0xc
c000b2c9:	83 ec 0c             	sub    esp,0xc
c000b2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2d0:	e8 cd ff ff ff       	call   c000b2a2 <Video::~Video()>
c000b2d5:	83 c4 10             	add    esp,0x10
c000b2d8:	83 ec 08             	sub    esp,0x8
c000b2db:	68 64 01 00 00       	push   0x164
c000b2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e4:	e8 26 18 00 00       	call   c000cb0f <operator delete(void*, unsigned long)>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	83 c4 0c             	add    esp,0xc
c000b2ef:	c3                   	ret    

c000b2f0 <Video::isMonochrome()>:
c000b2f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000b2fa:	c3                   	ret    
c000b2fb:	90                   	nop

c000b2fc <Video::getWidth()>:
c000b2fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b300:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b306:	c3                   	ret    
c000b307:	90                   	nop

c000b308 <Video::getHeight()>:
c000b308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b312:	c3                   	ret    
c000b313:	90                   	nop

c000b314 <Video::drawCursor(int, int, unsigned int*, int)>:
c000b314:	55                   	push   ebp
c000b315:	57                   	push   edi
c000b316:	56                   	push   esi
c000b317:	53                   	push   ebx
c000b318:	83 ec 2c             	sub    esp,0x2c
c000b31b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b31f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b323:	83 f8 01             	cmp    eax,0x1
c000b326:	19 c9                	sbb    ecx,ecx
c000b328:	31 db                	xor    ebx,ebx
c000b32a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b32e:	89 ce                	mov    esi,ecx
c000b330:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000b338:	f7 d6                	not    esi
c000b33a:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000b340:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b344:	01 d8                	add    eax,ebx
c000b346:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b34a:	57                   	push   edi
c000b34b:	e8 b8 ff ff ff       	call   c000b308 <Video::getHeight()>
c000b350:	59                   	pop    ecx
c000b351:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b355:	7e 70                	jle    c000b3c7 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000b357:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b35b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000b35f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000b362:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b366:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b36a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000b371:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b375:	89 e8                	mov    eax,ebp
c000b377:	83 c0 20             	add    eax,0x20
c000b37a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b37e:	57                   	push   edi
c000b37f:	e8 78 ff ff ff       	call   c000b2fc <Video::getWidth()>
c000b384:	5a                   	pop    edx
c000b385:	39 c5                	cmp    ebp,eax
c000b387:	7d 34                	jge    c000b3bd <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000b389:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000b38e:	74 05                	je     c000b395 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000b390:	8b 07                	mov    eax,DWORD PTR [edi]
c000b392:	56                   	push   esi
c000b393:	eb 0d                	jmp    c000b3a2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000b395:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000b39a:	74 12                	je     c000b3ae <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000b39c:	8b 07                	mov    eax,DWORD PTR [edi]
c000b39e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3a6:	55                   	push   ebp
c000b3a7:	57                   	push   edi
c000b3a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b3ab:	83 c4 10             	add    esp,0x10
c000b3ae:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000b3b2:	45                   	inc    ebp
c000b3b3:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000b3b7:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000b3bb:	75 c1                	jne    c000b37e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000b3bd:	43                   	inc    ebx
c000b3be:	83 fb 20             	cmp    ebx,0x20
c000b3c1:	0f 85 79 ff ff ff    	jne    c000b340 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b3c7:	83 c4 2c             	add    esp,0x2c
c000b3ca:	5b                   	pop    ebx
c000b3cb:	5e                   	pop    esi
c000b3cc:	5f                   	pop    edi
c000b3cd:	5d                   	pop    ebp
c000b3ce:	c3                   	ret    
c000b3cf:	90                   	nop

c000b3d0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b3d0:	55                   	push   ebp
c000b3d1:	57                   	push   edi
c000b3d2:	56                   	push   esi
c000b3d3:	53                   	push   ebx
c000b3d4:	83 ec 48             	sub    esp,0x48
c000b3d7:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b3db:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b3df:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b3e3:	c1 e0 08             	shl    eax,0x8
c000b3e6:	01 d0                	add    eax,edx
c000b3e8:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b3ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3f0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b3f4:	c1 e0 08             	shl    eax,0x8
c000b3f7:	01 d0                	add    eax,edx
c000b3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b401:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b406:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b40a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b40e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b415:	50                   	push   eax
c000b416:	e8 7d 3f 00 00       	call   c000f398 <malloc>
c000b41b:	83 c4 10             	add    esp,0x10
c000b41e:	85 c0                	test   eax,eax
c000b420:	89 c5                	mov    ebp,eax
c000b422:	75 10                	jne    c000b434 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b424:	83 ec 0c             	sub    esp,0xc
c000b427:	68 b0 2b 02 c0       	push   0xc0022bb0
c000b42c:	e8 ad 42 00 00       	call   c000f6de <KePanic(char const*)>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	52                   	push   edx
c000b435:	bf 12 00 00 00       	mov    edi,0x12
c000b43a:	52                   	push   edx
c000b43b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b43f:	50                   	push   eax
c000b440:	68 c0 2b 02 c0       	push   0xc0022bc0
c000b445:	e8 04 bb ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b44a:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b44d:	83 e0 20             	and    eax,0x20
c000b450:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b454:	85 c0                	test   eax,eax
c000b456:	59                   	pop    ecx
c000b457:	0f 94 c0             	sete   al
c000b45a:	0f b6 c0             	movzx  eax,al
c000b45d:	5e                   	pop    esi
c000b45e:	50                   	push   eax
c000b45f:	68 ca 2b 02 c0       	push   0xc0022bca
c000b464:	e8 e5 ba ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b469:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b46d:	83 c4 10             	add    esp,0x10
c000b470:	85 c0                	test   eax,eax
c000b472:	89 c2                	mov    edx,eax
c000b474:	74 11                	je     c000b487 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b476:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b47a:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b47e:	c1 ff 03             	sar    edi,0x3
c000b481:	0f af f9             	imul   edi,ecx
c000b484:	83 c7 12             	add    edi,0x12
c000b487:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b48c:	74 07                	je     c000b495 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b48e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b493:	75 12                	jne    c000b4a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b495:	83 ec 0c             	sub    esp,0xc
c000b498:	68 d8 2b 02 c0       	push   0xc0022bd8
c000b49d:	e8 ac ba ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b4a2:	e9 aa 02 00 00       	jmp    c000b751 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b4a7:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b4ab:	83 f9 02             	cmp    ecx,0x2
c000b4ae:	74 0e                	je     c000b4be <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b4b0:	83 f9 0a             	cmp    ecx,0xa
c000b4b3:	0f 84 d1 00 00 00    	je     c000b58a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b4b9:	e9 7e 02 00 00       	jmp    c000b73c <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b4be:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b4c3:	75 0e                	jne    c000b4d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b4c5:	84 d2                	test   dl,dl
c000b4c7:	75 0a                	jne    c000b4d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b4c9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b4cc:	83 e8 18             	sub    eax,0x18
c000b4cf:	a8 f7                	test   al,0xf7
c000b4d1:	74 0d                	je     c000b4e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b4d3:	83 ec 0c             	sub    esp,0xc
c000b4d6:	68 ed 2b 02 c0       	push   0xc0022bed
c000b4db:	e9 64 02 00 00       	jmp    c000b744 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b4e0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b4e8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b4ed:	31 c0                	xor    eax,eax
c000b4ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b4f3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b4fb:	89 c6                	mov    esi,eax
c000b4fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b502:	75 15                	jne    c000b519 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b504:	99                   	cdq    
c000b505:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b509:	85 d2                	test   edx,edx
c000b50b:	75 0c                	jne    c000b519 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b50d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b511:	29 c6                	sub    esi,eax
c000b513:	4e                   	dec    esi
c000b514:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b519:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b51d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b525:	75 0c                	jne    c000b533 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b527:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b52c:	c1 e2 18             	shl    edx,0x18
c000b52f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b533:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b538:	8d 46 01             	lea    eax,[esi+0x1]
c000b53b:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b53f:	c1 e1 10             	shl    ecx,0x10
c000b542:	89 ca                	mov    edx,ecx
c000b544:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b549:	c1 e1 08             	shl    ecx,0x8
c000b54c:	09 d1                	or     ecx,edx
c000b54e:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b552:	09 d1                	or     ecx,edx
c000b554:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b558:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b55c:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b560:	c1 fa 03             	sar    edx,0x3
c000b563:	01 d7                	add    edi,edx
c000b565:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b569:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b56d:	7e 04                	jle    c000b573 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b56f:	89 c6                	mov    esi,eax
c000b571:	eb 8a                	jmp    c000b4fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b573:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b577:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b57b:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b57f:	0f 8f 6e ff ff ff    	jg     c000b4f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b585:	e9 ce 01 00 00       	jmp    c000b758 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b58a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b58f:	75 0e                	jne    c000b59f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b591:	85 c0                	test   eax,eax
c000b593:	75 0a                	jne    c000b59f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b595:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b598:	83 e8 18             	sub    eax,0x18
c000b59b:	a8 f7                	test   al,0xf7
c000b59d:	74 0d                	je     c000b5ac <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b59f:	83 ec 0c             	sub    esp,0xc
c000b5a2:	68 fb 2b 02 c0       	push   0xc0022bfb
c000b5a7:	e9 98 01 00 00       	jmp    c000b744 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b5ac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b5b4:	31 c9                	xor    ecx,ecx
c000b5b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b5be:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b5c2:	0f 8d 90 01 00 00    	jge    c000b758 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b5c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b5cc:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b5d0:	0f 8e 82 01 00 00    	jle    c000b758 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b5d6:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b5da:	8d 77 01             	lea    esi,[edi+0x1]
c000b5dd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b5e1:	83 fa 7f             	cmp    edx,0x7f
c000b5e4:	89 d0                	mov    eax,edx
c000b5e6:	0f 8e a3 00 00 00    	jle    c000b68f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b5ec:	83 e0 7f             	and    eax,0x7f
c000b5ef:	31 d2                	xor    edx,edx
c000b5f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5f5:	40                   	inc    eax
c000b5f6:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b5fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fe:	75 08                	jne    c000b608 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b600:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b605:	c1 e2 18             	shl    edx,0x18
c000b608:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b60d:	c1 e0 10             	shl    eax,0x10
c000b610:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b614:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b619:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b61d:	c1 e0 08             	shl    eax,0x8
c000b620:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b624:	09 f8                	or     eax,edi
c000b626:	31 ff                	xor    edi,edi
c000b628:	09 d0                	or     eax,edx
c000b62a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b62e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b633:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b637:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b63c:	75 1d                	jne    c000b65b <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b63e:	89 c8                	mov    eax,ecx
c000b640:	99                   	cdq    
c000b641:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b645:	85 d2                	test   edx,edx
c000b647:	75 12                	jne    c000b65b <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b649:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b64d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b651:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b655:	49                   	dec    ecx
c000b656:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b65b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b65f:	8d 51 01             	lea    edx,[ecx+0x1]
c000b662:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b666:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b66a:	8d 47 01             	lea    eax,[edi+0x1]
c000b66d:	7e 06                	jle    c000b675 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b66f:	89 c7                	mov    edi,eax
c000b671:	89 d1                	mov    ecx,edx
c000b673:	eb c2                	jmp    c000b637 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b675:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b679:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b67d:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b681:	c1 f8 03             	sar    eax,0x3
c000b684:	01 c6                	add    esi,eax
c000b686:	89 d1                	mov    ecx,edx
c000b688:	89 f7                	mov    edi,esi
c000b68a:	e9 2f ff ff ff       	jmp    c000b5be <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b68f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b697:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b69b:	40                   	inc    eax
c000b69c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b6a5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b6a9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b6ae:	75 1d                	jne    c000b6cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b6b0:	89 c8                	mov    eax,ecx
c000b6b2:	99                   	cdq    
c000b6b3:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b6b7:	85 d2                	test   edx,edx
c000b6b9:	75 12                	jne    c000b6cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b6bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6bf:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b6c3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b6c7:	49                   	dec    ecx
c000b6c8:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b6cd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b6d1:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b6d9:	75 0c                	jne    c000b6e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b6db:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b6e0:	c1 e7 18             	shl    edi,0x18
c000b6e3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b6e7:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b6ec:	8d 51 01             	lea    edx,[ecx+0x1]
c000b6ef:	c1 e0 10             	shl    eax,0x10
c000b6f2:	89 c7                	mov    edi,eax
c000b6f4:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b6f9:	c1 e0 08             	shl    eax,0x8
c000b6fc:	09 f8                	or     eax,edi
c000b6fe:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b702:	09 f8                	or     eax,edi
c000b704:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b708:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b70c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b710:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b714:	c1 f8 03             	sar    eax,0x3
c000b717:	01 c6                	add    esi,eax
c000b719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b71d:	40                   	inc    eax
c000b71e:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b722:	7e 0b                	jle    c000b72f <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b724:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b728:	89 d1                	mov    ecx,edx
c000b72a:	e9 7a ff ff ff       	jmp    c000b6a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b72f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b733:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b737:	e9 4a ff ff ff       	jmp    c000b686 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b73c:	50                   	push   eax
c000b73d:	50                   	push   eax
c000b73e:	51                   	push   ecx
c000b73f:	68 0a 2c 02 c0       	push   0xc0022c0a
c000b744:	e8 05 b8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b749:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b74c:	e8 57 3c 00 00       	call   c000f3a8 <free>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	31 ed                	xor    ebp,ebp
c000b756:	eb 14                	jmp    c000b76c <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b758:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b75c:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b760:	89 18                	mov    DWORD PTR [eax],ebx
c000b762:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b766:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b76a:	89 18                	mov    DWORD PTR [eax],ebx
c000b76c:	83 c4 3c             	add    esp,0x3c
c000b76f:	89 e8                	mov    eax,ebp
c000b771:	5b                   	pop    ebx
c000b772:	5e                   	pop    esi
c000b773:	5f                   	pop    edi
c000b774:	5d                   	pop    ebp
c000b775:	c3                   	ret    

c000b776 <Video::putTGA(int, int, unsigned char*, int)>:
c000b776:	55                   	push   ebp
c000b777:	57                   	push   edi
c000b778:	56                   	push   esi
c000b779:	53                   	push   ebx
c000b77a:	83 ec 28             	sub    esp,0x28
c000b77d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b781:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b785:	50                   	push   eax
c000b786:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b78a:	50                   	push   eax
c000b78b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b78f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b793:	55                   	push   ebp
c000b794:	e8 37 fc ff ff       	call   c000b3d0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b799:	83 c4 20             	add    esp,0x20
c000b79c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b7a0:	85 c0                	test   eax,eax
c000b7a2:	74 3b                	je     c000b7df <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b7a4:	89 c6                	mov    esi,eax
c000b7a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7ae:	39 d8                	cmp    eax,ebx
c000b7b0:	7e 2d                	jle    c000b7df <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b7b2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b7ba:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b7be:	39 f8                	cmp    eax,edi
c000b7c0:	7e 1a                	jle    c000b7dc <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b7c2:	83 c6 04             	add    esi,0x4
c000b7c5:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b7c8:	85 c0                	test   eax,eax
c000b7ca:	79 0d                	jns    c000b7d9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b7cc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b7cf:	50                   	push   eax
c000b7d0:	53                   	push   ebx
c000b7d1:	57                   	push   edi
c000b7d2:	55                   	push   ebp
c000b7d3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	47                   	inc    edi
c000b7da:	eb da                	jmp    c000b7b6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b7dc:	43                   	inc    ebx
c000b7dd:	eb c7                	jmp    c000b7a6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b7df:	83 c4 1c             	add    esp,0x1c
c000b7e2:	5b                   	pop    ebx
c000b7e3:	5e                   	pop    esi
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	c3                   	ret    
c000b7e7:	90                   	nop

c000b7e8 <ACPI::close(int, int, void*)>:
c000b7e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b7ed:	c3                   	ret    
c000b7ee:	66 90                	xchg   ax,ax

c000b7f0 <loadACPITables(unsigned char*)>:
c000b7f0:	57                   	push   edi
c000b7f1:	56                   	push   esi
c000b7f2:	53                   	push   ebx
c000b7f3:	83 ec 60             	sub    esp,0x60
c000b7f6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b7fb:	0f 84 43 02 00 00    	je     c000ba44 <loadACPITables(unsigned char*)+0x254>
c000b801:	a0 80 ad 02 c0       	mov    al,ds:0xc002ad80
c000b806:	0f b6 c0             	movzx  eax,al
c000b809:	85 c0                	test   eax,eax
c000b80b:	74 7b                	je     c000b888 <loadACPITables(unsigned char*)+0x98>
c000b80d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b811:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b815:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b819:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b81c:	83 e8 24             	sub    eax,0x24
c000b81f:	c1 e8 03             	shr    eax,0x3
c000b822:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b826:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b82e:	66 90                	xchg   ax,ax
c000b830:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b834:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b838:	0f 8d ba 00 00 00    	jge    c000b8f8 <loadACPITables(unsigned char*)+0x108>
c000b83e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b842:	83 c0 24             	add    eax,0x24
c000b845:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b849:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b84d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b851:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b855:	c1 e0 03             	shl    eax,0x3
c000b858:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b85c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b860:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b863:	8b 00                	mov    eax,DWORD PTR [eax]
c000b865:	89 c1                	mov    ecx,eax
c000b867:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c000b86c:	8d 50 01             	lea    edx,[eax+0x1]
c000b86f:	89 15 60 ab 02 c0    	mov    DWORD PTR ds:0xc002ab60,edx
c000b875:	89 ca                	mov    edx,ecx
c000b877:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c000b87e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b883:	eb ab                	jmp    c000b830 <loadACPITables(unsigned char*)+0x40>
c000b885:	8d 76 00             	lea    esi,[esi+0x0]
c000b888:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b88c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b890:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b894:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b897:	83 e8 24             	sub    eax,0x24
c000b89a:	c1 e8 02             	shr    eax,0x2
c000b89d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8a1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b8ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b8b0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b8b4:	7d 42                	jge    c000b8f8 <loadACPITables(unsigned char*)+0x108>
c000b8b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b8ba:	83 c0 24             	add    eax,0x24
c000b8bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b8c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b8c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b8c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b8cd:	c1 e0 02             	shl    eax,0x2
c000b8d0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b8d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b8d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b8da:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c000b8df:	8d 50 01             	lea    edx,[eax+0x1]
c000b8e2:	89 15 60 ab 02 c0    	mov    DWORD PTR ds:0xc002ab60,edx
c000b8e8:	89 ca                	mov    edx,ecx
c000b8ea:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c000b8f1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b8f6:	eb b4                	jmp    c000b8ac <loadACPITables(unsigned char*)+0xbc>
c000b8f8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b900:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c000b905:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b909:	0f 8d 39 01 00 00    	jge    c000ba48 <loadACPITables(unsigned char*)+0x258>
c000b90f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b913:	8b 04 c5 84 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd547c]
c000b91a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b91e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b922:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b926:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b92a:	25 ff 0f 00 00       	and    eax,0xfff
c000b92f:	89 c6                	mov    esi,eax
c000b931:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c000b937:	83 ec 0c             	sub    esp,0xc
c000b93a:	6a 01                	push   0x1
c000b93c:	e8 5c 71 00 00       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c000b941:	83 c4 10             	add    esp,0x10
c000b944:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b948:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b94e:	83 ec 0c             	sub    esp,0xc
c000b951:	6a 01                	push   0x1
c000b953:	6a 01                	push   0x1
c000b955:	50                   	push   eax
c000b956:	52                   	push   edx
c000b957:	53                   	push   ebx
c000b958:	e8 13 7a 00 00       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	09 f0                	or     eax,esi
c000b962:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b966:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b96a:	c1 e0 03             	shl    eax,0x3
c000b96d:	05 80 ab 02 c0       	add    eax,0xc002ab80
c000b972:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b976:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b97a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b97e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b986:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b98a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b98e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b996:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b99a:	89 c6                	mov    esi,eax
c000b99c:	89 d7                	mov    edi,edx
c000b99e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9a0:	89 c8                	mov    eax,ecx
c000b9a2:	89 fa                	mov    edx,edi
c000b9a4:	89 f3                	mov    ebx,esi
c000b9a6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b9aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b9ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b9b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9c1:	05 00 10 00 00       	add    eax,0x1000
c000b9c6:	c1 e8 0c             	shr    eax,0xc
c000b9c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b9cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b9d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9d9:	25 ff 0f 00 00       	and    eax,0xfff
c000b9de:	89 c6                	mov    esi,eax
c000b9e0:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c000b9e6:	83 ec 0c             	sub    esp,0xc
c000b9e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b9ed:	e8 ab 70 00 00       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c000b9f2:	83 c4 10             	add    esp,0x10
c000b9f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b9f9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b9ff:	83 ec 0c             	sub    esp,0xc
c000ba02:	6a 01                	push   0x1
c000ba04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba08:	50                   	push   eax
c000ba09:	52                   	push   edx
c000ba0a:	53                   	push   ebx
c000ba0b:	e8 60 79 00 00       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ba10:	83 c4 20             	add    esp,0x20
c000ba13:	09 f0                	or     eax,esi
c000ba15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba1d:	83 ec 0c             	sub    esp,0xc
c000ba20:	50                   	push   eax
c000ba21:	e8 75 73 00 00       	call   c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ba2d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ba31:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c000ba38:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ba3d:	e9 be fe ff ff       	jmp    c000b900 <loadACPITables(unsigned char*)+0x110>
c000ba42:	66 90                	xchg   ax,ax
c000ba44:	90                   	nop
c000ba45:	8d 76 00             	lea    esi,[esi+0x0]
c000ba48:	83 c4 60             	add    esp,0x60
c000ba4b:	5b                   	pop    ebx
c000ba4c:	5e                   	pop    esi
c000ba4d:	5f                   	pop    edi
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <findRSDT(unsigned char*)>:
c000ba50:	57                   	push   edi
c000ba51:	56                   	push   esi
c000ba52:	53                   	push   ebx
c000ba53:	83 ec 50             	sub    esp,0x50
c000ba56:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c000ba5b:	85 c0                	test   eax,eax
c000ba5d:	75 0d                	jne    c000ba6c <findRSDT(unsigned char*)+0x1c>
c000ba5f:	b8 00 00 00 00       	mov    eax,0x0
c000ba64:	e9 2b 01 00 00       	jmp    c000bb94 <findRSDT(unsigned char*)+0x144>
c000ba69:	8d 76 00             	lea    esi,[esi+0x0]
c000ba6c:	89 e0                	mov    eax,esp
c000ba6e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ba72:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ba76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ba7a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ba82:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ba86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ba8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ba92:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ba96:	89 c6                	mov    esi,eax
c000ba98:	89 d7                	mov    edi,edx
c000ba9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba9c:	89 c8                	mov    eax,ecx
c000ba9e:	89 fa                	mov    edx,edi
c000baa0:	89 f3                	mov    ebx,esi
c000baa2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000baa6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000baaa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000baae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000bab2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000bab6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000babe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bac2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bac6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000baca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bace:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bad2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bad6:	25 ff 0f 00 00       	and    eax,0xfff
c000badb:	89 c6                	mov    esi,eax
c000badd:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c000bae3:	83 ec 0c             	sub    esp,0xc
c000bae6:	6a 02                	push   0x2
c000bae8:	e8 b0 6f 00 00       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c000baed:	83 c4 10             	add    esp,0x10
c000baf0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000baf4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000bafa:	83 ec 0c             	sub    esp,0xc
c000bafd:	6a 01                	push   0x1
c000baff:	6a 02                	push   0x2
c000bb01:	50                   	push   eax
c000bb02:	52                   	push   edx
c000bb03:	53                   	push   ebx
c000bb04:	e8 67 78 00 00       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bb09:	83 c4 20             	add    esp,0x20
c000bb0c:	09 f0                	or     eax,esi
c000bb0e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bb12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb16:	25 ff 0f 00 00       	and    eax,0xfff
c000bb1b:	89 c6                	mov    esi,eax
c000bb1d:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c000bb23:	83 ec 0c             	sub    esp,0xc
c000bb26:	6a 02                	push   0x2
c000bb28:	e8 70 6f 00 00       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c000bb2d:	83 c4 10             	add    esp,0x10
c000bb30:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bb34:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000bb3a:	83 ec 0c             	sub    esp,0xc
c000bb3d:	6a 01                	push   0x1
c000bb3f:	6a 02                	push   0x2
c000bb41:	50                   	push   eax
c000bb42:	52                   	push   edx
c000bb43:	53                   	push   ebx
c000bb44:	e8 27 78 00 00       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bb49:	83 c4 20             	add    esp,0x20
c000bb4c:	09 f0                	or     eax,esi
c000bb4e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bb52:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000bb57:	85 c0                	test   eax,eax
c000bb59:	75 11                	jne    c000bb6c <findRSDT(unsigned char*)+0x11c>
c000bb5b:	c6 05 80 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad80,0x0
c000bb62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb66:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bb6a:	eb 24                	jmp    c000bb90 <findRSDT(unsigned char*)+0x140>
c000bb6c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000bb71:	83 f8 02             	cmp    eax,0x2
c000bb74:	75 12                	jne    c000bb88 <findRSDT(unsigned char*)+0x138>
c000bb76:	c6 05 80 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad80,0x1
c000bb7d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bb81:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bb85:	eb 09                	jmp    c000bb90 <findRSDT(unsigned char*)+0x140>
c000bb87:	90                   	nop
c000bb88:	b8 00 00 00 00       	mov    eax,0x0
c000bb8d:	eb 05                	jmp    c000bb94 <findRSDT(unsigned char*)+0x144>
c000bb8f:	90                   	nop
c000bb90:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb94:	83 c4 50             	add    esp,0x50
c000bb97:	5b                   	pop    ebx
c000bb98:	5e                   	pop    esi
c000bb99:	5f                   	pop    edi
c000bb9a:	c3                   	ret    
c000bb9b:	90                   	nop

c000bb9c <findDataTable(unsigned char*, char*)>:
c000bb9c:	83 ec 1c             	sub    esp,0x1c
c000bb9f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000bba4:	75 0a                	jne    c000bbb0 <findDataTable(unsigned char*, char*)+0x14>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	eb 5f                	jmp    c000bc0c <findDataTable(unsigned char*, char*)+0x70>
c000bbad:	8d 76 00             	lea    esi,[esi+0x0]
c000bbb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bbb8:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c000bbbd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000bbc1:	7d 41                	jge    c000bc04 <findDataTable(unsigned char*, char*)+0x68>
c000bbc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbc7:	c1 e0 03             	shl    eax,0x3
c000bbca:	05 80 ab 02 c0       	add    eax,0xc002ab80
c000bbcf:	83 ec 04             	sub    esp,0x4
c000bbd2:	6a 04                	push   0x4
c000bbd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd8:	50                   	push   eax
c000bbd9:	e8 a2 47 ff ff       	call   c0000380 <memcmp>
c000bbde:	83 c4 10             	add    esp,0x10
c000bbe1:	85 c0                	test   eax,eax
c000bbe3:	0f 94 c0             	sete   al
c000bbe6:	0f b6 c0             	movzx  eax,al
c000bbe9:	85 c0                	test   eax,eax
c000bbeb:	74 0f                	je     c000bbfc <findDataTable(unsigned char*, char*)+0x60>
c000bbed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbf1:	8b 04 c5 84 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd547c]
c000bbf8:	eb 12                	jmp    c000bc0c <findDataTable(unsigned char*, char*)+0x70>
c000bbfa:	66 90                	xchg   ax,ax
c000bbfc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000bc01:	eb b5                	jmp    c000bbb8 <findDataTable(unsigned char*, char*)+0x1c>
c000bc03:	90                   	nop
c000bc04:	b8 00 00 00 00       	mov    eax,0x0
c000bc09:	8d 76 00             	lea    esi,[esi+0x0]
c000bc0c:	83 c4 1c             	add    esp,0x1c
c000bc0f:	c3                   	ret    

c000bc10 <scanMADT()>:
c000bc10:	53                   	push   ebx
c000bc11:	83 ec 38             	sub    esp,0x38
c000bc14:	c7 05 88 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad88,0x0
c000bc1e:	c7 05 84 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad84,0x0
c000bc28:	e8 05 cf 00 00       	call   c0018b32 <HalFindRSDP()>
c000bc2d:	a3 88 ad 02 c0       	mov    ds:0xc002ad88,eax
c000bc32:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c000bc37:	85 c0                	test   eax,eax
c000bc39:	0f 84 11 04 00 00    	je     c000c050 <scanMADT()+0x440>
c000bc3f:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c000bc44:	83 ec 0c             	sub    esp,0xc
c000bc47:	50                   	push   eax
c000bc48:	e8 03 fe ff ff       	call   c000ba50 <findRSDT(unsigned char*)>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	a3 84 ad 02 c0       	mov    ds:0xc002ad84,eax
c000bc55:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000bc5a:	85 c0                	test   eax,eax
c000bc5c:	0f 84 f2 03 00 00    	je     c000c054 <scanMADT()+0x444>
c000bc62:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000bc67:	83 ec 0c             	sub    esp,0xc
c000bc6a:	50                   	push   eax
c000bc6b:	e8 80 fb ff ff       	call   c000b7f0 <loadACPITables(unsigned char*)>
c000bc70:	83 c4 10             	add    esp,0x10
c000bc73:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000bc78:	83 ec 08             	sub    esp,0x8
c000bc7b:	68 6c 2c 02 c0       	push   0xc0022c6c
c000bc80:	50                   	push   eax
c000bc81:	e8 16 ff ff ff       	call   c000bb9c <findDataTable(unsigned char*, char*)>
c000bc86:	83 c4 10             	add    esp,0x10
c000bc89:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc8d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bc92:	0f 84 c0 03 00 00    	je     c000c058 <scanMADT()+0x448>
c000bc98:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000bca0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bca7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000bcab:	0f 87 af 03 00 00    	ja     c000c060 <scanMADT()+0x450>
c000bcb1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000bcb9:	0f 87 a1 03 00 00    	ja     c000c060 <scanMADT()+0x450>
c000bcbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcc3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bccb:	8d 50 01             	lea    edx,[eax+0x1]
c000bcce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bcd6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bcda:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000bcde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bce2:	8d 50 01             	lea    edx,[eax+0x1]
c000bce5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bced:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bcf1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000bcf5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000bcfa:	83 f8 02             	cmp    eax,0x2
c000bcfd:	0f 86 59 03 00 00    	jbe    c000c05c <scanMADT()+0x44c>
c000bd03:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bd08:	85 c0                	test   eax,eax
c000bd0a:	75 58                	jne    c000bd64 <scanMADT()+0x154>
c000bd0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd10:	8d 50 01             	lea    edx,[eax+0x1]
c000bd13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd17:	8a 15 80 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af80
c000bd1d:	0f b6 d2             	movzx  edx,dl
c000bd20:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bd24:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bd28:	88 82 c0 af 02 c0    	mov    BYTE PTR [edx-0x3ffd5040],al
c000bd2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd32:	8d 50 01             	lea    edx,[eax+0x1]
c000bd35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd39:	8a 15 80 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af80
c000bd3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bd42:	88 0d 80 af 02 c0    	mov    BYTE PTR ds:0xc002af80,cl
c000bd48:	0f b6 d2             	movzx  edx,dl
c000bd4b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bd4f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bd53:	88 82 a0 af 02 c0    	mov    BYTE PTR [edx-0x3ffd5060],al
c000bd59:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bd5e:	e9 d9 02 00 00       	jmp    c000c03c <scanMADT()+0x42c>
c000bd63:	90                   	nop
c000bd64:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bd69:	83 f8 01             	cmp    eax,0x1
c000bd6c:	0f 85 1a 01 00 00    	jne    c000be8c <scanMADT()+0x27c>
c000bd72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd76:	8d 50 01             	lea    edx,[eax+0x1]
c000bd79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd7d:	8a 15 40 ae 02 c0    	mov    dl,BYTE PTR ds:0xc002ae40
c000bd83:	0f b6 d2             	movzx  edx,dl
c000bd86:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bd8a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bd8e:	88 82 60 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd51a0],al
c000bd94:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000bd99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bda1:	01 d0                	add    eax,edx
c000bda3:	83 c0 2c             	add    eax,0x2c
c000bda6:	8a 00                	mov    al,BYTE PTR [eax]
c000bda8:	0f b6 d0             	movzx  edx,al
c000bdab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdaf:	8d 48 01             	lea    ecx,[eax+0x1]
c000bdb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdb6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bdba:	0f b6 c0             	movzx  eax,al
c000bdbd:	c1 e0 08             	shl    eax,0x8
c000bdc0:	89 d1                	mov    ecx,edx
c000bdc2:	09 c1                	or     ecx,eax
c000bdc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdc8:	8d 50 02             	lea    edx,[eax+0x2]
c000bdcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdcf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bdd3:	0f b6 c0             	movzx  eax,al
c000bdd6:	c1 e0 10             	shl    eax,0x10
c000bdd9:	09 c1                	or     ecx,eax
c000bddb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bddf:	8d 50 03             	lea    edx,[eax+0x3]
c000bde2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bde6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bdea:	0f b6 c0             	movzx  eax,al
c000bded:	c1 e0 18             	shl    eax,0x18
c000bdf0:	09 c1                	or     ecx,eax
c000bdf2:	89 ca                	mov    edx,ecx
c000bdf4:	a0 40 ae 02 c0       	mov    al,ds:0xc002ae40
c000bdf9:	0f b6 c0             	movzx  eax,al
c000bdfc:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c000be03:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000be08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000be0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be10:	01 d0                	add    eax,edx
c000be12:	83 c0 2c             	add    eax,0x2c
c000be15:	8a 00                	mov    al,BYTE PTR [eax]
c000be17:	0f b6 d0             	movzx  edx,al
c000be1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be1e:	8d 48 01             	lea    ecx,[eax+0x1]
c000be21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be25:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000be29:	0f b6 c0             	movzx  eax,al
c000be2c:	c1 e0 08             	shl    eax,0x8
c000be2f:	89 d1                	mov    ecx,edx
c000be31:	09 c1                	or     ecx,eax
c000be33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be37:	8d 50 02             	lea    edx,[eax+0x2]
c000be3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000be42:	0f b6 c0             	movzx  eax,al
c000be45:	c1 e0 10             	shl    eax,0x10
c000be48:	09 c1                	or     ecx,eax
c000be4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be4e:	8d 50 03             	lea    edx,[eax+0x3]
c000be51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000be59:	0f b6 c0             	movzx  eax,al
c000be5c:	c1 e0 18             	shl    eax,0x18
c000be5f:	09 c1                	or     ecx,eax
c000be61:	89 ca                	mov    edx,ecx
c000be63:	a0 40 ae 02 c0       	mov    al,ds:0xc002ae40
c000be68:	0f b6 c0             	movzx  eax,al
c000be6b:	89 14 85 00 af 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5100],edx
c000be72:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000be77:	a0 40 ae 02 c0       	mov    al,ds:0xc002ae40
c000be7c:	83 c0 01             	add    eax,0x1
c000be7f:	a2 40 ae 02 c0       	mov    ds:0xc002ae40,al
c000be84:	e9 b3 01 00 00       	jmp    c000c03c <scanMADT()+0x42c>
c000be89:	8d 76 00             	lea    esi,[esi+0x0]
c000be8c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000be91:	83 f8 02             	cmp    eax,0x2
c000be94:	0f 85 ea 00 00 00    	jne    c000bf84 <scanMADT()+0x374>
c000be9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be9e:	8d 50 01             	lea    edx,[eax+0x1]
c000bea1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bea9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bead:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000beb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000beb5:	8d 50 01             	lea    edx,[eax+0x1]
c000beb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bebc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bec0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bec4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bec8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000becc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bed0:	01 d0                	add    eax,edx
c000bed2:	83 c0 2c             	add    eax,0x2c
c000bed5:	8a 00                	mov    al,BYTE PTR [eax]
c000bed7:	0f b6 d0             	movzx  edx,al
c000beda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bede:	8d 48 01             	lea    ecx,[eax+0x1]
c000bee1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bee5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bee9:	0f b6 c0             	movzx  eax,al
c000beec:	c1 e0 08             	shl    eax,0x8
c000beef:	89 d1                	mov    ecx,edx
c000bef1:	09 c1                	or     ecx,eax
c000bef3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bef7:	8d 50 02             	lea    edx,[eax+0x2]
c000befa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000befe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bf02:	0f b6 c0             	movzx  eax,al
c000bf05:	c1 e0 10             	shl    eax,0x10
c000bf08:	09 c1                	or     ecx,eax
c000bf0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf0e:	8d 50 03             	lea    edx,[eax+0x3]
c000bf11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf15:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bf19:	0f b6 c0             	movzx  eax,al
c000bf1c:	c1 e0 18             	shl    eax,0x18
c000bf1f:	09 c8                	or     eax,ecx
c000bf21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf25:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bf2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bf2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf32:	01 d0                	add    eax,edx
c000bf34:	83 c0 2c             	add    eax,0x2c
c000bf37:	8a 00                	mov    al,BYTE PTR [eax]
c000bf39:	0f b6 d0             	movzx  edx,al
c000bf3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf40:	8d 48 01             	lea    ecx,[eax+0x1]
c000bf43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf47:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bf4b:	0f b6 c0             	movzx  eax,al
c000bf4e:	c1 e0 08             	shl    eax,0x8
c000bf51:	09 d0                	or     eax,edx
c000bf53:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bf58:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bf5d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bf62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf66:	88 90 68 52 02 c0    	mov    BYTE PTR [eax-0x3ffdad98],dl
c000bf6c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bf71:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bf76:	66 89 94 00 20 ae 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd51e0],dx
c000bf7e:	e9 b9 00 00 00       	jmp    c000c03c <scanMADT()+0x42c>
c000bf83:	90                   	nop
c000bf84:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bf89:	83 f8 04             	cmp    eax,0x4
c000bf8c:	0f 85 9a 00 00 00    	jne    c000c02c <scanMADT()+0x41c>
c000bf92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf96:	8d 50 01             	lea    edx,[eax+0x1]
c000bf99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bfa1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bfa5:	0f b6 c0             	movzx  eax,al
c000bfa8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bfb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfb4:	01 d0                	add    eax,edx
c000bfb6:	83 c0 2c             	add    eax,0x2c
c000bfb9:	8a 00                	mov    al,BYTE PTR [eax]
c000bfbb:	0f b6 d0             	movzx  edx,al
c000bfbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfc2:	8d 48 01             	lea    ecx,[eax+0x1]
c000bfc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bfc9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bfcd:	0f b6 c0             	movzx  eax,al
c000bfd0:	c1 e0 08             	shl    eax,0x8
c000bfd3:	09 d0                	or     eax,edx
c000bfd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfd9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bfde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfe2:	8d 50 01             	lea    edx,[eax+0x1]
c000bfe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfe9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bfed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bff1:	0f b6 c0             	movzx  eax,al
c000bff4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bffc:	c1 e0 08             	shl    eax,0x8
c000bfff:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c003:	89 c1                	mov    ecx,eax
c000c005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c009:	c1 e0 18             	shl    eax,0x18
c000c00c:	89 c3                	mov    ebx,eax
c000c00e:	a1 8c ad 02 c0       	mov    eax,ds:0xc002ad8c
c000c013:	8d 50 01             	lea    edx,[eax+0x1]
c000c016:	89 15 8c ad 02 c0    	mov    DWORD PTR ds:0xc002ad8c,edx
c000c01c:	09 d9                	or     ecx,ebx
c000c01e:	89 ca                	mov    edx,ecx
c000c020:	89 14 85 a0 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5260],edx
c000c027:	eb 13                	jmp    c000c03c <scanMADT()+0x42c>
c000c029:	8d 76 00             	lea    esi,[esi+0x0]
c000c02c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c031:	83 f8 05             	cmp    eax,0x5
c000c034:	75 06                	jne    c000c03c <scanMADT()+0x42c>
c000c036:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c03b:	90                   	nop
c000c03c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c045:	01 d0                	add    eax,edx
c000c047:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c04b:	e9 50 fc ff ff       	jmp    c000bca0 <scanMADT()+0x90>
c000c050:	90                   	nop
c000c051:	eb 0d                	jmp    c000c060 <scanMADT()+0x450>
c000c053:	90                   	nop
c000c054:	90                   	nop
c000c055:	eb 09                	jmp    c000c060 <scanMADT()+0x450>
c000c057:	90                   	nop
c000c058:	90                   	nop
c000c059:	eb 05                	jmp    c000c060 <scanMADT()+0x450>
c000c05b:	90                   	nop
c000c05c:	90                   	nop
c000c05d:	8d 76 00             	lea    esi,[esi+0x0]
c000c060:	83 c4 38             	add    esp,0x38
c000c063:	5b                   	pop    ebx
c000c064:	c3                   	ret    
c000c065:	90                   	nop
c000c066:	66 90                	xchg   ax,ax

c000c068 <ACPI::ACPI()>:
c000c068:	83 ec 0c             	sub    esp,0xc
c000c06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06f:	83 ec 08             	sub    esp,0x8
c000c072:	68 71 2c 02 c0       	push   0xc0022c71
c000c077:	50                   	push   eax
c000c078:	e8 93 d3 ff ff       	call   c0009410 <Device::Device(char const*)>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	ba 6c 2e 02 c0       	mov    edx,0xc0022e6c
c000c085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c089:	89 10                	mov    DWORD PTR [eax],edx
c000c08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c0b2:	e8 59 fb ff ff       	call   c000bc10 <scanMADT()>
c000c0b7:	90                   	nop
c000c0b8:	83 c4 0c             	add    esp,0xc
c000c0bb:	c3                   	ret    

c000c0bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c0bc:	83 ec 2c             	sub    esp,0x2c
c000c0bf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c0c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c0cb:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c0cf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c0d4:	88 c8                	mov    al,cl
c000c0d6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c0da:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c0df:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c0e7:	90                   	nop
c000c0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0ec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c0f2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c0f6:	0f 8d b0 00 00 00    	jge    c000c1ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c0fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c100:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c104:	83 c2 2a             	add    edx,0x2a
c000c107:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c10b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c110:	0f b7 c0             	movzx  eax,ax
c000c113:	39 c2                	cmp    edx,eax
c000c115:	0f 85 85 00 00 00    	jne    c000c1a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c11b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c11f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c123:	83 c2 2a             	add    edx,0x2a
c000c126:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c12a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c12f:	0f b6 c0             	movzx  eax,al
c000c132:	39 c2                	cmp    edx,eax
c000c134:	75 6a                	jne    c000c1a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c136:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c13b:	85 c0                	test   eax,eax
c000c13d:	74 3d                	je     c000c17c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c13f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c143:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c147:	83 c2 2a             	add    edx,0x2a
c000c14a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c152:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c155:	39 c2                	cmp    edx,eax
c000c157:	74 13                	je     c000c16c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c159:	83 ec 0c             	sub    esp,0xc
c000c15c:	68 ec 2d 02 c0       	push   0xc0022dec
c000c161:	e8 78 35 00 00       	call   c000f6de <KePanic(char const*)>
c000c166:	83 c4 10             	add    esp,0x10
c000c169:	8d 76 00             	lea    esi,[esi+0x0]
c000c16c:	83 ec 0c             	sub    esp,0xc
c000c16f:	68 76 2c 02 c0       	push   0xc0022c76
c000c174:	e8 65 35 00 00       	call   c000f6de <KePanic(char const*)>
c000c179:	83 c4 10             	add    esp,0x10
c000c17c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c180:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c184:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c188:	83 c2 2a             	add    edx,0x2a
c000c18b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c18f:	8b 02                	mov    eax,DWORD PTR [edx]
c000c191:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c194:	89 01                	mov    DWORD PTR [ecx],eax
c000c196:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c199:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c19e:	66 90                	xchg   ax,ax
c000c1a0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c1a5:	e9 3e ff ff ff       	jmp    c000c0e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c1aa:	66 90                	xchg   ax,ax
c000c1ac:	90                   	nop
c000c1ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1b1:	83 c4 2c             	add    esp,0x2c
c000c1b4:	c2 04 00             	ret    0x4
c000c1b7:	90                   	nop

c000c1b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c1b8:	83 ec 1c             	sub    esp,0x1c
c000c1bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c1bf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c1c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c1cc:	88 c8                	mov    al,cl
c000c1ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c1d2:	88 d0                	mov    al,dl
c000c1d4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c1d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1dc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c1e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e6:	83 c2 2a             	add    edx,0x2a
c000c1e9:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c1ed:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c1f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1f5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c1fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ff:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c202:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c206:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c20b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c20f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c215:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c219:	83 c0 01             	add    eax,0x1
c000c21c:	88 c1                	mov    cl,al
c000c21e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c222:	83 c2 2a             	add    edx,0x2a
c000c225:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c22d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c233:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c237:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c23a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c23e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c246:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c24c:	8d 50 01             	lea    edx,[eax+0x1]
c000c24f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c253:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c263:	3d 00 02 00 00       	cmp    eax,0x200
c000c268:	75 12                	jne    c000c27c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c26a:	83 ec 0c             	sub    esp,0xc
c000c26d:	68 85 2c 02 c0       	push   0xc0022c85
c000c272:	e8 67 34 00 00       	call   c000f6de <KePanic(char const*)>
c000c277:	83 c4 10             	add    esp,0x10
c000c27a:	66 90                	xchg   ax,ax
c000c27c:	90                   	nop
c000c27d:	83 c4 1c             	add    esp,0x1c
c000c280:	c3                   	ret    
c000c281:	90                   	nop
c000c282:	66 90                	xchg   ax,ax

c000c284 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c284:	b8 00 00 00 00       	mov    eax,0x0
c000c289:	c3                   	ret    
c000c28a:	66 90                	xchg   ax,ax

c000c28c <ACPI::detectPCI()>:
c000c28c:	53                   	push   ebx
c000c28d:	83 ec 28             	sub    esp,0x28
c000c290:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c295:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c29a:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000c29f:	83 ec 08             	sub    esp,0x8
c000c2a2:	68 a2 2c 02 c0       	push   0xc0022ca2
c000c2a7:	50                   	push   eax
c000c2a8:	e8 ef f8 ff ff       	call   c000bb9c <findDataTable(unsigned char*, char*)>
c000c2ad:	83 c4 10             	add    esp,0x10
c000c2b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2b4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c2b9:	74 0d                	je     c000c2c8 <ACPI::detectPCI()+0x3c>
c000c2bb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c2c0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000c2c8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c2d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2d4:	8a 00                	mov    al,BYTE PTR [eax]
c000c2d6:	0f b6 c0             	movzx  eax,al
c000c2d9:	83 f8 01             	cmp    eax,0x1
c000c2dc:	75 0e                	jne    c000c2ec <ACPI::detectPCI()+0x60>
c000c2de:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c2e3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c2e8:	eb 2e                	jmp    c000c318 <ACPI::detectPCI()+0x8c>
c000c2ea:	66 90                	xchg   ax,ax
c000c2ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2f0:	8a 00                	mov    al,BYTE PTR [eax]
c000c2f2:	0f b6 c0             	movzx  eax,al
c000c2f5:	83 f8 02             	cmp    eax,0x2
c000c2f8:	75 1e                	jne    c000c318 <ACPI::detectPCI()+0x8c>
c000c2fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c2ff:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c304:	85 c0                	test   eax,eax
c000c306:	74 10                	je     c000c318 <ACPI::detectPCI()+0x8c>
c000c308:	83 ec 0c             	sub    esp,0xc
c000c30b:	68 1c 2e 02 c0       	push   0xc0022e1c
c000c310:	e8 c9 33 00 00       	call   c000f6de <KePanic(char const*)>
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000c31c:	83 f0 01             	xor    eax,0x1
c000c31f:	0f b6 c0             	movzx  eax,al
c000c322:	85 c0                	test   eax,eax
c000c324:	74 46                	je     c000c36c <ACPI::detectPCI()+0xe0>
c000c326:	e8 05 3e ff ff       	call   c0000130 <manualPCIProbe>
c000c32b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c32f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000c334:	75 0e                	jne    c000c344 <ACPI::detectPCI()+0xb8>
c000c336:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c33b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c340:	eb 2a                	jmp    c000c36c <ACPI::detectPCI()+0xe0>
c000c342:	66 90                	xchg   ax,ax
c000c344:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000c349:	75 21                	jne    c000c36c <ACPI::detectPCI()+0xe0>
c000c34b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c350:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c355:	85 c0                	test   eax,eax
c000c357:	74 13                	je     c000c36c <ACPI::detectPCI()+0xe0>
c000c359:	83 ec 0c             	sub    esp,0xc
c000c35c:	68 1c 2e 02 c0       	push   0xc0022e1c
c000c361:	e8 78 33 00 00       	call   c000f6de <KePanic(char const*)>
c000c366:	83 c4 10             	add    esp,0x10
c000c369:	8d 76 00             	lea    esi,[esi+0x0]
c000c36c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c371:	85 c0                	test   eax,eax
c000c373:	0f 84 87 00 00 00    	je     c000c400 <ACPI::detectPCI()+0x174>
c000c379:	83 ec 0c             	sub    esp,0xc
c000c37c:	68 a7 2c 02 c0       	push   0xc0022ca7
c000c381:	e8 c9 06 00 00       	call   c000ca4f <KeSetBootMessage(char const*)>
c000c386:	83 c4 10             	add    esp,0x10
c000c389:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000c391:	83 ec 0c             	sub    esp,0xc
c000c394:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c398:	e8 fb 2f 00 00       	call   c000f398 <malloc>
c000c39d:	83 c4 10             	add    esp,0x10
c000c3a0:	89 c3                	mov    ebx,eax
c000c3a2:	83 ec 0c             	sub    esp,0xc
c000c3a5:	53                   	push   ebx
c000c3a6:	e8 5f 05 01 00       	call   c001c90a <PCI::PCI()>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c3b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3b6:	83 ec 08             	sub    esp,0x8
c000c3b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3bd:	50                   	push   eax
c000c3be:	e8 eb ce ff ff       	call   c00092ae <Device::addChild(Device*)>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3ca:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3cc:	83 c0 08             	add    eax,0x8
c000c3cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3d1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c3d6:	85 d2                	test   edx,edx
c000c3d8:	74 0a                	je     c000c3e4 <ACPI::detectPCI()+0x158>
c000c3da:	ba 01 00 00 00       	mov    edx,0x1
c000c3df:	eb 0b                	jmp    c000c3ec <ACPI::detectPCI()+0x160>
c000c3e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c3e4:	ba 02 00 00 00       	mov    edx,0x2
c000c3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3ec:	6a 00                	push   0x0
c000c3ee:	6a 00                	push   0x0
c000c3f0:	52                   	push   edx
c000c3f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3f5:	ff d0                	call   eax
c000c3f7:	83 c4 10             	add    esp,0x10
c000c3fa:	e9 91 00 00 00       	jmp    c000c490 <ACPI::detectPCI()+0x204>
c000c3ff:	90                   	nop
c000c400:	83 ec 0c             	sub    esp,0xc
c000c403:	68 bf 2c 02 c0       	push   0xc0022cbf
c000c408:	e8 42 06 00 00       	call   c000ca4f <KeSetBootMessage(char const*)>
c000c40d:	83 c4 10             	add    esp,0x10
c000c410:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c417:	83 ec 0c             	sub    esp,0xc
c000c41a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c41e:	e8 75 2f 00 00       	call   c000f398 <malloc>
c000c423:	83 c4 10             	add    esp,0x10
c000c426:	89 c3                	mov    ebx,eax
c000c428:	83 ec 0c             	sub    esp,0xc
c000c42b:	53                   	push   ebx
c000c42c:	e8 e1 10 01 00       	call   c001d512 <IDE::IDE()>
c000c431:	83 c4 10             	add    esp,0x10
c000c434:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c438:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c43c:	83 ec 08             	sub    esp,0x8
c000c43f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c443:	50                   	push   eax
c000c444:	e8 65 ce ff ff       	call   c00092ae <Device::addChild(Device*)>
c000c449:	83 c4 10             	add    esp,0x10
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c45a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c45e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c467:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c46b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c478:	8b 00                	mov    eax,DWORD PTR [eax]
c000c47a:	83 c0 08             	add    eax,0x8
c000c47d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c47f:	6a 00                	push   0x0
c000c481:	6a 00                	push   0x0
c000c483:	6a 00                	push   0x0
c000c485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c489:	ff d0                	call   eax
c000c48b:	83 c4 10             	add    esp,0x10
c000c48e:	66 90                	xchg   ax,ax
c000c490:	90                   	nop
c000c491:	83 c4 28             	add    esp,0x28
c000c494:	5b                   	pop    ebx
c000c495:	c3                   	ret    
c000c496:	66 90                	xchg   ax,ax

c000c498 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c498:	83 ec 0c             	sub    esp,0xc
c000c49b:	83 ec 0c             	sub    esp,0xc
c000c49e:	68 d4 2c 02 c0       	push   0xc0022cd4
c000c4a3:	e8 36 32 00 00       	call   c000f6de <KePanic(char const*)>
c000c4a8:	83 c4 10             	add    esp,0x10
c000c4ab:	90                   	nop
c000c4ac:	83 c4 0c             	add    esp,0xc
c000c4af:	c3                   	ret    

c000c4b0 <ACPI::open(int, int, void*)>:
c000c4b0:	55                   	push   ebp
c000c4b1:	89 e5                	mov    ebp,esp
c000c4b3:	53                   	push   ebx
c000c4b4:	81 ec 74 01 00 00    	sub    esp,0x174
c000c4ba:	83 ec 0c             	sub    esp,0xc
c000c4bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c4c0:	e8 c7 fd ff ff       	call   c000c28c <ACPI::detectPCI()>
c000c4c5:	83 c4 10             	add    esp,0x10
c000c4c8:	83 ec 0c             	sub    esp,0xc
c000c4cb:	68 44 2e 02 c0       	push   0xc0022e44
c000c4d0:	e8 7a 05 00 00       	call   c000ca4f <KeSetBootMessage(char const*)>
c000c4d5:	83 c4 10             	add    esp,0x10
c000c4d8:	b8 4c 05 00 00       	mov    eax,0x54c
c000c4dd:	8a 00                	mov    al,BYTE PTR [eax]
c000c4df:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c4e2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c4e6:	83 f8 01             	cmp    eax,0x1
c000c4e9:	75 15                	jne    c000c500 <ACPI::open(int, int, void*)+0x50>
c000c4eb:	83 ec 0c             	sub    esp,0xc
c000c4ee:	68 e5 2c 02 c0       	push   0xc0022ce5
c000c4f3:	e8 5a 88 00 00       	call   c0014d52 <Thr::loadKernelSymbolTable(char const*)>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	eb 33                	jmp    c000c530 <ACPI::open(int, int, void*)+0x80>
c000c4fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c500:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c504:	3d bb 00 00 00       	cmp    eax,0xbb
c000c509:	75 15                	jne    c000c520 <ACPI::open(int, int, void*)+0x70>
c000c50b:	83 ec 0c             	sub    esp,0xc
c000c50e:	68 03 2d 02 c0       	push   0xc0022d03
c000c513:	e8 3a 88 00 00       	call   c0014d52 <Thr::loadKernelSymbolTable(char const*)>
c000c518:	83 c4 10             	add    esp,0x10
c000c51b:	eb 13                	jmp    c000c530 <ACPI::open(int, int, void*)+0x80>
c000c51d:	8d 76 00             	lea    esi,[esi+0x0]
c000c520:	83 ec 0c             	sub    esp,0xc
c000c523:	68 21 2d 02 c0       	push   0xc0022d21
c000c528:	e8 b1 31 00 00       	call   c000f6de <KePanic(char const*)>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c534:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c53b:	83 ec 0c             	sub    esp,0xc
c000c53e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c541:	e8 52 2e 00 00       	call   c000f398 <malloc>
c000c546:	83 c4 10             	add    esp,0x10
c000c549:	89 c3                	mov    ebx,eax
c000c54b:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000c550:	83 ec 04             	sub    esp,0x4
c000c553:	50                   	push   eax
c000c554:	68 3b 2d 02 c0       	push   0xc0022d3b
c000c559:	53                   	push   ebx
c000c55a:	e8 cd bb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c55f:	83 c4 10             	add    esp,0x10
c000c562:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c565:	83 ec 08             	sub    esp,0x8
c000c568:	6a 01                	push   0x1
c000c56a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c56d:	e8 d8 bb ff ff       	call   c000814a <File::open(FileOpenMode)>
c000c572:	83 c4 10             	add    esp,0x10
c000c575:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c578:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c57c:	75 12                	jne    c000c590 <ACPI::open(int, int, void*)+0xe0>
c000c57e:	83 ec 0c             	sub    esp,0xc
c000c581:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c584:	e8 1f bc ff ff       	call   c00081a8 <File::close()>
c000c589:	83 c4 10             	add    esp,0x10
c000c58c:	eb 06                	jmp    c000c594 <ACPI::open(int, int, void*)+0xe4>
c000c58e:	66 90                	xchg   ax,ax
c000c590:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c594:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c598:	74 16                	je     c000c5b0 <ACPI::open(int, int, void*)+0x100>
c000c59a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c59d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c59f:	83 c0 08             	add    eax,0x8
c000c5a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5a4:	83 ec 0c             	sub    esp,0xc
c000c5a7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c5aa:	ff d0                	call   eax
c000c5ac:	83 c4 10             	add    esp,0x10
c000c5af:	90                   	nop
c000c5b0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c5b3:	83 f0 01             	xor    eax,0x1
c000c5b6:	0f b6 c0             	movzx  eax,al
c000c5b9:	85 c0                	test   eax,eax
c000c5bb:	74 27                	je     c000c5e4 <ACPI::open(int, int, void*)+0x134>
c000c5bd:	83 ec 0c             	sub    esp,0xc
c000c5c0:	68 59 2d 02 c0       	push   0xc0022d59
c000c5c5:	e8 85 04 00 00       	call   c000ca4f <KeSetBootMessage(char const*)>
c000c5ca:	83 c4 10             	add    esp,0x10
c000c5cd:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c5d4:	83 ec 0c             	sub    esp,0xc
c000c5d7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c5da:	e8 e3 66 00 00       	call   c0012cc2 <Virt::setupPageSwapping(int)>
c000c5df:	83 c4 10             	add    esp,0x10
c000c5e2:	66 90                	xchg   ax,ax
c000c5e4:	83 ec 0c             	sub    esp,0xc
c000c5e7:	68 74 2d 02 c0       	push   0xc0022d74
c000c5ec:	e8 5e 04 00 00       	call   c000ca4f <KeSetBootMessage(char const*)>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c5f7:	83 ec 08             	sub    esp,0x8
c000c5fa:	6a 13                	push   0x13
c000c5fc:	50                   	push   eax
c000c5fd:	e8 da cf ff ff       	call   c00095dc <getDevicesOfType(DeviceType)>
c000c602:	83 c4 0c             	add    esp,0xc
c000c605:	8d 76 00             	lea    esi,[esi+0x0]
c000c608:	83 ec 0c             	sub    esp,0xc
c000c60b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c60e:	50                   	push   eax
c000c60f:	e8 08 4c 01 00       	call   c002121c <LinkedList<Device>::isEmpty()>
c000c614:	83 c4 10             	add    esp,0x10
c000c617:	83 f0 01             	xor    eax,0x1
c000c61a:	0f b6 c0             	movzx  eax,al
c000c61d:	85 c0                	test   eax,eax
c000c61f:	0f 84 1f 01 00 00    	je     c000c744 <ACPI::open(int, int, void*)+0x294>
c000c625:	83 ec 0c             	sub    esp,0xc
c000c628:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c62b:	50                   	push   eax
c000c62c:	e8 07 4c 01 00       	call   c0021238 <LinkedList<Device>::getFirstElement()>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c637:	83 ec 0c             	sub    esp,0xc
c000c63a:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c63d:	50                   	push   eax
c000c63e:	e8 fd 4b 01 00       	call   c0021240 <LinkedList<Device>::removeFirst()>
c000c643:	83 c4 10             	add    esp,0x10
c000c646:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c649:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c64c:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c64f:	b8 24 00 00 00       	mov    eax,0x24
c000c654:	83 e0 fc             	and    eax,0xfffffffc
c000c657:	89 c3                	mov    ebx,eax
c000c659:	b8 00 00 00 00       	mov    eax,0x0
c000c65e:	66 90                	xchg   ax,ax
c000c660:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c667:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c66e:	83 c0 04             	add    eax,0x4
c000c671:	39 d8                	cmp    eax,ebx
c000c673:	72 eb                	jb     c000c660 <ACPI::open(int, int, void*)+0x1b0>
c000c675:	83 ec 08             	sub    esp,0x8
c000c678:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c67e:	50                   	push   eax
c000c67f:	83 ec 24             	sub    esp,0x24
c000c682:	89 e1                	mov    ecx,esp
c000c684:	b8 24 00 00 00       	mov    eax,0x24
c000c689:	83 e0 fc             	and    eax,0xfffffffc
c000c68c:	89 c3                	mov    ebx,eax
c000c68e:	b8 00 00 00 00       	mov    eax,0x0
c000c693:	90                   	nop
c000c694:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c69b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c69e:	83 c0 04             	add    eax,0x4
c000c6a1:	39 d8                	cmp    eax,ebx
c000c6a3:	72 ef                	jb     c000c694 <ACPI::open(int, int, void*)+0x1e4>
c000c6a5:	e8 48 07 01 00       	call   c001cdf2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c6aa:	83 c4 30             	add    esp,0x30
c000c6ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c6b0:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c6b4:	0f 84 4e ff ff ff    	je     c000c608 <ACPI::open(int, int, void*)+0x158>
c000c6ba:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c6c1:	83 ec 0c             	sub    esp,0xc
c000c6c4:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c6c7:	e8 cc 2c 00 00       	call   c000f398 <malloc>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	89 c3                	mov    ebx,eax
c000c6d1:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000c6d6:	83 ec 04             	sub    esp,0x4
c000c6d9:	50                   	push   eax
c000c6da:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c6dd:	53                   	push   ebx
c000c6de:	e8 49 ba ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c6e3:	83 c4 10             	add    esp,0x10
c000c6e6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c6e9:	83 ec 0c             	sub    esp,0xc
c000c6ec:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c6ef:	e8 1a bd ff ff       	call   c000840e <File::exists()>
c000c6f4:	83 c4 10             	add    esp,0x10
c000c6f7:	0f b6 c0             	movzx  eax,al
c000c6fa:	85 c0                	test   eax,eax
c000c6fc:	74 22                	je     c000c720 <ACPI::open(int, int, void*)+0x270>
c000c6fe:	83 ec 08             	sub    esp,0x8
c000c701:	6a 01                	push   0x1
c000c703:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c706:	e8 c9 90 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c000c70b:	83 c4 10             	add    esp,0x10
c000c70e:	83 ec 08             	sub    esp,0x8
c000c711:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c714:	50                   	push   eax
c000c715:	e8 1b 93 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	8d 76 00             	lea    esi,[esi+0x0]
c000c720:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c724:	0f 84 de fe ff ff    	je     c000c608 <ACPI::open(int, int, void*)+0x158>
c000c72a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c72d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c72f:	83 c0 08             	add    eax,0x8
c000c732:	8b 00                	mov    eax,DWORD PTR [eax]
c000c734:	83 ec 0c             	sub    esp,0xc
c000c737:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c73a:	ff d0                	call   eax
c000c73c:	83 c4 10             	add    esp,0x10
c000c73f:	e9 c4 fe ff ff       	jmp    c000c608 <ACPI::open(int, int, void*)+0x158>
c000c744:	83 ec 0c             	sub    esp,0xc
c000c747:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c74a:	50                   	push   eax
c000c74b:	e8 c8 4a 01 00       	call   c0021218 <LinkedList<Device>::~LinkedList()>
c000c750:	83 c4 10             	add    esp,0x10
c000c753:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c000c759:	83 ec 08             	sub    esp,0x8
c000c75c:	6a 01                	push   0x1
c000c75e:	68 8e 2d 02 c0       	push   0xc0022d8e
c000c763:	e8 6c 90 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c000c768:	83 c4 10             	add    esp,0x10
c000c76b:	83 ec 08             	sub    esp,0x8
c000c76e:	53                   	push   ebx
c000c76f:	50                   	push   eax
c000c770:	e8 c0 92 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c000c775:	83 c4 10             	add    esp,0x10
c000c778:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000c77d:	85 c0                	test   eax,eax
c000c77f:	0f 84 ef 00 00 00    	je     c000c874 <ACPI::open(int, int, void*)+0x3c4>
c000c785:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c000c78a:	85 c0                	test   eax,eax
c000c78c:	0f 84 e2 00 00 00    	je     c000c874 <ACPI::open(int, int, void*)+0x3c4>
c000c792:	83 ec 0c             	sub    esp,0xc
c000c795:	68 ab 2d 02 c0       	push   0xc0022dab
c000c79a:	e8 b0 02 00 00       	call   c000ca4f <KeSetBootMessage(char const*)>
c000c79f:	83 c4 10             	add    esp,0x10
c000c7a2:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c7a9:	83 ec 0c             	sub    esp,0xc
c000c7ac:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c7af:	e8 e4 2b 00 00       	call   c000f398 <malloc>
c000c7b4:	83 c4 10             	add    esp,0x10
c000c7b7:	89 c3                	mov    ebx,eax
c000c7b9:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000c7be:	83 ec 04             	sub    esp,0x4
c000c7c1:	50                   	push   eax
c000c7c2:	68 c8 2d 02 c0       	push   0xc0022dc8
c000c7c7:	53                   	push   ebx
c000c7c8:	e8 5f b9 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000c7cd:	83 c4 10             	add    esp,0x10
c000c7d0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c7d3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c7d7:	74 1b                	je     c000c7f4 <ACPI::open(int, int, void*)+0x344>
c000c7d9:	83 ec 0c             	sub    esp,0xc
c000c7dc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c7df:	e8 2a bc ff ff       	call   c000840e <File::exists()>
c000c7e4:	83 c4 10             	add    esp,0x10
c000c7e7:	0f b6 c0             	movzx  eax,al
c000c7ea:	85 c0                	test   eax,eax
c000c7ec:	74 06                	je     c000c7f4 <ACPI::open(int, int, void*)+0x344>
c000c7ee:	b0 01                	mov    al,0x1
c000c7f0:	eb 06                	jmp    c000c7f8 <ACPI::open(int, int, void*)+0x348>
c000c7f2:	66 90                	xchg   ax,ax
c000c7f4:	b0 00                	mov    al,0x0
c000c7f6:	66 90                	xchg   ax,ax
c000c7f8:	0f b6 c0             	movzx  eax,al
c000c7fb:	85 c0                	test   eax,eax
c000c7fd:	74 21                	je     c000c820 <ACPI::open(int, int, void*)+0x370>
c000c7ff:	83 ec 08             	sub    esp,0x8
c000c802:	6a 01                	push   0x1
c000c804:	68 c8 2d 02 c0       	push   0xc0022dc8
c000c809:	e8 c6 8f 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c000c80e:	83 c4 10             	add    esp,0x10
c000c811:	83 ec 08             	sub    esp,0x8
c000c814:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c817:	50                   	push   eax
c000c818:	e8 18 92 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c000c81d:	83 c4 10             	add    esp,0x10
c000c820:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c824:	74 1e                	je     c000c844 <ACPI::open(int, int, void*)+0x394>
c000c826:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c82a:	74 18                	je     c000c844 <ACPI::open(int, int, void*)+0x394>
c000c82c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c82f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c831:	83 c0 08             	add    eax,0x8
c000c834:	8b 00                	mov    eax,DWORD PTR [eax]
c000c836:	83 ec 0c             	sub    esp,0xc
c000c839:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c83c:	ff d0                	call   eax
c000c83e:	83 c4 10             	add    esp,0x10
c000c841:	8d 76 00             	lea    esi,[esi+0x0]
c000c844:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000c849:	83 ec 08             	sub    esp,0x8
c000c84c:	68 e5 2d 02 c0       	push   0xc0022de5
c000c851:	50                   	push   eax
c000c852:	e8 45 f3 ff ff       	call   c000bb9c <findDataTable(unsigned char*, char*)>
c000c857:	83 c4 10             	add    esp,0x10
c000c85a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c85d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c861:	74 11                	je     c000c874 <ACPI::open(int, int, void*)+0x3c4>
c000c863:	83 ec 08             	sub    esp,0x8
c000c866:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c869:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c86c:	e8 27 fc ff ff       	call   c000c498 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c871:	83 c4 10             	add    esp,0x10
c000c874:	b8 00 00 00 00       	mov    eax,0x0
c000c879:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c87c:	c9                   	leave  
c000c87d:	c3                   	ret    
c000c87e:	66 90                	xchg   ax,ax

c000c880 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000c880:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000c886:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000c88d:	89 c2                	mov    edx,eax
c000c88f:	c1 fa 1f             	sar    edx,0x1f
c000c892:	83 ec 04             	sub    esp,0x4
c000c895:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000c899:	51                   	push   ecx
c000c89a:	52                   	push   edx
c000c89b:	50                   	push   eax
c000c89c:	e8 ef 28 00 00       	call   c000f190 <KeItoa(long long, char*)>
c000c8a1:	83 c4 10             	add    esp,0x10
c000c8a4:	83 ec 08             	sub    esp,0x8
c000c8a7:	68 90 2e 02 c0       	push   0xc0022e90
c000c8ac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c8b0:	50                   	push   eax
c000c8b1:	e8 9a 3d ff ff       	call   c0000650 <strcpy>
c000c8b6:	83 c4 10             	add    esp,0x10
c000c8b9:	83 ec 08             	sub    esp,0x8
c000c8bc:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000c8c3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c8c7:	50                   	push   eax
c000c8c8:	e8 a3 3f ff ff       	call   c0000870 <strcat>
c000c8cd:	83 c4 10             	add    esp,0x10
c000c8d0:	83 ec 08             	sub    esp,0x8
c000c8d3:	68 9e 2e 02 c0       	push   0xc0022e9e
c000c8d8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c8dc:	50                   	push   eax
c000c8dd:	e8 8e 3f ff ff       	call   c0000870 <strcat>
c000c8e2:	83 c4 10             	add    esp,0x10
c000c8e5:	83 ec 08             	sub    esp,0x8
c000c8e8:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000c8ef:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c8f3:	50                   	push   eax
c000c8f4:	e8 77 3f ff ff       	call   c0000870 <strcat>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	83 ec 08             	sub    esp,0x8
c000c8ff:	68 a1 2e 02 c0       	push   0xc0022ea1
c000c904:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c908:	50                   	push   eax
c000c909:	e8 62 3f ff ff       	call   c0000870 <strcat>
c000c90e:	83 c4 10             	add    esp,0x10
c000c911:	83 ec 08             	sub    esp,0x8
c000c914:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000c91b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c91f:	50                   	push   eax
c000c920:	e8 4b 3f ff ff       	call   c0000870 <strcat>
c000c925:	83 c4 10             	add    esp,0x10
c000c928:	83 ec 08             	sub    esp,0x8
c000c92b:	68 a1 2e 02 c0       	push   0xc0022ea1
c000c930:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c934:	50                   	push   eax
c000c935:	e8 36 3f ff ff       	call   c0000870 <strcat>
c000c93a:	83 c4 10             	add    esp,0x10
c000c93d:	83 ec 08             	sub    esp,0x8
c000c940:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c944:	50                   	push   eax
c000c945:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c949:	50                   	push   eax
c000c94a:	e8 21 3f ff ff       	call   c0000870 <strcat>
c000c94f:	83 c4 10             	add    esp,0x10
c000c952:	83 ec 0c             	sub    esp,0xc
c000c955:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c959:	50                   	push   eax
c000c95a:	e8 7f 2d 00 00       	call   c000f6de <KePanic(char const*)>
c000c95f:	83 c4 10             	add    esp,0x10
c000c962:	90                   	nop
c000c963:	81 c4 2c 02 00 00    	add    esp,0x22c
c000c969:	c3                   	ret    

c000c96a <KeInitialiseAtexit()>:
c000c96a:	83 ec 10             	sub    esp,0x10
c000c96d:	6a 60                	push   0x60
c000c96f:	6a 00                	push   0x0
c000c971:	68 60 b0 02 c0       	push   0xc002b060
c000c976:	c7 05 e0 af 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002afe0,0x0
c000c980:	e8 6b 3b ff ff       	call   c00004f0 <memset>
c000c985:	83 c4 1c             	add    esp,0x1c
c000c988:	c3                   	ret    

c000c989 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c989:	a1 e0 af 02 c0       	mov    eax,ds:0xc002afe0
c000c98e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c992:	89 14 85 60 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4fa0],edx
c000c999:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c99d:	89 14 85 00 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5000],edx
c000c9a4:	40                   	inc    eax
c000c9a5:	a3 e0 af 02 c0       	mov    ds:0xc002afe0,eax
c000c9aa:	83 f8 17             	cmp    eax,0x17
c000c9ad:	7e 0d                	jle    c000c9bc <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c9af:	c7 44 24 04 a3 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022ea3
c000c9b7:	e9 22 2d 00 00       	jmp    c000f6de <KePanic(char const*)>
c000c9bc:	c3                   	ret    

c000c9bd <KeExecuteAtexit()>:
c000c9bd:	53                   	push   ebx
c000c9be:	31 db                	xor    ebx,ebx
c000c9c0:	83 ec 08             	sub    esp,0x8
c000c9c3:	39 1d e0 af 02 c0    	cmp    DWORD PTR ds:0xc002afe0,ebx
c000c9c9:	7e 50                	jle    c000ca1b <KeExecuteAtexit()+0x5e>
c000c9cb:	8b 04 9d 60 b0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4fa0]
c000c9d2:	85 c0                	test   eax,eax
c000c9d4:	74 42                	je     c000ca18 <KeExecuteAtexit()+0x5b>
c000c9d6:	51                   	push   ecx
c000c9d7:	50                   	push   eax
c000c9d8:	53                   	push   ebx
c000c9d9:	68 bc 2e 02 c0       	push   0xc0022ebc
c000c9de:	e8 6b a5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c9e3:	58                   	pop    eax
c000c9e4:	ff 34 9d 00 b0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5000]
c000c9eb:	ff 14 9d 60 b0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd4fa0]
c000c9f2:	c7 04 24 de 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ede
c000c9f9:	e8 50 a5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c9fe:	c7 04 24 6f 32 02 c0 	mov    DWORD PTR [esp],0xc002326f
c000ca05:	c7 04 9d 60 b0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd4fa0],0x0
c000ca10:	e8 39 a5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ca15:	83 c4 10             	add    esp,0x10
c000ca18:	43                   	inc    ebx
c000ca19:	eb a8                	jmp    c000c9c3 <KeExecuteAtexit()+0x6>
c000ca1b:	83 c4 08             	add    esp,0x8
c000ca1e:	5b                   	pop    ebx
c000ca1f:	c3                   	ret    

c000ca20 <KeDisplaySplashScreen()>:
c000ca20:	53                   	push   ebx
c000ca21:	bb 01 00 00 00       	mov    ebx,0x1
c000ca26:	83 ec 08             	sub    esp,0x8
c000ca29:	43                   	inc    ebx
c000ca2a:	0f be 83 e1 2e 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdd11f]
c000ca31:	85 c0                	test   eax,eax
c000ca33:	74 15                	je     c000ca4a <KeDisplaySplashScreen()+0x2a>
c000ca35:	83 ec 0c             	sub    esp,0xc
c000ca38:	6a 01                	push   0x1
c000ca3a:	53                   	push   ebx
c000ca3b:	6a 00                	push   0x0
c000ca3d:	6a 0f                	push   0xf
c000ca3f:	50                   	push   eax
c000ca40:	e8 77 da 00 00       	call   c001a4bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000ca45:	83 c4 20             	add    esp,0x20
c000ca48:	eb df                	jmp    c000ca29 <KeDisplaySplashScreen()+0x9>
c000ca4a:	83 c4 08             	add    esp,0x8
c000ca4d:	5b                   	pop    ebx
c000ca4e:	c3                   	ret    

c000ca4f <KeSetBootMessage(char const*)>:
c000ca4f:	57                   	push   edi
c000ca50:	56                   	push   esi
c000ca51:	53                   	push   ebx
c000ca52:	81 ec a4 00 00 00    	sub    esp,0xa4
c000ca58:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000ca5f:	68 9e 00 00 00       	push   0x9e
c000ca64:	6a 00                	push   0x0
c000ca66:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000ca6a:	56                   	push   esi
c000ca6b:	e8 80 3a ff ff       	call   c00004f0 <memset>
c000ca70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ca73:	e8 08 3b ff ff       	call   c0000580 <strlen>
c000ca78:	ba 50 00 00 00       	mov    edx,0x50
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	31 c9                	xor    ecx,ecx
c000ca82:	29 c2                	sub    edx,eax
c000ca84:	83 e2 fe             	and    edx,0xfffffffe
c000ca87:	01 f2                	add    edx,esi
c000ca89:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000ca8e:	84 c0                	test   al,al
c000ca90:	74 0a                	je     c000ca9c <KeSetBootMessage(char const*)+0x4d>
c000ca92:	80 cc 07             	or     ah,0x7
c000ca95:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000ca99:	41                   	inc    ecx
c000ca9a:	eb ed                	jmp    c000ca89 <KeSetBootMessage(char const*)+0x3a>
c000ca9c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000caa1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000caa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000caa8:	50                   	push   eax
c000caa9:	50                   	push   eax
c000caaa:	53                   	push   ebx
c000caab:	68 f6 2e 02 c0       	push   0xc0022ef6
c000cab0:	e8 99 a4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000cab5:	81 c4 b0 00 00 00    	add    esp,0xb0
c000cabb:	5b                   	pop    ebx
c000cabc:	5e                   	pop    esi
c000cabd:	5f                   	pop    edi
c000cabe:	c3                   	ret    

c000cabf <__cxa_atexit>:
c000cabf:	31 c0                	xor    eax,eax
c000cac1:	c3                   	ret    

c000cac2 <__cxa_finalize>:
c000cac2:	c3                   	ret    

c000cac3 <__stack_chk_fail>:
c000cac3:	55                   	push   ebp
c000cac4:	89 e5                	mov    ebp,esp
c000cac6:	83 ec 10             	sub    esp,0x10
c000cac9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cacc:	68 04 2f 02 c0       	push   0xc0022f04
c000cad1:	e8 78 a4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000cad6:	58                   	pop    eax
c000cad7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cada:	5a                   	pop    edx
c000cadb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cade:	68 04 2f 02 c0       	push   0xc0022f04
c000cae3:	e8 66 a4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000cae8:	c7 04 24 0c 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f0c
c000caef:	e8 ea 2b 00 00       	call   c000f6de <KePanic(char const*)>
c000caf4:	83 c4 10             	add    esp,0x10
c000caf7:	c9                   	leave  
c000caf8:	c3                   	ret    

c000caf9 <__cxa_pure_virtual>:
c000caf9:	83 ec 18             	sub    esp,0x18
c000cafc:	68 24 2f 02 c0       	push   0xc0022f24
c000cb01:	e8 d8 2b 00 00       	call   c000f6de <KePanic(char const*)>
c000cb06:	83 c4 1c             	add    esp,0x1c
c000cb09:	c3                   	ret    

c000cb0a <operator new[](unsigned long)>:
c000cb0a:	e9 89 28 00 00       	jmp    c000f398 <malloc>

c000cb0f <operator delete(void*, unsigned long)>:
c000cb0f:	e9 a4 28 00 00       	jmp    c000f3b8 <rfree>

c000cb14 <operator delete[](void*)>:
c000cb14:	e9 9f 28 00 00       	jmp    c000f3b8 <rfree>

c000cb19 <operator delete[](void*, unsigned long)>:
c000cb19:	e9 9a 28 00 00       	jmp    c000f3b8 <rfree>
c000cb1e:	66 90                	xchg   ax,ax

c000cb20 <CUnlockScheduler>:
c000cb20:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000cb28:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000cb2d:	85 c0                	test   eax,eax
c000cb2f:	75 03                	jne    c000cb34 <CUnlockScheduler+0x14>
c000cb31:	fb                   	sti    
c000cb32:	66 90                	xchg   ax,ax
c000cb34:	90                   	nop
c000cb35:	c3                   	ret    
c000cb36:	66 90                	xchg   ax,ax

c000cb38 <CLockScheduler>:
c000cb38:	fa                   	cli    
c000cb39:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000cb3e:	83 c0 01             	add    eax,0x1
c000cb41:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000cb46:	90                   	nop
c000cb47:	c3                   	ret    

c000cb48 <CPrintf>:
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	83 ec 08             	sub    esp,0x8
c000cb4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb52:	68 37 2f 02 c0       	push   0xc0022f37
c000cb57:	e8 f2 a3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000cb5c:	83 c4 10             	add    esp,0x10
c000cb5f:	90                   	nop
c000cb60:	83 c4 0c             	add    esp,0xc
c000cb63:	c3                   	ret    

c000cb64 <CmOpen(char const*)>:
c000cb64:	57                   	push   edi
c000cb65:	56                   	push   esi
c000cb66:	53                   	push   ebx
c000cb67:	83 ec 1c             	sub    esp,0x1c
c000cb6a:	6a 30                	push   0x30
c000cb6c:	e8 27 28 00 00       	call   c000f398 <malloc>
c000cb71:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000cb78:	89 c3                	mov    ebx,eax
c000cb7a:	e8 19 28 00 00       	call   c000f398 <malloc>
c000cb7f:	83 c4 0c             	add    esp,0xc
c000cb82:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c000cb88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000cb8c:	89 c6                	mov    esi,eax
c000cb8e:	50                   	push   eax
c000cb8f:	e8 98 b5 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000cb94:	83 c4 0c             	add    esp,0xc
c000cb97:	89 33                	mov    DWORD PTR [ebx],esi
c000cb99:	8d 44 24 07          	lea    eax,[esp+0x7]
c000cb9d:	50                   	push   eax
c000cb9e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000cba2:	50                   	push   eax
c000cba3:	56                   	push   esi
c000cba4:	e8 a3 b8 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000cba9:	5a                   	pop    edx
c000cbaa:	59                   	pop    ecx
c000cbab:	6a 01                	push   0x1
c000cbad:	ff 33                	push   DWORD PTR [ebx]
c000cbaf:	e8 96 b5 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000cbb4:	5e                   	pop    esi
c000cbb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbb9:	e8 da 27 00 00       	call   c000f398 <malloc>
c000cbbe:	5a                   	pop    edx
c000cbbf:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cbc3:	89 c7                	mov    edi,eax
c000cbc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cbc7:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbc9:	56                   	push   esi
c000cbca:	57                   	push   edi
c000cbcb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cbcf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cbd3:	50                   	push   eax
c000cbd4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cbd7:	83 c4 14             	add    esp,0x14
c000cbda:	ff 33                	push   DWORD PTR [ebx]
c000cbdc:	e8 c7 b5 ff ff       	call   c00081a8 <File::close()>
c000cbe1:	59                   	pop    ecx
c000cbe2:	58                   	pop    eax
c000cbe3:	6a 13                	push   0x13
c000cbe5:	ff 33                	push   DWORD PTR [ebx]
c000cbe7:	e8 5e b5 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000cbec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cbee:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbf0:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbf3:	57                   	push   edi
c000cbf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cbf8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cbfc:	50                   	push   eax
c000cbfd:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cc00:	83 c4 14             	add    esp,0x14
c000cc03:	57                   	push   edi
c000cc04:	e8 9f 27 00 00       	call   c000f3a8 <free>
c000cc09:	83 c4 10             	add    esp,0x10
c000cc0c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc0f:	75 10                	jne    c000cc21 <CmOpen(char const*)+0xbd>
c000cc11:	83 ec 0c             	sub    esp,0xc
c000cc14:	68 3a 2f 02 c0       	push   0xc0022f3a
c000cc19:	e8 c0 2a 00 00       	call   c000f6de <KePanic(char const*)>
c000cc1e:	83 c4 10             	add    esp,0x10
c000cc21:	50                   	push   eax
c000cc22:	6a 00                	push   0x0
c000cc24:	6a 00                	push   0x0
c000cc26:	ff 33                	push   DWORD PTR [ebx]
c000cc28:	8d 7b 05             	lea    edi,[ebx+0x5]
c000cc2b:	e8 d8 b5 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cc30:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cc32:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc34:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc37:	57                   	push   edi
c000cc38:	6a 00                	push   0x0
c000cc3a:	6a 2b                	push   0x2b
c000cc3c:	50                   	push   eax
c000cc3d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc40:	83 c4 1c             	add    esp,0x1c
c000cc43:	6a 00                	push   0x0
c000cc45:	6a 00                	push   0x0
c000cc47:	ff 33                	push   DWORD PTR [ebx]
c000cc49:	e8 ba b5 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cc4e:	83 c4 0c             	add    esp,0xc
c000cc51:	6a 08                	push   0x8
c000cc53:	68 4b 2f 02 c0       	push   0xc0022f4b
c000cc58:	57                   	push   edi
c000cc59:	e8 22 37 ff ff       	call   c0000380 <memcmp>
c000cc5e:	83 c4 10             	add    esp,0x10
c000cc61:	85 c0                	test   eax,eax
c000cc63:	74 10                	je     c000cc75 <CmOpen(char const*)+0x111>
c000cc65:	83 ec 0c             	sub    esp,0xc
c000cc68:	68 54 2f 02 c0       	push   0xc0022f54
c000cc6d:	e8 6c 2a 00 00       	call   c000f6de <KePanic(char const*)>
c000cc72:	83 c4 10             	add    esp,0x10
c000cc75:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000cc79:	83 c4 10             	add    esp,0x10
c000cc7c:	89 d8                	mov    eax,ebx
c000cc7e:	5b                   	pop    ebx
c000cc7f:	5e                   	pop    esi
c000cc80:	5f                   	pop    edi
c000cc81:	c3                   	ret    

c000cc82 <CmClose(Reghive_Tag*)>:
c000cc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc86:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000cc8a:	74 0b                	je     c000cc97 <CmClose(Reghive_Tag*)+0x15>
c000cc8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc92:	e9 11 b5 ff ff       	jmp    c00081a8 <File::close()>
c000cc97:	c3                   	ret    

c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000cc98:	53                   	push   ebx
c000cc99:	83 ec 18             	sub    esp,0x18
c000cc9c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cca0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cca4:	74 29                	je     c000cccf <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000cca6:	50                   	push   eax
c000cca7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000ccac:	99                   	cdq    
c000ccad:	52                   	push   edx
c000ccae:	50                   	push   eax
c000ccaf:	ff 33                	push   DWORD PTR [ebx]
c000ccb1:	e8 52 b5 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ccb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ccb8:	5a                   	pop    edx
c000ccb9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ccbd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccbf:	51                   	push   ecx
c000ccc0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ccc4:	6a 00                	push   0x0
c000ccc6:	6a 2b                	push   0x2b
c000ccc8:	50                   	push   eax
c000ccc9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cccc:	83 c4 20             	add    esp,0x20
c000cccf:	83 c4 18             	add    esp,0x18
c000ccd2:	5b                   	pop    ebx
c000ccd3:	c3                   	ret    

c000ccd4 <CmGetString(Reghive_Tag*, int, char*)>:
c000ccd4:	55                   	push   ebp
c000ccd5:	57                   	push   edi
c000ccd6:	56                   	push   esi
c000ccd7:	53                   	push   ebx
c000ccd8:	31 db                	xor    ebx,ebx
c000ccda:	83 ec 70             	sub    esp,0x70
c000ccdd:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000cce1:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000cce8:	50                   	push   eax
c000cce9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000ccf0:	55                   	push   ebp
c000ccf1:	e8 a2 ff ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000ccfe:	c1 e0 08             	shl    eax,0x8
c000cd01:	89 c2                	mov    edx,eax
c000cd03:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000cd08:	09 d0                	or     eax,edx
c000cd0a:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000cd0f:	c1 e0 08             	shl    eax,0x8
c000cd12:	09 d0                	or     eax,edx
c000cd14:	74 25                	je     c000cd3b <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000cd16:	52                   	push   edx
c000cd17:	8d 54 24 39          	lea    edx,[esp+0x39]
c000cd1b:	52                   	push   edx
c000cd1c:	6b fb 0d             	imul   edi,ebx,0xd
c000cd1f:	50                   	push   eax
c000cd20:	55                   	push   ebp
c000cd21:	e8 72 ff ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd26:	8d 74 24 49          	lea    esi,[esp+0x49]
c000cd2a:	b9 27 00 00 00       	mov    ecx,0x27
c000cd2f:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000cd36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cd38:	83 c4 10             	add    esp,0x10
c000cd3b:	83 c3 03             	add    ebx,0x3
c000cd3e:	83 fb 15             	cmp    ebx,0x15
c000cd41:	75 b6                	jne    c000ccf9 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000cd43:	83 c4 6c             	add    esp,0x6c
c000cd46:	5b                   	pop    ebx
c000cd47:	5e                   	pop    esi
c000cd48:	5f                   	pop    edi
c000cd49:	5d                   	pop    ebp
c000cd4a:	c3                   	ret    

c000cd4b <CmEnterDirectory(Reghive_Tag*, int)>:
c000cd4b:	83 ec 40             	sub    esp,0x40
c000cd4e:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cd52:	50                   	push   eax
c000cd53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd5b:	e8 38 ff ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd60:	83 c4 10             	add    esp,0x10
c000cd63:	83 c8 ff             	or     eax,0xffffffff
c000cd66:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000cd6b:	75 19                	jne    c000cd86 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000cd6d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cd72:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000cd77:	c1 e0 08             	shl    eax,0x8
c000cd7a:	09 c2                	or     edx,eax
c000cd7c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000cd81:	c1 e0 10             	shl    eax,0x10
c000cd84:	09 d0                	or     eax,edx
c000cd86:	83 c4 3c             	add    esp,0x3c
c000cd89:	c3                   	ret    

c000cd8a <CmGetNext(Reghive_Tag*, int)>:
c000cd8a:	83 ec 40             	sub    esp,0x40
c000cd8d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cd91:	50                   	push   eax
c000cd92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd9a:	e8 f9 fe ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd9f:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000cda4:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000cda9:	c1 e0 08             	shl    eax,0x8
c000cdac:	09 c2                	or     edx,eax
c000cdae:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000cdb3:	83 c4 4c             	add    esp,0x4c
c000cdb6:	c1 e0 10             	shl    eax,0x10
c000cdb9:	09 d0                	or     eax,edx
c000cdbb:	c3                   	ret    

c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000cdbc:	53                   	push   ebx
c000cdbd:	83 ec 18             	sub    esp,0x18
c000cdc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cdc4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cdc8:	74 29                	je     c000cdf3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000cdca:	50                   	push   eax
c000cdcb:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000cdd0:	99                   	cdq    
c000cdd1:	52                   	push   edx
c000cdd2:	50                   	push   eax
c000cdd3:	ff 33                	push   DWORD PTR [ebx]
c000cdd5:	e8 2e b4 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cdda:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cddc:	5a                   	pop    edx
c000cddd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cde1:	8b 10                	mov    edx,DWORD PTR [eax]
c000cde3:	51                   	push   ecx
c000cde4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000cde8:	6a 00                	push   0x0
c000cdea:	6a 2b                	push   0x2b
c000cdec:	50                   	push   eax
c000cded:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cdf0:	83 c4 20             	add    esp,0x20
c000cdf3:	83 c4 18             	add    esp,0x18
c000cdf6:	5b                   	pop    ebx
c000cdf7:	c3                   	ret    

c000cdf8 <CmFreeExtent(Reghive_Tag*, int)>:
c000cdf8:	53                   	push   ebx
c000cdf9:	83 ec 3c             	sub    esp,0x3c
c000cdfc:	6a 2b                	push   0x2b
c000cdfe:	6a 00                	push   0x0
c000ce00:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ce04:	53                   	push   ebx
c000ce05:	e8 e6 36 ff ff       	call   c00004f0 <memset>
c000ce0a:	83 c4 0c             	add    esp,0xc
c000ce0d:	53                   	push   ebx
c000ce0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce16:	e8 a1 ff ff ff       	call   c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce1b:	83 c4 48             	add    esp,0x48
c000ce1e:	5b                   	pop    ebx
c000ce1f:	c3                   	ret    

c000ce20 <CmUpdateHeader(Reghive_Tag*)>:
c000ce20:	83 ec 0c             	sub    esp,0xc
c000ce23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce27:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ce2b:	74 10                	je     c000ce3d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000ce2d:	52                   	push   edx
c000ce2e:	8d 50 05             	lea    edx,[eax+0x5]
c000ce31:	52                   	push   edx
c000ce32:	6a 00                	push   0x0
c000ce34:	50                   	push   eax
c000ce35:	e8 82 ff ff ff       	call   c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce3a:	83 c4 10             	add    esp,0x10
c000ce3d:	83 c4 0c             	add    esp,0xc
c000ce40:	c3                   	ret    

c000ce41 <CmExpand(Reghive_Tag*, int)>:
c000ce41:	55                   	push   ebp
c000ce42:	57                   	push   edi
c000ce43:	83 cf ff             	or     edi,0xffffffff
c000ce46:	56                   	push   esi
c000ce47:	53                   	push   ebx
c000ce48:	83 ec 3c             	sub    esp,0x3c
c000ce4b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ce4f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ce53:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ce57:	74 59                	je     c000ceb2 <CmExpand(Reghive_Tag*, int)+0x71>
c000ce59:	50                   	push   eax
c000ce5a:	31 d2                	xor    edx,edx
c000ce5c:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000ce60:	31 ff                	xor    edi,edi
c000ce62:	52                   	push   edx
c000ce63:	50                   	push   eax
c000ce64:	ff 33                	push   DWORD PTR [ebx]
c000ce66:	e8 9d b3 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000ce6b:	83 c4 0c             	add    esp,0xc
c000ce6e:	6a 2b                	push   0x2b
c000ce70:	6a 00                	push   0x0
c000ce72:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000ce76:	55                   	push   ebp
c000ce77:	e8 74 36 ff ff       	call   c00004f0 <memset>
c000ce7c:	83 c4 10             	add    esp,0x10
c000ce7f:	39 f7                	cmp    edi,esi
c000ce81:	7d 1b                	jge    c000ce9e <CmExpand(Reghive_Tag*, int)+0x5d>
c000ce83:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce85:	83 ec 0c             	sub    esp,0xc
c000ce88:	47                   	inc    edi
c000ce89:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000ce8d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ce8f:	51                   	push   ecx
c000ce90:	55                   	push   ebp
c000ce91:	6a 00                	push   0x0
c000ce93:	6a 2b                	push   0x2b
c000ce95:	50                   	push   eax
c000ce96:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ce99:	83 c4 20             	add    esp,0x20
c000ce9c:	eb e1                	jmp    c000ce7f <CmExpand(Reghive_Tag*, int)+0x3e>
c000ce9e:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000cea1:	83 ec 0c             	sub    esp,0xc
c000cea4:	01 fe                	add    esi,edi
c000cea6:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000cea9:	53                   	push   ebx
c000ceaa:	e8 71 ff ff ff       	call   c000ce20 <CmUpdateHeader(Reghive_Tag*)>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	83 c4 3c             	add    esp,0x3c
c000ceb5:	89 f8                	mov    eax,edi
c000ceb7:	5b                   	pop    ebx
c000ceb8:	5e                   	pop    esi
c000ceb9:	5f                   	pop    edi
c000ceba:	5d                   	pop    ebp
c000cebb:	c3                   	ret    

c000cebc <CmFindUnusedExtent(Reghive_Tag*)>:
c000cebc:	55                   	push   ebp
c000cebd:	57                   	push   edi
c000cebe:	56                   	push   esi
c000cebf:	53                   	push   ebx
c000cec0:	83 cb ff             	or     ebx,0xffffffff
c000cec3:	83 ec 1c             	sub    esp,0x1c
c000cec6:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ceca:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000cece:	74 68                	je     c000cf38 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ced0:	51                   	push   ecx
c000ced1:	be 2b 00 00 00       	mov    esi,0x2b
c000ced6:	6a 00                	push   0x0
c000ced8:	31 ff                	xor    edi,edi
c000ceda:	6a 00                	push   0x0
c000cedc:	31 db                	xor    ebx,ebx
c000cede:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cee1:	e8 22 b3 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cee6:	83 c4 10             	add    esp,0x10
c000cee9:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000ceec:	76 3b                	jbe    c000cf29 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000ceee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cef1:	83 ec 0c             	sub    esp,0xc
c000cef4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cef8:	8b 10                	mov    edx,DWORD PTR [eax]
c000cefa:	51                   	push   ecx
c000cefb:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000ceff:	51                   	push   ecx
c000cf00:	6a 00                	push   0x0
c000cf02:	6a 01                	push   0x1
c000cf04:	50                   	push   eax
c000cf05:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cf08:	83 c4 20             	add    esp,0x20
c000cf0b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cf10:	74 26                	je     c000cf38 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cf12:	52                   	push   edx
c000cf13:	43                   	inc    ebx
c000cf14:	57                   	push   edi
c000cf15:	56                   	push   esi
c000cf16:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cf19:	e8 ea b2 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000cf1e:	83 c6 2b             	add    esi,0x2b
c000cf21:	83 d7 00             	adc    edi,0x0
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	eb c0                	jmp    c000cee9 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cf29:	50                   	push   eax
c000cf2a:	50                   	push   eax
c000cf2b:	6a 40                	push   0x40
c000cf2d:	55                   	push   ebp
c000cf2e:	e8 0e ff ff ff       	call   c000ce41 <CmExpand(Reghive_Tag*, int)>
c000cf33:	83 c4 10             	add    esp,0x10
c000cf36:	89 c3                	mov    ebx,eax
c000cf38:	83 c4 1c             	add    esp,0x1c
c000cf3b:	89 d8                	mov    eax,ebx
c000cf3d:	5b                   	pop    ebx
c000cf3e:	5e                   	pop    esi
c000cf3f:	5f                   	pop    edi
c000cf40:	5d                   	pop    ebp
c000cf41:	c3                   	ret    

c000cf42 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cf42:	55                   	push   ebp
c000cf43:	57                   	push   edi
c000cf44:	56                   	push   esi
c000cf45:	53                   	push   ebx
c000cf46:	81 ec 88 00 00 00    	sub    esp,0x88
c000cf4c:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cf53:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cf5a:	e8 5d ff ff ff       	call   c000cebc <CmFindUnusedExtent(Reghive_Tag*)>
c000cf5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	6a 2b                	push   0x2b
c000cf68:	6a 00                	push   0x0
c000cf6a:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cf6e:	55                   	push   ebp
c000cf6f:	e8 7c 35 ff ff       	call   c00004f0 <memset>
c000cf74:	83 c4 10             	add    esp,0x10
c000cf77:	85 db                	test   ebx,ebx
c000cf79:	74 12                	je     c000cf8d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cf7b:	51                   	push   ecx
c000cf7c:	55                   	push   ebp
c000cf7d:	53                   	push   ebx
c000cf7e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cf85:	e8 0e fd ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf8a:	83 c4 10             	add    esp,0x10
c000cf8d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cf91:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cf98:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cf9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf9f:	85 db                	test   ebx,ebx
c000cfa1:	74 49                	je     c000cfec <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cfa3:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cfa8:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cfad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfb1:	c1 e0 08             	shl    eax,0x8
c000cfb4:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cfba:	09 c8                	or     eax,ecx
c000cfbc:	74 11                	je     c000cfcf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cfbe:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cfc2:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cfc6:	c1 e8 10             	shr    eax,0x10
c000cfc9:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cfcd:	eb 0f                	jmp    c000cfde <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cfcf:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cfd4:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cfd9:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cfde:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cfe2:	c1 ea 08             	shr    edx,0x8
c000cfe5:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cfea:	eb 0f                	jmp    c000cffb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cfec:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cff1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cff6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cffb:	52                   	push   edx
c000cffc:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d000:	50                   	push   eax
c000d001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d005:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d00c:	e8 ab fd ff ff       	call   c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d011:	83 c4 10             	add    esp,0x10
c000d014:	85 db                	test   ebx,ebx
c000d016:	74 12                	je     c000d02a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d018:	50                   	push   eax
c000d019:	55                   	push   ebp
c000d01a:	53                   	push   ebx
c000d01b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d022:	e8 95 fd ff ff       	call   c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d027:	83 c4 10             	add    esp,0x10
c000d02a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d02e:	83 c4 7c             	add    esp,0x7c
c000d031:	5b                   	pop    ebx
c000d032:	5e                   	pop    esi
c000d033:	5f                   	pop    edi
c000d034:	5d                   	pop    ebp
c000d035:	c3                   	ret    

c000d036 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d036:	55                   	push   ebp
c000d037:	57                   	push   edi
c000d038:	56                   	push   esi
c000d039:	53                   	push   ebx
c000d03a:	bb 27 00 00 00       	mov    ebx,0x27
c000d03f:	81 ec 88 00 00 00    	sub    esp,0x88
c000d045:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d04c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d053:	e8 28 35 ff ff       	call   c0000580 <strlen>
c000d058:	8d 48 26             	lea    ecx,[eax+0x26]
c000d05b:	89 c8                	mov    eax,ecx
c000d05d:	99                   	cdq    
c000d05e:	f7 fb                	idiv   ebx
c000d060:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d064:	83 c4 10             	add    esp,0x10
c000d067:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d06d:	7e 10                	jle    c000d07f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d06f:	83 ec 0c             	sub    esp,0xc
c000d072:	68 65 2f 02 c0       	push   0xc0022f65
c000d077:	e8 62 26 00 00       	call   c000f6de <KePanic(char const*)>
c000d07c:	83 c4 10             	add    esp,0x10
c000d07f:	53                   	push   ebx
c000d080:	31 ed                	xor    ebp,ebp
c000d082:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d086:	53                   	push   ebx
c000d087:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d08e:	57                   	push   edi
c000d08f:	e8 04 fc ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d094:	83 c4 10             	add    esp,0x10
c000d097:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d09b:	89 f0                	mov    eax,esi
c000d09d:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d0a1:	c1 e0 08             	shl    eax,0x8
c000d0a4:	09 c6                	or     esi,eax
c000d0a6:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d0aa:	c1 e6 08             	shl    esi,0x8
c000d0ad:	09 c6                	or     esi,eax
c000d0af:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d0b3:	7e 72                	jle    c000d127 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d0b5:	85 f6                	test   esi,esi
c000d0b7:	75 25                	jne    c000d0de <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d0b9:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d0be:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d0c2:	50                   	push   eax
c000d0c3:	6a 00                	push   0x0
c000d0c5:	6a 00                	push   0x0
c000d0c7:	57                   	push   edi
c000d0c8:	e8 75 fe ff ff       	call   c000cf42 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d0d3:	89 c6                	mov    esi,eax
c000d0d5:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d0d8:	c1 f8 10             	sar    eax,0x10
c000d0db:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d0de:	51                   	push   ecx
c000d0df:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d0e3:	52                   	push   edx
c000d0e4:	56                   	push   esi
c000d0e5:	57                   	push   edi
c000d0e6:	e8 ad fb ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0eb:	83 c4 0c             	add    esp,0xc
c000d0ee:	6a 27                	push   0x27
c000d0f0:	6a 00                	push   0x0
c000d0f2:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d0f6:	51                   	push   ecx
c000d0f7:	e8 f4 33 ff ff       	call   c00004f0 <memset>
c000d0fc:	6b c5 27             	imul   eax,ebp,0x27
c000d0ff:	83 c4 0c             	add    esp,0xc
c000d102:	6a 27                	push   0x27
c000d104:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d10b:	50                   	push   eax
c000d10c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d110:	51                   	push   ecx
c000d111:	e8 7a 35 ff ff       	call   c0000690 <strncpy>
c000d116:	83 c4 0c             	add    esp,0xc
c000d119:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d11d:	52                   	push   edx
c000d11e:	56                   	push   esi
c000d11f:	57                   	push   edi
c000d120:	e8 97 fc ff ff       	call   c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d125:	eb 19                	jmp    c000d140 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d127:	85 f6                	test   esi,esi
c000d129:	74 18                	je     c000d143 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d12b:	52                   	push   edx
c000d12c:	52                   	push   edx
c000d12d:	56                   	push   esi
c000d12e:	57                   	push   edi
c000d12f:	e8 c4 fc ff ff       	call   c000cdf8 <CmFreeExtent(Reghive_Tag*, int)>
c000d134:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d138:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d13c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d140:	83 c4 10             	add    esp,0x10
c000d143:	45                   	inc    ebp
c000d144:	83 c3 03             	add    ebx,0x3
c000d147:	83 fd 07             	cmp    ebp,0x7
c000d14a:	0f 85 47 ff ff ff    	jne    c000d097 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d150:	50                   	push   eax
c000d151:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d155:	50                   	push   eax
c000d156:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d15d:	57                   	push   edi
c000d15e:	e8 59 fc ff ff       	call   c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d163:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d169:	5b                   	pop    ebx
c000d16a:	5e                   	pop    esi
c000d16b:	5f                   	pop    edi
c000d16c:	5d                   	pop    ebp
c000d16d:	c3                   	ret    

c000d16e <CmGetMatch(char*, char*, bool, bool*)>:
c000d16e:	56                   	push   esi
c000d16f:	53                   	push   ebx
c000d170:	50                   	push   eax
c000d171:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d176:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d17a:	74 25                	je     c000d1a1 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d17c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d17f:	31 db                	xor    ebx,ebx
c000d181:	50                   	push   eax
c000d182:	50                   	push   eax
c000d183:	8d 04 9d 80 52 02 c0 	lea    eax,[ebx*4-0x3ffdad80]
c000d18a:	50                   	push   eax
c000d18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18f:	e8 ec 35 ff ff       	call   c0000780 <strcmp>
c000d194:	83 c4 10             	add    esp,0x10
c000d197:	85 c0                	test   eax,eax
c000d199:	74 2e                	je     c000d1c9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d19b:	43                   	inc    ebx
c000d19c:	83 fb 3f             	cmp    ebx,0x3f
c000d19f:	75 e0                	jne    c000d181 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d1a1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d1a4:	31 db                	xor    ebx,ebx
c000d1a6:	51                   	push   ecx
c000d1a7:	51                   	push   ecx
c000d1a8:	8d 04 9d 80 52 02 c0 	lea    eax,[ebx*4-0x3ffdad80]
c000d1af:	50                   	push   eax
c000d1b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d1b4:	e8 c7 35 ff ff       	call   c0000780 <strcmp>
c000d1b9:	83 c4 10             	add    esp,0x10
c000d1bc:	85 c0                	test   eax,eax
c000d1be:	74 09                	je     c000d1c9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d1c0:	43                   	inc    ebx
c000d1c1:	83 fb 3f             	cmp    ebx,0x3f
c000d1c4:	75 e0                	jne    c000d1a6 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d1c6:	83 cb ff             	or     ebx,0xffffffff
c000d1c9:	5a                   	pop    edx
c000d1ca:	89 d8                	mov    eax,ebx
c000d1cc:	5b                   	pop    ebx
c000d1cd:	5e                   	pop    esi
c000d1ce:	c3                   	ret    

c000d1cf <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d1cf:	55                   	push   ebp
c000d1d0:	31 c0                	xor    eax,eax
c000d1d2:	57                   	push   edi
c000d1d3:	56                   	push   esi
c000d1d4:	53                   	push   ebx
c000d1d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d1dd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d1e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1e5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d1e7:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d1ea:	83 fd 1f             	cmp    ebp,0x1f
c000d1ed:	7f 0b                	jg     c000d1fa <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d1ef:	0f b6 c2             	movzx  eax,dl
c000d1f2:	d3 e0                	shl    eax,cl
c000d1f4:	09 07                	or     DWORD PTR [edi],eax
c000d1f6:	b0 01                	mov    al,0x1
c000d1f8:	01 33                	add    DWORD PTR [ebx],esi
c000d1fa:	5b                   	pop    ebx
c000d1fb:	5e                   	pop    esi
c000d1fc:	5f                   	pop    edi
c000d1fd:	5d                   	pop    ebp
c000d1fe:	c3                   	ret    

c000d1ff <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d1ff:	57                   	push   edi
c000d200:	56                   	push   esi
c000d201:	53                   	push   ebx
c000d202:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d206:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d20a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d20e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d212:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d214:	7c 17                	jl     c000d22d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d216:	8b 17                	mov    edx,DWORD PTR [edi]
c000d218:	b8 01 00 00 00       	mov    eax,0x1
c000d21d:	d3 e0                	shl    eax,cl
c000d21f:	48                   	dec    eax
c000d220:	21 d0                	and    eax,edx
c000d222:	d3 ea                	shr    edx,cl
c000d224:	89 17                	mov    DWORD PTR [edi],edx
c000d226:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d228:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d22b:	eb 05                	jmp    c000d232 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d22d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d230:	31 c0                	xor    eax,eax
c000d232:	5b                   	pop    ebx
c000d233:	5e                   	pop    esi
c000d234:	5f                   	pop    edi
c000d235:	c3                   	ret    

c000d236 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d236:	83 ec 40             	sub    esp,0x40
c000d239:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d23d:	50                   	push   eax
c000d23e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d242:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d246:	e8 4d fa ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d24b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d24f:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d253:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d257:	89 10                	mov    DWORD PTR [eax],edx
c000d259:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d25c:	83 c4 4c             	add    esp,0x4c
c000d25f:	c3                   	ret    

c000d260 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d260:	55                   	push   ebp
c000d261:	57                   	push   edi
c000d262:	56                   	push   esi
c000d263:	53                   	push   ebx
c000d264:	83 ec 40             	sub    esp,0x40
c000d267:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d26b:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d26f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d273:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d277:	53                   	push   ebx
c000d278:	56                   	push   esi
c000d279:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d27d:	e8 16 fa ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d282:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d286:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d28a:	83 c4 0c             	add    esp,0xc
c000d28d:	53                   	push   ebx
c000d28e:	56                   	push   esi
c000d28f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d293:	e8 24 fb ff ff       	call   c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d298:	83 c4 4c             	add    esp,0x4c
c000d29b:	5b                   	pop    ebx
c000d29c:	5e                   	pop    esi
c000d29d:	5f                   	pop    edi
c000d29e:	5d                   	pop    ebp
c000d29f:	c3                   	ret    

c000d2a0 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d2a0:	55                   	push   ebp
c000d2a1:	57                   	push   edi
c000d2a2:	56                   	push   esi
c000d2a3:	31 f6                	xor    esi,esi
c000d2a5:	53                   	push   ebx
c000d2a6:	31 db                	xor    ebx,ebx
c000d2a8:	83 ec 40             	sub    esp,0x40
c000d2ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d2b3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d2bb:	6a 12                	push   0x12
c000d2bd:	68 ee 00 00 00       	push   0xee
c000d2c2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d2c6:	e8 25 32 ff ff       	call   c00004f0 <memset>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000d2d2:	6a 08                	push   0x8
c000d2d4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d2d8:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000d2dc:	50                   	push   eax
c000d2dd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d2e1:	55                   	push   ebp
c000d2e2:	57                   	push   edi
c000d2e3:	e8 e7 fe ff ff       	call   c000d1cf <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d2e8:	83 c4 10             	add    esp,0x10
c000d2eb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d2ef:	50                   	push   eax
c000d2f0:	6a 06                	push   0x6
c000d2f2:	55                   	push   ebp
c000d2f3:	57                   	push   edi
c000d2f4:	e8 06 ff ff ff       	call   c000d1ff <CmGetShift(unsigned int*, int*, int, bool*)>
c000d2f9:	83 c4 10             	add    esp,0x10
c000d2fc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d301:	74 07                	je     c000d30a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000d303:	46                   	inc    esi
c000d304:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000d308:	eb e1                	jmp    c000d2eb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000d30a:	43                   	inc    ebx
c000d30b:	83 fb 12             	cmp    ebx,0x12
c000d30e:	75 c2                	jne    c000d2d2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000d310:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d314:	31 f6                	xor    esi,esi
c000d316:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d319:	50                   	push   eax
c000d31a:	50                   	push   eax
c000d31b:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000d320:	46                   	inc    esi
c000d321:	8d 04 85 80 52 02 c0 	lea    eax,[eax*4-0x3ffdad80]
c000d328:	50                   	push   eax
c000d329:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d32d:	e8 3e 35 ff ff       	call   c0000870 <strcat>
c000d332:	83 c4 10             	add    esp,0x10
c000d335:	83 fe 18             	cmp    esi,0x18
c000d338:	75 df                	jne    c000d319 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000d33a:	83 c4 3c             	add    esp,0x3c
c000d33d:	31 c0                	xor    eax,eax
c000d33f:	5b                   	pop    ebx
c000d340:	5e                   	pop    esi
c000d341:	5f                   	pop    edi
c000d342:	5d                   	pop    ebp
c000d343:	c3                   	ret    

c000d344 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000d344:	83 ec 40             	sub    esp,0x40
c000d347:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d34b:	50                   	push   eax
c000d34c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d350:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d354:	e8 3f f9 ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d359:	58                   	pop    eax
c000d35a:	5a                   	pop    edx
c000d35b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000d35f:	8d 44 24 15          	lea    eax,[esp+0x15]
c000d363:	50                   	push   eax
c000d364:	e8 37 ff ff ff       	call   c000d2a0 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000d369:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000d36e:	83 c4 4c             	add    esp,0x4c
c000d371:	c3                   	ret    

c000d372 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000d372:	55                   	push   ebp
c000d373:	57                   	push   edi
c000d374:	56                   	push   esi
c000d375:	53                   	push   ebx
c000d376:	31 db                	xor    ebx,ebx
c000d378:	83 ec 70             	sub    esp,0x70
c000d37b:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000d382:	6a 30                	push   0x30
c000d384:	6a 00                	push   0x0
c000d386:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000d38a:	56                   	push   esi
c000d38b:	e8 60 31 ff ff       	call   c00004f0 <memset>
c000d390:	83 c4 10             	add    esp,0x10
c000d393:	83 ec 0c             	sub    esp,0xc
c000d396:	57                   	push   edi
c000d397:	e8 e4 31 ff ff       	call   c0000580 <strlen>
c000d39c:	83 c4 10             	add    esp,0x10
c000d39f:	39 d8                	cmp    eax,ebx
c000d3a1:	76 16                	jbe    c000d3b9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000d3a3:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000d3a7:	83 ec 0c             	sub    esp,0xc
c000d3aa:	50                   	push   eax
c000d3ab:	e8 b0 35 ff ff       	call   c0000960 <toupper>
c000d3b0:	83 c4 10             	add    esp,0x10
c000d3b3:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000d3b6:	43                   	inc    ebx
c000d3b7:	eb da                	jmp    c000d393 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000d3b9:	52                   	push   edx
c000d3ba:	31 db                	xor    ebx,ebx
c000d3bc:	6a 18                	push   0x18
c000d3be:	31 ff                	xor    edi,edi
c000d3c0:	6a 3f                	push   0x3f
c000d3c2:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d3c6:	50                   	push   eax
c000d3c7:	e8 24 31 ff ff       	call   c00004f0 <memset>
c000d3cc:	83 c4 10             	add    esp,0x10
c000d3cf:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000d3d3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d3d7:	84 c0                	test   al,al
c000d3d9:	0f 84 af 00 00 00    	je     c000d48e <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000d3df:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000d3e3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d3e6:	83 ec 0c             	sub    esp,0xc
c000d3e9:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000d3ee:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000d3f2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000d3f6:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000d3fb:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000d3ff:	56                   	push   esi
c000d400:	e8 7b 31 ff ff       	call   c0000580 <strlen>
c000d405:	83 c4 10             	add    esp,0x10
c000d408:	85 c0                	test   eax,eax
c000d40a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d40e:	74 0b                	je     c000d41b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d410:	50                   	push   eax
c000d411:	6a 01                	push   0x1
c000d413:	56                   	push   esi
c000d414:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d418:	50                   	push   eax
c000d419:	eb 0a                	jmp    c000d425 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d41b:	50                   	push   eax
c000d41c:	6a 00                	push   0x0
c000d41e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d422:	50                   	push   eax
c000d423:	6a 00                	push   0x0
c000d425:	e8 44 fd ff ff       	call   c000d16e <CmGetMatch(char*, char*, bool, bool*)>
c000d42a:	83 c4 10             	add    esp,0x10
c000d42d:	83 f8 ff             	cmp    eax,0xffffffff
c000d430:	75 1a                	jne    c000d44c <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d432:	83 ec 0c             	sub    esp,0xc
c000d435:	68 7a 2f 02 c0       	push   0xc0022f7a
c000d43a:	e8 9f 22 00 00       	call   c000f6de <KePanic(char const*)>
c000d43f:	83 c4 10             	add    esp,0x10
c000d442:	b8 02 00 00 00       	mov    eax,0x2
c000d447:	e9 bb 00 00 00       	jmp    c000d507 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d44c:	83 ff 18             	cmp    edi,0x18
c000d44f:	75 1a                	jne    c000d46b <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d451:	83 ec 0c             	sub    esp,0xc
c000d454:	68 8f 2f 02 c0       	push   0xc0022f8f
c000d459:	e8 80 22 00 00       	call   c000f6de <KePanic(char const*)>
c000d45e:	83 c4 10             	add    esp,0x10
c000d461:	b8 01 00 00 00       	mov    eax,0x1
c000d466:	e9 9c 00 00 00       	jmp    c000d507 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d46b:	47                   	inc    edi
c000d46c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d471:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d475:	0f 45 dd             	cmovne ebx,ebp
c000d478:	83 ec 0c             	sub    esp,0xc
c000d47b:	56                   	push   esi
c000d47c:	e8 ff 30 ff ff       	call   c0000580 <strlen>
c000d481:	83 c4 10             	add    esp,0x10
c000d484:	85 c0                	test   eax,eax
c000d486:	74 06                	je     c000d48e <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000d488:	43                   	inc    ebx
c000d489:	e9 41 ff ff ff       	jmp    c000d3cf <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d48e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d496:	31 db                	xor    ebx,ebx
c000d498:	31 ff                	xor    edi,edi
c000d49a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d4a2:	50                   	push   eax
c000d4a3:	6a 12                	push   0x12
c000d4a5:	68 ee 00 00 00       	push   0xee
c000d4aa:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d4b1:	e8 3a 30 ff ff       	call   c00004f0 <memset>
c000d4b6:	83 c4 10             	add    esp,0x10
c000d4b9:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d4bd:	83 fb 17             	cmp    ebx,0x17
c000d4c0:	7e 26                	jle    c000d4e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d4c2:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d4c6:	50                   	push   eax
c000d4c7:	6a 08                	push   0x8
c000d4c9:	55                   	push   ebp
c000d4ca:	56                   	push   esi
c000d4cb:	e8 2f fd ff ff       	call   c000d1ff <CmGetShift(unsigned int*, int*, int, bool*)>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d4d8:	74 26                	je     c000d500 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d4da:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d4e1:	4b                   	dec    ebx
c000d4e2:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d4e5:	47                   	inc    edi
c000d4e6:	eb 1c                	jmp    c000d504 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d4e8:	6a 06                	push   0x6
c000d4ea:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d4ef:	50                   	push   eax
c000d4f0:	55                   	push   ebp
c000d4f1:	56                   	push   esi
c000d4f2:	e8 d8 fc ff ff       	call   c000d1cf <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d4f7:	83 c4 10             	add    esp,0x10
c000d4fa:	84 c0                	test   al,al
c000d4fc:	75 06                	jne    c000d504 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d4fe:	eb c2                	jmp    c000d4c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d500:	31 c0                	xor    eax,eax
c000d502:	eb 03                	jmp    c000d507 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d504:	43                   	inc    ebx
c000d505:	eb b2                	jmp    c000d4b9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d507:	83 c4 6c             	add    esp,0x6c
c000d50a:	5b                   	pop    ebx
c000d50b:	5e                   	pop    esi
c000d50c:	5f                   	pop    edi
c000d50d:	5d                   	pop    ebp
c000d50e:	c3                   	ret    

c000d50f <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d50f:	53                   	push   ebx
c000d510:	83 ec 3c             	sub    esp,0x3c
c000d513:	6a 2b                	push   0x2b
c000d515:	6a 00                	push   0x0
c000d517:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d51b:	53                   	push   ebx
c000d51c:	e8 cf 2f ff ff       	call   c00004f0 <memset>
c000d521:	58                   	pop    eax
c000d522:	5a                   	pop    edx
c000d523:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d527:	50                   	push   eax
c000d528:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d52c:	e8 41 fe ff ff       	call   c000d372 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d531:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d536:	83 c4 0c             	add    esp,0xc
c000d539:	6a 15                	push   0x15
c000d53b:	6a 00                	push   0x0
c000d53d:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d541:	50                   	push   eax
c000d542:	e8 a9 2f ff ff       	call   c00004f0 <memset>
c000d547:	53                   	push   ebx
c000d548:	6a 00                	push   0x0
c000d54a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d54e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d552:	e8 eb f9 ff ff       	call   c000cf42 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d557:	83 c4 58             	add    esp,0x58
c000d55a:	5b                   	pop    ebx
c000d55b:	c3                   	ret    

c000d55c <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d55c:	56                   	push   esi
c000d55d:	53                   	push   ebx
c000d55e:	83 ec 48             	sub    esp,0x48
c000d561:	6a 12                	push   0x12
c000d563:	68 ff 00 00 00       	push   0xff
c000d568:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d56c:	56                   	push   esi
c000d56d:	e8 7e 2f ff ff       	call   c00004f0 <memset>
c000d572:	5a                   	pop    edx
c000d573:	59                   	pop    ecx
c000d574:	56                   	push   esi
c000d575:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d579:	e8 f4 fd ff ff       	call   c000d372 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d57e:	83 c4 10             	add    esp,0x10
c000d581:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d585:	85 db                	test   ebx,ebx
c000d587:	74 42                	je     c000d5cb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d589:	50                   	push   eax
c000d58a:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d58e:	50                   	push   eax
c000d58f:	53                   	push   ebx
c000d590:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d594:	e8 ff f6 ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d599:	83 c4 0c             	add    esp,0xc
c000d59c:	6a 12                	push   0x12
c000d59e:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d5a2:	50                   	push   eax
c000d5a3:	56                   	push   esi
c000d5a4:	e8 d7 2d ff ff       	call   c0000380 <memcmp>
c000d5a9:	83 c4 10             	add    esp,0x10
c000d5ac:	85 c0                	test   eax,eax
c000d5ae:	74 1e                	je     c000d5ce <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d5b0:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d5b5:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d5ba:	c1 e3 08             	shl    ebx,0x8
c000d5bd:	09 d8                	or     eax,ebx
c000d5bf:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d5c4:	c1 e3 10             	shl    ebx,0x10
c000d5c7:	09 c3                	or     ebx,eax
c000d5c9:	eb ba                	jmp    c000d585 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d5cb:	83 cb ff             	or     ebx,0xffffffff
c000d5ce:	83 c4 44             	add    esp,0x44
c000d5d1:	89 d8                	mov    eax,ebx
c000d5d3:	5b                   	pop    ebx
c000d5d4:	5e                   	pop    esi
c000d5d5:	c3                   	ret    

c000d5d6 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d5d6:	57                   	push   edi
c000d5d7:	56                   	push   esi
c000d5d8:	53                   	push   ebx
c000d5d9:	83 ec 34             	sub    esp,0x34
c000d5dc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d5e0:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d5e4:	6a 2b                	push   0x2b
c000d5e6:	6a 00                	push   0x0
c000d5e8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d5ec:	53                   	push   ebx
c000d5ed:	e8 fe 2e ff ff       	call   c00004f0 <memset>
c000d5f2:	58                   	pop    eax
c000d5f3:	5a                   	pop    edx
c000d5f4:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d5f8:	50                   	push   eax
c000d5f9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d5fd:	e8 70 fd ff ff       	call   c000d372 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d602:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d606:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d60a:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d60e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d612:	53                   	push   ebx
c000d613:	6a 00                	push   0x0
c000d615:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d619:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d61d:	e8 20 f9 ff ff       	call   c000cf42 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d622:	83 c4 50             	add    esp,0x50
c000d625:	5b                   	pop    ebx
c000d626:	5e                   	pop    esi
c000d627:	5f                   	pop    edi
c000d628:	c3                   	ret    

c000d629 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d629:	55                   	push   ebp
c000d62a:	57                   	push   edi
c000d62b:	56                   	push   esi
c000d62c:	53                   	push   ebx
c000d62d:	83 ec 40             	sub    esp,0x40
c000d630:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d634:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d638:	6a 2b                	push   0x2b
c000d63a:	6a 00                	push   0x0
c000d63c:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d640:	56                   	push   esi
c000d641:	e8 aa 2e ff ff       	call   c00004f0 <memset>
c000d646:	5f                   	pop    edi
c000d647:	89 ef                	mov    edi,ebp
c000d649:	58                   	pop    eax
c000d64a:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d64e:	50                   	push   eax
c000d64f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d653:	e8 1a fd ff ff       	call   c000d372 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d658:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d65d:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d662:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d667:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d66c:	83 c4 10             	add    esp,0x10
c000d66f:	85 ed                	test   ebp,ebp
c000d671:	74 14                	je     c000d687 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d673:	51                   	push   ecx
c000d674:	51                   	push   ecx
c000d675:	57                   	push   edi
c000d676:	53                   	push   ebx
c000d677:	e8 0e f7 ff ff       	call   c000cd8a <CmGetNext(Reghive_Tag*, int)>
c000d67c:	83 c4 10             	add    esp,0x10
c000d67f:	85 c0                	test   eax,eax
c000d681:	74 04                	je     c000d687 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d683:	89 c7                	mov    edi,eax
c000d685:	eb e8                	jmp    c000d66f <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d687:	56                   	push   esi
c000d688:	6a 00                	push   0x0
c000d68a:	57                   	push   edi
c000d68b:	53                   	push   ebx
c000d68c:	e8 b1 f8 ff ff       	call   c000cf42 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d691:	83 c4 0c             	add    esp,0xc
c000d694:	56                   	push   esi
c000d695:	50                   	push   eax
c000d696:	89 c7                	mov    edi,eax
c000d698:	53                   	push   ebx
c000d699:	e8 fa f5 ff ff       	call   c000cc98 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d69e:	58                   	pop    eax
c000d69f:	5a                   	pop    edx
c000d6a0:	6a 6c                	push   0x6c
c000d6a2:	6a 00                	push   0x0
c000d6a4:	6a 00                	push   0x0
c000d6a6:	68 a0 2f 02 c0       	push   0xc0022fa0
c000d6ab:	57                   	push   edi
c000d6ac:	53                   	push   ebx
c000d6ad:	e8 24 ff ff ff       	call   c000d5d6 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d6b2:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d6b6:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d6ba:	c1 e8 10             	shr    eax,0x10
c000d6bd:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d6c1:	83 c4 1c             	add    esp,0x1c
c000d6c4:	56                   	push   esi
c000d6c5:	57                   	push   edi
c000d6c6:	53                   	push   ebx
c000d6c7:	e8 f0 f6 ff ff       	call   c000cdbc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6cc:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d6d1:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d6d6:	c1 e0 08             	shl    eax,0x8
c000d6d9:	09 c2                	or     edx,eax
c000d6db:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d6e0:	83 c4 4c             	add    esp,0x4c
c000d6e3:	5b                   	pop    ebx
c000d6e4:	5e                   	pop    esi
c000d6e5:	c1 e0 10             	shl    eax,0x10
c000d6e8:	09 d0                	or     eax,edx
c000d6ea:	5f                   	pop    edi
c000d6eb:	5d                   	pop    ebp
c000d6ec:	c3                   	ret    

c000d6ed <zStrtok(char*, char const*)>:
c000d6ed:	55                   	push   ebp
c000d6ee:	57                   	push   edi
c000d6ef:	56                   	push   esi
c000d6f0:	53                   	push   ebx
c000d6f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d6f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d6f9:	85 db                	test   ebx,ebx
c000d6fb:	74 2f                	je     c000d72c <zStrtok(char*, char const*)+0x3f>
c000d6fd:	85 c0                	test   eax,eax
c000d6ff:	75 09                	jne    c000d70a <zStrtok(char*, char const*)+0x1d>
c000d701:	a1 c0 b0 02 c0       	mov    eax,ds:0xc002b0c0
c000d706:	85 c0                	test   eax,eax
c000d708:	74 50                	je     c000d75a <zStrtok(char*, char const*)+0x6d>
c000d70a:	31 c9                	xor    ecx,ecx
c000d70c:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d710:	74 03                	je     c000d715 <zStrtok(char*, char const*)+0x28>
c000d712:	41                   	inc    ecx
c000d713:	eb f7                	jmp    c000d70c <zStrtok(char*, char const*)+0x1f>
c000d715:	31 d2                	xor    edx,edx
c000d717:	39 ca                	cmp    edx,ecx
c000d719:	74 15                	je     c000d730 <zStrtok(char*, char const*)+0x43>
c000d71b:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d71f:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d722:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d725:	39 ee                	cmp    esi,ebp
c000d727:	74 13                	je     c000d73c <zStrtok(char*, char const*)+0x4f>
c000d729:	42                   	inc    edx
c000d72a:	eb eb                	jmp    c000d717 <zStrtok(char*, char const*)+0x2a>
c000d72c:	31 c0                	xor    eax,eax
c000d72e:	eb 2a                	jmp    c000d75a <zStrtok(char*, char const*)+0x6d>
c000d730:	c7 05 c0 b0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b0c0,0x0
c000d73a:	eb 1e                	jmp    c000d75a <zStrtok(char*, char const*)+0x6d>
c000d73c:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d73f:	39 ce                	cmp    esi,ecx
c000d741:	75 0a                	jne    c000d74d <zStrtok(char*, char const*)+0x60>
c000d743:	40                   	inc    eax
c000d744:	a3 c0 b0 02 c0       	mov    ds:0xc002b0c0,eax
c000d749:	89 d8                	mov    eax,ebx
c000d74b:	eb 0d                	jmp    c000d75a <zStrtok(char*, char const*)+0x6d>
c000d74d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d750:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d754:	89 15 c0 b0 02 c0    	mov    DWORD PTR ds:0xc002b0c0,edx
c000d75a:	5b                   	pop    ebx
c000d75b:	5e                   	pop    esi
c000d75c:	5f                   	pop    edi
c000d75d:	5d                   	pop    ebp
c000d75e:	c3                   	ret    

c000d75f <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d75f:	57                   	push   edi
c000d760:	56                   	push   esi
c000d761:	53                   	push   ebx
c000d762:	81 ec 08 01 00 00    	sub    esp,0x108
c000d768:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d76f:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d776:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d77a:	53                   	push   ebx
c000d77b:	e8 d0 2e ff ff       	call   c0000650 <strcpy>
c000d780:	59                   	pop    ecx
c000d781:	5e                   	pop    esi
c000d782:	68 f3 40 02 c0       	push   0xc00240f3
c000d787:	53                   	push   ebx
c000d788:	bb 01 00 00 00       	mov    ebx,0x1
c000d78d:	e8 5b ff ff ff       	call   c000d6ed <zStrtok(char*, char const*)>
c000d792:	83 c4 10             	add    esp,0x10
c000d795:	85 c0                	test   eax,eax
c000d797:	74 3b                	je     c000d7d4 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d799:	52                   	push   edx
c000d79a:	50                   	push   eax
c000d79b:	6a 01                	push   0x1
c000d79d:	57                   	push   edi
c000d79e:	e8 b9 fd ff ff       	call   c000d55c <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d7a3:	59                   	pop    ecx
c000d7a4:	5e                   	pop    esi
c000d7a5:	89 c3                	mov    ebx,eax
c000d7a7:	68 f3 40 02 c0       	push   0xc00240f3
c000d7ac:	6a 00                	push   0x0
c000d7ae:	e8 3a ff ff ff       	call   c000d6ed <zStrtok(char*, char const*)>
c000d7b3:	83 c4 10             	add    esp,0x10
c000d7b6:	85 c0                	test   eax,eax
c000d7b8:	89 c6                	mov    esi,eax
c000d7ba:	74 18                	je     c000d7d4 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d7bc:	52                   	push   edx
c000d7bd:	52                   	push   edx
c000d7be:	53                   	push   ebx
c000d7bf:	57                   	push   edi
c000d7c0:	e8 86 f5 ff ff       	call   c000cd4b <CmEnterDirectory(Reghive_Tag*, int)>
c000d7c5:	83 c4 10             	add    esp,0x10
c000d7c8:	83 f8 ff             	cmp    eax,0xffffffff
c000d7cb:	89 c3                	mov    ebx,eax
c000d7cd:	74 05                	je     c000d7d4 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d7cf:	50                   	push   eax
c000d7d0:	56                   	push   esi
c000d7d1:	53                   	push   ebx
c000d7d2:	eb c9                	jmp    c000d79d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d7d4:	81 c4 00 01 00 00    	add    esp,0x100
c000d7da:	89 d8                	mov    eax,ebx
c000d7dc:	5b                   	pop    ebx
c000d7dd:	5e                   	pop    esi
c000d7de:	5f                   	pop    edi
c000d7df:	c3                   	ret    

c000d7e0 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d7e0:	55                   	push   ebp
c000d7e1:	57                   	push   edi
c000d7e2:	56                   	push   esi
c000d7e3:	53                   	push   ebx
c000d7e4:	83 ec 5c             	sub    esp,0x5c
c000d7e7:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d7eb:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d7ef:	85 db                	test   ebx,ebx
c000d7f1:	0f 8e 84 00 00 00    	jle    c000d87b <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d7f7:	57                   	push   edi
c000d7f8:	31 ed                	xor    ebp,ebp
c000d7fa:	6a 32                	push   0x32
c000d7fc:	6a 00                	push   0x0
c000d7fe:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d802:	57                   	push   edi
c000d803:	e8 e8 2c ff ff       	call   c00004f0 <memset>
c000d808:	83 c4 0c             	add    esp,0xc
c000d80b:	57                   	push   edi
c000d80c:	53                   	push   ebx
c000d80d:	56                   	push   esi
c000d80e:	e8 31 fb ff ff       	call   c000d344 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d813:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d81e:	7d 13                	jge    c000d833 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d820:	83 ec 0c             	sub    esp,0xc
c000d823:	45                   	inc    ebp
c000d824:	68 e4 45 02 c0       	push   0xc00245e4
c000d829:	e8 20 97 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d82e:	83 c4 10             	add    esp,0x10
c000d831:	eb e7                	jmp    c000d81a <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d833:	51                   	push   ecx
c000d834:	57                   	push   edi
c000d835:	53                   	push   ebx
c000d836:	68 a6 2f 02 c0       	push   0xc0022fa6
c000d83b:	e8 0e 97 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d848:	75 1e                	jne    c000d868 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d84a:	52                   	push   edx
c000d84b:	52                   	push   edx
c000d84c:	53                   	push   ebx
c000d84d:	56                   	push   esi
c000d84e:	e8 f8 f4 ff ff       	call   c000cd4b <CmEnterDirectory(Reghive_Tag*, int)>
c000d853:	83 c4 0c             	add    esp,0xc
c000d856:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d85a:	8d 51 04             	lea    edx,[ecx+0x4]
c000d85d:	52                   	push   edx
c000d85e:	50                   	push   eax
c000d85f:	56                   	push   esi
c000d860:	e8 7b ff ff ff       	call   c000d7e0 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d865:	83 c4 10             	add    esp,0x10
c000d868:	50                   	push   eax
c000d869:	50                   	push   eax
c000d86a:	53                   	push   ebx
c000d86b:	56                   	push   esi
c000d86c:	e8 19 f5 ff ff       	call   c000cd8a <CmGetNext(Reghive_Tag*, int)>
c000d871:	83 c4 10             	add    esp,0x10
c000d874:	89 c3                	mov    ebx,eax
c000d876:	e9 74 ff ff ff       	jmp    c000d7ef <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d87b:	83 c4 5c             	add    esp,0x5c
c000d87e:	5b                   	pop    ebx
c000d87f:	5e                   	pop    esi
c000d880:	5f                   	pop    edi
c000d881:	5d                   	pop    ebp
c000d882:	c3                   	ret    

c000d883 <CmSplitFinalSlashInPlace(char*)>:
c000d883:	53                   	push   ebx
c000d884:	83 ec 14             	sub    esp,0x14
c000d887:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d88b:	53                   	push   ebx
c000d88c:	e8 ef 2c ff ff       	call   c0000580 <strlen>
c000d891:	83 c4 10             	add    esp,0x10
c000d894:	48                   	dec    eax
c000d895:	85 c0                	test   eax,eax
c000d897:	74 15                	je     c000d8ae <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d899:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d89d:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d8a0:	75 09                	jne    c000d8ab <CmSplitFinalSlashInPlace(char*)+0x28>
c000d8a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d8a5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d8a9:	eb 05                	jmp    c000d8b0 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d8ab:	48                   	dec    eax
c000d8ac:	eb e7                	jmp    c000d895 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d8ae:	31 c0                	xor    eax,eax
c000d8b0:	83 c4 08             	add    esp,0x8
c000d8b3:	5b                   	pop    ebx
c000d8b4:	c3                   	ret    
c000d8b5:	66 90                	xchg   ax,ax
c000d8b7:	90                   	nop

c000d8b8 <Krnl::handlePowerButton()>:
c000d8b8:	83 ec 0c             	sub    esp,0xc
c000d8bb:	e8 53 27 00 00       	call   c0010013 <KeHandlePowerButton()>
c000d8c0:	90                   	nop
c000d8c1:	83 c4 0c             	add    esp,0xc
c000d8c4:	c3                   	ret    
c000d8c5:	8d 76 00             	lea    esi,[esi+0x0]

c000d8c8 <Krnl::handleSleepButton()>:
c000d8c8:	83 ec 0c             	sub    esp,0xc
c000d8cb:	e8 5b 27 00 00       	call   c001002b <KeHandleSleepButton()>
c000d8d0:	90                   	nop
c000d8d1:	83 c4 0c             	add    esp,0xc
c000d8d4:	c3                   	ret    
c000d8d5:	90                   	nop

c000d8d6 <Computer::close(int, int, void*)>:
c000d8d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8db:	c3                   	ret    

c000d8dc <Computer::open(int, int, void*)>:
c000d8dc:	56                   	push   esi
c000d8dd:	53                   	push   ebx
c000d8de:	83 ec 04             	sub    esp,0x4
c000d8e1:	f6 05 24 d1 02 c0 04 	test   BYTE PTR ds:0xc002d124,0x4
c000d8e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8ec:	0f 94 05 60 59 02 c0 	sete   BYTE PTR ds:0xc0025960
c000d8f3:	39 1d d0 b0 02 c0    	cmp    DWORD PTR ds:0xc002b0d0,ebx
c000d8f9:	74 10                	je     c000d90b <Computer::open(int, int, void*)+0x2f>
c000d8fb:	83 ec 0c             	sub    esp,0xc
c000d8fe:	68 b0 2f 02 c0       	push   0xc0022fb0
c000d903:	e8 d6 1d 00 00       	call   c000f6de <KePanic(char const*)>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	83 ec 0c             	sub    esp,0xc
c000d90e:	68 68 30 02 c0       	push   0xc0023068
c000d913:	e8 37 f1 ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000d918:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d91f:	e8 74 1a 00 00       	call   c000f398 <malloc>
c000d924:	89 04 24             	mov    DWORD PTR [esp],eax
c000d927:	89 c6                	mov    esi,eax
c000d929:	e8 3a e7 ff ff       	call   c000c068 <ACPI::ACPI()>
c000d92e:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d934:	58                   	pop    eax
c000d935:	5a                   	pop    edx
c000d936:	56                   	push   esi
c000d937:	53                   	push   ebx
c000d938:	e8 71 b9 ff ff       	call   c00092ae <Device::addChild(Device*)>
c000d93d:	c7 04 24 80 30 02 c0 	mov    DWORD PTR [esp],0xc0023080
c000d944:	e8 06 f1 ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000d949:	e8 1f b1 00 00       	call   c0018a6d <HalEnableNMI()>
c000d94e:	e8 4f a3 00 00       	call   c0017ca2 <HalDetectFeatures()>
c000d953:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d95a:	e8 39 1a 00 00       	call   c000f398 <malloc>
c000d95f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d962:	89 c6                	mov    esi,eax
c000d964:	e8 3f bc 00 00       	call   c00195a8 <CPU::CPU()>
c000d969:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d96f:	59                   	pop    ecx
c000d970:	58                   	pop    eax
c000d971:	56                   	push   esi
c000d972:	53                   	push   ebx
c000d973:	e8 36 b9 ff ff       	call   c00092ae <Device::addChild(Device*)>
c000d978:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d97c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d982:	8b 10                	mov    edx,DWORD PTR [eax]
c000d984:	51                   	push   ecx
c000d985:	6a 00                	push   0x0
c000d987:	6a 00                	push   0x0
c000d989:	50                   	push   eax
c000d98a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d98d:	83 c4 14             	add    esp,0x14
c000d990:	68 dc 2f 02 c0       	push   0xc0022fdc
c000d995:	e8 b5 f0 ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000d99a:	e8 64 b8 00 00       	call   c0019203 <HalInitialiseCoprocessor()>
c000d99f:	c7 04 24 9a 30 02 c0 	mov    DWORD PTR [esp],0xc002309a
c000d9a6:	e8 a4 f0 ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000d9ab:	c7 04 24 c2 d9 00 c0 	mov    DWORD PTR [esp],0xc000d9c2
c000d9b2:	e8 25 88 00 00       	call   c00161dc <setupMultitasking(void (*)())>
c000d9b7:	83 c4 14             	add    esp,0x14
c000d9ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d9bf:	5b                   	pop    ebx
c000d9c0:	5e                   	pop    esi
c000d9c1:	c3                   	ret    

c000d9c2 <KeFirstTask()>:
c000d9c2:	53                   	push   ebx
c000d9c3:	83 ec 14             	sub    esp,0x14
c000d9c6:	fb                   	sti    
c000d9c7:	68 b5 30 02 c0       	push   0xc00230b5
c000d9cc:	e8 7e f0 ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000d9d1:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d9d8:	e8 bb 19 00 00       	call   c000f398 <malloc>
c000d9dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d9e4:	89 c3                	mov    ebx,eax
c000d9e6:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000d9eb:	50                   	push   eax
c000d9ec:	68 ce 30 02 c0       	push   0xc00230ce
c000d9f1:	6a 01                	push   0x1
c000d9f3:	53                   	push   ebx
c000d9f4:	e8 6f 84 00 00       	call   c0015e68 <Process::Process(bool, char const*, Process*, char**)>
c000d9f9:	83 c4 20             	add    esp,0x20
c000d9fc:	68 ff 00 00 00       	push   0xff
c000da01:	6a 00                	push   0x0
c000da03:	68 c1 e6 00 c0       	push   0xc000e6c1
c000da08:	53                   	push   ebx
c000da09:	e8 9a 86 00 00       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c000da0e:	8b 15 58 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da58
c000da14:	6a 7a                	push   0x7a
c000da16:	6a 00                	push   0x0
c000da18:	68 88 69 01 c0       	push   0xc0016988
c000da1d:	52                   	push   edx
c000da1e:	e8 85 86 00 00       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c000da23:	83 c4 14             	add    esp,0x14
c000da26:	68 00 30 02 c0       	push   0xc0023000
c000da2b:	a3 10 da 02 c0       	mov    ds:0xc002da10,eax
c000da30:	e8 1a f0 ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000da35:	c6 05 d5 b0 02 c0 01 	mov    BYTE PTR ds:0xc002b0d5,0x1
c000da3c:	e8 f4 26 00 00       	call   c0010135 <KeInitRand()>
c000da41:	e8 10 93 00 00       	call   c0016d56 <Vm::initialise8086()>
c000da46:	e8 8b a3 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000da4b:	c7 04 24 74 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d74
c000da52:	e8 f8 ef ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000da57:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000da5c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000da62:	8b 10                	mov    edx,DWORD PTR [eax]
c000da64:	6a 00                	push   0x0
c000da66:	6a 00                	push   0x0
c000da68:	6a 00                	push   0x0
c000da6a:	50                   	push   eax
c000da6b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000da6e:	83 c4 14             	add    esp,0x14
c000da71:	68 00 30 02 c0       	push   0xc0023000
c000da76:	e8 d4 ef ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000da7b:	e8 3b 9b ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000da80:	e8 f5 05 00 00       	call   c000e07a <KeLoadSystemEnv()>
c000da85:	e8 b9 25 00 00       	call   c0010043 <KeSetupPowerManager()>
c000da8a:	c7 04 24 24 30 02 c0 	mov    DWORD PTR [esp],0xc0023024
c000da91:	e8 b9 ef ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000da96:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000da9b:	59                   	pop    ecx
c000da9c:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000daa2:	53                   	push   ebx
c000daa3:	e8 22 b9 ff ff       	call   c00093ca <Device::loadDriversForAll()>
c000daa8:	c7 04 24 db 30 02 c0 	mov    DWORD PTR [esp],0xc00230db
c000daaf:	e8 9b ef ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c000dab4:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c000daba:	58                   	pop    eax
c000dabb:	5a                   	pop    edx
c000dabc:	6a 01                	push   0x1
c000dabe:	68 ec 30 02 c0       	push   0xc00230ec
c000dac3:	e8 0c 7d 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c000dac8:	59                   	pop    ecx
c000dac9:	5a                   	pop    edx
c000daca:	53                   	push   ebx
c000dacb:	50                   	push   eax
c000dacc:	e8 64 7f 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c000dad1:	83 c4 10             	add    esp,0x10
c000dad4:	83 ec 0c             	sub    esp,0xc
c000dad7:	6a 02                	push   0x2
c000dad9:	e8 e2 88 00 00       	call   c00163c0 <blockTask(TaskState)>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	eb f1                	jmp    c000dad4 <KeFirstTask()+0x112>
c000dae3:	90                   	nop

c000dae4 <Computer::Computer()>:
c000dae4:	83 ec 0c             	sub    esp,0xc
c000dae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daeb:	83 ec 08             	sub    esp,0x8
c000daee:	68 08 31 02 c0       	push   0xc0023108
c000daf3:	50                   	push   eax
c000daf4:	e8 17 b9 ff ff       	call   c0009410 <Device::Device(char const*)>
c000daf9:	83 c4 10             	add    esp,0x10
c000dafc:	ba 1c 31 02 c0       	mov    edx,0xc002311c
c000db01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db05:	89 10                	mov    DWORD PTR [eax],edx
c000db07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000db15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db19:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000db23:	90                   	nop
c000db24:	83 c4 0c             	add    esp,0xc
c000db27:	c3                   	ret    

c000db28 <KePrepareShutdown()>:
c000db28:	83 ec 0c             	sub    esp,0xc
c000db2b:	e8 8d ee ff ff       	call   c000c9bd <KeExecuteAtexit()>
c000db30:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000db35:	83 ec 0c             	sub    esp,0xc
c000db38:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000db3e:	50                   	push   eax
c000db3f:	e8 d2 b9 ff ff       	call   c0009516 <Device::closeAll()>
c000db44:	83 c4 1c             	add    esp,0x1c
c000db47:	c3                   	ret    

c000db48 <KeShutdown()>:
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	e8 d8 ff ff ff       	call   c000db28 <KePrepareShutdown()>
c000db50:	a1 cc b0 02 c0       	mov    eax,ds:0xc002b0cc
c000db55:	85 c0                	test   eax,eax
c000db57:	74 02                	je     c000db5b <KeShutdown()+0x13>
c000db59:	ff d0                	call   eax
c000db5b:	83 ec 0c             	sub    esp,0xc
c000db5e:	68 44 30 02 c0       	push   0xc0023044
c000db63:	e8 76 1b 00 00       	call   c000f6de <KePanic(char const*)>
c000db68:	83 c4 1c             	add    esp,0x1c
c000db6b:	c3                   	ret    

c000db6c <KeSleep()>:
c000db6c:	a1 c4 b0 02 c0       	mov    eax,ds:0xc002b0c4
c000db71:	85 c0                	test   eax,eax
c000db73:	74 02                	je     c000db77 <KeSleep()+0xb>
c000db75:	ff e0                	jmp    eax
c000db77:	c3                   	ret    

c000db78 <KeRestart()>:
c000db78:	83 ec 0c             	sub    esp,0xc
c000db7b:	e8 a8 ff ff ff       	call   c000db28 <KePrepareShutdown()>
c000db80:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c000db85:	85 c0                	test   eax,eax
c000db87:	74 02                	je     c000db8b <KeRestart()+0x13>
c000db89:	ff d0                	call   eax
c000db8b:	e4 64                	in     al,0x64
c000db8d:	a8 02                	test   al,0x2
c000db8f:	75 fa                	jne    c000db8b <KeRestart()+0x13>
c000db91:	b0 fe                	mov    al,0xfe
c000db93:	e6 64                	out    0x64,al
c000db95:	83 c4 0c             	add    esp,0xc
c000db98:	c3                   	ret    

c000db99 <KeCalculateCRC32(unsigned char*, int)>:
c000db99:	53                   	push   ebx
c000db9a:	83 c8 ff             	or     eax,0xffffffff
c000db9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dba1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dba5:	01 cb                	add    ebx,ecx
c000dba7:	39 d9                	cmp    ecx,ebx
c000dba9:	74 15                	je     c000dbc0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000dbab:	41                   	inc    ecx
c000dbac:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000dbaf:	31 c2                	xor    edx,eax
c000dbb1:	c1 e8 08             	shr    eax,0x8
c000dbb4:	0f b6 d2             	movzx  edx,dl
c000dbb7:	33 04 95 80 53 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdac80]
c000dbbe:	eb e7                	jmp    c000dba7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000dbc0:	5b                   	pop    ebx
c000dbc1:	f7 d0                	not    eax
c000dbc3:	c3                   	ret    

c000dbc4 <EnvVarContainer::getEnv(char const*)>:
c000dbc4:	57                   	push   edi
c000dbc5:	56                   	push   esi
c000dbc6:	53                   	push   ebx
c000dbc7:	31 db                	xor    ebx,ebx
c000dbc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbcd:	39 1e                	cmp    DWORD PTR [esi],ebx
c000dbcf:	7e 2b                	jle    c000dbfc <EnvVarContainer::getEnv(char const*)+0x38>
c000dbd1:	50                   	push   eax
c000dbd2:	50                   	push   eax
c000dbd3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dbd6:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000dbdd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000dbe0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dbe4:	e8 97 2b ff ff       	call   c0000780 <strcmp>
c000dbe9:	83 c4 10             	add    esp,0x10
c000dbec:	85 c0                	test   eax,eax
c000dbee:	75 09                	jne    c000dbf9 <EnvVarContainer::getEnv(char const*)+0x35>
c000dbf0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dbf3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000dbf7:	eb 05                	jmp    c000dbfe <EnvVarContainer::getEnv(char const*)+0x3a>
c000dbf9:	43                   	inc    ebx
c000dbfa:	eb d1                	jmp    c000dbcd <EnvVarContainer::getEnv(char const*)+0x9>
c000dbfc:	31 c0                	xor    eax,eax
c000dbfe:	5b                   	pop    ebx
c000dbff:	5e                   	pop    esi
c000dc00:	5f                   	pop    edi
c000dc01:	c3                   	ret    

c000dc02 <EnvVarContainer::setEnv(char const*, char const*)>:
c000dc02:	55                   	push   ebp
c000dc03:	57                   	push   edi
c000dc04:	56                   	push   esi
c000dc05:	53                   	push   ebx
c000dc06:	83 ec 28             	sub    esp,0x28
c000dc09:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc0d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000dc11:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dc15:	56                   	push   esi
c000dc16:	e8 65 29 ff ff       	call   c0000580 <strlen>
c000dc1b:	40                   	inc    eax
c000dc1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc1f:	e8 74 17 00 00       	call   c000f398 <malloc>
c000dc24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc2b:	e8 50 29 ff ff       	call   c0000580 <strlen>
c000dc30:	40                   	inc    eax
c000dc31:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc34:	e8 5f 17 00 00       	call   c000f398 <malloc>
c000dc39:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc40:	e8 3b 29 ff ff       	call   c0000580 <strlen>
c000dc45:	83 c4 0c             	add    esp,0xc
c000dc48:	40                   	inc    eax
c000dc49:	50                   	push   eax
c000dc4a:	6a 00                	push   0x0
c000dc4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc50:	e8 9b 28 ff ff       	call   c00004f0 <memset>
c000dc55:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc58:	e8 23 29 ff ff       	call   c0000580 <strlen>
c000dc5d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dc61:	8d 48 01             	lea    ecx,[eax+0x1]
c000dc64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc69:	89 de                	mov    esi,ebx
c000dc6b:	e8 10 29 ff ff       	call   c0000580 <strlen>
c000dc70:	83 c4 0c             	add    esp,0xc
c000dc73:	40                   	inc    eax
c000dc74:	50                   	push   eax
c000dc75:	6a 00                	push   0x0
c000dc77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc7b:	e8 70 28 ff ff       	call   c00004f0 <memset>
c000dc80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc83:	e8 f8 28 ff ff       	call   c0000580 <strlen>
c000dc88:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dc8c:	8d 48 01             	lea    ecx,[eax+0x1]
c000dc8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc94:	40                   	inc    eax
c000dc95:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000dc98:	c1 e0 03             	shl    eax,0x3
c000dc9b:	5a                   	pop    edx
c000dc9c:	59                   	pop    ecx
c000dc9d:	50                   	push   eax
c000dc9e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dca1:	e8 de 16 00 00       	call   c000f384 <realloc>
c000dca6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000dca9:	8d 74 24 18          	lea    esi,[esp+0x18]
c000dcad:	b9 08 00 00 00       	mov    ecx,0x8
c000dcb2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000dcb5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000dcb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcbb:	83 c4 2c             	add    esp,0x2c
c000dcbe:	5b                   	pop    ebx
c000dcbf:	5e                   	pop    esi
c000dcc0:	5f                   	pop    edi
c000dcc1:	5d                   	pop    ebp
c000dcc2:	c3                   	ret    
c000dcc3:	90                   	nop

c000dcc4 <EnvVarContainer::deleteEnv(char const*)>:
c000dcc4:	c3                   	ret    
c000dcc5:	90                   	nop

c000dcc6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000dcc6:	55                   	push   ebp
c000dcc7:	57                   	push   edi
c000dcc8:	56                   	push   esi
c000dcc9:	53                   	push   ebx
c000dcca:	81 ec 38 01 00 00    	sub    esp,0x138
c000dcd0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000dcd7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000dcde:	68 14 01 00 00       	push   0x114
c000dce3:	e8 b0 16 00 00       	call   c000f398 <malloc>
c000dce8:	83 c4 0c             	add    esp,0xc
c000dceb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dcee:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000dcf5:	89 c3                	mov    ebx,eax
c000dcf7:	50                   	push   eax
c000dcf8:	e8 2f a4 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000dcfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd00:	e8 09 a7 ff ff       	call   c000840e <File::exists()>
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	84 c0                	test   al,al
c000dd0a:	75 31                	jne    c000dd3d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000dd0c:	50                   	push   eax
c000dd0d:	50                   	push   eax
c000dd0e:	6a 12                	push   0x12
c000dd10:	53                   	push   ebx
c000dd11:	e8 34 a4 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000dd16:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd18:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000dd1b:	89 34 24             	mov    DWORD PTR [esp],esi
c000dd1e:	e8 5d 28 ff ff       	call   c0000580 <strlen>
c000dd23:	5a                   	pop    edx
c000dd24:	8d 54 24 20          	lea    edx,[esp+0x20]
c000dd28:	52                   	push   edx
c000dd29:	31 d2                	xor    edx,edx
c000dd2b:	56                   	push   esi
c000dd2c:	52                   	push   edx
c000dd2d:	50                   	push   eax
c000dd2e:	53                   	push   ebx
c000dd2f:	ff d7                	call   edi
c000dd31:	83 c4 14             	add    esp,0x14
c000dd34:	53                   	push   ebx
c000dd35:	e8 6e a4 ff ff       	call   c00081a8 <File::close()>
c000dd3a:	83 c4 10             	add    esp,0x10
c000dd3d:	56                   	push   esi
c000dd3e:	31 f6                	xor    esi,esi
c000dd40:	68 00 01 00 00       	push   0x100
c000dd45:	6a 00                	push   0x0
c000dd47:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dd4b:	50                   	push   eax
c000dd4c:	e8 9f 27 ff ff       	call   c00004f0 <memset>
c000dd51:	5f                   	pop    edi
c000dd52:	58                   	pop    eax
c000dd53:	6a 01                	push   0x1
c000dd55:	53                   	push   ebx
c000dd56:	e8 ef a3 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000dd5b:	83 c4 10             	add    esp,0x10
c000dd5e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd66:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dd6e:	83 ec 0c             	sub    esp,0xc
c000dd71:	8d 54 24 20          	lea    edx,[esp+0x20]
c000dd75:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd77:	52                   	push   edx
c000dd78:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000dd7c:	51                   	push   ecx
c000dd7d:	6a 00                	push   0x0
c000dd7f:	6a 01                	push   0x1
c000dd81:	53                   	push   ebx
c000dd82:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd85:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000dd8a:	83 c4 20             	add    esp,0x20
c000dd8d:	85 c0                	test   eax,eax
c000dd8f:	89 c1                	mov    ecx,eax
c000dd91:	0f 84 36 01 00 00    	je     c000decd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000dd97:	83 f8 0d             	cmp    eax,0xd
c000dd9a:	0f 84 22 01 00 00    	je     c000dec2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dda0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000dda5:	0f 84 f0 00 00 00    	je     c000de9b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000ddab:	83 f8 0a             	cmp    eax,0xa
c000ddae:	74 13                	je     c000ddc3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000ddb0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ddb5:	74 0c                	je     c000ddc3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000ddb7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ddbd:	0f 8e f6 00 00 00    	jle    c000deb9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000ddc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddc7:	83 ec 0c             	sub    esp,0xc
c000ddca:	8d 78 01             	lea    edi,[eax+0x1]
c000ddcd:	57                   	push   edi
c000ddce:	e8 c5 15 00 00       	call   c000f398 <malloc>
c000ddd3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ddd7:	8d 56 04             	lea    edx,[esi+0x4]
c000ddda:	89 14 24             	mov    DWORD PTR [esp],edx
c000dddd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dde1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dde5:	e8 ae 15 00 00       	call   c000f398 <malloc>
c000ddea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ddee:	83 c4 0c             	add    esp,0xc
c000ddf1:	57                   	push   edi
c000ddf2:	6a 00                	push   0x0
c000ddf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ddf8:	e8 f3 26 ff ff       	call   c00004f0 <memset>
c000ddfd:	8d 74 24 30          	lea    esi,[esp+0x30]
c000de01:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000de05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000de09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de0b:	83 c4 0c             	add    esp,0xc
c000de0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de12:	52                   	push   edx
c000de13:	6a 00                	push   0x0
c000de15:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000de19:	e8 d2 26 ff ff       	call   c00004f0 <memset>
c000de1e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000de22:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000de26:	89 34 24             	mov    DWORD PTR [esp],esi
c000de29:	e8 52 27 ff ff       	call   c0000580 <strlen>
c000de2e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000de32:	89 c1                	mov    ecx,eax
c000de34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de39:	83 c4 10             	add    esp,0x10
c000de3c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000de3f:	40                   	inc    eax
c000de40:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de43:	85 d2                	test   edx,edx
c000de45:	75 0c                	jne    c000de53 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000de47:	83 ec 0c             	sub    esp,0xc
c000de4a:	6a 08                	push   0x8
c000de4c:	e8 47 15 00 00       	call   c000f398 <malloc>
c000de51:	eb 0c                	jmp    c000de5f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000de53:	51                   	push   ecx
c000de54:	51                   	push   ecx
c000de55:	c1 e0 03             	shl    eax,0x3
c000de58:	50                   	push   eax
c000de59:	52                   	push   edx
c000de5a:	e8 25 15 00 00       	call   c000f384 <realloc>
c000de5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000de62:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000de65:	83 c4 10             	add    esp,0x10
c000de68:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000de6b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000de6f:	b9 08 00 00 00       	mov    ecx,0x8
c000de74:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000de78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de7a:	50                   	push   eax
c000de7b:	31 f6                	xor    esi,esi
c000de7d:	68 00 01 00 00       	push   0x100
c000de82:	6a 00                	push   0x0
c000de84:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000de88:	50                   	push   eax
c000de89:	e8 62 26 ff ff       	call   c00004f0 <memset>
c000de8e:	83 c4 10             	add    esp,0x10
c000de91:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000de99:	eb 27                	jmp    c000dec2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000de9b:	83 f8 3d             	cmp    eax,0x3d
c000de9e:	74 1e                	je     c000debe <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000dea0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000dea6:	7f 07                	jg     c000deaf <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000dea8:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000deac:	46                   	inc    esi
c000dead:	eb 13                	jmp    c000dec2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000deaf:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000deb7:	eb 09                	jmp    c000dec2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000deb9:	83 f8 3d             	cmp    eax,0x3d
c000debc:	75 ea                	jne    c000dea8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000debe:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dec2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dec7:	0f 85 99 fe ff ff    	jne    c000dd66 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000decd:	83 ec 0c             	sub    esp,0xc
c000ded0:	53                   	push   ebx
c000ded1:	e8 d2 a2 ff ff       	call   c00081a8 <File::close()>
c000ded6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ded8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dedb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dede:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dee4:	5b                   	pop    ebx
c000dee5:	5e                   	pop    esi
c000dee6:	5f                   	pop    edi
c000dee7:	5d                   	pop    ebp
c000dee8:	c3                   	ret    
c000dee9:	90                   	nop

c000deea <EnvVarContainer::__loadSystem()>:
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	68 80 57 02 c0       	push   0xc0025780
c000def2:	68 40 31 02 c0       	push   0xc0023140
c000def7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defb:	e8 c6 fd ff ff       	call   c000dcc6 <EnvVarContainer::loadFrom(char const*, char const*)>
c000df00:	83 c4 1c             	add    esp,0x1c
c000df03:	c3                   	ret    

c000df04 <EnvVarContainer::__loadUser()>:
c000df04:	c3                   	ret    
c000df05:	90                   	nop

c000df06 <EnvVarContainer::EnvVarContainer(Process*)>:
c000df06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000df18:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000df1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df26:	90                   	nop
c000df27:	c3                   	ret    

c000df28 <EnvVarContainer::~EnvVarContainer()>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df32:	85 c0                	test   eax,eax
c000df34:	74 1d                	je     c000df53 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000df36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000df3c:	85 c0                	test   eax,eax
c000df3e:	74 13                	je     c000df53 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000df40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df47:	83 ec 0c             	sub    esp,0xc
c000df4a:	50                   	push   eax
c000df4b:	e8 58 14 00 00       	call   c000f3a8 <free>
c000df50:	83 c4 10             	add    esp,0x10
c000df53:	90                   	nop
c000df54:	83 c4 0c             	add    esp,0xc
c000df57:	c3                   	ret    

c000df58 <KeGetEnv(Process*, char const*)>:
c000df58:	53                   	push   ebx
c000df59:	83 ec 08             	sub    esp,0x8
c000df5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df60:	39 05 58 da 02 c0    	cmp    DWORD PTR ds:0xc002da58,eax
c000df66:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000df6a:	74 04                	je     c000df70 <KeGetEnv(Process*, char const*)+0x18>
c000df6c:	85 c0                	test   eax,eax
c000df6e:	75 0b                	jne    c000df7b <KeGetEnv(Process*, char const*)+0x23>
c000df70:	a1 d8 b0 02 c0       	mov    eax,ds:0xc002b0d8
c000df75:	85 c0                	test   eax,eax
c000df77:	75 19                	jne    c000df92 <KeGetEnv(Process*, char const*)+0x3a>
c000df79:	eb 27                	jmp    c000dfa2 <KeGetEnv(Process*, char const*)+0x4a>
c000df7b:	52                   	push   edx
c000df7c:	52                   	push   edx
c000df7d:	53                   	push   ebx
c000df7e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000df84:	e8 3b fc ff ff       	call   c000dbc4 <EnvVarContainer::getEnv(char const*)>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	85 c0                	test   eax,eax
c000df8e:	75 28                	jne    c000dfb8 <KeGetEnv(Process*, char const*)+0x60>
c000df90:	eb de                	jmp    c000df70 <KeGetEnv(Process*, char const*)+0x18>
c000df92:	52                   	push   edx
c000df93:	52                   	push   edx
c000df94:	53                   	push   ebx
c000df95:	50                   	push   eax
c000df96:	e8 29 fc ff ff       	call   c000dbc4 <EnvVarContainer::getEnv(char const*)>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	85 c0                	test   eax,eax
c000dfa0:	75 16                	jne    c000dfb8 <KeGetEnv(Process*, char const*)+0x60>
c000dfa2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dfa6:	a1 dc b0 02 c0       	mov    eax,ds:0xc002b0dc
c000dfab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfaf:	83 c4 08             	add    esp,0x8
c000dfb2:	5b                   	pop    ebx
c000dfb3:	e9 0c fc ff ff       	jmp    c000dbc4 <EnvVarContainer::getEnv(char const*)>
c000dfb8:	83 c4 08             	add    esp,0x8
c000dfbb:	5b                   	pop    ebx
c000dfbc:	c3                   	ret    

c000dfbd <KeSetEnvSystem(char const*, char const*)>:
c000dfbd:	83 ec 10             	sub    esp,0x10
c000dfc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfc8:	ff 35 dc b0 02 c0    	push   DWORD PTR ds:0xc002b0dc
c000dfce:	e8 2f fc ff ff       	call   c000dc02 <EnvVarContainer::setEnv(char const*, char const*)>
c000dfd3:	83 c4 1c             	add    esp,0x1c
c000dfd6:	c3                   	ret    

c000dfd7 <KeSetEnvUser(char const*, char const*)>:
c000dfd7:	a1 d8 b0 02 c0       	mov    eax,ds:0xc002b0d8
c000dfdc:	85 c0                	test   eax,eax
c000dfde:	74 15                	je     c000dff5 <KeSetEnvUser(char const*, char const*)+0x1e>
c000dfe0:	83 ec 10             	sub    esp,0x10
c000dfe3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfeb:	50                   	push   eax
c000dfec:	e8 11 fc ff ff       	call   c000dc02 <EnvVarContainer::setEnv(char const*, char const*)>
c000dff1:	83 c4 1c             	add    esp,0x1c
c000dff4:	c3                   	ret    
c000dff5:	c3                   	ret    

c000dff6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dffa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000e000:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e004:	e9 f9 fb ff ff       	jmp    c000dc02 <EnvVarContainer::setEnv(char const*, char const*)>

c000e009 <KeDeleteEnvSystem(char const*)>:
c000e009:	c3                   	ret    

c000e00a <KeDeleteEnvUser(char const*)>:
c000e00a:	c3                   	ret    

c000e00b <KeDeleteEnvProcess(Process*, char const*)>:
c000e00b:	c3                   	ret    

c000e00c <KeNewProcessEnv(Process*)>:
c000e00c:	83 ec 28             	sub    esp,0x28
c000e00f:	6a 0c                	push   0xc
c000e011:	e8 82 13 00 00       	call   c000f398 <malloc>
c000e016:	5a                   	pop    edx
c000e017:	59                   	pop    ecx
c000e018:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e01c:	50                   	push   eax
c000e01d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e021:	e8 e0 fe ff ff       	call   c000df06 <EnvVarContainer::EnvVarContainer(Process*)>
c000e026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e02a:	83 c4 2c             	add    esp,0x2c
c000e02d:	c3                   	ret    

c000e02e <KeCopyProcessEnv(Process*, Process*)>:
c000e02e:	57                   	push   edi
c000e02f:	56                   	push   esi
c000e030:	53                   	push   ebx
c000e031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e035:	83 ec 0c             	sub    esp,0xc
c000e038:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000e03e:	6a 0c                	push   0xc
c000e040:	e8 53 13 00 00       	call   c000f398 <malloc>
c000e045:	89 c3                	mov    ebx,eax
c000e047:	58                   	pop    eax
c000e048:	5a                   	pop    edx
c000e049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04d:	53                   	push   ebx
c000e04e:	e8 b3 fe ff ff       	call   c000df06 <EnvVarContainer::EnvVarContainer(Process*)>
c000e053:	8b 07                	mov    eax,DWORD PTR [edi]
c000e055:	89 03                	mov    DWORD PTR [ebx],eax
c000e057:	c1 e0 03             	shl    eax,0x3
c000e05a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05d:	e8 36 13 00 00       	call   c000f398 <malloc>
c000e062:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e065:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e067:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e06a:	89 c7                	mov    edi,eax
c000e06c:	c1 e1 03             	shl    ecx,0x3
c000e06f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e071:	83 c4 10             	add    esp,0x10
c000e074:	89 d8                	mov    eax,ebx
c000e076:	5b                   	pop    ebx
c000e077:	5e                   	pop    esi
c000e078:	5f                   	pop    edi
c000e079:	c3                   	ret    

c000e07a <KeLoadSystemEnv()>:
c000e07a:	53                   	push   ebx
c000e07b:	83 ec 14             	sub    esp,0x14
c000e07e:	6a 0c                	push   0xc
c000e080:	e8 13 13 00 00       	call   c000f398 <malloc>
c000e085:	89 c3                	mov    ebx,eax
c000e087:	58                   	pop    eax
c000e088:	5a                   	pop    edx
c000e089:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c000e08f:	53                   	push   ebx
c000e090:	e8 71 fe ff ff       	call   c000df06 <EnvVarContainer::EnvVarContainer(Process*)>
c000e095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e098:	89 1d dc b0 02 c0    	mov    DWORD PTR ds:0xc002b0dc,ebx
c000e09e:	e8 47 fe ff ff       	call   c000deea <EnvVarContainer::__loadSystem()>
c000e0a3:	83 c4 18             	add    esp,0x18
c000e0a6:	5b                   	pop    ebx
c000e0a7:	c3                   	ret    

c000e0a8 <KeLoadUserEnv()>:
c000e0a8:	53                   	push   ebx
c000e0a9:	83 ec 14             	sub    esp,0x14
c000e0ac:	6a 0c                	push   0xc
c000e0ae:	e8 e5 12 00 00       	call   c000f398 <malloc>
c000e0b3:	89 c3                	mov    ebx,eax
c000e0b5:	58                   	pop    eax
c000e0b6:	5a                   	pop    edx
c000e0b7:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c000e0bd:	53                   	push   ebx
c000e0be:	e8 43 fe ff ff       	call   c000df06 <EnvVarContainer::EnvVarContainer(Process*)>
c000e0c3:	89 1d d8 b0 02 c0    	mov    DWORD PTR ds:0xc002b0d8,ebx
c000e0c9:	83 c4 18             	add    esp,0x18
c000e0cc:	5b                   	pop    ebx
c000e0cd:	c3                   	ret    

c000e0ce <KeFlushEnv()>:
c000e0ce:	c3                   	ret    

c000e0cf <KeGetProcessTotalEnvCount(Process*)>:
c000e0cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0d3:	8b 15 d8 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0d8
c000e0d9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000e0df:	a1 dc b0 02 c0       	mov    eax,ds:0xc002b0dc
c000e0e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0e6:	03 01                	add    eax,DWORD PTR [ecx]
c000e0e8:	85 d2                	test   edx,edx
c000e0ea:	74 02                	je     c000e0ee <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e0ec:	03 02                	add    eax,DWORD PTR [edx]
c000e0ee:	c3                   	ret    

c000e0ef <KeGetProcessEnvPair(Process*, int)>:
c000e0ef:	57                   	push   edi
c000e0f0:	56                   	push   esi
c000e0f1:	8b 35 d8 b0 02 c0    	mov    esi,DWORD PTR ds:0xc002b0d8
c000e0f7:	53                   	push   ebx
c000e0f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e0fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e100:	85 f6                	test   esi,esi
c000e102:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e106:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000e10c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e10e:	75 16                	jne    c000e126 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e110:	39 c2                	cmp    edx,eax
c000e112:	7c 16                	jl     c000e12a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e114:	8b 0d dc b0 02 c0    	mov    ecx,DWORD PTR ds:0xc002b0dc
c000e11a:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e11c:	01 c6                	add    esi,eax
c000e11e:	39 d6                	cmp    esi,edx
c000e120:	7e 3c                	jle    c000e15e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e122:	29 c2                	sub    edx,eax
c000e124:	eb 04                	jmp    c000e12a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e126:	39 c2                	cmp    edx,eax
c000e128:	7d 05                	jge    c000e12f <KeGetProcessEnvPair(Process*, int)+0x40>
c000e12a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e12d:	eb 20                	jmp    c000e14f <KeGetProcessEnvPair(Process*, int)+0x60>
c000e12f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e131:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e134:	39 d1                	cmp    ecx,edx
c000e136:	7e 04                	jle    c000e13c <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e138:	29 c2                	sub    edx,eax
c000e13a:	eb 10                	jmp    c000e14c <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e13c:	8b 35 dc b0 02 c0    	mov    esi,DWORD PTR ds:0xc002b0dc
c000e142:	03 0e                	add    ecx,DWORD PTR [esi]
c000e144:	39 d1                	cmp    ecx,edx
c000e146:	7e 16                	jle    c000e15e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e148:	29 c2                	sub    edx,eax
c000e14a:	29 fa                	sub    edx,edi
c000e14c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e14f:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e152:	8b 02                	mov    eax,DWORD PTR [edx]
c000e154:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e157:	89 03                	mov    DWORD PTR [ebx],eax
c000e159:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e15c:	eb 1d                	jmp    c000e17b <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e15e:	83 ec 0c             	sub    esp,0xc
c000e161:	68 62 31 02 c0       	push   0xc0023162
c000e166:	e8 73 15 00 00       	call   c000f6de <KePanic(char const*)>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e174:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e17b:	89 d8                	mov    eax,ebx
c000e17d:	5b                   	pop    ebx
c000e17e:	5e                   	pop    esi
c000e17f:	5f                   	pop    edi
c000e180:	c2 04 00             	ret    0x4
c000e183:	90                   	nop

c000e184 <KeSetupInterrupts()>:
c000e184:	83 ec 10             	sub    esp,0x10
c000e187:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e18f:	90                   	nop
c000e190:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e198:	7f 5a                	jg     c000e1f4 <KeSetupInterrupts()+0x70>
c000e19a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1a2:	66 90                	xchg   ax,ax
c000e1a4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e1a9:	7f 41                	jg     c000e1ec <KeSetupInterrupts()+0x68>
c000e1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1af:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e1b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1ba:	01 d0                	add    eax,edx
c000e1bc:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e1c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e1d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1d6:	01 d0                	add    eax,edx
c000e1d8:	c7 04 85 e0 b0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4f20],0x0
c000e1e3:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e1e8:	eb ba                	jmp    c000e1a4 <KeSetupInterrupts()+0x20>
c000e1ea:	66 90                	xchg   ax,ax
c000e1ec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e1f1:	eb 9d                	jmp    c000e190 <KeSetupInterrupts()+0xc>
c000e1f3:	90                   	nop
c000e1f4:	90                   	nop
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	c3                   	ret    
c000e1f9:	8d 76 00             	lea    esi,[esi+0x0]

c000e1fc <int_handler>:
c000e1fc:	83 ec 2c             	sub    esp,0x2c
c000e1ff:	90                   	nop
c000e200:	a0 28 d1 02 c0       	mov    al,ds:0xc002d128
c000e205:	0f b6 c0             	movzx  eax,al
c000e208:	85 c0                	test   eax,eax
c000e20a:	74 04                	je     c000e210 <int_handler+0x14>
c000e20c:	fa                   	cli    
c000e20d:	f4                   	hlt    
c000e20e:	eb f0                	jmp    c000e200 <int_handler+0x4>
c000e210:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e214:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e217:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e21b:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e220:	7e 1a                	jle    c000e23c <int_handler+0x40>
c000e222:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e227:	7f 13                	jg     c000e23c <int_handler+0x40>
c000e229:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e22d:	83 e8 20             	sub    eax,0x20
c000e230:	83 ec 0c             	sub    esp,0xc
c000e233:	50                   	push   eax
c000e234:	e8 41 b3 00 00       	call   c001957a <HalEndOfInterrupt(int)>
c000e239:	83 c4 10             	add    esp,0x10
c000e23c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e240:	c1 e0 04             	shl    eax,0x4
c000e243:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000e248:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e24c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e250:	c1 e0 04             	shl    eax,0x4
c000e253:	05 e0 b0 02 c0       	add    eax,0xc002b0e0
c000e258:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e25c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e264:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e269:	0f 8f ad 00 00 00    	jg     c000e31c <int_handler+0x120>
c000e26f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e273:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e27a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e27e:	01 d0                	add    eax,edx
c000e280:	8b 00                	mov    eax,DWORD PTR [eax]
c000e282:	85 c0                	test   eax,eax
c000e284:	0f 84 86 00 00 00    	je     c000e310 <int_handler+0x114>
c000e28a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e28e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e291:	83 f8 60             	cmp    eax,0x60
c000e294:	75 46                	jne    c000e2dc <int_handler+0xe0>
c000e296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e29a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e2a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e2a5:	01 d0                	add    eax,edx
c000e2a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2ad:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e2b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e2b8:	01 ca                	add    edx,ecx
c000e2ba:	8b 12                	mov    edx,DWORD PTR [edx]
c000e2bc:	83 ec 08             	sub    esp,0x8
c000e2bf:	52                   	push   edx
c000e2c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e2c4:	ff d0                	call   eax
c000e2c6:	83 c4 10             	add    esp,0x10
c000e2c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2d9:	eb 4d                	jmp    c000e328 <int_handler+0x12c>
c000e2db:	90                   	nop
c000e2dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e2e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e2e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e2eb:	01 d0                	add    eax,edx
c000e2ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2f3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e2fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e2fe:	01 ca                	add    edx,ecx
c000e300:	8b 12                	mov    edx,DWORD PTR [edx]
c000e302:	83 ec 08             	sub    esp,0x8
c000e305:	52                   	push   edx
c000e306:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e30a:	ff d0                	call   eax
c000e30c:	83 c4 10             	add    esp,0x10
c000e30f:	90                   	nop
c000e310:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000e315:	e9 4a ff ff ff       	jmp    c000e264 <int_handler+0x68>
c000e31a:	66 90                	xchg   ax,ax
c000e31c:	b8 00 00 00 00       	mov    eax,0x0
c000e321:	ba 00 00 00 00       	mov    edx,0x0
c000e326:	66 90                	xchg   ax,ax
c000e328:	83 c4 2c             	add    esp,0x2c
c000e32b:	c3                   	ret    

c000e32c <KeDisplayProgramFault(char const*)>:
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	83 ec 0c             	sub    esp,0xc
c000e332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e336:	e8 13 8c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e343:	8b 00                	mov    eax,DWORD PTR [eax]
c000e345:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e348:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e34e:	85 c0                	test   eax,eax
c000e350:	74 22                	je     c000e374 <KeDisplayProgramFault(char const*)+0x48>
c000e352:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e357:	8b 00                	mov    eax,DWORD PTR [eax]
c000e359:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e35c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e362:	6a 04                	push   0x4
c000e364:	6a 0f                	push   0xf
c000e366:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e36a:	50                   	push   eax
c000e36b:	e8 86 3b 00 00       	call   c0011ef6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e370:	83 c4 10             	add    esp,0x10
c000e373:	90                   	nop
c000e374:	90                   	nop
c000e375:	83 c4 0c             	add    esp,0xc
c000e378:	c3                   	ret    
c000e379:	8d 76 00             	lea    esi,[esi+0x0]

c000e37c <KeGeneralProtectionFault(void*, void*)>:
c000e37c:	83 ec 0c             	sub    esp,0xc
c000e37f:	83 ec 08             	sub    esp,0x8
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e38a:	e8 8d a7 00 00       	call   c0018b1c <HalHandleGeneralProtectionFault(void*, void*)>
c000e38f:	83 c4 10             	add    esp,0x10
c000e392:	0f b6 c0             	movzx  eax,al
c000e395:	85 c0                	test   eax,eax
c000e397:	75 2f                	jne    c000e3c8 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	68 7c 31 02 c0       	push   0xc002317c
c000e3a1:	e8 86 ff ff ff       	call   c000e32c <KeDisplayProgramFault(char const*)>
c000e3a6:	83 c4 10             	add    esp,0x10
c000e3a9:	83 ec 0c             	sub    esp,0xc
c000e3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b0:	e8 01 a9 00 00       	call   c0018cb6 <HalDisplayDebugInfo(void*)>
c000e3b5:	83 c4 10             	add    esp,0x10
c000e3b8:	83 ec 0c             	sub    esp,0xc
c000e3bb:	6a 00                	push   0x0
c000e3bd:	e8 ee 87 00 00       	call   c0016bb0 <Thr::terminateFromIRQ(int)>
c000e3c2:	83 c4 10             	add    esp,0x10
c000e3c5:	eb 05                	jmp    c000e3cc <KeGeneralProtectionFault(void*, void*)+0x50>
c000e3c7:	90                   	nop
c000e3c8:	90                   	nop
c000e3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3cc:	83 c4 0c             	add    esp,0xc
c000e3cf:	c3                   	ret    

c000e3d0 <KePageFault(void*, void*)>:
c000e3d0:	83 ec 0c             	sub    esp,0xc
c000e3d3:	83 ec 0c             	sub    esp,0xc
c000e3d6:	68 95 31 02 c0       	push   0xc0023195
c000e3db:	e8 6e 8b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e3e0:	83 c4 10             	add    esp,0x10
c000e3e3:	83 ec 08             	sub    esp,0x8
c000e3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ee:	e8 d4 a7 00 00       	call   c0018bc7 <HalHandlePageFault(void*, void*)>
c000e3f3:	83 c4 10             	add    esp,0x10
c000e3f6:	0f b6 c0             	movzx  eax,al
c000e3f9:	85 c0                	test   eax,eax
c000e3fb:	75 2f                	jne    c000e42c <KePageFault(void*, void*)+0x5c>
c000e3fd:	83 ec 0c             	sub    esp,0xc
c000e400:	68 a2 31 02 c0       	push   0xc00231a2
c000e405:	e8 22 ff ff ff       	call   c000e32c <KeDisplayProgramFault(char const*)>
c000e40a:	83 c4 10             	add    esp,0x10
c000e40d:	83 ec 0c             	sub    esp,0xc
c000e410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e414:	e8 9d a8 00 00       	call   c0018cb6 <HalDisplayDebugInfo(void*)>
c000e419:	83 c4 10             	add    esp,0x10
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	6a 00                	push   0x0
c000e421:	e8 8a 87 00 00       	call   c0016bb0 <Thr::terminateFromIRQ(int)>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	eb 05                	jmp    c000e430 <KePageFault(void*, void*)+0x60>
c000e42b:	90                   	nop
c000e42c:	90                   	nop
c000e42d:	8d 76 00             	lea    esi,[esi+0x0]
c000e430:	83 c4 0c             	add    esp,0xc
c000e433:	c3                   	ret    

c000e434 <KeNonMaskableInterrupt(void*, void*)>:
c000e434:	83 ec 0c             	sub    esp,0xc
c000e437:	e8 08 ac 00 00       	call   c0019044 <HalReceivedNMI()>
c000e43c:	90                   	nop
c000e43d:	83 c4 0c             	add    esp,0xc
c000e440:	c3                   	ret    
c000e441:	8d 76 00             	lea    esi,[esi+0x0]

c000e444 <KeOtherFault(void*, void*)>:
c000e444:	83 ec 0c             	sub    esp,0xc
c000e447:	83 ec 0c             	sub    esp,0xc
c000e44a:	68 b0 31 02 c0       	push   0xc00231b0
c000e44f:	e8 d8 fe ff ff       	call   c000e32c <KeDisplayProgramFault(char const*)>
c000e454:	83 c4 10             	add    esp,0x10
c000e457:	83 ec 0c             	sub    esp,0xc
c000e45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e45e:	e8 53 a8 00 00       	call   c0018cb6 <HalDisplayDebugInfo(void*)>
c000e463:	83 c4 10             	add    esp,0x10
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	6a 00                	push   0x0
c000e46b:	e8 40 87 00 00       	call   c0016bb0 <Thr::terminateFromIRQ(int)>
c000e470:	83 c4 10             	add    esp,0x10
c000e473:	90                   	nop
c000e474:	83 c4 0c             	add    esp,0xc
c000e477:	c3                   	ret    

c000e478 <KeOpcodeFault(void*, void*)>:
c000e478:	55                   	push   ebp
c000e479:	89 e5                	mov    ebp,esp
c000e47b:	83 ec 08             	sub    esp,0x8
c000e47e:	83 ec 08             	sub    esp,0x8
c000e481:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e484:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e487:	e8 e8 a7 00 00       	call   c0018c74 <HalHandleOpcodeFault(void*, void*)>
c000e48c:	83 c4 10             	add    esp,0x10
c000e48f:	0f b6 c0             	movzx  eax,al
c000e492:	85 c0                	test   eax,eax
c000e494:	75 2e                	jne    c000e4c4 <KeOpcodeFault(void*, void*)+0x4c>
c000e496:	83 ec 0c             	sub    esp,0xc
c000e499:	68 d8 31 02 c0       	push   0xc00231d8
c000e49e:	e8 89 fe ff ff       	call   c000e32c <KeDisplayProgramFault(char const*)>
c000e4a3:	83 c4 10             	add    esp,0x10
c000e4a6:	83 ec 0c             	sub    esp,0xc
c000e4a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e4ac:	e8 05 a8 00 00       	call   c0018cb6 <HalDisplayDebugInfo(void*)>
c000e4b1:	83 c4 10             	add    esp,0x10
c000e4b4:	83 ec 0c             	sub    esp,0xc
c000e4b7:	6a 00                	push   0x0
c000e4b9:	e8 f2 86 00 00       	call   c0016bb0 <Thr::terminateFromIRQ(int)>
c000e4be:	83 c4 10             	add    esp,0x10
c000e4c1:	eb 05                	jmp    c000e4c8 <KeOpcodeFault(void*, void*)+0x50>
c000e4c3:	90                   	nop
c000e4c4:	90                   	nop
c000e4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c8:	c9                   	leave  
c000e4c9:	c3                   	ret    
c000e4ca:	66 90                	xchg   ax,ax

c000e4cc <KeDoubleFault(void*, void*)>:
c000e4cc:	55                   	push   ebp
c000e4cd:	89 e5                	mov    ebp,esp
c000e4cf:	83 ec 08             	sub    esp,0x8
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	68 e5 31 02 c0       	push   0xc00231e5
c000e4da:	e8 ff 11 00 00       	call   c000f6de <KePanic(char const*)>
c000e4df:	83 c4 10             	add    esp,0x10
c000e4e2:	90                   	nop
c000e4e3:	c9                   	leave  
c000e4e4:	c3                   	ret    
c000e4e5:	90                   	nop

c000e4e6 <GDTEntry::setBase(unsigned int)>:
c000e4e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e4ee:	89 c1                	mov    ecx,eax
c000e4f0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e4f4:	c1 e9 10             	shr    ecx,0x10
c000e4f7:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e4fa:	c1 e8 18             	shr    eax,0x18
c000e4fd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e500:	c3                   	ret    
c000e501:	90                   	nop

c000e502 <GDTEntry::setLimit(unsigned int)>:
c000e502:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e506:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e50a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e50d:	66 89 01             	mov    WORD PTR [ecx],ax
c000e510:	c1 e8 10             	shr    eax,0x10
c000e513:	83 e0 0f             	and    eax,0xf
c000e516:	83 e2 f0             	and    edx,0xfffffff0
c000e519:	09 d0                	or     eax,edx
c000e51b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e51e:	c3                   	ret    
c000e51f:	90                   	nop

c000e520 <GDT::GDT()>:
c000e520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e524:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e52e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e534:	90                   	nop
c000e535:	c3                   	ret    

c000e536 <GDT::addEntry(GDTEntry)>:
c000e536:	53                   	push   ebx
c000e537:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e53b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e53f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e543:	8b 02                	mov    eax,DWORD PTR [edx]
c000e545:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e549:	8d 48 01             	lea    ecx,[eax+0x1]
c000e54c:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e550:	c1 e0 03             	shl    eax,0x3
c000e553:	89 0a                	mov    DWORD PTR [edx],ecx
c000e555:	5b                   	pop    ebx
c000e556:	c3                   	ret    
c000e557:	90                   	nop

c000e558 <GDT::getNumberOfEntries()>:
c000e558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e55c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e55e:	c3                   	ret    
c000e55f:	90                   	nop

c000e560 <GDT::flush()>:
c000e560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e564:	8b 10                	mov    edx,DWORD PTR [eax]
c000e566:	83 c0 04             	add    eax,0x4
c000e569:	a3 e2 d0 02 c0       	mov    ds:0xc002d0e2,eax
c000e56e:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e575:	66 89 15 e0 d0 02 c0 	mov    WORD PTR ds:0xc002d0e0,dx
c000e57c:	e9 d9 1d ff ff       	jmp    c000035a <loadGDT>
c000e581:	90                   	nop

c000e582 <GDT::setup()>:
c000e582:	57                   	push   edi
c000e583:	56                   	push   esi
c000e584:	53                   	push   ebx
c000e585:	83 ec 30             	sub    esp,0x30
c000e588:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e58c:	6a 00                	push   0x0
c000e58e:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e592:	56                   	push   esi
c000e593:	e8 4e ff ff ff       	call   c000e4e6 <GDTEntry::setBase(unsigned int)>
c000e598:	6a 00                	push   0x0
c000e59a:	56                   	push   esi
c000e59b:	e8 62 ff ff ff       	call   c000e502 <GDTEntry::setLimit(unsigned int)>
c000e5a0:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e5a8:	6a 00                	push   0x0
c000e5aa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e5ae:	56                   	push   esi
c000e5af:	e8 32 ff ff ff       	call   c000e4e6 <GDTEntry::setBase(unsigned int)>
c000e5b4:	68 ff ff ff 00       	push   0xffffff
c000e5b9:	56                   	push   esi
c000e5ba:	e8 43 ff ff ff       	call   c000e502 <GDTEntry::setLimit(unsigned int)>
c000e5bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e5c7:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e5cc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e5d0:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e5d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e5d9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e5dd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e5e1:	89 f8                	mov    eax,edi
c000e5e3:	89 fa                	mov    edx,edi
c000e5e5:	80 e4 f7             	and    ah,0xf7
c000e5e8:	80 ce 60             	or     dh,0x60
c000e5eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e5ef:	89 c7                	mov    edi,eax
c000e5f1:	80 cc 60             	or     ah,0x60
c000e5f4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5f8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e5fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e600:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e604:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e608:	83 c4 20             	add    esp,0x20
c000e60b:	6a 00                	push   0x0
c000e60d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e611:	50                   	push   eax
c000e612:	e8 cf fe ff ff       	call   c000e4e6 <GDTEntry::setBase(unsigned int)>
c000e617:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e61b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e61f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e623:	83 e0 3f             	and    eax,0x3f
c000e626:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e62a:	6a 00                	push   0x0
c000e62c:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e630:	50                   	push   eax
c000e631:	e8 b0 fe ff ff       	call   c000e4e6 <GDTEntry::setBase(unsigned int)>
c000e636:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e63a:	83 e0 3f             	and    eax,0x3f
c000e63d:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e641:	83 c4 0c             	add    esp,0xc
c000e644:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e648:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e64c:	53                   	push   ebx
c000e64d:	e8 e4 fe ff ff       	call   c000e536 <GDT::addEntry(GDTEntry)>
c000e652:	83 c4 0c             	add    esp,0xc
c000e655:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e659:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e65d:	53                   	push   ebx
c000e65e:	e8 d3 fe ff ff       	call   c000e536 <GDT::addEntry(GDTEntry)>
c000e663:	83 c4 0c             	add    esp,0xc
c000e666:	57                   	push   edi
c000e667:	56                   	push   esi
c000e668:	53                   	push   ebx
c000e669:	e8 c8 fe ff ff       	call   c000e536 <GDT::addEntry(GDTEntry)>
c000e66e:	83 c4 0c             	add    esp,0xc
c000e671:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e675:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e679:	53                   	push   ebx
c000e67a:	e8 b7 fe ff ff       	call   c000e536 <GDT::addEntry(GDTEntry)>
c000e67f:	83 c4 0c             	add    esp,0xc
c000e682:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e686:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e68a:	53                   	push   ebx
c000e68b:	e8 a6 fe ff ff       	call   c000e536 <GDT::addEntry(GDTEntry)>
c000e690:	83 c4 0c             	add    esp,0xc
c000e693:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e697:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e69b:	53                   	push   ebx
c000e69c:	e8 95 fe ff ff       	call   c000e536 <GDT::addEntry(GDTEntry)>
c000e6a1:	83 c4 0c             	add    esp,0xc
c000e6a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e6a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e6ac:	53                   	push   ebx
c000e6ad:	e8 84 fe ff ff       	call   c000e536 <GDT::addEntry(GDTEntry)>
c000e6b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6b5:	e8 a6 fe ff ff       	call   c000e560 <GDT::flush()>
c000e6ba:	83 c4 40             	add    esp,0x40
c000e6bd:	5b                   	pop    ebx
c000e6be:	5e                   	pop    esi
c000e6bf:	5f                   	pop    edi
c000e6c0:	c3                   	ret    

c000e6c1 <idleFunction(void*)>:
c000e6c1:	83 ec 0c             	sub    esp,0xc
c000e6c4:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000e6cb:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000e6d2:	75 01                	jne    c000e6d5 <idleFunction(void*)+0x14>
c000e6d4:	fb                   	sti    
c000e6d5:	e8 05 aa 00 00       	call   c00190df <HalSystemIdle()>
c000e6da:	e8 67 2c 01 00       	call   c0021346 <idleCommon()>
c000e6df:	eb f4                	jmp    c000e6d5 <idleFunction(void*)+0x14>
c000e6e1:	66 90                	xchg   ax,ax
c000e6e3:	90                   	nop

c000e6e4 <IDTEntry::IDTEntry(bool)>:
c000e6e4:	53                   	push   ebx
c000e6e5:	83 ec 04             	sub    esp,0x4
c000e6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ec:	88 04 24             	mov    BYTE PTR [esp],al
c000e6ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6f3:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e6f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6fd:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e705:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e708:	83 e2 f0             	and    edx,0xfffffff0
c000e70b:	83 ca 0e             	or     edx,0xe
c000e70e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e711:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e715:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e718:	83 e2 ef             	and    edx,0xffffffef
c000e71b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e71e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e722:	85 c0                	test   eax,eax
c000e724:	74 06                	je     c000e72c <IDTEntry::IDTEntry(bool)+0x48>
c000e726:	b2 03                	mov    dl,0x3
c000e728:	eb 06                	jmp    c000e730 <IDTEntry::IDTEntry(bool)+0x4c>
c000e72a:	66 90                	xchg   ax,ax
c000e72c:	b2 00                	mov    dl,0x0
c000e72e:	66 90                	xchg   ax,ax
c000e730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e734:	83 e2 03             	and    edx,0x3
c000e737:	89 d3                	mov    ebx,edx
c000e739:	c1 e3 05             	shl    ebx,0x5
c000e73c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e73f:	83 e2 9f             	and    edx,0xffffff9f
c000e742:	88 d1                	mov    cl,dl
c000e744:	88 da                	mov    dl,bl
c000e746:	09 ca                	or     edx,ecx
c000e748:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e74b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e74f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e752:	83 ca 80             	or     edx,0xffffff80
c000e755:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e758:	90                   	nop
c000e759:	83 c4 04             	add    esp,0x4
c000e75c:	5b                   	pop    ebx
c000e75d:	c3                   	ret    

c000e75e <IDTEntry::setOffset(unsigned int)>:
c000e75e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e766:	66 89 02             	mov    WORD PTR [edx],ax
c000e769:	c1 e8 10             	shr    eax,0x10
c000e76c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e770:	c3                   	ret    
c000e771:	90                   	nop
c000e772:	66 90                	xchg   ax,ax

c000e774 <IDT::IDT()>:
c000e774:	90                   	nop
c000e775:	c3                   	ret    

c000e776 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e77a:	83 c0 30             	add    eax,0x30
c000e77d:	c3                   	ret    

c000e77e <IDT::addEntry(IDTEntry, int)>:
c000e77e:	53                   	push   ebx
c000e77f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e783:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e787:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e78b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e78f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e792:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e796:	5b                   	pop    ebx
c000e797:	c3                   	ret    

c000e798 <IDT::addEntry(int, void (*)(), bool)>:
c000e798:	53                   	push   ebx
c000e799:	83 ec 10             	sub    esp,0x10
c000e79c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e7a1:	50                   	push   eax
c000e7a2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e7a6:	53                   	push   ebx
c000e7a7:	e8 38 ff ff ff       	call   c000e6e4 <IDTEntry::IDTEntry(bool)>
c000e7ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e7b0:	53                   	push   ebx
c000e7b1:	e8 a8 ff ff ff       	call   c000e75e <IDTEntry::setOffset(unsigned int)>
c000e7b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e7be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e7c6:	e8 b3 ff ff ff       	call   c000e77e <IDT::addEntry(IDTEntry, int)>
c000e7cb:	83 c4 30             	add    esp,0x30
c000e7ce:	5b                   	pop    ebx
c000e7cf:	c3                   	ret    

c000e7d0 <IDT::flush()>:
c000e7d0:	66 c7 05 e8 d0 02 c0 ff 07 	mov    WORD PTR ds:0xc002d0e8,0x7ff
c000e7d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7dd:	a3 ea d0 02 c0       	mov    ds:0xc002d0ea,eax
c000e7e2:	0f 01 1d e8 d0 02 c0 	lidtd  ds:0xc002d0e8
c000e7e9:	c3                   	ret    

c000e7ea <IDT::setup()>:
c000e7ea:	57                   	push   edi
c000e7eb:	56                   	push   esi
c000e7ec:	53                   	push   ebx
c000e7ed:	83 ec 10             	sub    esp,0x10
c000e7f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e7f4:	6a 00                	push   0x0
c000e7f6:	68 f0 05 02 c0       	push   0xc00205f0
c000e7fb:	6a 00                	push   0x0
c000e7fd:	53                   	push   ebx
c000e7fe:	e8 95 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e803:	6a 00                	push   0x0
c000e805:	68 00 06 02 c0       	push   0xc0020600
c000e80a:	6a 01                	push   0x1
c000e80c:	53                   	push   ebx
c000e80d:	e8 86 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e812:	83 c4 20             	add    esp,0x20
c000e815:	6a 00                	push   0x0
c000e817:	68 0a 06 02 c0       	push   0xc002060a
c000e81c:	6a 02                	push   0x2
c000e81e:	53                   	push   ebx
c000e81f:	e8 74 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e824:	6a 00                	push   0x0
c000e826:	68 14 06 02 c0       	push   0xc0020614
c000e82b:	6a 03                	push   0x3
c000e82d:	53                   	push   ebx
c000e82e:	e8 65 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e833:	83 c4 20             	add    esp,0x20
c000e836:	6a 00                	push   0x0
c000e838:	68 1e 06 02 c0       	push   0xc002061e
c000e83d:	6a 04                	push   0x4
c000e83f:	53                   	push   ebx
c000e840:	e8 53 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e845:	6a 00                	push   0x0
c000e847:	68 28 06 02 c0       	push   0xc0020628
c000e84c:	6a 05                	push   0x5
c000e84e:	53                   	push   ebx
c000e84f:	e8 44 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e854:	83 c4 20             	add    esp,0x20
c000e857:	6a 00                	push   0x0
c000e859:	68 32 06 02 c0       	push   0xc0020632
c000e85e:	6a 06                	push   0x6
c000e860:	53                   	push   ebx
c000e861:	e8 32 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e866:	6a 00                	push   0x0
c000e868:	68 3c 06 02 c0       	push   0xc002063c
c000e86d:	6a 07                	push   0x7
c000e86f:	53                   	push   ebx
c000e870:	e8 23 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e875:	83 c4 20             	add    esp,0x20
c000e878:	6a 00                	push   0x0
c000e87a:	68 46 06 02 c0       	push   0xc0020646
c000e87f:	6a 08                	push   0x8
c000e881:	53                   	push   ebx
c000e882:	e8 11 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e887:	6a 00                	push   0x0
c000e889:	68 4e 06 02 c0       	push   0xc002064e
c000e88e:	6a 09                	push   0x9
c000e890:	53                   	push   ebx
c000e891:	e8 02 ff ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e896:	83 c4 20             	add    esp,0x20
c000e899:	6a 00                	push   0x0
c000e89b:	68 58 06 02 c0       	push   0xc0020658
c000e8a0:	6a 0a                	push   0xa
c000e8a2:	53                   	push   ebx
c000e8a3:	e8 f0 fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e8a8:	6a 00                	push   0x0
c000e8aa:	68 60 06 02 c0       	push   0xc0020660
c000e8af:	6a 0b                	push   0xb
c000e8b1:	53                   	push   ebx
c000e8b2:	e8 e1 fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e8b7:	83 c4 20             	add    esp,0x20
c000e8ba:	6a 00                	push   0x0
c000e8bc:	68 68 06 02 c0       	push   0xc0020668
c000e8c1:	6a 0c                	push   0xc
c000e8c3:	53                   	push   ebx
c000e8c4:	e8 cf fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e8c9:	6a 00                	push   0x0
c000e8cb:	68 70 06 02 c0       	push   0xc0020670
c000e8d0:	6a 0d                	push   0xd
c000e8d2:	53                   	push   ebx
c000e8d3:	e8 c0 fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e8d8:	83 c4 20             	add    esp,0x20
c000e8db:	6a 00                	push   0x0
c000e8dd:	68 8a 06 02 c0       	push   0xc002068a
c000e8e2:	6a 0e                	push   0xe
c000e8e4:	53                   	push   ebx
c000e8e5:	e8 ae fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e8ea:	6a 00                	push   0x0
c000e8ec:	68 92 06 02 c0       	push   0xc0020692
c000e8f1:	6a 0f                	push   0xf
c000e8f3:	53                   	push   ebx
c000e8f4:	e8 9f fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e8f9:	83 c4 20             	add    esp,0x20
c000e8fc:	6a 00                	push   0x0
c000e8fe:	68 9c 06 02 c0       	push   0xc002069c
c000e903:	6a 10                	push   0x10
c000e905:	53                   	push   ebx
c000e906:	e8 8d fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e90b:	6a 00                	push   0x0
c000e90d:	68 a6 06 02 c0       	push   0xc00206a6
c000e912:	6a 11                	push   0x11
c000e914:	53                   	push   ebx
c000e915:	e8 7e fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e91a:	83 c4 20             	add    esp,0x20
c000e91d:	6a 00                	push   0x0
c000e91f:	68 b0 06 02 c0       	push   0xc00206b0
c000e924:	6a 12                	push   0x12
c000e926:	53                   	push   ebx
c000e927:	e8 6c fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e92c:	6a 01                	push   0x1
c000e92e:	68 4a 07 02 c0       	push   0xc002074a
c000e933:	6a 60                	push   0x60
c000e935:	53                   	push   ebx
c000e936:	e8 5d fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e93b:	83 c4 20             	add    esp,0x20
c000e93e:	6a 00                	push   0x0
c000e940:	68 51 07 02 c0       	push   0xc0020751
c000e945:	6a 20                	push   0x20
c000e947:	53                   	push   ebx
c000e948:	e8 4b fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e94d:	6a 00                	push   0x0
c000e94f:	68 3c 07 02 c0       	push   0xc002073c
c000e954:	6a 21                	push   0x21
c000e956:	53                   	push   ebx
c000e957:	e8 3c fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e95c:	83 c4 20             	add    esp,0x20
c000e95f:	6a 00                	push   0x0
c000e961:	68 43 07 02 c0       	push   0xc0020743
c000e966:	6a 22                	push   0x22
c000e968:	53                   	push   ebx
c000e969:	e8 2a fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e96e:	6a 00                	push   0x0
c000e970:	68 ba 06 02 c0       	push   0xc00206ba
c000e975:	6a 23                	push   0x23
c000e977:	53                   	push   ebx
c000e978:	e8 1b fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e97d:	83 c4 20             	add    esp,0x20
c000e980:	6a 00                	push   0x0
c000e982:	68 c4 06 02 c0       	push   0xc00206c4
c000e987:	6a 24                	push   0x24
c000e989:	53                   	push   ebx
c000e98a:	e8 09 fe ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e98f:	6a 00                	push   0x0
c000e991:	68 ce 06 02 c0       	push   0xc00206ce
c000e996:	6a 25                	push   0x25
c000e998:	53                   	push   ebx
c000e999:	e8 fa fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e99e:	83 c4 20             	add    esp,0x20
c000e9a1:	6a 00                	push   0x0
c000e9a3:	68 d8 06 02 c0       	push   0xc00206d8
c000e9a8:	6a 26                	push   0x26
c000e9aa:	53                   	push   ebx
c000e9ab:	e8 e8 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e9b0:	6a 00                	push   0x0
c000e9b2:	68 e2 06 02 c0       	push   0xc00206e2
c000e9b7:	6a 27                	push   0x27
c000e9b9:	53                   	push   ebx
c000e9ba:	e8 d9 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e9bf:	83 c4 20             	add    esp,0x20
c000e9c2:	6a 00                	push   0x0
c000e9c4:	68 ec 06 02 c0       	push   0xc00206ec
c000e9c9:	6a 28                	push   0x28
c000e9cb:	53                   	push   ebx
c000e9cc:	e8 c7 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e9d1:	6a 00                	push   0x0
c000e9d3:	68 f6 06 02 c0       	push   0xc00206f6
c000e9d8:	6a 29                	push   0x29
c000e9da:	53                   	push   ebx
c000e9db:	e8 b8 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e9e0:	83 c4 20             	add    esp,0x20
c000e9e3:	6a 00                	push   0x0
c000e9e5:	68 00 07 02 c0       	push   0xc0020700
c000e9ea:	6a 2a                	push   0x2a
c000e9ec:	53                   	push   ebx
c000e9ed:	e8 a6 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000e9f2:	6a 00                	push   0x0
c000e9f4:	68 0a 07 02 c0       	push   0xc002070a
c000e9f9:	6a 2b                	push   0x2b
c000e9fb:	53                   	push   ebx
c000e9fc:	e8 97 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea01:	83 c4 20             	add    esp,0x20
c000ea04:	6a 00                	push   0x0
c000ea06:	68 14 07 02 c0       	push   0xc0020714
c000ea0b:	6a 2c                	push   0x2c
c000ea0d:	53                   	push   ebx
c000ea0e:	e8 85 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea13:	6a 00                	push   0x0
c000ea15:	68 1e 07 02 c0       	push   0xc002071e
c000ea1a:	6a 2d                	push   0x2d
c000ea1c:	53                   	push   ebx
c000ea1d:	e8 76 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea22:	83 c4 20             	add    esp,0x20
c000ea25:	6a 00                	push   0x0
c000ea27:	68 28 07 02 c0       	push   0xc0020728
c000ea2c:	6a 2e                	push   0x2e
c000ea2e:	53                   	push   ebx
c000ea2f:	e8 64 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea34:	6a 00                	push   0x0
c000ea36:	68 32 07 02 c0       	push   0xc0020732
c000ea3b:	6a 2f                	push   0x2f
c000ea3d:	53                   	push   ebx
c000ea3e:	e8 55 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea43:	83 c4 20             	add    esp,0x20
c000ea46:	6a 00                	push   0x0
c000ea48:	68 8c 08 02 c0       	push   0xc002088c
c000ea4d:	6a 30                	push   0x30
c000ea4f:	53                   	push   ebx
c000ea50:	e8 43 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea55:	6a 00                	push   0x0
c000ea57:	68 96 08 02 c0       	push   0xc0020896
c000ea5c:	6a 31                	push   0x31
c000ea5e:	53                   	push   ebx
c000ea5f:	e8 34 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea64:	83 c4 20             	add    esp,0x20
c000ea67:	6a 00                	push   0x0
c000ea69:	68 a0 08 02 c0       	push   0xc00208a0
c000ea6e:	6a 32                	push   0x32
c000ea70:	53                   	push   ebx
c000ea71:	e8 22 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea76:	6a 00                	push   0x0
c000ea78:	68 aa 08 02 c0       	push   0xc00208aa
c000ea7d:	6a 33                	push   0x33
c000ea7f:	53                   	push   ebx
c000ea80:	e8 13 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea85:	83 c4 20             	add    esp,0x20
c000ea88:	6a 00                	push   0x0
c000ea8a:	68 b4 08 02 c0       	push   0xc00208b4
c000ea8f:	6a 34                	push   0x34
c000ea91:	53                   	push   ebx
c000ea92:	e8 01 fd ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000ea97:	6a 00                	push   0x0
c000ea99:	68 be 08 02 c0       	push   0xc00208be
c000ea9e:	6a 35                	push   0x35
c000eaa0:	53                   	push   ebx
c000eaa1:	e8 f2 fc ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000eaa6:	83 c4 20             	add    esp,0x20
c000eaa9:	6a 00                	push   0x0
c000eaab:	68 c8 08 02 c0       	push   0xc00208c8
c000eab0:	6a 36                	push   0x36
c000eab2:	53                   	push   ebx
c000eab3:	e8 e0 fc ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000eab8:	6a 00                	push   0x0
c000eaba:	68 d2 08 02 c0       	push   0xc00208d2
c000eabf:	6a 37                	push   0x37
c000eac1:	53                   	push   ebx
c000eac2:	e8 d1 fc ff ff       	call   c000e798 <IDT::addEntry(int, void (*)(), bool)>
c000eac7:	83 c4 1c             	add    esp,0x1c
c000eaca:	6a 03                	push   0x3
c000eacc:	6a 02                	push   0x2
c000eace:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000ead4:	e8 a5 47 00 00       	call   c001327e <VAS::allocatePages(int, int)>
c000ead9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000eae0:	89 c6                	mov    esi,eax
c000eae2:	e8 b1 08 00 00       	call   c000f398 <malloc>
c000eae7:	81 c6 00 20 00 00    	add    esi,0x2000
c000eaed:	89 04 24             	mov    DWORD PTR [esp],eax
c000eaf0:	89 c7                	mov    edi,eax
c000eaf2:	e8 49 38 00 00       	call   c0012340 <TSS::TSS()>
c000eaf7:	83 c4 0c             	add    esp,0xc
c000eafa:	68 46 06 02 c0       	push   0xc0020646
c000eaff:	56                   	push   esi
c000eb00:	57                   	push   edi
c000eb01:	e8 7e 38 00 00       	call   c0012384 <TSS::setup(unsigned long, unsigned long)>
c000eb06:	89 c6                	mov    esi,eax
c000eb08:	58                   	pop    eax
c000eb09:	5a                   	pop    edx
c000eb0a:	6a 00                	push   0x0
c000eb0c:	8d 44 24 14          	lea    eax,[esp+0x14]
c000eb10:	50                   	push   eax
c000eb11:	e8 ce fb ff ff       	call   c000e6e4 <IDTEntry::IDTEntry(bool)>
c000eb16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb1a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000eb1f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000eb26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb2a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000eb30:	80 ce 05             	or     dh,0x5
c000eb33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000eb37:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000eb3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb3e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000eb41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb44:	e8 87 fc ff ff       	call   c000e7d0 <IDT::flush()>
c000eb49:	83 c4 20             	add    esp,0x20
c000eb4c:	5b                   	pop    ebx
c000eb4d:	5e                   	pop    esi
c000eb4e:	5f                   	pop    edi
c000eb4f:	c3                   	ret    

c000eb50 <CPU::current()>:
c000eb50:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000eb55:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eb5b:	c3                   	ret    

c000eb5c <operator new(unsigned long)>:
c000eb5c:	e9 37 08 00 00       	jmp    c000f398 <malloc>

c000eb61 <operator delete(void*)>:
c000eb61:	e9 52 08 00 00       	jmp    c000f3b8 <rfree>

c000eb66 <disableIRQs()>:
c000eb66:	fa                   	cli    
c000eb67:	c3                   	ret    

c000eb68 <enableIRQs()>:
c000eb68:	fb                   	sti    
c000eb69:	c3                   	ret    

c000eb6a <lockScheduler()>:
c000eb6a:	fa                   	cli    
c000eb6b:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c000eb71:	c3                   	ret    

c000eb72 <unlockScheduler()>:
c000eb72:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000eb79:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000eb80:	75 01                	jne    c000eb83 <unlockScheduler()+0x11>
c000eb82:	fb                   	sti    
c000eb83:	c3                   	ret    

c000eb84 <lockStuff()>:
c000eb84:	fa                   	cli    
c000eb85:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c000eb8b:	ff 05 2c da 02 c0    	inc    DWORD PTR ds:0xc002da2c
c000eb91:	c3                   	ret    

c000eb92 <unlockStuff()>:
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c000eb9a:	48                   	dec    eax
c000eb9b:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c000eba0:	75 18                	jne    c000ebba <unlockStuff()+0x28>
c000eba2:	83 3d 28 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da28,0x0
c000eba9:	74 0f                	je     c000ebba <unlockStuff()+0x28>
c000ebab:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c000ebb5:	e8 46 77 00 00       	call   c0016300 <schedule()>
c000ebba:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000ebc1:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000ebc8:	75 01                	jne    c000ebcb <unlockStuff()+0x39>
c000ebca:	fb                   	sti    
c000ebcb:	83 c4 0c             	add    esp,0xc
c000ebce:	c3                   	ret    

c000ebcf <Virt::getAKernelVAS()>:
c000ebcf:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c000ebd4:	c3                   	ret    

c000ebd5 <__not_memcpy>:
c000ebd5:	57                   	push   edi
c000ebd6:	56                   	push   esi
c000ebd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ebdf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebe3:	89 c7                	mov    edi,eax
c000ebe5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ebe7:	5e                   	pop    esi
c000ebe8:	5f                   	pop    edi
c000ebe9:	c3                   	ret    

c000ebea <KeFormatDate(char*, int, int, int, int, bool)>:
c000ebea:	55                   	push   ebp
c000ebeb:	57                   	push   edi
c000ebec:	56                   	push   esi
c000ebed:	be e8 03 00 00       	mov    esi,0x3e8
c000ebf2:	53                   	push   ebx
c000ebf3:	bb 0a 00 00 00       	mov    ebx,0xa
c000ebf8:	81 ec ac 00 00 00    	sub    esp,0xac
c000ebfe:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000ec03:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000ec0a:	89 c8                	mov    eax,ecx
c000ec0c:	99                   	cdq    
c000ec0d:	f7 fb                	idiv   ebx
c000ec0f:	89 d5                	mov    ebp,edx
c000ec11:	99                   	cdq    
c000ec12:	f7 fb                	idiv   ebx
c000ec14:	8d 42 30             	lea    eax,[edx+0x30]
c000ec17:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ec1b:	8d 45 30             	lea    eax,[ebp+0x30]
c000ec1e:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000ec26:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000ec2a:	89 c8                	mov    eax,ecx
c000ec2c:	99                   	cdq    
c000ec2d:	f7 fe                	idiv   esi
c000ec2f:	be 64 00 00 00       	mov    esi,0x64
c000ec34:	99                   	cdq    
c000ec35:	f7 fb                	idiv   ebx
c000ec37:	8d 42 30             	lea    eax,[edx+0x30]
c000ec3a:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000ec3e:	89 c8                	mov    eax,ecx
c000ec40:	99                   	cdq    
c000ec41:	f7 fe                	idiv   esi
c000ec43:	99                   	cdq    
c000ec44:	f7 fb                	idiv   ebx
c000ec46:	31 db                	xor    ebx,ebx
c000ec48:	8d 42 30             	lea    eax,[edx+0x30]
c000ec4b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ec4f:	0f be 8b 04 d1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd2efc]
c000ec56:	83 f9 59             	cmp    ecx,0x59
c000ec59:	0f 84 1f 01 00 00    	je     c000ed7e <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000ec5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ec63:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000ec6a:	83 f9 4d             	cmp    ecx,0x4d
c000ec6d:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000ec75:	57                   	push   edi
c000ec76:	57                   	push   edi
c000ec77:	89 d7                	mov    edi,edx
c000ec79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ec7d:	c1 ff 1f             	sar    edi,0x1f
c000ec80:	57                   	push   edi
c000ec81:	52                   	push   edx
c000ec82:	e8 6d 04 00 00       	call   c000f0f4 <KeGetDigitsInNumber(long long)>
c000ec87:	83 c4 10             	add    esp,0x10
c000ec8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec8e:	48                   	dec    eax
c000ec8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec93:	75 1c                	jne    c000ecb1 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000ec95:	83 f9 44             	cmp    ecx,0x44
c000ec98:	75 09                	jne    c000eca3 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000ec9a:	80 3d 20 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d120,0x0
c000eca1:	eb 0c                	jmp    c000ecaf <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000eca3:	83 f9 4d             	cmp    ecx,0x4d
c000eca6:	75 60                	jne    c000ed08 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000eca8:	80 3d 21 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d121,0x0
c000ecaf:	74 57                	je     c000ed08 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000ecb1:	89 d0                	mov    eax,edx
c000ecb3:	b9 0a 00 00 00       	mov    ecx,0xa
c000ecb8:	99                   	cdq    
c000ecb9:	f7 f9                	idiv   ecx
c000ecbb:	89 d6                	mov    esi,edx
c000ecbd:	99                   	cdq    
c000ecbe:	f7 f9                	idiv   ecx
c000ecc0:	83 c2 30             	add    edx,0x30
c000ecc3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ecc7:	8d 56 30             	lea    edx,[esi+0x30]
c000ecca:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000ecce:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000ecd3:	56                   	push   esi
c000ecd4:	56                   	push   esi
c000ecd5:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000ecd9:	57                   	push   edi
c000ecda:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ecde:	56                   	push   esi
c000ecdf:	e8 8c 1b ff ff       	call   c0000870 <strcat>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	83 fb 02             	cmp    ebx,0x2
c000ecea:	74 34                	je     c000ed20 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000ecec:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000ecf1:	a0 08 d1 02 c0       	mov    al,ds:0xc002d108
c000ecf6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000ecfa:	51                   	push   ecx
c000ecfb:	51                   	push   ecx
c000ecfc:	57                   	push   edi
c000ecfd:	56                   	push   esi
c000ecfe:	e8 6d 1b ff ff       	call   c0000870 <strcat>
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	eb 18                	jmp    c000ed20 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000ed08:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000ed0d:	89 d0                	mov    eax,edx
c000ed0f:	b9 0a 00 00 00       	mov    ecx,0xa
c000ed14:	99                   	cdq    
c000ed15:	f7 f9                	idiv   ecx
c000ed17:	83 c2 30             	add    edx,0x30
c000ed1a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ed1e:	eb b3                	jmp    c000ecd3 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000ed20:	43                   	inc    ebx
c000ed21:	83 fb 03             	cmp    ebx,0x3
c000ed24:	0f 85 25 ff ff ff    	jne    c000ec4f <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000ed2a:	52                   	push   edx
c000ed2b:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000ed32:	6a 00                	push   0x0
c000ed34:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000ed3b:	e8 b0 17 ff ff       	call   c00004f0 <memset>
c000ed40:	89 34 24             	mov    DWORD PTR [esp],esi
c000ed43:	e8 38 18 ff ff       	call   c0000580 <strlen>
c000ed48:	83 c4 10             	add    esp,0x10
c000ed4b:	40                   	inc    eax
c000ed4c:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000ed53:	72 14                	jb     c000ed69 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000ed55:	50                   	push   eax
c000ed56:	50                   	push   eax
c000ed57:	56                   	push   esi
c000ed58:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000ed5f:	e8 ec 18 ff ff       	call   c0000650 <strcpy>
c000ed64:	83 c4 10             	add    esp,0x10
c000ed67:	eb 58                	jmp    c000edc1 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000ed69:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000ed70:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000ed77:	8d 48 ff             	lea    ecx,[eax-0x1]
c000ed7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ed7c:	eb 43                	jmp    c000edc1 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000ed7e:	85 ed                	test   ebp,ebp
c000ed80:	74 2a                	je     c000edac <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000ed82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed87:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000ed8b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000ed8f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ed93:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000ed97:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ed9b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000ed9f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000eda3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000eda7:	e9 27 ff ff ff       	jmp    c000ecd3 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000edac:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000edb0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000edb4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000edb8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000edbc:	e9 0d ff ff ff       	jmp    c000ecce <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000edc1:	81 c4 ac 00 00 00    	add    esp,0xac
c000edc7:	5b                   	pop    ebx
c000edc8:	5e                   	pop    esi
c000edc9:	5f                   	pop    edi
c000edca:	5d                   	pop    ebp
c000edcb:	c3                   	ret    

c000edcc <KeFormatShortDate(char*, int, int, int, int)>:
c000edcc:	83 ec 14             	sub    esp,0x14
c000edcf:	6a 00                	push   0x0
c000edd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000edd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000edd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eddd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ede1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ede5:	e8 00 fe ff ff       	call   c000ebea <KeFormatDate(char*, int, int, int, int, bool)>
c000edea:	83 c4 2c             	add    esp,0x2c
c000eded:	c3                   	ret    

c000edee <KeFormatLongDate(char*, int, int, int, int)>:
c000edee:	83 ec 14             	sub    esp,0x14
c000edf1:	6a 01                	push   0x1
c000edf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000edf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000edfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000edff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ee03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ee07:	e8 de fd ff ff       	call   c000ebea <KeFormatDate(char*, int, int, int, int, bool)>
c000ee0c:	83 c4 2c             	add    esp,0x2c
c000ee0f:	c3                   	ret    

c000ee10 <KeSetLocale(klocale_t)>:
c000ee10:	57                   	push   edi
c000ee11:	b9 09 00 00 00       	mov    ecx,0x9
c000ee16:	56                   	push   esi
c000ee17:	bf 00 d1 02 c0       	mov    edi,0xc002d100
c000ee1c:	fc                   	cld    
c000ee1d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ee21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee23:	5e                   	pop    esi
c000ee24:	5f                   	pop    edi
c000ee25:	c3                   	ret    

c000ee26 <KeInitialiseLocale()>:
c000ee26:	57                   	push   edi
c000ee27:	56                   	push   esi
c000ee28:	83 ec 3c             	sub    esp,0x3c
c000ee2b:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000ee33:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000ee3b:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000ee43:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000ee4b:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000ee52:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000ee5a:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ee62:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000ee69:	68 f2 31 02 c0       	push   0xc00231f2
c000ee6e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000ee72:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ee76:	50                   	push   eax
c000ee77:	e8 d4 17 ff ff       	call   c0000650 <strcpy>
c000ee7c:	83 ec 20             	sub    esp,0x20
c000ee7f:	b9 09 00 00 00       	mov    ecx,0x9
c000ee84:	fc                   	cld    
c000ee85:	89 e7                	mov    edi,esp
c000ee87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee89:	e8 82 ff ff ff       	call   c000ee10 <KeSetLocale(klocale_t)>
c000ee8e:	83 c4 64             	add    esp,0x64
c000ee91:	5e                   	pop    esi
c000ee92:	5f                   	pop    edi
c000ee93:	c3                   	ret    

c000ee94 <KeFormatCurrency(char*, int, long long, long long)>:
c000ee94:	c3                   	ret    

c000ee95 <KeFormatCurrency(char*, int, double)>:
c000ee95:	c3                   	ret    

c000ee96 <KeFormatNumber(char*, long long, long long)>:
c000ee96:	c3                   	ret    

c000ee97 <KeFormatNumber(char*, double)>:
c000ee97:	c3                   	ret    

c000ee98 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000ee98:	55                   	push   ebp
c000ee99:	57                   	push   edi
c000ee9a:	56                   	push   esi
c000ee9b:	53                   	push   ebx
c000ee9c:	83 ec 4c             	sub    esp,0x4c
c000ee9f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eea7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000eeab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eeaf:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000eeb7:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000eebf:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000eec7:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000eecf:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000eed4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000eed8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eedc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eee4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eee8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000eeec:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000eef1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000eef5:	89 c2                	mov    edx,eax
c000eef7:	c1 fa 1f             	sar    edx,0x1f
c000eefa:	52                   	push   edx
c000eefb:	50                   	push   eax
c000eefc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef04:	e8 6b 1d 01 00       	call   c0020c74 <__udivdi3>
c000ef09:	83 c4 10             	add    esp,0x10
c000ef0c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef10:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ef14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef18:	80 f4 00             	xor    ah,0x0
c000ef1b:	89 c7                	mov    edi,eax
c000ef1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ef21:	80 f4 00             	xor    ah,0x0
c000ef24:	89 c5                	mov    ebp,eax
c000ef26:	89 e8                	mov    eax,ebp
c000ef28:	09 f8                	or     eax,edi
c000ef2a:	74 04                	je     c000ef30 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000ef2c:	eb be                	jmp    c000eeec <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000ef2e:	66 90                	xchg   ax,ax
c000ef30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef34:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ef37:	90                   	nop
c000ef38:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ef3c:	89 c7                	mov    edi,eax
c000ef3e:	89 c5                	mov    ebp,eax
c000ef40:	c1 fd 1f             	sar    ebp,0x1f
c000ef43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef4b:	55                   	push   ebp
c000ef4c:	57                   	push   edi
c000ef4d:	52                   	push   edx
c000ef4e:	50                   	push   eax
c000ef4f:	e8 20 1e 01 00       	call   c0020d74 <__umoddi3>
c000ef54:	83 c4 10             	add    esp,0x10
c000ef57:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000ef5c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000ef60:	01 c8                	add    eax,ecx
c000ef62:	8a 10                	mov    dl,BYTE PTR [eax]
c000ef64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef68:	88 10                	mov    BYTE PTR [eax],dl
c000ef6a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000ef6e:	89 c2                	mov    edx,eax
c000ef70:	c1 fa 1f             	sar    edx,0x1f
c000ef73:	52                   	push   edx
c000ef74:	50                   	push   eax
c000ef75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef7d:	e8 f2 1c 01 00       	call   c0020c74 <__udivdi3>
c000ef82:	83 c4 10             	add    esp,0x10
c000ef85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef91:	80 f4 00             	xor    ah,0x0
c000ef94:	89 c3                	mov    ebx,eax
c000ef96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef9a:	80 f4 00             	xor    ah,0x0
c000ef9d:	89 c6                	mov    esi,eax
c000ef9f:	89 f0                	mov    eax,esi
c000efa1:	09 d8                	or     eax,ebx
c000efa3:	74 03                	je     c000efa8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000efa5:	eb 91                	jmp    c000ef38 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000efa7:	90                   	nop
c000efa8:	90                   	nop
c000efa9:	83 c4 4c             	add    esp,0x4c
c000efac:	5b                   	pop    ebx
c000efad:	5e                   	pop    esi
c000efae:	5f                   	pop    edi
c000efaf:	5d                   	pop    ebp
c000efb0:	c3                   	ret    
c000efb1:	8d 76 00             	lea    esi,[esi+0x0]

c000efb4 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000efb4:	55                   	push   ebp
c000efb5:	57                   	push   edi
c000efb6:	56                   	push   esi
c000efb7:	53                   	push   ebx
c000efb8:	83 ec 4c             	sub    esp,0x4c
c000efbb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efc3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000efc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efcb:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000efd3:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000efdb:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000efe3:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000efeb:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000eff0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000eff4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eff8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000effd:	79 1d                	jns    c000f01c <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000efff:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f003:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f008:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f00c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f010:	8d 50 01             	lea    edx,[eax+0x1]
c000f013:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f017:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f01a:	66 90                	xchg   ax,ax
c000f01c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f020:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f024:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f028:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f02c:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f031:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f035:	89 c2                	mov    edx,eax
c000f037:	c1 fa 1f             	sar    edx,0x1f
c000f03a:	52                   	push   edx
c000f03b:	50                   	push   eax
c000f03c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f040:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f044:	e8 2b 1c 01 00       	call   c0020c74 <__udivdi3>
c000f049:	83 c4 10             	add    esp,0x10
c000f04c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f050:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f054:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f058:	80 f4 00             	xor    ah,0x0
c000f05b:	89 c7                	mov    edi,eax
c000f05d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f061:	80 f4 00             	xor    ah,0x0
c000f064:	89 c5                	mov    ebp,eax
c000f066:	89 e8                	mov    eax,ebp
c000f068:	09 f8                	or     eax,edi
c000f06a:	74 04                	je     c000f070 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f06c:	eb be                	jmp    c000f02c <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f06e:	66 90                	xchg   ax,ax
c000f070:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f074:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f077:	90                   	nop
c000f078:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f07c:	89 c7                	mov    edi,eax
c000f07e:	89 c5                	mov    ebp,eax
c000f080:	c1 fd 1f             	sar    ebp,0x1f
c000f083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f087:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f08b:	55                   	push   ebp
c000f08c:	57                   	push   edi
c000f08d:	52                   	push   edx
c000f08e:	50                   	push   eax
c000f08f:	e8 60 1a 01 00       	call   c0020af4 <__moddi3>
c000f094:	83 c4 10             	add    esp,0x10
c000f097:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f09c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f0a0:	01 c8                	add    eax,ecx
c000f0a2:	8a 10                	mov    dl,BYTE PTR [eax]
c000f0a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f0a8:	88 10                	mov    BYTE PTR [eax],dl
c000f0aa:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f0ae:	89 c2                	mov    edx,eax
c000f0b0:	c1 fa 1f             	sar    edx,0x1f
c000f0b3:	52                   	push   edx
c000f0b4:	50                   	push   eax
c000f0b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0bd:	e8 e6 18 01 00       	call   c00209a8 <__divdi3>
c000f0c2:	83 c4 10             	add    esp,0x10
c000f0c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f0c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f0cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0d1:	80 f4 00             	xor    ah,0x0
c000f0d4:	89 c3                	mov    ebx,eax
c000f0d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0da:	80 f4 00             	xor    ah,0x0
c000f0dd:	89 c6                	mov    esi,eax
c000f0df:	89 f0                	mov    eax,esi
c000f0e1:	09 d8                	or     eax,ebx
c000f0e3:	74 03                	je     c000f0e8 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f0e5:	eb 91                	jmp    c000f078 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f0e7:	90                   	nop
c000f0e8:	90                   	nop
c000f0e9:	83 c4 4c             	add    esp,0x4c
c000f0ec:	5b                   	pop    ebx
c000f0ed:	5e                   	pop    esi
c000f0ee:	5f                   	pop    edi
c000f0ef:	5d                   	pop    ebp
c000f0f0:	c3                   	ret    
c000f0f1:	8d 76 00             	lea    esi,[esi+0x0]

c000f0f4 <KeGetDigitsInNumber(long long)>:
c000f0f4:	56                   	push   esi
c000f0f5:	53                   	push   ebx
c000f0f6:	83 ec 24             	sub    esp,0x24
c000f0f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f101:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f105:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f109:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f111:	8d 76 00             	lea    esi,[esi+0x0]
c000f114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f118:	80 f4 00             	xor    ah,0x0
c000f11b:	89 c3                	mov    ebx,eax
c000f11d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f121:	80 f4 00             	xor    ah,0x0
c000f124:	89 c6                	mov    esi,eax
c000f126:	89 f0                	mov    eax,esi
c000f128:	09 d8                	or     eax,ebx
c000f12a:	74 28                	je     c000f154 <KeGetDigitsInNumber(long long)+0x60>
c000f12c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f130:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f134:	6a 00                	push   0x0
c000f136:	6a 0a                	push   0xa
c000f138:	52                   	push   edx
c000f139:	50                   	push   eax
c000f13a:	e8 69 18 01 00       	call   c00209a8 <__divdi3>
c000f13f:	83 c4 10             	add    esp,0x10
c000f142:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f146:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f14a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f14f:	eb c3                	jmp    c000f114 <KeGetDigitsInNumber(long long)+0x20>
c000f151:	8d 76 00             	lea    esi,[esi+0x0]
c000f154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f158:	83 c4 24             	add    esp,0x24
c000f15b:	5b                   	pop    ebx
c000f15c:	5e                   	pop    esi
c000f15d:	c3                   	ret    
c000f15e:	66 90                	xchg   ax,ax

c000f160 <KeItoa(unsigned long long, char*)>:
c000f160:	83 ec 1c             	sub    esp,0x1c
c000f163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f167:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f16b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f16f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f173:	6a 0a                	push   0xa
c000f175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f181:	e8 12 fd ff ff       	call   c000ee98 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f186:	83 c4 10             	add    esp,0x10
c000f189:	90                   	nop
c000f18a:	83 c4 1c             	add    esp,0x1c
c000f18d:	c3                   	ret    
c000f18e:	66 90                	xchg   ax,ax

c000f190 <KeItoa(long long, char*)>:
c000f190:	83 ec 1c             	sub    esp,0x1c
c000f193:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f197:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f19b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f19f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f1a3:	6a 0a                	push   0xa
c000f1a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f1b1:	e8 fe fd ff ff       	call   c000efb4 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f1b6:	83 c4 10             	add    esp,0x10
c000f1b9:	90                   	nop
c000f1ba:	83 c4 1c             	add    esp,0x1c
c000f1bd:	c3                   	ret    
c000f1be:	66 90                	xchg   ax,ax

c000f1c0 <KeXtoa(unsigned long long, char*)>:
c000f1c0:	83 ec 1c             	sub    esp,0x1c
c000f1c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f1d3:	6a 10                	push   0x10
c000f1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f1dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f1e1:	e8 b2 fc ff ff       	call   c000ee98 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f1e6:	83 c4 10             	add    esp,0x10
c000f1e9:	90                   	nop
c000f1ea:	83 c4 1c             	add    esp,0x1c
c000f1ed:	c3                   	ret    

c000f1ee <sbrk>:
c000f1ee:	55                   	push   ebp
c000f1ef:	57                   	push   edi
c000f1f0:	56                   	push   esi
c000f1f1:	53                   	push   ebx
c000f1f2:	83 ec 1c             	sub    esp,0x1c
c000f1f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1f9:	85 c0                	test   eax,eax
c000f1fb:	74 66                	je     c000f263 <sbrk+0x75>
c000f1fd:	78 6b                	js     c000f26a <sbrk+0x7c>
c000f1ff:	8b 15 d0 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257d0
c000f205:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f209:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f20f:	05 ff 0f 00 00       	add    eax,0xfff
c000f214:	0f 49 e8             	cmovns ebp,eax
c000f217:	c1 fd 0c             	sar    ebp,0xc
c000f21a:	bb 00 00 00 00       	mov    ebx,0x0
c000f21f:	8b 35 50 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d250
c000f225:	8b 3d d0 57 02 c0    	mov    edi,DWORD PTR ds:0xc00257d0
c000f22b:	e8 a8 06 00 00       	call   c000f8d8 <Phys::allocatePage()>
c000f230:	68 01 04 00 00       	push   0x401
c000f235:	57                   	push   edi
c000f236:	50                   	push   eax
c000f237:	56                   	push   esi
c000f238:	e8 39 3f 00 00       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f23d:	81 05 d0 57 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00257d0,0x1000
c000f247:	83 c3 01             	add    ebx,0x1
c000f24a:	83 c4 10             	add    esp,0x10
c000f24d:	39 dd                	cmp    ebp,ebx
c000f24f:	75 ce                	jne    c000f21f <sbrk+0x31>
c000f251:	0f 20 d8             	mov    eax,cr3
c000f254:	0f 22 d8             	mov    cr3,eax
c000f257:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f25b:	83 c4 1c             	add    esp,0x1c
c000f25e:	5b                   	pop    ebx
c000f25f:	5e                   	pop    esi
c000f260:	5f                   	pop    edi
c000f261:	5d                   	pop    ebp
c000f262:	c3                   	ret    
c000f263:	a1 d0 57 02 c0       	mov    eax,ds:0xc00257d0
c000f268:	eb f1                	jmp    c000f25b <sbrk+0x6d>
c000f26a:	83 ec 08             	sub    esp,0x8
c000f26d:	50                   	push   eax
c000f26e:	68 f8 31 02 c0       	push   0xc00231f8
c000f273:	e8 d6 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f278:	83 c4 10             	add    esp,0x10
c000f27b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f280:	eb d9                	jmp    c000f25b <sbrk+0x6d>

c000f282 <sbrk_thunk>:
c000f282:	83 ec 0c             	sub    esp,0xc
c000f285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f289:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f28e:	7f 10                	jg     c000f2a0 <sbrk_thunk+0x1e>
c000f290:	83 ec 0c             	sub    esp,0xc
c000f293:	50                   	push   eax
c000f294:	e8 55 ff ff ff       	call   c000f1ee <sbrk>
c000f299:	83 c4 10             	add    esp,0x10
c000f29c:	83 c4 0c             	add    esp,0xc
c000f29f:	c3                   	ret    
c000f2a0:	83 ec 08             	sub    esp,0x8
c000f2a3:	50                   	push   eax
c000f2a4:	68 28 32 02 c0       	push   0xc0023228
c000f2a9:	e8 a0 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f2ae:	83 c4 10             	add    esp,0x10
c000f2b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f2b6:	eb e4                	jmp    c000f29c <sbrk_thunk+0x1a>

c000f2b8 <mmap>:
c000f2b8:	55                   	push   ebp
c000f2b9:	57                   	push   edi
c000f2ba:	56                   	push   esi
c000f2bb:	53                   	push   ebx
c000f2bc:	83 ec 18             	sub    esp,0x18
c000f2bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2c3:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f2c9:	89 fb                	mov    ebx,edi
c000f2cb:	c1 eb 0c             	shr    ebx,0xc
c000f2ce:	53                   	push   ebx
c000f2cf:	e8 c9 37 00 00       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c000f2d4:	89 c5                	mov    ebp,eax
c000f2d6:	83 c4 10             	add    esp,0x10
c000f2d9:	85 db                	test   ebx,ebx
c000f2db:	7e 2f                	jle    c000f30c <mmap+0x54>
c000f2dd:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f2e3:	01 c7                	add    edi,eax
c000f2e5:	89 c3                	mov    ebx,eax
c000f2e7:	8b 35 50 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d250
c000f2ed:	e8 e6 05 00 00       	call   c000f8d8 <Phys::allocatePage()>
c000f2f2:	68 01 04 00 00       	push   0x401
c000f2f7:	53                   	push   ebx
c000f2f8:	50                   	push   eax
c000f2f9:	56                   	push   esi
c000f2fa:	e8 77 3e 00 00       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f2ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f305:	83 c4 10             	add    esp,0x10
c000f308:	39 fb                	cmp    ebx,edi
c000f30a:	75 db                	jne    c000f2e7 <mmap+0x2f>
c000f30c:	89 e8                	mov    eax,ebp
c000f30e:	83 c4 0c             	add    esp,0xc
c000f311:	5b                   	pop    ebx
c000f312:	5e                   	pop    esi
c000f313:	5f                   	pop    edi
c000f314:	5d                   	pop    ebp
c000f315:	c3                   	ret    

c000f316 <munmap>:
c000f316:	83 ec 18             	sub    esp,0x18
c000f319:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f31d:	e8 79 3a 00 00       	call   c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c000f322:	b8 00 00 00 00       	mov    eax,0x0
c000f327:	83 c4 1c             	add    esp,0x1c
c000f32a:	c3                   	ret    

c000f32b <liballoc_lock()>:
c000f32b:	fa                   	cli    
c000f32c:	83 05 30 da 02 c0 01 	add    DWORD PTR ds:0xc002da30,0x1
c000f333:	b8 00 00 00 00       	mov    eax,0x0
c000f338:	c3                   	ret    

c000f339 <liballoc_unlock()>:
c000f339:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f341:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000f348:	75 01                	jne    c000f34b <liballoc_unlock()+0x12>
c000f34a:	fb                   	sti    
c000f34b:	b8 00 00 00 00       	mov    eax,0x0
c000f350:	c3                   	ret    

c000f351 <liballoc_alloc(int)>:
c000f351:	83 ec 10             	sub    esp,0x10
c000f354:	6a 01                	push   0x1
c000f356:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f35a:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000f360:	e8 19 3f 00 00       	call   c001327e <VAS::allocatePages(int, int)>
c000f365:	83 c4 1c             	add    esp,0x1c
c000f368:	c3                   	ret    

c000f369 <liballoc_free(void*, int)>:
c000f369:	83 ec 14             	sub    esp,0x14
c000f36c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f370:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000f376:	e8 5d 3b 00 00       	call   c0012ed8 <VAS::freeAllocatedPages(unsigned long)>
c000f37b:	b8 00 00 00 00       	mov    eax,0x0
c000f380:	83 c4 1c             	add    esp,0x1c
c000f383:	c3                   	ret    

c000f384 <realloc>:
c000f384:	83 ec 14             	sub    esp,0x14
c000f387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f38f:	e8 f1 23 ff ff       	call   c0001785 <dlrealloc>
c000f394:	83 c4 1c             	add    esp,0x1c
c000f397:	c3                   	ret    

c000f398 <malloc>:
c000f398:	83 ec 18             	sub    esp,0x18
c000f39b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f39f:	e8 a4 1e ff ff       	call   c0001248 <dlmalloc>
c000f3a4:	83 c4 1c             	add    esp,0x1c
c000f3a7:	c3                   	ret    

c000f3a8 <free>:
c000f3a8:	83 ec 18             	sub    esp,0x18
c000f3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3af:	e8 d2 19 ff ff       	call   c0000d86 <dlfree>
c000f3b4:	83 c4 1c             	add    esp,0x1c
c000f3b7:	c3                   	ret    

c000f3b8 <rfree>:
c000f3b8:	83 ec 18             	sub    esp,0x18
c000f3bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3bf:	e8 c2 19 ff ff       	call   c0000d86 <dlfree>
c000f3c4:	83 c4 1c             	add    esp,0x1c
c000f3c7:	c3                   	ret    

c000f3c8 <calloc>:
c000f3c8:	56                   	push   esi
c000f3c9:	53                   	push   ebx
c000f3ca:	83 ec 10             	sub    esp,0x10
c000f3cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3d1:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 bc ff ff ff       	call   c000f398 <malloc>
c000f3dc:	89 c6                	mov    esi,eax
c000f3de:	83 c4 0c             	add    esp,0xc
c000f3e1:	53                   	push   ebx
c000f3e2:	6a 00                	push   0x0
c000f3e4:	50                   	push   eax
c000f3e5:	e8 06 11 ff ff       	call   c00004f0 <memset>
c000f3ea:	89 f0                	mov    eax,esi
c000f3ec:	83 c4 14             	add    esp,0x14
c000f3ef:	5b                   	pop    ebx
c000f3f0:	5e                   	pop    esi
c000f3f1:	c3                   	ret    
c000f3f2:	66 90                	xchg   ax,ax

c000f3f4 <KeMailboxTryPost(Mailbox*, void*)>:
c000f3f4:	83 ec 10             	sub    esp,0x10
c000f3f7:	fa                   	cli    
c000f3f8:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f3fd:	83 c0 01             	add    eax,0x1
c000f400:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000f405:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f40a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f40e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f411:	85 c0                	test   eax,eax
c000f413:	75 23                	jne    c000f438 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f415:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f419:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f41d:	89 10                	mov    DWORD PTR [eax],edx
c000f41f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f426:	8d 50 01             	lea    edx,[eax+0x1]
c000f429:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f42d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f430:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f435:	8d 76 00             	lea    esi,[esi+0x0]
c000f438:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f440:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f445:	85 c0                	test   eax,eax
c000f447:	75 03                	jne    c000f44c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f449:	fb                   	sti    
c000f44a:	66 90                	xchg   ax,ax
c000f44c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f450:	83 c4 10             	add    esp,0x10
c000f453:	c3                   	ret    

c000f454 <KeMailboxTryGet(Mailbox*, void**)>:
c000f454:	83 ec 10             	sub    esp,0x10
c000f457:	fa                   	cli    
c000f458:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f45d:	83 c0 01             	add    eax,0x1
c000f460:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000f465:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f46a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f46e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f471:	83 f8 01             	cmp    eax,0x1
c000f474:	75 22                	jne    c000f498 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f476:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f47a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f47c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f480:	89 10                	mov    DWORD PTR [eax],edx
c000f482:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f489:	8d 50 ff             	lea    edx,[eax-0x1]
c000f48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f490:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f493:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f498:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f4a0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f4a5:	85 c0                	test   eax,eax
c000f4a7:	75 03                	jne    c000f4ac <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f4a9:	fb                   	sti    
c000f4aa:	66 90                	xchg   ax,ax
c000f4ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f4b0:	83 c4 10             	add    esp,0x10
c000f4b3:	c3                   	ret    

c000f4b4 <KeMailboxCreate()>:
c000f4b4:	83 ec 1c             	sub    esp,0x1c
c000f4b7:	83 ec 0c             	sub    esp,0xc
c000f4ba:	6a 08                	push   0x8
c000f4bc:	e8 d7 fe ff ff       	call   c000f398 <malloc>
c000f4c1:	83 c4 10             	add    esp,0x10
c000f4c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f4d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f4dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e1:	83 c4 1c             	add    esp,0x1c
c000f4e4:	c3                   	ret    
c000f4e5:	8d 76 00             	lea    esi,[esi+0x0]

c000f4e8 <KeMailboxPost(Mailbox*, void*)>:
c000f4e8:	83 ec 1c             	sub    esp,0x1c
c000f4eb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f4f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f4f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f4f8:	e8 f7 fe ff ff       	call   c000f3f4 <KeMailboxTryPost(Mailbox*, void*)>
c000f4fd:	83 c4 08             	add    esp,0x8
c000f500:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f504:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f508:	83 f0 01             	xor    eax,0x1
c000f50b:	0f b6 c0             	movzx  eax,al
c000f50e:	85 c0                	test   eax,eax
c000f510:	74 26                	je     c000f538 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f512:	fa                   	cli    
c000f513:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f518:	83 c0 01             	add    eax,0x1
c000f51b:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000f520:	e8 db 6d 00 00       	call   c0016300 <schedule()>
c000f525:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f52d:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f532:	85 c0                	test   eax,eax
c000f534:	75 02                	jne    c000f538 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f536:	fb                   	sti    
c000f537:	90                   	nop
c000f538:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f53d:	85 c0                	test   eax,eax
c000f53f:	75 03                	jne    c000f544 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f541:	eb ad                	jmp    c000f4f0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000f543:	90                   	nop
c000f544:	90                   	nop
c000f545:	83 c4 1c             	add    esp,0x1c
c000f548:	c3                   	ret    
c000f549:	8d 76 00             	lea    esi,[esi+0x0]

c000f54c <KeMailboxGet(Mailbox*, void**)>:
c000f54c:	83 ec 1c             	sub    esp,0x1c
c000f54f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f554:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f558:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f55c:	e8 f3 fe ff ff       	call   c000f454 <KeMailboxTryGet(Mailbox*, void**)>
c000f561:	83 c4 08             	add    esp,0x8
c000f564:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f568:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f56c:	83 f0 01             	xor    eax,0x1
c000f56f:	0f b6 c0             	movzx  eax,al
c000f572:	85 c0                	test   eax,eax
c000f574:	74 26                	je     c000f59c <KeMailboxGet(Mailbox*, void**)+0x50>
c000f576:	fa                   	cli    
c000f577:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f57c:	83 c0 01             	add    eax,0x1
c000f57f:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000f584:	e8 77 6d 00 00       	call   c0016300 <schedule()>
c000f589:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f591:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f596:	85 c0                	test   eax,eax
c000f598:	75 02                	jne    c000f59c <KeMailboxGet(Mailbox*, void**)+0x50>
c000f59a:	fb                   	sti    
c000f59b:	90                   	nop
c000f59c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f5a1:	85 c0                	test   eax,eax
c000f5a3:	75 03                	jne    c000f5a8 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f5a5:	eb ad                	jmp    c000f554 <KeMailboxGet(Mailbox*, void**)+0x8>
c000f5a7:	90                   	nop
c000f5a8:	90                   	nop
c000f5a9:	83 c4 1c             	add    esp,0x1c
c000f5ac:	c3                   	ret    
c000f5ad:	8d 76 00             	lea    esi,[esi+0x0]

c000f5b0 <KeMailboxDestroy(Mailbox*)>:
c000f5b0:	83 ec 0c             	sub    esp,0xc
c000f5b3:	83 ec 0c             	sub    esp,0xc
c000f5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5ba:	e8 e9 fd ff ff       	call   c000f3a8 <free>
c000f5bf:	83 c4 10             	add    esp,0x10
c000f5c2:	90                   	nop
c000f5c3:	83 c4 0c             	add    esp,0xc
c000f5c6:	c3                   	ret    

c000f5c7 <KeEntryPoint>:
c000f5c7:	57                   	push   edi
c000f5c8:	bf f9 03 00 00       	mov    edi,0x3f9
c000f5cd:	56                   	push   esi
c000f5ce:	31 f6                	xor    esi,esi
c000f5d0:	53                   	push   ebx
c000f5d1:	89 fa                	mov    edx,edi
c000f5d3:	83 ec 2c             	sub    esp,0x2c
c000f5d6:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f5db:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c000f5e0:	89 f0                	mov    eax,esi
c000f5e2:	ee                   	out    dx,al
c000f5e3:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f5e8:	b0 80                	mov    al,0x80
c000f5ea:	89 da                	mov    edx,ebx
c000f5ec:	ee                   	out    dx,al
c000f5ed:	b1 03                	mov    cl,0x3
c000f5ef:	ba f8 03 00 00       	mov    edx,0x3f8
c000f5f4:	88 c8                	mov    al,cl
c000f5f6:	ee                   	out    dx,al
c000f5f7:	89 f0                	mov    eax,esi
c000f5f9:	89 fa                	mov    edx,edi
c000f5fb:	ee                   	out    dx,al
c000f5fc:	88 c8                	mov    al,cl
c000f5fe:	89 da                	mov    edx,ebx
c000f600:	ee                   	out    dx,al
c000f601:	b0 c7                	mov    al,0xc7
c000f603:	ba fa 03 00 00       	mov    edx,0x3fa
c000f608:	ee                   	out    dx,al
c000f609:	b0 0b                	mov    al,0xb
c000f60b:	ba fc 03 00 00       	mov    edx,0x3fc
c000f610:	ee                   	out    dx,al
c000f611:	68 37 32 02 c0       	push   0xc0023237
c000f616:	e8 33 79 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f61b:	e8 00 d4 ff ff       	call   c000ca20 <KeDisplaySplashScreen()>
c000f620:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f625:	05 ff 0f 00 00       	add    eax,0xfff
c000f62a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f62f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f632:	e8 32 04 00 00       	call   c000fa69 <Phys::physicalMemorySetup(unsigned int)>
c000f637:	e8 35 36 00 00       	call   c0012c71 <Virt::virtualMemorySetup()>
c000f63c:	e8 29 d3 ff ff       	call   c000c96a <KeInitialiseAtexit()>
c000f641:	c7 04 24 4e 32 02 c0 	mov    DWORD PTR [esp],0xc002324e
c000f648:	e8 01 79 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f64d:	58                   	pop    eax
c000f64e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f652:	53                   	push   ebx
c000f653:	e8 00 39 00 00       	call   c0012f58 <VAS::VAS()>
c000f658:	c7 04 24 5e 32 02 c0 	mov    DWORD PTR [esp],0xc002325e
c000f65f:	89 1d 50 d2 02 c0    	mov    DWORD PTR ds:0xc002d250,ebx
c000f665:	e8 e4 78 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f66a:	e8 1f 18 01 00       	call   c0020e8e <_init>
c000f66f:	c7 04 24 72 32 02 c0 	mov    DWORD PTR [esp],0xc0023272
c000f676:	e8 d3 78 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f67b:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000f682:	e8 11 fd ff ff       	call   c000f398 <malloc>
c000f687:	89 04 24             	mov    DWORD PTR [esp],eax
c000f68a:	89 c6                	mov    esi,eax
c000f68c:	e8 53 e4 ff ff       	call   c000dae4 <Computer::Computer()>
c000f691:	5a                   	pop    edx
c000f692:	89 35 d0 b0 02 c0    	mov    DWORD PTR ds:0xc002b0d0,esi
c000f698:	59                   	pop    ecx
c000f699:	56                   	push   esi
c000f69a:	68 81 32 02 c0       	push   0xc0023281
c000f69f:	e8 aa 78 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f6a4:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000f6a9:	8b 10                	mov    edx,DWORD PTR [eax]
c000f6ab:	53                   	push   ebx
c000f6ac:	6a 00                	push   0x0
c000f6ae:	6a 00                	push   0x0
c000f6b0:	50                   	push   eax
c000f6b1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f6b4:	83 c4 14             	add    esp,0x14
c000f6b7:	53                   	push   ebx
c000f6b8:	e8 51 39 00 00       	call   c001300e <VAS::~VAS()>
c000f6bd:	83 c4 30             	add    esp,0x30
c000f6c0:	5b                   	pop    ebx
c000f6c1:	5e                   	pop    esi
c000f6c2:	5f                   	pop    edi
c000f6c3:	c3                   	ret    

c000f6c4 <Mutex::Mutex()>:
c000f6c4:	83 ec 0c             	sub    esp,0xc
c000f6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6cb:	83 ec 08             	sub    esp,0x8
c000f6ce:	6a 01                	push   0x1
c000f6d0:	50                   	push   eax
c000f6d1:	e8 4e 0c 00 00       	call   c0010324 <Semaphore::Semaphore(int)>
c000f6d6:	83 c4 10             	add    esp,0x10
c000f6d9:	90                   	nop
c000f6da:	83 c4 0c             	add    esp,0xc
c000f6dd:	c3                   	ret    

c000f6de <KePanic(char const*)>:
c000f6de:	c6 05 28 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d128,0x1
c000f6e5:	e9 9d 9b 00 00       	jmp    c0019287 <HalPanic(char const*)>

c000f6ea <Phys::allocateDMA(unsigned long)>:
c000f6ea:	55                   	push   ebp
c000f6eb:	31 ed                	xor    ebp,ebp
c000f6ed:	57                   	push   edi
c000f6ee:	56                   	push   esi
c000f6ef:	31 f6                	xor    esi,esi
c000f6f1:	53                   	push   ebx
c000f6f2:	31 db                	xor    ebx,ebx
c000f6f4:	83 ec 1c             	sub    esp,0x1c
c000f6f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6fb:	05 ff 0f 00 00       	add    eax,0xfff
c000f700:	c1 e8 0c             	shr    eax,0xc
c000f703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f707:	31 c0                	xor    eax,eax
c000f709:	eb 1b                	jmp    c000f726 <Phys::allocateDMA(unsigned long)+0x3c>
c000f70b:	8d 78 01             	lea    edi,[eax+0x1]
c000f70e:	85 c0                	test   eax,eax
c000f710:	0f 44 eb             	cmove  ebp,ebx
c000f713:	0f 44 f3             	cmove  esi,ebx
c000f716:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f71a:	74 37                	je     c000f753 <Phys::allocateDMA(unsigned long)+0x69>
c000f71c:	89 f8                	mov    eax,edi
c000f71e:	83 c3 01             	add    ebx,0x1
c000f721:	83 fb 0f             	cmp    ebx,0xf
c000f724:	7f 13                	jg     c000f739 <Phys::allocateDMA(unsigned long)+0x4f>
c000f726:	80 bb 44 d1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd2ebc],0x0
c000f72d:	74 dc                	je     c000f70b <Phys::allocateDMA(unsigned long)+0x21>
c000f72f:	31 c0                	xor    eax,eax
c000f731:	83 c3 01             	add    ebx,0x1
c000f734:	83 fb 0f             	cmp    ebx,0xf
c000f737:	7e ed                	jle    c000f726 <Phys::allocateDMA(unsigned long)+0x3c>
c000f739:	83 ec 0c             	sub    esp,0xc
c000f73c:	68 98 32 02 c0       	push   0xc0023298
c000f741:	e8 98 ff ff ff       	call   c000f6de <KePanic(char const*)>
c000f746:	83 c4 10             	add    esp,0x10
c000f749:	31 c0                	xor    eax,eax
c000f74b:	83 c4 1c             	add    esp,0x1c
c000f74e:	5b                   	pop    ebx
c000f74f:	5e                   	pop    esi
c000f750:	5f                   	pop    edi
c000f751:	5d                   	pop    ebp
c000f752:	c3                   	ret    
c000f753:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f757:	89 f2                	mov    edx,esi
c000f759:	c1 fa 04             	sar    edx,0x4
c000f75c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f760:	01 f1                	add    ecx,esi
c000f762:	8d 51 0e             	lea    edx,[ecx+0xe]
c000f765:	83 e9 01             	sub    ecx,0x1
c000f768:	0f 48 ca             	cmovs  ecx,edx
c000f76b:	c1 f9 04             	sar    ecx,0x4
c000f76e:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000f772:	74 06                	je     c000f77a <Phys::allocateDMA(unsigned long)+0x90>
c000f774:	89 eb                	mov    ebx,ebp
c000f776:	31 c0                	xor    eax,eax
c000f778:	eb b7                	jmp    c000f731 <Phys::allocateDMA(unsigned long)+0x47>
c000f77a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f77e:	85 d2                	test   edx,edx
c000f780:	74 17                	je     c000f799 <Phys::allocateDMA(unsigned long)+0xaf>
c000f782:	8d 96 44 d1 02 c0    	lea    edx,[esi-0x3ffd2ebc]
c000f788:	8d 84 06 45 d1 02 c0 	lea    eax,[esi+eax*1-0x3ffd2ebb]
c000f78f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f792:	83 c2 01             	add    edx,0x1
c000f795:	39 d0                	cmp    eax,edx
c000f797:	75 f6                	jne    c000f78f <Phys::allocateDMA(unsigned long)+0xa5>
c000f799:	8b 15 3c d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d13c
c000f79f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f7a7:	01 c2                	add    edx,eax
c000f7a9:	89 15 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,edx
c000f7af:	85 c9                	test   ecx,ecx
c000f7b1:	74 17                	je     c000f7ca <Phys::allocateDMA(unsigned long)+0xe0>
c000f7b3:	83 ec 0c             	sub    esp,0xc
c000f7b6:	68 98 32 02 c0       	push   0xc0023298
c000f7bb:	e8 1e ff ff ff       	call   c000f6de <KePanic(char const*)>
c000f7c0:	83 c4 10             	add    esp,0x10
c000f7c3:	89 f8                	mov    eax,edi
c000f7c5:	e9 54 ff ff ff       	jmp    c000f71e <Phys::allocateDMA(unsigned long)+0x34>
c000f7ca:	c1 e6 0c             	shl    esi,0xc
c000f7cd:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000f7d3:	e9 73 ff ff ff       	jmp    c000f74b <Phys::allocateDMA(unsigned long)+0x61>

c000f7d8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7dc:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7e2:	a1 3c d1 02 c0       	mov    eax,ds:0xc002d13c
c000f7e7:	c1 ea 0c             	shr    edx,0xc
c000f7ea:	29 d0                	sub    eax,edx
c000f7ec:	a3 3c d1 02 c0       	mov    ds:0xc002d13c,eax
c000f7f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f7f5:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000f7fa:	c1 e8 0c             	shr    eax,0xc
c000f7fd:	85 d2                	test   edx,edx
c000f7ff:	74 11                	je     c000f812 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000f801:	05 44 d1 02 c0       	add    eax,0xc002d144
c000f806:	01 c2                	add    edx,eax
c000f808:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f80b:	83 c0 01             	add    eax,0x1
c000f80e:	39 d0                	cmp    eax,edx
c000f810:	75 f6                	jne    c000f808 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000f812:	c3                   	ret    

c000f813 <Phys::setPageState(unsigned long, bool)>:
c000f813:	57                   	push   edi
c000f814:	56                   	push   esi
c000f815:	8b 35 d4 57 02 c0    	mov    esi,DWORD PTR ds:0xc00257d4
c000f81b:	53                   	push   ebx
c000f81c:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000f821:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f825:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f829:	89 ca                	mov    edx,ecx
c000f82b:	83 e1 07             	and    ecx,0x7
c000f82e:	c1 ea 03             	shr    edx,0x3
c000f831:	0f b6 c0             	movzx  eax,al
c000f834:	d3 c3                	rol    ebx,cl
c000f836:	01 d6                	add    esi,edx
c000f838:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000f83b:	d3 e0                	shl    eax,cl
c000f83d:	21 fb                	and    ebx,edi
c000f83f:	88 1e                	mov    BYTE PTR [esi],bl
c000f841:	8b 1d d4 57 02 c0    	mov    ebx,DWORD PTR ds:0xc00257d4
c000f847:	01 da                	add    edx,ebx
c000f849:	8a 0a                	mov    cl,BYTE PTR [edx]
c000f84b:	09 c8                	or     eax,ecx
c000f84d:	88 02                	mov    BYTE PTR [edx],al
c000f84f:	5b                   	pop    ebx
c000f850:	5e                   	pop    esi
c000f851:	5f                   	pop    edi
c000f852:	c3                   	ret    

c000f853 <Phys::getPageState(unsigned long)>:
c000f853:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f857:	8b 15 d4 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257d4
c000f85d:	89 c8                	mov    eax,ecx
c000f85f:	83 e1 07             	and    ecx,0x7
c000f862:	c1 e8 03             	shr    eax,0x3
c000f865:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f869:	d3 f8                	sar    eax,cl
c000f86b:	83 e0 01             	and    eax,0x1
c000f86e:	c3                   	ret    

c000f86f <Phys::freePage(unsigned long)>:
c000f86f:	53                   	push   ebx
c000f870:	83 ec 08             	sub    esp,0x8
c000f873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f877:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000f87d:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000f883:	76 41                	jbe    c000f8c6 <Phys::freePage(unsigned long)+0x57>
c000f885:	c1 e8 0c             	shr    eax,0xc
c000f888:	50                   	push   eax
c000f889:	89 c3                	mov    ebx,eax
c000f88b:	e8 c3 ff ff ff       	call   c000f853 <Phys::getPageState(unsigned long)>
c000f890:	5a                   	pop    edx
c000f891:	84 c0                	test   al,al
c000f893:	74 20                	je     c000f8b5 <Phys::freePage(unsigned long)+0x46>
c000f895:	a1 3c d1 02 c0       	mov    eax,ds:0xc002d13c
c000f89a:	83 ec 08             	sub    esp,0x8
c000f89d:	6a 00                	push   0x0
c000f89f:	53                   	push   ebx
c000f8a0:	83 e8 01             	sub    eax,0x1
c000f8a3:	a3 3c d1 02 c0       	mov    ds:0xc002d13c,eax
c000f8a8:	e8 66 ff ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000f8ad:	83 c4 10             	add    esp,0x10
c000f8b0:	83 c4 08             	add    esp,0x8
c000f8b3:	5b                   	pop    ebx
c000f8b4:	c3                   	ret    
c000f8b5:	c7 44 24 10 9d 33 02 c0 	mov    DWORD PTR [esp+0x10],0xc002339d
c000f8bd:	83 c4 08             	add    esp,0x8
c000f8c0:	5b                   	pop    ebx
c000f8c1:	e9 18 fe ff ff       	jmp    c000f6de <KePanic(char const*)>
c000f8c6:	68 00 10 00 00       	push   0x1000
c000f8cb:	50                   	push   eax
c000f8cc:	e8 07 ff ff ff       	call   c000f7d8 <Phys::freeDMA(unsigned long, unsigned long)>
c000f8d1:	59                   	pop    ecx
c000f8d2:	5b                   	pop    ebx
c000f8d3:	83 c4 08             	add    esp,0x8
c000f8d6:	5b                   	pop    ebx
c000f8d7:	c3                   	ret    

c000f8d8 <Phys::allocatePage()>:
c000f8d8:	56                   	push   esi
c000f8d9:	53                   	push   ebx
c000f8da:	83 ec 14             	sub    esp,0x14
c000f8dd:	8b 35 30 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d130
c000f8e3:	89 f3                	mov    ebx,esi
c000f8e5:	eb 0a                	jmp    c000f8f1 <Phys::allocatePage()+0x19>
c000f8e7:	89 1d 30 d1 02 c0    	mov    DWORD PTR ds:0xc002d130,ebx
c000f8ed:	39 de                	cmp    esi,ebx
c000f8ef:	74 26                	je     c000f917 <Phys::allocatePage()+0x3f>
c000f8f1:	53                   	push   ebx
c000f8f2:	e8 5c ff ff ff       	call   c000f853 <Phys::getPageState(unsigned long)>
c000f8f7:	59                   	pop    ecx
c000f8f8:	84 c0                	test   al,al
c000f8fa:	74 67                	je     c000f963 <Phys::allocatePage()+0x8b>
c000f8fc:	83 c3 01             	add    ebx,0x1
c000f8ff:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f905:	75 e0                	jne    c000f8e7 <Phys::allocatePage()+0xf>
c000f907:	c7 05 30 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d130,0x0
c000f911:	31 db                	xor    ebx,ebx
c000f913:	39 de                	cmp    esi,ebx
c000f915:	75 da                	jne    c000f8f1 <Phys::allocatePage()+0x19>
c000f917:	a0 54 d1 02 c0       	mov    al,ds:0xc002d154
c000f91c:	83 ec 0c             	sub    esp,0xc
c000f91f:	83 f0 01             	xor    eax,0x1
c000f922:	a2 54 d1 02 c0       	mov    ds:0xc002d154,al
c000f927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f92c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f92f:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000f935:	51                   	push   ecx
c000f936:	e8 8f 43 00 00       	call   c0013cca <VAS::scanForEviction()>
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	85 c0                	test   eax,eax
c000f940:	75 48                	jne    c000f98a <Phys::allocatePage()+0xb2>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	68 c0 32 02 c0       	push   0xc00232c0
c000f94a:	e8 8f fd ff ff       	call   c000f6de <KePanic(char const*)>
c000f94f:	8b 1d 30 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d130
c000f955:	83 c4 10             	add    esp,0x10
c000f958:	53                   	push   ebx
c000f959:	e8 f5 fe ff ff       	call   c000f853 <Phys::getPageState(unsigned long)>
c000f95e:	59                   	pop    ecx
c000f95f:	84 c0                	test   al,al
c000f961:	75 99                	jne    c000f8fc <Phys::allocatePage()+0x24>
c000f963:	6a 01                	push   0x1
c000f965:	53                   	push   ebx
c000f966:	e8 a8 fe ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000f96b:	8b 1d 3c d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d13c
c000f971:	5e                   	pop    esi
c000f972:	a1 30 d1 02 c0       	mov    eax,ds:0xc002d130
c000f977:	5a                   	pop    edx
c000f978:	83 c3 01             	add    ebx,0x1
c000f97b:	89 1d 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,ebx
c000f981:	c1 e0 0c             	shl    eax,0xc
c000f984:	83 c4 14             	add    esp,0x14
c000f987:	5b                   	pop    ebx
c000f988:	5e                   	pop    esi
c000f989:	c3                   	ret    
c000f98a:	8b 15 3c d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d13c
c000f990:	83 ec 08             	sub    esp,0x8
c000f993:	6a 01                	push   0x1
c000f995:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f999:	83 c2 01             	add    edx,0x1
c000f99c:	89 15 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,edx
c000f9a2:	89 c2                	mov    edx,eax
c000f9a4:	c1 ea 0c             	shr    edx,0xc
c000f9a7:	52                   	push   edx
c000f9a8:	e8 66 fe ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000f9ad:	83 c4 10             	add    esp,0x10
c000f9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9b4:	eb ce                	jmp    c000f984 <Phys::allocatePage()+0xac>

c000f9b6 <Phys::allocateContiguousPages(int)>:
c000f9b6:	57                   	push   edi
c000f9b7:	56                   	push   esi
c000f9b8:	53                   	push   ebx
c000f9b9:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f9bd:	fa                   	cli    
c000f9be:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c000f9c4:	83 ec 0c             	sub    esp,0xc
c000f9c7:	31 db                	xor    ebx,ebx
c000f9c9:	68 f0 32 02 c0       	push   0xc00232f0
c000f9ce:	83 c2 01             	add    edx,0x1
c000f9d1:	89 15 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,edx
c000f9d7:	e8 72 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f9dc:	83 c4 10             	add    esp,0x10
c000f9df:	85 db                	test   ebx,ebx
c000f9e1:	75 11                	jne    c000f9f4 <Phys::allocateContiguousPages(int)+0x3e>
c000f9e3:	e8 f0 fe ff ff       	call   c000f8d8 <Phys::allocatePage()>
c000f9e8:	83 ff 01             	cmp    edi,0x1
c000f9eb:	89 c6                	mov    esi,eax
c000f9ed:	74 21                	je     c000fa10 <Phys::allocateContiguousPages(int)+0x5a>
c000f9ef:	bb 01 00 00 00       	mov    ebx,0x1
c000f9f4:	e8 df fe ff ff       	call   c000f8d8 <Phys::allocatePage()>
c000f9f9:	89 da                	mov    edx,ebx
c000f9fb:	c1 e2 0c             	shl    edx,0xc
c000f9fe:	01 f2                	add    edx,esi
c000fa00:	39 c2                	cmp    edx,eax
c000fa02:	74 24                	je     c000fa28 <Phys::allocateContiguousPages(int)+0x72>
c000fa04:	83 ff 01             	cmp    edi,0x1
c000fa07:	bb 01 00 00 00       	mov    ebx,0x1
c000fa0c:	89 c6                	mov    esi,eax
c000fa0e:	75 e4                	jne    c000f9f4 <Phys::allocateContiguousPages(int)+0x3e>
c000fa10:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000fa18:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000fa1d:	85 c0                	test   eax,eax
c000fa1f:	75 01                	jne    c000fa22 <Phys::allocateContiguousPages(int)+0x6c>
c000fa21:	fb                   	sti    
c000fa22:	5b                   	pop    ebx
c000fa23:	89 f0                	mov    eax,esi
c000fa25:	5e                   	pop    esi
c000fa26:	5f                   	pop    edi
c000fa27:	c3                   	ret    
c000fa28:	83 c3 01             	add    ebx,0x1
c000fa2b:	39 fb                	cmp    ebx,edi
c000fa2d:	75 b0                	jne    c000f9df <Phys::allocateContiguousPages(int)+0x29>
c000fa2f:	eb df                	jmp    c000fa10 <Phys::allocateContiguousPages(int)+0x5a>

c000fa31 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa31:	56                   	push   esi
c000fa32:	53                   	push   ebx
c000fa33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa37:	39 1d 34 d1 02 c0    	cmp    DWORD PTR ds:0xc002d134,ebx
c000fa3d:	73 06                	jae    c000fa45 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa3f:	89 1d 34 d1 02 c0    	mov    DWORD PTR ds:0xc002d134,ebx
c000fa45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa49:	c1 eb 0c             	shr    ebx,0xc
c000fa4c:	c1 e8 0c             	shr    eax,0xc
c000fa4f:	39 d8                	cmp    eax,ebx
c000fa51:	73 13                	jae    c000fa66 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa53:	6a 00                	push   0x0
c000fa55:	50                   	push   eax
c000fa56:	8d 70 01             	lea    esi,[eax+0x1]
c000fa59:	e8 b5 fd ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000fa5e:	39 f3                	cmp    ebx,esi
c000fa60:	89 f0                	mov    eax,esi
c000fa62:	5a                   	pop    edx
c000fa63:	59                   	pop    ecx
c000fa64:	75 ed                	jne    c000fa53 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa66:	5b                   	pop    ebx
c000fa67:	5e                   	pop    esi
c000fa68:	c3                   	ret    

c000fa69 <Phys::physicalMemorySetup(unsigned int)>:
c000fa69:	55                   	push   ebp
c000fa6a:	57                   	push   edi
c000fa6b:	56                   	push   esi
c000fa6c:	53                   	push   ebx
c000fa6d:	31 db                	xor    ebx,ebx
c000fa6f:	83 ec 40             	sub    esp,0x40
c000fa72:	6a 10                	push   0x10
c000fa74:	6a 00                	push   0x0
c000fa76:	68 44 d1 02 c0       	push   0xc002d144
c000fa7b:	e8 70 0a ff ff       	call   c00004f0 <memset>
c000fa80:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fa84:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa89:	05 00 10 00 00       	add    eax,0x1000
c000fa8e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000fa92:	5a                   	pop    edx
c000fa93:	59                   	pop    ecx
c000fa94:	50                   	push   eax
c000fa95:	68 b3 33 02 c0       	push   0xc00233b3
c000fa9a:	e8 af 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fa9f:	83 c4 10             	add    esp,0x10
c000faa2:	83 ec 08             	sub    esp,0x8
c000faa5:	6a 01                	push   0x1
c000faa7:	53                   	push   ebx
c000faa8:	83 c3 01             	add    ebx,0x1
c000faab:	e8 63 fd ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000fab0:	83 c4 10             	add    esp,0x10
c000fab3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fab9:	75 e7                	jne    c000faa2 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fabb:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000fac2:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000fac9:	c1 e0 08             	shl    eax,0x8
c000facc:	09 c2                	or     edx,eax
c000face:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000fad2:	0f 84 43 01 00 00    	je     c000fc1b <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000fad8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fae0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fae5:	e9 82 00 00 00       	jmp    c000fb6c <Phys::physicalMemorySetup(unsigned int)+0x103>
c000faea:	ba 00 00 08 00       	mov    edx,0x80000
c000faef:	89 c1                	mov    ecx,eax
c000faf1:	39 f2                	cmp    edx,esi
c000faf3:	19 f9                	sbb    ecx,edi
c000faf5:	0f 82 c0 00 00 00    	jb     c000fbbb <Phys::physicalMemorySetup(unsigned int)+0x152>
c000fafb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faff:	89 c5                	mov    ebp,eax
c000fb01:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fb05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb09:	19 cd                	sbb    ebp,ecx
c000fb0b:	0f 83 af 00 00 00    	jae    c000fbc0 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000fb11:	89 d6                	mov    esi,edx
c000fb13:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fb18:	39 f2                	cmp    edx,esi
c000fb1a:	89 cf                	mov    edi,ecx
c000fb1c:	19 c8                	sbb    eax,ecx
c000fb1e:	73 07                	jae    c000fb27 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000fb20:	be 00 00 0a 00       	mov    esi,0xa0000
c000fb25:	31 ff                	xor    edi,edi
c000fb27:	89 f2                	mov    edx,esi
c000fb29:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000fb2e:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000fb34:	89 f9                	mov    ecx,edi
c000fb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fb3a:	83 d1 ff             	adc    ecx,0xffffffff
c000fb3d:	39 d0                	cmp    eax,edx
c000fb3f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000fb43:	b8 00 00 00 00       	mov    eax,0x0
c000fb48:	19 c8                	sbb    eax,ecx
c000fb4a:	0f 82 9d 01 00 00    	jb     c000fced <Phys::physicalMemorySetup(unsigned int)+0x284>
c000fb50:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fb54:	83 c3 18             	add    ebx,0x18
c000fb57:	83 c6 01             	add    esi,0x1
c000fb5a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000fb5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb62:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000fb66:	0f 84 bf 00 00 00    	je     c000fc2b <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000fb6c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fb6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fb71:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fb74:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fb77:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000fb7b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fb7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb82:	01 f0                	add    eax,esi
c000fb84:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fb88:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000fb8c:	55                   	push   ebp
c000fb8d:	11 fa                	adc    edx,edi
c000fb8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb93:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fb97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb9b:	50                   	push   eax
c000fb9c:	56                   	push   esi
c000fb9d:	68 50 33 02 c0       	push   0xc0023350
c000fba2:	e8 a7 73 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbab:	83 c4 10             	add    esp,0x10
c000fbae:	09 f8                	or     eax,edi
c000fbb0:	75 79                	jne    c000fc2b <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000fbb2:	83 fd 01             	cmp    ebp,0x1
c000fbb5:	0f 84 2f ff ff ff    	je     c000faea <Phys::physicalMemorySetup(unsigned int)+0x81>
c000fbbb:	83 fd 01             	cmp    ebp,0x1
c000fbbe:	75 90                	jne    c000fb50 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000fbc0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fbc4:	31 d2                	xor    edx,edx
c000fbc6:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000fbca:	89 c8                	mov    eax,ecx
c000fbcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbd0:	19 d1                	sbb    ecx,edx
c000fbd2:	0f 82 78 ff ff ff    	jb     c000fb50 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000fbd8:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000fbdd:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000fbe1:	b9 00 00 00 00       	mov    ecx,0x0
c000fbe6:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fbea:	0f 83 60 ff ff ff    	jae    c000fb50 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000fbf0:	39 c6                	cmp    esi,eax
c000fbf2:	19 d7                	sbb    edi,edx
c000fbf4:	0f 83 ff 00 00 00    	jae    c000fcf9 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000fbfa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fbfe:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc02:	29 c7                	sub    edi,eax
c000fc04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000fc08:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc0c:	19 d5                	sbb    ebp,edx
c000fc0e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc16:	e9 de 00 00 00       	jmp    c000fcf9 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000fc1b:	83 ec 0c             	sub    esp,0xc
c000fc1e:	68 cb 33 02 c0       	push   0xc00233cb
c000fc23:	e8 b6 fa ff ff       	call   c000f6de <KePanic(char const*)>
c000fc28:	83 c4 10             	add    esp,0x10
c000fc2b:	83 ec 08             	sub    esp,0x8
c000fc2e:	bb 60 00 00 00       	mov    ebx,0x60
c000fc33:	6a 00                	push   0x0
c000fc35:	6a 06                	push   0x6
c000fc37:	e8 d7 fb ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000fc3c:	58                   	pop    eax
c000fc3d:	5a                   	pop    edx
c000fc3e:	6a 00                	push   0x0
c000fc40:	6a 07                	push   0x7
c000fc42:	e8 cc fb ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000fc47:	8b 0d 40 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d140
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	83 c1 02             	add    ecx,0x2
c000fc53:	89 0d 40 d1 02 c0    	mov    DWORD PTR ds:0xc002d140,ecx
c000fc59:	83 ec 08             	sub    esp,0x8
c000fc5c:	6a 00                	push   0x0
c000fc5e:	53                   	push   ebx
c000fc5f:	83 c3 01             	add    ebx,0x1
c000fc62:	e8 ac fb ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000fc70:	75 e7                	jne    c000fc59 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000fc72:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c000fc77:	bb 40 01 00 00       	mov    ebx,0x140
c000fc7c:	83 c0 20             	add    eax,0x20
c000fc7f:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c000fc84:	eb 26                	jmp    c000fcac <Phys::physicalMemorySetup(unsigned int)+0x243>
c000fc86:	83 ec 08             	sub    esp,0x8
c000fc89:	6a 00                	push   0x0
c000fc8b:	53                   	push   ebx
c000fc8c:	83 c3 01             	add    ebx,0x1
c000fc8f:	e8 7f fb ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000fc94:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	83 c0 01             	add    eax,0x1
c000fc9f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000fca5:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c000fcaa:	74 07                	je     c000fcb3 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000fcac:	3d ff 03 00 00       	cmp    eax,0x3ff
c000fcb1:	7e d3                	jle    c000fc86 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000fcb3:	bb d0 01 00 00       	mov    ebx,0x1d0
c000fcb8:	3d ff 07 00 00       	cmp    eax,0x7ff
c000fcbd:	7f 26                	jg     c000fce5 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000fcbf:	83 ec 08             	sub    esp,0x8
c000fcc2:	6a 00                	push   0x0
c000fcc4:	53                   	push   ebx
c000fcc5:	83 c3 01             	add    ebx,0x1
c000fcc8:	e8 46 fb ff ff       	call   c000f813 <Phys::setPageState(unsigned long, bool)>
c000fccd:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c000fcd2:	83 c4 10             	add    esp,0x10
c000fcd5:	83 c0 01             	add    eax,0x1
c000fcd8:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000fcde:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c000fce3:	75 d3                	jne    c000fcb8 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fce5:	83 c4 3c             	add    esp,0x3c
c000fce8:	5b                   	pop    ebx
c000fce9:	5e                   	pop    esi
c000fcea:	5f                   	pop    edi
c000fceb:	5d                   	pop    ebp
c000fcec:	c3                   	ret    
c000fced:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000fcf1:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000fcf9:	83 ec 04             	sub    esp,0x4
c000fcfc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000fd00:	56                   	push   esi
c000fd01:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd05:	57                   	push   edi
c000fd06:	68 74 33 02 c0       	push   0xc0023374
c000fd0b:	e8 3e 72 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd10:	5d                   	pop    ebp
c000fd11:	58                   	pop    eax
c000fd12:	56                   	push   esi
c000fd13:	57                   	push   edi
c000fd14:	e8 18 fd ff ff       	call   c000fa31 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd19:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd21:	83 c4 0c             	add    esp,0xc
c000fd24:	8b 35 40 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d140
c000fd2a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd2e:	01 f0                	add    eax,esi
c000fd30:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c000fd35:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd3c:	52                   	push   edx
c000fd3d:	50                   	push   eax
c000fd3e:	68 d9 33 02 c0       	push   0xc00233d9
c000fd43:	e8 06 72 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd48:	83 c4 10             	add    esp,0x10
c000fd4b:	e9 00 fe ff ff       	jmp    c000fb50 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c000fd50 <Pipe::isAtty()>:
c000fd50:	31 c0                	xor    eax,eax
c000fd52:	c3                   	ret    
c000fd53:	90                   	nop

c000fd54 <Pipe::~Pipe()>:
c000fd54:	83 ec 0c             	sub    esp,0xc
c000fd57:	ba 38 34 02 c0       	mov    edx,0xc0023438
c000fd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd60:	89 10                	mov    DWORD PTR [eax],edx
c000fd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd66:	83 ec 0c             	sub    esp,0xc
c000fd69:	50                   	push   eax
c000fd6a:	e8 b3 2a 00 00       	call   c0012822 <UnixFile::~UnixFile()>
c000fd6f:	83 c4 10             	add    esp,0x10
c000fd72:	90                   	nop
c000fd73:	83 c4 0c             	add    esp,0xc
c000fd76:	c3                   	ret    
c000fd77:	90                   	nop

c000fd78 <Pipe::~Pipe()>:
c000fd78:	83 ec 0c             	sub    esp,0xc
c000fd7b:	83 ec 0c             	sub    esp,0xc
c000fd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd82:	e8 cd ff ff ff       	call   c000fd54 <Pipe::~Pipe()>
c000fd87:	83 c4 10             	add    esp,0x10
c000fd8a:	83 ec 08             	sub    esp,0x8
c000fd8d:	6a 20                	push   0x20
c000fd8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd93:	e8 77 cd ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c000fd98:	83 c4 10             	add    esp,0x10
c000fd9b:	83 c4 0c             	add    esp,0xc
c000fd9e:	c3                   	ret    
c000fd9f:	90                   	nop

c000fda0 <Pipe::write(unsigned long long, void*, int*)>:
c000fda0:	55                   	push   ebp
c000fda1:	57                   	push   edi
c000fda2:	56                   	push   esi
c000fda3:	53                   	push   ebx
c000fda4:	83 ec 1c             	sub    esp,0x1c
c000fda7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fdab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fdaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fdb3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fdb6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fdba:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fdbd:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdc0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fdc4:	89 d8                	mov    eax,ebx
c000fdc6:	89 d6                	mov    esi,edx
c000fdc8:	89 d7                	mov    edi,edx
c000fdca:	c1 ff 1f             	sar    edi,0x1f
c000fdcd:	03 34 24             	add    esi,DWORD PTR [esp]
c000fdd0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fdd4:	c1 f8 1f             	sar    eax,0x1f
c000fdd7:	39 f3                	cmp    ebx,esi
c000fdd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fde1:	19 f8                	sbb    eax,edi
c000fde3:	b8 01 00 00 00       	mov    eax,0x1
c000fde8:	72 72                	jb     c000fe5c <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000fdea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fded:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000fdf1:	01 d0                	add    eax,edx
c000fdf3:	99                   	cdq    
c000fdf4:	f7 fb                	idiv   ebx
c000fdf6:	89 d8                	mov    eax,ebx
c000fdf8:	29 d0                	sub    eax,edx
c000fdfa:	89 d6                	mov    esi,edx
c000fdfc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fdff:	89 c3                	mov    ebx,eax
c000fe01:	c1 fb 1f             	sar    ebx,0x1f
c000fe04:	39 c2                	cmp    edx,eax
c000fe06:	19 df                	sbb    edi,ebx
c000fe08:	bb 00 00 00 00       	mov    ebx,0x0
c000fe0d:	72 04                	jb     c000fe13 <Pipe::write(unsigned long long, void*, int*)+0x73>
c000fe0f:	89 d3                	mov    ebx,edx
c000fe11:	29 c3                	sub    ebx,eax
c000fe13:	89 d0                	mov    eax,edx
c000fe15:	29 d8                	sub    eax,ebx
c000fe17:	74 0d                	je     c000fe26 <Pipe::write(unsigned long long, void*, int*)+0x86>
c000fe19:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fe1c:	89 c1                	mov    ecx,eax
c000fe1e:	01 f7                	add    edi,esi
c000fe20:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fe24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe26:	85 db                	test   ebx,ebx
c000fe28:	74 0d                	je     c000fe37 <Pipe::write(unsigned long long, void*, int*)+0x97>
c000fe2a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe2e:	89 d9                	mov    ecx,ebx
c000fe30:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fe33:	89 c6                	mov    esi,eax
c000fe35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe37:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fe3a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe3f:	75 10                	jne    c000fe51 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000fe41:	83 ec 0c             	sub    esp,0xc
c000fe44:	68 f5 33 02 c0       	push   0xc00233f5
c000fe49:	e8 90 f8 ff ff       	call   c000f6de <KePanic(char const*)>
c000fe4e:	83 c4 10             	add    esp,0x10
c000fe51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe55:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fe58:	89 08                	mov    DWORD PTR [eax],ecx
c000fe5a:	31 c0                	xor    eax,eax
c000fe5c:	83 c4 1c             	add    esp,0x1c
c000fe5f:	5b                   	pop    ebx
c000fe60:	5e                   	pop    esi
c000fe61:	5f                   	pop    edi
c000fe62:	5d                   	pop    ebp
c000fe63:	c3                   	ret    

c000fe64 <Pipe::read(unsigned long long, void*, int*)>:
c000fe64:	55                   	push   ebp
c000fe65:	57                   	push   edi
c000fe66:	56                   	push   esi
c000fe67:	53                   	push   ebx
c000fe68:	83 ec 1c             	sub    esp,0x1c
c000fe6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe6f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe73:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe77:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe7a:	89 c8                	mov    eax,ecx
c000fe7c:	99                   	cdq    
c000fe7d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe81:	74 27                	je     c000feaa <Pipe::read(unsigned long long, void*, int*)+0x46>
c000fe83:	39 f9                	cmp    ecx,edi
c000fe85:	89 d1                	mov    ecx,edx
c000fe87:	19 f1                	sbb    ecx,esi
c000fe89:	73 1f                	jae    c000feaa <Pipe::read(unsigned long long, void*, int*)+0x46>
c000fe8b:	fa                   	cli    
c000fe8c:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c000fe92:	e8 69 64 00 00       	call   c0016300 <schedule()>
c000fe97:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000fe9e:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000fea5:	75 d0                	jne    c000fe77 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fea7:	fb                   	sti    
c000fea8:	eb cd                	jmp    c000fe77 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000feaa:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000feae:	39 f8                	cmp    eax,edi
c000feb0:	89 d1                	mov    ecx,edx
c000feb2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000feb6:	19 f1                	sbb    ecx,esi
c000feb8:	73 08                	jae    c000fec2 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c000feba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000febe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fec2:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fec5:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fec8:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000fecc:	29 f7                	sub    edi,esi
c000fece:	89 f8                	mov    eax,edi
c000fed0:	99                   	cdq    
c000fed1:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fed5:	89 d0                	mov    eax,edx
c000fed7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fedb:	19 c2                	sbb    edx,eax
c000fedd:	89 f8                	mov    eax,edi
c000fedf:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000fee4:	89 ea                	mov    edx,ebp
c000fee6:	29 c2                	sub    edx,eax
c000fee8:	85 c0                	test   eax,eax
c000feea:	74 0b                	je     c000fef7 <Pipe::read(unsigned long long, void*, int*)+0x93>
c000feec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000feef:	89 c1                	mov    ecx,eax
c000fef1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fef5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fef7:	85 d2                	test   edx,edx
c000fef9:	74 0d                	je     c000ff08 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c000fefb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000feff:	89 d1                	mov    ecx,edx
c000ff01:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000ff04:	89 c7                	mov    edi,eax
c000ff06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff0b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff0e:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000ff11:	99                   	cdq    
c000ff12:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff16:	89 f7                	mov    edi,esi
c000ff18:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff1c:	c1 ff 1f             	sar    edi,0x1f
c000ff1f:	57                   	push   edi
c000ff20:	56                   	push   esi
c000ff21:	52                   	push   edx
c000ff22:	50                   	push   eax
c000ff23:	e8 4c 0e 01 00       	call   c0020d74 <__umoddi3>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff30:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff33:	75 10                	jne    c000ff45 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c000ff35:	83 ec 0c             	sub    esp,0xc
c000ff38:	68 12 34 02 c0       	push   0xc0023412
c000ff3d:	e8 9c f7 ff ff       	call   c000f6de <KePanic(char const*)>
c000ff42:	83 c4 10             	add    esp,0x10
c000ff45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff4d:	89 10                	mov    DWORD PTR [eax],edx
c000ff4f:	83 c4 1c             	add    esp,0x1c
c000ff52:	31 c0                	xor    eax,eax
c000ff54:	5b                   	pop    ebx
c000ff55:	5e                   	pop    esi
c000ff56:	5f                   	pop    edi
c000ff57:	5d                   	pop    ebp
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <Pipe::Pipe(int)>:
c000ff5a:	83 ec 0c             	sub    esp,0xc
c000ff5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff61:	83 ec 08             	sub    esp,0x8
c000ff64:	6a 00                	push   0x0
c000ff66:	50                   	push   eax
c000ff67:	e8 d0 26 00 00       	call   c001263c <UnixFile::UnixFile(int)>
c000ff6c:	83 c4 10             	add    esp,0x10
c000ff6f:	ba 38 34 02 c0       	mov    edx,0xc0023438
c000ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff78:	89 10                	mov    DWORD PTR [eax],edx
c000ff7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff82:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff89:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff94:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff9f:	83 ec 0c             	sub    esp,0xc
c000ffa2:	50                   	push   eax
c000ffa3:	e8 f0 f3 ff ff       	call   c000f398 <malloc>
c000ffa8:	83 c4 10             	add    esp,0x10
c000ffab:	89 c2                	mov    edx,eax
c000ffad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffbc:	90                   	nop
c000ffbd:	83 c4 0c             	add    esp,0xc
c000ffc0:	c3                   	ret    

c000ffc1 <KePowerThread(void*)>:
c000ffc1:	83 ec 0c             	sub    esp,0xc
c000ffc4:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000ffcb:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000ffd2:	75 01                	jne    c000ffd5 <KePowerThread(void*)+0x14>
c000ffd4:	fb                   	sti    
c000ffd5:	c6 05 60 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d160,0x0
c000ffdc:	83 ec 0c             	sub    esp,0xc
c000ffdf:	6a 0a                	push   0xa
c000ffe1:	e8 16 65 00 00       	call   c00164fc <sleep(unsigned int)>
c000ffe6:	83 c4 10             	add    esp,0x10
c000ffe9:	83 05 a4 d1 02 c0 0a 	add    DWORD PTR ds:0xc002d1a4,0xa
c000fff0:	eb e3                	jmp    c000ffd5 <KePowerThread(void*)+0x14>

c000fff2 <KeChangePowerSettings(PowerSettings)>:
c000fff2:	57                   	push   edi
c000fff3:	b9 09 00 00 00       	mov    ecx,0x9
c000fff8:	56                   	push   esi
c000fff9:	bf 80 d1 02 c0       	mov    edi,0xc002d180
c000fffe:	fc                   	cld    
c000ffff:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010003:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010005:	5e                   	pop    esi
c0010006:	5f                   	pop    edi
c0010007:	c3                   	ret    

c0010008 <KeUserIOReceived()>:
c0010008:	c7 05 a4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1a4,0x0
c0010012:	c3                   	ret    

c0010013 <KeHandlePowerButton()>:
c0010013:	a1 80 d1 02 c0       	mov    eax,ds:0xc002d180
c0010018:	83 f8 02             	cmp    eax,0x2
c001001b:	75 05                	jne    c0010022 <KeHandlePowerButton()+0xf>
c001001d:	e9 26 db ff ff       	jmp    c000db48 <KeShutdown()>
c0010022:	48                   	dec    eax
c0010023:	75 05                	jne    c001002a <KeHandlePowerButton()+0x17>
c0010025:	e9 42 db ff ff       	jmp    c000db6c <KeSleep()>
c001002a:	c3                   	ret    

c001002b <KeHandleSleepButton()>:
c001002b:	a1 84 d1 02 c0       	mov    eax,ds:0xc002d184
c0010030:	83 f8 02             	cmp    eax,0x2
c0010033:	75 05                	jne    c001003a <KeHandleSleepButton()+0xf>
c0010035:	e9 0e db ff ff       	jmp    c000db48 <KeShutdown()>
c001003a:	48                   	dec    eax
c001003b:	75 05                	jne    c0010042 <KeHandleSleepButton()+0x17>
c001003d:	e9 2a db ff ff       	jmp    c000db6c <KeSleep()>
c0010042:	c3                   	ret    

c0010043 <KeSetupPowerManager()>:
c0010043:	83 ec 0c             	sub    esp,0xc
c0010046:	68 f0 00 00 00       	push   0xf0
c001004b:	6a 00                	push   0x0
c001004d:	68 c1 ff 00 c0       	push   0xc000ffc1
c0010052:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0010058:	c7 05 a4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1a4,0x0
c0010062:	c6 05 60 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d160,0x0
c0010069:	e8 3a 60 00 00       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c001006e:	c7 05 80 d1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d180,0x2
c0010078:	c7 05 84 d1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d184,0x1
c0010082:	c7 05 88 d1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d188,0x3
c001008c:	c7 05 8c d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d18c,0x0
c0010096:	c7 05 98 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d198,0x0
c00100a0:	c7 05 90 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d190,0x0
c00100aa:	c7 05 9c d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d19c,0x0
c00100b4:	c7 05 94 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d194,0x3c
c00100be:	c7 05 a0 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d1a0,0x3c
c00100c8:	83 c4 1c             	add    esp,0x1c
c00100cb:	c3                   	ret    

c00100cc <KeRand()>:
c00100cc:	69 05 a8 d1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002d1a8,0x2875
c00100d6:	69 0d ac d1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002d1ac,0xa2e7b175
c00100e0:	53                   	push   ebx
c00100e1:	01 c1                	add    ecx,eax
c00100e3:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00100e8:	f7 25 a8 d1 02 c0    	mul    DWORD PTR ds:0xc002d1a8
c00100ee:	01 ca                	add    edx,ecx
c00100f0:	05 ef 04 b5 00       	add    eax,0xb504ef
c00100f5:	a3 a8 d1 02 c0       	mov    ds:0xc002d1a8,eax
c00100fa:	83 d2 00             	adc    edx,0x0
c00100fd:	0f b7 da             	movzx  ebx,dx
c0010100:	89 1d ac d1 02 c0    	mov    DWORD PTR ds:0xc002d1ac,ebx
c0010106:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001010a:	5b                   	pop    ebx
c001010b:	c3                   	ret    

c001010c <KeSeedRand(unsigned int)>:
c001010c:	53                   	push   ebx
c001010d:	83 ec 08             	sub    esp,0x8
c0010110:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010114:	e8 5e 94 00 00       	call   c0019577 <HalGetRand()>
c0010119:	c7 05 ac d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1ac,0x0
c0010123:	31 d8                	xor    eax,ebx
c0010125:	a3 a8 d1 02 c0       	mov    ds:0xc002d1a8,eax
c001012a:	e8 9d ff ff ff       	call   c00100cc <KeRand()>
c001012f:	83 c4 08             	add    esp,0x8
c0010132:	5b                   	pop    ebx
c0010133:	eb 97                	jmp    c00100cc <KeRand()>

c0010135 <KeInitRand()>:
c0010135:	83 ec 0c             	sub    esp,0xc
c0010138:	e8 5e 92 00 00       	call   c001939b <HalQueryPerformanceCounter()>
c001013d:	0f 20 da             	mov    edx,cr3
c0010140:	0f 22 da             	mov    cr3,edx
c0010143:	0f 20 da             	mov    edx,cr3
c0010146:	0f 22 da             	mov    cr3,edx
c0010149:	0f 20 da             	mov    edx,cr3
c001014c:	0f 22 da             	mov    cr3,edx
c001014f:	0f 20 da             	mov    edx,cr3
c0010152:	0f 22 da             	mov    cr3,edx
c0010155:	83 ec 0c             	sub    esp,0xc
c0010158:	35 03 8a 95 38       	xor    eax,0x38958a03
c001015d:	50                   	push   eax
c001015e:	e8 a9 ff ff ff       	call   c001010c <KeSeedRand(unsigned int)>
c0010163:	83 c4 1c             	add    esp,0x1c
c0010166:	c3                   	ret    
c0010167:	90                   	nop

c0010168 <KeResolveCompatibilitySymbol(char*)>:
c0010168:	83 ec 0c             	sub    esp,0xc
c001016b:	83 ec 08             	sub    esp,0x8
c001016e:	68 4c 34 02 c0       	push   0xc002344c
c0010173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010177:	e8 04 06 ff ff       	call   c0000780 <strcmp>
c001017c:	83 c4 10             	add    esp,0x10
c001017f:	85 c0                	test   eax,eax
c0010181:	0f 94 c0             	sete   al
c0010184:	0f b6 c0             	movzx  eax,al
c0010187:	85 c0                	test   eax,eax
c0010189:	74 0d                	je     c0010198 <KeResolveCompatibilitySymbol(char*)+0x30>
c001018b:	b8 d0 b0 02 c0       	mov    eax,0xc002b0d0
c0010190:	e9 8b 01 00 00       	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010195:	8d 76 00             	lea    esi,[esi+0x0]
c0010198:	83 ec 08             	sub    esp,0x8
c001019b:	68 55 34 02 c0       	push   0xc0023455
c00101a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a4:	e8 d7 05 ff ff       	call   c0000780 <strcmp>
c00101a9:	83 c4 10             	add    esp,0x10
c00101ac:	85 c0                	test   eax,eax
c00101ae:	0f 94 c0             	sete   al
c00101b1:	0f b6 c0             	movzx  eax,al
c00101b4:	85 c0                	test   eax,eax
c00101b6:	74 0c                	je     c00101c4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00101b8:	b8 74 0c 02 c0       	mov    eax,0xc0020c74
c00101bd:	e9 5e 01 00 00       	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00101c2:	66 90                	xchg   ax,ax
c00101c4:	83 ec 08             	sub    esp,0x8
c00101c7:	68 5f 34 02 c0       	push   0xc002345f
c00101cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101d0:	e8 ab 05 ff ff       	call   c0000780 <strcmp>
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	85 c0                	test   eax,eax
c00101da:	0f 94 c0             	sete   al
c00101dd:	0f b6 c0             	movzx  eax,al
c00101e0:	85 c0                	test   eax,eax
c00101e2:	74 0c                	je     c00101f0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00101e4:	b8 a8 09 02 c0       	mov    eax,0xc00209a8
c00101e9:	e9 32 01 00 00       	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00101ee:	66 90                	xchg   ax,ax
c00101f0:	83 ec 08             	sub    esp,0x8
c00101f3:	68 68 34 02 c0       	push   0xc0023468
c00101f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fc:	e8 7f 05 ff ff       	call   c0000780 <strcmp>
c0010201:	83 c4 10             	add    esp,0x10
c0010204:	85 c0                	test   eax,eax
c0010206:	0f 94 c0             	sete   al
c0010209:	0f b6 c0             	movzx  eax,al
c001020c:	85 c0                	test   eax,eax
c001020e:	74 0c                	je     c001021c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010210:	b8 de f6 00 c0       	mov    eax,0xc000f6de
c0010215:	e9 06 01 00 00       	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001021a:	66 90                	xchg   ax,ax
c001021c:	83 ec 08             	sub    esp,0x8
c001021f:	68 7b 34 02 c0       	push   0xc002347b
c0010224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010228:	e8 53 05 ff ff       	call   c0000780 <strcmp>
c001022d:	83 c4 10             	add    esp,0x10
c0010230:	85 c0                	test   eax,eax
c0010232:	0f 94 c0             	sete   al
c0010235:	0f b6 c0             	movzx  eax,al
c0010238:	85 c0                	test   eax,eax
c001023a:	74 0c                	je     c0010248 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001023c:	b8 4f ca 00 c0       	mov    eax,0xc000ca4f
c0010241:	e9 da 00 00 00       	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010246:	66 90                	xchg   ax,ax
c0010248:	83 ec 08             	sub    esp,0x8
c001024b:	68 98 34 02 c0       	push   0xc0023498
c0010250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010254:	e8 27 05 ff ff       	call   c0000780 <strcmp>
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	85 c0                	test   eax,eax
c001025e:	0f 94 c0             	sete   al
c0010261:	0f b6 c0             	movzx  eax,al
c0010264:	85 c0                	test   eax,eax
c0010266:	74 0c                	je     c0010274 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010268:	b8 74 0d 02 c0       	mov    eax,0xc0020d74
c001026d:	e9 ae 00 00 00       	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010272:	66 90                	xchg   ax,ax
c0010274:	83 ec 08             	sub    esp,0x8
c0010277:	68 a2 34 02 c0       	push   0xc00234a2
c001027c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010280:	e8 fb 04 ff ff       	call   c0000780 <strcmp>
c0010285:	83 c4 10             	add    esp,0x10
c0010288:	85 c0                	test   eax,eax
c001028a:	0f 94 c0             	sete   al
c001028d:	0f b6 c0             	movzx  eax,al
c0010290:	85 c0                	test   eax,eax
c0010292:	74 0c                	je     c00102a0 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010294:	b8 f4 0a 02 c0       	mov    eax,0xc0020af4
c0010299:	e9 82 00 00 00       	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001029e:	66 90                	xchg   ax,ax
c00102a0:	83 ec 08             	sub    esp,0x8
c00102a3:	68 ab 34 02 c0       	push   0xc00234ab
c00102a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ac:	e8 cf 04 ff ff       	call   c0000780 <strcmp>
c00102b1:	83 c4 10             	add    esp,0x10
c00102b4:	85 c0                	test   eax,eax
c00102b6:	0f 94 c0             	sete   al
c00102b9:	0f b6 c0             	movzx  eax,al
c00102bc:	85 c0                	test   eax,eax
c00102be:	74 08                	je     c00102c8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00102c0:	b8 d4 b0 02 c0       	mov    eax,0xc002b0d4
c00102c5:	eb 59                	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00102c7:	90                   	nop
c00102c8:	83 ec 08             	sub    esp,0x8
c00102cb:	68 c3 34 02 c0       	push   0xc00234c3
c00102d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d4:	e8 a7 04 ff ff       	call   c0000780 <strcmp>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	85 c0                	test   eax,eax
c00102de:	0f 94 c0             	sete   al
c00102e1:	0f b6 c0             	movzx  eax,al
c00102e4:	85 c0                	test   eax,eax
c00102e6:	74 08                	je     c00102f0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00102e8:	b8 d4 b0 02 c0       	mov    eax,0xc002b0d4
c00102ed:	eb 31                	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00102ef:	90                   	nop
c00102f0:	83 ec 08             	sub    esp,0x8
c00102f3:	68 d0 34 02 c0       	push   0xc00234d0
c00102f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fc:	e8 7f 04 ff ff       	call   c0000780 <strcmp>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	85 c0                	test   eax,eax
c0010306:	0f 94 c0             	sete   al
c0010309:	0f b6 c0             	movzx  eax,al
c001030c:	85 c0                	test   eax,eax
c001030e:	74 08                	je     c0010318 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010310:	b8 d5 b0 02 c0       	mov    eax,0xc002b0d5
c0010315:	eb 09                	jmp    c0010320 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010317:	90                   	nop
c0010318:	b8 00 00 00 00       	mov    eax,0x0
c001031d:	8d 76 00             	lea    esi,[esi+0x0]
c0010320:	83 c4 0c             	add    esp,0xc
c0010323:	c3                   	ret    

c0010324 <Semaphore::Semaphore(int)>:
c0010324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001032c:	89 10                	mov    DWORD PTR [eax],edx
c001032e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010332:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010348:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001034f:	90                   	nop
c0010350:	c3                   	ret    
c0010351:	90                   	nop
c0010352:	66 90                	xchg   ax,ax

c0010354 <Semaphore::tryAcquire()>:
c0010354:	83 ec 0c             	sub    esp,0xc
c0010357:	fa                   	cli    
c0010358:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001035d:	83 c0 01             	add    eax,0x1
c0010360:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0010365:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001036a:	83 c0 01             	add    eax,0x1
c001036d:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010376:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001037d:	8b 00                	mov    eax,DWORD PTR [eax]
c001037f:	39 c2                	cmp    edx,eax
c0010381:	7d 59                	jge    c00103dc <Semaphore::tryAcquire()+0x88>
c0010383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010387:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001038a:	8d 50 01             	lea    edx,[eax+0x1]
c001038d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010391:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010394:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0010399:	83 e8 01             	sub    eax,0x1
c001039c:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c00103a1:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00103a6:	85 c0                	test   eax,eax
c00103a8:	75 1a                	jne    c00103c4 <Semaphore::tryAcquire()+0x70>
c00103aa:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c00103af:	85 c0                	test   eax,eax
c00103b1:	74 11                	je     c00103c4 <Semaphore::tryAcquire()+0x70>
c00103b3:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c00103bd:	e8 3e 5f 00 00       	call   c0016300 <schedule()>
c00103c2:	66 90                	xchg   ax,ax
c00103c4:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00103cc:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00103d1:	85 c0                	test   eax,eax
c00103d3:	75 03                	jne    c00103d8 <Semaphore::tryAcquire()+0x84>
c00103d5:	fb                   	sti    
c00103d6:	66 90                	xchg   ax,ax
c00103d8:	b0 01                	mov    al,0x1
c00103da:	eb 48                	jmp    c0010424 <Semaphore::tryAcquire()+0xd0>
c00103dc:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00103e1:	83 e8 01             	sub    eax,0x1
c00103e4:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c00103e9:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00103ee:	85 c0                	test   eax,eax
c00103f0:	75 1a                	jne    c001040c <Semaphore::tryAcquire()+0xb8>
c00103f2:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c00103f7:	85 c0                	test   eax,eax
c00103f9:	74 11                	je     c001040c <Semaphore::tryAcquire()+0xb8>
c00103fb:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0010405:	e8 f6 5e 00 00       	call   c0016300 <schedule()>
c001040a:	66 90                	xchg   ax,ax
c001040c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0010414:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0010419:	85 c0                	test   eax,eax
c001041b:	75 03                	jne    c0010420 <Semaphore::tryAcquire()+0xcc>
c001041d:	fb                   	sti    
c001041e:	66 90                	xchg   ax,ax
c0010420:	b0 00                	mov    al,0x0
c0010422:	66 90                	xchg   ax,ax
c0010424:	83 c4 0c             	add    esp,0xc
c0010427:	c3                   	ret    

c0010428 <Semaphore::assertLocked(char const*)>:
c0010428:	83 ec 0c             	sub    esp,0xc
c001042b:	fa                   	cli    
c001042c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0010431:	83 c0 01             	add    eax,0x1
c0010434:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0010439:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001043e:	83 c0 01             	add    eax,0x1
c0010441:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001044a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001044d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010451:	8b 00                	mov    eax,DWORD PTR [eax]
c0010453:	39 c2                	cmp    edx,eax
c0010455:	7d 11                	jge    c0010468 <Semaphore::assertLocked(char const*)+0x40>
c0010457:	83 ec 0c             	sub    esp,0xc
c001045a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001045e:	e8 7b f2 ff ff       	call   c000f6de <KePanic(char const*)>
c0010463:	83 c4 10             	add    esp,0x10
c0010466:	66 90                	xchg   ax,ax
c0010468:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001046d:	83 e8 01             	sub    eax,0x1
c0010470:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010475:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001047a:	85 c0                	test   eax,eax
c001047c:	75 1a                	jne    c0010498 <Semaphore::assertLocked(char const*)+0x70>
c001047e:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0010483:	85 c0                	test   eax,eax
c0010485:	74 11                	je     c0010498 <Semaphore::assertLocked(char const*)+0x70>
c0010487:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0010491:	e8 6a 5e 00 00       	call   c0016300 <schedule()>
c0010496:	66 90                	xchg   ax,ax
c0010498:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00104a0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00104a5:	85 c0                	test   eax,eax
c00104a7:	75 03                	jne    c00104ac <Semaphore::assertLocked(char const*)+0x84>
c00104a9:	fb                   	sti    
c00104aa:	66 90                	xchg   ax,ax
c00104ac:	90                   	nop
c00104ad:	83 c4 0c             	add    esp,0xc
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop
c00104b2:	66 90                	xchg   ax,ax

c00104b4 <Semaphore::acquire(int)>:
c00104b4:	83 ec 1c             	sub    esp,0x1c
c00104b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00104bc:	0f 84 9a 00 00 00    	je     c001055c <Semaphore::acquire(int)+0xa8>
c00104c2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00104ca:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00104cf:	90                   	nop
c00104d0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00104d5:	85 c0                	test   eax,eax
c00104d7:	74 77                	je     c0010550 <Semaphore::acquire(int)+0x9c>
c00104d9:	83 ec 0c             	sub    esp,0xc
c00104dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00104e0:	e8 6f fe ff ff       	call   c0010354 <Semaphore::tryAcquire()>
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	83 f0 01             	xor    eax,0x1
c00104eb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00104ef:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00104f3:	83 f0 01             	xor    eax,0x1
c00104f6:	0f b6 c0             	movzx  eax,al
c00104f9:	85 c0                	test   eax,eax
c00104fb:	75 4f                	jne    c001054c <Semaphore::acquire(int)+0x98>
c00104fd:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010502:	7f 2c                	jg     c0010530 <Semaphore::acquire(int)+0x7c>
c0010504:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010508:	89 d0                	mov    eax,edx
c001050a:	c1 e0 02             	shl    eax,0x2
c001050d:	01 d0                	add    eax,edx
c001050f:	d1 e0                	shl    eax,1
c0010511:	83 ec 0c             	sub    esp,0xc
c0010514:	50                   	push   eax
c0010515:	e8 ce 5f 00 00       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001051a:	83 c4 10             	add    esp,0x10
c001051d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010521:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010525:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001052d:	eb a1                	jmp    c00104d0 <Semaphore::acquire(int)+0x1c>
c001052f:	90                   	nop
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	68 90 01 00 00       	push   0x190
c0010538:	e8 ab 5f 00 00       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010545:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c001054a:	eb 84                	jmp    c00104d0 <Semaphore::acquire(int)+0x1c>
c001054c:	90                   	nop
c001054d:	8d 76 00             	lea    esi,[esi+0x0]
c0010550:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010554:	e9 fb 00 00 00       	jmp    c0010654 <Semaphore::acquire(int)+0x1a0>
c0010559:	8d 76 00             	lea    esi,[esi+0x0]
c001055c:	fa                   	cli    
c001055d:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0010562:	83 c0 01             	add    eax,0x1
c0010565:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c001056a:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001056f:	83 c0 01             	add    eax,0x1
c0010572:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001057b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001057e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010582:	8b 00                	mov    eax,DWORD PTR [eax]
c0010584:	39 c2                	cmp    edx,eax
c0010586:	7d 14                	jge    c001059c <Semaphore::acquire(int)+0xe8>
c0010588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001058c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001058f:	8d 50 01             	lea    edx,[eax+0x1]
c0010592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010596:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010599:	eb 6d                	jmp    c0010608 <Semaphore::acquire(int)+0x154>
c001059b:	90                   	nop
c001059c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00105a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00105a3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00105aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00105b1:	85 c0                	test   eax,eax
c00105b3:	75 13                	jne    c00105c8 <Semaphore::acquire(int)+0x114>
c00105b5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00105ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00105bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00105c3:	eb 17                	jmp    c00105dc <Semaphore::acquire(int)+0x128>
c00105c5:	8d 76 00             	lea    esi,[esi+0x0]
c00105c8:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00105cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00105d4:	8b 12                	mov    edx,DWORD PTR [edx]
c00105d6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00105d9:	8d 76 00             	lea    esi,[esi+0x0]
c00105dc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00105e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00105e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00105ea:	83 ec 0c             	sub    esp,0xc
c00105ed:	68 e0 34 02 c0       	push   0xc00234e0
c00105f2:	e8 57 69 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	83 ec 0c             	sub    esp,0xc
c00105fd:	6a 05                	push   0x5
c00105ff:	e8 bc 5d 00 00       	call   c00163c0 <blockTask(TaskState)>
c0010604:	83 c4 10             	add    esp,0x10
c0010607:	90                   	nop
c0010608:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001060d:	83 e8 01             	sub    eax,0x1
c0010610:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010615:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001061a:	85 c0                	test   eax,eax
c001061c:	75 1a                	jne    c0010638 <Semaphore::acquire(int)+0x184>
c001061e:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0010623:	85 c0                	test   eax,eax
c0010625:	74 11                	je     c0010638 <Semaphore::acquire(int)+0x184>
c0010627:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0010631:	e8 ca 5c 00 00       	call   c0016300 <schedule()>
c0010636:	66 90                	xchg   ax,ax
c0010638:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0010640:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0010645:	85 c0                	test   eax,eax
c0010647:	75 03                	jne    c001064c <Semaphore::acquire(int)+0x198>
c0010649:	fb                   	sti    
c001064a:	66 90                	xchg   ax,ax
c001064c:	b8 00 00 00 00       	mov    eax,0x0
c0010651:	8d 76 00             	lea    esi,[esi+0x0]
c0010654:	83 c4 1c             	add    esp,0x1c
c0010657:	c3                   	ret    

c0010658 <Semaphore::acquire()>:
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	83 ec 08             	sub    esp,0x8
c001065e:	6a 00                	push   0x0
c0010660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010664:	e8 4b fe ff ff       	call   c00104b4 <Semaphore::acquire(int)>
c0010669:	83 c4 10             	add    esp,0x10
c001066c:	90                   	nop
c001066d:	83 c4 0c             	add    esp,0xc
c0010670:	c3                   	ret    
c0010671:	90                   	nop
c0010672:	66 90                	xchg   ax,ax

c0010674 <Semaphore::release()>:
c0010674:	83 ec 1c             	sub    esp,0x1c
c0010677:	fa                   	cli    
c0010678:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001067d:	83 c0 01             	add    eax,0x1
c0010680:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0010685:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001068a:	83 c0 01             	add    eax,0x1
c001068d:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010699:	85 c0                	test   eax,eax
c001069b:	74 2b                	je     c00106c8 <Semaphore::release()+0x54>
c001069d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00106a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106ac:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00106af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00106b6:	83 ec 0c             	sub    esp,0xc
c00106b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106bd:	e8 3e 5f 00 00       	call   c0016600 <unblockTask(ThreadControlBlock*)>
c00106c2:	83 c4 10             	add    esp,0x10
c00106c5:	eb 15                	jmp    c00106dc <Semaphore::release()+0x68>
c00106c7:	90                   	nop
c00106c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00106cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00106d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00106d9:	8d 76 00             	lea    esi,[esi+0x0]
c00106dc:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00106e1:	83 e8 01             	sub    eax,0x1
c00106e4:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c00106e9:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00106ee:	85 c0                	test   eax,eax
c00106f0:	75 1a                	jne    c001070c <Semaphore::release()+0x98>
c00106f2:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c00106f7:	85 c0                	test   eax,eax
c00106f9:	74 11                	je     c001070c <Semaphore::release()+0x98>
c00106fb:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0010705:	e8 f6 5b 00 00       	call   c0016300 <schedule()>
c001070a:	66 90                	xchg   ax,ax
c001070c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0010714:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0010719:	85 c0                	test   eax,eax
c001071b:	75 03                	jne    c0010720 <Semaphore::release()+0xac>
c001071d:	fb                   	sti    
c001071e:	66 90                	xchg   ax,ax
c0010720:	90                   	nop
c0010721:	83 c4 1c             	add    esp,0x1c
c0010724:	c3                   	ret    

c0010725 <KiSigKill(int)>:
c0010725:	83 ec 0c             	sub    esp,0xc
c0010728:	6a 00                	push   0x0
c001072a:	6a 00                	push   0x0
c001072c:	6a ff                	push   0xffffffff
c001072e:	6a 01                	push   0x1
c0010730:	e8 1d 59 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010735:	83 c4 1c             	add    esp,0x1c
c0010738:	c3                   	ret    

c0010739 <KiDefaultSignalHandlerIgnore(int)>:
c0010739:	c3                   	ret    

c001073a <KiDefaultSignalHandlerPause(int)>:
c001073a:	57                   	push   edi
c001073b:	b9 07 00 00 00       	mov    ecx,0x7
c0010740:	56                   	push   esi
c0010741:	be 3b 35 02 c0       	mov    esi,0xc002353b
c0010746:	83 ec 24             	sub    esp,0x24
c0010749:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001074d:	fc                   	cld    
c001074e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010750:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010754:	50                   	push   eax
c0010755:	6a 00                	push   0x0
c0010757:	6a 00                	push   0x0
c0010759:	6a 27                	push   0x27
c001075b:	e8 f2 58 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010760:	83 c4 34             	add    esp,0x34
c0010763:	5e                   	pop    esi
c0010764:	5f                   	pop    edi
c0010765:	c3                   	ret    

c0010766 <KiDefaultSignalHandlerResume(int)>:
c0010766:	57                   	push   edi
c0010767:	b9 1d 00 00 00       	mov    ecx,0x1d
c001076c:	56                   	push   esi
c001076d:	be 57 35 02 c0       	mov    esi,0xc0023557
c0010772:	83 ec 24             	sub    esp,0x24
c0010775:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010779:	fc                   	cld    
c001077a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001077c:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010780:	50                   	push   eax
c0010781:	6a 00                	push   0x0
c0010783:	6a 00                	push   0x0
c0010785:	6a 27                	push   0x27
c0010787:	e8 c6 58 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001078c:	83 c4 34             	add    esp,0x34
c001078f:	5e                   	pop    esi
c0010790:	5f                   	pop    edi
c0010791:	c3                   	ret    

c0010792 <KeDeinitSignals(SigHandlerBlock*)>:
c0010792:	e9 11 ec ff ff       	jmp    c000f3a8 <free>

c0010797 <KeInitSignals()>:
c0010797:	53                   	push   ebx
c0010798:	83 ec 14             	sub    esp,0x14
c001079b:	68 c8 00 00 00       	push   0xc8
c00107a0:	e8 f3 eb ff ff       	call   c000f398 <malloc>
c00107a5:	83 c4 0c             	add    esp,0xc
c00107a8:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00107b2:	89 c3                	mov    ebx,eax
c00107b4:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00107be:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00107c4:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00107c8:	6a 20                	push   0x20
c00107ca:	6a 00                	push   0x0
c00107cc:	50                   	push   eax
c00107cd:	e8 1e fd fe ff       	call   c00004f0 <memset>
c00107d2:	83 c4 0c             	add    esp,0xc
c00107d5:	6a 44                	push   0x44
c00107d7:	6a 00                	push   0x0
c00107d9:	53                   	push   ebx
c00107da:	e8 11 fd fe ff       	call   c00004f0 <memset>
c00107df:	83 c4 18             	add    esp,0x18
c00107e2:	89 d8                	mov    eax,ebx
c00107e4:	5b                   	pop    ebx
c00107e5:	c3                   	ret    

c00107e6 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00107e6:	53                   	push   ebx
c00107e7:	b8 01 00 00 00       	mov    eax,0x1
c00107ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00107f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107f4:	83 f9 10             	cmp    ecx,0x10
c00107f7:	7f 21                	jg     c001081a <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00107f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fd:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010800:	89 03                	mov    DWORD PTR [ebx],eax
c0010802:	b8 01 00 00 00       	mov    eax,0x1
c0010807:	d3 e0                	shl    eax,cl
c0010809:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001080d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010810:	31 c0                	xor    eax,eax
c0010812:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001081a:	5b                   	pop    ebx
c001081b:	c3                   	ret    

c001081c <KeRaiseSignal(SigHandlerBlock*, int)>:
c001081c:	55                   	push   ebp
c001081d:	57                   	push   edi
c001081e:	bf 08 00 00 00       	mov    edi,0x8
c0010823:	56                   	push   esi
c0010824:	53                   	push   ebx
c0010825:	83 ec 18             	sub    esp,0x18
c0010828:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001082c:	68 74 35 02 c0       	push   0xc0023574
c0010831:	e8 18 67 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010836:	83 c4 10             	add    esp,0x10
c0010839:	31 c9                	xor    ecx,ecx
c001083b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010842:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010848:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001084c:	99                   	cdq    
c001084d:	f7 ff                	idiv   edi
c001084f:	8d 42 24             	lea    eax,[edx+0x24]
c0010852:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010856:	85 f6                	test   esi,esi
c0010858:	75 1a                	jne    c0010874 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001085a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001085e:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010862:	50                   	push   eax
c0010863:	50                   	push   eax
c0010864:	52                   	push   edx
c0010865:	68 85 35 02 c0       	push   0xc0023585
c001086a:	e8 df 66 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001086f:	83 c4 10             	add    esp,0x10
c0010872:	eb 1b                	jmp    c001088f <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010874:	41                   	inc    ecx
c0010875:	83 f9 08             	cmp    ecx,0x8
c0010878:	75 ce                	jne    c0010848 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001087a:	83 ec 0c             	sub    esp,0xc
c001087d:	be 01 00 00 00       	mov    esi,0x1
c0010882:	68 a6 35 02 c0       	push   0xc00235a6
c0010887:	e8 c2 66 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001088c:	83 c4 10             	add    esp,0x10
c001088f:	83 c4 0c             	add    esp,0xc
c0010892:	89 f0                	mov    eax,esi
c0010894:	5b                   	pop    ebx
c0010895:	5e                   	pop    esi
c0010896:	5f                   	pop    edi
c0010897:	5d                   	pop    ebp
c0010898:	c3                   	ret    

c0010899 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010899:	55                   	push   ebp
c001089a:	57                   	push   edi
c001089b:	56                   	push   esi
c001089c:	53                   	push   ebx
c001089d:	51                   	push   ecx
c001089e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00108a2:	85 db                	test   ebx,ebx
c00108a4:	0f 84 bc 00 00 00    	je     c0010966 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00108aa:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00108b1:	0f 84 af 00 00 00    	je     c0010966 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00108b7:	31 c9                	xor    ecx,ecx
c00108b9:	bf 08 00 00 00       	mov    edi,0x8
c00108be:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00108c4:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00108c7:	99                   	cdq    
c00108c8:	f7 ff                	idiv   edi
c00108ca:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00108d1:	85 ed                	test   ebp,ebp
c00108d3:	0f 84 9e 00 00 00    	je     c0010977 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00108d9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00108df:	89 e9                	mov    ecx,ebp
c00108e1:	bf 01 00 00 00       	mov    edi,0x1
c00108e6:	d3 e7                	shl    edi,cl
c00108e8:	31 c9                	xor    ecx,ecx
c00108ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00108ed:	b8 01 00 00 00       	mov    eax,0x1
c00108f2:	d3 e0                	shl    eax,cl
c00108f4:	85 04 24             	test   DWORD PTR [esp],eax
c00108f7:	74 06                	je     c00108ff <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00108f9:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00108fd:	75 67                	jne    c0010966 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00108ff:	41                   	inc    ecx
c0010900:	83 f9 11             	cmp    ecx,0x11
c0010903:	75 e8                	jne    c00108ed <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0010905:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010908:	46                   	inc    esi
c0010909:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001090f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001091a:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010921:	09 f8                	or     eax,edi
c0010923:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010929:	31 c0                	xor    eax,eax
c001092b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010933:	74 09                	je     c001093e <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010935:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001093c:	eb 06                	jmp    c0010944 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001093e:	40                   	inc    eax
c001093f:	83 f8 08             	cmp    eax,0x8
c0010942:	75 e7                	jne    c001092b <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0010944:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010948:	83 fd 09             	cmp    ebp,0x9
c001094b:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001094e:	89 2a                	mov    DWORD PTR [edx],ebp
c0010950:	75 07                	jne    c0010959 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0010952:	b8 25 07 01 c0       	mov    eax,0xc0010725
c0010957:	eb 31                	jmp    c001098a <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010959:	83 f8 01             	cmp    eax,0x1
c001095c:	75 0c                	jne    c001096a <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001095e:	f7 d7                	not    edi
c0010960:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010966:	31 c0                	xor    eax,eax
c0010968:	eb 20                	jmp    c001098a <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001096a:	85 c0                	test   eax,eax
c001096c:	75 1c                	jne    c001098a <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001096e:	8b 04 ad e0 57 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffda820]
c0010975:	eb 13                	jmp    c001098a <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010977:	41                   	inc    ecx
c0010978:	46                   	inc    esi
c0010979:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001097f:	83 f9 08             	cmp    ecx,0x8
c0010982:	0f 85 36 ff ff ff    	jne    c00108be <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0010988:	eb dc                	jmp    c0010966 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001098a:	5a                   	pop    edx
c001098b:	5b                   	pop    ebx
c001098c:	5e                   	pop    esi
c001098d:	5f                   	pop    edi
c001098e:	5d                   	pop    ebp
c001098f:	c3                   	ret    

c0010990 <KiCheckSignalZ>:
c0010990:	83 ec 10             	sub    esp,0x10
c0010993:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010997:	50                   	push   eax
c0010998:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001099d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109a0:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00109a6:	e8 ee fe ff ff       	call   c0010899 <KeCheckSignal(SigHandlerBlock*, int*)>
c00109ab:	5a                   	pop    edx
c00109ac:	31 d2                	xor    edx,edx
c00109ae:	59                   	pop    ecx
c00109af:	85 c0                	test   eax,eax
c00109b1:	74 19                	je     c00109cc <KiCheckSignalZ+0x3c>
c00109b3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00109b9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00109bc:	89 02                	mov    DWORD PTR [edx],eax
c00109be:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00109c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109c9:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00109cc:	89 d0                	mov    eax,edx
c00109ce:	83 c4 10             	add    esp,0x10
c00109d1:	c3                   	ret    

c00109d2 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00109d2:	56                   	push   esi
c00109d3:	53                   	push   ebx
c00109d4:	bb 01 00 00 00       	mov    ebx,0x1
c00109d9:	52                   	push   edx
c00109da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00109de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109e2:	d3 e3                	shl    ebx,cl
c00109e4:	83 f9 10             	cmp    ecx,0x10
c00109e7:	7f 08                	jg     c00109f1 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00109e9:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00109ef:	75 10                	jne    c0010a01 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00109f1:	83 ec 0c             	sub    esp,0xc
c00109f4:	68 b7 35 02 c0       	push   0xc00235b7
c00109f9:	e8 e0 ec ff ff       	call   c000f6de <KePanic(char const*)>
c00109fe:	83 c4 10             	add    esp,0x10
c0010a01:	f7 d3                	not    ebx
c0010a03:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010a09:	58                   	pop    eax
c0010a0a:	5b                   	pop    ebx
c0010a0b:	5e                   	pop    esi
c0010a0c:	c3                   	ret    

c0010a0d <KiFinishSignalZ>:
c0010a0d:	53                   	push   ebx
c0010a0e:	83 ec 10             	sub    esp,0x10
c0010a11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a15:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010a18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a20:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010a26:	e8 a7 ff ff ff       	call   c00109d2 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010a2b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010a31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010a38:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010a3f:	83 c4 18             	add    esp,0x18
c0010a42:	5b                   	pop    ebx
c0010a43:	c3                   	ret    

c0010a44 <SysSeekDir(regs*)>:
c0010a44:	31 c0                	xor    eax,eax
c0010a46:	31 d2                	xor    edx,edx
c0010a48:	c3                   	ret    

c0010a49 <SysTellDir(regs*)>:
c0010a49:	31 c0                	xor    eax,eax
c0010a4b:	31 d2                	xor    edx,edx
c0010a4d:	c3                   	ret    

c0010a4e <SysVerify(regs*)>:
c0010a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a52:	31 d2                	xor    edx,edx
c0010a54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a57:	c3                   	ret    

c0010a58 <SysGetArgc(regs*)>:
c0010a58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a60:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010a66:	89 c2                	mov    edx,eax
c0010a68:	c1 fa 1f             	sar    edx,0x1f
c0010a6b:	c3                   	ret    

c0010a6c <SysTTYName(regs*)>:
c0010a6c:	b8 01 00 00 00       	mov    eax,0x1
c0010a71:	31 d2                	xor    edx,edx
c0010a73:	c3                   	ret    

c0010a74 <SysFormatDisk(regs*)>:
c0010a74:	56                   	push   esi
c0010a75:	53                   	push   ebx
c0010a76:	83 ec 04             	sub    esp,0x4
c0010a79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a7d:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c0010a83:	eb 2a                	jmp    c0010aaf <SysFormatDisk(regs*)+0x3b>
c0010a85:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010a8e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a90:	51                   	push   ecx
c0010a91:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010a94:	51                   	push   ecx
c0010a95:	50                   	push   eax
c0010a96:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0010a9d:	50                   	push   eax
c0010a9e:	53                   	push   ebx
c0010a9f:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010aa2:	83 c4 20             	add    esp,0x20
c0010aa5:	83 f8 08             	cmp    eax,0x8
c0010aa8:	89 c1                	mov    ecx,eax
c0010aaa:	75 14                	jne    c0010ac0 <SysFormatDisk(regs*)+0x4c>
c0010aac:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010aaf:	85 db                	test   ebx,ebx
c0010ab1:	75 d2                	jne    c0010a85 <SysFormatDisk(regs*)+0x11>
c0010ab3:	b8 03 00 00 00       	mov    eax,0x3
c0010ab8:	31 d2                	xor    edx,edx
c0010aba:	83 c4 04             	add    esp,0x4
c0010abd:	5b                   	pop    ebx
c0010abe:	5e                   	pop    esi
c0010abf:	c3                   	ret    
c0010ac0:	85 c0                	test   eax,eax
c0010ac2:	74 13                	je     c0010ad7 <SysFormatDisk(regs*)+0x63>
c0010ac4:	31 d2                	xor    edx,edx
c0010ac6:	83 f9 09             	cmp    ecx,0x9
c0010ac9:	b8 01 00 00 00       	mov    eax,0x1
c0010ace:	74 ea                	je     c0010aba <SysFormatDisk(regs*)+0x46>
c0010ad0:	b8 02 00 00 00       	mov    eax,0x2
c0010ad5:	eb e1                	jmp    c0010ab8 <SysFormatDisk(regs*)+0x44>
c0010ad7:	31 c0                	xor    eax,eax
c0010ad9:	eb dd                	jmp    c0010ab8 <SysFormatDisk(regs*)+0x44>

c0010adb <SysSetDiskVolumeLabel(regs*)>:
c0010adb:	56                   	push   esi
c0010adc:	53                   	push   ebx
c0010add:	83 ec 04             	sub    esp,0x4
c0010ae0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010ae4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010ae7:	83 f8 19             	cmp    eax,0x19
c0010aea:	77 33                	ja     c0010b1f <SysSetDiskVolumeLabel(regs*)+0x44>
c0010aec:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c0010af3:	85 c9                	test   ecx,ecx
c0010af5:	74 28                	je     c0010b1f <SysSetDiskVolumeLabel(regs*)+0x44>
c0010af7:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010afa:	85 db                	test   ebx,ebx
c0010afc:	74 21                	je     c0010b1f <SysSetDiskVolumeLabel(regs*)+0x44>
c0010afe:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010b04:	85 d2                	test   edx,edx
c0010b06:	74 17                	je     c0010b1f <SysSetDiskVolumeLabel(regs*)+0x44>
c0010b08:	8b 32                	mov    esi,DWORD PTR [edx]
c0010b0a:	53                   	push   ebx
c0010b0b:	50                   	push   eax
c0010b0c:	51                   	push   ecx
c0010b0d:	52                   	push   edx
c0010b0e:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	83 c4 04             	add    esp,0x4
c0010b17:	5b                   	pop    ebx
c0010b18:	5e                   	pop    esi
c0010b19:	89 c2                	mov    edx,eax
c0010b1b:	c1 fa 1f             	sar    edx,0x1f
c0010b1e:	c3                   	ret    
c0010b1f:	83 c4 04             	add    esp,0x4
c0010b22:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010b27:	5b                   	pop    ebx
c0010b28:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b2d:	5e                   	pop    esi
c0010b2e:	c3                   	ret    

c0010b2f <SysGetDiskVolumeLabel(regs*)>:
c0010b2f:	57                   	push   edi
c0010b30:	56                   	push   esi
c0010b31:	53                   	push   ebx
c0010b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b36:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010b39:	83 fa 19             	cmp    edx,0x19
c0010b3c:	77 3c                	ja     c0010b7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b3e:	8b 0c 95 e0 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5520]
c0010b45:	85 c9                	test   ecx,ecx
c0010b47:	74 31                	je     c0010b7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b49:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010b4c:	85 db                	test   ebx,ebx
c0010b4e:	74 2a                	je     c0010b7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b50:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b53:	85 f6                	test   esi,esi
c0010b55:	74 23                	je     c0010b7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b57:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010b5d:	85 c0                	test   eax,eax
c0010b5f:	74 19                	je     c0010b7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	8b 38                	mov    edi,DWORD PTR [eax]
c0010b66:	56                   	push   esi
c0010b67:	53                   	push   ebx
c0010b68:	52                   	push   edx
c0010b69:	51                   	push   ecx
c0010b6a:	50                   	push   eax
c0010b6b:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010b6e:	83 c4 20             	add    esp,0x20
c0010b71:	5b                   	pop    ebx
c0010b72:	5e                   	pop    esi
c0010b73:	89 c2                	mov    edx,eax
c0010b75:	c1 fa 1f             	sar    edx,0x1f
c0010b78:	5f                   	pop    edi
c0010b79:	c3                   	ret    
c0010b7a:	5b                   	pop    ebx
c0010b7b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010b80:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b85:	5e                   	pop    esi
c0010b86:	5f                   	pop    edi
c0010b87:	c3                   	ret    

c0010b88 <SysRealpath(regs*)>:
c0010b88:	53                   	push   ebx
c0010b89:	83 ec 08             	sub    esp,0x8
c0010b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b90:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0010b93:	85 c9                	test   ecx,ecx
c0010b95:	74 36                	je     c0010bcd <SysRealpath(regs*)+0x45>
c0010b97:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010b9a:	31 d2                	xor    edx,edx
c0010b9c:	b8 01 00 00 00       	mov    eax,0x1
c0010ba1:	85 db                	test   ebx,ebx
c0010ba3:	75 05                	jne    c0010baa <SysRealpath(regs*)+0x22>
c0010ba5:	83 c4 08             	add    esp,0x8
c0010ba8:	5b                   	pop    ebx
c0010ba9:	c3                   	ret    
c0010baa:	6a 00                	push   0x0
c0010bac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bb4:	05 0c 01 00 00       	add    eax,0x10c
c0010bb9:	50                   	push   eax
c0010bba:	51                   	push   ecx
c0010bbb:	53                   	push   ebx
c0010bbc:	e8 3f 72 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010bc1:	83 c4 10             	add    esp,0x10
c0010bc4:	31 c0                	xor    eax,eax
c0010bc6:	31 d2                	xor    edx,edx
c0010bc8:	83 c4 08             	add    esp,0x8
c0010bcb:	5b                   	pop    ebx
c0010bcc:	c3                   	ret    
c0010bcd:	b8 01 00 00 00       	mov    eax,0x1
c0010bd2:	31 d2                	xor    edx,edx
c0010bd4:	eb f2                	jmp    c0010bc8 <SysRealpath(regs*)+0x40>

c0010bd6 <SysReadDir(regs*)>:
c0010bd6:	53                   	push   ebx
c0010bd7:	83 ec 18             	sub    esp,0x18
c0010bda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bde:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010be1:	83 f8 02             	cmp    eax,0x2
c0010be4:	76 4f                	jbe    c0010c35 <SysReadDir(regs*)+0x5f>
c0010be6:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010bed:	77 52                	ja     c0010c41 <SysReadDir(regs*)+0x6b>
c0010bef:	83 ec 0c             	sub    esp,0xc
c0010bf2:	50                   	push   eax
c0010bf3:	e8 39 1d 00 00       	call   c0012931 <KeGetFileFromDescriptor(int)>
c0010bf8:	83 c4 10             	add    esp,0x10
c0010bfb:	85 c0                	test   eax,eax
c0010bfd:	74 42                	je     c0010c41 <SysReadDir(regs*)+0x6b>
c0010bff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c07:	83 ec 0c             	sub    esp,0xc
c0010c0a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010c0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c10:	51                   	push   ecx
c0010c11:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010c14:	51                   	push   ecx
c0010c15:	6a 00                	push   0x0
c0010c17:	68 10 01 00 00       	push   0x110
c0010c1c:	50                   	push   eax
c0010c1d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010c20:	83 c4 20             	add    esp,0x20
c0010c23:	85 c0                	test   eax,eax
c0010c25:	89 c1                	mov    ecx,eax
c0010c27:	74 27                	je     c0010c50 <SysReadDir(regs*)+0x7a>
c0010c29:	31 d2                	xor    edx,edx
c0010c2b:	83 f9 07             	cmp    ecx,0x7
c0010c2e:	b8 02 00 00 00       	mov    eax,0x2
c0010c33:	75 16                	jne    c0010c4b <SysReadDir(regs*)+0x75>
c0010c35:	b8 01 00 00 00       	mov    eax,0x1
c0010c3a:	31 d2                	xor    edx,edx
c0010c3c:	83 c4 18             	add    esp,0x18
c0010c3f:	5b                   	pop    ebx
c0010c40:	c3                   	ret    
c0010c41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c46:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c4b:	83 c4 18             	add    esp,0x18
c0010c4e:	5b                   	pop    ebx
c0010c4f:	c3                   	ret    
c0010c50:	31 c0                	xor    eax,eax
c0010c52:	31 d2                	xor    edx,edx
c0010c54:	eb e6                	jmp    c0010c3c <SysReadDir(regs*)+0x66>

c0010c56 <SysIsATTY(regs*)>:
c0010c56:	83 ec 0c             	sub    esp,0xc
c0010c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c60:	83 f8 02             	cmp    eax,0x2
c0010c63:	76 07                	jbe    c0010c6c <SysIsATTY(regs*)+0x16>
c0010c65:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010c6a:	75 26                	jne    c0010c92 <SysIsATTY(regs*)+0x3c>
c0010c6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010c7a:	85 c0                	test   eax,eax
c0010c7c:	74 24                	je     c0010ca2 <SysIsATTY(regs*)+0x4c>
c0010c7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c80:	83 ec 0c             	sub    esp,0xc
c0010c83:	50                   	push   eax
c0010c84:	ff 12                	call   DWORD PTR [edx]
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	31 d2                	xor    edx,edx
c0010c8b:	83 c4 0c             	add    esp,0xc
c0010c8e:	0f b6 c0             	movzx  eax,al
c0010c91:	c3                   	ret    
c0010c92:	83 ec 0c             	sub    esp,0xc
c0010c95:	50                   	push   eax
c0010c96:	e8 96 1c 00 00       	call   c0012931 <KeGetFileFromDescriptor(int)>
c0010c9b:	83 c4 10             	add    esp,0x10
c0010c9e:	85 c0                	test   eax,eax
c0010ca0:	75 dc                	jne    c0010c7e <SysIsATTY(regs*)+0x28>
c0010ca2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ca7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cac:	83 c4 0c             	add    esp,0xc
c0010caf:	c3                   	ret    

c0010cb0 <SysSeek(regs*)>:
c0010cb0:	53                   	push   ebx
c0010cb1:	83 ec 08             	sub    esp,0x8
c0010cb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cb8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cbb:	8d 50 fd             	lea    edx,[eax-0x3]
c0010cbe:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010cc4:	77 39                	ja     c0010cff <SysSeek(regs*)+0x4f>
c0010cc6:	83 ec 0c             	sub    esp,0xc
c0010cc9:	50                   	push   eax
c0010cca:	e8 62 1c 00 00       	call   c0012931 <KeGetFileFromDescriptor(int)>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	85 c0                	test   eax,eax
c0010cd4:	74 29                	je     c0010cff <SysSeek(regs*)+0x4f>
c0010cd6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010cd9:	83 ec 04             	sub    esp,0x4
c0010cdc:	31 db                	xor    ebx,ebx
c0010cde:	53                   	push   ebx
c0010cdf:	51                   	push   ecx
c0010ce0:	50                   	push   eax
c0010ce1:	e8 22 75 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0010ce6:	83 c4 10             	add    esp,0x10
c0010ce9:	85 c0                	test   eax,eax
c0010ceb:	0f 95 c0             	setne  al
c0010cee:	31 d2                	xor    edx,edx
c0010cf0:	0f b6 c0             	movzx  eax,al
c0010cf3:	f7 d8                	neg    eax
c0010cf5:	83 d2 00             	adc    edx,0x0
c0010cf8:	83 c4 08             	add    esp,0x8
c0010cfb:	5b                   	pop    ebx
c0010cfc:	f7 da                	neg    edx
c0010cfe:	c3                   	ret    
c0010cff:	83 c4 08             	add    esp,0x8
c0010d02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d07:	5b                   	pop    ebx
c0010d08:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d0d:	c3                   	ret    

c0010d0e <SysTell(regs*)>:
c0010d0e:	53                   	push   ebx
c0010d0f:	83 ec 08             	sub    esp,0x8
c0010d12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d19:	83 f8 02             	cmp    eax,0x2
c0010d1c:	76 56                	jbe    c0010d74 <SysTell(regs*)+0x66>
c0010d1e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d23:	76 19                	jbe    c0010d3e <SysTell(regs*)+0x30>
c0010d25:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d28:	31 d2                	xor    edx,edx
c0010d2a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d37:	83 c4 08             	add    esp,0x8
c0010d3a:	31 c0                	xor    eax,eax
c0010d3c:	5b                   	pop    ebx
c0010d3d:	c3                   	ret    
c0010d3e:	83 ec 0c             	sub    esp,0xc
c0010d41:	50                   	push   eax
c0010d42:	e8 ea 1b 00 00       	call   c0012931 <KeGetFileFromDescriptor(int)>
c0010d47:	83 c4 10             	add    esp,0x10
c0010d4a:	85 c0                	test   eax,eax
c0010d4c:	74 26                	je     c0010d74 <SysTell(regs*)+0x66>
c0010d4e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d51:	83 ec 08             	sub    esp,0x8
c0010d54:	52                   	push   edx
c0010d55:	50                   	push   eax
c0010d56:	e8 59 75 ff ff       	call   c00082b4 <File::tell(unsigned long long*)>
c0010d5b:	83 c4 10             	add    esp,0x10
c0010d5e:	85 c0                	test   eax,eax
c0010d60:	0f 95 c0             	setne  al
c0010d63:	31 d2                	xor    edx,edx
c0010d65:	0f b6 c0             	movzx  eax,al
c0010d68:	f7 d8                	neg    eax
c0010d6a:	83 d2 00             	adc    edx,0x0
c0010d6d:	83 c4 08             	add    esp,0x8
c0010d70:	5b                   	pop    ebx
c0010d71:	f7 da                	neg    edx
c0010d73:	c3                   	ret    
c0010d74:	83 c4 08             	add    esp,0x8
c0010d77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d7c:	5b                   	pop    ebx
c0010d7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d82:	c3                   	ret    

c0010d83 <SysSize(regs*)>:
c0010d83:	53                   	push   ebx
c0010d84:	83 ec 18             	sub    esp,0x18
c0010d87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d8e:	83 f8 02             	cmp    eax,0x2
c0010d91:	76 5b                	jbe    c0010dee <SysSize(regs*)+0x6b>
c0010d93:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d98:	76 19                	jbe    c0010db3 <SysSize(regs*)+0x30>
c0010d9a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d9d:	31 d2                	xor    edx,edx
c0010d9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010da5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dac:	83 c4 18             	add    esp,0x18
c0010daf:	31 c0                	xor    eax,eax
c0010db1:	5b                   	pop    ebx
c0010db2:	c3                   	ret    
c0010db3:	83 ec 0c             	sub    esp,0xc
c0010db6:	50                   	push   eax
c0010db7:	e8 75 1b 00 00       	call   c0012931 <KeGetFileFromDescriptor(int)>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	85 c0                	test   eax,eax
c0010dc1:	74 2b                	je     c0010dee <SysSize(regs*)+0x6b>
c0010dc3:	83 ec 04             	sub    esp,0x4
c0010dc6:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010dca:	52                   	push   edx
c0010dcb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010dce:	52                   	push   edx
c0010dcf:	50                   	push   eax
c0010dd0:	e8 77 76 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0010dd5:	83 c4 10             	add    esp,0x10
c0010dd8:	85 c0                	test   eax,eax
c0010dda:	0f 95 c0             	setne  al
c0010ddd:	31 d2                	xor    edx,edx
c0010ddf:	0f b6 c0             	movzx  eax,al
c0010de2:	f7 d8                	neg    eax
c0010de4:	83 d2 00             	adc    edx,0x0
c0010de7:	83 c4 18             	add    esp,0x18
c0010dea:	5b                   	pop    ebx
c0010deb:	f7 da                	neg    edx
c0010ded:	c3                   	ret    
c0010dee:	83 c4 18             	add    esp,0x18
c0010df1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010df6:	5b                   	pop    ebx
c0010df7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dfc:	c3                   	ret    

c0010dfd <SysSizeFromFilename(regs*)>:
c0010dfd:	55                   	push   ebp
c0010dfe:	57                   	push   edi
c0010dff:	56                   	push   esi
c0010e00:	53                   	push   ebx
c0010e01:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010e07:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010e0e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010e11:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010e14:	85 f6                	test   esi,esi
c0010e16:	89 f8                	mov    eax,edi
c0010e18:	74 09                	je     c0010e23 <SysSizeFromFilename(regs*)+0x26>
c0010e1a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010e20:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e23:	83 f8 02             	cmp    eax,0x2
c0010e26:	0f 86 c9 00 00 00    	jbe    c0010ef5 <SysSizeFromFilename(regs*)+0xf8>
c0010e2c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e31:	76 1f                	jbe    c0010e52 <SysSizeFromFilename(regs*)+0x55>
c0010e33:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010e36:	31 d2                	xor    edx,edx
c0010e38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010e3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e45:	31 c0                	xor    eax,eax
c0010e47:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010e4d:	5b                   	pop    ebx
c0010e4e:	5e                   	pop    esi
c0010e4f:	5f                   	pop    edi
c0010e50:	5d                   	pop    ebp
c0010e51:	c3                   	ret    
c0010e52:	83 ec 0c             	sub    esp,0xc
c0010e55:	68 14 01 00 00       	push   0x114
c0010e5a:	e8 39 e5 ff ff       	call   c000f398 <malloc>
c0010e5f:	6a 01                	push   0x1
c0010e61:	89 c5                	mov    ebp,eax
c0010e63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e6b:	50                   	push   eax
c0010e6c:	57                   	push   edi
c0010e6d:	55                   	push   ebp
c0010e6e:	e8 bb 71 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010e73:	83 c4 20             	add    esp,0x20
c0010e76:	85 ed                	test   ebp,ebp
c0010e78:	74 7b                	je     c0010ef5 <SysSizeFromFilename(regs*)+0xf8>
c0010e7a:	83 ec 04             	sub    esp,0x4
c0010e7d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010e81:	50                   	push   eax
c0010e82:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010e85:	51                   	push   ecx
c0010e86:	55                   	push   ebp
c0010e87:	e8 c0 75 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0010e8c:	89 c3                	mov    ebx,eax
c0010e8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e91:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e97:	83 c4 10             	add    esp,0x10
c0010e9a:	85 db                	test   ebx,ebx
c0010e9c:	75 57                	jne    c0010ef5 <SysSizeFromFilename(regs*)+0xf8>
c0010e9e:	6a 00                	push   0x0
c0010ea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ea5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ea8:	05 0c 01 00 00       	add    eax,0x10c
c0010ead:	50                   	push   eax
c0010eae:	57                   	push   edi
c0010eaf:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010eb6:	53                   	push   ebx
c0010eb7:	e8 44 6f ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010ebc:	58                   	pop    eax
c0010ebd:	5a                   	pop    edx
c0010ebe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010ec2:	50                   	push   eax
c0010ec3:	53                   	push   ebx
c0010ec4:	e8 be 69 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0010ec9:	83 c4 10             	add    esp,0x10
c0010ecc:	ba 00 00 00 00       	mov    edx,0x0
c0010ed1:	83 f8 01             	cmp    eax,0x1
c0010ed4:	b8 00 00 00 00       	mov    eax,0x0
c0010ed9:	74 2f                	je     c0010f0a <SysSizeFromFilename(regs*)+0x10d>
c0010edb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010ee0:	74 3b                	je     c0010f1d <SysSizeFromFilename(regs*)+0x120>
c0010ee2:	85 f6                	test   esi,esi
c0010ee4:	0f 84 5d ff ff ff    	je     c0010e47 <SysSizeFromFilename(regs*)+0x4a>
c0010eea:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010ef0:	e9 52 ff ff ff       	jmp    c0010e47 <SysSizeFromFilename(regs*)+0x4a>
c0010ef5:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010efb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f00:	5b                   	pop    ebx
c0010f01:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f06:	5e                   	pop    esi
c0010f07:	5f                   	pop    edi
c0010f08:	5d                   	pop    ebp
c0010f09:	c3                   	ret    
c0010f0a:	85 f6                	test   esi,esi
c0010f0c:	0f 84 35 ff ff ff    	je     c0010e47 <SysSizeFromFilename(regs*)+0x4a>
c0010f12:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010f18:	e9 2a ff ff ff       	jmp    c0010e47 <SysSizeFromFilename(regs*)+0x4a>
c0010f1d:	85 f6                	test   esi,esi
c0010f1f:	0f 84 22 ff ff ff    	je     c0010e47 <SysSizeFromFilename(regs*)+0x4a>
c0010f25:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010f2b:	e9 17 ff ff ff       	jmp    c0010e47 <SysSizeFromFilename(regs*)+0x4a>

c0010f30 <SysSizeFromFilenameNoSymlink(regs*)>:
c0010f30:	55                   	push   ebp
c0010f31:	57                   	push   edi
c0010f32:	56                   	push   esi
c0010f33:	53                   	push   ebx
c0010f34:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010f3a:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010f41:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010f44:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010f47:	85 f6                	test   esi,esi
c0010f49:	89 f8                	mov    eax,edi
c0010f4b:	74 09                	je     c0010f56 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0010f4d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010f53:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f56:	83 f8 02             	cmp    eax,0x2
c0010f59:	0f 86 c9 00 00 00    	jbe    c0011028 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0010f5f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010f64:	76 1f                	jbe    c0010f85 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0010f66:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010f69:	31 d2                	xor    edx,edx
c0010f6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f78:	31 c0                	xor    eax,eax
c0010f7a:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010f80:	5b                   	pop    ebx
c0010f81:	5e                   	pop    esi
c0010f82:	5f                   	pop    edi
c0010f83:	5d                   	pop    ebp
c0010f84:	c3                   	ret    
c0010f85:	83 ec 0c             	sub    esp,0xc
c0010f88:	68 14 01 00 00       	push   0x114
c0010f8d:	e8 06 e4 ff ff       	call   c000f398 <malloc>
c0010f92:	6a 00                	push   0x0
c0010f94:	89 c5                	mov    ebp,eax
c0010f96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f9e:	50                   	push   eax
c0010f9f:	57                   	push   edi
c0010fa0:	55                   	push   ebp
c0010fa1:	e8 88 70 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010fa6:	83 c4 20             	add    esp,0x20
c0010fa9:	85 ed                	test   ebp,ebp
c0010fab:	74 7b                	je     c0011028 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0010fad:	83 ec 04             	sub    esp,0x4
c0010fb0:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010fb4:	50                   	push   eax
c0010fb5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010fb8:	51                   	push   ecx
c0010fb9:	55                   	push   ebp
c0010fba:	e8 8d 74 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0010fbf:	89 c3                	mov    ebx,eax
c0010fc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010fc4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010fc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	85 db                	test   ebx,ebx
c0010fcf:	75 57                	jne    c0011028 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0010fd1:	6a 00                	push   0x0
c0010fd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fdb:	05 0c 01 00 00       	add    eax,0x10c
c0010fe0:	50                   	push   eax
c0010fe1:	57                   	push   edi
c0010fe2:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010fe9:	53                   	push   ebx
c0010fea:	e8 11 6e ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010fef:	58                   	pop    eax
c0010ff0:	5a                   	pop    edx
c0010ff1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010ff5:	50                   	push   eax
c0010ff6:	53                   	push   ebx
c0010ff7:	e8 8b 68 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0010ffc:	83 c4 10             	add    esp,0x10
c0010fff:	ba 00 00 00 00       	mov    edx,0x0
c0011004:	83 f8 01             	cmp    eax,0x1
c0011007:	b8 00 00 00 00       	mov    eax,0x0
c001100c:	74 2f                	je     c001103d <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c001100e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011013:	74 3b                	je     c0011050 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0011015:	85 f6                	test   esi,esi
c0011017:	0f 84 5d ff ff ff    	je     c0010f7a <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001101d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011023:	e9 52 ff ff ff       	jmp    c0010f7a <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011028:	81 c4 4c 02 00 00    	add    esp,0x24c
c001102e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011033:	5b                   	pop    ebx
c0011034:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011039:	5e                   	pop    esi
c001103a:	5f                   	pop    edi
c001103b:	5d                   	pop    ebp
c001103c:	c3                   	ret    
c001103d:	85 f6                	test   esi,esi
c001103f:	0f 84 35 ff ff ff    	je     c0010f7a <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011045:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001104b:	e9 2a ff ff ff       	jmp    c0010f7a <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011050:	85 f6                	test   esi,esi
c0011052:	0f 84 22 ff ff ff    	je     c0010f7a <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011058:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001105e:	e9 17 ff ff ff       	jmp    c0010f7a <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011063 <SysClose(regs*)>:
c0011063:	57                   	push   edi
c0011064:	56                   	push   esi
c0011065:	53                   	push   ebx
c0011066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001106d:	83 f8 02             	cmp    eax,0x2
c0011070:	76 44                	jbe    c00110b6 <SysClose(regs*)+0x53>
c0011072:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011078:	31 f6                	xor    esi,esi
c001107a:	31 ff                	xor    edi,edi
c001107c:	83 fa 01             	cmp    edx,0x1
c001107f:	76 2d                	jbe    c00110ae <SysClose(regs*)+0x4b>
c0011081:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011086:	77 2e                	ja     c00110b6 <SysClose(regs*)+0x53>
c0011088:	83 ec 0c             	sub    esp,0xc
c001108b:	50                   	push   eax
c001108c:	e8 a0 18 00 00       	call   c0012931 <KeGetFileFromDescriptor(int)>
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	85 c0                	test   eax,eax
c0011096:	89 c3                	mov    ebx,eax
c0011098:	74 1c                	je     c00110b6 <SysClose(regs*)+0x53>
c001109a:	83 ec 0c             	sub    esp,0xc
c001109d:	50                   	push   eax
c001109e:	e8 05 71 ff ff       	call   c00081a8 <File::close()>
c00110a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110ab:	83 c4 10             	add    esp,0x10
c00110ae:	5b                   	pop    ebx
c00110af:	89 f0                	mov    eax,esi
c00110b1:	89 fa                	mov    edx,edi
c00110b3:	5e                   	pop    esi
c00110b4:	5f                   	pop    edi
c00110b5:	c3                   	ret    
c00110b6:	5b                   	pop    ebx
c00110b7:	be ff ff ff ff       	mov    esi,0xffffffff
c00110bc:	89 f0                	mov    eax,esi
c00110be:	bf ff ff ff ff       	mov    edi,0xffffffff
c00110c3:	89 fa                	mov    edx,edi
c00110c5:	5e                   	pop    esi
c00110c6:	5f                   	pop    edi
c00110c7:	c3                   	ret    

c00110c8 <SysOpenDir(regs*)>:
c00110c8:	56                   	push   esi
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 04             	sub    esp,0x4
c00110cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00110d4:	85 c9                	test   ecx,ecx
c00110d6:	74 5d                	je     c0011135 <SysOpenDir(regs*)+0x6d>
c00110d8:	83 ec 0c             	sub    esp,0xc
c00110db:	68 14 01 00 00       	push   0x114
c00110e0:	e8 b3 e2 ff ff       	call   c000f398 <malloc>
c00110e5:	83 c4 0c             	add    esp,0xc
c00110e8:	89 c6                	mov    esi,eax
c00110ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110f2:	50                   	push   eax
c00110f3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00110f6:	52                   	push   edx
c00110f7:	56                   	push   esi
c00110f8:	e8 0f 75 ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	85 f6                	test   esi,esi
c0011102:	74 31                	je     c0011135 <SysOpenDir(regs*)+0x6d>
c0011104:	83 ec 0c             	sub    esp,0xc
c0011107:	56                   	push   esi
c0011108:	e8 c7 75 ff ff       	call   c00086d4 <Directory::open()>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	85 c0                	test   eax,eax
c0011112:	75 21                	jne    c0011135 <SysOpenDir(regs*)+0x6d>
c0011114:	83 ec 0c             	sub    esp,0xc
c0011117:	56                   	push   esi
c0011118:	e8 17 15 00 00       	call   c0012634 <UnixFile::getFileDescriptor()>
c001111d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	89 02                	mov    DWORD PTR [edx],eax
c0011125:	c1 f8 1f             	sar    eax,0x1f
c0011128:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001112b:	83 c4 04             	add    esp,0x4
c001112e:	31 c0                	xor    eax,eax
c0011130:	5b                   	pop    ebx
c0011131:	31 d2                	xor    edx,edx
c0011133:	5e                   	pop    esi
c0011134:	c3                   	ret    
c0011135:	83 c4 04             	add    esp,0x4
c0011138:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001113d:	5b                   	pop    ebx
c001113e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011143:	5e                   	pop    esi
c0011144:	c3                   	ret    

c0011145 <SysMakeDir(regs*)>:
c0011145:	56                   	push   esi
c0011146:	53                   	push   ebx
c0011147:	83 ec 10             	sub    esp,0x10
c001114a:	68 14 01 00 00       	push   0x114
c001114f:	e8 44 e2 ff ff       	call   c000f398 <malloc>
c0011154:	83 c4 0c             	add    esp,0xc
c0011157:	89 c3                	mov    ebx,eax
c0011159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001115e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011161:	50                   	push   eax
c0011162:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011166:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011169:	52                   	push   edx
c001116a:	53                   	push   ebx
c001116b:	e8 9c 74 ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	85 db                	test   ebx,ebx
c0011175:	74 2c                	je     c00111a3 <SysMakeDir(regs*)+0x5e>
c0011177:	83 ec 0c             	sub    esp,0xc
c001117a:	53                   	push   ebx
c001117b:	e8 34 77 ff ff       	call   c00088b4 <Directory::create()>
c0011180:	89 c6                	mov    esi,eax
c0011182:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011187:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001118a:	83 c4 10             	add    esp,0x10
c001118d:	31 c0                	xor    eax,eax
c001118f:	85 f6                	test   esi,esi
c0011191:	0f 95 c0             	setne  al
c0011194:	31 d2                	xor    edx,edx
c0011196:	f7 d8                	neg    eax
c0011198:	83 d2 00             	adc    edx,0x0
c001119b:	83 c4 04             	add    esp,0x4
c001119e:	5b                   	pop    ebx
c001119f:	f7 da                	neg    edx
c00111a1:	5e                   	pop    esi
c00111a2:	c3                   	ret    
c00111a3:	83 c4 04             	add    esp,0x4
c00111a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111ab:	5b                   	pop    ebx
c00111ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111b1:	5e                   	pop    esi
c00111b2:	c3                   	ret    

c00111b3 <SysCloseDir(regs*)>:
c00111b3:	53                   	push   ebx
c00111b4:	83 ec 08             	sub    esp,0x8
c00111b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111be:	8d 50 fd             	lea    edx,[eax-0x3]
c00111c1:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00111c7:	77 2f                	ja     c00111f8 <SysCloseDir(regs*)+0x45>
c00111c9:	83 ec 0c             	sub    esp,0xc
c00111cc:	50                   	push   eax
c00111cd:	e8 5f 17 00 00       	call   c0012931 <KeGetFileFromDescriptor(int)>
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	85 c0                	test   eax,eax
c00111d7:	89 c3                	mov    ebx,eax
c00111d9:	74 1d                	je     c00111f8 <SysCloseDir(regs*)+0x45>
c00111db:	83 ec 0c             	sub    esp,0xc
c00111de:	50                   	push   eax
c00111df:	e8 4c 75 ff ff       	call   c0008730 <Directory::close()>
c00111e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	31 c0                	xor    eax,eax
c00111f1:	83 c4 08             	add    esp,0x8
c00111f4:	31 d2                	xor    edx,edx
c00111f6:	5b                   	pop    ebx
c00111f7:	c3                   	ret    
c00111f8:	83 c4 08             	add    esp,0x8
c00111fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011200:	5b                   	pop    ebx
c0011201:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011206:	c3                   	ret    

c0011207 <SysWait(regs*)>:
c0011207:	83 ec 10             	sub    esp,0x10
c001120a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001120e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011211:	52                   	push   edx
c0011212:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011215:	51                   	push   ecx
c0011216:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011219:	50                   	push   eax
c001121a:	e8 dd 51 00 00       	call   c00163fc <waitTask(int, int*, int)>
c001121f:	83 c4 1c             	add    esp,0x1c
c0011222:	89 c2                	mov    edx,eax
c0011224:	c1 fa 1f             	sar    edx,0x1f
c0011227:	c3                   	ret    

c0011228 <SysNotImpl(regs*)>:
c0011228:	83 ec 18             	sub    esp,0x18
c001122b:	68 c8 35 02 c0       	push   0xc00235c8
c0011230:	e8 a9 e4 ff ff       	call   c000f6de <KePanic(char const*)>
c0011235:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001123a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001123f:	83 c4 1c             	add    esp,0x1c
c0011242:	c3                   	ret    

c0011243 <SysPanic(regs*)>:
c0011243:	83 ec 18             	sub    esp,0x18
c0011246:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001124a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001124d:	50                   	push   eax
c001124e:	e8 8b e4 ff ff       	call   c000f6de <KePanic(char const*)>
c0011253:	b8 01 00 00 00       	mov    eax,0x1
c0011258:	31 d2                	xor    edx,edx
c001125a:	83 c4 1c             	add    esp,0x1c
c001125d:	c3                   	ret    

c001125e <SysRmdir(regs*)>:
c001125e:	56                   	push   esi
c001125f:	53                   	push   ebx
c0011260:	83 ec 10             	sub    esp,0x10
c0011263:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011267:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001126a:	68 14 01 00 00       	push   0x114
c001126f:	e8 24 e1 ff ff       	call   c000f398 <malloc>
c0011274:	6a 00                	push   0x0
c0011276:	89 c3                	mov    ebx,eax
c0011278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001127d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011280:	50                   	push   eax
c0011281:	56                   	push   esi
c0011282:	53                   	push   ebx
c0011283:	e8 a6 6d ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0011288:	83 c4 14             	add    esp,0x14
c001128b:	53                   	push   ebx
c001128c:	e8 87 70 ff ff       	call   c0008318 <File::unlink()>
c0011291:	83 c4 10             	add    esp,0x10
c0011294:	85 db                	test   ebx,ebx
c0011296:	89 c6                	mov    esi,eax
c0011298:	74 0c                	je     c00112a6 <SysRmdir(regs*)+0x48>
c001129a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001129c:	83 ec 0c             	sub    esp,0xc
c001129f:	53                   	push   ebx
c00112a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112a3:	83 c4 10             	add    esp,0x10
c00112a6:	31 c0                	xor    eax,eax
c00112a8:	85 f6                	test   esi,esi
c00112aa:	0f 95 c0             	setne  al
c00112ad:	31 d2                	xor    edx,edx
c00112af:	f7 d8                	neg    eax
c00112b1:	83 d2 00             	adc    edx,0x0
c00112b4:	83 c4 04             	add    esp,0x4
c00112b7:	5b                   	pop    ebx
c00112b8:	f7 da                	neg    edx
c00112ba:	5e                   	pop    esi
c00112bb:	c3                   	ret    

c00112bc <SysUnlink(regs*)>:
c00112bc:	56                   	push   esi
c00112bd:	53                   	push   ebx
c00112be:	83 ec 10             	sub    esp,0x10
c00112c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112c5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00112c8:	68 14 01 00 00       	push   0x114
c00112cd:	e8 c6 e0 ff ff       	call   c000f398 <malloc>
c00112d2:	6a 00                	push   0x0
c00112d4:	89 c3                	mov    ebx,eax
c00112d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112de:	50                   	push   eax
c00112df:	56                   	push   esi
c00112e0:	53                   	push   ebx
c00112e1:	e8 48 6d ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00112e6:	83 c4 14             	add    esp,0x14
c00112e9:	53                   	push   ebx
c00112ea:	e8 29 70 ff ff       	call   c0008318 <File::unlink()>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	85 db                	test   ebx,ebx
c00112f4:	89 c6                	mov    esi,eax
c00112f6:	74 0c                	je     c0011304 <SysUnlink(regs*)+0x48>
c00112f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112fa:	83 ec 0c             	sub    esp,0xc
c00112fd:	53                   	push   ebx
c00112fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011301:	83 c4 10             	add    esp,0x10
c0011304:	31 c0                	xor    eax,eax
c0011306:	85 f6                	test   esi,esi
c0011308:	0f 95 c0             	setne  al
c001130b:	31 d2                	xor    edx,edx
c001130d:	f7 d8                	neg    eax
c001130f:	83 d2 00             	adc    edx,0x0
c0011312:	83 c4 04             	add    esp,0x4
c0011315:	5b                   	pop    ebx
c0011316:	f7 da                	neg    edx
c0011318:	5e                   	pop    esi
c0011319:	c3                   	ret    

c001131a <SysGetArgv(regs*)>:
c001131a:	83 ec 0c             	sub    esp,0xc
c001131d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011321:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011324:	85 c0                	test   eax,eax
c0011326:	78 2c                	js     c0011354 <SysGetArgv(regs*)+0x3a>
c0011328:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001132e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011331:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011337:	7d 1b                	jge    c0011354 <SysGetArgv(regs*)+0x3a>
c0011339:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011340:	85 c0                	test   eax,eax
c0011342:	74 18                	je     c001135c <SysGetArgv(regs*)+0x42>
c0011344:	83 ec 08             	sub    esp,0x8
c0011347:	50                   	push   eax
c0011348:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001134b:	50                   	push   eax
c001134c:	e8 ff f2 fe ff       	call   c0000650 <strcpy>
c0011351:	83 c4 10             	add    esp,0x10
c0011354:	31 c0                	xor    eax,eax
c0011356:	31 d2                	xor    edx,edx
c0011358:	83 c4 0c             	add    esp,0xc
c001135b:	c3                   	ret    
c001135c:	b8 01 00 00 00       	mov    eax,0x1
c0011361:	31 d2                	xor    edx,edx
c0011363:	83 c4 0c             	add    esp,0xc
c0011366:	c3                   	ret    

c0011367 <SysUSleep(regs*)>:
c0011367:	83 ec 1c             	sub    esp,0x1c
c001136a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001136e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011371:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011374:	6a 00                	push   0x0
c0011376:	6a 64                	push   0x64
c0011378:	52                   	push   edx
c0011379:	50                   	push   eax
c001137a:	e8 f5 f8 00 00       	call   c0020c74 <__udivdi3>
c001137f:	83 c4 14             	add    esp,0x14
c0011382:	50                   	push   eax
c0011383:	e8 60 51 00 00       	call   c00164e8 <milliTenthSleep(unsigned int)>
c0011388:	31 c0                	xor    eax,eax
c001138a:	31 d2                	xor    edx,edx
c001138c:	83 c4 1c             	add    esp,0x1c
c001138f:	c3                   	ret    

c0011390 <SysSpawn(regs*)>:
c0011390:	56                   	push   esi
c0011391:	53                   	push   ebx
c0011392:	83 ec 04             	sub    esp,0x4
c0011395:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011399:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001139c:	85 f6                	test   esi,esi
c001139e:	75 0a                	jne    c00113aa <SysSpawn(regs*)+0x1a>
c00113a0:	83 c4 04             	add    esp,0x4
c00113a3:	31 c0                	xor    eax,eax
c00113a5:	5b                   	pop    ebx
c00113a6:	31 d2                	xor    edx,edx
c00113a8:	5e                   	pop    esi
c00113a9:	c3                   	ret    
c00113aa:	83 ec 0c             	sub    esp,0xc
c00113ad:	68 24 07 00 00       	push   0x724
c00113b2:	e8 e1 df ff ff       	call   c000f398 <malloc>
c00113b7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113c0:	89 c6                	mov    esi,eax
c00113c2:	31 c0                	xor    eax,eax
c00113c4:	85 c9                	test   ecx,ecx
c00113c6:	74 08                	je     c00113d0 <SysSpawn(regs*)+0x40>
c00113c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113d0:	52                   	push   edx
c00113d1:	50                   	push   eax
c00113d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113d5:	50                   	push   eax
c00113d6:	56                   	push   esi
c00113d7:	e8 64 48 00 00       	call   c0015c40 <Process::Process(char const*, Process*, char**)>
c00113dc:	83 c4 10             	add    esp,0x10
c00113df:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00113e6:	75 b8                	jne    c00113a0 <SysSpawn(regs*)+0x10>
c00113e8:	83 ec 0c             	sub    esp,0xc
c00113eb:	56                   	push   esi
c00113ec:	e8 cb 4d 00 00       	call   c00161bc <Process::createUserThread()>
c00113f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00113f3:	83 c4 10             	add    esp,0x10
c00113f6:	83 c4 04             	add    esp,0x4
c00113f9:	5b                   	pop    ebx
c00113fa:	89 c2                	mov    edx,eax
c00113fc:	c1 fa 1f             	sar    edx,0x1f
c00113ff:	5e                   	pop    esi
c0011400:	c3                   	ret    

c0011401 <SysGetEnv(regs*)>:
c0011401:	57                   	push   edi
c0011402:	56                   	push   esi
c0011403:	53                   	push   ebx
c0011404:	83 ec 1c             	sub    esp,0x1c
c0011407:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001140c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011410:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011413:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011416:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011419:	51                   	push   ecx
c001141a:	e8 b0 cc ff ff       	call   c000e0cf <KeGetProcessTotalEnvCount(Process*)>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	39 c7                	cmp    edi,eax
c0011424:	7c 12                	jl     c0011438 <SysGetEnv(regs*)+0x37>
c0011426:	31 c0                	xor    eax,eax
c0011428:	31 d2                	xor    edx,edx
c001142a:	85 f6                	test   esi,esi
c001142c:	74 03                	je     c0011431 <SysGetEnv(regs*)+0x30>
c001142e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	5b                   	pop    ebx
c0011435:	5e                   	pop    esi
c0011436:	5f                   	pop    edi
c0011437:	c3                   	ret    
c0011438:	8d 44 24 08          	lea    eax,[esp+0x8]
c001143c:	83 ec 04             	sub    esp,0x4
c001143f:	57                   	push   edi
c0011440:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011446:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011449:	57                   	push   edi
c001144a:	50                   	push   eax
c001144b:	e8 9f cc ff ff       	call   c000e0ef <KeGetProcessEnvPair(Process*, int)>
c0011450:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011457:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001145b:	83 c4 0c             	add    esp,0xc
c001145e:	85 d2                	test   edx,edx
c0011460:	75 23                	jne    c0011485 <SysGetEnv(regs*)+0x84>
c0011462:	83 ec 0c             	sub    esp,0xc
c0011465:	50                   	push   eax
c0011466:	e8 15 f1 fe ff       	call   c0000580 <strlen>
c001146b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001146e:	89 c3                	mov    ebx,eax
c0011470:	e8 0b f1 fe ff       	call   c0000580 <strlen>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	31 d2                	xor    edx,edx
c001147a:	83 c4 10             	add    esp,0x10
c001147d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011481:	5b                   	pop    ebx
c0011482:	5e                   	pop    esi
c0011483:	5f                   	pop    edi
c0011484:	c3                   	ret    
c0011485:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011488:	83 ec 08             	sub    esp,0x8
c001148b:	50                   	push   eax
c001148c:	56                   	push   esi
c001148d:	e8 be f1 fe ff       	call   c0000650 <strcpy>
c0011492:	58                   	pop    eax
c0011493:	5a                   	pop    edx
c0011494:	68 e2 35 02 c0       	push   0xc00235e2
c0011499:	56                   	push   esi
c001149a:	e8 d1 f3 fe ff       	call   c0000870 <strcat>
c001149f:	59                   	pop    ecx
c00114a0:	5b                   	pop    ebx
c00114a1:	57                   	push   edi
c00114a2:	56                   	push   esi
c00114a3:	e8 c8 f3 fe ff       	call   c0000870 <strcat>
c00114a8:	83 c4 10             	add    esp,0x10
c00114ab:	31 c0                	xor    eax,eax
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	31 d2                	xor    edx,edx
c00114b2:	5b                   	pop    ebx
c00114b3:	5e                   	pop    esi
c00114b4:	5f                   	pop    edi
c00114b5:	c3                   	ret    

c00114b6 <SysSetFatAttrib(regs*)>:
c00114b6:	57                   	push   edi
c00114b7:	56                   	push   esi
c00114b8:	53                   	push   ebx
c00114b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00114bd:	83 ec 0c             	sub    esp,0xc
c00114c0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00114c3:	68 14 01 00 00       	push   0x114
c00114c8:	e8 cb de ff ff       	call   c000f398 <malloc>
c00114cd:	83 c4 0c             	add    esp,0xc
c00114d0:	89 c3                	mov    ebx,eax
c00114d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114da:	50                   	push   eax
c00114db:	57                   	push   edi
c00114dc:	53                   	push   ebx
c00114dd:	e8 4a 6c ff ff       	call   c000812c <File::File(char const*, Process*)>
c00114e2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00114e5:	83 c4 0c             	add    esp,0xc
c00114e8:	0f b6 d4             	movzx  edx,ah
c00114eb:	0f b6 c0             	movzx  eax,al
c00114ee:	52                   	push   edx
c00114ef:	50                   	push   eax
c00114f0:	53                   	push   ebx
c00114f1:	e8 bc 6e ff ff       	call   c00083b2 <File::chfatattr(unsigned char, unsigned char)>
c00114f6:	83 c4 10             	add    esp,0x10
c00114f9:	85 db                	test   ebx,ebx
c00114fb:	89 c6                	mov    esi,eax
c00114fd:	74 0c                	je     c001150b <SysSetFatAttrib(regs*)+0x55>
c00114ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011501:	83 ec 0c             	sub    esp,0xc
c0011504:	53                   	push   ebx
c0011505:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011508:	83 c4 10             	add    esp,0x10
c001150b:	5b                   	pop    ebx
c001150c:	31 c0                	xor    eax,eax
c001150e:	85 f6                	test   esi,esi
c0011510:	0f 95 c0             	setne  al
c0011513:	31 d2                	xor    edx,edx
c0011515:	5e                   	pop    esi
c0011516:	f7 d8                	neg    eax
c0011518:	83 d2 00             	adc    edx,0x0
c001151b:	f7 da                	neg    edx
c001151d:	5f                   	pop    edi
c001151e:	c3                   	ret    

c001151f <SysShutdown(regs*)>:
c001151f:	83 ec 1c             	sub    esp,0x1c
c0011522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011526:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011529:	85 c9                	test   ecx,ecx
c001152b:	74 18                	je     c0011545 <SysShutdown(regs*)+0x26>
c001152d:	83 f9 01             	cmp    ecx,0x1
c0011530:	74 26                	je     c0011558 <SysShutdown(regs*)+0x39>
c0011532:	83 f9 02             	cmp    ecx,0x2
c0011535:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001153a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001153f:	74 24                	je     c0011565 <SysShutdown(regs*)+0x46>
c0011541:	83 c4 1c             	add    esp,0x1c
c0011544:	c3                   	ret    
c0011545:	e8 fe c5 ff ff       	call   c000db48 <KeShutdown()>
c001154a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001154f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011554:	83 c4 1c             	add    esp,0x1c
c0011557:	c3                   	ret    
c0011558:	e8 0f c6 ff ff       	call   c000db6c <KeSleep()>
c001155d:	31 c0                	xor    eax,eax
c001155f:	31 d2                	xor    edx,edx
c0011561:	83 c4 1c             	add    esp,0x1c
c0011564:	c3                   	ret    
c0011565:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011569:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001156d:	e8 06 c6 ff ff       	call   c000db78 <KeRestart()>
c0011572:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011576:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001157a:	eb c5                	jmp    c0011541 <SysShutdown(regs*)+0x22>

c001157c <SysPipe(regs*)>:
c001157c:	57                   	push   edi
c001157d:	56                   	push   esi
c001157e:	53                   	push   ebx
c001157f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011583:	83 ec 0c             	sub    esp,0xc
c0011586:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011589:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001158c:	6a 20                	push   0x20
c001158e:	e8 05 de ff ff       	call   c000f398 <malloc>
c0011593:	89 c3                	mov    ebx,eax
c0011595:	58                   	pop    eax
c0011596:	5a                   	pop    edx
c0011597:	68 00 50 00 00       	push   0x5000
c001159c:	53                   	push   ebx
c001159d:	e8 b8 e9 ff ff       	call   c000ff5a <Pipe::Pipe(int)>
c00115a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115a5:	e8 8a 10 00 00       	call   c0012634 <UnixFile::getFileDescriptor()>
c00115aa:	89 07                	mov    DWORD PTR [edi],eax
c00115ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115af:	e8 80 10 00 00       	call   c0012634 <UnixFile::getFileDescriptor()>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	31 d2                	xor    edx,edx
c00115b9:	89 06                	mov    DWORD PTR [esi],eax
c00115bb:	31 c0                	xor    eax,eax
c00115bd:	5b                   	pop    ebx
c00115be:	5e                   	pop    esi
c00115bf:	5f                   	pop    edi
c00115c0:	c3                   	ret    

c00115c1 <SysGetUnixTime(regs*)>:
c00115c1:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00115c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00115cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115d0:	e9 fb 77 ff ff       	jmp    c0008dd0 <Clock::timeInSecondsLocal()>

c00115d5 <string_ends_with(char const*, char const*)>:
c00115d5:	57                   	push   edi
c00115d6:	56                   	push   esi
c00115d7:	53                   	push   ebx
c00115d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115dc:	83 ec 0c             	sub    esp,0xc
c00115df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00115e3:	53                   	push   ebx
c00115e4:	e8 97 ef fe ff       	call   c0000580 <strlen>
c00115e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00115ec:	89 c6                	mov    esi,eax
c00115ee:	e8 8d ef fe ff       	call   c0000580 <strlen>
c00115f3:	83 c4 10             	add    esp,0x10
c00115f6:	31 d2                	xor    edx,edx
c00115f8:	39 c6                	cmp    esi,eax
c00115fa:	7d 06                	jge    c0011602 <string_ends_with(char const*, char const*)+0x2d>
c00115fc:	5b                   	pop    ebx
c00115fd:	89 d0                	mov    eax,edx
c00115ff:	5e                   	pop    esi
c0011600:	5f                   	pop    edi
c0011601:	c3                   	ret    
c0011602:	83 ec 08             	sub    esp,0x8
c0011605:	29 c6                	sub    esi,eax
c0011607:	57                   	push   edi
c0011608:	01 f3                	add    ebx,esi
c001160a:	53                   	push   ebx
c001160b:	e8 70 f1 fe ff       	call   c0000780 <strcmp>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	31 d2                	xor    edx,edx
c0011615:	5b                   	pop    ebx
c0011616:	5e                   	pop    esi
c0011617:	85 c0                	test   eax,eax
c0011619:	5f                   	pop    edi
c001161a:	0f 94 c2             	sete   dl
c001161d:	89 d0                	mov    eax,edx
c001161f:	c3                   	ret    

c0011620 <SysOpen(regs*)>:
c0011620:	56                   	push   esi
c0011621:	53                   	push   ebx
c0011622:	81 ec 04 01 00 00    	sub    esp,0x104
c0011628:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001162f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011632:	85 c0                	test   eax,eax
c0011634:	0f 84 c4 01 00 00    	je     c00117fe <SysOpen(regs*)+0x1de>
c001163a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001163d:	85 c0                	test   eax,eax
c001163f:	0f 84 b9 01 00 00    	je     c00117fe <SysOpen(regs*)+0x1de>
c0011645:	6a 00                	push   0x0
c0011647:	68 e4 35 02 c0       	push   0xc00235e4
c001164c:	50                   	push   eax
c001164d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011651:	56                   	push   esi
c0011652:	e8 a9 67 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011657:	89 34 24             	mov    DWORD PTR [esp],esi
c001165a:	e8 21 ef fe ff       	call   c0000580 <strlen>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	83 e8 01             	sub    eax,0x1
c0011665:	74 29                	je     c0011690 <SysOpen(regs*)+0x70>
c0011667:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001166b:	83 fa 2e             	cmp    edx,0x2e
c001166e:	74 1c                	je     c001168c <SysOpen(regs*)+0x6c>
c0011670:	83 fa 3a             	cmp    edx,0x3a
c0011673:	74 17                	je     c001168c <SysOpen(regs*)+0x6c>
c0011675:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011679:	83 e8 01             	sub    eax,0x1
c001167c:	74 12                	je     c0011690 <SysOpen(regs*)+0x70>
c001167e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011682:	83 fa 3a             	cmp    edx,0x3a
c0011685:	74 05                	je     c001168c <SysOpen(regs*)+0x6c>
c0011687:	83 fa 2e             	cmp    edx,0x2e
c001168a:	75 e9                	jne    c0011675 <SysOpen(regs*)+0x55>
c001168c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011690:	83 ec 08             	sub    esp,0x8
c0011693:	68 e8 35 02 c0       	push   0xc00235e8
c0011698:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001169b:	50                   	push   eax
c001169c:	e8 34 ff ff ff       	call   c00115d5 <string_ends_with(char const*, char const*)>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	85 c0                	test   eax,eax
c00116a6:	74 1d                	je     c00116c5 <SysOpen(regs*)+0xa5>
c00116a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116ab:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00116b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116b8:	81 c4 04 01 00 00    	add    esp,0x104
c00116be:	31 c0                	xor    eax,eax
c00116c0:	5b                   	pop    ebx
c00116c1:	31 d2                	xor    edx,edx
c00116c3:	5e                   	pop    esi
c00116c4:	c3                   	ret    
c00116c5:	83 ec 08             	sub    esp,0x8
c00116c8:	68 ed 35 02 c0       	push   0xc00235ed
c00116cd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00116d0:	50                   	push   eax
c00116d1:	e8 ff fe ff ff       	call   c00115d5 <string_ends_with(char const*, char const*)>
c00116d6:	83 c4 10             	add    esp,0x10
c00116d9:	85 c0                	test   eax,eax
c00116db:	75 cb                	jne    c00116a8 <SysOpen(regs*)+0x88>
c00116dd:	83 ec 08             	sub    esp,0x8
c00116e0:	68 e9 35 02 c0       	push   0xc00235e9
c00116e5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00116e8:	50                   	push   eax
c00116e9:	e8 92 f0 fe ff       	call   c0000780 <strcmp>
c00116ee:	83 c4 10             	add    esp,0x10
c00116f1:	85 c0                	test   eax,eax
c00116f3:	74 b3                	je     c00116a8 <SysOpen(regs*)+0x88>
c00116f5:	83 ec 08             	sub    esp,0x8
c00116f8:	68 e8 35 02 c0       	push   0xc00235e8
c00116fd:	56                   	push   esi
c00116fe:	e8 d2 fe ff ff       	call   c00115d5 <string_ends_with(char const*, char const*)>
c0011703:	83 c4 10             	add    esp,0x10
c0011706:	85 c0                	test   eax,eax
c0011708:	75 9e                	jne    c00116a8 <SysOpen(regs*)+0x88>
c001170a:	83 ec 08             	sub    esp,0x8
c001170d:	68 f2 35 02 c0       	push   0xc00235f2
c0011712:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011715:	50                   	push   eax
c0011716:	e8 ba fe ff ff       	call   c00115d5 <string_ends_with(char const*, char const*)>
c001171b:	83 c4 10             	add    esp,0x10
c001171e:	85 c0                	test   eax,eax
c0011720:	0f 85 eb 00 00 00    	jne    c0011811 <SysOpen(regs*)+0x1f1>
c0011726:	83 ec 08             	sub    esp,0x8
c0011729:	68 f7 35 02 c0       	push   0xc00235f7
c001172e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011731:	50                   	push   eax
c0011732:	e8 9e fe ff ff       	call   c00115d5 <string_ends_with(char const*, char const*)>
c0011737:	83 c4 10             	add    esp,0x10
c001173a:	85 c0                	test   eax,eax
c001173c:	0f 85 cf 00 00 00    	jne    c0011811 <SysOpen(regs*)+0x1f1>
c0011742:	83 ec 08             	sub    esp,0x8
c0011745:	68 f3 35 02 c0       	push   0xc00235f3
c001174a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001174d:	51                   	push   ecx
c001174e:	e8 2d f0 fe ff       	call   c0000780 <strcmp>
c0011753:	83 c4 10             	add    esp,0x10
c0011756:	85 c0                	test   eax,eax
c0011758:	0f 84 b3 00 00 00    	je     c0011811 <SysOpen(regs*)+0x1f1>
c001175e:	83 ec 08             	sub    esp,0x8
c0011761:	68 f2 35 02 c0       	push   0xc00235f2
c0011766:	56                   	push   esi
c0011767:	e8 69 fe ff ff       	call   c00115d5 <string_ends_with(char const*, char const*)>
c001176c:	83 c4 10             	add    esp,0x10
c001176f:	85 c0                	test   eax,eax
c0011771:	0f 85 9a 00 00 00    	jne    c0011811 <SysOpen(regs*)+0x1f1>
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	68 14 01 00 00       	push   0x114
c001177f:	e8 14 dc ff ff       	call   c000f398 <malloc>
c0011784:	83 c4 0c             	add    esp,0xc
c0011787:	89 c6                	mov    esi,eax
c0011789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001178e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011791:	50                   	push   eax
c0011792:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011795:	52                   	push   edx
c0011796:	56                   	push   esi
c0011797:	e8 90 69 ff ff       	call   c000812c <File::File(char const*, Process*)>
c001179c:	83 c4 10             	add    esp,0x10
c001179f:	85 f6                	test   esi,esi
c00117a1:	74 5b                	je     c00117fe <SysOpen(regs*)+0x1de>
c00117a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117a6:	0f b6 c2             	movzx  eax,dl
c00117a9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00117ac:	89 d0                	mov    eax,edx
c00117ae:	83 e0 01             	and    eax,0x1
c00117b1:	f6 c2 02             	test   dl,0x2
c00117b4:	74 03                	je     c00117b9 <SysOpen(regs*)+0x199>
c00117b6:	83 c8 02             	or     eax,0x2
c00117b9:	f6 c2 04             	test   dl,0x4
c00117bc:	74 03                	je     c00117c1 <SysOpen(regs*)+0x1a1>
c00117be:	83 c8 04             	or     eax,0x4
c00117c1:	f6 c2 08             	test   dl,0x8
c00117c4:	74 03                	je     c00117c9 <SysOpen(regs*)+0x1a9>
c00117c6:	83 c8 0a             	or     eax,0xa
c00117c9:	80 e2 10             	and    dl,0x10
c00117cc:	74 03                	je     c00117d1 <SysOpen(regs*)+0x1b1>
c00117ce:	83 c8 12             	or     eax,0x12
c00117d1:	83 ec 08             	sub    esp,0x8
c00117d4:	50                   	push   eax
c00117d5:	56                   	push   esi
c00117d6:	e8 6f 69 ff ff       	call   c000814a <File::open(FileOpenMode)>
c00117db:	83 c4 10             	add    esp,0x10
c00117de:	85 c0                	test   eax,eax
c00117e0:	75 1c                	jne    c00117fe <SysOpen(regs*)+0x1de>
c00117e2:	83 ec 0c             	sub    esp,0xc
c00117e5:	56                   	push   esi
c00117e6:	e8 49 0e 00 00       	call   c0012634 <UnixFile::getFileDescriptor()>
c00117eb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117ee:	83 c4 10             	add    esp,0x10
c00117f1:	89 02                	mov    DWORD PTR [edx],eax
c00117f3:	c1 f8 1f             	sar    eax,0x1f
c00117f6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117f9:	e9 ba fe ff ff       	jmp    c00116b8 <SysOpen(regs*)+0x98>
c00117fe:	81 c4 04 01 00 00    	add    esp,0x104
c0011804:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011809:	5b                   	pop    ebx
c001180a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001180f:	5e                   	pop    esi
c0011810:	c3                   	ret    
c0011811:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011814:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001181a:	e9 92 fe ff ff       	jmp    c00116b1 <SysOpen(regs*)+0x91>

c001181f <KeSystemCall(regs*, void*)>:
c001181f:	53                   	push   ebx
c0011820:	83 ec 08             	sub    esp,0x8
c0011823:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011827:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001182a:	83 f8 40             	cmp    eax,0x40
c001182d:	77 16                	ja     c0011845 <KeSystemCall(regs*, void*)+0x26>
c001182f:	8b 14 85 40 58 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda7c0]
c0011836:	85 d2                	test   edx,edx
c0011838:	74 0b                	je     c0011845 <KeSystemCall(regs*, void*)+0x26>
c001183a:	83 ec 0c             	sub    esp,0xc
c001183d:	53                   	push   ebx
c001183e:	ff d2                	call   edx
c0011840:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011843:	eb 0d                	jmp    c0011852 <KeSystemCall(regs*, void*)+0x33>
c0011845:	52                   	push   edx
c0011846:	52                   	push   edx
c0011847:	50                   	push   eax
c0011848:	68 fc 35 02 c0       	push   0xc00235fc
c001184d:	e8 fc 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011852:	83 c4 10             	add    esp,0x10
c0011855:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001185a:	83 c4 08             	add    esp,0x8
c001185d:	31 d2                	xor    edx,edx
c001185f:	5b                   	pop    ebx
c0011860:	c3                   	ret    
c0011861:	90                   	nop

c0011862 <VgaText::isAtty()>:
c0011862:	b0 01                	mov    al,0x1
c0011864:	c3                   	ret    
c0011865:	90                   	nop

c0011866 <VgaText::~VgaText()>:
c0011866:	83 ec 0c             	sub    esp,0xc
c0011869:	ba 78 36 02 c0       	mov    edx,0xc0023678
c001186e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011872:	89 10                	mov    DWORD PTR [eax],edx
c0011874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	50                   	push   eax
c001187c:	e8 a1 0f 00 00       	call   c0012822 <UnixFile::~UnixFile()>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	90                   	nop
c0011885:	83 c4 0c             	add    esp,0xc
c0011888:	c3                   	ret    
c0011889:	90                   	nop

c001188a <VgaText::~VgaText()>:
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	83 ec 0c             	sub    esp,0xc
c0011890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011894:	e8 cd ff ff ff       	call   c0011866 <VgaText::~VgaText()>
c0011899:	83 c4 10             	add    esp,0x10
c001189c:	83 ec 08             	sub    esp,0x8
c001189f:	68 84 01 00 00       	push   0x184
c00118a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a8:	e8 62 b2 ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	83 c4 0c             	add    esp,0xc
c00118b3:	c3                   	ret    

c00118b4 <VgaText::read(unsigned long long, void*, int*)>:
c00118b4:	83 ec 10             	sub    esp,0x10
c00118b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00118bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00118bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c3:	e8 39 85 ff ff       	call   c0009e01 <readKeyboard(VgaText*, char*, unsigned long)>
c00118c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118cc:	89 02                	mov    DWORD PTR [edx],eax
c00118ce:	31 c0                	xor    eax,eax
c00118d0:	83 c4 1c             	add    esp,0x1c
c00118d3:	c3                   	ret    

c00118d4 <setTerminalScrollLock(bool)>:
c00118d4:	c3                   	ret    

c00118d5 <doTerminalCycle()>:
c00118d5:	c3                   	ret    

c00118d6 <addToTerminalCycle(VgaText*)>:
c00118d6:	c3                   	ret    

c00118d7 <scrollTerminalScrollLock(int)>:
c00118d7:	c3                   	ret    

c00118d8 <VgaText::updateTitle()>:
c00118d8:	c3                   	ret    
c00118d9:	90                   	nop

c00118da <VgaText::load()>:
c00118da:	c3                   	ret    
c00118db:	90                   	nop

c00118dc <VgaText::updateCursor()>:
c00118dc:	83 ec 14             	sub    esp,0x14
c00118df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00118e6:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00118e9:	e8 32 8c 00 00       	call   c001a520 <HalConsoleCursorUpdate(int, int)>
c00118ee:	83 c4 1c             	add    esp,0x1c
c00118f1:	c3                   	ret    

c00118f2 <VgaText::doANSI_SGR(int)>:
c00118f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00118f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118fa:	85 d2                	test   edx,edx
c00118fc:	75 0b                	jne    c0011909 <VgaText::doANSI_SGR(int)+0x17>
c00118fe:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011901:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011904:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011907:	eb 59                	jmp    c0011962 <VgaText::doANSI_SGR(int)+0x70>
c0011909:	83 fa 07             	cmp    edx,0x7
c001190c:	75 0b                	jne    c0011919 <VgaText::doANSI_SGR(int)+0x27>
c001190e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0011911:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011914:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0011917:	eb 49                	jmp    c0011962 <VgaText::doANSI_SGR(int)+0x70>
c0011919:	83 fa 1b             	cmp    edx,0x1b
c001191c:	74 e0                	je     c00118fe <VgaText::doANSI_SGR(int)+0xc>
c001191e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011921:	83 f9 07             	cmp    ecx,0x7
c0011924:	77 09                	ja     c001192f <VgaText::doANSI_SGR(int)+0x3d>
c0011926:	8b 14 8d 80 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda680]
c001192d:	eb 20                	jmp    c001194f <VgaText::doANSI_SGR(int)+0x5d>
c001192f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011932:	83 f9 07             	cmp    ecx,0x7
c0011935:	77 09                	ja     c0011940 <VgaText::doANSI_SGR(int)+0x4e>
c0011937:	8b 14 8d 80 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda680]
c001193e:	eb 22                	jmp    c0011962 <VgaText::doANSI_SGR(int)+0x70>
c0011940:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011943:	83 f9 07             	cmp    ecx,0x7
c0011946:	77 0b                	ja     c0011953 <VgaText::doANSI_SGR(int)+0x61>
c0011948:	8b 14 95 38 58 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda7c8]
c001194f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011952:	c3                   	ret    
c0011953:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0011956:	83 f9 07             	cmp    ecx,0x7
c0011959:	77 0a                	ja     c0011965 <VgaText::doANSI_SGR(int)+0x73>
c001195b:	8b 14 95 10 58 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda7f0]
c0011962:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011965:	c3                   	ret    

c0011966 <VgaText::setDefaultBgColour(VgaColour)>:
c0011966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001196a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001196e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011971:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011974:	c3                   	ret    
c0011975:	90                   	nop

c0011976 <VgaText::setDefaultFgColour(VgaColour)>:
c0011976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001197a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001197e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011981:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011984:	c3                   	ret    
c0011985:	90                   	nop

c0011986 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0011986:	53                   	push   ebx
c0011987:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001198b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001198f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011993:	51                   	push   ecx
c0011994:	e8 cd ff ff ff       	call   c0011966 <VgaText::setDefaultBgColour(VgaColour)>
c0011999:	58                   	pop    eax
c001199a:	5a                   	pop    edx
c001199b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001199f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00119a3:	5b                   	pop    ebx
c00119a4:	eb d0                	jmp    c0011976 <VgaText::setDefaultFgColour(VgaColour)>

c00119a6 <VgaText::setTitleTextColour(VgaColour)>:
c00119a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00119ae:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00119b1:	c3                   	ret    

c00119b2 <VgaText::setTitleColour(VgaColour)>:
c00119b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00119ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00119bd:	c3                   	ret    

c00119be <VgaText::setTitle(char*)>:
c00119be:	c3                   	ret    
c00119bf:	90                   	nop

c00119c0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00119c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00119c9:	83 e0 0f             	and    eax,0xf
c00119cc:	c1 e2 04             	shl    edx,0x4
c00119cf:	09 d0                	or     eax,edx
c00119d1:	c3                   	ret    

c00119d2 <VgaText::scrollScreen()>:
c00119d2:	55                   	push   ebp
c00119d3:	57                   	push   edi
c00119d4:	56                   	push   esi
c00119d5:	be 01 00 00 00       	mov    esi,0x1
c00119da:	53                   	push   ebx
c00119db:	83 ec 0c             	sub    esp,0xc
c00119de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119e2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00119e5:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00119eb:	31 ff                	xor    edi,edi
c00119ed:	01 e9                	add    ecx,ebp
c00119ef:	8a 01                	mov    al,BYTE PTR [ecx]
c00119f1:	83 fe 18             	cmp    esi,0x18
c00119f4:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00119fa:	75 20                	jne    c0011a1c <VgaText::scrollScreen()+0x4a>
c00119fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0011a02:	74 15                	je     c0011a19 <VgaText::scrollScreen()+0x47>
c0011a04:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011a08:	50                   	push   eax
c0011a09:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011a0d:	50                   	push   eax
c0011a0e:	e8 ad ff ff ff       	call   c00119c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0011a13:	5a                   	pop    edx
c0011a14:	5a                   	pop    edx
c0011a15:	88 01                	mov    BYTE PTR [ecx],al
c0011a17:	eb 03                	jmp    c0011a1c <VgaText::scrollScreen()+0x4a>
c0011a19:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011a1c:	47                   	inc    edi
c0011a1d:	41                   	inc    ecx
c0011a1e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011a24:	75 c9                	jne    c00119ef <VgaText::scrollScreen()+0x1d>
c0011a26:	46                   	inc    esi
c0011a27:	83 fe 19             	cmp    esi,0x19
c0011a2a:	75 b9                	jne    c00119e5 <VgaText::scrollScreen()+0x13>
c0011a2c:	39 1d b4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1b4,ebx
c0011a32:	75 1f                	jne    c0011a53 <VgaText::scrollScreen()+0x81>
c0011a34:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011a38:	74 05                	je     c0011a3f <VgaText::scrollScreen()+0x6d>
c0011a3a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0011a3d:	eb 14                	jmp    c0011a53 <VgaText::scrollScreen()+0x81>
c0011a3f:	50                   	push   eax
c0011a40:	50                   	push   eax
c0011a41:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011a45:	50                   	push   eax
c0011a46:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011a4a:	50                   	push   eax
c0011a4b:	e8 64 89 00 00       	call   c001a3b4 <HalConsoleScroll(int, int)>
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011a57:	83 c4 0c             	add    esp,0xc
c0011a5a:	5b                   	pop    ebx
c0011a5b:	5e                   	pop    esi
c0011a5c:	5f                   	pop    edi
c0011a5d:	5d                   	pop    ebp
c0011a5e:	e9 79 fe ff ff       	jmp    c00118dc <VgaText::updateCursor()>
c0011a63:	90                   	nop

c0011a64 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011a64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011a69:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0011a6e:	c1 e0 08             	shl    eax,0x8
c0011a71:	09 d0                	or     eax,edx
c0011a73:	c3                   	ret    

c0011a74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011a74:	55                   	push   ebp
c0011a75:	57                   	push   edi
c0011a76:	56                   	push   esi
c0011a77:	53                   	push   ebx
c0011a78:	83 ec 1c             	sub    esp,0x1c
c0011a7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a83:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011a87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011a8b:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0011a8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a96:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0011a9a:	85 ed                	test   ebp,ebp
c0011a9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011aa0:	75 14                	jne    c0011ab6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0011aa2:	c7 44 24 30 10 36 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023610
c0011aaa:	83 c4 1c             	add    esp,0x1c
c0011aad:	5b                   	pop    ebx
c0011aae:	5e                   	pop    esi
c0011aaf:	5f                   	pop    edi
c0011ab0:	5d                   	pop    ebp
c0011ab1:	e9 28 dc ff ff       	jmp    c000f6de <KePanic(char const*)>
c0011ab6:	50                   	push   eax
c0011ab7:	50                   	push   eax
c0011ab8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011abd:	50                   	push   eax
c0011abe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011ac3:	50                   	push   eax
c0011ac4:	e8 f7 fe ff ff       	call   c00119c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0011ac9:	5a                   	pop    edx
c0011aca:	5a                   	pop    edx
c0011acb:	0f b6 c0             	movzx  eax,al
c0011ace:	0f be c9             	movsx  ecx,cl
c0011ad1:	50                   	push   eax
c0011ad2:	51                   	push   ecx
c0011ad3:	e8 8c ff ff ff       	call   c0011a64 <VgaText::combineCharAndColour(char, unsigned char)>
c0011ad8:	6b d6 50             	imul   edx,esi,0x50
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	01 da                	add    edx,ebx
c0011ae0:	0f b7 d2             	movzx  edx,dx
c0011ae3:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0011ae8:	39 3d b4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1b4,edi
c0011aee:	75 28                	jne    c0011b18 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0011af0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0011af4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af8:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011afc:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0011b00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011b04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b08:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011b0c:	83 c4 1c             	add    esp,0x1c
c0011b0f:	5b                   	pop    ebx
c0011b10:	5e                   	pop    esi
c0011b11:	5f                   	pop    edi
c0011b12:	5d                   	pop    ebp
c0011b13:	e9 a4 89 00 00       	jmp    c001a4bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011b18:	83 c4 1c             	add    esp,0x1c
c0011b1b:	5b                   	pop    ebx
c0011b1c:	5e                   	pop    esi
c0011b1d:	5f                   	pop    edi
c0011b1e:	5d                   	pop    ebp
c0011b1f:	c3                   	ret    

c0011b20 <VgaText::getCursorX()>:
c0011b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011b27:	c3                   	ret    

c0011b28 <VgaText::getCursorY()>:
c0011b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b2c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011b2f:	c3                   	ret    

c0011b30 <VgaText::setCursor(int, int)>:
c0011b30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b38:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011b3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b3f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011b42:	e9 95 fd ff ff       	jmp    c00118dc <VgaText::updateCursor()>

c0011b47 <setActiveTerminal(VgaText*)>:
c0011b47:	53                   	push   ebx
c0011b48:	83 ec 08             	sub    esp,0x8
c0011b4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b4f:	85 db                	test   ebx,ebx
c0011b51:	75 11                	jne    c0011b64 <setActiveTerminal(VgaText*)+0x1d>
c0011b53:	c7 44 24 10 20 36 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023620
c0011b5b:	83 c4 08             	add    esp,0x8
c0011b5e:	5b                   	pop    ebx
c0011b5f:	e9 7a db ff ff       	jmp    c000f6de <KePanic(char const*)>
c0011b64:	a1 b4 d1 02 c0       	mov    eax,ds:0xc002d1b4
c0011b69:	85 c0                	test   eax,eax
c0011b6b:	74 0c                	je     c0011b79 <setActiveTerminal(VgaText*)+0x32>
c0011b6d:	83 ec 0c             	sub    esp,0xc
c0011b70:	50                   	push   eax
c0011b71:	e8 66 fd ff ff       	call   c00118dc <VgaText::updateCursor()>
c0011b76:	83 c4 10             	add    esp,0x10
c0011b79:	50                   	push   eax
c0011b7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011b7d:	89 1d b4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1b4,ebx
c0011b83:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011b86:	53                   	push   ebx
c0011b87:	e8 a4 ff ff ff       	call   c0011b30 <VgaText::setCursor(int, int)>
c0011b8c:	83 c4 18             	add    esp,0x18
c0011b8f:	5b                   	pop    ebx
c0011b90:	c3                   	ret    
c0011b91:	90                   	nop

c0011b92 <VgaText::clearScreen()>:
c0011b92:	57                   	push   edi
c0011b93:	56                   	push   esi
c0011b94:	31 f6                	xor    esi,esi
c0011b96:	53                   	push   ebx
c0011b97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b9b:	52                   	push   edx
c0011b9c:	6a 00                	push   0x0
c0011b9e:	6a 00                	push   0x0
c0011ba0:	53                   	push   ebx
c0011ba1:	e8 8a ff ff ff       	call   c0011b30 <VgaText::setCursor(int, int)>
c0011ba6:	83 c4 10             	add    esp,0x10
c0011ba9:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0011bb0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011bb3:	7e 20                	jle    c0011bd5 <VgaText::clearScreen()+0x43>
c0011bb5:	31 ff                	xor    edi,edi
c0011bb7:	50                   	push   eax
c0011bb8:	50                   	push   eax
c0011bb9:	56                   	push   esi
c0011bba:	57                   	push   edi
c0011bbb:	47                   	inc    edi
c0011bbc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011bbf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011bc2:	6a 20                	push   0x20
c0011bc4:	53                   	push   ebx
c0011bc5:	e8 aa fe ff ff       	call   c0011a74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011bca:	83 c4 20             	add    esp,0x20
c0011bcd:	83 ff 50             	cmp    edi,0x50
c0011bd0:	75 e5                	jne    c0011bb7 <VgaText::clearScreen()+0x25>
c0011bd2:	46                   	inc    esi
c0011bd3:	eb db                	jmp    c0011bb0 <VgaText::clearScreen()+0x1e>
c0011bd5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0011bdc:	5b                   	pop    ebx
c0011bdd:	5e                   	pop    esi
c0011bde:	5f                   	pop    edi
c0011bdf:	c3                   	ret    

c0011be0 <VgaText::setCursorX(int)>:
c0011be0:	83 ec 10             	sub    esp,0x10
c0011be3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011be7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bee:	50                   	push   eax
c0011bef:	e8 3c ff ff ff       	call   c0011b30 <VgaText::setCursor(int, int)>
c0011bf4:	83 c4 1c             	add    esp,0x1c
c0011bf7:	c3                   	ret    

c0011bf8 <VgaText::setCursorY(int)>:
c0011bf8:	83 ec 10             	sub    esp,0x10
c0011bfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c03:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011c06:	50                   	push   eax
c0011c07:	e8 24 ff ff ff       	call   c0011b30 <VgaText::setCursor(int, int)>
c0011c0c:	83 c4 1c             	add    esp,0x1c
c0011c0f:	c3                   	ret    

c0011c10 <VgaText::incrementCursor(bool)>:
c0011c10:	56                   	push   esi
c0011c11:	53                   	push   ebx
c0011c12:	51                   	push   ecx
c0011c13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011c1b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011c1e:	40                   	inc    eax
c0011c1f:	83 f8 50             	cmp    eax,0x50
c0011c22:	74 05                	je     c0011c29 <VgaText::incrementCursor(bool)+0x19>
c0011c24:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011c27:	eb 24                	jmp    c0011c4d <VgaText::incrementCursor(bool)+0x3d>
c0011c29:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011c30:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011c33:	8d 50 01             	lea    edx,[eax+0x1]
c0011c36:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011c39:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011c3c:	75 0f                	jne    c0011c4d <VgaText::incrementCursor(bool)+0x3d>
c0011c3e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011c41:	83 ec 0c             	sub    esp,0xc
c0011c44:	53                   	push   ebx
c0011c45:	e8 88 fd ff ff       	call   c00119d2 <VgaText::scrollScreen()>
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	89 f0                	mov    eax,esi
c0011c4f:	84 c0                	test   al,al
c0011c51:	74 0c                	je     c0011c5f <VgaText::incrementCursor(bool)+0x4f>
c0011c53:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011c57:	5a                   	pop    edx
c0011c58:	5b                   	pop    ebx
c0011c59:	5e                   	pop    esi
c0011c5a:	e9 7d fc ff ff       	jmp    c00118dc <VgaText::updateCursor()>
c0011c5f:	58                   	pop    eax
c0011c60:	5b                   	pop    ebx
c0011c61:	5e                   	pop    esi
c0011c62:	c3                   	ret    
c0011c63:	90                   	nop

c0011c64 <VgaText::decrementCursor(bool)>:
c0011c64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011c68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c6c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011c6f:	85 c0                	test   eax,eax
c0011c71:	74 04                	je     c0011c77 <VgaText::decrementCursor(bool)+0x13>
c0011c73:	48                   	dec    eax
c0011c74:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011c77:	84 c9                	test   cl,cl
c0011c79:	74 09                	je     c0011c84 <VgaText::decrementCursor(bool)+0x20>
c0011c7b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c7f:	e9 58 fc ff ff       	jmp    c00118dc <VgaText::updateCursor()>
c0011c84:	c3                   	ret    
c0011c85:	90                   	nop

c0011c86 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011c86:	53                   	push   ebx
c0011c87:	83 ec 08             	sub    esp,0x8
c0011c8a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011c8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c97:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011c9b:	83 f8 07             	cmp    eax,0x7
c0011c9e:	75 21                	jne    c0011cc1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011ca0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011ca8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011cb0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0011cb8:	83 c4 08             	add    esp,0x8
c0011cbb:	5b                   	pop    ebx
c0011cbc:	e9 0d 6d ff ff       	jmp    c00089ce <KeBeep(int, int, bool)>
c0011cc1:	83 f8 0d             	cmp    eax,0xd
c0011cc4:	75 09                	jne    c0011ccf <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011cc6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011ccd:	eb 2d                	jmp    c0011cfc <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011ccf:	83 f8 0a             	cmp    eax,0xa
c0011cd2:	75 31                	jne    c0011d05 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0011cd4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011cdb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011cde:	8d 50 01             	lea    edx,[eax+0x1]
c0011ce1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011ce4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011ce7:	75 0f                	jne    c0011cf8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0011ce9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	53                   	push   ebx
c0011cf0:	e8 dd fc ff ff       	call   c00119d2 <VgaText::scrollScreen()>
c0011cf5:	83 c4 10             	add    esp,0x10
c0011cf8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011cfc:	83 c4 08             	add    esp,0x8
c0011cff:	5b                   	pop    ebx
c0011d00:	e9 d7 fb ff ff       	jmp    c00118dc <VgaText::updateCursor()>
c0011d05:	83 f8 08             	cmp    eax,0x8
c0011d08:	75 25                	jne    c0011d2f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0011d0a:	50                   	push   eax
c0011d0b:	50                   	push   eax
c0011d0c:	6a 01                	push   0x1
c0011d0e:	53                   	push   ebx
c0011d0f:	e8 50 ff ff ff       	call   c0011c64 <VgaText::decrementCursor(bool)>
c0011d14:	5a                   	pop    edx
c0011d15:	59                   	pop    ecx
c0011d16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011d19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011d1c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011d1f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011d22:	6a 20                	push   0x20
c0011d24:	53                   	push   ebx
c0011d25:	e8 4a fd ff ff       	call   c0011a74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011d2a:	83 c4 28             	add    esp,0x28
c0011d2d:	5b                   	pop    ebx
c0011d2e:	c3                   	ret    
c0011d2f:	83 ec 08             	sub    esp,0x8
c0011d32:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011d35:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011d38:	51                   	push   ecx
c0011d39:	52                   	push   edx
c0011d3a:	50                   	push   eax
c0011d3b:	53                   	push   ebx
c0011d3c:	e8 33 fd ff ff       	call   c0011a74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011d41:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011d45:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0011d4d:	83 c4 28             	add    esp,0x28
c0011d50:	5b                   	pop    ebx
c0011d51:	e9 ba fe ff ff       	jmp    c0011c10 <VgaText::incrementCursor(bool)>

c0011d56 <VgaText::putchar(char)>:
c0011d56:	57                   	push   edi
c0011d57:	56                   	push   esi
c0011d58:	53                   	push   ebx
c0011d59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d61:	0f be c2             	movsx  eax,dl
c0011d64:	83 f8 5b             	cmp    eax,0x5b
c0011d67:	75 18                	jne    c0011d81 <VgaText::putchar(char)+0x2b>
c0011d69:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011d6d:	74 20                	je     c0011d8f <VgaText::putchar(char)+0x39>
c0011d6f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011d75:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011d7c:	e9 b8 00 00 00       	jmp    c0011e39 <VgaText::putchar(char)+0xe3>
c0011d81:	83 f8 1b             	cmp    eax,0x1b
c0011d84:	75 09                	jne    c0011d8f <VgaText::putchar(char)+0x39>
c0011d86:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011d8a:	e9 aa 00 00 00       	jmp    c0011e39 <VgaText::putchar(char)+0xe3>
c0011d8f:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0011d93:	89 f9                	mov    ecx,edi
c0011d95:	84 c9                	test   cl,cl
c0011d97:	0f 84 8c 00 00 00    	je     c0011e29 <VgaText::putchar(char)+0xd3>
c0011d9d:	8d 4a c0             	lea    ecx,[edx-0x40]
c0011da0:	80 f9 3e             	cmp    cl,0x3e
c0011da3:	77 70                	ja     c0011e15 <VgaText::putchar(char)+0xbf>
c0011da5:	83 f8 6d             	cmp    eax,0x6d
c0011da8:	75 3f                	jne    c0011de9 <VgaText::putchar(char)+0x93>
c0011daa:	31 f6                	xor    esi,esi
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	31 c0                	xor    eax,eax
c0011db0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011db3:	7e 25                	jle    c0011dda <VgaText::putchar(char)+0x84>
c0011db5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011dba:	83 fa 3b             	cmp    edx,0x3b
c0011dbd:	75 0f                	jne    c0011dce <VgaText::putchar(char)+0x78>
c0011dbf:	50                   	push   eax
c0011dc0:	53                   	push   ebx
c0011dc1:	e8 2c fb ff ff       	call   c00118f2 <VgaText::doANSI_SGR(int)>
c0011dc6:	31 d2                	xor    edx,edx
c0011dc8:	59                   	pop    ecx
c0011dc9:	58                   	pop    eax
c0011dca:	31 c0                	xor    eax,eax
c0011dcc:	eb 09                	jmp    c0011dd7 <VgaText::putchar(char)+0x81>
c0011dce:	6b c0 0a             	imul   eax,eax,0xa
c0011dd1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011dd5:	89 fa                	mov    edx,edi
c0011dd7:	46                   	inc    esi
c0011dd8:	eb d6                	jmp    c0011db0 <VgaText::putchar(char)+0x5a>
c0011dda:	84 d2                	test   dl,dl
c0011ddc:	74 2f                	je     c0011e0d <VgaText::putchar(char)+0xb7>
c0011dde:	50                   	push   eax
c0011ddf:	53                   	push   ebx
c0011de0:	e8 0d fb ff ff       	call   c00118f2 <VgaText::doANSI_SGR(int)>
c0011de5:	58                   	pop    eax
c0011de6:	5a                   	pop    edx
c0011de7:	eb 24                	jmp    c0011e0d <VgaText::putchar(char)+0xb7>
c0011de9:	83 f8 4a             	cmp    eax,0x4a
c0011dec:	75 1f                	jne    c0011e0d <VgaText::putchar(char)+0xb7>
c0011dee:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011df2:	75 19                	jne    c0011e0d <VgaText::putchar(char)+0xb7>
c0011df4:	83 ec 0c             	sub    esp,0xc
c0011df7:	53                   	push   ebx
c0011df8:	e8 95 fd ff ff       	call   c0011b92 <VgaText::clearScreen()>
c0011dfd:	83 c4 0c             	add    esp,0xc
c0011e00:	6a 00                	push   0x0
c0011e02:	6a 00                	push   0x0
c0011e04:	53                   	push   ebx
c0011e05:	e8 26 fd ff ff       	call   c0011b30 <VgaText::setCursor(int, int)>
c0011e0a:	83 c4 10             	add    esp,0x10
c0011e0d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011e13:	eb 24                	jmp    c0011e39 <VgaText::putchar(char)+0xe3>
c0011e15:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011e18:	83 f8 0e             	cmp    eax,0xe
c0011e1b:	7f 1c                	jg     c0011e39 <VgaText::putchar(char)+0xe3>
c0011e1d:	8d 48 01             	lea    ecx,[eax+0x1]
c0011e20:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011e23:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011e27:	eb 10                	jmp    c0011e39 <VgaText::putchar(char)+0xe3>
c0011e29:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011e2c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011e2f:	50                   	push   eax
c0011e30:	53                   	push   ebx
c0011e31:	e8 50 fe ff ff       	call   c0011c86 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011e36:	83 c4 10             	add    esp,0x10
c0011e39:	5b                   	pop    ebx
c0011e3a:	5e                   	pop    esi
c0011e3b:	5f                   	pop    edi
c0011e3c:	c3                   	ret    
c0011e3d:	90                   	nop

c0011e3e <VgaText::putx(unsigned int)>:
c0011e3e:	57                   	push   edi
c0011e3f:	b9 11 00 00 00       	mov    ecx,0x11
c0011e44:	56                   	push   esi
c0011e45:	be 2e 36 02 c0       	mov    esi,0xc002362e
c0011e4a:	53                   	push   ebx
c0011e4b:	83 ec 20             	sub    esp,0x20
c0011e4e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011e52:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011e56:	fc                   	cld    
c0011e57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e59:	be 08 00 00 00       	mov    esi,0x8
c0011e5e:	50                   	push   eax
c0011e5f:	50                   	push   eax
c0011e60:	89 d8                	mov    eax,ebx
c0011e62:	c1 e8 1c             	shr    eax,0x1c
c0011e65:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011e6a:	c1 e3 04             	shl    ebx,0x4
c0011e6d:	50                   	push   eax
c0011e6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011e72:	e8 df fe ff ff       	call   c0011d56 <VgaText::putchar(char)>
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	4e                   	dec    esi
c0011e7b:	75 e1                	jne    c0011e5e <VgaText::putx(unsigned int)+0x20>
c0011e7d:	83 c4 20             	add    esp,0x20
c0011e80:	5b                   	pop    ebx
c0011e81:	5e                   	pop    esi
c0011e82:	5f                   	pop    edi
c0011e83:	c3                   	ret    

c0011e84 <VgaText::puts(char const*)>:
c0011e84:	53                   	push   ebx
c0011e85:	83 ec 08             	sub    esp,0x8
c0011e88:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e8c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011e8f:	85 c0                	test   eax,eax
c0011e91:	74 12                	je     c0011ea5 <VgaText::puts(char const*)+0x21>
c0011e93:	51                   	push   ecx
c0011e94:	43                   	inc    ebx
c0011e95:	51                   	push   ecx
c0011e96:	50                   	push   eax
c0011e97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e9b:	e8 b6 fe ff ff       	call   c0011d56 <VgaText::putchar(char)>
c0011ea0:	83 c4 10             	add    esp,0x10
c0011ea3:	eb e7                	jmp    c0011e8c <VgaText::puts(char const*)+0x8>
c0011ea5:	83 c4 08             	add    esp,0x8
c0011ea8:	5b                   	pop    ebx
c0011ea9:	c3                   	ret    

c0011eaa <VgaText::write(unsigned long long, void*, int*)>:
c0011eaa:	55                   	push   ebp
c0011eab:	57                   	push   edi
c0011eac:	56                   	push   esi
c0011ead:	53                   	push   ebx
c0011eae:	83 ec 0c             	sub    esp,0xc
c0011eb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011eb5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011eb9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ebd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011ec4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011ec7:	39 eb                	cmp    ebx,ebp
c0011ec9:	74 13                	je     c0011ede <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011ecb:	50                   	push   eax
c0011ecc:	43                   	inc    ebx
c0011ecd:	50                   	push   eax
c0011ece:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011ed2:	50                   	push   eax
c0011ed3:	56                   	push   esi
c0011ed4:	e8 7d fe ff ff       	call   c0011d56 <VgaText::putchar(char)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	eb e9                	jmp    c0011ec7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011ede:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011ee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee9:	89 38                	mov    DWORD PTR [eax],edi
c0011eeb:	83 c4 0c             	add    esp,0xc
c0011eee:	31 c0                	xor    eax,eax
c0011ef0:	5b                   	pop    ebx
c0011ef1:	5e                   	pop    esi
c0011ef2:	5f                   	pop    edi
c0011ef3:	5d                   	pop    ebp
c0011ef4:	c3                   	ret    
c0011ef5:	90                   	nop

c0011ef6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011ef6:	55                   	push   ebp
c0011ef7:	57                   	push   edi
c0011ef8:	56                   	push   esi
c0011ef9:	53                   	push   ebx
c0011efa:	83 ec 1c             	sub    esp,0x1c
c0011efd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f05:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011f09:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011f0d:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0011f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f14:	85 db                	test   ebx,ebx
c0011f16:	75 14                	jne    c0011f2c <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0011f18:	c7 44 24 30 3f 36 02 c0 	mov    DWORD PTR [esp+0x30],0xc002363f
c0011f20:	83 c4 1c             	add    esp,0x1c
c0011f23:	5b                   	pop    ebx
c0011f24:	5e                   	pop    esi
c0011f25:	5f                   	pop    edi
c0011f26:	5d                   	pop    ebp
c0011f27:	e9 b2 d7 ff ff       	jmp    c000f6de <KePanic(char const*)>
c0011f2c:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0011f33:	50                   	push   eax
c0011f34:	50                   	push   eax
c0011f35:	89 e8                	mov    eax,ebp
c0011f37:	0f b6 c0             	movzx  eax,al
c0011f3a:	50                   	push   eax
c0011f3b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011f40:	50                   	push   eax
c0011f41:	e8 7a fa ff ff       	call   c00119c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0011f46:	83 c4 10             	add    esp,0x10
c0011f49:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0011f4d:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0011f50:	0f b6 c0             	movzx  eax,al
c0011f53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f57:	0f b7 c9             	movzx  ecx,cx
c0011f5a:	01 c9                	add    ecx,ecx
c0011f5c:	01 cb                	add    ebx,ecx
c0011f5e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011f61:	85 c0                	test   eax,eax
c0011f63:	0f 84 ef 00 00 00    	je     c0012058 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0011f69:	83 f8 0d             	cmp    eax,0xd
c0011f6c:	75 0c                	jne    c0011f7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0011f6e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0011f75:	e9 d8 00 00 00       	jmp    c0012052 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011f7a:	83 f8 0a             	cmp    eax,0xa
c0011f7d:	75 44                	jne    c0011fc3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0011f7f:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0011f86:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0011f89:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f8c:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0011f8f:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0011f92:	75 0f                	jne    c0011fa3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0011f94:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0011f97:	83 ec 0c             	sub    esp,0xc
c0011f9a:	57                   	push   edi
c0011f9b:	e8 32 fa ff ff       	call   c00119d2 <VgaText::scrollScreen()>
c0011fa0:	83 c4 10             	add    esp,0x10
c0011fa3:	83 ec 0c             	sub    esp,0xc
c0011fa6:	57                   	push   edi
c0011fa7:	e8 30 f9 ff ff       	call   c00118dc <VgaText::updateCursor()>
c0011fac:	83 c4 10             	add    esp,0x10
c0011faf:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011fb3:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0011fb6:	0f b7 db             	movzx  ebx,bx
c0011fb9:	01 db                	add    ebx,ebx
c0011fbb:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011fbe:	e9 8f 00 00 00       	jmp    c0012052 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011fc3:	83 f8 08             	cmp    eax,0x8
c0011fc6:	75 34                	jne    c0011ffc <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0011fc8:	51                   	push   ecx
c0011fc9:	51                   	push   ecx
c0011fca:	6a 01                	push   0x1
c0011fcc:	57                   	push   edi
c0011fcd:	e8 92 fc ff ff       	call   c0011c64 <VgaText::decrementCursor(bool)>
c0011fd2:	5b                   	pop    ebx
c0011fd3:	58                   	pop    eax
c0011fd4:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0011fd7:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0011fda:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0011fdd:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0011fe0:	6a 20                	push   0x20
c0011fe2:	57                   	push   edi
c0011fe3:	e8 8c fa ff ff       	call   c0011a74 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011fe8:	83 c4 20             	add    esp,0x20
c0011feb:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011fef:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0011ff2:	0f b7 db             	movzx  ebx,bx
c0011ff5:	01 db                	add    ebx,ebx
c0011ff7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011ffa:	eb 56                	jmp    c0012052 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011ffc:	52                   	push   edx
c0011ffd:	52                   	push   edx
c0011ffe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012002:	50                   	push   eax
c0012003:	e8 5c fa ff ff       	call   c0011a64 <VgaText::combineCharAndColour(char, unsigned char)>
c0012008:	83 c4 10             	add    esp,0x10
c001200b:	66 89 03             	mov    WORD PTR [ebx],ax
c001200e:	39 3d b4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1b4,edi
c0012014:	75 1a                	jne    c0012030 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001201c:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001201f:	55                   	push   ebp
c0012020:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012024:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012027:	50                   	push   eax
c0012028:	e8 8f 84 00 00       	call   c001a4bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c001202d:	83 c4 20             	add    esp,0x20
c0012030:	50                   	push   eax
c0012031:	83 c3 02             	add    ebx,0x2
c0012034:	50                   	push   eax
c0012035:	6a 00                	push   0x0
c0012037:	57                   	push   edi
c0012038:	e8 d3 fb ff ff       	call   c0011c10 <VgaText::incrementCursor(bool)>
c001203d:	83 c4 10             	add    esp,0x10
c0012040:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012044:	75 0c                	jne    c0012052 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012046:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001204a:	0f b7 db             	movzx  ebx,bx
c001204d:	01 db                	add    ebx,ebx
c001204f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012052:	46                   	inc    esi
c0012053:	e9 06 ff ff ff       	jmp    c0011f5e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012058:	83 ec 0c             	sub    esp,0xc
c001205b:	57                   	push   edi
c001205c:	e8 7b f8 ff ff       	call   c00118dc <VgaText::updateCursor()>
c0012061:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012068:	83 c4 2c             	add    esp,0x2c
c001206b:	5b                   	pop    ebx
c001206c:	5e                   	pop    esi
c001206d:	5f                   	pop    edi
c001206e:	5d                   	pop    ebp
c001206f:	c3                   	ret    

c0012070 <VgaText::VgaText(char const*)>:
c0012070:	56                   	push   esi
c0012071:	53                   	push   ebx
c0012072:	83 ec 04             	sub    esp,0x4
c0012075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012079:	83 ec 08             	sub    esp,0x8
c001207c:	6a 00                	push   0x0
c001207e:	50                   	push   eax
c001207f:	e8 b8 05 00 00       	call   c001263c <UnixFile::UnixFile(int)>
c0012084:	83 c4 10             	add    esp,0x10
c0012087:	ba 78 36 02 c0       	mov    edx,0xc0023678
c001208c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012090:	89 10                	mov    DWORD PTR [eax],edx
c0012092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012096:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001209d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120a1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00120a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ac:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00120b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120b4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00120b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120bc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00120c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120c7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00120ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120d2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00120d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120dd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00120e4:	83 ec 0c             	sub    esp,0xc
c00120e7:	68 4f 36 02 c0       	push   0xc002364f
c00120ec:	e8 5d 4e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00120f1:	83 c4 10             	add    esp,0x10
c00120f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00120ff:	83 ec 0c             	sub    esp,0xc
c0012102:	6a 01                	push   0x1
c0012104:	e8 94 09 00 00       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c0012109:	83 c4 10             	add    esp,0x10
c001210c:	89 c2                	mov    edx,eax
c001210e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012112:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012115:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c001211b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001211f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012122:	89 c6                	mov    esi,eax
c0012124:	e8 af d7 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0012129:	68 05 0c 00 00       	push   0xc05
c001212e:	56                   	push   esi
c001212f:	50                   	push   eax
c0012130:	53                   	push   ebx
c0012131:	e8 40 10 00 00       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001213d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012140:	83 ec 04             	sub    esp,0x4
c0012143:	68 a0 0f 00 00       	push   0xfa0
c0012148:	6a 00                	push   0x0
c001214a:	50                   	push   eax
c001214b:	e8 a0 e3 fe ff       	call   c00004f0 <memset>
c0012150:	83 c4 10             	add    esp,0x10
c0012153:	83 ec 04             	sub    esp,0x4
c0012156:	6a 00                	push   0x0
c0012158:	6a 07                	push   0x7
c001215a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001215e:	e8 23 f8 ff ff       	call   c0011986 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012163:	83 c4 10             	add    esp,0x10
c0012166:	83 ec 04             	sub    esp,0x4
c0012169:	6a 00                	push   0x0
c001216b:	6a 00                	push   0x0
c001216d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012171:	e8 ba f9 ff ff       	call   c0011b30 <VgaText::setCursor(int, int)>
c0012176:	83 c4 10             	add    esp,0x10
c0012179:	83 ec 0c             	sub    esp,0xc
c001217c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012180:	e8 0d fa ff ff       	call   c0011b92 <VgaText::clearScreen()>
c0012185:	83 c4 10             	add    esp,0x10
c0012188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001218c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012194:	05 82 00 00 00       	add    eax,0x82
c0012199:	83 ec 04             	sub    esp,0x4
c001219c:	68 80 00 00 00       	push   0x80
c00121a1:	6a 00                	push   0x0
c00121a3:	50                   	push   eax
c00121a4:	e8 47 e3 fe ff       	call   c00004f0 <memset>
c00121a9:	83 c4 10             	add    esp,0x10
c00121ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121b0:	05 02 01 00 00       	add    eax,0x102
c00121b5:	83 ec 04             	sub    esp,0x4
c00121b8:	68 80 00 00 00       	push   0x80
c00121bd:	6a 00                	push   0x0
c00121bf:	50                   	push   eax
c00121c0:	e8 2b e3 fe ff       	call   c00004f0 <memset>
c00121c5:	83 c4 10             	add    esp,0x10
c00121c8:	90                   	nop
c00121c9:	83 c4 04             	add    esp,0x4
c00121cc:	5b                   	pop    ebx
c00121cd:	5e                   	pop    esi
c00121ce:	c3                   	ret    
c00121cf:	90                   	nop

c00121d0 <VgaText::receiveKey(unsigned char)>:
c00121d0:	55                   	push   ebp
c00121d1:	57                   	push   edi
c00121d2:	56                   	push   esi
c00121d3:	53                   	push   ebx
c00121d4:	83 ec 2c             	sub    esp,0x2c
c00121d7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00121db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00121df:	89 fd                	mov    ebp,edi
c00121e1:	81 e5 ff 00 00 00    	and    ebp,0xff
c00121e7:	0f 84 48 01 00 00    	je     c0012335 <VgaText::receiveKey(unsigned char)+0x165>
c00121ed:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00121f3:	83 fd 08             	cmp    ebp,0x8
c00121f6:	75 6a                	jne    c0012262 <VgaText::receiveKey(unsigned char)+0x92>
c00121f8:	83 ec 0c             	sub    esp,0xc
c00121fb:	56                   	push   esi
c00121fc:	e8 7f e3 fe ff       	call   c0000580 <strlen>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	85 c0                	test   eax,eax
c0012206:	0f 84 ef 00 00 00    	je     c00122fb <VgaText::receiveKey(unsigned char)+0x12b>
c001220c:	50                   	push   eax
c001220d:	50                   	push   eax
c001220e:	6a 08                	push   0x8
c0012210:	53                   	push   ebx
c0012211:	e8 40 fb ff ff       	call   c0011d56 <VgaText::putchar(char)>
c0012216:	89 34 24             	mov    DWORD PTR [esp],esi
c0012219:	e8 62 e3 fe ff       	call   c0000580 <strlen>
c001221e:	83 c4 10             	add    esp,0x10
c0012221:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012229:	83 fa 1f             	cmp    edx,0x1f
c001222c:	89 d0                	mov    eax,edx
c001222e:	7f 1c                	jg     c001224c <VgaText::receiveKey(unsigned char)+0x7c>
c0012230:	83 e8 08             	sub    eax,0x8
c0012233:	3c 02                	cmp    al,0x2
c0012235:	76 15                	jbe    c001224c <VgaText::receiveKey(unsigned char)+0x7c>
c0012237:	83 fa 0d             	cmp    edx,0xd
c001223a:	74 10                	je     c001224c <VgaText::receiveKey(unsigned char)+0x7c>
c001223c:	57                   	push   edi
c001223d:	57                   	push   edi
c001223e:	68 62 36 02 c0       	push   0xc0023662
c0012243:	53                   	push   ebx
c0012244:	e8 3b fc ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0012249:	83 c4 10             	add    esp,0x10
c001224c:	83 ec 0c             	sub    esp,0xc
c001224f:	56                   	push   esi
c0012250:	e8 2b e3 fe ff       	call   c0000580 <strlen>
c0012255:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001225d:	e9 96 00 00 00       	jmp    c00122f8 <VgaText::receiveKey(unsigned char)+0x128>
c0012262:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012268:	83 ec 0c             	sub    esp,0xc
c001226b:	50                   	push   eax
c001226c:	e8 0f e3 fe ff       	call   c0000580 <strlen>
c0012271:	89 34 24             	mov    DWORD PTR [esp],esi
c0012274:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012278:	e8 03 e3 fe ff       	call   c0000580 <strlen>
c001227d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012281:	83 c4 10             	add    esp,0x10
c0012284:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012288:	3d 80 00 00 00       	cmp    eax,0x80
c001228d:	0f 87 a2 00 00 00    	ja     c0012335 <VgaText::receiveKey(unsigned char)+0x165>
c0012293:	8d 47 ff             	lea    eax,[edi-0x1]
c0012296:	3c 1e                	cmp    al,0x1e
c0012298:	77 35                	ja     c00122cf <VgaText::receiveKey(unsigned char)+0xff>
c001229a:	8d 47 f7             	lea    eax,[edi-0x9]
c001229d:	3c 01                	cmp    al,0x1
c001229f:	76 2e                	jbe    c00122cf <VgaText::receiveKey(unsigned char)+0xff>
c00122a1:	83 fd 0d             	cmp    ebp,0xd
c00122a4:	74 29                	je     c00122cf <VgaText::receiveKey(unsigned char)+0xff>
c00122a6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00122a9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00122ac:	68 68 36 02 c0       	push   0xc0023668
c00122b1:	53                   	push   ebx
c00122b2:	e8 3f fc ff ff       	call   c0011ef6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00122b7:	8d 47 40             	lea    eax,[edi+0x40]
c00122ba:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00122bd:	0f b6 c0             	movzx  eax,al
c00122c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00122c3:	50                   	push   eax
c00122c4:	53                   	push   ebx
c00122c5:	e8 bc f9 ff ff       	call   c0011c86 <VgaText::putchar(char, VgaColour, VgaColour)>
c00122ca:	83 c4 20             	add    esp,0x20
c00122cd:	eb 11                	jmp    c00122e0 <VgaText::receiveKey(unsigned char)+0x110>
c00122cf:	51                   	push   ecx
c00122d0:	89 f8                	mov    eax,edi
c00122d2:	51                   	push   ecx
c00122d3:	0f be c0             	movsx  eax,al
c00122d6:	50                   	push   eax
c00122d7:	53                   	push   ebx
c00122d8:	e8 79 fa ff ff       	call   c0011d56 <VgaText::putchar(char)>
c00122dd:	83 c4 10             	add    esp,0x10
c00122e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00122e5:	89 f8                	mov    eax,edi
c00122e7:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00122eb:	52                   	push   edx
c00122ec:	52                   	push   edx
c00122ed:	8d 44 24 26          	lea    eax,[esp+0x26]
c00122f1:	50                   	push   eax
c00122f2:	56                   	push   esi
c00122f3:	e8 78 e5 fe ff       	call   c0000870 <strcat>
c00122f8:	83 c4 10             	add    esp,0x10
c00122fb:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012302:	75 0f                	jne    c0012313 <VgaText::receiveKey(unsigned char)+0x143>
c0012304:	83 fd 1c             	cmp    ebp,0x1c
c0012307:	77 2c                	ja     c0012335 <VgaText::receiveKey(unsigned char)+0x165>
c0012309:	b8 08 04 00 10       	mov    eax,0x10000408
c001230e:	0f a3 e8             	bt     eax,ebp
c0012311:	73 22                	jae    c0012335 <VgaText::receiveKey(unsigned char)+0x165>
c0012313:	50                   	push   eax
c0012314:	81 c3 02 01 00 00    	add    ebx,0x102
c001231a:	50                   	push   eax
c001231b:	56                   	push   esi
c001231c:	53                   	push   ebx
c001231d:	e8 4e e5 fe ff       	call   c0000870 <strcat>
c0012322:	83 c4 0c             	add    esp,0xc
c0012325:	68 80 00 00 00       	push   0x80
c001232a:	6a 00                	push   0x0
c001232c:	56                   	push   esi
c001232d:	e8 be e1 fe ff       	call   c00004f0 <memset>
c0012332:	83 c4 10             	add    esp,0x10
c0012335:	83 c4 2c             	add    esp,0x2c
c0012338:	5b                   	pop    ebx
c0012339:	5e                   	pop    esi
c001233a:	5f                   	pop    edi
c001233b:	5d                   	pop    ebp
c001233c:	c3                   	ret    
c001233d:	90                   	nop

c001233e <VgaText::doUpdate()>:
c001233e:	c3                   	ret    
c001233f:	90                   	nop

c0012340 <TSS::TSS()>:
c0012340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012344:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001234b:	90                   	nop
c001234c:	c3                   	ret    
c001234d:	90                   	nop
c001234e:	66 90                	xchg   ax,ax

c0012350 <TSS::setESP(unsigned long)>:
c0012350:	55                   	push   ebp
c0012351:	89 e5                	mov    ebp,esp
c0012353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012356:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012359:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001235c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001235f:	90                   	nop
c0012360:	5d                   	pop    ebp
c0012361:	c3                   	ret    
c0012362:	66 90                	xchg   ax,ax

c0012364 <TSS::flush()>:
c0012364:	55                   	push   ebp
c0012365:	89 e5                	mov    ebp,esp
c0012367:	83 ec 10             	sub    esp,0x10
c001236a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001236d:	8b 00                	mov    eax,DWORD PTR [eax]
c001236f:	83 c8 03             	or     eax,0x3
c0012372:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012376:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001237a:	66 89 d0             	mov    ax,dx
c001237d:	0f 00 d8             	ltr    ax
c0012380:	90                   	nop
c0012381:	c9                   	leave  
c0012382:	c3                   	ret    
c0012383:	90                   	nop

c0012384 <TSS::setup(unsigned long, unsigned long)>:
c0012384:	55                   	push   ebp
c0012385:	89 e5                	mov    ebp,esp
c0012387:	83 ec 18             	sub    esp,0x18
c001238a:	83 ec 0c             	sub    esp,0xc
c001238d:	6a 68                	push   0x68
c001238f:	e8 04 d0 ff ff       	call   c000f398 <malloc>
c0012394:	83 c4 10             	add    esp,0x10
c0012397:	89 c2                	mov    edx,eax
c0012399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001239c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001239f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123a5:	83 ec 08             	sub    esp,0x8
c00123a8:	50                   	push   eax
c00123a9:	68 8c 36 02 c0       	push   0xc002368c
c00123ae:	e8 9b 4b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00123b3:	83 c4 10             	add    esp,0x10
c00123b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123bc:	83 ec 04             	sub    esp,0x4
c00123bf:	6a 68                	push   0x68
c00123c1:	6a 00                	push   0x0
c00123c3:	50                   	push   eax
c00123c4:	e8 27 e1 fe ff       	call   c00004f0 <memset>
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123d2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00123d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123de:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00123e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123ea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00123ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00123f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123f6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00123fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012402:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001240b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001240e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001241a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012426:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001242c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001242f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012432:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001243b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001243e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012441:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012447:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001244a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001244d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012453:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012456:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001245d:	83 ec 0c             	sub    esp,0xc
c0012460:	68 a3 36 02 c0       	push   0xc00236a3
c0012465:	e8 e4 4a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001246a:	83 c4 10             	add    esp,0x10
c001246d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012470:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012473:	0f 20 da             	mov    edx,cr3
c0012476:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012479:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001247c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001247f:	83 ec 0c             	sub    esp,0xc
c0012482:	68 a6 36 02 c0       	push   0xc00236a6
c0012487:	e8 c2 4a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001248c:	83 c4 10             	add    esp,0x10
c001248f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012492:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012495:	83 ec 08             	sub    esp,0x8
c0012498:	50                   	push   eax
c0012499:	8d 45 ec             	lea    eax,[ebp-0x14]
c001249c:	50                   	push   eax
c001249d:	e8 44 c0 ff ff       	call   c000e4e6 <GDTEntry::setBase(unsigned int)>
c00124a2:	83 c4 10             	add    esp,0x10
c00124a5:	83 ec 08             	sub    esp,0x8
c00124a8:	6a 68                	push   0x68
c00124aa:	8d 45 ec             	lea    eax,[ebp-0x14]
c00124ad:	50                   	push   eax
c00124ae:	e8 4f c0 ff ff       	call   c000e502 <GDTEntry::setLimit(unsigned int)>
c00124b3:	83 c4 10             	add    esp,0x10
c00124b6:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00124ba:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00124bd:	83 e0 0f             	and    eax,0xf
c00124c0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00124c3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00124c6:	83 c8 40             	or     eax,0x40
c00124c9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	68 a9 36 02 c0       	push   0xc00236a9
c00124d4:	e8 75 4a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00124d9:	83 c4 10             	add    esp,0x10
c00124dc:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00124e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124e7:	83 ec 08             	sub    esp,0x8
c00124ea:	50                   	push   eax
c00124eb:	68 ac 36 02 c0       	push   0xc00236ac
c00124f0:	e8 59 4a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00124fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012503:	05 64 01 00 00       	add    eax,0x164
c0012508:	83 ec 04             	sub    esp,0x4
c001250b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001250e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012511:	50                   	push   eax
c0012512:	e8 1f c0 ff ff       	call   c000e536 <GDT::addEntry(GDTEntry)>
c0012517:	83 c4 10             	add    esp,0x10
c001251a:	89 c2                	mov    edx,eax
c001251c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001251f:	89 10                	mov    DWORD PTR [eax],edx
c0012521:	83 ec 0c             	sub    esp,0xc
c0012524:	68 c1 36 02 c0       	push   0xc00236c1
c0012529:	e8 20 4a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001252e:	83 c4 10             	add    esp,0x10
c0012531:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0012536:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001253c:	05 64 01 00 00       	add    eax,0x164
c0012541:	83 ec 0c             	sub    esp,0xc
c0012544:	50                   	push   eax
c0012545:	e8 16 c0 ff ff       	call   c000e560 <GDT::flush()>
c001254a:	83 c4 10             	add    esp,0x10
c001254d:	83 ec 0c             	sub    esp,0xc
c0012550:	68 c4 36 02 c0       	push   0xc00236c4
c0012555:	e8 f4 49 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001255a:	83 c4 10             	add    esp,0x10
c001255d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012560:	8b 00                	mov    eax,DWORD PTR [eax]
c0012562:	c9                   	leave  
c0012563:	c3                   	ret    

c0012564 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001256c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001256f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012574:	75 08                	jne    c001257e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012576:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001257c:	eb 38                	jmp    c00125b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001257e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012583:	75 17                	jne    c001259c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001258a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001258d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012593:	8b 10                	mov    edx,DWORD PTR [eax]
c0012595:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012599:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001259c:	89 c1                	mov    ecx,eax
c001259e:	83 e1 fd             	and    ecx,0xfffffffd
c00125a1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00125a7:	74 cd                	je     c0012576 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00125a9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00125ae:	83 e0 ef             	and    eax,0xffffffef
c00125b1:	83 f8 08             	cmp    eax,0x8
c00125b4:	76 c0                	jbe    c0012576 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00125b6:	31 c0                	xor    eax,eax
c00125b8:	c3                   	ret    
c00125b9:	90                   	nop

c00125ba <ReservedFilename::isAtty()>:
c00125ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00125c1:	31 c0                	xor    eax,eax
c00125c3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00125c9:	74 09                	je     c00125d4 <ReservedFilename::isAtty()+0x1a>
c00125cb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00125d1:	0f 94 c0             	sete   al
c00125d4:	c3                   	ret    
c00125d5:	90                   	nop

c00125d6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00125d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00125ea:	75 08                	jne    c00125f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00125ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00125f2:	eb 3d                	jmp    c0012631 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00125f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00125f9:	75 17                	jne    c0012612 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00125fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012600:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012603:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012609:	8b 10                	mov    edx,DWORD PTR [eax]
c001260b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001260f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012612:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012617:	75 04                	jne    c001261d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012619:	89 0a                	mov    DWORD PTR [edx],ecx
c001261b:	eb 14                	jmp    c0012631 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001261d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012622:	74 c8                	je     c00125ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012624:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012629:	83 e0 ef             	and    eax,0xffffffef
c001262c:	83 f8 08             	cmp    eax,0x8
c001262f:	76 bb                	jbe    c00125ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012631:	31 c0                	xor    eax,eax
c0012633:	c3                   	ret    

c0012634 <UnixFile::getFileDescriptor()>:
c0012634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001263b:	c3                   	ret    

c001263c <UnixFile::UnixFile(int)>:
c001263c:	53                   	push   ebx
c001263d:	83 ec 28             	sub    esp,0x28
c0012640:	ba 14 37 02 c0       	mov    edx,0xc0023714
c0012645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012649:	89 10                	mov    DWORD PTR [eax],edx
c001264b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012653:	0f 8f 90 01 00 00    	jg     c00127e9 <UnixFile::UnixFile(int)+0x1ad>
c0012659:	a1 c0 59 02 c0       	mov    eax,ds:0xc00259c0
c001265e:	8d 50 01             	lea    edx,[eax+0x1]
c0012661:	89 15 c0 59 02 c0    	mov    DWORD PTR ds:0xc00259c0,edx
c0012667:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001266b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001266e:	83 ec 08             	sub    esp,0x8
c0012671:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012675:	68 38 d2 02 c0       	push   0xc002d238
c001267a:	e8 2f ed 00 00       	call   c00213ae <LinkedList<UnixFile>::addElement(UnixFile*)>
c001267f:	83 c4 10             	add    esp,0x10
c0012682:	a0 34 d2 02 c0       	mov    al,ds:0xc002d234
c0012687:	83 f0 01             	xor    eax,0x1
c001268a:	0f b6 c0             	movzx  eax,al
c001268d:	85 c0                	test   eax,eax
c001268f:	0f 84 55 01 00 00    	je     c00127ea <UnixFile::UnixFile(int)+0x1ae>
c0012695:	c6 05 34 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d234,0x1
c001269c:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00126a4:	83 ec 0c             	sub    esp,0xc
c00126a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126ab:	e8 e8 cc ff ff       	call   c000f398 <malloc>
c00126b0:	83 c4 10             	add    esp,0x10
c00126b3:	89 c3                	mov    ebx,eax
c00126b5:	83 ec 08             	sub    esp,0x8
c00126b8:	68 03 ff ff 0f       	push   0xfffff03
c00126bd:	53                   	push   ebx
c00126be:	e8 2d 01 00 00       	call   c00127f0 <ReservedFilename::ReservedFilename(int)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	89 1d 2c d2 02 c0    	mov    DWORD PTR ds:0xc002d22c,ebx
c00126cc:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00126d4:	83 ec 0c             	sub    esp,0xc
c00126d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126db:	e8 b8 cc ff ff       	call   c000f398 <malloc>
c00126e0:	83 c4 10             	add    esp,0x10
c00126e3:	89 c3                	mov    ebx,eax
c00126e5:	83 ec 08             	sub    esp,0x8
c00126e8:	68 01 ff ff 0f       	push   0xfffff01
c00126ed:	53                   	push   ebx
c00126ee:	e8 fd 00 00 00       	call   c00127f0 <ReservedFilename::ReservedFilename(int)>
c00126f3:	83 c4 10             	add    esp,0x10
c00126f6:	89 1d 30 d2 02 c0    	mov    DWORD PTR ds:0xc002d230,ebx
c00126fc:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012704:	83 ec 0c             	sub    esp,0xc
c0012707:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001270b:	e8 88 cc ff ff       	call   c000f398 <malloc>
c0012710:	83 c4 10             	add    esp,0x10
c0012713:	89 c3                	mov    ebx,eax
c0012715:	83 ec 08             	sub    esp,0x8
c0012718:	68 00 ff ff 0f       	push   0xfffff00
c001271d:	53                   	push   ebx
c001271e:	e8 cd 00 00 00       	call   c00127f0 <ReservedFilename::ReservedFilename(int)>
c0012723:	83 c4 10             	add    esp,0x10
c0012726:	89 1d 24 d2 02 c0    	mov    DWORD PTR ds:0xc002d224,ebx
c001272c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012734:	83 ec 0c             	sub    esp,0xc
c0012737:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001273b:	e8 58 cc ff ff       	call   c000f398 <malloc>
c0012740:	83 c4 10             	add    esp,0x10
c0012743:	89 c3                	mov    ebx,eax
c0012745:	83 ec 08             	sub    esp,0x8
c0012748:	68 02 ff ff 0f       	push   0xfffff02
c001274d:	53                   	push   ebx
c001274e:	e8 9d 00 00 00       	call   c00127f0 <ReservedFilename::ReservedFilename(int)>
c0012753:	83 c4 10             	add    esp,0x10
c0012756:	89 1d 28 d2 02 c0    	mov    DWORD PTR ds:0xc002d228,ebx
c001275c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012764:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012769:	7f 7f                	jg     c00127ea <UnixFile::UnixFile(int)+0x1ae>
c001276b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012773:	83 ec 0c             	sub    esp,0xc
c0012776:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001277a:	e8 19 cc ff ff       	call   c000f398 <malloc>
c001277f:	83 c4 10             	add    esp,0x10
c0012782:	89 c3                	mov    ebx,eax
c0012784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012788:	05 10 ff ff 0f       	add    eax,0xfffff10
c001278d:	83 ec 08             	sub    esp,0x8
c0012790:	50                   	push   eax
c0012791:	53                   	push   ebx
c0012792:	e8 59 00 00 00       	call   c00127f0 <ReservedFilename::ReservedFilename(int)>
c0012797:	83 c4 10             	add    esp,0x10
c001279a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001279e:	89 1c 85 00 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e00],ebx
c00127a5:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00127ad:	83 ec 0c             	sub    esp,0xc
c00127b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127b4:	e8 df cb ff ff       	call   c000f398 <malloc>
c00127b9:	83 c4 10             	add    esp,0x10
c00127bc:	89 c3                	mov    ebx,eax
c00127be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127c2:	05 20 ff ff 0f       	add    eax,0xfffff20
c00127c7:	83 ec 08             	sub    esp,0x8
c00127ca:	50                   	push   eax
c00127cb:	53                   	push   ebx
c00127cc:	e8 1f 00 00 00       	call   c00127f0 <ReservedFilename::ReservedFilename(int)>
c00127d1:	83 c4 10             	add    esp,0x10
c00127d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127d8:	89 1c 85 c0 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e40],ebx
c00127df:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00127e4:	e9 7b ff ff ff       	jmp    c0012764 <UnixFile::UnixFile(int)+0x128>
c00127e9:	90                   	nop
c00127ea:	83 c4 28             	add    esp,0x28
c00127ed:	5b                   	pop    ebx
c00127ee:	c3                   	ret    
c00127ef:	90                   	nop

c00127f0 <ReservedFilename::ReservedFilename(int)>:
c00127f0:	83 ec 0c             	sub    esp,0xc
c00127f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f7:	83 ec 08             	sub    esp,0x8
c00127fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127fe:	50                   	push   eax
c00127ff:	e8 38 fe ff ff       	call   c001263c <UnixFile::UnixFile(int)>
c0012804:	83 c4 10             	add    esp,0x10
c0012807:	ba 30 37 02 c0       	mov    edx,0xc0023730
c001280c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012810:	89 10                	mov    DWORD PTR [eax],edx
c0012812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001281a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001281d:	90                   	nop
c001281e:	83 c4 0c             	add    esp,0xc
c0012821:	c3                   	ret    

c0012822 <UnixFile::~UnixFile()>:
c0012822:	83 ec 1c             	sub    esp,0x1c
c0012825:	ba 14 37 02 c0       	mov    edx,0xc0023714
c001282a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001282e:	89 10                	mov    DWORD PTR [eax],edx
c0012830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012834:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012837:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001283c:	7f 76                	jg     c00128b4 <UnixFile::~UnixFile()+0x92>
c001283e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012846:	83 ec 0c             	sub    esp,0xc
c0012849:	68 38 d2 02 c0       	push   0xc002d238
c001284e:	e8 2f ec 00 00       	call   c0021482 <LinkedList<UnixFile>::getFirstElement()>
c0012853:	83 c4 10             	add    esp,0x10
c0012856:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001285a:	83 ec 0c             	sub    esp,0xc
c001285d:	68 38 d2 02 c0       	push   0xc002d238
c0012862:	e8 23 ec 00 00       	call   c002148a <LinkedList<UnixFile>::removeFirst()>
c0012867:	83 c4 10             	add    esp,0x10
c001286a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001286e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012872:	74 43                	je     c00128b7 <UnixFile::~UnixFile()+0x95>
c0012874:	83 ec 08             	sub    esp,0x8
c0012877:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001287b:	68 38 d2 02 c0       	push   0xc002d238
c0012880:	e8 29 eb 00 00       	call   c00213ae <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012885:	83 c4 10             	add    esp,0x10
c0012888:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001288c:	8d 50 01             	lea    edx,[eax+0x1]
c001288f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012893:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012898:	0f 94 c0             	sete   al
c001289b:	0f b6 c0             	movzx  eax,al
c001289e:	85 c0                	test   eax,eax
c00128a0:	74 a4                	je     c0012846 <UnixFile::~UnixFile()+0x24>
c00128a2:	83 ec 0c             	sub    esp,0xc
c00128a5:	68 c8 36 02 c0       	push   0xc00236c8
c00128aa:	e8 2f ce ff ff       	call   c000f6de <KePanic(char const*)>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	eb 92                	jmp    c0012846 <UnixFile::~UnixFile()+0x24>
c00128b4:	90                   	nop
c00128b5:	eb 01                	jmp    c00128b8 <UnixFile::~UnixFile()+0x96>
c00128b7:	90                   	nop
c00128b8:	90                   	nop
c00128b9:	83 c4 1c             	add    esp,0x1c
c00128bc:	c3                   	ret    
c00128bd:	90                   	nop

c00128be <UnixFile::~UnixFile()>:
c00128be:	83 ec 0c             	sub    esp,0xc
c00128c1:	83 ec 0c             	sub    esp,0xc
c00128c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c8:	e8 55 ff ff ff       	call   c0012822 <UnixFile::~UnixFile()>
c00128cd:	83 c4 10             	add    esp,0x10
c00128d0:	83 ec 08             	sub    esp,0x8
c00128d3:	6a 0c                	push   0xc
c00128d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d9:	e8 31 a2 ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c00128de:	83 c4 10             	add    esp,0x10
c00128e1:	83 c4 0c             	add    esp,0xc
c00128e4:	c3                   	ret    
c00128e5:	90                   	nop

c00128e6 <ReservedFilename::~ReservedFilename()>:
c00128e6:	83 ec 0c             	sub    esp,0xc
c00128e9:	ba 30 37 02 c0       	mov    edx,0xc0023730
c00128ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f2:	89 10                	mov    DWORD PTR [eax],edx
c00128f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f8:	83 ec 0c             	sub    esp,0xc
c00128fb:	50                   	push   eax
c00128fc:	e8 21 ff ff ff       	call   c0012822 <UnixFile::~UnixFile()>
c0012901:	83 c4 10             	add    esp,0x10
c0012904:	90                   	nop
c0012905:	83 c4 0c             	add    esp,0xc
c0012908:	c3                   	ret    
c0012909:	90                   	nop

c001290a <ReservedFilename::~ReservedFilename()>:
c001290a:	83 ec 0c             	sub    esp,0xc
c001290d:	83 ec 0c             	sub    esp,0xc
c0012910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012914:	e8 cd ff ff ff       	call   c00128e6 <ReservedFilename::~ReservedFilename()>
c0012919:	83 c4 10             	add    esp,0x10
c001291c:	83 ec 08             	sub    esp,0x8
c001291f:	6a 0c                	push   0xc
c0012921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012925:	e8 e5 a1 ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c001292a:	83 c4 10             	add    esp,0x10
c001292d:	83 c4 0c             	add    esp,0xc
c0012930:	c3                   	ret    

c0012931 <KeGetFileFromDescriptor(int)>:
c0012931:	53                   	push   ebx
c0012932:	83 ec 10             	sub    esp,0x10
c0012935:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012939:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001293f:	53                   	push   ebx
c0012940:	68 e8 36 02 c0       	push   0xc00236e8
c0012945:	e8 04 46 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001294a:	83 c4 10             	add    esp,0x10
c001294d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0012953:	7f 30                	jg     c0012985 <KeGetFileFromDescriptor(int)+0x54>
c0012955:	83 ec 0c             	sub    esp,0xc
c0012958:	68 38 d2 02 c0       	push   0xc002d238
c001295d:	e8 20 eb 00 00       	call   c0021482 <LinkedList<UnixFile>::getFirstElement()>
c0012962:	8d 50 ff             	lea    edx,[eax-0x1]
c0012965:	83 c4 10             	add    esp,0x10
c0012968:	83 fa fd             	cmp    edx,0xfffffffd
c001296b:	76 04                	jbe    c0012971 <KeGetFileFromDescriptor(int)+0x40>
c001296d:	31 c0                	xor    eax,eax
c001296f:	eb 6e                	jmp    c00129df <KeGetFileFromDescriptor(int)+0xae>
c0012971:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012974:	74 69                	je     c00129df <KeGetFileFromDescriptor(int)+0xae>
c0012976:	52                   	push   edx
c0012977:	52                   	push   edx
c0012978:	50                   	push   eax
c0012979:	68 38 d2 02 c0       	push   0xc002d238
c001297e:	e8 a9 eb 00 00       	call   c002152c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0012983:	eb dd                	jmp    c0012962 <KeGetFileFromDescriptor(int)+0x31>
c0012985:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001298b:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c0012990:	74 4d                	je     c00129df <KeGetFileFromDescriptor(int)+0xae>
c0012992:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012998:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c001299d:	74 40                	je     c00129df <KeGetFileFromDescriptor(int)+0xae>
c001299f:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00129a5:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c00129aa:	74 33                	je     c00129df <KeGetFileFromDescriptor(int)+0xae>
c00129ac:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00129b2:	a1 24 d2 02 c0       	mov    eax,ds:0xc002d224
c00129b7:	74 26                	je     c00129df <KeGetFileFromDescriptor(int)+0xae>
c00129b9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00129bf:	83 f8 08             	cmp    eax,0x8
c00129c2:	77 09                	ja     c00129cd <KeGetFileFromDescriptor(int)+0x9c>
c00129c4:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c00129cb:	eb 12                	jmp    c00129df <KeGetFileFromDescriptor(int)+0xae>
c00129cd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00129d3:	83 fb 08             	cmp    ebx,0x8
c00129d6:	77 95                	ja     c001296d <KeGetFileFromDescriptor(int)+0x3c>
c00129d8:	8b 04 9d c0 d1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2e40]
c00129df:	83 c4 08             	add    esp,0x8
c00129e2:	5b                   	pop    ebx
c00129e3:	c3                   	ret    

c00129e4 <__static_initialization_and_destruction_0(int, int)>:
c00129e4:	83 ec 0c             	sub    esp,0xc
c00129e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00129ec:	75 34                	jne    c0012a22 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00129ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00129f6:	75 2a                	jne    c0012a22 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00129f8:	83 ec 0c             	sub    esp,0xc
c00129fb:	68 38 d2 02 c0       	push   0xc002d238
c0012a00:	e8 67 e9 00 00       	call   c002136c <LinkedList<UnixFile>::LinkedList()>
c0012a05:	83 c4 10             	add    esp,0x10
c0012a08:	83 ec 04             	sub    esp,0x4
c0012a0b:	68 34 52 02 c0       	push   0xc0025234
c0012a10:	68 38 d2 02 c0       	push   0xc002d238
c0012a15:	68 6a 13 02 c0       	push   0xc002136a
c0012a1a:	e8 a0 a0 ff ff       	call   c000cabf <__cxa_atexit>
c0012a1f:	83 c4 10             	add    esp,0x10
c0012a22:	90                   	nop
c0012a23:	83 c4 0c             	add    esp,0xc
c0012a26:	c3                   	ret    

c0012a27 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0012a27:	83 ec 0c             	sub    esp,0xc
c0012a2a:	83 ec 08             	sub    esp,0x8
c0012a2d:	68 ff ff 00 00       	push   0xffff
c0012a32:	6a 01                	push   0x1
c0012a34:	e8 ab ff ff ff       	call   c00129e4 <__static_initialization_and_destruction_0(int, int)>
c0012a39:	83 c4 10             	add    esp,0x10
c0012a3c:	83 c4 0c             	add    esp,0xc
c0012a3f:	c3                   	ret    

c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012a40:	53                   	push   ebx
c0012a41:	8b 15 c8 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259c8
c0012a47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012a4f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012a55:	89 d8                	mov    eax,ebx
c0012a57:	d1 e8                	shr    eax,1
c0012a59:	01 d0                	add    eax,edx
c0012a5b:	80 e3 01             	and    bl,0x1
c0012a5e:	8a 10                	mov    dl,BYTE PTR [eax]
c0012a60:	75 09                	jne    c0012a6b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012a62:	83 e2 f0             	and    edx,0xfffffff0
c0012a65:	09 ca                	or     edx,ecx
c0012a67:	88 10                	mov    BYTE PTR [eax],dl
c0012a69:	5b                   	pop    ebx
c0012a6a:	c3                   	ret    
c0012a6b:	0f b6 c9             	movzx  ecx,cl
c0012a6e:	83 e2 0f             	and    edx,0xf
c0012a71:	c1 e1 04             	shl    ecx,0x4
c0012a74:	09 ca                	or     edx,ecx
c0012a76:	88 10                	mov    BYTE PTR [eax],dl
c0012a78:	5b                   	pop    ebx
c0012a79:	c3                   	ret    

c0012a7a <Virt::getPageState(unsigned long)>:
c0012a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a7e:	8b 0d c8 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259c8
c0012a84:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0012a8a:	89 d0                	mov    eax,edx
c0012a8c:	d1 e8                	shr    eax,1
c0012a8e:	80 e2 01             	and    dl,0x1
c0012a91:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012a94:	74 03                	je     c0012a99 <Virt::getPageState(unsigned long)+0x1f>
c0012a96:	c1 e8 04             	shr    eax,0x4
c0012a99:	83 e0 0f             	and    eax,0xf
c0012a9c:	c3                   	ret    

c0012a9d <Virt::allocateKernelVirtualPages(int)>:
c0012a9d:	55                   	push   ebp
c0012a9e:	57                   	push   edi
c0012a9f:	56                   	push   esi
c0012aa0:	31 f6                	xor    esi,esi
c0012aa2:	53                   	push   ebx
c0012aa3:	31 db                	xor    ebx,ebx
c0012aa5:	83 ec 1c             	sub    esp,0x1c
c0012aa8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0012aad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012ab1:	8b 2d c4 59 02 c0    	mov    ebp,DWORD PTR ds:0xc00259c4
c0012ab7:	55                   	push   ebp
c0012ab8:	e8 bd ff ff ff       	call   c0012a7a <Virt::getPageState(unsigned long)>
c0012abd:	5a                   	pop    edx
c0012abe:	84 c0                	test   al,al
c0012ac0:	75 3d                	jne    c0012aff <Virt::allocateKernelVirtualPages(int)+0x62>
c0012ac2:	85 db                	test   ebx,ebx
c0012ac4:	0f 44 f5             	cmove  esi,ebp
c0012ac7:	83 c3 01             	add    ebx,0x1
c0012aca:	39 fb                	cmp    ebx,edi
c0012acc:	74 5e                	je     c0012b2c <Virt::allocateKernelVirtualPages(int)+0x8f>
c0012ace:	83 c5 01             	add    ebp,0x1
c0012ad1:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0012ad7:	76 33                	jbe    c0012b0c <Virt::allocateKernelVirtualPages(int)+0x6f>
c0012ad9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0012ade:	c7 05 c4 59 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00259c4,0xc8000
c0012ae8:	75 2a                	jne    c0012b14 <Virt::allocateKernelVirtualPages(int)+0x77>
c0012aea:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0012aef:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0012af4:	55                   	push   ebp
c0012af5:	e8 80 ff ff ff       	call   c0012a7a <Virt::getPageState(unsigned long)>
c0012afa:	5a                   	pop    edx
c0012afb:	84 c0                	test   al,al
c0012afd:	74 c3                	je     c0012ac2 <Virt::allocateKernelVirtualPages(int)+0x25>
c0012aff:	83 c5 01             	add    ebp,0x1
c0012b02:	31 db                	xor    ebx,ebx
c0012b04:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0012b0a:	77 cd                	ja     c0012ad9 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0012b0c:	89 2d c4 59 02 c0    	mov    DWORD PTR ds:0xc00259c4,ebp
c0012b12:	eb a3                	jmp    c0012ab7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012b14:	83 ec 0c             	sub    esp,0xc
c0012b17:	68 44 37 02 c0       	push   0xc0023744
c0012b1c:	e8 bd cb ff ff       	call   c000f6de <KePanic(char const*)>
c0012b21:	8b 2d c4 59 02 c0    	mov    ebp,DWORD PTR ds:0xc00259c4
c0012b27:	83 c4 10             	add    esp,0x10
c0012b2a:	eb 8b                	jmp    c0012ab7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0012b2c:	89 35 c4 59 02 c0    	mov    DWORD PTR ds:0xc00259c4,esi
c0012b32:	83 fb 01             	cmp    ebx,0x1
c0012b35:	74 63                	je     c0012b9a <Virt::allocateKernelVirtualPages(int)+0xfd>
c0012b37:	85 ff                	test   edi,edi
c0012b39:	74 41                	je     c0012b7c <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012b3b:	89 f0                	mov    eax,esi
c0012b3d:	31 db                	xor    ebx,ebx
c0012b3f:	8d 6f ff             	lea    ebp,[edi-0x1]
c0012b42:	eb 16                	jmp    c0012b5a <Virt::allocateKernelVirtualPages(int)+0xbd>
c0012b44:	6a 01                	push   0x1
c0012b46:	83 c3 01             	add    ebx,0x1
c0012b49:	50                   	push   eax
c0012b4a:	e8 f1 fe ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012b4f:	39 fb                	cmp    ebx,edi
c0012b51:	58                   	pop    eax
c0012b52:	5a                   	pop    edx
c0012b53:	74 27                	je     c0012b7c <Virt::allocateKernelVirtualPages(int)+0xdf>
c0012b55:	a1 c4 59 02 c0       	mov    eax,ds:0xc00259c4
c0012b5a:	8d 50 01             	lea    edx,[eax+0x1]
c0012b5d:	85 db                	test   ebx,ebx
c0012b5f:	89 15 c4 59 02 c0    	mov    DWORD PTR ds:0xc00259c4,edx
c0012b65:	74 22                	je     c0012b89 <Virt::allocateKernelVirtualPages(int)+0xec>
c0012b67:	39 dd                	cmp    ebp,ebx
c0012b69:	75 d9                	jne    c0012b44 <Virt::allocateKernelVirtualPages(int)+0xa7>
c0012b6b:	6a 03                	push   0x3
c0012b6d:	83 c3 01             	add    ebx,0x1
c0012b70:	50                   	push   eax
c0012b71:	e8 ca fe ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012b76:	39 fb                	cmp    ebx,edi
c0012b78:	59                   	pop    ecx
c0012b79:	58                   	pop    eax
c0012b7a:	75 d9                	jne    c0012b55 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012b7c:	83 c4 1c             	add    esp,0x1c
c0012b7f:	89 f0                	mov    eax,esi
c0012b81:	5b                   	pop    ebx
c0012b82:	c1 e0 0c             	shl    eax,0xc
c0012b85:	5e                   	pop    esi
c0012b86:	5f                   	pop    edi
c0012b87:	5d                   	pop    ebp
c0012b88:	c3                   	ret    
c0012b89:	6a 02                	push   0x2
c0012b8b:	bb 01 00 00 00       	mov    ebx,0x1
c0012b90:	50                   	push   eax
c0012b91:	e8 aa fe ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012b96:	58                   	pop    eax
c0012b97:	5a                   	pop    edx
c0012b98:	eb bb                	jmp    c0012b55 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012b9a:	6a 04                	push   0x4
c0012b9c:	56                   	push   esi
c0012b9d:	8d 46 01             	lea    eax,[esi+0x1]
c0012ba0:	a3 c4 59 02 c0       	mov    ds:0xc00259c4,eax
c0012ba5:	e8 96 fe ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012baa:	89 f0                	mov    eax,esi
c0012bac:	59                   	pop    ecx
c0012bad:	c1 e0 0c             	shl    eax,0xc
c0012bb0:	5b                   	pop    ebx
c0012bb1:	83 c4 1c             	add    esp,0x1c
c0012bb4:	5b                   	pop    ebx
c0012bb5:	5e                   	pop    esi
c0012bb6:	5f                   	pop    edi
c0012bb7:	5d                   	pop    ebp
c0012bb8:	c3                   	ret    

c0012bb9 <Virt::freeSwapfilePage(unsigned long)>:
c0012bb9:	53                   	push   ebx
c0012bba:	8b 15 4c d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d24c
c0012bc0:	b8 01 00 00 00       	mov    eax,0x1
c0012bc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012bc9:	d3 e0                	shl    eax,cl
c0012bcb:	89 cb                	mov    ebx,ecx
c0012bcd:	c1 eb 05             	shr    ebx,0x5
c0012bd0:	f7 d0                	not    eax
c0012bd2:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0012bd5:	21 c1                	and    ecx,eax
c0012bd7:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012bda:	5b                   	pop    ebx
c0012bdb:	c3                   	ret    

c0012bdc <Virt::swapIDToSector(unsigned long)>:
c0012bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be0:	8b 15 cc 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259cc
c0012be6:	8b 0d d4 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259d4
c0012bec:	0f af c2             	imul   eax,edx
c0012bef:	01 c8                	add    eax,ecx
c0012bf1:	c3                   	ret    

c0012bf2 <Virt::allocateSwapfilePage()>:
c0012bf2:	55                   	push   ebp
c0012bf3:	31 d2                	xor    edx,edx
c0012bf5:	57                   	push   edi
c0012bf6:	56                   	push   esi
c0012bf7:	53                   	push   ebx
c0012bf8:	83 ec 0c             	sub    esp,0xc
c0012bfb:	8b 1d d0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259d0
c0012c01:	8b 0d cc 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259cc
c0012c07:	89 d8                	mov    eax,ebx
c0012c09:	f7 f1                	div    ecx
c0012c0b:	39 cb                	cmp    ebx,ecx
c0012c0d:	72 2f                	jb     c0012c3e <Virt::allocateSwapfilePage()+0x4c>
c0012c0f:	8b 35 4c d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d24c
c0012c15:	8b 16                	mov    edx,DWORD PTR [esi]
c0012c17:	f6 c2 01             	test   dl,0x1
c0012c1a:	74 3e                	je     c0012c5a <Virt::allocateSwapfilePage()+0x68>
c0012c1c:	31 c9                	xor    ecx,ecx
c0012c1e:	bf 01 00 00 00       	mov    edi,0x1
c0012c23:	eb 12                	jmp    c0012c37 <Virt::allocateSwapfilePage()+0x45>
c0012c25:	89 ca                	mov    edx,ecx
c0012c27:	89 fd                	mov    ebp,edi
c0012c29:	c1 ea 05             	shr    edx,0x5
c0012c2c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012c2f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c31:	d3 e5                	shl    ebp,cl
c0012c33:	85 ea                	test   edx,ebp
c0012c35:	74 2c                	je     c0012c63 <Virt::allocateSwapfilePage()+0x71>
c0012c37:	83 c1 01             	add    ecx,0x1
c0012c3a:	39 c8                	cmp    eax,ecx
c0012c3c:	77 e7                	ja     c0012c25 <Virt::allocateSwapfilePage()+0x33>
c0012c3e:	83 ec 0c             	sub    esp,0xc
c0012c41:	68 c7 3c 02 c0       	push   0xc0023cc7
c0012c46:	e8 93 ca ff ff       	call   c000f6de <KePanic(char const*)>
c0012c4b:	83 c4 10             	add    esp,0x10
c0012c4e:	31 c9                	xor    ecx,ecx
c0012c50:	83 c4 0c             	add    esp,0xc
c0012c53:	89 c8                	mov    eax,ecx
c0012c55:	5b                   	pop    ebx
c0012c56:	5e                   	pop    esi
c0012c57:	5f                   	pop    edi
c0012c58:	5d                   	pop    ebp
c0012c59:	c3                   	ret    
c0012c5a:	89 f3                	mov    ebx,esi
c0012c5c:	bd 01 00 00 00       	mov    ebp,0x1
c0012c61:	31 c9                	xor    ecx,ecx
c0012c63:	09 ea                	or     edx,ebp
c0012c65:	89 c8                	mov    eax,ecx
c0012c67:	89 13                	mov    DWORD PTR [ebx],edx
c0012c69:	83 c4 0c             	add    esp,0xc
c0012c6c:	5b                   	pop    ebx
c0012c6d:	5e                   	pop    esi
c0012c6e:	5f                   	pop    edi
c0012c6f:	5d                   	pop    ebp
c0012c70:	c3                   	ret    

c0012c71 <Virt::virtualMemorySetup()>:
c0012c71:	53                   	push   ebx
c0012c72:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012c77:	6a 0f                	push   0xf
c0012c79:	53                   	push   ebx
c0012c7a:	83 c3 01             	add    ebx,0x1
c0012c7d:	e8 be fd ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012c82:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012c88:	58                   	pop    eax
c0012c89:	5a                   	pop    edx
c0012c8a:	75 eb                	jne    c0012c77 <Virt::virtualMemorySetup()+0x6>
c0012c8c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012c91:	6a 00                	push   0x0
c0012c93:	53                   	push   ebx
c0012c94:	83 c3 01             	add    ebx,0x1
c0012c97:	e8 a4 fd ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012c9c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012ca2:	59                   	pop    ecx
c0012ca3:	58                   	pop    eax
c0012ca4:	75 eb                	jne    c0012c91 <Virt::virtualMemorySetup()+0x20>
c0012ca6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012cab:	6a 0f                	push   0xf
c0012cad:	53                   	push   ebx
c0012cae:	83 c3 01             	add    ebx,0x1
c0012cb1:	e8 8a fd ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012cb6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012cbc:	58                   	pop    eax
c0012cbd:	5a                   	pop    edx
c0012cbe:	75 eb                	jne    c0012cab <Virt::virtualMemorySetup()+0x3a>
c0012cc0:	5b                   	pop    ebx
c0012cc1:	c3                   	ret    

c0012cc2 <Virt::setupPageSwapping(int)>:
c0012cc2:	53                   	push   ebx
c0012cc3:	83 ec 0c             	sub    esp,0xc
c0012cc6:	a1 e8 aa 02 c0       	mov    eax,ds:0xc002aae8
c0012ccb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ccf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cd7:	53                   	push   ebx
c0012cd8:	68 de 3c 02 c0       	push   0xc0023cde
c0012cdd:	50                   	push   eax
c0012cde:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012ce1:	c1 e3 0b             	shl    ebx,0xb
c0012ce4:	89 1d d0 59 02 c0    	mov    DWORD PTR ds:0xc00259d0,ebx
c0012cea:	c1 eb 08             	shr    ebx,0x8
c0012ced:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cf0:	c6 05 d8 59 02 c0 43 	mov    BYTE PTR ds:0xc00259d8,0x43
c0012cf7:	c7 05 cc 59 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00259cc,0x8
c0012d01:	a3 d4 59 02 c0       	mov    ds:0xc00259d4,eax
c0012d06:	e8 8d c6 ff ff       	call   c000f398 <malloc>
c0012d0b:	31 d2                	xor    edx,edx
c0012d0d:	83 c4 0c             	add    esp,0xc
c0012d10:	a3 4c d2 02 c0       	mov    ds:0xc002d24c,eax
c0012d15:	89 c1                	mov    ecx,eax
c0012d17:	a1 d0 59 02 c0       	mov    eax,ds:0xc00259d0
c0012d1c:	f7 35 cc 59 02 c0    	div    DWORD PTR ds:0xc00259cc
c0012d22:	c1 e8 05             	shr    eax,0x5
c0012d25:	50                   	push   eax
c0012d26:	6a 00                	push   0x0
c0012d28:	51                   	push   ecx
c0012d29:	e8 c2 d7 fe ff       	call   c00004f0 <memset>
c0012d2e:	83 c4 18             	add    esp,0x18
c0012d31:	5b                   	pop    ebx
c0012d32:	c3                   	ret    
c0012d33:	90                   	nop

c0012d34 <VAS::setCPUSpecific(unsigned long)>:
c0012d34:	c3                   	ret    
c0012d35:	90                   	nop

c0012d36 <VAS::VAS(VAS*)>:
c0012d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012d41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012d4c:	90                   	nop
c0012d4d:	c3                   	ret    

c0012d4e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d52:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012d57:	89 c2                	mov    edx,eax
c0012d59:	c1 ea 16             	shr    edx,0x16
c0012d5c:	c1 e8 0a             	shr    eax,0xa
c0012d5f:	83 f9 01             	cmp    ecx,0x1
c0012d62:	19 c9                	sbb    ecx,ecx
c0012d64:	25 fc 0f 00 00       	and    eax,0xffc
c0012d69:	c1 e2 0c             	shl    edx,0xc
c0012d6c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012d72:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012d79:	01 d0                	add    eax,edx
c0012d7b:	c3                   	ret    

c0012d7c <VAS::getPageTableEntry(unsigned long)>:
c0012d7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d80:	89 ca                	mov    edx,ecx
c0012d82:	c1 ea 16             	shr    edx,0x16
c0012d85:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012d8b:	c1 e9 0a             	shr    ecx,0xa
c0012d8e:	c1 e0 0c             	shl    eax,0xc
c0012d91:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012d97:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012d9a:	c3                   	ret    

c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>:
c0012d9b:	55                   	push   ebp
c0012d9c:	57                   	push   edi
c0012d9d:	bf 01 00 00 00       	mov    edi,0x1
c0012da2:	56                   	push   esi
c0012da3:	53                   	push   ebx
c0012da4:	83 ec 1c             	sub    esp,0x1c
c0012da7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012dab:	c1 ee 0c             	shr    esi,0xc
c0012dae:	eb 48                	jmp    c0012df8 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012db0:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0012db5:	83 ec 08             	sub    esp,0x8
c0012db8:	55                   	push   ebp
c0012db9:	50                   	push   eax
c0012dba:	e8 bd ff ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0012dbf:	83 c4 10             	add    esp,0x10
c0012dc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dc4:	f6 c6 04             	test   dh,0x4
c0012dc7:	75 70                	jne    c0012e39 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012dc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012dcf:	83 fb 04             	cmp    ebx,0x4
c0012dd2:	0f 84 8a 00 00 00    	je     c0012e62 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012dd8:	83 fb 02             	cmp    ebx,0x2
c0012ddb:	0f 84 9a 00 00 00    	je     c0012e7b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012de1:	83 fb 03             	cmp    ebx,0x3
c0012de4:	0f 84 be 00 00 00    	je     c0012ea8 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012dea:	83 fb 01             	cmp    ebx,0x1
c0012ded:	0f 84 a2 00 00 00    	je     c0012e95 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012df3:	83 c6 01             	add    esi,0x1
c0012df6:	31 ff                	xor    edi,edi
c0012df8:	56                   	push   esi
c0012df9:	89 f5                	mov    ebp,esi
c0012dfb:	e8 7a fc ff ff       	call   c0012a7a <Virt::getPageState(unsigned long)>
c0012e00:	c1 e5 0c             	shl    ebp,0xc
c0012e03:	5a                   	pop    edx
c0012e04:	0f b6 d8             	movzx  ebx,al
c0012e07:	85 db                	test   ebx,ebx
c0012e09:	75 a5                	jne    c0012db0 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012e0b:	83 ec 0c             	sub    esp,0xc
c0012e0e:	68 f5 3c 02 c0       	push   0xc0023cf5
c0012e13:	e8 c6 c8 ff ff       	call   c000f6de <KePanic(char const*)>
c0012e18:	5a                   	pop    edx
c0012e19:	59                   	pop    ecx
c0012e1a:	55                   	push   ebp
c0012e1b:	8b 2d 50 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d250
c0012e21:	55                   	push   ebp
c0012e22:	e8 55 ff ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e2c:	f6 c6 04             	test   dh,0x4
c0012e2f:	75 08                	jne    c0012e39 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012e31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012e37:	eb ba                	jmp    c0012df3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012e39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e3d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012e43:	83 ec 0c             	sub    esp,0xc
c0012e46:	52                   	push   edx
c0012e47:	e8 23 ca ff ff       	call   c000f86f <Phys::freePage(unsigned long)>
c0012e4c:	83 c4 10             	add    esp,0x10
c0012e4f:	83 fb 04             	cmp    ebx,0x4
c0012e52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012e5c:	0f 85 76 ff ff ff    	jne    c0012dd8 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012e62:	83 e7 01             	and    edi,0x1
c0012e65:	75 46                	jne    c0012ead <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012e67:	c7 44 24 30 64 37 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023764
c0012e6f:	83 c4 1c             	add    esp,0x1c
c0012e72:	5b                   	pop    ebx
c0012e73:	5e                   	pop    esi
c0012e74:	5f                   	pop    edi
c0012e75:	5d                   	pop    ebp
c0012e76:	e9 63 c8 ff ff       	jmp    c000f6de <KePanic(char const*)>
c0012e7b:	83 e7 01             	and    edi,0x1
c0012e7e:	75 15                	jne    c0012e95 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012e80:	83 ec 0c             	sub    esp,0xc
c0012e83:	68 11 3d 02 c0       	push   0xc0023d11
c0012e88:	e8 51 c8 ff ff       	call   c000f6de <KePanic(char const*)>
c0012e8d:	83 c4 10             	add    esp,0x10
c0012e90:	e9 5e ff ff ff       	jmp    c0012df3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012e95:	83 ec 08             	sub    esp,0x8
c0012e98:	6a 00                	push   0x0
c0012e9a:	56                   	push   esi
c0012e9b:	e8 a0 fb ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012ea0:	83 c4 10             	add    esp,0x10
c0012ea3:	e9 4b ff ff ff       	jmp    c0012df3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012ea8:	83 e7 01             	and    edi,0x1
c0012eab:	75 16                	jne    c0012ec3 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012ead:	83 ec 08             	sub    esp,0x8
c0012eb0:	6a 00                	push   0x0
c0012eb2:	56                   	push   esi
c0012eb3:	e8 88 fb ff ff       	call   c0012a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012eb8:	83 c4 10             	add    esp,0x10
c0012ebb:	83 c4 1c             	add    esp,0x1c
c0012ebe:	5b                   	pop    ebx
c0012ebf:	5e                   	pop    esi
c0012ec0:	5f                   	pop    edi
c0012ec1:	5d                   	pop    ebp
c0012ec2:	c3                   	ret    
c0012ec3:	c7 44 24 30 2d 3d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023d2d
c0012ecb:	83 c4 1c             	add    esp,0x1c
c0012ece:	5b                   	pop    ebx
c0012ecf:	5e                   	pop    esi
c0012ed0:	5f                   	pop    edi
c0012ed1:	5d                   	pop    ebp
c0012ed2:	e9 07 c8 ff ff       	jmp    c000f6de <KePanic(char const*)>
c0012ed7:	90                   	nop

c0012ed8 <VAS::freeAllocatedPages(unsigned long)>:
c0012ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012edc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ee0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012ee4:	74 09                	je     c0012eef <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012ee6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eea:	e9 ac fe ff ff       	jmp    c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c0012eef:	c7 44 24 04 88 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023788
c0012ef7:	e9 52 40 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012efc <VAS::virtualToPhysical(unsigned long)>:
c0012efc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f00:	50                   	push   eax
c0012f01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f05:	52                   	push   edx
c0012f06:	e8 71 fe ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0012f0b:	59                   	pop    ecx
c0012f0c:	5a                   	pop    edx
c0012f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f0f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f14:	c3                   	ret    
c0012f15:	90                   	nop

c0012f16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0012f16:	55                   	push   ebp
c0012f17:	57                   	push   edi
c0012f18:	56                   	push   esi
c0012f19:	53                   	push   ebx
c0012f1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012f1e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012f22:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f26:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012f2a:	85 db                	test   ebx,ebx
c0012f2c:	7e 24                	jle    c0012f52 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0012f2e:	c1 e3 0c             	shl    ebx,0xc
c0012f31:	01 f3                	add    ebx,esi
c0012f33:	56                   	push   esi
c0012f34:	81 c6 00 10 00 00    	add    esi,0x1000
c0012f3a:	55                   	push   ebp
c0012f3b:	e8 3c fe ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0012f40:	5a                   	pop    edx
c0012f41:	59                   	pop    ecx
c0012f42:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012f48:	21 f9                	and    ecx,edi
c0012f4a:	09 d1                	or     ecx,edx
c0012f4c:	39 f3                	cmp    ebx,esi
c0012f4e:	89 08                	mov    DWORD PTR [eax],ecx
c0012f50:	75 e1                	jne    c0012f33 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012f52:	5b                   	pop    ebx
c0012f53:	5e                   	pop    esi
c0012f54:	5f                   	pop    edi
c0012f55:	5d                   	pop    ebp
c0012f56:	c3                   	ret    
c0012f57:	90                   	nop

c0012f58 <VAS::VAS()>:
c0012f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012f63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012f6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f72:	a3 50 d2 02 c0       	mov    ds:0xc002d250,eax
c0012f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f7b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f83:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f8a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012f91:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c0012f96:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0012f9b:	29 c2                	sub    edx,eax
c0012f9d:	89 d0                	mov    eax,edx
c0012f9f:	05 ff 0f 00 00       	add    eax,0xfff
c0012fa4:	c1 e8 0c             	shr    eax,0xc
c0012fa7:	89 c2                	mov    edx,eax
c0012fa9:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0012fae:	6a 04                	push   0x4
c0012fb0:	6a ff                	push   0xffffffff
c0012fb2:	52                   	push   edx
c0012fb3:	50                   	push   eax
c0012fb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fb8:	e8 59 ff ff ff       	call   c0012f16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012fbd:	83 c4 14             	add    esp,0x14
c0012fc0:	90                   	nop
c0012fc1:	c3                   	ret    

c0012fc2 <VAS::setToWriteCombining(unsigned long, int)>:
c0012fc2:	a1 e4 da 02 c0       	mov    eax,ds:0xc002dae4
c0012fc7:	50                   	push   eax
c0012fc8:	6a ff                	push   0xffffffff
c0012fca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fce:	52                   	push   edx
c0012fcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012fd3:	51                   	push   ecx
c0012fd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fd8:	50                   	push   eax
c0012fd9:	e8 38 ff ff ff       	call   c0012f16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012fde:	83 c4 14             	add    esp,0x14
c0012fe1:	c3                   	ret    

c0012fe2 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012fe6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012fe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fed:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012ff0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012ff5:	83 f8 01             	cmp    eax,0x1
c0012ff8:	19 c0                	sbb    eax,eax
c0012ffa:	83 ca 03             	or     edx,0x3
c0012ffd:	83 e0 fc             	and    eax,0xfffffffc
c0013000:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013007:	0f 20 d8             	mov    eax,cr3
c001300a:	0f 22 d8             	mov    cr3,eax
c001300d:	c3                   	ret    

c001300e <VAS::~VAS()>:
c001300e:	83 ec 2c             	sub    esp,0x2c
c0013011:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013019:	fa                   	cli    
c001301a:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001301f:	83 c0 01             	add    eax,0x1
c0013022:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0013027:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001302c:	8b 00                	mov    eax,DWORD PTR [eax]
c001302e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013031:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0013037:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001303b:	6a 01                	push   0x1
c001303d:	50                   	push   eax
c001303e:	e8 9f ff ff ff       	call   c0012fe2 <VAS::mapOtherVASIn(bool, VAS*)>
c0013043:	83 c4 0c             	add    esp,0xc
c0013046:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001304e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013056:	0f 8f d8 00 00 00    	jg     c0013134 <VAS::~VAS()+0x126>
c001305c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013060:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013063:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013067:	c1 e2 02             	shl    edx,0x2
c001306a:	01 d0                	add    eax,edx
c001306c:	8b 00                	mov    eax,DWORD PTR [eax]
c001306e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013076:	83 e0 01             	and    eax,0x1
c0013079:	0f 84 ab 00 00 00    	je     c001312a <VAS::~VAS()+0x11c>
c001307f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013087:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001308f:	7f 74                	jg     c0013105 <VAS::~VAS()+0xf7>
c0013091:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013095:	c1 e0 0a             	shl    eax,0xa
c0013098:	89 c2                	mov    edx,eax
c001309a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001309e:	01 d0                	add    eax,edx
c00130a0:	c1 e0 0c             	shl    eax,0xc
c00130a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00130a7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00130ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00130ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130b1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00130b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00130bb:	6a 01                	push   0x1
c00130bd:	50                   	push   eax
c00130be:	e8 8b fc ff ff       	call   c0012d4e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00130c3:	83 c4 0c             	add    esp,0xc
c00130c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00130ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00130d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00130d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130d8:	25 01 04 00 00       	and    eax,0x401
c00130dd:	3d 01 04 00 00       	cmp    eax,0x401
c00130e2:	75 1a                	jne    c00130fe <VAS::~VAS()+0xf0>
c00130e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130ed:	83 ec 0c             	sub    esp,0xc
c00130f0:	50                   	push   eax
c00130f1:	e8 79 c7 ff ff       	call   c000f86f <Phys::freePage(unsigned long)>
c00130f6:	83 c4 10             	add    esp,0x10
c00130f9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00130fe:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013103:	eb 82                	jmp    c0013087 <VAS::~VAS()+0x79>
c0013105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013109:	25 00 04 00 00       	and    eax,0x400
c001310e:	74 1a                	je     c001312a <VAS::~VAS()+0x11c>
c0013110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013114:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013119:	83 ec 0c             	sub    esp,0xc
c001311c:	50                   	push   eax
c001311d:	e8 4d c7 ff ff       	call   c000f86f <Phys::freePage(unsigned long)>
c0013122:	83 c4 10             	add    esp,0x10
c0013125:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001312a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001312f:	e9 1a ff ff ff       	jmp    c001304e <VAS::~VAS()+0x40>
c0013134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013138:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001313b:	83 ec 0c             	sub    esp,0xc
c001313e:	50                   	push   eax
c001313f:	e8 57 fc ff ff       	call   c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001314b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001314e:	83 ec 0c             	sub    esp,0xc
c0013151:	50                   	push   eax
c0013152:	e8 18 c7 ff ff       	call   c000f86f <Phys::freePage(unsigned long)>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001315f:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0013167:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001316c:	85 c0                	test   eax,eax
c001316e:	75 01                	jne    c0013171 <VAS::~VAS()+0x163>
c0013170:	fb                   	sti    
c0013171:	90                   	nop
c0013172:	83 c4 2c             	add    esp,0x2c
c0013175:	c3                   	ret    

c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013176:	55                   	push   ebp
c0013177:	57                   	push   edi
c0013178:	56                   	push   esi
c0013179:	53                   	push   ebx
c001317a:	83 ec 1c             	sub    esp,0x1c
c001317d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013181:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013185:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013189:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001318f:	77 08                	ja     c0013199 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0013191:	0f 20 d8             	mov    eax,cr3
c0013194:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0013197:	75 43                	jne    c00131dc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0013199:	89 d8                	mov    eax,ebx
c001319b:	09 f8                	or     eax,edi
c001319d:	a9 ff 0f 00 00       	test   eax,0xfff
c00131a2:	75 53                	jne    c00131f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00131a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00131a7:	89 de                	mov    esi,ebx
c00131a9:	c1 ee 16             	shr    esi,0x16
c00131ac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00131b3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00131b7:	74 50                	je     c0013209 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00131b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131bd:	c1 eb 0a             	shr    ebx,0xa
c00131c0:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00131c6:	c1 e6 0c             	shl    esi,0xc
c00131c9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00131cf:	09 c7                	or     edi,eax
c00131d1:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c00131d4:	83 c4 1c             	add    esp,0x1c
c00131d7:	5b                   	pop    ebx
c00131d8:	5e                   	pop    esi
c00131d9:	5f                   	pop    edi
c00131da:	5d                   	pop    ebp
c00131db:	c3                   	ret    
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	68 ac 37 02 c0       	push   0xc00237ac
c00131e4:	e8 65 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00131e9:	89 d8                	mov    eax,ebx
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	09 f8                	or     eax,edi
c00131f0:	a9 ff 0f 00 00       	test   eax,0xfff
c00131f5:	74 ad                	je     c00131a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00131f7:	83 ec 0c             	sub    esp,0xc
c00131fa:	68 14 38 02 c0       	push   0xc0023814
c00131ff:	e8 da c4 ff ff       	call   c000f6de <KePanic(char const*)>
c0013204:	83 c4 10             	add    esp,0x10
c0013207:	eb 9b                	jmp    c00131a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013209:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001320d:	e8 c6 c6 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0013212:	8b 0d 50 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d250
c0013218:	83 ec 0c             	sub    esp,0xc
c001321b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001321f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013223:	6a 01                	push   0x1
c0013225:	e8 73 f8 ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c001322a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013231:	6a 01                	push   0x1
c0013233:	50                   	push   eax
c0013234:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013238:	52                   	push   edx
c0013239:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001323d:	51                   	push   ecx
c001323e:	e8 2d 01 00 00       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013243:	83 c4 1c             	add    esp,0x1c
c0013246:	68 00 10 00 00       	push   0x1000
c001324b:	6a 00                	push   0x0
c001324d:	50                   	push   eax
c001324e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013252:	e8 99 d2 fe ff       	call   c00004f0 <memset>
c0013257:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001325b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001325e:	e8 38 fb ff ff       	call   c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c0013263:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013267:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001326b:	83 c4 10             	add    esp,0x10
c001326e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013271:	0d 07 04 00 00       	or     eax,0x407
c0013276:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013279:	e9 3b ff ff ff       	jmp    c00131b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c001327e <VAS::allocatePages(int, int)>:
c001327e:	55                   	push   ebp
c001327f:	57                   	push   edi
c0013280:	56                   	push   esi
c0013281:	53                   	push   ebx
c0013282:	83 ec 1c             	sub    esp,0x1c
c0013285:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013289:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001328d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013291:	75 75                	jne    c0013308 <VAS::allocatePages(int, int)+0x8a>
c0013293:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013296:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001329a:	85 c0                	test   eax,eax
c001329c:	74 49                	je     c00132e7 <VAS::allocatePages(int, int)+0x69>
c001329e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00132a2:	89 d5                	mov    ebp,edx
c00132a4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00132a8:	c1 e5 0c             	shl    ebp,0xc
c00132ab:	01 dd                	add    ebp,ebx
c00132ad:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00132b0:	81 cf 00 04 00 00    	or     edi,0x400
c00132b6:	85 d2                	test   edx,edx
c00132b8:	7e 1b                	jle    c00132d5 <VAS::allocatePages(int, int)+0x57>
c00132ba:	e8 19 c6 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c00132bf:	57                   	push   edi
c00132c0:	53                   	push   ebx
c00132c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00132c7:	50                   	push   eax
c00132c8:	56                   	push   esi
c00132c9:	e8 a8 fe ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c00132ce:	83 c4 10             	add    esp,0x10
c00132d1:	39 dd                	cmp    ebp,ebx
c00132d3:	75 e5                	jne    c00132ba <VAS::allocatePages(int, int)+0x3c>
c00132d5:	0f 20 d8             	mov    eax,cr3
c00132d8:	0f 22 d8             	mov    cr3,eax
c00132db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132df:	83 c4 1c             	add    esp,0x1c
c00132e2:	5b                   	pop    ebx
c00132e3:	5e                   	pop    esi
c00132e4:	5f                   	pop    edi
c00132e5:	5d                   	pop    ebp
c00132e6:	c3                   	ret    
c00132e7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00132eb:	83 ec 0c             	sub    esp,0xc
c00132ee:	68 38 38 02 c0       	push   0xc0023838
c00132f3:	e8 e6 c3 ff ff       	call   c000f6de <KePanic(char const*)>
c00132f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00132fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132ff:	83 c4 10             	add    esp,0x10
c0013302:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013306:	eb 96                	jmp    c001329e <VAS::allocatePages(int, int)+0x20>
c0013308:	83 ec 0c             	sub    esp,0xc
c001330b:	52                   	push   edx
c001330c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013310:	e8 88 f7 ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c0013315:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013319:	83 c4 10             	add    esp,0x10
c001331c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013321:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013325:	77 38                	ja     c001335f <VAS::allocatePages(int, int)+0xe1>
c0013327:	85 d2                	test   edx,edx
c0013329:	7e aa                	jle    c00132d5 <VAS::allocatePages(int, int)+0x57>
c001332b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001332f:	c1 e2 0c             	shl    edx,0xc
c0013332:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013336:	81 cf 00 04 00 00    	or     edi,0x400
c001333c:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c001333f:	e8 94 c5 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0013344:	57                   	push   edi
c0013345:	53                   	push   ebx
c0013346:	81 c3 00 10 00 00    	add    ebx,0x1000
c001334c:	50                   	push   eax
c001334d:	56                   	push   esi
c001334e:	e8 23 fe ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013353:	83 c4 10             	add    esp,0x10
c0013356:	39 dd                	cmp    ebp,ebx
c0013358:	75 e5                	jne    c001333f <VAS::allocatePages(int, int)+0xc1>
c001335a:	e9 76 ff ff ff       	jmp    c00132d5 <VAS::allocatePages(int, int)+0x57>
c001335f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013363:	a1 e8 da 02 c0       	mov    eax,ds:0xc002dae8
c0013368:	09 c1                	or     ecx,eax
c001336a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001336e:	eb b7                	jmp    c0013327 <VAS::allocatePages(int, int)+0xa9>

c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013370:	55                   	push   ebp
c0013371:	57                   	push   edi
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	83 ec 1c             	sub    esp,0x1c
c0013377:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001337b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001337f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013383:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013387:	85 db                	test   ebx,ebx
c0013389:	7e 2c                	jle    c00133b7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c001338b:	c1 e3 0c             	shl    ebx,0xc
c001338e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013391:	89 f3                	mov    ebx,esi
c0013393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013397:	55                   	push   ebp
c0013398:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001339c:	29 f2                	sub    edx,esi
c001339e:	01 da                	add    edx,ebx
c00133a0:	52                   	push   edx
c00133a1:	53                   	push   ebx
c00133a2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00133a8:	57                   	push   edi
c00133a9:	e8 c8 fd ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c00133b5:	75 e0                	jne    c0013397 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c00133b7:	0f 20 d8             	mov    eax,cr3
c00133ba:	0f 22 d8             	mov    cr3,eax
c00133bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00133c1:	83 c4 1c             	add    esp,0x1c
c00133c4:	5b                   	pop    ebx
c00133c5:	5e                   	pop    esi
c00133c6:	5f                   	pop    edi
c00133c7:	5d                   	pop    ebp
c00133c8:	c3                   	ret    
c00133c9:	90                   	nop

c00133ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00133ca:	55                   	push   ebp
c00133cb:	57                   	push   edi
c00133cc:	56                   	push   esi
c00133cd:	53                   	push   ebx
c00133ce:	83 ec 1c             	sub    esp,0x1c
c00133d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00133d9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00133dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00133e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00133e5:	09 d8                	or     eax,ebx
c00133e7:	a9 ff 0f 00 00       	test   eax,0xfff
c00133ec:	75 4b                	jne    c0013439 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00133ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00133f1:	89 de                	mov    esi,ebx
c00133f3:	c1 ee 16             	shr    esi,0x16
c00133f6:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c00133fd:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013401:	74 48                	je     c001344b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013403:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013408:	c1 eb 0a             	shr    ebx,0xa
c001340b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001340f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013413:	83 ff 01             	cmp    edi,0x1
c0013416:	19 c0                	sbb    eax,eax
c0013418:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001341e:	c1 e6 0c             	shl    esi,0xc
c0013421:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013426:	01 f3                	add    ebx,esi
c0013428:	09 ca                	or     edx,ecx
c001342a:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013431:	83 c4 1c             	add    esp,0x1c
c0013434:	5b                   	pop    ebx
c0013435:	5e                   	pop    esi
c0013436:	5f                   	pop    edi
c0013437:	5d                   	pop    ebp
c0013438:	c3                   	ret    
c0013439:	83 ec 0c             	sub    esp,0xc
c001343c:	68 64 38 02 c0       	push   0xc0023864
c0013441:	e8 98 c2 ff ff       	call   c000f6de <KePanic(char const*)>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	eb a3                	jmp    c00133ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c001344b:	e8 88 c4 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0013450:	8b 0d 50 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d250
c0013456:	83 ec 0c             	sub    esp,0xc
c0013459:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001345d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013461:	6a 01                	push   0x1
c0013463:	e8 35 f6 ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c0013468:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001346f:	6a 01                	push   0x1
c0013471:	50                   	push   eax
c0013472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013476:	50                   	push   eax
c0013477:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001347b:	51                   	push   ecx
c001347c:	e8 ef fe ff ff       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013481:	83 c4 1c             	add    esp,0x1c
c0013484:	68 00 10 00 00       	push   0x1000
c0013489:	6a 00                	push   0x0
c001348b:	50                   	push   eax
c001348c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013490:	e8 5b d0 fe ff       	call   c00004f0 <memset>
c0013495:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013499:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001349c:	e8 fa f8 ff ff       	call   c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c00134a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00134a5:	83 c4 10             	add    esp,0x10
c00134a8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00134ab:	81 ca 07 04 00 00    	or     edx,0x407
c00134b1:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c00134b4:	e9 4a ff ff ff       	jmp    c0013403 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c00134b9:	90                   	nop

c00134ba <VAS::VAS(bool)>:
c00134ba:	53                   	push   ebx
c00134bb:	83 ec 28             	sub    esp,0x28
c00134be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00134c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00134dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00134e4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00134e7:	e8 ec c3 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c00134ec:	89 c2                	mov    edx,eax
c00134ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134f2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00134f5:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c00134fb:	83 ec 0c             	sub    esp,0xc
c00134fe:	6a 01                	push   0x1
c0013500:	e8 98 f5 ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c0013505:	83 c4 10             	add    esp,0x10
c0013508:	89 c2                	mov    edx,eax
c001350a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001350e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013511:	83 ec 0c             	sub    esp,0xc
c0013514:	6a 03                	push   0x3
c0013516:	6a 01                	push   0x1
c0013518:	52                   	push   edx
c0013519:	50                   	push   eax
c001351a:	53                   	push   ebx
c001351b:	e8 50 fe ff ff       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013520:	83 c4 20             	add    esp,0x20
c0013523:	89 c2                	mov    edx,eax
c0013525:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013529:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001352c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013534:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001353c:	7f 1d                	jg     c001355b <VAS::VAS(bool)+0xa1>
c001353e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013542:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013545:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013549:	c1 e2 02             	shl    edx,0x2
c001354c:	01 d0                	add    eax,edx
c001354e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013554:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013559:	eb d9                	jmp    c0013534 <VAS::VAS(bool)+0x7a>
c001355b:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013563:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001356b:	7f 59                	jg     c00135c6 <VAS::VAS(bool)+0x10c>
c001356d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013571:	2d 00 02 00 00       	sub    eax,0x200
c0013576:	c1 e0 0c             	shl    eax,0xc
c0013579:	89 c2                	mov    edx,eax
c001357b:	a1 e8 da 02 c0       	mov    eax,ds:0xc002dae8
c0013580:	89 d1                	mov    ecx,edx
c0013582:	09 c1                	or     ecx,eax
c0013584:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013588:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001358b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001358f:	c1 e2 02             	shl    edx,0x2
c0013592:	01 d0                	add    eax,edx
c0013594:	83 c9 05             	or     ecx,0x5
c0013597:	89 ca                	mov    edx,ecx
c0013599:	89 10                	mov    DWORD PTR [eax],edx
c001359b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359f:	2d 40 03 00 00       	sub    eax,0x340
c00135a4:	83 f8 7f             	cmp    eax,0x7f
c00135a7:	77 16                	ja     c00135bf <VAS::VAS(bool)+0x105>
c00135a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00135b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135b4:	c1 e2 02             	shl    edx,0x2
c00135b7:	01 d0                	add    eax,edx
c00135b9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00135bf:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00135c4:	eb 9d                	jmp    c0013563 <VAS::VAS(bool)+0xa9>
c00135c6:	8b 15 e8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dae8
c00135cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00135d3:	05 20 0c 00 00       	add    eax,0xc20
c00135d8:	81 ca 03 40 00 00    	or     edx,0x4003
c00135de:	89 10                	mov    DWORD PTR [eax],edx
c00135e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135e4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00135e7:	a1 e8 da 02 c0       	mov    eax,ds:0xc002dae8
c00135ec:	09 c2                	or     edx,eax
c00135ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00135f5:	05 fc 0f 00 00       	add    eax,0xffc
c00135fa:	83 ca 03             	or     edx,0x3
c00135fd:	89 10                	mov    DWORD PTR [eax],edx
c00135ff:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0013604:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001360a:	83 ec 0c             	sub    esp,0xc
c001360d:	50                   	push   eax
c001360e:	e8 f9 5e ff ff       	call   c000950c <Device::getName()>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	83 ec 08             	sub    esp,0x8
c0013619:	68 47 3d 02 c0       	push   0xc0023d47
c001361e:	50                   	push   eax
c001361f:	e8 5c d1 fe ff       	call   c0000780 <strcmp>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	85 c0                	test   eax,eax
c0013629:	0f 94 c0             	sete   al
c001362c:	0f b6 c0             	movzx  eax,al
c001362f:	85 c0                	test   eax,eax
c0013631:	74 68                	je     c001369b <VAS::VAS(bool)+0x1e1>
c0013633:	fa                   	cli    
c0013634:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0013639:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001363f:	05 68 09 00 00       	add    eax,0x968
c0013644:	83 ec 0c             	sub    esp,0xc
c0013647:	50                   	push   eax
c0013648:	e8 29 b1 ff ff       	call   c000e776 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013655:	89 c3                	mov    ebx,eax
c0013657:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c001365c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013662:	05 68 09 00 00       	add    eax,0x968
c0013667:	83 ec 0c             	sub    esp,0xc
c001366a:	50                   	push   eax
c001366b:	e8 06 b1 ff ff       	call   c000e776 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	83 ec 08             	sub    esp,0x8
c0013676:	50                   	push   eax
c0013677:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001367b:	e8 fc f6 ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0013680:	83 c4 10             	add    esp,0x10
c0013683:	8b 00                	mov    eax,DWORD PTR [eax]
c0013685:	25 00 f0 ff ff       	and    eax,0xfffff000
c001368a:	6a 11                	push   0x11
c001368c:	53                   	push   ebx
c001368d:	50                   	push   eax
c001368e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013692:	e8 df fa ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013697:	83 c4 10             	add    esp,0x10
c001369a:	fb                   	sti    
c001369b:	90                   	nop
c001369c:	83 c4 28             	add    esp,0x28
c001369f:	5b                   	pop    ebx
c00136a0:	c3                   	ret    
c00136a1:	90                   	nop

c00136a2 <VAS::evict(unsigned long)>:
c00136a2:	55                   	push   ebp
c00136a3:	57                   	push   edi
c00136a4:	56                   	push   esi
c00136a5:	53                   	push   ebx
c00136a6:	83 ec 24             	sub    esp,0x24
c00136a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00136ad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00136b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136b5:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00136ba:	50                   	push   eax
c00136bb:	68 55 3d 02 c0       	push   0xc0023d55
c00136c0:	e8 89 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00136c5:	e8 28 f5 ff ff       	call   c0012bf2 <Virt::allocateSwapfilePage()>
c00136ca:	83 c4 10             	add    esp,0x10
c00136cd:	89 c7                	mov    edi,eax
c00136cf:	a1 cc 59 02 c0       	mov    eax,ds:0xc00259cc
c00136d4:	85 c0                	test   eax,eax
c00136d6:	7e 40                	jle    c0013718 <VAS::evict(unsigned long)+0x76>
c00136d8:	89 ee                	mov    esi,ebp
c00136da:	31 db                	xor    ebx,ebx
c00136dc:	83 ec 0c             	sub    esp,0xc
c00136df:	57                   	push   edi
c00136e0:	e8 f7 f4 ff ff       	call   c0012bdc <Virt::swapIDToSector(unsigned long)>
c00136e5:	31 d2                	xor    edx,edx
c00136e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00136ea:	81 c6 00 02 00 00    	add    esi,0x200
c00136f0:	6a 01                	push   0x1
c00136f2:	52                   	push   edx
c00136f3:	01 d8                	add    eax,ebx
c00136f5:	83 c3 01             	add    ebx,0x1
c00136f8:	50                   	push   eax
c00136f9:	0f be 05 d8 59 02 c0 	movsx  eax,BYTE PTR ds:0xc00259d8
c0013700:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c0013707:	50                   	push   eax
c0013708:	e8 63 6c ff ff       	call   c000a370 <LogicalDisk::write(unsigned long long, int, void*)>
c001370d:	83 c4 20             	add    esp,0x20
c0013710:	39 1d cc 59 02 c0    	cmp    DWORD PTR ds:0xc00259cc,ebx
c0013716:	7f c4                	jg     c00136dc <VAS::evict(unsigned long)+0x3a>
c0013718:	c1 e7 0c             	shl    edi,0xc
c001371b:	83 ec 08             	sub    esp,0x8
c001371e:	55                   	push   ebp
c001371f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013723:	50                   	push   eax
c0013724:	e8 53 f6 ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0013729:	8b 10                	mov    edx,DWORD PTR [eax]
c001372b:	89 d3                	mov    ebx,edx
c001372d:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013733:	09 d7                	or     edi,edx
c0013735:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001373b:	89 38                	mov    DWORD PTR [eax],edi
c001373d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013740:	8b 15 48 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d248
c0013746:	83 c2 01             	add    edx,0x1
c0013749:	89 15 48 d2 02 c0    	mov    DWORD PTR ds:0xc002d248,edx
c001374f:	e8 1b c1 ff ff       	call   c000f86f <Phys::freePage(unsigned long)>
c0013754:	0f 20 d8             	mov    eax,cr3
c0013757:	0f 22 d8             	mov    cr3,eax
c001375a:	8b 0d 48 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d248
c0013760:	51                   	push   ecx
c0013761:	55                   	push   ebp
c0013762:	53                   	push   ebx
c0013763:	68 88 38 02 c0       	push   0xc0023888
c0013768:	e8 e1 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001376d:	a1 44 d2 02 c0       	mov    eax,ds:0xc002d244
c0013772:	83 c4 18             	add    esp,0x18
c0013775:	50                   	push   eax
c0013776:	68 6a 3d 02 c0       	push   0xc0023d6a
c001377b:	8d 50 01             	lea    edx,[eax+0x1]
c001377e:	89 15 44 d2 02 c0    	mov    DWORD PTR ds:0xc002d244,edx
c0013784:	e8 c5 37 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013789:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001378e:	c7 44 24 40 7c 3d 02 c0 	mov    DWORD PTR [esp+0x40],0xc0023d7c
c0013796:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001379a:	83 c4 2c             	add    esp,0x2c
c001379d:	5b                   	pop    ebx
c001379e:	5e                   	pop    esi
c001379f:	5f                   	pop    edi
c00137a0:	5d                   	pop    ebp
c00137a1:	e9 a8 37 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00137a6 <VAS::canLockPage(unsigned long)>:
c00137a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137aa:	50                   	push   eax
c00137ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137af:	52                   	push   edx
c00137b0:	e8 c7 f5 ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c00137b5:	59                   	pop    ecx
c00137b6:	5a                   	pop    edx
c00137b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00137b9:	c1 e8 0b             	shr    eax,0xb
c00137bc:	83 e0 01             	and    eax,0x1
c00137bf:	c3                   	ret    

c00137c0 <VAS::unlockPage(unsigned long)>:
c00137c0:	83 ec 0c             	sub    esp,0xc
c00137c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c7:	50                   	push   eax
c00137c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00137cc:	52                   	push   edx
c00137cd:	e8 aa f5 ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c00137d2:	59                   	pop    ecx
c00137d3:	5a                   	pop    edx
c00137d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00137d6:	f6 c6 08             	test   dh,0x8
c00137d9:	75 09                	jne    c00137e4 <VAS::unlockPage(unsigned long)+0x24>
c00137db:	80 ce 08             	or     dh,0x8
c00137de:	89 10                	mov    DWORD PTR [eax],edx
c00137e0:	83 c4 0c             	add    esp,0xc
c00137e3:	c3                   	ret    
c00137e4:	c7 44 24 10 bc 38 02 c0 	mov    DWORD PTR [esp+0x10],0xc00238bc
c00137ec:	83 c4 0c             	add    esp,0xc
c00137ef:	e9 ea be ff ff       	jmp    c000f6de <KePanic(char const*)>

c00137f4 <VAS::canLockPages(unsigned long, int)>:
c00137f4:	55                   	push   ebp
c00137f5:	57                   	push   edi
c00137f6:	56                   	push   esi
c00137f7:	53                   	push   ebx
c00137f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00137fc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013800:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013804:	85 ff                	test   edi,edi
c0013806:	7e 23                	jle    c001382b <VAS::canLockPages(unsigned long, int)+0x37>
c0013808:	31 f6                	xor    esi,esi
c001380a:	eb 0d                	jmp    c0013819 <VAS::canLockPages(unsigned long, int)+0x25>
c001380c:	83 c6 01             	add    esi,0x1
c001380f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013815:	39 f7                	cmp    edi,esi
c0013817:	74 0d                	je     c0013826 <VAS::canLockPages(unsigned long, int)+0x32>
c0013819:	53                   	push   ebx
c001381a:	55                   	push   ebp
c001381b:	e8 86 ff ff ff       	call   c00137a6 <VAS::canLockPage(unsigned long)>
c0013820:	5a                   	pop    edx
c0013821:	59                   	pop    ecx
c0013822:	84 c0                	test   al,al
c0013824:	75 e6                	jne    c001380c <VAS::canLockPages(unsigned long, int)+0x18>
c0013826:	5b                   	pop    ebx
c0013827:	5e                   	pop    esi
c0013828:	5f                   	pop    edi
c0013829:	5d                   	pop    ebp
c001382a:	c3                   	ret    
c001382b:	b0 01                	mov    al,0x1
c001382d:	eb f7                	jmp    c0013826 <VAS::canLockPages(unsigned long, int)+0x32>
c001382f:	90                   	nop

c0013830 <VAS::unlockPages(unsigned long, int)>:
c0013830:	55                   	push   ebp
c0013831:	57                   	push   edi
c0013832:	56                   	push   esi
c0013833:	53                   	push   ebx
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001383b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001383f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013843:	85 ff                	test   edi,edi
c0013845:	7e 1c                	jle    c0013863 <VAS::unlockPages(unsigned long, int)+0x33>
c0013847:	31 f6                	xor    esi,esi
c0013849:	83 ec 08             	sub    esp,0x8
c001384c:	83 c6 01             	add    esi,0x1
c001384f:	53                   	push   ebx
c0013850:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013856:	55                   	push   ebp
c0013857:	e8 64 ff ff ff       	call   c00137c0 <VAS::unlockPage(unsigned long)>
c001385c:	83 c4 10             	add    esp,0x10
c001385f:	39 f7                	cmp    edi,esi
c0013861:	75 e6                	jne    c0013849 <VAS::unlockPages(unsigned long, int)+0x19>
c0013863:	83 c4 0c             	add    esp,0xc
c0013866:	5b                   	pop    ebx
c0013867:	5e                   	pop    esi
c0013868:	5f                   	pop    edi
c0013869:	5d                   	pop    ebp
c001386a:	c3                   	ret    
c001386b:	90                   	nop

c001386c <VAS::tryLoadBackOffDisk(unsigned long)>:
c001386c:	55                   	push   ebp
c001386d:	57                   	push   edi
c001386e:	56                   	push   esi
c001386f:	53                   	push   ebx
c0013870:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0013876:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c001387d:	89 f3                	mov    ebx,esi
c001387f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013885:	53                   	push   ebx
c0013886:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c001388d:	50                   	push   eax
c001388e:	e8 e9 f4 ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0013893:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0013899:	5a                   	pop    edx
c001389a:	59                   	pop    ecx
c001389b:	89 c5                	mov    ebp,eax
c001389d:	0f 87 cb 00 00 00    	ja     c001396e <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c00138a3:	83 ec 08             	sub    esp,0x8
c00138a6:	56                   	push   esi
c00138a7:	68 ec 38 02 c0       	push   0xc00238ec
c00138ac:	e8 9d 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00138b1:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c00138b6:	5e                   	pop    esi
c00138b7:	5f                   	pop    edi
c00138b8:	50                   	push   eax
c00138b9:	68 1c 39 02 c0       	push   0xc002391c
c00138be:	e8 8b 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00138c3:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c00138c9:	58                   	pop    eax
c00138ca:	5a                   	pop    edx
c00138cb:	51                   	push   ecx
c00138cc:	68 40 39 02 c0       	push   0xc0023940
c00138d1:	e8 78 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00138d6:	83 c4 10             	add    esp,0x10
c00138d9:	85 db                	test   ebx,ebx
c00138db:	74 5b                	je     c0013938 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c00138dd:	85 ed                	test   ebp,ebp
c00138df:	74 21                	je     c0013902 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c00138e1:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c00138e4:	f7 c6 00 02 00 00    	test   esi,0x200
c00138ea:	0f 85 c5 00 00 00    	jne    c00139b5 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00138f0:	89 f0                	mov    eax,esi
c00138f2:	25 01 04 00 00       	and    eax,0x401
c00138f7:	3d 00 04 00 00       	cmp    eax,0x400
c00138fc:	0f 84 39 01 00 00    	je     c0013a3b <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0013902:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c0013907:	83 ec 08             	sub    esp,0x8
c001390a:	50                   	push   eax
c001390b:	68 34 3b 02 c0       	push   0xc0023b34
c0013910:	e8 39 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013915:	8b 1d 30 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da30
c001391b:	5a                   	pop    edx
c001391c:	59                   	pop    ecx
c001391d:	53                   	push   ebx
c001391e:	68 58 3b 02 c0       	push   0xc0023b58
c0013923:	e8 26 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	31 c0                	xor    eax,eax
c001392d:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013933:	5b                   	pop    ebx
c0013934:	5e                   	pop    esi
c0013935:	5f                   	pop    edi
c0013936:	5d                   	pop    ebp
c0013937:	c3                   	ret    
c0013938:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c001393d:	83 ec 08             	sub    esp,0x8
c0013940:	50                   	push   eax
c0013941:	68 64 39 02 c0       	push   0xc0023964
c0013946:	e8 03 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001394b:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0013951:	58                   	pop    eax
c0013952:	5a                   	pop    edx
c0013953:	51                   	push   ecx
c0013954:	68 88 39 02 c0       	push   0xc0023988
c0013959:	e8 f0 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	31 c0                	xor    eax,eax
c0013963:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013969:	5b                   	pop    ebx
c001396a:	5e                   	pop    esi
c001396b:	5f                   	pop    edi
c001396c:	5d                   	pop    ebp
c001396d:	c3                   	ret    
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	68 91 3d 02 c0       	push   0xc0023d91
c0013976:	e8 63 bd ff ff       	call   c000f6de <KePanic(char const*)>
c001397b:	5f                   	pop    edi
c001397c:	58                   	pop    eax
c001397d:	56                   	push   esi
c001397e:	68 ec 38 02 c0       	push   0xc00238ec
c0013983:	e8 c6 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013988:	8b 0d 0c da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da0c
c001398e:	58                   	pop    eax
c001398f:	5a                   	pop    edx
c0013990:	51                   	push   ecx
c0013991:	68 1c 39 02 c0       	push   0xc002391c
c0013996:	e8 b3 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001399b:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00139a0:	5e                   	pop    esi
c00139a1:	5f                   	pop    edi
c00139a2:	50                   	push   eax
c00139a3:	68 40 39 02 c0       	push   0xc0023940
c00139a8:	e8 a1 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	e9 28 ff ff ff       	jmp    c00138dd <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00139b5:	83 ec 0c             	sub    esp,0xc
c00139b8:	68 ac 39 02 c0       	push   0xc00239ac
c00139bd:	e8 8c 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00139c2:	e8 11 bf ff ff       	call   c000f8d8 <Phys::allocatePage()>
c00139c7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00139ca:	83 ca 01             	or     edx,0x1
c00139cd:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00139d0:	0f 20 da             	mov    edx,cr3
c00139d3:	0f 22 da             	mov    cr3,edx
c00139d6:	ba 00 10 00 00       	mov    edx,0x1000
c00139db:	89 de                	mov    esi,ebx
c00139dd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00139e1:	89 d1                	mov    ecx,edx
c00139e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139e5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00139e8:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00139ee:	09 c8                	or     eax,ecx
c00139f0:	83 c8 02             	or     eax,0x2
c00139f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00139f6:	0f 20 d8             	mov    eax,cr3
c00139f9:	0f 22 d8             	mov    cr3,eax
c00139fc:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a00:	89 df                	mov    edi,ebx
c0013a02:	89 d1                	mov    ecx,edx
c0013a04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a06:	59                   	pop    ecx
c0013a07:	8b 35 0c da 02 c0    	mov    esi,DWORD PTR ds:0xc002da0c
c0013a0d:	5b                   	pop    ebx
c0013a0e:	56                   	push   esi
c0013a0f:	68 cc 39 02 c0       	push   0xc00239cc
c0013a14:	e8 35 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013a19:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013a1e:	5f                   	pop    edi
c0013a1f:	5d                   	pop    ebp
c0013a20:	50                   	push   eax
c0013a21:	68 f0 39 02 c0       	push   0xc00239f0
c0013a26:	e8 23 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013a2b:	83 c4 10             	add    esp,0x10
c0013a2e:	b0 01                	mov    al,0x1
c0013a30:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013a36:	5b                   	pop    ebx
c0013a37:	5e                   	pop    esi
c0013a38:	5f                   	pop    edi
c0013a39:	5d                   	pop    ebp
c0013a3a:	c3                   	ret    
c0013a3b:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013a40:	c1 ee 0c             	shr    esi,0xc
c0013a43:	83 ec 08             	sub    esp,0x8
c0013a46:	50                   	push   eax
c0013a47:	68 14 3a 02 c0       	push   0xc0023a14
c0013a4c:	e8 fd 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013a51:	e8 82 be ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0013a56:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0013a5c:	89 c7                	mov    edi,eax
c0013a5e:	58                   	pop    eax
c0013a5f:	5a                   	pop    edx
c0013a60:	51                   	push   ecx
c0013a61:	68 38 3a 02 c0       	push   0xc0023a38
c0013a66:	e8 e3 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013a6b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013a6e:	83 c4 10             	add    esp,0x10
c0013a71:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0013a77:	09 fa                	or     edx,edi
c0013a79:	31 ff                	xor    edi,edi
c0013a7b:	81 ca 01 08 00 00    	or     edx,0x801
c0013a81:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013a84:	89 dd                	mov    ebp,ebx
c0013a86:	a1 cc 59 02 c0       	mov    eax,ds:0xc00259cc
c0013a8b:	85 c0                	test   eax,eax
c0013a8d:	7e 61                	jle    c0013af0 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c0013a8f:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013a94:	83 ec 08             	sub    esp,0x8
c0013a97:	50                   	push   eax
c0013a98:	68 ec 3a 02 c0       	push   0xc0023aec
c0013a9d:	e8 ac 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013aa2:	89 34 24             	mov    DWORD PTR [esp],esi
c0013aa5:	e8 32 f1 ff ff       	call   c0012bdc <Virt::swapIDToSector(unsigned long)>
c0013aaa:	31 d2                	xor    edx,edx
c0013aac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013aaf:	81 c5 00 02 00 00    	add    ebp,0x200
c0013ab5:	6a 01                	push   0x1
c0013ab7:	52                   	push   edx
c0013ab8:	01 f8                	add    eax,edi
c0013aba:	83 c7 01             	add    edi,0x1
c0013abd:	50                   	push   eax
c0013abe:	0f be 05 d8 59 02 c0 	movsx  eax,BYTE PTR ds:0xc00259d8
c0013ac5:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c0013acc:	50                   	push   eax
c0013acd:	e8 32 68 ff ff       	call   c000a304 <LogicalDisk::read(unsigned long long, int, void*)>
c0013ad2:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013ad7:	83 c4 18             	add    esp,0x18
c0013ada:	50                   	push   eax
c0013adb:	68 10 3b 02 c0       	push   0xc0023b10
c0013ae0:	e8 69 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013ae5:	83 c4 10             	add    esp,0x10
c0013ae8:	39 3d cc 59 02 c0    	cmp    DWORD PTR ds:0xc00259cc,edi
c0013aee:	7f 9f                	jg     c0013a8f <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c0013af0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013af5:	83 ec 08             	sub    esp,0x8
c0013af8:	50                   	push   eax
c0013af9:	68 5c 3a 02 c0       	push   0xc0023a5c
c0013afe:	e8 4b 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013b03:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c0013b08:	83 c4 0c             	add    esp,0xc
c0013b0b:	83 e8 01             	sub    eax,0x1
c0013b0e:	50                   	push   eax
c0013b0f:	53                   	push   ebx
c0013b10:	68 a3 3d 02 c0       	push   0xc0023da3
c0013b15:	a3 48 d2 02 c0       	mov    ds:0xc002d248,eax
c0013b1a:	e8 2f 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013b1f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b22:	e8 92 f0 ff ff       	call   c0012bb9 <Virt::freeSwapfilePage(unsigned long)>
c0013b27:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0013b2d:	58                   	pop    eax
c0013b2e:	5a                   	pop    edx
c0013b2f:	51                   	push   ecx
c0013b30:	68 80 3a 02 c0       	push   0xc0023a80
c0013b35:	e8 14 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013b3a:	0f 20 d8             	mov    eax,cr3
c0013b3d:	0f 22 d8             	mov    cr3,eax
c0013b40:	c7 04 24 b8 3d 02 c0 	mov    DWORD PTR [esp],0xc0023db8
c0013b47:	e8 02 34 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013b4c:	8b 3d 0c da 02 c0    	mov    edi,DWORD PTR ds:0xc002da0c
c0013b52:	5b                   	pop    ebx
c0013b53:	5e                   	pop    esi
c0013b54:	57                   	push   edi
c0013b55:	68 a4 3a 02 c0       	push   0xc0023aa4
c0013b5a:	e8 ef 33 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013b5f:	5d                   	pop    ebp
c0013b60:	58                   	pop    eax
c0013b61:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013b66:	50                   	push   eax
c0013b67:	68 c8 3a 02 c0       	push   0xc0023ac8
c0013b6c:	e8 dd 33 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013b71:	83 c4 10             	add    esp,0x10
c0013b74:	b0 01                	mov    al,0x1
c0013b76:	e9 b2 fd ff ff       	jmp    c001392d <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c0013b7b:	90                   	nop

c0013b7c <VAS::lockPage(unsigned long)>:
c0013b7c:	56                   	push   esi
c0013b7d:	53                   	push   ebx
c0013b7e:	83 ec 04             	sub    esp,0x4
c0013b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b89:	50                   	push   eax
c0013b8a:	56                   	push   esi
c0013b8b:	e8 ec f1 ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0013b90:	5a                   	pop    edx
c0013b91:	59                   	pop    ecx
c0013b92:	89 c3                	mov    ebx,eax
c0013b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b96:	a8 01                	test   al,0x1
c0013b98:	74 10                	je     c0013baa <VAS::lockPage(unsigned long)+0x2e>
c0013b9a:	f6 c4 08             	test   ah,0x8
c0013b9d:	74 28                	je     c0013bc7 <VAS::lockPage(unsigned long)+0x4b>
c0013b9f:	80 e4 f7             	and    ah,0xf7
c0013ba2:	89 03                	mov    DWORD PTR [ebx],eax
c0013ba4:	83 c4 04             	add    esp,0x4
c0013ba7:	5b                   	pop    ebx
c0013ba8:	5e                   	pop    esi
c0013ba9:	c3                   	ret    
c0013baa:	83 ec 08             	sub    esp,0x8
c0013bad:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013bb2:	50                   	push   eax
c0013bb3:	56                   	push   esi
c0013bb4:	e8 b3 fc ff ff       	call   c001386c <VAS::tryLoadBackOffDisk(unsigned long)>
c0013bb9:	83 c4 10             	add    esp,0x10
c0013bbc:	84 c0                	test   al,al
c0013bbe:	74 19                	je     c0013bd9 <VAS::lockPage(unsigned long)+0x5d>
c0013bc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bc2:	f6 c4 08             	test   ah,0x8
c0013bc5:	75 d8                	jne    c0013b9f <VAS::lockPage(unsigned long)+0x23>
c0013bc7:	c7 44 24 10 bc 38 02 c0 	mov    DWORD PTR [esp+0x10],0xc00238bc
c0013bcf:	83 c4 04             	add    esp,0x4
c0013bd2:	5b                   	pop    ebx
c0013bd3:	5e                   	pop    esi
c0013bd4:	e9 05 bb ff ff       	jmp    c000f6de <KePanic(char const*)>
c0013bd9:	83 ec 0c             	sub    esp,0xc
c0013bdc:	68 7c 3b 02 c0       	push   0xc0023b7c
c0013be1:	e8 f8 ba ff ff       	call   c000f6de <KePanic(char const*)>
c0013be6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be8:	83 c4 10             	add    esp,0x10
c0013beb:	eb ad                	jmp    c0013b9a <VAS::lockPage(unsigned long)+0x1e>
c0013bed:	90                   	nop

c0013bee <VAS::lockPages(unsigned long, int)>:
c0013bee:	55                   	push   ebp
c0013bef:	57                   	push   edi
c0013bf0:	56                   	push   esi
c0013bf1:	53                   	push   ebx
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013bf9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013bfd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013c01:	85 ff                	test   edi,edi
c0013c03:	7e 1c                	jle    c0013c21 <VAS::lockPages(unsigned long, int)+0x33>
c0013c05:	31 f6                	xor    esi,esi
c0013c07:	83 ec 08             	sub    esp,0x8
c0013c0a:	83 c6 01             	add    esi,0x1
c0013c0d:	53                   	push   ebx
c0013c0e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013c14:	55                   	push   ebp
c0013c15:	e8 62 ff ff ff       	call   c0013b7c <VAS::lockPage(unsigned long)>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	39 f7                	cmp    edi,esi
c0013c1f:	75 e6                	jne    c0013c07 <VAS::lockPages(unsigned long, int)+0x19>
c0013c21:	83 c4 0c             	add    esp,0xc
c0013c24:	5b                   	pop    ebx
c0013c25:	5e                   	pop    esi
c0013c26:	5f                   	pop    edi
c0013c27:	5d                   	pop    ebp
c0013c28:	c3                   	ret    
c0013c29:	90                   	nop

c0013c2a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0013c2a:	55                   	push   ebp
c0013c2b:	57                   	push   edi
c0013c2c:	56                   	push   esi
c0013c2d:	53                   	push   ebx
c0013c2e:	83 ec 28             	sub    esp,0x28
c0013c31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013c35:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013c39:	50                   	push   eax
c0013c3a:	e8 5e ee ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c0013c3f:	83 c4 0c             	add    esp,0xc
c0013c42:	6a 07                	push   0x7
c0013c44:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013c48:	52                   	push   edx
c0013c49:	89 c5                	mov    ebp,eax
c0013c4b:	53                   	push   ebx
c0013c4c:	e8 2d f6 ff ff       	call   c001327e <VAS::allocatePages(int, int)>
c0013c51:	83 c4 10             	add    esp,0x10
c0013c54:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013c58:	89 c7                	mov    edi,eax
c0013c5a:	85 c9                	test   ecx,ecx
c0013c5c:	74 2f                	je     c0013c8d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013c5e:	31 f6                	xor    esi,esi
c0013c60:	e8 73 bc ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0013c65:	83 c6 01             	add    esi,0x1
c0013c68:	6a 03                	push   0x3
c0013c6a:	55                   	push   ebp
c0013c6b:	50                   	push   eax
c0013c6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c70:	53                   	push   ebx
c0013c71:	e8 00 f5 ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c76:	6a 07                	push   0x7
c0013c78:	57                   	push   edi
c0013c79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013c7d:	50                   	push   eax
c0013c7e:	53                   	push   ebx
c0013c7f:	e8 f2 f4 ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c84:	83 c4 20             	add    esp,0x20
c0013c87:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0013c8b:	75 d3                	jne    c0013c60 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013c8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013c91:	89 28                	mov    DWORD PTR [eax],ebp
c0013c93:	83 c4 1c             	add    esp,0x1c
c0013c96:	89 f8                	mov    eax,edi
c0013c98:	5b                   	pop    ebx
c0013c99:	5e                   	pop    esi
c0013c9a:	5f                   	pop    edi
c0013c9b:	5d                   	pop    ebp
c0013c9c:	c3                   	ret    
c0013c9d:	90                   	nop

c0013c9e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013c9e:	53                   	push   ebx
c0013c9f:	83 ec 14             	sub    esp,0x14
c0013ca2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013ca6:	68 ac 3b 02 c0       	push   0xc0023bac
c0013cab:	e8 9e 32 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013cb0:	c7 04 24 0c 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c0c
c0013cb7:	e8 92 32 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013cbc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013cc0:	83 c4 18             	add    esp,0x18
c0013cc3:	5b                   	pop    ebx
c0013cc4:	e9 d2 f0 ff ff       	jmp    c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c0013cc9:	90                   	nop

c0013cca <VAS::scanForEviction()>:
c0013cca:	57                   	push   edi
c0013ccb:	56                   	push   esi
c0013ccc:	31 f6                	xor    esi,esi
c0013cce:	53                   	push   ebx
c0013ccf:	83 ec 18             	sub    esp,0x18
c0013cd2:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013cd7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013cdb:	50                   	push   eax
c0013cdc:	68 88 3c 02 c0       	push   0xc0023c88
c0013ce1:	e8 68 32 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013ce6:	c7 04 24 bf 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dbf
c0013ced:	e8 5c 32 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013cf2:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013cf5:	83 c4 10             	add    esp,0x10
c0013cf8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013cfe:	75 0e                	jne    c0013d0e <VAS::scanForEviction()+0x44>
c0013d00:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013d03:	89 da                	mov    edx,ebx
c0013d05:	c1 ea 16             	shr    edx,0x16
c0013d08:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013d0c:	74 5b                	je     c0013d69 <VAS::scanForEviction()+0x9f>
c0013d0e:	83 ec 08             	sub    esp,0x8
c0013d11:	53                   	push   ebx
c0013d12:	57                   	push   edi
c0013d13:	e8 64 f0 ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c0013d18:	83 c4 10             	add    esp,0x10
c0013d1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d1d:	89 d1                	mov    ecx,edx
c0013d1f:	c1 e9 0c             	shr    ecx,0xc
c0013d22:	74 10                	je     c0013d34 <VAS::scanForEviction()+0x6a>
c0013d24:	89 d1                	mov    ecx,edx
c0013d26:	81 e1 01 08 00 00    	and    ecx,0x801
c0013d2c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0013d32:	74 40                	je     c0013d74 <VAS::scanForEviction()+0xaa>
c0013d34:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d3a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013d40:	76 2d                	jbe    c0013d6f <VAS::scanForEviction()+0xa5>
c0013d42:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0013d49:	83 c6 01             	add    esi,0x1
c0013d4c:	83 fe 03             	cmp    esi,0x3
c0013d4f:	74 32                	je     c0013d83 <VAS::scanForEviction()+0xb9>
c0013d51:	31 db                	xor    ebx,ebx
c0013d53:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013d59:	75 b3                	jne    c0013d0e <VAS::scanForEviction()+0x44>
c0013d5b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013d5e:	89 da                	mov    edx,ebx
c0013d60:	c1 ea 16             	shr    edx,0x16
c0013d63:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013d67:	75 a5                	jne    c0013d0e <VAS::scanForEviction()+0x44>
c0013d69:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013d6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013d72:	eb 84                	jmp    c0013cf8 <VAS::scanForEviction()+0x2e>
c0013d74:	f6 c2 20             	test   dl,0x20
c0013d77:	74 13                	je     c0013d8c <VAS::scanForEviction()+0xc2>
c0013d79:	83 e2 df             	and    edx,0xffffffdf
c0013d7c:	89 10                	mov    DWORD PTR [eax],edx
c0013d7e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013d81:	eb b1                	jmp    c0013d34 <VAS::scanForEviction()+0x6a>
c0013d83:	83 c4 10             	add    esp,0x10
c0013d86:	31 c0                	xor    eax,eax
c0013d88:	5b                   	pop    ebx
c0013d89:	5e                   	pop    esi
c0013d8a:	5f                   	pop    edi
c0013d8b:	c3                   	ret    
c0013d8c:	89 d0                	mov    eax,edx
c0013d8e:	83 ec 08             	sub    esp,0x8
c0013d91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d9a:	53                   	push   ebx
c0013d9b:	68 db 3d 02 c0       	push   0xc0023ddb
c0013da0:	e8 a9 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013da5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013da8:	58                   	pop    eax
c0013da9:	5a                   	pop    edx
c0013daa:	51                   	push   ecx
c0013dab:	57                   	push   edi
c0013dac:	e8 f1 f8 ff ff       	call   c00136a2 <VAS::evict(unsigned long)>
c0013db1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013db4:	5b                   	pop    ebx
c0013db5:	5e                   	pop    esi
c0013db6:	50                   	push   eax
c0013db7:	68 ef 3d 02 c0       	push   0xc0023def
c0013dbc:	e8 8d 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013dc1:	58                   	pop    eax
c0013dc2:	5a                   	pop    edx
c0013dc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dc7:	50                   	push   eax
c0013dc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013dcc:	68 02 3e 02 c0       	push   0xc0023e02
c0013dd1:	e8 78 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013dd6:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013dd9:	81 c1 00 10 00 00    	add    ecx,0x1000
c0013ddf:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013de2:	8b 3d 30 da 02 c0    	mov    edi,DWORD PTR ds:0xc002da30
c0013de8:	5b                   	pop    ebx
c0013de9:	5e                   	pop    esi
c0013dea:	57                   	push   edi
c0013deb:	68 a8 3c 02 c0       	push   0xc0023ca8
c0013df0:	e8 59 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013df5:	83 c4 10             	add    esp,0x10
c0013df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013dfc:	83 c4 10             	add    esp,0x10
c0013dff:	5b                   	pop    ebx
c0013e00:	5e                   	pop    esi
c0013e01:	5f                   	pop    edi
c0013e02:	c3                   	ret    

c0013e03 <mapVASFirstTime>:
c0013e03:	55                   	push   ebp
c0013e04:	57                   	push   edi
c0013e05:	56                   	push   esi
c0013e06:	53                   	push   ebx
c0013e07:	83 ec 0c             	sub    esp,0xc
c0013e0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e0f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0013e12:	83 fa 01             	cmp    edx,0x1
c0013e15:	0f 84 cb 00 00 00    	je     c0013ee6 <mapVASFirstTime+0xe3>
c0013e1b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013e1e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0013e23:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0013e28:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0013e2b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0013e31:	c1 e5 15             	shl    ebp,0x15
c0013e34:	29 eb                	sub    ebx,ebp
c0013e36:	29 ef                	sub    edi,ebp
c0013e38:	e8 9b ba ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0013e3d:	83 ec 0c             	sub    esp,0xc
c0013e40:	68 03 04 00 00       	push   0x403
c0013e45:	6a 01                	push   0x1
c0013e47:	53                   	push   ebx
c0013e48:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013e4e:	50                   	push   eax
c0013e4f:	56                   	push   esi
c0013e50:	e8 1b f5 ff ff       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013e55:	83 c4 20             	add    esp,0x20
c0013e58:	39 fb                	cmp    ebx,edi
c0013e5a:	75 dc                	jne    c0013e38 <mapVASFirstTime+0x35>
c0013e5c:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0013e61:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0013e66:	29 eb                	sub    ebx,ebp
c0013e68:	29 ef                	sub    edi,ebp
c0013e6a:	e8 69 ba ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0013e6f:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013e73:	83 fa 01             	cmp    edx,0x1
c0013e76:	19 d2                	sbb    edx,edx
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	83 e2 04             	and    edx,0x4
c0013e7e:	81 c2 03 04 00 00    	add    edx,0x403
c0013e84:	52                   	push   edx
c0013e85:	6a 01                	push   0x1
c0013e87:	53                   	push   ebx
c0013e88:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013e8e:	50                   	push   eax
c0013e8f:	56                   	push   esi
c0013e90:	e8 db f4 ff ff       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013e95:	83 c4 20             	add    esp,0x20
c0013e98:	39 df                	cmp    edi,ebx
c0013e9a:	75 ce                	jne    c0013e6a <mapVASFirstTime+0x67>
c0013e9c:	83 ec 0c             	sub    esp,0xc
c0013e9f:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c0013ea4:	6a 04                	push   0x4
c0013ea6:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c0013eac:	6a ff                	push   0xffffffff
c0013eae:	c1 eb 0c             	shr    ebx,0xc
c0013eb1:	53                   	push   ebx
c0013eb2:	68 00 60 02 c0       	push   0xc0026000
c0013eb7:	56                   	push   esi
c0013eb8:	e8 59 f0 ff ff       	call   c0012f16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013ebd:	83 c4 14             	add    esp,0x14
c0013ec0:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0013ec5:	6a 04                	push   0x4
c0013ec7:	6a ff                	push   0xffffffff
c0013ec9:	53                   	push   ebx
c0013eca:	68 00 60 02 c0       	push   0xc0026000
c0013ecf:	50                   	push   eax
c0013ed0:	e8 41 f0 ff ff       	call   c0012f16 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013ed5:	0f 20 d8             	mov    eax,cr3
c0013ed8:	0f 22 d8             	mov    cr3,eax
c0013edb:	83 c4 20             	add    esp,0x20
c0013ede:	83 c4 0c             	add    esp,0xc
c0013ee1:	5b                   	pop    ebx
c0013ee2:	5e                   	pop    esi
c0013ee3:	5f                   	pop    edi
c0013ee4:	5d                   	pop    ebp
c0013ee5:	c3                   	ret    
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	68 0f 3e 02 c0       	push   0xc0023e0f
c0013eee:	e8 5b 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013ef3:	83 c4 10             	add    esp,0x10
c0013ef6:	83 c4 0c             	add    esp,0xc
c0013ef9:	5b                   	pop    ebx
c0013efa:	5e                   	pop    esi
c0013efb:	5f                   	pop    edi
c0013efc:	5d                   	pop    ebp
c0013efd:	c3                   	ret    

c0013efe <SysEject(regs*)>:
c0013efe:	83 ec 0c             	sub    esp,0xc
c0013f01:	83 ca ff             	or     edx,0xffffffff
c0013f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f08:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f0b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f10:	83 e9 41             	sub    ecx,0x41
c0013f13:	83 f9 19             	cmp    ecx,0x19
c0013f16:	77 18                	ja     c0013f30 <SysEject(regs*)+0x32>
c0013f18:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0013f1f:	85 c9                	test   ecx,ecx
c0013f21:	74 0d                	je     c0013f30 <SysEject(regs*)+0x32>
c0013f23:	83 ec 0c             	sub    esp,0xc
c0013f26:	51                   	push   ecx
c0013f27:	e8 6e 63 ff ff       	call   c000a29a <LogicalDisk::eject()>
c0013f2c:	83 c4 10             	add    esp,0x10
c0013f2f:	99                   	cdq    
c0013f30:	83 c4 0c             	add    esp,0xc
c0013f33:	c3                   	ret    

c0013f34 <SysExit(regs*)>:
c0013f34:	83 ec 18             	sub    esp,0x18
c0013f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f3e:	e8 5d 2b 00 00       	call   c0016aa0 <terminateTask(int)>
c0013f43:	83 c8 ff             	or     eax,0xffffffff
c0013f46:	83 c4 1c             	add    esp,0x1c
c0013f49:	89 c2                	mov    edx,eax
c0013f4b:	c3                   	ret    

c0013f4c <SysGetCwd(regs*)>:
c0013f4c:	83 ec 10             	sub    esp,0x10
c0013f4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f53:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f56:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f5e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f61:	e8 46 3e ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c0013f66:	83 c4 1c             	add    esp,0x1c
c0013f69:	99                   	cdq    
c0013f6a:	c3                   	ret    

c0013f6b <SysGetPID(regs*)>:
c0013f6b:	83 ec 14             	sub    esp,0x14
c0013f6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f76:	ff 30                	push   DWORD PTR [eax]
c0013f78:	68 28 3e 02 c0       	push   0xc0023e28
c0013f7d:	e8 cc 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013f82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f8c:	83 c4 1c             	add    esp,0x1c
c0013f8f:	99                   	cdq    
c0013f90:	c3                   	ret    

c0013f91 <SysGetRAMData(regs*)>:
c0013f91:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c0013f96:	03 05 3c d1 02 c0    	add    eax,DWORD PTR ds:0xc002d13c
c0013f9c:	8b 0d 40 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d140
c0013fa2:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0013fa8:	99                   	cdq    
c0013fa9:	f7 f9                	idiv   ecx
c0013fab:	c1 e0 18             	shl    eax,0x18
c0013fae:	09 c8                	or     eax,ecx
c0013fb0:	99                   	cdq    
c0013fb1:	c3                   	ret    

c0013fb2 <SysGetVGAPtr(regs*)>:
c0013fb2:	55                   	push   ebp
c0013fb3:	57                   	push   edi
c0013fb4:	56                   	push   esi
c0013fb5:	53                   	push   ebx
c0013fb6:	83 ec 0c             	sub    esp,0xc
c0013fb9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013fbd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013fc0:	83 f8 ff             	cmp    eax,0xffffffff
c0013fc3:	74 1b                	je     c0013fe0 <SysGetVGAPtr(regs*)+0x2e>
c0013fc5:	83 ec 0c             	sub    esp,0xc
c0013fc8:	50                   	push   eax
c0013fc9:	e8 86 25 00 00       	call   c0016554 <Thr::processFromPID(int)>
c0013fce:	83 c4 10             	add    esp,0x10
c0013fd1:	31 d2                	xor    edx,edx
c0013fd3:	89 c1                	mov    ecx,eax
c0013fd5:	b8 01 00 00 00       	mov    eax,0x1
c0013fda:	85 c9                	test   ecx,ecx
c0013fdc:	75 0a                	jne    c0013fe8 <SysGetVGAPtr(regs*)+0x36>
c0013fde:	eb 61                	jmp    c0014041 <SysGetVGAPtr(regs*)+0x8f>
c0013fe0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fe5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0013fe8:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013fec:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013ff2:	74 0c                	je     c0014000 <SysGetVGAPtr(regs*)+0x4e>
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	55                   	push   ebp
c0013ff8:	e8 4a db ff ff       	call   c0011b47 <setActiveTerminal(VgaText*)>
c0013ffd:	83 c4 10             	add    esp,0x10
c0014000:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014003:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014008:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001400b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001400d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014010:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014013:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014019:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001401c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001401f:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0014025:	50                   	push   eax
c0014026:	50                   	push   eax
c0014027:	68 37 3e 02 c0       	push   0xc0023e37
c001402c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001402f:	05 a8 0f 00 00       	add    eax,0xfa8
c0014034:	50                   	push   eax
c0014035:	e8 16 c6 fe ff       	call   c0000650 <strcpy>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	31 c0                	xor    eax,eax
c001403f:	31 d2                	xor    edx,edx
c0014041:	83 c4 0c             	add    esp,0xc
c0014044:	5b                   	pop    ebx
c0014045:	5e                   	pop    esi
c0014046:	5f                   	pop    edi
c0014047:	5d                   	pop    ebp
c0014048:	c3                   	ret    
c0014049:	66 90                	xchg   ax,ax
c001404b:	90                   	nop

c001404c <SysKill(regs*)>:
c001404c:	53                   	push   ebx
c001404d:	83 ec 08             	sub    esp,0x8
c0014050:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014054:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014058:	75 16                	jne    c0014070 <SysKill(regs*)+0x24>
c001405a:	83 ec 0c             	sub    esp,0xc
c001405d:	68 41 3e 02 c0       	push   0xc0023e41
c0014062:	e8 77 b6 ff ff       	call   c000f6de <KePanic(char const*)>
c0014067:	83 c4 10             	add    esp,0x10
c001406a:	e9 89 00 00 00       	jmp    c00140f8 <SysKill(regs*)+0xac>
c001406f:	90                   	nop
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	68 4c da 02 c0       	push   0xc002da4c
c0014078:	e8 ab cf 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001407d:	8d 76 00             	lea    esi,[esi+0x0]
c0014080:	83 c4 10             	add    esp,0x10
c0014083:	85 c0                	test   eax,eax
c0014085:	74 19                	je     c00140a0 <SysKill(regs*)+0x54>
c0014087:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001408a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001408d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001408f:	74 33                	je     c00140c4 <SysKill(regs*)+0x78>
c0014091:	52                   	push   edx
c0014092:	52                   	push   edx
c0014093:	50                   	push   eax
c0014094:	68 4c da 02 c0       	push   0xc002da4c
c0014099:	e8 96 d4 00 00       	call   c0021534 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001409e:	eb e0                	jmp    c0014080 <SysKill(regs*)+0x34>
c00140a0:	83 ec 0c             	sub    esp,0xc
c00140a3:	68 40 da 02 c0       	push   0xc002da40
c00140a8:	e8 7b cf 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140ad:	8d 76 00             	lea    esi,[esi+0x0]
c00140b0:	83 c4 10             	add    esp,0x10
c00140b3:	85 c0                	test   eax,eax
c00140b5:	74 41                	je     c00140f8 <SysKill(regs*)+0xac>
c00140b7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140ba:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140bd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140bf:	75 27                	jne    c00140e8 <SysKill(regs*)+0x9c>
c00140c1:	8d 76 00             	lea    esi,[esi+0x0]
c00140c4:	51                   	push   ecx
c00140c5:	51                   	push   ecx
c00140c6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140d1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00140d7:	e8 40 c7 ff ff       	call   c001081c <KeRaiseSignal(SigHandlerBlock*, int)>
c00140dc:	83 c4 10             	add    esp,0x10
c00140df:	31 c0                	xor    eax,eax
c00140e1:	31 d2                	xor    edx,edx
c00140e3:	eb 1b                	jmp    c0014100 <SysKill(regs*)+0xb4>
c00140e5:	8d 76 00             	lea    esi,[esi+0x0]
c00140e8:	52                   	push   edx
c00140e9:	52                   	push   edx
c00140ea:	50                   	push   eax
c00140eb:	68 40 da 02 c0       	push   0xc002da40
c00140f0:	e8 3f d4 00 00       	call   c0021534 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140f5:	eb b9                	jmp    c00140b0 <SysKill(regs*)+0x64>
c00140f7:	90                   	nop
c00140f8:	83 c8 ff             	or     eax,0xffffffff
c00140fb:	89 c2                	mov    edx,eax
c00140fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014100:	83 c4 08             	add    esp,0x8
c0014103:	5b                   	pop    ebx
c0014104:	c3                   	ret    

c0014105 <SysLoadDLL(regs*)>:
c0014105:	56                   	push   esi
c0014106:	31 d2                	xor    edx,edx
c0014108:	53                   	push   ebx
c0014109:	b8 01 00 00 00       	mov    eax,0x1
c001410e:	51                   	push   ecx
c001410f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014113:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014117:	0f 84 8c 00 00 00    	je     c00141a9 <SysLoadDLL(regs*)+0xa4>
c001411d:	83 ec 0c             	sub    esp,0xc
c0014120:	68 14 01 00 00       	push   0x114
c0014125:	e8 6e b2 ff ff       	call   c000f398 <malloc>
c001412a:	83 c4 0c             	add    esp,0xc
c001412d:	89 c3                	mov    ebx,eax
c001412f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014134:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014137:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001413a:	53                   	push   ebx
c001413b:	e8 ec 3f ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	31 d2                	xor    edx,edx
c0014145:	85 db                	test   ebx,ebx
c0014147:	b8 02 00 00 00       	mov    eax,0x2
c001414c:	74 5b                	je     c00141a9 <SysLoadDLL(regs*)+0xa4>
c001414e:	83 ec 0c             	sub    esp,0xc
c0014151:	53                   	push   ebx
c0014152:	e8 b7 42 ff ff       	call   c000840e <File::exists()>
c0014157:	83 c4 10             	add    esp,0x10
c001415a:	84 c0                	test   al,al
c001415c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001415e:	75 11                	jne    c0014171 <SysLoadDLL(regs*)+0x6c>
c0014160:	83 ec 0c             	sub    esp,0xc
c0014163:	53                   	push   ebx
c0014164:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014167:	83 c4 10             	add    esp,0x10
c001416a:	b8 03 00 00 00       	mov    eax,0x3
c001416f:	eb 36                	jmp    c00141a7 <SysLoadDLL(regs*)+0xa2>
c0014171:	83 ec 0c             	sub    esp,0xc
c0014174:	53                   	push   ebx
c0014175:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014178:	58                   	pop    eax
c0014179:	5a                   	pop    edx
c001417a:	6a 00                	push   0x0
c001417c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001417f:	e8 50 16 00 00       	call   c00157d4 <Thr::loadDLL(char const*, bool)>
c0014184:	83 c4 10             	add    esp,0x10
c0014187:	31 d2                	xor    edx,edx
c0014189:	89 c1                	mov    ecx,eax
c001418b:	b8 04 00 00 00       	mov    eax,0x4
c0014190:	85 c9                	test   ecx,ecx
c0014192:	74 15                	je     c00141a9 <SysLoadDLL(regs*)+0xa4>
c0014194:	53                   	push   ebx
c0014195:	53                   	push   ebx
c0014196:	ff 35 d0 b0 02 c0    	push   DWORD PTR ds:0xc002b0d0
c001419c:	51                   	push   ecx
c001419d:	e8 93 18 00 00       	call   c0015a35 <Thr::executeDLL(unsigned long, void*)>
c00141a2:	83 c4 10             	add    esp,0x10
c00141a5:	31 c0                	xor    eax,eax
c00141a7:	31 d2                	xor    edx,edx
c00141a9:	59                   	pop    ecx
c00141aa:	5b                   	pop    ebx
c00141ab:	5e                   	pop    esi
c00141ac:	c3                   	ret    

c00141ad <SysRead(regs*)>:
c00141ad:	57                   	push   edi
c00141ae:	56                   	push   esi
c00141af:	53                   	push   ebx
c00141b0:	83 ec 10             	sub    esp,0x10
c00141b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141ba:	83 f8 02             	cmp    eax,0x2
c00141bd:	77 10                	ja     c00141cf <SysRead(regs*)+0x22>
c00141bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141c7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141cd:	eb 0e                	jmp    c00141dd <SysRead(regs*)+0x30>
c00141cf:	83 ec 0c             	sub    esp,0xc
c00141d2:	50                   	push   eax
c00141d3:	e8 59 e7 ff ff       	call   c0012931 <KeGetFileFromDescriptor(int)>
c00141d8:	83 c4 10             	add    esp,0x10
c00141db:	89 c1                	mov    ecx,eax
c00141dd:	83 c8 ff             	or     eax,0xffffffff
c00141e0:	85 c9                	test   ecx,ecx
c00141e2:	89 c2                	mov    edx,eax
c00141e4:	74 28                	je     c001420e <SysRead(regs*)+0x61>
c00141e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141ee:	83 ec 0c             	sub    esp,0xc
c00141f1:	31 ff                	xor    edi,edi
c00141f3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141f9:	52                   	push   edx
c00141fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141fd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014200:	57                   	push   edi
c0014201:	56                   	push   esi
c0014202:	51                   	push   ecx
c0014203:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014206:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001420a:	83 c4 20             	add    esp,0x20
c001420d:	99                   	cdq    
c001420e:	83 c4 10             	add    esp,0x10
c0014211:	5b                   	pop    ebx
c0014212:	5e                   	pop    esi
c0014213:	5f                   	pop    edi
c0014214:	c3                   	ret    

c0014215 <SysRegisterSignal(regs*)>:
c0014215:	83 ec 18             	sub    esp,0x18
c0014218:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001421c:	6a 00                	push   0x0
c001421e:	6a 00                	push   0x0
c0014220:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014223:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001422b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001422e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014234:	e8 ad c5 ff ff       	call   c00107e6 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014239:	83 c4 2c             	add    esp,0x2c
c001423c:	99                   	cdq    
c001423d:	c3                   	ret    

c001423e <SysRegistryGetTypeFromPath(regs*)>:
c001423e:	53                   	push   ebx
c001423f:	81 ec 40 01 00 00    	sub    esp,0x140
c0014245:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001424c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001424f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014252:	e8 08 95 ff ff       	call   c000d75f <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014257:	83 c4 10             	add    esp,0x10
c001425a:	85 c0                	test   eax,eax
c001425c:	89 c1                	mov    ecx,eax
c001425e:	74 15                	je     c0014275 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014260:	50                   	push   eax
c0014261:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014265:	50                   	push   eax
c0014266:	51                   	push   ecx
c0014267:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001426a:	e8 d5 90 ff ff       	call   c000d344 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001426f:	83 c4 10             	add    esp,0x10
c0014272:	99                   	cdq    
c0014273:	eb 05                	jmp    c001427a <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014275:	83 c8 ff             	or     eax,0xffffffff
c0014278:	89 c2                	mov    edx,eax
c001427a:	81 c4 38 01 00 00    	add    esp,0x138
c0014280:	5b                   	pop    ebx
c0014281:	c3                   	ret    

c0014282 <SysRegistryReadExtent(regs*)>:
c0014282:	83 ec 1c             	sub    esp,0x1c
c0014285:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014289:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001428c:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001428f:	85 c0                	test   eax,eax
c0014291:	79 1f                	jns    c00142b2 <SysRegistryReadExtent(regs*)+0x30>
c0014293:	52                   	push   edx
c0014294:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014299:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001429d:	52                   	push   edx
c001429e:	50                   	push   eax
c001429f:	51                   	push   ecx
c00142a0:	e8 91 8f ff ff       	call   c000d236 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00142a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00142ad:	83 c4 10             	add    esp,0x10
c00142b0:	eb 14                	jmp    c00142c6 <SysRegistryReadExtent(regs*)+0x44>
c00142b2:	83 ec 04             	sub    esp,0x4
c00142b5:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00142b8:	50                   	push   eax
c00142b9:	51                   	push   ecx
c00142ba:	e8 15 8a ff ff       	call   c000ccd4 <CmGetString(Reghive_Tag*, int, char*)>
c00142bf:	83 c4 10             	add    esp,0x10
c00142c2:	31 c0                	xor    eax,eax
c00142c4:	31 d2                	xor    edx,edx
c00142c6:	83 c4 1c             	add    esp,0x1c
c00142c9:	c3                   	ret    

c00142ca <SysRegistryPathToExtentLookup(regs*)>:
c00142ca:	83 ec 14             	sub    esp,0x14
c00142cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142d1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00142d4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142d7:	e8 83 94 ff ff       	call   c000d75f <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142dc:	83 c4 1c             	add    esp,0x1c
c00142df:	99                   	cdq    
c00142e0:	c3                   	ret    

c00142e1 <SysRegistryEnterDirectory(regs*)>:
c00142e1:	83 ec 14             	sub    esp,0x14
c00142e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142e8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00142eb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142ee:	e8 58 8a ff ff       	call   c000cd4b <CmEnterDirectory(Reghive_Tag*, int)>
c00142f3:	83 c4 1c             	add    esp,0x1c
c00142f6:	99                   	cdq    
c00142f7:	c3                   	ret    

c00142f8 <SysRegistryGetNext(regs*)>:
c00142f8:	83 ec 14             	sub    esp,0x14
c00142fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142ff:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014302:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014305:	e8 80 8a ff ff       	call   c000cd8a <CmGetNext(Reghive_Tag*, int)>
c001430a:	83 c4 1c             	add    esp,0x1c
c001430d:	99                   	cdq    
c001430e:	c3                   	ret    

c001430f <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001430f:	57                   	push   edi
c0014310:	56                   	push   esi
c0014311:	53                   	push   ebx
c0014312:	81 ec 34 01 00 00    	sub    esp,0x134
c0014318:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001431f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014323:	57                   	push   edi
c0014324:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014327:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001432a:	e8 15 90 ff ff       	call   c000d344 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001432f:	89 c3                	mov    ebx,eax
c0014331:	58                   	pop    eax
c0014332:	5a                   	pop    edx
c0014333:	57                   	push   edi
c0014334:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014337:	e8 14 c3 fe ff       	call   c0000650 <strcpy>
c001433c:	81 c4 40 01 00 00    	add    esp,0x140
c0014342:	89 d8                	mov    eax,ebx
c0014344:	5b                   	pop    ebx
c0014345:	99                   	cdq    
c0014346:	5e                   	pop    esi
c0014347:	5f                   	pop    edi
c0014348:	c3                   	ret    

c0014349 <SysRegistryOpen(regs*)>:
c0014349:	83 ec 18             	sub    esp,0x18
c001434c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014350:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014353:	e8 0c 88 ff ff       	call   c000cb64 <CmOpen(char const*)>
c0014358:	83 c4 1c             	add    esp,0x1c
c001435b:	99                   	cdq    
c001435c:	c3                   	ret    

c001435d <SysRegistryClose(regs*)>:
c001435d:	83 ec 18             	sub    esp,0x18
c0014360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014364:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014367:	e8 16 89 ff ff       	call   c000cc82 <CmClose(Reghive_Tag*)>
c001436c:	31 c0                	xor    eax,eax
c001436e:	31 d2                	xor    edx,edx
c0014370:	83 c4 1c             	add    esp,0x1c
c0014373:	c3                   	ret    

c0014374 <SysRegistryEasyReadString(regs*)>:
c0014374:	57                   	push   edi
c0014375:	56                   	push   esi
c0014376:	53                   	push   ebx
c0014377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001437b:	83 ec 0c             	sub    esp,0xc
c001437e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014381:	e8 de 87 ff ff       	call   c000cb64 <CmOpen(char const*)>
c0014386:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014389:	5a                   	pop    edx
c001438a:	59                   	pop    ecx
c001438b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001438e:	89 c3                	mov    ebx,eax
c0014390:	50                   	push   eax
c0014391:	e8 c9 93 ff ff       	call   c000d75f <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	89 c1                	mov    ecx,eax
c001439b:	b8 01 00 00 00       	mov    eax,0x1
c00143a0:	85 c9                	test   ecx,ecx
c00143a2:	7e 16                	jle    c00143ba <SysRegistryEasyReadString(regs*)+0x46>
c00143a4:	50                   	push   eax
c00143a5:	57                   	push   edi
c00143a6:	51                   	push   ecx
c00143a7:	53                   	push   ebx
c00143a8:	e8 27 89 ff ff       	call   c000ccd4 <CmGetString(Reghive_Tag*, int, char*)>
c00143ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143b0:	e8 cd 88 ff ff       	call   c000cc82 <CmClose(Reghive_Tag*)>
c00143b5:	83 c4 10             	add    esp,0x10
c00143b8:	31 c0                	xor    eax,eax
c00143ba:	5b                   	pop    ebx
c00143bb:	31 d2                	xor    edx,edx
c00143bd:	5e                   	pop    esi
c00143be:	5f                   	pop    edi
c00143bf:	c3                   	ret    

c00143c0 <SysRegistryEasyReadInteger(regs*)>:
c00143c0:	56                   	push   esi
c00143c1:	53                   	push   ebx
c00143c2:	83 ec 10             	sub    esp,0x10
c00143c5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143c9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00143cc:	e8 93 87 ff ff       	call   c000cb64 <CmOpen(char const*)>
c00143d1:	5a                   	pop    edx
c00143d2:	59                   	pop    ecx
c00143d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00143d6:	89 c3                	mov    ebx,eax
c00143d8:	50                   	push   eax
c00143d9:	e8 81 93 ff ff       	call   c000d75f <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00143de:	83 c4 10             	add    esp,0x10
c00143e1:	89 c1                	mov    ecx,eax
c00143e3:	b8 01 00 00 00       	mov    eax,0x1
c00143e8:	85 c9                	test   ecx,ecx
c00143ea:	7e 18                	jle    c0014404 <SysRegistryEasyReadInteger(regs*)+0x44>
c00143ec:	50                   	push   eax
c00143ed:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00143f0:	51                   	push   ecx
c00143f1:	53                   	push   ebx
c00143f2:	e8 3f 8e ff ff       	call   c000d236 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00143f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143fa:	e8 83 88 ff ff       	call   c000cc82 <CmClose(Reghive_Tag*)>
c00143ff:	83 c4 10             	add    esp,0x10
c0014402:	31 c0                	xor    eax,eax
c0014404:	59                   	pop    ecx
c0014405:	31 d2                	xor    edx,edx
c0014407:	5b                   	pop    ebx
c0014408:	5e                   	pop    esi
c0014409:	c3                   	ret    

c001440a <SysSbrk(regs*)>:
c001440a:	56                   	push   esi
c001440b:	53                   	push   ebx
c001440c:	50                   	push   eax
c001440d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014412:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014416:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014419:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001441c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014422:	85 db                	test   ebx,ebx
c0014424:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014427:	74 02                	je     c001442b <SysSbrk(regs*)+0x21>
c0014429:	79 06                	jns    c0014431 <SysSbrk(regs*)+0x27>
c001442b:	89 f0                	mov    eax,esi
c001442d:	31 d2                	xor    edx,edx
c001442f:	eb 2a                	jmp    c001445b <SysSbrk(regs*)+0x51>
c0014431:	83 c8 ff             	or     eax,0xffffffff
c0014434:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001443a:	89 c2                	mov    edx,eax
c001443c:	77 1d                	ja     c001445b <SysSbrk(regs*)+0x51>
c001443e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014444:	50                   	push   eax
c0014445:	68 07 0c 00 00       	push   0xc07
c001444a:	c1 ea 0c             	shr    edx,0xc
c001444d:	52                   	push   edx
c001444e:	51                   	push   ecx
c001444f:	e8 2a ee ff ff       	call   c001327e <VAS::allocatePages(int, int)>
c0014454:	89 f0                	mov    eax,esi
c0014456:	31 d2                	xor    edx,edx
c0014458:	83 c4 10             	add    esp,0x10
c001445b:	59                   	pop    ecx
c001445c:	5b                   	pop    ebx
c001445d:	5e                   	pop    esi
c001445e:	c3                   	ret    

c001445f <SysSetCwd(regs*)>:
c001445f:	83 ec 14             	sub    esp,0x14
c0014462:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014466:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001446e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014471:	e8 37 40 ff ff       	call   c00084ad <Fs::setcwd(Process*, char*)>
c0014476:	83 c4 1c             	add    esp,0x1c
c0014479:	99                   	cdq    
c001447a:	c3                   	ret    

c001447b <SysSetTime(regs*)>:
c001447b:	55                   	push   ebp
c001447c:	31 d2                	xor    edx,edx
c001447e:	57                   	push   edi
c001447f:	56                   	push   esi
c0014480:	53                   	push   ebx
c0014481:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014486:	83 ec 30             	sub    esp,0x30
c0014489:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001448d:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014490:	89 f0                	mov    eax,esi
c0014492:	f7 f3                	div    ebx
c0014494:	89 d7                	mov    edi,edx
c0014496:	31 d2                	xor    edx,edx
c0014498:	f7 f3                	div    ebx
c001449a:	bb 10 0e 00 00       	mov    ebx,0xe10
c001449f:	89 f0                	mov    eax,esi
c00144a1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00144a5:	31 d2                	xor    edx,edx
c00144a7:	f7 f3                	div    ebx
c00144a9:	bb 18 00 00 00       	mov    ebx,0x18
c00144ae:	31 d2                	xor    edx,edx
c00144b0:	f7 f3                	div    ebx
c00144b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00144b5:	bb 0c 00 00 00       	mov    ebx,0xc
c00144ba:	89 c6                	mov    esi,eax
c00144bc:	c1 e8 05             	shr    eax,0x5
c00144bf:	83 e6 1f             	and    esi,0x1f
c00144c2:	46                   	inc    esi
c00144c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00144c7:	31 d2                	xor    edx,edx
c00144c9:	f7 f3                	div    ebx
c00144cb:	31 db                	xor    ebx,ebx
c00144cd:	57                   	push   edi
c00144ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144d6:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c00144da:	55                   	push   ebp
c00144db:	52                   	push   edx
c00144dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00144e0:	56                   	push   esi
c00144e1:	68 62 3e 02 c0       	push   0xc0023e62
c00144e6:	e8 63 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00144eb:	83 c4 1c             	add    esp,0x1c
c00144ee:	57                   	push   edi
c00144ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f7:	55                   	push   ebp
c00144f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00144fc:	52                   	push   edx
c00144fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014501:	56                   	push   esi
c0014502:	68 84 3e 02 c0       	push   0xc0023e84
c0014507:	e8 42 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001450c:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0014511:	31 c9                	xor    ecx,ecx
c0014513:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014517:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c001451b:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c001451f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014525:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014529:	89 f0                	mov    eax,esi
c001452b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001452f:	88 c1                	mov    cl,al
c0014531:	89 e8                	mov    eax,ebp
c0014533:	88 d5                	mov    ch,dl
c0014535:	83 c4 1c             	add    esp,0x1c
c0014538:	c1 e0 10             	shl    eax,0x10
c001453b:	0f b7 d1             	movzx  edx,cx
c001453e:	09 c2                	or     edx,eax
c0014540:	89 f8                	mov    eax,edi
c0014542:	c1 e0 10             	shl    eax,0x10
c0014545:	89 d1                	mov    ecx,edx
c0014547:	89 da                	mov    edx,ebx
c0014549:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c001454f:	09 c2                	or     edx,eax
c0014551:	52                   	push   edx
c0014552:	51                   	push   ecx
c0014553:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014557:	e8 3a 4a ff ff       	call   c0008f96 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001455c:	83 c4 3c             	add    esp,0x3c
c001455f:	31 d2                	xor    edx,edx
c0014561:	5b                   	pop    ebx
c0014562:	5e                   	pop    esi
c0014563:	83 f0 01             	xor    eax,0x1
c0014566:	5f                   	pop    edi
c0014567:	0f b6 c0             	movzx  eax,al
c001456a:	5d                   	pop    ebp
c001456b:	c3                   	ret    

c001456c <SysSymlink(regs*)>:
c001456c:	56                   	push   esi
c001456d:	83 c8 ff             	or     eax,0xffffffff
c0014570:	53                   	push   ebx
c0014571:	89 c2                	mov    edx,eax
c0014573:	81 ec 34 02 00 00    	sub    esp,0x234
c0014579:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014580:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014584:	74 50                	je     c00145d6 <SysSymlink(regs*)+0x6a>
c0014586:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014589:	85 c9                	test   ecx,ecx
c001458b:	74 49                	je     c00145d6 <SysSymlink(regs*)+0x6a>
c001458d:	6a 01                	push   0x1
c001458f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014594:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014597:	05 0c 01 00 00       	add    eax,0x10c
c001459c:	50                   	push   eax
c001459d:	51                   	push   ecx
c001459e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00145a2:	56                   	push   esi
c00145a3:	e8 58 38 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00145a8:	6a 01                	push   0x1
c00145aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145b2:	05 0c 01 00 00       	add    eax,0x10c
c00145b7:	50                   	push   eax
c00145b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145bb:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00145c2:	53                   	push   ebx
c00145c3:	e8 38 38 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00145c8:	83 c4 18             	add    esp,0x18
c00145cb:	56                   	push   esi
c00145cc:	53                   	push   ebx
c00145cd:	e8 5c 34 ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c00145d2:	83 c4 10             	add    esp,0x10
c00145d5:	99                   	cdq    
c00145d6:	81 c4 34 02 00 00    	add    esp,0x234
c00145dc:	5b                   	pop    ebx
c00145dd:	5e                   	pop    esi
c00145de:	c3                   	ret    

c00145df <SysTimezone(regs*)>:
c00145df:	83 ec 0c             	sub    esp,0xc
c00145e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e6:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145ea:	75 17                	jne    c0014603 <SysTimezone(regs*)+0x24>
c00145ec:	83 ec 0c             	sub    esp,0xc
c00145ef:	68 a6 3e 02 c0       	push   0xc0023ea6
c00145f4:	e8 55 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00145f9:	83 c8 ff             	or     eax,0xffffffff
c00145fc:	83 c4 10             	add    esp,0x10
c00145ff:	89 c2                	mov    edx,eax
c0014601:	eb 16                	jmp    c0014619 <SysTimezone(regs*)+0x3a>
c0014603:	83 ec 0c             	sub    esp,0xc
c0014606:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014609:	e8 be 46 ff ff       	call   c0008ccc <KeSetTimezone(int)>
c001460e:	31 d2                	xor    edx,edx
c0014610:	83 c4 10             	add    esp,0x10
c0014613:	83 f0 01             	xor    eax,0x1
c0014616:	0f b6 c0             	movzx  eax,al
c0014619:	83 c4 0c             	add    esp,0xc
c001461c:	c3                   	ret    

c001461d <SysTruncate(regs*)>:
c001461d:	55                   	push   ebp
c001461e:	57                   	push   edi
c001461f:	31 ff                	xor    edi,edi
c0014621:	56                   	push   esi
c0014622:	53                   	push   ebx
c0014623:	83 ec 0c             	sub    esp,0xc
c0014626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001462d:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014631:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014634:	89 ce                	mov    esi,ecx
c0014636:	0f 84 9a 00 00 00    	je     c00146d6 <SysTruncate(regs*)+0xb9>
c001463c:	83 ec 0c             	sub    esp,0xc
c001463f:	68 14 01 00 00       	push   0x114
c0014644:	e8 4f ad ff ff       	call   c000f398 <malloc>
c0014649:	83 c4 0c             	add    esp,0xc
c001464c:	89 c3                	mov    ebx,eax
c001464e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014653:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014656:	55                   	push   ebp
c0014657:	53                   	push   ebx
c0014658:	e8 cf 3a ff ff       	call   c000812c <File::File(char const*, Process*)>
c001465d:	83 c4 10             	add    esp,0x10
c0014660:	31 d2                	xor    edx,edx
c0014662:	85 db                	test   ebx,ebx
c0014664:	b8 03 00 00 00       	mov    eax,0x3
c0014669:	0f 84 a2 00 00 00    	je     c0014711 <SysTruncate(regs*)+0xf4>
c001466f:	51                   	push   ecx
c0014670:	51                   	push   ecx
c0014671:	6a 02                	push   0x2
c0014673:	53                   	push   ebx
c0014674:	e8 d1 3a ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	85 c0                	test   eax,eax
c001467e:	74 13                	je     c0014693 <SysTruncate(regs*)+0x76>
c0014680:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014682:	83 ec 0c             	sub    esp,0xc
c0014685:	53                   	push   ebx
c0014686:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014689:	83 c4 10             	add    esp,0x10
c001468c:	b8 04 00 00 00       	mov    eax,0x4
c0014691:	eb 7c                	jmp    c001470f <SysTruncate(regs*)+0xf2>
c0014693:	52                   	push   edx
c0014694:	57                   	push   edi
c0014695:	56                   	push   esi
c0014696:	53                   	push   ebx
c0014697:	e8 c2 3b ff ff       	call   c000825e <File::truncate(unsigned long long)>
c001469c:	83 c4 10             	add    esp,0x10
c001469f:	85 c0                	test   eax,eax
c00146a1:	74 1b                	je     c00146be <SysTruncate(regs*)+0xa1>
c00146a3:	83 ec 0c             	sub    esp,0xc
c00146a6:	53                   	push   ebx
c00146a7:	e8 fc 3a ff ff       	call   c00081a8 <File::close()>
c00146ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146b4:	83 c4 10             	add    esp,0x10
c00146b7:	b8 05 00 00 00       	mov    eax,0x5
c00146bc:	eb 51                	jmp    c001470f <SysTruncate(regs*)+0xf2>
c00146be:	83 ec 0c             	sub    esp,0xc
c00146c1:	53                   	push   ebx
c00146c2:	e8 e1 3a ff ff       	call   c00081a8 <File::close()>
c00146c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146cf:	83 c4 10             	add    esp,0x10
c00146d2:	31 c0                	xor    eax,eax
c00146d4:	eb 39                	jmp    c001470f <SysTruncate(regs*)+0xf2>
c00146d6:	31 d2                	xor    edx,edx
c00146d8:	83 fd 02             	cmp    ebp,0x2
c00146db:	b8 01 00 00 00       	mov    eax,0x1
c00146e0:	7e 2f                	jle    c0014711 <SysTruncate(regs*)+0xf4>
c00146e2:	83 ec 0c             	sub    esp,0xc
c00146e5:	51                   	push   ecx
c00146e6:	e8 46 e2 ff ff       	call   c0012931 <KeGetFileFromDescriptor(int)>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	31 d2                	xor    edx,edx
c00146f0:	89 c1                	mov    ecx,eax
c00146f2:	b8 02 00 00 00       	mov    eax,0x2
c00146f7:	85 c9                	test   ecx,ecx
c00146f9:	74 16                	je     c0014711 <SysTruncate(regs*)+0xf4>
c00146fb:	50                   	push   eax
c00146fc:	57                   	push   edi
c00146fd:	56                   	push   esi
c00146fe:	51                   	push   ecx
c00146ff:	e8 5a 3b ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0014704:	83 c4 10             	add    esp,0x10
c0014707:	85 c0                	test   eax,eax
c0014709:	0f 95 c0             	setne  al
c001470c:	0f b6 c0             	movzx  eax,al
c001470f:	31 d2                	xor    edx,edx
c0014711:	83 c4 0c             	add    esp,0xc
c0014714:	5b                   	pop    ebx
c0014715:	5e                   	pop    esi
c0014716:	5f                   	pop    edi
c0014717:	5d                   	pop    ebp
c0014718:	c3                   	ret    

c0014719 <SysWrite(regs*)>:
c0014719:	57                   	push   edi
c001471a:	56                   	push   esi
c001471b:	53                   	push   ebx
c001471c:	83 ec 10             	sub    esp,0x10
c001471f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014723:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014726:	83 f8 02             	cmp    eax,0x2
c0014729:	77 10                	ja     c001473b <SysWrite(regs*)+0x22>
c001472b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014730:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014733:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014739:	eb 0e                	jmp    c0014749 <SysWrite(regs*)+0x30>
c001473b:	83 ec 0c             	sub    esp,0xc
c001473e:	50                   	push   eax
c001473f:	e8 ed e1 ff ff       	call   c0012931 <KeGetFileFromDescriptor(int)>
c0014744:	83 c4 10             	add    esp,0x10
c0014747:	89 c1                	mov    ecx,eax
c0014749:	83 c8 ff             	or     eax,0xffffffff
c001474c:	85 c9                	test   ecx,ecx
c001474e:	89 c2                	mov    edx,eax
c0014750:	74 28                	je     c001477a <SysWrite(regs*)+0x61>
c0014752:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	31 ff                	xor    edi,edi
c001475f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014763:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014765:	52                   	push   edx
c0014766:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014769:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001476c:	57                   	push   edi
c001476d:	56                   	push   esi
c001476e:	51                   	push   ecx
c001476f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014772:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014776:	83 c4 20             	add    esp,0x20
c0014779:	99                   	cdq    
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	5b                   	pop    ebx
c001477e:	5e                   	pop    esi
c001477f:	5f                   	pop    edi
c0014780:	c3                   	ret    

c0014781 <SysWsbe(regs*)>:
c0014781:	55                   	push   ebp
c0014782:	57                   	push   edi
c0014783:	56                   	push   esi
c0014784:	53                   	push   ebx
c0014785:	83 ec 3c             	sub    esp,0x3c
c0014788:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001478c:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014793:	75 2d                	jne    c00147c2 <SysWsbe(regs*)+0x41>
c0014795:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001479c:	75 24                	jne    c00147c2 <SysWsbe(regs*)+0x41>
c001479e:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00147a5:	75 1b                	jne    c00147c2 <SysWsbe(regs*)+0x41>
c00147a7:	6a 01                	push   0x1
c00147a9:	6a 00                	push   0x0
c00147ab:	68 d5 97 00 c0       	push   0xc00097d5
c00147b0:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c00147b6:	e8 ed 18 00 00       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c00147bb:	83 c4 10             	add    esp,0x10
c00147be:	31 c0                	xor    eax,eax
c00147c0:	eb 52                	jmp    c0014814 <SysWsbe(regs*)+0x93>
c00147c2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00147c6:	be bb 3e 02 c0       	mov    esi,0xc0023ebb
c00147cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00147d0:	fc                   	cld    
c00147d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00147d3:	83 ec 0c             	sub    esp,0xc
c00147d6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00147da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147e2:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00147e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00147ea:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00147ed:	57                   	push   edi
c00147ee:	e8 8d bd fe ff       	call   c0000580 <strlen>
c00147f3:	5a                   	pop    edx
c00147f4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00147f8:	52                   	push   edx
c00147f9:	31 d2                	xor    edx,edx
c00147fb:	57                   	push   edi
c00147fc:	52                   	push   edx
c00147fd:	50                   	push   eax
c00147fe:	56                   	push   esi
c00147ff:	ff d5                	call   ebp
c0014801:	83 c4 14             	add    esp,0x14
c0014804:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014807:	e8 94 22 00 00       	call   c0016aa0 <terminateTask(int)>
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014814:	83 c4 3c             	add    esp,0x3c
c0014817:	31 d2                	xor    edx,edx
c0014819:	5b                   	pop    ebx
c001481a:	5e                   	pop    esi
c001481b:	5f                   	pop    edi
c001481c:	5d                   	pop    ebp
c001481d:	c3                   	ret    

c001481e <SysYield(regs*)>:
c001481e:	83 ec 0c             	sub    esp,0xc
c0014821:	fa                   	cli    
c0014822:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0014828:	e8 d3 1a 00 00       	call   c0016300 <schedule()>
c001482d:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0014834:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001483b:	75 01                	jne    c001483e <SysYield(regs*)+0x20>
c001483d:	fb                   	sti    
c001483e:	31 c0                	xor    eax,eax
c0014840:	31 d2                	xor    edx,edx
c0014842:	83 c4 0c             	add    esp,0xc
c0014845:	c3                   	ret    

c0014846 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014846:	55                   	push   ebp
c0014847:	57                   	push   edi
c0014848:	56                   	push   esi
c0014849:	53                   	push   ebx
c001484a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014850:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001485b:	74 3b                	je     c0014898 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001485d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014865:	74 31                	je     c0014898 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014867:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001486f:	75 27                	jne    c0014898 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014871:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014878:	05 00 10 00 00       	add    eax,0x1000
c001487d:	89 c2                	mov    edx,eax
c001487f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014884:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001488b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014891:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014898:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001489f:	83 ec 0c             	sub    esp,0xc
c00148a2:	6a 01                	push   0x1
c00148a4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00148aa:	e8 ee e1 ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c00148af:	83 c4 10             	add    esp,0x10
c00148b2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00148b8:	89 c3                	mov    ebx,eax
c00148ba:	0f 86 27 01 00 00    	jbe    c00149e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00148c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148c8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00148cf:	c1 ee 0c             	shr    esi,0xc
c00148d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00148d6:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00148dd:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00148e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148e8:	29 ef                	sub    edi,ebp
c00148ea:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00148ee:	0f 83 fa 00 00 00    	jae    c00149ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00148f4:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00148fa:	b8 00 10 00 00       	mov    eax,0x1000
c00148ff:	0f 47 f8             	cmova  edi,eax
c0014902:	83 ec 0c             	sub    esp,0xc
c0014905:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001490c:	31 d2                	xor    edx,edx
c001490e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014910:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014914:	50                   	push   eax
c0014915:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014919:	56                   	push   esi
c001491a:	52                   	push   edx
c001491b:	57                   	push   edi
c001491c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014923:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014926:	83 c4 20             	add    esp,0x20
c0014929:	85 c0                	test   eax,eax
c001492b:	75 06                	jne    c0014933 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001492d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014931:	74 13                	je     c0014946 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014933:	83 ec 0c             	sub    esp,0xc
c0014936:	53                   	push   ebx
c0014937:	e8 5f e4 ff ff       	call   c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c001493c:	83 c4 10             	add    esp,0x10
c001493f:	31 c0                	xor    eax,eax
c0014941:	e9 80 01 00 00       	jmp    c0014ac6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0014946:	fa                   	cli    
c0014947:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001494d:	e8 86 af ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0014952:	6a 07                	push   0x7
c0014954:	53                   	push   ebx
c0014955:	50                   	push   eax
c0014956:	89 c7                	mov    edi,eax
c0014958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001495d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014960:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014966:	e8 0b e8 ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c001496b:	83 c4 0c             	add    esp,0xc
c001496e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014975:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001497b:	6a 00                	push   0x0
c001497d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014982:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014985:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001498b:	e8 52 e6 ff ff       	call   c0012fe2 <VAS::mapOtherVASIn(bool, VAS*)>
c0014990:	58                   	pop    eax
c0014991:	5a                   	pop    edx
c0014992:	68 07 0c 00 00       	push   0xc07
c0014997:	55                   	push   ebp
c0014998:	57                   	push   edi
c0014999:	89 df                	mov    edi,ebx
c001499b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00149a2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149a8:	6a 00                	push   0x0
c00149aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149b2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149b8:	e8 0d ea ff ff       	call   c00133ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00149bd:	b9 00 10 00 00       	mov    ecx,0x1000
c00149c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149c4:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c00149cb:	83 c4 20             	add    esp,0x20
c00149ce:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00149d5:	75 01                	jne    c00149d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00149d7:	fb                   	sti    
c00149d8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00149dc:	81 c5 00 10 00 00    	add    ebp,0x1000
c00149e2:	e9 ef fe ff ff       	jmp    c00148d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00149e7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00149ee:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00149f5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00149fb:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014a01:	0f 86 b1 00 00 00    	jbe    c0014ab8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0014a07:	fa                   	cli    
c0014a08:	51                   	push   ecx
c0014a09:	31 ff                	xor    edi,edi
c0014a0b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014a12:	c1 ee 0c             	shr    esi,0xc
c0014a15:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0014a1b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a21:	6a 00                	push   0x0
c0014a23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a2b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a31:	e8 ac e5 ff ff       	call   c0012fe2 <VAS::mapOtherVASIn(bool, VAS*)>
c0014a36:	83 c4 10             	add    esp,0x10
c0014a39:	e8 9a ae ff ff       	call   c000f8d8 <Phys::allocatePage()>
c0014a3e:	47                   	inc    edi
c0014a3f:	6a 07                	push   0x7
c0014a41:	53                   	push   ebx
c0014a42:	50                   	push   eax
c0014a43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a47:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a4d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014a50:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014a56:	e8 1b e7 ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014a5b:	58                   	pop    eax
c0014a5c:	5a                   	pop    edx
c0014a5d:	68 07 0c 00 00       	push   0xc07
c0014a62:	55                   	push   ebp
c0014a63:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014a69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a6d:	50                   	push   eax
c0014a6e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014a75:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a7b:	6a 00                	push   0x0
c0014a7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a85:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a8b:	e8 3a e9 ff ff       	call   c00133ca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014a90:	83 c4 1c             	add    esp,0x1c
c0014a93:	68 00 10 00 00       	push   0x1000
c0014a98:	6a 00                	push   0x0
c0014a9a:	53                   	push   ebx
c0014a9b:	e8 50 ba fe ff       	call   c00004f0 <memset>
c0014aa0:	83 c4 10             	add    esp,0x10
c0014aa3:	39 fe                	cmp    esi,edi
c0014aa5:	77 92                	ja     c0014a39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0014aa7:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0014aae:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0014ab5:	75 01                	jne    c0014ab8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0014ab7:	fb                   	sti    
c0014ab8:	83 ec 0c             	sub    esp,0xc
c0014abb:	53                   	push   ebx
c0014abc:	e8 da e2 ff ff       	call   c0012d9b <Virt::freeKernelVirtualPages(unsigned long)>
c0014ac1:	83 c4 10             	add    esp,0x10
c0014ac4:	b0 01                	mov    al,0x1
c0014ac6:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014acc:	5b                   	pop    ebx
c0014acd:	5e                   	pop    esi
c0014ace:	5f                   	pop    edi
c0014acf:	5d                   	pop    ebp
c0014ad0:	c3                   	ret    

c0014ad1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014ad1:	55                   	push   ebp
c0014ad2:	57                   	push   edi
c0014ad3:	56                   	push   esi
c0014ad4:	53                   	push   ebx
c0014ad5:	83 ec 48             	sub    esp,0x48
c0014ad8:	68 14 01 00 00       	push   0x114
c0014add:	e8 b6 a8 ff ff       	call   c000f398 <malloc>
c0014ae2:	83 c4 0c             	add    esp,0xc
c0014ae5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014ae9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014aed:	89 c7                	mov    edi,eax
c0014aef:	50                   	push   eax
c0014af0:	e8 37 36 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014af5:	58                   	pop    eax
c0014af6:	5a                   	pop    edx
c0014af7:	6a 01                	push   0x1
c0014af9:	57                   	push   edi
c0014afa:	e8 4b 36 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014aff:	83 c4 10             	add    esp,0x10
c0014b02:	85 c0                	test   eax,eax
c0014b04:	0f 85 4c 01 00 00    	jne    c0014c56 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014b0a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014b12:	83 ec 0c             	sub    esp,0xc
c0014b15:	6a 34                	push   0x34
c0014b17:	e8 7c a8 ff ff       	call   c000f398 <malloc>
c0014b1c:	89 c3                	mov    ebx,eax
c0014b1e:	58                   	pop    eax
c0014b1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014b21:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014b25:	56                   	push   esi
c0014b26:	53                   	push   ebx
c0014b27:	6a 00                	push   0x0
c0014b29:	6a 34                	push   0x34
c0014b2b:	57                   	push   edi
c0014b2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b2f:	83 c4 20             	add    esp,0x20
c0014b32:	85 c0                	test   eax,eax
c0014b34:	0f 85 1c 01 00 00    	jne    c0014c56 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014b3a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014b40:	0f 85 10 01 00 00    	jne    c0014c56 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014b46:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b49:	85 c0                	test   eax,eax
c0014b4b:	0f 84 05 01 00 00    	je     c0014c56 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014b51:	31 d2                	xor    edx,edx
c0014b53:	55                   	push   ebp
c0014b54:	52                   	push   edx
c0014b55:	50                   	push   eax
c0014b56:	57                   	push   edi
c0014b57:	e8 ac 36 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	85 c0                	test   eax,eax
c0014b61:	0f 85 ef 00 00 00    	jne    c0014c56 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014b67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014b6a:	83 ec 0c             	sub    esp,0xc
c0014b6d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b71:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014b75:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b79:	0f af c2             	imul   eax,edx
c0014b7c:	50                   	push   eax
c0014b7d:	e8 16 a8 ff ff       	call   c000f398 <malloc>
c0014b82:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014b84:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b8b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b8f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b93:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b97:	0f af c2             	imul   eax,edx
c0014b9a:	99                   	cdq    
c0014b9b:	52                   	push   edx
c0014b9c:	50                   	push   eax
c0014b9d:	57                   	push   edi
c0014b9e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ba1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014ba4:	83 c4 20             	add    esp,0x20
c0014ba7:	85 c0                	test   eax,eax
c0014ba9:	0f 84 a7 00 00 00    	je     c0014c56 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014baf:	31 d2                	xor    edx,edx
c0014bb1:	51                   	push   ecx
c0014bb2:	52                   	push   edx
c0014bb3:	50                   	push   eax
c0014bb4:	57                   	push   edi
c0014bb5:	e8 4e 36 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014bba:	83 c4 10             	add    esp,0x10
c0014bbd:	85 c0                	test   eax,eax
c0014bbf:	0f 85 91 00 00 00    	jne    c0014c56 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014bc5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014bc9:	83 ec 0c             	sub    esp,0xc
c0014bcc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014bd0:	0f af c2             	imul   eax,edx
c0014bd3:	50                   	push   eax
c0014bd4:	e8 bf a7 ff ff       	call   c000f398 <malloc>
c0014bd9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014bdb:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014be6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014bea:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014bee:	0f af c2             	imul   eax,edx
c0014bf1:	99                   	cdq    
c0014bf2:	52                   	push   edx
c0014bf3:	50                   	push   eax
c0014bf4:	57                   	push   edi
c0014bf5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bf8:	83 c4 20             	add    esp,0x20
c0014bfb:	31 c9                	xor    ecx,ecx
c0014bfd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c05:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014c09:	0f b7 e9             	movzx  ebp,cx
c0014c0c:	0f 83 86 00 00 00    	jae    c0014c98 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014c12:	c1 e5 05             	shl    ebp,0x5
c0014c15:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014c19:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014c1d:	75 73                	jne    c0014c92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014c1f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c26:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014c29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c2d:	52                   	push   edx
c0014c2e:	31 d2                	xor    edx,edx
c0014c30:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014c33:	52                   	push   edx
c0014c34:	50                   	push   eax
c0014c35:	57                   	push   edi
c0014c36:	e8 cd 35 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014c3b:	83 c4 10             	add    esp,0x10
c0014c3e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014c42:	85 c0                	test   eax,eax
c0014c44:	74 17                	je     c0014c5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014c46:	83 ec 0c             	sub    esp,0xc
c0014c49:	68 e7 3e 02 c0       	push   0xc0023ee7
c0014c4e:	e8 fb 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014c53:	83 c4 10             	add    esp,0x10
c0014c56:	31 c0                	xor    eax,eax
c0014c58:	e9 8b 00 00 00       	jmp    c0014ce8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014c5d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014c61:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014c64:	83 ec 0c             	sub    esp,0xc
c0014c67:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014c6a:	50                   	push   eax
c0014c6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c6f:	56                   	push   esi
c0014c70:	57                   	push   edi
c0014c71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014c75:	e8 cc fb ff ff       	call   c0014846 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014c7a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014c7e:	83 c4 20             	add    esp,0x20
c0014c81:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014c85:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014c89:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014c8e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014c92:	41                   	inc    ecx
c0014c93:	e9 6d ff ff ff       	jmp    c0014c05 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014c98:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014c9c:	83 ec 0c             	sub    esp,0xc
c0014c9f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014ca3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ca7:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014cad:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014cb3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014cb8:	05 00 10 00 00       	add    eax,0x1000
c0014cbd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cc4:	e8 df a6 ff ff       	call   c000f3a8 <free>
c0014cc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ccc:	e8 d7 a6 ff ff       	call   c000f3a8 <free>
c0014cd1:	58                   	pop    eax
c0014cd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cd6:	e8 cd a6 ff ff       	call   c000f3a8 <free>
c0014cdb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014cde:	e8 c5 34 ff ff       	call   c00081a8 <File::close()>
c0014ce3:	83 c4 10             	add    esp,0x10
c0014ce6:	b0 01                	mov    al,0x1
c0014ce8:	83 c4 3c             	add    esp,0x3c
c0014ceb:	5b                   	pop    ebx
c0014cec:	5e                   	pop    esi
c0014ced:	5f                   	pop    edi
c0014cee:	5d                   	pop    ebp
c0014cef:	c3                   	ret    

c0014cf0 <Thr::runtimeReferenceHelper()>:
c0014cf0:	83 ec 18             	sub    esp,0x18
c0014cf3:	68 ef 3e 02 c0       	push   0xc0023eef
c0014cf8:	e8 51 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014cfd:	fa                   	cli    
c0014cfe:	83 c4 10             	add    esp,0x10
c0014d01:	eb fe                	jmp    c0014d01 <Thr::runtimeReferenceHelper()+0x11>

c0014d03 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014d03:	57                   	push   edi
c0014d04:	56                   	push   esi
c0014d05:	53                   	push   ebx
c0014d06:	31 db                	xor    ebx,ebx
c0014d08:	39 1d 00 da 02 c0    	cmp    DWORD PTR ds:0xc002da00,ebx
c0014d0e:	7e 3c                	jle    c0014d4c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014d10:	8b 34 9d 80 d9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2680]
c0014d17:	31 ff                	xor    edi,edi
c0014d19:	39 3c 9d 80 d8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2780],edi
c0014d20:	7e 27                	jle    c0014d49 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014d22:	50                   	push   eax
c0014d23:	50                   	push   eax
c0014d24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d28:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d2a:	03 04 9d 00 d9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2700]
c0014d31:	50                   	push   eax
c0014d32:	e8 49 ba fe ff       	call   c0000780 <strcmp>
c0014d37:	83 c4 10             	add    esp,0x10
c0014d3a:	85 c0                	test   eax,eax
c0014d3c:	75 05                	jne    c0014d43 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014d3e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014d41:	eb 0b                	jmp    c0014d4e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014d43:	83 c6 10             	add    esi,0x10
c0014d46:	47                   	inc    edi
c0014d47:	eb d0                	jmp    c0014d19 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014d49:	43                   	inc    ebx
c0014d4a:	eb bc                	jmp    c0014d08 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014d4c:	31 c0                	xor    eax,eax
c0014d4e:	5b                   	pop    ebx
c0014d4f:	5e                   	pop    esi
c0014d50:	5f                   	pop    edi
c0014d51:	c3                   	ret    

c0014d52 <Thr::loadKernelSymbolTable(char const*)>:
c0014d52:	55                   	push   ebp
c0014d53:	57                   	push   edi
c0014d54:	56                   	push   esi
c0014d55:	53                   	push   ebx
c0014d56:	83 ec 68             	sub    esp,0x68
c0014d59:	68 14 01 00 00       	push   0x114
c0014d5e:	8b 35 58 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da58
c0014d64:	e8 2f a6 ff ff       	call   c000f398 <malloc>
c0014d69:	83 c4 0c             	add    esp,0xc
c0014d6c:	56                   	push   esi
c0014d6d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014d71:	89 c3                	mov    ebx,eax
c0014d73:	50                   	push   eax
c0014d74:	e8 b3 33 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014d79:	5e                   	pop    esi
c0014d7a:	5f                   	pop    edi
c0014d7b:	6a 01                	push   0x1
c0014d7d:	53                   	push   ebx
c0014d7e:	e8 c7 33 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014d83:	83 c4 10             	add    esp,0x10
c0014d86:	85 c0                	test   eax,eax
c0014d88:	74 0a                	je     c0014d94 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014d8a:	83 ec 0c             	sub    esp,0xc
c0014d8d:	68 11 3f 02 c0       	push   0xc0023f11
c0014d92:	eb 34                	jmp    c0014dc8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014d94:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014d9c:	83 ec 0c             	sub    esp,0xc
c0014d9f:	6a 34                	push   0x34
c0014da1:	e8 f2 a5 ff ff       	call   c000f398 <malloc>
c0014da6:	59                   	pop    ecx
c0014da7:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014dab:	89 c7                	mov    edi,eax
c0014dad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014daf:	56                   	push   esi
c0014db0:	57                   	push   edi
c0014db1:	6a 00                	push   0x0
c0014db3:	6a 34                	push   0x34
c0014db5:	53                   	push   ebx
c0014db6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014db9:	83 c4 20             	add    esp,0x20
c0014dbc:	85 c0                	test   eax,eax
c0014dbe:	74 17                	je     c0014dd7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014dc0:	83 ec 0c             	sub    esp,0xc
c0014dc3:	68 28 3f 02 c0       	push   0xc0023f28
c0014dc8:	e8 11 a9 ff ff       	call   c000f6de <KePanic(char const*)>
c0014dcd:	83 c4 10             	add    esp,0x10
c0014dd0:	31 c0                	xor    eax,eax
c0014dd2:	e9 31 02 00 00       	jmp    c0015008 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014dd7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014ddd:	75 e1                	jne    c0014dc0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014ddf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014de2:	85 c0                	test   eax,eax
c0014de4:	74 da                	je     c0014dc0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014de6:	52                   	push   edx
c0014de7:	31 d2                	xor    edx,edx
c0014de9:	52                   	push   edx
c0014dea:	50                   	push   eax
c0014deb:	53                   	push   ebx
c0014dec:	e8 17 34 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014df1:	83 c4 10             	add    esp,0x10
c0014df4:	85 c0                	test   eax,eax
c0014df6:	75 c8                	jne    c0014dc0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014df8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014dfc:	83 ec 0c             	sub    esp,0xc
c0014dff:	31 ed                	xor    ebp,ebp
c0014e01:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e05:	0f af c2             	imul   eax,edx
c0014e08:	50                   	push   eax
c0014e09:	e8 8a a5 ff ff       	call   c000f398 <malloc>
c0014e0e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e10:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e1b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014e1f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e23:	0f af c2             	imul   eax,edx
c0014e26:	99                   	cdq    
c0014e27:	52                   	push   edx
c0014e28:	50                   	push   eax
c0014e29:	53                   	push   ebx
c0014e2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e2d:	83 c4 20             	add    esp,0x20
c0014e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e38:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014e40:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014e48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e50:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014e54:	0f b7 f5             	movzx  esi,bp
c0014e57:	0f 83 a7 00 00 00    	jae    c0014f04 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014e5d:	6b f6 28             	imul   esi,esi,0x28
c0014e60:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014e64:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014e67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e6b:	50                   	push   eax
c0014e6c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014e70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e74:	8b 16                	mov    edx,DWORD PTR [esi]
c0014e76:	6b c0 28             	imul   eax,eax,0x28
c0014e79:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014e7d:	89 d0                	mov    eax,edx
c0014e7f:	31 d2                	xor    edx,edx
c0014e81:	52                   	push   edx
c0014e82:	50                   	push   eax
c0014e83:	53                   	push   ebx
c0014e84:	e8 7f 33 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014e89:	83 c4 0c             	add    esp,0xc
c0014e8c:	6a 20                	push   0x20
c0014e8e:	6a 00                	push   0x0
c0014e90:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e94:	52                   	push   edx
c0014e95:	e8 56 b6 fe ff       	call   c00004f0 <memset>
c0014e9a:	58                   	pop    eax
c0014e9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e9d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014ea1:	51                   	push   ecx
c0014ea2:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014ea6:	52                   	push   edx
c0014ea7:	6a 00                	push   0x0
c0014ea9:	6a 1f                	push   0x1f
c0014eab:	53                   	push   ebx
c0014eac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eaf:	83 c4 18             	add    esp,0x18
c0014eb2:	68 3f 3f 02 c0       	push   0xc0023f3f
c0014eb7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014ebb:	52                   	push   edx
c0014ebc:	e8 bf b8 fe ff       	call   c0000780 <strcmp>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	85 c0                	test   eax,eax
c0014ec6:	75 0f                	jne    c0014ed7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014ec8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ecb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ecf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ed3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ed7:	50                   	push   eax
c0014ed8:	50                   	push   eax
c0014ed9:	68 47 3f 02 c0       	push   0xc0023f47
c0014ede:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014ee2:	50                   	push   eax
c0014ee3:	e8 98 b8 fe ff       	call   c0000780 <strcmp>
c0014ee8:	83 c4 10             	add    esp,0x10
c0014eeb:	85 c0                	test   eax,eax
c0014eed:	75 0f                	jne    c0014efe <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014eef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ef2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ef6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014efa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014efe:	45                   	inc    ebp
c0014eff:	e9 4c ff ff ff       	jmp    c0014e50 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014f04:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014f09:	75 10                	jne    c0014f1b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014f0b:	83 ec 0c             	sub    esp,0xc
c0014f0e:	68 4f 3f 02 c0       	push   0xc0023f4f
c0014f13:	e8 c6 a7 ff ff       	call   c000f6de <KePanic(char const*)>
c0014f18:	83 c4 10             	add    esp,0x10
c0014f1b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014f20:	75 10                	jne    c0014f32 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014f22:	83 ec 0c             	sub    esp,0xc
c0014f25:	68 4f 3f 02 c0       	push   0xc0023f4f
c0014f2a:	e8 af a7 ff ff       	call   c000f6de <KePanic(char const*)>
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	50                   	push   eax
c0014f33:	31 d2                	xor    edx,edx
c0014f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f39:	52                   	push   edx
c0014f3a:	50                   	push   eax
c0014f3b:	53                   	push   ebx
c0014f3c:	e8 c7 32 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014f41:	5a                   	pop    edx
c0014f42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f46:	e8 4d a4 ff ff       	call   c000f398 <malloc>
c0014f4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f4f:	31 c9                	xor    ecx,ecx
c0014f51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f57:	5e                   	pop    esi
c0014f58:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014f5c:	55                   	push   ebp
c0014f5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f61:	51                   	push   ecx
c0014f62:	52                   	push   edx
c0014f63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014f67:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014f6b:	53                   	push   ebx
c0014f6c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f6f:	83 c4 14             	add    esp,0x14
c0014f72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f76:	e8 1d a4 ff ff       	call   c000f398 <malloc>
c0014f7b:	89 c6                	mov    esi,eax
c0014f7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f82:	56                   	push   esi
c0014f83:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f87:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014f8b:	51                   	push   ecx
c0014f8c:	52                   	push   edx
c0014f8d:	53                   	push   ebx
c0014f8e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f95:	83 c4 1c             	add    esp,0x1c
c0014f98:	8b 15 00 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da00
c0014f9e:	c1 e8 04             	shr    eax,0x4
c0014fa1:	89 04 95 80 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2780],eax
c0014fa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014fac:	31 d2                	xor    edx,edx
c0014fae:	52                   	push   edx
c0014faf:	50                   	push   eax
c0014fb0:	53                   	push   ebx
c0014fb1:	e8 52 32 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0014fb6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fb8:	31 d2                	xor    edx,edx
c0014fba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fbd:	56                   	push   esi
c0014fbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014fc2:	52                   	push   edx
c0014fc3:	50                   	push   eax
c0014fc4:	53                   	push   ebx
c0014fc5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fc8:	83 c4 14             	add    esp,0x14
c0014fcb:	53                   	push   ebx
c0014fcc:	e8 d7 31 ff ff       	call   c00081a8 <File::close()>
c0014fd1:	5d                   	pop    ebp
c0014fd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fd6:	e8 cd a3 ff ff       	call   c000f3a8 <free>
c0014fdb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fde:	e8 c5 a3 ff ff       	call   c000f3a8 <free>
c0014fe3:	a1 00 da 02 c0       	mov    eax,ds:0xc002da00
c0014fe8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014fec:	83 c4 10             	add    esp,0x10
c0014fef:	89 34 85 00 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2700],esi
c0014ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0014ff9:	89 0c 85 80 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2680],ecx
c0015000:	b0 01                	mov    al,0x1
c0015002:	89 15 00 da 02 c0    	mov    DWORD PTR ds:0xc002da00,edx
c0015008:	83 c4 5c             	add    esp,0x5c
c001500b:	5b                   	pop    ebx
c001500c:	5e                   	pop    esi
c001500d:	5f                   	pop    edi
c001500e:	5d                   	pop    ebp
c001500f:	c3                   	ret    

c0015010 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015010:	55                   	push   ebp
c0015011:	57                   	push   edi
c0015012:	56                   	push   esi
c0015013:	53                   	push   ebx
c0015014:	81 ec 68 03 00 00    	sub    esp,0x368
c001501a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015021:	8b 35 58 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da58
c0015027:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001502b:	68 14 01 00 00       	push   0x114
c0015030:	e8 63 a3 ff ff       	call   c000f398 <malloc>
c0015035:	83 c4 0c             	add    esp,0xc
c0015038:	56                   	push   esi
c0015039:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015040:	50                   	push   eax
c0015041:	89 c3                	mov    ebx,eax
c0015043:	e8 e4 30 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015048:	5f                   	pop    edi
c0015049:	5d                   	pop    ebp
c001504a:	6a 01                	push   0x1
c001504c:	53                   	push   ebx
c001504d:	e8 f8 30 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0015052:	83 c4 10             	add    esp,0x10
c0015055:	85 c0                	test   eax,eax
c0015057:	0f 85 b3 06 00 00    	jne    c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001505d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015065:	83 ec 0c             	sub    esp,0xc
c0015068:	6a 34                	push   0x34
c001506a:	e8 29 a3 ff ff       	call   c000f398 <malloc>
c001506f:	5e                   	pop    esi
c0015070:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015074:	89 c5                	mov    ebp,eax
c0015076:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015078:	56                   	push   esi
c0015079:	55                   	push   ebp
c001507a:	6a 00                	push   0x0
c001507c:	6a 34                	push   0x34
c001507e:	53                   	push   ebx
c001507f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015082:	83 c4 20             	add    esp,0x20
c0015085:	85 c0                	test   eax,eax
c0015087:	0f 85 83 06 00 00    	jne    c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001508d:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0015094:	0f 85 76 06 00 00    	jne    c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001509a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001509d:	85 c0                	test   eax,eax
c001509f:	0f 84 6b 06 00 00    	je     c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00150a5:	31 d2                	xor    edx,edx
c00150a7:	51                   	push   ecx
c00150a8:	52                   	push   edx
c00150a9:	50                   	push   eax
c00150aa:	53                   	push   ebx
c00150ab:	e8 58 31 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00150b0:	83 c4 10             	add    esp,0x10
c00150b3:	85 c0                	test   eax,eax
c00150b5:	0f 85 55 06 00 00    	jne    c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00150bb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00150be:	83 ec 0c             	sub    esp,0xc
c00150c1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00150c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00150c9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00150cd:	0f af c2             	imul   eax,edx
c00150d0:	50                   	push   eax
c00150d1:	e8 c2 a2 ff ff       	call   c000f398 <malloc>
c00150d6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00150d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00150db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150e3:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00150e7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00150eb:	0f af c2             	imul   eax,edx
c00150ee:	99                   	cdq    
c00150ef:	52                   	push   edx
c00150f0:	50                   	push   eax
c00150f1:	53                   	push   ebx
c00150f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150f5:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00150f8:	83 c4 20             	add    esp,0x20
c00150fb:	85 c0                	test   eax,eax
c00150fd:	0f 84 0d 06 00 00    	je     c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015103:	52                   	push   edx
c0015104:	31 d2                	xor    edx,edx
c0015106:	52                   	push   edx
c0015107:	50                   	push   eax
c0015108:	53                   	push   ebx
c0015109:	e8 fa 30 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	85 c0                	test   eax,eax
c0015113:	0f 85 f7 05 00 00    	jne    c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015119:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001511d:	83 ec 0c             	sub    esp,0xc
c0015120:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015124:	0f af c2             	imul   eax,edx
c0015127:	50                   	push   eax
c0015128:	e8 6b a2 ff ff       	call   c000f398 <malloc>
c001512d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001512f:	89 34 24             	mov    DWORD PTR [esp],esi
c0015132:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015136:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001513a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001513e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015142:	0f af c2             	imul   eax,edx
c0015145:	99                   	cdq    
c0015146:	52                   	push   edx
c0015147:	50                   	push   eax
c0015148:	53                   	push   ebx
c0015149:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001514c:	83 c4 20             	add    esp,0x20
c001514f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015155:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015158:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001515c:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015160:	73 78                	jae    c00151da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015162:	c1 e7 05             	shl    edi,0x5
c0015165:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015169:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001516c:	75 63                	jne    c00151d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001516e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015171:	31 d2                	xor    edx,edx
c0015173:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015176:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001517a:	50                   	push   eax
c001517b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001517e:	52                   	push   edx
c001517f:	50                   	push   eax
c0015180:	53                   	push   ebx
c0015181:	e8 82 30 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015186:	83 c4 10             	add    esp,0x10
c0015189:	85 c0                	test   eax,eax
c001518b:	0f 85 7f 05 00 00    	jne    c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015191:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015198:	83 ec 0c             	sub    esp,0xc
c001519b:	31 d2                	xor    edx,edx
c001519d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00151a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151a3:	01 c6                	add    esi,eax
c00151a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151ac:	50                   	push   eax
c00151ad:	56                   	push   esi
c00151ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151b2:	52                   	push   edx
c00151b3:	50                   	push   eax
c00151b4:	53                   	push   ebx
c00151b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151b8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00151bb:	83 c4 1c             	add    esp,0x1c
c00151be:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00151c1:	50                   	push   eax
c00151c2:	6a 00                	push   0x0
c00151c4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00151c8:	56                   	push   esi
c00151c9:	e8 22 b3 fe ff       	call   c00004f0 <memset>
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	66 ff 04 24          	inc    WORD PTR [esp]
c00151d5:	e9 7b ff ff ff       	jmp    c0015155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00151da:	50                   	push   eax
c00151db:	68 00 01 00 00       	push   0x100
c00151e0:	6a 00                	push   0x0
c00151e2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00151e6:	50                   	push   eax
c00151e7:	e8 04 b3 fe ff       	call   c00004f0 <memset>
c00151ec:	83 c4 0c             	add    esp,0xc
c00151ef:	68 00 01 00 00       	push   0x100
c00151f4:	6a 00                	push   0x0
c00151f6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00151fd:	50                   	push   eax
c00151fe:	e8 ed b2 fe ff       	call   c00004f0 <memset>
c0015203:	83 c4 10             	add    esp,0x10
c0015206:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c001520d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015214:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001521c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015224:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001522c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015234:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015238:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001523c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015241:	0f 83 16 01 00 00    	jae    c001535d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015247:	6b ff 28             	imul   edi,edi,0x28
c001524a:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001524e:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015251:	51                   	push   ecx
c0015252:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015256:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001525a:	8b 07                	mov    eax,DWORD PTR [edi]
c001525c:	6b d2 28             	imul   edx,edx,0x28
c001525f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015263:	31 d2                	xor    edx,edx
c0015265:	52                   	push   edx
c0015266:	50                   	push   eax
c0015267:	53                   	push   ebx
c0015268:	e8 9b 2f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001526d:	83 c4 0c             	add    esp,0xc
c0015270:	6a 20                	push   0x20
c0015272:	6a 00                	push   0x0
c0015274:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001527b:	51                   	push   ecx
c001527c:	e8 6f b2 fe ff       	call   c00004f0 <memset>
c0015281:	58                   	pop    eax
c0015282:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015284:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015288:	52                   	push   edx
c0015289:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015290:	51                   	push   ecx
c0015291:	6a 00                	push   0x0
c0015293:	6a 1f                	push   0x1f
c0015295:	53                   	push   ebx
c0015296:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015299:	83 c4 1c             	add    esp,0x1c
c001529c:	6a 09                	push   0x9
c001529e:	68 69 3f 02 c0       	push   0xc0023f69
c00152a3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152aa:	51                   	push   ecx
c00152ab:	e8 d0 b0 fe ff       	call   c0000380 <memcmp>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	85 c0                	test   eax,eax
c00152b5:	75 1a                	jne    c00152d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00152b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00152ba:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00152bd:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00152c1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00152c4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00152cb:	89 d0                	mov    eax,edx
c00152cd:	40                   	inc    eax
c00152ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00152d1:	52                   	push   edx
c00152d2:	6a 09                	push   0x9
c00152d4:	68 73 3f 02 c0       	push   0xc0023f73
c00152d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152e0:	50                   	push   eax
c00152e1:	e8 9a b0 fe ff       	call   c0000380 <memcmp>
c00152e6:	83 c4 10             	add    esp,0x10
c00152e9:	85 c0                	test   eax,eax
c00152eb:	75 1a                	jne    c0015307 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00152ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00152f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00152f3:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00152f7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00152fa:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015301:	89 c8                	mov    eax,ecx
c0015303:	40                   	inc    eax
c0015304:	89 04 24             	mov    DWORD PTR [esp],eax
c0015307:	50                   	push   eax
c0015308:	50                   	push   eax
c0015309:	68 3f 3f 02 c0       	push   0xc0023f3f
c001530e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015315:	50                   	push   eax
c0015316:	e8 65 b4 fe ff       	call   c0000780 <strcmp>
c001531b:	83 c4 10             	add    esp,0x10
c001531e:	85 c0                	test   eax,eax
c0015320:	75 0b                	jne    c001532d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015322:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0015326:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015329:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001532d:	50                   	push   eax
c001532e:	50                   	push   eax
c001532f:	68 47 3f 02 c0       	push   0xc0023f47
c0015334:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001533b:	50                   	push   eax
c001533c:	e8 3f b4 fe ff       	call   c0000780 <strcmp>
c0015341:	83 c4 10             	add    esp,0x10
c0015344:	85 c0                	test   eax,eax
c0015346:	75 0b                	jne    c0015353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015348:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001534c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001534f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015353:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015358:	e9 d7 fe ff ff       	jmp    c0015234 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001535d:	50                   	push   eax
c001535e:	31 d2                	xor    edx,edx
c0015360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015364:	52                   	push   edx
c0015365:	50                   	push   eax
c0015366:	53                   	push   ebx
c0015367:	e8 9c 2e ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001536c:	58                   	pop    eax
c001536d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015371:	e8 22 a0 ff ff       	call   c000f398 <malloc>
c0015376:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015378:	31 d2                	xor    edx,edx
c001537a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001537e:	58                   	pop    eax
c001537f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015383:	56                   	push   esi
c0015384:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001538c:	52                   	push   edx
c001538d:	50                   	push   eax
c001538e:	53                   	push   ebx
c001538f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015392:	83 c4 14             	add    esp,0x14
c0015395:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015399:	e8 fa 9f ff ff       	call   c000f398 <malloc>
c001539e:	31 d2                	xor    edx,edx
c00153a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00153a4:	83 c4 0c             	add    esp,0xc
c00153a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ab:	52                   	push   edx
c00153ac:	50                   	push   eax
c00153ad:	53                   	push   ebx
c00153ae:	e8 55 2e ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00153b3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00153b5:	31 d2                	xor    edx,edx
c00153b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00153ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00153be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153c2:	52                   	push   edx
c00153c3:	50                   	push   eax
c00153c4:	53                   	push   ebx
c00153c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153c8:	83 c4 20             	add    esp,0x20
c00153cb:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00153d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00153d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00153dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00153e0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00153e3:	0f 84 2b 03 00 00    	je     c0015714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00153e9:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00153f0:	31 d2                	xor    edx,edx
c00153f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00153f6:	c1 e8 03             	shr    eax,0x3
c00153f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00153fd:	51                   	push   ecx
c00153fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015402:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015406:	52                   	push   edx
c0015407:	50                   	push   eax
c0015408:	53                   	push   ebx
c0015409:	e8 fa 2d ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001540e:	5e                   	pop    esi
c001540f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015413:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001541a:	e8 79 9f ff ff       	call   c000f398 <malloc>
c001541f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015421:	31 d2                	xor    edx,edx
c0015423:	89 c7                	mov    edi,eax
c0015425:	58                   	pop    eax
c0015426:	8d 44 24 58          	lea    eax,[esp+0x58]
c001542a:	50                   	push   eax
c001542b:	57                   	push   edi
c001542c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015430:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015437:	52                   	push   edx
c0015438:	50                   	push   eax
c0015439:	53                   	push   ebx
c001543a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001543d:	83 c4 20             	add    esp,0x20
c0015440:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015448:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001544c:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015450:	0f 8d a5 02 00 00    	jge    c00156fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015456:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001545b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001545f:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015462:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015466:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001546a:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001546e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015472:	c1 e8 08             	shr    eax,0x8
c0015475:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015479:	89 c2                	mov    edx,eax
c001547b:	c1 e2 04             	shl    edx,0x4
c001547e:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015482:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015485:	85 f6                	test   esi,esi
c0015487:	0f 85 cf 00 00 00    	jne    c001555c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001548d:	83 ec 0c             	sub    esp,0xc
c0015490:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015498:	03 02                	add    eax,DWORD PTR [edx]
c001549a:	50                   	push   eax
c001549b:	e8 63 f8 ff ff       	call   c0014d03 <Thr::getAddressOfKernelSymbol(char const*)>
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00154a7:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00154ac:	85 c0                	test   eax,eax
c00154ae:	89 c6                	mov    esi,eax
c00154b0:	0f 85 a6 00 00 00    	jne    c001555c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00154b6:	83 ec 0c             	sub    esp,0xc
c00154b9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00154bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154c1:	03 02                	add    eax,DWORD PTR [edx]
c00154c3:	50                   	push   eax
c00154c4:	e8 9f ac ff ff       	call   c0010168 <KeResolveCompatibilitySymbol(char*)>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00154d0:	85 c0                	test   eax,eax
c00154d2:	89 c6                	mov    esi,eax
c00154d4:	0f 85 82 00 00 00    	jne    c001555c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00154da:	50                   	push   eax
c00154db:	50                   	push   eax
c00154dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154e0:	03 02                	add    eax,DWORD PTR [edx]
c00154e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00154e6:	50                   	push   eax
c00154e7:	68 7d 3f 02 c0       	push   0xc0023f7d
c00154ec:	e8 5d 1a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00154f1:	58                   	pop    eax
c00154f2:	5a                   	pop    edx
c00154f3:	68 97 3f 02 c0       	push   0xc0023f97
c00154f8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00154ff:	51                   	push   ecx
c0015500:	e8 4b b1 fe ff       	call   c0000650 <strcpy>
c0015505:	59                   	pop    ecx
c0015506:	58                   	pop    eax
c0015507:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001550b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001550f:	03 02                	add    eax,DWORD PTR [edx]
c0015511:	50                   	push   eax
c0015512:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015519:	51                   	push   ecx
c001551a:	e8 51 b3 fe ff       	call   c0000870 <strcat>
c001551f:	58                   	pop    eax
c0015520:	5a                   	pop    edx
c0015521:	68 31 40 02 c0       	push   0xc0024031
c0015526:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001552d:	51                   	push   ecx
c001552e:	e8 3d b3 fe ff       	call   c0000870 <strcat>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001553b:	0f 84 77 01 00 00    	je     c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015541:	83 ec 0c             	sub    esp,0xc
c0015544:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001554b:	51                   	push   ecx
c001554c:	e8 8d a1 ff ff       	call   c000f6de <KePanic(char const*)>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015558:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001555c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015561:	83 f8 01             	cmp    eax,0x1
c0015564:	0f 85 9b 00 00 00    	jne    c0015605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001556a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001556e:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015575:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0015579:	01 d0                	add    eax,edx
c001557b:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015583:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015587:	0f 94 c0             	sete   al
c001558a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015592:	0f 94 c1             	sete   cl
c0015595:	09 c1                	or     ecx,eax
c0015597:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001559b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00155a0:	0f b6 c9             	movzx  ecx,cl
c00155a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a5:	74 41                	je     c00155e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00155a7:	8d 14 06             	lea    edx,[esi+eax*1]
c00155aa:	85 c9                	test   ecx,ecx
c00155ac:	75 15                	jne    c00155c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00155ae:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00155b2:	66 83 f8 0c          	cmp    ax,0xc
c00155b6:	76 05                	jbe    c00155bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00155b8:	b8 0c 00 00 00       	mov    eax,0xc
c00155bd:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00155c1:	76 37                	jbe    c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00155c3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00155c8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00155cc:	0f 84 e6 00 00 00    	je     c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00155d2:	83 ec 0c             	sub    esp,0xc
c00155d5:	68 ae 3f 02 c0       	push   0xc0023fae
c00155da:	e8 ff a0 ff ff       	call   c000f6de <KePanic(char const*)>
c00155df:	83 c4 10             	add    esp,0x10
c00155e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155e6:	eb 12                	jmp    c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00155e8:	01 c2                	add    edx,eax
c00155ea:	85 c9                	test   ecx,ecx
c00155ec:	75 0c                	jne    c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00155ee:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00155f2:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00155f6:	77 02                	ja     c00155fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00155f8:	01 f2                	add    edx,esi
c00155fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00155fe:	89 10                	mov    DWORD PTR [eax],edx
c0015600:	e9 ed 00 00 00       	jmp    c00156f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015605:	83 f8 02             	cmp    eax,0x2
c0015608:	0f 85 81 00 00 00    	jne    c001568f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001560e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015615:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015619:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001561d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015625:	74 21                	je     c0015648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015627:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001562f:	74 17                	je     c0015648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015631:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015635:	ba 0a 00 00 00       	mov    edx,0xa
c001563a:	83 f9 0e             	cmp    ecx,0xe
c001563d:	77 03                	ja     c0015642 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001563f:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015642:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015646:	76 1f                	jbe    c0015667 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015648:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001564d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015651:	74 65                	je     c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015653:	83 ec 0c             	sub    esp,0xc
c0015656:	68 ca 3f 02 c0       	push   0xc0023fca
c001565b:	e8 7e a0 ff ff       	call   c000f6de <KePanic(char const*)>
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015667:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001566c:	8b 10                	mov    edx,DWORD PTR [eax]
c001566e:	74 15                	je     c0015685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015670:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015674:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001567b:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001567f:	01 d1                	add    ecx,edx
c0015681:	01 ce                	add    esi,ecx
c0015683:	eb 06                	jmp    c001568b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015685:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015689:	01 d6                	add    esi,edx
c001568b:	89 30                	mov    DWORD PTR [eax],esi
c001568d:	eb 63                	jmp    c00156f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001568f:	56                   	push   esi
c0015690:	56                   	push   esi
c0015691:	50                   	push   eax
c0015692:	68 e6 3f 02 c0       	push   0xc0023fe6
c0015697:	e8 b2 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00156a4:	74 12                	je     c00156b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00156a6:	83 ec 0c             	sub    esp,0xc
c00156a9:	68 f1 3f 02 c0       	push   0xc0023ff1
c00156ae:	e8 2b a0 ff ff       	call   c000f6de <KePanic(char const*)>
c00156b3:	83 c4 10             	add    esp,0x10
c00156b6:	eb 3a                	jmp    c00156f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00156b8:	83 ec 0c             	sub    esp,0xc
c00156bb:	53                   	push   ebx
c00156bc:	e8 e7 2a ff ff       	call   c00081a8 <File::close()>
c00156c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156cc:	e8 d7 9c ff ff       	call   c000f3a8 <free>
c00156d1:	59                   	pop    ecx
c00156d2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00156d6:	e8 cd 9c ff ff       	call   c000f3a8 <free>
c00156db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156de:	e8 c5 9c ff ff       	call   c000f3a8 <free>
c00156e3:	5b                   	pop    ebx
c00156e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00156e8:	e8 bb 9c ff ff       	call   c000f3a8 <free>
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	eb 1e                	jmp    c0015710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00156f2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00156f6:	e9 4d fd ff ff       	jmp    c0015448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00156fb:	83 ec 0c             	sub    esp,0xc
c00156fe:	57                   	push   edi
c00156ff:	e8 a4 9c ff ff       	call   c000f3a8 <free>
c0015704:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015708:	83 c4 10             	add    esp,0x10
c001570b:	e9 cc fc ff ff       	jmp    c00153dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015710:	31 c0                	xor    eax,eax
c0015712:	eb 32                	jmp    c0015746 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015714:	83 ec 0c             	sub    esp,0xc
c0015717:	53                   	push   ebx
c0015718:	e8 8b 2a ff ff       	call   c00081a8 <File::close()>
c001571d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001571f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015722:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015725:	58                   	pop    eax
c0015726:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001572a:	e8 79 9c ff ff       	call   c000f3a8 <free>
c001572f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015732:	e8 71 9c ff ff       	call   c000f3a8 <free>
c0015737:	5a                   	pop    edx
c0015738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001573c:	e8 67 9c ff ff       	call   c000f3a8 <free>
c0015741:	83 c4 10             	add    esp,0x10
c0015744:	b0 01                	mov    al,0x1
c0015746:	81 c4 5c 03 00 00    	add    esp,0x35c
c001574c:	5b                   	pop    ebx
c001574d:	5e                   	pop    esi
c001574e:	5f                   	pop    edi
c001574f:	5d                   	pop    ebp
c0015750:	c3                   	ret    

c0015751 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015751:	56                   	push   esi
c0015752:	31 d2                	xor    edx,edx
c0015754:	53                   	push   ebx
c0015755:	8b 1d 60 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d260
c001575b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001575f:	39 d3                	cmp    ebx,edx
c0015761:	7e 1b                	jle    c001577e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015763:	8b 04 95 80 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b80]
c001576a:	39 c8                	cmp    eax,ecx
c001576c:	77 0d                	ja     c001577b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001576e:	8b 34 95 80 d2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2d80]
c0015775:	01 c6                	add    esi,eax
c0015777:	39 ce                	cmp    esi,ecx
c0015779:	77 05                	ja     c0015780 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001577b:	42                   	inc    edx
c001577c:	eb e1                	jmp    c001575f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001577e:	31 c0                	xor    eax,eax
c0015780:	5b                   	pop    ebx
c0015781:	5e                   	pop    esi
c0015782:	c3                   	ret    

c0015783 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015783:	53                   	push   ebx
c0015784:	8b 1d 60 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d260
c001578a:	31 c0                	xor    eax,eax
c001578c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015790:	39 c3                	cmp    ebx,eax
c0015792:	7e 22                	jle    c00157b6 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015794:	8b 14 85 80 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b80]
c001579b:	39 ca                	cmp    edx,ecx
c001579d:	77 14                	ja     c00157b3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001579f:	03 14 85 80 d2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2d80]
c00157a6:	39 ca                	cmp    edx,ecx
c00157a8:	76 09                	jbe    c00157b3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00157aa:	8b 04 85 80 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2980]
c00157b1:	eb 05                	jmp    c00157b8 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00157b3:	40                   	inc    eax
c00157b4:	eb da                	jmp    c0015790 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00157b6:	31 c0                	xor    eax,eax
c00157b8:	5b                   	pop    ebx
c00157b9:	c3                   	ret    

c00157ba <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00157ba:	53                   	push   ebx
c00157bb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00157bf:	53                   	push   ebx
c00157c0:	e8 8c ff ff ff       	call   c0015751 <Thr::getDriverBaseFromAddress(unsigned long)>
c00157c5:	5a                   	pop    edx
c00157c6:	31 d2                	xor    edx,edx
c00157c8:	85 c0                	test   eax,eax
c00157ca:	74 04                	je     c00157d0 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00157cc:	89 da                	mov    edx,ebx
c00157ce:	29 c2                	sub    edx,eax
c00157d0:	5b                   	pop    ebx
c00157d1:	89 d0                	mov    eax,edx
c00157d3:	c3                   	ret    

c00157d4 <Thr::loadDLL(char const*, bool)>:
c00157d4:	55                   	push   ebp
c00157d5:	57                   	push   edi
c00157d6:	56                   	push   esi
c00157d7:	53                   	push   ebx
c00157d8:	81 ec 34 01 00 00    	sub    esp,0x134
c00157de:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00157e5:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00157ec:	56                   	push   esi
c00157ed:	68 09 40 02 c0       	push   0xc0024009
c00157f2:	e8 57 17 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00157f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00157fe:	e8 95 9b ff ff       	call   c000f398 <malloc>
c0015803:	83 c4 0c             	add    esp,0xc
c0015806:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c001580c:	56                   	push   esi
c001580d:	50                   	push   eax
c001580e:	89 c3                	mov    ebx,eax
c0015810:	e8 17 29 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015815:	83 c4 10             	add    esp,0x10
c0015818:	85 db                	test   ebx,ebx
c001581a:	75 3c                	jne    c0015858 <Thr::loadDLL(char const*, bool)+0x84>
c001581c:	89 e8                	mov    eax,ebp
c001581e:	84 c0                	test   al,al
c0015820:	0f 84 02 02 00 00    	je     c0015a28 <Thr::loadDLL(char const*, bool)+0x254>
c0015826:	50                   	push   eax
c0015827:	50                   	push   eax
c0015828:	68 1a 40 02 c0       	push   0xc002401a
c001582d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015831:	57                   	push   edi
c0015832:	e8 19 ae fe ff       	call   c0000650 <strcpy>
c0015837:	58                   	pop    eax
c0015838:	5a                   	pop    edx
c0015839:	56                   	push   esi
c001583a:	57                   	push   edi
c001583b:	e8 30 b0 fe ff       	call   c0000870 <strcat>
c0015840:	59                   	pop    ecx
c0015841:	58                   	pop    eax
c0015842:	68 31 40 02 c0       	push   0xc0024031
c0015847:	57                   	push   edi
c0015848:	e8 23 b0 fe ff       	call   c0000870 <strcat>
c001584d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015850:	e8 89 9e ff ff       	call   c000f6de <KePanic(char const*)>
c0015855:	83 c4 10             	add    esp,0x10
c0015858:	50                   	push   eax
c0015859:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001585d:	50                   	push   eax
c001585e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015862:	50                   	push   eax
c0015863:	53                   	push   ebx
c0015864:	e8 e3 2b ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0015869:	83 c4 10             	add    esp,0x10
c001586c:	85 db                	test   ebx,ebx
c001586e:	89 c7                	mov    edi,eax
c0015870:	74 0c                	je     c001587e <Thr::loadDLL(char const*, bool)+0xaa>
c0015872:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	53                   	push   ebx
c0015878:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001587b:	83 c4 10             	add    esp,0x10
c001587e:	83 ec 0c             	sub    esp,0xc
c0015881:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0015886:	50                   	push   eax
c0015887:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001588b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001588f:	57                   	push   edi
c0015890:	68 33 40 02 c0       	push   0xc0024033
c0015895:	e8 b4 16 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001589a:	83 c4 20             	add    esp,0x20
c001589d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00158a2:	75 0a                	jne    c00158ae <Thr::loadDLL(char const*, bool)+0xda>
c00158a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158a8:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00158ac:	75 3e                	jne    c00158ec <Thr::loadDLL(char const*, bool)+0x118>
c00158ae:	89 e8                	mov    eax,ebp
c00158b0:	31 db                	xor    ebx,ebx
c00158b2:	84 c0                	test   al,al
c00158b4:	0f 84 6e 01 00 00    	je     c0015a28 <Thr::loadDLL(char const*, bool)+0x254>
c00158ba:	50                   	push   eax
c00158bb:	50                   	push   eax
c00158bc:	68 54 40 02 c0       	push   0xc0024054
c00158c1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00158c5:	53                   	push   ebx
c00158c6:	e8 85 ad fe ff       	call   c0000650 <strcpy>
c00158cb:	58                   	pop    eax
c00158cc:	5a                   	pop    edx
c00158cd:	56                   	push   esi
c00158ce:	53                   	push   ebx
c00158cf:	e8 9c af fe ff       	call   c0000870 <strcat>
c00158d4:	59                   	pop    ecx
c00158d5:	5f                   	pop    edi
c00158d6:	68 31 40 02 c0       	push   0xc0024031
c00158db:	53                   	push   ebx
c00158dc:	e8 8f af fe ff       	call   c0000870 <strcat>
c00158e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158e4:	e8 f5 9d ff ff       	call   c000f6de <KePanic(char const*)>
c00158e9:	83 c4 10             	add    esp,0x10
c00158ec:	53                   	push   ebx
c00158ed:	6a 03                	push   0x3
c00158ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158f7:	05 ff 0f 00 00       	add    eax,0xfff
c00158fc:	83 d2 00             	adc    edx,0x0
c00158ff:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015903:	50                   	push   eax
c0015904:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001590a:	e8 6f d9 ff ff       	call   c001327e <VAS::allocatePages(int, int)>
c001590f:	89 c3                	mov    ebx,eax
c0015911:	58                   	pop    eax
c0015912:	5a                   	pop    edx
c0015913:	53                   	push   ebx
c0015914:	68 be 33 02 c0       	push   0xc00233be
c0015919:	e8 30 16 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001591e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015921:	e8 5a ac fe ff       	call   c0000580 <strlen>
c0015926:	8b 3d 60 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d260
c001592c:	40                   	inc    eax
c001592d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015930:	e8 63 9a ff ff       	call   c000f398 <malloc>
c0015935:	59                   	pop    ecx
c0015936:	89 04 bd 80 d6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2980],eax
c001593d:	a1 60 d2 02 c0       	mov    eax,ds:0xc002d260
c0015942:	5f                   	pop    edi
c0015943:	56                   	push   esi
c0015944:	ff 34 85 80 d6 02 c0 	push   DWORD PTR [eax*4-0x3ffd2980]
c001594b:	e8 00 ad fe ff       	call   c0000650 <strcpy>
c0015950:	a1 60 d2 02 c0       	mov    eax,ds:0xc002d260
c0015955:	89 1c 85 80 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2b80],ebx
c001595c:	8d 50 01             	lea    edx,[eax+0x1]
c001595f:	89 15 60 d2 02 c0    	mov    DWORD PTR ds:0xc002d260,edx
c0015965:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015969:	83 c4 0c             	add    esp,0xc
c001596c:	6a 01                	push   0x1
c001596e:	53                   	push   ebx
c001596f:	56                   	push   esi
c0015970:	89 14 85 80 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d80],edx
c0015977:	e8 94 f6 ff ff       	call   c0015010 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001597c:	83 c4 10             	add    esp,0x10
c001597f:	89 c7                	mov    edi,eax
c0015981:	89 f8                	mov    eax,edi
c0015983:	83 f0 01             	xor    eax,0x1
c0015986:	84 c0                	test   al,al
c0015988:	74 18                	je     c00159a2 <Thr::loadDLL(char const*, bool)+0x1ce>
c001598a:	89 e8                	mov    eax,ebp
c001598c:	84 c0                	test   al,al
c001598e:	74 12                	je     c00159a2 <Thr::loadDLL(char const*, bool)+0x1ce>
c0015990:	83 ec 0c             	sub    esp,0xc
c0015993:	68 6d 40 02 c0       	push   0xc002406d
c0015998:	e8 41 9d ff ff       	call   c000f6de <KePanic(char const*)>
c001599d:	83 c4 10             	add    esp,0x10
c00159a0:	eb 06                	jmp    c00159a8 <Thr::loadDLL(char const*, bool)+0x1d4>
c00159a2:	89 f8                	mov    eax,edi
c00159a4:	84 c0                	test   al,al
c00159a6:	75 10                	jne    c00159b8 <Thr::loadDLL(char const*, bool)+0x1e4>
c00159a8:	83 ec 0c             	sub    esp,0xc
c00159ab:	68 8c 40 02 c0       	push   0xc002408c
c00159b0:	e8 29 9d ff ff       	call   c000f6de <KePanic(char const*)>
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	31 f6                	xor    esi,esi
c00159ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00159c2:	05 ff 0f 00 00       	add    eax,0xfff
c00159c7:	83 d2 00             	adc    edx,0x0
c00159ca:	0f ac d0 0c          	shrd   eax,edx,0xc
c00159ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00159d2:	c1 ea 0c             	shr    edx,0xc
c00159d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00159d9:	ba 00 00 00 00       	mov    edx,0x0
c00159de:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00159e2:	89 d0                	mov    eax,edx
c00159e4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00159e8:	73 32                	jae    c0015a1c <Thr::loadDLL(char const*, bool)+0x248>
c00159ea:	50                   	push   eax
c00159eb:	50                   	push   eax
c00159ec:	89 f0                	mov    eax,esi
c00159ee:	c1 e0 0c             	shl    eax,0xc
c00159f1:	01 d8                	add    eax,ebx
c00159f3:	50                   	push   eax
c00159f4:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c00159fa:	e8 7d d3 ff ff       	call   c0012d7c <VAS::getPageTableEntry(unsigned long)>
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a04:	a8 60                	test   al,0x60
c0015a06:	75 11                	jne    c0015a19 <Thr::loadDLL(char const*, bool)+0x245>
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a10:	50                   	push   eax
c0015a11:	e8 59 9e ff ff       	call   c000f86f <Phys::freePage(unsigned long)>
c0015a16:	83 c4 10             	add    esp,0x10
c0015a19:	46                   	inc    esi
c0015a1a:	eb 9e                	jmp    c00159ba <Thr::loadDLL(char const*, bool)+0x1e6>
c0015a1c:	89 f8                	mov    eax,edi
c0015a1e:	84 c0                	test   al,al
c0015a20:	b8 00 00 00 00       	mov    eax,0x0
c0015a25:	0f 44 d8             	cmove  ebx,eax
c0015a28:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a2e:	89 d8                	mov    eax,ebx
c0015a30:	5b                   	pop    ebx
c0015a31:	5e                   	pop    esi
c0015a32:	5f                   	pop    edi
c0015a33:	5d                   	pop    ebp
c0015a34:	c3                   	ret    

c0015a35 <Thr::executeDLL(unsigned long, void*)>:
c0015a35:	56                   	push   esi
c0015a36:	53                   	push   ebx
c0015a37:	52                   	push   edx
c0015a38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a3c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015a40:	85 db                	test   ebx,ebx
c0015a42:	75 10                	jne    c0015a54 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	68 a8 40 02 c0       	push   0xc00240a8
c0015a4c:	e8 8d 9c ff ff       	call   c000f6de <KePanic(char const*)>
c0015a51:	83 c4 10             	add    esp,0x10
c0015a54:	50                   	push   eax
c0015a55:	50                   	push   eax
c0015a56:	53                   	push   ebx
c0015a57:	68 d2 40 02 c0       	push   0xc00240d2
c0015a5c:	e8 ed 14 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015a61:	89 d8                	mov    eax,ebx
c0015a63:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015a67:	83 c4 14             	add    esp,0x14
c0015a6a:	5b                   	pop    ebx
c0015a6b:	5e                   	pop    esi
c0015a6c:	ff e0                	jmp    eax

c0015a6e <KeProcessExec(Process*, char const*)>:
c0015a6e:	56                   	push   esi
c0015a6f:	53                   	push   ebx
c0015a70:	83 ec 04             	sub    esp,0x4
c0015a73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a77:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0015a7d:	85 f6                	test   esi,esi
c0015a7f:	74 16                	je     c0015a97 <KeProcessExec(Process*, char const*)+0x29>
c0015a81:	83 ec 0c             	sub    esp,0xc
c0015a84:	56                   	push   esi
c0015a85:	e8 84 d5 ff ff       	call   c001300e <VAS::~VAS()>
c0015a8a:	58                   	pop    eax
c0015a8b:	5a                   	pop    edx
c0015a8c:	6a 14                	push   0x14
c0015a8e:	56                   	push   esi
c0015a8f:	e8 7b 70 ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c0015a94:	83 c4 10             	add    esp,0x10
c0015a97:	83 ec 0c             	sub    esp,0xc
c0015a9a:	6a 14                	push   0x14
c0015a9c:	e8 f7 98 ff ff       	call   c000f398 <malloc>
c0015aa1:	89 c6                	mov    esi,eax
c0015aa3:	58                   	pop    eax
c0015aa4:	5a                   	pop    edx
c0015aa5:	6a 00                	push   0x0
c0015aa7:	56                   	push   esi
c0015aa8:	e8 0d da ff ff       	call   c00134ba <VAS::VAS(bool)>
c0015aad:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0015ab3:	59                   	pop    ecx
c0015ab4:	5e                   	pop    esi
c0015ab5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ab9:	50                   	push   eax
c0015aba:	53                   	push   ebx
c0015abb:	e8 11 f0 ff ff       	call   c0014ad1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015ac0:	83 c4 14             	add    esp,0x14
c0015ac3:	31 c0                	xor    eax,eax
c0015ac5:	5b                   	pop    ebx
c0015ac6:	5e                   	pop    esi
c0015ac7:	c3                   	ret    

c0015ac8 <userModeEntryPoint(void*)>:
c0015ac8:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0015ad0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0015ad5:	85 c0                	test   eax,eax
c0015ad7:	75 03                	jne    c0015adc <userModeEntryPoint(void*)+0x14>
c0015ad9:	fb                   	sti    
c0015ada:	66 90                	xchg   ax,ax
c0015adc:	fb                   	sti    
c0015add:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ae2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ae5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015aeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015aef:	e9 4b a7 fe ff       	jmp    c000023f <goToUsermode>

c0015af4 <changeTSS>:
c0015af4:	83 ec 14             	sub    esp,0x14
c0015af7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015afc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015aff:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015b04:	c1 e2 15             	shl    edx,0x15
c0015b07:	29 d0                	sub    eax,edx
c0015b09:	50                   	push   eax
c0015b0a:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0015b0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015b15:	05 68 11 00 00       	add    eax,0x1168
c0015b1a:	50                   	push   eax
c0015b1b:	e8 30 c8 ff ff       	call   c0012350 <TSS::setESP(unsigned long)>
c0015b20:	83 c4 1c             	add    esp,0x1c
c0015b23:	c3                   	ret    

c0015b24 <switchToThread(ThreadControlBlock*)>:
c0015b24:	57                   	push   edi
c0015b25:	8b 0d 2c da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da2c
c0015b2b:	56                   	push   esi
c0015b2c:	53                   	push   ebx
c0015b2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b31:	85 c9                	test   ecx,ecx
c0015b33:	0f 85 8b 00 00 00    	jne    c0015bc4 <switchToThread(ThreadControlBlock*)+0xa0>
c0015b39:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015b3d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015b43:	74 7b                	je     c0015bc0 <switchToThread(ThreadControlBlock*)+0x9c>
c0015b45:	b8 00 04 00 00       	mov    eax,0x400
c0015b4a:	29 d0                	sub    eax,edx
c0015b4c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015b4f:	d1 f8                	sar    eax,1
c0015b51:	01 d0                	add    eax,edx
c0015b53:	90                   	nop
c0015b54:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015b57:	e8 3f 38 00 00       	call   c001939b <HalQueryPerformanceCounter()>
c0015b5c:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0015b61:	89 c6                	mov    esi,eax
c0015b63:	89 d7                	mov    edi,edx
c0015b65:	2b 35 60 da 02 c0    	sub    esi,DWORD PTR ds:0xc002da60
c0015b6b:	a3 60 da 02 c0       	mov    ds:0xc002da60,eax
c0015b70:	1b 3d 64 da 02 c0    	sbb    edi,DWORD PTR ds:0xc002da64
c0015b76:	89 35 68 da 02 c0    	mov    DWORD PTR ds:0xc002da68,esi
c0015b7c:	89 15 74 da 02 c0    	mov    DWORD PTR ds:0xc002da74,edx
c0015b82:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015b88:	89 15 64 da 02 c0    	mov    DWORD PTR ds:0xc002da64,edx
c0015b8e:	89 3d 6c da 02 c0    	mov    DWORD PTR ds:0xc002da6c,edi
c0015b94:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015b97:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015b9a:	01 c6                	add    esi,eax
c0015b9c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015b9f:	11 d7                	adc    edi,edx
c0015ba1:	83 ec 0c             	sub    esp,0xc
c0015ba4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015ba7:	53                   	push   ebx
c0015ba8:	e8 ca a6 fe ff       	call   c0000277 <switchToThreadASM>
c0015bad:	0f 20 c0             	mov    eax,cr0
c0015bb0:	83 c8 08             	or     eax,0x8
c0015bb3:	0f 22 c0             	mov    cr0,eax
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	5b                   	pop    ebx
c0015bba:	5e                   	pop    esi
c0015bbb:	5f                   	pop    edi
c0015bbc:	c3                   	ret    
c0015bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015bc0:	31 c0                	xor    eax,eax
c0015bc2:	eb 90                	jmp    c0015b54 <switchToThread(ThreadControlBlock*)+0x30>
c0015bc4:	5b                   	pop    ebx
c0015bc5:	c7 05 28 da 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x1
c0015bcf:	5e                   	pop    esi
c0015bd0:	5f                   	pop    edi
c0015bd1:	c3                   	ret    
c0015bd2:	66 90                	xchg   ax,ax

c0015bd4 <Process::addArgs(char**)>:
c0015bd4:	57                   	push   edi
c0015bd5:	56                   	push   esi
c0015bd6:	53                   	push   ebx
c0015bd7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015bdb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015bdf:	85 f6                	test   esi,esi
c0015be1:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015beb:	74 4f                	je     c0015c3c <Process::addArgs(char**)+0x68>
c0015bed:	8b 06                	mov    eax,DWORD PTR [esi]
c0015bef:	85 c0                	test   eax,eax
c0015bf1:	74 49                	je     c0015c3c <Process::addArgs(char**)+0x68>
c0015bf3:	31 db                	xor    ebx,ebx
c0015bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf8:	83 ec 0c             	sub    esp,0xc
c0015bfb:	50                   	push   eax
c0015bfc:	e8 7f a9 fe ff       	call   c0000580 <strlen>
c0015c01:	83 c0 01             	add    eax,0x1
c0015c04:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c07:	e8 8c 97 ff ff       	call   c000f398 <malloc>
c0015c0c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015c13:	5a                   	pop    edx
c0015c14:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015c17:	83 c3 01             	add    ebx,0x1
c0015c1a:	59                   	pop    ecx
c0015c1b:	52                   	push   edx
c0015c1c:	50                   	push   eax
c0015c1d:	e8 2e aa fe ff       	call   c0000650 <strcpy>
c0015c22:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015c28:	83 c4 10             	add    esp,0x10
c0015c2b:	83 c1 01             	add    ecx,0x1
c0015c2e:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015c34:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015c37:	85 c0                	test   eax,eax
c0015c39:	75 bd                	jne    c0015bf8 <Process::addArgs(char**)+0x24>
c0015c3b:	90                   	nop
c0015c3c:	5b                   	pop    ebx
c0015c3d:	5e                   	pop    esi
c0015c3e:	5f                   	pop    edi
c0015c3f:	c3                   	ret    

c0015c40 <Process::Process(char const*, Process*, char**)>:
c0015c40:	56                   	push   esi
c0015c41:	53                   	push   ebx
c0015c42:	83 ec 14             	sub    esp,0x14
c0015c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c49:	05 0c 02 00 00       	add    eax,0x20c
c0015c4e:	bb 07 00 00 00       	mov    ebx,0x7
c0015c53:	89 c6                	mov    esi,eax
c0015c55:	8d 76 00             	lea    esi,[esi+0x0]
c0015c58:	85 db                	test   ebx,ebx
c0015c5a:	78 14                	js     c0015c70 <Process::Process(char const*, Process*, char**)+0x30>
c0015c5c:	83 ec 0c             	sub    esp,0xc
c0015c5f:	56                   	push   esi
c0015c60:	e8 db b8 00 00       	call   c0021540 <ThreadControlBlock::ThreadControlBlock()>
c0015c65:	83 c4 10             	add    esp,0x10
c0015c68:	83 c6 5f             	add    esi,0x5f
c0015c6b:	83 eb 01             	sub    ebx,0x1
c0015c6e:	eb e8                	jmp    c0015c58 <Process::Process(char const*, Process*, char**)+0x18>
c0015c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c74:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c7f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c86:	83 ec 0c             	sub    esp,0xc
c0015c89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c8d:	e8 7a 83 ff ff       	call   c000e00c <KeNewProcessEnv(Process*)>
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	89 c2                	mov    edx,eax
c0015c97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c9b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015cae:	a1 dc 59 02 c0       	mov    eax,ds:0xc00259dc
c0015cb3:	8d 50 01             	lea    edx,[eax+0x1]
c0015cb6:	89 15 dc 59 02 c0    	mov    DWORD PTR ds:0xc00259dc,edx
c0015cbc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015cc0:	89 02                	mov    DWORD PTR [edx],eax
c0015cc2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015cca:	83 ec 0c             	sub    esp,0xc
c0015ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015cd1:	e8 c2 96 ff ff       	call   c000f398 <malloc>
c0015cd6:	83 c4 10             	add    esp,0x10
c0015cd9:	89 c3                	mov    ebx,eax
c0015cdb:	83 ec 08             	sub    esp,0x8
c0015cde:	6a 00                	push   0x0
c0015ce0:	53                   	push   ebx
c0015ce1:	e8 d4 d7 ff ff       	call   c00134ba <VAS::VAS(bool)>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ced:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015cf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cf7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d09:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d0f:	e8 83 aa ff ff       	call   c0010797 <KeInitSignals()>
c0015d14:	89 c2                	mov    edx,eax
c0015d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d1a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d2a:	85 c0                	test   eax,eax
c0015d2c:	74 42                	je     c0015d70 <Process::Process(char const*, Process*, char**)+0x130>
c0015d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d32:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d38:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d42:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d4c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d5c:	05 0c 01 00 00       	add    eax,0x10c
c0015d61:	83 ec 08             	sub    esp,0x8
c0015d64:	52                   	push   edx
c0015d65:	50                   	push   eax
c0015d66:	e8 e5 a8 fe ff       	call   c0000650 <strcpy>
c0015d6b:	83 c4 10             	add    esp,0x10
c0015d6e:	eb 7c                	jmp    c0015dec <Process::Process(char const*, Process*, char**)+0x1ac>
c0015d70:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d7f:	e8 14 96 ff ff       	call   c000f398 <malloc>
c0015d84:	83 c4 10             	add    esp,0x10
c0015d87:	89 c3                	mov    ebx,eax
c0015d89:	83 ec 08             	sub    esp,0x8
c0015d8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d90:	53                   	push   ebx
c0015d91:	e8 da c2 ff ff       	call   c0012070 <VgaText::VgaText(char const*)>
c0015d96:	83 c4 10             	add    esp,0x10
c0015d99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d9d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015da7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dad:	83 ec 0c             	sub    esp,0xc
c0015db0:	50                   	push   eax
c0015db1:	e8 20 bb ff ff       	call   c00118d6 <addToTerminalCycle(VgaText*)>
c0015db6:	83 c4 10             	add    esp,0x10
c0015db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dbd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dc3:	83 ec 0c             	sub    esp,0xc
c0015dc6:	50                   	push   eax
c0015dc7:	e8 7b bd ff ff       	call   c0011b47 <setActiveTerminal(VgaText*)>
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dd3:	05 0c 01 00 00       	add    eax,0x10c
c0015dd8:	83 ec 08             	sub    esp,0x8
c0015ddb:	68 f1 40 02 c0       	push   0xc00240f1
c0015de0:	50                   	push   eax
c0015de1:	e8 6a a8 fe ff       	call   c0000650 <strcpy>
c0015de6:	83 c4 10             	add    esp,0x10
c0015de9:	8d 76 00             	lea    esi,[esi+0x0]
c0015dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015df0:	83 c0 0c             	add    eax,0xc
c0015df3:	83 ec 08             	sub    esp,0x8
c0015df6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dfa:	50                   	push   eax
c0015dfb:	e8 50 a8 fe ff       	call   c0000650 <strcpy>
c0015e00:	83 c4 10             	add    esp,0x10
c0015e03:	83 ec 08             	sub    esp,0x8
c0015e06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015e0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e0e:	e8 c1 fd ff ff       	call   c0015bd4 <Process::addArgs(char**)>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	83 ec 08             	sub    esp,0x8
c0015e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e21:	e8 ab ec ff ff       	call   c0014ad1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015e26:	83 c4 10             	add    esp,0x10
c0015e29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015e2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015e31:	83 f0 01             	xor    eax,0x1
c0015e34:	88 c2                	mov    dl,al
c0015e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e3a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e44:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e46:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015e4b:	52                   	push   edx
c0015e4c:	50                   	push   eax
c0015e4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e51:	68 48 41 02 c0       	push   0xc0024148
c0015e56:	e8 f3 10 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	90                   	nop
c0015e5f:	83 c4 14             	add    esp,0x14
c0015e62:	5b                   	pop    ebx
c0015e63:	5e                   	pop    esi
c0015e64:	c3                   	ret    
c0015e65:	90                   	nop
c0015e66:	66 90                	xchg   ax,ax

c0015e68 <Process::Process(bool, char const*, Process*, char**)>:
c0015e68:	56                   	push   esi
c0015e69:	53                   	push   ebx
c0015e6a:	83 ec 24             	sub    esp,0x24
c0015e6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e71:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015e75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e79:	05 0c 02 00 00       	add    eax,0x20c
c0015e7e:	bb 07 00 00 00       	mov    ebx,0x7
c0015e83:	89 c6                	mov    esi,eax
c0015e85:	8d 76 00             	lea    esi,[esi+0x0]
c0015e88:	85 db                	test   ebx,ebx
c0015e8a:	78 14                	js     c0015ea0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015e8c:	83 ec 0c             	sub    esp,0xc
c0015e8f:	56                   	push   esi
c0015e90:	e8 ab b6 00 00       	call   c0021540 <ThreadControlBlock::ThreadControlBlock()>
c0015e95:	83 c4 10             	add    esp,0x10
c0015e98:	83 c6 5f             	add    esi,0x5f
c0015e9b:	83 eb 01             	sub    ebx,0x1
c0015e9e:	eb e8                	jmp    c0015e88 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015ea0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ea4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015eab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eaf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015eb6:	83 ec 0c             	sub    esp,0xc
c0015eb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015ebd:	e8 4a 81 ff ff       	call   c000e00c <KeNewProcessEnv(Process*)>
c0015ec2:	83 c4 10             	add    esp,0x10
c0015ec5:	89 c2                	mov    edx,eax
c0015ec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ecb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ed5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015ede:	a1 dc 59 02 c0       	mov    eax,ds:0xc00259dc
c0015ee3:	8d 50 01             	lea    edx,[eax+0x1]
c0015ee6:	89 15 dc 59 02 c0    	mov    DWORD PTR ds:0xc00259dc,edx
c0015eec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ef0:	89 02                	mov    DWORD PTR [edx],eax
c0015ef2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015efa:	83 ec 0c             	sub    esp,0xc
c0015efd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f01:	e8 92 94 ff ff       	call   c000f398 <malloc>
c0015f06:	83 c4 10             	add    esp,0x10
c0015f09:	89 c3                	mov    ebx,eax
c0015f0b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015f10:	83 ec 08             	sub    esp,0x8
c0015f13:	50                   	push   eax
c0015f14:	53                   	push   ebx
c0015f15:	e8 a0 d5 ff ff       	call   c00134ba <VAS::VAS(bool)>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f21:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015f27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f2b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015f35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f39:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015f3d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015f43:	e8 4f a8 ff ff       	call   c0010797 <KeInitSignals()>
c0015f48:	89 c2                	mov    edx,eax
c0015f4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f4e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015f54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f58:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015f5e:	85 c0                	test   eax,eax
c0015f60:	74 42                	je     c0015fa4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015f62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f66:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015f6c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015f72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f76:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015f7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f80:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015f86:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015f8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f90:	05 0c 01 00 00       	add    eax,0x10c
c0015f95:	83 ec 08             	sub    esp,0x8
c0015f98:	52                   	push   edx
c0015f99:	50                   	push   eax
c0015f9a:	e8 b1 a6 fe ff       	call   c0000650 <strcpy>
c0015f9f:	83 c4 10             	add    esp,0x10
c0015fa2:	eb 7c                	jmp    c0016020 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0015fa4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015fac:	83 ec 0c             	sub    esp,0xc
c0015faf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015fb3:	e8 e0 93 ff ff       	call   c000f398 <malloc>
c0015fb8:	83 c4 10             	add    esp,0x10
c0015fbb:	89 c3                	mov    ebx,eax
c0015fbd:	83 ec 08             	sub    esp,0x8
c0015fc0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015fc4:	53                   	push   ebx
c0015fc5:	e8 a6 c0 ff ff       	call   c0012070 <VgaText::VgaText(char const*)>
c0015fca:	83 c4 10             	add    esp,0x10
c0015fcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fd1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fdb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fe1:	83 ec 0c             	sub    esp,0xc
c0015fe4:	50                   	push   eax
c0015fe5:	e8 ec b8 ff ff       	call   c00118d6 <addToTerminalCycle(VgaText*)>
c0015fea:	83 c4 10             	add    esp,0x10
c0015fed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ff1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ff7:	83 ec 0c             	sub    esp,0xc
c0015ffa:	50                   	push   eax
c0015ffb:	e8 47 bb ff ff       	call   c0011b47 <setActiveTerminal(VgaText*)>
c0016000:	83 c4 10             	add    esp,0x10
c0016003:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016007:	05 0c 01 00 00       	add    eax,0x10c
c001600c:	83 ec 08             	sub    esp,0x8
c001600f:	68 f1 40 02 c0       	push   0xc00240f1
c0016014:	50                   	push   eax
c0016015:	e8 36 a6 fe ff       	call   c0000650 <strcpy>
c001601a:	83 c4 10             	add    esp,0x10
c001601d:	8d 76 00             	lea    esi,[esi+0x0]
c0016020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016024:	83 c0 0c             	add    eax,0xc
c0016027:	83 ec 08             	sub    esp,0x8
c001602a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001602e:	50                   	push   eax
c001602f:	e8 1c a6 fe ff       	call   c0000650 <strcpy>
c0016034:	83 c4 10             	add    esp,0x10
c0016037:	83 ec 08             	sub    esp,0x8
c001603a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001603e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016042:	e8 8d fb ff ff       	call   c0015bd4 <Process::addArgs(char**)>
c0016047:	83 c4 10             	add    esp,0x10
c001604a:	90                   	nop
c001604b:	83 c4 24             	add    esp,0x24
c001604e:	5b                   	pop    ebx
c001604f:	5e                   	pop    esi
c0016050:	c3                   	ret    
c0016051:	8d 76 00             	lea    esi,[esi+0x0]

c0016054 <taskStartupFunction>:
c0016054:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016059:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001605c:	c3                   	ret    
c001605d:	8d 76 00             	lea    esi,[esi+0x0]

c0016060 <KeDisablePreemption()>:
c0016060:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c0016065:	85 c0                	test   eax,eax
c0016067:	75 13                	jne    c001607c <KeDisablePreemption()+0x1c>
c0016069:	8a 15 d4 b0 02 c0    	mov    dl,BYTE PTR ds:0xc002b0d4
c001606f:	c6 05 d4 b0 02 c0 00 	mov    BYTE PTR ds:0xc002b0d4,0x0
c0016076:	88 15 08 da 02 c0    	mov    BYTE PTR ds:0xc002da08,dl
c001607c:	83 c0 01             	add    eax,0x1
c001607f:	a3 0c da 02 c0       	mov    ds:0xc002da0c,eax
c0016084:	c3                   	ret    
c0016085:	8d 76 00             	lea    esi,[esi+0x0]

c0016088 <KeRestorePreemption()>:
c0016088:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c001608d:	83 e8 01             	sub    eax,0x1
c0016090:	a3 0c da 02 c0       	mov    ds:0xc002da0c,eax
c0016095:	75 0d                	jne    c00160a4 <KeRestorePreemption()+0x1c>
c0016097:	a0 08 da 02 c0       	mov    al,ds:0xc002da08
c001609c:	a2 d4 b0 02 c0       	mov    ds:0xc002b0d4,al
c00160a1:	8d 76 00             	lea    esi,[esi+0x0]
c00160a4:	c3                   	ret    
c00160a5:	90                   	nop
c00160a6:	66 90                	xchg   ax,ax

c00160a8 <Process::createThread(void (*)(void*), void*, int)>:
c00160a8:	57                   	push   edi
c00160a9:	31 c9                	xor    ecx,ecx
c00160ab:	56                   	push   esi
c00160ac:	53                   	push   ebx
c00160ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160b1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00160b8:	89 f2                	mov    edx,esi
c00160ba:	66 90                	xchg   ax,ax
c00160bc:	0f b7 c2             	movzx  eax,dx
c00160bf:	80 e2 01             	and    dl,0x1
c00160c2:	74 14                	je     c00160d8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00160c4:	d1 f8                	sar    eax,1
c00160c6:	83 c1 01             	add    ecx,0x1
c00160c9:	83 f9 10             	cmp    ecx,0x10
c00160cc:	89 c2                	mov    edx,eax
c00160ce:	75 ec                	jne    c00160bc <Process::createThread(void (*)(void*), void*, int)+0x14>
c00160d0:	31 db                	xor    ebx,ebx
c00160d2:	89 d8                	mov    eax,ebx
c00160d4:	5b                   	pop    ebx
c00160d5:	5e                   	pop    esi
c00160d6:	5f                   	pop    edi
c00160d7:	c3                   	ret    
c00160d8:	b8 01 00 00 00       	mov    eax,0x1
c00160dd:	d3 e0                	shl    eax,cl
c00160df:	09 c6                	or     esi,eax
c00160e1:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00160e8:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00160eb:	c1 e0 05             	shl    eax,0x5
c00160ee:	29 c8                	sub    eax,ecx
c00160f0:	01 d8                	add    eax,ebx
c00160f2:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00160f9:	75 0d                	jne    c0016108 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00160fb:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0016105:	8d 76 00             	lea    esi,[esi+0x0]
c0016108:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001610e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0016111:	83 ec 0c             	sub    esp,0xc
c0016114:	c1 e6 05             	shl    esi,0x5
c0016117:	29 ce                	sub    esi,ecx
c0016119:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001611c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001611f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0016125:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c001612b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0016131:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0016138:	c7 80 40 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x240],0x0
c0016142:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016148:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001614c:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0016152:	89 ca                	mov    edx,ecx
c0016154:	f7 da                	neg    edx
c0016156:	c1 e2 15             	shl    edx,0x15
c0016159:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001615f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016165:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0016169:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016173:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016179:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001617d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0016183:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001618d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016197:	68 00 01 00 00       	push   0x100
c001619c:	e8 f7 91 ff ff       	call   c000f398 <malloc>
c00161a1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00161a4:	58                   	pop    eax
c00161a5:	5a                   	pop    edx
c00161a6:	53                   	push   ebx
c00161a7:	68 4c da 02 c0       	push   0xc002da4c
c00161ac:	e8 3b af 00 00       	call   c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161b1:	83 c4 10             	add    esp,0x10
c00161b4:	89 d8                	mov    eax,ebx
c00161b6:	5b                   	pop    ebx
c00161b7:	5e                   	pop    esi
c00161b8:	5f                   	pop    edi
c00161b9:	c3                   	ret    
c00161ba:	66 90                	xchg   ax,ax

c00161bc <Process::createUserThread()>:
c00161bc:	83 ec 0c             	sub    esp,0xc
c00161bf:	68 80 00 00 00       	push   0x80
c00161c4:	6a 00                	push   0x0
c00161c6:	68 c8 5a 01 c0       	push   0xc0015ac8
c00161cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161cf:	50                   	push   eax
c00161d0:	e8 d3 fe ff ff       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c00161d5:	83 c4 1c             	add    esp,0x1c
c00161d8:	c3                   	ret    
c00161d9:	8d 76 00             	lea    esi,[esi+0x0]

c00161dc <setupMultitasking(void (*)())>:
c00161dc:	56                   	push   esi
c00161dd:	53                   	push   ebx
c00161de:	83 ec 04             	sub    esp,0x4
c00161e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161e5:	eb 11                	jmp    c00161f8 <setupMultitasking(void (*)())+0x1c>
c00161e7:	90                   	nop
c00161e8:	83 ec 0c             	sub    esp,0xc
c00161eb:	68 4c da 02 c0       	push   0xc002da4c
c00161f0:	e8 3b ae 00 00       	call   c0021030 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161f5:	83 c4 10             	add    esp,0x10
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	68 4c da 02 c0       	push   0xc002da4c
c0016200:	e8 07 ae 00 00       	call   c002100c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016205:	83 c4 10             	add    esp,0x10
c0016208:	84 c0                	test   al,al
c001620a:	74 dc                	je     c00161e8 <setupMultitasking(void (*)())+0xc>
c001620c:	83 ec 0c             	sub    esp,0xc
c001620f:	68 24 07 00 00       	push   0x724
c0016214:	e8 7f 91 ff ff       	call   c000f398 <malloc>
c0016219:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016220:	6a 00                	push   0x0
c0016222:	68 f5 40 02 c0       	push   0xc00240f5
c0016227:	6a 01                	push   0x1
c0016229:	50                   	push   eax
c001622a:	89 c3                	mov    ebx,eax
c001622c:	e8 37 fc ff ff       	call   c0015e68 <Process::Process(bool, char const*, Process*, char**)>
c0016231:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0016237:	83 c4 14             	add    esp,0x14
c001623a:	89 1d 58 da 02 c0    	mov    DWORD PTR ds:0xc002da58,ebx
c0016240:	50                   	push   eax
c0016241:	e8 01 b9 ff ff       	call   c0011b47 <setActiveTerminal(VgaText*)>
c0016246:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c001624d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016257:	83 c8 01             	or     eax,0x1
c001625a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016261:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016267:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001626a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016274:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001627a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016284:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001628a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016294:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001629e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00162a4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00162aa:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00162b4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00162be:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00162c5:	e8 ce 90 ff ff       	call   c000f398 <malloc>
c00162ca:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00162d0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00162d6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00162dc:	5a                   	pop    edx
c00162dd:	59                   	pop    ecx
c00162de:	68 f1 40 02 c0       	push   0xc00240f1
c00162e3:	50                   	push   eax
c00162e4:	e8 67 a3 fe ff       	call   c0000650 <strcpy>
c00162e9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00162f0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00162f4:	83 c4 14             	add    esp,0x14
c00162f7:	5b                   	pop    ebx
c00162f8:	5e                   	pop    esi
c00162f9:	e9 6b 9f fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00162fe:	66 90                	xchg   ax,ax

c0016300 <schedule()>:
c0016300:	8b 15 2c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da2c
c0016306:	85 d2                	test   edx,edx
c0016308:	74 0e                	je     c0016318 <schedule()+0x18>
c001630a:	c7 05 28 da 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x1
c0016314:	c3                   	ret    
c0016315:	8d 76 00             	lea    esi,[esi+0x0]
c0016318:	53                   	push   ebx
c0016319:	83 ec 14             	sub    esp,0x14
c001631c:	68 4c da 02 c0       	push   0xc002da4c
c0016321:	e8 e6 ac 00 00       	call   c002100c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016326:	83 c4 10             	add    esp,0x10
c0016329:	84 c0                	test   al,al
c001632b:	75 3f                	jne    c001636c <schedule()+0x6c>
c001632d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016332:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016335:	83 fa 01             	cmp    edx,0x1
c0016338:	74 3a                	je     c0016374 <schedule()+0x74>
c001633a:	66 90                	xchg   ax,ax
c001633c:	83 ec 0c             	sub    esp,0xc
c001633f:	68 4c da 02 c0       	push   0xc002da4c
c0016344:	e8 df ac 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016349:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c0016350:	89 c3                	mov    ebx,eax
c0016352:	e8 d9 ac 00 00       	call   c0021030 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016357:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001635e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016361:	e8 be f7 ff ff       	call   c0015b24 <switchToThread(ThreadControlBlock*)>
c0016366:	83 c4 10             	add    esp,0x10
c0016369:	8d 76 00             	lea    esi,[esi+0x0]
c001636c:	83 c4 08             	add    esp,0x8
c001636f:	5b                   	pop    ebx
c0016370:	c3                   	ret    
c0016371:	8d 76 00             	lea    esi,[esi+0x0]
c0016374:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001637b:	83 ec 08             	sub    esp,0x8
c001637e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016383:	50                   	push   eax
c0016384:	68 4c da 02 c0       	push   0xc002da4c
c0016389:	e8 5e ad 00 00       	call   c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001638e:	83 c4 10             	add    esp,0x10
c0016391:	eb a9                	jmp    c001633c <schedule()+0x3c>
c0016393:	90                   	nop

c0016394 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016394:	83 ec 0c             	sub    esp,0xc
c0016397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001639c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163a3:	e8 58 ff ff ff       	call   c0016300 <schedule()>
c00163a8:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00163b0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00163b5:	85 c0                	test   eax,eax
c00163b7:	75 03                	jne    c00163bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00163b9:	fb                   	sti    
c00163ba:	66 90                	xchg   ax,ax
c00163bc:	83 c4 0c             	add    esp,0xc
c00163bf:	c3                   	ret    

c00163c0 <blockTask(TaskState)>:
c00163c0:	83 ec 0c             	sub    esp,0xc
c00163c3:	fa                   	cli    
c00163c4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00163c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163cd:	83 c0 01             	add    eax,0x1
c00163d0:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c00163d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163dd:	e8 1e ff ff ff       	call   c0016300 <schedule()>
c00163e2:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00163ea:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c00163f0:	85 d2                	test   edx,edx
c00163f2:	75 04                	jne    c00163f8 <blockTask(TaskState)+0x38>
c00163f4:	fb                   	sti    
c00163f5:	8d 76 00             	lea    esi,[esi+0x0]
c00163f8:	83 c4 0c             	add    esp,0xc
c00163fb:	c3                   	ret    

c00163fc <waitTask(int, int*, int)>:
c00163fc:	83 ec 18             	sub    esp,0x18
c00163ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016404:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016408:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001640b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001640f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016414:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016417:	6a 07                	push   0x7
c0016419:	e8 a2 ff ff ff       	call   c00163c0 <blockTask(TaskState)>
c001641e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016423:	83 c4 10             	add    esp,0x10
c0016426:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016429:	85 d2                	test   edx,edx
c001642b:	74 0b                	je     c0016438 <waitTask(int, int*, int)+0x3c>
c001642d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016430:	89 02                	mov    DWORD PTR [edx],eax
c0016432:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016437:	90                   	nop
c0016438:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001643b:	83 c4 0c             	add    esp,0xc
c001643e:	c3                   	ret    
c001643f:	90                   	nop

c0016440 <milliTenthSleepUntil(unsigned int)>:
c0016440:	83 ec 0c             	sub    esp,0xc
c0016443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016447:	39 05 4c ab 02 c0    	cmp    DWORD PTR ds:0xc002ab4c,eax
c001644d:	76 05                	jbe    c0016454 <milliTenthSleepUntil(unsigned int)+0x14>
c001644f:	90                   	nop
c0016450:	83 c4 0c             	add    esp,0xc
c0016453:	c3                   	ret    
c0016454:	fa                   	cli    
c0016455:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c001645b:	83 ec 08             	sub    esp,0x8
c001645e:	8b 15 2c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da2c
c0016464:	83 c1 01             	add    ecx,0x1
c0016467:	89 0d 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,ecx
c001646d:	83 c2 01             	add    edx,0x1
c0016470:	89 15 2c da 02 c0    	mov    DWORD PTR ds:0xc002da2c,edx
c0016476:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001647c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001647f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016485:	51                   	push   ecx
c0016486:	68 40 da 02 c0       	push   0xc002da40
c001648b:	e8 5c ac 00 00       	call   c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016490:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016497:	e8 24 ff ff ff       	call   c00163c0 <blockTask(TaskState)>
c001649c:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	83 e8 01             	sub    eax,0x1
c00164a7:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c00164ac:	85 c0                	test   eax,eax
c00164ae:	75 0c                	jne    c00164bc <milliTenthSleepUntil(unsigned int)+0x7c>
c00164b0:	8b 15 28 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da28
c00164b6:	85 d2                	test   edx,edx
c00164b8:	75 1a                	jne    c00164d4 <milliTenthSleepUntil(unsigned int)+0x94>
c00164ba:	66 90                	xchg   ax,ax
c00164bc:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00164c4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00164c9:	85 c0                	test   eax,eax
c00164cb:	75 83                	jne    c0016450 <milliTenthSleepUntil(unsigned int)+0x10>
c00164cd:	fb                   	sti    
c00164ce:	83 c4 0c             	add    esp,0xc
c00164d1:	c3                   	ret    
c00164d2:	66 90                	xchg   ax,ax
c00164d4:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c00164de:	e8 1d fe ff ff       	call   c0016300 <schedule()>
c00164e3:	eb d7                	jmp    c00164bc <milliTenthSleepUntil(unsigned int)+0x7c>
c00164e5:	8d 76 00             	lea    esi,[esi+0x0]

c00164e8 <milliTenthSleep(unsigned int)>:
c00164e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00164ec:	a1 4c ab 02 c0       	mov    eax,ds:0xc002ab4c
c00164f1:	01 c2                	add    edx,eax
c00164f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00164f7:	e9 44 ff ff ff       	jmp    c0016440 <milliTenthSleepUntil(unsigned int)>

c00164fc <sleep(unsigned int)>:
c00164fc:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016504:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016508:	eb de                	jmp    c00164e8 <milliTenthSleep(unsigned int)>
c001650a:	66 90                	xchg   ax,ax

c001650c <taskReturned>:
c001650c:	83 ec 18             	sub    esp,0x18
c001650f:	68 7c 41 02 c0       	push   0xc002417c
c0016514:	e8 c5 91 ff ff       	call   c000f6de <KePanic(char const*)>
c0016519:	83 c4 10             	add    esp,0x10
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	6a 02                	push   0x2
c0016521:	e8 9a fe ff ff       	call   c00163c0 <blockTask(TaskState)>
c0016526:	fa                   	cli    
c0016527:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001652c:	83 c0 01             	add    eax,0x1
c001652f:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016534:	e8 c7 fd ff ff       	call   c0016300 <schedule()>
c0016539:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016541:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c0016547:	83 c4 10             	add    esp,0x10
c001654a:	85 d2                	test   edx,edx
c001654c:	75 ce                	jne    c001651c <taskReturned+0x10>
c001654e:	fb                   	sti    
c001654f:	eb cb                	jmp    c001651c <taskReturned+0x10>
c0016551:	8d 76 00             	lea    esi,[esi+0x0]

c0016554 <Thr::processFromPID(int)>:
c0016554:	57                   	push   edi
c0016555:	56                   	push   esi
c0016556:	53                   	push   ebx
c0016557:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001655b:	fa                   	cli    
c001655c:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0016562:	83 ec 0c             	sub    esp,0xc
c0016565:	68 4c da 02 c0       	push   0xc002da4c
c001656a:	83 c1 01             	add    ecx,0x1
c001656d:	89 0d 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,ecx
c0016573:	e8 b0 aa 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016578:	83 c4 10             	add    esp,0x10
c001657b:	89 c7                	mov    edi,eax
c001657d:	eb 15                	jmp    c0016594 <Thr::processFromPID(int)+0x40>
c001657f:	90                   	nop
c0016580:	83 ec 0c             	sub    esp,0xc
c0016583:	68 4c da 02 c0       	push   0xc002da4c
c0016588:	e8 9b aa 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001658d:	83 c4 10             	add    esp,0x10
c0016590:	39 f8                	cmp    eax,edi
c0016592:	74 50                	je     c00165e4 <Thr::processFromPID(int)+0x90>
c0016594:	83 ec 0c             	sub    esp,0xc
c0016597:	68 4c da 02 c0       	push   0xc002da4c
c001659c:	e8 87 aa 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165a1:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c00165a8:	89 c3                	mov    ebx,eax
c00165aa:	e8 81 aa 00 00       	call   c0021030 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165af:	58                   	pop    eax
c00165b0:	5a                   	pop    edx
c00165b1:	53                   	push   ebx
c00165b2:	68 4c da 02 c0       	push   0xc002da4c
c00165b7:	e8 30 ab 00 00       	call   c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165bf:	83 c4 10             	add    esp,0x10
c00165c2:	39 30                	cmp    DWORD PTR [eax],esi
c00165c4:	75 ba                	jne    c0016580 <Thr::processFromPID(int)+0x2c>
c00165c6:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00165ce:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c00165d4:	85 c9                	test   ecx,ecx
c00165d6:	74 08                	je     c00165e0 <Thr::processFromPID(int)+0x8c>
c00165d8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165db:	90                   	nop
c00165dc:	5b                   	pop    ebx
c00165dd:	5e                   	pop    esi
c00165de:	5f                   	pop    edi
c00165df:	c3                   	ret    
c00165e0:	fb                   	sti    
c00165e1:	eb f5                	jmp    c00165d8 <Thr::processFromPID(int)+0x84>
c00165e3:	90                   	nop
c00165e4:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00165ec:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c00165f2:	31 c0                	xor    eax,eax
c00165f4:	85 d2                	test   edx,edx
c00165f6:	75 e4                	jne    c00165dc <Thr::processFromPID(int)+0x88>
c00165f8:	fb                   	sti    
c00165f9:	5b                   	pop    ebx
c00165fa:	5e                   	pop    esi
c00165fb:	5f                   	pop    edi
c00165fc:	c3                   	ret    
c00165fd:	8d 76 00             	lea    esi,[esi+0x0]

c0016600 <unblockTask(ThreadControlBlock*)>:
c0016600:	53                   	push   ebx
c0016601:	83 ec 08             	sub    esp,0x8
c0016604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016608:	fa                   	cli    
c0016609:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c001660f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016612:	83 c2 01             	add    edx,0x1
c0016615:	89 15 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,edx
c001661b:	85 c0                	test   eax,eax
c001661d:	74 6d                	je     c001668c <unblockTask(ThreadControlBlock*)+0x8c>
c001661f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016622:	83 f8 01             	cmp    eax,0x1
c0016625:	74 39                	je     c0016660 <unblockTask(ThreadControlBlock*)+0x60>
c0016627:	83 ec 0c             	sub    esp,0xc
c001662a:	68 4c da 02 c0       	push   0xc002da4c
c001662f:	e8 f4 a9 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016634:	83 c4 10             	add    esp,0x10
c0016637:	85 c0                	test   eax,eax
c0016639:	75 1d                	jne    c0016658 <unblockTask(ThreadControlBlock*)+0x58>
c001663b:	eb 63                	jmp    c00166a0 <unblockTask(ThreadControlBlock*)+0xa0>
c001663d:	8d 76 00             	lea    esi,[esi+0x0]
c0016640:	83 ec 08             	sub    esp,0x8
c0016643:	50                   	push   eax
c0016644:	68 4c da 02 c0       	push   0xc002da4c
c0016649:	e8 e6 ae 00 00       	call   c0021534 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	85 c0                	test   eax,eax
c0016653:	74 4b                	je     c00166a0 <unblockTask(ThreadControlBlock*)+0xa0>
c0016655:	8d 76 00             	lea    esi,[esi+0x0]
c0016658:	39 c3                	cmp    ebx,eax
c001665a:	75 e4                	jne    c0016640 <unblockTask(ThreadControlBlock*)+0x40>
c001665c:	eb 12                	jmp    c0016670 <unblockTask(ThreadControlBlock*)+0x70>
c001665e:	66 90                	xchg   ax,ax
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	68 13 41 02 c0       	push   0xc0024113
c0016668:	e8 e1 08 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001666d:	83 c4 10             	add    esp,0x10
c0016670:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016678:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001667d:	85 c0                	test   eax,eax
c001667f:	75 03                	jne    c0016684 <unblockTask(ThreadControlBlock*)+0x84>
c0016681:	fb                   	sti    
c0016682:	66 90                	xchg   ax,ax
c0016684:	83 c4 08             	add    esp,0x8
c0016687:	5b                   	pop    ebx
c0016688:	c3                   	ret    
c0016689:	8d 76 00             	lea    esi,[esi+0x0]
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	68 fc 40 02 c0       	push   0xc00240fc
c0016694:	e8 b5 08 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016699:	83 c4 10             	add    esp,0x10
c001669c:	eb d2                	jmp    c0016670 <unblockTask(ThreadControlBlock*)+0x70>
c001669e:	66 90                	xchg   ax,ax
c00166a0:	83 ec 08             	sub    esp,0x8
c00166a3:	53                   	push   ebx
c00166a4:	68 4c da 02 c0       	push   0xc002da4c
c00166a9:	e8 3e aa 00 00       	call   c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166ae:	83 c4 10             	add    esp,0x10
c00166b1:	eb bd                	jmp    c0016670 <unblockTask(ThreadControlBlock*)+0x70>
c00166b3:	90                   	nop

c00166b4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00166b4:	55                   	push   ebp
c00166b5:	57                   	push   edi
c00166b6:	56                   	push   esi
c00166b7:	53                   	push   ebx
c00166b8:	83 ec 1c             	sub    esp,0x1c
c00166bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00166bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166c2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00166c8:	85 ed                	test   ebp,ebp
c00166ca:	7e 28                	jle    c00166f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00166cc:	31 f6                	xor    esi,esi
c00166ce:	66 90                	xchg   ax,ax
c00166d0:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00166d7:	83 ec 0c             	sub    esp,0xc
c00166da:	83 c6 01             	add    esi,0x1
c00166dd:	57                   	push   edi
c00166de:	e8 c5 8c ff ff       	call   c000f3a8 <free>
c00166e3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166e6:	83 c4 10             	add    esp,0x10
c00166e9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00166ef:	7f df                	jg     c00166d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00166f1:	8d 76 00             	lea    esi,[esi+0x0]
c00166f4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00166fe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016703:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016706:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016709:	d3 c0                	rol    eax,cl
c001670b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016712:	21 c8                	and    eax,ecx
c0016714:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001671b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001671e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016726:	89 f7                	mov    edi,esi
c0016728:	0f 85 72 01 00 00    	jne    c00168a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001672e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016734:	85 ed                	test   ebp,ebp
c0016736:	74 1c                	je     c0016754 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016738:	83 ec 0c             	sub    esp,0xc
c001673b:	55                   	push   ebp
c001673c:	e8 e7 77 ff ff       	call   c000df28 <EnvVarContainer::~EnvVarContainer()>
c0016741:	59                   	pop    ecx
c0016742:	5e                   	pop    esi
c0016743:	6a 0c                	push   0xc
c0016745:	55                   	push   ebp
c0016746:	e8 c4 63 ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c001674b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	89 f7                	mov    edi,esi
c0016753:	90                   	nop
c0016754:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001675a:	85 c0                	test   eax,eax
c001675c:	0f 84 b2 00 00 00    	je     c0016814 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016762:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016765:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016769:	31 c9                	xor    ecx,ecx
c001676b:	eb 17                	jmp    c0016784 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001676d:	8d 76 00             	lea    esi,[esi+0x0]
c0016770:	83 c1 01             	add    ecx,0x1
c0016773:	83 f9 10             	cmp    ecx,0x10
c0016776:	0f 84 98 00 00 00    	je     c0016814 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001677c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016782:	66 90                	xchg   ax,ax
c0016784:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001678b:	d3 fa                	sar    edx,cl
c001678d:	80 e2 01             	and    dl,0x1
c0016790:	74 de                	je     c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016792:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016795:	c1 e2 05             	shl    edx,0x5
c0016798:	29 ca                	sub    edx,ecx
c001679a:	01 d0                	add    eax,edx
c001679c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00167a2:	83 fd 07             	cmp    ebp,0x7
c00167a5:	75 c9                	jne    c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167a7:	05 40 02 00 00       	add    eax,0x240
c00167ac:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00167af:	83 fd ff             	cmp    ebp,0xffffffff
c00167b2:	0f 8c f0 00 00 00    	jl     c00168a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00167b8:	0f 84 ae 01 00 00    	je     c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00167be:	85 ed                	test   ebp,ebp
c00167c0:	0f 84 92 01 00 00    	je     c0016958 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00167c6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00167c8:	75 a6                	jne    c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167ce:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167d4:	01 d0                	add    eax,edx
c00167d6:	66 90                	xchg   ax,ax
c00167d8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00167e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00167ee:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00167f5:	50                   	push   eax
c00167f6:	e8 05 fe ff ff       	call   c0016600 <unblockTask(ThreadControlBlock*)>
c00167fb:	83 c4 10             	add    esp,0x10
c00167fe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016801:	89 f7                	mov    edi,esi
c0016803:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016807:	83 c1 01             	add    ecx,0x1
c001680a:	83 f9 10             	cmp    ecx,0x10
c001680d:	0f 85 69 ff ff ff    	jne    c001677c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016813:	90                   	nop
c0016814:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001681a:	85 c0                	test   eax,eax
c001681c:	74 62                	je     c0016880 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001681e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016824:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001682a:	74 54                	je     c0016880 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001682c:	83 ec 0c             	sub    esp,0xc
c001682f:	68 4c da 02 c0       	push   0xc002da4c
c0016834:	e8 ef a7 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016839:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c0016840:	89 c7                	mov    edi,eax
c0016842:	e8 c5 a7 00 00       	call   c002100c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016847:	83 c4 10             	add    esp,0x10
c001684a:	84 c0                	test   al,al
c001684c:	0f 84 ce 00 00 00    	je     c0016920 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016852:	66 90                	xchg   ax,ax
c0016854:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016857:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001685d:	85 d2                	test   edx,edx
c001685f:	74 0f                	je     c0016870 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016861:	8b 02                	mov    eax,DWORD PTR [edx]
c0016863:	83 ec 0c             	sub    esp,0xc
c0016866:	52                   	push   edx
c0016867:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001686a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001686d:	83 c4 10             	add    esp,0x10
c0016870:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001687a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001687d:	8d 76 00             	lea    esi,[esi+0x0]
c0016880:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016886:	85 db                	test   ebx,ebx
c0016888:	74 16                	je     c00168a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	53                   	push   ebx
c001688e:	e8 7b c7 ff ff       	call   c001300e <VAS::~VAS()>
c0016893:	58                   	pop    eax
c0016894:	5a                   	pop    edx
c0016895:	6a 14                	push   0x14
c0016897:	53                   	push   ebx
c0016898:	e8 72 62 ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c001689d:	83 c4 10             	add    esp,0x10
c00168a0:	83 c4 1c             	add    esp,0x1c
c00168a3:	5b                   	pop    ebx
c00168a4:	5e                   	pop    esi
c00168a5:	5f                   	pop    edi
c00168a6:	5d                   	pop    ebp
c00168a7:	c3                   	ret    
c00168a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168ac:	83 ec 0c             	sub    esp,0xc
c00168af:	68 b0 41 02 c0       	push   0xc00241b0
c00168b4:	e8 25 8e ff ff       	call   c000f6de <KePanic(char const*)>
c00168b9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168bc:	83 c4 10             	add    esp,0x10
c00168bf:	89 f7                	mov    edi,esi
c00168c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168c5:	e9 a6 fe ff ff       	jmp    c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168ca:	66 90                	xchg   ax,ax
c00168cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168d2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00168d8:	75 1e                	jne    c00168f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168da:	83 ec 0c             	sub    esp,0xc
c00168dd:	68 18 42 02 c0       	push   0xc0024218
c00168e2:	e8 67 06 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00168e7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00168ee:	e8 cd fa ff ff       	call   c00163c0 <blockTask(TaskState)>
c00168f3:	83 c4 10             	add    esp,0x10
c00168f6:	66 90                	xchg   ax,ax
c00168f8:	83 ec 08             	sub    esp,0x8
c00168fb:	56                   	push   esi
c00168fc:	68 4c da 02 c0       	push   0xc002da4c
c0016901:	e8 e6 a7 00 00       	call   c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016906:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c001690d:	e8 16 a7 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016912:	83 c4 10             	add    esp,0x10
c0016915:	39 f8                	cmp    eax,edi
c0016917:	0f 84 37 ff ff ff    	je     c0016854 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001691d:	8d 76 00             	lea    esi,[esi+0x0]
c0016920:	83 ec 0c             	sub    esp,0xc
c0016923:	68 4c da 02 c0       	push   0xc002da4c
c0016928:	e8 fb a6 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001692d:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c0016934:	89 c6                	mov    esi,eax
c0016936:	e8 f5 a6 00 00       	call   c0021030 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001693b:	83 c4 10             	add    esp,0x10
c001693e:	39 f3                	cmp    ebx,esi
c0016940:	74 b6                	je     c00168f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016942:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016945:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016948:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001694e:	75 a8                	jne    c00168f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016950:	e9 77 ff ff ff       	jmp    c00168cc <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016955:	8d 76 00             	lea    esi,[esi+0x0]
c0016958:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001695c:	83 ec 0c             	sub    esp,0xc
c001695f:	68 e4 41 02 c0       	push   0xc00241e4
c0016964:	e9 4b ff ff ff       	jmp    c00168b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016969:	8d 76 00             	lea    esi,[esi+0x0]
c001696c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016970:	8b 36                	mov    esi,DWORD PTR [esi]
c0016972:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016975:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016978:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001697e:	01 d7                	add    edi,edx
c0016980:	89 f8                	mov    eax,edi
c0016982:	e9 51 fe ff ff       	jmp    c00167d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016987:	90                   	nop

c0016988 <cleanerTaskFunction(void*)>:
c0016988:	53                   	push   ebx
c0016989:	83 ec 08             	sub    esp,0x8
c001698c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016994:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016999:	85 c0                	test   eax,eax
c001699b:	75 03                	jne    c00169a0 <cleanerTaskFunction(void*)+0x18>
c001699d:	fb                   	sti    
c001699e:	66 90                	xchg   ax,ax
c00169a0:	fa                   	cli    
c00169a1:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00169a6:	83 c0 01             	add    eax,0x1
c00169a9:	80 3d 14 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da14,0x0
c00169b0:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c00169b5:	0f 85 c9 00 00 00    	jne    c0016a84 <cleanerTaskFunction(void*)+0xfc>
c00169bb:	83 ec 0c             	sub    esp,0xc
c00169be:	6a 02                	push   0x2
c00169c0:	e8 cf f9 ff ff       	call   c0016394 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00169c5:	83 c4 10             	add    esp,0x10
c00169c8:	c6 05 14 da 02 c0 00 	mov    BYTE PTR ds:0xc002da14,0x0
c00169cf:	fa                   	cli    
c00169d0:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c00169d6:	8b 1d 2c da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da2c
c00169dc:	83 c1 01             	add    ecx,0x1
c00169df:	89 0d 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,ecx
c00169e5:	83 c3 01             	add    ebx,0x1
c00169e8:	89 1d 2c da 02 c0    	mov    DWORD PTR ds:0xc002da2c,ebx
c00169ee:	fa                   	cli    
c00169ef:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00169f4:	83 c0 01             	add    eax,0x1
c00169f7:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c00169fc:	eb 2a                	jmp    c0016a28 <cleanerTaskFunction(void*)+0xa0>
c00169fe:	66 90                	xchg   ax,ax
c0016a00:	83 ec 0c             	sub    esp,0xc
c0016a03:	68 34 da 02 c0       	push   0xc002da34
c0016a08:	e8 1b a6 00 00       	call   c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a0d:	c7 04 24 34 da 02 c0 	mov    DWORD PTR [esp],0xc002da34
c0016a14:	89 c3                	mov    ebx,eax
c0016a16:	e8 15 a6 00 00       	call   c0021030 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a1e:	e8 91 fc ff ff       	call   c00166b4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a23:	83 c4 10             	add    esp,0x10
c0016a26:	66 90                	xchg   ax,ax
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	68 34 da 02 c0       	push   0xc002da34
c0016a30:	e8 d7 a5 00 00       	call   c002100c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a35:	83 c4 10             	add    esp,0x10
c0016a38:	84 c0                	test   al,al
c0016a3a:	74 c4                	je     c0016a00 <cleanerTaskFunction(void*)+0x78>
c0016a3c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016a44:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c0016a4a:	85 d2                	test   edx,edx
c0016a4c:	75 02                	jne    c0016a50 <cleanerTaskFunction(void*)+0xc8>
c0016a4e:	fb                   	sti    
c0016a4f:	90                   	nop
c0016a50:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0016a55:	83 e8 01             	sub    eax,0x1
c0016a58:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0016a5d:	0f 85 29 ff ff ff    	jne    c001698c <cleanerTaskFunction(void*)+0x4>
c0016a63:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0016a68:	85 c0                	test   eax,eax
c0016a6a:	0f 84 1c ff ff ff    	je     c001698c <cleanerTaskFunction(void*)+0x4>
c0016a70:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0016a7a:	e8 81 f8 ff ff       	call   c0016300 <schedule()>
c0016a7f:	e9 08 ff ff ff       	jmp    c001698c <cleanerTaskFunction(void*)+0x4>
c0016a84:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016a8c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016a91:	85 c0                	test   eax,eax
c0016a93:	0f 85 2f ff ff ff    	jne    c00169c8 <cleanerTaskFunction(void*)+0x40>
c0016a99:	fb                   	sti    
c0016a9a:	e9 29 ff ff ff       	jmp    c00169c8 <cleanerTaskFunction(void*)+0x40>
c0016a9f:	90                   	nop

c0016aa0 <terminateTask(int)>:
c0016aa0:	83 ec 14             	sub    esp,0x14
c0016aa3:	fa                   	cli    
c0016aa4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016aa9:	83 c0 01             	add    eax,0x1
c0016aac:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016ab1:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0016ab6:	83 c0 01             	add    eax,0x1
c0016ab9:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0016abe:	fa                   	cli    
c0016abf:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016ac4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ac8:	83 c0 01             	add    eax,0x1
c0016acb:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016ad0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ad5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016ad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016add:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016ae0:	50                   	push   eax
c0016ae1:	68 34 da 02 c0       	push   0xc002da34
c0016ae6:	e8 01 a6 00 00       	call   c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016aeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af0:	83 c4 10             	add    esp,0x10
c0016af3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016afa:	a1 10 da 02 c0       	mov    eax,ds:0xc002da10
c0016aff:	85 c0                	test   eax,eax
c0016b01:	0f 84 81 00 00 00    	je     c0016b88 <terminateTask(int)+0xe8>
c0016b07:	c6 05 14 da 02 c0 01 	mov    BYTE PTR ds:0xc002da14,0x1
c0016b0e:	83 ec 0c             	sub    esp,0xc
c0016b11:	50                   	push   eax
c0016b12:	e8 e9 fa ff ff       	call   c0016600 <unblockTask(ThreadControlBlock*)>
c0016b17:	83 c4 10             	add    esp,0x10
c0016b1a:	66 90                	xchg   ax,ax
c0016b1c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016b24:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016b29:	85 c0                	test   eax,eax
c0016b2b:	75 03                	jne    c0016b30 <terminateTask(int)+0x90>
c0016b2d:	fb                   	sti    
c0016b2e:	66 90                	xchg   ax,ax
c0016b30:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0016b35:	83 e8 01             	sub    eax,0x1
c0016b38:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0016b3d:	75 09                	jne    c0016b48 <terminateTask(int)+0xa8>
c0016b3f:	83 3d 28 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da28,0x0
c0016b46:	75 54                	jne    c0016b9c <terminateTask(int)+0xfc>
c0016b48:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016b50:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0016b56:	85 c9                	test   ecx,ecx
c0016b58:	75 06                	jne    c0016b60 <terminateTask(int)+0xc0>
c0016b5a:	66 90                	xchg   ax,ax
c0016b5c:	fb                   	sti    
c0016b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b60:	fa                   	cli    
c0016b61:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016b66:	83 c0 01             	add    eax,0x1
c0016b69:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016b6e:	e8 8d f7 ff ff       	call   c0016300 <schedule()>
c0016b73:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016b7b:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c0016b81:	85 d2                	test   edx,edx
c0016b83:	75 db                	jne    c0016b60 <terminateTask(int)+0xc0>
c0016b85:	eb d5                	jmp    c0016b5c <terminateTask(int)+0xbc>
c0016b87:	90                   	nop
c0016b88:	83 ec 0c             	sub    esp,0xc
c0016b8b:	68 2a 41 02 c0       	push   0xc002412a
c0016b90:	e8 b9 03 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016b95:	83 c4 10             	add    esp,0x10
c0016b98:	eb 82                	jmp    c0016b1c <terminateTask(int)+0x7c>
c0016b9a:	66 90                	xchg   ax,ax
c0016b9c:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0016ba6:	e8 55 f7 ff ff       	call   c0016300 <schedule()>
c0016bab:	eb 9b                	jmp    c0016b48 <terminateTask(int)+0xa8>
c0016bad:	8d 76 00             	lea    esi,[esi+0x0]

c0016bb0 <Thr::terminateFromIRQ(int)>:
c0016bb0:	83 ec 18             	sub    esp,0x18
c0016bb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bb7:	50                   	push   eax
c0016bb8:	e8 e3 fe ff ff       	call   c0016aa0 <terminateTask(int)>
c0016bbd:	8d 76 00             	lea    esi,[esi+0x0]

c0016bc0 <__static_initialization_and_destruction_0(int, int)>:
c0016bc0:	83 ec 0c             	sub    esp,0xc
c0016bc3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016bc8:	0f 85 8e 00 00 00    	jne    c0016c5c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bce:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016bd6:	0f 85 80 00 00 00    	jne    c0016c5c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bdc:	83 ec 0c             	sub    esp,0xc
c0016bdf:	68 4c da 02 c0       	push   0xc002da4c
c0016be4:	e8 a3 a9 00 00       	call   c002158c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016be9:	83 c4 10             	add    esp,0x10
c0016bec:	83 ec 04             	sub    esp,0x4
c0016bef:	68 34 52 02 c0       	push   0xc0025234
c0016bf4:	68 4c da 02 c0       	push   0xc002da4c
c0016bf9:	68 3c 15 02 c0       	push   0xc002153c
c0016bfe:	e8 bc 5e ff ff       	call   c000cabf <__cxa_atexit>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	83 ec 0c             	sub    esp,0xc
c0016c09:	68 40 da 02 c0       	push   0xc002da40
c0016c0e:	e8 79 a9 00 00       	call   c002158c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	83 ec 04             	sub    esp,0x4
c0016c19:	68 34 52 02 c0       	push   0xc0025234
c0016c1e:	68 40 da 02 c0       	push   0xc002da40
c0016c23:	68 3c 15 02 c0       	push   0xc002153c
c0016c28:	e8 92 5e ff ff       	call   c000cabf <__cxa_atexit>
c0016c2d:	83 c4 10             	add    esp,0x10
c0016c30:	83 ec 0c             	sub    esp,0xc
c0016c33:	68 34 da 02 c0       	push   0xc002da34
c0016c38:	e8 4f a9 00 00       	call   c002158c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c3d:	83 c4 10             	add    esp,0x10
c0016c40:	83 ec 04             	sub    esp,0x4
c0016c43:	68 34 52 02 c0       	push   0xc0025234
c0016c48:	68 34 da 02 c0       	push   0xc002da34
c0016c4d:	68 3c 15 02 c0       	push   0xc002153c
c0016c52:	e8 68 5e ff ff       	call   c000cabf <__cxa_atexit>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	66 90                	xchg   ax,ax
c0016c5c:	90                   	nop
c0016c5d:	83 c4 0c             	add    esp,0xc
c0016c60:	c3                   	ret    
c0016c61:	8d 76 00             	lea    esi,[esi+0x0]

c0016c64 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	83 ec 08             	sub    esp,0x8
c0016c6a:	68 ff ff 00 00       	push   0xffff
c0016c6f:	6a 01                	push   0x1
c0016c71:	e8 4a ff ff ff       	call   c0016bc0 <__static_initialization_and_destruction_0(int, int)>
c0016c76:	83 c4 10             	add    esp,0x10
c0016c79:	83 c4 0c             	add    esp,0xc
c0016c7c:	c3                   	ret    

c0016c7d <Vm::inbv(unsigned short)>:
c0016c7d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c81:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c86:	75 06                	jne    c0016c8e <Vm::inbv(unsigned short)+0x11>
c0016c88:	a0 90 da 02 c0       	mov    al,ds:0xc002da90
c0016c8d:	c3                   	ret    
c0016c8e:	ec                   	in     al,dx
c0016c8f:	c3                   	ret    

c0016c90 <Vm::outbv(unsigned short, unsigned char)>:
c0016c90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c98:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c9d:	75 25                	jne    c0016cc4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c9f:	8b 0d 90 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da90
c0016ca5:	88 81 a0 da 02 c0    	mov    BYTE PTR [ecx-0x3ffd2560],al
c0016cab:	8d 51 01             	lea    edx,[ecx+0x1]
c0016cae:	89 15 90 da 02 c0    	mov    DWORD PTR ds:0xc002da90,edx
c0016cb4:	83 fa 20             	cmp    edx,0x20
c0016cb7:	75 0c                	jne    c0016cc5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016cb9:	c7 05 90 da 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002da90,0x1f
c0016cc3:	c3                   	ret    
c0016cc4:	ee                   	out    dx,al
c0016cc5:	c3                   	ret    

c0016cc6 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016cc6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ccb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cd0:	c1 e0 04             	shl    eax,0x4
c0016cd3:	01 d0                	add    eax,edx
c0016cd5:	c3                   	ret    

c0016cd6 <Vm::getSegment(unsigned int)>:
c0016cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cda:	c1 e8 10             	shr    eax,0x10
c0016cdd:	c3                   	ret    

c0016cde <Vm::getOffset(unsigned int)>:
c0016cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ce2:	c3                   	ret    

c0016ce3 <Vm::mainloop2()>:
c0016ce3:	83 ec 18             	sub    esp,0x18
c0016ce6:	fa                   	cli    
c0016ce7:	6a 02                	push   0x2
c0016ce9:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0016cef:	c6 05 89 da 02 c0 01 	mov    BYTE PTR ds:0xc002da89,0x1
c0016cf6:	e8 99 f6 ff ff       	call   c0016394 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016cfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d00:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d04:	52                   	push   edx
c0016d05:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d09:	52                   	push   edx
c0016d0a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d0e:	52                   	push   edx
c0016d0f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d13:	50                   	push   eax
c0016d14:	e8 f6 94 fe ff       	call   c000020f <goToVM86>
c0016d19:	83 c4 2c             	add    esp,0x2c
c0016d1c:	c3                   	ret    

c0016d1d <Vm::mainVm8086Loop(void*)>:
c0016d1d:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016d24:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0016d2b:	75 01                	jne    c0016d2e <Vm::mainVm8086Loop(void*)+0x11>
c0016d2d:	fb                   	sti    
c0016d2e:	eb b3                	jmp    c0016ce3 <Vm::mainloop2()>

c0016d30 <Vm::mainloop3(unsigned long)>:
c0016d30:	83 ec 18             	sub    esp,0x18
c0016d33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d37:	fa                   	cli    
c0016d38:	6a 02                	push   0x2
c0016d3a:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0016d40:	c6 05 88 da 02 c0 01 	mov    BYTE PTR ds:0xc002da88,0x1
c0016d47:	a3 84 da 02 c0       	mov    ds:0xc002da84,eax
c0016d4c:	e8 43 f6 ff ff       	call   c0016394 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d51:	83 c4 1c             	add    esp,0x1c
c0016d54:	eb 8d                	jmp    c0016ce3 <Vm::mainloop2()>

c0016d56 <Vm::initialise8086()>:
c0016d56:	83 ec 0c             	sub    esp,0xc
c0016d59:	68 80 00 00 00       	push   0x80
c0016d5e:	6a 00                	push   0x0
c0016d60:	68 1d 6d 01 c0       	push   0xc0016d1d
c0016d65:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0016d6b:	e8 38 f3 ff ff       	call   c00160a8 <Process::createThread(void (*)(void*), void*, int)>
c0016d70:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d77:	68 10 01 00 00       	push   0x110
c0016d7c:	6a 00                	push   0x0
c0016d7e:	6a 00                	push   0x0
c0016d80:	a3 8c da 02 c0       	mov    ds:0xc002da8c,eax
c0016d85:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0016d8a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d90:	e8 db c5 ff ff       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d95:	83 c4 2c             	add    esp,0x2c
c0016d98:	c3                   	ret    

c0016d99 <Vm::resetConventionalMemory8086()>:
c0016d99:	c3                   	ret    

c0016d9a <Vm::finish8086()>:
c0016d9a:	53                   	push   ebx
c0016d9b:	83 ec 08             	sub    esp,0x8
c0016d9e:	fa                   	cli    
c0016d9f:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0016da5:	80 3d 88 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da88,0x0
c0016dac:	75 18                	jne    c0016dc6 <Vm::finish8086()+0x2c>
c0016dae:	e8 4d f5 ff ff       	call   c0016300 <schedule()>
c0016db3:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016dba:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0016dc1:	75 db                	jne    c0016d9e <Vm::finish8086()+0x4>
c0016dc3:	fb                   	sti    
c0016dc4:	eb d8                	jmp    c0016d9e <Vm::finish8086()+0x4>
c0016dc6:	c6 05 88 da 02 c0 00 	mov    BYTE PTR ds:0xc002da88,0x0
c0016dcd:	83 ec 0c             	sub    esp,0xc
c0016dd0:	8b 1d 84 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da84
c0016dd6:	ff 35 8c da 02 c0    	push   DWORD PTR ds:0xc002da8c
c0016ddc:	e8 1f f8 ff ff       	call   c0016600 <unblockTask(ThreadControlBlock*)>
c0016de1:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016de8:	83 c4 10             	add    esp,0x10
c0016deb:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0016df2:	75 01                	jne    c0016df5 <Vm::finish8086()+0x5b>
c0016df4:	fb                   	sti    
c0016df5:	83 c4 08             	add    esp,0x8
c0016df8:	89 d8                	mov    eax,ebx
c0016dfa:	5b                   	pop    ebx
c0016dfb:	c3                   	ret    

c0016dfc <Vm::getOutput8086(unsigned char*)>:
c0016dfc:	57                   	push   edi
c0016dfd:	8b 0d 90 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da90
c0016e03:	56                   	push   esi
c0016e04:	be a0 da 02 c0       	mov    esi,0xc002daa0
c0016e09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e0f:	5e                   	pop    esi
c0016e10:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c0016e15:	c7 05 90 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da90,0x0
c0016e1f:	5f                   	pop    edi
c0016e20:	c3                   	ret    

c0016e21 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e21:	55                   	push   ebp
c0016e22:	57                   	push   edi
c0016e23:	56                   	push   esi
c0016e24:	53                   	push   ebx
c0016e25:	83 ec 2c             	sub    esp,0x2c
c0016e28:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0016e2c:	80 3d 80 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da80,0x0
c0016e33:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016e37:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e3f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0016e43:	75 5d                	jne    c0016ea2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016e45:	83 ec 0c             	sub    esp,0xc
c0016e48:	68 14 01 00 00       	push   0x114
c0016e4d:	e8 46 85 ff ff       	call   c000f398 <malloc>
c0016e52:	83 c4 0c             	add    esp,0xc
c0016e55:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0016e5b:	68 40 42 02 c0       	push   0xc0024240
c0016e60:	50                   	push   eax
c0016e61:	89 c7                	mov    edi,eax
c0016e63:	e8 c4 12 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0016e68:	58                   	pop    eax
c0016e69:	5a                   	pop    edx
c0016e6a:	6a 12                	push   0x12
c0016e6c:	57                   	push   edi
c0016e6d:	e8 d8 12 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0016e72:	8b 07                	mov    eax,DWORD PTR [edi]
c0016e74:	59                   	pop    ecx
c0016e75:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0016e79:	51                   	push   ecx
c0016e7a:	6a 00                	push   0x0
c0016e7c:	6a 00                	push   0x0
c0016e7e:	68 00 00 11 00       	push   0x110000
c0016e83:	57                   	push   edi
c0016e84:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016e87:	83 c4 14             	add    esp,0x14
c0016e8a:	57                   	push   edi
c0016e8b:	e8 18 13 ff ff       	call   c00081a8 <File::close()>
c0016e90:	8b 07                	mov    eax,DWORD PTR [edi]
c0016e92:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e98:	83 c4 10             	add    esp,0x10
c0016e9b:	c6 05 80 da 02 c0 01 	mov    BYTE PTR ds:0xc002da80,0x1
c0016ea2:	fa                   	cli    
c0016ea3:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0016ea9:	80 3d 89 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da89,0x0
c0016eb0:	75 18                	jne    c0016eca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0016eb2:	e8 49 f4 ff ff       	call   c0016300 <schedule()>
c0016eb7:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016ebe:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0016ec5:	75 db                	jne    c0016ea2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016ec7:	fb                   	sti    
c0016ec8:	eb d8                	jmp    c0016ea2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016eca:	c7 05 90 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da90,0x0
c0016ed4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ed8:	a1 8c da 02 c0       	mov    eax,ds:0xc002da8c
c0016edd:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0016ee1:	0f b7 f6             	movzx  esi,si
c0016ee4:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016ee8:	0f b7 db             	movzx  ebx,bx
c0016eeb:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016eef:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016ef3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ef7:	50                   	push   eax
c0016ef8:	6a 20                	push   0x20
c0016efa:	6a 00                	push   0x0
c0016efc:	68 a0 da 02 c0       	push   0xc002daa0
c0016f01:	e8 ea 95 fe ff       	call   c00004f0 <memset>
c0016f06:	5a                   	pop    edx
c0016f07:	59                   	pop    ecx
c0016f08:	56                   	push   esi
c0016f09:	53                   	push   ebx
c0016f0a:	e8 b7 fd ff ff       	call   c0016cc6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016f0f:	83 c4 10             	add    esp,0x10
c0016f12:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f16:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016f1a:	89 c7                	mov    edi,eax
c0016f1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f1e:	c6 05 89 da 02 c0 00 	mov    BYTE PTR ds:0xc002da89,0x0
c0016f25:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016f2c:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0016f33:	75 01                	jne    c0016f36 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0016f35:	fb                   	sti    
c0016f36:	83 ec 0c             	sub    esp,0xc
c0016f39:	ff 35 8c da 02 c0    	push   DWORD PTR ds:0xc002da8c
c0016f3f:	e8 bc f6 ff ff       	call   c0016600 <unblockTask(ThreadControlBlock*)>
c0016f44:	83 c4 3c             	add    esp,0x3c
c0016f47:	b0 01                	mov    al,0x1
c0016f49:	5b                   	pop    ebx
c0016f4a:	5e                   	pop    esi
c0016f4b:	5f                   	pop    edi
c0016f4c:	5d                   	pop    ebp
c0016f4d:	c3                   	ret    

c0016f4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f4e:	55                   	push   ebp
c0016f4f:	57                   	push   edi
c0016f50:	56                   	push   esi
c0016f51:	53                   	push   ebx
c0016f52:	83 ec 2c             	sub    esp,0x2c
c0016f55:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f59:	80 3d 80 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da80,0x0
c0016f60:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016f64:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016f68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f6c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016f70:	75 5d                	jne    c0016fcf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016f72:	83 ec 0c             	sub    esp,0xc
c0016f75:	68 14 01 00 00       	push   0x114
c0016f7a:	e8 19 84 ff ff       	call   c000f398 <malloc>
c0016f7f:	83 c4 0c             	add    esp,0xc
c0016f82:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0016f88:	68 40 42 02 c0       	push   0xc0024240
c0016f8d:	50                   	push   eax
c0016f8e:	89 c3                	mov    ebx,eax
c0016f90:	e8 97 11 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0016f95:	58                   	pop    eax
c0016f96:	5a                   	pop    edx
c0016f97:	6a 12                	push   0x12
c0016f99:	53                   	push   ebx
c0016f9a:	e8 ab 11 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0016f9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fa1:	59                   	pop    ecx
c0016fa2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016fa6:	52                   	push   edx
c0016fa7:	6a 00                	push   0x0
c0016fa9:	6a 00                	push   0x0
c0016fab:	68 00 00 11 00       	push   0x110000
c0016fb0:	53                   	push   ebx
c0016fb1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016fb4:	83 c4 14             	add    esp,0x14
c0016fb7:	53                   	push   ebx
c0016fb8:	e8 eb 11 ff ff       	call   c00081a8 <File::close()>
c0016fbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fc2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fc5:	83 c4 10             	add    esp,0x10
c0016fc8:	c6 05 80 da 02 c0 01 	mov    BYTE PTR ds:0xc002da80,0x1
c0016fcf:	50                   	push   eax
c0016fd0:	50                   	push   eax
c0016fd1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fd5:	68 5b 42 02 c0       	push   0xc002425b
c0016fda:	e8 6f ff fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016fdf:	83 c4 10             	add    esp,0x10
c0016fe2:	fa                   	cli    
c0016fe3:	8a 1d 89 da 02 c0    	mov    bl,BYTE PTR ds:0xc002da89
c0016fe9:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0016fef:	84 db                	test   bl,bl
c0016ff1:	75 18                	jne    c001700b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0016ff3:	e8 08 f3 ff ff       	call   c0016300 <schedule()>
c0016ff8:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016fff:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0017006:	75 da                	jne    c0016fe2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017008:	fb                   	sti    
c0017009:	eb d7                	jmp    c0016fe2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001700b:	c7 05 90 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da90,0x0
c0017015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017019:	a1 8c da 02 c0       	mov    eax,ds:0xc002da8c
c001701e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017022:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0017026:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001702a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001702e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017032:	50                   	push   eax
c0017033:	6a 20                	push   0x20
c0017035:	6a 00                	push   0x0
c0017037:	68 a0 da 02 c0       	push   0xc002daa0
c001703c:	e8 af 94 fe ff       	call   c00004f0 <memset>
c0017041:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017048:	e8 4b 83 ff ff       	call   c000f398 <malloc>
c001704d:	83 c4 0c             	add    esp,0xc
c0017050:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0017056:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001705a:	89 c5                	mov    ebp,eax
c001705c:	50                   	push   eax
c001705d:	e8 ca 10 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0017062:	83 c4 10             	add    esp,0x10
c0017065:	85 ed                	test   ebp,ebp
c0017067:	75 0a                	jne    c0017073 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0017069:	83 ec 0c             	sub    esp,0xc
c001706c:	68 7d 42 02 c0       	push   0xc002427d
c0017071:	eb 2b                	jmp    c001709e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c0017073:	50                   	push   eax
c0017074:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017078:	50                   	push   eax
c0017079:	8d 44 24 20          	lea    eax,[esp+0x20]
c001707d:	50                   	push   eax
c001707e:	55                   	push   ebp
c001707f:	e8 c8 13 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0017084:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017088:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001708c:	83 c4 10             	add    esp,0x10
c001708f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017094:	74 28                	je     c00170be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c0017096:	83 ec 0c             	sub    esp,0xc
c0017099:	68 91 42 02 c0       	push   0xc0024291
c001709e:	e8 3b 86 ff ff       	call   c000f6de <KePanic(char const*)>
c00170a3:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c00170aa:	83 c4 10             	add    esp,0x10
c00170ad:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00170b4:	75 01                	jne    c00170b7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c00170b6:	fb                   	sti    
c00170b7:	31 db                	xor    ebx,ebx
c00170b9:	e9 92 00 00 00       	jmp    c0017150 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00170be:	51                   	push   ecx
c00170bf:	51                   	push   ecx
c00170c0:	6a 01                	push   0x1
c00170c2:	55                   	push   ebp
c00170c3:	e8 82 10 ff ff       	call   c000814a <File::open(FileOpenMode)>
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	85 c0                	test   eax,eax
c00170cd:	74 27                	je     c00170f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c00170cf:	83 ec 0c             	sub    esp,0xc
c00170d2:	68 aa 42 02 c0       	push   0xc00242aa
c00170d7:	e8 02 86 ff ff       	call   c000f6de <KePanic(char const*)>
c00170dc:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c00170e3:	83 c4 10             	add    esp,0x10
c00170e6:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00170ed:	75 c8                	jne    c00170b7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c00170ef:	fb                   	sti    
c00170f0:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00170f4:	eb 5a                	jmp    c0017150 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00170f6:	50                   	push   eax
c00170f7:	0f b7 ff             	movzx  edi,di
c00170fa:	50                   	push   eax
c00170fb:	0f b7 f6             	movzx  esi,si
c00170fe:	57                   	push   edi
c00170ff:	56                   	push   esi
c0017100:	e8 c1 fb ff ff       	call   c0016cc6 <Vm::realToLinear(unsigned short, unsigned short)>
c0017105:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017108:	5a                   	pop    edx
c0017109:	8d 74 24 20          	lea    esi,[esp+0x20]
c001710d:	56                   	push   esi
c001710e:	50                   	push   eax
c001710f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017113:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017117:	55                   	push   ebp
c0017118:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001711b:	83 c4 14             	add    esp,0x14
c001711e:	55                   	push   ebp
c001711f:	e8 84 10 ff ff       	call   c00081a8 <File::close()>
c0017124:	c6 05 89 da 02 c0 00 	mov    BYTE PTR ds:0xc002da89,0x0
c001712b:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001713c:	75 01                	jne    c001713f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c001713e:	fb                   	sti    
c001713f:	83 ec 0c             	sub    esp,0xc
c0017142:	ff 35 8c da 02 c0    	push   DWORD PTR ds:0xc002da8c
c0017148:	e8 b3 f4 ff ff       	call   c0016600 <unblockTask(ThreadControlBlock*)>
c001714d:	83 c4 10             	add    esp,0x10
c0017150:	83 c4 2c             	add    esp,0x2c
c0017153:	88 d8                	mov    al,bl
c0017155:	5b                   	pop    ebx
c0017156:	5e                   	pop    esi
c0017157:	5f                   	pop    edi
c0017158:	5d                   	pop    ebp
c0017159:	c3                   	ret    

c001715a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001715a:	57                   	push   edi
c001715b:	56                   	push   esi
c001715c:	53                   	push   ebx
c001715d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017161:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017165:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017169:	83 e8 06             	sub    eax,0x6
c001716c:	0f b7 c0             	movzx  eax,ax
c001716f:	50                   	push   eax
c0017170:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017175:	50                   	push   eax
c0017176:	e8 4b fb ff ff       	call   c0016cc6 <Vm::realToLinear(unsigned short, unsigned short)>
c001717b:	5a                   	pop    edx
c001717c:	59                   	pop    ecx
c001717d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017180:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017183:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017186:	81 e2 ff ff 00 00    	and    edx,0xffff
c001718c:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001718f:	8d 51 02             	lea    edx,[ecx+0x2]
c0017192:	66 89 10             	mov    WORD PTR [eax],dx
c0017195:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017199:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001719d:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00171a1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00171a4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00171ae:	89 f1                	mov    ecx,esi
c00171b0:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00171b4:	89 f2                	mov    edx,esi
c00171b6:	0f b6 d6             	movzx  edx,dh
c00171b9:	0f b6 f1             	movzx  esi,cl
c00171bc:	74 0a                	je     c00171c8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c00171be:	c1 e2 08             	shl    edx,0x8
c00171c1:	09 f2                	or     edx,esi
c00171c3:	80 ce 02             	or     dh,0x2
c00171c6:	eb 08                	jmp    c00171d0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00171c8:	c1 e2 08             	shl    edx,0x8
c00171cb:	09 f2                	or     edx,esi
c00171cd:	80 e6 fd             	and    dh,0xfd
c00171d0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171d9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00171dd:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00171e5:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00171e8:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00171f0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00171f3:	5b                   	pop    ebx
c00171f4:	5e                   	pop    esi
c00171f5:	5f                   	pop    edi
c00171f6:	c3                   	ret    

c00171f7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00171f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017201:	c1 e0 04             	shl    eax,0x4
c0017204:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017207:	c3                   	ret    

c0017208 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017208:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001720d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017212:	c1 e0 04             	shl    eax,0x4
c0017215:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017219:	c3                   	ret    

c001721a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001721a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001721f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017224:	c1 e0 04             	shl    eax,0x4
c0017227:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001722a:	c3                   	ret    

c001722b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001722b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017230:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017235:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017239:	c1 e0 04             	shl    eax,0x4
c001723c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001723f:	c3                   	ret    

c0017240 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017240:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017245:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001724a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001724e:	c1 e0 04             	shl    eax,0x4
c0017251:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017255:	c3                   	ret    

c0017256 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017256:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001725b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017260:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017264:	c1 e0 04             	shl    eax,0x4
c0017267:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001726a:	c3                   	ret    

c001726b <Vm::faultHandler(regs*)>:
c001726b:	55                   	push   ebp
c001726c:	57                   	push   edi
c001726d:	56                   	push   esi
c001726e:	53                   	push   ebx
c001726f:	83 ec 2c             	sub    esp,0x2c
c0017272:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017276:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017279:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001727d:	0f b7 f8             	movzx  edi,ax
c0017280:	0f b7 c0             	movzx  eax,ax
c0017283:	52                   	push   edx
c0017284:	50                   	push   eax
c0017285:	e8 3c fa ff ff       	call   c0016cc6 <Vm::realToLinear(unsigned short, unsigned short)>
c001728a:	5a                   	pop    edx
c001728b:	59                   	pop    ecx
c001728c:	89 c1                	mov    ecx,eax
c001728e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017291:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017295:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001729a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001729e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00172a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172a5:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00172aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172b6:	e8 0b fa ff ff       	call   c0016cc6 <Vm::realToLinear(unsigned short, unsigned short)>
c00172bb:	5e                   	pop    esi
c00172bc:	be 06 00 00 00       	mov    esi,0x6
c00172c1:	5d                   	pop    ebp
c00172c2:	31 ed                	xor    ebp,ebp
c00172c4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172c9:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00172cc:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00172d2:	0f 84 74 02 00 00    	je     c001754c <Vm::faultHandler(regs*)+0x2e1>
c00172d8:	0f 87 94 00 00 00    	ja     c0017372 <Vm::faultHandler(regs*)+0x107>
c00172de:	83 fa 66             	cmp    edx,0x66
c00172e1:	0f 84 e2 01 00 00    	je     c00174c9 <Vm::faultHandler(regs*)+0x25e>
c00172e7:	77 47                	ja     c0017330 <Vm::faultHandler(regs*)+0xc5>
c00172e9:	83 fa 36             	cmp    edx,0x36
c00172ec:	0f 84 ca 01 00 00    	je     c00174bc <Vm::faultHandler(regs*)+0x251>
c00172f2:	77 1a                	ja     c001730e <Vm::faultHandler(regs*)+0xa3>
c00172f4:	83 fa 26             	cmp    edx,0x26
c00172f7:	0f 84 98 01 00 00    	je     c0017495 <Vm::faultHandler(regs*)+0x22a>
c00172fd:	83 fa 2e             	cmp    edx,0x2e
c0017300:	0f 85 27 06 00 00    	jne    c001792d <Vm::faultHandler(regs*)+0x6c2>
c0017306:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017309:	31 f6                	xor    esi,esi
c001730b:	41                   	inc    ecx
c001730c:	eb bb                	jmp    c00172c9 <Vm::faultHandler(regs*)+0x5e>
c001730e:	83 fa 64             	cmp    edx,0x64
c0017311:	0f 84 8b 01 00 00    	je     c00174a2 <Vm::faultHandler(regs*)+0x237>
c0017317:	0f 87 92 01 00 00    	ja     c00174af <Vm::faultHandler(regs*)+0x244>
c001731d:	83 fa 3e             	cmp    edx,0x3e
c0017320:	0f 85 07 06 00 00    	jne    c001792d <Vm::faultHandler(regs*)+0x6c2>
c0017326:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017329:	be 01 00 00 00       	mov    esi,0x1
c001732e:	eb db                	jmp    c001730b <Vm::faultHandler(regs*)+0xa0>
c0017330:	83 fa 6d             	cmp    edx,0x6d
c0017333:	0f 84 34 03 00 00    	je     c001766d <Vm::faultHandler(regs*)+0x402>
c0017339:	77 17                	ja     c0017352 <Vm::faultHandler(regs*)+0xe7>
c001733b:	83 fa 67             	cmp    edx,0x67
c001733e:	0f 84 92 01 00 00    	je     c00174d6 <Vm::faultHandler(regs*)+0x26b>
c0017344:	83 fa 6c             	cmp    edx,0x6c
c0017347:	0f 84 b1 02 00 00    	je     c00175fe <Vm::faultHandler(regs*)+0x393>
c001734d:	e9 db 05 00 00       	jmp    c001792d <Vm::faultHandler(regs*)+0x6c2>
c0017352:	83 fa 6f             	cmp    edx,0x6f
c0017355:	0f 84 40 04 00 00    	je     c001779b <Vm::faultHandler(regs*)+0x530>
c001735b:	0f 82 a2 03 00 00    	jb     c0017703 <Vm::faultHandler(regs*)+0x498>
c0017361:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017367:	0f 84 76 01 00 00    	je     c00174e3 <Vm::faultHandler(regs*)+0x278>
c001736d:	e9 bb 05 00 00       	jmp    c001792d <Vm::faultHandler(regs*)+0x6c2>
c0017372:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017378:	0f 84 57 05 00 00    	je     c00178d5 <Vm::faultHandler(regs*)+0x66a>
c001737e:	0f 87 a9 00 00 00    	ja     c001742d <Vm::faultHandler(regs*)+0x1c2>
c0017384:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001738a:	0f 84 d6 04 00 00    	je     c0017866 <Vm::faultHandler(regs*)+0x5fb>
c0017390:	77 78                	ja     c001740a <Vm::faultHandler(regs*)+0x19f>
c0017392:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017398:	0f 84 0e 02 00 00    	je     c00175ac <Vm::faultHandler(regs*)+0x341>
c001739e:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00173a4:	0f 85 83 05 00 00    	jne    c001792d <Vm::faultHandler(regs*)+0x6c2>
c00173aa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00173ae:	89 d1                	mov    ecx,edx
c00173b0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00173b3:	c1 e1 08             	shl    ecx,0x8
c00173b6:	09 ca                	or     edx,ecx
c00173b8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00173bb:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00173bf:	89 d1                	mov    ecx,edx
c00173c1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00173c5:	c1 e1 08             	shl    ecx,0x8
c00173c8:	09 ca                	or     edx,ecx
c00173ca:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00173cd:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00173d1:	89 d1                	mov    ecx,edx
c00173d3:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00173d7:	c1 e1 08             	shl    ecx,0x8
c00173da:	09 ca                	or     edx,ecx
c00173dc:	81 ca 00 02 02 00    	or     edx,0x20200
c00173e2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173e5:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00173e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173ef:	d1 e8                	shr    eax,1
c00173f1:	83 e0 01             	and    eax,0x1
c00173f4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173f7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173fa:	83 c0 06             	add    eax,0x6
c00173fd:	25 ff ff 00 00       	and    eax,0xffff
c0017402:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017405:	e9 1f 05 00 00       	jmp    c0017929 <Vm::faultHandler(regs*)+0x6be>
c001740a:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017410:	0f 84 95 04 00 00    	je     c00178ab <Vm::faultHandler(regs*)+0x640>
c0017416:	0f 82 66 04 00 00    	jb     c0017882 <Vm::faultHandler(regs*)+0x617>
c001741c:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017422:	0f 84 9a 04 00 00    	je     c00178c2 <Vm::faultHandler(regs*)+0x657>
c0017428:	e9 00 05 00 00       	jmp    c001792d <Vm::faultHandler(regs*)+0x6c2>
c001742d:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017433:	0f 84 dd 04 00 00    	je     c0017916 <Vm::faultHandler(regs*)+0x6ab>
c0017439:	77 2e                	ja     c0017469 <Vm::faultHandler(regs*)+0x1fe>
c001743b:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017441:	0f 84 aa 04 00 00    	je     c00178f1 <Vm::faultHandler(regs*)+0x686>
c0017447:	81 fa ee 00 00 00    	cmp    edx,0xee
c001744d:	0f 85 da 04 00 00    	jne    c001792d <Vm::faultHandler(regs*)+0x6c2>
c0017453:	50                   	push   eax
c0017454:	50                   	push   eax
c0017455:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017459:	50                   	push   eax
c001745a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001745e:	50                   	push   eax
c001745f:	e8 2c f8 ff ff       	call   c0016c90 <Vm::outbv(unsigned short, unsigned char)>
c0017464:	e9 a5 04 00 00       	jmp    c001790e <Vm::faultHandler(regs*)+0x6a3>
c0017469:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001746f:	0f 84 6d 01 00 00    	je     c00175e2 <Vm::faultHandler(regs*)+0x377>
c0017475:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001747b:	0f 84 6f 01 00 00    	je     c00175f0 <Vm::faultHandler(regs*)+0x385>
c0017481:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017487:	0f 85 a0 04 00 00    	jne    c001792d <Vm::faultHandler(regs*)+0x6c2>
c001748d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017490:	e9 76 fe ff ff       	jmp    c001730b <Vm::faultHandler(regs*)+0xa0>
c0017495:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017498:	be 02 00 00 00       	mov    esi,0x2
c001749d:	e9 69 fe ff ff       	jmp    c001730b <Vm::faultHandler(regs*)+0xa0>
c00174a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174a5:	be 03 00 00 00       	mov    esi,0x3
c00174aa:	e9 5c fe ff ff       	jmp    c001730b <Vm::faultHandler(regs*)+0xa0>
c00174af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174b2:	be 04 00 00 00       	mov    esi,0x4
c00174b7:	e9 4f fe ff ff       	jmp    c001730b <Vm::faultHandler(regs*)+0xa0>
c00174bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174bf:	be 05 00 00 00       	mov    esi,0x5
c00174c4:	e9 42 fe ff ff       	jmp    c001730b <Vm::faultHandler(regs*)+0xa0>
c00174c9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174cc:	bd 01 00 00 00       	mov    ebp,0x1
c00174d1:	e9 35 fe ff ff       	jmp    c001730b <Vm::faultHandler(regs*)+0xa0>
c00174d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174d9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00174de:	e9 28 fe ff ff       	jmp    c001730b <Vm::faultHandler(regs*)+0xa0>
c00174e3:	83 e5 01             	and    ebp,0x1
c00174e6:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00174e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00174ed:	74 30                	je     c001751f <Vm::faultHandler(regs*)+0x2b4>
c00174ef:	83 e9 04             	sub    ecx,0x4
c00174f2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174f8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174fe:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017501:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017504:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001750a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001750e:	0f 84 12 04 00 00    	je     c0017926 <Vm::faultHandler(regs*)+0x6bb>
c0017514:	80 ce 02             	or     dh,0x2
c0017517:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001751a:	e9 07 04 00 00       	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c001751f:	83 e9 02             	sub    ecx,0x2
c0017522:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017528:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001752b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001752f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017535:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017539:	74 05                	je     c0017540 <Vm::faultHandler(regs*)+0x2d5>
c001753b:	80 ce 02             	or     dh,0x2
c001753e:	eb 03                	jmp    c0017543 <Vm::faultHandler(regs*)+0x2d8>
c0017540:	80 e6 fd             	and    dh,0xfd
c0017543:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017547:	e9 da 03 00 00       	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c001754c:	83 e5 01             	and    ebp,0x1
c001754f:	74 2a                	je     c001757b <Vm::faultHandler(regs*)+0x310>
c0017551:	8b 10                	mov    edx,DWORD PTR [eax]
c0017553:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017559:	81 ca 00 02 02 00    	or     edx,0x20200
c001755f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017562:	8b 00                	mov    eax,DWORD PTR [eax]
c0017564:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001756a:	c1 e8 09             	shr    eax,0x9
c001756d:	83 e0 01             	and    eax,0x1
c0017570:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017573:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017576:	83 c0 04             	add    eax,0x4
c0017579:	eb 24                	jmp    c001759f <Vm::faultHandler(regs*)+0x334>
c001757b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001757e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017584:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017587:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001758a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017590:	c1 e8 09             	shr    eax,0x9
c0017593:	83 e0 01             	and    eax,0x1
c0017596:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017599:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001759c:	83 c0 02             	add    eax,0x2
c001759f:	25 ff ff 00 00       	and    eax,0xffff
c00175a4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00175a7:	e9 7a 03 00 00       	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c00175ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175b0:	3d ee 00 00 00       	cmp    eax,0xee
c00175b5:	75 10                	jne    c00175c7 <Vm::faultHandler(regs*)+0x35c>
c00175b7:	83 ec 0c             	sub    esp,0xc
c00175ba:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00175bd:	e8 6e f7 ff ff       	call   c0016d30 <Vm::mainloop3(unsigned long)>
c00175c2:	e9 4a 03 00 00       	jmp    c0017911 <Vm::faultHandler(regs*)+0x6a6>
c00175c7:	83 ec 0c             	sub    esp,0xc
c00175ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175d2:	51                   	push   ecx
c00175d3:	50                   	push   eax
c00175d4:	53                   	push   ebx
c00175d5:	e8 80 fb ff ff       	call   c001715a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00175da:	83 c4 20             	add    esp,0x20
c00175dd:	e9 47 03 00 00       	jmp    c0017929 <Vm::faultHandler(regs*)+0x6be>
c00175e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175e7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00175eb:	e9 36 03 00 00       	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c00175f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175f5:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00175f9:	e9 28 03 00 00       	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c00175fe:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017603:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017606:	74 2b                	je     c0017633 <Vm::faultHandler(regs*)+0x3c8>
c0017608:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001760f:	76 22                	jbe    c0017633 <Vm::faultHandler(regs*)+0x3c8>
c0017611:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017615:	50                   	push   eax
c0017616:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001761a:	50                   	push   eax
c001761b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001761f:	50                   	push   eax
c0017620:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017624:	50                   	push   eax
c0017625:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017629:	50                   	push   eax
c001762a:	6a 6c                	push   0x6c
c001762c:	6a 6c                	push   0x6c
c001762e:	e9 c0 01 00 00       	jmp    c00177f3 <Vm::faultHandler(regs*)+0x588>
c0017633:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017637:	83 ec 0c             	sub    esp,0xc
c001763a:	0f b7 f6             	movzx  esi,si
c001763d:	50                   	push   eax
c001763e:	e8 3a f6 ff ff       	call   c0016c7d <Vm::inbv(unsigned short)>
c0017643:	83 c4 0c             	add    esp,0xc
c0017646:	0f b6 c0             	movzx  eax,al
c0017649:	50                   	push   eax
c001764a:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001764e:	50                   	push   eax
c001764f:	56                   	push   esi
c0017650:	e8 d6 fb ff ff       	call   c001722b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017655:	83 c4 10             	add    esp,0x10
c0017658:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001765b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001765f:	74 03                	je     c0017664 <Vm::faultHandler(regs*)+0x3f9>
c0017661:	48                   	dec    eax
c0017662:	eb 01                	jmp    c0017665 <Vm::faultHandler(regs*)+0x3fa>
c0017664:	40                   	inc    eax
c0017665:	0f b7 c0             	movzx  eax,ax
c0017668:	e9 8e 00 00 00       	jmp    c00176fb <Vm::faultHandler(regs*)+0x490>
c001766d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017672:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017675:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017678:	74 29                	je     c00176a3 <Vm::faultHandler(regs*)+0x438>
c001767a:	3d ff ff 00 00       	cmp    eax,0xffff
c001767f:	76 22                	jbe    c00176a3 <Vm::faultHandler(regs*)+0x438>
c0017681:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017685:	50                   	push   eax
c0017686:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001768a:	50                   	push   eax
c001768b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001768f:	50                   	push   eax
c0017690:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017694:	50                   	push   eax
c0017695:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017699:	50                   	push   eax
c001769a:	6a 6d                	push   0x6d
c001769c:	6a 6d                	push   0x6d
c001769e:	e9 50 01 00 00       	jmp    c00177f3 <Vm::faultHandler(regs*)+0x588>
c00176a3:	83 e5 01             	and    ebp,0x1
c00176a6:	0f b7 c8             	movzx  ecx,ax
c00176a9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00176ac:	0f b7 f6             	movzx  esi,si
c00176af:	74 1e                	je     c00176cf <Vm::faultHandler(regs*)+0x464>
c00176b1:	ed                   	in     eax,dx
c00176b2:	55                   	push   ebp
c00176b3:	50                   	push   eax
c00176b4:	51                   	push   ecx
c00176b5:	56                   	push   esi
c00176b6:	e8 9b fb ff ff       	call   c0017256 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00176bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176be:	83 c4 10             	add    esp,0x10
c00176c1:	8d 50 04             	lea    edx,[eax+0x4]
c00176c4:	83 e8 04             	sub    eax,0x4
c00176c7:	81 e2 ff ff 00 00    	and    edx,0xffff
c00176cd:	eb 20                	jmp    c00176ef <Vm::faultHandler(regs*)+0x484>
c00176cf:	66 ed                	in     ax,dx
c00176d1:	57                   	push   edi
c00176d2:	0f b7 c0             	movzx  eax,ax
c00176d5:	50                   	push   eax
c00176d6:	51                   	push   ecx
c00176d7:	56                   	push   esi
c00176d8:	e8 63 fb ff ff       	call   c0017240 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00176dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176e0:	83 c4 10             	add    esp,0x10
c00176e3:	8d 50 02             	lea    edx,[eax+0x2]
c00176e6:	83 e8 02             	sub    eax,0x2
c00176e9:	81 e2 ff ff 00 00    	and    edx,0xffff
c00176ef:	25 ff ff 00 00       	and    eax,0xffff
c00176f4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176f8:	0f 44 c2             	cmove  eax,edx
c00176fb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00176fe:	e9 23 02 00 00       	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c0017703:	8d 46 ff             	lea    eax,[esi-0x1]
c0017706:	0f b6 f0             	movzx  esi,al
c0017709:	83 fe 05             	cmp    esi,0x5
c001770c:	77 23                	ja     c0017731 <Vm::faultHandler(regs*)+0x4c6>
c001770e:	ff 24 b5 20 43 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdbce0]
c0017715:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001771a:	eb 15                	jmp    c0017731 <Vm::faultHandler(regs*)+0x4c6>
c001771c:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017720:	eb 0f                	jmp    c0017731 <Vm::faultHandler(regs*)+0x4c6>
c0017722:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017726:	eb 09                	jmp    c0017731 <Vm::faultHandler(regs*)+0x4c6>
c0017728:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001772c:	eb 03                	jmp    c0017731 <Vm::faultHandler(regs*)+0x4c6>
c001772e:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017731:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017736:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017739:	74 29                	je     c0017764 <Vm::faultHandler(regs*)+0x4f9>
c001773b:	3d ff ff 00 00       	cmp    eax,0xffff
c0017740:	76 22                	jbe    c0017764 <Vm::faultHandler(regs*)+0x4f9>
c0017742:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017746:	50                   	push   eax
c0017747:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001774b:	50                   	push   eax
c001774c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017750:	50                   	push   eax
c0017751:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017755:	50                   	push   eax
c0017756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001775a:	50                   	push   eax
c001775b:	6a 6e                	push   0x6e
c001775d:	6a 6e                	push   0x6e
c001775f:	e9 8f 00 00 00       	jmp    c00177f3 <Vm::faultHandler(regs*)+0x588>
c0017764:	52                   	push   edx
c0017765:	0f b7 c0             	movzx  eax,ax
c0017768:	52                   	push   edx
c0017769:	50                   	push   eax
c001776a:	57                   	push   edi
c001776b:	e8 87 fa ff ff       	call   c00171f7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017770:	59                   	pop    ecx
c0017771:	5e                   	pop    esi
c0017772:	0f b6 c0             	movzx  eax,al
c0017775:	50                   	push   eax
c0017776:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001777a:	50                   	push   eax
c001777b:	e8 10 f5 ff ff       	call   c0016c90 <Vm::outbv(unsigned short, unsigned char)>
c0017780:	83 c4 10             	add    esp,0x10
c0017783:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017786:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001778a:	74 03                	je     c001778f <Vm::faultHandler(regs*)+0x524>
c001778c:	48                   	dec    eax
c001778d:	eb 01                	jmp    c0017790 <Vm::faultHandler(regs*)+0x525>
c001778f:	40                   	inc    eax
c0017790:	0f b7 c0             	movzx  eax,ax
c0017793:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017796:	e9 8b 01 00 00       	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c001779b:	8d 46 ff             	lea    eax,[esi-0x1]
c001779e:	0f b6 f0             	movzx  esi,al
c00177a1:	83 fe 05             	cmp    esi,0x5
c00177a4:	77 1e                	ja     c00177c4 <Vm::faultHandler(regs*)+0x559>
c00177a6:	ff 24 b5 38 43 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdbcc8]
c00177ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00177b1:	eb 11                	jmp    c00177c4 <Vm::faultHandler(regs*)+0x559>
c00177b3:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00177b6:	eb 0c                	jmp    c00177c4 <Vm::faultHandler(regs*)+0x559>
c00177b8:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00177bb:	eb 07                	jmp    c00177c4 <Vm::faultHandler(regs*)+0x559>
c00177bd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00177c0:	eb 02                	jmp    c00177c4 <Vm::faultHandler(regs*)+0x559>
c00177c2:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00177c4:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00177c9:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00177cc:	74 37                	je     c0017805 <Vm::faultHandler(regs*)+0x59a>
c00177ce:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00177d4:	76 2f                	jbe    c0017805 <Vm::faultHandler(regs*)+0x59a>
c00177d6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177da:	50                   	push   eax
c00177db:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177df:	50                   	push   eax
c00177e0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177e4:	50                   	push   eax
c00177e5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177e9:	50                   	push   eax
c00177ea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177ee:	50                   	push   eax
c00177ef:	6a 6f                	push   0x6f
c00177f1:	6a 6f                	push   0x6f
c00177f3:	68 c3 42 02 c0       	push   0xc00242c3
c00177f8:	e8 51 f7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00177fd:	83 c4 20             	add    esp,0x20
c0017800:	e9 86 01 00 00       	jmp    c001798b <Vm::faultHandler(regs*)+0x720>
c0017805:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017808:	0f b7 d7             	movzx  edx,di
c001780b:	0f b7 c6             	movzx  eax,si
c001780e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017811:	81 e1 00 04 00 00    	and    ecx,0x400
c0017817:	83 e5 01             	and    ebp,0x1
c001781a:	74 1c                	je     c0017838 <Vm::faultHandler(regs*)+0x5cd>
c001781c:	55                   	push   ebp
c001781d:	55                   	push   ebp
c001781e:	50                   	push   eax
c001781f:	52                   	push   edx
c0017820:	e8 f5 f9 ff ff       	call   c001721a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017825:	83 c4 10             	add    esp,0x10
c0017828:	89 fa                	mov    edx,edi
c001782a:	ef                   	out    dx,eax
c001782b:	8d 46 04             	lea    eax,[esi+0x4]
c001782e:	83 ee 04             	sub    esi,0x4
c0017831:	25 ff ff 00 00       	and    eax,0xffff
c0017836:	eb 1b                	jmp    c0017853 <Vm::faultHandler(regs*)+0x5e8>
c0017838:	55                   	push   ebp
c0017839:	55                   	push   ebp
c001783a:	50                   	push   eax
c001783b:	52                   	push   edx
c001783c:	e8 c7 f9 ff ff       	call   c0017208 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017841:	83 c4 10             	add    esp,0x10
c0017844:	89 fa                	mov    edx,edi
c0017846:	66 ef                	out    dx,ax
c0017848:	8d 46 02             	lea    eax,[esi+0x2]
c001784b:	83 ee 02             	sub    esi,0x2
c001784e:	25 ff ff 00 00       	and    eax,0xffff
c0017853:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017859:	85 c9                	test   ecx,ecx
c001785b:	0f 44 f0             	cmove  esi,eax
c001785e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017861:	e9 c0 00 00 00       	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c0017866:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001786d:	83 ec 0c             	sub    esp,0xc
c0017870:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017874:	50                   	push   eax
c0017875:	e8 03 f4 ff ff       	call   c0016c7d <Vm::inbv(unsigned short)>
c001787a:	0f b6 c0             	movzx  eax,al
c001787d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017880:	eb 3a                	jmp    c00178bc <Vm::faultHandler(regs*)+0x651>
c0017882:	83 e5 01             	and    ebp,0x1
c0017885:	74 07                	je     c001788e <Vm::faultHandler(regs*)+0x623>
c0017887:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001788b:	ed                   	in     eax,dx
c001788c:	eb 14                	jmp    c00178a2 <Vm::faultHandler(regs*)+0x637>
c001788e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017891:	66 31 f6             	xor    si,si
c0017894:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017897:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001789b:	66 ed                	in     ax,dx
c001789d:	0f b7 c0             	movzx  eax,ax
c00178a0:	09 f0                	or     eax,esi
c00178a2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178a5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178a9:	eb 7e                	jmp    c0017929 <Vm::faultHandler(regs*)+0x6be>
c00178ab:	52                   	push   edx
c00178ac:	52                   	push   edx
c00178ad:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00178b1:	50                   	push   eax
c00178b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178b6:	50                   	push   eax
c00178b7:	e8 d4 f3 ff ff       	call   c0016c90 <Vm::outbv(unsigned short, unsigned char)>
c00178bc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178c0:	eb 4f                	jmp    c0017911 <Vm::faultHandler(regs*)+0x6a6>
c00178c2:	83 e5 01             	and    ebp,0x1
c00178c5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178c8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178cc:	74 03                	je     c00178d1 <Vm::faultHandler(regs*)+0x666>
c00178ce:	ef                   	out    dx,eax
c00178cf:	eb d4                	jmp    c00178a5 <Vm::faultHandler(regs*)+0x63a>
c00178d1:	66 ef                	out    dx,ax
c00178d3:	eb d0                	jmp    c00178a5 <Vm::faultHandler(regs*)+0x63a>
c00178d5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00178d9:	83 ec 0c             	sub    esp,0xc
c00178dc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178e3:	50                   	push   eax
c00178e4:	e8 94 f3 ff ff       	call   c0016c7d <Vm::inbv(unsigned short)>
c00178e9:	0f b6 c0             	movzx  eax,al
c00178ec:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178ef:	eb 1d                	jmp    c001790e <Vm::faultHandler(regs*)+0x6a3>
c00178f1:	83 e5 01             	and    ebp,0x1
c00178f4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178f7:	74 03                	je     c00178fc <Vm::faultHandler(regs*)+0x691>
c00178f9:	ed                   	in     eax,dx
c00178fa:	eb 0d                	jmp    c0017909 <Vm::faultHandler(regs*)+0x69e>
c00178fc:	66 ed                	in     ax,dx
c00178fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017901:	0f b7 c0             	movzx  eax,ax
c0017904:	66 31 d2             	xor    dx,dx
c0017907:	09 d0                	or     eax,edx
c0017909:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001790c:	eb 18                	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c001790e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	eb 13                	jmp    c0017929 <Vm::faultHandler(regs*)+0x6be>
c0017916:	83 e5 01             	and    ebp,0x1
c0017919:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001791c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001791f:	74 03                	je     c0017924 <Vm::faultHandler(regs*)+0x6b9>
c0017921:	ef                   	out    dx,eax
c0017922:	eb 02                	jmp    c0017926 <Vm::faultHandler(regs*)+0x6bb>
c0017924:	66 ef                	out    dx,ax
c0017926:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017929:	b0 01                	mov    al,0x1
c001792b:	eb 60                	jmp    c001798d <Vm::faultHandler(regs*)+0x722>
c001792d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017931:	50                   	push   eax
c0017932:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017936:	50                   	push   eax
c0017937:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001793b:	50                   	push   eax
c001793c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017940:	50                   	push   eax
c0017941:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017945:	50                   	push   eax
c0017946:	52                   	push   edx
c0017947:	52                   	push   edx
c0017948:	68 f0 42 02 c0       	push   0xc00242f0
c001794d:	e8 fc f5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017952:	83 c4 20             	add    esp,0x20
c0017955:	83 ec 0c             	sub    esp,0xc
c0017958:	6a 60                	push   0x60
c001795a:	e8 1e f3 ff ff       	call   c0016c7d <Vm::inbv(unsigned short)>
c001795f:	83 c4 10             	add    esp,0x10
c0017962:	0f b6 d0             	movzx  edx,al
c0017965:	83 fa 1c             	cmp    edx,0x1c
c0017968:	74 05                	je     c001796f <Vm::faultHandler(regs*)+0x704>
c001796a:	83 fa 5a             	cmp    edx,0x5a
c001796d:	75 e6                	jne    c0017955 <Vm::faultHandler(regs*)+0x6ea>
c001796f:	0f b6 c0             	movzx  eax,al
c0017972:	83 f8 1c             	cmp    eax,0x1c
c0017975:	74 05                	je     c001797c <Vm::faultHandler(regs*)+0x711>
c0017977:	83 f8 5a             	cmp    eax,0x5a
c001797a:	75 0f                	jne    c001798b <Vm::faultHandler(regs*)+0x720>
c001797c:	83 ec 0c             	sub    esp,0xc
c001797f:	6a 60                	push   0x60
c0017981:	e8 f7 f2 ff ff       	call   c0016c7d <Vm::inbv(unsigned short)>
c0017986:	83 c4 10             	add    esp,0x10
c0017989:	eb e4                	jmp    c001796f <Vm::faultHandler(regs*)+0x704>
c001798b:	31 c0                	xor    eax,eax
c001798d:	83 c4 2c             	add    esp,0x2c
c0017990:	5b                   	pop    ebx
c0017991:	5e                   	pop    esi
c0017992:	5f                   	pop    edi
c0017993:	5d                   	pop    ebp
c0017994:	c3                   	ret    
c0017995:	90                   	nop

c0017996 <noCopro(unsigned long)>:
c0017996:	c3                   	ret    
c0017997:	90                   	nop

c0017998 <CPU::close(int, int, void*)>:
c0017998:	31 c0                	xor    eax,eax
c001799a:	c3                   	ret    

c001799b <x86ReadCMOS(unsigned char)>:
c001799b:	83 ec 14             	sub    esp,0x14
c001799e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179a2:	88 04 24             	mov    BYTE PTR [esp],al
c00179a5:	a0 ec da 02 c0       	mov    al,ds:0xc002daec
c00179aa:	0f b6 c0             	movzx  eax,al
c00179ad:	85 c0                	test   eax,eax
c00179af:	74 04                	je     c00179b5 <x86ReadCMOS(unsigned char)+0x1a>
c00179b1:	b2 00                	mov    dl,0x0
c00179b3:	eb 02                	jmp    c00179b7 <x86ReadCMOS(unsigned char)+0x1c>
c00179b5:	b2 80                	mov    dl,0x80
c00179b7:	8a 04 24             	mov    al,BYTE PTR [esp]
c00179ba:	09 d0                	or     eax,edx
c00179bc:	0f b6 c0             	movzx  eax,al
c00179bf:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00179c6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00179ca:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00179ce:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00179d3:	ee                   	out    dx,al
c00179d4:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00179db:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00179e0:	89 c2                	mov    edx,eax
c00179e2:	ec                   	in     al,dx
c00179e3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00179e7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00179eb:	83 c4 14             	add    esp,0x14
c00179ee:	c3                   	ret    

c00179ef <x86WriteCMOS(unsigned char, unsigned char)>:
c00179ef:	83 ec 18             	sub    esp,0x18
c00179f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179fa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00179fe:	88 d0                	mov    al,dl
c0017a00:	88 04 24             	mov    BYTE PTR [esp],al
c0017a03:	a0 ec da 02 c0       	mov    al,ds:0xc002daec
c0017a08:	0f b6 c0             	movzx  eax,al
c0017a0b:	85 c0                	test   eax,eax
c0017a0d:	74 04                	je     c0017a13 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0017a0f:	b2 00                	mov    dl,0x0
c0017a11:	eb 02                	jmp    c0017a15 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0017a13:	b2 80                	mov    dl,0x80
c0017a15:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0017a19:	09 d0                	or     eax,edx
c0017a1b:	0f b6 c0             	movzx  eax,al
c0017a1e:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0017a25:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017a29:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017a2d:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017a32:	ee                   	out    dx,al
c0017a33:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0017a37:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0017a3e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0017a42:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0017a46:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0017a4b:	ee                   	out    dx,al
c0017a4c:	90                   	nop
c0017a4d:	83 c4 18             	add    esp,0x18
c0017a50:	c3                   	ret    

c0017a51 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0017a51:	60                   	pusha  
c0017a52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a5a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017a5e:	9c                   	pushf  
c0017a5f:	fa                   	cli    
c0017a60:	0f 09                	wbinvd 
c0017a62:	0f 30                	wrmsr  
c0017a64:	9d                   	popf   
c0017a65:	89 c2                	mov    edx,eax
c0017a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6b:	89 10                	mov    DWORD PTR [eax],edx
c0017a6d:	61                   	popa   
c0017a6e:	90                   	nop
c0017a6f:	c3                   	ret    

c0017a70 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0017a70:	60                   	pusha  
c0017a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a75:	89 c1                	mov    ecx,eax
c0017a77:	9c                   	pushf  
c0017a78:	fa                   	cli    
c0017a79:	0f 09                	wbinvd 
c0017a7b:	31 c0                	xor    eax,eax
c0017a7d:	31 d2                	xor    edx,edx
c0017a7f:	0f 32                	rdmsr  
c0017a81:	9d                   	popf   
c0017a82:	89 c2                	mov    edx,eax
c0017a84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a88:	89 10                	mov    DWORD PTR [eax],edx
c0017a8a:	61                   	popa   
c0017a8b:	90                   	nop
c0017a8c:	c3                   	ret    

c0017a8d <AMD_K6_writeback(int, int, int)>:
c0017a8d:	83 ec 20             	sub    esp,0x20
c0017a90:	a1 34 d1 02 c0       	mov    eax,ds:0xc002d134
c0017a95:	c1 e8 14             	shr    eax,0x14
c0017a98:	c1 e8 02             	shr    eax,0x2
c0017a9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a9f:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0017aa4:	0f 85 9e 00 00 00    	jne    c0017b48 <AMD_K6_writeback(int, int, int)+0xbb>
c0017aaa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ab2:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0017ab7:	75 19                	jne    c0017ad2 <AMD_K6_writeback(int, int, int)+0x45>
c0017ab9:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0017abe:	7f 0a                	jg     c0017aca <AMD_K6_writeback(int, int, int)+0x3d>
c0017ac0:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0017ac8:	eb 08                	jmp    c0017ad2 <AMD_K6_writeback(int, int, int)+0x45>
c0017aca:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0017ad2:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0017ad7:	7c 6e                	jl     c0017b47 <AMD_K6_writeback(int, int, int)+0xba>
c0017ad9:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0017ade:	7e 09                	jle    c0017ae9 <AMD_K6_writeback(int, int, int)+0x5c>
c0017ae0:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0017ae5:	74 36                	je     c0017b1d <AMD_K6_writeback(int, int, int)+0x90>
c0017ae7:	eb 5e                	jmp    c0017b47 <AMD_K6_writeback(int, int, int)+0xba>
c0017ae9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017aed:	50                   	push   eax
c0017aee:	68 82 00 00 c0       	push   0xc0000082
c0017af3:	e8 78 ff ff ff       	call   c0017a70 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017af8:	83 c4 08             	add    esp,0x8
c0017afb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017aff:	d1 e0                	shl    eax,1
c0017b01:	83 e0 7f             	and    eax,0x7f
c0017b04:	89 c2                	mov    edx,eax
c0017b06:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b0a:	50                   	push   eax
c0017b0b:	6a 00                	push   0x0
c0017b0d:	52                   	push   edx
c0017b0e:	68 82 00 00 c0       	push   0xc0000082
c0017b13:	e8 39 ff ff ff       	call   c0017a51 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017b18:	83 c4 10             	add    esp,0x10
c0017b1b:	eb 2b                	jmp    c0017b48 <AMD_K6_writeback(int, int, int)+0xbb>
c0017b1d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b21:	50                   	push   eax
c0017b22:	68 82 00 00 c0       	push   0xc0000082
c0017b27:	e8 44 ff ff ff       	call   c0017a70 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017b2c:	83 c4 08             	add    esp,0x8
c0017b2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b33:	50                   	push   eax
c0017b34:	6a 00                	push   0x0
c0017b36:	6a 00                	push   0x0
c0017b38:	68 82 00 00 c0       	push   0xc0000082
c0017b3d:	e8 0f ff ff ff       	call   c0017a51 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017b42:	83 c4 10             	add    esp,0x10
c0017b45:	eb 01                	jmp    c0017b48 <AMD_K6_writeback(int, int, int)+0xbb>
c0017b47:	90                   	nop
c0017b48:	90                   	nop
c0017b49:	83 c4 20             	add    esp,0x20
c0017b4c:	c3                   	ret    

c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017b4d:	56                   	push   esi
c0017b4e:	53                   	push   ebx
c0017b4f:	a1 80 5c 02 c0       	mov    eax,ds:0xc0025c80
c0017b54:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017b58:	75 32                	jne    c0017b8c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017b5a:	8b 15 e0 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dae0
c0017b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b64:	89 10                	mov    DWORD PTR [eax],edx
c0017b66:	8b 15 dc da 02 c0    	mov    edx,DWORD PTR ds:0xc002dadc
c0017b6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b70:	89 10                	mov    DWORD PTR [eax],edx
c0017b72:	8b 15 d8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dad8
c0017b78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b7c:	89 10                	mov    DWORD PTR [eax],edx
c0017b7e:	8b 15 d4 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dad4
c0017b84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b88:	89 10                	mov    DWORD PTR [eax],edx
c0017b8a:	eb 5c                	jmp    c0017be8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0017b8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b90:	ba 00 00 00 00       	mov    edx,0x0
c0017b95:	89 d1                	mov    ecx,edx
c0017b97:	0f a2                	cpuid  
c0017b99:	89 c6                	mov    esi,eax
c0017b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b9f:	89 30                	mov    DWORD PTR [eax],esi
c0017ba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ba5:	89 18                	mov    DWORD PTR [eax],ebx
c0017ba7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bab:	89 08                	mov    DWORD PTR [eax],ecx
c0017bad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bb1:	89 10                	mov    DWORD PTR [eax],edx
c0017bb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bb7:	a3 80 5c 02 c0       	mov    ds:0xc0025c80,eax
c0017bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bc2:	a3 e0 da 02 c0       	mov    ds:0xc002dae0,eax
c0017bc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bcd:	a3 dc da 02 c0       	mov    ds:0xc002dadc,eax
c0017bd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bd8:	a3 d8 da 02 c0       	mov    ds:0xc002dad8,eax
c0017bdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017be3:	a3 d4 da 02 c0       	mov    ds:0xc002dad4,eax
c0017be8:	5b                   	pop    ebx
c0017be9:	5e                   	pop    esi
c0017bea:	c3                   	ret    

c0017beb <cpuidCheckEDX(unsigned int)>:
c0017beb:	83 ec 10             	sub    esp,0x10
c0017bee:	89 e0                	mov    eax,esp
c0017bf0:	50                   	push   eax
c0017bf1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017bf5:	50                   	push   eax
c0017bf6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017bfa:	50                   	push   eax
c0017bfb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bff:	50                   	push   eax
c0017c00:	6a 01                	push   0x1
c0017c02:	e8 46 ff ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c07:	83 c4 14             	add    esp,0x14
c0017c0a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c0d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017c11:	0f 95 c0             	setne  al
c0017c14:	83 c4 10             	add    esp,0x10
c0017c17:	c3                   	ret    

c0017c18 <cpuidCheckECX(unsigned int)>:
c0017c18:	83 ec 10             	sub    esp,0x10
c0017c1b:	89 e0                	mov    eax,esp
c0017c1d:	50                   	push   eax
c0017c1e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c22:	50                   	push   eax
c0017c23:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017c27:	50                   	push   eax
c0017c28:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c2c:	50                   	push   eax
c0017c2d:	6a 01                	push   0x1
c0017c2f:	e8 19 ff ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c34:	83 c4 14             	add    esp,0x14
c0017c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c3b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017c3f:	0f 95 c0             	setne  al
c0017c42:	83 c4 10             	add    esp,0x10
c0017c45:	c3                   	ret    

c0017c46 <cpuidCheckExtendedEBX(unsigned int)>:
c0017c46:	83 ec 10             	sub    esp,0x10
c0017c49:	89 e0                	mov    eax,esp
c0017c4b:	50                   	push   eax
c0017c4c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c50:	50                   	push   eax
c0017c51:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017c55:	50                   	push   eax
c0017c56:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c5a:	50                   	push   eax
c0017c5b:	6a 07                	push   0x7
c0017c5d:	e8 eb fe ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c62:	83 c4 14             	add    esp,0x14
c0017c65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c69:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017c6d:	0f 95 c0             	setne  al
c0017c70:	83 c4 10             	add    esp,0x10
c0017c73:	c3                   	ret    

c0017c74 <cpuidCheckExtendedECX(unsigned int)>:
c0017c74:	83 ec 10             	sub    esp,0x10
c0017c77:	89 e0                	mov    eax,esp
c0017c79:	50                   	push   eax
c0017c7a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c7e:	50                   	push   eax
c0017c7f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017c83:	50                   	push   eax
c0017c84:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c88:	50                   	push   eax
c0017c89:	6a 07                	push   0x7
c0017c8b:	e8 bd fe ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c90:	83 c4 14             	add    esp,0x14
c0017c93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c97:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017c9b:	0f 95 c0             	setne  al
c0017c9e:	83 c4 10             	add    esp,0x10
c0017ca1:	c3                   	ret    

c0017ca2 <HalDetectFeatures()>:
c0017ca2:	57                   	push   edi
c0017ca3:	56                   	push   esi
c0017ca4:	53                   	push   ebx
c0017ca5:	81 ec 90 00 00 00    	sub    esp,0x90
c0017cab:	83 ec 04             	sub    esp,0x4
c0017cae:	6a 08                	push   0x8
c0017cb0:	6a 00                	push   0x0
c0017cb2:	68 0c db 02 c0       	push   0xc002db0c
c0017cb7:	e8 34 88 fe ff       	call   c00004f0 <memset>
c0017cbc:	83 c4 10             	add    esp,0x10
c0017cbf:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017cc4:	83 c8 04             	or     eax,0x4
c0017cc7:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017ccc:	e8 28 85 fe ff       	call   c00001f9 <detectCPUID>
c0017cd1:	85 c0                	test   eax,eax
c0017cd3:	0f 95 c0             	setne  al
c0017cd6:	83 e0 01             	and    eax,0x1
c0017cd9:	83 e0 01             	and    eax,0x1
c0017cdc:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017cdf:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017ce4:	83 e0 fd             	and    eax,0xfffffffd
c0017ce7:	88 c2                	mov    dl,al
c0017ce9:	88 c8                	mov    al,cl
c0017ceb:	09 d0                	or     eax,edx
c0017ced:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017cf2:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017cf7:	83 e0 02             	and    eax,0x2
c0017cfa:	0f b6 c0             	movzx  eax,al
c0017cfd:	85 c0                	test   eax,eax
c0017cff:	0f 84 7f 02 00 00    	je     c0017f84 <HalDetectFeatures()+0x2e2>
c0017d05:	83 ec 0c             	sub    esp,0xc
c0017d08:	6a 20                	push   0x20
c0017d0a:	e8 dc fe ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0017d0f:	83 c4 10             	add    esp,0x10
c0017d12:	83 e0 01             	and    eax,0x1
c0017d15:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017d1c:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017d21:	83 e0 f7             	and    eax,0xfffffff7
c0017d24:	88 c2                	mov    dl,al
c0017d26:	88 c8                	mov    al,cl
c0017d28:	09 d0                	or     eax,edx
c0017d2a:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017d2f:	83 ec 0c             	sub    esp,0xc
c0017d32:	68 00 00 00 04       	push   0x4000000
c0017d37:	e8 af fe ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0017d3c:	83 c4 10             	add    esp,0x10
c0017d3f:	89 c1                	mov    ecx,eax
c0017d41:	83 e1 01             	and    ecx,0x1
c0017d44:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0017d49:	83 e0 fe             	and    eax,0xfffffffe
c0017d4c:	88 c2                	mov    dl,al
c0017d4e:	88 c8                	mov    al,cl
c0017d50:	09 d0                	or     eax,edx
c0017d52:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0017d57:	83 ec 0c             	sub    esp,0xc
c0017d5a:	68 80 00 00 00       	push   0x80
c0017d5f:	e8 87 fe ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0017d64:	83 c4 10             	add    esp,0x10
c0017d67:	89 c1                	mov    ecx,eax
c0017d69:	c1 e1 07             	shl    ecx,0x7
c0017d6c:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0017d71:	83 e0 7f             	and    eax,0x7f
c0017d74:	88 c2                	mov    dl,al
c0017d76:	88 c8                	mov    al,cl
c0017d78:	09 d0                	or     eax,edx
c0017d7a:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0017d7f:	83 ec 0c             	sub    esp,0xc
c0017d82:	68 00 00 80 00       	push   0x800000
c0017d87:	e8 5f fe ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	83 e0 01             	and    eax,0x1
c0017d92:	89 c1                	mov    ecx,eax
c0017d94:	c1 e1 05             	shl    ecx,0x5
c0017d97:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017d9c:	83 e0 df             	and    eax,0xffffffdf
c0017d9f:	88 c2                	mov    dl,al
c0017da1:	88 c8                	mov    al,cl
c0017da3:	09 d0                	or     eax,edx
c0017da5:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017daa:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0017daf:	83 e0 01             	and    eax,0x1
c0017db2:	75 0c                	jne    c0017dc0 <HalDetectFeatures()+0x11e>
c0017db4:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0017db9:	25 00 04 00 00       	and    eax,0x400
c0017dbe:	74 0f                	je     c0017dcf <HalDetectFeatures()+0x12d>
c0017dc0:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017dc5:	83 e0 fe             	and    eax,0xfffffffe
c0017dc8:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017dcd:	eb 28                	jmp    c0017df7 <HalDetectFeatures()+0x155>
c0017dcf:	83 ec 0c             	sub    esp,0xc
c0017dd2:	68 00 02 00 00       	push   0x200
c0017dd7:	e8 0f fe ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0017ddc:	83 c4 10             	add    esp,0x10
c0017ddf:	89 c1                	mov    ecx,eax
c0017de1:	83 e1 01             	and    ecx,0x1
c0017de4:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017de9:	83 e0 fe             	and    eax,0xfffffffe
c0017dec:	88 c2                	mov    dl,al
c0017dee:	88 c8                	mov    al,cl
c0017df0:	09 d0                	or     eax,edx
c0017df2:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017df7:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017dfc:	83 e0 01             	and    eax,0x1
c0017dff:	0f b6 c0             	movzx  eax,al
c0017e02:	85 c0                	test   eax,eax
c0017e04:	74 1c                	je     c0017e22 <HalDetectFeatures()+0x180>
c0017e06:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017e0b:	83 e0 08             	and    eax,0x8
c0017e0e:	0f b6 c0             	movzx  eax,al
c0017e11:	85 c0                	test   eax,eax
c0017e13:	75 0d                	jne    c0017e22 <HalDetectFeatures()+0x180>
c0017e15:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017e1a:	83 e0 fe             	and    eax,0xfffffffe
c0017e1d:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017e22:	83 ec 0c             	sub    esp,0xc
c0017e25:	68 50 43 02 c0       	push   0xc0024350
c0017e2a:	e8 1f f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017e2f:	83 c4 10             	add    esp,0x10
c0017e32:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017e37:	83 e0 fe             	and    eax,0xfffffffe
c0017e3a:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017e3f:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0017e47:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0017e4f:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0017e57:	85 c0                	test   eax,eax
c0017e59:	0f 84 ab 00 00 00    	je     c0017f0a <HalDetectFeatures()+0x268>
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	6a 01                	push   0x1
c0017e64:	e8 af fd ff ff       	call   c0017c18 <cpuidCheckECX(unsigned int)>
c0017e69:	83 c4 10             	add    esp,0x10
c0017e6c:	83 e0 01             	and    eax,0x1
c0017e6f:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017e72:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0017e77:	83 e0 fd             	and    eax,0xfffffffd
c0017e7a:	88 c2                	mov    dl,al
c0017e7c:	88 c8                	mov    al,cl
c0017e7e:	09 d0                	or     eax,edx
c0017e80:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0017e85:	83 ec 0c             	sub    esp,0xc
c0017e88:	68 00 02 00 00       	push   0x200
c0017e8d:	e8 86 fd ff ff       	call   c0017c18 <cpuidCheckECX(unsigned int)>
c0017e92:	83 c4 10             	add    esp,0x10
c0017e95:	83 e0 01             	and    eax,0x1
c0017e98:	89 c1                	mov    ecx,eax
c0017e9a:	c1 e1 04             	shl    ecx,0x4
c0017e9d:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0017ea2:	83 e0 ef             	and    eax,0xffffffef
c0017ea5:	88 c2                	mov    dl,al
c0017ea7:	88 c8                	mov    al,cl
c0017ea9:	09 d0                	or     eax,edx
c0017eab:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0017eb0:	83 ec 0c             	sub    esp,0xc
c0017eb3:	68 00 00 08 00       	push   0x80000
c0017eb8:	e8 5b fd ff ff       	call   c0017c18 <cpuidCheckECX(unsigned int)>
c0017ebd:	83 c4 10             	add    esp,0x10
c0017ec0:	83 e0 01             	and    eax,0x1
c0017ec3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017eca:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0017ecf:	83 e0 fb             	and    eax,0xfffffffb
c0017ed2:	88 c2                	mov    dl,al
c0017ed4:	88 c8                	mov    al,cl
c0017ed6:	09 d0                	or     eax,edx
c0017ed8:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0017edd:	83 ec 0c             	sub    esp,0xc
c0017ee0:	68 00 00 10 00       	push   0x100000
c0017ee5:	e8 2e fd ff ff       	call   c0017c18 <cpuidCheckECX(unsigned int)>
c0017eea:	83 c4 10             	add    esp,0x10
c0017eed:	83 e0 01             	and    eax,0x1
c0017ef0:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017ef7:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0017efc:	83 e0 f7             	and    eax,0xfffffff7
c0017eff:	88 c2                	mov    dl,al
c0017f01:	88 c8                	mov    al,cl
c0017f03:	09 d0                	or     eax,edx
c0017f05:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0017f0a:	83 ec 0c             	sub    esp,0xc
c0017f0d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f11:	50                   	push   eax
c0017f12:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017f16:	50                   	push   eax
c0017f17:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017f1b:	50                   	push   eax
c0017f1c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017f20:	50                   	push   eax
c0017f21:	68 00 00 00 80       	push   0x80000000
c0017f26:	e8 22 fc ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f2b:	83 c4 20             	add    esp,0x20
c0017f2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f32:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017f37:	76 4b                	jbe    c0017f84 <HalDetectFeatures()+0x2e2>
c0017f39:	83 ec 0c             	sub    esp,0xc
c0017f3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f40:	50                   	push   eax
c0017f41:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017f45:	50                   	push   eax
c0017f46:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017f4a:	50                   	push   eax
c0017f4b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017f4f:	50                   	push   eax
c0017f50:	68 01 00 00 80       	push   0x80000001
c0017f55:	e8 f3 fb ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017f5a:	83 c4 20             	add    esp,0x20
c0017f5d:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017f62:	83 e0 bf             	and    eax,0xffffffbf
c0017f65:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017f6a:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0017f6f:	83 e0 fd             	and    eax,0xfffffffd
c0017f72:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0017f77:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0017f7c:	83 e0 fe             	and    eax,0xfffffffe
c0017f7f:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0017f84:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0017f89:	25 00 04 00 00       	and    eax,0x400
c0017f8e:	74 0d                	je     c0017f9d <HalDetectFeatures()+0x2fb>
c0017f90:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017f95:	83 e0 fb             	and    eax,0xfffffffb
c0017f98:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017f9d:	c6 05 08 db 02 c0 01 	mov    BYTE PTR ds:0xc002db08,0x1
c0017fa4:	83 ec 04             	sub    esp,0x4
c0017fa7:	6a 0d                	push   0xd
c0017fa9:	6a 00                	push   0x0
c0017fab:	68 f0 da 02 c0       	push   0xc002daf0
c0017fb0:	e8 3b 85 fe ff       	call   c00004f0 <memset>
c0017fb5:	83 c4 10             	add    esp,0x10
c0017fb8:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017fbd:	83 e0 02             	and    eax,0x2
c0017fc0:	0f b6 c0             	movzx  eax,al
c0017fc3:	85 c0                	test   eax,eax
c0017fc5:	0f 84 16 08 00 00    	je     c00187e1 <HalDetectFeatures()+0xb3f>
c0017fcb:	83 ec 0c             	sub    esp,0xc
c0017fce:	6a 10                	push   0x10
c0017fd0:	e8 16 fc ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0017fd5:	83 c4 10             	add    esp,0x10
c0017fd8:	83 e0 01             	and    eax,0x1
c0017fdb:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017fe2:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0017fe7:	83 e0 f7             	and    eax,0xfffffff7
c0017fea:	88 c2                	mov    dl,al
c0017fec:	88 c8                	mov    al,cl
c0017fee:	09 d0                	or     eax,edx
c0017ff0:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0017ff5:	83 ec 0c             	sub    esp,0xc
c0017ff8:	6a 40                	push   0x40
c0017ffa:	e8 ec fb ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	83 e0 01             	and    eax,0x1
c0018005:	89 c1                	mov    ecx,eax
c0018007:	c1 e1 04             	shl    ecx,0x4
c001800a:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c001800f:	83 e0 ef             	and    eax,0xffffffef
c0018012:	88 c2                	mov    dl,al
c0018014:	88 c8                	mov    al,cl
c0018016:	09 d0                	or     eax,edx
c0018018:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c001801d:	83 ec 0c             	sub    esp,0xc
c0018020:	6a 08                	push   0x8
c0018022:	e8 c4 fb ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0018027:	83 c4 10             	add    esp,0x10
c001802a:	83 e0 01             	and    eax,0x1
c001802d:	89 c1                	mov    ecx,eax
c001802f:	c1 e1 05             	shl    ecx,0x5
c0018032:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018037:	83 e0 df             	and    eax,0xffffffdf
c001803a:	88 c2                	mov    dl,al
c001803c:	88 c8                	mov    al,cl
c001803e:	09 d0                	or     eax,edx
c0018040:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0018045:	83 ec 0c             	sub    esp,0xc
c0018048:	68 00 20 00 00       	push   0x2000
c001804d:	e8 99 fb ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c0018052:	83 c4 10             	add    esp,0x10
c0018055:	83 e0 01             	and    eax,0x1
c0018058:	89 c1                	mov    ecx,eax
c001805a:	c1 e1 06             	shl    ecx,0x6
c001805d:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018062:	83 e0 bf             	and    eax,0xffffffbf
c0018065:	88 c2                	mov    dl,al
c0018067:	88 c8                	mov    al,cl
c0018069:	09 d0                	or     eax,edx
c001806b:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0018070:	83 ec 0c             	sub    esp,0xc
c0018073:	68 00 00 01 00       	push   0x10000
c0018078:	e8 6e fb ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	89 c1                	mov    ecx,eax
c0018082:	c1 e1 07             	shl    ecx,0x7
c0018085:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c001808a:	83 e0 7f             	and    eax,0x7f
c001808d:	88 c2                	mov    dl,al
c001808f:	88 c8                	mov    al,cl
c0018091:	09 d0                	or     eax,edx
c0018093:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0018098:	83 ec 0c             	sub    esp,0xc
c001809b:	6a 01                	push   0x1
c001809d:	e8 49 fb ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c00180a2:	83 c4 10             	add    esp,0x10
c00180a5:	83 e0 01             	and    eax,0x1
c00180a8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00180af:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c00180b4:	83 e0 f7             	and    eax,0xfffffff7
c00180b7:	88 c2                	mov    dl,al
c00180b9:	88 c8                	mov    al,cl
c00180bb:	09 d0                	or     eax,edx
c00180bd:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c00180c2:	83 ec 0c             	sub    esp,0xc
c00180c5:	68 00 08 00 00       	push   0x800
c00180ca:	e8 1c fb ff ff       	call   c0017beb <cpuidCheckEDX(unsigned int)>
c00180cf:	83 c4 10             	add    esp,0x10
c00180d2:	89 c1                	mov    ecx,eax
c00180d4:	83 e1 01             	and    ecx,0x1
c00180d7:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c00180dc:	83 e0 fe             	and    eax,0xfffffffe
c00180df:	88 c2                	mov    dl,al
c00180e1:	88 c8                	mov    al,cl
c00180e3:	09 d0                	or     eax,edx
c00180e5:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c00180ea:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c00180ef:	83 e0 40             	and    eax,0x40
c00180f2:	0f b6 c0             	movzx  eax,al
c00180f5:	85 c0                	test   eax,eax
c00180f7:	74 0a                	je     c0018103 <HalDetectFeatures()+0x461>
c00180f9:	c7 05 e8 da 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002dae8,0x100
c0018103:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018108:	83 e0 80             	and    eax,0xffffff80
c001810b:	0f b6 c0             	movzx  eax,al
c001810e:	85 c0                	test   eax,eax
c0018110:	74 0a                	je     c001811c <HalDetectFeatures()+0x47a>
c0018112:	c7 05 e4 da 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002dae4,0x80
c001811c:	83 ec 0c             	sub    esp,0xc
c001811f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018123:	50                   	push   eax
c0018124:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018128:	50                   	push   eax
c0018129:	8d 44 24 24          	lea    eax,[esp+0x24]
c001812d:	50                   	push   eax
c001812e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018132:	50                   	push   eax
c0018133:	6a 00                	push   0x0
c0018135:	e8 13 fa ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001813a:	83 c4 20             	add    esp,0x20
c001813d:	c7 44 24 48 f0 da 02 c0 	mov    DWORD PTR [esp+0x48],0xc002daf0
c0018145:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018149:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001814d:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0018155:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018159:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001815d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018161:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018165:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018169:	89 c6                	mov    esi,eax
c001816b:	89 d7                	mov    edi,edx
c001816d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001816f:	89 c8                	mov    eax,ecx
c0018171:	89 fa                	mov    edx,edi
c0018173:	89 f3                	mov    ebx,esi
c0018175:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018179:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001817d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018181:	b8 f4 da 02 c0       	mov    eax,0xc002daf4
c0018186:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001818a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001818e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0018192:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c001819a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001819e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00181a2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00181a6:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00181aa:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00181ae:	89 c6                	mov    esi,eax
c00181b0:	89 d7                	mov    edi,edx
c00181b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00181b4:	89 c8                	mov    eax,ecx
c00181b6:	89 fa                	mov    edx,edi
c00181b8:	89 f3                	mov    ebx,esi
c00181ba:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00181be:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00181c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00181c6:	b8 f8 da 02 c0       	mov    eax,0xc002daf8
c00181cb:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00181d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181d6:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00181da:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00181e2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00181e9:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00181ed:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00181f1:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00181f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00181fc:	89 c6                	mov    esi,eax
c00181fe:	89 d7                	mov    edi,edx
c0018200:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018202:	89 c8                	mov    eax,ecx
c0018204:	89 fa                	mov    edx,edi
c0018206:	89 f3                	mov    ebx,esi
c0018208:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001820c:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0018210:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0018214:	83 ec 08             	sub    esp,0x8
c0018217:	68 62 43 02 c0       	push   0xc0024362
c001821c:	68 f0 da 02 c0       	push   0xc002daf0
c0018221:	e8 5a 85 fe ff       	call   c0000780 <strcmp>
c0018226:	83 c4 10             	add    esp,0x10
c0018229:	85 c0                	test   eax,eax
c001822b:	74 19                	je     c0018246 <HalDetectFeatures()+0x5a4>
c001822d:	83 ec 08             	sub    esp,0x8
c0018230:	68 6f 43 02 c0       	push   0xc002436f
c0018235:	68 f0 da 02 c0       	push   0xc002daf0
c001823a:	e8 41 85 fe ff       	call   c0000780 <strcmp>
c001823f:	83 c4 10             	add    esp,0x10
c0018242:	85 c0                	test   eax,eax
c0018244:	75 04                	jne    c001824a <HalDetectFeatures()+0x5a8>
c0018246:	b0 01                	mov    al,0x1
c0018248:	eb 02                	jmp    c001824c <HalDetectFeatures()+0x5aa>
c001824a:	b0 00                	mov    al,0x0
c001824c:	0f b6 c0             	movzx  eax,al
c001824f:	85 c0                	test   eax,eax
c0018251:	74 0f                	je     c0018262 <HalDetectFeatures()+0x5c0>
c0018253:	c7 05 04 db 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x2
c001825d:	e9 0d 03 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c0018262:	83 ec 08             	sub    esp,0x8
c0018265:	68 7c 43 02 c0       	push   0xc002437c
c001826a:	68 f0 da 02 c0       	push   0xc002daf0
c001826f:	e8 0c 85 fe ff       	call   c0000780 <strcmp>
c0018274:	83 c4 10             	add    esp,0x10
c0018277:	85 c0                	test   eax,eax
c0018279:	74 19                	je     c0018294 <HalDetectFeatures()+0x5f2>
c001827b:	83 ec 08             	sub    esp,0x8
c001827e:	68 89 43 02 c0       	push   0xc0024389
c0018283:	68 f0 da 02 c0       	push   0xc002daf0
c0018288:	e8 f3 84 fe ff       	call   c0000780 <strcmp>
c001828d:	83 c4 10             	add    esp,0x10
c0018290:	85 c0                	test   eax,eax
c0018292:	75 04                	jne    c0018298 <HalDetectFeatures()+0x5f6>
c0018294:	b0 01                	mov    al,0x1
c0018296:	eb 02                	jmp    c001829a <HalDetectFeatures()+0x5f8>
c0018298:	b0 00                	mov    al,0x0
c001829a:	0f b6 c0             	movzx  eax,al
c001829d:	85 c0                	test   eax,eax
c001829f:	74 0f                	je     c00182b0 <HalDetectFeatures()+0x60e>
c00182a1:	c7 05 04 db 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x4
c00182ab:	e9 bf 02 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c00182b0:	83 ec 08             	sub    esp,0x8
c00182b3:	68 96 43 02 c0       	push   0xc0024396
c00182b8:	68 f0 da 02 c0       	push   0xc002daf0
c00182bd:	e8 be 84 fe ff       	call   c0000780 <strcmp>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	85 c0                	test   eax,eax
c00182c7:	74 19                	je     c00182e2 <HalDetectFeatures()+0x640>
c00182c9:	83 ec 08             	sub    esp,0x8
c00182cc:	68 a3 43 02 c0       	push   0xc00243a3
c00182d1:	68 f0 da 02 c0       	push   0xc002daf0
c00182d6:	e8 a5 84 fe ff       	call   c0000780 <strcmp>
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	85 c0                	test   eax,eax
c00182e0:	75 04                	jne    c00182e6 <HalDetectFeatures()+0x644>
c00182e2:	b0 01                	mov    al,0x1
c00182e4:	eb 02                	jmp    c00182e8 <HalDetectFeatures()+0x646>
c00182e6:	b0 00                	mov    al,0x0
c00182e8:	0f b6 c0             	movzx  eax,al
c00182eb:	85 c0                	test   eax,eax
c00182ed:	74 0f                	je     c00182fe <HalDetectFeatures()+0x65c>
c00182ef:	c7 05 04 db 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x5
c00182f9:	e9 71 02 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c00182fe:	83 ec 08             	sub    esp,0x8
c0018301:	68 b0 43 02 c0       	push   0xc00243b0
c0018306:	68 f0 da 02 c0       	push   0xc002daf0
c001830b:	e8 70 84 fe ff       	call   c0000780 <strcmp>
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	85 c0                	test   eax,eax
c0018315:	0f 94 c0             	sete   al
c0018318:	0f b6 c0             	movzx  eax,al
c001831b:	85 c0                	test   eax,eax
c001831d:	74 0f                	je     c001832e <HalDetectFeatures()+0x68c>
c001831f:	c7 05 04 db 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x1
c0018329:	e9 41 02 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c001832e:	83 ec 08             	sub    esp,0x8
c0018331:	68 bd 43 02 c0       	push   0xc00243bd
c0018336:	68 f0 da 02 c0       	push   0xc002daf0
c001833b:	e8 40 84 fe ff       	call   c0000780 <strcmp>
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	85 c0                	test   eax,eax
c0018345:	0f 94 c0             	sete   al
c0018348:	0f b6 c0             	movzx  eax,al
c001834b:	85 c0                	test   eax,eax
c001834d:	74 0f                	je     c001835e <HalDetectFeatures()+0x6bc>
c001834f:	c7 05 04 db 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x3
c0018359:	e9 11 02 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c001835e:	83 ec 08             	sub    esp,0x8
c0018361:	68 7c 43 02 c0       	push   0xc002437c
c0018366:	68 f0 da 02 c0       	push   0xc002daf0
c001836b:	e8 10 84 fe ff       	call   c0000780 <strcmp>
c0018370:	83 c4 10             	add    esp,0x10
c0018373:	85 c0                	test   eax,eax
c0018375:	0f 94 c0             	sete   al
c0018378:	0f b6 c0             	movzx  eax,al
c001837b:	85 c0                	test   eax,eax
c001837d:	74 0f                	je     c001838e <HalDetectFeatures()+0x6ec>
c001837f:	c7 05 04 db 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x6
c0018389:	e9 e1 01 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c001838e:	83 ec 08             	sub    esp,0x8
c0018391:	68 ca 43 02 c0       	push   0xc00243ca
c0018396:	68 f0 da 02 c0       	push   0xc002daf0
c001839b:	e8 e0 83 fe ff       	call   c0000780 <strcmp>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	85 c0                	test   eax,eax
c00183a5:	0f 94 c0             	sete   al
c00183a8:	0f b6 c0             	movzx  eax,al
c00183ab:	85 c0                	test   eax,eax
c00183ad:	74 0f                	je     c00183be <HalDetectFeatures()+0x71c>
c00183af:	c7 05 04 db 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x7
c00183b9:	e9 b1 01 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c00183be:	83 ec 08             	sub    esp,0x8
c00183c1:	68 d7 43 02 c0       	push   0xc00243d7
c00183c6:	68 f0 da 02 c0       	push   0xc002daf0
c00183cb:	e8 b0 83 fe ff       	call   c0000780 <strcmp>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	85 c0                	test   eax,eax
c00183d5:	0f 94 c0             	sete   al
c00183d8:	0f b6 c0             	movzx  eax,al
c00183db:	85 c0                	test   eax,eax
c00183dd:	74 0f                	je     c00183ee <HalDetectFeatures()+0x74c>
c00183df:	c7 05 04 db 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x8
c00183e9:	e9 81 01 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c00183ee:	83 ec 08             	sub    esp,0x8
c00183f1:	68 e4 43 02 c0       	push   0xc00243e4
c00183f6:	68 f0 da 02 c0       	push   0xc002daf0
c00183fb:	e8 80 83 fe ff       	call   c0000780 <strcmp>
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	85 c0                	test   eax,eax
c0018405:	0f 94 c0             	sete   al
c0018408:	0f b6 c0             	movzx  eax,al
c001840b:	85 c0                	test   eax,eax
c001840d:	74 0f                	je     c001841e <HalDetectFeatures()+0x77c>
c001840f:	c7 05 04 db 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x9
c0018419:	e9 51 01 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c001841e:	83 ec 08             	sub    esp,0x8
c0018421:	68 f1 43 02 c0       	push   0xc00243f1
c0018426:	68 f0 da 02 c0       	push   0xc002daf0
c001842b:	e8 50 83 fe ff       	call   c0000780 <strcmp>
c0018430:	83 c4 10             	add    esp,0x10
c0018433:	85 c0                	test   eax,eax
c0018435:	0f 94 c0             	sete   al
c0018438:	0f b6 c0             	movzx  eax,al
c001843b:	85 c0                	test   eax,eax
c001843d:	74 0f                	je     c001844e <HalDetectFeatures()+0x7ac>
c001843f:	c7 05 04 db 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xa
c0018449:	e9 21 01 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c001844e:	83 ec 08             	sub    esp,0x8
c0018451:	68 fe 43 02 c0       	push   0xc00243fe
c0018456:	68 f0 da 02 c0       	push   0xc002daf0
c001845b:	e8 20 83 fe ff       	call   c0000780 <strcmp>
c0018460:	83 c4 10             	add    esp,0x10
c0018463:	85 c0                	test   eax,eax
c0018465:	0f 94 c0             	sete   al
c0018468:	0f b6 c0             	movzx  eax,al
c001846b:	85 c0                	test   eax,eax
c001846d:	74 0f                	je     c001847e <HalDetectFeatures()+0x7dc>
c001846f:	c7 05 04 db 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xb
c0018479:	e9 f1 00 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c001847e:	83 ec 08             	sub    esp,0x8
c0018481:	68 0b 44 02 c0       	push   0xc002440b
c0018486:	68 f0 da 02 c0       	push   0xc002daf0
c001848b:	e8 f0 82 fe ff       	call   c0000780 <strcmp>
c0018490:	83 c4 10             	add    esp,0x10
c0018493:	85 c0                	test   eax,eax
c0018495:	0f 94 c0             	sete   al
c0018498:	0f b6 c0             	movzx  eax,al
c001849b:	85 c0                	test   eax,eax
c001849d:	74 0f                	je     c00184ae <HalDetectFeatures()+0x80c>
c001849f:	c7 05 04 db 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xc
c00184a9:	e9 c1 00 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c00184ae:	83 ec 08             	sub    esp,0x8
c00184b1:	68 18 44 02 c0       	push   0xc0024418
c00184b6:	68 f0 da 02 c0       	push   0xc002daf0
c00184bb:	e8 c0 82 fe ff       	call   c0000780 <strcmp>
c00184c0:	83 c4 10             	add    esp,0x10
c00184c3:	85 c0                	test   eax,eax
c00184c5:	0f 94 c0             	sete   al
c00184c8:	0f b6 c0             	movzx  eax,al
c00184cb:	85 c0                	test   eax,eax
c00184cd:	74 0f                	je     c00184de <HalDetectFeatures()+0x83c>
c00184cf:	c7 05 04 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xd
c00184d9:	e9 91 00 00 00       	jmp    c001856f <HalDetectFeatures()+0x8cd>
c00184de:	83 ec 08             	sub    esp,0x8
c00184e1:	68 25 44 02 c0       	push   0xc0024425
c00184e6:	68 f0 da 02 c0       	push   0xc002daf0
c00184eb:	e8 90 82 fe ff       	call   c0000780 <strcmp>
c00184f0:	83 c4 10             	add    esp,0x10
c00184f3:	85 c0                	test   eax,eax
c00184f5:	0f 94 c0             	sete   al
c00184f8:	0f b6 c0             	movzx  eax,al
c00184fb:	85 c0                	test   eax,eax
c00184fd:	74 0c                	je     c001850b <HalDetectFeatures()+0x869>
c00184ff:	c7 05 04 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xd
c0018509:	eb 64                	jmp    c001856f <HalDetectFeatures()+0x8cd>
c001850b:	83 ec 08             	sub    esp,0x8
c001850e:	68 32 44 02 c0       	push   0xc0024432
c0018513:	68 f0 da 02 c0       	push   0xc002daf0
c0018518:	e8 63 82 fe ff       	call   c0000780 <strcmp>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	85 c0                	test   eax,eax
c0018522:	0f 94 c0             	sete   al
c0018525:	0f b6 c0             	movzx  eax,al
c0018528:	85 c0                	test   eax,eax
c001852a:	74 0c                	je     c0018538 <HalDetectFeatures()+0x896>
c001852c:	c7 05 04 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xd
c0018536:	eb 37                	jmp    c001856f <HalDetectFeatures()+0x8cd>
c0018538:	83 ec 08             	sub    esp,0x8
c001853b:	68 3f 44 02 c0       	push   0xc002443f
c0018540:	68 f0 da 02 c0       	push   0xc002daf0
c0018545:	e8 36 82 fe ff       	call   c0000780 <strcmp>
c001854a:	83 c4 10             	add    esp,0x10
c001854d:	85 c0                	test   eax,eax
c001854f:	0f 94 c0             	sete   al
c0018552:	0f b6 c0             	movzx  eax,al
c0018555:	85 c0                	test   eax,eax
c0018557:	74 0c                	je     c0018565 <HalDetectFeatures()+0x8c3>
c0018559:	c7 05 04 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xd
c0018563:	eb 0a                	jmp    c001856f <HalDetectFeatures()+0x8cd>
c0018565:	c7 05 04 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x0
c001856f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018573:	83 f8 06             	cmp    eax,0x6
c0018576:	0f 86 cc 00 00 00    	jbe    c0018648 <HalDetectFeatures()+0x9a6>
c001857c:	83 ec 0c             	sub    esp,0xc
c001857f:	68 80 00 00 00       	push   0x80
c0018584:	e8 bd f6 ff ff       	call   c0017c46 <cpuidCheckExtendedEBX(unsigned int)>
c0018589:	83 c4 10             	add    esp,0x10
c001858c:	89 c1                	mov    ecx,eax
c001858e:	83 e1 01             	and    ecx,0x1
c0018591:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018596:	83 e0 fe             	and    eax,0xfffffffe
c0018599:	88 c2                	mov    dl,al
c001859b:	88 c8                	mov    al,cl
c001859d:	09 d0                	or     eax,edx
c001859f:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00185a4:	83 ec 0c             	sub    esp,0xc
c00185a7:	68 00 00 10 00       	push   0x100000
c00185ac:	e8 95 f6 ff ff       	call   c0017c46 <cpuidCheckExtendedEBX(unsigned int)>
c00185b1:	83 c4 10             	add    esp,0x10
c00185b4:	83 e0 01             	and    eax,0x1
c00185b7:	89 c1                	mov    ecx,eax
c00185b9:	c1 e1 06             	shl    ecx,0x6
c00185bc:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00185c1:	83 e0 bf             	and    eax,0xffffffbf
c00185c4:	88 c2                	mov    dl,al
c00185c6:	88 c8                	mov    al,cl
c00185c8:	09 d0                	or     eax,edx
c00185ca:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00185cf:	83 ec 0c             	sub    esp,0xc
c00185d2:	68 00 00 04 00       	push   0x40000
c00185d7:	e8 6a f6 ff ff       	call   c0017c46 <cpuidCheckExtendedEBX(unsigned int)>
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	83 e0 01             	and    eax,0x1
c00185e2:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00185e5:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00185ea:	83 e0 fd             	and    eax,0xfffffffd
c00185ed:	88 c2                	mov    dl,al
c00185ef:	88 c8                	mov    al,cl
c00185f1:	09 d0                	or     eax,edx
c00185f3:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	6a 04                	push   0x4
c00185fd:	e8 72 f6 ff ff       	call   c0017c74 <cpuidCheckExtendedECX(unsigned int)>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	83 e0 01             	and    eax,0x1
c0018608:	89 c1                	mov    ecx,eax
c001860a:	c1 e1 05             	shl    ecx,0x5
c001860d:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018612:	83 e0 df             	and    eax,0xffffffdf
c0018615:	88 c2                	mov    dl,al
c0018617:	88 c8                	mov    al,cl
c0018619:	09 d0                	or     eax,edx
c001861b:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018620:	83 ec 0c             	sub    esp,0xc
c0018623:	6a 20                	push   0x20
c0018625:	e8 4a f6 ff ff       	call   c0017c74 <cpuidCheckExtendedECX(unsigned int)>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	83 e0 01             	and    eax,0x1
c0018630:	89 c1                	mov    ecx,eax
c0018632:	c1 e1 04             	shl    ecx,0x4
c0018635:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c001863a:	83 e0 ef             	and    eax,0xffffffef
c001863d:	88 c2                	mov    dl,al
c001863f:	88 c8                	mov    al,cl
c0018641:	09 d0                	or     eax,edx
c0018643:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018648:	83 ec 0c             	sub    esp,0xc
c001864b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001864f:	50                   	push   eax
c0018650:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018654:	50                   	push   eax
c0018655:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018659:	50                   	push   eax
c001865a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001865e:	50                   	push   eax
c001865f:	6a 01                	push   0x1
c0018661:	e8 e7 f4 ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018666:	83 c4 20             	add    esp,0x20
c0018669:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001866d:	83 e0 0f             	and    eax,0xf
c0018670:	a2 00 db 02 c0       	mov    ds:0xc002db00,al
c0018675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018679:	c1 e8 04             	shr    eax,0x4
c001867c:	83 e0 0f             	and    eax,0xf
c001867f:	a2 fe da 02 c0       	mov    ds:0xc002dafe,al
c0018684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018688:	c1 e8 08             	shr    eax,0x8
c001868b:	83 e0 0f             	and    eax,0xf
c001868e:	a2 fd da 02 c0       	mov    ds:0xc002dafd,al
c0018693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018697:	c1 e8 0c             	shr    eax,0xc
c001869a:	83 e0 03             	and    eax,0x3
c001869d:	a2 ff da 02 c0       	mov    ds:0xc002daff,al
c00186a2:	a0 fd da 02 c0       	mov    al,ds:0xc002dafd
c00186a7:	0f b6 c0             	movzx  eax,al
c00186aa:	83 f8 06             	cmp    eax,0x6
c00186ad:	74 0d                	je     c00186bc <HalDetectFeatures()+0xa1a>
c00186af:	a0 fd da 02 c0       	mov    al,ds:0xc002dafd
c00186b4:	0f b6 c0             	movzx  eax,al
c00186b7:	83 f8 0f             	cmp    eax,0xf
c00186ba:	75 18                	jne    c00186d4 <HalDetectFeatures()+0xa32>
c00186bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186c0:	c1 e8 10             	shr    eax,0x10
c00186c3:	c1 e0 04             	shl    eax,0x4
c00186c6:	88 c2                	mov    dl,al
c00186c8:	a0 fe da 02 c0       	mov    al,ds:0xc002dafe
c00186cd:	09 d0                	or     eax,edx
c00186cf:	a2 fe da 02 c0       	mov    ds:0xc002dafe,al
c00186d4:	a0 fd da 02 c0       	mov    al,ds:0xc002dafd
c00186d9:	0f b6 c0             	movzx  eax,al
c00186dc:	83 f8 0f             	cmp    eax,0xf
c00186df:	75 15                	jne    c00186f6 <HalDetectFeatures()+0xa54>
c00186e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186e5:	c1 e8 14             	shr    eax,0x14
c00186e8:	88 c2                	mov    dl,al
c00186ea:	a0 fd da 02 c0       	mov    al,ds:0xc002dafd
c00186ef:	01 d0                	add    eax,edx
c00186f1:	a2 fd da 02 c0       	mov    ds:0xc002dafd,al
c00186f6:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00186fe:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0018706:	85 c0                	test   eax,eax
c0018708:	74 2d                	je     c0018737 <HalDetectFeatures()+0xa95>
c001870a:	83 ec 0c             	sub    esp,0xc
c001870d:	68 00 00 00 40       	push   0x40000000
c0018712:	e8 01 f5 ff ff       	call   c0017c18 <cpuidCheckECX(unsigned int)>
c0018717:	83 c4 10             	add    esp,0x10
c001871a:	83 e0 01             	and    eax,0x1
c001871d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018724:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018729:	83 e0 fb             	and    eax,0xfffffffb
c001872c:	88 c2                	mov    dl,al
c001872e:	88 c8                	mov    al,cl
c0018730:	09 d0                	or     eax,edx
c0018732:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0018737:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c001873c:	83 c8 04             	or     eax,0x4
c001873f:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018744:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018749:	83 c8 08             	or     eax,0x8
c001874c:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018751:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018756:	83 c8 10             	or     eax,0x10
c0018759:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c001875e:	83 ec 0c             	sub    esp,0xc
c0018761:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018765:	50                   	push   eax
c0018766:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001876a:	50                   	push   eax
c001876b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001876f:	50                   	push   eax
c0018770:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018774:	50                   	push   eax
c0018775:	68 00 00 00 80       	push   0x80000000
c001877a:	e8 ce f3 ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001877f:	83 c4 20             	add    esp,0x20
c0018782:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018786:	3d 00 00 00 80       	cmp    eax,0x80000000
c001878b:	0f 86 96 01 00 00    	jbe    c0018927 <HalDetectFeatures()+0xc85>
c0018791:	83 ec 0c             	sub    esp,0xc
c0018794:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018798:	50                   	push   eax
c0018799:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001879d:	50                   	push   eax
c001879e:	8d 44 24 24          	lea    eax,[esp+0x24]
c00187a2:	50                   	push   eax
c00187a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00187a7:	50                   	push   eax
c00187a8:	68 01 00 00 80       	push   0x80000001
c00187ad:	e8 9b f3 ff ff       	call   c0017b4d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187b2:	83 c4 20             	add    esp,0x20
c00187b5:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00187ba:	83 e0 7f             	and    eax,0x7f
c00187bd:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00187c2:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c00187c7:	83 e0 fb             	and    eax,0xfffffffb
c00187ca:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c00187cf:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c00187d4:	83 e0 fd             	and    eax,0xfffffffd
c00187d7:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c00187dc:	e9 46 01 00 00       	jmp    c0018927 <HalDetectFeatures()+0xc85>
c00187e1:	83 ec 08             	sub    esp,0x8
c00187e4:	68 b0 43 02 c0       	push   0xc00243b0
c00187e9:	68 f0 da 02 c0       	push   0xc002daf0
c00187ee:	e8 5d 7e fe ff       	call   c0000650 <strcpy>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	c7 05 04 db 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x1
c0018800:	e8 be 79 fe ff       	call   c00001c3 <is486>
c0018805:	85 c0                	test   eax,eax
c0018807:	0f 95 c0             	setne  al
c001880a:	0f b6 c0             	movzx  eax,al
c001880d:	85 c0                	test   eax,eax
c001880f:	0f 84 8d 00 00 00    	je     c00188a2 <HalDetectFeatures()+0xc00>
c0018815:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c001881a:	83 c8 04             	or     eax,0x4
c001881d:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018822:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018827:	83 c8 08             	or     eax,0x8
c001882a:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c001882f:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018834:	83 c8 10             	or     eax,0x10
c0018837:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c001883c:	0f 20 c0             	mov    eax,cr0
c001883f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018843:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018847:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001884e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018855:	83 e0 04             	and    eax,0x4
c0018858:	74 1e                	je     c0018878 <HalDetectFeatures()+0xbd6>
c001885a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018861:	83 e0 10             	and    eax,0x10
c0018864:	75 12                	jne    c0018878 <HalDetectFeatures()+0xbd6>
c0018866:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c001886b:	83 e0 f7             	and    eax,0xfffffff7
c001886e:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018873:	e9 af 00 00 00       	jmp    c0018927 <HalDetectFeatures()+0xc85>
c0018878:	e8 21 79 fe ff       	call   c000019e <hasLegacyFPU>
c001887d:	83 e0 01             	and    eax,0x1
c0018880:	83 e0 01             	and    eax,0x1
c0018883:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001888a:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c001888f:	83 e0 f7             	and    eax,0xfffffff7
c0018892:	88 c2                	mov    dl,al
c0018894:	88 c8                	mov    al,cl
c0018896:	09 d0                	or     eax,edx
c0018898:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c001889d:	e9 85 00 00 00       	jmp    c0018927 <HalDetectFeatures()+0xc85>
c00188a2:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00188a7:	83 e0 fb             	and    eax,0xfffffffb
c00188aa:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00188af:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00188b4:	83 e0 f7             	and    eax,0xfffffff7
c00188b7:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00188bc:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00188c1:	83 e0 ef             	and    eax,0xffffffef
c00188c4:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00188c9:	0f 20 c0             	mov    eax,cr0
c00188cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d4:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00188db:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00188e2:	83 e0 04             	and    eax,0x4
c00188e5:	74 1b                	je     c0018902 <HalDetectFeatures()+0xc60>
c00188e7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00188ee:	83 e0 10             	and    eax,0x10
c00188f1:	75 0f                	jne    c0018902 <HalDetectFeatures()+0xc60>
c00188f3:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c00188f8:	83 e0 f7             	and    eax,0xfffffff7
c00188fb:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018900:	eb 25                	jmp    c0018927 <HalDetectFeatures()+0xc85>
c0018902:	e8 97 78 fe ff       	call   c000019e <hasLegacyFPU>
c0018907:	83 e0 01             	and    eax,0x1
c001890a:	83 e0 01             	and    eax,0x1
c001890d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018914:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018919:	83 e0 f7             	and    eax,0xfffffff7
c001891c:	88 c2                	mov    dl,al
c001891e:	88 c8                	mov    al,cl
c0018920:	09 d0                	or     eax,edx
c0018922:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018927:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c001892c:	83 e0 08             	and    eax,0x8
c001892f:	0f b6 c0             	movzx  eax,al
c0018932:	85 c0                	test   eax,eax
c0018934:	75 25                	jne    c001895b <HalDetectFeatures()+0xcb9>
c0018936:	e8 63 78 fe ff       	call   c000019e <hasLegacyFPU>
c001893b:	83 e0 01             	and    eax,0x1
c001893e:	83 e0 01             	and    eax,0x1
c0018941:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018948:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c001894d:	83 e0 f7             	and    eax,0xfffffff7
c0018950:	88 c2                	mov    dl,al
c0018952:	88 c8                	mov    al,cl
c0018954:	09 d0                	or     eax,edx
c0018956:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c001895b:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018960:	83 e0 08             	and    eax,0x8
c0018963:	0f b6 c0             	movzx  eax,al
c0018966:	85 c0                	test   eax,eax
c0018968:	74 0d                	je     c0018977 <HalDetectFeatures()+0xcd5>
c001896a:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c001896f:	83 c8 10             	or     eax,0x10
c0018972:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018977:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c001897c:	83 e0 10             	and    eax,0x10
c001897f:	0f b6 c0             	movzx  eax,al
c0018982:	85 c0                	test   eax,eax
c0018984:	75 23                	jne    c00189a9 <HalDetectFeatures()+0xd07>
c0018986:	e8 ab 7f 00 00       	call   c0020936 <x87Detect>
c001898b:	83 e0 01             	and    eax,0x1
c001898e:	83 e0 01             	and    eax,0x1
c0018991:	89 c1                	mov    ecx,eax
c0018993:	c1 e1 04             	shl    ecx,0x4
c0018996:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c001899b:	83 e0 ef             	and    eax,0xffffffef
c001899e:	88 c2                	mov    dl,al
c00189a0:	88 c8                	mov    al,cl
c00189a2:	09 d0                	or     eax,edx
c00189a4:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c00189a9:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c00189ae:	83 e0 01             	and    eax,0x1
c00189b1:	0f b6 c0             	movzx  eax,al
c00189b4:	85 c0                	test   eax,eax
c00189b6:	75 2d                	jne    c00189e5 <HalDetectFeatures()+0xd43>
c00189b8:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c00189bd:	83 e0 02             	and    eax,0x2
c00189c0:	0f b6 c0             	movzx  eax,al
c00189c3:	85 c0                	test   eax,eax
c00189c5:	75 1e                	jne    c00189e5 <HalDetectFeatures()+0xd43>
c00189c7:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c00189cc:	83 e0 04             	and    eax,0x4
c00189cf:	0f b6 c0             	movzx  eax,al
c00189d2:	85 c0                	test   eax,eax
c00189d4:	75 0f                	jne    c00189e5 <HalDetectFeatures()+0xd43>
c00189d6:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c00189db:	83 e0 08             	and    eax,0x8
c00189de:	0f b6 c0             	movzx  eax,al
c00189e1:	85 c0                	test   eax,eax
c00189e3:	74 0d                	je     c00189f2 <HalDetectFeatures()+0xd50>
c00189e5:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c00189ea:	83 c8 80             	or     eax,0xffffff80
c00189ed:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c00189f2:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c00189f7:	83 e0 10             	and    eax,0x10
c00189fa:	0f b6 c0             	movzx  eax,al
c00189fd:	85 c0                	test   eax,eax
c00189ff:	74 2f                	je     c0018a30 <HalDetectFeatures()+0xd8e>
c0018a01:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018a06:	83 e0 80             	and    eax,0xffffff80
c0018a09:	0f b6 c0             	movzx  eax,al
c0018a0c:	85 c0                	test   eax,eax
c0018a0e:	75 20                	jne    c0018a30 <HalDetectFeatures()+0xd8e>
c0018a10:	e8 db 7e 00 00       	call   c00208f0 <sseDetect>
c0018a15:	83 e0 01             	and    eax,0x1
c0018a18:	89 c1                	mov    ecx,eax
c0018a1a:	c1 e1 07             	shl    ecx,0x7
c0018a1d:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018a22:	83 e0 7f             	and    eax,0x7f
c0018a25:	88 c2                	mov    dl,al
c0018a27:	88 c8                	mov    al,cl
c0018a29:	09 d0                	or     eax,edx
c0018a2b:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018a30:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018a35:	83 e0 80             	and    eax,0xffffff80
c0018a38:	0f b6 c0             	movzx  eax,al
c0018a3b:	85 c0                	test   eax,eax
c0018a3d:	74 1c                	je     c0018a5b <HalDetectFeatures()+0xdb9>
c0018a3f:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018a44:	83 e0 20             	and    eax,0x20
c0018a47:	0f b6 c0             	movzx  eax,al
c0018a4a:	85 c0                	test   eax,eax
c0018a4c:	75 0d                	jne    c0018a5b <HalDetectFeatures()+0xdb9>
c0018a4e:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018a53:	83 e0 df             	and    eax,0xffffffdf
c0018a56:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0018a5b:	c6 05 08 db 02 c0 00 	mov    BYTE PTR ds:0xc002db08,0x0
c0018a62:	90                   	nop
c0018a63:	81 c4 90 00 00 00    	add    esp,0x90
c0018a69:	5b                   	pop    ebx
c0018a6a:	5e                   	pop    esi
c0018a6b:	5f                   	pop    edi
c0018a6c:	c3                   	ret    

c0018a6d <HalEnableNMI()>:
c0018a6d:	c6 05 ec da 02 c0 01 	mov    BYTE PTR ds:0xc002daec,0x1
c0018a74:	6a 10                	push   0x10
c0018a76:	e8 20 ef ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0018a7b:	83 c4 04             	add    esp,0x4
c0018a7e:	90                   	nop
c0018a7f:	c3                   	ret    

c0018a80 <HalDisableNMI()>:
c0018a80:	c6 05 ec da 02 c0 00 	mov    BYTE PTR ds:0xc002daec,0x0
c0018a87:	6a 10                	push   0x10
c0018a89:	e8 0d ef ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0018a8e:	83 c4 04             	add    esp,0x4
c0018a91:	90                   	nop
c0018a92:	c3                   	ret    

c0018a93 <HalGetNMIState()>:
c0018a93:	a0 ec da 02 c0       	mov    al,ds:0xc002daec
c0018a98:	c3                   	ret    

c0018a99 <x86rdmsr(unsigned int)>:
c0018a99:	83 ec 1c             	sub    esp,0x1c
c0018a9c:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018aa1:	83 e0 08             	and    eax,0x8
c0018aa4:	0f b6 c0             	movzx  eax,al
c0018aa7:	85 c0                	test   eax,eax
c0018aa9:	75 10                	jne    c0018abb <x86rdmsr(unsigned int)+0x22>
c0018aab:	83 ec 0c             	sub    esp,0xc
c0018aae:	68 4b 44 02 c0       	push   0xc002444b
c0018ab3:	e8 26 6c ff ff       	call   c000f6de <KePanic(char const*)>
c0018ab8:	83 c4 10             	add    esp,0x10
c0018abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018abf:	89 c1                	mov    ecx,eax
c0018ac1:	0f 32                	rdmsr  
c0018ac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ac7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018acb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018acf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ad3:	83 c4 1c             	add    esp,0x1c
c0018ad6:	c3                   	ret    

c0018ad7 <x86wrmsr(unsigned int, unsigned long long)>:
c0018ad7:	83 ec 1c             	sub    esp,0x1c
c0018ada:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ade:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ae2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ae6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018aea:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018aef:	83 e0 08             	and    eax,0x8
c0018af2:	0f b6 c0             	movzx  eax,al
c0018af5:	85 c0                	test   eax,eax
c0018af7:	75 10                	jne    c0018b09 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0018af9:	83 ec 0c             	sub    esp,0xc
c0018afc:	68 51 44 02 c0       	push   0xc0024451
c0018b01:	e8 d8 6b ff ff       	call   c000f6de <KePanic(char const*)>
c0018b06:	83 c4 10             	add    esp,0x10
c0018b09:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018b0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b15:	0f 30                	wrmsr  
c0018b17:	90                   	nop
c0018b18:	83 c4 1c             	add    esp,0x1c
c0018b1b:	c3                   	ret    

c0018b1c <HalHandleGeneralProtectionFault(void*, void*)>:
c0018b1c:	83 ec 0c             	sub    esp,0xc
c0018b1f:	83 ec 0c             	sub    esp,0xc
c0018b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b26:	e8 40 e7 ff ff       	call   c001726b <Vm::faultHandler(regs*)>
c0018b2b:	83 c4 10             	add    esp,0x10
c0018b2e:	83 c4 0c             	add    esp,0xc
c0018b31:	c3                   	ret    

c0018b32 <HalFindRSDP()>:
c0018b32:	83 ec 1c             	sub    esp,0x1c
c0018b35:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c0018b3a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0018b3f:	7e 0c                	jle    c0018b4d <HalFindRSDP()+0x1b>
c0018b41:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0018b46:	25 00 04 00 00       	and    eax,0x400
c0018b4b:	74 0d                	je     c0018b5a <HalFindRSDP()+0x28>
c0018b4d:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018b52:	83 e0 fb             	and    eax,0xfffffffb
c0018b55:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018b5a:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018b5f:	83 e0 04             	and    eax,0x4
c0018b62:	0f b6 c0             	movzx  eax,al
c0018b65:	85 c0                	test   eax,eax
c0018b67:	75 07                	jne    c0018b70 <HalFindRSDP()+0x3e>
c0018b69:	b8 00 00 00 00       	mov    eax,0x0
c0018b6e:	eb 53                	jmp    c0018bc3 <HalFindRSDP()+0x91>
c0018b70:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0018b78:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0018b80:	77 2f                	ja     c0018bb1 <HalFindRSDP()+0x7f>
c0018b82:	83 ec 04             	sub    esp,0x4
c0018b85:	6a 08                	push   0x8
c0018b87:	68 57 44 02 c0       	push   0xc0024457
c0018b8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018b90:	e8 eb 77 fe ff       	call   c0000380 <memcmp>
c0018b95:	83 c4 10             	add    esp,0x10
c0018b98:	85 c0                	test   eax,eax
c0018b9a:	0f 94 c0             	sete   al
c0018b9d:	0f b6 c0             	movzx  eax,al
c0018ba0:	85 c0                	test   eax,eax
c0018ba2:	74 06                	je     c0018baa <HalFindRSDP()+0x78>
c0018ba4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ba8:	eb 19                	jmp    c0018bc3 <HalFindRSDP()+0x91>
c0018baa:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0018baf:	eb c7                	jmp    c0018b78 <HalFindRSDP()+0x46>
c0018bb1:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018bb6:	83 e0 fb             	and    eax,0xfffffffb
c0018bb9:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018bbe:	b8 00 00 00 00       	mov    eax,0x0
c0018bc3:	83 c4 1c             	add    esp,0x1c
c0018bc6:	c3                   	ret    

c0018bc7 <HalHandlePageFault(void*, void*)>:
c0018bc7:	83 ec 1c             	sub    esp,0x1c
c0018bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018bd1:	83 ec 08             	sub    esp,0x8
c0018bd4:	50                   	push   eax
c0018bd5:	68 9c 46 02 c0       	push   0xc002469c
c0018bda:	e8 6f e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018bdf:	83 c4 10             	add    esp,0x10
c0018be2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018be6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018be9:	83 ec 08             	sub    esp,0x8
c0018bec:	50                   	push   eax
c0018bed:	68 60 44 02 c0       	push   0xc0024460
c0018bf2:	e8 57 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018c04:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018c0a:	0f 20 d2             	mov    edx,cr2
c0018c0d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018c11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c15:	83 ec 08             	sub    esp,0x8
c0018c18:	52                   	push   edx
c0018c19:	50                   	push   eax
c0018c1a:	e8 4d ac ff ff       	call   c001386c <VAS::tryLoadBackOffDisk(unsigned long)>
c0018c1f:	83 c4 10             	add    esp,0x10
c0018c22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c2d:	83 ec 08             	sub    esp,0x8
c0018c30:	50                   	push   eax
c0018c31:	68 75 44 02 c0       	push   0xc0024475
c0018c36:	e8 13 e3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018c45:	83 ec 08             	sub    esp,0x8
c0018c48:	50                   	push   eax
c0018c49:	68 8f 44 02 c0       	push   0xc002448f
c0018c4e:	e8 fb e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018c53:	83 c4 10             	add    esp,0x10
c0018c56:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018c5b:	83 ec 08             	sub    esp,0x8
c0018c5e:	50                   	push   eax
c0018c5f:	68 a4 44 02 c0       	push   0xc00244a4
c0018c64:	e8 e5 e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018c69:	83 c4 10             	add    esp,0x10
c0018c6c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c70:	83 c4 1c             	add    esp,0x1c
c0018c73:	c3                   	ret    

c0018c74 <HalHandleOpcodeFault(void*, void*)>:
c0018c74:	83 ec 1c             	sub    esp,0x1c
c0018c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c7f:	a0 08 db 02 c0       	mov    al,ds:0xc002db08
c0018c84:	0f b6 c0             	movzx  eax,al
c0018c87:	85 c0                	test   eax,eax
c0018c89:	74 25                	je     c0018cb0 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0018c8b:	83 ec 0c             	sub    esp,0xc
c0018c8e:	68 d0 46 02 c0       	push   0xc00246d0
c0018c93:	e8 b6 e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018c98:	83 c4 10             	add    esp,0x10
c0018c9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ca2:	8d 50 19             	lea    edx,[eax+0x19]
c0018ca5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ca9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018cac:	b0 01                	mov    al,0x1
c0018cae:	eb 02                	jmp    c0018cb2 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0018cb0:	b0 00                	mov    al,0x0
c0018cb2:	83 c4 1c             	add    esp,0x1c
c0018cb5:	c3                   	ret    

c0018cb6 <HalDisplayDebugInfo(void*)>:
c0018cb6:	83 ec 2c             	sub    esp,0x2c
c0018cb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018cc1:	0f 20 c0             	mov    eax,cr0
c0018cc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018cc8:	0f 20 d0             	mov    eax,cr2
c0018ccb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ccf:	0f 20 d8             	mov    eax,cr3
c0018cd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018cd6:	0f 20 e0             	mov    eax,cr4
c0018cd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ce1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018ce4:	83 ec 08             	sub    esp,0x8
c0018ce7:	50                   	push   eax
c0018ce8:	68 bf 44 02 c0       	push   0xc00244bf
c0018ced:	e8 5c e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018cf2:	83 c4 10             	add    esp,0x10
c0018cf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cf9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018cfc:	83 ec 08             	sub    esp,0x8
c0018cff:	50                   	push   eax
c0018d00:	68 b0 44 02 c0       	push   0xc00244b0
c0018d05:	e8 44 e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018d0a:	83 c4 10             	add    esp,0x10
c0018d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d11:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018d14:	83 ec 08             	sub    esp,0x8
c0018d17:	50                   	push   eax
c0018d18:	68 bb 44 02 c0       	push   0xc00244bb
c0018d1d:	e8 2c e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018d22:	83 c4 10             	add    esp,0x10
c0018d25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d2c:	83 ec 08             	sub    esp,0x8
c0018d2f:	50                   	push   eax
c0018d30:	68 ca 44 02 c0       	push   0xc00244ca
c0018d35:	e8 14 e2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018d3a:	83 c4 10             	add    esp,0x10
c0018d3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d41:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018d44:	83 ec 08             	sub    esp,0x8
c0018d47:	50                   	push   eax
c0018d48:	68 d5 44 02 c0       	push   0xc00244d5
c0018d4d:	e8 fc e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018d52:	83 c4 10             	add    esp,0x10
c0018d55:	83 ec 08             	sub    esp,0x8
c0018d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d5c:	68 e0 44 02 c0       	push   0xc00244e0
c0018d61:	e8 e8 e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018d66:	83 c4 10             	add    esp,0x10
c0018d69:	83 ec 08             	sub    esp,0x8
c0018d6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018d70:	68 eb 44 02 c0       	push   0xc00244eb
c0018d75:	e8 d4 e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018d7a:	83 c4 10             	add    esp,0x10
c0018d7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d81:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018d84:	c1 e0 05             	shl    eax,0x5
c0018d87:	8d 90 e0 59 02 c0    	lea    edx,[eax-0x3ffda620]
c0018d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d91:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018d94:	83 ec 04             	sub    esp,0x4
c0018d97:	52                   	push   edx
c0018d98:	50                   	push   eax
c0018d99:	68 f6 44 02 c0       	push   0xc00244f6
c0018d9e:	e8 ab e1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018da3:	83 c4 10             	add    esp,0x10
c0018da6:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018dab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018db1:	83 ec 0c             	sub    esp,0xc
c0018db4:	50                   	push   eax
c0018db5:	e8 8d 8d ff ff       	call   c0011b47 <setActiveTerminal(VgaText*)>
c0018dba:	83 c4 10             	add    esp,0x10
c0018dbd:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018dc2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018dc8:	83 ec 08             	sub    esp,0x8
c0018dcb:	68 05 45 02 c0       	push   0xc0024505
c0018dd0:	50                   	push   eax
c0018dd1:	e8 ae 90 ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018dd6:	83 c4 10             	add    esp,0x10
c0018dd9:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018dde:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018de4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018de8:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018deb:	83 ec 08             	sub    esp,0x8
c0018dee:	52                   	push   edx
c0018def:	50                   	push   eax
c0018df0:	e8 49 90 ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0018df5:	83 c4 10             	add    esp,0x10
c0018df8:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018dfd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e03:	83 ec 08             	sub    esp,0x8
c0018e06:	68 13 45 02 c0       	push   0xc0024513
c0018e0b:	50                   	push   eax
c0018e0c:	e8 73 90 ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018e19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e1f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018e24:	8b 12                	mov    edx,DWORD PTR [edx]
c0018e26:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018e29:	83 c2 0c             	add    edx,0xc
c0018e2c:	83 ec 08             	sub    esp,0x8
c0018e2f:	52                   	push   edx
c0018e30:	50                   	push   eax
c0018e31:	e8 4e 90 ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018e36:	83 c4 10             	add    esp,0x10
c0018e39:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018e3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e44:	83 ec 08             	sub    esp,0x8
c0018e47:	68 1c 45 02 c0       	push   0xc002451c
c0018e4c:	50                   	push   eax
c0018e4d:	e8 32 90 ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018e52:	83 c4 10             	add    esp,0x10
c0018e55:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018e5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e64:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0018e67:	83 ec 08             	sub    esp,0x8
c0018e6a:	52                   	push   edx
c0018e6b:	50                   	push   eax
c0018e6c:	e8 cd 8f ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0018e71:	83 c4 10             	add    esp,0x10
c0018e74:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018e79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e7f:	83 ec 08             	sub    esp,0x8
c0018e82:	68 24 45 02 c0       	push   0xc0024524
c0018e87:	50                   	push   eax
c0018e88:	e8 f7 8f ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018e8d:	83 c4 10             	add    esp,0x10
c0018e90:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018e95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e9f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0018ea2:	83 ec 08             	sub    esp,0x8
c0018ea5:	52                   	push   edx
c0018ea6:	50                   	push   eax
c0018ea7:	e8 92 8f ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0018eac:	83 c4 10             	add    esp,0x10
c0018eaf:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018eb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018eba:	83 ec 08             	sub    esp,0x8
c0018ebd:	68 2c 45 02 c0       	push   0xc002452c
c0018ec2:	50                   	push   eax
c0018ec3:	e8 bc 8f ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018ec8:	83 c4 10             	add    esp,0x10
c0018ecb:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018ed0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ed6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018eda:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018edd:	83 ec 08             	sub    esp,0x8
c0018ee0:	52                   	push   edx
c0018ee1:	50                   	push   eax
c0018ee2:	e8 57 8f ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018eef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ef5:	83 ec 08             	sub    esp,0x8
c0018ef8:	68 34 45 02 c0       	push   0xc0024534
c0018efd:	50                   	push   eax
c0018efe:	e8 81 8f ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018f03:	83 c4 10             	add    esp,0x10
c0018f06:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f15:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018f18:	83 ec 08             	sub    esp,0x8
c0018f1b:	52                   	push   edx
c0018f1c:	50                   	push   eax
c0018f1d:	e8 1c 8f ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0018f22:	83 c4 10             	add    esp,0x10
c0018f25:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f30:	83 ec 08             	sub    esp,0x8
c0018f33:	68 3c 45 02 c0       	push   0xc002453c
c0018f38:	50                   	push   eax
c0018f39:	e8 46 8f ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018f3e:	83 c4 10             	add    esp,0x10
c0018f41:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f50:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018f53:	83 ec 08             	sub    esp,0x8
c0018f56:	52                   	push   edx
c0018f57:	50                   	push   eax
c0018f58:	e8 e1 8e ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0018f5d:	83 c4 10             	add    esp,0x10
c0018f60:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f6b:	83 ec 08             	sub    esp,0x8
c0018f6e:	68 44 45 02 c0       	push   0xc0024544
c0018f73:	50                   	push   eax
c0018f74:	e8 0b 8f ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018f79:	83 c4 10             	add    esp,0x10
c0018f7c:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f8b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018f8e:	83 ec 08             	sub    esp,0x8
c0018f91:	52                   	push   edx
c0018f92:	50                   	push   eax
c0018f93:	e8 a6 8e ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0018f98:	83 c4 10             	add    esp,0x10
c0018f9b:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018fa0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fa6:	83 ec 08             	sub    esp,0x8
c0018fa9:	68 4c 45 02 c0       	push   0xc002454c
c0018fae:	50                   	push   eax
c0018faf:	e8 d0 8e ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018fb4:	83 c4 10             	add    esp,0x10
c0018fb7:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018fbc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fc2:	83 ec 08             	sub    esp,0x8
c0018fc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018fc9:	50                   	push   eax
c0018fca:	e8 6f 8e ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0018fcf:	83 c4 10             	add    esp,0x10
c0018fd2:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018fd7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fdd:	83 ec 08             	sub    esp,0x8
c0018fe0:	68 55 45 02 c0       	push   0xc0024555
c0018fe5:	50                   	push   eax
c0018fe6:	e8 99 8e ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018ff3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ff9:	83 ec 08             	sub    esp,0x8
c0018ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019000:	50                   	push   eax
c0019001:	e8 38 8e ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c0019006:	83 c4 10             	add    esp,0x10
c0019009:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001900e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019014:	83 ec 08             	sub    esp,0x8
c0019017:	68 5d 45 02 c0       	push   0xc002455d
c001901c:	50                   	push   eax
c001901d:	e8 62 8e ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001902a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019030:	83 ec 08             	sub    esp,0x8
c0019033:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019037:	50                   	push   eax
c0019038:	e8 01 8e ff ff       	call   c0011e3e <VgaText::putx(unsigned int)>
c001903d:	83 c4 10             	add    esp,0x10
c0019040:	fa                   	cli    
c0019041:	f4                   	hlt    
c0019042:	eb fe                	jmp    c0019042 <HalDisplayDebugInfo(void*)+0x38c>

c0019044 <HalReceivedNMI()>:
c0019044:	83 ec 1c             	sub    esp,0x1c
c0019047:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001904e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019052:	89 c2                	mov    edx,eax
c0019054:	ec                   	in     al,dx
c0019055:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019059:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001905d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019061:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001906c:	89 c2                	mov    edx,eax
c001906e:	ec                   	in     al,dx
c001906f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019073:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019077:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001907b:	83 ec 0c             	sub    esp,0xc
c001907e:	68 65 45 02 c0       	push   0xc0024565
c0019083:	e8 c6 de fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019088:	83 c4 10             	add    esp,0x10
c001908b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019090:	83 e0 10             	and    eax,0x10
c0019093:	74 10                	je     c00190a5 <HalReceivedNMI()+0x61>
c0019095:	83 ec 0c             	sub    esp,0xc
c0019098:	68 76 45 02 c0       	push   0xc0024576
c001909d:	e8 3c 66 ff ff       	call   c000f6de <KePanic(char const*)>
c00190a2:	83 c4 10             	add    esp,0x10
c00190a5:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00190aa:	83 e0 40             	and    eax,0x40
c00190ad:	74 10                	je     c00190bf <HalReceivedNMI()+0x7b>
c00190af:	83 ec 0c             	sub    esp,0xc
c00190b2:	68 83 45 02 c0       	push   0xc0024583
c00190b7:	e8 22 66 ff ff       	call   c000f6de <KePanic(char const*)>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00190c3:	0f be c0             	movsx  eax,al
c00190c6:	85 c0                	test   eax,eax
c00190c8:	79 10                	jns    c00190da <HalReceivedNMI()+0x96>
c00190ca:	83 ec 0c             	sub    esp,0xc
c00190cd:	68 8d 45 02 c0       	push   0xc002458d
c00190d2:	e8 07 66 ff ff       	call   c000f6de <KePanic(char const*)>
c00190d7:	83 c4 10             	add    esp,0x10
c00190da:	90                   	nop
c00190db:	83 c4 1c             	add    esp,0x1c
c00190de:	c3                   	ret    

c00190df <HalSystemIdle()>:
c00190df:	56                   	push   esi
c00190e0:	53                   	push   ebx
c00190e1:	83 ec 14             	sub    esp,0x14
c00190e4:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c00190e9:	83 e0 10             	and    eax,0x10
c00190ec:	0f b6 c0             	movzx  eax,al
c00190ef:	85 c0                	test   eax,eax
c00190f1:	74 43                	je     c0019136 <HalSystemIdle()+0x57>
c00190f3:	83 ec 0c             	sub    esp,0xc
c00190f6:	68 e1 00 00 00       	push   0xe1
c00190fb:	e8 99 f9 ff ff       	call   c0018a99 <x86rdmsr(unsigned int)>
c0019100:	83 c4 10             	add    esp,0x10
c0019103:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019107:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001910b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001910f:	83 e0 02             	and    eax,0x2
c0019112:	89 c3                	mov    ebx,eax
c0019114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019118:	83 e0 00             	and    eax,0x0
c001911b:	89 c6                	mov    esi,eax
c001911d:	83 ec 04             	sub    esp,0x4
c0019120:	56                   	push   esi
c0019121:	53                   	push   ebx
c0019122:	68 e1 00 00 00       	push   0xe1
c0019127:	e8 ab f9 ff ff       	call   c0018ad7 <x86wrmsr(unsigned int, unsigned long long)>
c001912c:	83 c4 10             	add    esp,0x10
c001912f:	e8 60 70 fe ff       	call   c0000194 <doTPAUSE>
c0019134:	eb 01                	jmp    c0019137 <HalSystemIdle()+0x58>
c0019136:	f4                   	hlt    
c0019137:	90                   	nop
c0019138:	83 c4 14             	add    esp,0x14
c001913b:	5b                   	pop    ebx
c001913c:	5e                   	pop    esi
c001913d:	c3                   	ret    

c001913e <i386SaveCoprocessor(void*)>:
c001913e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019142:	83 c0 3f             	add    eax,0x3f
c0019145:	83 e0 c0             	and    eax,0xffffffc0
c0019148:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001914c:	ff 25 d0 da 02 c0    	jmp    DWORD PTR ds:0xc002dad0

c0019152 <i386LoadCoprocessor(void*)>:
c0019152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019156:	83 c0 3f             	add    eax,0x3f
c0019159:	83 e0 c0             	and    eax,0xffffffc0
c001915c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019160:	ff 25 cc da 02 c0    	jmp    DWORD PTR ds:0xc002dacc

c0019166 <x87EmulHandler(regs*, void*)>:
c0019166:	53                   	push   ebx
c0019167:	83 ec 08             	sub    esp,0x8
c001916a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001916f:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0019173:	74 10                	je     c0019185 <x87EmulHandler(regs*, void*)+0x1f>
c0019175:	83 ec 0c             	sub    esp,0xc
c0019178:	68 9a 45 02 c0       	push   0xc002459a
c001917d:	e8 5c 65 ff ff       	call   c000f6de <KePanic(char const*)>
c0019182:	83 c4 10             	add    esp,0x10
c0019185:	0f 20 c0             	mov    eax,cr0
c0019188:	a8 08                	test   al,0x8
c001918a:	74 59                	je     c00191e5 <x87EmulHandler(regs*, void*)+0x7f>
c001918c:	0f 06                	clts   
c001918e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0019193:	85 c0                	test   eax,eax
c0019195:	74 0e                	je     c00191a5 <x87EmulHandler(regs*, void*)+0x3f>
c0019197:	83 ec 0c             	sub    esp,0xc
c001919a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001919d:	e8 9c ff ff ff       	call   c001913e <i386SaveCoprocessor(void*)>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00191ab:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00191af:	75 12                	jne    c00191c3 <x87EmulHandler(regs*, void*)+0x5d>
c00191b1:	83 ec 0c             	sub    esp,0xc
c00191b4:	68 40 02 00 00       	push   0x240
c00191b9:	e8 da 61 ff ff       	call   c000f398 <malloc>
c00191be:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00191c1:	eb 10                	jmp    c00191d3 <x87EmulHandler(regs*, void*)+0x6d>
c00191c3:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00191c8:	83 ec 0c             	sub    esp,0xc
c00191cb:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00191ce:	e8 7f ff ff ff       	call   c0019152 <i386LoadCoprocessor(void*)>
c00191d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191d8:	83 c4 10             	add    esp,0x10
c00191db:	a3 c8 da 02 c0       	mov    ds:0xc002dac8,eax
c00191e0:	83 c4 08             	add    esp,0x8
c00191e3:	5b                   	pop    ebx
c00191e4:	c3                   	ret    
c00191e5:	83 ec 0c             	sub    esp,0xc
c00191e8:	68 ae 45 02 c0       	push   0xc00245ae
c00191ed:	e8 5c dd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00191f2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00191fa:	83 c4 18             	add    esp,0x18
c00191fd:	5b                   	pop    ebx
c00191fe:	e9 ad d9 ff ff       	jmp    c0016bb0 <Thr::terminateFromIRQ(int)>

c0019203 <HalInitialiseCoprocessor()>:
c0019203:	83 ec 10             	sub    esp,0x10
c0019206:	6a 00                	push   0x0
c0019208:	68 66 91 01 c0       	push   0xc0019166
c001920d:	6a 07                	push   0x7
c001920f:	c7 05 c8 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dac8,0x0
c0019219:	e8 9d 06 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001921e:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	a8 80                	test   al,0x80
c0019228:	74 1c                	je     c0019246 <HalInitialiseCoprocessor()+0x43>
c001922a:	c7 05 d0 da 02 c0 08 09 02 c0 	mov    DWORD PTR ds:0xc002dad0,0xc0020908
c0019234:	c7 05 cc da 02 c0 10 09 02 c0 	mov    DWORD PTR ds:0xc002dacc,0xc0020910
c001923e:	83 c4 0c             	add    esp,0xc
c0019241:	e9 d2 76 00 00       	jmp    c0020918 <sseInit>
c0019246:	a8 10                	test   al,0x10
c0019248:	74 1c                	je     c0019266 <HalInitialiseCoprocessor()+0x63>
c001924a:	c7 05 d0 da 02 c0 57 09 02 c0 	mov    DWORD PTR ds:0xc002dad0,0xc0020957
c0019254:	c7 05 cc da 02 c0 5e 09 02 c0 	mov    DWORD PTR ds:0xc002dacc,0xc002095e
c001925e:	83 c4 0c             	add    esp,0xc
c0019261:	e9 ff 76 00 00       	jmp    c0020965 <x87Init>
c0019266:	c7 05 d0 da 02 c0 96 79 01 c0 	mov    DWORD PTR ds:0xc002dad0,0xc0017996
c0019270:	c7 05 cc da 02 c0 96 79 01 c0 	mov    DWORD PTR ds:0xc002dacc,0xc0017996
c001927a:	0f 20 c0             	mov    eax,cr0
c001927d:	83 c8 04             	or     eax,0x4
c0019280:	0f 22 c0             	mov    cr0,eax
c0019283:	83 c4 0c             	add    esp,0xc
c0019286:	c3                   	ret    

c0019287 <HalPanic(char const*)>:
c0019287:	53                   	push   ebx
c0019288:	83 ec 10             	sub    esp,0x10
c001928b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001928f:	fa                   	cli    
c0019290:	53                   	push   ebx
c0019291:	68 c4 45 02 c0       	push   0xc00245c4
c0019296:	e8 b3 dc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001929b:	a1 c4 da 02 c0       	mov    eax,ds:0xc002dac4
c00192a0:	83 c4 10             	add    esp,0x10
c00192a3:	85 c0                	test   eax,eax
c00192a5:	74 09                	je     c00192b0 <HalPanic(char const*)+0x29>
c00192a7:	83 ec 0c             	sub    esp,0xc
c00192aa:	53                   	push   ebx
c00192ab:	ff d0                	call   eax
c00192ad:	83 c4 10             	add    esp,0x10
c00192b0:	a1 b4 d1 02 c0       	mov    eax,ds:0xc002d1b4
c00192b5:	85 c0                	test   eax,eax
c00192b7:	0f 84 dc 00 00 00    	je     c0019399 <HalPanic(char const*)+0x112>
c00192bd:	52                   	push   edx
c00192be:	6a 01                	push   0x1
c00192c0:	6a 0f                	push   0xf
c00192c2:	50                   	push   eax
c00192c3:	e8 be 86 ff ff       	call   c0011986 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00192c8:	59                   	pop    ecx
c00192c9:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00192cf:	e8 be 88 ff ff       	call   c0011b92 <VgaText::clearScreen()>
c00192d4:	58                   	pop    eax
c00192d5:	5a                   	pop    edx
c00192d6:	68 67 36 02 c0       	push   0xc0023667
c00192db:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00192e1:	e8 d8 86 ff ff       	call   c00119be <VgaText::setTitle(char*)>
c00192e6:	83 c4 0c             	add    esp,0xc
c00192e9:	6a 01                	push   0x1
c00192eb:	6a 0f                	push   0xf
c00192ed:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00192f3:	e8 8e 86 ff ff       	call   c0011986 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00192f8:	59                   	pop    ecx
c00192f9:	58                   	pop    eax
c00192fa:	68 dd 45 02 c0       	push   0xc00245dd
c00192ff:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c0019305:	e8 7a 8b ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c001930a:	83 c4 0c             	add    esp,0xc
c001930d:	6a 0f                	push   0xf
c001930f:	6a 01                	push   0x1
c0019311:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c0019317:	e8 6a 86 ff ff       	call   c0011986 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001931c:	58                   	pop    eax
c001931d:	5a                   	pop    edx
c001931e:	68 e6 45 02 c0       	push   0xc00245e6
c0019323:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c0019329:	e8 56 8b ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c001932e:	83 c4 0c             	add    esp,0xc
c0019331:	6a 01                	push   0x1
c0019333:	6a 0f                	push   0xf
c0019335:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001933b:	e8 46 86 ff ff       	call   c0011986 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019340:	59                   	pop    ecx
c0019341:	58                   	pop    eax
c0019342:	68 2a 46 02 c0       	push   0xc002462a
c0019347:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001934d:	e8 32 8b ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0019352:	58                   	pop    eax
c0019353:	5a                   	pop    edx
c0019354:	68 f3 45 02 c0       	push   0xc00245f3
c0019359:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001935f:	e8 20 8b ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0019364:	59                   	pop    ecx
c0019365:	58                   	pop    eax
c0019366:	68 2d 46 02 c0       	push   0xc002462d
c001936b:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c0019371:	e8 0e 8b ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0019376:	58                   	pop    eax
c0019377:	5a                   	pop    edx
c0019378:	53                   	push   ebx
c0019379:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001937f:	e8 00 8b ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0019384:	59                   	pop    ecx
c0019385:	5b                   	pop    ebx
c0019386:	68 2a 46 02 c0       	push   0xc002462a
c001938b:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c0019391:	e8 ee 8a ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c0019396:	83 c4 10             	add    esp,0x10
c0019399:	eb fe                	jmp    c0019399 <HalPanic(char const*)+0x112>

c001939b <HalQueryPerformanceCounter()>:
c001939b:	31 c0                	xor    eax,eax
c001939d:	31 d2                	xor    edx,edx
c001939f:	f6 05 0e db 02 c0 08 	test   BYTE PTR ds:0xc002db0e,0x8
c00193a6:	75 02                	jne    c00193aa <HalQueryPerformanceCounter()+0xf>
c00193a8:	0f 31                	rdtsc  
c00193aa:	c3                   	ret    

c00193ab <HalInitialise()>:
c00193ab:	53                   	push   ebx
c00193ac:	83 ec 08             	sub    esp,0x8
c00193af:	c6 05 c0 da 02 c0 00 	mov    BYTE PTR ds:0xc002dac0,0x0
c00193b6:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c00193bb:	83 e0 fe             	and    eax,0xfffffffe
c00193be:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c00193c3:	e8 d8 07 00 00       	call   c0019ba0 <picOpen()>
c00193c8:	80 3d c0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dac0,0x0
c00193cf:	74 0a                	je     c00193db <HalInitialise()+0x30>
c00193d1:	e8 1a 07 00 00       	call   c0019af0 <picDisable()>
c00193d6:	e8 05 6b 00 00       	call   c001fee0 <apicOpen()>
c00193db:	50                   	push   eax
c00193dc:	bb 0f 00 00 00       	mov    ebx,0xf
c00193e1:	6a 00                	push   0x0
c00193e3:	68 44 e4 00 c0       	push   0xc000e444
c00193e8:	6a 00                	push   0x0
c00193ea:	e8 cc 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00193ef:	83 c4 0c             	add    esp,0xc
c00193f2:	6a 00                	push   0x0
c00193f4:	68 44 e4 00 c0       	push   0xc000e444
c00193f9:	6a 01                	push   0x1
c00193fb:	e8 bb 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019400:	83 c4 0c             	add    esp,0xc
c0019403:	6a 00                	push   0x0
c0019405:	68 34 e4 00 c0       	push   0xc000e434
c001940a:	6a 02                	push   0x2
c001940c:	e8 aa 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019411:	83 c4 0c             	add    esp,0xc
c0019414:	6a 00                	push   0x0
c0019416:	68 44 e4 00 c0       	push   0xc000e444
c001941b:	6a 03                	push   0x3
c001941d:	e8 99 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019422:	83 c4 0c             	add    esp,0xc
c0019425:	6a 00                	push   0x0
c0019427:	68 44 e4 00 c0       	push   0xc000e444
c001942c:	6a 04                	push   0x4
c001942e:	e8 88 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019433:	83 c4 0c             	add    esp,0xc
c0019436:	6a 00                	push   0x0
c0019438:	68 44 e4 00 c0       	push   0xc000e444
c001943d:	6a 05                	push   0x5
c001943f:	e8 77 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019444:	83 c4 0c             	add    esp,0xc
c0019447:	6a 00                	push   0x0
c0019449:	68 78 e4 00 c0       	push   0xc000e478
c001944e:	6a 06                	push   0x6
c0019450:	e8 66 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019455:	83 c4 0c             	add    esp,0xc
c0019458:	6a 00                	push   0x0
c001945a:	68 cc e4 00 c0       	push   0xc000e4cc
c001945f:	6a 08                	push   0x8
c0019461:	e8 55 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019466:	83 c4 0c             	add    esp,0xc
c0019469:	6a 00                	push   0x0
c001946b:	68 44 e4 00 c0       	push   0xc000e444
c0019470:	6a 09                	push   0x9
c0019472:	e8 44 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019477:	83 c4 0c             	add    esp,0xc
c001947a:	6a 00                	push   0x0
c001947c:	68 44 e4 00 c0       	push   0xc000e444
c0019481:	6a 0a                	push   0xa
c0019483:	e8 33 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019488:	83 c4 0c             	add    esp,0xc
c001948b:	6a 00                	push   0x0
c001948d:	68 44 e4 00 c0       	push   0xc000e444
c0019492:	6a 0b                	push   0xb
c0019494:	e8 22 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019499:	83 c4 0c             	add    esp,0xc
c001949c:	6a 00                	push   0x0
c001949e:	68 7c e3 00 c0       	push   0xc000e37c
c00194a3:	6a 0d                	push   0xd
c00194a5:	e8 11 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00194aa:	83 c4 0c             	add    esp,0xc
c00194ad:	6a 00                	push   0x0
c00194af:	68 d0 e3 00 c0       	push   0xc000e3d0
c00194b4:	6a 0e                	push   0xe
c00194b6:	e8 00 04 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00194bb:	83 c4 10             	add    esp,0x10
c00194be:	50                   	push   eax
c00194bf:	6a 00                	push   0x0
c00194c1:	68 44 e4 00 c0       	push   0xc000e444
c00194c6:	53                   	push   ebx
c00194c7:	43                   	inc    ebx
c00194c8:	e8 ee 03 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	83 fb 1e             	cmp    ebx,0x1e
c00194d3:	75 e9                	jne    c00194be <HalInitialise()+0x113>
c00194d5:	50                   	push   eax
c00194d6:	6a 00                	push   0x0
c00194d8:	68 1f 18 01 c0       	push   0xc001181f
c00194dd:	6a 60                	push   0x60
c00194df:	e8 d7 03 00 00       	call   c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00194e4:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00194e9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00194f3:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00194fa:	e8 99 5e ff ff       	call   c000f398 <malloc>
c00194ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0019502:	89 c3                	mov    ebx,eax
c0019504:	e8 ff 0d 00 00       	call   c001a308 <RTC::RTC()>
c0019509:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0019513:	5a                   	pop    edx
c0019514:	59                   	pop    ecx
c0019515:	53                   	push   ebx
c0019516:	ff 35 d0 b0 02 c0    	push   DWORD PTR ds:0xc002b0d0
c001951c:	e8 8d fd fe ff       	call   c00092ae <Device::addChild(Device*)>
c0019521:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019523:	6a 00                	push   0x0
c0019525:	6a 00                	push   0x0
c0019527:	6a 00                	push   0x0
c0019529:	53                   	push   ebx
c001952a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001952d:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0019532:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0019538:	83 c4 28             	add    esp,0x28
c001953b:	5b                   	pop    ebx
c001953c:	c3                   	ret    

c001953d <HalMakeBeep(int)>:
c001953d:	53                   	push   ebx
c001953e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019542:	85 db                	test   ebx,ebx
c0019544:	75 07                	jne    c001954d <HalMakeBeep(int)+0x10>
c0019546:	e4 61                	in     al,0x61
c0019548:	83 e0 fc             	and    eax,0xfffffffc
c001954b:	eb 26                	jmp    c0019573 <HalMakeBeep(int)+0x36>
c001954d:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0019552:	99                   	cdq    
c0019553:	f7 fb                	idiv   ebx
c0019555:	89 c1                	mov    ecx,eax
c0019557:	b0 b6                	mov    al,0xb6
c0019559:	e6 43                	out    0x43,al
c001955b:	88 c8                	mov    al,cl
c001955d:	e6 42                	out    0x42,al
c001955f:	89 c8                	mov    eax,ecx
c0019561:	c1 e8 08             	shr    eax,0x8
c0019564:	e6 42                	out    0x42,al
c0019566:	e4 61                	in     al,0x61
c0019568:	89 c2                	mov    edx,eax
c001956a:	83 ca 03             	or     edx,0x3
c001956d:	38 d0                	cmp    al,dl
c001956f:	74 04                	je     c0019575 <HalMakeBeep(int)+0x38>
c0019571:	88 d0                	mov    al,dl
c0019573:	e6 61                	out    0x61,al
c0019575:	5b                   	pop    ebx
c0019576:	c3                   	ret    

c0019577 <HalGetRand()>:
c0019577:	31 c0                	xor    eax,eax
c0019579:	c3                   	ret    

c001957a <HalEndOfInterrupt(int)>:
c001957a:	80 3d c0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dac0,0x0
c0019581:	74 1d                	je     c00195a0 <HalEndOfInterrupt(int)+0x26>
c0019583:	83 ec 18             	sub    esp,0x18
c0019586:	6a 1b                	push   0x1b
c0019588:	e8 0c f5 ff ff       	call   c0018a99 <x86rdmsr(unsigned int)>
c001958d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019592:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001959c:	83 c4 1c             	add    esp,0x1c
c001959f:	c3                   	ret    
c00195a0:	e9 7f 07 00 00       	jmp    c0019d24 <picEOI(int)>

c00195a5 <HalRestart()>:
c00195a5:	c3                   	ret    

c00195a6 <HalShutdown()>:
c00195a6:	c3                   	ret    

c00195a7 <HalSleep()>:
c00195a7:	c3                   	ret    

c00195a8 <CPU::CPU()>:
c00195a8:	83 ec 0c             	sub    esp,0xc
c00195ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195af:	83 ec 08             	sub    esp,0x8
c00195b2:	68 9f 43 02 c0       	push   0xc002439f
c00195b7:	50                   	push   eax
c00195b8:	e8 53 fe fe ff       	call   c0009410 <Device::Device(char const*)>
c00195bd:	83 c4 10             	add    esp,0x10
c00195c0:	ba fc 46 02 c0       	mov    edx,0xc00246fc
c00195c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195c9:	89 10                	mov    DWORD PTR [eax],edx
c00195cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195cf:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00195d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195dd:	05 64 01 00 00       	add    eax,0x164
c00195e2:	83 ec 0c             	sub    esp,0xc
c00195e5:	50                   	push   eax
c00195e6:	e8 35 4f ff ff       	call   c000e520 <GDT::GDT()>
c00195eb:	83 c4 10             	add    esp,0x10
c00195ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f2:	05 68 09 00 00       	add    eax,0x968
c00195f7:	83 ec 0c             	sub    esp,0xc
c00195fa:	50                   	push   eax
c00195fb:	e8 74 51 ff ff       	call   c000e774 <IDT::IDT()>
c0019600:	83 c4 10             	add    esp,0x10
c0019603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019607:	05 68 11 00 00       	add    eax,0x1168
c001960c:	83 ec 0c             	sub    esp,0xc
c001960f:	50                   	push   eax
c0019610:	e8 2b 8d ff ff       	call   c0012340 <TSS::TSS()>
c0019615:	83 c4 10             	add    esp,0x10
c0019618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001961c:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0019626:	90                   	nop
c0019627:	83 c4 0c             	add    esp,0xc
c001962a:	c3                   	ret    
c001962b:	90                   	nop

c001962c <CPU::setupSMEP()>:
c001962c:	0f 20 e0             	mov    eax,cr4
c001962f:	0d 00 00 10 00       	or     eax,0x100000
c0019634:	0f 22 e0             	mov    cr4,eax
c0019637:	c3                   	ret    

c0019638 <CPU::setupUMIP()>:
c0019638:	0f 20 e0             	mov    eax,cr4
c001963b:	80 cc 08             	or     ah,0x8
c001963e:	0f 22 e0             	mov    cr4,eax
c0019641:	c3                   	ret    

c0019642 <CPU::setupTSC()>:
c0019642:	0f 20 e0             	mov    eax,cr4
c0019645:	83 c8 04             	or     eax,0x4
c0019648:	0f 22 e0             	mov    cr4,eax
c001964b:	c3                   	ret    

c001964c <CPU::setupLargePages()>:
c001964c:	0f 20 e0             	mov    eax,cr4
c001964f:	83 c8 10             	or     eax,0x10
c0019652:	0f 22 e0             	mov    cr4,eax
c0019655:	c3                   	ret    

c0019656 <CPU::setupPAT()>:
c0019656:	f6 05 0c db 02 c0 08 	test   BYTE PTR ds:0xc002db0c,0x8
c001965d:	74 28                	je     c0019687 <CPU::setupPAT()+0x31>
c001965f:	53                   	push   ebx
c0019660:	83 ec 14             	sub    esp,0x14
c0019663:	68 77 02 00 00       	push   0x277
c0019668:	e8 2c f4 ff ff       	call   c0018a99 <x86rdmsr(unsigned int)>
c001966d:	83 c4 0c             	add    esp,0xc
c0019670:	83 e2 f8             	and    edx,0xfffffff8
c0019673:	83 ca 01             	or     edx,0x1
c0019676:	52                   	push   edx
c0019677:	50                   	push   eax
c0019678:	68 77 02 00 00       	push   0x277
c001967d:	e8 55 f4 ff ff       	call   c0018ad7 <x86wrmsr(unsigned int, unsigned long long)>
c0019682:	83 c4 18             	add    esp,0x18
c0019685:	5b                   	pop    ebx
c0019686:	c3                   	ret    
c0019687:	c3                   	ret    

c0019688 <CPU::setupMTRR()>:
c0019688:	c3                   	ret    
c0019689:	90                   	nop

c001968a <CPU::setupGlobalPages()>:
c001968a:	0f 20 e0             	mov    eax,cr4
c001968d:	0c 80                	or     al,0x80
c001968f:	0f 22 e0             	mov    cr4,eax
c0019692:	c3                   	ret    
c0019693:	90                   	nop

c0019694 <CPU::allowUsermodeDataAccess()>:
c0019694:	f6 05 0f db 02 c0 40 	test   BYTE PTR ds:0xc002db0f,0x40
c001969b:	74 03                	je     c00196a0 <CPU::allowUsermodeDataAccess()+0xc>
c001969d:	0f 01 cb             	stac   
c00196a0:	c3                   	ret    
c00196a1:	90                   	nop

c00196a2 <CPU::prohibitUsermodeDataAccess()>:
c00196a2:	f6 05 0f db 02 c0 40 	test   BYTE PTR ds:0xc002db0f,0x40
c00196a9:	74 03                	je     c00196ae <CPU::prohibitUsermodeDataAccess()+0xc>
c00196ab:	0f 01 ca             	clac   
c00196ae:	c3                   	ret    
c00196af:	90                   	nop

c00196b0 <CPU::setupSMAP()>:
c00196b0:	0f 20 e0             	mov    eax,cr4
c00196b3:	0d 00 00 20 00       	or     eax,0x200000
c00196b8:	0f 22 e0             	mov    cr4,eax
c00196bb:	eb e5                	jmp    c00196a2 <CPU::prohibitUsermodeDataAccess()>
c00196bd:	90                   	nop

c00196be <CPU::setupFeatures()>:
c00196be:	53                   	push   ebx
c00196bf:	83 ec 08             	sub    esp,0x8
c00196c2:	f6 05 0f db 02 c0 20 	test   BYTE PTR ds:0xc002db0f,0x20
c00196c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196cd:	74 18                	je     c00196e7 <CPU::setupFeatures()+0x29>
c00196cf:	83 ec 0c             	sub    esp,0xc
c00196d2:	68 38 46 02 c0       	push   0xc0024638
c00196d7:	e8 72 d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00196dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196df:	e8 54 ff ff ff       	call   c0019638 <CPU::setupUMIP()>
c00196e4:	83 c4 10             	add    esp,0x10
c00196e7:	f6 05 0e db 02 c0 08 	test   BYTE PTR ds:0xc002db0e,0x8
c00196ee:	74 18                	je     c0019708 <CPU::setupFeatures()+0x4a>
c00196f0:	83 ec 0c             	sub    esp,0xc
c00196f3:	68 42 46 02 c0       	push   0xc0024642
c00196f8:	e8 51 d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00196fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019700:	e8 3d ff ff ff       	call   c0019642 <CPU::setupTSC()>
c0019705:	83 c4 10             	add    esp,0x10
c0019708:	f6 05 0e db 02 c0 20 	test   BYTE PTR ds:0xc002db0e,0x20
c001970f:	74 18                	je     c0019729 <CPU::setupFeatures()+0x6b>
c0019711:	83 ec 0c             	sub    esp,0xc
c0019714:	68 4b 46 02 c0       	push   0xc002464b
c0019719:	e8 30 d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001971e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019721:	e8 26 ff ff ff       	call   c001964c <CPU::setupLargePages()>
c0019726:	83 c4 10             	add    esp,0x10
c0019729:	f6 05 0e db 02 c0 40 	test   BYTE PTR ds:0xc002db0e,0x40
c0019730:	74 18                	je     c001974a <CPU::setupFeatures()+0x8c>
c0019732:	83 ec 0c             	sub    esp,0xc
c0019735:	68 54 46 02 c0       	push   0xc0024654
c001973a:	e8 0f d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001973f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019742:	e8 43 ff ff ff       	call   c001968a <CPU::setupGlobalPages()>
c0019747:	83 c4 10             	add    esp,0x10
c001974a:	f6 05 0e db 02 c0 80 	test   BYTE PTR ds:0xc002db0e,0x80
c0019751:	74 18                	je     c001976b <CPU::setupFeatures()+0xad>
c0019753:	83 ec 0c             	sub    esp,0xc
c0019756:	68 66 46 02 c0       	push   0xc0024666
c001975b:	e8 ee d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019760:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019763:	e8 ee fe ff ff       	call   c0019656 <CPU::setupPAT()>
c0019768:	83 c4 10             	add    esp,0x10
c001976b:	f6 05 10 db 02 c0 04 	test   BYTE PTR ds:0xc002db10,0x4
c0019772:	74 11                	je     c0019785 <CPU::setupFeatures()+0xc7>
c0019774:	c7 44 24 10 6f 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc002466f
c001977c:	83 c4 08             	add    esp,0x8
c001977f:	5b                   	pop    ebx
c0019780:	e9 c9 d7 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0019785:	83 c4 08             	add    esp,0x8
c0019788:	5b                   	pop    ebx
c0019789:	c3                   	ret    

c001978a <CPU::open(int, int, void*)>:
c001978a:	55                   	push   ebp
c001978b:	57                   	push   edi
c001978c:	56                   	push   esi
c001978d:	53                   	push   ebx
c001978e:	83 ec 18             	sub    esp,0x18
c0019791:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019795:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019799:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001979d:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c00197a3:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c00197a9:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c00197af:	50                   	push   eax
c00197b0:	e8 cd 4d ff ff       	call   c000e582 <GDT::setup()>
c00197b5:	83 c4 0c             	add    esp,0xc
c00197b8:	6a 00                	push   0x0
c00197ba:	68 ef be ad de       	push   0xdeadbeef
c00197bf:	55                   	push   ebp
c00197c0:	e8 bf 8b ff ff       	call   c0012384 <TSS::setup(unsigned long, unsigned long)>
c00197c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00197c8:	e8 97 8b ff ff       	call   c0012364 <TSS::flush()>
c00197cd:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c00197d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00197d6:	e8 0f 50 ff ff       	call   c000e7ea <IDT::setup()>
c00197db:	b8 00 04 00 00       	mov    eax,0x400
c00197e0:	0f 23 f8             	mov    dr7,eax
c00197e3:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c00197ed:	e8 e6 60 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c00197f2:	83 c4 10             	add    esp,0x10
c00197f5:	85 f6                	test   esi,esi
c00197f7:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c00197fd:	89 38                	mov    DWORD PTR [eax],edi
c00197ff:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019805:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019808:	74 10                	je     c001981a <CPU::open(int, int, void*)+0x90>
c001980a:	50                   	push   eax
c001980b:	50                   	push   eax
c001980c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019812:	56                   	push   esi
c0019813:	e8 1c 95 ff ff       	call   c0012d34 <VAS::setCPUSpecific(unsigned long)>
c0019818:	eb 0d                	jmp    c0019827 <CPU::open(int, int, void*)+0x9d>
c001981a:	83 ec 0c             	sub    esp,0xc
c001981d:	68 79 46 02 c0       	push   0xc0024679
c0019822:	e8 b7 5e ff ff       	call   c000f6de <KePanic(char const*)>
c0019827:	83 c4 10             	add    esp,0x10
c001982a:	83 ec 0c             	sub    esp,0xc
c001982d:	68 87 46 02 c0       	push   0xc0024687
c0019832:	e8 18 32 ff ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c0019837:	e8 6f fb ff ff       	call   c00193ab <HalInitialise()>
c001983c:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0019841:	83 e0 10             	and    eax,0x10
c0019844:	83 f8 01             	cmp    eax,0x1
c0019847:	19 c0                	sbb    eax,eax
c0019849:	83 e0 46             	and    eax,0x46
c001984c:	83 c0 1e             	add    eax,0x1e
c001984f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019852:	e8 f2 10 ff ff       	call   c000a949 <setupTimer(int)>
c0019857:	83 c4 10             	add    esp,0x10
c001985a:	f6 05 24 d1 02 c0 20 	test   BYTE PTR ds:0xc002d124,0x20
c0019861:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0019867:	74 0c                	je     c0019875 <CPU::open(int, int, void*)+0xeb>
c0019869:	83 ec 0c             	sub    esp,0xc
c001986c:	53                   	push   ebx
c001986d:	e8 4c fe ff ff       	call   c00196be <CPU::setupFeatures()>
c0019872:	83 c4 10             	add    esp,0x10
c0019875:	83 c4 0c             	add    esp,0xc
c0019878:	31 c0                	xor    eax,eax
c001987a:	5b                   	pop    ebx
c001987b:	5e                   	pop    esi
c001987c:	5f                   	pop    edi
c001987d:	5d                   	pop    ebp
c001987e:	c3                   	ret    

c001987f <convertLegacyIRQNumber(int)>:
c001987f:	83 ec 0c             	sub    esp,0xc
c0019882:	f6 05 0c db 02 c0 01 	test   BYTE PTR ds:0xc002db0c,0x1
c0019889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001988d:	74 0c                	je     c001989b <convertLegacyIRQNumber(int)+0x1c>
c001988f:	83 f8 0f             	cmp    eax,0xf
c0019892:	7f 0b                	jg     c001989f <convertLegacyIRQNumber(int)+0x20>
c0019894:	0f b6 80 68 52 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdad98]
c001989b:	83 c4 0c             	add    esp,0xc
c001989e:	c3                   	ret    
c001989f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00198a3:	83 ec 0c             	sub    esp,0xc
c00198a6:	68 20 47 02 c0       	push   0xc0024720
c00198ab:	e8 2e 5e ff ff       	call   c000f6de <KePanic(char const*)>
c00198b0:	83 c4 10             	add    esp,0x10
c00198b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198b7:	83 c4 0c             	add    esp,0xc
c00198ba:	c3                   	ret    

c00198bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c00198bb:	56                   	push   esi
c00198bc:	31 c0                	xor    eax,eax
c00198be:	53                   	push   ebx
c00198bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00198c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00198cb:	89 ca                	mov    edx,ecx
c00198cd:	c1 e2 04             	shl    edx,0x4
c00198d0:	83 bc 82 e0 c0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd3f20],0x0
c00198d8:	74 17                	je     c00198f1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c00198da:	83 c0 01             	add    eax,0x1
c00198dd:	83 f8 04             	cmp    eax,0x4
c00198e0:	75 ee                	jne    c00198d0 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c00198e2:	c7 44 24 0c 81 47 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024781
c00198ea:	5b                   	pop    ebx
c00198eb:	5e                   	pop    esi
c00198ec:	e9 ed 5d ff ff       	jmp    c000f6de <KePanic(char const*)>
c00198f1:	8d 04 88             	lea    eax,[eax+ecx*4]
c00198f4:	89 1c 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],ebx
c00198fb:	5b                   	pop    ebx
c00198fc:	89 34 85 e0 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f20],esi
c0019903:	5e                   	pop    esi
c0019904:	c3                   	ret    

c0019905 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0019905:	55                   	push   ebp
c0019906:	57                   	push   edi
c0019907:	56                   	push   esi
c0019908:	53                   	push   ebx
c0019909:	83 ec 0c             	sub    esp,0xc
c001990c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019910:	f6 05 0c db 02 c0 01 	test   BYTE PTR ds:0xc002db0c,0x1
c0019917:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001991b:	8d 6e 20             	lea    ebp,[esi+0x20]
c001991e:	74 57                	je     c0019977 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019920:	84 c0                	test   al,al
c0019922:	89 c7                	mov    edi,eax
c0019924:	74 1d                	je     c0019943 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0019926:	83 fe 0f             	cmp    esi,0xf
c0019929:	0f 8f d9 00 00 00    	jg     c0019a08 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001992f:	0f b6 b6 68 52 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdad98]
c0019936:	0f b7 bc 36 20 ae 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd51e0]
c001993e:	d1 ef                	shr    edi,1
c0019940:	83 e7 01             	and    edi,0x1
c0019943:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0019948:	83 ec 08             	sub    esp,0x8
c001994b:	31 db                	xor    ebx,ebx
c001994d:	50                   	push   eax
c001994e:	68 8e 47 02 c0       	push   0xc002478e
c0019953:	e8 f6 d5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019958:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c001995d:	83 c4 10             	add    esp,0x10
c0019960:	85 c0                	test   eax,eax
c0019962:	7f 59                	jg     c00199bd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c0019964:	8d 6e 20             	lea    ebp,[esi+0x20]
c0019967:	83 ec 0c             	sub    esp,0xc
c001996a:	68 a5 47 02 c0       	push   0xc00247a5
c001996f:	e8 6a 5d ff ff       	call   c000f6de <KePanic(char const*)>
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	89 e8                	mov    eax,ebp
c0019979:	31 d2                	xor    edx,edx
c001997b:	c1 e0 04             	shl    eax,0x4
c001997e:	8b 8c 90 e0 c0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd3f20]
c0019985:	85 c9                	test   ecx,ecx
c0019987:	0f 84 92 00 00 00    	je     c0019a1f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001998d:	83 c2 01             	add    edx,0x1
c0019990:	83 fa 04             	cmp    edx,0x4
c0019993:	75 e9                	jne    c001997e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c0019995:	83 ec 0c             	sub    esp,0xc
c0019998:	68 5c 47 02 c0       	push   0xc002475c
c001999d:	e8 3c 5d ff ff       	call   c000f6de <KePanic(char const*)>
c00199a2:	83 c4 10             	add    esp,0x10
c00199a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00199aa:	83 c4 0c             	add    esp,0xc
c00199ad:	5b                   	pop    ebx
c00199ae:	5e                   	pop    esi
c00199af:	5f                   	pop    edi
c00199b0:	5d                   	pop    ebp
c00199b1:	c3                   	ret    
c00199b2:	83 c3 01             	add    ebx,0x1
c00199b5:	39 1d 60 e4 02 c0    	cmp    DWORD PTR ds:0xc002e460,ebx
c00199bb:	7e a7                	jle    c0019964 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c00199bd:	8b 2c 9d 80 e4 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd1b80]
c00199c4:	83 ec 08             	sub    esp,0x8
c00199c7:	56                   	push   esi
c00199c8:	55                   	push   ebp
c00199c9:	e8 9e 66 00 00       	call   c002006c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00199ce:	83 c4 10             	add    esp,0x10
c00199d1:	84 c0                	test   al,al
c00199d3:	74 dd                	je     c00199b2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c00199d5:	89 f8                	mov    eax,edi
c00199d7:	83 ec 04             	sub    esp,0x4
c00199da:	8b 1c 9d 80 e4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1b80]
c00199e1:	8d 6e 20             	lea    ebp,[esi+0x20]
c00199e4:	0f b6 f8             	movzx  edi,al
c00199e7:	57                   	push   edi
c00199e8:	89 e8                	mov    eax,ebp
c00199ea:	6a 00                	push   0x0
c00199ec:	0f b6 c0             	movzx  eax,al
c00199ef:	50                   	push   eax
c00199f0:	89 f0                	mov    eax,esi
c00199f2:	6a 00                	push   0x0
c00199f4:	0f b6 c0             	movzx  eax,al
c00199f7:	6a 00                	push   0x0
c00199f9:	50                   	push   eax
c00199fa:	53                   	push   ebx
c00199fb:	e8 d8 67 00 00       	call   c00201d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0019a00:	83 c4 20             	add    esp,0x20
c0019a03:	e9 6f ff ff ff       	jmp    c0019977 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019a08:	83 ec 0c             	sub    esp,0xc
c0019a0b:	31 ff                	xor    edi,edi
c0019a0d:	68 20 47 02 c0       	push   0xc0024720
c0019a12:	e8 c7 5c ff ff       	call   c000f6de <KePanic(char const*)>
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	e9 24 ff ff ff       	jmp    c0019943 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0019a1f:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0019a22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019a26:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c0019a2d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019a31:	89 14 85 e0 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f20],edx
c0019a38:	83 c4 0c             	add    esp,0xc
c0019a3b:	89 f0                	mov    eax,esi
c0019a3d:	5b                   	pop    ebx
c0019a3e:	5e                   	pop    esi
c0019a3f:	5f                   	pop    edi
c0019a40:	5d                   	pop    ebp
c0019a41:	c3                   	ret    

c0019a42 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0019a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019a4a:	c1 e0 04             	shl    eax,0x4
c0019a4d:	8d 50 10             	lea    edx,[eax+0x10]
c0019a50:	39 88 e0 c0 02 c0    	cmp    DWORD PTR [eax-0x3ffd3f20],ecx
c0019a56:	74 08                	je     c0019a60 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0019a58:	83 c0 04             	add    eax,0x4
c0019a5b:	39 d0                	cmp    eax,edx
c0019a5d:	75 f1                	jne    c0019a50 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0019a5f:	c3                   	ret    
c0019a60:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c0019a6a:	c7 80 e0 b0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4f20],0x0
c0019a74:	eb e2                	jmp    c0019a58 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0019a76 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0019a76:	56                   	push   esi
c0019a77:	53                   	push   ebx
c0019a78:	83 ec 04             	sub    esp,0x4
c0019a7b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019a80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a84:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a88:	74 09                	je     c0019a93 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0019a8a:	f6 05 0c db 02 c0 01 	test   BYTE PTR ds:0xc002db0c,0x1
c0019a91:	75 34                	jne    c0019ac7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0019a93:	8d 43 20             	lea    eax,[ebx+0x20]
c0019a96:	c1 e0 04             	shl    eax,0x4
c0019a99:	8d 50 10             	lea    edx,[eax+0x10]
c0019a9c:	39 b0 e0 c0 02 c0    	cmp    DWORD PTR [eax-0x3ffd3f20],esi
c0019aa2:	74 0d                	je     c0019ab1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0019aa4:	83 c0 04             	add    eax,0x4
c0019aa7:	39 d0                	cmp    eax,edx
c0019aa9:	75 f1                	jne    c0019a9c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c0019aab:	83 c4 04             	add    esp,0x4
c0019aae:	5b                   	pop    ebx
c0019aaf:	5e                   	pop    esi
c0019ab0:	c3                   	ret    
c0019ab1:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c0019abb:	c7 80 e0 b0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4f20],0x0
c0019ac5:	eb dd                	jmp    c0019aa4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c0019ac7:	83 fb 0f             	cmp    ebx,0xf
c0019aca:	7f 09                	jg     c0019ad5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c0019acc:	0f b6 9b 68 52 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdad98]
c0019ad3:	eb be                	jmp    c0019a93 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0019ad5:	83 ec 0c             	sub    esp,0xc
c0019ad8:	68 b2 47 02 c0       	push   0xc00247b2
c0019add:	e8 fc 5b ff ff       	call   c000f6de <KePanic(char const*)>
c0019ae2:	83 c4 10             	add    esp,0x10
c0019ae5:	eb ac                	jmp    c0019a93 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0019ae7:	90                   	nop

c0019ae8 <picIoWait()>:
c0019ae8:	eb 00                	jmp    c0019aea <picIoWait()+0x2>
c0019aea:	eb 00                	jmp    c0019aec <picIoWait()+0x4>
c0019aec:	90                   	nop
c0019aed:	c3                   	ret    
c0019aee:	66 90                	xchg   ax,ax

c0019af0 <picDisable()>:
c0019af0:	83 ec 10             	sub    esp,0x10
c0019af3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0019afa:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0019aff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019b03:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019b08:	ee                   	out    dx,al
c0019b09:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0019b10:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0019b15:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019b19:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019b1e:	ee                   	out    dx,al
c0019b1f:	90                   	nop
c0019b20:	83 c4 10             	add    esp,0x10
c0019b23:	c3                   	ret    

c0019b24 <picGetIRQReg(int)>:
c0019b24:	83 ec 10             	sub    esp,0x10
c0019b27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b2b:	0f b6 c0             	movzx  eax,al
c0019b2e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019b35:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0019b39:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019b3d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019b42:	ee                   	out    dx,al
c0019b43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b47:	0f b6 c0             	movzx  eax,al
c0019b4a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019b51:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019b55:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019b59:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019b5e:	ee                   	out    dx,al
c0019b5f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0019b66:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0019b6b:	89 c2                	mov    edx,eax
c0019b6d:	ec                   	in     al,dx
c0019b6e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019b72:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019b76:	0f b6 c0             	movzx  eax,al
c0019b79:	c1 e0 08             	shl    eax,0x8
c0019b7c:	89 c1                	mov    ecx,eax
c0019b7e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0019b85:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0019b8a:	89 c2                	mov    edx,eax
c0019b8c:	ec                   	in     al,dx
c0019b8d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019b91:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019b95:	0f b6 c0             	movzx  eax,al
c0019b98:	09 c8                	or     eax,ecx
c0019b9a:	83 c4 10             	add    esp,0x10
c0019b9d:	c3                   	ret    
c0019b9e:	66 90                	xchg   ax,ax

c0019ba0 <picOpen()>:
c0019ba0:	83 ec 50             	sub    esp,0x50
c0019ba3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0019baa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0019baf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019bb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bb7:	ee                   	out    dx,al
c0019bb8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0019bbf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019bc4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019bc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019bcc:	ee                   	out    dx,al
c0019bcd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019bd5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0019bdd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019be4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019be8:	89 c2                	mov    edx,eax
c0019bea:	ec                   	in     al,dx
c0019beb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0019bef:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019bf3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019bf7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0019bfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c02:	89 c2                	mov    edx,eax
c0019c04:	ec                   	in     al,dx
c0019c05:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019c09:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019c0d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0019c11:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019c18:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019c1d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0019c21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019c25:	ee                   	out    dx,al
c0019c26:	e8 bd fe ff ff       	call   c0019ae8 <picIoWait()>
c0019c2b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0019c32:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019c37:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019c3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019c3f:	ee                   	out    dx,al
c0019c40:	e8 a3 fe ff ff       	call   c0019ae8 <picIoWait()>
c0019c45:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019c49:	0f b6 c0             	movzx  eax,al
c0019c4c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0019c53:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019c57:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019c5b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019c5f:	ee                   	out    dx,al
c0019c60:	e8 83 fe ff ff       	call   c0019ae8 <picIoWait()>
c0019c65:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019c69:	0f b6 c0             	movzx  eax,al
c0019c6c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0019c73:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019c77:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0019c7b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019c7f:	ee                   	out    dx,al
c0019c80:	e8 63 fe ff ff       	call   c0019ae8 <picIoWait()>
c0019c85:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0019c8c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0019c91:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0019c95:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c99:	ee                   	out    dx,al
c0019c9a:	e8 49 fe ff ff       	call   c0019ae8 <picIoWait()>
c0019c9f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0019ca6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0019cab:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019caf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019cb3:	ee                   	out    dx,al
c0019cb4:	e8 2f fe ff ff       	call   c0019ae8 <picIoWait()>
c0019cb9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0019cc0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019cc5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0019cc9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019ccd:	ee                   	out    dx,al
c0019cce:	e8 15 fe ff ff       	call   c0019ae8 <picIoWait()>
c0019cd3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0019cda:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0019cdf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019ce3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019ce7:	ee                   	out    dx,al
c0019ce8:	e8 fb fd ff ff       	call   c0019ae8 <picIoWait()>
c0019ced:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019cf2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019cf9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019cfd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019d01:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019d05:	ee                   	out    dx,al
c0019d06:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019d0b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0019d12:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019d16:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019d1a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019d1e:	ee                   	out    dx,al
c0019d1f:	90                   	nop
c0019d20:	83 c4 50             	add    esp,0x50
c0019d23:	c3                   	ret    

c0019d24 <picEOI(int)>:
c0019d24:	83 ec 10             	sub    esp,0x10
c0019d27:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019d2c:	75 1e                	jne    c0019d4c <picEOI(int)+0x28>
c0019d2e:	6a 0b                	push   0xb
c0019d30:	e8 ef fd ff ff       	call   c0019b24 <picGetIRQReg(int)>
c0019d35:	83 c4 04             	add    esp,0x4
c0019d38:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019d3d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0019d42:	25 80 00 00 00       	and    eax,0x80
c0019d47:	74 73                	je     c0019dbc <picEOI(int)+0x98>
c0019d49:	8d 76 00             	lea    esi,[esi+0x0]
c0019d4c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019d51:	75 31                	jne    c0019d84 <picEOI(int)+0x60>
c0019d53:	6a 0b                	push   0xb
c0019d55:	e8 ca fd ff ff       	call   c0019b24 <picGetIRQReg(int)>
c0019d5a:	83 c4 04             	add    esp,0x4
c0019d5d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0019d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d66:	98                   	cwde   
c0019d67:	85 c0                	test   eax,eax
c0019d69:	78 19                	js     c0019d84 <picEOI(int)+0x60>
c0019d6b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0019d72:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0019d77:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019d7b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019d80:	ee                   	out    dx,al
c0019d81:	eb 3d                	jmp    c0019dc0 <picEOI(int)+0x9c>
c0019d83:	90                   	nop
c0019d84:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019d89:	7e 19                	jle    c0019da4 <picEOI(int)+0x80>
c0019d8b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019d92:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0019d97:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019d9b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019da0:	ee                   	out    dx,al
c0019da1:	8d 76 00             	lea    esi,[esi+0x0]
c0019da4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019dab:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0019db0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019db4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019db9:	ee                   	out    dx,al
c0019dba:	eb 04                	jmp    c0019dc0 <picEOI(int)+0x9c>
c0019dbc:	90                   	nop
c0019dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc0:	83 c4 10             	add    esp,0x10
c0019dc3:	c3                   	ret    

c0019dc4 <RTC::open(int, int, void*)>:
c0019dc4:	31 c0                	xor    eax,eax
c0019dc6:	c3                   	ret    
c0019dc7:	90                   	nop

c0019dc8 <RTC::close(int, int, void*)>:
c0019dc8:	31 c0                	xor    eax,eax
c0019dca:	c3                   	ret    
c0019dcb:	90                   	nop

c0019dcc <RTC::timeInSecondsUTC()>:
c0019dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019dd6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ddc:	c3                   	ret    
c0019ddd:	90                   	nop

c0019dde <RTC::timeInDatetimeUTC()>:
c0019dde:	53                   	push   ebx
c0019ddf:	83 ec 14             	sub    esp,0x14
c0019de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019de6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019dea:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dec:	50                   	push   eax
c0019ded:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019df0:	83 c4 0c             	add    esp,0xc
c0019df3:	52                   	push   edx
c0019df4:	50                   	push   eax
c0019df5:	53                   	push   ebx
c0019df6:	e8 24 f2 fe ff       	call   c000901f <KeSecondsToDatetime(unsigned long long)>
c0019dfb:	89 d8                	mov    eax,ebx
c0019dfd:	83 c4 14             	add    esp,0x14
c0019e00:	5b                   	pop    ebx
c0019e01:	c2 04 00             	ret    0x4

c0019e04 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019e04:	56                   	push   esi
c0019e05:	53                   	push   ebx
c0019e06:	83 ec 14             	sub    esp,0x14
c0019e09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e0f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0019e12:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e16:	52                   	push   edx
c0019e17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e1f:	50                   	push   eax
c0019e20:	e8 fa f1 fe ff       	call   c000901f <KeSecondsToDatetime(unsigned long long)>
c0019e25:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019e29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019e35:	89 f0                	mov    eax,esi
c0019e37:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e3b:	83 c4 20             	add    esp,0x20
c0019e3e:	5b                   	pop    ebx
c0019e3f:	5e                   	pop    esi
c0019e40:	ff e0                	jmp    eax

c0019e42 <RTC::~RTC()>:
c0019e42:	83 ec 0c             	sub    esp,0xc
c0019e45:	ba dc 47 02 c0       	mov    edx,0xc00247dc
c0019e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e4e:	89 10                	mov    DWORD PTR [eax],edx
c0019e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e54:	83 ec 0c             	sub    esp,0xc
c0019e57:	50                   	push   eax
c0019e58:	e8 25 ef fe ff       	call   c0008d82 <Clock::~Clock()>
c0019e5d:	83 c4 10             	add    esp,0x10
c0019e60:	90                   	nop
c0019e61:	83 c4 0c             	add    esp,0xc
c0019e64:	c3                   	ret    
c0019e65:	90                   	nop

c0019e66 <RTC::~RTC()>:
c0019e66:	83 ec 0c             	sub    esp,0xc
c0019e69:	83 ec 0c             	sub    esp,0xc
c0019e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e70:	e8 cd ff ff ff       	call   c0019e42 <RTC::~RTC()>
c0019e75:	83 c4 10             	add    esp,0x10
c0019e78:	83 ec 08             	sub    esp,0x8
c0019e7b:	68 60 01 00 00       	push   0x160
c0019e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e84:	e8 86 2c ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c0019e89:	83 c4 10             	add    esp,0x10
c0019e8c:	83 c4 0c             	add    esp,0xc
c0019e8f:	c3                   	ret    

c0019e90 <RTC::get_update_in_progress_flag()>:
c0019e90:	83 ec 18             	sub    esp,0x18
c0019e93:	6a 0a                	push   0xa
c0019e95:	e8 01 db ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019e9a:	83 c4 1c             	add    esp,0x1c
c0019e9d:	0f b6 c0             	movzx  eax,al
c0019ea0:	c1 e8 07             	shr    eax,0x7
c0019ea3:	c3                   	ret    

c0019ea4 <RTC::completeRTCRefresh()>:
c0019ea4:	55                   	push   ebp
c0019ea5:	57                   	push   edi
c0019ea6:	56                   	push   esi
c0019ea7:	53                   	push   ebx
c0019ea8:	83 ec 3c             	sub    esp,0x3c
c0019eab:	8b 1d 4c ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab4c
c0019eb1:	83 ec 0c             	sub    esp,0xc
c0019eb4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019eb8:	e8 d3 ff ff ff       	call   c0019e90 <RTC::get_update_in_progress_flag()>
c0019ebd:	83 c4 10             	add    esp,0x10
c0019ec0:	84 c0                	test   al,al
c0019ec2:	74 0e                	je     c0019ed2 <RTC::completeRTCRefresh()+0x2e>
c0019ec4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019eca:	3b 05 4c ab 02 c0    	cmp    eax,DWORD PTR ds:0xc002ab4c
c0019ed0:	73 df                	jae    c0019eb1 <RTC::completeRTCRefresh()+0xd>
c0019ed2:	83 ec 0c             	sub    esp,0xc
c0019ed5:	6a 00                	push   0x0
c0019ed7:	e8 bf da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019edc:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019ee3:	89 c7                	mov    edi,eax
c0019ee5:	e8 b1 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019eea:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019ef1:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019ef5:	e8 a1 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019efa:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019f01:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019f05:	e8 91 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019f0a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019f11:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019f15:	e8 81 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019f1a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019f21:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019f25:	e8 71 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019f2a:	0f b6 c0             	movzx  eax,al
c0019f2d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019f31:	83 c4 10             	add    esp,0x10
c0019f34:	8b 1d 4c ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab4c
c0019f3a:	83 ec 0c             	sub    esp,0xc
c0019f3d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019f41:	e8 4a ff ff ff       	call   c0019e90 <RTC::get_update_in_progress_flag()>
c0019f46:	83 c4 10             	add    esp,0x10
c0019f49:	84 c0                	test   al,al
c0019f4b:	74 0e                	je     c0019f5b <RTC::completeRTCRefresh()+0xb7>
c0019f4d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019f53:	3b 05 4c ab 02 c0    	cmp    eax,DWORD PTR ds:0xc002ab4c
c0019f59:	73 df                	jae    c0019f3a <RTC::completeRTCRefresh()+0x96>
c0019f5b:	83 ec 0c             	sub    esp,0xc
c0019f5e:	6a 00                	push   0x0
c0019f60:	e8 36 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019f65:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019f6c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019f70:	e8 26 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019f75:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019f7c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f80:	e8 16 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019f85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019f8c:	88 c3                	mov    bl,al
c0019f8e:	e8 08 da ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019f93:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019f9a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019f9e:	e8 f8 d9 ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019fa3:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019faa:	89 c6                	mov    esi,eax
c0019fac:	e8 ea d9 ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c0019fb1:	89 f9                	mov    ecx,edi
c0019fb3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019fb7:	83 c4 10             	add    esp,0x10
c0019fba:	0f b6 e8             	movzx  ebp,al
c0019fbd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019fc2:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019fc6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019fca:	74 27                	je     c0019ff3 <RTC::completeRTCRefresh()+0x14f>
c0019fcc:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0019fd0:	89 f0                	mov    eax,esi
c0019fd2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019fd6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019fda:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019fde:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0019fe2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019fe6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fea:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019fee:	e9 41 ff ff ff       	jmp    c0019f34 <RTC::completeRTCRefresh()+0x90>
c0019ff3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ff8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ffc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a000:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001a004:	75 c6                	jne    c0019fcc <RTC::completeRTCRefresh()+0x128>
c001a006:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001a00b:	89 f1                	mov    ecx,esi
c001a00d:	0f b6 fb             	movzx  edi,bl
c001a010:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001a014:	0f b6 c9             	movzx  ecx,cl
c001a017:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001a01b:	89 f1                	mov    ecx,esi
c001a01d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a021:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a025:	0f 94 c2             	sete   dl
c001a028:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001a02c:	0f 94 c0             	sete   al
c001a02f:	21 d0                	and    eax,edx
c001a031:	31 d2                	xor    edx,edx
c001a033:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001a037:	0f 94 c2             	sete   dl
c001a03a:	85 c2                	test   edx,eax
c001a03c:	74 8e                	je     c0019fcc <RTC::completeRTCRefresh()+0x128>
c001a03e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001a042:	75 88                	jne    c0019fcc <RTC::completeRTCRefresh()+0x128>
c001a044:	83 ec 0c             	sub    esp,0xc
c001a047:	6a 0b                	push   0xb
c001a049:	e8 4d d9 ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c001a04e:	83 c4 10             	add    esp,0x10
c001a051:	a8 04                	test   al,0x4
c001a053:	75 7a                	jne    c001a0cf <RTC::completeRTCRefresh()+0x22b>
c001a055:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a059:	c1 ef 04             	shr    edi,0x4
c001a05c:	83 e6 0f             	and    esi,0xf
c001a05f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a063:	c1 ed 04             	shr    ebp,0x4
c001a066:	6b ed 0a             	imul   ebp,ebp,0xa
c001a069:	c1 ea 04             	shr    edx,0x4
c001a06c:	6b d2 0a             	imul   edx,edx,0xa
c001a06f:	83 e1 0f             	and    ecx,0xf
c001a072:	01 d1                	add    ecx,edx
c001a074:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a078:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001a07c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a080:	c1 ea 04             	shr    edx,0x4
c001a083:	6b d2 0a             	imul   edx,edx,0xa
c001a086:	83 e1 0f             	and    ecx,0xf
c001a089:	01 d1                	add    ecx,edx
c001a08b:	89 fa                	mov    edx,edi
c001a08d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001a091:	83 e2 07             	and    edx,0x7
c001a094:	89 d9                	mov    ecx,ebx
c001a096:	6b d2 0a             	imul   edx,edx,0xa
c001a099:	83 e1 0f             	and    ecx,0xf
c001a09c:	83 e3 80             	and    ebx,0xffffff80
c001a09f:	01 d1                	add    ecx,edx
c001a0a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a0a5:	09 cb                	or     ebx,ecx
c001a0a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0ab:	c1 ea 04             	shr    edx,0x4
c001a0ae:	6b d2 0a             	imul   edx,edx,0xa
c001a0b1:	83 e1 0f             	and    ecx,0xf
c001a0b4:	01 d1                	add    ecx,edx
c001a0b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a0ba:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001a0be:	c1 ea 04             	shr    edx,0x4
c001a0c1:	6b d2 0a             	imul   edx,edx,0xa
c001a0c4:	01 d6                	add    esi,edx
c001a0c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0ca:	83 e2 0f             	and    edx,0xf
c001a0cd:	01 d5                	add    ebp,edx
c001a0cf:	a8 02                	test   al,0x2
c001a0d1:	75 15                	jne    c001a0e8 <RTC::completeRTCRefresh()+0x244>
c001a0d3:	f6 c3 80             	test   bl,0x80
c001a0d6:	74 10                	je     c001a0e8 <RTC::completeRTCRefresh()+0x244>
c001a0d8:	83 e3 7f             	and    ebx,0x7f
c001a0db:	b9 18 00 00 00       	mov    ecx,0x18
c001a0e0:	8d 43 0c             	lea    eax,[ebx+0xc]
c001a0e3:	99                   	cdq    
c001a0e4:	f7 f9                	idiv   ecx
c001a0e6:	88 d3                	mov    bl,dl
c001a0e8:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001a0ee:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001a0f4:	77 06                	ja     c001a0fc <RTC::completeRTCRefresh()+0x258>
c001a0f6:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001a0fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a101:	31 c9                	xor    ecx,ecx
c001a103:	31 d2                	xor    edx,edx
c001a105:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a109:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001a10d:	89 cd                	mov    ebp,ecx
c001a10f:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001a113:	c1 e7 10             	shl    edi,0x10
c001a116:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001a11c:	c1 e0 10             	shl    eax,0x10
c001a11f:	09 c5                	or     ebp,eax
c001a121:	89 e9                	mov    ecx,ebp
c001a123:	0f b7 c2             	movzx  eax,dx
c001a126:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001a12a:	09 f8                	or     eax,edi
c001a12c:	89 c2                	mov    edx,eax
c001a12e:	50                   	push   eax
c001a12f:	50                   	push   eax
c001a130:	88 d9                	mov    cl,bl
c001a132:	51                   	push   ecx
c001a133:	52                   	push   edx
c001a134:	e8 38 ed fe ff       	call   c0008e71 <KeDatetimeToSeconds(datetime_t)>
c001a139:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001a13d:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001a143:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001a149:	83 c4 4c             	add    esp,0x4c
c001a14c:	5b                   	pop    ebx
c001a14d:	5e                   	pop    esi
c001a14e:	5f                   	pop    edi
c001a14f:	5d                   	pop    ebp
c001a150:	c3                   	ret    
c001a151:	90                   	nop

c001a152 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001a152:	55                   	push   ebp
c001a153:	57                   	push   edi
c001a154:	56                   	push   esi
c001a155:	53                   	push   ebx
c001a156:	83 ec 34             	sub    esp,0x34
c001a159:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001a15d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a161:	6a 00                	push   0x0
c001a163:	6a 00                	push   0x0
c001a165:	e8 85 d8 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a16a:	5d                   	pop    ebp
c001a16b:	89 fb                	mov    ebx,edi
c001a16d:	58                   	pop    eax
c001a16e:	6a 00                	push   0x0
c001a170:	6a 02                	push   0x2
c001a172:	e8 78 d8 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a177:	89 f8                	mov    eax,edi
c001a179:	89 f9                	mov    ecx,edi
c001a17b:	0f b6 c4             	movzx  eax,ah
c001a17e:	31 d2                	xor    edx,edx
c001a180:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a184:	c1 e9 10             	shr    ecx,0x10
c001a187:	89 f0                	mov    eax,esi
c001a189:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a18d:	89 f0                	mov    eax,esi
c001a18f:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001a193:	0f b6 c4             	movzx  eax,ah
c001a196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a19a:	89 f0                	mov    eax,esi
c001a19c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a1a0:	c1 e8 10             	shr    eax,0x10
c001a1a3:	b9 64 00 00 00       	mov    ecx,0x64
c001a1a8:	f7 f1                	div    ecx
c001a1aa:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001a1b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a1b5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a1b9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a1bd:	e8 d9 d7 ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c001a1c2:	83 c4 10             	add    esp,0x10
c001a1c5:	a8 04                	test   al,0x4
c001a1c7:	89 c5                	mov    ebp,eax
c001a1c9:	75 6e                	jne    c001a239 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001a1cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1cf:	31 d2                	xor    edx,edx
c001a1d1:	0f b6 c1             	movzx  eax,cl
c001a1d4:	b9 0a 00 00 00       	mov    ecx,0xa
c001a1d9:	f7 f1                	div    ecx
c001a1db:	c1 e0 04             	shl    eax,0x4
c001a1de:	09 d0                	or     eax,edx
c001a1e0:	31 d2                	xor    edx,edx
c001a1e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1e6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001a1eb:	f7 f1                	div    ecx
c001a1ed:	c1 e0 04             	shl    eax,0x4
c001a1f0:	09 d0                	or     eax,edx
c001a1f2:	31 d2                	xor    edx,edx
c001a1f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1f8:	0f b6 c3             	movzx  eax,bl
c001a1fb:	f7 f1                	div    ecx
c001a1fd:	c1 e0 04             	shl    eax,0x4
c001a200:	09 d0                	or     eax,edx
c001a202:	31 d2                	xor    edx,edx
c001a204:	89 c3                	mov    ebx,eax
c001a206:	89 f0                	mov    eax,esi
c001a208:	0f b6 c0             	movzx  eax,al
c001a20b:	f7 f1                	div    ecx
c001a20d:	c1 e0 04             	shl    eax,0x4
c001a210:	09 d0                	or     eax,edx
c001a212:	31 d2                	xor    edx,edx
c001a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a218:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a21d:	f7 f1                	div    ecx
c001a21f:	c1 e0 04             	shl    eax,0x4
c001a222:	09 d0                	or     eax,edx
c001a224:	31 d2                	xor    edx,edx
c001a226:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a22a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a22e:	f7 f1                	div    ecx
c001a230:	c1 e0 04             	shl    eax,0x4
c001a233:	09 d0                	or     eax,edx
c001a235:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a239:	83 e5 02             	and    ebp,0x2
c001a23c:	75 1e                	jne    c001a25c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a23e:	0f b6 c3             	movzx  eax,bl
c001a241:	83 f8 0b             	cmp    eax,0xb
c001a244:	76 10                	jbe    c001a256 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001a246:	8d 53 f4             	lea    edx,[ebx-0xc]
c001a249:	84 d2                	test   dl,dl
c001a24b:	88 d3                	mov    bl,dl
c001a24d:	75 02                	jne    c001a251 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001a24f:	b3 0c                	mov    bl,0xc
c001a251:	83 cb 80             	or     ebx,0xffffff80
c001a254:	eb 06                	jmp    c001a25c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a256:	85 c0                	test   eax,eax
c001a258:	75 02                	jne    c001a25c <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a25a:	b3 0c                	mov    bl,0xc
c001a25c:	50                   	push   eax
c001a25d:	0f b6 db             	movzx  ebx,bl
c001a260:	50                   	push   eax
c001a261:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001a266:	52                   	push   edx
c001a267:	6a 00                	push   0x0
c001a269:	e8 81 d7 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a26e:	5a                   	pop    edx
c001a26f:	59                   	pop    ecx
c001a270:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a275:	50                   	push   eax
c001a276:	6a 02                	push   0x2
c001a278:	e8 72 d7 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a27d:	5e                   	pop    esi
c001a27e:	5f                   	pop    edi
c001a27f:	53                   	push   ebx
c001a280:	6a 04                	push   0x4
c001a282:	e8 68 d7 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a287:	5d                   	pop    ebp
c001a288:	58                   	pop    eax
c001a289:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a28e:	52                   	push   edx
c001a28f:	6a 07                	push   0x7
c001a291:	e8 59 d7 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a296:	58                   	pop    eax
c001a297:	5a                   	pop    edx
c001a298:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001a29d:	50                   	push   eax
c001a29e:	6a 08                	push   0x8
c001a2a0:	e8 4a d7 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a2a5:	59                   	pop    ecx
c001a2a6:	5b                   	pop    ebx
c001a2a7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001a2ac:	55                   	push   ebp
c001a2ad:	6a 09                	push   0x9
c001a2af:	e8 3b d7 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a2b4:	5e                   	pop    esi
c001a2b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a2b9:	e8 e6 fb ff ff       	call   c0019ea4 <RTC::completeRTCRefresh()>
c001a2be:	83 c4 3c             	add    esp,0x3c
c001a2c1:	b0 01                	mov    al,0x1
c001a2c3:	5b                   	pop    ebx
c001a2c4:	5e                   	pop    esi
c001a2c5:	5f                   	pop    edi
c001a2c6:	5d                   	pop    ebp
c001a2c7:	c3                   	ret    

c001a2c8 <rtcIRQHandler(regs*, void*)>:
c001a2c8:	53                   	push   ebx
c001a2c9:	83 ec 14             	sub    esp,0x14
c001a2cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2d0:	6a 0c                	push   0xc
c001a2d2:	e8 c4 d6 ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c001a2d7:	83 c4 10             	add    esp,0x10
c001a2da:	a8 80                	test   al,0x80
c001a2dc:	74 24                	je     c001a302 <rtcIRQHandler(regs*, void*)+0x3a>
c001a2de:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001a2e5:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001a2ec:	66 ff 05 14 db 02 c0 	inc    WORD PTR ds:0xc002db14
c001a2f3:	75 0d                	jne    c001a302 <rtcIRQHandler(regs*, void*)+0x3a>
c001a2f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a2f9:	83 c4 08             	add    esp,0x8
c001a2fc:	5b                   	pop    ebx
c001a2fd:	e9 a2 fb ff ff       	jmp    c0019ea4 <RTC::completeRTCRefresh()>
c001a302:	83 c4 08             	add    esp,0x8
c001a305:	5b                   	pop    ebx
c001a306:	c3                   	ret    
c001a307:	90                   	nop

c001a308 <RTC::RTC()>:
c001a308:	83 ec 1c             	sub    esp,0x1c
c001a30b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a30f:	83 ec 08             	sub    esp,0x8
c001a312:	68 bf 47 02 c0       	push   0xc00247bf
c001a317:	50                   	push   eax
c001a318:	e8 2f ea fe ff       	call   c0008d4c <Clock::Clock(char const*)>
c001a31d:	83 c4 10             	add    esp,0x10
c001a320:	ba dc 47 02 c0       	mov    edx,0xc00247dc
c001a325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a329:	89 10                	mov    DWORD PTR [eax],edx
c001a32b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a32f:	83 ec 0c             	sub    esp,0xc
c001a332:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a336:	6a 01                	push   0x1
c001a338:	68 c8 a2 01 c0       	push   0xc001a2c8
c001a33d:	6a 08                	push   0x8
c001a33f:	50                   	push   eax
c001a340:	e8 15 ef fe ff       	call   c000925a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a345:	83 c4 20             	add    esp,0x20
c001a348:	89 c2                	mov    edx,eax
c001a34a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a34e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001a354:	fa                   	cli    
c001a355:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001a35a:	83 c0 01             	add    eax,0x1
c001a35d:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c001a362:	83 ec 0c             	sub    esp,0xc
c001a365:	6a 0b                	push   0xb
c001a367:	e8 2f d6 ff ff       	call   c001799b <x86ReadCMOS(unsigned char)>
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a373:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a377:	83 c8 10             	or     eax,0x10
c001a37a:	0f b6 c0             	movzx  eax,al
c001a37d:	83 ec 08             	sub    esp,0x8
c001a380:	50                   	push   eax
c001a381:	6a 0b                	push   0xb
c001a383:	e8 67 d6 ff ff       	call   c00179ef <x86WriteCMOS(unsigned char, unsigned char)>
c001a388:	83 c4 10             	add    esp,0x10
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a392:	e8 0d fb ff ff       	call   c0019ea4 <RTC::completeRTCRefresh()>
c001a397:	83 c4 10             	add    esp,0x10
c001a39a:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c001a3a2:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001a3a7:	85 c0                	test   eax,eax
c001a3a9:	75 01                	jne    c001a3ac <RTC::RTC()+0xa4>
c001a3ab:	fb                   	sti    
c001a3ac:	90                   	nop
c001a3ad:	83 c4 1c             	add    esp,0x1c
c001a3b0:	c3                   	ret    
c001a3b1:	66 90                	xchg   ax,ax
c001a3b3:	90                   	nop

c001a3b4 <HalConsoleScroll(int, int)>:
c001a3b4:	83 ec 10             	sub    esp,0x10
c001a3b7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001a3bf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001a3c7:	90                   	nop
c001a3c8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a3cd:	0f 8f e1 00 00 00    	jg     c001a4b4 <HalConsoleScroll(int, int)+0x100>
c001a3d3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a3db:	90                   	nop
c001a3dc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001a3e4:	0f 8f be 00 00 00    	jg     c001a4a8 <HalConsoleScroll(int, int)+0xf4>
c001a3ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3ee:	89 d0                	mov    eax,edx
c001a3f0:	c1 e0 02             	shl    eax,0x2
c001a3f3:	01 d0                	add    eax,edx
c001a3f5:	c1 e0 05             	shl    eax,0x5
c001a3f8:	89 c2                	mov    edx,eax
c001a3fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3fe:	01 d0                	add    eax,edx
c001a400:	89 c2                	mov    edx,eax
c001a402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a406:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a409:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a40d:	89 d0                	mov    eax,edx
c001a40f:	c1 e0 02             	shl    eax,0x2
c001a412:	01 d0                	add    eax,edx
c001a414:	c1 e0 05             	shl    eax,0x5
c001a417:	89 c2                	mov    edx,eax
c001a419:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a41d:	01 d0                	add    eax,edx
c001a41f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001a425:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a429:	01 d0                	add    eax,edx
c001a42b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001a42d:	88 10                	mov    BYTE PTR [eax],dl
c001a42f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a434:	75 66                	jne    c001a49c <HalConsoleScroll(int, int)+0xe8>
c001a436:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a43a:	83 e0 01             	and    eax,0x1
c001a43d:	74 39                	je     c001a478 <HalConsoleScroll(int, int)+0xc4>
c001a43f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a443:	83 e0 0f             	and    eax,0xf
c001a446:	88 c2                	mov    dl,al
c001a448:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a44c:	c1 e0 04             	shl    eax,0x4
c001a44f:	09 d0                	or     eax,edx
c001a451:	88 c1                	mov    cl,al
c001a453:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a457:	89 d0                	mov    eax,edx
c001a459:	c1 e0 02             	shl    eax,0x2
c001a45c:	01 d0                	add    eax,edx
c001a45e:	c1 e0 05             	shl    eax,0x5
c001a461:	89 c2                	mov    edx,eax
c001a463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a467:	01 d0                	add    eax,edx
c001a469:	89 c2                	mov    edx,eax
c001a46b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a46f:	01 d0                	add    eax,edx
c001a471:	88 ca                	mov    dl,cl
c001a473:	88 10                	mov    BYTE PTR [eax],dl
c001a475:	eb 25                	jmp    c001a49c <HalConsoleScroll(int, int)+0xe8>
c001a477:	90                   	nop
c001a478:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a47c:	89 d0                	mov    eax,edx
c001a47e:	c1 e0 02             	shl    eax,0x2
c001a481:	01 d0                	add    eax,edx
c001a483:	c1 e0 05             	shl    eax,0x5
c001a486:	89 c2                	mov    edx,eax
c001a488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a48c:	01 d0                	add    eax,edx
c001a48e:	89 c2                	mov    edx,eax
c001a490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a494:	01 d0                	add    eax,edx
c001a496:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001a499:	8d 76 00             	lea    esi,[esi+0x0]
c001a49c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001a4a1:	e9 36 ff ff ff       	jmp    c001a3dc <HalConsoleScroll(int, int)+0x28>
c001a4a6:	66 90                	xchg   ax,ax
c001a4a8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a4ad:	e9 16 ff ff ff       	jmp    c001a3c8 <HalConsoleScroll(int, int)+0x14>
c001a4b2:	66 90                	xchg   ax,ax
c001a4b4:	90                   	nop
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	c3                   	ret    
c001a4b9:	8d 76 00             	lea    esi,[esi+0x0]

c001a4bc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001a4bc:	83 ec 14             	sub    esp,0x14
c001a4bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4c3:	88 04 24             	mov    BYTE PTR [esp],al
c001a4c6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a4c9:	0f b6 c0             	movzx  eax,al
c001a4cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a4d0:	89 d1                	mov    ecx,edx
c001a4d2:	83 e1 0f             	and    ecx,0xf
c001a4d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a4d9:	c1 e2 04             	shl    edx,0x4
c001a4dc:	0f b6 d2             	movzx  edx,dl
c001a4df:	09 ca                	or     edx,ecx
c001a4e1:	c1 e2 08             	shl    edx,0x8
c001a4e4:	09 d0                	or     eax,edx
c001a4e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001a4eb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001a4f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a4f7:	89 d0                	mov    eax,edx
c001a4f9:	c1 e0 02             	shl    eax,0x2
c001a4fc:	01 d0                	add    eax,edx
c001a4fe:	c1 e0 04             	shl    eax,0x4
c001a501:	89 c2                	mov    edx,eax
c001a503:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a507:	01 d0                	add    eax,edx
c001a509:	d1 e0                	shl    eax,1
c001a50b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001a50f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a513:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001a518:	66 89 10             	mov    WORD PTR [eax],dx
c001a51b:	90                   	nop
c001a51c:	83 c4 14             	add    esp,0x14
c001a51f:	c3                   	ret    

c001a520 <HalConsoleCursorUpdate(int, int)>:
c001a520:	83 ec 20             	sub    esp,0x20
c001a523:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a527:	89 c2                	mov    edx,eax
c001a529:	c1 e2 02             	shl    edx,0x2
c001a52c:	01 d0                	add    eax,edx
c001a52e:	c1 e0 04             	shl    eax,0x4
c001a531:	89 c2                	mov    edx,eax
c001a533:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a537:	01 d0                	add    eax,edx
c001a539:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001a53e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001a545:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001a54a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a54e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a552:	ee                   	out    dx,al
c001a553:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a558:	0f b6 c0             	movzx  eax,al
c001a55b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001a562:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a566:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a56a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a56e:	ee                   	out    dx,al
c001a56f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001a576:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001a57b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a57f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a583:	ee                   	out    dx,al
c001a584:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001a589:	c1 e8 08             	shr    eax,0x8
c001a58c:	0f b6 c0             	movzx  eax,al
c001a58f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001a596:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a59a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a59e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a5a2:	ee                   	out    dx,al
c001a5a3:	90                   	nop
c001a5a4:	83 c4 20             	add    esp,0x20
c001a5a7:	c3                   	ret    

c001a5a8 <FAT::getName()>:
c001a5a8:	b8 10 48 02 c0       	mov    eax,0xc0024810
c001a5ad:	c3                   	ret    
c001a5ae:	66 90                	xchg   ax,ax

c001a5b0 <FAT::tell(void*, unsigned long long*)>:
c001a5b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a5b5:	75 09                	jne    c001a5c0 <FAT::tell(void*, unsigned long long*)+0x10>
c001a5b7:	b8 04 00 00 00       	mov    eax,0x4
c001a5bc:	c3                   	ret    
c001a5bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a5c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a5c5:	75 09                	jne    c001a5d0 <FAT::tell(void*, unsigned long long*)+0x20>
c001a5c7:	b8 04 00 00 00       	mov    eax,0x4
c001a5cc:	c3                   	ret    
c001a5cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a5d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5d7:	ba 00 00 00 00       	mov    edx,0x0
c001a5dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a5e0:	89 01                	mov    DWORD PTR [ecx],eax
c001a5e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a5e5:	b8 00 00 00 00       	mov    eax,0x0
c001a5ea:	c3                   	ret    
c001a5eb:	90                   	nop

c001a5ec <FAT::stat(void*, unsigned long long*)>:
c001a5ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a5f1:	75 09                	jne    c001a5fc <FAT::stat(void*, unsigned long long*)+0x10>
c001a5f3:	b8 04 00 00 00       	mov    eax,0x4
c001a5f8:	c3                   	ret    
c001a5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a601:	75 09                	jne    c001a60c <FAT::stat(void*, unsigned long long*)+0x20>
c001a603:	b8 04 00 00 00       	mov    eax,0x4
c001a608:	c3                   	ret    
c001a609:	8d 76 00             	lea    esi,[esi+0x0]
c001a60c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a610:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a613:	ba 00 00 00 00       	mov    edx,0x0
c001a618:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a61c:	89 01                	mov    DWORD PTR [ecx],eax
c001a61e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a621:	b8 00 00 00 00       	mov    eax,0x0
c001a626:	c3                   	ret    
c001a627:	90                   	nop

c001a628 <FAT::~FAT()>:
c001a628:	83 ec 0c             	sub    esp,0xc
c001a62b:	ba 5c 48 02 c0       	mov    edx,0xc002485c
c001a630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a634:	89 10                	mov    DWORD PTR [eax],edx
c001a636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a63a:	83 ec 0c             	sub    esp,0xc
c001a63d:	50                   	push   eax
c001a63e:	e8 37 d7 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001a643:	83 c4 10             	add    esp,0x10
c001a646:	90                   	nop
c001a647:	83 c4 0c             	add    esp,0xc
c001a64a:	c3                   	ret    
c001a64b:	90                   	nop

c001a64c <FAT::~FAT()>:
c001a64c:	83 ec 0c             	sub    esp,0xc
c001a64f:	83 ec 0c             	sub    esp,0xc
c001a652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a656:	e8 cd ff ff ff       	call   c001a628 <FAT::~FAT()>
c001a65b:	83 c4 10             	add    esp,0x10
c001a65e:	83 ec 08             	sub    esp,0x8
c001a661:	6a 08                	push   0x8
c001a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a667:	e8 a3 24 ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c001a66c:	83 c4 10             	add    esp,0x10
c001a66f:	83 c4 0c             	add    esp,0xc
c001a672:	c3                   	ret    
c001a673:	90                   	nop

c001a674 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a674:	83 ec 1c             	sub    esp,0x1c
c001a677:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a67e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a683:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a687:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a68e:	83 f8 ff             	cmp    eax,0xffffffff
c001a691:	75 35                	jne    c001a6c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a693:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a697:	88 c2                	mov    dl,al
c001a699:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a69e:	01 d0                	add    eax,edx
c001a6a0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a6a4:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001a6aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6ae:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c001a6b5:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a6ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a6be:	89 14 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],edx
c001a6c5:	eb 19                	jmp    c001a6e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a6c7:	90                   	nop
c001a6c8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a6cc:	88 c2                	mov    dl,al
c001a6ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6d2:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a6d9:	01 d0                	add    eax,edx
c001a6db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a6df:	90                   	nop
c001a6e0:	83 ec 04             	sub    esp,0x4
c001a6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6eb:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a6ef:	50                   	push   eax
c001a6f0:	e8 df aa fe ff       	call   c00051d4 <f_getlabel>
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a701:	75 09                	jne    c001a70c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a703:	b8 00 00 00 00       	mov    eax,0x0
c001a708:	eb 0a                	jmp    c001a714 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a70a:	66 90                	xchg   ax,ax
c001a70c:	b8 01 00 00 00       	mov    eax,0x1
c001a711:	8d 76 00             	lea    esi,[esi+0x0]
c001a714:	83 c4 1c             	add    esp,0x1c
c001a717:	c3                   	ret    

c001a718 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a718:	53                   	push   ebx
c001a719:	83 ec 58             	sub    esp,0x58
c001a71c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a724:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a728:	b9 00 00 00 00       	mov    ecx,0x0
c001a72d:	b8 3c 00 00 00       	mov    eax,0x3c
c001a732:	83 e0 f8             	and    eax,0xfffffff8
c001a735:	89 c3                	mov    ebx,eax
c001a737:	b8 00 00 00 00       	mov    eax,0x0
c001a73c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001a740:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001a744:	83 c0 08             	add    eax,0x8
c001a747:	39 d8                	cmp    eax,ebx
c001a749:	72 f1                	jb     c001a73c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001a74b:	01 c2                	add    edx,eax
c001a74d:	89 0a                	mov    DWORD PTR [edx],ecx
c001a74f:	83 c2 04             	add    edx,0x4
c001a752:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a756:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a75d:	83 f8 ff             	cmp    eax,0xffffffff
c001a760:	75 36                	jne    c001a798 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001a762:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a766:	88 c2                	mov    dl,al
c001a768:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a76d:	01 d0                	add    eax,edx
c001a76f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a773:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001a779:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a77d:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c001a784:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a789:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a78d:	89 14 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],edx
c001a794:	eb 1a                	jmp    c001a7b0 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001a796:	66 90                	xchg   ax,ax
c001a798:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a79c:	88 c2                	mov    dl,al
c001a79e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a7a2:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a7a9:	01 d0                	add    eax,edx
c001a7ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7af:	90                   	nop
c001a7b0:	83 ec 08             	sub    esp,0x8
c001a7b3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a7b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7bb:	50                   	push   eax
c001a7bc:	e8 af 60 fe ff       	call   c0000870 <strcat>
c001a7c1:	83 c4 10             	add    esp,0x10
c001a7c4:	83 ec 0c             	sub    esp,0xc
c001a7c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7cb:	50                   	push   eax
c001a7cc:	e8 57 ab fe ff       	call   c0005328 <f_setlabel>
c001a7d1:	83 c4 10             	add    esp,0x10
c001a7d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a7d8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a7dd:	75 09                	jne    c001a7e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001a7df:	b8 00 00 00 00       	mov    eax,0x0
c001a7e4:	eb 0a                	jmp    c001a7f0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001a7e6:	66 90                	xchg   ax,ax
c001a7e8:	b8 01 00 00 00       	mov    eax,0x1
c001a7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a7f0:	83 c4 58             	add    esp,0x58
c001a7f3:	5b                   	pop    ebx
c001a7f4:	c3                   	ret    
c001a7f5:	90                   	nop
c001a7f6:	66 90                	xchg   ax,ax

c001a7f8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a7f8:	83 ec 2c             	sub    esp,0x2c
c001a7fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a803:	83 ec 08             	sub    esp,0x8
c001a806:	68 34 48 02 c0       	push   0xc0024834
c001a80b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a80f:	e8 6c 5f fe ff       	call   c0000780 <strcmp>
c001a814:	83 c4 10             	add    esp,0x10
c001a817:	85 c0                	test   eax,eax
c001a819:	0f 94 c0             	sete   al
c001a81c:	0f b6 c0             	movzx  eax,al
c001a81f:	85 c0                	test   eax,eax
c001a821:	74 0d                	je     c001a830 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a823:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a82b:	e9 c0 00 00 00       	jmp    c001a8f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a830:	83 ec 08             	sub    esp,0x8
c001a833:	68 26 48 02 c0       	push   0xc0024826
c001a838:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a83c:	e8 3f 5f fe ff       	call   c0000780 <strcmp>
c001a841:	83 c4 10             	add    esp,0x10
c001a844:	85 c0                	test   eax,eax
c001a846:	0f 94 c0             	sete   al
c001a849:	0f b6 c0             	movzx  eax,al
c001a84c:	85 c0                	test   eax,eax
c001a84e:	74 10                	je     c001a860 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001a850:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a858:	e9 93 00 00 00       	jmp    c001a8f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a85d:	8d 76 00             	lea    esi,[esi+0x0]
c001a860:	83 ec 08             	sub    esp,0x8
c001a863:	68 2c 48 02 c0       	push   0xc002482c
c001a868:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a86c:	e8 0f 5f fe ff       	call   c0000780 <strcmp>
c001a871:	83 c4 10             	add    esp,0x10
c001a874:	85 c0                	test   eax,eax
c001a876:	0f 94 c0             	sete   al
c001a879:	0f b6 c0             	movzx  eax,al
c001a87c:	85 c0                	test   eax,eax
c001a87e:	74 0c                	je     c001a88c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001a880:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a888:	eb 66                	jmp    c001a8f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a88a:	66 90                	xchg   ax,ax
c001a88c:	83 ec 08             	sub    esp,0x8
c001a88f:	68 7c 1a 02 c0       	push   0xc0021a7c
c001a894:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a898:	e8 e3 5e fe ff       	call   c0000780 <strcmp>
c001a89d:	83 c4 10             	add    esp,0x10
c001a8a0:	85 c0                	test   eax,eax
c001a8a2:	0f 94 c0             	sete   al
c001a8a5:	0f b6 c0             	movzx  eax,al
c001a8a8:	85 c0                	test   eax,eax
c001a8aa:	74 0c                	je     c001a8b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001a8ac:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a8b4:	eb 3a                	jmp    c001a8f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a8b6:	66 90                	xchg   ax,ax
c001a8b8:	83 ec 08             	sub    esp,0x8
c001a8bb:	68 32 48 02 c0       	push   0xc0024832
c001a8c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a8c4:	e8 b7 5e fe ff       	call   c0000780 <strcmp>
c001a8c9:	83 c4 10             	add    esp,0x10
c001a8cc:	85 c0                	test   eax,eax
c001a8ce:	0f 94 c0             	sete   al
c001a8d1:	0f b6 c0             	movzx  eax,al
c001a8d4:	85 c0                	test   eax,eax
c001a8d6:	74 0c                	je     c001a8e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001a8d8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a8e0:	eb 0e                	jmp    c001a8f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a8e2:	66 90                	xchg   ax,ax
c001a8e4:	b8 08 00 00 00       	mov    eax,0x8
c001a8e9:	e9 ea 00 00 00       	jmp    c001a9d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a8ee:	66 90                	xchg   ax,ax
c001a8f0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a8f7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a8fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a900:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a907:	83 f8 ff             	cmp    eax,0xffffffff
c001a90a:	75 34                	jne    c001a940 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001a90c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a910:	88 c2                	mov    dl,al
c001a912:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a917:	01 d0                	add    eax,edx
c001a919:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a91d:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001a923:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a927:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c001a92e:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a933:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a937:	89 14 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],edx
c001a93e:	eb 18                	jmp    c001a958 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001a940:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a944:	88 c2                	mov    dl,al
c001a946:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a94a:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a951:	01 d0                	add    eax,edx
c001a953:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a957:	90                   	nop
c001a958:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a95c:	88 04 24             	mov    BYTE PTR [esp],al
c001a95f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a967:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a96f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a974:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a97c:	83 ec 0c             	sub    esp,0xc
c001a97f:	68 00 20 00 00       	push   0x2000
c001a984:	e8 0f 4a ff ff       	call   c000f398 <malloc>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a990:	68 00 20 00 00       	push   0x2000
c001a995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a999:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a99d:	50                   	push   eax
c001a99e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a9a2:	50                   	push   eax
c001a9a3:	e8 7d ac fe ff       	call   c0005625 <f_mkfs>
c001a9a8:	83 c4 10             	add    esp,0x10
c001a9ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9b4:	75 0a                	jne    c001a9c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a9b6:	b8 00 00 00 00       	mov    eax,0x0
c001a9bb:	eb 1b                	jmp    c001a9d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a9c0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a9c5:	75 09                	jne    c001a9d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001a9c7:	b8 09 00 00 00       	mov    eax,0x9
c001a9cc:	eb 0a                	jmp    c001a9d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a9ce:	66 90                	xchg   ax,ax
c001a9d0:	b8 01 00 00 00       	mov    eax,0x1
c001a9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9d8:	83 c4 2c             	add    esp,0x2c
c001a9db:	c3                   	ret    

c001a9dc <FAT::tryMount(LogicalDisk*, int)>:
c001a9dc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001a9e2:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a9e7:	83 f8 14             	cmp    eax,0x14
c001a9ea:	75 18                	jne    c001aa04 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a9ec:	83 ec 0c             	sub    esp,0xc
c001a9ef:	68 38 48 02 c0       	push   0xc0024838
c001a9f4:	e8 e5 4c ff ff       	call   c000f6de <KePanic(char const*)>
c001a9f9:	83 c4 10             	add    esp,0x10
c001a9fc:	b0 00                	mov    al,0x0
c001a9fe:	e9 ed 01 00 00       	jmp    c001abf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001aa03:	90                   	nop
c001aa04:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa0b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001aa11:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001aa17:	3d 00 02 00 00       	cmp    eax,0x200
c001aa1c:	74 0a                	je     c001aa28 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001aa1e:	b0 00                	mov    al,0x0
c001aa20:	e9 cb 01 00 00       	jmp    c001abf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001aa25:	8d 76 00             	lea    esi,[esi+0x0]
c001aa28:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001aa30:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001aa37:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001aa3e:	83 f8 ff             	cmp    eax,0xffffffff
c001aa41:	74 09                	je     c001aa4c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001aa43:	b0 01                	mov    al,0x1
c001aa45:	e9 a6 01 00 00       	jmp    c001abf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001aa4a:	66 90                	xchg   ax,ax
c001aa4c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001aa56:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001aa5e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001aa65:	88 c2                	mov    dl,al
c001aa67:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001aa6c:	01 d0                	add    eax,edx
c001aa6e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001aa75:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001aa7b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001aa82:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c001aa89:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001aa8e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001aa95:	89 14 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],edx
c001aa9c:	83 ec 0c             	sub    esp,0xc
c001aa9f:	68 34 02 00 00       	push   0x234
c001aaa4:	e8 ef 48 ff ff       	call   c000f398 <malloc>
c001aaa9:	83 c4 10             	add    esp,0x10
c001aaac:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001aab3:	83 ec 04             	sub    esp,0x4
c001aab6:	6a 00                	push   0x0
c001aab8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001aabf:	50                   	push   eax
c001aac0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001aac7:	e8 53 93 fe ff       	call   c0003e1f <f_mount>
c001aacc:	83 c4 10             	add    esp,0x10
c001aacf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001aad6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001aade:	74 1c                	je     c001aafc <FAT::tryMount(LogicalDisk*, int)+0x120>
c001aae0:	83 ec 0c             	sub    esp,0xc
c001aae3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001aaea:	e8 c9 48 ff ff       	call   c000f3b8 <rfree>
c001aaef:	83 c4 10             	add    esp,0x10
c001aaf2:	b0 00                	mov    al,0x0
c001aaf4:	e9 f7 00 00 00       	jmp    c001abf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001aaf9:	8d 76 00             	lea    esi,[esi+0x0]
c001aafc:	83 ec 04             	sub    esp,0x4
c001aaff:	68 00 01 00 00       	push   0x100
c001ab04:	6a 00                	push   0x0
c001ab06:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ab0d:	50                   	push   eax
c001ab0e:	e8 dd 59 fe ff       	call   c00004f0 <memset>
c001ab13:	83 c4 10             	add    esp,0x10
c001ab16:	83 ec 08             	sub    esp,0x8
c001ab19:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ab20:	50                   	push   eax
c001ab21:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ab28:	50                   	push   eax
c001ab29:	e8 42 5d fe ff       	call   c0000870 <strcat>
c001ab2e:	83 c4 10             	add    esp,0x10
c001ab31:	83 ec 08             	sub    esp,0x8
c001ab34:	68 46 48 02 c0       	push   0xc0024846
c001ab39:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ab40:	50                   	push   eax
c001ab41:	e8 2a 5d fe ff       	call   c0000870 <strcat>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	83 ec 04             	sub    esp,0x4
c001ab4c:	6a 01                	push   0x1
c001ab4e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001ab55:	50                   	push   eax
c001ab56:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab5a:	50                   	push   eax
c001ab5b:	e8 21 93 fe ff       	call   c0003e81 <f_open>
c001ab60:	83 c4 10             	add    esp,0x10
c001ab63:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001ab6a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001ab71:	85 c0                	test   eax,eax
c001ab73:	74 0b                	je     c001ab80 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001ab75:	78 31                	js     c001aba8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ab77:	83 e8 04             	sub    eax,0x4
c001ab7a:	83 f8 01             	cmp    eax,0x1
c001ab7d:	77 29                	ja     c001aba8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ab7f:	90                   	nop
c001ab80:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001ab88:	83 ec 0c             	sub    esp,0xc
c001ab8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab8f:	50                   	push   eax
c001ab90:	e8 9c 9a fe ff       	call   c0004631 <f_close>
c001ab95:	83 c4 10             	add    esp,0x10
c001ab98:	90                   	nop
c001ab99:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001aba1:	85 c0                	test   eax,eax
c001aba3:	74 43                	je     c001abe8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001aba5:	eb 31                	jmp    c001abd8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aba7:	90                   	nop
c001aba8:	83 ec 0c             	sub    esp,0xc
c001abab:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001abb2:	e8 01 48 ff ff       	call   c000f3b8 <rfree>
c001abb7:	83 c4 10             	add    esp,0x10
c001abba:	83 ec 04             	sub    esp,0x4
c001abbd:	6a 00                	push   0x0
c001abbf:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001abc6:	50                   	push   eax
c001abc7:	6a 00                	push   0x0
c001abc9:	e8 51 92 fe ff       	call   c0003e1f <f_mount>
c001abce:	83 c4 10             	add    esp,0x10
c001abd1:	b0 00                	mov    al,0x0
c001abd3:	eb 1b                	jmp    c001abf0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001abd5:	8d 76 00             	lea    esi,[esi+0x0]
c001abd8:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001abdd:	83 c0 01             	add    eax,0x1
c001abe0:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c001abe5:	8d 76 00             	lea    esi,[esi+0x0]
c001abe8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001abef:	90                   	nop
c001abf0:	81 c4 4c 03 00 00    	add    esp,0x34c
c001abf6:	c3                   	ret    
c001abf7:	90                   	nop

c001abf8 <FAT::allocateSwapfile(char const*, int)>:
c001abf8:	55                   	push   ebp
c001abf9:	57                   	push   edi
c001abfa:	56                   	push   esi
c001abfb:	53                   	push   ebx
c001abfc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ac02:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ac0d:	83 ec 0c             	sub    esp,0xc
c001ac10:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ac17:	e8 7c 47 ff ff       	call   c000f398 <malloc>
c001ac1c:	83 c4 10             	add    esp,0x10
c001ac1f:	89 c7                	mov    edi,eax
c001ac21:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001ac26:	83 ec 04             	sub    esp,0x4
c001ac29:	50                   	push   eax
c001ac2a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ac31:	57                   	push   edi
c001ac32:	e8 f5 d4 fe ff       	call   c000812c <File::File(char const*, Process*)>
c001ac37:	83 c4 10             	add    esp,0x10
c001ac3a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ac41:	83 ec 04             	sub    esp,0x4
c001ac44:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ac48:	50                   	push   eax
c001ac49:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac4d:	50                   	push   eax
c001ac4e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac55:	e8 f2 d7 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001ac5a:	83 c4 10             	add    esp,0x10
c001ac5d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ac64:	c1 e0 14             	shl    eax,0x14
c001ac67:	89 c7                	mov    edi,eax
c001ac69:	89 c5                	mov    ebp,eax
c001ac6b:	c1 fd 1f             	sar    ebp,0x1f
c001ac6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac76:	89 f9                	mov    ecx,edi
c001ac78:	31 c1                	xor    ecx,eax
c001ac7a:	89 cb                	mov    ebx,ecx
c001ac7c:	89 e9                	mov    ecx,ebp
c001ac7e:	31 d1                	xor    ecx,edx
c001ac80:	89 ce                	mov    esi,ecx
c001ac82:	89 f0                	mov    eax,esi
c001ac84:	09 d8                	or     eax,ebx
c001ac86:	0f 84 9c 00 00 00    	je     c001ad28 <FAT::allocateSwapfile(char const*, int)+0x130>
c001ac8c:	83 ec 0c             	sub    esp,0xc
c001ac8f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac96:	e8 7d d6 fe ff       	call   c0008318 <File::unlink()>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	83 ec 08             	sub    esp,0x8
c001aca1:	6a 12                	push   0x12
c001aca3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001acaa:	e8 9b d4 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001acaf:	83 c4 10             	add    esp,0x10
c001acb2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acb9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001acbf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001acc6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001accd:	c1 e0 14             	shl    eax,0x14
c001acd0:	83 ec 04             	sub    esp,0x4
c001acd3:	6a 01                	push   0x1
c001acd5:	50                   	push   eax
c001acd6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001acdd:	e8 d6 a7 fe ff       	call   c00054b8 <f_expand>
c001ace2:	83 c4 10             	add    esp,0x10
c001ace5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acec:	8b 00                	mov    eax,DWORD PTR [eax]
c001acee:	83 c0 10             	add    eax,0x10
c001acf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001acf3:	83 ec 0c             	sub    esp,0xc
c001acf6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acfa:	52                   	push   edx
c001acfb:	8d 54 24 30          	lea    edx,[esp+0x30]
c001acff:	52                   	push   edx
c001ad00:	6a 00                	push   0x0
c001ad02:	68 00 04 00 00       	push   0x400
c001ad07:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ad0e:	ff d0                	call   eax
c001ad10:	83 c4 20             	add    esp,0x20
c001ad13:	83 ec 0c             	sub    esp,0xc
c001ad16:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ad1d:	e8 86 d4 fe ff       	call   c00081a8 <File::close()>
c001ad22:	83 c4 10             	add    esp,0x10
c001ad25:	8d 76 00             	lea    esi,[esi+0x0]
c001ad28:	83 ec 08             	sub    esp,0x8
c001ad2b:	6a 01                	push   0x1
c001ad2d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ad34:	e8 11 d4 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001ad39:	83 c4 10             	add    esp,0x10
c001ad3c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ad43:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad45:	83 c0 0c             	add    eax,0xc
c001ad48:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad4a:	83 ec 0c             	sub    esp,0xc
c001ad4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad51:	52                   	push   edx
c001ad52:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ad56:	52                   	push   edx
c001ad57:	6a 00                	push   0x0
c001ad59:	6a 04                	push   0x4
c001ad5b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ad62:	ff d0                	call   eax
c001ad64:	83 c4 20             	add    esp,0x20
c001ad67:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ad6e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ad74:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ad7b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ad82:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ad85:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ad8c:	83 ec 0c             	sub    esp,0xc
c001ad8f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ad96:	e8 0d d4 fe ff       	call   c00081a8 <File::close()>
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ada5:	ba 00 00 00 00       	mov    edx,0x0
c001adaa:	81 c4 3c 04 00 00    	add    esp,0x43c
c001adb0:	5b                   	pop    ebx
c001adb1:	5e                   	pop    esi
c001adb2:	5f                   	pop    edi
c001adb3:	5d                   	pop    ebp
c001adb4:	c3                   	ret    
c001adb5:	90                   	nop
c001adb6:	66 90                	xchg   ax,ax

c001adb8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001adb8:	57                   	push   edi
c001adb9:	56                   	push   esi
c001adba:	53                   	push   ebx
c001adbb:	81 ec 50 02 00 00    	sub    esp,0x250
c001adc1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001adc9:	74 0d                	je     c001add8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001adcb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001add3:	75 0f                	jne    c001ade4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001add5:	8d 76 00             	lea    esi,[esi+0x0]
c001add8:	b8 04 00 00 00       	mov    eax,0x4
c001addd:	e9 3a 01 00 00       	jmp    c001af1c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ade2:	66 90                	xchg   ax,ax
c001ade4:	83 ec 08             	sub    esp,0x8
c001ade7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001adee:	50                   	push   eax
c001adef:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001adf6:	e8 02 9b fe ff       	call   c00048fd <f_readdir>
c001adfb:	83 c4 10             	add    esp,0x10
c001adfe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ae05:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001ae0c:	83 ec 0c             	sub    esp,0xc
c001ae0f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ae16:	83 c0 16             	add    eax,0x16
c001ae19:	50                   	push   eax
c001ae1a:	e8 61 57 fe ff       	call   c0000580 <strlen>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	ba 00 00 00 00       	mov    edx,0x0
c001ae27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae2b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ae2f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ae36:	0f b6 c0             	movzx  eax,al
c001ae39:	83 e0 10             	and    eax,0x10
c001ae3c:	74 0a                	je     c001ae48 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ae3e:	b8 02 00 00 00       	mov    eax,0x2
c001ae43:	eb 0b                	jmp    c001ae50 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ae45:	8d 76 00             	lea    esi,[esi+0x0]
c001ae48:	b8 01 00 00 00       	mov    eax,0x1
c001ae4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae54:	83 ec 08             	sub    esp,0x8
c001ae57:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ae5e:	83 c0 16             	add    eax,0x16
c001ae61:	50                   	push   eax
c001ae62:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae66:	83 c0 10             	add    eax,0x10
c001ae69:	50                   	push   eax
c001ae6a:	e8 e1 57 fe ff       	call   c0000650 <strcpy>
c001ae6f:	83 c4 10             	add    esp,0x10
c001ae72:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ae79:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ae80:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae84:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ae8b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ae92:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ae99:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001aea0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001aea7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001aeae:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001aeb5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001aebc:	89 c6                	mov    esi,eax
c001aebe:	89 d7                	mov    edi,edx
c001aec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aec2:	89 c8                	mov    eax,ecx
c001aec4:	89 fa                	mov    edx,edi
c001aec6:	89 f3                	mov    ebx,esi
c001aec8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001aecf:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001aed6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001aedd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001aee4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001aeea:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001aef1:	0f be c0             	movsx  eax,al
c001aef4:	85 c0                	test   eax,eax
c001aef6:	75 08                	jne    c001af00 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001aef8:	b8 07 00 00 00       	mov    eax,0x7
c001aefd:	eb 1d                	jmp    c001af1c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001aeff:	90                   	nop
c001af00:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001af07:	85 c0                	test   eax,eax
c001af09:	75 09                	jne    c001af14 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001af0b:	b8 00 00 00 00       	mov    eax,0x0
c001af10:	eb 0a                	jmp    c001af1c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001af12:	66 90                	xchg   ax,ax
c001af14:	b8 01 00 00 00       	mov    eax,0x1
c001af19:	8d 76 00             	lea    esi,[esi+0x0]
c001af1c:	81 c4 50 02 00 00    	add    esp,0x250
c001af22:	5b                   	pop    ebx
c001af23:	5e                   	pop    esi
c001af24:	5f                   	pop    edi
c001af25:	c3                   	ret    
c001af26:	66 90                	xchg   ax,ax

c001af28 <FAT::read(void*, unsigned long, void*, int*)>:
c001af28:	83 ec 1c             	sub    esp,0x1c
c001af2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af30:	74 0a                	je     c001af3c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001af32:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001af37:	75 0b                	jne    c001af44 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001af39:	8d 76 00             	lea    esi,[esi+0x0]
c001af3c:	b8 04 00 00 00       	mov    eax,0x4
c001af41:	eb 41                	jmp    c001af84 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001af43:	90                   	nop
c001af44:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af48:	50                   	push   eax
c001af49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af55:	e8 ea 91 fe ff       	call   c0004144 <f_read>
c001af5a:	83 c4 10             	add    esp,0x10
c001af5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af65:	89 c2                	mov    edx,eax
c001af67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af6b:	89 10                	mov    DWORD PTR [eax],edx
c001af6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af71:	85 c0                	test   eax,eax
c001af73:	75 07                	jne    c001af7c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001af75:	b8 00 00 00 00       	mov    eax,0x0
c001af7a:	eb 08                	jmp    c001af84 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001af7c:	b8 01 00 00 00       	mov    eax,0x1
c001af81:	8d 76 00             	lea    esi,[esi+0x0]
c001af84:	83 c4 1c             	add    esp,0x1c
c001af87:	c3                   	ret    

c001af88 <FAT::write(void*, unsigned long, void*, int*)>:
c001af88:	83 ec 1c             	sub    esp,0x1c
c001af8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af90:	74 0a                	je     c001af9c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001af92:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001af97:	75 0b                	jne    c001afa4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001af99:	8d 76 00             	lea    esi,[esi+0x0]
c001af9c:	b8 04 00 00 00       	mov    eax,0x4
c001afa1:	eb 41                	jmp    c001afe4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001afa3:	90                   	nop
c001afa4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001afa8:	50                   	push   eax
c001afa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001afb1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afb5:	e8 6b 93 fe ff       	call   c0004325 <f_write>
c001afba:	83 c4 10             	add    esp,0x10
c001afbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afc5:	89 c2                	mov    edx,eax
c001afc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afcb:	89 10                	mov    DWORD PTR [eax],edx
c001afcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afd1:	85 c0                	test   eax,eax
c001afd3:	75 07                	jne    c001afdc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001afd5:	b8 00 00 00 00       	mov    eax,0x0
c001afda:	eb 08                	jmp    c001afe4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001afdc:	b8 01 00 00 00       	mov    eax,0x1
c001afe1:	8d 76 00             	lea    esi,[esi+0x0]
c001afe4:	83 c4 1c             	add    esp,0x1c
c001afe7:	c3                   	ret    

c001afe8 <FAT::close(void*)>:
c001afe8:	83 ec 1c             	sub    esp,0x1c
c001afeb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aff0:	75 0a                	jne    c001affc <FAT::close(void*)+0x14>
c001aff2:	b8 04 00 00 00       	mov    eax,0x4
c001aff7:	eb 3f                	jmp    c001b038 <FAT::close(void*)+0x50>
c001aff9:	8d 76 00             	lea    esi,[esi+0x0]
c001affc:	83 ec 0c             	sub    esp,0xc
c001afff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b003:	e8 29 96 fe ff       	call   c0004631 <f_close>
c001b008:	83 c4 10             	add    esp,0x10
c001b00b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b00f:	83 ec 0c             	sub    esp,0xc
c001b012:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b016:	e8 8d 43 ff ff       	call   c000f3a8 <free>
c001b01b:	83 c4 10             	add    esp,0x10
c001b01e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b022:	85 c0                	test   eax,eax
c001b024:	75 0a                	jne    c001b030 <FAT::close(void*)+0x48>
c001b026:	b8 00 00 00 00       	mov    eax,0x0
c001b02b:	eb 0b                	jmp    c001b038 <FAT::close(void*)+0x50>
c001b02d:	8d 76 00             	lea    esi,[esi+0x0]
c001b030:	b8 01 00 00 00       	mov    eax,0x1
c001b035:	8d 76 00             	lea    esi,[esi+0x0]
c001b038:	83 c4 1c             	add    esp,0x1c
c001b03b:	c3                   	ret    

c001b03c <FAT::closeDir(void*)>:
c001b03c:	83 ec 1c             	sub    esp,0x1c
c001b03f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b044:	75 0a                	jne    c001b050 <FAT::closeDir(void*)+0x14>
c001b046:	b8 04 00 00 00       	mov    eax,0x4
c001b04b:	eb 3f                	jmp    c001b08c <FAT::closeDir(void*)+0x50>
c001b04d:	8d 76 00             	lea    esi,[esi+0x0]
c001b050:	83 ec 0c             	sub    esp,0xc
c001b053:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b057:	e8 7f 98 fe ff       	call   c00048db <f_closedir>
c001b05c:	83 c4 10             	add    esp,0x10
c001b05f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b063:	83 ec 0c             	sub    esp,0xc
c001b066:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b06a:	e8 39 43 ff ff       	call   c000f3a8 <free>
c001b06f:	83 c4 10             	add    esp,0x10
c001b072:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b076:	85 c0                	test   eax,eax
c001b078:	75 0a                	jne    c001b084 <FAT::closeDir(void*)+0x48>
c001b07a:	b8 00 00 00 00       	mov    eax,0x0
c001b07f:	eb 0b                	jmp    c001b08c <FAT::closeDir(void*)+0x50>
c001b081:	8d 76 00             	lea    esi,[esi+0x0]
c001b084:	b8 01 00 00 00       	mov    eax,0x1
c001b089:	8d 76 00             	lea    esi,[esi+0x0]
c001b08c:	83 c4 1c             	add    esp,0x1c
c001b08f:	c3                   	ret    

c001b090 <FAT::truncate(void*, unsigned long long)>:
c001b090:	83 ec 2c             	sub    esp,0x2c
c001b093:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b097:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b09b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b09f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b0a8:	75 0a                	jne    c001b0b4 <FAT::truncate(void*, unsigned long long)+0x24>
c001b0aa:	b8 04 00 00 00       	mov    eax,0x4
c001b0af:	eb 47                	jmp    c001b0f8 <FAT::truncate(void*, unsigned long long)+0x68>
c001b0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b0b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b0c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0cb:	83 ec 08             	sub    esp,0x8
c001b0ce:	50                   	push   eax
c001b0cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b0d3:	e8 88 95 fe ff       	call   c0004660 <f_lseek>
c001b0d8:	83 c4 10             	add    esp,0x10
c001b0db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0e3:	85 c0                	test   eax,eax
c001b0e5:	75 09                	jne    c001b0f0 <FAT::truncate(void*, unsigned long long)+0x60>
c001b0e7:	b8 00 00 00 00       	mov    eax,0x0
c001b0ec:	eb 0a                	jmp    c001b0f8 <FAT::truncate(void*, unsigned long long)+0x68>
c001b0ee:	66 90                	xchg   ax,ax
c001b0f0:	b8 01 00 00 00       	mov    eax,0x1
c001b0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f8:	83 c4 2c             	add    esp,0x2c
c001b0fb:	c3                   	ret    

c001b0fc <FAT::seek(void*, unsigned long long)>:
c001b0fc:	83 ec 2c             	sub    esp,0x2c
c001b0ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b103:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b107:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b10b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b10f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b114:	75 0a                	jne    c001b120 <FAT::seek(void*, unsigned long long)+0x24>
c001b116:	b8 04 00 00 00       	mov    eax,0x4
c001b11b:	eb 33                	jmp    c001b150 <FAT::seek(void*, unsigned long long)+0x54>
c001b11d:	8d 76 00             	lea    esi,[esi+0x0]
c001b120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b124:	83 ec 08             	sub    esp,0x8
c001b127:	50                   	push   eax
c001b128:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b12c:	e8 2f 95 fe ff       	call   c0004660 <f_lseek>
c001b131:	83 c4 10             	add    esp,0x10
c001b134:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b138:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b13c:	85 c0                	test   eax,eax
c001b13e:	75 08                	jne    c001b148 <FAT::seek(void*, unsigned long long)+0x4c>
c001b140:	b8 00 00 00 00       	mov    eax,0x0
c001b145:	eb 09                	jmp    c001b150 <FAT::seek(void*, unsigned long long)+0x54>
c001b147:	90                   	nop
c001b148:	b8 01 00 00 00       	mov    eax,0x1
c001b14d:	8d 76 00             	lea    esi,[esi+0x0]
c001b150:	83 c4 2c             	add    esp,0x2c
c001b153:	c3                   	ret    

c001b154 <fatWrapperReadDisk>:
c001b154:	53                   	push   ebx
c001b155:	83 ec 18             	sub    esp,0x18
c001b158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b15c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b160:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b165:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c001b16c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b170:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b174:	ba 00 00 00 00       	mov    edx,0x0
c001b179:	83 ec 0c             	sub    esp,0xc
c001b17c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b180:	53                   	push   ebx
c001b181:	52                   	push   edx
c001b182:	50                   	push   eax
c001b183:	51                   	push   ecx
c001b184:	e8 7b f1 fe ff       	call   c000a304 <LogicalDisk::read(unsigned long long, int, void*)>
c001b189:	83 c4 20             	add    esp,0x20
c001b18c:	83 c4 18             	add    esp,0x18
c001b18f:	5b                   	pop    ebx
c001b190:	c3                   	ret    
c001b191:	8d 76 00             	lea    esi,[esi+0x0]

c001b194 <fatWrapperWriteDisk>:
c001b194:	53                   	push   ebx
c001b195:	83 ec 18             	sub    esp,0x18
c001b198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b19c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b1a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b1a5:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c001b1ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1b4:	ba 00 00 00 00       	mov    edx,0x0
c001b1b9:	83 ec 0c             	sub    esp,0xc
c001b1bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1c0:	53                   	push   ebx
c001b1c1:	52                   	push   edx
c001b1c2:	50                   	push   eax
c001b1c3:	51                   	push   ecx
c001b1c4:	e8 a7 f1 fe ff       	call   c000a370 <LogicalDisk::write(unsigned long long, int, void*)>
c001b1c9:	83 c4 20             	add    esp,0x20
c001b1cc:	83 c4 18             	add    esp,0x18
c001b1cf:	5b                   	pop    ebx
c001b1d0:	c3                   	ret    
c001b1d1:	8d 76 00             	lea    esi,[esi+0x0]

c001b1d4 <fatWrapperIoctl>:
c001b1d4:	53                   	push   ebx
c001b1d5:	83 ec 28             	sub    esp,0x28
c001b1d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b1dc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b1e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b1e4:	88 d0                	mov    al,dl
c001b1e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b1ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b1ef:	83 f8 02             	cmp    eax,0x2
c001b1f2:	75 34                	jne    c001b228 <fatWrapperIoctl+0x54>
c001b1f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b1fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b201:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001b208:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b20e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b214:	89 c2                	mov    edx,eax
c001b216:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b21a:	66 89 10             	mov    WORD PTR [eax],dx
c001b21d:	b8 00 00 00 00       	mov    eax,0x0
c001b222:	e9 c5 00 00 00       	jmp    c001b2ec <fatWrapperIoctl+0x118>
c001b227:	90                   	nop
c001b228:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b22d:	83 f8 01             	cmp    eax,0x1
c001b230:	75 6a                	jne    c001b29c <fatWrapperIoctl+0xc8>
c001b232:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b236:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b23a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b23f:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001b246:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b24c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b252:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b258:	89 c8                	mov    eax,ecx
c001b25a:	89 da                	mov    edx,ebx
c001b25c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b260:	c1 e0 0a             	shl    eax,0xa
c001b263:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b268:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c001b26f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b275:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b27b:	89 cb                	mov    ebx,ecx
c001b27d:	c1 fb 1f             	sar    ebx,0x1f
c001b280:	53                   	push   ebx
c001b281:	51                   	push   ecx
c001b282:	52                   	push   edx
c001b283:	50                   	push   eax
c001b284:	e8 eb 59 00 00       	call   c0020c74 <__udivdi3>
c001b289:	83 c4 10             	add    esp,0x10
c001b28c:	89 c2                	mov    edx,eax
c001b28e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b292:	89 10                	mov    DWORD PTR [eax],edx
c001b294:	b8 00 00 00 00       	mov    eax,0x0
c001b299:	eb 51                	jmp    c001b2ec <fatWrapperIoctl+0x118>
c001b29b:	90                   	nop
c001b29c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b2a1:	85 c0                	test   eax,eax
c001b2a3:	75 07                	jne    c001b2ac <fatWrapperIoctl+0xd8>
c001b2a5:	b8 00 00 00 00       	mov    eax,0x0
c001b2aa:	eb 40                	jmp    c001b2ec <fatWrapperIoctl+0x118>
c001b2ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b2b1:	83 f8 03             	cmp    eax,0x3
c001b2b4:	75 1a                	jne    c001b2d0 <fatWrapperIoctl+0xfc>
c001b2b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b2ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2c2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b2c8:	b8 00 00 00 00       	mov    eax,0x0
c001b2cd:	eb 1d                	jmp    c001b2ec <fatWrapperIoctl+0x118>
c001b2cf:	90                   	nop
c001b2d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b2d5:	83 f8 04             	cmp    eax,0x4
c001b2d8:	75 0a                	jne    c001b2e4 <fatWrapperIoctl+0x110>
c001b2da:	b8 00 00 00 00       	mov    eax,0x0
c001b2df:	eb 0b                	jmp    c001b2ec <fatWrapperIoctl+0x118>
c001b2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2e4:	b8 04 00 00 00       	mov    eax,0x4
c001b2e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2ec:	83 c4 28             	add    esp,0x28
c001b2ef:	5b                   	pop    ebx
c001b2f0:	c3                   	ret    
c001b2f1:	90                   	nop
c001b2f2:	66 90                	xchg   ax,ax

c001b2f4 <FAT::FAT()>:
c001b2f4:	83 ec 1c             	sub    esp,0x1c
c001b2f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2fb:	83 ec 0c             	sub    esp,0xc
c001b2fe:	50                   	push   eax
c001b2ff:	e8 52 ca fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	ba 5c 48 02 c0       	mov    edx,0xc002485c
c001b30c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b310:	89 10                	mov    DWORD PTR [eax],edx
c001b312:	c7 05 20 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db20,0x0
c001b31c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b324:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b329:	7f 19                	jg     c001b344 <FAT::FAT()+0x50>
c001b32b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b32f:	c7 04 85 40 db 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd24c0],0xffffffff
c001b33a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b33f:	eb e3                	jmp    c001b324 <FAT::FAT()+0x30>
c001b341:	8d 76 00             	lea    esi,[esi+0x0]
c001b344:	90                   	nop
c001b345:	83 c4 1c             	add    esp,0x1c
c001b348:	c3                   	ret    
c001b349:	90                   	nop
c001b34a:	66 90                	xchg   ax,ax

c001b34c <FAT::fixFilepath(char*)>:
c001b34c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b350:	8a 00                	mov    al,BYTE PTR [eax]
c001b352:	0f be c0             	movsx  eax,al
c001b355:	83 f8 40             	cmp    eax,0x40
c001b358:	7e 2e                	jle    c001b388 <FAT::fixFilepath(char*)+0x3c>
c001b35a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b35e:	8a 00                	mov    al,BYTE PTR [eax]
c001b360:	83 e8 41             	sub    eax,0x41
c001b363:	88 c2                	mov    dl,al
c001b365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b369:	88 10                	mov    BYTE PTR [eax],dl
c001b36b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b36f:	8a 00                	mov    al,BYTE PTR [eax]
c001b371:	0f be c0             	movsx  eax,al
c001b374:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001b37b:	83 c0 30             	add    eax,0x30
c001b37e:	88 c2                	mov    dl,al
c001b380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b384:	88 10                	mov    BYTE PTR [eax],dl
c001b386:	66 90                	xchg   ax,ax
c001b388:	90                   	nop
c001b389:	c3                   	ret    
c001b38a:	66 90                	xchg   ax,ax

c001b38c <FAT::open(char const*, void**, FileOpenMode)>:
c001b38c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b392:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b39a:	74 0c                	je     c001b3a8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b39c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b3a4:	75 0e                	jne    c001b3b4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b3a6:	66 90                	xchg   ax,ax
c001b3a8:	b8 04 00 00 00       	mov    eax,0x4
c001b3ad:	e9 46 01 00 00       	jmp    c001b4f8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001b3b2:	66 90                	xchg   ax,ax
c001b3b4:	83 ec 08             	sub    esp,0x8
c001b3b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b3c2:	50                   	push   eax
c001b3c3:	e8 88 52 fe ff       	call   c0000650 <strcpy>
c001b3c8:	83 c4 10             	add    esp,0x10
c001b3cb:	83 ec 08             	sub    esp,0x8
c001b3ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b3d2:	50                   	push   eax
c001b3d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3da:	e8 6d ff ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001b3df:	83 c4 10             	add    esp,0x10
c001b3e2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b3ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b3f1:	83 e0 01             	and    eax,0x1
c001b3f4:	74 12                	je     c001b408 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001b3f6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b3fd:	83 c8 01             	or     eax,0x1
c001b400:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b407:	90                   	nop
c001b408:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b40f:	83 e0 04             	and    eax,0x4
c001b412:	74 24                	je     c001b438 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001b414:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b41b:	83 c8 30             	or     eax,0x30
c001b41e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b425:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b42c:	83 c8 02             	or     eax,0x2
c001b42f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b436:	66 90                	xchg   ax,ax
c001b438:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b43f:	83 e0 02             	and    eax,0x2
c001b442:	74 14                	je     c001b458 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b444:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b44b:	83 c8 02             	or     eax,0x2
c001b44e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b455:	8d 76 00             	lea    esi,[esi+0x0]
c001b458:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b45f:	83 e0 08             	and    eax,0x8
c001b462:	74 14                	je     c001b478 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001b464:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b46b:	83 c8 04             	or     eax,0x4
c001b46e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b475:	8d 76 00             	lea    esi,[esi+0x0]
c001b478:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b47f:	83 e0 10             	and    eax,0x10
c001b482:	74 14                	je     c001b498 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001b484:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b48b:	83 c8 08             	or     eax,0x8
c001b48e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b495:	8d 76 00             	lea    esi,[esi+0x0]
c001b498:	83 ec 0c             	sub    esp,0xc
c001b49b:	68 28 02 00 00       	push   0x228
c001b4a0:	e8 f3 3e ff ff       	call   c000f398 <malloc>
c001b4a5:	83 c4 10             	add    esp,0x10
c001b4a8:	89 c2                	mov    edx,eax
c001b4aa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b4b1:	89 10                	mov    DWORD PTR [eax],edx
c001b4b3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b4bb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b4c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4c4:	83 ec 04             	sub    esp,0x4
c001b4c7:	52                   	push   edx
c001b4c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b4cc:	52                   	push   edx
c001b4cd:	50                   	push   eax
c001b4ce:	e8 ae 89 fe ff       	call   c0003e81 <f_open>
c001b4d3:	83 c4 10             	add    esp,0x10
c001b4d6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b4dd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b4e5:	74 09                	je     c001b4f0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001b4e7:	b8 01 00 00 00       	mov    eax,0x1
c001b4ec:	eb 0a                	jmp    c001b4f8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001b4ee:	66 90                	xchg   ax,ax
c001b4f0:	b8 00 00 00 00       	mov    eax,0x0
c001b4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b4fe:	c3                   	ret    
c001b4ff:	90                   	nop

c001b500 <FAT::openDir(char const*, void**)>:
c001b500:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b506:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b50e:	74 0c                	je     c001b51c <FAT::openDir(char const*, void**)+0x1c>
c001b510:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b518:	75 0e                	jne    c001b528 <FAT::openDir(char const*, void**)+0x28>
c001b51a:	66 90                	xchg   ax,ax
c001b51c:	b8 04 00 00 00       	mov    eax,0x4
c001b521:	e9 82 00 00 00       	jmp    c001b5a8 <FAT::openDir(char const*, void**)+0xa8>
c001b526:	66 90                	xchg   ax,ax
c001b528:	83 ec 08             	sub    esp,0x8
c001b52b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b532:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b536:	50                   	push   eax
c001b537:	e8 14 51 fe ff       	call   c0000650 <strcpy>
c001b53c:	83 c4 10             	add    esp,0x10
c001b53f:	83 ec 08             	sub    esp,0x8
c001b542:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b546:	50                   	push   eax
c001b547:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b54e:	e8 f9 fd ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001b553:	83 c4 10             	add    esp,0x10
c001b556:	83 ec 0c             	sub    esp,0xc
c001b559:	6a 30                	push   0x30
c001b55b:	e8 38 3e ff ff       	call   c000f398 <malloc>
c001b560:	83 c4 10             	add    esp,0x10
c001b563:	89 c2                	mov    edx,eax
c001b565:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b56c:	89 10                	mov    DWORD PTR [eax],edx
c001b56e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b575:	8b 00                	mov    eax,DWORD PTR [eax]
c001b577:	83 ec 08             	sub    esp,0x8
c001b57a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b57e:	52                   	push   edx
c001b57f:	50                   	push   eax
c001b580:	e8 8b 92 fe ff       	call   c0004810 <f_opendir>
c001b585:	83 c4 10             	add    esp,0x10
c001b588:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b58f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b597:	74 07                	je     c001b5a0 <FAT::openDir(char const*, void**)+0xa0>
c001b599:	b8 01 00 00 00       	mov    eax,0x1
c001b59e:	eb 08                	jmp    c001b5a8 <FAT::openDir(char const*, void**)+0xa8>
c001b5a0:	b8 00 00 00 00       	mov    eax,0x0
c001b5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b5ae:	c3                   	ret    
c001b5af:	90                   	nop

c001b5b0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b5b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b5b6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b5be:	75 0c                	jne    c001b5cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b5c0:	b8 04 00 00 00       	mov    eax,0x4
c001b5c5:	e9 d6 00 00 00       	jmp    c001b6a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b5ca:	66 90                	xchg   ax,ax
c001b5cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b5d4:	75 0a                	jne    c001b5e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b5d6:	b8 04 00 00 00       	mov    eax,0x4
c001b5db:	e9 c0 00 00 00       	jmp    c001b6a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b5e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b5e8:	75 0a                	jne    c001b5f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b5ea:	b8 04 00 00 00       	mov    eax,0x4
c001b5ef:	e9 ac 00 00 00       	jmp    c001b6a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b5f4:	83 ec 08             	sub    esp,0x8
c001b5f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b5fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b605:	50                   	push   eax
c001b606:	e8 45 50 fe ff       	call   c0000650 <strcpy>
c001b60b:	83 c4 10             	add    esp,0x10
c001b60e:	83 ec 08             	sub    esp,0x8
c001b611:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b618:	50                   	push   eax
c001b619:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b620:	e8 27 fd ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001b625:	83 c4 10             	add    esp,0x10
c001b628:	83 ec 08             	sub    esp,0x8
c001b62b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b62f:	50                   	push   eax
c001b630:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b637:	50                   	push   eax
c001b638:	e8 52 93 fe ff       	call   c000498f <f_stat>
c001b63d:	83 c4 10             	add    esp,0x10
c001b640:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b647:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b64e:	85 c0                	test   eax,eax
c001b650:	74 0a                	je     c001b65c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b652:	83 f8 04             	cmp    eax,0x4
c001b655:	74 39                	je     c001b690 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b657:	eb 3f                	jmp    c001b698 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001b659:	8d 76 00             	lea    esi,[esi+0x0]
c001b65c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b660:	0f b6 c0             	movzx  eax,al
c001b663:	83 e0 10             	and    eax,0x10
c001b666:	0f 95 c2             	setne  dl
c001b669:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b670:	88 10                	mov    BYTE PTR [eax],dl
c001b672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b676:	ba 00 00 00 00       	mov    edx,0x0
c001b67b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b682:	89 01                	mov    DWORD PTR [ecx],eax
c001b684:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b687:	b8 00 00 00 00       	mov    eax,0x0
c001b68c:	eb 12                	jmp    c001b6a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b68e:	66 90                	xchg   ax,ax
c001b690:	b8 02 00 00 00       	mov    eax,0x2
c001b695:	eb 09                	jmp    c001b6a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b697:	90                   	nop
c001b698:	b8 01 00 00 00       	mov    eax,0x1
c001b69d:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b6a6:	c3                   	ret    
c001b6a7:	90                   	nop

c001b6a8 <FAT::unlink(char const*)>:
c001b6a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b6ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b6b6:	75 08                	jne    c001b6c0 <FAT::unlink(char const*)+0x18>
c001b6b8:	b8 04 00 00 00       	mov    eax,0x4
c001b6bd:	eb 61                	jmp    c001b720 <FAT::unlink(char const*)+0x78>
c001b6bf:	90                   	nop
c001b6c0:	83 ec 08             	sub    esp,0x8
c001b6c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b6ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b6ce:	50                   	push   eax
c001b6cf:	e8 7c 4f fe ff       	call   c0000650 <strcpy>
c001b6d4:	83 c4 10             	add    esp,0x10
c001b6d7:	83 ec 08             	sub    esp,0x8
c001b6da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b6de:	50                   	push   eax
c001b6df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b6e6:	e8 61 fc ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001b6eb:	83 c4 10             	add    esp,0x10
c001b6ee:	83 ec 0c             	sub    esp,0xc
c001b6f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b6f5:	50                   	push   eax
c001b6f6:	e8 06 95 fe ff       	call   c0004c01 <f_unlink>
c001b6fb:	83 c4 10             	add    esp,0x10
c001b6fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b705:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b70c:	85 c0                	test   eax,eax
c001b70e:	75 08                	jne    c001b718 <FAT::unlink(char const*)+0x70>
c001b710:	b8 00 00 00 00       	mov    eax,0x0
c001b715:	eb 09                	jmp    c001b720 <FAT::unlink(char const*)+0x78>
c001b717:	90                   	nop
c001b718:	b8 01 00 00 00       	mov    eax,0x1
c001b71d:	8d 76 00             	lea    esi,[esi+0x0]
c001b720:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b726:	c3                   	ret    
c001b727:	90                   	nop

c001b728 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b728:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b72e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001b735:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001b73c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b740:	88 d0                	mov    al,dl
c001b742:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b746:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b74e:	75 0c                	jne    c001b75c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001b750:	b8 04 00 00 00       	mov    eax,0x4
c001b755:	e9 7e 01 00 00       	jmp    c001b8d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001b75a:	66 90                	xchg   ax,ax
c001b75c:	83 ec 08             	sub    esp,0x8
c001b75f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b766:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b76a:	50                   	push   eax
c001b76b:	e8 e0 4e fe ff       	call   c0000650 <strcpy>
c001b770:	83 c4 10             	add    esp,0x10
c001b773:	83 ec 08             	sub    esp,0x8
c001b776:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b77a:	50                   	push   eax
c001b77b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b782:	e8 c5 fb ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b792:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b79a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b79f:	83 e0 01             	and    eax,0x1
c001b7a2:	74 14                	je     c001b7b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001b7a4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b7ab:	83 c8 01             	or     eax,0x1
c001b7ae:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7bd:	83 e0 02             	and    eax,0x2
c001b7c0:	74 12                	je     c001b7d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001b7c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b7c9:	83 c8 20             	or     eax,0x20
c001b7cc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b7d3:	90                   	nop
c001b7d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7d9:	83 e0 04             	and    eax,0x4
c001b7dc:	74 12                	je     c001b7f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001b7de:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b7e5:	83 c8 04             	or     eax,0x4
c001b7e8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b7ef:	90                   	nop
c001b7f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7f5:	83 e0 08             	and    eax,0x8
c001b7f8:	74 12                	je     c001b80c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b7fa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b801:	83 c8 02             	or     eax,0x2
c001b804:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b80b:	90                   	nop
c001b80c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b811:	83 e0 01             	and    eax,0x1
c001b814:	74 12                	je     c001b828 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001b816:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b81d:	83 c8 01             	or     eax,0x1
c001b820:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b827:	90                   	nop
c001b828:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b82d:	83 e0 02             	and    eax,0x2
c001b830:	74 12                	je     c001b844 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001b832:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b839:	83 c8 20             	or     eax,0x20
c001b83c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b843:	90                   	nop
c001b844:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b849:	83 e0 04             	and    eax,0x4
c001b84c:	74 12                	je     c001b860 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001b84e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b855:	83 c8 04             	or     eax,0x4
c001b858:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b85f:	90                   	nop
c001b860:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b865:	83 e0 08             	and    eax,0x8
c001b868:	74 12                	je     c001b87c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001b86a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b871:	83 c8 02             	or     eax,0x2
c001b874:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b87b:	90                   	nop
c001b87c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001b883:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b88a:	09 d0                	or     eax,edx
c001b88c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b893:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b89b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b8a3:	83 ec 04             	sub    esp,0x4
c001b8a6:	52                   	push   edx
c001b8a7:	50                   	push   eax
c001b8a8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b8ac:	50                   	push   eax
c001b8ad:	e8 c2 97 fe ff       	call   c0005074 <f_chmod>
c001b8b2:	83 c4 10             	add    esp,0x10
c001b8b5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b8bc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b8c3:	85 c0                	test   eax,eax
c001b8c5:	75 09                	jne    c001b8d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001b8c7:	b8 00 00 00 00       	mov    eax,0x0
c001b8cc:	eb 0a                	jmp    c001b8d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001b8ce:	66 90                	xchg   ax,ax
c001b8d0:	b8 01 00 00 00       	mov    eax,0x1
c001b8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8d8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b8de:	c3                   	ret    
c001b8df:	90                   	nop

c001b8e0 <FAT::rename(char const*, char const*)>:
c001b8e0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b8e6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b8ee:	74 0c                	je     c001b8fc <FAT::rename(char const*, char const*)+0x1c>
c001b8f0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b8f8:	75 0e                	jne    c001b908 <FAT::rename(char const*, char const*)+0x28>
c001b8fa:	66 90                	xchg   ax,ax
c001b8fc:	b8 04 00 00 00       	mov    eax,0x4
c001b901:	e9 9e 00 00 00       	jmp    c001b9a4 <FAT::rename(char const*, char const*)+0xc4>
c001b906:	66 90                	xchg   ax,ax
c001b908:	83 ec 08             	sub    esp,0x8
c001b90b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b912:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b919:	50                   	push   eax
c001b91a:	e8 31 4d fe ff       	call   c0000650 <strcpy>
c001b91f:	83 c4 10             	add    esp,0x10
c001b922:	83 ec 08             	sub    esp,0x8
c001b925:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b92c:	50                   	push   eax
c001b92d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b934:	e8 13 fa ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	83 ec 08             	sub    esp,0x8
c001b93f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b946:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b94a:	50                   	push   eax
c001b94b:	e8 00 4d fe ff       	call   c0000650 <strcpy>
c001b950:	83 c4 10             	add    esp,0x10
c001b953:	83 ec 08             	sub    esp,0x8
c001b956:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b95a:	50                   	push   eax
c001b95b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b962:	e8 e5 f9 ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001b967:	83 c4 10             	add    esp,0x10
c001b96a:	83 ec 08             	sub    esp,0x8
c001b96d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b971:	50                   	push   eax
c001b972:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b979:	50                   	push   eax
c001b97a:	e8 3d 95 fe ff       	call   c0004ebc <f_rename>
c001b97f:	83 c4 10             	add    esp,0x10
c001b982:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b989:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b990:	85 c0                	test   eax,eax
c001b992:	75 08                	jne    c001b99c <FAT::rename(char const*, char const*)+0xbc>
c001b994:	b8 00 00 00 00       	mov    eax,0x0
c001b999:	eb 09                	jmp    c001b9a4 <FAT::rename(char const*, char const*)+0xc4>
c001b99b:	90                   	nop
c001b99c:	b8 01 00 00 00       	mov    eax,0x1
c001b9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b9aa:	c3                   	ret    
c001b9ab:	90                   	nop

c001b9ac <FAT::mkdir(char const*)>:
c001b9ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b9b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b9ba:	75 08                	jne    c001b9c4 <FAT::mkdir(char const*)+0x18>
c001b9bc:	b8 04 00 00 00       	mov    eax,0x4
c001b9c1:	eb 61                	jmp    c001ba24 <FAT::mkdir(char const*)+0x78>
c001b9c3:	90                   	nop
c001b9c4:	83 ec 08             	sub    esp,0x8
c001b9c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b9ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9d2:	50                   	push   eax
c001b9d3:	e8 78 4c fe ff       	call   c0000650 <strcpy>
c001b9d8:	83 c4 10             	add    esp,0x10
c001b9db:	83 ec 08             	sub    esp,0x8
c001b9de:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9e2:	50                   	push   eax
c001b9e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b9ea:	e8 5d f9 ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001b9ef:	83 c4 10             	add    esp,0x10
c001b9f2:	83 ec 0c             	sub    esp,0xc
c001b9f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9f9:	50                   	push   eax
c001b9fa:	e8 22 93 fe ff       	call   c0004d21 <f_mkdir>
c001b9ff:	83 c4 10             	add    esp,0x10
c001ba02:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ba09:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ba10:	85 c0                	test   eax,eax
c001ba12:	75 08                	jne    c001ba1c <FAT::mkdir(char const*)+0x70>
c001ba14:	b8 00 00 00 00       	mov    eax,0x0
c001ba19:	eb 09                	jmp    c001ba24 <FAT::mkdir(char const*)+0x78>
c001ba1b:	90                   	nop
c001ba1c:	b8 01 00 00 00       	mov    eax,0x1
c001ba21:	8d 76 00             	lea    esi,[esi+0x0]
c001ba24:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ba2a:	c3                   	ret    
c001ba2b:	90                   	nop

c001ba2c <FAT::exists(char const*)>:
c001ba2c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ba32:	83 ec 08             	sub    esp,0x8
c001ba35:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ba3c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ba40:	50                   	push   eax
c001ba41:	e8 0a 4c fe ff       	call   c0000650 <strcpy>
c001ba46:	83 c4 10             	add    esp,0x10
c001ba49:	83 ec 08             	sub    esp,0x8
c001ba4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ba50:	50                   	push   eax
c001ba51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ba58:	e8 ef f8 ff ff       	call   c001b34c <FAT::fixFilepath(char*)>
c001ba5d:	83 c4 10             	add    esp,0x10
c001ba60:	83 ec 08             	sub    esp,0x8
c001ba63:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001ba6a:	50                   	push   eax
c001ba6b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ba6f:	50                   	push   eax
c001ba70:	e8 1a 8f fe ff       	call   c000498f <f_stat>
c001ba75:	83 c4 10             	add    esp,0x10
c001ba78:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ba7f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ba86:	85 c0                	test   eax,eax
c001ba88:	75 06                	jne    c001ba90 <FAT::exists(char const*)+0x64>
c001ba8a:	b0 01                	mov    al,0x1
c001ba8c:	eb 06                	jmp    c001ba94 <FAT::exists(char const*)+0x68>
c001ba8e:	66 90                	xchg   ax,ax
c001ba90:	b0 00                	mov    al,0x0
c001ba92:	66 90                	xchg   ax,ax
c001ba94:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ba9a:	c3                   	ret    
c001ba9b:	90                   	nop

c001ba9c <isoReadDiscSectorHelper>:
c001ba9c:	83 ec 2c             	sub    esp,0x2c
c001ba9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001baa3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001baa7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001baac:	83 e8 41             	sub    eax,0x41
c001baaf:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c001bab6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001baba:	ba 00 00 00 00       	mov    edx,0x0
c001babf:	83 ec 0c             	sub    esp,0xc
c001bac2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bac6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001baca:	52                   	push   edx
c001bacb:	50                   	push   eax
c001bacc:	51                   	push   ecx
c001bacd:	e8 32 e8 fe ff       	call   c000a304 <LogicalDisk::read(unsigned long long, int, void*)>
c001bad2:	83 c4 20             	add    esp,0x20
c001bad5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bad9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bade:	74 0c                	je     c001baec <isoReadDiscSectorHelper+0x50>
c001bae0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bae4:	c1 e0 0b             	shl    eax,0xb
c001bae7:	eb 0b                	jmp    c001baf4 <isoReadDiscSectorHelper+0x58>
c001bae9:	8d 76 00             	lea    esi,[esi+0x0]
c001baec:	b8 00 00 00 00       	mov    eax,0x0
c001baf1:	8d 76 00             	lea    esi,[esi+0x0]
c001baf4:	83 c4 2c             	add    esp,0x2c
c001baf7:	c3                   	ret    

c001baf8 <iso_kprintf>:
c001baf8:	83 ec 0c             	sub    esp,0xc
c001bafb:	83 ec 08             	sub    esp,0x8
c001bafe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb02:	68 01 45 02 c0       	push   0xc0024501
c001bb07:	e8 42 b4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	90                   	nop
c001bb10:	83 c4 0c             	add    esp,0xc
c001bb13:	c3                   	ret    

c001bb14 <iso_kprintfd>:
c001bb14:	83 ec 0c             	sub    esp,0xc
c001bb17:	83 ec 08             	sub    esp,0x8
c001bb1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb1e:	68 92 32 02 c0       	push   0xc0023292
c001bb23:	e8 26 b4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bb28:	83 c4 10             	add    esp,0x10
c001bb2b:	90                   	nop
c001bb2c:	83 c4 0c             	add    esp,0xc
c001bb2f:	c3                   	ret    

c001bb30 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bb30:	b8 08 00 00 00       	mov    eax,0x8
c001bb35:	c3                   	ret    

c001bb36 <ISO9660::truncate(void*, unsigned long long)>:
c001bb36:	b8 01 00 00 00       	mov    eax,0x1
c001bb3b:	c3                   	ret    

c001bb3c <ISO9660::getName()>:
c001bb3c:	b8 c0 48 02 c0       	mov    eax,0xc00248c0
c001bb41:	c3                   	ret    

c001bb42 <ISO9660::closeDir(void*)>:
c001bb42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb46:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb48:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001bb4b:	90                   	nop

c001bb4c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001bb4c:	b8 01 00 00 00       	mov    eax,0x1
c001bb51:	c3                   	ret    

c001bb52 <ISO9660::unlink(char const*)>:
c001bb52:	b8 01 00 00 00       	mov    eax,0x1
c001bb57:	c3                   	ret    

c001bb58 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001bb58:	b8 03 00 00 00       	mov    eax,0x3
c001bb5d:	c3                   	ret    

c001bb5e <ISO9660::rename(char const*, char const*)>:
c001bb5e:	b8 01 00 00 00       	mov    eax,0x1
c001bb63:	c3                   	ret    

c001bb64 <ISO9660::mkdir(char const*)>:
c001bb64:	b8 01 00 00 00       	mov    eax,0x1
c001bb69:	c3                   	ret    

c001bb6a <ISO9660::~ISO9660()>:
c001bb6a:	83 ec 0c             	sub    esp,0xc
c001bb6d:	ba 00 4a 02 c0       	mov    edx,0xc0024a00
c001bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb76:	89 10                	mov    DWORD PTR [eax],edx
c001bb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7c:	83 ec 0c             	sub    esp,0xc
c001bb7f:	50                   	push   eax
c001bb80:	e8 f5 c1 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001bb85:	83 c4 10             	add    esp,0x10
c001bb88:	90                   	nop
c001bb89:	83 c4 0c             	add    esp,0xc
c001bb8c:	c3                   	ret    
c001bb8d:	90                   	nop

c001bb8e <ISO9660::~ISO9660()>:
c001bb8e:	83 ec 0c             	sub    esp,0xc
c001bb91:	83 ec 0c             	sub    esp,0xc
c001bb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb98:	e8 cd ff ff ff       	call   c001bb6a <ISO9660::~ISO9660()>
c001bb9d:	83 c4 10             	add    esp,0x10
c001bba0:	83 ec 08             	sub    esp,0x8
c001bba3:	6a 08                	push   0x8
c001bba5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bba9:	e8 61 0f ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c001bbae:	83 c4 10             	add    esp,0x10
c001bbb1:	83 c4 0c             	add    esp,0xc
c001bbb4:	c3                   	ret    
c001bbb5:	90                   	nop

c001bbb6 <ISO9660::exists(char const*)>:
c001bbb6:	83 ec 18             	sub    esp,0x18
c001bbb9:	68 db 48 02 c0       	push   0xc00248db
c001bbbe:	e8 1b 3b ff ff       	call   c000f6de <KePanic(char const*)>
c001bbc3:	31 c0                	xor    eax,eax
c001bbc5:	83 c4 1c             	add    esp,0x1c
c001bbc8:	c3                   	ret    
c001bbc9:	90                   	nop

c001bbca <ISO9660::open(char const*, void**, FileOpenMode)>:
c001bbca:	56                   	push   esi
c001bbcb:	53                   	push   ebx
c001bbcc:	53                   	push   ebx
c001bbcd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bbd1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bbd5:	85 db                	test   ebx,ebx
c001bbd7:	0f 84 ca 00 00 00    	je     c001bca7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001bbdd:	85 f6                	test   esi,esi
c001bbdf:	0f 84 c2 00 00 00    	je     c001bca7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001bbe5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001bbea:	b8 03 00 00 00       	mov    eax,0x3
c001bbef:	0f 85 b7 00 00 00    	jne    c001bcac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001bbf5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001bbf7:	38 0d 20 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc20,cl
c001bbfd:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001bc04:	74 1b                	je     c001bc21 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001bc06:	85 c0                	test   eax,eax
c001bc08:	74 10                	je     c001bc1a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001bc0a:	83 ec 0c             	sub    esp,0xc
c001bc0d:	68 f9 48 02 c0       	push   0xc00248f9
c001bc12:	e8 c7 3a ff ff       	call   c000f6de <KePanic(char const*)>
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	8a 03                	mov    al,BYTE PTR [ebx]
c001bc1c:	a2 20 dc 02 c0       	mov    ds:0xc002dc20,al
c001bc21:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bc24:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001bc2b:	85 c0                	test   eax,eax
c001bc2d:	74 09                	je     c001bc38 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001bc2f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001bc36:	74 48                	je     c001bc80 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001bc38:	83 ec 0c             	sub    esp,0xc
c001bc3b:	68 09 49 02 c0       	push   0xc0024909
c001bc40:	e8 09 b3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bc45:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bc48:	83 c4 10             	add    esp,0x10
c001bc4b:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001bc52:	85 c0                	test   eax,eax
c001bc54:	74 17                	je     c001bc6d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001bc56:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bc5d:	83 ec 0c             	sub    esp,0xc
c001bc60:	68 29 49 02 c0       	push   0xc0024929
c001bc65:	e8 e4 b2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bc6a:	83 c4 10             	add    esp,0x10
c001bc6d:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001bc74:	83 ec 0c             	sub    esp,0xc
c001bc77:	50                   	push   eax
c001bc78:	e8 ca af fe ff       	call   c0006c47 <init_percd>
c001bc7d:	83 c4 10             	add    esp,0x10
c001bc80:	51                   	push   ecx
c001bc81:	83 c3 03             	add    ebx,0x3
c001bc84:	51                   	push   ecx
c001bc85:	6a 00                	push   0x0
c001bc87:	53                   	push   ebx
c001bc88:	e8 7d aa fe ff       	call   c000670a <iso_open>
c001bc8d:	83 c4 10             	add    esp,0x10
c001bc90:	89 c2                	mov    edx,eax
c001bc92:	b8 01 00 00 00       	mov    eax,0x1
c001bc97:	83 fa ff             	cmp    edx,0xffffffff
c001bc9a:	74 10                	je     c001bcac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001bc9c:	83 c2 32             	add    edx,0x32
c001bc9f:	31 c0                	xor    eax,eax
c001bca1:	01 d2                	add    edx,edx
c001bca3:	89 16                	mov    DWORD PTR [esi],edx
c001bca5:	eb 05                	jmp    c001bcac <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001bca7:	b8 04 00 00 00       	mov    eax,0x4
c001bcac:	5a                   	pop    edx
c001bcad:	5b                   	pop    ebx
c001bcae:	5e                   	pop    esi
c001bcaf:	c3                   	ret    

c001bcb0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bcb0:	53                   	push   ebx
c001bcb1:	83 ec 08             	sub    esp,0x8
c001bcb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bcb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bcbc:	85 c0                	test   eax,eax
c001bcbe:	74 2d                	je     c001bced <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001bcc0:	85 db                	test   ebx,ebx
c001bcc2:	74 29                	je     c001bced <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001bcc4:	52                   	push   edx
c001bcc5:	b9 02 00 00 00       	mov    ecx,0x2
c001bcca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bcce:	99                   	cdq    
c001bccf:	f7 f9                	idiv   ecx
c001bcd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bcd5:	83 e8 32             	sub    eax,0x32
c001bcd8:	50                   	push   eax
c001bcd9:	e8 d4 aa fe ff       	call   c00067b2 <iso_read>
c001bcde:	83 c4 10             	add    esp,0x10
c001bce1:	89 03                	mov    DWORD PTR [ebx],eax
c001bce3:	09 d0                	or     eax,edx
c001bce5:	0f 94 c0             	sete   al
c001bce8:	0f b6 c0             	movzx  eax,al
c001bceb:	eb 05                	jmp    c001bcf2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001bced:	b8 04 00 00 00       	mov    eax,0x4
c001bcf2:	83 c4 08             	add    esp,0x8
c001bcf5:	5b                   	pop    ebx
c001bcf6:	c3                   	ret    
c001bcf7:	90                   	nop

c001bcf8 <ISO9660::seek(void*, unsigned long long)>:
c001bcf8:	57                   	push   edi
c001bcf9:	b8 04 00 00 00       	mov    eax,0x4
c001bcfe:	56                   	push   esi
c001bcff:	51                   	push   ecx
c001bd00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bd08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bd0c:	85 d2                	test   edx,edx
c001bd0e:	74 26                	je     c001bd36 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001bd10:	89 d0                	mov    eax,edx
c001bd12:	b9 02 00 00 00       	mov    ecx,0x2
c001bd17:	6a 00                	push   0x0
c001bd19:	99                   	cdq    
c001bd1a:	f7 f9                	idiv   ecx
c001bd1c:	57                   	push   edi
c001bd1d:	56                   	push   esi
c001bd1e:	83 e8 32             	sub    eax,0x32
c001bd21:	50                   	push   eax
c001bd22:	e8 a1 ab fe ff       	call   c00068c8 <iso_seek>
c001bd27:	83 c4 10             	add    esp,0x10
c001bd2a:	31 f0                	xor    eax,esi
c001bd2c:	31 fa                	xor    edx,edi
c001bd2e:	09 d0                	or     eax,edx
c001bd30:	0f 95 c0             	setne  al
c001bd33:	0f b6 c0             	movzx  eax,al
c001bd36:	5a                   	pop    edx
c001bd37:	5e                   	pop    esi
c001bd38:	5f                   	pop    edi
c001bd39:	c3                   	ret    

c001bd3a <ISO9660::tell(void*, unsigned long long*)>:
c001bd3a:	53                   	push   ebx
c001bd3b:	83 ec 08             	sub    esp,0x8
c001bd3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bd46:	85 c0                	test   eax,eax
c001bd48:	74 24                	je     c001bd6e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001bd4a:	85 db                	test   ebx,ebx
c001bd4c:	74 20                	je     c001bd6e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001bd4e:	b9 02 00 00 00       	mov    ecx,0x2
c001bd53:	99                   	cdq    
c001bd54:	f7 f9                	idiv   ecx
c001bd56:	83 ec 0c             	sub    esp,0xc
c001bd59:	83 e8 32             	sub    eax,0x32
c001bd5c:	50                   	push   eax
c001bd5d:	e8 ea ab fe ff       	call   c000694c <iso_tell>
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	89 03                	mov    DWORD PTR [ebx],eax
c001bd67:	31 c0                	xor    eax,eax
c001bd69:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001bd6c:	eb 05                	jmp    c001bd73 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001bd6e:	b8 04 00 00 00       	mov    eax,0x4
c001bd73:	83 c4 08             	add    esp,0x8
c001bd76:	5b                   	pop    ebx
c001bd77:	c3                   	ret    

c001bd78 <ISO9660::stat(void*, unsigned long long*)>:
c001bd78:	56                   	push   esi
c001bd79:	53                   	push   ebx
c001bd7a:	83 ec 10             	sub    esp,0x10
c001bd7d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd81:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bd85:	68 4d 49 02 c0       	push   0xc002494d
c001bd8a:	e8 bf b1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bd8f:	83 c4 10             	add    esp,0x10
c001bd92:	85 db                	test   ebx,ebx
c001bd94:	74 2a                	je     c001bdc0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001bd96:	85 f6                	test   esi,esi
c001bd98:	74 26                	je     c001bdc0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001bd9a:	89 d8                	mov    eax,ebx
c001bd9c:	b9 02 00 00 00       	mov    ecx,0x2
c001bda1:	99                   	cdq    
c001bda2:	83 ec 0c             	sub    esp,0xc
c001bda5:	f7 f9                	idiv   ecx
c001bda7:	83 e8 32             	sub    eax,0x32
c001bdaa:	50                   	push   eax
c001bdab:	e8 cd ab fe ff       	call   c000697d <iso_total>
c001bdb0:	83 c4 10             	add    esp,0x10
c001bdb3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001bdba:	89 06                	mov    DWORD PTR [esi],eax
c001bdbc:	31 c0                	xor    eax,eax
c001bdbe:	eb 05                	jmp    c001bdc5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001bdc0:	b8 04 00 00 00       	mov    eax,0x4
c001bdc5:	5a                   	pop    edx
c001bdc6:	5b                   	pop    ebx
c001bdc7:	5e                   	pop    esi
c001bdc8:	c3                   	ret    
c001bdc9:	90                   	nop

c001bdca <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bdca:	55                   	push   ebp
c001bdcb:	57                   	push   edi
c001bdcc:	56                   	push   esi
c001bdcd:	53                   	push   ebx
c001bdce:	83 ec 18             	sub    esp,0x18
c001bdd1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bdd5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001bdd9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bddd:	68 55 49 02 c0       	push   0xc0024955
c001bde2:	e8 67 b1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001bde7:	83 c4 10             	add    esp,0x10
c001bdea:	85 ff                	test   edi,edi
c001bdec:	0f 94 c0             	sete   al
c001bdef:	85 f6                	test   esi,esi
c001bdf1:	0f 94 c2             	sete   dl
c001bdf4:	09 d0                	or     eax,edx
c001bdf6:	a8 01                	test   al,0x1
c001bdf8:	0f 85 dd 00 00 00    	jne    c001bedb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001bdfe:	85 db                	test   ebx,ebx
c001be00:	0f 84 d5 00 00 00    	je     c001bedb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001be06:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001be09:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001be0f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001be16:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001be1d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001be1f:	38 0d 20 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc20,cl
c001be25:	74 1b                	je     c001be42 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001be27:	85 c0                	test   eax,eax
c001be29:	74 10                	je     c001be3b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001be2b:	83 ec 0c             	sub    esp,0xc
c001be2e:	68 f9 48 02 c0       	push   0xc00248f9
c001be33:	e8 a6 38 ff ff       	call   c000f6de <KePanic(char const*)>
c001be38:	83 c4 10             	add    esp,0x10
c001be3b:	8a 03                	mov    al,BYTE PTR [ebx]
c001be3d:	a2 20 dc 02 c0       	mov    ds:0xc002dc20,al
c001be42:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001be45:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001be4c:	85 c0                	test   eax,eax
c001be4e:	74 09                	je     c001be59 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001be50:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001be57:	74 51                	je     c001beaa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001be59:	83 ec 0c             	sub    esp,0xc
c001be5c:	68 5d 49 02 c0       	push   0xc002495d
c001be61:	e8 e8 b0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001be66:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001be69:	83 c4 10             	add    esp,0x10
c001be6c:	83 3c 85 dc a9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5624],0x0
c001be74:	74 21                	je     c001be97 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001be76:	83 ec 0c             	sub    esp,0xc
c001be79:	68 7d 49 02 c0       	push   0xc002497d
c001be7e:	e8 cb b0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001be83:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001be86:	83 c4 10             	add    esp,0x10
c001be89:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001be90:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001be97:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001be9e:	83 ec 0c             	sub    esp,0xc
c001bea1:	50                   	push   eax
c001bea2:	e8 a0 ad fe ff       	call   c0006c47 <init_percd>
c001bea7:	83 c4 10             	add    esp,0x10
c001beaa:	52                   	push   edx
c001beab:	83 c3 03             	add    ebx,0x3
c001beae:	52                   	push   edx
c001beaf:	6a 00                	push   0x0
c001beb1:	53                   	push   ebx
c001beb2:	e8 53 a8 fe ff       	call   c000670a <iso_open>
c001beb7:	83 c4 10             	add    esp,0x10
c001beba:	83 f8 ff             	cmp    eax,0xffffffff
c001bebd:	89 c5                	mov    ebp,eax
c001bebf:	75 21                	jne    c001bee2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001bec1:	50                   	push   eax
c001bec2:	50                   	push   eax
c001bec3:	6a 01                	push   0x1
c001bec5:	53                   	push   ebx
c001bec6:	e8 3f a8 fe ff       	call   c000670a <iso_open>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	ba 02 00 00 00       	mov    edx,0x2
c001bed3:	40                   	inc    eax
c001bed4:	74 2b                	je     c001bf01 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001bed6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001bed9:	eb 24                	jmp    c001beff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001bedb:	ba 04 00 00 00       	mov    edx,0x4
c001bee0:	eb 1f                	jmp    c001bf01 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001bee2:	83 ec 0c             	sub    esp,0xc
c001bee5:	50                   	push   eax
c001bee6:	e8 92 aa fe ff       	call   c000697d <iso_total>
c001beeb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001bef2:	89 07                	mov    DWORD PTR [edi],eax
c001bef4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bef7:	e8 98 a8 fe ff       	call   c0006794 <iso_close>
c001befc:	83 c4 10             	add    esp,0x10
c001beff:	31 d2                	xor    edx,edx
c001bf01:	83 c4 0c             	add    esp,0xc
c001bf04:	89 d0                	mov    eax,edx
c001bf06:	5b                   	pop    ebx
c001bf07:	5e                   	pop    esi
c001bf08:	5f                   	pop    edi
c001bf09:	5d                   	pop    ebp
c001bf0a:	c3                   	ret    
c001bf0b:	90                   	nop

c001bf0c <ISO9660::close(void*)>:
c001bf0c:	83 ec 0c             	sub    esp,0xc
c001bf0f:	b8 04 00 00 00       	mov    eax,0x4
c001bf14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf18:	85 d2                	test   edx,edx
c001bf1a:	74 1b                	je     c001bf37 <ISO9660::close(void*)+0x2b>
c001bf1c:	89 d0                	mov    eax,edx
c001bf1e:	b9 02 00 00 00       	mov    ecx,0x2
c001bf23:	99                   	cdq    
c001bf24:	83 ec 0c             	sub    esp,0xc
c001bf27:	f7 f9                	idiv   ecx
c001bf29:	83 e8 32             	sub    eax,0x32
c001bf2c:	50                   	push   eax
c001bf2d:	e8 62 a8 fe ff       	call   c0006794 <iso_close>
c001bf32:	83 c4 10             	add    esp,0x10
c001bf35:	31 c0                	xor    eax,eax
c001bf37:	83 c4 0c             	add    esp,0xc
c001bf3a:	c3                   	ret    
c001bf3b:	90                   	nop

c001bf3c <ISO9660::openDir(char const*, void**)>:
c001bf3c:	56                   	push   esi
c001bf3d:	53                   	push   ebx
c001bf3e:	50                   	push   eax
c001bf3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf43:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bf47:	85 db                	test   ebx,ebx
c001bf49:	0f 84 bd 00 00 00    	je     c001c00c <ISO9660::openDir(char const*, void**)+0xd0>
c001bf4f:	85 f6                	test   esi,esi
c001bf51:	0f 84 b5 00 00 00    	je     c001c00c <ISO9660::openDir(char const*, void**)+0xd0>
c001bf57:	8a 13                	mov    dl,BYTE PTR [ebx]
c001bf59:	38 15 20 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc20,dl
c001bf5f:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001bf66:	74 1b                	je     c001bf83 <ISO9660::openDir(char const*, void**)+0x47>
c001bf68:	85 c0                	test   eax,eax
c001bf6a:	74 10                	je     c001bf7c <ISO9660::openDir(char const*, void**)+0x40>
c001bf6c:	83 ec 0c             	sub    esp,0xc
c001bf6f:	68 f9 48 02 c0       	push   0xc00248f9
c001bf74:	e8 65 37 ff ff       	call   c000f6de <KePanic(char const*)>
c001bf79:	83 c4 10             	add    esp,0x10
c001bf7c:	8a 03                	mov    al,BYTE PTR [ebx]
c001bf7e:	a2 20 dc 02 c0       	mov    ds:0xc002dc20,al
c001bf83:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bf86:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001bf8d:	85 c0                	test   eax,eax
c001bf8f:	74 10                	je     c001bfa1 <ISO9660::openDir(char const*, void**)+0x65>
c001bf91:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001bf98:	74 1a                	je     c001bfb4 <ISO9660::openDir(char const*, void**)+0x78>
c001bf9a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bfa1:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001bfa8:	83 ec 0c             	sub    esp,0xc
c001bfab:	50                   	push   eax
c001bfac:	e8 96 ac fe ff       	call   c0006c47 <init_percd>
c001bfb1:	83 c4 10             	add    esp,0x10
c001bfb4:	50                   	push   eax
c001bfb5:	83 c3 03             	add    ebx,0x3
c001bfb8:	50                   	push   eax
c001bfb9:	6a 01                	push   0x1
c001bfbb:	53                   	push   ebx
c001bfbc:	e8 49 a7 fe ff       	call   c000670a <iso_open>
c001bfc1:	83 c4 10             	add    esp,0x10
c001bfc4:	83 f8 ff             	cmp    eax,0xffffffff
c001bfc7:	89 c3                	mov    ebx,eax
c001bfc9:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001bfce:	75 1c                	jne    c001bfec <ISO9660::openDir(char const*, void**)+0xb0>
c001bfd0:	53                   	push   ebx
c001bfd1:	53                   	push   ebx
c001bfd2:	68 a1 49 02 c0       	push   0xc00249a1
c001bfd7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001bfdd:	e8 a2 5e ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	b8 01 00 00 00       	mov    eax,0x1
c001bfea:	eb 25                	jmp    c001c011 <ISO9660::openDir(char const*, void**)+0xd5>
c001bfec:	51                   	push   ecx
c001bfed:	01 db                	add    ebx,ebx
c001bfef:	51                   	push   ecx
c001bff0:	83 c3 65             	add    ebx,0x65
c001bff3:	68 b4 49 02 c0       	push   0xc00249b4
c001bff8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001bffe:	e8 81 5e ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c001c003:	83 c4 10             	add    esp,0x10
c001c006:	31 c0                	xor    eax,eax
c001c008:	89 1e                	mov    DWORD PTR [esi],ebx
c001c00a:	eb 05                	jmp    c001c011 <ISO9660::openDir(char const*, void**)+0xd5>
c001c00c:	b8 04 00 00 00       	mov    eax,0x4
c001c011:	5a                   	pop    edx
c001c012:	5b                   	pop    ebx
c001c013:	5e                   	pop    esi
c001c014:	c3                   	ret    
c001c015:	90                   	nop

c001c016 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c016:	55                   	push   ebp
c001c017:	57                   	push   edi
c001c018:	56                   	push   esi
c001c019:	53                   	push   ebx
c001c01a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c020:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001c027:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001c02e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001c035:	85 db                	test   ebx,ebx
c001c037:	0f 84 e4 00 00 00    	je     c001c121 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001c03d:	85 ed                	test   ebp,ebp
c001c03f:	0f 84 dc 00 00 00    	je     c001c121 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001c045:	83 ec 0c             	sub    esp,0xc
c001c048:	68 c7 49 02 c0       	push   0xc00249c7
c001c04d:	e8 fc ae fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c052:	89 d8                	mov    eax,ebx
c001c054:	b9 02 00 00 00       	mov    ecx,0x2
c001c059:	99                   	cdq    
c001c05a:	f7 f9                	idiv   ecx
c001c05c:	83 e8 32             	sub    eax,0x32
c001c05f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c062:	e8 68 a9 fe ff       	call   c00069cf <iso_readdir>
c001c067:	83 c4 10             	add    esp,0x10
c001c06a:	85 c0                	test   eax,eax
c001c06c:	89 c3                	mov    ebx,eax
c001c06e:	75 38                	jne    c001c0a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001c070:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001c075:	53                   	push   ebx
c001c076:	53                   	push   ebx
c001c077:	68 d2 49 02 c0       	push   0xc00249d2
c001c07c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c082:	e8 fd 5d ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c001c087:	83 c4 0c             	add    esp,0xc
c001c08a:	68 10 01 00 00       	push   0x110
c001c08f:	6a 00                	push   0x0
c001c091:	57                   	push   edi
c001c092:	e8 59 44 fe ff       	call   c00004f0 <memset>
c001c097:	83 c4 10             	add    esp,0x10
c001c09a:	b8 01 00 00 00       	mov    eax,0x1
c001c09f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001c0a6:	eb 7e                	jmp    c001c126 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001c0a8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001c0ae:	8d 70 08             	lea    esi,[eax+0x8]
c001c0b1:	83 ec 0c             	sub    esp,0xc
c001c0b4:	56                   	push   esi
c001c0b5:	e8 c6 44 fe ff       	call   c0000580 <strlen>
c001c0ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c0c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0c6:	83 c4 10             	add    esp,0x10
c001c0c9:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001c0cd:	75 0a                	jne    c001c0d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001c0cf:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001c0d2:	b8 02 00 00 00       	mov    eax,0x2
c001c0d7:	74 05                	je     c001c0de <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001c0d9:	b8 01 00 00 00       	mov    eax,0x1
c001c0de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0e2:	50                   	push   eax
c001c0e3:	50                   	push   eax
c001c0e4:	56                   	push   esi
c001c0e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c0ed:	50                   	push   eax
c001c0ee:	e8 5d 45 fe ff       	call   c0000650 <strcpy>
c001c0f3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c0fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c0fc:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001c103:	5a                   	pop    edx
c001c104:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001c109:	59                   	pop    ecx
c001c10a:	68 e5 49 02 c0       	push   0xc00249e5
c001c10f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c115:	e8 6a 5d ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c001c11a:	83 c4 10             	add    esp,0x10
c001c11d:	31 c0                	xor    eax,eax
c001c11f:	eb 05                	jmp    c001c126 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001c121:	b8 04 00 00 00       	mov    eax,0x4
c001c126:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c12c:	5b                   	pop    ebx
c001c12d:	5e                   	pop    esi
c001c12e:	5f                   	pop    edi
c001c12f:	5d                   	pop    ebp
c001c130:	c3                   	ret    

c001c131 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c131:	57                   	push   edi
c001c132:	56                   	push   esi
c001c133:	53                   	push   ebx
c001c134:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c138:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c13c:	39 35 24 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc24,esi
c001c142:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c146:	0f be cb             	movsx  ecx,bl
c001c149:	75 0b                	jne    c001c156 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001c14b:	0f be 05 84 5c 02 c0 	movsx  eax,BYTE PTR ds:0xc0025c84
c001c152:	39 c8                	cmp    eax,ecx
c001c154:	74 47                	je     c001c19d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c156:	83 ec 0c             	sub    esp,0xc
c001c159:	31 d2                	xor    edx,edx
c001c15b:	68 40 dc 02 c0       	push   0xc002dc40
c001c160:	6a 01                	push   0x1
c001c162:	52                   	push   edx
c001c163:	56                   	push   esi
c001c164:	ff 34 8d dc a9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5624]
c001c16b:	e8 94 e1 fe ff       	call   c000a304 <LogicalDisk::read(unsigned long long, int, void*)>
c001c170:	83 c4 20             	add    esp,0x20
c001c173:	85 c0                	test   eax,eax
c001c175:	75 0e                	jne    c001c185 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001c177:	89 35 24 dc 02 c0    	mov    DWORD PTR ds:0xc002dc24,esi
c001c17d:	88 1d 84 5c 02 c0    	mov    BYTE PTR ds:0xc0025c84,bl
c001c183:	eb 18                	jmp    c001c19d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c185:	50                   	push   eax
c001c186:	68 00 08 00 00       	push   0x800
c001c18b:	6a 00                	push   0x0
c001c18d:	57                   	push   edi
c001c18e:	e8 5d 43 fe ff       	call   c00004f0 <memset>
c001c193:	83 c4 10             	add    esp,0x10
c001c196:	b8 01 00 00 00       	mov    eax,0x1
c001c19b:	eb 0e                	jmp    c001c1ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001c19d:	be 40 dc 02 c0       	mov    esi,0xc002dc40
c001c1a2:	b9 00 08 00 00       	mov    ecx,0x800
c001c1a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1a9:	31 c0                	xor    eax,eax
c001c1ab:	5b                   	pop    ebx
c001c1ac:	5e                   	pop    esi
c001c1ad:	5f                   	pop    edi
c001c1ae:	c3                   	ret    
c001c1af:	90                   	nop

c001c1b0 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c1b0:	53                   	push   ebx
c001c1b1:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001c1b7:	c7 05 24 dc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002dc24,0xdeadbeef
c001c1c1:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001c1c8:	8d 58 41             	lea    ebx,[eax+0x41]
c001c1cb:	0f be db             	movsx  ebx,bl
c001c1ce:	53                   	push   ebx
c001c1cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c1d3:	50                   	push   eax
c001c1d4:	6a 10                	push   0x10
c001c1d6:	e8 56 ff ff ff       	call   c001c131 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c1db:	83 c4 10             	add    esp,0x10
c001c1de:	31 d2                	xor    edx,edx
c001c1e0:	85 c0                	test   eax,eax
c001c1e2:	75 33                	jne    c001c217 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c1e4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c1e9:	75 2c                	jne    c001c217 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c1eb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c1f0:	75 25                	jne    c001c217 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c1f2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c1f7:	75 1e                	jne    c001c217 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c1f9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c1fe:	75 17                	jne    c001c217 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c200:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c205:	75 10                	jne    c001c217 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c207:	83 ec 0c             	sub    esp,0xc
c001c20a:	53                   	push   ebx
c001c20b:	e8 37 aa fe ff       	call   c0006c47 <init_percd>
c001c210:	83 c4 10             	add    esp,0x10
c001c213:	40                   	inc    eax
c001c214:	0f 95 c2             	setne  dl
c001c217:	81 c4 08 08 00 00    	add    esp,0x808
c001c21d:	88 d0                	mov    al,dl
c001c21f:	5b                   	pop    ebx
c001c220:	c3                   	ret    
c001c221:	90                   	nop

c001c222 <ISO9660::ISO9660()>:
c001c222:	83 ec 0c             	sub    esp,0xc
c001c225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c229:	83 ec 0c             	sub    esp,0xc
c001c22c:	50                   	push   eax
c001c22d:	e8 24 bb fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001c232:	83 c4 10             	add    esp,0x10
c001c235:	ba 00 4a 02 c0       	mov    edx,0xc0024a00
c001c23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23e:	89 10                	mov    DWORD PTR [eax],edx
c001c240:	e8 14 ab fe ff       	call   c0006d59 <fs_iso9660_init>
c001c245:	90                   	nop
c001c246:	83 c4 0c             	add    esp,0xc
c001c249:	c3                   	ret    

c001c24a <SoundCard::beginPlayback()>:
c001c24a:	c7 44 24 04 64 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a64
c001c252:	e9 87 34 ff ff       	jmp    c000f6de <KePanic(char const*)>
c001c257:	90                   	nop

c001c258 <SoundCard::stopPlayback()>:
c001c258:	c7 44 24 04 64 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a64
c001c260:	e9 79 34 ff ff       	jmp    c000f6de <KePanic(char const*)>
c001c265:	90                   	nop

c001c266 <SoundCard::SoundCard(char const*)>:
c001c266:	83 ec 1c             	sub    esp,0x1c
c001c269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c26d:	83 ec 08             	sub    esp,0x8
c001c270:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c274:	50                   	push   eax
c001c275:	e8 96 d1 fe ff       	call   c0009410 <Device::Device(char const*)>
c001c27a:	83 c4 10             	add    esp,0x10
c001c27d:	ba b0 4a 02 c0       	mov    edx,0xc0024ab0
c001c282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c286:	89 10                	mov    DWORD PTR [eax],edx
c001c288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c28c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c297:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c2a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2a5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c2af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2b3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c2bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2c1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c2cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c2d3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c2d8:	7f 1a                	jg     c001c2f4 <SoundCard::SoundCard(char const*)+0x8e>
c001c2da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c2e2:	83 c2 54             	add    edx,0x54
c001c2e5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c2ed:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c2f2:	eb df                	jmp    c001c2d3 <SoundCard::SoundCard(char const*)+0x6d>
c001c2f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2f8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c2ff:	90                   	nop
c001c300:	83 c4 1c             	add    esp,0x1c
c001c303:	c3                   	ret    

c001c304 <SoundCard::~SoundCard()>:
c001c304:	83 ec 0c             	sub    esp,0xc
c001c307:	ba b0 4a 02 c0       	mov    edx,0xc0024ab0
c001c30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c310:	89 10                	mov    DWORD PTR [eax],edx
c001c312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c316:	83 ec 0c             	sub    esp,0xc
c001c319:	50                   	push   eax
c001c31a:	e8 91 ce fe ff       	call   c00091b0 <Device::~Device()>
c001c31f:	83 c4 10             	add    esp,0x10
c001c322:	90                   	nop
c001c323:	83 c4 0c             	add    esp,0xc
c001c326:	c3                   	ret    
c001c327:	90                   	nop

c001c328 <SoundCard::~SoundCard()>:
c001c328:	83 ec 0c             	sub    esp,0xc
c001c32b:	83 ec 0c             	sub    esp,0xc
c001c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c332:	e8 cd ff ff ff       	call   c001c304 <SoundCard::~SoundCard()>
c001c337:	83 c4 10             	add    esp,0x10
c001c33a:	83 ec 08             	sub    esp,0x8
c001c33d:	68 e8 01 00 00       	push   0x1e8
c001c342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c346:	e8 c4 07 ff ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c001c34b:	83 c4 10             	add    esp,0x10
c001c34e:	83 c4 0c             	add    esp,0xc
c001c351:	c3                   	ret    

c001c352 <SoundCard::configureRates(int, int, int)>:
c001c352:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c356:	31 c0                	xor    eax,eax
c001c358:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c35f:	75 20                	jne    c001c381 <SoundCard::configureRates(int, int, int)+0x2f>
c001c361:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c365:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c36b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c36f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c379:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c37f:	b0 01                	mov    al,0x1
c001c381:	c3                   	ret    

c001c382 <SoundCard::getSamples16(int, short*)>:
c001c382:	55                   	push   ebp
c001c383:	57                   	push   edi
c001c384:	31 ff                	xor    edi,edi
c001c386:	56                   	push   esi
c001c387:	53                   	push   ebx
c001c388:	31 db                	xor    ebx,ebx
c001c38a:	83 ec 10             	sub    esp,0x10
c001c38d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c391:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c395:	8d 04 36             	lea    eax,[esi+esi*1]
c001c398:	50                   	push   eax
c001c399:	6a 00                	push   0x0
c001c39b:	55                   	push   ebp
c001c39c:	e8 4f 41 fe ff       	call   c00004f0 <memset>
c001c3a1:	83 c4 10             	add    esp,0x10
c001c3a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3a8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001c3af:	85 c0                	test   eax,eax
c001c3b1:	74 1a                	je     c001c3cd <SoundCard::getSamples16(int, short*)+0x4b>
c001c3b3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c3b7:	75 14                	jne    c001c3cd <SoundCard::getSamples16(int, short*)+0x4b>
c001c3b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3bd:	55                   	push   ebp
c001c3be:	56                   	push   esi
c001c3bf:	50                   	push   eax
c001c3c0:	e8 8f 03 00 00       	call   c001c754 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c3c5:	83 c4 10             	add    esp,0x10
c001c3c8:	39 c3                	cmp    ebx,eax
c001c3ca:	0f 4c d8             	cmovl  ebx,eax
c001c3cd:	47                   	inc    edi
c001c3ce:	83 ff 20             	cmp    edi,0x20
c001c3d1:	75 d1                	jne    c001c3a4 <SoundCard::getSamples16(int, short*)+0x22>
c001c3d3:	83 c4 0c             	add    esp,0xc
c001c3d6:	89 d8                	mov    eax,ebx
c001c3d8:	5b                   	pop    ebx
c001c3d9:	5e                   	pop    esi
c001c3da:	5f                   	pop    edi
c001c3db:	5d                   	pop    ebp
c001c3dc:	c3                   	ret    
c001c3dd:	90                   	nop

c001c3de <SoundCard::getSamples32(int, int*)>:
c001c3de:	55                   	push   ebp
c001c3df:	57                   	push   edi
c001c3e0:	31 ff                	xor    edi,edi
c001c3e2:	56                   	push   esi
c001c3e3:	31 f6                	xor    esi,esi
c001c3e5:	53                   	push   ebx
c001c3e6:	83 ec 10             	sub    esp,0x10
c001c3e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c3ed:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c3f1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c3f5:	c1 e0 02             	shl    eax,0x2
c001c3f8:	50                   	push   eax
c001c3f9:	6a 00                	push   0x0
c001c3fb:	55                   	push   ebp
c001c3fc:	e8 ef 40 fe ff       	call   c00004f0 <memset>
c001c401:	83 c4 10             	add    esp,0x10
c001c404:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c40b:	85 c0                	test   eax,eax
c001c40d:	74 1a                	je     c001c429 <SoundCard::getSamples32(int, int*)+0x4b>
c001c40f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c413:	75 14                	jne    c001c429 <SoundCard::getSamples32(int, int*)+0x4b>
c001c415:	53                   	push   ebx
c001c416:	55                   	push   ebp
c001c417:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c41b:	50                   	push   eax
c001c41c:	e8 03 04 00 00       	call   c001c824 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	39 c6                	cmp    esi,eax
c001c426:	0f 4c f0             	cmovl  esi,eax
c001c429:	47                   	inc    edi
c001c42a:	83 ff 20             	cmp    edi,0x20
c001c42d:	75 d5                	jne    c001c404 <SoundCard::getSamples32(int, int*)+0x26>
c001c42f:	85 f6                	test   esi,esi
c001c431:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001c438:	75 0f                	jne    c001c449 <SoundCard::getSamples32(int, int*)+0x6b>
c001c43a:	85 c0                	test   eax,eax
c001c43c:	74 1b                	je     c001c459 <SoundCard::getSamples32(int, int*)+0x7b>
c001c43e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c440:	83 ec 0c             	sub    esp,0xc
c001c443:	53                   	push   ebx
c001c444:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c447:	eb 0d                	jmp    c001c456 <SoundCard::getSamples32(int, int*)+0x78>
c001c449:	85 c0                	test   eax,eax
c001c44b:	75 0c                	jne    c001c459 <SoundCard::getSamples32(int, int*)+0x7b>
c001c44d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c44f:	83 ec 0c             	sub    esp,0xc
c001c452:	53                   	push   ebx
c001c453:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c456:	83 c4 10             	add    esp,0x10
c001c459:	83 c4 0c             	add    esp,0xc
c001c45c:	89 f0                	mov    eax,esi
c001c45e:	5b                   	pop    ebx
c001c45f:	5e                   	pop    esi
c001c460:	5f                   	pop    edi
c001c461:	5d                   	pop    ebp
c001c462:	c3                   	ret    
c001c463:	90                   	nop

c001c464 <SoundCard::addChannel(SoundPort*)>:
c001c464:	83 ec 0c             	sub    esp,0xc
c001c467:	31 c0                	xor    eax,eax
c001c469:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c46d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001c475:	74 1b                	je     c001c492 <SoundCard::addChannel(SoundPort*)+0x2e>
c001c477:	40                   	inc    eax
c001c478:	83 f8 20             	cmp    eax,0x20
c001c47b:	75 f0                	jne    c001c46d <SoundCard::addChannel(SoundPort*)+0x9>
c001c47d:	83 ec 0c             	sub    esp,0xc
c001c480:	68 89 4a 02 c0       	push   0xc0024a89
c001c485:	e8 54 32 ff ff       	call   c000f6de <KePanic(char const*)>
c001c48a:	83 c4 10             	add    esp,0x10
c001c48d:	83 c8 ff             	or     eax,0xffffffff
c001c490:	eb 0b                	jmp    c001c49d <SoundCard::addChannel(SoundPort*)+0x39>
c001c492:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c496:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001c49d:	83 c4 0c             	add    esp,0xc
c001c4a0:	c3                   	ret    
c001c4a1:	90                   	nop

c001c4a2 <SoundCard::removeChannel(int)>:
c001c4a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c4aa:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c4b5:	c3                   	ret    
c001c4b6:	66 90                	xchg   ax,ax

c001c4b8 <SoundPort::SoundPort(int, int, int, int)>:
c001c4b8:	83 ec 0c             	sub    esp,0xc
c001c4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4bf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ca:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4d6:	89 10                	mov    DWORD PTR [eax],edx
c001c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4ee:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c4f3:	75 13                	jne    c001c508 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4fb:	05 a0 0f 00 00       	add    eax,0xfa0
c001c500:	d1 e0                	shl    eax,1
c001c502:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c506:	66 90                	xchg   ax,ax
c001c508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c510:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c517:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c525:	c1 e0 02             	shl    eax,0x2
c001c528:	83 ec 0c             	sub    esp,0xc
c001c52b:	50                   	push   eax
c001c52c:	e8 67 2e ff ff       	call   c000f398 <malloc>
c001c531:	83 c4 10             	add    esp,0x10
c001c534:	89 c2                	mov    edx,eax
c001c536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c53d:	90                   	nop
c001c53e:	83 c4 0c             	add    esp,0xc
c001c541:	c3                   	ret    
c001c542:	66 90                	xchg   ax,ax

c001c544 <SoundPort::~SoundPort()>:
c001c544:	83 ec 0c             	sub    esp,0xc
c001c547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c54e:	85 c0                	test   eax,eax
c001c550:	74 1e                	je     c001c570 <SoundPort::~SoundPort()+0x2c>
c001c552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c556:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c559:	83 ec 0c             	sub    esp,0xc
c001c55c:	50                   	push   eax
c001c55d:	e8 46 2e ff ff       	call   c000f3a8 <free>
c001c562:	83 c4 10             	add    esp,0x10
c001c565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c569:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c570:	90                   	nop
c001c571:	83 c4 0c             	add    esp,0xc
c001c574:	c3                   	ret    
c001c575:	90                   	nop
c001c576:	66 90                	xchg   ax,ax

c001c578 <SoundPort::unpause()>:
c001c578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c580:	c3                   	ret    
c001c581:	90                   	nop
c001c582:	66 90                	xchg   ax,ax

c001c584 <SoundPort::pause()>:
c001c584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c588:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c58c:	c3                   	ret    
c001c58d:	90                   	nop
c001c58e:	66 90                	xchg   ax,ax

c001c590 <SoundPort::getBufferUsed()>:
c001c590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c594:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c597:	c3                   	ret    

c001c598 <SoundPort::getBufferSize()>:
c001c598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c59c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c59f:	c3                   	ret    

c001c5a0 <SoundPort::buffer8(signed char*, int)>:
c001c5a0:	55                   	push   ebp
c001c5a1:	57                   	push   edi
c001c5a2:	56                   	push   esi
c001c5a3:	53                   	push   ebx
c001c5a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5a8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001c5ac:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c5af:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c5b2:	74 70                	je     c001c624 <SoundPort::buffer8(signed char*, int)+0x84>
c001c5b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c5b8:	85 c9                	test   ecx,ecx
c001c5ba:	7e 68                	jle    c001c624 <SoundPort::buffer8(signed char*, int)+0x84>
c001c5bc:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001c5c0:	8d 48 01             	lea    ecx,[eax+0x1]
c001c5c3:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c5c6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c5c9:	89 f1                	mov    ecx,esi
c001c5cb:	c1 e1 18             	shl    ecx,0x18
c001c5ce:	29 f1                	sub    ecx,esi
c001c5d0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c5d3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5d6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5d9:	74 51                	je     c001c62c <SoundPort::buffer8(signed char*, int)+0x8c>
c001c5db:	31 ff                	xor    edi,edi
c001c5dd:	eb 25                	jmp    c001c604 <SoundPort::buffer8(signed char*, int)+0x64>
c001c5df:	90                   	nop
c001c5e0:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001c5e5:	8d 59 01             	lea    ebx,[ecx+0x1]
c001c5e8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001c5eb:	89 f3                	mov    ebx,esi
c001c5ed:	c1 e3 18             	shl    ebx,0x18
c001c5f0:	29 f3                	sub    ebx,esi
c001c5f2:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001c5f5:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001c5f8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5fb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5fe:	74 1c                	je     c001c61c <SoundPort::buffer8(signed char*, int)+0x7c>
c001c600:	89 c7                	mov    edi,eax
c001c602:	66 90                	xchg   ax,ax
c001c604:	8d 47 01             	lea    eax,[edi+0x1]
c001c607:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001c60b:	75 d3                	jne    c001c5e0 <SoundPort::buffer8(signed char*, int)+0x40>
c001c60d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c611:	8d 76 00             	lea    esi,[esi+0x0]
c001c614:	5b                   	pop    ebx
c001c615:	5e                   	pop    esi
c001c616:	5f                   	pop    edi
c001c617:	5d                   	pop    ebp
c001c618:	c3                   	ret    
c001c619:	8d 76 00             	lea    esi,[esi+0x0]
c001c61c:	5b                   	pop    ebx
c001c61d:	8d 47 02             	lea    eax,[edi+0x2]
c001c620:	5e                   	pop    esi
c001c621:	5f                   	pop    edi
c001c622:	5d                   	pop    ebp
c001c623:	c3                   	ret    
c001c624:	5b                   	pop    ebx
c001c625:	31 c0                	xor    eax,eax
c001c627:	5e                   	pop    esi
c001c628:	5f                   	pop    edi
c001c629:	5d                   	pop    ebp
c001c62a:	c3                   	ret    
c001c62b:	90                   	nop
c001c62c:	b8 01 00 00 00       	mov    eax,0x1
c001c631:	eb e1                	jmp    c001c614 <SoundPort::buffer8(signed char*, int)+0x74>
c001c633:	90                   	nop

c001c634 <SoundPort::buffer16(short*, int)>:
c001c634:	55                   	push   ebp
c001c635:	57                   	push   edi
c001c636:	56                   	push   esi
c001c637:	53                   	push   ebx
c001c638:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c63c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001c640:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c643:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c646:	74 70                	je     c001c6b8 <SoundPort::buffer16(short*, int)+0x84>
c001c648:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c64c:	85 c9                	test   ecx,ecx
c001c64e:	7e 68                	jle    c001c6b8 <SoundPort::buffer16(short*, int)+0x84>
c001c650:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001c654:	8d 48 01             	lea    ecx,[eax+0x1]
c001c657:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c65a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c65d:	89 f1                	mov    ecx,esi
c001c65f:	c1 e1 10             	shl    ecx,0x10
c001c662:	29 f1                	sub    ecx,esi
c001c664:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c667:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c66a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c66d:	74 51                	je     c001c6c0 <SoundPort::buffer16(short*, int)+0x8c>
c001c66f:	31 ff                	xor    edi,edi
c001c671:	eb 25                	jmp    c001c698 <SoundPort::buffer16(short*, int)+0x64>
c001c673:	90                   	nop
c001c674:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001c679:	8d 59 01             	lea    ebx,[ecx+0x1]
c001c67c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001c67f:	89 f3                	mov    ebx,esi
c001c681:	c1 e3 10             	shl    ebx,0x10
c001c684:	29 f3                	sub    ebx,esi
c001c686:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001c689:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001c68c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c68f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c692:	74 1c                	je     c001c6b0 <SoundPort::buffer16(short*, int)+0x7c>
c001c694:	89 c7                	mov    edi,eax
c001c696:	66 90                	xchg   ax,ax
c001c698:	8d 47 01             	lea    eax,[edi+0x1]
c001c69b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001c69f:	75 d3                	jne    c001c674 <SoundPort::buffer16(short*, int)+0x40>
c001c6a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6a8:	5b                   	pop    ebx
c001c6a9:	5e                   	pop    esi
c001c6aa:	5f                   	pop    edi
c001c6ab:	5d                   	pop    ebp
c001c6ac:	c3                   	ret    
c001c6ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c6b0:	5b                   	pop    ebx
c001c6b1:	8d 47 02             	lea    eax,[edi+0x2]
c001c6b4:	5e                   	pop    esi
c001c6b5:	5f                   	pop    edi
c001c6b6:	5d                   	pop    ebp
c001c6b7:	c3                   	ret    
c001c6b8:	5b                   	pop    ebx
c001c6b9:	31 c0                	xor    eax,eax
c001c6bb:	5e                   	pop    esi
c001c6bc:	5f                   	pop    edi
c001c6bd:	5d                   	pop    ebp
c001c6be:	c3                   	ret    
c001c6bf:	90                   	nop
c001c6c0:	b8 01 00 00 00       	mov    eax,0x1
c001c6c5:	eb e1                	jmp    c001c6a8 <SoundPort::buffer16(short*, int)+0x74>
c001c6c7:	90                   	nop

c001c6c8 <SoundPort::buffer32(int*, int)>:
c001c6c8:	55                   	push   ebp
c001c6c9:	57                   	push   edi
c001c6ca:	56                   	push   esi
c001c6cb:	53                   	push   ebx
c001c6cc:	83 ec 04             	sub    esp,0x4
c001c6cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c6d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c6db:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c6de:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c6e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6e4:	74 5a                	je     c001c740 <SoundPort::buffer32(int*, int)+0x78>
c001c6e6:	85 c0                	test   eax,eax
c001c6e8:	7e 56                	jle    c001c740 <SoundPort::buffer32(int*, int)+0x78>
c001c6ea:	8d 71 01             	lea    esi,[ecx+0x1]
c001c6ed:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c6f0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c6f3:	8b 37                	mov    esi,DWORD PTR [edi]
c001c6f5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c6f8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c6fb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c6fe:	74 4c                	je     c001c74c <SoundPort::buffer32(int*, int)+0x84>
c001c700:	31 f6                	xor    esi,esi
c001c702:	eb 1c                	jmp    c001c720 <SoundPort::buffer32(int*, int)+0x58>
c001c704:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c707:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c70a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c70d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c710:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c714:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c717:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c71a:	74 18                	je     c001c734 <SoundPort::buffer32(int*, int)+0x6c>
c001c71c:	89 de                	mov    esi,ebx
c001c71e:	66 90                	xchg   ax,ax
c001c720:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c723:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001c726:	75 dc                	jne    c001c704 <SoundPort::buffer32(int*, int)+0x3c>
c001c728:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c72b:	90                   	nop
c001c72c:	83 c4 04             	add    esp,0x4
c001c72f:	5b                   	pop    ebx
c001c730:	5e                   	pop    esi
c001c731:	5f                   	pop    edi
c001c732:	5d                   	pop    ebp
c001c733:	c3                   	ret    
c001c734:	8d 46 02             	lea    eax,[esi+0x2]
c001c737:	83 c4 04             	add    esp,0x4
c001c73a:	5b                   	pop    ebx
c001c73b:	5e                   	pop    esi
c001c73c:	5f                   	pop    edi
c001c73d:	5d                   	pop    ebp
c001c73e:	c3                   	ret    
c001c73f:	90                   	nop
c001c740:	83 c4 04             	add    esp,0x4
c001c743:	31 c0                	xor    eax,eax
c001c745:	5b                   	pop    ebx
c001c746:	5e                   	pop    esi
c001c747:	5f                   	pop    edi
c001c748:	5d                   	pop    ebp
c001c749:	c3                   	ret    
c001c74a:	66 90                	xchg   ax,ax
c001c74c:	b8 01 00 00 00       	mov    eax,0x1
c001c751:	eb d9                	jmp    c001c72c <SoundPort::buffer32(int*, int)+0x64>
c001c753:	90                   	nop

c001c754 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c754:	55                   	push   ebp
c001c755:	57                   	push   edi
c001c756:	56                   	push   esi
c001c757:	53                   	push   ebx
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c75f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c763:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c767:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c76b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001c771:	39 03                	cmp    DWORD PTR [ebx],eax
c001c773:	74 13                	je     c001c788 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001c775:	83 ec 0c             	sub    esp,0xc
c001c778:	68 dc 4a 02 c0       	push   0xc0024adc
c001c77d:	e8 5c 2f ff ff       	call   c000f6de <KePanic(char const*)>
c001c782:	83 c4 10             	add    esp,0x10
c001c785:	8d 76 00             	lea    esi,[esi+0x0]
c001c788:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001c78e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c791:	74 11                	je     c001c7a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001c793:	83 ec 0c             	sub    esp,0xc
c001c796:	68 1b 4b 02 c0       	push   0xc0024b1b
c001c79b:	e8 3e 2f ff ff       	call   c000f6de <KePanic(char const*)>
c001c7a0:	83 c4 10             	add    esp,0x10
c001c7a3:	90                   	nop
c001c7a4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001c7aa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c7ad:	74 11                	je     c001c7c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001c7af:	83 ec 0c             	sub    esp,0xc
c001c7b2:	68 1b 4b 02 c0       	push   0xc0024b1b
c001c7b7:	e8 22 2f ff ff       	call   c000f6de <KePanic(char const*)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	90                   	nop
c001c7c0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001c7c3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001c7c7:	85 f6                	test   esi,esi
c001c7c9:	7e 2d                	jle    c001c7f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c7cb:	31 c0                	xor    eax,eax
c001c7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c7d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c7d3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001c7d6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001c7dc:	85 c9                	test   ecx,ecx
c001c7de:	0f 49 d1             	cmovns edx,ecx
c001c7e1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001c7e5:	c1 fa 0f             	sar    edx,0xf
c001c7e8:	01 d1                	add    ecx,edx
c001c7ea:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001c7ee:	83 c0 01             	add    eax,0x1
c001c7f1:	39 f0                	cmp    eax,esi
c001c7f3:	75 db                	jne    c001c7d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7f8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c7fb:	83 ec 04             	sub    esp,0x4
c001c7fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c801:	29 f0                	sub    eax,esi
c001c803:	c1 e0 02             	shl    eax,0x2
c001c806:	50                   	push   eax
c001c807:	8d 04 b2             	lea    eax,[edx+esi*4]
c001c80a:	50                   	push   eax
c001c80b:	52                   	push   edx
c001c80c:	e8 bf 3b fe ff       	call   c00003d0 <memmove>
c001c811:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c814:	29 f0                	sub    eax,esi
c001c816:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001c819:	83 c4 1c             	add    esp,0x1c
c001c81c:	89 f0                	mov    eax,esi
c001c81e:	5b                   	pop    ebx
c001c81f:	5e                   	pop    esi
c001c820:	5f                   	pop    edi
c001c821:	5d                   	pop    ebp
c001c822:	c3                   	ret    
c001c823:	90                   	nop

c001c824 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c824:	55                   	push   ebp
c001c825:	57                   	push   edi
c001c826:	56                   	push   esi
c001c827:	53                   	push   ebx
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c82f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c833:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c837:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c83b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001c841:	39 03                	cmp    DWORD PTR [ebx],eax
c001c843:	74 13                	je     c001c858 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001c845:	83 ec 0c             	sub    esp,0xc
c001c848:	68 fc 4a 02 c0       	push   0xc0024afc
c001c84d:	e8 8c 2e ff ff       	call   c000f6de <KePanic(char const*)>
c001c852:	83 c4 10             	add    esp,0x10
c001c855:	8d 76 00             	lea    esi,[esi+0x0]
c001c858:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001c85e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c861:	74 11                	je     c001c874 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001c863:	83 ec 0c             	sub    esp,0xc
c001c866:	68 37 4b 02 c0       	push   0xc0024b37
c001c86b:	e8 6e 2e ff ff       	call   c000f6de <KePanic(char const*)>
c001c870:	83 c4 10             	add    esp,0x10
c001c873:	90                   	nop
c001c874:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001c87a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c87d:	74 11                	je     c001c890 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001c87f:	83 ec 0c             	sub    esp,0xc
c001c882:	68 37 4b 02 c0       	push   0xc0024b37
c001c887:	e8 52 2e ff ff       	call   c000f6de <KePanic(char const*)>
c001c88c:	83 c4 10             	add    esp,0x10
c001c88f:	90                   	nop
c001c890:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001c893:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001c897:	85 ff                	test   edi,edi
c001c899:	7e 21                	jle    c001c8bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001c89b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c8a2:	31 c0                	xor    eax,eax
c001c8a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c8a7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001c8aa:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c8ad:	01 d5                	add    ebp,edx
c001c8af:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001c8b2:	83 c0 04             	add    eax,0x4
c001c8b5:	39 c1                	cmp    ecx,eax
c001c8b7:	75 eb                	jne    c001c8a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001c8b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c8bf:	83 ec 04             	sub    esp,0x4
c001c8c2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c8c5:	29 f8                	sub    eax,edi
c001c8c7:	c1 e0 02             	shl    eax,0x2
c001c8ca:	50                   	push   eax
c001c8cb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c8ce:	50                   	push   eax
c001c8cf:	52                   	push   edx
c001c8d0:	e8 fb 3a fe ff       	call   c00003d0 <memmove>
c001c8d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c8d8:	29 f8                	sub    eax,edi
c001c8da:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001c8dd:	83 c4 1c             	add    esp,0x1c
c001c8e0:	89 f8                	mov    eax,edi
c001c8e2:	5b                   	pop    ebx
c001c8e3:	5e                   	pop    esi
c001c8e4:	5f                   	pop    edi
c001c8e5:	5d                   	pop    ebp
c001c8e6:	c3                   	ret    
c001c8e7:	90                   	nop

c001c8e8 <PCI::open(int, int, void*)>:
c001c8e8:	83 ec 18             	sub    esp,0x18
c001c8eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c8ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c8f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8f9:	8b 10                	mov    edx,DWORD PTR [eax]
c001c8fb:	50                   	push   eax
c001c8fc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c8ff:	31 c0                	xor    eax,eax
c001c901:	83 c4 1c             	add    esp,0x1c
c001c904:	c3                   	ret    
c001c905:	90                   	nop

c001c906 <PCI::close(int, int, void*)>:
c001c906:	31 c0                	xor    eax,eax
c001c908:	c3                   	ret    
c001c909:	90                   	nop

c001c90a <PCI::PCI()>:
c001c90a:	83 ec 0c             	sub    esp,0xc
c001c90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c911:	83 ec 08             	sub    esp,0x8
c001c914:	68 53 4b 02 c0       	push   0xc0024b53
c001c919:	50                   	push   eax
c001c91a:	e8 e9 bf fe ff       	call   c0008908 <Bus::Bus(char const*)>
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	ba 60 4c 02 c0       	mov    edx,0xc0024c60
c001c927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92b:	89 10                	mov    DWORD PTR [eax],edx
c001c92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c931:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93f:	a3 40 e4 02 c0       	mov    ds:0xc002e440,eax
c001c944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c948:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c94e:	0f b6 d0             	movzx  edx,al
c001c951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c955:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c960:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c966:	0f b6 d0             	movzx  edx,al
c001c969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c96d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c976:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c97c:	8d 50 01             	lea    edx,[eax+0x1]
c001c97f:	88 d1                	mov    cl,dl
c001c981:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c985:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001c98b:	0f b6 d0             	movzx  edx,al
c001c98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c992:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c996:	83 c9 c0             	or     ecx,0xffffffc0
c001c999:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c99d:	90                   	nop
c001c99e:	83 c4 0c             	add    esp,0xc
c001c9a1:	c3                   	ret    

c001c9a2 <PCI::readBAR8(unsigned int, int)>:
c001c9a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9aa:	f6 c2 01             	test   dl,0x1
c001c9ad:	74 07                	je     c001c9b6 <PCI::readBAR8(unsigned int, int)+0x14>
c001c9af:	83 e2 fc             	and    edx,0xfffffffc
c001c9b2:	01 c2                	add    edx,eax
c001c9b4:	ec                   	in     al,dx
c001c9b5:	c3                   	ret    
c001c9b6:	83 e2 f0             	and    edx,0xfffffff0
c001c9b9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001c9bc:	c3                   	ret    
c001c9bd:	90                   	nop

c001c9be <PCI::readBAR16(unsigned int, int)>:
c001c9be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9c6:	f6 c2 01             	test   dl,0x1
c001c9c9:	74 08                	je     c001c9d3 <PCI::readBAR16(unsigned int, int)+0x15>
c001c9cb:	83 e2 fc             	and    edx,0xfffffffc
c001c9ce:	01 c2                	add    edx,eax
c001c9d0:	66 ed                	in     ax,dx
c001c9d2:	c3                   	ret    
c001c9d3:	83 e2 f0             	and    edx,0xfffffff0
c001c9d6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001c9da:	c3                   	ret    
c001c9db:	90                   	nop

c001c9dc <PCI::readBAR32(unsigned int, int)>:
c001c9dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9e4:	f6 c2 01             	test   dl,0x1
c001c9e7:	74 07                	je     c001c9f0 <PCI::readBAR32(unsigned int, int)+0x14>
c001c9e9:	83 e2 fc             	and    edx,0xfffffffc
c001c9ec:	01 c2                	add    edx,eax
c001c9ee:	ed                   	in     eax,dx
c001c9ef:	c3                   	ret    
c001c9f0:	83 e2 f0             	and    edx,0xfffffff0
c001c9f3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001c9f6:	c3                   	ret    
c001c9f7:	90                   	nop

c001c9f8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001c9f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca04:	f6 c2 01             	test   dl,0x1
c001ca07:	74 07                	je     c001ca10 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ca09:	83 e2 fc             	and    edx,0xfffffffc
c001ca0c:	01 ca                	add    edx,ecx
c001ca0e:	ee                   	out    dx,al
c001ca0f:	c3                   	ret    
c001ca10:	83 e2 f0             	and    edx,0xfffffff0
c001ca13:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ca16:	c3                   	ret    
c001ca17:	90                   	nop

c001ca18 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ca18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca24:	f6 c2 01             	test   dl,0x1
c001ca27:	74 08                	je     c001ca31 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ca29:	83 e2 fc             	and    edx,0xfffffffc
c001ca2c:	01 ca                	add    edx,ecx
c001ca2e:	66 ef                	out    dx,ax
c001ca30:	c3                   	ret    
c001ca31:	83 e2 f0             	and    edx,0xfffffff0
c001ca34:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ca38:	c3                   	ret    
c001ca39:	90                   	nop

c001ca3a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ca3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca46:	f6 c2 01             	test   dl,0x1
c001ca49:	74 07                	je     c001ca52 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ca4b:	83 e2 fc             	and    edx,0xfffffffc
c001ca4e:	01 ca                	add    edx,ecx
c001ca50:	ef                   	out    dx,eax
c001ca51:	c3                   	ret    
c001ca52:	83 e2 f0             	and    edx,0xfffffff0
c001ca55:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ca58:	c3                   	ret    
c001ca59:	90                   	nop

c001ca5a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ca5a:	55                   	push   ebp
c001ca5b:	57                   	push   edi
c001ca5c:	56                   	push   esi
c001ca5d:	53                   	push   ebx
c001ca5e:	83 ec 0c             	sub    esp,0xc
c001ca61:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ca66:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ca6a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ca6e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ca72:	83 fe 07             	cmp    esi,0x7
c001ca75:	76 10                	jbe    c001ca87 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ca77:	83 ec 0c             	sub    esp,0xc
c001ca7a:	68 5b 4b 02 c0       	push   0xc0024b5b
c001ca7f:	e8 5a 2c ff ff       	call   c000f6de <KePanic(char const*)>
c001ca84:	83 c4 10             	add    esp,0x10
c001ca87:	0f b6 db             	movzx  ebx,bl
c001ca8a:	83 fb 0f             	cmp    ebx,0xf
c001ca8d:	76 10                	jbe    c001ca9f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ca8f:	83 ec 0c             	sub    esp,0xc
c001ca92:	68 8b 4b 02 c0       	push   0xc0024b8b
c001ca97:	e8 42 2c ff ff       	call   c000f6de <KePanic(char const*)>
c001ca9c:	83 c4 10             	add    esp,0x10
c001ca9f:	8d 04 36             	lea    eax,[esi+esi*1]
c001caa2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001caa7:	83 c8 f0             	or     eax,0xfffffff0
c001caaa:	ee                   	out    dx,al
c001caab:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cab0:	89 e8                	mov    eax,ebp
c001cab2:	ee                   	out    dx,al
c001cab3:	89 f9                	mov    ecx,edi
c001cab5:	89 d8                	mov    eax,ebx
c001cab7:	0f b6 d9             	movzx  ebx,cl
c001caba:	83 c4 0c             	add    esp,0xc
c001cabd:	c1 e0 08             	shl    eax,0x8
c001cac0:	83 e3 fc             	and    ebx,0xfffffffc
c001cac3:	09 d8                	or     eax,ebx
c001cac5:	5b                   	pop    ebx
c001cac6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001cacb:	5e                   	pop    esi
c001cacc:	5f                   	pop    edi
c001cacd:	5d                   	pop    ebp
c001cace:	c3                   	ret    
c001cacf:	90                   	nop

c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cad0:	57                   	push   edi
c001cad1:	56                   	push   esi
c001cad2:	53                   	push   ebx
c001cad3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cad7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cadb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cadf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cae3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cae9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001caed:	83 ff 01             	cmp    edi,0x1
c001caf0:	75 3f                	jne    c001cb31 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001caf2:	89 de                	mov    esi,ebx
c001caf4:	0f b6 c0             	movzx  eax,al
c001caf7:	c1 e0 10             	shl    eax,0x10
c001cafa:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cb00:	0f b6 c9             	movzx  ecx,cl
c001cb03:	09 f0                	or     eax,esi
c001cb05:	c1 e1 08             	shl    ecx,0x8
c001cb08:	0f b6 d2             	movzx  edx,dl
c001cb0b:	c1 e2 0b             	shl    edx,0xb
c001cb0e:	09 c8                	or     eax,ecx
c001cb10:	09 d0                	or     eax,edx
c001cb12:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cb17:	0d 00 00 00 80       	or     eax,0x80000000
c001cb1c:	ef                   	out    dx,eax
c001cb1d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cb22:	ed                   	in     eax,dx
c001cb23:	83 e3 02             	and    ebx,0x2
c001cb26:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001cb2d:	d3 e8                	shr    eax,cl
c001cb2f:	eb 44                	jmp    c001cb75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001cb31:	83 ff 02             	cmp    edi,0x2
c001cb34:	75 2d                	jne    c001cb63 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001cb36:	83 ec 0c             	sub    esp,0xc
c001cb39:	0f b6 fb             	movzx  edi,bl
c001cb3c:	57                   	push   edi
c001cb3d:	0f b6 c9             	movzx  ecx,cl
c001cb40:	51                   	push   ecx
c001cb41:	0f b6 d2             	movzx  edx,dl
c001cb44:	52                   	push   edx
c001cb45:	0f b6 c0             	movzx  eax,al
c001cb48:	50                   	push   eax
c001cb49:	56                   	push   esi
c001cb4a:	e8 0b ff ff ff       	call   c001ca5a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb4f:	89 c2                	mov    edx,eax
c001cb51:	ed                   	in     eax,dx
c001cb52:	83 e3 02             	and    ebx,0x2
c001cb55:	83 c4 20             	add    esp,0x20
c001cb58:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001cb5f:	d3 e8                	shr    eax,cl
c001cb61:	eb 12                	jmp    c001cb75 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001cb63:	83 ec 0c             	sub    esp,0xc
c001cb66:	68 bb 4b 02 c0       	push   0xc0024bbb
c001cb6b:	e8 6e 2b ff ff       	call   c000f6de <KePanic(char const*)>
c001cb70:	83 c4 10             	add    esp,0x10
c001cb73:	31 c0                	xor    eax,eax
c001cb75:	5b                   	pop    ebx
c001cb76:	5e                   	pop    esi
c001cb77:	5f                   	pop    edi
c001cb78:	c3                   	ret    
c001cb79:	90                   	nop

c001cb7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cb7a:	83 ec 18             	sub    esp,0x18
c001cb7d:	6a 00                	push   0x0
c001cb7f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb84:	50                   	push   eax
c001cb85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb8a:	50                   	push   eax
c001cb8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb90:	50                   	push   eax
c001cb91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb95:	e8 36 ff ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb9a:	83 c4 2c             	add    esp,0x2c
c001cb9d:	c3                   	ret    

c001cb9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cb9e:	83 ec 18             	sub    esp,0x18
c001cba1:	6a 0e                	push   0xe
c001cba3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cba8:	50                   	push   eax
c001cba9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbae:	50                   	push   eax
c001cbaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbb4:	50                   	push   eax
c001cbb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbb9:	e8 12 ff ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbbe:	83 c4 2c             	add    esp,0x2c
c001cbc1:	0f b6 c0             	movzx  eax,al
c001cbc4:	c3                   	ret    
c001cbc5:	90                   	nop

c001cbc6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cbc6:	55                   	push   ebp
c001cbc7:	57                   	push   edi
c001cbc8:	56                   	push   esi
c001cbc9:	53                   	push   ebx
c001cbca:	83 ec 18             	sub    esp,0x18
c001cbcd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cbd2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cbd7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cbdc:	6a 0a                	push   0xa
c001cbde:	56                   	push   esi
c001cbdf:	55                   	push   ebp
c001cbe0:	57                   	push   edi
c001cbe1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbe5:	e8 e6 fe ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbea:	83 c4 14             	add    esp,0x14
c001cbed:	6a 0a                	push   0xa
c001cbef:	56                   	push   esi
c001cbf0:	55                   	push   ebp
c001cbf1:	57                   	push   edi
c001cbf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbf6:	89 c3                	mov    ebx,eax
c001cbf8:	0f b6 db             	movzx  ebx,bl
c001cbfb:	e8 d0 fe ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc00:	83 c4 2c             	add    esp,0x2c
c001cc03:	25 00 ff 00 00       	and    eax,0xff00
c001cc08:	09 d8                	or     eax,ebx
c001cc0a:	5b                   	pop    ebx
c001cc0b:	5e                   	pop    esi
c001cc0c:	5f                   	pop    edi
c001cc0d:	5d                   	pop    ebp
c001cc0e:	c3                   	ret    
c001cc0f:	90                   	nop

c001cc10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cc10:	83 ec 18             	sub    esp,0x18
c001cc13:	6a 08                	push   0x8
c001cc15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc1a:	50                   	push   eax
c001cc1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc20:	50                   	push   eax
c001cc21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc26:	50                   	push   eax
c001cc27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc2b:	e8 a0 fe ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc30:	83 c4 2c             	add    esp,0x2c
c001cc33:	0f b6 c4             	movzx  eax,ah
c001cc36:	c3                   	ret    
c001cc37:	90                   	nop

c001cc38 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cc38:	83 ec 18             	sub    esp,0x18
c001cc3b:	6a 08                	push   0x8
c001cc3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc42:	50                   	push   eax
c001cc43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc48:	50                   	push   eax
c001cc49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc4e:	50                   	push   eax
c001cc4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc53:	e8 78 fe ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc58:	83 c4 2c             	add    esp,0x2c
c001cc5b:	c3                   	ret    

c001cc5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cc5c:	83 ec 18             	sub    esp,0x18
c001cc5f:	6a 3c                	push   0x3c
c001cc61:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc66:	50                   	push   eax
c001cc67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc6c:	50                   	push   eax
c001cc6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc72:	50                   	push   eax
c001cc73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc77:	e8 54 fe ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc7c:	83 c4 2c             	add    esp,0x2c
c001cc7f:	c3                   	ret    

c001cc80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cc80:	83 ec 18             	sub    esp,0x18
c001cc83:	6a 18                	push   0x18
c001cc85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc8a:	50                   	push   eax
c001cc8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc90:	50                   	push   eax
c001cc91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc96:	50                   	push   eax
c001cc97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc9b:	e8 30 fe ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cca0:	83 c4 2c             	add    esp,0x2c
c001cca3:	0f b6 c4             	movzx  eax,ah
c001cca6:	c3                   	ret    
c001cca7:	90                   	nop

c001cca8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cca8:	55                   	push   ebp
c001cca9:	57                   	push   edi
c001ccaa:	56                   	push   esi
c001ccab:	53                   	push   ebx
c001ccac:	83 ec 28             	sub    esp,0x28
c001ccaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ccb3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ccb8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ccbd:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ccc2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ccc9:	8d 43 12             	lea    eax,[ebx+0x12]
c001cccc:	83 c3 10             	add    ebx,0x10
c001cccf:	0f b6 c0             	movzx  eax,al
c001ccd2:	0f b6 db             	movzx  ebx,bl
c001ccd5:	50                   	push   eax
c001ccd6:	51                   	push   ecx
c001ccd7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ccdb:	57                   	push   edi
c001ccdc:	55                   	push   ebp
c001ccdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cce1:	e8 ea fd ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cce6:	83 c4 14             	add    esp,0x14
c001cce9:	53                   	push   ebx
c001ccea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccee:	51                   	push   ecx
c001ccef:	89 c6                	mov    esi,eax
c001ccf1:	57                   	push   edi
c001ccf2:	55                   	push   ebp
c001ccf3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ccf7:	c1 e6 10             	shl    esi,0x10
c001ccfa:	e8 d1 fd ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccff:	83 c4 3c             	add    esp,0x3c
c001cd02:	5b                   	pop    ebx
c001cd03:	0f b7 c0             	movzx  eax,ax
c001cd06:	09 f0                	or     eax,esi
c001cd08:	5e                   	pop    esi
c001cd09:	5f                   	pop    edi
c001cd0a:	5d                   	pop    ebp
c001cd0b:	c3                   	ret    

c001cd0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cd0c:	55                   	push   ebp
c001cd0d:	57                   	push   edi
c001cd0e:	56                   	push   esi
c001cd0f:	53                   	push   ebx
c001cd10:	83 ec 0c             	sub    esp,0xc
c001cd13:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001cd17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd1f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001cd23:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001cd29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd2d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd31:	83 f9 01             	cmp    ecx,0x1
c001cd34:	75 5d                	jne    c001cd93 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001cd36:	0f b6 c8             	movzx  ecx,al
c001cd39:	89 f0                	mov    eax,esi
c001cd3b:	25 fc 00 00 00       	and    eax,0xfc
c001cd40:	0f b6 d2             	movzx  edx,dl
c001cd43:	c1 e1 10             	shl    ecx,0x10
c001cd46:	c1 e2 0b             	shl    edx,0xb
c001cd49:	09 c1                	or     ecx,eax
c001cd4b:	89 f8                	mov    eax,edi
c001cd4d:	0f b6 f8             	movzx  edi,al
c001cd50:	c1 e7 08             	shl    edi,0x8
c001cd53:	09 f9                	or     ecx,edi
c001cd55:	09 d1                	or     ecx,edx
c001cd57:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd5c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cd62:	89 c8                	mov    eax,ecx
c001cd64:	ef                   	out    dx,eax
c001cd65:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd6a:	ed                   	in     eax,dx
c001cd6b:	83 e6 02             	and    esi,0x2
c001cd6e:	0f b7 db             	movzx  ebx,bx
c001cd71:	74 0a                	je     c001cd7d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001cd73:	c1 e3 10             	shl    ebx,0x10
c001cd76:	0f b7 d0             	movzx  edx,ax
c001cd79:	09 d3                	or     ebx,edx
c001cd7b:	eb 05                	jmp    c001cd82 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001cd7d:	66 31 c0             	xor    ax,ax
c001cd80:	09 c3                	or     ebx,eax
c001cd82:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd87:	89 c8                	mov    eax,ecx
c001cd89:	ef                   	out    dx,eax
c001cd8a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd8f:	89 d8                	mov    eax,ebx
c001cd91:	eb 41                	jmp    c001cdd4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001cd93:	83 f9 02             	cmp    ecx,0x2
c001cd96:	75 45                	jne    c001cddd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001cd98:	89 f1                	mov    ecx,esi
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	0f b6 f1             	movzx  esi,cl
c001cda0:	89 f9                	mov    ecx,edi
c001cda2:	56                   	push   esi
c001cda3:	0f b6 f9             	movzx  edi,cl
c001cda6:	57                   	push   edi
c001cda7:	0f b6 d2             	movzx  edx,dl
c001cdaa:	52                   	push   edx
c001cdab:	0f b6 c0             	movzx  eax,al
c001cdae:	50                   	push   eax
c001cdaf:	55                   	push   ebp
c001cdb0:	e8 a5 fc ff ff       	call   c001ca5a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdb5:	89 c2                	mov    edx,eax
c001cdb7:	ed                   	in     eax,dx
c001cdb8:	83 c4 20             	add    esp,0x20
c001cdbb:	f6 c2 02             	test   dl,0x2
c001cdbe:	0f b7 db             	movzx  ebx,bx
c001cdc1:	74 0c                	je     c001cdcf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001cdc3:	0f b7 c8             	movzx  ecx,ax
c001cdc6:	89 d8                	mov    eax,ebx
c001cdc8:	c1 e0 10             	shl    eax,0x10
c001cdcb:	09 c8                	or     eax,ecx
c001cdcd:	eb 05                	jmp    c001cdd4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001cdcf:	66 31 c0             	xor    ax,ax
c001cdd2:	09 d8                	or     eax,ebx
c001cdd4:	ef                   	out    dx,eax
c001cdd5:	83 c4 0c             	add    esp,0xc
c001cdd8:	5b                   	pop    ebx
c001cdd9:	5e                   	pop    esi
c001cdda:	5f                   	pop    edi
c001cddb:	5d                   	pop    ebp
c001cddc:	c3                   	ret    
c001cddd:	c7 44 24 20 bb 4b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024bbb
c001cde5:	83 c4 0c             	add    esp,0xc
c001cde8:	5b                   	pop    ebx
c001cde9:	5e                   	pop    esi
c001cdea:	5f                   	pop    edi
c001cdeb:	5d                   	pop    ebp
c001cdec:	e9 ed 28 ff ff       	jmp    c000f6de <KePanic(char const*)>
c001cdf1:	90                   	nop

c001cdf2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cdf2:	55                   	push   ebp
c001cdf3:	57                   	push   edi
c001cdf4:	56                   	push   esi
c001cdf5:	53                   	push   ebx
c001cdf6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001cdfc:	80 3d 4c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e44c,0x0
c001ce03:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001ce0a:	0f 85 bd 00 00 00    	jne    c001cecd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001ce10:	83 ec 0c             	sub    esp,0xc
c001ce13:	68 14 01 00 00       	push   0x114
c001ce18:	e8 7b 25 ff ff       	call   c000f398 <malloc>
c001ce1d:	83 c4 0c             	add    esp,0xc
c001ce20:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c001ce26:	68 c1 4b 02 c0       	push   0xc0024bc1
c001ce2b:	50                   	push   eax
c001ce2c:	89 c3                	mov    ebx,eax
c001ce2e:	e8 f9 b2 fe ff       	call   c000812c <File::File(char const*, Process*)>
c001ce33:	83 c4 10             	add    esp,0x10
c001ce36:	85 db                	test   ebx,ebx
c001ce38:	0f 84 6b 02 00 00    	je     c001d0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001ce3e:	57                   	push   edi
c001ce3f:	57                   	push   edi
c001ce40:	6a 01                	push   0x1
c001ce42:	53                   	push   ebx
c001ce43:	e8 02 b3 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001ce48:	83 c4 10             	add    esp,0x10
c001ce4b:	85 c0                	test   eax,eax
c001ce4d:	0f 85 56 02 00 00    	jne    c001d0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001ce53:	52                   	push   edx
c001ce54:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001ce58:	50                   	push   eax
c001ce59:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ce5d:	50                   	push   eax
c001ce5e:	53                   	push   ebx
c001ce5f:	e8 e8 b5 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001ce64:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ce68:	40                   	inc    eax
c001ce69:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce6c:	e8 27 25 ff ff       	call   c000f398 <malloc>
c001ce71:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ce75:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001ce79:	59                   	pop    ecx
c001ce7a:	a3 48 e4 02 c0       	mov    ds:0xc002e448,eax
c001ce7f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ce81:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001ce85:	51                   	push   ecx
c001ce86:	50                   	push   eax
c001ce87:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ce8b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ce8f:	53                   	push   ebx
c001ce90:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ce93:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001ce97:	83 c4 20             	add    esp,0x20
c001ce9a:	89 c8                	mov    eax,ecx
c001ce9c:	99                   	cdq    
c001ce9d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001cea1:	0f 85 02 02 00 00    	jne    c001d0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001cea7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001ceab:	0f 85 f8 01 00 00    	jne    c001d0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001ceb1:	83 ec 0c             	sub    esp,0xc
c001ceb4:	53                   	push   ebx
c001ceb5:	e8 ee b2 fe ff       	call   c00081a8 <File::close()>
c001ceba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	c6 05 4c e4 02 c0 01 	mov    BYTE PTR ds:0xc002e44c,0x1
c001cec8:	a3 44 e4 02 c0       	mov    ds:0xc002e444,eax
c001cecd:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001ced5:	31 c9                	xor    ecx,ecx
c001ced7:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001cede:	8b 2d 44 e4 02 c0    	mov    ebp,DWORD PTR ds:0xc002e444
c001cee4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001ceeb:	8b 15 48 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e448
c001cef1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001cef6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001cefe:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001cf03:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001cf0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cf0f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001cf17:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cf1b:	39 cd                	cmp    ebp,ecx
c001cf1d:	0f 8e 86 01 00 00    	jle    c001d0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001cf23:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001cf26:	d4 40                	aam    0x40
c001cf28:	d5 39                	aad    0x39
c001cf2a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cf2e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001cf32:	d4 40                	aam    0x40
c001cf34:	d5 39                	aad    0x39
c001cf36:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cf3a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001cf3e:	d4 40                	aam    0x40
c001cf40:	d5 39                	aad    0x39
c001cf42:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001cf46:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001cf4a:	d4 40                	aam    0x40
c001cf4c:	d5 39                	aad    0x39
c001cf4e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cf52:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001cf56:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001cf5a:	3c 56                	cmp    al,0x56
c001cf5c:	74 47                	je     c001cfa5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001cf5e:	d4 40                	aam    0x40
c001cf60:	d5 39                	aad    0x39
c001cf62:	8d 58 d0             	lea    ebx,[eax-0x30]
c001cf65:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001cf69:	0f b6 db             	movzx  ebx,bl
c001cf6c:	c1 e3 04             	shl    ebx,0x4
c001cf6f:	d4 40                	aam    0x40
c001cf71:	d5 39                	aad    0x39
c001cf73:	83 e8 30             	sub    eax,0x30
c001cf76:	0f b6 c0             	movzx  eax,al
c001cf79:	09 c3                	or     ebx,eax
c001cf7b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001cf7f:	c1 e3 04             	shl    ebx,0x4
c001cf82:	d4 40                	aam    0x40
c001cf84:	d5 39                	aad    0x39
c001cf86:	83 e8 30             	sub    eax,0x30
c001cf89:	0f b6 c0             	movzx  eax,al
c001cf8c:	09 c3                	or     ebx,eax
c001cf8e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001cf92:	c1 e3 04             	shl    ebx,0x4
c001cf95:	d4 40                	aam    0x40
c001cf97:	d5 39                	aad    0x39
c001cf99:	83 e8 30             	sub    eax,0x30
c001cf9c:	0f b6 c0             	movzx  eax,al
c001cf9f:	09 c3                	or     ebx,eax
c001cfa1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001cfa5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001cfa9:	80 fb 58             	cmp    bl,0x58
c001cfac:	74 49                	je     c001cff7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001cfae:	88 d8                	mov    al,bl
c001cfb0:	d4 40                	aam    0x40
c001cfb2:	d5 39                	aad    0x39
c001cfb4:	83 e8 30             	sub    eax,0x30
c001cfb7:	0f b6 f8             	movzx  edi,al
c001cfba:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001cfbe:	c1 e7 04             	shl    edi,0x4
c001cfc1:	d4 40                	aam    0x40
c001cfc3:	d5 39                	aad    0x39
c001cfc5:	83 e8 30             	sub    eax,0x30
c001cfc8:	0f b6 c0             	movzx  eax,al
c001cfcb:	09 c7                	or     edi,eax
c001cfcd:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001cfd1:	c1 e7 04             	shl    edi,0x4
c001cfd4:	d4 40                	aam    0x40
c001cfd6:	d5 39                	aad    0x39
c001cfd8:	83 e8 30             	sub    eax,0x30
c001cfdb:	0f b6 c0             	movzx  eax,al
c001cfde:	09 c7                	or     edi,eax
c001cfe0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001cfe4:	c1 e7 04             	shl    edi,0x4
c001cfe7:	d4 40                	aam    0x40
c001cfe9:	d5 39                	aad    0x39
c001cfeb:	83 e8 30             	sub    eax,0x30
c001cfee:	0f b6 c0             	movzx  eax,al
c001cff1:	09 c7                	or     edi,eax
c001cff3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001cff7:	8d 41 10             	lea    eax,[ecx+0x10]
c001cffa:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001cffe:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001d002:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001d006:	83 f9 0a             	cmp    ecx,0xa
c001d009:	74 07                	je     c001d012 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001d00b:	47                   	inc    edi
c001d00c:	39 c5                	cmp    ebp,eax
c001d00e:	75 16                	jne    c001d026 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001d010:	89 e8                	mov    eax,ebp
c001d012:	83 f9 0a             	cmp    ecx,0xa
c001d015:	0f 94 c1             	sete   cl
c001d018:	0f b6 c9             	movzx  ecx,cl
c001d01b:	01 c1                	add    ecx,eax
c001d01d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001d022:	75 0f                	jne    c001d033 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001d024:	eb 1c                	jmp    c001d042 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001d026:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d029:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001d02d:	40                   	inc    eax
c001d02e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001d031:	eb cb                	jmp    c001cffe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001d033:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d037:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001d03c:	0f 85 d9 fe ff ff    	jne    c001cf1b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001d042:	80 fb 58             	cmp    bl,0x58
c001d045:	74 10                	je     c001d057 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001d047:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001d04c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001d051:	0f 85 c4 fe ff ff    	jne    c001cf1b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001d057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d05b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d05f:	83 e8 30             	sub    eax,0x30
c001d062:	c1 e0 04             	shl    eax,0x4
c001d065:	83 eb 30             	sub    ebx,0x30
c001d068:	09 d8                	or     eax,ebx
c001d06a:	0f b6 c0             	movzx  eax,al
c001d06d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001d071:	0f 85 a4 fe ff ff    	jne    c001cf1b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001d077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d07b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d07f:	83 e8 30             	sub    eax,0x30
c001d082:	c1 e0 04             	shl    eax,0x4
c001d085:	83 eb 30             	sub    ebx,0x30
c001d088:	09 d8                	or     eax,ebx
c001d08a:	0f b6 c0             	movzx  eax,al
c001d08d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001d091:	0f 85 84 fe ff ff    	jne    c001cf1b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001d097:	50                   	push   eax
c001d098:	50                   	push   eax
c001d099:	8d 44 24 48          	lea    eax,[esp+0x48]
c001d09d:	50                   	push   eax
c001d09e:	56                   	push   esi
c001d09f:	e8 ac 35 fe ff       	call   c0000650 <strcpy>
c001d0a4:	83 c4 10             	add    esp,0x10
c001d0a7:	eb 05                	jmp    c001d0ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001d0a9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d0ac:	31 f6                	xor    esi,esi
c001d0ae:	81 c4 4c 01 00 00    	add    esp,0x14c
c001d0b4:	89 f0                	mov    eax,esi
c001d0b6:	5b                   	pop    ebx
c001d0b7:	5e                   	pop    esi
c001d0b8:	5f                   	pop    edi
c001d0b9:	5d                   	pop    ebp
c001d0ba:	c3                   	ret    
c001d0bb:	90                   	nop

c001d0bc <PCI::checkBus(unsigned char)>:
c001d0bc:	56                   	push   esi
c001d0bd:	53                   	push   ebx
c001d0be:	31 db                	xor    ebx,ebx
c001d0c0:	51                   	push   ecx
c001d0c1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d0c6:	52                   	push   edx
c001d0c7:	53                   	push   ebx
c001d0c8:	43                   	inc    ebx
c001d0c9:	56                   	push   esi
c001d0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ce:	e8 6f 03 00 00       	call   c001d442 <PCI::checkDevice(unsigned char, unsigned char)>
c001d0d3:	83 c4 10             	add    esp,0x10
c001d0d6:	83 fb 20             	cmp    ebx,0x20
c001d0d9:	75 eb                	jne    c001d0c6 <PCI::checkBus(unsigned char)+0xa>
c001d0db:	58                   	pop    eax
c001d0dc:	5b                   	pop    ebx
c001d0dd:	5e                   	pop    esi
c001d0de:	c3                   	ret    
c001d0df:	90                   	nop

c001d0e0 <PCI::foundDevice(PCIDeviceInfo)>:
c001d0e0:	55                   	push   ebp
c001d0e1:	57                   	push   edi
c001d0e2:	56                   	push   esi
c001d0e3:	53                   	push   ebx
c001d0e4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001d0ea:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001d0f2:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001d0f9:	3d ff ff 00 00       	cmp    eax,0xffff
c001d0fe:	0f 84 b6 01 00 00    	je     c001d2ba <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d104:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001d10c:	66 81 fd 06 04       	cmp    bp,0x406
c001d111:	75 32                	jne    c001d145 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001d113:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001d11b:	50                   	push   eax
c001d11c:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001d124:	50                   	push   eax
c001d125:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d12d:	50                   	push   eax
c001d12e:	53                   	push   ebx
c001d12f:	e8 4c fb ff ff       	call   c001cc80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d134:	59                   	pop    ecx
c001d135:	5e                   	pop    esi
c001d136:	0f b6 c0             	movzx  eax,al
c001d139:	50                   	push   eax
c001d13a:	53                   	push   ebx
c001d13b:	e8 7c ff ff ff       	call   c001d0bc <PCI::checkBus(unsigned char)>
c001d140:	e9 15 01 00 00       	jmp    c001d25a <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001d145:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001d14d:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d153:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001d15a:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001d161:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d165:	85 c0                	test   eax,eax
c001d167:	74 34                	je     c001d19d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001d169:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d16c:	85 d2                	test   edx,edx
c001d16e:	74 29                	je     c001d199 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001d170:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d176:	31 cf                	xor    edi,ecx
c001d178:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d17e:	75 19                	jne    c001d199 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001d180:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d186:	75 11                	jne    c001d199 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001d188:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001d18f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001d193:	0f 84 21 01 00 00    	je     c001d2ba <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d199:	8b 00                	mov    eax,DWORD PTR [eax]
c001d19b:	eb c8                	jmp    c001d165 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001d19d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d1a1:	be f4 4b 02 c0       	mov    esi,0xc0024bf4
c001d1a6:	b9 07 00 00 00       	mov    ecx,0x7
c001d1ab:	fc                   	cld    
c001d1ac:	31 d2                	xor    edx,edx
c001d1ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d1b0:	b9 12 00 00 00       	mov    ecx,0x12
c001d1b5:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001d1bc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d1c0:	83 ec 0c             	sub    esp,0xc
c001d1c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d1c5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d1cd:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1d2:	f7 f1                	div    ecx
c001d1d4:	83 c0 30             	add    eax,0x30
c001d1d7:	83 c2 30             	add    edx,0x30
c001d1da:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001d1de:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001d1e6:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001d1ea:	31 d2                	xor    edx,edx
c001d1ec:	f7 f1                	div    ecx
c001d1ee:	83 c0 30             	add    eax,0x30
c001d1f1:	83 c2 30             	add    edx,0x30
c001d1f4:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001d1f8:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001d1fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d200:	50                   	push   eax
c001d201:	e8 49 f8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001d206:	83 c4 10             	add    esp,0x10
c001d209:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001d20f:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001d216:	75 47                	jne    c001d25f <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001d218:	83 ec 0c             	sub    esp,0xc
c001d21b:	68 64 01 00 00       	push   0x164
c001d220:	e8 73 21 ff ff       	call   c000f398 <malloc>
c001d225:	89 04 24             	mov    DWORD PTR [esp],eax
c001d228:	89 c5                	mov    ebp,eax
c001d22a:	e8 35 11 00 00       	call   c001e364 <SATABus::SATABus()>
c001d22f:	58                   	pop    eax
c001d230:	5a                   	pop    edx
c001d231:	55                   	push   ebp
c001d232:	53                   	push   ebx
c001d233:	e8 76 c0 fe ff       	call   c00092ae <Device::addChild(Device*)>
c001d238:	83 ec 1c             	sub    esp,0x1c
c001d23b:	b9 09 00 00 00       	mov    ecx,0x9
c001d240:	89 e7                	mov    edi,esp
c001d242:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d244:	55                   	push   ebp
c001d245:	e8 aa bf fe ff       	call   c00091f4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d24a:	83 c4 30             	add    esp,0x30
c001d24d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d250:	6a 00                	push   0x0
c001d252:	6a 00                	push   0x0
c001d254:	6a 00                	push   0x0
c001d256:	55                   	push   ebp
c001d257:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d25a:	83 c4 10             	add    esp,0x10
c001d25d:	eb 5b                	jmp    c001d2ba <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d25f:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001d265:	75 19                	jne    c001d280 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001d267:	83 ec 0c             	sub    esp,0xc
c001d26a:	68 70 02 00 00       	push   0x270
c001d26f:	e8 24 21 ff ff       	call   c000f398 <malloc>
c001d274:	89 04 24             	mov    DWORD PTR [esp],eax
c001d277:	89 c5                	mov    ebp,eax
c001d279:	e8 94 02 00 00       	call   c001d512 <IDE::IDE()>
c001d27e:	eb af                	jmp    c001d22f <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001d280:	83 ec 0c             	sub    esp,0xc
c001d283:	68 58 01 00 00       	push   0x158
c001d288:	e8 0b 21 ff ff       	call   c000f398 <malloc>
c001d28d:	89 c5                	mov    ebp,eax
c001d28f:	58                   	pop    eax
c001d290:	5a                   	pop    edx
c001d291:	68 da 4b 02 c0       	push   0xc0024bda
c001d296:	55                   	push   ebp
c001d297:	e8 c6 c2 fe ff       	call   c0009562 <DriverlessDevice::DriverlessDevice(char const*)>
c001d29c:	59                   	pop    ecx
c001d29d:	5f                   	pop    edi
c001d29e:	55                   	push   ebp
c001d29f:	53                   	push   ebx
c001d2a0:	e8 09 c0 fe ff       	call   c00092ae <Device::addChild(Device*)>
c001d2a5:	83 ec 1c             	sub    esp,0x1c
c001d2a8:	b9 09 00 00 00       	mov    ecx,0x9
c001d2ad:	89 e7                	mov    edi,esp
c001d2af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d2b1:	55                   	push   ebp
c001d2b2:	e8 3d bf fe ff       	call   c00091f4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d2b7:	83 c4 30             	add    esp,0x30
c001d2ba:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d2c0:	5b                   	pop    ebx
c001d2c1:	5e                   	pop    esi
c001d2c2:	5f                   	pop    edi
c001d2c3:	5d                   	pop    ebp
c001d2c4:	c3                   	ret    
c001d2c5:	90                   	nop

c001d2c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d2c6:	55                   	push   ebp
c001d2c7:	57                   	push   edi
c001d2c8:	56                   	push   esi
c001d2c9:	53                   	push   ebx
c001d2ca:	83 ec 68             	sub    esp,0x68
c001d2cd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d2d4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d2d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2dc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d2e3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001d2e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d2f3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001d2f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2fc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001d301:	6a 0c                	push   0xc
c001d303:	57                   	push   edi
c001d304:	53                   	push   ebx
c001d305:	56                   	push   esi
c001d306:	55                   	push   ebp
c001d307:	e8 c4 f7 ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d30c:	83 c4 20             	add    esp,0x20
c001d30f:	57                   	push   edi
c001d310:	53                   	push   ebx
c001d311:	56                   	push   esi
c001d312:	55                   	push   ebp
c001d313:	e8 ae f8 ff ff       	call   c001cbc6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d318:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001d31d:	57                   	push   edi
c001d31e:	53                   	push   ebx
c001d31f:	56                   	push   esi
c001d320:	55                   	push   ebp
c001d321:	e8 36 f9 ff ff       	call   c001cc5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d326:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d32a:	83 c4 14             	add    esp,0x14
c001d32d:	6a 3c                	push   0x3c
c001d32f:	57                   	push   edi
c001d330:	53                   	push   ebx
c001d331:	56                   	push   esi
c001d332:	55                   	push   ebp
c001d333:	e8 98 f7 ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d338:	0f b6 c4             	movzx  eax,ah
c001d33b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d33f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d343:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d347:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c001d34c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001d352:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001d358:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d35c:	83 c4 20             	add    esp,0x20
c001d35f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d364:	74 30                	je     c001d396 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001d366:	31 c0                	xor    eax,eax
c001d368:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d36c:	7e 28                	jle    c001d396 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001d36e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001d376:	39 cb                	cmp    ebx,ecx
c001d378:	75 19                	jne    c001d393 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001d37a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001d382:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001d386:	75 0b                	jne    c001d393 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001d388:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001d38f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001d393:	40                   	inc    eax
c001d394:	eb d2                	jmp    c001d368 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001d396:	31 d2                	xor    edx,edx
c001d398:	83 ec 0c             	sub    esp,0xc
c001d39b:	57                   	push   edi
c001d39c:	53                   	push   ebx
c001d39d:	56                   	push   esi
c001d39e:	52                   	push   edx
c001d39f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d3a3:	55                   	push   ebp
c001d3a4:	e8 ff f8 ff ff       	call   c001cca8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d3ad:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d3b1:	42                   	inc    edx
c001d3b2:	83 c4 20             	add    esp,0x20
c001d3b5:	83 fa 06             	cmp    edx,0x6
c001d3b8:	75 de                	jne    c001d398 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001d3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3be:	83 ec 0c             	sub    esp,0xc
c001d3c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3c5:	c1 e2 08             	shl    edx,0x8
c001d3c8:	0f b6 c4             	movzx  eax,ah
c001d3cb:	09 d0                	or     eax,edx
c001d3cd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d3d2:	6a 02                	push   0x2
c001d3d4:	57                   	push   edi
c001d3d5:	53                   	push   ebx
c001d3d6:	56                   	push   esi
c001d3d7:	55                   	push   ebp
c001d3d8:	e8 f3 f6 ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3dd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d3e2:	83 c4 20             	add    esp,0x20
c001d3e5:	57                   	push   edi
c001d3e6:	53                   	push   ebx
c001d3e7:	56                   	push   esi
c001d3e8:	55                   	push   ebp
c001d3e9:	e8 22 f8 ff ff       	call   c001cc10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d3ee:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d3f2:	57                   	push   edi
c001d3f3:	53                   	push   ebx
c001d3f4:	56                   	push   esi
c001d3f5:	55                   	push   ebp
c001d3f6:	e8 7f f7 ff ff       	call   c001cb7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d3fb:	b9 09 00 00 00       	mov    ecx,0x9
c001d400:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d405:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001d409:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d40d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d411:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d415:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d419:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d41d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001d421:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	fc                   	cld    
c001d429:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d42d:	89 e7                	mov    edi,esp
c001d42f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d431:	55                   	push   ebp
c001d432:	e8 a9 fc ff ff       	call   c001d0e0 <PCI::foundDevice(PCIDeviceInfo)>
c001d437:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d43d:	5b                   	pop    ebx
c001d43e:	5e                   	pop    esi
c001d43f:	5f                   	pop    edi
c001d440:	5d                   	pop    ebp
c001d441:	c3                   	ret    

c001d442 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d442:	55                   	push   ebp
c001d443:	57                   	push   edi
c001d444:	56                   	push   esi
c001d445:	53                   	push   ebx
c001d446:	83 ec 0c             	sub    esp,0xc
c001d449:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d44e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d453:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d457:	6a 00                	push   0x0
c001d459:	56                   	push   esi
c001d45a:	57                   	push   edi
c001d45b:	55                   	push   ebp
c001d45c:	e8 19 f7 ff ff       	call   c001cb7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d461:	6a 00                	push   0x0
c001d463:	56                   	push   esi
c001d464:	57                   	push   edi
c001d465:	55                   	push   ebp
c001d466:	e8 5b fe ff ff       	call   c001d2c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d46b:	83 c4 20             	add    esp,0x20
c001d46e:	6a 00                	push   0x0
c001d470:	56                   	push   esi
c001d471:	57                   	push   edi
c001d472:	55                   	push   ebp
c001d473:	e8 26 f7 ff ff       	call   c001cb9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d478:	83 c4 10             	add    esp,0x10
c001d47b:	a8 80                	test   al,0x80
c001d47d:	74 2d                	je     c001d4ac <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001d47f:	bb 01 00 00 00       	mov    ebx,0x1
c001d484:	53                   	push   ebx
c001d485:	56                   	push   esi
c001d486:	57                   	push   edi
c001d487:	55                   	push   ebp
c001d488:	e8 ed f6 ff ff       	call   c001cb7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d48d:	83 c4 10             	add    esp,0x10
c001d490:	0f b7 c0             	movzx  eax,ax
c001d493:	3d ff ff 00 00       	cmp    eax,0xffff
c001d498:	74 0c                	je     c001d4a6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d49a:	53                   	push   ebx
c001d49b:	56                   	push   esi
c001d49c:	57                   	push   edi
c001d49d:	55                   	push   ebp
c001d49e:	e8 23 fe ff ff       	call   c001d2c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d4a3:	83 c4 10             	add    esp,0x10
c001d4a6:	43                   	inc    ebx
c001d4a7:	83 fb 08             	cmp    ebx,0x8
c001d4aa:	75 d8                	jne    c001d484 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d4ac:	83 c4 0c             	add    esp,0xc
c001d4af:	5b                   	pop    ebx
c001d4b0:	5e                   	pop    esi
c001d4b1:	5f                   	pop    edi
c001d4b2:	5d                   	pop    ebp
c001d4b3:	c3                   	ret    

c001d4b4 <PCI::detect()>:
c001d4b4:	56                   	push   esi
c001d4b5:	53                   	push   ebx
c001d4b6:	53                   	push   ebx
c001d4b7:	31 db                	xor    ebx,ebx
c001d4b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4bd:	6a 00                	push   0x0
c001d4bf:	6a 00                	push   0x0
c001d4c1:	6a 00                	push   0x0
c001d4c3:	56                   	push   esi
c001d4c4:	e8 d5 f6 ff ff       	call   c001cb9e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d4c9:	83 c4 10             	add    esp,0x10
c001d4cc:	a8 80                	test   al,0x80
c001d4ce:	75 21                	jne    c001d4f1 <PCI::detect()+0x3d>
c001d4d0:	51                   	push   ecx
c001d4d1:	51                   	push   ecx
c001d4d2:	6a 00                	push   0x0
c001d4d4:	56                   	push   esi
c001d4d5:	e8 e2 fb ff ff       	call   c001d0bc <PCI::checkBus(unsigned char)>
c001d4da:	83 c4 10             	add    esp,0x10
c001d4dd:	eb 2a                	jmp    c001d509 <PCI::detect()+0x55>
c001d4df:	52                   	push   edx
c001d4e0:	52                   	push   edx
c001d4e1:	53                   	push   ebx
c001d4e2:	43                   	inc    ebx
c001d4e3:	56                   	push   esi
c001d4e4:	e8 d3 fb ff ff       	call   c001d0bc <PCI::checkBus(unsigned char)>
c001d4e9:	83 c4 10             	add    esp,0x10
c001d4ec:	83 fb 08             	cmp    ebx,0x8
c001d4ef:	74 18                	je     c001d509 <PCI::detect()+0x55>
c001d4f1:	53                   	push   ebx
c001d4f2:	6a 00                	push   0x0
c001d4f4:	6a 00                	push   0x0
c001d4f6:	56                   	push   esi
c001d4f7:	e8 7e f6 ff ff       	call   c001cb7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	0f b7 c0             	movzx  eax,ax
c001d502:	3d ff ff 00 00       	cmp    eax,0xffff
c001d507:	74 d6                	je     c001d4df <PCI::detect()+0x2b>
c001d509:	58                   	pop    eax
c001d50a:	5b                   	pop    ebx
c001d50b:	5e                   	pop    esi
c001d50c:	c3                   	ret    
c001d50d:	90                   	nop

c001d50e <IDE::close(int, int, void*)>:
c001d50e:	83 c8 ff             	or     eax,0xffffffff
c001d511:	c3                   	ret    

c001d512 <IDE::IDE()>:
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d519:	83 ec 08             	sub    esp,0x8
c001d51c:	68 84 4c 02 c0       	push   0xc0024c84
c001d521:	50                   	push   eax
c001d522:	e8 e1 c0 fe ff       	call   c0009608 <HardDiskController::HardDiskController(char const*)>
c001d527:	83 c4 10             	add    esp,0x10
c001d52a:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c001d52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d533:	89 10                	mov    DWORD PTR [eax],edx
c001d535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d539:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d540:	90                   	nop
c001d541:	83 c4 0c             	add    esp,0xc
c001d544:	c3                   	ret    
c001d545:	90                   	nop

c001d546 <IDE::prepareInterrupt(unsigned char)>:
c001d546:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d54b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d54f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d557:	c3                   	ret    

c001d558 <selectDrive(unsigned char, unsigned char)>:
c001d558:	c3                   	ret    
c001d559:	90                   	nop

c001d55a <IDE::getBase(unsigned char)>:
c001d55a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d55f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d563:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d56b:	c3                   	ret    

c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d56c:	55                   	push   ebp
c001d56d:	57                   	push   edi
c001d56e:	56                   	push   esi
c001d56f:	53                   	push   ebx
c001d570:	83 ec 1c             	sub    esp,0x1c
c001d573:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d577:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d57b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d57f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d583:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d586:	80 f9 03             	cmp    cl,0x3
c001d589:	77 4f                	ja     c001d5da <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001d58b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d58f:	0f b6 f2             	movzx  esi,dl
c001d592:	0f b6 db             	movzx  ebx,bl
c001d595:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d598:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d59d:	80 ca 80             	or     dl,0x80
c001d5a0:	52                   	push   edx
c001d5a1:	6a 0c                	push   0xc
c001d5a3:	56                   	push   esi
c001d5a4:	57                   	push   edi
c001d5a5:	e8 c2 ff ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5aa:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d5af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5b3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d5b7:	ee                   	out    dx,al
c001d5b8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d5bd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d5c1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d5c5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d5cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d5d1:	83 c4 2c             	add    esp,0x2c
c001d5d4:	5b                   	pop    ebx
c001d5d5:	5e                   	pop    esi
c001d5d6:	5f                   	pop    edi
c001d5d7:	5d                   	pop    ebp
c001d5d8:	eb 92                	jmp    c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5da:	0f b6 cb             	movzx  ecx,bl
c001d5dd:	83 f9 07             	cmp    ecx,0x7
c001d5e0:	77 12                	ja     c001d5f4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001d5e2:	0f b6 d2             	movzx  edx,dl
c001d5e5:	0f b6 db             	movzx  ebx,bl
c001d5e8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001d5f0:	01 da                	add    edx,ebx
c001d5f2:	eb 2f                	jmp    c001d623 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d5f4:	83 f9 0d             	cmp    ecx,0xd
c001d5f7:	77 13                	ja     c001d60c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001d5f9:	0f b6 d2             	movzx  edx,dl
c001d5fc:	0f b6 db             	movzx  ebx,bl
c001d5ff:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d606:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d60a:	eb 17                	jmp    c001d623 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d60c:	83 f9 15             	cmp    ecx,0x15
c001d60f:	77 13                	ja     c001d624 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001d611:	0f b6 d2             	movzx  edx,dl
c001d614:	0f b6 db             	movzx  ebx,bl
c001d617:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d61f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d623:	ee                   	out    dx,al
c001d624:	83 c4 1c             	add    esp,0x1c
c001d627:	5b                   	pop    ebx
c001d628:	5e                   	pop    esi
c001d629:	5f                   	pop    edi
c001d62a:	5d                   	pop    ebp
c001d62b:	c3                   	ret    

c001d62c <IDE::read(unsigned char, unsigned char)>:
c001d62c:	57                   	push   edi
c001d62d:	56                   	push   esi
c001d62e:	53                   	push   ebx
c001d62f:	83 ec 10             	sub    esp,0x10
c001d632:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d636:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d63a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d63e:	8d 42 f8             	lea    eax,[edx-0x8]
c001d641:	3c 03                	cmp    al,0x3
c001d643:	77 48                	ja     c001d68d <IDE::read(unsigned char, unsigned char)+0x61>
c001d645:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d649:	0f b6 f1             	movzx  esi,cl
c001d64c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001d64f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001d654:	0c 80                	or     al,0x80
c001d656:	50                   	push   eax
c001d657:	6a 0c                	push   0xc
c001d659:	56                   	push   esi
c001d65a:	53                   	push   ebx
c001d65b:	e8 0c ff ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d660:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d664:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001d669:	0f b6 d2             	movzx  edx,dl
c001d66c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d670:	ec                   	in     al,dx
c001d671:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d675:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001d67a:	52                   	push   edx
c001d67b:	6a 0c                	push   0xc
c001d67d:	56                   	push   esi
c001d67e:	53                   	push   ebx
c001d67f:	e8 e8 fe ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d684:	83 c4 20             	add    esp,0x20
c001d687:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d68b:	eb 4c                	jmp    c001d6d9 <IDE::read(unsigned char, unsigned char)+0xad>
c001d68d:	0f b6 f2             	movzx  esi,dl
c001d690:	83 fe 07             	cmp    esi,0x7
c001d693:	77 12                	ja     c001d6a7 <IDE::read(unsigned char, unsigned char)+0x7b>
c001d695:	0f b6 c9             	movzx  ecx,cl
c001d698:	0f b6 d2             	movzx  edx,dl
c001d69b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001d6a3:	01 c2                	add    edx,eax
c001d6a5:	eb 31                	jmp    c001d6d8 <IDE::read(unsigned char, unsigned char)+0xac>
c001d6a7:	83 fe 0d             	cmp    esi,0xd
c001d6aa:	77 13                	ja     c001d6bf <IDE::read(unsigned char, unsigned char)+0x93>
c001d6ac:	0f b6 c9             	movzx  ecx,cl
c001d6af:	0f b6 d2             	movzx  edx,dl
c001d6b2:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001d6b9:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d6bd:	eb 19                	jmp    c001d6d8 <IDE::read(unsigned char, unsigned char)+0xac>
c001d6bf:	31 c0                	xor    eax,eax
c001d6c1:	83 fe 15             	cmp    esi,0x15
c001d6c4:	77 13                	ja     c001d6d9 <IDE::read(unsigned char, unsigned char)+0xad>
c001d6c6:	0f b6 c9             	movzx  ecx,cl
c001d6c9:	0f b6 d2             	movzx  edx,dl
c001d6cc:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001d6d4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d6d8:	ec                   	in     al,dx
c001d6d9:	83 c4 10             	add    esp,0x10
c001d6dc:	5b                   	pop    ebx
c001d6dd:	5e                   	pop    esi
c001d6de:	5f                   	pop    edi
c001d6df:	c3                   	ret    

c001d6e0 <IDE::waitInterrupt(unsigned char)>:
c001d6e0:	55                   	push   ebp
c001d6e1:	57                   	push   edi
c001d6e2:	56                   	push   esi
c001d6e3:	53                   	push   ebx
c001d6e4:	31 db                	xor    ebx,ebx
c001d6e6:	83 ec 0c             	sub    esp,0xc
c001d6e9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d6ed:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d6f2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d6fa:	89 e8                	mov    eax,ebp
c001d6fc:	84 c0                	test   al,al
c001d6fe:	75 30                	jne    c001d730 <IDE::waitInterrupt(unsigned char)+0x50>
c001d700:	50                   	push   eax
c001d701:	6a 0c                	push   0xc
c001d703:	56                   	push   esi
c001d704:	57                   	push   edi
c001d705:	e8 22 ff ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001d70a:	83 c4 10             	add    esp,0x10
c001d70d:	a8 01                	test   al,0x1
c001d70f:	75 27                	jne    c001d738 <IDE::waitInterrupt(unsigned char)+0x58>
c001d711:	f6 c3 04             	test   bl,0x4
c001d714:	75 12                	jne    c001d728 <IDE::waitInterrupt(unsigned char)+0x48>
c001d716:	83 fb 32             	cmp    ebx,0x32
c001d719:	7e 0d                	jle    c001d728 <IDE::waitInterrupt(unsigned char)+0x48>
c001d71b:	83 ec 0c             	sub    esp,0xc
c001d71e:	6a 64                	push   0x64
c001d720:	e8 c3 8d ff ff       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001d725:	83 c4 10             	add    esp,0x10
c001d728:	83 fb 3c             	cmp    ebx,0x3c
c001d72b:	74 0b                	je     c001d738 <IDE::waitInterrupt(unsigned char)+0x58>
c001d72d:	43                   	inc    ebx
c001d72e:	eb c2                	jmp    c001d6f2 <IDE::waitInterrupt(unsigned char)+0x12>
c001d730:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d738:	83 c4 0c             	add    esp,0xc
c001d73b:	89 e8                	mov    eax,ebp
c001d73d:	5b                   	pop    ebx
c001d73e:	5e                   	pop    esi
c001d73f:	5f                   	pop    edi
c001d740:	5d                   	pop    ebp
c001d741:	c3                   	ret    

c001d742 <ideChannel0IRQHandler(regs*, void*)>:
c001d742:	83 ec 10             	sub    esp,0x10
c001d745:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d749:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d750:	6a 07                	push   0x7
c001d752:	6a 00                	push   0x0
c001d754:	50                   	push   eax
c001d755:	e8 d2 fe ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001d75a:	83 c4 1c             	add    esp,0x1c
c001d75d:	c3                   	ret    

c001d75e <ideChannel1IRQHandler(regs*, void*)>:
c001d75e:	83 ec 10             	sub    esp,0x10
c001d761:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d765:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d76c:	6a 07                	push   0x7
c001d76e:	6a 01                	push   0x1
c001d770:	50                   	push   eax
c001d771:	e8 b6 fe ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001d776:	83 c4 1c             	add    esp,0x1c
c001d779:	c3                   	ret    

c001d77a <IDE::enableIRQs(unsigned char, bool)>:
c001d77a:	57                   	push   edi
c001d77b:	b8 02 00 00 00       	mov    eax,0x2
c001d780:	56                   	push   esi
c001d781:	53                   	push   ebx
c001d782:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d78b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d78f:	74 02                	je     c001d793 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001d791:	31 c0                	xor    eax,eax
c001d793:	0f b6 db             	movzx  ebx,bl
c001d796:	bf 04 00 00 00       	mov    edi,0x4
c001d79b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001d7a2:	50                   	push   eax
c001d7a3:	6a 0c                	push   0xc
c001d7a5:	53                   	push   ebx
c001d7a6:	56                   	push   esi
c001d7a7:	e8 c0 fd ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ac:	83 c4 10             	add    esp,0x10
c001d7af:	50                   	push   eax
c001d7b0:	6a 0c                	push   0xc
c001d7b2:	53                   	push   ebx
c001d7b3:	56                   	push   esi
c001d7b4:	e8 73 fe ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001d7b9:	83 c4 10             	add    esp,0x10
c001d7bc:	4f                   	dec    edi
c001d7bd:	75 f0                	jne    c001d7af <IDE::enableIRQs(unsigned char, bool)+0x35>
c001d7bf:	5b                   	pop    ebx
c001d7c0:	5e                   	pop    esi
c001d7c1:	5f                   	pop    edi
c001d7c2:	c3                   	ret    
c001d7c3:	90                   	nop

c001d7c4 <IDE::open(int, int, void*)>:
c001d7c4:	55                   	push   ebp
c001d7c5:	57                   	push   edi
c001d7c6:	56                   	push   esi
c001d7c7:	53                   	push   ebx
c001d7c8:	83 ec 1c             	sub    esp,0x1c
c001d7cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7cf:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d7d6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d7df:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d7e8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d7ef:	0f 85 80 02 00 00    	jne    c001da75 <IDE::open(int, int, void*)+0x2b1>
c001d7f5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d7fb:	a8 70                	test   al,0x70
c001d7fd:	75 44                	jne    c001d843 <IDE::open(int, int, void*)+0x7f>
c001d7ff:	ba 20 84 00 00       	mov    edx,0x8420
c001d804:	0f a3 c2             	bt     edx,eax
c001d807:	73 3a                	jae    c001d843 <IDE::open(int, int, void*)+0x7f>
c001d809:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d80f:	83 ec 0c             	sub    esp,0xc
c001d812:	83 e0 fc             	and    eax,0xfffffffc
c001d815:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d81c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d822:	83 e0 fc             	and    eax,0xfffffffc
c001d825:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d82c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d832:	83 e0 fc             	and    eax,0xfffffffc
c001d835:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d83c:	68 25 25 02 c0       	push   0xc0022525
c001d841:	eb 60                	jmp    c001d8a3 <IDE::open(int, int, void*)+0xdf>
c001d843:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d84d:	be 64 00 00 00       	mov    esi,0x64
c001d852:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d85c:	57                   	push   edi
c001d85d:	57                   	push   edi
c001d85e:	68 9c 4c 02 c0       	push   0xc0024c9c
c001d863:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001d867:	57                   	push   edi
c001d868:	e8 e3 2d fe ff       	call   c0000650 <strcpy>
c001d86d:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001d874:	31 d2                	xor    edx,edx
c001d876:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d879:	89 c8                	mov    eax,ecx
c001d87b:	f7 f6                	div    esi
c001d87d:	be 0a 00 00 00       	mov    esi,0xa
c001d882:	31 d2                	xor    edx,edx
c001d884:	83 c0 30             	add    eax,0x30
c001d887:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d88b:	89 c8                	mov    eax,ecx
c001d88d:	f7 f6                	div    esi
c001d88f:	89 d1                	mov    ecx,edx
c001d891:	31 d2                	xor    edx,edx
c001d893:	f7 f6                	div    esi
c001d895:	83 c1 30             	add    ecx,0x30
c001d898:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001d89c:	83 c2 30             	add    edx,0x30
c001d89f:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001d8a3:	e8 a7 f1 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001d8a8:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d8af:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d8b4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d8bb:	83 c4 10             	add    esp,0x10
c001d8be:	89 fa                	mov    edx,edi
c001d8c0:	c1 e1 10             	shl    ecx,0x10
c001d8c3:	c1 e0 0b             	shl    eax,0xb
c001d8c6:	09 c1                	or     ecx,eax
c001d8c8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d8cf:	c1 e0 08             	shl    eax,0x8
c001d8d2:	09 c1                	or     ecx,eax
c001d8d4:	89 c8                	mov    eax,ecx
c001d8d6:	0d 08 00 00 80       	or     eax,0x80000008
c001d8db:	ef                   	out    dx,eax
c001d8dc:	be fc 0c 00 00       	mov    esi,0xcfc
c001d8e1:	89 f2                	mov    edx,esi
c001d8e3:	ed                   	in     eax,dx
c001d8e4:	c1 e8 10             	shr    eax,0x10
c001d8e7:	3d ff ff 00 00       	cmp    eax,0xffff
c001d8ec:	0f 84 e1 00 00 00    	je     c001d9d3 <IDE::open(int, int, void*)+0x20f>
c001d8f2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d8f8:	89 fa                	mov    edx,edi
c001d8fa:	89 c8                	mov    eax,ecx
c001d8fc:	ef                   	out    dx,eax
c001d8fd:	b0 fe                	mov    al,0xfe
c001d8ff:	89 f2                	mov    edx,esi
c001d901:	ee                   	out    dx,al
c001d902:	89 c8                	mov    eax,ecx
c001d904:	89 fa                	mov    edx,edi
c001d906:	ef                   	out    dx,eax
c001d907:	89 f2                	mov    edx,esi
c001d909:	ed                   	in     eax,dx
c001d90a:	3c fe                	cmp    al,0xfe
c001d90c:	0f 85 83 00 00 00    	jne    c001d995 <IDE::open(int, int, void*)+0x1d1>
c001d912:	83 ec 0c             	sub    esp,0xc
c001d915:	68 5b 25 02 c0       	push   0xc002255b
c001d91a:	e8 30 f1 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001d91f:	c7 04 24 a2 4c 02 c0 	mov    DWORD PTR [esp],0xc0024ca2
c001d926:	e8 23 96 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d92b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d935:	c7 04 24 8c 27 02 c0 	mov    DWORD PTR [esp],0xc002278c
c001d93c:	e8 0e f1 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001d941:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d948:	89 fa                	mov    edx,edi
c001d94a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d951:	c1 e1 10             	shl    ecx,0x10
c001d954:	c1 e0 08             	shl    eax,0x8
c001d957:	09 c1                	or     ecx,eax
c001d959:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d960:	c1 e0 0b             	shl    eax,0xb
c001d963:	09 c1                	or     ecx,eax
c001d965:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d96b:	89 c8                	mov    eax,ecx
c001d96d:	ef                   	out    dx,eax
c001d96e:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001d974:	89 f2                	mov    edx,esi
c001d976:	89 e8                	mov    eax,ebp
c001d978:	ee                   	out    dx,al
c001d979:	89 c8                	mov    eax,ecx
c001d97b:	89 fa                	mov    edx,edi
c001d97d:	ef                   	out    dx,eax
c001d97e:	89 f2                	mov    edx,esi
c001d980:	ed                   	in     eax,dx
c001d981:	0f b6 c0             	movzx  eax,al
c001d984:	83 c4 10             	add    esp,0x10
c001d987:	39 e8                	cmp    eax,ebp
c001d989:	74 58                	je     c001d9e3 <IDE::open(int, int, void*)+0x21f>
c001d98b:	83 ec 0c             	sub    esp,0xc
c001d98e:	68 b7 4c 02 c0       	push   0xc0024cb7
c001d993:	eb 46                	jmp    c001d9db <IDE::open(int, int, void*)+0x217>
c001d995:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001d99e:	75 29                	jne    c001d9c9 <IDE::open(int, int, void*)+0x205>
c001d9a0:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001d9a7:	3d 8a 00 00 00       	cmp    eax,0x8a
c001d9ac:	74 05                	je     c001d9b3 <IDE::open(int, int, void*)+0x1ef>
c001d9ae:	83 c0 80             	add    eax,0xffffff80
c001d9b1:	75 16                	jne    c001d9c9 <IDE::open(int, int, void*)+0x205>
c001d9b3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d9ba:	83 ec 0c             	sub    esp,0xc
c001d9bd:	68 3d 36 02 c0       	push   0xc002363d
c001d9c2:	e8 88 f0 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001d9c7:	eb 17                	jmp    c001d9e0 <IDE::open(int, int, void*)+0x21c>
c001d9c9:	83 ec 0c             	sub    esp,0xc
c001d9cc:	68 bf 4c 02 c0       	push   0xc0024cbf
c001d9d1:	eb 08                	jmp    c001d9db <IDE::open(int, int, void*)+0x217>
c001d9d3:	83 ec 0c             	sub    esp,0xc
c001d9d6:	68 f0 4c 02 c0       	push   0xc0024cf0
c001d9db:	e8 fe 1c ff ff       	call   c000f6de <KePanic(char const*)>
c001d9e0:	83 c4 10             	add    esp,0x10
c001d9e3:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001d9ea:	0f 84 bf 00 00 00    	je     c001daaf <IDE::open(int, int, void*)+0x2eb>
c001d9f0:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001d9f6:	83 ec 0c             	sub    esp,0xc
c001d9f9:	83 e0 fc             	and    eax,0xfffffffc
c001d9fc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001da03:	83 c0 08             	add    eax,0x8
c001da06:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001da0d:	68 1a 4d 02 c0       	push   0xc0024d1a
c001da12:	e8 37 95 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001da17:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001da1e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da25:	50                   	push   eax
c001da26:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da2d:	50                   	push   eax
c001da2e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001da35:	50                   	push   eax
c001da36:	ff 35 40 e4 02 c0    	push   DWORD PTR ds:0xc002e440
c001da3c:	e8 8f f0 ff ff       	call   c001cad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da41:	83 c4 18             	add    esp,0x18
c001da44:	83 c8 07             	or     eax,0x7
c001da47:	0f b7 c0             	movzx  eax,ax
c001da4a:	50                   	push   eax
c001da4b:	6a 04                	push   0x4
c001da4d:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da54:	50                   	push   eax
c001da55:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da5c:	50                   	push   eax
c001da5d:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001da64:	50                   	push   eax
c001da65:	ff 35 40 e4 02 c0    	push   DWORD PTR ds:0xc002e440
c001da6b:	e8 9c f2 ff ff       	call   c001cd0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001da70:	83 c4 20             	add    esp,0x20
c001da73:	eb 3a                	jmp    c001daaf <IDE::open(int, int, void*)+0x2eb>
c001da75:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001da7c:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001da82:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001da89:	05 06 02 00 00       	add    eax,0x206
c001da8e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001da95:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001da9c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001daa3:	05 06 02 00 00       	add    eax,0x206
c001daa8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001daaf:	83 ec 0c             	sub    esp,0xc
c001dab2:	68 e3 2c 02 c0       	push   0xc0022ce3
c001dab7:	e8 93 ef fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dabc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001dac2:	83 c4 10             	add    esp,0x10
c001dac5:	89 c2                	mov    edx,eax
c001dac7:	83 e2 0f             	and    edx,0xf
c001daca:	83 fa 08             	cmp    edx,0x8
c001dacd:	75 0a                	jne    c001dad9 <IDE::open(int, int, void*)+0x315>
c001dacf:	83 e8 02             	sub    eax,0x2
c001dad2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dad9:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dadf:	89 c2                	mov    edx,eax
c001dae1:	83 e2 0f             	and    edx,0xf
c001dae4:	83 fa 08             	cmp    edx,0x8
c001dae7:	75 0a                	jne    c001daf3 <IDE::open(int, int, void*)+0x32f>
c001dae9:	83 e8 02             	sub    eax,0x2
c001daec:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001daf3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001dafa:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001db01:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db04:	89 d0                	mov    eax,edx
c001db06:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db0a:	8d 7a 01             	lea    edi,[edx+0x1]
c001db0d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001db11:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001db15:	83 e1 3f             	and    ecx,0x3f
c001db18:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001db1c:	89 f9                	mov    ecx,edi
c001db1e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001db25:	8d 78 02             	lea    edi,[eax+0x2]
c001db28:	0f b6 c9             	movzx  ecx,cl
c001db2b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db2e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001db32:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db36:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001db3a:	83 e2 3f             	and    edx,0x3f
c001db3d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001db41:	89 f9                	mov    ecx,edi
c001db43:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001db49:	8d 78 03             	lea    edi,[eax+0x3]
c001db4c:	0f b6 d1             	movzx  edx,cl
c001db4f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db52:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001db56:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db5a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001db5e:	83 e1 3f             	and    ecx,0x3f
c001db61:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001db65:	89 fa                	mov    edx,edi
c001db67:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001db6d:	8d 78 04             	lea    edi,[eax+0x4]
c001db70:	0f b6 ca             	movzx  ecx,dl
c001db73:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db76:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001db7a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db7e:	89 fa                	mov    edx,edi
c001db80:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001db86:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001db8a:	83 e2 3f             	and    edx,0x3f
c001db8d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001db91:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001db98:	66 85 f6             	test   si,si
c001db9b:	74 24                	je     c001dbc1 <IDE::open(int, int, void*)+0x3fd>
c001db9d:	89 f9                	mov    ecx,edi
c001db9f:	83 c0 05             	add    eax,0x5
c001dba2:	0f b6 d1             	movzx  edx,cl
c001dba5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dba8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbac:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dbb0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dbb6:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001dbba:	83 e0 3f             	and    eax,0x3f
c001dbbd:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001dbc1:	83 ec 0c             	sub    esp,0xc
c001dbc4:	68 32 4d 02 c0       	push   0xc0024d32
c001dbc9:	e8 81 ee fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dbce:	58                   	pop    eax
c001dbcf:	5a                   	pop    edx
c001dbd0:	6a 00                	push   0x0
c001dbd2:	53                   	push   ebx
c001dbd3:	e8 6e f9 ff ff       	call   c001d546 <IDE::prepareInterrupt(unsigned char)>
c001dbd8:	59                   	pop    ecx
c001dbd9:	5e                   	pop    esi
c001dbda:	6a 01                	push   0x1
c001dbdc:	53                   	push   ebx
c001dbdd:	e8 64 f9 ff ff       	call   c001d546 <IDE::prepareInterrupt(unsigned char)>
c001dbe2:	c7 04 24 81 45 02 c0 	mov    DWORD PTR [esp],0xc0024581
c001dbe9:	e8 61 ee fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dbee:	83 c4 0c             	add    esp,0xc
c001dbf1:	6a 00                	push   0x0
c001dbf3:	6a 00                	push   0x0
c001dbf5:	53                   	push   ebx
c001dbf6:	e8 7f fb ff ff       	call   c001d77a <IDE::enableIRQs(unsigned char, bool)>
c001dbfb:	83 c4 0c             	add    esp,0xc
c001dbfe:	6a 00                	push   0x0
c001dc00:	6a 01                	push   0x1
c001dc02:	53                   	push   ebx
c001dc03:	e8 72 fb ff ff       	call   c001d77a <IDE::enableIRQs(unsigned char, bool)>
c001dc08:	c7 04 24 34 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d34
c001dc0f:	e8 3b ee fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dc14:	83 c4 10             	add    esp,0x10
c001dc17:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dc1e:	74 3c                	je     c001dc5c <IDE::open(int, int, void*)+0x498>
c001dc20:	83 ec 0c             	sub    esp,0xc
c001dc23:	53                   	push   ebx
c001dc24:	6a 01                	push   0x1
c001dc26:	68 42 d7 01 c0       	push   0xc001d742
c001dc2b:	6a 0e                	push   0xe
c001dc2d:	53                   	push   ebx
c001dc2e:	e8 27 b6 fe ff       	call   c000925a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc33:	83 c4 14             	add    esp,0x14
c001dc36:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dc3c:	53                   	push   ebx
c001dc3d:	6a 01                	push   0x1
c001dc3f:	68 5e d7 01 c0       	push   0xc001d75e
c001dc44:	6a 0f                	push   0xf
c001dc46:	53                   	push   ebx
c001dc47:	e8 0e b6 fe ff       	call   c000925a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc4c:	83 c4 14             	add    esp,0x14
c001dc4f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dc55:	68 92 29 02 c0       	push   0xc0022992
c001dc5a:	eb 40                	jmp    c001dc9c <IDE::open(int, int, void*)+0x4d8>
c001dc5c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dc66:	83 ec 0c             	sub    esp,0xc
c001dc69:	53                   	push   ebx
c001dc6a:	6a 00                	push   0x0
c001dc6c:	68 42 d7 01 c0       	push   0xc001d742
c001dc71:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dc77:	53                   	push   ebx
c001dc78:	e8 dd b5 fe ff       	call   c000925a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc7d:	83 c4 14             	add    esp,0x14
c001dc80:	53                   	push   ebx
c001dc81:	6a 00                	push   0x0
c001dc83:	68 5e d7 01 c0       	push   0xc001d75e
c001dc88:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dc8e:	53                   	push   ebx
c001dc8f:	e8 c6 b5 fe ff       	call   c000925a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc94:	83 c4 14             	add    esp,0x14
c001dc97:	68 2c 36 02 c0       	push   0xc002362c
c001dc9c:	e8 ae ed fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dca1:	83 c4 10             	add    esp,0x10
c001dca4:	83 ec 0c             	sub    esp,0xc
c001dca7:	68 36 4d 02 c0       	push   0xc0024d36
c001dcac:	e8 9e ed fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dcb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dcb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcb6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dcb9:	c7 04 24 45 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d45
c001dcc0:	e8 8a ed fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dcc5:	83 c4 0c             	add    esp,0xc
c001dcc8:	6a 07                	push   0x7
c001dcca:	6a 00                	push   0x0
c001dccc:	53                   	push   ebx
c001dccd:	e8 5a f9 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001dcd2:	83 c4 0c             	add    esp,0xc
c001dcd5:	6a 07                	push   0x7
c001dcd7:	6a 01                	push   0x1
c001dcd9:	53                   	push   ebx
c001dcda:	e8 4d f9 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001dcdf:	c7 04 24 2c 34 02 c0 	mov    DWORD PTR [esp],0xc002342c
c001dce6:	e8 64 ed fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dceb:	83 c4 0c             	add    esp,0xc
c001dcee:	6a 01                	push   0x1
c001dcf0:	6a 00                	push   0x0
c001dcf2:	53                   	push   ebx
c001dcf3:	e8 82 fa ff ff       	call   c001d77a <IDE::enableIRQs(unsigned char, bool)>
c001dcf8:	83 c4 0c             	add    esp,0xc
c001dcfb:	6a 01                	push   0x1
c001dcfd:	6a 01                	push   0x1
c001dcff:	53                   	push   ebx
c001dd00:	e8 75 fa ff ff       	call   c001d77a <IDE::enableIRQs(unsigned char, bool)>
c001dd05:	c7 04 24 39 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d39
c001dd0c:	e8 3e ed fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001dd11:	83 c4 2c             	add    esp,0x2c
c001dd14:	31 c0                	xor    eax,eax
c001dd16:	5b                   	pop    ebx
c001dd17:	5e                   	pop    esi
c001dd18:	5f                   	pop    edi
c001dd19:	5d                   	pop    ebp
c001dd1a:	c3                   	ret    
c001dd1b:	90                   	nop

c001dd1c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dd1c:	55                   	push   ebp
c001dd1d:	57                   	push   edi
c001dd1e:	56                   	push   esi
c001dd1f:	53                   	push   ebx
c001dd20:	83 ec 1c             	sub    esp,0x1c
c001dd23:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001dd27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd2f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dd33:	8d 42 f8             	lea    eax,[edx-0x8]
c001dd36:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd3a:	3c 03                	cmp    al,0x3
c001dd3c:	77 5a                	ja     c001dd98 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001dd3e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd42:	0f b6 db             	movzx  ebx,bl
c001dd45:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd49:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dd4c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd51:	0c 80                	or     al,0x80
c001dd53:	50                   	push   eax
c001dd54:	6a 0c                	push   0xc
c001dd56:	53                   	push   ebx
c001dd57:	56                   	push   esi
c001dd58:	e8 0f f8 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd61:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001dd66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd6a:	0f b6 d2             	movzx  edx,dl
c001dd6d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001dd71:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd73:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd78:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dd7c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dd80:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dd88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dd8c:	83 c4 2c             	add    esp,0x2c
c001dd8f:	5b                   	pop    ebx
c001dd90:	5e                   	pop    esi
c001dd91:	5f                   	pop    edi
c001dd92:	5d                   	pop    ebp
c001dd93:	e9 d4 f7 ff ff       	jmp    c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd98:	0f b6 c2             	movzx  eax,dl
c001dd9b:	83 f8 07             	cmp    eax,0x7
c001dd9e:	77 12                	ja     c001ddb2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001dda0:	0f b6 db             	movzx  ebx,bl
c001dda3:	0f b6 c2             	movzx  eax,dl
c001dda6:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ddae:	01 c2                	add    edx,eax
c001ddb0:	eb 2f                	jmp    c001dde1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ddb2:	83 f8 0d             	cmp    eax,0xd
c001ddb5:	77 13                	ja     c001ddca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ddb7:	0f b6 db             	movzx  ebx,bl
c001ddba:	0f b6 d2             	movzx  edx,dl
c001ddbd:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ddc4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ddc8:	eb 17                	jmp    c001dde1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ddca:	83 f8 15             	cmp    eax,0x15
c001ddcd:	77 14                	ja     c001dde3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ddcf:	0f b6 db             	movzx  ebx,bl
c001ddd2:	0f b6 d2             	movzx  edx,dl
c001ddd5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001dddd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001dde1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dde3:	83 c4 1c             	add    esp,0x1c
c001dde6:	5b                   	pop    ebx
c001dde7:	5e                   	pop    esi
c001dde8:	5f                   	pop    edi
c001dde9:	5d                   	pop    ebp
c001ddea:	c3                   	ret    
c001ddeb:	90                   	nop

c001ddec <IDE::detect()>:
c001ddec:	55                   	push   ebp
c001dded:	57                   	push   edi
c001ddee:	56                   	push   esi
c001ddef:	53                   	push   ebx
c001ddf0:	81 ec 28 02 00 00    	sub    esp,0x228
c001ddf6:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ddfd:	68 3b 4d 02 c0       	push   0xc0024d3b
c001de02:	e8 48 ec fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001de07:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001de0d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001de11:	83 c4 10             	add    esp,0x10
c001de14:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001de19:	0f 85 26 04 00 00    	jne    c001e245 <IDE::detect()+0x459>
c001de1f:	83 ec 0c             	sub    esp,0xc
c001de22:	31 f6                	xor    esi,esi
c001de24:	68 3e 4d 02 c0       	push   0xc0024d3e
c001de29:	31 ff                	xor    edi,edi
c001de2b:	e8 1f ec fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001de30:	83 c4 10             	add    esp,0x10
c001de33:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de3a:	83 ec 0c             	sub    esp,0xc
c001de3d:	68 41 4d 02 c0       	push   0xc0024d41
c001de42:	e8 08 ec fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001de47:	83 c4 10             	add    esp,0x10
c001de4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de51:	83 ec 0c             	sub    esp,0xc
c001de54:	31 ed                	xor    ebp,ebp
c001de56:	68 44 4d 02 c0       	push   0xc0024d44
c001de5b:	e8 ef eb fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001de60:	89 f8                	mov    eax,edi
c001de62:	c1 e0 06             	shl    eax,0x6
c001de65:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001de6d:	c7 04 24 47 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d47
c001de74:	e8 d6 eb fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001de79:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001de7d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001de81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de85:	c1 e0 04             	shl    eax,0x4
c001de88:	83 c8 a0             	or     eax,0xffffffa0
c001de8b:	0f b6 c0             	movzx  eax,al
c001de8e:	50                   	push   eax
c001de8f:	6a 06                	push   0x6
c001de91:	56                   	push   esi
c001de92:	53                   	push   ebx
c001de93:	e8 d4 f6 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de98:	83 c4 1c             	add    esp,0x1c
c001de9b:	6a 0c                	push   0xc
c001de9d:	56                   	push   esi
c001de9e:	53                   	push   ebx
c001de9f:	e8 88 f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001dea4:	83 c4 0c             	add    esp,0xc
c001dea7:	6a 0c                	push   0xc
c001dea9:	56                   	push   esi
c001deaa:	53                   	push   ebx
c001deab:	e8 7c f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001deb0:	83 c4 0c             	add    esp,0xc
c001deb3:	6a 0c                	push   0xc
c001deb5:	56                   	push   esi
c001deb6:	53                   	push   ebx
c001deb7:	e8 70 f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001debc:	83 c4 0c             	add    esp,0xc
c001debf:	6a 0c                	push   0xc
c001dec1:	56                   	push   esi
c001dec2:	53                   	push   ebx
c001dec3:	e8 64 f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001dec8:	c7 04 24 4a 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d4a
c001decf:	e8 7b eb fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001ded4:	68 ec 00 00 00       	push   0xec
c001ded9:	6a 07                	push   0x7
c001dedb:	56                   	push   esi
c001dedc:	53                   	push   ebx
c001dedd:	e8 8a f6 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dee2:	83 c4 1c             	add    esp,0x1c
c001dee5:	6a 0c                	push   0xc
c001dee7:	56                   	push   esi
c001dee8:	53                   	push   ebx
c001dee9:	e8 3e f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001deee:	83 c4 0c             	add    esp,0xc
c001def1:	6a 0c                	push   0xc
c001def3:	56                   	push   esi
c001def4:	53                   	push   ebx
c001def5:	e8 32 f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001defa:	83 c4 0c             	add    esp,0xc
c001defd:	6a 0c                	push   0xc
c001deff:	56                   	push   esi
c001df00:	53                   	push   ebx
c001df01:	e8 26 f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001df06:	83 c4 0c             	add    esp,0xc
c001df09:	6a 0c                	push   0xc
c001df0b:	56                   	push   esi
c001df0c:	53                   	push   ebx
c001df0d:	e8 1a f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001df12:	c7 04 24 4d 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d4d
c001df19:	e8 31 eb fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001df1e:	83 c4 0c             	add    esp,0xc
c001df21:	6a 0c                	push   0xc
c001df23:	56                   	push   esi
c001df24:	53                   	push   ebx
c001df25:	e8 02 f7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001df2a:	83 c4 10             	add    esp,0x10
c001df2d:	84 c0                	test   al,al
c001df2f:	75 1f                	jne    c001df50 <IDE::detect()+0x164>
c001df31:	83 ec 0c             	sub    esp,0xc
c001df34:	68 50 4d 02 c0       	push   0xc0024d50
c001df39:	e8 11 eb fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001df3e:	e9 e0 02 00 00       	jmp    c001e223 <IDE::detect()+0x437>
c001df43:	a8 80                	test   al,0x80
c001df45:	74 21                	je     c001df68 <IDE::detect()+0x17c>
c001df47:	45                   	inc    ebp
c001df48:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001df4e:	7f 1e                	jg     c001df6e <IDE::detect()+0x182>
c001df50:	50                   	push   eax
c001df51:	6a 0c                	push   0xc
c001df53:	56                   	push   esi
c001df54:	53                   	push   ebx
c001df55:	e8 d2 f6 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001df5a:	83 c4 10             	add    esp,0x10
c001df5d:	a8 01                	test   al,0x1
c001df5f:	74 e2                	je     c001df43 <IDE::detect()+0x157>
c001df61:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001df66:	eb 22                	jmp    c001df8a <IDE::detect()+0x19e>
c001df68:	a8 08                	test   al,0x8
c001df6a:	74 db                	je     c001df47 <IDE::detect()+0x15b>
c001df6c:	eb 17                	jmp    c001df85 <IDE::detect()+0x199>
c001df6e:	83 ec 0c             	sub    esp,0xc
c001df71:	6a 32                	push   0x32
c001df73:	e8 70 85 ff ff       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001df78:	83 c4 10             	add    esp,0x10
c001df7b:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001df81:	75 cd                	jne    c001df50 <IDE::detect()+0x164>
c001df83:	eb dc                	jmp    c001df61 <IDE::detect()+0x175>
c001df85:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001df8a:	83 ec 0c             	sub    esp,0xc
c001df8d:	68 53 4d 02 c0       	push   0xc0024d53
c001df92:	e8 b8 ea fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001df97:	83 c4 10             	add    esp,0x10
c001df9a:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001df9f:	74 57                	je     c001dff8 <IDE::detect()+0x20c>
c001dfa1:	50                   	push   eax
c001dfa2:	6a 04                	push   0x4
c001dfa4:	56                   	push   esi
c001dfa5:	53                   	push   ebx
c001dfa6:	e8 81 f6 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001dfab:	83 c4 0c             	add    esp,0xc
c001dfae:	6a 05                	push   0x5
c001dfb0:	56                   	push   esi
c001dfb1:	53                   	push   ebx
c001dfb2:	89 c5                	mov    ebp,eax
c001dfb4:	e8 73 f6 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001dfb9:	89 e9                	mov    ecx,ebp
c001dfbb:	83 c4 10             	add    esp,0x10
c001dfbe:	0f b6 e9             	movzx  ebp,cl
c001dfc1:	83 fd 14             	cmp    ebp,0x14
c001dfc4:	75 04                	jne    c001dfca <IDE::detect()+0x1de>
c001dfc6:	3c eb                	cmp    al,0xeb
c001dfc8:	74 11                	je     c001dfdb <IDE::detect()+0x1ef>
c001dfca:	83 fd 69             	cmp    ebp,0x69
c001dfcd:	0f 85 53 02 00 00    	jne    c001e226 <IDE::detect()+0x43a>
c001dfd3:	3c 96                	cmp    al,0x96
c001dfd5:	0f 85 4b 02 00 00    	jne    c001e226 <IDE::detect()+0x43a>
c001dfdb:	68 a1 00 00 00       	push   0xa1
c001dfe0:	6a 07                	push   0x7
c001dfe2:	56                   	push   esi
c001dfe3:	53                   	push   ebx
c001dfe4:	e8 83 f5 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dfe9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001dff0:	e8 f3 84 ff ff       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001dff5:	83 c4 10             	add    esp,0x10
c001dff8:	83 ec 0c             	sub    esp,0xc
c001dffb:	89 fd                	mov    ebp,edi
c001dffd:	68 56 4d 02 c0       	push   0xc0024d56
c001e002:	e8 48 ea fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e007:	8d 54 24 20          	lea    edx,[esp+0x20]
c001e00b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001e012:	c1 e5 06             	shl    ebp,0x6
c001e015:	52                   	push   edx
c001e016:	01 dd                	add    ebp,ebx
c001e018:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e01c:	6a 00                	push   0x0
c001e01e:	56                   	push   esi
c001e01f:	53                   	push   ebx
c001e020:	e8 f7 fc ff ff       	call   c001dd1c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e025:	83 c4 14             	add    esp,0x14
c001e028:	68 5a 4d 02 c0       	push   0xc0024d5a
c001e02d:	e8 1d ea fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e032:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001e037:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001e03e:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001e045:	89 f0                	mov    eax,esi
c001e047:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001e04d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e051:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001e057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e05b:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001e062:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001e06a:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001e071:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001e079:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001e07f:	c7 04 24 5e 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d5e
c001e086:	e8 c4 e9 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e08b:	83 c4 10             	add    esp,0x10
c001e08e:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001e095:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e099:	74 09                	je     c001e0a4 <IDE::detect()+0x2b8>
c001e09b:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001e0a2:	eb 07                	jmp    c001e0ab <IDE::detect()+0x2bf>
c001e0a4:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001e0ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e0af:	89 f8                	mov    eax,edi
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	c1 e0 06             	shl    eax,0x6
c001e0b7:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001e0ba:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001e0c0:	68 62 4d 02 c0       	push   0xc0024d62
c001e0c5:	e8 85 e9 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e0ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0ce:	89 e8                	mov    eax,ebp
c001e0d0:	83 c4 10             	add    esp,0x10
c001e0d3:	8d 6a 28             	lea    ebp,[edx+0x28]
c001e0d6:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001e0d9:	83 c2 02             	add    edx,0x2
c001e0dc:	83 c0 02             	add    eax,0x2
c001e0df:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001e0e5:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001e0e8:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001e0ee:	39 d5                	cmp    ebp,edx
c001e0f0:	75 e4                	jne    c001e0d6 <IDE::detect()+0x2ea>
c001e0f2:	89 f8                	mov    eax,edi
c001e0f4:	c1 e0 06             	shl    eax,0x6
c001e0f7:	01 d8                	add    eax,ebx
c001e0f9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e100:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001e107:	c1 ea 09             	shr    edx,0x9
c001e10a:	83 e2 01             	and    edx,0x1
c001e10d:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001e114:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e11a:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001e11e:	74 0c                	je     c001e12c <IDE::detect()+0x340>
c001e120:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001e129:	0f 95 c2             	setne  dl
c001e12c:	89 fd                	mov    ebp,edi
c001e12e:	83 ec 0c             	sub    esp,0xc
c001e131:	c1 e5 06             	shl    ebp,0x6
c001e134:	01 dd                	add    ebp,ebx
c001e136:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001e13c:	68 66 4d 02 c0       	push   0xc0024d66
c001e141:	e8 09 e9 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e146:	83 c4 10             	add    esp,0x10
c001e149:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001e14e:	75 66                	jne    c001e1b6 <IDE::detect()+0x3ca>
c001e150:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001e157:	0f 84 b8 00 00 00    	je     c001e215 <IDE::detect()+0x429>
c001e15d:	83 ec 0c             	sub    esp,0xc
c001e160:	68 6a 4d 02 c0       	push   0xc0024d6a
c001e165:	e8 e5 e8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e16a:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001e171:	e8 22 12 ff ff       	call   c000f398 <malloc>
c001e176:	89 04 24             	mov    DWORD PTR [esp],eax
c001e179:	89 c5                	mov    ebp,eax
c001e17b:	e8 44 05 00 00       	call   c001e6c4 <ATA::ATA()>
c001e180:	c7 04 24 6e 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d6e
c001e187:	e8 c3 e8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e18c:	59                   	pop    ecx
c001e18d:	58                   	pop    eax
c001e18e:	55                   	push   ebp
c001e18f:	53                   	push   ebx
c001e190:	e8 19 b1 fe ff       	call   c00092ae <Device::addChild(Device*)>
c001e195:	c7 04 24 73 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d73
c001e19c:	e8 ae e8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e1a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e1a4:	53                   	push   ebx
c001e1a5:	57                   	push   edi
c001e1a6:	6a 00                	push   0x0
c001e1a8:	55                   	push   ebp
c001e1a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e1ac:	83 c4 14             	add    esp,0x14
c001e1af:	68 78 4d 02 c0       	push   0xc0024d78
c001e1b4:	eb 57                	jmp    c001e20d <IDE::detect()+0x421>
c001e1b6:	83 ec 0c             	sub    esp,0xc
c001e1b9:	68 7d 4d 02 c0       	push   0xc0024d7d
c001e1be:	e8 8c e8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e1c3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e1ca:	e8 c9 11 ff ff       	call   c000f398 <malloc>
c001e1cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001e1d2:	89 c5                	mov    ebp,eax
c001e1d4:	e8 b1 0c 00 00       	call   c001ee8a <ATAPI::ATAPI()>
c001e1d9:	c7 04 24 83 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d83
c001e1e0:	e8 6a e8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e1e5:	58                   	pop    eax
c001e1e6:	5a                   	pop    edx
c001e1e7:	55                   	push   ebp
c001e1e8:	53                   	push   ebx
c001e1e9:	e8 c0 b0 fe ff       	call   c00092ae <Device::addChild(Device*)>
c001e1ee:	c7 04 24 8a 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d8a
c001e1f5:	e8 55 e8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e1fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e1fd:	53                   	push   ebx
c001e1fe:	57                   	push   edi
c001e1ff:	6a 00                	push   0x0
c001e201:	55                   	push   ebp
c001e202:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e205:	83 c4 14             	add    esp,0x14
c001e208:	68 91 4d 02 c0       	push   0xc0024d91
c001e20d:	e8 3d e8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e212:	83 c4 10             	add    esp,0x10
c001e215:	83 ec 0c             	sub    esp,0xc
c001e218:	47                   	inc    edi
c001e219:	68 98 4d 02 c0       	push   0xc0024d98
c001e21e:	e8 2c e8 fe ff       	call   c000ca4f <KeSetBootMessage(char const*)>
c001e223:	83 c4 10             	add    esp,0x10
c001e226:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001e22a:	74 0c                	je     c001e238 <IDE::detect()+0x44c>
c001e22c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001e233:	e9 19 fc ff ff       	jmp    c001de51 <IDE::detect()+0x65>
c001e238:	4e                   	dec    esi
c001e239:	74 0a                	je     c001e245 <IDE::detect()+0x459>
c001e23b:	be 01 00 00 00       	mov    esi,0x1
c001e240:	e9 f5 fb ff ff       	jmp    c001de3a <IDE::detect()+0x4e>
c001e245:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e24b:	5b                   	pop    ebx
c001e24c:	5e                   	pop    esi
c001e24d:	5f                   	pop    edi
c001e24e:	5d                   	pop    ebp
c001e24f:	c3                   	ret    

c001e250 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e250:	55                   	push   ebp
c001e251:	57                   	push   edi
c001e252:	56                   	push   esi
c001e253:	53                   	push   ebx
c001e254:	83 ec 1c             	sub    esp,0x1c
c001e257:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e25b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e25f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001e263:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e267:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e26b:	88 c3                	mov    bl,al
c001e26d:	25 ff 00 00 00       	and    eax,0xff
c001e272:	0f 84 88 00 00 00    	je     c001e300 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	89 c7                	mov    edi,eax
c001e27d:	68 9c 4d 02 c0       	push   0xc0024d9c
c001e282:	e8 c7 8c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e287:	83 c4 10             	add    esp,0x10
c001e28a:	83 ff 01             	cmp    edi,0x1
c001e28d:	74 6b                	je     c001e2fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001e28f:	83 ff 02             	cmp    edi,0x2
c001e292:	75 58                	jne    c001e2ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001e294:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001e299:	50                   	push   eax
c001e29a:	6a 01                	push   0x1
c001e29c:	01 ff                	add    edi,edi
c001e29e:	09 fe                	or     esi,edi
c001e2a0:	89 f0                	mov    eax,esi
c001e2a2:	0f b6 f0             	movzx  esi,al
c001e2a5:	c1 e6 06             	shl    esi,0x6
c001e2a8:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001e2b0:	50                   	push   eax
c001e2b1:	55                   	push   ebp
c001e2b2:	e8 75 f3 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001e2b7:	83 c4 10             	add    esp,0x10
c001e2ba:	a8 01                	test   al,0x1
c001e2bc:	74 02                	je     c001e2c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001e2be:	b3 07                	mov    bl,0x7
c001e2c0:	a8 02                	test   al,0x2
c001e2c2:	74 02                	je     c001e2c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001e2c4:	b3 03                	mov    bl,0x3
c001e2c6:	a8 04                	test   al,0x4
c001e2c8:	74 02                	je     c001e2cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001e2ca:	b3 14                	mov    bl,0x14
c001e2cc:	a8 08                	test   al,0x8
c001e2ce:	74 02                	je     c001e2d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001e2d0:	b3 03                	mov    bl,0x3
c001e2d2:	a8 10                	test   al,0x10
c001e2d4:	74 02                	je     c001e2d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001e2d6:	b3 15                	mov    bl,0x15
c001e2d8:	a8 20                	test   al,0x20
c001e2da:	74 02                	je     c001e2de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001e2dc:	b3 03                	mov    bl,0x3
c001e2de:	a8 40                	test   al,0x40
c001e2e0:	74 02                	je     c001e2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e2e2:	b3 16                	mov    bl,0x16
c001e2e4:	a8 80                	test   al,0x80
c001e2e6:	74 18                	je     c001e300 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e2e8:	b3 0d                	mov    bl,0xd
c001e2ea:	eb 14                	jmp    c001e300 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e2ec:	83 ff 03             	cmp    edi,0x3
c001e2ef:	74 0d                	je     c001e2fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001e2f1:	83 ff 04             	cmp    edi,0x4
c001e2f4:	75 0a                	jne    c001e300 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e2f6:	b3 08                	mov    bl,0x8
c001e2f8:	eb 06                	jmp    c001e300 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e2fa:	b3 13                	mov    bl,0x13
c001e2fc:	eb 02                	jmp    c001e300 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e2fe:	b3 17                	mov    bl,0x17
c001e300:	83 c4 1c             	add    esp,0x1c
c001e303:	88 d8                	mov    al,bl
c001e305:	5b                   	pop    ebx
c001e306:	5e                   	pop    esi
c001e307:	5f                   	pop    edi
c001e308:	5d                   	pop    ebp
c001e309:	c3                   	ret    

c001e30a <IDE::polling(unsigned char, unsigned int)>:
c001e30a:	57                   	push   edi
c001e30b:	56                   	push   esi
c001e30c:	53                   	push   ebx
c001e30d:	bb 04 00 00 00       	mov    ebx,0x4
c001e312:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e316:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e31b:	52                   	push   edx
c001e31c:	6a 0c                	push   0xc
c001e31e:	56                   	push   esi
c001e31f:	57                   	push   edi
c001e320:	e8 07 f3 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001e325:	83 c4 10             	add    esp,0x10
c001e328:	4b                   	dec    ebx
c001e329:	75 f0                	jne    c001e31b <IDE::polling(unsigned char, unsigned int)+0x11>
c001e32b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e330:	50                   	push   eax
c001e331:	6a 0c                	push   0xc
c001e333:	56                   	push   esi
c001e334:	57                   	push   edi
c001e335:	e8 f2 f2 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	a8 01                	test   al,0x1
c001e33f:	75 17                	jne    c001e358 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e341:	a8 20                	test   al,0x20
c001e343:	75 0f                	jne    c001e354 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e345:	4b                   	dec    ebx
c001e346:	74 10                	je     c001e358 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e348:	a8 80                	test   al,0x80
c001e34a:	75 e4                	jne    c001e330 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e34c:	a8 08                	test   al,0x8
c001e34e:	74 e0                	je     c001e330 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e350:	31 c0                	xor    eax,eax
c001e352:	eb 06                	jmp    c001e35a <IDE::polling(unsigned char, unsigned int)+0x50>
c001e354:	b0 01                	mov    al,0x1
c001e356:	eb 02                	jmp    c001e35a <IDE::polling(unsigned char, unsigned int)+0x50>
c001e358:	b0 02                	mov    al,0x2
c001e35a:	5b                   	pop    ebx
c001e35b:	5e                   	pop    esi
c001e35c:	5f                   	pop    edi
c001e35d:	c3                   	ret    

c001e35e <SATABus::close(int, int, void*)>:
c001e35e:	31 c0                	xor    eax,eax
c001e360:	c3                   	ret    
c001e361:	90                   	nop

c001e362 <SATABus::detect()>:
c001e362:	c3                   	ret    
c001e363:	90                   	nop

c001e364 <SATABus::SATABus()>:
c001e364:	83 ec 0c             	sub    esp,0xc
c001e367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36b:	83 ec 08             	sub    esp,0x8
c001e36e:	68 d4 4d 02 c0       	push   0xc0024dd4
c001e373:	50                   	push   eax
c001e374:	e8 8f b2 fe ff       	call   c0009608 <HardDiskController::HardDiskController(char const*)>
c001e379:	83 c4 10             	add    esp,0x10
c001e37c:	ba 00 4e 02 c0       	mov    edx,0xc0024e00
c001e381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e385:	89 10                	mov    DWORD PTR [eax],edx
c001e387:	83 ec 0c             	sub    esp,0xc
c001e38a:	6a 50                	push   0x50
c001e38c:	e8 25 16 ff ff       	call   c000f9b6 <Phys::allocateContiguousPages(int)>
c001e391:	83 c4 10             	add    esp,0x10
c001e394:	89 c2                	mov    edx,eax
c001e396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e3a0:	83 ec 0c             	sub    esp,0xc
c001e3a3:	6a 50                	push   0x50
c001e3a5:	e8 f3 46 ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c001e3aa:	83 c4 10             	add    esp,0x10
c001e3ad:	89 c2                	mov    edx,eax
c001e3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e3b9:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c001e3be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3c2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e3c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3cc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e3d2:	83 ec 0c             	sub    esp,0xc
c001e3d5:	6a 03                	push   0x3
c001e3d7:	6a 50                	push   0x50
c001e3d9:	51                   	push   ecx
c001e3da:	52                   	push   edx
c001e3db:	50                   	push   eax
c001e3dc:	e8 8f 4f ff ff       	call   c0013370 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e3e1:	83 c4 20             	add    esp,0x20
c001e3e4:	90                   	nop
c001e3e5:	83 c4 0c             	add    esp,0xc
c001e3e8:	c3                   	ret    
c001e3e9:	90                   	nop

c001e3ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e3ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3ee:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e3f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e3f4:	09 c2                	or     edx,eax
c001e3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e400:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e402:	31 c0                	xor    eax,eax
c001e404:	c1 e9 08             	shr    ecx,0x8
c001e407:	83 e1 0f             	and    ecx,0xf
c001e40a:	39 c8                	cmp    eax,ecx
c001e40c:	74 0a                	je     c001e418 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001e40e:	f6 c2 01             	test   dl,0x1
c001e411:	74 08                	je     c001e41b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e413:	d1 ea                	shr    edx,1
c001e415:	40                   	inc    eax
c001e416:	eb f2                	jmp    c001e40a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001e418:	83 c8 ff             	or     eax,0xffffffff
c001e41b:	c3                   	ret    

c001e41c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e41c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e420:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e423:	89 c2                	mov    edx,eax
c001e425:	c1 ea 08             	shr    edx,0x8
c001e428:	83 e2 0f             	and    edx,0xf
c001e42b:	4a                   	dec    edx
c001e42c:	75 32                	jne    c001e460 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e42e:	83 e0 0f             	and    eax,0xf
c001e431:	83 f8 03             	cmp    eax,0x3
c001e434:	75 2a                	jne    c001e460 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e436:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e439:	b8 02 00 00 00       	mov    eax,0x2
c001e43e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e444:	74 1c                	je     c001e462 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e446:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e44c:	b8 04 00 00 00       	mov    eax,0x4
c001e451:	74 0f                	je     c001e462 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e453:	31 c0                	xor    eax,eax
c001e455:	83 fa 03             	cmp    edx,0x3
c001e458:	0f 94 c0             	sete   al
c001e45b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e45f:	c3                   	ret    
c001e460:	31 c0                	xor    eax,eax
c001e462:	c3                   	ret    
c001e463:	90                   	nop

c001e464 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e464:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e468:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e46b:	0f ba e2 0f          	bt     edx,0xf
c001e46f:	72 f7                	jb     c001e468 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e471:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e474:	83 ca 10             	or     edx,0x10
c001e477:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e47a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e47d:	83 ca 01             	or     edx,0x1
c001e480:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e483:	c3                   	ret    

c001e484 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e488:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e48b:	83 e2 fe             	and    edx,0xfffffffe
c001e48e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e491:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e494:	83 e2 ef             	and    edx,0xffffffef
c001e497:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e49a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e49d:	0f ba e2 0e          	bt     edx,0xe
c001e4a1:	72 f7                	jb     c001e49a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e4a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e4a6:	0f ba e2 0f          	bt     edx,0xf
c001e4aa:	72 ee                	jb     c001e49a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e4ac:	c3                   	ret    
c001e4ad:	90                   	nop

c001e4ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e4ae:	55                   	push   ebp
c001e4af:	57                   	push   edi
c001e4b0:	56                   	push   esi
c001e4b1:	53                   	push   ebx
c001e4b2:	83 ec 1c             	sub    esp,0x1c
c001e4b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e4b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4bd:	53                   	push   ebx
c001e4be:	57                   	push   edi
c001e4bf:	e8 c0 ff ff ff       	call   c001e484 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e4c4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001e4c8:	83 ec 0c             	sub    esp,0xc
c001e4cb:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001e4d1:	c1 e5 0a             	shl    ebp,0xa
c001e4d4:	01 e8                	add    eax,ebp
c001e4d6:	89 03                	mov    DWORD PTR [ebx],eax
c001e4d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e4da:	68 00 04 00 00       	push   0x400
c001e4df:	6a 00                	push   0x0
c001e4e1:	50                   	push   eax
c001e4e2:	e8 09 20 fe ff       	call   c00004f0 <memset>
c001e4e7:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001e4ed:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001e4f1:	83 c4 1c             	add    esp,0x1c
c001e4f4:	01 e8                	add    eax,ebp
c001e4f6:	89 03                	mov    DWORD PTR [ebx],eax
c001e4f8:	c1 e6 08             	shl    esi,0x8
c001e4fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e502:	81 c6 00 80 00 00    	add    esi,0x8000
c001e508:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001e50e:	01 f0                	add    eax,esi
c001e510:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e513:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e516:	68 00 01 00 00       	push   0x100
c001e51b:	6a 00                	push   0x0
c001e51d:	50                   	push   eax
c001e51e:	e8 cd 1f fe ff       	call   c00004f0 <memset>
c001e523:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001e529:	31 d2                	xor    edx,edx
c001e52b:	01 f0                	add    eax,esi
c001e52d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e530:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e537:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001e53d:	01 ee                	add    esi,ebp
c001e53f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e543:	83 c4 10             	add    esp,0x10
c001e546:	c1 e5 0d             	shl    ebp,0xd
c001e549:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001e54f:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001e555:	83 c6 20             	add    esi,0x20
c001e558:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e55c:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001e562:	01 e8                	add    eax,ebp
c001e564:	01 d0                	add    eax,edx
c001e566:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001e569:	52                   	push   edx
c001e56a:	68 00 01 00 00       	push   0x100
c001e56f:	6a 00                	push   0x0
c001e571:	50                   	push   eax
c001e572:	e8 79 1f fe ff       	call   c00004f0 <memset>
c001e577:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001e57d:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001e584:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e588:	83 c4 10             	add    esp,0x10
c001e58b:	01 e8                	add    eax,ebp
c001e58d:	01 d0                	add    eax,edx
c001e58f:	81 c2 00 01 00 00    	add    edx,0x100
c001e595:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001e598:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001e59e:	75 af                	jne    c001e54f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001e5a0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001e5a7:	50                   	push   eax
c001e5a8:	50                   	push   eax
c001e5a9:	53                   	push   ebx
c001e5aa:	57                   	push   edi
c001e5ab:	e8 b4 fe ff ff       	call   c001e464 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e5b0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001e5b7:	83 c4 2c             	add    esp,0x2c
c001e5ba:	5b                   	pop    ebx
c001e5bb:	5e                   	pop    esi
c001e5bc:	5f                   	pop    edi
c001e5bd:	5d                   	pop    ebp
c001e5be:	c3                   	ret    
c001e5bf:	90                   	nop

c001e5c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e5c0:	55                   	push   ebp
c001e5c1:	57                   	push   edi
c001e5c2:	56                   	push   esi
c001e5c3:	53                   	push   ebx
c001e5c4:	31 db                	xor    ebx,ebx
c001e5c6:	83 ec 0c             	sub    esp,0xc
c001e5c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e5cd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e5d1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e5d4:	f7 c7 01 00 00 00    	test   edi,0x1
c001e5da:	74 7a                	je     c001e656 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e5dc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e5e0:	89 d8                	mov    eax,ebx
c001e5e2:	c1 e0 07             	shl    eax,0x7
c001e5e5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e5ec:	55                   	push   ebp
c001e5ed:	56                   	push   esi
c001e5ee:	e8 29 fe ff ff       	call   c001e41c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e5f3:	5a                   	pop    edx
c001e5f4:	59                   	pop    ecx
c001e5f5:	83 f8 01             	cmp    eax,0x1
c001e5f8:	75 21                	jne    c001e61b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e5fa:	50                   	push   eax
c001e5fb:	53                   	push   ebx
c001e5fc:	55                   	push   ebp
c001e5fd:	56                   	push   esi
c001e5fe:	e8 ab fe ff ff       	call   c001e4ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e603:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e60a:	e8 89 0d ff ff       	call   c000f398 <malloc>
c001e60f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e612:	89 c5                	mov    ebp,eax
c001e614:	e8 37 0f 00 00       	call   c001f550 <SATA::SATA()>
c001e619:	eb 24                	jmp    c001e63f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e61b:	83 f8 04             	cmp    eax,0x4
c001e61e:	75 36                	jne    c001e656 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e620:	51                   	push   ecx
c001e621:	53                   	push   ebx
c001e622:	55                   	push   ebp
c001e623:	56                   	push   esi
c001e624:	e8 85 fe ff ff       	call   c001e4ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e629:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e630:	e8 63 0d ff ff       	call   c000f398 <malloc>
c001e635:	89 04 24             	mov    DWORD PTR [esp],eax
c001e638:	89 c5                	mov    ebp,eax
c001e63a:	e8 a7 12 00 00       	call   c001f8e6 <SATAPI::SATAPI()>
c001e63f:	58                   	pop    eax
c001e640:	5a                   	pop    edx
c001e641:	55                   	push   ebp
c001e642:	56                   	push   esi
c001e643:	e8 66 ac fe ff       	call   c00092ae <Device::addChild(Device*)>
c001e648:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e64b:	56                   	push   esi
c001e64c:	6a 00                	push   0x0
c001e64e:	53                   	push   ebx
c001e64f:	55                   	push   ebp
c001e650:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e653:	83 c4 20             	add    esp,0x20
c001e656:	d1 ef                	shr    edi,1
c001e658:	43                   	inc    ebx
c001e659:	83 fb 20             	cmp    ebx,0x20
c001e65c:	0f 85 72 ff ff ff    	jne    c001e5d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e662:	83 c4 0c             	add    esp,0xc
c001e665:	5b                   	pop    ebx
c001e666:	5e                   	pop    esi
c001e667:	5f                   	pop    edi
c001e668:	5d                   	pop    ebp
c001e669:	c3                   	ret    

c001e66a <SATABus::open(int, int, void*)>:
c001e66a:	53                   	push   ebx
c001e66b:	83 ec 08             	sub    esp,0x8
c001e66e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e672:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001e678:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e67e:	e8 dd 79 ff ff       	call   c0016060 <KeDisablePreemption()>
c001e683:	52                   	push   edx
c001e684:	52                   	push   edx
c001e685:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001e68b:	53                   	push   ebx
c001e68c:	e8 2f ff ff ff       	call   c001e5c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e691:	e8 f2 79 ff ff       	call   c0016088 <KeRestorePreemption()>
c001e696:	83 c4 18             	add    esp,0x18
c001e699:	31 c0                	xor    eax,eax
c001e69b:	5b                   	pop    ebx
c001e69c:	c3                   	ret    
c001e69d:	90                   	nop

c001e69e <ATA::close(int, int, void*)>:
c001e69e:	83 ec 0c             	sub    esp,0xc
c001e6a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6ab:	85 c0                	test   eax,eax
c001e6ad:	74 0c                	je     c001e6bb <ATA::close(int, int, void*)+0x1d>
c001e6af:	8b 10                	mov    edx,DWORD PTR [eax]
c001e6b1:	83 ec 0c             	sub    esp,0xc
c001e6b4:	50                   	push   eax
c001e6b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e6b8:	83 c4 10             	add    esp,0x10
c001e6bb:	31 c0                	xor    eax,eax
c001e6bd:	83 c4 0c             	add    esp,0xc
c001e6c0:	c3                   	ret    
c001e6c1:	90                   	nop

c001e6c2 <ATA::powerSaving(PowerSavingLevel)>:
c001e6c2:	c3                   	ret    
c001e6c3:	90                   	nop

c001e6c4 <ATA::ATA()>:
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6cb:	83 ec 04             	sub    esp,0x4
c001e6ce:	68 00 02 00 00       	push   0x200
c001e6d3:	68 81 4f 02 c0       	push   0xc0024f81
c001e6d8:	50                   	push   eax
c001e6d9:	e8 b4 af fe ff       	call   c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e6de:	83 c4 10             	add    esp,0x10
c001e6e1:	ba e8 4e 02 c0       	mov    edx,0xc0024ee8
c001e6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ea:	89 10                	mov    DWORD PTR [eax],edx
c001e6ec:	90                   	nop
c001e6ed:	83 c4 0c             	add    esp,0xc
c001e6f0:	c3                   	ret    
c001e6f1:	90                   	nop

c001e6f2 <ATA::flush(bool)>:
c001e6f2:	53                   	push   ebx
c001e6f3:	83 ec 08             	sub    esp,0x8
c001e6f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001e6fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6ff:	83 f8 01             	cmp    eax,0x1
c001e702:	19 c0                	sbb    eax,eax
c001e704:	83 e0 fd             	and    eax,0xfffffffd
c001e707:	05 ea 00 00 00       	add    eax,0xea
c001e70c:	50                   	push   eax
c001e70d:	6a 07                	push   0x7
c001e70f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e716:	50                   	push   eax
c001e717:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e71d:	e8 4a ee ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e722:	83 c4 0c             	add    esp,0xc
c001e725:	6a 00                	push   0x0
c001e727:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e72e:	50                   	push   eax
c001e72f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e735:	e8 d0 fb ff ff       	call   c001e30a <IDE::polling(unsigned char, unsigned int)>
c001e73a:	83 c4 18             	add    esp,0x18
c001e73d:	5b                   	pop    ebx
c001e73e:	c3                   	ret    
c001e73f:	90                   	nop

c001e740 <ATA::readyForCommand()>:
c001e740:	56                   	push   esi
c001e741:	53                   	push   ebx
c001e742:	53                   	push   ebx
c001e743:	31 db                	xor    ebx,ebx
c001e745:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e749:	51                   	push   ecx
c001e74a:	6a 0c                	push   0xc
c001e74c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e753:	50                   	push   eax
c001e754:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e75a:	e8 cd ee ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001e75f:	83 c4 10             	add    esp,0x10
c001e762:	a8 88                	test   al,0x88
c001e764:	74 1f                	je     c001e785 <ATA::readyForCommand()+0x45>
c001e766:	43                   	inc    ebx
c001e767:	83 fb 63             	cmp    ebx,0x63
c001e76a:	7e dd                	jle    c001e749 <ATA::readyForCommand()+0x9>
c001e76c:	83 ec 0c             	sub    esp,0xc
c001e76f:	6a 0a                	push   0xa
c001e771:	e8 72 7d ff ff       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001e776:	83 c4 10             	add    esp,0x10
c001e779:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e77f:	75 c8                	jne    c001e749 <ATA::readyForCommand()+0x9>
c001e781:	31 c0                	xor    eax,eax
c001e783:	eb 02                	jmp    c001e787 <ATA::readyForCommand()+0x47>
c001e785:	b0 01                	mov    al,0x1
c001e787:	5a                   	pop    edx
c001e788:	5b                   	pop    ebx
c001e789:	5e                   	pop    esi
c001e78a:	c3                   	ret    
c001e78b:	90                   	nop

c001e78c <ATA::access(unsigned long long, int, void*, bool)>:
c001e78c:	55                   	push   ebp
c001e78d:	57                   	push   edi
c001e78e:	56                   	push   esi
c001e78f:	53                   	push   ebx
c001e790:	83 ec 2c             	sub    esp,0x2c
c001e793:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e797:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e79b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e79f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e7a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7a7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e7ab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e7af:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e7b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7b9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e7bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7c3:	c1 e0 06             	shl    eax,0x6
c001e7c6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e7ce:	74 5b                	je     c001e82b <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001e7d0:	89 fa                	mov    edx,edi
c001e7d2:	89 f0                	mov    eax,esi
c001e7d4:	c1 ea 1c             	shr    edx,0x1c
c001e7d7:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001e7db:	89 d1                	mov    ecx,edx
c001e7dd:	09 c1                	or     ecx,eax
c001e7df:	74 25                	je     c001e806 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001e7e1:	31 ed                	xor    ebp,ebp
c001e7e3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e7ea:	89 fa                	mov    edx,edi
c001e7ec:	89 f0                	mov    eax,esi
c001e7ee:	0f ad d0             	shrd   eax,edx,cl
c001e7f1:	d3 ea                	shr    edx,cl
c001e7f3:	f6 c1 20             	test   cl,0x20
c001e7f6:	74 02                	je     c001e7fa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001e7f8:	89 d0                	mov    eax,edx
c001e7fa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e7fe:	45                   	inc    ebp
c001e7ff:	83 fd 06             	cmp    ebp,0x6
c001e802:	75 df                	jne    c001e7e3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001e804:	eb 71                	jmp    c001e877 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001e806:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e80b:	89 f0                	mov    eax,esi
c001e80d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e814:	0f ac f8 10          	shrd   eax,edi,0x10
c001e818:	bf 01 00 00 00       	mov    edi,0x1
c001e81d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e821:	c1 ee 18             	shr    esi,0x18
c001e824:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e829:	eb 53                	jmp    c001e87e <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001e82b:	6a 00                	push   0x0
c001e82d:	6a 3f                	push   0x3f
c001e82f:	57                   	push   edi
c001e830:	56                   	push   esi
c001e831:	e8 3e 25 00 00       	call   c0020d74 <__umoddi3>
c001e836:	83 c4 10             	add    esp,0x10
c001e839:	40                   	inc    eax
c001e83a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e83e:	6a 00                	push   0x0
c001e840:	68 f0 03 00 00       	push   0x3f0
c001e845:	57                   	push   edi
c001e846:	56                   	push   esi
c001e847:	e8 28 24 00 00       	call   c0020c74 <__udivdi3>
c001e84c:	83 c4 10             	add    esp,0x10
c001e84f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e854:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e85b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e860:	6a 00                	push   0x0
c001e862:	6a 3f                	push   0x3f
c001e864:	57                   	push   edi
c001e865:	31 ff                	xor    edi,edi
c001e867:	56                   	push   esi
c001e868:	e8 07 24 00 00       	call   c0020c74 <__udivdi3>
c001e86d:	83 c4 10             	add    esp,0x10
c001e870:	83 e0 0f             	and    eax,0xf
c001e873:	89 c6                	mov    esi,eax
c001e875:	eb 07                	jmp    c001e87e <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001e877:	31 f6                	xor    esi,esi
c001e879:	bf 02 00 00 00       	mov    edi,0x2
c001e87e:	55                   	push   ebp
c001e87f:	6a 00                	push   0x0
c001e881:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e888:	50                   	push   eax
c001e889:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e88d:	e8 e8 ee ff ff       	call   c001d77a <IDE::enableIRQs(unsigned char, bool)>
c001e892:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e895:	e8 a6 fe ff ff       	call   c001e740 <ATA::readyForCommand()>
c001e89a:	83 c4 10             	add    esp,0x10
c001e89d:	84 c0                	test   al,al
c001e89f:	75 0a                	jne    c001e8ab <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001e8a1:	be 01 00 00 00       	mov    esi,0x1
c001e8a6:	e9 df 02 00 00       	jmp    c001eb8a <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001e8ab:	fa                   	cli    
c001e8ac:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001e8b2:	f7 c7 03 00 00 00    	test   edi,0x3
c001e8b8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e8be:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e8c4:	75 0a                	jne    c001e8d0 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001e8c6:	c1 e0 04             	shl    eax,0x4
c001e8c9:	09 c6                	or     esi,eax
c001e8cb:	83 ce a0             	or     esi,0xffffffa0
c001e8ce:	eb 08                	jmp    c001e8d8 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001e8d0:	c1 e0 04             	shl    eax,0x4
c001e8d3:	09 c6                	or     esi,eax
c001e8d5:	83 ce e0             	or     esi,0xffffffe0
c001e8d8:	89 f0                	mov    eax,esi
c001e8da:	0f b6 d2             	movzx  edx,dl
c001e8dd:	0f b6 f0             	movzx  esi,al
c001e8e0:	56                   	push   esi
c001e8e1:	6a 06                	push   0x6
c001e8e3:	52                   	push   edx
c001e8e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8ea:	e8 7d ec ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8ef:	83 c4 10             	add    esp,0x10
c001e8f2:	6a 00                	push   0x0
c001e8f4:	6a 01                	push   0x1
c001e8f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8fd:	50                   	push   eax
c001e8fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e904:	e8 63 ec ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e909:	89 f8                	mov    eax,edi
c001e90b:	83 c4 10             	add    esp,0x10
c001e90e:	0f b6 f0             	movzx  esi,al
c001e911:	83 fe 02             	cmp    esi,0x2
c001e914:	75 6e                	jne    c001e984 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e916:	6a 00                	push   0x0
c001e918:	6a 08                	push   0x8
c001e91a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e921:	50                   	push   eax
c001e922:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e928:	e8 3f ec ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e92d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e932:	50                   	push   eax
c001e933:	6a 09                	push   0x9
c001e935:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e93c:	50                   	push   eax
c001e93d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e943:	e8 24 ec ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e948:	83 c4 20             	add    esp,0x20
c001e94b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e950:	50                   	push   eax
c001e951:	6a 0a                	push   0xa
c001e953:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e95a:	50                   	push   eax
c001e95b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e961:	e8 06 ec ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e966:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e96b:	50                   	push   eax
c001e96c:	6a 0b                	push   0xb
c001e96e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e975:	50                   	push   eax
c001e976:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e97c:	e8 eb eb ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e981:	83 c4 20             	add    esp,0x20
c001e984:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e989:	50                   	push   eax
c001e98a:	6a 02                	push   0x2
c001e98c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e993:	50                   	push   eax
c001e994:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e99a:	e8 cd eb ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e99f:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e9a4:	50                   	push   eax
c001e9a5:	6a 03                	push   0x3
c001e9a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9ae:	50                   	push   eax
c001e9af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9b5:	e8 b2 eb ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9ba:	83 c4 20             	add    esp,0x20
c001e9bd:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e9c2:	50                   	push   eax
c001e9c3:	6a 04                	push   0x4
c001e9c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9cc:	50                   	push   eax
c001e9cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9d3:	e8 94 eb ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9d8:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e9dd:	50                   	push   eax
c001e9de:	6a 05                	push   0x5
c001e9e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9e7:	50                   	push   eax
c001e9e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9ee:	e8 79 eb ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9f3:	83 c4 20             	add    esp,0x20
c001e9f6:	83 fe 02             	cmp    esi,0x2
c001e9f9:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001e9fe:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001ea03:	85 c9                	test   ecx,ecx
c001ea05:	74 07                	je     c001ea0e <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001ea07:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ea0c:	75 45                	jne    c001ea53 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001ea0e:	89 f8                	mov    eax,edi
c001ea10:	0f b6 f8             	movzx  edi,al
c001ea13:	31 c0                	xor    eax,eax
c001ea15:	4f                   	dec    edi
c001ea16:	0f 94 c0             	sete   al
c001ea19:	89 c6                	mov    esi,eax
c001ea1b:	75 0c                	jne    c001ea29 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001ea1d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ea22:	b8 30 00 00 00       	mov    eax,0x30
c001ea27:	75 2f                	jne    c001ea58 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001ea29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea2d:	83 f2 01             	xor    edx,0x1
c001ea30:	85 c9                	test   ecx,ecx
c001ea32:	74 09                	je     c001ea3d <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001ea34:	84 d2                	test   dl,dl
c001ea36:	b8 24 00 00 00       	mov    eax,0x24
c001ea3b:	75 1b                	jne    c001ea58 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001ea3d:	85 f6                	test   esi,esi
c001ea3f:	0f 84 5c fe ff ff    	je     c001e8a1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001ea45:	84 d2                	test   dl,dl
c001ea47:	b8 20 00 00 00       	mov    eax,0x20
c001ea4c:	75 0a                	jne    c001ea58 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001ea4e:	e9 4e fe ff ff       	jmp    c001e8a1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001ea53:	b8 34 00 00 00       	mov    eax,0x34
c001ea58:	50                   	push   eax
c001ea59:	6a 07                	push   0x7
c001ea5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea62:	50                   	push   eax
c001ea63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea69:	e8 fe ea ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea6e:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001ea75:	83 c4 10             	add    esp,0x10
c001ea78:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001ea7f:	75 01                	jne    c001ea82 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001ea81:	fb                   	sti    
c001ea82:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ea86:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001ea8b:	85 f6                	test   esi,esi
c001ea8d:	0f 84 dd 00 00 00    	je     c001eb70 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001ea93:	57                   	push   edi
c001ea94:	6a 01                	push   0x1
c001ea96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea9d:	50                   	push   eax
c001ea9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eaa4:	e8 61 f8 ff ff       	call   c001e30a <IDE::polling(unsigned char, unsigned int)>
c001eaa9:	83 c4 10             	add    esp,0x10
c001eaac:	0f b6 c0             	movzx  eax,al
c001eaaf:	85 c0                	test   eax,eax
c001eab1:	74 23                	je     c001ead6 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001eab3:	50                   	push   eax
c001eab4:	89 c6                	mov    esi,eax
c001eab6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001eabd:	50                   	push   eax
c001eabe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eac5:	50                   	push   eax
c001eac6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eacc:	e8 7f f7 ff ff       	call   c001e250 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ead1:	e9 b1 00 00 00       	jmp    c001eb87 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001ead6:	85 ed                	test   ebp,ebp
c001ead8:	74 49                	je     c001eb23 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001eada:	fa                   	cli    
c001eadb:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001eae1:	31 ff                	xor    edi,edi
c001eae3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001eae7:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001eaeb:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001eaf0:	51                   	push   ecx
c001eaf1:	51                   	push   ecx
c001eaf2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eaf9:	50                   	push   eax
c001eafa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb00:	e8 55 ea ff ff       	call   c001d55a <IDE::getBase(unsigned char)>
c001eb05:	89 c2                	mov    edx,eax
c001eb07:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001eb0c:	66 ef                	out    dx,ax
c001eb0e:	47                   	inc    edi
c001eb0f:	83 c4 10             	add    esp,0x10
c001eb12:	81 ff 00 01 00 00    	cmp    edi,0x100
c001eb18:	75 c9                	jne    c001eae3 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001eb1a:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001eb21:	eb 35                	jmp    c001eb58 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001eb23:	fa                   	cli    
c001eb24:	52                   	push   edx
c001eb25:	52                   	push   edx
c001eb26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb2d:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001eb33:	50                   	push   eax
c001eb34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb3a:	e8 1b ea ff ff       	call   c001d55a <IDE::getBase(unsigned char)>
c001eb3f:	b9 00 01 00 00       	mov    ecx,0x100
c001eb44:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001eb48:	89 c2                	mov    edx,eax
c001eb4a:	fc                   	cld    
c001eb4b:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001eb4e:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001eb55:	83 c4 10             	add    esp,0x10
c001eb58:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001eb5f:	75 01                	jne    c001eb62 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001eb61:	fb                   	sti    
c001eb62:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001eb6a:	4e                   	dec    esi
c001eb6b:	e9 1b ff ff ff       	jmp    c001ea8b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001eb70:	31 f6                	xor    esi,esi
c001eb72:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001eb77:	74 11                	je     c001eb8a <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001eb79:	50                   	push   eax
c001eb7a:	50                   	push   eax
c001eb7b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001eb80:	50                   	push   eax
c001eb81:	53                   	push   ebx
c001eb82:	e8 6b fb ff ff       	call   c001e6f2 <ATA::flush(bool)>
c001eb87:	83 c4 10             	add    esp,0x10
c001eb8a:	83 c4 2c             	add    esp,0x2c
c001eb8d:	89 f0                	mov    eax,esi
c001eb8f:	5b                   	pop    ebx
c001eb90:	5e                   	pop    esi
c001eb91:	5f                   	pop    edi
c001eb92:	5d                   	pop    ebp
c001eb93:	c3                   	ret    

c001eb94 <ATA::read(unsigned long long, int, void*)>:
c001eb94:	57                   	push   edi
c001eb95:	b8 04 00 00 00       	mov    eax,0x4
c001eb9a:	56                   	push   esi
c001eb9b:	53                   	push   ebx
c001eb9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eba0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001eba4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eba8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ebac:	8d 7a ff             	lea    edi,[edx-0x1]
c001ebaf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ebb5:	77 25                	ja     c001ebdc <ATA::read(unsigned long long, int, void*)+0x48>
c001ebb7:	85 f6                	test   esi,esi
c001ebb9:	b8 06 00 00 00       	mov    eax,0x6
c001ebbe:	74 1c                	je     c001ebdc <ATA::read(unsigned long long, int, void*)+0x48>
c001ebc0:	50                   	push   eax
c001ebc1:	50                   	push   eax
c001ebc2:	6a 00                	push   0x0
c001ebc4:	56                   	push   esi
c001ebc5:	52                   	push   edx
c001ebc6:	53                   	push   ebx
c001ebc7:	51                   	push   ecx
c001ebc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ebcc:	e8 bb fb ff ff       	call   c001e78c <ATA::access(unsigned long long, int, void*, bool)>
c001ebd1:	83 c4 20             	add    esp,0x20
c001ebd4:	85 c0                	test   eax,eax
c001ebd6:	0f 95 c0             	setne  al
c001ebd9:	0f b6 c0             	movzx  eax,al
c001ebdc:	5b                   	pop    ebx
c001ebdd:	5e                   	pop    esi
c001ebde:	5f                   	pop    edi
c001ebdf:	c3                   	ret    

c001ebe0 <ATA::write(unsigned long long, int, void*)>:
c001ebe0:	57                   	push   edi
c001ebe1:	b8 04 00 00 00       	mov    eax,0x4
c001ebe6:	56                   	push   esi
c001ebe7:	53                   	push   ebx
c001ebe8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ebec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ebf0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ebf4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ebf8:	8d 7a ff             	lea    edi,[edx-0x1]
c001ebfb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ec01:	77 25                	ja     c001ec28 <ATA::write(unsigned long long, int, void*)+0x48>
c001ec03:	85 f6                	test   esi,esi
c001ec05:	b8 06 00 00 00       	mov    eax,0x6
c001ec0a:	74 1c                	je     c001ec28 <ATA::write(unsigned long long, int, void*)+0x48>
c001ec0c:	50                   	push   eax
c001ec0d:	50                   	push   eax
c001ec0e:	6a 01                	push   0x1
c001ec10:	56                   	push   esi
c001ec11:	52                   	push   edx
c001ec12:	53                   	push   ebx
c001ec13:	51                   	push   ecx
c001ec14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ec18:	e8 6f fb ff ff       	call   c001e78c <ATA::access(unsigned long long, int, void*, bool)>
c001ec1d:	83 c4 20             	add    esp,0x20
c001ec20:	85 c0                	test   eax,eax
c001ec22:	0f 95 c0             	setne  al
c001ec25:	0f b6 c0             	movzx  eax,al
c001ec28:	5b                   	pop    ebx
c001ec29:	5e                   	pop    esi
c001ec2a:	5f                   	pop    edi
c001ec2b:	c3                   	ret    

c001ec2c <ATA::detectCHS()>:
c001ec2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec30:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ec36:	c1 e0 06             	shl    eax,0x6
c001ec39:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ec3f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ec49:	c7 44 24 04 24 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e24
c001ec51:	e9 88 0a ff ff       	jmp    c000f6de <KePanic(char const*)>

c001ec56 <ATA::open(int, int, void*)>:
c001ec56:	53                   	push   ebx
c001ec57:	83 ec 08             	sub    esp,0x8
c001ec5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ec5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ec66:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ec6c:	c1 e0 06             	shl    eax,0x6
c001ec6f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ec75:	01 d0                	add    eax,edx
c001ec77:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ec7e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ec84:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ec8b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ec95:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ec9c:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eca2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eca9:	75 0c                	jne    c001ecb7 <ATA::open(int, int, void*)+0x61>
c001ecab:	83 ec 0c             	sub    esp,0xc
c001ecae:	53                   	push   ebx
c001ecaf:	e8 78 ff ff ff       	call   c001ec2c <ATA::detectCHS()>
c001ecb4:	83 c4 10             	add    esp,0x10
c001ecb7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ecbd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ecc3:	c1 e0 06             	shl    eax,0x6
c001ecc6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eccd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ecd7:	d1 e8                	shr    eax,1
c001ecd9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ecdf:	6a 04                	push   0x4
c001ece1:	6a 0c                	push   0xc
c001ece3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ecea:	50                   	push   eax
c001eceb:	52                   	push   edx
c001ecec:	e8 7b e8 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecf1:	90                   	nop
c001ecf2:	90                   	nop
c001ecf3:	6a 00                	push   0x0
c001ecf5:	6a 0c                	push   0xc
c001ecf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ecfe:	50                   	push   eax
c001ecff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed05:	e8 62 e8 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed0a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ed10:	83 c4 20             	add    esp,0x20
c001ed13:	c1 e0 06             	shl    eax,0x6
c001ed16:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001ed1c:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001ed23:	0f 84 00 01 00 00    	je     c001ee29 <ATA::open(int, int, void*)+0x1d3>
c001ed29:	83 ec 0c             	sub    esp,0xc
c001ed2c:	6a 08                	push   0x8
c001ed2e:	e8 83 0c ff ff       	call   c000f9b6 <Phys::allocateContiguousPages(int)>
c001ed33:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ed39:	c7 04 24 36 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e36
c001ed40:	e8 09 82 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ed45:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ed4c:	e8 4c 3d ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c001ed51:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ed57:	6a 03                	push   0x3
c001ed59:	50                   	push   eax
c001ed5a:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ed60:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001ed66:	e8 0b 44 ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ed6b:	83 c4 20             	add    esp,0x20
c001ed6e:	e8 65 0b ff ff       	call   c000f8d8 <Phys::allocatePage()>
c001ed73:	83 ec 0c             	sub    esp,0xc
c001ed76:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001ed7c:	6a 01                	push   0x1
c001ed7e:	e8 1a 3d ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c001ed83:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001ed89:	6a 03                	push   0x3
c001ed8b:	50                   	push   eax
c001ed8c:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001ed92:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001ed98:	e8 d9 43 ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ed9d:	83 c4 14             	add    esp,0x14
c001eda0:	68 6f 4e 02 c0       	push   0xc0024e6f
c001eda5:	e8 a4 81 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001edaa:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001edb1:	50                   	push   eax
c001edb2:	6a 12                	push   0x12
c001edb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edbb:	50                   	push   eax
c001edbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edc2:	e8 a5 e7 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edc7:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001edcd:	83 c4 20             	add    esp,0x20
c001edd0:	0f b6 c4             	movzx  eax,ah
c001edd3:	50                   	push   eax
c001edd4:	6a 13                	push   0x13
c001edd6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eddd:	50                   	push   eax
c001edde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ede4:	e8 83 e7 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ede9:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001edf0:	50                   	push   eax
c001edf1:	6a 14                	push   0x14
c001edf3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edfa:	50                   	push   eax
c001edfb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee01:	e8 66 e7 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee06:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001ee0d:	83 c4 20             	add    esp,0x20
c001ee10:	50                   	push   eax
c001ee11:	6a 15                	push   0x15
c001ee13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee1a:	50                   	push   eax
c001ee1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee21:	e8 46 e7 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee26:	83 c4 10             	add    esp,0x10
c001ee29:	83 ec 0c             	sub    esp,0xc
c001ee2c:	53                   	push   ebx
c001ee2d:	e8 c8 a8 fe ff       	call   c00096fa <PhysicalDisk::startCache()>
c001ee32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ee35:	e8 60 b7 fe ff       	call   c000a59a <createPartitionsForDisk(PhysicalDisk*)>
c001ee3a:	83 c4 18             	add    esp,0x18
c001ee3d:	31 c0                	xor    eax,eax
c001ee3f:	5b                   	pop    ebx
c001ee40:	c3                   	ret    

c001ee41 <combineCharAndColour(char, unsigned char)>:
c001ee41:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ee46:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ee4c:	c1 e0 08             	shl    eax,0x8
c001ee4f:	09 d0                	or     eax,edx
c001ee51:	c3                   	ret    

c001ee52 <combineColours(unsigned char, unsigned char)>:
c001ee52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ee57:	c1 e0 04             	shl    eax,0x4
c001ee5a:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001ee5e:	c3                   	ret    
c001ee5f:	90                   	nop

c001ee60 <ATAPI::write(unsigned long long, int, void*)>:
c001ee60:	b8 03 00 00 00       	mov    eax,0x3
c001ee65:	c3                   	ret    

c001ee66 <ATAPI::close(int, int, void*)>:
c001ee66:	83 ec 0c             	sub    esp,0xc
c001ee69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ee73:	85 c0                	test   eax,eax
c001ee75:	74 0c                	je     c001ee83 <ATAPI::close(int, int, void*)+0x1d>
c001ee77:	8b 10                	mov    edx,DWORD PTR [eax]
c001ee79:	83 ec 0c             	sub    esp,0xc
c001ee7c:	50                   	push   eax
c001ee7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ee80:	83 c4 10             	add    esp,0x10
c001ee83:	31 c0                	xor    eax,eax
c001ee85:	83 c4 0c             	add    esp,0xc
c001ee88:	c3                   	ret    
c001ee89:	90                   	nop

c001ee8a <ATAPI::ATAPI()>:
c001ee8a:	83 ec 0c             	sub    esp,0xc
c001ee8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee91:	83 ec 04             	sub    esp,0x4
c001ee94:	68 00 08 00 00       	push   0x800
c001ee99:	68 21 50 02 c0       	push   0xc0025021
c001ee9e:	50                   	push   eax
c001ee9f:	e8 ee a7 fe ff       	call   c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001eea4:	83 c4 10             	add    esp,0x10
c001eea7:	ba 30 4f 02 c0       	mov    edx,0xc0024f30
c001eeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb0:	89 10                	mov    DWORD PTR [eax],edx
c001eeb2:	90                   	nop
c001eeb3:	83 c4 0c             	add    esp,0xc
c001eeb6:	c3                   	ret    
c001eeb7:	90                   	nop

c001eeb8 <ATAPI::readyForCommand()>:
c001eeb8:	56                   	push   esi
c001eeb9:	53                   	push   ebx
c001eeba:	53                   	push   ebx
c001eebb:	31 db                	xor    ebx,ebx
c001eebd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eec1:	51                   	push   ecx
c001eec2:	6a 0c                	push   0xc
c001eec4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001eecb:	50                   	push   eax
c001eecc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001eed2:	e8 55 e7 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001eed7:	83 c4 10             	add    esp,0x10
c001eeda:	a8 88                	test   al,0x88
c001eedc:	74 25                	je     c001ef03 <ATAPI::readyForCommand()+0x4b>
c001eede:	43                   	inc    ebx
c001eedf:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001eee5:	7e da                	jle    c001eec1 <ATAPI::readyForCommand()+0x9>
c001eee7:	83 ec 0c             	sub    esp,0xc
c001eeea:	68 5e 01 00 00       	push   0x15e
c001eeef:	e8 f4 75 ff ff       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001eef4:	83 c4 10             	add    esp,0x10
c001eef7:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001eefd:	75 c2                	jne    c001eec1 <ATAPI::readyForCommand()+0x9>
c001eeff:	31 c0                	xor    eax,eax
c001ef01:	eb 02                	jmp    c001ef05 <ATAPI::readyForCommand()+0x4d>
c001ef03:	b0 01                	mov    al,0x1
c001ef05:	5a                   	pop    edx
c001ef06:	5b                   	pop    ebx
c001ef07:	5e                   	pop    esi
c001ef08:	c3                   	ret    
c001ef09:	90                   	nop

c001ef0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ef0a:	55                   	push   ebp
c001ef0b:	57                   	push   edi
c001ef0c:	56                   	push   esi
c001ef0d:	53                   	push   ebx
c001ef0e:	83 ec 20             	sub    esp,0x20
c001ef11:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ef15:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ef19:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ef1d:	6a 01                	push   0x1
c001ef1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef26:	50                   	push   eax
c001ef27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef2d:	e8 48 e8 ff ff       	call   c001d77a <IDE::enableIRQs(unsigned char, bool)>
c001ef32:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef39:	59                   	pop    ecx
c001ef3a:	5e                   	pop    esi
c001ef3b:	50                   	push   eax
c001ef3c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef42:	e8 ff e5 ff ff       	call   c001d546 <IDE::prepareInterrupt(unsigned char)>
c001ef47:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ef4a:	e8 69 ff ff ff       	call   c001eeb8 <ATAPI::readyForCommand()>
c001ef4f:	83 c4 10             	add    esp,0x10
c001ef52:	84 c0                	test   al,al
c001ef54:	75 0a                	jne    c001ef60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001ef56:	bb 01 00 00 00       	mov    ebx,0x1
c001ef5b:	e9 5f 02 00 00       	jmp    c001f1bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ef60:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001ef66:	c1 e0 04             	shl    eax,0x4
c001ef69:	0f b6 c0             	movzx  eax,al
c001ef6c:	50                   	push   eax
c001ef6d:	6a 06                	push   0x6
c001ef6f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef76:	50                   	push   eax
c001ef77:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef7d:	e8 ea e5 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef82:	6a 00                	push   0x0
c001ef84:	6a 01                	push   0x1
c001ef86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef8d:	50                   	push   eax
c001ef8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef94:	e8 d3 e5 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef99:	83 c4 20             	add    esp,0x20
c001ef9c:	0f b6 c3             	movzx  eax,bl
c001ef9f:	50                   	push   eax
c001efa0:	0f b6 df             	movzx  ebx,bh
c001efa3:	6a 04                	push   0x4
c001efa5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001efac:	50                   	push   eax
c001efad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001efb3:	e8 b4 e5 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efb8:	53                   	push   ebx
c001efb9:	6a 05                	push   0x5
c001efbb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001efc2:	50                   	push   eax
c001efc3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001efc9:	e8 9e e5 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efce:	83 c4 20             	add    esp,0x20
c001efd1:	68 a0 00 00 00       	push   0xa0
c001efd6:	6a 07                	push   0x7
c001efd8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001efdf:	50                   	push   eax
c001efe0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001efe6:	e8 81 e5 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efeb:	83 c4 0c             	add    esp,0xc
c001efee:	6a 01                	push   0x1
c001eff0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eff7:	50                   	push   eax
c001eff8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001effe:	e8 07 f3 ff ff       	call   c001e30a <IDE::polling(unsigned char, unsigned int)>
c001f003:	83 c4 10             	add    esp,0x10
c001f006:	0f b6 d8             	movzx  ebx,al
c001f009:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001f00f:	85 db                	test   ebx,ebx
c001f011:	74 20                	je     c001f033 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001f013:	53                   	push   ebx
c001f014:	0f b6 c0             	movzx  eax,al
c001f017:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001f01e:	52                   	push   edx
c001f01f:	50                   	push   eax
c001f020:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f026:	e8 25 f2 ff ff       	call   c001e250 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f02b:	83 c4 10             	add    esp,0x10
c001f02e:	e9 8c 01 00 00       	jmp    c001f1bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f033:	52                   	push   edx
c001f034:	0f b6 c0             	movzx  eax,al
c001f037:	52                   	push   edx
c001f038:	50                   	push   eax
c001f039:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f03f:	e8 16 e5 ff ff       	call   c001d55a <IDE::getBase(unsigned char)>
c001f044:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f048:	b9 06 00 00 00       	mov    ecx,0x6
c001f04d:	89 c2                	mov    edx,eax
c001f04f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f052:	89 e8                	mov    eax,ebp
c001f054:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f058:	83 c4 10             	add    esp,0x10
c001f05b:	0f b6 c0             	movzx  eax,al
c001f05e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f062:	85 db                	test   ebx,ebx
c001f064:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f06a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f071:	0f 84 eb 00 00 00    	je     c001f162 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001f077:	55                   	push   ebp
c001f078:	55                   	push   ebp
c001f079:	52                   	push   edx
c001f07a:	50                   	push   eax
c001f07b:	e8 60 e6 ff ff       	call   c001d6e0 <IDE::waitInterrupt(unsigned char)>
c001f080:	83 c4 10             	add    esp,0x10
c001f083:	84 c0                	test   al,al
c001f085:	0f 84 cb fe ff ff    	je     c001ef56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001f08b:	56                   	push   esi
c001f08c:	56                   	push   esi
c001f08d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f094:	50                   	push   eax
c001f095:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f09b:	e8 a6 e4 ff ff       	call   c001d546 <IDE::prepareInterrupt(unsigned char)>
c001f0a0:	83 c4 0c             	add    esp,0xc
c001f0a3:	6a 04                	push   0x4
c001f0a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f0ac:	50                   	push   eax
c001f0ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f0b3:	e8 74 e5 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001f0b8:	83 c4 0c             	add    esp,0xc
c001f0bb:	6a 05                	push   0x5
c001f0bd:	89 c6                	mov    esi,eax
c001f0bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f0c6:	50                   	push   eax
c001f0c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f0cd:	e8 5a e5 ff ff       	call   c001d62c <IDE::read(unsigned char, unsigned char)>
c001f0d2:	83 c4 10             	add    esp,0x10
c001f0d5:	0f b6 e8             	movzx  ebp,al
c001f0d8:	89 f0                	mov    eax,esi
c001f0da:	c1 e5 08             	shl    ebp,0x8
c001f0dd:	0f b6 f0             	movzx  esi,al
c001f0e0:	09 f5                	or     ebp,esi
c001f0e2:	31 f6                	xor    esi,esi
c001f0e4:	d1 fd                	sar    ebp,1
c001f0e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f0eb:	74 5c                	je     c001f149 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001f0ed:	39 ee                	cmp    esi,ebp
c001f0ef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f0f5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f0fc:	75 0d                	jne    c001f10b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001f0fe:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001f101:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001f105:	4b                   	dec    ebx
c001f106:	e9 57 ff ff ff       	jmp    c001f062 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001f10b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f10f:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001f113:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001f118:	51                   	push   ecx
c001f119:	51                   	push   ecx
c001f11a:	52                   	push   edx
c001f11b:	50                   	push   eax
c001f11c:	e8 39 e4 ff ff       	call   c001d55a <IDE::getBase(unsigned char)>
c001f121:	89 c2                	mov    edx,eax
c001f123:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001f128:	66 ef                	out    dx,ax
c001f12a:	46                   	inc    esi
c001f12b:	83 c4 10             	add    esp,0x10
c001f12e:	eb bd                	jmp    c001f0ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001f130:	51                   	push   ecx
c001f131:	51                   	push   ecx
c001f132:	52                   	push   edx
c001f133:	50                   	push   eax
c001f134:	e8 21 e4 ff ff       	call   c001d55a <IDE::getBase(unsigned char)>
c001f139:	89 c2                	mov    edx,eax
c001f13b:	66 ed                	in     ax,dx
c001f13d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001f148:	46                   	inc    esi
c001f149:	39 ee                	cmp    esi,ebp
c001f14b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f151:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f158:	75 d6                	jne    c001f130 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001f15a:	01 f6                	add    esi,esi
c001f15c:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001f160:	eb a3                	jmp    c001f105 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001f162:	51                   	push   ecx
c001f163:	51                   	push   ecx
c001f164:	52                   	push   edx
c001f165:	50                   	push   eax
c001f166:	e8 75 e5 ff ff       	call   c001d6e0 <IDE::waitInterrupt(unsigned char)>
c001f16b:	83 c4 10             	add    esp,0x10
c001f16e:	84 c0                	test   al,al
c001f170:	0f 84 e0 fd ff ff    	je     c001ef56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001f176:	52                   	push   edx
c001f177:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f17c:	52                   	push   edx
c001f17d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f184:	50                   	push   eax
c001f185:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f18b:	e8 b6 e3 ff ff       	call   c001d546 <IDE::prepareInterrupt(unsigned char)>
c001f190:	83 c4 10             	add    esp,0x10
c001f193:	50                   	push   eax
c001f194:	50                   	push   eax
c001f195:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f19c:	50                   	push   eax
c001f19d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1a3:	e8 b2 e3 ff ff       	call   c001d55a <IDE::getBase(unsigned char)>
c001f1a8:	8d 50 07             	lea    edx,[eax+0x7]
c001f1ab:	ec                   	in     al,dx
c001f1ac:	83 c4 10             	add    esp,0x10
c001f1af:	a8 88                	test   al,0x88
c001f1b1:	74 0a                	je     c001f1bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001f1b3:	4b                   	dec    ebx
c001f1b4:	75 dd                	jne    c001f193 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001f1b6:	bb 02 00 00 00       	mov    ebx,0x2
c001f1bb:	eb 02                	jmp    c001f1bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f1bd:	31 db                	xor    ebx,ebx
c001f1bf:	83 c4 1c             	add    esp,0x1c
c001f1c2:	89 d8                	mov    eax,ebx
c001f1c4:	5b                   	pop    ebx
c001f1c5:	5e                   	pop    esi
c001f1c6:	5f                   	pop    edi
c001f1c7:	5d                   	pop    ebp
c001f1c8:	c3                   	ret    
c001f1c9:	90                   	nop

c001f1ca <ATAPI::diskRemoved()>:
c001f1ca:	53                   	push   ebx
c001f1cb:	83 ec 14             	sub    esp,0x14
c001f1ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f1d2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f1d9:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f1df:	e8 a6 b0 fe ff       	call   c000a28a <LogicalDisk::unmount()>
c001f1e4:	58                   	pop    eax
c001f1e5:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f1eb:	e8 4c ba fe ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c001f1f0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f1f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f1fa:	83 c4 18             	add    esp,0x18
c001f1fd:	5b                   	pop    ebx
c001f1fe:	e9 29 ba fe ff       	jmp    c000ac2c <VCache::invalidateReadBuffer()>
c001f203:	90                   	nop

c001f204 <ATAPI::eject()>:
c001f204:	57                   	push   edi
c001f205:	b9 03 00 00 00       	mov    ecx,0x3
c001f20a:	53                   	push   ebx
c001f20b:	83 ec 14             	sub    esp,0x14
c001f20e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f212:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f216:	fc                   	cld    
c001f217:	31 c0                	xor    eax,eax
c001f219:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f21b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f220:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f225:	50                   	push   eax
c001f226:	50                   	push   eax
c001f227:	6a 00                	push   0x0
c001f229:	6a 00                	push   0x0
c001f22b:	6a 00                	push   0x0
c001f22d:	6a 02                	push   0x2
c001f22f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f233:	50                   	push   eax
c001f234:	53                   	push   ebx
c001f235:	e8 d0 fc ff ff       	call   c001ef0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f23a:	83 c4 14             	add    esp,0x14
c001f23d:	53                   	push   ebx
c001f23e:	e8 87 ff ff ff       	call   c001f1ca <ATAPI::diskRemoved()>
c001f243:	83 c4 24             	add    esp,0x24
c001f246:	31 c0                	xor    eax,eax
c001f248:	5b                   	pop    ebx
c001f249:	5f                   	pop    edi
c001f24a:	c3                   	ret    
c001f24b:	90                   	nop

c001f24c <ATAPI::diskInserted()>:
c001f24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f250:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f257:	c3                   	ret    

c001f258 <ATAPI::detectMedia()>:
c001f258:	56                   	push   esi
c001f259:	53                   	push   ebx
c001f25a:	83 ec 28             	sub    esp,0x28
c001f25d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f261:	6a 0c                	push   0xc
c001f263:	6a 00                	push   0x0
c001f265:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f269:	56                   	push   esi
c001f26a:	e8 81 12 fe ff       	call   c00004f0 <memset>
c001f26f:	58                   	pop    eax
c001f270:	5a                   	pop    edx
c001f271:	6a 00                	push   0x0
c001f273:	6a 00                	push   0x0
c001f275:	6a 00                	push   0x0
c001f277:	6a 00                	push   0x0
c001f279:	56                   	push   esi
c001f27a:	53                   	push   ebx
c001f27b:	e8 8a fc ff ff       	call   c001ef0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f280:	83 c4 1c             	add    esp,0x1c
c001f283:	6a 0c                	push   0xc
c001f285:	6a 00                	push   0x0
c001f287:	56                   	push   esi
c001f288:	e8 63 12 fe ff       	call   c00004f0 <memset>
c001f28d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f292:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f297:	59                   	pop    ecx
c001f298:	58                   	pop    eax
c001f299:	6a 01                	push   0x1
c001f29b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f29f:	50                   	push   eax
c001f2a0:	6a 00                	push   0x0
c001f2a2:	6a 12                	push   0x12
c001f2a4:	56                   	push   esi
c001f2a5:	53                   	push   ebx
c001f2a6:	e8 5f fc ff ff       	call   c001ef0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f2ab:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f2af:	83 c4 20             	add    esp,0x20
c001f2b2:	83 e0 7f             	and    eax,0x7f
c001f2b5:	83 f8 70             	cmp    eax,0x70
c001f2b8:	74 15                	je     c001f2cf <ATAPI::detectMedia()+0x77>
c001f2ba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f2c1:	75 0c                	jne    c001f2cf <ATAPI::detectMedia()+0x77>
c001f2c3:	83 ec 0c             	sub    esp,0xc
c001f2c6:	53                   	push   ebx
c001f2c7:	e8 80 ff ff ff       	call   c001f24c <ATAPI::diskInserted()>
c001f2cc:	83 c4 10             	add    esp,0x10
c001f2cf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f2d3:	83 e0 0f             	and    eax,0xf
c001f2d6:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f2db:	0f b6 c0             	movzx  eax,al
c001f2de:	75 19                	jne    c001f2f9 <ATAPI::detectMedia()+0xa1>
c001f2e0:	83 f8 02             	cmp    eax,0x2
c001f2e3:	75 14                	jne    c001f2f9 <ATAPI::detectMedia()+0xa1>
c001f2e5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f2ec:	74 24                	je     c001f312 <ATAPI::detectMedia()+0xba>
c001f2ee:	83 ec 0c             	sub    esp,0xc
c001f2f1:	53                   	push   ebx
c001f2f2:	e8 d3 fe ff ff       	call   c001f1ca <ATAPI::diskRemoved()>
c001f2f7:	eb 16                	jmp    c001f30f <ATAPI::detectMedia()+0xb7>
c001f2f9:	85 c0                	test   eax,eax
c001f2fb:	75 15                	jne    c001f312 <ATAPI::detectMedia()+0xba>
c001f2fd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f304:	75 0c                	jne    c001f312 <ATAPI::detectMedia()+0xba>
c001f306:	83 ec 0c             	sub    esp,0xc
c001f309:	53                   	push   ebx
c001f30a:	e8 3d ff ff ff       	call   c001f24c <ATAPI::diskInserted()>
c001f30f:	83 c4 10             	add    esp,0x10
c001f312:	83 c4 24             	add    esp,0x24
c001f315:	5b                   	pop    ebx
c001f316:	5e                   	pop    esi
c001f317:	c3                   	ret    

c001f318 <ATAPI::open(int, int, void*)>:
c001f318:	56                   	push   esi
c001f319:	53                   	push   ebx
c001f31a:	50                   	push   eax
c001f31b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f31f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f323:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f327:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f32d:	c1 e0 06             	shl    eax,0x6
c001f330:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f336:	01 d0                	add    eax,edx
c001f338:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f33f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f345:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f34c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f356:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f35d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f363:	6a 04                	push   0x4
c001f365:	6a 0c                	push   0xc
c001f367:	51                   	push   ecx
c001f368:	52                   	push   edx
c001f369:	e8 fe e1 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f36e:	90                   	nop
c001f36f:	90                   	nop
c001f370:	6a 00                	push   0x0
c001f372:	6a 0c                	push   0xc
c001f374:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f37b:	50                   	push   eax
c001f37c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f382:	e8 e5 e1 ff ff       	call   c001d56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f387:	83 c4 14             	add    esp,0x14
c001f38a:	68 78 01 00 00       	push   0x178
c001f38f:	e8 04 00 ff ff       	call   c000f398 <malloc>
c001f394:	83 c4 0c             	add    esp,0xc
c001f397:	6a 00                	push   0x0
c001f399:	68 ff ff ff 7f       	push   0x7fffffff
c001f39e:	6a 00                	push   0x0
c001f3a0:	6a 00                	push   0x0
c001f3a2:	53                   	push   ebx
c001f3a3:	68 d3 50 02 c0       	push   0xc00250d3
c001f3a8:	89 c6                	mov    esi,eax
c001f3aa:	50                   	push   eax
c001f3ab:	e8 18 ad fe ff       	call   c000a0c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f3b0:	83 c4 14             	add    esp,0x14
c001f3b3:	56                   	push   esi
c001f3b4:	e8 cf ad fe ff       	call   c000a188 <LogicalDisk::assignDriveLetter()>
c001f3b9:	5a                   	pop    edx
c001f3ba:	59                   	pop    ecx
c001f3bb:	0f be c0             	movsx  eax,al
c001f3be:	50                   	push   eax
c001f3bf:	68 18 4f 02 c0       	push   0xc0024f18
c001f3c4:	e8 85 7b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f3c9:	58                   	pop    eax
c001f3ca:	5a                   	pop    edx
c001f3cb:	56                   	push   esi
c001f3cc:	53                   	push   ebx
c001f3cd:	e8 dc 9e fe ff       	call   c00092ae <Device::addChild(Device*)>
c001f3d2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001f3d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f3db:	e8 1a a3 fe ff       	call   c00096fa <PhysicalDisk::startCache()>
c001f3e0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f3e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f3ea:	e8 69 fe ff ff       	call   c001f258 <ATAPI::detectMedia()>
c001f3ef:	83 c4 14             	add    esp,0x14
c001f3f2:	31 c0                	xor    eax,eax
c001f3f4:	5b                   	pop    ebx
c001f3f5:	5e                   	pop    esi
c001f3f6:	c3                   	ret    
c001f3f7:	90                   	nop

c001f3f8 <ATAPI::read(unsigned long long, int, void*)>:
c001f3f8:	55                   	push   ebp
c001f3f9:	57                   	push   edi
c001f3fa:	56                   	push   esi
c001f3fb:	53                   	push   ebx
c001f3fc:	83 ec 1c             	sub    esp,0x1c
c001f3ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f403:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f407:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f40b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f412:	74 3c                	je     c001f450 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001f414:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f418:	b9 03 00 00 00       	mov    ecx,0x3
c001f41d:	fc                   	cld    
c001f41e:	31 c0                	xor    eax,eax
c001f420:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f422:	89 e8                	mov    eax,ebp
c001f424:	0f ce                	bswap  esi
c001f426:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f42a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f42f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001f433:	50                   	push   eax
c001f434:	50                   	push   eax
c001f435:	55                   	push   ebp
c001f436:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f43a:	c1 e5 0b             	shl    ebp,0xb
c001f43d:	6a 00                	push   0x0
c001f43f:	55                   	push   ebp
c001f440:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f444:	50                   	push   eax
c001f445:	53                   	push   ebx
c001f446:	e8 bf fa ff ff       	call   c001ef0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f44b:	83 c4 20             	add    esp,0x20
c001f44e:	eb 1a                	jmp    c001f46a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001f450:	83 ec 0c             	sub    esp,0xc
c001f453:	53                   	push   ebx
c001f454:	e8 ff fd ff ff       	call   c001f258 <ATAPI::detectMedia()>
c001f459:	83 c4 10             	add    esp,0x10
c001f45c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f463:	75 af                	jne    c001f414 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f465:	b8 02 00 00 00       	mov    eax,0x2
c001f46a:	83 c4 1c             	add    esp,0x1c
c001f46d:	5b                   	pop    ebx
c001f46e:	5e                   	pop    esi
c001f46f:	5f                   	pop    edi
c001f470:	5d                   	pop    ebp
c001f471:	c3                   	ret    

c001f472 <SATA::close(int, int, void*)>:
c001f472:	83 ec 0c             	sub    esp,0xc
c001f475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f479:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f47f:	85 c0                	test   eax,eax
c001f481:	74 0c                	je     c001f48f <SATA::close(int, int, void*)+0x1d>
c001f483:	8b 10                	mov    edx,DWORD PTR [eax]
c001f485:	83 ec 0c             	sub    esp,0xc
c001f488:	50                   	push   eax
c001f489:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f48c:	83 c4 10             	add    esp,0x10
c001f48f:	31 c0                	xor    eax,eax
c001f491:	83 c4 0c             	add    esp,0xc
c001f494:	c3                   	ret    
c001f495:	90                   	nop

c001f496 <SATA::powerSaving(PowerSavingLevel)>:
c001f496:	c3                   	ret    
c001f497:	90                   	nop

c001f498 <SATA::open(int, int, void*)>:
c001f498:	56                   	push   esi
c001f499:	53                   	push   ebx
c001f49a:	83 ec 10             	sub    esp,0x10
c001f49d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f4a1:	68 60 4f 02 c0       	push   0xc0024f60
c001f4a6:	e8 a3 7a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f4ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f4af:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f4b9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f4c3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f4c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f4cd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f4d7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f4de:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f4e4:	e8 ef 03 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c001f4e9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f4ef:	89 c6                	mov    esi,eax
c001f4f1:	e8 e2 03 ff ff       	call   c000f8d8 <Phys::allocatePage()>
c001f4f6:	81 c6 00 10 00 00    	add    esi,0x1000
c001f4fc:	83 c4 10             	add    esp,0x10
c001f4ff:	39 c6                	cmp    esi,eax
c001f501:	74 10                	je     c001f513 <SATA::open(int, int, void*)+0x7b>
c001f503:	83 ec 0c             	sub    esp,0xc
c001f506:	68 6c 4f 02 c0       	push   0xc0024f6c
c001f50b:	e8 ce 01 ff ff       	call   c000f6de <KePanic(char const*)>
c001f510:	83 c4 10             	add    esp,0x10
c001f513:	83 ec 0c             	sub    esp,0xc
c001f516:	6a 02                	push   0x2
c001f518:	e8 80 35 ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c001f51d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f523:	6a 03                	push   0x3
c001f525:	50                   	push   eax
c001f526:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f52c:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001f532:	e8 3f 3c ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f537:	83 c4 14             	add    esp,0x14
c001f53a:	53                   	push   ebx
c001f53b:	e8 ba a1 fe ff       	call   c00096fa <PhysicalDisk::startCache()>
c001f540:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f543:	e8 52 b0 fe ff       	call   c000a59a <createPartitionsForDisk(PhysicalDisk*)>
c001f548:	83 c4 14             	add    esp,0x14
c001f54b:	31 c0                	xor    eax,eax
c001f54d:	5b                   	pop    ebx
c001f54e:	5e                   	pop    esi
c001f54f:	c3                   	ret    

c001f550 <SATA::SATA()>:
c001f550:	83 ec 0c             	sub    esp,0xc
c001f553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f557:	83 ec 04             	sub    esp,0x4
c001f55a:	68 00 02 00 00       	push   0x200
c001f55f:	68 80 4f 02 c0       	push   0xc0024f80
c001f564:	50                   	push   eax
c001f565:	e8 28 a1 fe ff       	call   c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f56a:	83 c4 10             	add    esp,0x10
c001f56d:	ba f0 4f 02 c0       	mov    edx,0xc0024ff0
c001f572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f576:	89 10                	mov    DWORD PTR [eax],edx
c001f578:	90                   	nop
c001f579:	83 c4 0c             	add    esp,0xc
c001f57c:	c3                   	ret    
c001f57d:	90                   	nop

c001f57e <SATA::access(unsigned long long, int, void*, bool)>:
c001f57e:	55                   	push   ebp
c001f57f:	57                   	push   edi
c001f580:	56                   	push   esi
c001f581:	53                   	push   ebx
c001f582:	83 ec 2c             	sub    esp,0x2c
c001f585:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f589:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f58d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f591:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f599:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f59d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f5a1:	fa                   	cli    
c001f5a2:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001f5a8:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f5ad:	7e 10                	jle    c001f5bf <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001f5af:	83 ec 0c             	sub    esp,0xc
c001f5b2:	68 90 4f 02 c0       	push   0xc0024f90
c001f5b7:	e8 22 01 ff ff       	call   c000f6de <KePanic(char const*)>
c001f5bc:	83 c4 10             	add    esp,0x10
c001f5bf:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f5c5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001f5cb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f5d1:	89 e8                	mov    eax,ebp
c001f5d3:	c1 e0 07             	shl    eax,0x7
c001f5d6:	01 d0                	add    eax,edx
c001f5d8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f5e2:	8d 45 02             	lea    eax,[ebp+0x2]
c001f5e5:	51                   	push   ecx
c001f5e6:	c1 e0 07             	shl    eax,0x7
c001f5e9:	51                   	push   ecx
c001f5ea:	01 d0                	add    eax,edx
c001f5ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001f5f0:	50                   	push   eax
c001f5f1:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f5f7:	e8 ee ed ff ff       	call   c001e3ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f5fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f600:	83 c4 10             	add    esp,0x10
c001f603:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001f608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f60c:	0f 84 a6 01 00 00    	je     c001f7b8 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001f612:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f616:	c1 e0 09             	shl    eax,0x9
c001f619:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f61e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f622:	74 0e                	je     c001f632 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001f624:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f62a:	89 c1                	mov    ecx,eax
c001f62c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f630:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f632:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f636:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f63c:	8d 45 02             	lea    eax,[ebp+0x2]
c001f63f:	c1 e0 07             	shl    eax,0x7
c001f642:	01 d0                	add    eax,edx
c001f644:	8b 00                	mov    eax,DWORD PTR [eax]
c001f646:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f64c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f652:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f656:	c1 e1 05             	shl    ecx,0x5
c001f659:	01 c8                	add    eax,ecx
c001f65b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f65f:	83 e1 01             	and    ecx,0x1
c001f662:	89 ce                	mov    esi,ecx
c001f664:	8a 08                	mov    cl,BYTE PTR [eax]
c001f666:	c1 e6 06             	shl    esi,0x6
c001f669:	83 e1 bf             	and    ecx,0xffffffbf
c001f66c:	09 f1                	or     ecx,esi
c001f66e:	88 08                	mov    BYTE PTR [eax],cl
c001f670:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f672:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f678:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f67e:	89 08                	mov    DWORD PTR [eax],ecx
c001f680:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f686:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f68c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f692:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f695:	50                   	push   eax
c001f696:	68 90 00 00 00       	push   0x90
c001f69b:	6a 00                	push   0x0
c001f69d:	56                   	push   esi
c001f69e:	e8 4d 0e fe ff       	call   c00004f0 <memset>
c001f6a3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f6a9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f6af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f6b3:	83 c4 10             	add    esp,0x10
c001f6b6:	48                   	dec    eax
c001f6b7:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f6bc:	89 c1                	mov    ecx,eax
c001f6be:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f6c4:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f6c9:	09 c8                	or     eax,ecx
c001f6cb:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f6d1:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001f6d7:	83 c8 80             	or     eax,0xffffff80
c001f6da:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001f6e0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f6e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6e7:	25 00 7f 00 00       	and    eax,0x7f00
c001f6ec:	0d 27 80 ff ff       	or     eax,0xffff8027
c001f6f1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f6f6:	66 89 06             	mov    WORD PTR [esi],ax
c001f6f9:	b0 35                	mov    al,0x35
c001f6fb:	75 02                	jne    c001f6ff <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001f6fd:	b0 25                	mov    al,0x25
c001f6ff:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f702:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f706:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f70a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001f70e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f712:	c1 e8 10             	shr    eax,0x10
c001f715:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f71c:	c1 e8 18             	shr    eax,0x18
c001f71f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f722:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f726:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f729:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f72d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f730:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f734:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f738:	89 ee                	mov    esi,ebp
c001f73a:	31 c0                	xor    eax,eax
c001f73c:	c1 e6 07             	shl    esi,0x7
c001f73f:	01 d6                	add    esi,edx
c001f741:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f747:	80 e1 88             	and    cl,0x88
c001f74a:	74 0a                	je     c001f756 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001f74c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f751:	74 0a                	je     c001f75d <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f753:	40                   	inc    eax
c001f754:	eb eb                	jmp    c001f741 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001f756:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f75b:	75 0a                	jne    c001f767 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001f75d:	83 ec 0c             	sub    esp,0xc
c001f760:	68 c9 4f 02 c0       	push   0xc0024fc9
c001f765:	eb 34                	jmp    c001f79b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001f767:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f76b:	c1 e5 07             	shl    ebp,0x7
c001f76e:	b8 01 00 00 00       	mov    eax,0x1
c001f773:	01 ea                	add    edx,ebp
c001f775:	d3 e0                	shl    eax,cl
c001f777:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f77d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f783:	85 c8                	test   eax,ecx
c001f785:	74 25                	je     c001f7ac <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001f787:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f78d:	0f ba e1 1e          	bt     ecx,0x1e
c001f791:	73 ea                	jae    c001f77d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001f793:	83 ec 0c             	sub    esp,0xc
c001f796:	68 d7 4f 02 c0       	push   0xc0024fd7
c001f79b:	e8 ae 77 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f7a0:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001f7a7:	83 c4 10             	add    esp,0x10
c001f7aa:	eb 13                	jmp    c001f7bf <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001f7ac:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f7b2:	0f ba e0 1e          	bt     eax,0x1e
c001f7b6:	73 18                	jae    c001f7d0 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001f7b8:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001f7bf:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001f7c6:	75 01                	jne    c001f7c9 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001f7c8:	fb                   	sti    
c001f7c9:	b8 01 00 00 00       	mov    eax,0x1
c001f7ce:	eb 2c                	jmp    c001f7fc <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001f7d0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f7d5:	75 10                	jne    c001f7e7 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001f7d7:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f7dd:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f7e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f7e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f7e7:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001f7ee:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001f7f3:	85 c0                	test   eax,eax
c001f7f5:	75 03                	jne    c001f7fa <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001f7f7:	fb                   	sti    
c001f7f8:	eb 02                	jmp    c001f7fc <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001f7fa:	31 c0                	xor    eax,eax
c001f7fc:	83 c4 2c             	add    esp,0x2c
c001f7ff:	5b                   	pop    ebx
c001f800:	5e                   	pop    esi
c001f801:	5f                   	pop    edi
c001f802:	5d                   	pop    ebp
c001f803:	c3                   	ret    

c001f804 <SATA::read(unsigned long long, int, void*)>:
c001f804:	57                   	push   edi
c001f805:	b8 04 00 00 00       	mov    eax,0x4
c001f80a:	56                   	push   esi
c001f80b:	53                   	push   ebx
c001f80c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f810:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f814:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f818:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f81c:	8d 7a ff             	lea    edi,[edx-0x1]
c001f81f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f825:	77 25                	ja     c001f84c <SATA::read(unsigned long long, int, void*)+0x48>
c001f827:	85 f6                	test   esi,esi
c001f829:	b8 06 00 00 00       	mov    eax,0x6
c001f82e:	74 1c                	je     c001f84c <SATA::read(unsigned long long, int, void*)+0x48>
c001f830:	50                   	push   eax
c001f831:	50                   	push   eax
c001f832:	6a 00                	push   0x0
c001f834:	56                   	push   esi
c001f835:	52                   	push   edx
c001f836:	53                   	push   ebx
c001f837:	51                   	push   ecx
c001f838:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f83c:	e8 3d fd ff ff       	call   c001f57e <SATA::access(unsigned long long, int, void*, bool)>
c001f841:	83 c4 20             	add    esp,0x20
c001f844:	85 c0                	test   eax,eax
c001f846:	0f 95 c0             	setne  al
c001f849:	0f b6 c0             	movzx  eax,al
c001f84c:	5b                   	pop    ebx
c001f84d:	5e                   	pop    esi
c001f84e:	5f                   	pop    edi
c001f84f:	c3                   	ret    

c001f850 <SATA::write(unsigned long long, int, void*)>:
c001f850:	55                   	push   ebp
c001f851:	b8 04 00 00 00       	mov    eax,0x4
c001f856:	57                   	push   edi
c001f857:	56                   	push   esi
c001f858:	53                   	push   ebx
c001f859:	83 ec 0c             	sub    esp,0xc
c001f85c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f860:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f864:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f868:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f86c:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f86f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f875:	77 3d                	ja     c001f8b4 <SATA::write(unsigned long long, int, void*)+0x64>
c001f877:	85 ed                	test   ebp,ebp
c001f879:	b8 06 00 00 00       	mov    eax,0x6
c001f87e:	74 34                	je     c001f8b4 <SATA::write(unsigned long long, int, void*)+0x64>
c001f880:	c1 e3 09             	shl    ebx,0x9
c001f883:	01 eb                	add    ebx,ebp
c001f885:	50                   	push   eax
c001f886:	89 d6                	mov    esi,edx
c001f888:	50                   	push   eax
c001f889:	83 c6 01             	add    esi,0x1
c001f88c:	6a 01                	push   0x1
c001f88e:	89 cf                	mov    edi,ecx
c001f890:	55                   	push   ebp
c001f891:	83 d7 00             	adc    edi,0x0
c001f894:	6a 01                	push   0x1
c001f896:	81 c5 00 02 00 00    	add    ebp,0x200
c001f89c:	51                   	push   ecx
c001f89d:	52                   	push   edx
c001f89e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f8a2:	e8 d7 fc ff ff       	call   c001f57e <SATA::access(unsigned long long, int, void*, bool)>
c001f8a7:	83 c4 20             	add    esp,0x20
c001f8aa:	39 dd                	cmp    ebp,ebx
c001f8ac:	89 f2                	mov    edx,esi
c001f8ae:	89 f9                	mov    ecx,edi
c001f8b0:	75 d3                	jne    c001f885 <SATA::write(unsigned long long, int, void*)+0x35>
c001f8b2:	31 c0                	xor    eax,eax
c001f8b4:	83 c4 0c             	add    esp,0xc
c001f8b7:	5b                   	pop    ebx
c001f8b8:	5e                   	pop    esi
c001f8b9:	5f                   	pop    edi
c001f8ba:	5d                   	pop    ebp
c001f8bb:	c3                   	ret    

c001f8bc <SATAPI::write(unsigned long long, int, void*)>:
c001f8bc:	b8 03 00 00 00       	mov    eax,0x3
c001f8c1:	c3                   	ret    

c001f8c2 <SATAPI::close(int, int, void*)>:
c001f8c2:	83 ec 0c             	sub    esp,0xc
c001f8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f8cf:	85 c0                	test   eax,eax
c001f8d1:	74 0c                	je     c001f8df <SATAPI::close(int, int, void*)+0x1d>
c001f8d3:	8b 10                	mov    edx,DWORD PTR [eax]
c001f8d5:	83 ec 0c             	sub    esp,0xc
c001f8d8:	50                   	push   eax
c001f8d9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f8dc:	83 c4 10             	add    esp,0x10
c001f8df:	31 c0                	xor    eax,eax
c001f8e1:	83 c4 0c             	add    esp,0xc
c001f8e4:	c3                   	ret    
c001f8e5:	90                   	nop

c001f8e6 <SATAPI::SATAPI()>:
c001f8e6:	83 ec 0c             	sub    esp,0xc
c001f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ed:	83 ec 04             	sub    esp,0x4
c001f8f0:	68 00 08 00 00       	push   0x800
c001f8f5:	68 20 50 02 c0       	push   0xc0025020
c001f8fa:	50                   	push   eax
c001f8fb:	e8 92 9d fe ff       	call   c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f900:	83 c4 10             	add    esp,0x10
c001f903:	ba 14 51 02 c0       	mov    edx,0xc0025114
c001f908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90c:	89 10                	mov    DWORD PTR [eax],edx
c001f90e:	90                   	nop
c001f90f:	83 c4 0c             	add    esp,0xc
c001f912:	c3                   	ret    
c001f913:	90                   	nop

c001f914 <SATAPI::diskRemoved()>:
c001f914:	c3                   	ret    
c001f915:	90                   	nop

c001f916 <SATAPI::diskInserted()>:
c001f916:	83 ec 18             	sub    esp,0x18
c001f919:	68 2c 50 02 c0       	push   0xc002502c
c001f91e:	e8 2b 76 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f927:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001f92e:	83 c4 1c             	add    esp,0x1c
c001f931:	c3                   	ret    

c001f932 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f932:	55                   	push   ebp
c001f933:	57                   	push   edi
c001f934:	56                   	push   esi
c001f935:	53                   	push   ebx
c001f936:	83 ec 34             	sub    esp,0x34
c001f939:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f93d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f945:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f949:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f94d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f953:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f959:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f95d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f963:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f967:	83 c0 02             	add    eax,0x2
c001f96a:	c1 e0 07             	shl    eax,0x7
c001f96d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f975:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f979:	c1 e0 07             	shl    eax,0x7
c001f97c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f980:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f984:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f98e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f992:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f998:	e8 4d ea ff ff       	call   c001e3ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f99d:	83 c4 10             	add    esp,0x10
c001f9a0:	89 c2                	mov    edx,eax
c001f9a2:	b8 01 00 00 00       	mov    eax,0x1
c001f9a7:	83 fa ff             	cmp    edx,0xffffffff
c001f9aa:	0f 84 5f 02 00 00    	je     c001fc0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001f9b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9b8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f9be:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f9c6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f9cc:	89 d1                	mov    ecx,edx
c001f9ce:	c1 e1 05             	shl    ecx,0x5
c001f9d1:	01 c8                	add    eax,ecx
c001f9d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f9d5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f9db:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f9e1:	89 08                	mov    DWORD PTR [eax],ecx
c001f9e3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f9e9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f9ef:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f9f5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f9f8:	50                   	push   eax
c001f9f9:	68 90 00 00 00       	push   0x90
c001f9fe:	6a 00                	push   0x0
c001fa00:	53                   	push   ebx
c001fa01:	e8 ea 0a fe ff       	call   c00004f0 <memset>
c001fa06:	8d 7b 40             	lea    edi,[ebx+0x40]
c001fa09:	b9 0c 00 00 00       	mov    ecx,0xc
c001fa0e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001fa12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fa14:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001fa1a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001fa1e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001fa22:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001fa28:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fa2c:	48                   	dec    eax
c001fa2d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001fa32:	89 c1                	mov    ecx,eax
c001fa34:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001fa3a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001fa3f:	09 c8                	or     eax,ecx
c001fa41:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001fa47:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001fa4d:	83 c8 80             	or     eax,0xffffff80
c001fa50:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001fa56:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001fa59:	25 00 7f 00 00       	and    eax,0x7f00
c001fa5e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001fa63:	66 89 03             	mov    WORD PTR [ebx],ax
c001fa66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa6a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001fa6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa72:	c1 e8 10             	shr    eax,0x10
c001fa75:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001fa78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa7c:	c1 e8 18             	shr    eax,0x18
c001fa7f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001fa82:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001fa86:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001fa89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fa8d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001fa90:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fa94:	83 c4 10             	add    esp,0x10
c001fa97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa9b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001fa9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001faa3:	31 c0                	xor    eax,eax
c001faa5:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001faab:	80 e1 88             	and    cl,0x88
c001faae:	74 0a                	je     c001faba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001fab0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001fab5:	74 0a                	je     c001fac1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001fab7:	40                   	inc    eax
c001fab8:	eb eb                	jmp    c001faa5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001faba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001fabf:	75 43                	jne    c001fb04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001fac1:	83 ec 0c             	sub    esp,0xc
c001fac4:	68 44 50 02 c0       	push   0xc0025044
c001fac9:	e8 80 74 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001face:	58                   	pop    eax
c001facf:	5a                   	pop    edx
c001fad0:	68 59 50 02 c0       	push   0xc0025059
c001fad5:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001fadb:	e8 a4 23 ff ff       	call   c0011e84 <VgaText::puts(char const*)>
c001fae0:	59                   	pop    ecx
c001fae1:	5b                   	pop    ebx
c001fae2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001fae6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001faec:	e8 93 e9 ff ff       	call   c001e484 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001faf1:	5e                   	pop    esi
c001faf2:	5f                   	pop    edi
c001faf3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001faf7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001fafd:	e8 62 e9 ff ff       	call   c001e464 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fb02:	eb 48                	jmp    c001fb4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001fb04:	b8 01 00 00 00       	mov    eax,0x1
c001fb09:	88 d1                	mov    cl,dl
c001fb0b:	d3 e0                	shl    eax,cl
c001fb0d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001fb12:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001fb18:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fb1c:	89 c7                	mov    edi,eax
c001fb1e:	c1 e3 07             	shl    ebx,0x7
c001fb21:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001fb25:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001fb2b:	85 c7                	test   edi,eax
c001fb2d:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001fb33:	0f 84 a3 00 00 00    	je     c001fbdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001fb39:	0f ba e0 1e          	bt     eax,0x1e
c001fb3d:	73 1a                	jae    c001fb59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	68 6b 50 02 c0       	push   0xc002506b
c001fb47:	e8 02 74 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fb4c:	83 c4 10             	add    esp,0x10
c001fb4f:	b8 01 00 00 00       	mov    eax,0x1
c001fb54:	e9 b6 00 00 00       	jmp    c001fc0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001fb59:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001fb5f:	83 f8 0d             	cmp    eax,0xd
c001fb62:	77 0a                	ja     c001fb6e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001fb64:	83 ec 0c             	sub    esp,0xc
c001fb67:	68 c8 00 00 00       	push   0xc8
c001fb6c:	eb 28                	jmp    c001fb96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001fb6e:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001fb74:	83 f8 0d             	cmp    eax,0xd
c001fb77:	77 0a                	ja     c001fb83 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001fb79:	83 ec 0c             	sub    esp,0xc
c001fb7c:	68 58 02 00 00       	push   0x258
c001fb81:	eb 13                	jmp    c001fb96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001fb83:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001fb89:	83 f8 06             	cmp    eax,0x6
c001fb8c:	77 10                	ja     c001fb9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001fb8e:	83 ec 0c             	sub    esp,0xc
c001fb91:	68 dc 05 00 00       	push   0x5dc
c001fb96:	e8 4d 69 ff ff       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001fb9b:	83 c4 10             	add    esp,0x10
c001fb9e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001fba2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001fba5:	75 06                	jne    c001fbad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001fba7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001fbab:	74 15                	je     c001fbc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001fbad:	83 fe 06             	cmp    esi,0x6
c001fbb0:	77 10                	ja     c001fbc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001fbb2:	83 ec 0c             	sub    esp,0xc
c001fbb5:	68 c4 09 00 00       	push   0x9c4
c001fbba:	e8 29 69 ff ff       	call   c00164e8 <milliTenthSleep(unsigned int)>
c001fbbf:	83 c4 10             	add    esp,0x10
c001fbc2:	46                   	inc    esi
c001fbc3:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001fbc9:	0f 85 56 ff ff ff    	jne    c001fb25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001fbcf:	83 ec 0c             	sub    esp,0xc
c001fbd2:	68 7e 50 02 c0       	push   0xc002507e
c001fbd7:	e9 6b ff ff ff       	jmp    c001fb47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001fbdc:	0f ba e0 1e          	bt     eax,0x1e
c001fbe0:	73 0d                	jae    c001fbef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	68 92 50 02 c0       	push   0xc0025092
c001fbea:	e9 58 ff ff ff       	jmp    c001fb47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001fbef:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001fbf4:	74 17                	je     c001fc0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001fbf6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001fbfb:	74 10                	je     c001fc0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001fbfd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001fc03:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fc07:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001fc0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc0d:	31 c0                	xor    eax,eax
c001fc0f:	83 c4 2c             	add    esp,0x2c
c001fc12:	5b                   	pop    ebx
c001fc13:	5e                   	pop    esi
c001fc14:	5f                   	pop    edi
c001fc15:	5d                   	pop    ebp
c001fc16:	c3                   	ret    
c001fc17:	90                   	nop

c001fc18 <SATAPI::eject()>:
c001fc18:	57                   	push   edi
c001fc19:	b9 03 00 00 00       	mov    ecx,0x3
c001fc1e:	83 ec 18             	sub    esp,0x18
c001fc21:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fc25:	fc                   	cld    
c001fc26:	31 c0                	xor    eax,eax
c001fc28:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fc2a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fc2f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fc34:	50                   	push   eax
c001fc35:	6a 00                	push   0x0
c001fc37:	6a 00                	push   0x0
c001fc39:	6a 00                	push   0x0
c001fc3b:	6a 00                	push   0x0
c001fc3d:	6a 02                	push   0x2
c001fc3f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fc43:	50                   	push   eax
c001fc44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fc48:	e8 e5 fc ff ff       	call   c001f932 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fc4d:	83 c4 38             	add    esp,0x38
c001fc50:	31 c0                	xor    eax,eax
c001fc52:	5f                   	pop    edi
c001fc53:	c3                   	ret    

c001fc54 <SATAPI::detectMedia()>:
c001fc54:	53                   	push   ebx
c001fc55:	83 ec 14             	sub    esp,0x14
c001fc58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fc5c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fc62:	e8 d5 af fe ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c001fc67:	59                   	pop    ecx
c001fc68:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fc6e:	e8 b9 af fe ff       	call   c000ac2c <VCache::invalidateReadBuffer()>
c001fc73:	c7 04 24 a7 50 02 c0 	mov    DWORD PTR [esp],0xc00250a7
c001fc7a:	e8 cf 72 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fc7f:	83 c4 10             	add    esp,0x10
c001fc82:	31 c0                	xor    eax,eax
c001fc84:	8b 14 85 e0 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5520]
c001fc8b:	85 d2                	test   edx,edx
c001fc8d:	74 0f                	je     c001fc9e <SATAPI::detectMedia()+0x4a>
c001fc8f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001fc95:	75 07                	jne    c001fc9e <SATAPI::detectMedia()+0x4a>
c001fc97:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001fc9e:	40                   	inc    eax
c001fc9f:	83 f8 1a             	cmp    eax,0x1a
c001fca2:	75 e0                	jne    c001fc84 <SATAPI::detectMedia()+0x30>
c001fca4:	83 c4 08             	add    esp,0x8
c001fca7:	5b                   	pop    ebx
c001fca8:	c3                   	ret    
c001fca9:	90                   	nop

c001fcaa <SATAPI::open(int, int, void*)>:
c001fcaa:	56                   	push   esi
c001fcab:	53                   	push   ebx
c001fcac:	51                   	push   ecx
c001fcad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fcb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcb5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001fcbf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001fcc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fcc9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fcd3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fcdd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fce4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fcea:	e8 e9 fb fe ff       	call   c000f8d8 <Phys::allocatePage()>
c001fcef:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001fcf5:	89 c6                	mov    esi,eax
c001fcf7:	e8 dc fb fe ff       	call   c000f8d8 <Phys::allocatePage()>
c001fcfc:	81 c6 00 10 00 00    	add    esi,0x1000
c001fd02:	39 c6                	cmp    esi,eax
c001fd04:	74 10                	je     c001fd16 <SATAPI::open(int, int, void*)+0x6c>
c001fd06:	83 ec 0c             	sub    esp,0xc
c001fd09:	68 bc 50 02 c0       	push   0xc00250bc
c001fd0e:	e8 cb f9 fe ff       	call   c000f6de <KePanic(char const*)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	6a 02                	push   0x2
c001fd1b:	e8 7d 2d ff ff       	call   c0012a9d <Virt::allocateKernelVirtualPages(int)>
c001fd20:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001fd26:	6a 03                	push   0x3
c001fd28:	50                   	push   eax
c001fd29:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001fd2f:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001fd35:	e8 3c 34 ff ff       	call   c0013176 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fd3a:	83 c4 14             	add    esp,0x14
c001fd3d:	68 78 01 00 00       	push   0x178
c001fd42:	e8 51 f6 fe ff       	call   c000f398 <malloc>
c001fd47:	83 c4 0c             	add    esp,0xc
c001fd4a:	6a 00                	push   0x0
c001fd4c:	68 ff ff ff 7f       	push   0x7fffffff
c001fd51:	6a 00                	push   0x0
c001fd53:	6a 00                	push   0x0
c001fd55:	53                   	push   ebx
c001fd56:	68 d2 50 02 c0       	push   0xc00250d2
c001fd5b:	89 c6                	mov    esi,eax
c001fd5d:	50                   	push   eax
c001fd5e:	e8 65 a3 fe ff       	call   c000a0c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fd63:	83 c4 14             	add    esp,0x14
c001fd66:	56                   	push   esi
c001fd67:	e8 1c a4 fe ff       	call   c000a188 <LogicalDisk::assignDriveLetter()>
c001fd6c:	5a                   	pop    edx
c001fd6d:	59                   	pop    ecx
c001fd6e:	0f be c0             	movsx  eax,al
c001fd71:	50                   	push   eax
c001fd72:	68 18 4f 02 c0       	push   0xc0024f18
c001fd77:	e8 d2 71 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fd7c:	58                   	pop    eax
c001fd7d:	5a                   	pop    edx
c001fd7e:	56                   	push   esi
c001fd7f:	53                   	push   ebx
c001fd80:	e8 29 95 fe ff       	call   c00092ae <Device::addChild(Device*)>
c001fd85:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001fd8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd8e:	e8 67 99 fe ff       	call   c00096fa <PhysicalDisk::startCache()>
c001fd93:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001fd9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd9d:	e8 b2 fe ff ff       	call   c001fc54 <SATAPI::detectMedia()>
c001fda2:	83 c4 14             	add    esp,0x14
c001fda5:	31 c0                	xor    eax,eax
c001fda7:	5b                   	pop    ebx
c001fda8:	5e                   	pop    esi
c001fda9:	c3                   	ret    

c001fdaa <SATAPI::read(unsigned long long, int, void*)>:
c001fdaa:	55                   	push   ebp
c001fdab:	57                   	push   edi
c001fdac:	56                   	push   esi
c001fdad:	53                   	push   ebx
c001fdae:	83 ec 3c             	sub    esp,0x3c
c001fdb1:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001fdb5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fdb9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001fdbd:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001fdc1:	83 fd 04             	cmp    ebp,0x4
c001fdc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fdc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fdcc:	7e 10                	jle    c001fdde <SATAPI::read(unsigned long long, int, void*)+0x34>
c001fdce:	83 ec 0c             	sub    esp,0xc
c001fdd1:	68 e0 50 02 c0       	push   0xc00250e0
c001fdd6:	e8 03 f9 fe ff       	call   c000f6de <KePanic(char const*)>
c001fddb:	83 c4 10             	add    esp,0x10
c001fdde:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fde4:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fdea:	51                   	push   ecx
c001fdeb:	50                   	push   eax
c001fdec:	83 c0 02             	add    eax,0x2
c001fdef:	c1 e0 07             	shl    eax,0x7
c001fdf2:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001fdf8:	50                   	push   eax
c001fdf9:	52                   	push   edx
c001fdfa:	e8 af e6 ff ff       	call   c001e4ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fdff:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001fe03:	b9 03 00 00 00       	mov    ecx,0x3
c001fe08:	fc                   	cld    
c001fe09:	31 c0                	xor    eax,eax
c001fe0b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe0d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001fe12:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001fe17:	83 c4 0c             	add    esp,0xc
c001fe1a:	6a 00                	push   0x0
c001fe1c:	6a 00                	push   0x0
c001fe1e:	6a 00                	push   0x0
c001fe20:	6a 00                	push   0x0
c001fe22:	6a 02                	push   0x2
c001fe24:	8d 44 24 30          	lea    eax,[esp+0x30]
c001fe28:	50                   	push   eax
c001fe29:	53                   	push   ebx
c001fe2a:	e8 03 fb ff ff       	call   c001f932 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fe2f:	83 c4 20             	add    esp,0x20
c001fe32:	85 c0                	test   eax,eax
c001fe34:	89 c6                	mov    esi,eax
c001fe36:	75 46                	jne    c001fe7e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001fe38:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001fe3c:	b9 03 00 00 00       	mov    ecx,0x3
c001fe41:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe47:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001fe4c:	0f c8                	bswap  eax
c001fe4e:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001fe52:	89 e8                	mov    eax,ebp
c001fe54:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001fe58:	50                   	push   eax
c001fe59:	55                   	push   ebp
c001fe5a:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001fe5e:	c1 e5 0b             	shl    ebp,0xb
c001fe61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe69:	55                   	push   ebp
c001fe6a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001fe6e:	50                   	push   eax
c001fe6f:	53                   	push   ebx
c001fe70:	e8 bd fa ff ff       	call   c001f932 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fe75:	83 c4 20             	add    esp,0x20
c001fe78:	85 c0                	test   eax,eax
c001fe7a:	89 c6                	mov    esi,eax
c001fe7c:	74 0c                	je     c001fe8a <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001fe7e:	83 ec 0c             	sub    esp,0xc
c001fe81:	53                   	push   ebx
c001fe82:	e8 cd fd ff ff       	call   c001fc54 <SATAPI::detectMedia()>
c001fe87:	83 c4 10             	add    esp,0x10
c001fe8a:	83 c4 3c             	add    esp,0x3c
c001fe8d:	89 f0                	mov    eax,esi
c001fe8f:	5b                   	pop    ebx
c001fe90:	5e                   	pop    esi
c001fe91:	5f                   	pop    edi
c001fe92:	5d                   	pop    ebp
c001fe93:	c3                   	ret    

c001fe94 <IOAPIC::close(int, int, void*)>:
c001fe94:	b8 00 00 00 00       	mov    eax,0x0
c001fe99:	c3                   	ret    

c001fe9a <apicGetBase()>:
c001fe9a:	55                   	push   ebp
c001fe9b:	89 e5                	mov    ebp,esp
c001fe9d:	83 ec 08             	sub    esp,0x8
c001fea0:	83 ec 0c             	sub    esp,0xc
c001fea3:	68 44 51 02 c0       	push   0xc0025144
c001fea8:	e8 31 f8 fe ff       	call   c000f6de <KePanic(char const*)>
c001fead:	83 c4 10             	add    esp,0x10
c001feb0:	b8 00 00 00 00       	mov    eax,0x0
c001feb5:	c9                   	leave  
c001feb6:	c3                   	ret    
c001feb7:	90                   	nop

c001feb8 <IOAPIC::IOAPIC()>:
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febf:	83 ec 08             	sub    esp,0x8
c001fec2:	68 53 51 02 c0       	push   0xc0025153
c001fec7:	50                   	push   eax
c001fec8:	e8 43 95 fe ff       	call   c0009410 <Device::Device(char const*)>
c001fecd:	83 c4 10             	add    esp,0x10
c001fed0:	ba 74 51 02 c0       	mov    edx,0xc0025174
c001fed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed9:	89 10                	mov    DWORD PTR [eax],edx
c001fedb:	90                   	nop
c001fedc:	83 c4 0c             	add    esp,0xc
c001fedf:	c3                   	ret    

c001fee0 <apicOpen()>:
c001fee0:	55                   	push   ebp
c001fee1:	89 e5                	mov    ebp,esp
c001fee3:	53                   	push   ebx
c001fee4:	83 ec 34             	sub    esp,0x34
c001fee7:	83 ec 0c             	sub    esp,0xc
c001feea:	68 5b 51 02 c0       	push   0xc002515b
c001feef:	e8 5a 70 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fef4:	83 c4 10             	add    esp,0x10
c001fef7:	a0 a0 e4 02 c0       	mov    al,ds:0xc002e4a0
c001fefc:	83 f0 01             	xor    eax,0x1
c001feff:	0f b6 c0             	movzx  eax,al
c001ff02:	85 c0                	test   eax,eax
c001ff04:	0f 84 a3 00 00 00    	je     c001ffad <apicOpen()+0xcd>
c001ff0a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ff0e:	a0 40 ae 02 c0       	mov    al,ds:0xc002ae40
c001ff13:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ff17:	0f b6 c0             	movzx  eax,al
c001ff1a:	39 c2                	cmp    edx,eax
c001ff1c:	0f 83 84 00 00 00    	jae    c001ffa6 <apicOpen()+0xc6>
c001ff22:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ff29:	83 ec 0c             	sub    esp,0xc
c001ff2c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ff2f:	e8 64 f4 fe ff       	call   c000f398 <malloc>
c001ff34:	83 c4 10             	add    esp,0x10
c001ff37:	89 c3                	mov    ebx,eax
c001ff39:	83 ec 0c             	sub    esp,0xc
c001ff3c:	53                   	push   ebx
c001ff3d:	e8 76 ff ff ff       	call   c001feb8 <IOAPIC::IOAPIC()>
c001ff42:	83 c4 10             	add    esp,0x10
c001ff45:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ff48:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ff4c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ff4f:	89 14 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],edx
c001ff56:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c001ff5b:	83 c0 01             	add    eax,0x1
c001ff5e:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c001ff63:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c001ff68:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ff6e:	83 ec 08             	sub    esp,0x8
c001ff71:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ff74:	50                   	push   eax
c001ff75:	e8 34 93 fe ff       	call   c00092ae <Device::addChild(Device*)>
c001ff7a:	83 c4 10             	add    esp,0x10
c001ff7d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ff80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff82:	83 c0 08             	add    eax,0x8
c001ff85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff87:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ff8b:	6a 00                	push   0x0
c001ff8d:	6a 00                	push   0x0
c001ff8f:	52                   	push   edx
c001ff90:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ff93:	ff d0                	call   eax
c001ff95:	83 c4 10             	add    esp,0x10
c001ff98:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ff9b:	83 c0 01             	add    eax,0x1
c001ff9e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ffa1:	e9 68 ff ff ff       	jmp    c001ff0e <apicOpen()+0x2e>
c001ffa6:	c6 05 a0 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4a0,0x1
c001ffad:	e8 e8 fe ff ff       	call   c001fe9a <apicGetBase()>
c001ffb2:	05 f0 00 00 00       	add    eax,0xf0
c001ffb7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ffba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ffbd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffbf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ffc2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ffc9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ffd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ffd3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ffd6:	89 10                	mov    DWORD PTR [eax],edx
c001ffd8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ffdf:	a1 8c ad 02 c0       	mov    eax,ds:0xc002ad8c
c001ffe4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ffe7:	7d 7c                	jge    c0020065 <apicOpen()+0x185>
c001ffe9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ffec:	8b 04 85 a0 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5260]
c001fff3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001fff6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fff9:	8b 04 85 a0 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5260]
c0020000:	c1 e8 08             	shr    eax,0x8
c0020003:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020007:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002000a:	8b 04 85 a0 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5260]
c0020011:	c1 e8 18             	shr    eax,0x18
c0020014:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020017:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002001b:	3d ff 00 00 00       	cmp    eax,0xff
c0020020:	75 3a                	jne    c002005c <apicOpen()+0x17c>
c0020022:	e8 73 fe ff ff       	call   c001fe9a <apicGetBase()>
c0020027:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002002b:	83 fa 01             	cmp    edx,0x1
c002002e:	75 07                	jne    c0020037 <apicOpen()+0x157>
c0020030:	ba 60 03 00 00       	mov    edx,0x360
c0020035:	eb 05                	jmp    c002003c <apicOpen()+0x15c>
c0020037:	ba 50 03 00 00       	mov    edx,0x350
c002003c:	01 d0                	add    eax,edx
c002003e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020041:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020044:	8b 00                	mov    eax,DWORD PTR [eax]
c0020046:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020049:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020050:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020054:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020057:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002005a:	89 10                	mov    DWORD PTR [eax],edx
c002005c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0020060:	e9 7a ff ff ff       	jmp    c001ffdf <apicOpen()+0xff>
c0020065:	90                   	nop
c0020066:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020069:	c9                   	leave  
c002006a:	c3                   	ret    
c002006b:	90                   	nop

c002006c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002006c:	55                   	push   ebp
c002006d:	89 e5                	mov    ebp,esp
c002006f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020072:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020078:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002007b:	72 1d                	jb     c002009a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002007d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020080:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020089:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002008f:	01 d0                	add    eax,edx
c0020091:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020094:	73 04                	jae    c002009a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020096:	b0 01                	mov    al,0x1
c0020098:	eb 02                	jmp    c002009c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002009a:	b0 00                	mov    al,0x0
c002009c:	5d                   	pop    ebp
c002009d:	c3                   	ret    

c002009e <IOAPIC::read(int)>:
c002009e:	55                   	push   ebp
c002009f:	89 e5                	mov    ebp,esp
c00200a1:	83 ec 10             	sub    esp,0x10
c00200a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200a7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00200ad:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00200b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00200b3:	0f b6 d0             	movzx  edx,al
c00200b6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00200b9:	89 10                	mov    DWORD PTR [eax],edx
c00200bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00200be:	83 c0 10             	add    eax,0x10
c00200c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c3:	c9                   	leave  
c00200c4:	c3                   	ret    
c00200c5:	90                   	nop

c00200c6 <IOAPIC::open(int, int, void*)>:
c00200c6:	55                   	push   ebp
c00200c7:	89 e5                	mov    ebp,esp
c00200c9:	57                   	push   edi
c00200ca:	56                   	push   esi
c00200cb:	53                   	push   ebx
c00200cc:	83 ec 04             	sub    esp,0x4
c00200cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00200d5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00200db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00200e4:	8b 14 85 80 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5180]
c00200eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200ee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00200f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00200fd:	8b 14 85 00 af 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5100]
c0020104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020107:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020110:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020119:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002011f:	0f b6 f0             	movzx  esi,al
c0020122:	89 d0                	mov    eax,edx
c0020124:	ba 00 00 00 00       	mov    edx,0x0
c0020129:	89 c7                	mov    edi,eax
c002012b:	83 e7 ff             	and    edi,0xffffffff
c002012e:	89 f9                	mov    ecx,edi
c0020130:	0f b6 da             	movzx  ebx,dl
c0020133:	89 c8                	mov    eax,ecx
c0020135:	89 da                	mov    edx,ebx
c0020137:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002013a:	8d 5e 08             	lea    ebx,[esi+0x8]
c002013d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020141:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020145:	83 e0 00             	and    eax,0x0
c0020148:	09 d0                	or     eax,edx
c002014a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002014e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020151:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020157:	8d 50 01             	lea    edx,[eax+0x1]
c002015a:	88 d1                	mov    cl,dl
c002015c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002015f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0020165:	0f b6 d0             	movzx  edx,al
c0020168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002016b:	83 c2 08             	add    edx,0x8
c002016e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020172:	0f b6 c9             	movzx  ecx,cl
c0020175:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002017b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002017f:	6a 01                	push   0x1
c0020181:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020184:	e8 15 ff ff ff       	call   c002009e <IOAPIC::read(int)>
c0020189:	83 c4 08             	add    esp,0x8
c002018c:	c1 f8 10             	sar    eax,0x10
c002018f:	0f b6 c0             	movzx  eax,al
c0020192:	8d 50 01             	lea    edx,[eax+0x1]
c0020195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020198:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002019e:	b8 00 00 00 00       	mov    eax,0x0
c00201a3:	8d 65 f4             	lea    esp,[ebp-0xc]
c00201a6:	5b                   	pop    ebx
c00201a7:	5e                   	pop    esi
c00201a8:	5f                   	pop    edi
c00201a9:	5d                   	pop    ebp
c00201aa:	c3                   	ret    
c00201ab:	90                   	nop

c00201ac <IOAPIC::write(int, int)>:
c00201ac:	55                   	push   ebp
c00201ad:	89 e5                	mov    ebp,esp
c00201af:	83 ec 10             	sub    esp,0x10
c00201b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00201b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00201bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00201be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201c1:	0f b6 d0             	movzx  edx,al
c00201c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00201c7:	89 10                	mov    DWORD PTR [eax],edx
c00201c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00201cc:	8d 50 10             	lea    edx,[eax+0x10]
c00201cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00201d2:	89 02                	mov    DWORD PTR [edx],eax
c00201d4:	90                   	nop
c00201d5:	c9                   	leave  
c00201d6:	c3                   	ret    
c00201d7:	90                   	nop

c00201d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00201d8:	55                   	push   ebp
c00201d9:	89 e5                	mov    ebp,esp
c00201db:	53                   	push   ebx
c00201dc:	83 ec 2c             	sub    esp,0x2c
c00201df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201e2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00201e5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00201e8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00201eb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00201ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00201f1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00201f4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00201f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00201fa:	88 d8                	mov    al,bl
c00201fc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00201ff:	88 c8                	mov    al,cl
c0020201:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020204:	88 d0                	mov    al,dl
c0020206:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020209:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002020d:	83 c0 08             	add    eax,0x8
c0020210:	d1 e0                	shl    eax,1
c0020212:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020215:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020219:	83 c0 08             	add    eax,0x8
c002021c:	d1 e0                	shl    eax,1
c002021e:	83 c0 01             	add    eax,0x1
c0020221:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020224:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020227:	50                   	push   eax
c0020228:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002022b:	e8 6e fe ff ff       	call   c002009e <IOAPIC::read(int)>
c0020230:	83 c4 08             	add    esp,0x8
c0020233:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020236:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002023d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020240:	c1 e0 18             	shl    eax,0x18
c0020243:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020246:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020249:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002024c:	52                   	push   edx
c002024d:	50                   	push   eax
c002024e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020251:	e8 56 ff ff ff       	call   c00201ac <IOAPIC::write(int, int)>
c0020256:	83 c4 0c             	add    esp,0xc
c0020259:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002025c:	50                   	push   eax
c002025d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020260:	e8 39 fe ff ff       	call   c002009e <IOAPIC::read(int)>
c0020265:	83 c4 08             	add    esp,0x8
c0020268:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002026b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020272:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020279:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020280:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0020284:	85 c0                	test   eax,eax
c0020286:	74 09                	je     c0020291 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0020288:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002028f:	eb 07                	jmp    c0020298 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020291:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020298:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002029c:	85 c0                	test   eax,eax
c002029e:	74 09                	je     c00202a9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c00202a0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00202a7:	eb 07                	jmp    c00202b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c00202a9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00202b0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00202b7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00202bb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00202be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00202c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00202c4:	52                   	push   edx
c00202c5:	50                   	push   eax
c00202c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00202c9:	e8 de fe ff ff       	call   c00201ac <IOAPIC::write(int, int)>
c00202ce:	83 c4 0c             	add    esp,0xc
c00202d1:	90                   	nop
c00202d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00202d5:	c9                   	leave  
c00202d6:	c3                   	ret    
c00202d7:	90                   	nop

c00202d8 <APICTimer::close(int, int, void*)>:
c00202d8:	b8 00 00 00 00       	mov    eax,0x0
c00202dd:	c3                   	ret    
c00202de:	66 90                	xchg   ax,ax

c00202e0 <apicTimerHandler(regs*, void*)>:
c00202e0:	83 ec 0c             	sub    esp,0xc
c00202e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00202e9:	b8 10 27 00 00       	mov    eax,0x2710
c00202ee:	ba 00 00 00 00       	mov    edx,0x0
c00202f3:	f7 f1                	div    ecx
c00202f5:	83 ec 0c             	sub    esp,0xc
c00202f8:	50                   	push   eax
c00202f9:	e8 86 a6 fe ff       	call   c000a984 <timerHandler(unsigned int)>
c00202fe:	83 c4 10             	add    esp,0x10
c0020301:	90                   	nop
c0020302:	83 c4 0c             	add    esp,0xc
c0020305:	c3                   	ret    
c0020306:	66 90                	xchg   ax,ax

c0020308 <APICTimer::open(int, int, void*)>:
c0020308:	83 ec 0c             	sub    esp,0xc
c002030b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020311:	83 c0 24             	add    eax,0x24
c0020314:	8b 00                	mov    eax,DWORD PTR [eax]
c0020316:	83 ec 08             	sub    esp,0x8
c0020319:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020321:	ff d0                	call   eax
c0020323:	83 c4 10             	add    esp,0x10
c0020326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002032e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020338:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002033c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020342:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020346:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	51                   	push   ecx
c0020350:	6a 01                	push   0x1
c0020352:	68 e0 02 02 c0       	push   0xc00202e0
c0020357:	52                   	push   edx
c0020358:	50                   	push   eax
c0020359:	e8 fc 8e fe ff       	call   c000925a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002035e:	83 c4 20             	add    esp,0x20
c0020361:	89 c2                	mov    edx,eax
c0020363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020367:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002036d:	b8 00 00 00 00       	mov    eax,0x0
c0020372:	83 c4 0c             	add    esp,0xc
c0020375:	c3                   	ret    
c0020376:	66 90                	xchg   ax,ax

c0020378 <APICTimer::write(int)>:
c0020378:	83 ec 0c             	sub    esp,0xc
c002037b:	83 ec 0c             	sub    esp,0xc
c002037e:	68 98 51 02 c0       	push   0xc0025198
c0020383:	e8 56 f3 fe ff       	call   c000f6de <KePanic(char const*)>
c0020388:	83 c4 10             	add    esp,0x10
c002038b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020393:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020399:	90                   	nop
c002039a:	83 c4 0c             	add    esp,0xc
c002039d:	c3                   	ret    
c002039e:	66 90                	xchg   ax,ax

c00203a0 <APICTimer::APICTimer()>:
c00203a0:	83 ec 0c             	sub    esp,0xc
c00203a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a7:	83 ec 08             	sub    esp,0x8
c00203aa:	68 a8 51 02 c0       	push   0xc00251a8
c00203af:	50                   	push   eax
c00203b0:	e8 03 a5 fe ff       	call   c000a8b8 <Timer::Timer(char const*)>
c00203b5:	83 c4 10             	add    esp,0x10
c00203b8:	ba bc 51 02 c0       	mov    edx,0xc00251bc
c00203bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c1:	89 10                	mov    DWORD PTR [eax],edx
c00203c3:	90                   	nop
c00203c4:	83 c4 0c             	add    esp,0xc
c00203c7:	c3                   	ret    

c00203c8 <PIT::write(int)>:
c00203c8:	83 ec 10             	sub    esp,0x10
c00203cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00203d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00203d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00203dd:	a3 a4 e4 02 c0       	mov    ds:0xc002e4a4,eax
c00203e2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00203e7:	89 c2                	mov    edx,eax
c00203e9:	c1 fa 1f             	sar    edx,0x1f
c00203ec:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00203f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00203f4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00203fb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020400:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020404:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020409:	ee                   	out    dx,al
c002040a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002040e:	0f b6 c0             	movzx  eax,al
c0020411:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020418:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002041c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020420:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020425:	ee                   	out    dx,al
c0020426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002042a:	c1 f8 08             	sar    eax,0x8
c002042d:	0f b6 c0             	movzx  eax,al
c0020430:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020437:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002043b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002043f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020444:	ee                   	out    dx,al
c0020445:	90                   	nop
c0020446:	83 c4 10             	add    esp,0x10
c0020449:	c3                   	ret    
c002044a:	66 90                	xchg   ax,ax

c002044c <pitHandler(regs*, void*)>:
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	8b 0d a4 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4a4
c0020455:	b8 10 27 00 00       	mov    eax,0x2710
c002045a:	89 c2                	mov    edx,eax
c002045c:	c1 fa 1f             	sar    edx,0x1f
c002045f:	f7 f9                	idiv   ecx
c0020461:	83 ec 0c             	sub    esp,0xc
c0020464:	50                   	push   eax
c0020465:	e8 1a a5 fe ff       	call   c000a984 <timerHandler(unsigned int)>
c002046a:	83 c4 10             	add    esp,0x10
c002046d:	90                   	nop
c002046e:	83 c4 0c             	add    esp,0xc
c0020471:	c3                   	ret    
c0020472:	66 90                	xchg   ax,ax

c0020474 <PIT::open(int, int, void*)>:
c0020474:	83 ec 0c             	sub    esp,0xc
c0020477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047b:	8b 00                	mov    eax,DWORD PTR [eax]
c002047d:	83 c0 24             	add    eax,0x24
c0020480:	8b 00                	mov    eax,DWORD PTR [eax]
c0020482:	83 ec 08             	sub    esp,0x8
c0020485:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020489:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002048d:	ff d0                	call   eax
c002048f:	83 c4 10             	add    esp,0x10
c0020492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020496:	83 ec 0c             	sub    esp,0xc
c0020499:	6a 00                	push   0x0
c002049b:	6a 01                	push   0x1
c002049d:	68 4c 04 02 c0       	push   0xc002044c
c00204a2:	6a 00                	push   0x0
c00204a4:	50                   	push   eax
c00204a5:	e8 b0 8d fe ff       	call   c000925a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00204aa:	83 c4 20             	add    esp,0x20
c00204ad:	89 c2                	mov    edx,eax
c00204af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00204b9:	b8 00 00 00 00       	mov    eax,0x0
c00204be:	83 c4 0c             	add    esp,0xc
c00204c1:	c3                   	ret    
c00204c2:	66 90                	xchg   ax,ax

c00204c4 <PIT::close(int, int, void*)>:
c00204c4:	83 ec 0c             	sub    esp,0xc
c00204c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204cb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00204d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d9:	6a 01                	push   0x1
c00204db:	68 4c 04 02 c0       	push   0xc002044c
c00204e0:	6a 00                	push   0x0
c00204e2:	50                   	push   eax
c00204e3:	e8 a8 8d fe ff       	call   c0009290 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00204e8:	83 c4 10             	add    esp,0x10
c00204eb:	b8 00 00 00 00       	mov    eax,0x0
c00204f0:	83 c4 0c             	add    esp,0xc
c00204f3:	c3                   	ret    

c00204f4 <PIT::PIT()>:
c00204f4:	83 ec 0c             	sub    esp,0xc
c00204f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fb:	83 ec 08             	sub    esp,0x8
c00204fe:	68 e4 51 02 c0       	push   0xc00251e4
c0020503:	50                   	push   eax
c0020504:	e8 af a3 fe ff       	call   c000a8b8 <Timer::Timer(char const*)>
c0020509:	83 c4 10             	add    esp,0x10
c002050c:	ba 0c 52 02 c0       	mov    edx,0xc002520c
c0020511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020515:	89 10                	mov    DWORD PTR [eax],edx
c0020517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002051b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020521:	0f b6 d0             	movzx  edx,al
c0020524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020528:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002052f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020533:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020539:	0f b6 d0             	movzx  edx,al
c002053c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020540:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020549:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002054f:	8d 50 01             	lea    edx,[eax+0x1]
c0020552:	88 d1                	mov    cl,dl
c0020554:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020558:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002055e:	0f b6 d0             	movzx  edx,al
c0020561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020565:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020569:	83 e1 3f             	and    ecx,0x3f
c002056c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020570:	90                   	nop
c0020571:	83 c4 0c             	add    esp,0xc
c0020574:	c3                   	ret    
c0020575:	66 90                	xchg   ax,ax
c0020577:	66 90                	xchg   ax,ax
c0020579:	66 90                	xchg   ax,ax
c002057b:	66 90                	xchg   ax,ax
c002057d:	66 90                	xchg   ax,ax
c002057f:	90                   	nop

c0020580 <avxDetect>:
c0020580:	b8 01 00 00 00       	mov    eax,0x1
c0020585:	0f a2                	cpuid  
c0020587:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002058d:	74 15                	je     c00205a4 <avxDetect.noAVX>
c002058f:	b8 01 00 00 00       	mov    eax,0x1
c0020594:	0f a2                	cpuid  
c0020596:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002059c:	74 06                	je     c00205a4 <avxDetect.noAVX>
c002059e:	b8 01 00 00 00       	mov    eax,0x1
c00205a3:	c3                   	ret    

c00205a4 <avxDetect.noAVX>:
c00205a4:	b8 00 00 00 00       	mov    eax,0x0
c00205a9:	c3                   	ret    

c00205aa <avxSave>:
c00205aa:	53                   	push   ebx
c00205ab:	52                   	push   edx
c00205ac:	31 c0                	xor    eax,eax
c00205ae:	48                   	dec    eax
c00205af:	89 c2                	mov    edx,eax
c00205b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00205b5:	0f ae 23             	xsave  [ebx]
c00205b8:	5a                   	pop    edx
c00205b9:	5b                   	pop    ebx
c00205ba:	c3                   	ret    

c00205bb <avxLoad>:
c00205bb:	53                   	push   ebx
c00205bc:	52                   	push   edx
c00205bd:	31 c0                	xor    eax,eax
c00205bf:	48                   	dec    eax
c00205c0:	89 c2                	mov    edx,eax
c00205c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00205c6:	0f ae 2b             	xrstor [ebx]
c00205c9:	5a                   	pop    edx
c00205ca:	5b                   	pop    ebx
c00205cb:	c3                   	ret    

c00205cc <avxInit>:
c00205cc:	e8 47 03 00 00       	call   c0020918 <sseInit>
c00205d1:	50                   	push   eax
c00205d2:	51                   	push   ecx
c00205d3:	0f 20 e0             	mov    eax,cr4
c00205d6:	0d 00 00 04 00       	or     eax,0x40000
c00205db:	0f 22 e0             	mov    cr4,eax
c00205de:	31 c9                	xor    ecx,ecx
c00205e0:	0f 01 d0             	xgetbv 
c00205e3:	0d 07 00 00 00       	or     eax,0x7
c00205e8:	0f 01 d1             	xsetbv 
c00205eb:	59                   	pop    ecx
c00205ec:	58                   	pop    eax
c00205ed:	c3                   	ret    

c00205ee <avxClose>:
c00205ee:	c3                   	ret    
c00205ef:	90                   	nop

c00205f0 <isr0>:
c00205f0:	fa                   	cli    
c00205f1:	68 00 00 00 00       	push   0x0
c00205f6:	68 00 00 00 00       	push   0x0
c00205fb:	e9 56 01 00 00       	jmp    c0020756 <int_common_stub>

c0020600 <isr1>:
c0020600:	fa                   	cli    
c0020601:	6a 00                	push   0x0
c0020603:	6a 01                	push   0x1
c0020605:	e9 4c 01 00 00       	jmp    c0020756 <int_common_stub>

c002060a <isr2>:
c002060a:	fa                   	cli    
c002060b:	6a 00                	push   0x0
c002060d:	6a 02                	push   0x2
c002060f:	e9 42 01 00 00       	jmp    c0020756 <int_common_stub>

c0020614 <isr3>:
c0020614:	fa                   	cli    
c0020615:	6a 00                	push   0x0
c0020617:	6a 03                	push   0x3
c0020619:	e9 38 01 00 00       	jmp    c0020756 <int_common_stub>

c002061e <isr4>:
c002061e:	fa                   	cli    
c002061f:	6a 00                	push   0x0
c0020621:	6a 04                	push   0x4
c0020623:	e9 2e 01 00 00       	jmp    c0020756 <int_common_stub>

c0020628 <isr5>:
c0020628:	fa                   	cli    
c0020629:	6a 00                	push   0x0
c002062b:	6a 05                	push   0x5
c002062d:	e9 24 01 00 00       	jmp    c0020756 <int_common_stub>

c0020632 <isr6>:
c0020632:	fa                   	cli    
c0020633:	6a 00                	push   0x0
c0020635:	6a 06                	push   0x6
c0020637:	e9 1a 01 00 00       	jmp    c0020756 <int_common_stub>

c002063c <isr7>:
c002063c:	fa                   	cli    
c002063d:	6a 00                	push   0x0
c002063f:	6a 07                	push   0x7
c0020641:	e9 10 01 00 00       	jmp    c0020756 <int_common_stub>

c0020646 <isr8>:
c0020646:	fa                   	cli    
c0020647:	6a 08                	push   0x8
c0020649:	e9 08 01 00 00       	jmp    c0020756 <int_common_stub>

c002064e <isr9>:
c002064e:	fa                   	cli    
c002064f:	6a 00                	push   0x0
c0020651:	6a 09                	push   0x9
c0020653:	e9 fe 00 00 00       	jmp    c0020756 <int_common_stub>

c0020658 <isr10>:
c0020658:	fa                   	cli    
c0020659:	6a 0a                	push   0xa
c002065b:	e9 f6 00 00 00       	jmp    c0020756 <int_common_stub>

c0020660 <isr11>:
c0020660:	fa                   	cli    
c0020661:	6a 0b                	push   0xb
c0020663:	e9 ee 00 00 00       	jmp    c0020756 <int_common_stub>

c0020668 <isr12>:
c0020668:	fa                   	cli    
c0020669:	6a 0c                	push   0xc
c002066b:	e9 e6 00 00 00       	jmp    c0020756 <int_common_stub>

c0020670 <isr13>:
c0020670:	fa                   	cli    
c0020671:	6a 0d                	push   0xd
c0020673:	53                   	push   ebx
c0020674:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020678:	81 fb 46 08 02 c0    	cmp    ebx,0xc0020846
c002067e:	5b                   	pop    ebx
c002067f:	0f 84 c3 01 00 00    	je     c0020848 <finishSignal2>
c0020685:	e9 cc 00 00 00       	jmp    c0020756 <int_common_stub>

c002068a <isr14>:
c002068a:	fa                   	cli    
c002068b:	6a 0e                	push   0xe
c002068d:	e9 c4 00 00 00       	jmp    c0020756 <int_common_stub>

c0020692 <isr15>:
c0020692:	fa                   	cli    
c0020693:	6a 00                	push   0x0
c0020695:	6a 0f                	push   0xf
c0020697:	e9 ba 00 00 00       	jmp    c0020756 <int_common_stub>

c002069c <isr16>:
c002069c:	fa                   	cli    
c002069d:	6a 00                	push   0x0
c002069f:	6a 10                	push   0x10
c00206a1:	e9 b0 00 00 00       	jmp    c0020756 <int_common_stub>

c00206a6 <isr17>:
c00206a6:	fa                   	cli    
c00206a7:	6a 00                	push   0x0
c00206a9:	6a 11                	push   0x11
c00206ab:	e9 a6 00 00 00       	jmp    c0020756 <int_common_stub>

c00206b0 <isr18>:
c00206b0:	fa                   	cli    
c00206b1:	6a 00                	push   0x0
c00206b3:	6a 12                	push   0x12
c00206b5:	e9 9c 00 00 00       	jmp    c0020756 <int_common_stub>

c00206ba <irq3>:
c00206ba:	fa                   	cli    
c00206bb:	6a 00                	push   0x0
c00206bd:	6a 23                	push   0x23
c00206bf:	e9 92 00 00 00       	jmp    c0020756 <int_common_stub>

c00206c4 <irq4>:
c00206c4:	fa                   	cli    
c00206c5:	6a 00                	push   0x0
c00206c7:	6a 24                	push   0x24
c00206c9:	e9 88 00 00 00       	jmp    c0020756 <int_common_stub>

c00206ce <irq5>:
c00206ce:	fa                   	cli    
c00206cf:	6a 00                	push   0x0
c00206d1:	6a 25                	push   0x25
c00206d3:	e9 7e 00 00 00       	jmp    c0020756 <int_common_stub>

c00206d8 <irq6>:
c00206d8:	fa                   	cli    
c00206d9:	6a 00                	push   0x0
c00206db:	6a 26                	push   0x26
c00206dd:	e9 74 00 00 00       	jmp    c0020756 <int_common_stub>

c00206e2 <irq7>:
c00206e2:	fa                   	cli    
c00206e3:	6a 00                	push   0x0
c00206e5:	6a 27                	push   0x27
c00206e7:	e9 6a 00 00 00       	jmp    c0020756 <int_common_stub>

c00206ec <irq8>:
c00206ec:	fa                   	cli    
c00206ed:	6a 00                	push   0x0
c00206ef:	6a 28                	push   0x28
c00206f1:	e9 60 00 00 00       	jmp    c0020756 <int_common_stub>

c00206f6 <irq9>:
c00206f6:	fa                   	cli    
c00206f7:	6a 00                	push   0x0
c00206f9:	6a 29                	push   0x29
c00206fb:	e9 56 00 00 00       	jmp    c0020756 <int_common_stub>

c0020700 <irq10>:
c0020700:	fa                   	cli    
c0020701:	6a 00                	push   0x0
c0020703:	6a 2a                	push   0x2a
c0020705:	e9 4c 00 00 00       	jmp    c0020756 <int_common_stub>

c002070a <irq11>:
c002070a:	fa                   	cli    
c002070b:	6a 00                	push   0x0
c002070d:	6a 2b                	push   0x2b
c002070f:	e9 42 00 00 00       	jmp    c0020756 <int_common_stub>

c0020714 <irq12>:
c0020714:	fa                   	cli    
c0020715:	6a 00                	push   0x0
c0020717:	6a 2c                	push   0x2c
c0020719:	e9 38 00 00 00       	jmp    c0020756 <int_common_stub>

c002071e <irq13>:
c002071e:	fa                   	cli    
c002071f:	6a 00                	push   0x0
c0020721:	6a 2d                	push   0x2d
c0020723:	e9 2e 00 00 00       	jmp    c0020756 <int_common_stub>

c0020728 <irq14>:
c0020728:	fa                   	cli    
c0020729:	6a 00                	push   0x0
c002072b:	6a 2e                	push   0x2e
c002072d:	e9 24 00 00 00       	jmp    c0020756 <int_common_stub>

c0020732 <irq15>:
c0020732:	fa                   	cli    
c0020733:	6a 00                	push   0x0
c0020735:	6a 2f                	push   0x2f
c0020737:	e9 1a 00 00 00       	jmp    c0020756 <int_common_stub>

c002073c <irq1>:
c002073c:	fa                   	cli    
c002073d:	6a 00                	push   0x0
c002073f:	6a 21                	push   0x21
c0020741:	eb 13                	jmp    c0020756 <int_common_stub>

c0020743 <irq2>:
c0020743:	fa                   	cli    
c0020744:	6a 00                	push   0x0
c0020746:	6a 22                	push   0x22
c0020748:	eb 0c                	jmp    c0020756 <int_common_stub>

c002074a <isr96>:
c002074a:	6a 00                	push   0x0
c002074c:	6a 60                	push   0x60
c002074e:	fb                   	sti    
c002074f:	eb 37                	jmp    c0020788 <syscall_common_stub>

c0020751 <irq0>:
c0020751:	fa                   	cli    
c0020752:	6a 00                	push   0x0
c0020754:	6a 20                	push   0x20

c0020756 <int_common_stub>:
c0020756:	60                   	pusha  
c0020757:	1e                   	push   ds
c0020758:	06                   	push   es
c0020759:	0f a0                	push   fs
c002075b:	0f a8                	push   gs
c002075d:	66 b8 10 00          	mov    ax,0x10
c0020761:	66 8e d8             	mov    ds,ax
c0020764:	66 8e c0             	mov    es,ax
c0020767:	66 8e e0             	mov    fs,ax
c002076a:	66 8e e8             	mov    gs,ax
c002076d:	54                   	push   esp
c002076e:	fc                   	cld    
c002076f:	e8 88 da fe ff       	call   c000e1fc <int_handler>
c0020774:	81 c4 04 00 00 00    	add    esp,0x4
c002077a:	0f a9                	pop    gs
c002077c:	0f a1                	pop    fs
c002077e:	07                   	pop    es
c002077f:	1f                   	pop    ds
c0020780:	61                   	popa   
c0020781:	81 c4 08 00 00 00    	add    esp,0x8
c0020787:	cf                   	iret   

c0020788 <syscall_common_stub>:
c0020788:	60                   	pusha  
c0020789:	1e                   	push   ds
c002078a:	06                   	push   es
c002078b:	0f a0                	push   fs
c002078d:	0f a8                	push   gs
c002078f:	66 b8 10 00          	mov    ax,0x10
c0020793:	66 8e d8             	mov    ds,ax
c0020796:	66 8e c0             	mov    es,ax
c0020799:	66 8e e0             	mov    fs,ax
c002079c:	66 8e e8             	mov    gs,ax
c002079f:	54                   	push   esp
c00207a0:	fc                   	cld    
c00207a1:	e8 56 da fe ff       	call   c000e1fc <int_handler>
c00207a6:	81 c4 04 00 00 00    	add    esp,0x4
c00207ac:	0f a9                	pop    gs
c00207ae:	0f a1                	pop    fs
c00207b0:	07                   	pop    es
c00207b1:	1f                   	pop    ds
c00207b2:	e8 d9 01 ff ff       	call   c0010990 <KiCheckSignalZ>
c00207b7:	3d 00 00 00 00       	cmp    eax,0x0
c00207bc:	0f 84 c0 00 00 00    	je     c0020882 <skipSignals>
c00207c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00207c7:	61                   	popa   
c00207c8:	53                   	push   ebx
c00207c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00207cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00207d2:	5b                   	pop    ebx
c00207d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c00207d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00207db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00207de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00207e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00207e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00207e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00207ea:	81 c4 08 00 00 00    	add    esp,0x8
c00207f0:	5e                   	pop    esi
c00207f1:	5b                   	pop    ebx
c00207f2:	59                   	pop    ecx
c00207f3:	5a                   	pop    edx
c00207f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00207f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00207fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00207fd:	52                   	push   edx
c00207fe:	51                   	push   ecx
c00207ff:	53                   	push   ebx
c0020800:	56                   	push   esi
c0020801:	81 ec 08 00 00 00    	sub    esp,0x8
c0020807:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002080a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002080d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0020810:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020813:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020816:	60                   	pusha  
c0020817:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002081d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0020820:	89 e3                	mov    ebx,esp
c0020822:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0020825:	52                   	push   edx
c0020826:	68 46 08 02 c0       	push   0xc0020846
c002082b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002082e:	89 dc                	mov    esp,ebx
c0020830:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0020833:	68 23 00 00 00       	push   0x23
c0020838:	51                   	push   ecx
c0020839:	68 02 02 00 00       	push   0x202
c002083e:	68 1b 00 00 00       	push   0x1b
c0020843:	ff 36                	push   DWORD PTR [esi]
c0020845:	cf                   	iret   

c0020846 <finishSignal>:
c0020846:	cd 0f                	int    0xf

c0020848 <finishSignal2>:
c0020848:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002084e:	e8 ba 01 ff ff       	call   c0010a0d <KiFinishSignalZ>
c0020853:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0020859:	68 23 00 00 00       	push   0x23
c002085e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0020861:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0020864:	68 1b 00 00 00       	push   0x1b
c0020869:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002086c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002086f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0020872:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0020875:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020878:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002087b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002087e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0020881:	cf                   	iret   

c0020882 <skipSignals>:
c0020882:	61                   	popa   
c0020883:	81 c4 08 00 00 00    	add    esp,0x8
c0020889:	cf                   	iret   
c002088a:	90                   	nop
c002088b:	90                   	nop

c002088c <irq16>:
c002088c:	fa                   	cli    
c002088d:	6a 00                	push   0x0
c002088f:	6a 30                	push   0x30
c0020891:	e9 c0 fe ff ff       	jmp    c0020756 <int_common_stub>

c0020896 <irq17>:
c0020896:	fa                   	cli    
c0020897:	6a 00                	push   0x0
c0020899:	6a 31                	push   0x31
c002089b:	e9 b6 fe ff ff       	jmp    c0020756 <int_common_stub>

c00208a0 <irq18>:
c00208a0:	fa                   	cli    
c00208a1:	6a 00                	push   0x0
c00208a3:	6a 32                	push   0x32
c00208a5:	e9 ac fe ff ff       	jmp    c0020756 <int_common_stub>

c00208aa <irq19>:
c00208aa:	fa                   	cli    
c00208ab:	6a 00                	push   0x0
c00208ad:	6a 33                	push   0x33
c00208af:	e9 a2 fe ff ff       	jmp    c0020756 <int_common_stub>

c00208b4 <irq20>:
c00208b4:	fa                   	cli    
c00208b5:	6a 00                	push   0x0
c00208b7:	6a 34                	push   0x34
c00208b9:	e9 98 fe ff ff       	jmp    c0020756 <int_common_stub>

c00208be <irq21>:
c00208be:	fa                   	cli    
c00208bf:	6a 00                	push   0x0
c00208c1:	6a 35                	push   0x35
c00208c3:	e9 8e fe ff ff       	jmp    c0020756 <int_common_stub>

c00208c8 <irq22>:
c00208c8:	fa                   	cli    
c00208c9:	6a 00                	push   0x0
c00208cb:	6a 36                	push   0x36
c00208cd:	e9 84 fe ff ff       	jmp    c0020756 <int_common_stub>

c00208d2 <irq23>:
c00208d2:	fa                   	cli    
c00208d3:	6a 00                	push   0x0
c00208d5:	6a 37                	push   0x37
c00208d7:	e9 7a fe ff ff       	jmp    c0020756 <int_common_stub>
c00208dc:	66 90                	xchg   ax,ax
c00208de:	66 90                	xchg   ax,ax

c00208e0 <i386GetRDRAND>:
c00208e0:	b9 64 00 00 00       	mov    ecx,0x64

c00208e5 <retry>:
c00208e5:	0f c7 f0             	rdrand eax
c00208e8:	72 05                	jb     c00208ef <retry.done>
c00208ea:	e2 f9                	loop   c00208e5 <retry>

c00208ec <retry.fail>:
c00208ec:	31 c0                	xor    eax,eax
c00208ee:	c3                   	ret    

c00208ef <retry.done>:
c00208ef:	c3                   	ret    

c00208f0 <sseDetect>:
c00208f0:	b8 01 00 00 00       	mov    eax,0x1
c00208f5:	0f a2                	cpuid  
c00208f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00208fd:	74 06                	je     c0020905 <sseDetect.noSSE>
c00208ff:	b8 01 00 00 00       	mov    eax,0x1
c0020904:	c3                   	ret    

c0020905 <sseDetect.noSSE>:
c0020905:	31 c0                	xor    eax,eax
c0020907:	c3                   	ret    

c0020908 <sseSave>:
c0020908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002090c:	0f ae 00             	fxsave [eax]
c002090f:	c3                   	ret    

c0020910 <sseLoad>:
c0020910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020914:	0f ae 08             	fxrstor [eax]
c0020917:	c3                   	ret    

c0020918 <sseInit>:
c0020918:	e8 48 00 00 00       	call   c0020965 <x87Init>
c002091d:	0f 20 e0             	mov    eax,cr4
c0020920:	66 0d 00 06          	or     ax,0x600
c0020924:	0f 22 e0             	mov    cr4,eax
c0020927:	c3                   	ret    

c0020928 <sseClose>:
c0020928:	c3                   	ret    
c0020929:	66 90                	xchg   ax,ax
c002092b:	66 90                	xchg   ax,ax
c002092d:	66 90                	xchg   ax,ax
c002092f:	90                   	nop

c0020930 <value_37F>:
c0020930:	7f 03                	jg     c0020935 <value_37A+0x1>

c0020932 <value_37E>:
c0020932:	7e 03                	jle    c0020937 <x87Detect+0x1>

c0020934 <value_37A>:
c0020934:	7a 03                	jp     c0020939 <x87Detect+0x3>

c0020936 <x87Detect>:
c0020936:	53                   	push   ebx
c0020937:	51                   	push   ecx
c0020938:	52                   	push   edx
c0020939:	b8 01 00 00 00       	mov    eax,0x1
c002093e:	0f a2                	cpuid  
c0020940:	f7 c2 01 00 00 00    	test   edx,0x1
c0020946:	74 06                	je     c002094e <x87Detect.nox87>
c0020948:	b8 01 00 00 00       	mov    eax,0x1
c002094d:	c3                   	ret    

c002094e <x87Detect.nox87>:
c002094e:	b8 00 00 00 00       	mov    eax,0x0
c0020953:	5a                   	pop    edx
c0020954:	59                   	pop    ecx
c0020955:	5b                   	pop    ebx
c0020956:	c3                   	ret    

c0020957 <x87Save>:
c0020957:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002095b:	dd 30                	fnsave [eax]
c002095d:	c3                   	ret    

c002095e <x87Load>:
c002095e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020962:	dd 20                	frstor [eax]
c0020964:	c3                   	ret    

c0020965 <x87Init>:
c0020965:	0f 20 c0             	mov    eax,cr0
c0020968:	66 25 fb ff          	and    ax,0xfffb
c002096c:	66 0d 22 00          	or     ax,0x22
c0020970:	0f 22 c0             	mov    cr0,eax
c0020973:	db e3                	fninit 
c0020975:	0f 06                	clts   
c0020977:	d9 2d 34 09 02 c0    	fldcw  WORD PTR ds:0xc0020934
c002097d:	c3                   	ret    

c002097e <x87Close>:
c002097e:	c3                   	ret    
c002097f:	90                   	nop

c0020980 <__do_global_ctors_aux>:
c0020980:	a1 34 19 02 c0       	mov    eax,ds:0xc0021934
c0020985:	83 f8 ff             	cmp    eax,0xffffffff
c0020988:	74 1a                	je     c00209a4 <__do_global_ctors_aux+0x24>
c002098a:	55                   	push   ebp
c002098b:	89 e5                	mov    ebp,esp
c002098d:	53                   	push   ebx
c002098e:	52                   	push   edx
c002098f:	bb 34 19 02 c0       	mov    ebx,0xc0021934
c0020994:	ff d0                	call   eax
c0020996:	83 eb 04             	sub    ebx,0x4
c0020999:	8b 03                	mov    eax,DWORD PTR [ebx]
c002099b:	83 f8 ff             	cmp    eax,0xffffffff
c002099e:	75 f4                	jne    c0020994 <__do_global_ctors_aux+0x14>
c00209a0:	58                   	pop    eax
c00209a1:	5b                   	pop    ebx
c00209a2:	5d                   	pop    ebp
c00209a3:	c3                   	ret    
c00209a4:	c3                   	ret    
c00209a5:	66 90                	xchg   ax,ax
c00209a7:	90                   	nop

c00209a8 <__divdi3>:
c00209a8:	55                   	push   ebp
c00209a9:	57                   	push   edi
c00209aa:	56                   	push   esi
c00209ab:	53                   	push   ebx
c00209ac:	83 ec 1c             	sub    esp,0x1c
c00209af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00209b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00209b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00209ba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00209be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00209c6:	85 db                	test   ebx,ebx
c00209c8:	0f 88 8e 00 00 00    	js     c0020a5c <__divdi3+0xb4>
c00209ce:	89 dd                	mov    ebp,ebx
c00209d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00209d8:	89 d3                	mov    ebx,edx
c00209da:	85 d2                	test   edx,edx
c00209dc:	79 0d                	jns    c00209eb <__divdi3+0x43>
c00209de:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00209e2:	f7 d8                	neg    eax
c00209e4:	83 d2 00             	adc    edx,0x0
c00209e7:	f7 da                	neg    edx
c00209e9:	89 d3                	mov    ebx,edx
c00209eb:	89 c7                	mov    edi,eax
c00209ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00209f0:	85 db                	test   ebx,ebx
c00209f2:	75 48                	jne    c0020a3c <__divdi3+0x94>
c00209f4:	39 ef                	cmp    edi,ebp
c00209f6:	76 24                	jbe    c0020a1c <__divdi3+0x74>
c00209f8:	89 ea                	mov    edx,ebp
c00209fa:	f7 f7                	div    edi
c00209fc:	89 c1                	mov    ecx,eax
c00209fe:	31 f6                	xor    esi,esi
c0020a00:	89 c8                	mov    eax,ecx
c0020a02:	89 f2                	mov    edx,esi
c0020a04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020a08:	85 c9                	test   ecx,ecx
c0020a0a:	74 07                	je     c0020a13 <__divdi3+0x6b>
c0020a0c:	f7 d8                	neg    eax
c0020a0e:	83 d2 00             	adc    edx,0x0
c0020a11:	f7 da                	neg    edx
c0020a13:	83 c4 1c             	add    esp,0x1c
c0020a16:	5b                   	pop    ebx
c0020a17:	5e                   	pop    esi
c0020a18:	5f                   	pop    edi
c0020a19:	5d                   	pop    ebp
c0020a1a:	c3                   	ret    
c0020a1b:	90                   	nop
c0020a1c:	85 ff                	test   edi,edi
c0020a1e:	75 0b                	jne    c0020a2b <__divdi3+0x83>
c0020a20:	b8 01 00 00 00       	mov    eax,0x1
c0020a25:	31 d2                	xor    edx,edx
c0020a27:	f7 f3                	div    ebx
c0020a29:	89 c7                	mov    edi,eax
c0020a2b:	31 d2                	xor    edx,edx
c0020a2d:	89 e8                	mov    eax,ebp
c0020a2f:	f7 f7                	div    edi
c0020a31:	89 c6                	mov    esi,eax
c0020a33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a36:	f7 f7                	div    edi
c0020a38:	89 c1                	mov    ecx,eax
c0020a3a:	eb c4                	jmp    c0020a00 <__divdi3+0x58>
c0020a3c:	39 eb                	cmp    ebx,ebp
c0020a3e:	77 3c                	ja     c0020a7c <__divdi3+0xd4>
c0020a40:	0f bd f3             	bsr    esi,ebx
c0020a43:	83 f6 1f             	xor    esi,0x1f
c0020a46:	75 40                	jne    c0020a88 <__divdi3+0xe0>
c0020a48:	39 eb                	cmp    ebx,ebp
c0020a4a:	72 09                	jb     c0020a55 <__divdi3+0xad>
c0020a4c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020a4f:	0f 87 97 00 00 00    	ja     c0020aec <__divdi3+0x144>
c0020a55:	b9 01 00 00 00       	mov    ecx,0x1
c0020a5a:	eb a4                	jmp    c0020a00 <__divdi3+0x58>
c0020a5c:	f7 d9                	neg    ecx
c0020a5e:	83 d3 00             	adc    ebx,0x0
c0020a61:	f7 db                	neg    ebx
c0020a63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020a66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020a6a:	89 dd                	mov    ebp,ebx
c0020a6c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020a74:	e9 5f ff ff ff       	jmp    c00209d8 <__divdi3+0x30>
c0020a79:	8d 76 00             	lea    esi,[esi+0x0]
c0020a7c:	31 f6                	xor    esi,esi
c0020a7e:	31 c9                	xor    ecx,ecx
c0020a80:	e9 7b ff ff ff       	jmp    c0020a00 <__divdi3+0x58>
c0020a85:	8d 76 00             	lea    esi,[esi+0x0]
c0020a88:	b8 20 00 00 00       	mov    eax,0x20
c0020a8d:	29 f0                	sub    eax,esi
c0020a8f:	89 f1                	mov    ecx,esi
c0020a91:	d3 e3                	shl    ebx,cl
c0020a93:	89 fa                	mov    edx,edi
c0020a95:	88 c1                	mov    cl,al
c0020a97:	d3 ea                	shr    edx,cl
c0020a99:	09 da                	or     edx,ebx
c0020a9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a9f:	89 f1                	mov    ecx,esi
c0020aa1:	d3 e7                	shl    edi,cl
c0020aa3:	89 eb                	mov    ebx,ebp
c0020aa5:	88 c1                	mov    cl,al
c0020aa7:	d3 eb                	shr    ebx,cl
c0020aa9:	89 f1                	mov    ecx,esi
c0020aab:	d3 e5                	shl    ebp,cl
c0020aad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020ab0:	88 c1                	mov    cl,al
c0020ab2:	d3 ea                	shr    edx,cl
c0020ab4:	09 d5                	or     ebp,edx
c0020ab6:	89 e8                	mov    eax,ebp
c0020ab8:	89 da                	mov    edx,ebx
c0020aba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020abe:	89 d3                	mov    ebx,edx
c0020ac0:	89 c5                	mov    ebp,eax
c0020ac2:	f7 e7                	mul    edi
c0020ac4:	39 d3                	cmp    ebx,edx
c0020ac6:	72 18                	jb     c0020ae0 <__divdi3+0x138>
c0020ac8:	74 0a                	je     c0020ad4 <__divdi3+0x12c>
c0020aca:	89 e9                	mov    ecx,ebp
c0020acc:	31 f6                	xor    esi,esi
c0020ace:	e9 2d ff ff ff       	jmp    c0020a00 <__divdi3+0x58>
c0020ad3:	90                   	nop
c0020ad4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020ad7:	89 f1                	mov    ecx,esi
c0020ad9:	d3 e7                	shl    edi,cl
c0020adb:	39 c7                	cmp    edi,eax
c0020add:	73 eb                	jae    c0020aca <__divdi3+0x122>
c0020adf:	90                   	nop
c0020ae0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020ae3:	31 f6                	xor    esi,esi
c0020ae5:	e9 16 ff ff ff       	jmp    c0020a00 <__divdi3+0x58>
c0020aea:	66 90                	xchg   ax,ax
c0020aec:	31 c9                	xor    ecx,ecx
c0020aee:	e9 0d ff ff ff       	jmp    c0020a00 <__divdi3+0x58>
c0020af3:	90                   	nop

c0020af4 <__moddi3>:
c0020af4:	55                   	push   ebp
c0020af5:	57                   	push   edi
c0020af6:	56                   	push   esi
c0020af7:	53                   	push   ebx
c0020af8:	83 ec 2c             	sub    esp,0x2c
c0020afb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020aff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020b03:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020b07:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020b0b:	85 db                	test   ebx,ebx
c0020b0d:	0f 88 85 00 00 00    	js     c0020b98 <__moddi3+0xa4>
c0020b13:	89 de                	mov    esi,ebx
c0020b15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020b1d:	89 d7                	mov    edi,edx
c0020b1f:	85 d2                	test   edx,edx
c0020b21:	79 09                	jns    c0020b2c <__moddi3+0x38>
c0020b23:	f7 d8                	neg    eax
c0020b25:	83 d2 00             	adc    edx,0x0
c0020b28:	f7 da                	neg    edx
c0020b2a:	89 d7                	mov    edi,edx
c0020b2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b30:	89 cd                	mov    ebp,ecx
c0020b32:	85 ff                	test   edi,edi
c0020b34:	75 52                	jne    c0020b88 <__moddi3+0x94>
c0020b36:	89 c3                	mov    ebx,eax
c0020b38:	39 f0                	cmp    eax,esi
c0020b3a:	76 24                	jbe    c0020b60 <__moddi3+0x6c>
c0020b3c:	89 c8                	mov    eax,ecx
c0020b3e:	89 f2                	mov    edx,esi
c0020b40:	f7 f3                	div    ebx
c0020b42:	89 d6                	mov    esi,edx
c0020b44:	89 f0                	mov    eax,esi
c0020b46:	31 d2                	xor    edx,edx
c0020b48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b4c:	85 c9                	test   ecx,ecx
c0020b4e:	74 07                	je     c0020b57 <__moddi3+0x63>
c0020b50:	f7 d8                	neg    eax
c0020b52:	83 d2 00             	adc    edx,0x0
c0020b55:	f7 da                	neg    edx
c0020b57:	83 c4 2c             	add    esp,0x2c
c0020b5a:	5b                   	pop    ebx
c0020b5b:	5e                   	pop    esi
c0020b5c:	5f                   	pop    edi
c0020b5d:	5d                   	pop    ebp
c0020b5e:	c3                   	ret    
c0020b5f:	90                   	nop
c0020b60:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020b64:	85 db                	test   ebx,ebx
c0020b66:	75 0d                	jne    c0020b75 <__moddi3+0x81>
c0020b68:	b8 01 00 00 00       	mov    eax,0x1
c0020b6d:	31 d2                	xor    edx,edx
c0020b6f:	f7 f7                	div    edi
c0020b71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b75:	89 f0                	mov    eax,esi
c0020b77:	31 d2                	xor    edx,edx
c0020b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020b7d:	f7 f7                	div    edi
c0020b7f:	89 e8                	mov    eax,ebp
c0020b81:	f7 f7                	div    edi
c0020b83:	89 d6                	mov    esi,edx
c0020b85:	eb bd                	jmp    c0020b44 <__moddi3+0x50>
c0020b87:	90                   	nop
c0020b88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020b8c:	39 f7                	cmp    edi,esi
c0020b8e:	76 20                	jbe    c0020bb0 <__moddi3+0xbc>
c0020b90:	89 c8                	mov    eax,ecx
c0020b92:	89 f2                	mov    edx,esi
c0020b94:	eb b2                	jmp    c0020b48 <__moddi3+0x54>
c0020b96:	66 90                	xchg   ax,ax
c0020b98:	f7 d9                	neg    ecx
c0020b9a:	83 d3 00             	adc    ebx,0x0
c0020b9d:	f7 db                	neg    ebx
c0020b9f:	89 de                	mov    esi,ebx
c0020ba1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020ba9:	e9 6f ff ff ff       	jmp    c0020b1d <__moddi3+0x29>
c0020bae:	66 90                	xchg   ax,ax
c0020bb0:	0f bd c7             	bsr    eax,edi
c0020bb3:	83 f0 1f             	xor    eax,0x1f
c0020bb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020bba:	75 24                	jne    c0020be0 <__moddi3+0xec>
c0020bbc:	39 f7                	cmp    edi,esi
c0020bbe:	72 06                	jb     c0020bc6 <__moddi3+0xd2>
c0020bc0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020bc4:	77 0c                	ja     c0020bd2 <__moddi3+0xde>
c0020bc6:	89 e9                	mov    ecx,ebp
c0020bc8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020bcc:	19 fe                	sbb    esi,edi
c0020bce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bd6:	89 f2                	mov    edx,esi
c0020bd8:	e9 6b ff ff ff       	jmp    c0020b48 <__moddi3+0x54>
c0020bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0020be0:	b8 20 00 00 00       	mov    eax,0x20
c0020be5:	89 c2                	mov    edx,eax
c0020be7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020beb:	29 da                	sub    edx,ebx
c0020bed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020bf1:	88 d9                	mov    cl,bl
c0020bf3:	d3 e7                	shl    edi,cl
c0020bf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bf9:	88 d1                	mov    cl,dl
c0020bfb:	d3 e8                	shr    eax,cl
c0020bfd:	09 c7                	or     edi,eax
c0020bff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020c03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020c07:	89 d8                	mov    eax,ebx
c0020c09:	88 d9                	mov    cl,bl
c0020c0b:	d3 e7                	shl    edi,cl
c0020c0d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020c11:	89 f3                	mov    ebx,esi
c0020c13:	88 d1                	mov    cl,dl
c0020c15:	d3 eb                	shr    ebx,cl
c0020c17:	89 c7                	mov    edi,eax
c0020c19:	88 c1                	mov    cl,al
c0020c1b:	d3 e6                	shl    esi,cl
c0020c1d:	89 e8                	mov    eax,ebp
c0020c1f:	88 d1                	mov    cl,dl
c0020c21:	d3 e8                	shr    eax,cl
c0020c23:	09 f0                	or     eax,esi
c0020c25:	89 f9                	mov    ecx,edi
c0020c27:	d3 e5                	shl    ebp,cl
c0020c29:	89 da                	mov    edx,ebx
c0020c2b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020c2f:	89 d3                	mov    ebx,edx
c0020c31:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020c35:	89 c6                	mov    esi,eax
c0020c37:	89 d1                	mov    ecx,edx
c0020c39:	39 d3                	cmp    ebx,edx
c0020c3b:	72 27                	jb     c0020c64 <__moddi3+0x170>
c0020c3d:	74 21                	je     c0020c60 <__moddi3+0x16c>
c0020c3f:	29 f5                	sub    ebp,esi
c0020c41:	19 cb                	sbb    ebx,ecx
c0020c43:	89 de                	mov    esi,ebx
c0020c45:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020c49:	d3 e6                	shl    esi,cl
c0020c4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020c4f:	89 f9                	mov    ecx,edi
c0020c51:	d3 ed                	shr    ebp,cl
c0020c53:	09 ee                	or     esi,ebp
c0020c55:	89 f0                	mov    eax,esi
c0020c57:	d3 eb                	shr    ebx,cl
c0020c59:	89 da                	mov    edx,ebx
c0020c5b:	e9 e8 fe ff ff       	jmp    c0020b48 <__moddi3+0x54>
c0020c60:	39 c5                	cmp    ebp,eax
c0020c62:	73 db                	jae    c0020c3f <__moddi3+0x14b>
c0020c64:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020c68:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020c6c:	89 d1                	mov    ecx,edx
c0020c6e:	89 c6                	mov    esi,eax
c0020c70:	eb cd                	jmp    c0020c3f <__moddi3+0x14b>
c0020c72:	66 90                	xchg   ax,ax

c0020c74 <__udivdi3>:
c0020c74:	55                   	push   ebp
c0020c75:	57                   	push   edi
c0020c76:	56                   	push   esi
c0020c77:	53                   	push   ebx
c0020c78:	83 ec 1c             	sub    esp,0x1c
c0020c7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020c7f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020c83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020c87:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c8b:	85 d2                	test   edx,edx
c0020c8d:	75 41                	jne    c0020cd0 <__udivdi3+0x5c>
c0020c8f:	39 f7                	cmp    edi,esi
c0020c91:	76 15                	jbe    c0020ca8 <__udivdi3+0x34>
c0020c93:	89 e8                	mov    eax,ebp
c0020c95:	89 f2                	mov    edx,esi
c0020c97:	f7 f7                	div    edi
c0020c99:	31 db                	xor    ebx,ebx
c0020c9b:	89 da                	mov    edx,ebx
c0020c9d:	83 c4 1c             	add    esp,0x1c
c0020ca0:	5b                   	pop    ebx
c0020ca1:	5e                   	pop    esi
c0020ca2:	5f                   	pop    edi
c0020ca3:	5d                   	pop    ebp
c0020ca4:	c3                   	ret    
c0020ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ca8:	89 f9                	mov    ecx,edi
c0020caa:	85 ff                	test   edi,edi
c0020cac:	75 0b                	jne    c0020cb9 <__udivdi3+0x45>
c0020cae:	b8 01 00 00 00       	mov    eax,0x1
c0020cb3:	31 d2                	xor    edx,edx
c0020cb5:	f7 f7                	div    edi
c0020cb7:	89 c1                	mov    ecx,eax
c0020cb9:	31 d2                	xor    edx,edx
c0020cbb:	89 f0                	mov    eax,esi
c0020cbd:	f7 f1                	div    ecx
c0020cbf:	89 c3                	mov    ebx,eax
c0020cc1:	89 e8                	mov    eax,ebp
c0020cc3:	f7 f1                	div    ecx
c0020cc5:	89 da                	mov    edx,ebx
c0020cc7:	83 c4 1c             	add    esp,0x1c
c0020cca:	5b                   	pop    ebx
c0020ccb:	5e                   	pop    esi
c0020ccc:	5f                   	pop    edi
c0020ccd:	5d                   	pop    ebp
c0020cce:	c3                   	ret    
c0020ccf:	90                   	nop
c0020cd0:	39 f2                	cmp    edx,esi
c0020cd2:	77 1c                	ja     c0020cf0 <__udivdi3+0x7c>
c0020cd4:	0f bd da             	bsr    ebx,edx
c0020cd7:	83 f3 1f             	xor    ebx,0x1f
c0020cda:	75 24                	jne    c0020d00 <__udivdi3+0x8c>
c0020cdc:	39 f2                	cmp    edx,esi
c0020cde:	72 08                	jb     c0020ce8 <__udivdi3+0x74>
c0020ce0:	39 ef                	cmp    edi,ebp
c0020ce2:	0f 87 84 00 00 00    	ja     c0020d6c <__udivdi3+0xf8>
c0020ce8:	b8 01 00 00 00       	mov    eax,0x1
c0020ced:	eb ac                	jmp    c0020c9b <__udivdi3+0x27>
c0020cef:	90                   	nop
c0020cf0:	31 db                	xor    ebx,ebx
c0020cf2:	31 c0                	xor    eax,eax
c0020cf4:	89 da                	mov    edx,ebx
c0020cf6:	83 c4 1c             	add    esp,0x1c
c0020cf9:	5b                   	pop    ebx
c0020cfa:	5e                   	pop    esi
c0020cfb:	5f                   	pop    edi
c0020cfc:	5d                   	pop    ebp
c0020cfd:	c3                   	ret    
c0020cfe:	66 90                	xchg   ax,ax
c0020d00:	b8 20 00 00 00       	mov    eax,0x20
c0020d05:	29 d8                	sub    eax,ebx
c0020d07:	88 d9                	mov    cl,bl
c0020d09:	d3 e2                	shl    edx,cl
c0020d0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020d0f:	89 fa                	mov    edx,edi
c0020d11:	88 c1                	mov    cl,al
c0020d13:	d3 ea                	shr    edx,cl
c0020d15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d19:	09 d1                	or     ecx,edx
c0020d1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020d1f:	88 d9                	mov    cl,bl
c0020d21:	d3 e7                	shl    edi,cl
c0020d23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020d27:	89 f7                	mov    edi,esi
c0020d29:	88 c1                	mov    cl,al
c0020d2b:	d3 ef                	shr    edi,cl
c0020d2d:	88 d9                	mov    cl,bl
c0020d2f:	d3 e6                	shl    esi,cl
c0020d31:	89 ea                	mov    edx,ebp
c0020d33:	88 c1                	mov    cl,al
c0020d35:	d3 ea                	shr    edx,cl
c0020d37:	09 d6                	or     esi,edx
c0020d39:	89 f0                	mov    eax,esi
c0020d3b:	89 fa                	mov    edx,edi
c0020d3d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020d41:	89 d7                	mov    edi,edx
c0020d43:	89 c6                	mov    esi,eax
c0020d45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020d49:	39 d7                	cmp    edi,edx
c0020d4b:	72 13                	jb     c0020d60 <__udivdi3+0xec>
c0020d4d:	74 09                	je     c0020d58 <__udivdi3+0xe4>
c0020d4f:	89 f0                	mov    eax,esi
c0020d51:	31 db                	xor    ebx,ebx
c0020d53:	e9 43 ff ff ff       	jmp    c0020c9b <__udivdi3+0x27>
c0020d58:	88 d9                	mov    cl,bl
c0020d5a:	d3 e5                	shl    ebp,cl
c0020d5c:	39 c5                	cmp    ebp,eax
c0020d5e:	73 ef                	jae    c0020d4f <__udivdi3+0xdb>
c0020d60:	8d 46 ff             	lea    eax,[esi-0x1]
c0020d63:	31 db                	xor    ebx,ebx
c0020d65:	e9 31 ff ff ff       	jmp    c0020c9b <__udivdi3+0x27>
c0020d6a:	66 90                	xchg   ax,ax
c0020d6c:	31 c0                	xor    eax,eax
c0020d6e:	e9 28 ff ff ff       	jmp    c0020c9b <__udivdi3+0x27>
c0020d73:	90                   	nop

c0020d74 <__umoddi3>:
c0020d74:	55                   	push   ebp
c0020d75:	57                   	push   edi
c0020d76:	56                   	push   esi
c0020d77:	53                   	push   ebx
c0020d78:	83 ec 1c             	sub    esp,0x1c
c0020d7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020d7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020d83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020d87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d8b:	89 da                	mov    edx,ebx
c0020d8d:	85 c0                	test   eax,eax
c0020d8f:	75 37                	jne    c0020dc8 <__umoddi3+0x54>
c0020d91:	39 df                	cmp    edi,ebx
c0020d93:	76 13                	jbe    c0020da8 <__umoddi3+0x34>
c0020d95:	89 f0                	mov    eax,esi
c0020d97:	f7 f7                	div    edi
c0020d99:	89 d0                	mov    eax,edx
c0020d9b:	31 d2                	xor    edx,edx
c0020d9d:	83 c4 1c             	add    esp,0x1c
c0020da0:	5b                   	pop    ebx
c0020da1:	5e                   	pop    esi
c0020da2:	5f                   	pop    edi
c0020da3:	5d                   	pop    ebp
c0020da4:	c3                   	ret    
c0020da5:	8d 76 00             	lea    esi,[esi+0x0]
c0020da8:	89 fd                	mov    ebp,edi
c0020daa:	85 ff                	test   edi,edi
c0020dac:	75 0b                	jne    c0020db9 <__umoddi3+0x45>
c0020dae:	b8 01 00 00 00       	mov    eax,0x1
c0020db3:	31 d2                	xor    edx,edx
c0020db5:	f7 f7                	div    edi
c0020db7:	89 c5                	mov    ebp,eax
c0020db9:	89 d8                	mov    eax,ebx
c0020dbb:	31 d2                	xor    edx,edx
c0020dbd:	f7 f5                	div    ebp
c0020dbf:	89 f0                	mov    eax,esi
c0020dc1:	f7 f5                	div    ebp
c0020dc3:	89 d0                	mov    eax,edx
c0020dc5:	eb d4                	jmp    c0020d9b <__umoddi3+0x27>
c0020dc7:	90                   	nop
c0020dc8:	89 f1                	mov    ecx,esi
c0020dca:	39 d8                	cmp    eax,ebx
c0020dcc:	76 0a                	jbe    c0020dd8 <__umoddi3+0x64>
c0020dce:	89 f0                	mov    eax,esi
c0020dd0:	83 c4 1c             	add    esp,0x1c
c0020dd3:	5b                   	pop    ebx
c0020dd4:	5e                   	pop    esi
c0020dd5:	5f                   	pop    edi
c0020dd6:	5d                   	pop    ebp
c0020dd7:	c3                   	ret    
c0020dd8:	0f bd e8             	bsr    ebp,eax
c0020ddb:	83 f5 1f             	xor    ebp,0x1f
c0020dde:	75 1c                	jne    c0020dfc <__umoddi3+0x88>
c0020de0:	39 d8                	cmp    eax,ebx
c0020de2:	72 04                	jb     c0020de8 <__umoddi3+0x74>
c0020de4:	39 f7                	cmp    edi,esi
c0020de6:	77 08                	ja     c0020df0 <__umoddi3+0x7c>
c0020de8:	89 da                	mov    edx,ebx
c0020dea:	29 fe                	sub    esi,edi
c0020dec:	19 c2                	sbb    edx,eax
c0020dee:	89 f1                	mov    ecx,esi
c0020df0:	89 c8                	mov    eax,ecx
c0020df2:	83 c4 1c             	add    esp,0x1c
c0020df5:	5b                   	pop    ebx
c0020df6:	5e                   	pop    esi
c0020df7:	5f                   	pop    edi
c0020df8:	5d                   	pop    ebp
c0020df9:	c3                   	ret    
c0020dfa:	66 90                	xchg   ax,ax
c0020dfc:	ba 20 00 00 00       	mov    edx,0x20
c0020e01:	29 ea                	sub    edx,ebp
c0020e03:	89 e9                	mov    ecx,ebp
c0020e05:	d3 e0                	shl    eax,cl
c0020e07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e0b:	89 f8                	mov    eax,edi
c0020e0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020e11:	88 d1                	mov    cl,dl
c0020e13:	d3 e8                	shr    eax,cl
c0020e15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020e19:	09 c1                	or     ecx,eax
c0020e1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020e1f:	89 e9                	mov    ecx,ebp
c0020e21:	d3 e7                	shl    edi,cl
c0020e23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020e27:	89 d8                	mov    eax,ebx
c0020e29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020e2d:	88 d1                	mov    cl,dl
c0020e2f:	d3 e8                	shr    eax,cl
c0020e31:	89 c7                	mov    edi,eax
c0020e33:	89 e9                	mov    ecx,ebp
c0020e35:	d3 e3                	shl    ebx,cl
c0020e37:	89 f0                	mov    eax,esi
c0020e39:	88 d1                	mov    cl,dl
c0020e3b:	d3 e8                	shr    eax,cl
c0020e3d:	09 d8                	or     eax,ebx
c0020e3f:	89 e9                	mov    ecx,ebp
c0020e41:	d3 e6                	shl    esi,cl
c0020e43:	89 f3                	mov    ebx,esi
c0020e45:	89 fa                	mov    edx,edi
c0020e47:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020e4b:	89 d1                	mov    ecx,edx
c0020e4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020e51:	89 c6                	mov    esi,eax
c0020e53:	89 d7                	mov    edi,edx
c0020e55:	39 d1                	cmp    ecx,edx
c0020e57:	72 27                	jb     c0020e80 <__umoddi3+0x10c>
c0020e59:	74 21                	je     c0020e7c <__umoddi3+0x108>
c0020e5b:	89 ca                	mov    edx,ecx
c0020e5d:	29 f3                	sub    ebx,esi
c0020e5f:	19 fa                	sbb    edx,edi
c0020e61:	89 d0                	mov    eax,edx
c0020e63:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020e67:	d3 e0                	shl    eax,cl
c0020e69:	89 e9                	mov    ecx,ebp
c0020e6b:	d3 eb                	shr    ebx,cl
c0020e6d:	09 d8                	or     eax,ebx
c0020e6f:	d3 ea                	shr    edx,cl
c0020e71:	83 c4 1c             	add    esp,0x1c
c0020e74:	5b                   	pop    ebx
c0020e75:	5e                   	pop    esi
c0020e76:	5f                   	pop    edi
c0020e77:	5d                   	pop    ebp
c0020e78:	c3                   	ret    
c0020e79:	8d 76 00             	lea    esi,[esi+0x0]
c0020e7c:	39 c3                	cmp    ebx,eax
c0020e7e:	73 db                	jae    c0020e5b <__umoddi3+0xe7>
c0020e80:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020e84:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0020e88:	89 d7                	mov    edi,edx
c0020e8a:	89 c6                	mov    esi,eax
c0020e8c:	eb cd                	jmp    c0020e5b <__umoddi3+0xe7>

Disassembly of section .init:

c0020e8e <_init>:
c0020e8e:	55                   	push   ebp
c0020e8f:	89 e5                	mov    ebp,esp
c0020e91:	e8 5e f2 fd ff       	call   c00000f4 <frame_dummy>
c0020e96:	e8 e5 fa ff ff       	call   c0020980 <__do_global_ctors_aux>
c0020e9b:	5d                   	pop    ebp
c0020e9c:	c3                   	ret    

Disassembly of section .fini:

c0020e9d <_fini>:
c0020e9d:	55                   	push   ebp
c0020e9e:	89 e5                	mov    ebp,esp
c0020ea0:	e8 df f1 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0020ea5:	5d                   	pop    ebp
c0020ea6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0020ea8 <DriverlessDevice::~DriverlessDevice()>:
c0020ea8:	ba 40 28 02 c0       	mov    edx,0xc0022840
c0020ead:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020eb1:	89 10                	mov    DWORD PTR [eax],edx
c0020eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020eb7:	50                   	push   eax
c0020eb8:	e8 f3 82 fe ff       	call   c00091b0 <Device::~Device()>
c0020ebd:	83 c4 04             	add    esp,0x4
c0020ec0:	90                   	nop
c0020ec1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0020ec2 <DriverlessDevice::~DriverlessDevice()>:
c0020ec2:	83 ec 0c             	sub    esp,0xc
c0020ec5:	83 ec 0c             	sub    esp,0xc
c0020ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ecc:	e8 d7 ff ff ff       	call   c0020ea8 <DriverlessDevice::~DriverlessDevice()>
c0020ed1:	83 c4 10             	add    esp,0x10
c0020ed4:	83 ec 08             	sub    esp,0x8
c0020ed7:	68 58 01 00 00       	push   0x158
c0020edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ee0:	e8 2a bc fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c0020ee5:	83 c4 10             	add    esp,0x10
c0020ee8:	83 c4 0c             	add    esp,0xc
c0020eeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0020eec <LinkedList<Device>::addElement(Device*)>:
c0020eec:	83 ec 0c             	sub    esp,0xc
c0020eef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020ef4:	75 10                	jne    c0020f06 <LinkedList<Device>::addElement(Device*)+0x1a>
c0020ef6:	83 ec 0c             	sub    esp,0xc
c0020ef9:	68 d4 27 02 c0       	push   0xc00227d4
c0020efe:	e8 db e7 fe ff       	call   c000f6de <KePanic(char const*)>
c0020f03:	83 c4 10             	add    esp,0x10
c0020f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f0c:	85 c0                	test   eax,eax
c0020f0e:	74 3a                	je     c0020f4a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f17:	85 c0                	test   eax,eax
c0020f19:	74 2f                	je     c0020f4a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f26:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0020f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f3e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020f48:	eb 68                	jmp    c0020fb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f50:	85 c0                	test   eax,eax
c0020f52:	75 4e                	jne    c0020fa2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f5b:	85 c0                	test   eax,eax
c0020f5d:	75 43                	jne    c0020fa2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f67:	89 10                	mov    DWORD PTR [eax],edx
c0020f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f7b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020f8c:	85 c0                	test   eax,eax
c0020f8e:	74 22                	je     c0020fb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020f90:	83 ec 0c             	sub    esp,0xc
c0020f93:	68 f6 27 02 c0       	push   0xc00227f6
c0020f98:	e8 41 e7 fe ff       	call   c000f6de <KePanic(char const*)>
c0020f9d:	83 c4 10             	add    esp,0x10
c0020fa0:	eb 10                	jmp    c0020fb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020fa2:	83 ec 0c             	sub    esp,0xc
c0020fa5:	68 00 28 02 c0       	push   0xc0022800
c0020faa:	e8 2f e7 fe ff       	call   c000f6de <KePanic(char const*)>
c0020faf:	83 c4 10             	add    esp,0x10
c0020fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fb6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020fb9:	8d 50 01             	lea    edx,[eax+0x1]
c0020fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fc0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020fc3:	90                   	nop
c0020fc4:	83 c4 0c             	add    esp,0xc
c0020fc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0020fc8 <LinkedList<Device>::LinkedList()>:
c0020fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020fdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fe1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020fe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ff6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ffd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021001:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021008:	90                   	nop
c0021009:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002100c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002100c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021010:	8b 00                	mov    eax,DWORD PTR [eax]
c0021012:	85 c0                	test   eax,eax
c0021014:	75 0e                	jne    c0021024 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002101a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002101d:	85 c0                	test   eax,eax
c002101f:	75 03                	jne    c0021024 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021021:	b0 01                	mov    al,0x1
c0021023:	c3                   	ret    
c0021024:	b0 00                	mov    al,0x0
c0021026:	90                   	nop
c0021027:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021028 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002102c:	8b 00                	mov    eax,DWORD PTR [eax]
c002102e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021030 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021030:	83 ec 0c             	sub    esp,0xc
c0021033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021037:	8b 00                	mov    eax,DWORD PTR [eax]
c0021039:	85 c0                	test   eax,eax
c002103b:	75 17                	jne    c0021054 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002103d:	83 ec 0c             	sub    esp,0xc
c0021040:	68 70 2a 02 c0       	push   0xc0022a70
c0021045:	e8 94 e6 fe ff       	call   c000f6de <KePanic(char const*)>
c002104a:	83 c4 10             	add    esp,0x10
c002104d:	e9 96 00 00 00       	jmp    c00210e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021052:	66 90                	xchg   ax,ax
c0021054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002105b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002105e:	85 c0                	test   eax,eax
c0021060:	0f 95 c0             	setne  al
c0021063:	0f b6 c0             	movzx  eax,al
c0021066:	85 c0                	test   eax,eax
c0021068:	74 12                	je     c002107c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002106a:	83 ec 0c             	sub    esp,0xc
c002106d:	68 bb 2a 02 c0       	push   0xc0022abb
c0021072:	e8 67 e6 fe ff       	call   c000f6de <KePanic(char const*)>
c0021077:	83 c4 10             	add    esp,0x10
c002107a:	66 90                	xchg   ax,ax
c002107c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021080:	8b 00                	mov    eax,DWORD PTR [eax]
c0021082:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021085:	85 c0                	test   eax,eax
c0021087:	0f 94 c0             	sete   al
c002108a:	0f b6 c0             	movzx  eax,al
c002108d:	85 c0                	test   eax,eax
c002108f:	74 33                	je     c00210c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021095:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002109b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002109f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210ad:	83 f8 01             	cmp    eax,0x1
c00210b0:	74 22                	je     c00210d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00210b2:	83 ec 0c             	sub    esp,0xc
c00210b5:	68 94 2a 02 c0       	push   0xc0022a94
c00210ba:	e8 1f e6 fe ff       	call   c000f6de <KePanic(char const*)>
c00210bf:	83 c4 10             	add    esp,0x10
c00210c2:	eb 10                	jmp    c00210d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00210c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00210ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00210cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210d1:	89 10                	mov    DWORD PTR [eax],edx
c00210d3:	90                   	nop
c00210d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210db:	8d 50 ff             	lea    edx,[eax-0x1]
c00210de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00210e5:	8d 76 00             	lea    esi,[esi+0x0]
c00210e8:	83 c4 0c             	add    esp,0xc
c00210eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00210ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00210ec:	83 ec 0c             	sub    esp,0xc
c00210ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00210f4:	75 12                	jne    c0021108 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00210f6:	83 ec 0c             	sub    esp,0xc
c00210f9:	68 d4 27 02 c0       	push   0xc00227d4
c00210fe:	e8 db e5 fe ff       	call   c000f6de <KePanic(char const*)>
c0021103:	83 c4 10             	add    esp,0x10
c0021106:	66 90                	xchg   ax,ax
c0021108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002110c:	8b 00                	mov    eax,DWORD PTR [eax]
c002110e:	85 c0                	test   eax,eax
c0021110:	74 36                	je     c0021148 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021119:	85 c0                	test   eax,eax
c002111b:	74 2b                	je     c0021148 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002111d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021121:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021124:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021128:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002112b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021133:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002113a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002113d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021144:	eb 6a                	jmp    c00211b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021146:	66 90                	xchg   ax,ax
c0021148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002114c:	8b 00                	mov    eax,DWORD PTR [eax]
c002114e:	85 c0                	test   eax,eax
c0021150:	75 4e                	jne    c00211a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021159:	85 c0                	test   eax,eax
c002115b:	75 43                	jne    c00211a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002115d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021161:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021165:	89 10                	mov    DWORD PTR [eax],edx
c0021167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002116b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002116f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021179:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021184:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021187:	85 c0                	test   eax,eax
c0021189:	74 25                	je     c00211b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002118b:	83 ec 0c             	sub    esp,0xc
c002118e:	68 f6 27 02 c0       	push   0xc00227f6
c0021193:	e8 46 e5 fe ff       	call   c000f6de <KePanic(char const*)>
c0021198:	83 c4 10             	add    esp,0x10
c002119b:	eb 13                	jmp    c00211b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002119d:	8d 76 00             	lea    esi,[esi+0x0]
c00211a0:	83 ec 0c             	sub    esp,0xc
c00211a3:	68 00 28 02 c0       	push   0xc0022800
c00211a8:	e8 31 e5 fe ff       	call   c000f6de <KePanic(char const*)>
c00211ad:	83 c4 10             	add    esp,0x10
c00211b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00211b7:	8d 50 01             	lea    edx,[eax+0x1]
c00211ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211c1:	90                   	nop
c00211c2:	83 c4 0c             	add    esp,0xc
c00211c5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00211c8 <ACPI::~ACPI()>:
c00211c8:	83 ec 0c             	sub    esp,0xc
c00211cb:	ba 6c 2e 02 c0       	mov    edx,0xc0022e6c
c00211d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d4:	89 10                	mov    DWORD PTR [eax],edx
c00211d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211da:	83 ec 0c             	sub    esp,0xc
c00211dd:	50                   	push   eax
c00211de:	e8 cd 7f fe ff       	call   c00091b0 <Device::~Device()>
c00211e3:	83 c4 10             	add    esp,0x10
c00211e6:	90                   	nop
c00211e7:	83 c4 0c             	add    esp,0xc
c00211ea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00211ec <ACPI::~ACPI()>:
c00211ec:	83 ec 0c             	sub    esp,0xc
c00211ef:	83 ec 0c             	sub    esp,0xc
c00211f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211f6:	e8 cd ff ff ff       	call   c00211c8 <ACPI::~ACPI()>
c00211fb:	83 c4 10             	add    esp,0x10
c00211fe:	83 ec 08             	sub    esp,0x8
c0021201:	68 64 12 00 00       	push   0x1264
c0021206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002120a:	e8 00 b9 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c002120f:	83 c4 10             	add    esp,0x10
c0021212:	83 c4 0c             	add    esp,0xc
c0021215:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021218 <LinkedList<Device>::~LinkedList()>:
c0021218:	90                   	nop
c0021219:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002121c <LinkedList<Device>::isEmpty()>:
c002121c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021220:	8b 00                	mov    eax,DWORD PTR [eax]
c0021222:	85 c0                	test   eax,eax
c0021224:	75 0e                	jne    c0021234 <LinkedList<Device>::isEmpty()+0x18>
c0021226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002122a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002122d:	85 c0                	test   eax,eax
c002122f:	75 03                	jne    c0021234 <LinkedList<Device>::isEmpty()+0x18>
c0021231:	b0 01                	mov    al,0x1
c0021233:	c3                   	ret    
c0021234:	b0 00                	mov    al,0x0
c0021236:	90                   	nop
c0021237:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021238 <LinkedList<Device>::getFirstElement()>:
c0021238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002123c:	8b 00                	mov    eax,DWORD PTR [eax]
c002123e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021240 <LinkedList<Device>::removeFirst()>:
c0021240:	83 ec 0c             	sub    esp,0xc
c0021243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021247:	8b 00                	mov    eax,DWORD PTR [eax]
c0021249:	85 c0                	test   eax,eax
c002124b:	75 17                	jne    c0021264 <LinkedList<Device>::removeFirst()+0x24>
c002124d:	83 ec 0c             	sub    esp,0xc
c0021250:	68 70 2a 02 c0       	push   0xc0022a70
c0021255:	e8 84 e4 fe ff       	call   c000f6de <KePanic(char const*)>
c002125a:	83 c4 10             	add    esp,0x10
c002125d:	e9 92 00 00 00       	jmp    c00212f4 <LinkedList<Device>::removeFirst()+0xb4>
c0021262:	66 90                	xchg   ax,ax
c0021264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021268:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002126b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021271:	85 c0                	test   eax,eax
c0021273:	74 13                	je     c0021288 <LinkedList<Device>::removeFirst()+0x48>
c0021275:	83 ec 0c             	sub    esp,0xc
c0021278:	68 bb 2a 02 c0       	push   0xc0022abb
c002127d:	e8 5c e4 fe ff       	call   c000f6de <KePanic(char const*)>
c0021282:	83 c4 10             	add    esp,0x10
c0021285:	8d 76 00             	lea    esi,[esi+0x0]
c0021288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128c:	8b 00                	mov    eax,DWORD PTR [eax]
c002128e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021294:	85 c0                	test   eax,eax
c0021296:	75 34                	jne    c00212cc <LinkedList<Device>::removeFirst()+0x8c>
c0021298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002129c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212b4:	83 f8 01             	cmp    eax,0x1
c00212b7:	74 27                	je     c00212e0 <LinkedList<Device>::removeFirst()+0xa0>
c00212b9:	83 ec 0c             	sub    esp,0xc
c00212bc:	68 94 2a 02 c0       	push   0xc0022a94
c00212c1:	e8 18 e4 fe ff       	call   c000f6de <KePanic(char const*)>
c00212c6:	83 c4 10             	add    esp,0x10
c00212c9:	eb 15                	jmp    c00212e0 <LinkedList<Device>::removeFirst()+0xa0>
c00212cb:	90                   	nop
c00212cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00212d2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00212d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dc:	89 10                	mov    DWORD PTR [eax],edx
c00212de:	66 90                	xchg   ax,ax
c00212e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212e7:	8d 50 ff             	lea    edx,[eax-0x1]
c00212ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212f1:	8d 76 00             	lea    esi,[esi+0x0]
c00212f4:	83 c4 0c             	add    esp,0xc
c00212f7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00212f8 <Computer::~Computer()>:
c00212f8:	83 ec 0c             	sub    esp,0xc
c00212fb:	ba 1c 31 02 c0       	mov    edx,0xc002311c
c0021300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021304:	89 10                	mov    DWORD PTR [eax],edx
c0021306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002130a:	83 ec 0c             	sub    esp,0xc
c002130d:	50                   	push   eax
c002130e:	e8 9d 7e fe ff       	call   c00091b0 <Device::~Device()>
c0021313:	83 c4 10             	add    esp,0x10
c0021316:	90                   	nop
c0021317:	83 c4 0c             	add    esp,0xc
c002131a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002131c <Computer::~Computer()>:
c002131c:	83 ec 0c             	sub    esp,0xc
c002131f:	83 ec 0c             	sub    esp,0xc
c0021322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021326:	e8 cd ff ff ff       	call   c00212f8 <Computer::~Computer()>
c002132b:	83 c4 10             	add    esp,0x10
c002132e:	83 ec 08             	sub    esp,0x8
c0021331:	68 6c 01 00 00       	push   0x16c
c0021336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002133a:	e8 d0 b7 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c002133f:	83 c4 10             	add    esp,0x10
c0021342:	83 c4 0c             	add    esp,0xc
c0021345:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021346 <idleCommon()>:
c0021346:	83 ec 0c             	sub    esp,0xc
c0021349:	fa                   	cli    
c002134a:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0021350:	e8 ab 4f ff ff       	call   c0016300 <schedule()>
c0021355:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c002135c:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0021363:	75 01                	jne    c0021366 <idleCommon()+0x20>
c0021365:	fb                   	sti    
c0021366:	83 c4 0c             	add    esp,0xc
c0021369:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002136a <LinkedList<UnixFile>::~LinkedList()>:
c002136a:	90                   	nop
c002136b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002136c <LinkedList<UnixFile>::LinkedList()>:
c002136c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021370:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002137a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021385:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002138c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021390:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002139a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00213ac:	90                   	nop
c00213ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00213ae <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00213ae:	83 ec 0c             	sub    esp,0xc
c00213b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00213b6:	75 10                	jne    c00213c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00213b8:	83 ec 0c             	sub    esp,0xc
c00213bb:	68 d4 27 02 c0       	push   0xc00227d4
c00213c0:	e8 19 e3 fe ff       	call   c000f6de <KePanic(char const*)>
c00213c5:	83 c4 10             	add    esp,0x10
c00213c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00213ce:	85 c0                	test   eax,eax
c00213d0:	74 34                	je     c0021406 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00213d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213d9:	85 c0                	test   eax,eax
c00213db:	74 29                	je     c0021406 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00213dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00213eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00213f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021404:	eb 65                	jmp    c002146b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002140a:	8b 00                	mov    eax,DWORD PTR [eax]
c002140c:	85 c0                	test   eax,eax
c002140e:	75 4b                	jne    c002145b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021414:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021417:	85 c0                	test   eax,eax
c0021419:	75 40                	jne    c002145b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002141b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002141f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021423:	89 10                	mov    DWORD PTR [eax],edx
c0021425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021429:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002142d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021437:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002143e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021442:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021445:	85 c0                	test   eax,eax
c0021447:	74 22                	je     c002146b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021449:	83 ec 0c             	sub    esp,0xc
c002144c:	68 f6 27 02 c0       	push   0xc00227f6
c0021451:	e8 88 e2 fe ff       	call   c000f6de <KePanic(char const*)>
c0021456:	83 c4 10             	add    esp,0x10
c0021459:	eb 10                	jmp    c002146b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002145b:	83 ec 0c             	sub    esp,0xc
c002145e:	68 00 28 02 c0       	push   0xc0022800
c0021463:	e8 76 e2 fe ff       	call   c000f6de <KePanic(char const*)>
c0021468:	83 c4 10             	add    esp,0x10
c002146b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002146f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021472:	8d 50 01             	lea    edx,[eax+0x1]
c0021475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021479:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002147c:	90                   	nop
c002147d:	83 c4 0c             	add    esp,0xc
c0021480:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021482 <LinkedList<UnixFile>::getFirstElement()>:
c0021482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021486:	8b 00                	mov    eax,DWORD PTR [eax]
c0021488:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002148a <LinkedList<UnixFile>::removeFirst()>:
c002148a:	83 ec 0c             	sub    esp,0xc
c002148d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021491:	8b 00                	mov    eax,DWORD PTR [eax]
c0021493:	85 c0                	test   eax,eax
c0021495:	75 12                	jne    c00214a9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021497:	83 ec 0c             	sub    esp,0xc
c002149a:	68 70 2a 02 c0       	push   0xc0022a70
c002149f:	e8 3a e2 fe ff       	call   c000f6de <KePanic(char const*)>
c00214a4:	83 c4 10             	add    esp,0x10
c00214a7:	eb 7e                	jmp    c0021527 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00214a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214b3:	85 c0                	test   eax,eax
c00214b5:	74 10                	je     c00214c7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00214b7:	83 ec 0c             	sub    esp,0xc
c00214ba:	68 bb 2a 02 c0       	push   0xc0022abb
c00214bf:	e8 1a e2 fe ff       	call   c000f6de <KePanic(char const*)>
c00214c4:	83 c4 10             	add    esp,0x10
c00214c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00214cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214d0:	85 c0                	test   eax,eax
c00214d2:	75 33                	jne    c0021507 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00214d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214f0:	83 f8 01             	cmp    eax,0x1
c00214f3:	74 21                	je     c0021516 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00214f5:	83 ec 0c             	sub    esp,0xc
c00214f8:	68 94 2a 02 c0       	push   0xc0022a94
c00214fd:	e8 dc e1 fe ff       	call   c000f6de <KePanic(char const*)>
c0021502:	83 c4 10             	add    esp,0x10
c0021505:	eb 0f                	jmp    c0021516 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002150b:	8b 00                	mov    eax,DWORD PTR [eax]
c002150d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021514:	89 10                	mov    DWORD PTR [eax],edx
c0021516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002151d:	8d 50 ff             	lea    edx,[eax-0x1]
c0021520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021524:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021527:	83 c4 0c             	add    esp,0xc
c002152a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002152c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002152c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021530:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021533:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021534 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021538:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002153b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002153c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002153c:	90                   	nop
c002153d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021540 <ThreadControlBlock::ThreadControlBlock()>:
c0021540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021544:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002154b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002154f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002155a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021565:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002156c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021570:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021577:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002157b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002157f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021583:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021587:	90                   	nop
c0021588:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002158c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002158c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021590:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002159a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00215ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00215cc:	90                   	nop
c00215cd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00215ce <CPU::~CPU()>:
c00215ce:	83 ec 0c             	sub    esp,0xc
c00215d1:	ba fc 46 02 c0       	mov    edx,0xc00246fc
c00215d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215da:	89 10                	mov    DWORD PTR [eax],edx
c00215dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e0:	83 ec 0c             	sub    esp,0xc
c00215e3:	50                   	push   eax
c00215e4:	e8 c7 7b fe ff       	call   c00091b0 <Device::~Device()>
c00215e9:	83 c4 10             	add    esp,0x10
c00215ec:	90                   	nop
c00215ed:	83 c4 0c             	add    esp,0xc
c00215f0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00215f2 <CPU::~CPU()>:
c00215f2:	83 ec 0c             	sub    esp,0xc
c00215f5:	83 ec 0c             	sub    esp,0xc
c00215f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215fc:	e8 cd ff ff ff       	call   c00215ce <CPU::~CPU()>
c0021601:	83 c4 10             	add    esp,0x10
c0021604:	83 ec 08             	sub    esp,0x8
c0021607:	68 78 11 00 00       	push   0x1178
c002160c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021610:	e8 fa b4 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c0021615:	83 c4 10             	add    esp,0x10
c0021618:	83 c4 0c             	add    esp,0xc
c002161b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002161c <PCI::~PCI()>:
c002161c:	83 ec 0c             	sub    esp,0xc
c002161f:	ba 60 4c 02 c0       	mov    edx,0xc0024c60
c0021624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021628:	89 10                	mov    DWORD PTR [eax],edx
c002162a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162e:	83 ec 0c             	sub    esp,0xc
c0021631:	50                   	push   eax
c0021632:	e8 09 73 fe ff       	call   c0008940 <Bus::~Bus()>
c0021637:	83 c4 10             	add    esp,0x10
c002163a:	90                   	nop
c002163b:	83 c4 0c             	add    esp,0xc
c002163e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021640 <PCI::~PCI()>:
c0021640:	83 ec 0c             	sub    esp,0xc
c0021643:	83 ec 0c             	sub    esp,0xc
c0021646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002164a:	e8 cd ff ff ff       	call   c002161c <PCI::~PCI()>
c002164f:	83 c4 10             	add    esp,0x10
c0021652:	83 ec 08             	sub    esp,0x8
c0021655:	68 5c 01 00 00       	push   0x15c
c002165a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002165e:	e8 ac b4 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c0021663:	83 c4 10             	add    esp,0x10
c0021666:	83 c4 0c             	add    esp,0xc
c0021669:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002166a <IDE::~IDE()>:
c002166a:	83 ec 0c             	sub    esp,0xc
c002166d:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c0021672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021676:	89 10                	mov    DWORD PTR [eax],edx
c0021678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002167c:	83 ec 0c             	sub    esp,0xc
c002167f:	50                   	push   eax
c0021680:	e8 bb 7f fe ff       	call   c0009640 <HardDiskController::~HardDiskController()>
c0021685:	83 c4 10             	add    esp,0x10
c0021688:	90                   	nop
c0021689:	83 c4 0c             	add    esp,0xc
c002168c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002168e <IDE::~IDE()>:
c002168e:	83 ec 0c             	sub    esp,0xc
c0021691:	83 ec 0c             	sub    esp,0xc
c0021694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021698:	e8 cd ff ff ff       	call   c002166a <IDE::~IDE()>
c002169d:	83 c4 10             	add    esp,0x10
c00216a0:	83 ec 08             	sub    esp,0x8
c00216a3:	68 70 02 00 00       	push   0x270
c00216a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ac:	e8 5e b4 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c00216b1:	83 c4 10             	add    esp,0x10
c00216b4:	83 c4 0c             	add    esp,0xc
c00216b7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00216b8 <SATABus::~SATABus()>:
c00216b8:	83 ec 0c             	sub    esp,0xc
c00216bb:	ba 00 4e 02 c0       	mov    edx,0xc0024e00
c00216c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c4:	89 10                	mov    DWORD PTR [eax],edx
c00216c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ca:	83 ec 0c             	sub    esp,0xc
c00216cd:	50                   	push   eax
c00216ce:	e8 6d 7f fe ff       	call   c0009640 <HardDiskController::~HardDiskController()>
c00216d3:	83 c4 10             	add    esp,0x10
c00216d6:	90                   	nop
c00216d7:	83 c4 0c             	add    esp,0xc
c00216da:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00216dc <SATABus::~SATABus()>:
c00216dc:	83 ec 0c             	sub    esp,0xc
c00216df:	83 ec 0c             	sub    esp,0xc
c00216e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216e6:	e8 cd ff ff ff       	call   c00216b8 <SATABus::~SATABus()>
c00216eb:	83 c4 10             	add    esp,0x10
c00216ee:	83 ec 08             	sub    esp,0x8
c00216f1:	68 64 01 00 00       	push   0x164
c00216f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216fa:	e8 10 b4 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	83 c4 0c             	add    esp,0xc
c0021705:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021706 <ATA::~ATA()>:
c0021706:	83 ec 0c             	sub    esp,0xc
c0021709:	ba e8 4e 02 c0       	mov    edx,0xc0024ee8
c002170e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021712:	89 10                	mov    DWORD PTR [eax],edx
c0021714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	50                   	push   eax
c002171c:	e8 01 80 fe ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c0021721:	83 c4 10             	add    esp,0x10
c0021724:	90                   	nop
c0021725:	83 c4 0c             	add    esp,0xc
c0021728:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002172a <ATA::~ATA()>:
c002172a:	83 ec 0c             	sub    esp,0xc
c002172d:	83 ec 0c             	sub    esp,0xc
c0021730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021734:	e8 cd ff ff ff       	call   c0021706 <ATA::~ATA()>
c0021739:	83 c4 10             	add    esp,0x10
c002173c:	83 ec 08             	sub    esp,0x8
c002173f:	68 8c 01 00 00       	push   0x18c
c0021744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021748:	e8 c2 b3 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c002174d:	83 c4 10             	add    esp,0x10
c0021750:	83 c4 0c             	add    esp,0xc
c0021753:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021754 <ATAPI::~ATAPI()>:
c0021754:	83 ec 0c             	sub    esp,0xc
c0021757:	ba 30 4f 02 c0       	mov    edx,0xc0024f30
c002175c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021760:	89 10                	mov    DWORD PTR [eax],edx
c0021762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021766:	83 ec 0c             	sub    esp,0xc
c0021769:	50                   	push   eax
c002176a:	e8 b3 7f fe ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c002176f:	83 c4 10             	add    esp,0x10
c0021772:	90                   	nop
c0021773:	83 c4 0c             	add    esp,0xc
c0021776:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021778 <ATAPI::~ATAPI()>:
c0021778:	83 ec 0c             	sub    esp,0xc
c002177b:	83 ec 0c             	sub    esp,0xc
c002177e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021782:	e8 cd ff ff ff       	call   c0021754 <ATAPI::~ATAPI()>
c0021787:	83 c4 10             	add    esp,0x10
c002178a:	83 ec 08             	sub    esp,0x8
c002178d:	68 84 01 00 00       	push   0x184
c0021792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021796:	e8 74 b3 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c002179b:	83 c4 10             	add    esp,0x10
c002179e:	83 c4 0c             	add    esp,0xc
c00217a1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00217a2 <SATA::~SATA()>:
c00217a2:	83 ec 0c             	sub    esp,0xc
c00217a5:	ba f0 4f 02 c0       	mov    edx,0xc0024ff0
c00217aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ae:	89 10                	mov    DWORD PTR [eax],edx
c00217b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b4:	83 ec 0c             	sub    esp,0xc
c00217b7:	50                   	push   eax
c00217b8:	e8 65 7f fe ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c00217bd:	83 c4 10             	add    esp,0x10
c00217c0:	90                   	nop
c00217c1:	83 c4 0c             	add    esp,0xc
c00217c4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00217c6 <SATA::~SATA()>:
c00217c6:	83 ec 0c             	sub    esp,0xc
c00217c9:	83 ec 0c             	sub    esp,0xc
c00217cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217d0:	e8 cd ff ff ff       	call   c00217a2 <SATA::~SATA()>
c00217d5:	83 c4 10             	add    esp,0x10
c00217d8:	83 ec 08             	sub    esp,0x8
c00217db:	68 7c 01 00 00       	push   0x17c
c00217e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217e4:	e8 26 b3 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c00217e9:	83 c4 10             	add    esp,0x10
c00217ec:	83 c4 0c             	add    esp,0xc
c00217ef:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00217f0 <SATAPI::~SATAPI()>:
c00217f0:	83 ec 0c             	sub    esp,0xc
c00217f3:	ba 14 51 02 c0       	mov    edx,0xc0025114
c00217f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217fc:	89 10                	mov    DWORD PTR [eax],edx
c00217fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021802:	83 ec 0c             	sub    esp,0xc
c0021805:	50                   	push   eax
c0021806:	e8 17 7f fe ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c002180b:	83 c4 10             	add    esp,0x10
c002180e:	90                   	nop
c002180f:	83 c4 0c             	add    esp,0xc
c0021812:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021814 <SATAPI::~SATAPI()>:
c0021814:	83 ec 0c             	sub    esp,0xc
c0021817:	83 ec 0c             	sub    esp,0xc
c002181a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002181e:	e8 cd ff ff ff       	call   c00217f0 <SATAPI::~SATAPI()>
c0021823:	83 c4 10             	add    esp,0x10
c0021826:	83 ec 08             	sub    esp,0x8
c0021829:	68 84 01 00 00       	push   0x184
c002182e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021832:	e8 d8 b2 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c0021837:	83 c4 10             	add    esp,0x10
c002183a:	83 c4 0c             	add    esp,0xc
c002183d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002183e <IOAPIC::~IOAPIC()>:
c002183e:	83 ec 0c             	sub    esp,0xc
c0021841:	ba 74 51 02 c0       	mov    edx,0xc0025174
c0021846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002184a:	89 10                	mov    DWORD PTR [eax],edx
c002184c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021850:	83 ec 0c             	sub    esp,0xc
c0021853:	50                   	push   eax
c0021854:	e8 57 79 fe ff       	call   c00091b0 <Device::~Device()>
c0021859:	83 c4 10             	add    esp,0x10
c002185c:	90                   	nop
c002185d:	83 c4 0c             	add    esp,0xc
c0021860:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021862 <IOAPIC::~IOAPIC()>:
c0021862:	83 ec 0c             	sub    esp,0xc
c0021865:	83 ec 0c             	sub    esp,0xc
c0021868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002186c:	e8 cd ff ff ff       	call   c002183e <IOAPIC::~IOAPIC()>
c0021871:	83 c4 10             	add    esp,0x10
c0021874:	83 ec 08             	sub    esp,0x8
c0021877:	68 68 01 00 00       	push   0x168
c002187c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021880:	e8 8a b2 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c0021885:	83 c4 10             	add    esp,0x10
c0021888:	83 c4 0c             	add    esp,0xc
c002188b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002188c <APICTimer::~APICTimer()>:
c002188c:	83 ec 0c             	sub    esp,0xc
c002188f:	ba bc 51 02 c0       	mov    edx,0xc00251bc
c0021894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021898:	89 10                	mov    DWORD PTR [eax],edx
c002189a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002189e:	83 ec 0c             	sub    esp,0xc
c00218a1:	50                   	push   eax
c00218a2:	e8 49 90 fe ff       	call   c000a8f0 <Timer::~Timer()>
c00218a7:	83 c4 10             	add    esp,0x10
c00218aa:	90                   	nop
c00218ab:	83 c4 0c             	add    esp,0xc
c00218ae:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00218b0 <APICTimer::~APICTimer()>:
c00218b0:	83 ec 0c             	sub    esp,0xc
c00218b3:	83 ec 0c             	sub    esp,0xc
c00218b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218ba:	e8 cd ff ff ff       	call   c002188c <APICTimer::~APICTimer()>
c00218bf:	83 c4 10             	add    esp,0x10
c00218c2:	83 ec 08             	sub    esp,0x8
c00218c5:	68 60 01 00 00       	push   0x160
c00218ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218ce:	e8 3c b2 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c00218d3:	83 c4 10             	add    esp,0x10
c00218d6:	83 c4 0c             	add    esp,0xc
c00218d9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00218dc <PIT::~PIT()>:
c00218dc:	83 ec 0c             	sub    esp,0xc
c00218df:	ba 0c 52 02 c0       	mov    edx,0xc002520c
c00218e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e8:	89 10                	mov    DWORD PTR [eax],edx
c00218ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ee:	83 ec 0c             	sub    esp,0xc
c00218f1:	50                   	push   eax
c00218f2:	e8 f9 8f fe ff       	call   c000a8f0 <Timer::~Timer()>
c00218f7:	83 c4 10             	add    esp,0x10
c00218fa:	90                   	nop
c00218fb:	83 c4 0c             	add    esp,0xc
c00218fe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021900 <PIT::~PIT()>:
c0021900:	83 ec 0c             	sub    esp,0xc
c0021903:	83 ec 0c             	sub    esp,0xc
c0021906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002190a:	e8 cd ff ff ff       	call   c00218dc <PIT::~PIT()>
c002190f:	83 c4 10             	add    esp,0x10
c0021912:	83 ec 08             	sub    esp,0x8
c0021915:	68 5c 01 00 00       	push   0x15c
c002191a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002191e:	e8 ec b1 fe ff       	call   c000cb0f <operator delete(void*, unsigned long)>
c0021923:	83 c4 10             	add    esp,0x10
c0021926:	83 c4 0c             	add    esp,0xc
c0021929:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be ff 34 02 c0       	mov    esi,0xc00234ff
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be 1b 35 02 c0       	mov    esi,0xc002351b
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
